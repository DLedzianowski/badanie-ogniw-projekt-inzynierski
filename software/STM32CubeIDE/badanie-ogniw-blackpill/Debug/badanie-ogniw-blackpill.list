
badanie-ogniw-blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001810c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002564  080182b0  080182b0  000192b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a814  0801a814  0001c410  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a814  0801a814  0001b814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a81c  0801a81c  0001c410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a81c  0801a81c  0001b81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a820  0801a820  0001b820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000410  20000000  0801a824  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048a8  20000410  0801ac34  0001c410  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004cb8  0801ac34  0001ccb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c410  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025c35  00000000  00000000  0001c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000066b1  00000000  00000000  00042075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020e8  00000000  00000000  00048728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018f5  00000000  00000000  0004a810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221a4  00000000  00000000  0004c105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031cbf  00000000  00000000  0006e2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a73b2  00000000  00000000  0009ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014731a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009de8  00000000  00000000  00147360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  00151148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000410 	.word	0x20000410
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08018294 	.word	0x08018294

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000414 	.word	0x20000414
 80001dc:	08018294 	.word	0x08018294

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 ba09 	b.w	80010cc <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9be 	b.w	80010cc <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	468e      	mov	lr, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	4688      	mov	r8, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4617      	mov	r7, r2
 8000de8:	d962      	bls.n	8000eb0 <__udivmoddi4+0xdc>
 8000dea:	fab2 f682 	clz	r6, r2
 8000dee:	b14e      	cbz	r6, 8000e04 <__udivmoddi4+0x30>
 8000df0:	f1c6 0320 	rsb	r3, r6, #32
 8000df4:	fa01 f806 	lsl.w	r8, r1, r6
 8000df8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dfc:	40b7      	lsls	r7, r6
 8000dfe:	ea43 0808 	orr.w	r8, r3, r8
 8000e02:	40b4      	lsls	r4, r6
 8000e04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e08:	fa1f fc87 	uxth.w	ip, r7
 8000e0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e28:	f080 80ea 	bcs.w	8001000 <__udivmoddi4+0x22c>
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f240 80e7 	bls.w	8001000 <__udivmoddi4+0x22c>
 8000e32:	3902      	subs	r1, #2
 8000e34:	443b      	add	r3, r7
 8000e36:	1a9a      	subs	r2, r3, r2
 8000e38:	b2a3      	uxth	r3, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e4a:	459c      	cmp	ip, r3
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x8e>
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e54:	f080 80d6 	bcs.w	8001004 <__udivmoddi4+0x230>
 8000e58:	459c      	cmp	ip, r3
 8000e5a:	f240 80d3 	bls.w	8001004 <__udivmoddi4+0x230>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3802      	subs	r0, #2
 8000e62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e66:	eba3 030c 	sub.w	r3, r3, ip
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11d      	cbz	r5, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40f3      	lsrs	r3, r6
 8000e70:	2200      	movs	r2, #0
 8000e72:	e9c5 3200 	strd	r3, r2, [r5]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d905      	bls.n	8000e8a <__udivmoddi4+0xb6>
 8000e7e:	b10d      	cbz	r5, 8000e84 <__udivmoddi4+0xb0>
 8000e80:	e9c5 0100 	strd	r0, r1, [r5]
 8000e84:	2100      	movs	r1, #0
 8000e86:	4608      	mov	r0, r1
 8000e88:	e7f5      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000e8a:	fab3 f183 	clz	r1, r3
 8000e8e:	2900      	cmp	r1, #0
 8000e90:	d146      	bne.n	8000f20 <__udivmoddi4+0x14c>
 8000e92:	4573      	cmp	r3, lr
 8000e94:	d302      	bcc.n	8000e9c <__udivmoddi4+0xc8>
 8000e96:	4282      	cmp	r2, r0
 8000e98:	f200 8105 	bhi.w	80010a6 <__udivmoddi4+0x2d2>
 8000e9c:	1a84      	subs	r4, r0, r2
 8000e9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	4690      	mov	r8, r2
 8000ea6:	2d00      	cmp	r5, #0
 8000ea8:	d0e5      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eaa:	e9c5 4800 	strd	r4, r8, [r5]
 8000eae:	e7e2      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	f000 8090 	beq.w	8000fd6 <__udivmoddi4+0x202>
 8000eb6:	fab2 f682 	clz	r6, r2
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	f040 80a4 	bne.w	8001008 <__udivmoddi4+0x234>
 8000ec0:	1a8a      	subs	r2, r1, r2
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec8:	b280      	uxth	r0, r0
 8000eca:	b2bc      	uxth	r4, r7
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ed2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ed6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eda:	fb04 f20c 	mul.w	r2, r4, ip
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x11e>
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ee8:	d202      	bcs.n	8000ef0 <__udivmoddi4+0x11c>
 8000eea:	429a      	cmp	r2, r3
 8000eec:	f200 80e0 	bhi.w	80010b0 <__udivmoddi4+0x2dc>
 8000ef0:	46c4      	mov	ip, r8
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ef8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000efc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f00:	fb02 f404 	mul.w	r4, r2, r4
 8000f04:	429c      	cmp	r4, r3
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x144>
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x142>
 8000f10:	429c      	cmp	r4, r3
 8000f12:	f200 80ca 	bhi.w	80010aa <__udivmoddi4+0x2d6>
 8000f16:	4602      	mov	r2, r0
 8000f18:	1b1b      	subs	r3, r3, r4
 8000f1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f1e:	e7a5      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f20:	f1c1 0620 	rsb	r6, r1, #32
 8000f24:	408b      	lsls	r3, r1
 8000f26:	fa22 f706 	lsr.w	r7, r2, r6
 8000f2a:	431f      	orrs	r7, r3
 8000f2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f30:	fa20 f306 	lsr.w	r3, r0, r6
 8000f34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f3c:	4323      	orrs	r3, r4
 8000f3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f42:	fa1f fc87 	uxth.w	ip, r7
 8000f46:	fbbe f0f9 	udiv	r0, lr, r9
 8000f4a:	0c1c      	lsrs	r4, r3, #16
 8000f4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f58:	45a6      	cmp	lr, r4
 8000f5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f5e:	d909      	bls.n	8000f74 <__udivmoddi4+0x1a0>
 8000f60:	193c      	adds	r4, r7, r4
 8000f62:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f66:	f080 809c 	bcs.w	80010a2 <__udivmoddi4+0x2ce>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	f240 8099 	bls.w	80010a2 <__udivmoddi4+0x2ce>
 8000f70:	3802      	subs	r0, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	eba4 040e 	sub.w	r4, r4, lr
 8000f78:	fa1f fe83 	uxth.w	lr, r3
 8000f7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f80:	fb09 4413 	mls	r4, r9, r3, r4
 8000f84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f8c:	45a4      	cmp	ip, r4
 8000f8e:	d908      	bls.n	8000fa2 <__udivmoddi4+0x1ce>
 8000f90:	193c      	adds	r4, r7, r4
 8000f92:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f96:	f080 8082 	bcs.w	800109e <__udivmoddi4+0x2ca>
 8000f9a:	45a4      	cmp	ip, r4
 8000f9c:	d97f      	bls.n	800109e <__udivmoddi4+0x2ca>
 8000f9e:	3b02      	subs	r3, #2
 8000fa0:	443c      	add	r4, r7
 8000fa2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fa6:	eba4 040c 	sub.w	r4, r4, ip
 8000faa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fae:	4564      	cmp	r4, ip
 8000fb0:	4673      	mov	r3, lr
 8000fb2:	46e1      	mov	r9, ip
 8000fb4:	d362      	bcc.n	800107c <__udivmoddi4+0x2a8>
 8000fb6:	d05f      	beq.n	8001078 <__udivmoddi4+0x2a4>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x1fe>
 8000fba:	ebb8 0203 	subs.w	r2, r8, r3
 8000fbe:	eb64 0409 	sbc.w	r4, r4, r9
 8000fc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fc6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fca:	431e      	orrs	r6, r3
 8000fcc:	40cc      	lsrs	r4, r1
 8000fce:	e9c5 6400 	strd	r6, r4, [r5]
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	e74f      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000fd6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fda:	0c01      	lsrs	r1, r0, #16
 8000fdc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000fe0:	b280      	uxth	r0, r0
 8000fe2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4638      	mov	r0, r7
 8000fea:	463c      	mov	r4, r7
 8000fec:	46b8      	mov	r8, r7
 8000fee:	46be      	mov	lr, r7
 8000ff0:	2620      	movs	r6, #32
 8000ff2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ff6:	eba2 0208 	sub.w	r2, r2, r8
 8000ffa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ffe:	e766      	b.n	8000ece <__udivmoddi4+0xfa>
 8001000:	4601      	mov	r1, r0
 8001002:	e718      	b.n	8000e36 <__udivmoddi4+0x62>
 8001004:	4610      	mov	r0, r2
 8001006:	e72c      	b.n	8000e62 <__udivmoddi4+0x8e>
 8001008:	f1c6 0220 	rsb	r2, r6, #32
 800100c:	fa2e f302 	lsr.w	r3, lr, r2
 8001010:	40b7      	lsls	r7, r6
 8001012:	40b1      	lsls	r1, r6
 8001014:	fa20 f202 	lsr.w	r2, r0, r2
 8001018:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800101c:	430a      	orrs	r2, r1
 800101e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001022:	b2bc      	uxth	r4, r7
 8001024:	fb0e 3318 	mls	r3, lr, r8, r3
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800102e:	fb08 f904 	mul.w	r9, r8, r4
 8001032:	40b0      	lsls	r0, r6
 8001034:	4589      	cmp	r9, r1
 8001036:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800103a:	b280      	uxth	r0, r0
 800103c:	d93e      	bls.n	80010bc <__udivmoddi4+0x2e8>
 800103e:	1879      	adds	r1, r7, r1
 8001040:	f108 3cff 	add.w	ip, r8, #4294967295
 8001044:	d201      	bcs.n	800104a <__udivmoddi4+0x276>
 8001046:	4589      	cmp	r9, r1
 8001048:	d81f      	bhi.n	800108a <__udivmoddi4+0x2b6>
 800104a:	eba1 0109 	sub.w	r1, r1, r9
 800104e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001052:	fb09 f804 	mul.w	r8, r9, r4
 8001056:	fb0e 1119 	mls	r1, lr, r9, r1
 800105a:	b292      	uxth	r2, r2
 800105c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001060:	4542      	cmp	r2, r8
 8001062:	d229      	bcs.n	80010b8 <__udivmoddi4+0x2e4>
 8001064:	18ba      	adds	r2, r7, r2
 8001066:	f109 31ff 	add.w	r1, r9, #4294967295
 800106a:	d2c4      	bcs.n	8000ff6 <__udivmoddi4+0x222>
 800106c:	4542      	cmp	r2, r8
 800106e:	d2c2      	bcs.n	8000ff6 <__udivmoddi4+0x222>
 8001070:	f1a9 0102 	sub.w	r1, r9, #2
 8001074:	443a      	add	r2, r7
 8001076:	e7be      	b.n	8000ff6 <__udivmoddi4+0x222>
 8001078:	45f0      	cmp	r8, lr
 800107a:	d29d      	bcs.n	8000fb8 <__udivmoddi4+0x1e4>
 800107c:	ebbe 0302 	subs.w	r3, lr, r2
 8001080:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001084:	3801      	subs	r0, #1
 8001086:	46e1      	mov	r9, ip
 8001088:	e796      	b.n	8000fb8 <__udivmoddi4+0x1e4>
 800108a:	eba7 0909 	sub.w	r9, r7, r9
 800108e:	4449      	add	r1, r9
 8001090:	f1a8 0c02 	sub.w	ip, r8, #2
 8001094:	fbb1 f9fe 	udiv	r9, r1, lr
 8001098:	fb09 f804 	mul.w	r8, r9, r4
 800109c:	e7db      	b.n	8001056 <__udivmoddi4+0x282>
 800109e:	4673      	mov	r3, lr
 80010a0:	e77f      	b.n	8000fa2 <__udivmoddi4+0x1ce>
 80010a2:	4650      	mov	r0, sl
 80010a4:	e766      	b.n	8000f74 <__udivmoddi4+0x1a0>
 80010a6:	4608      	mov	r0, r1
 80010a8:	e6fd      	b.n	8000ea6 <__udivmoddi4+0xd2>
 80010aa:	443b      	add	r3, r7
 80010ac:	3a02      	subs	r2, #2
 80010ae:	e733      	b.n	8000f18 <__udivmoddi4+0x144>
 80010b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010b4:	443b      	add	r3, r7
 80010b6:	e71c      	b.n	8000ef2 <__udivmoddi4+0x11e>
 80010b8:	4649      	mov	r1, r9
 80010ba:	e79c      	b.n	8000ff6 <__udivmoddi4+0x222>
 80010bc:	eba1 0109 	sub.w	r1, r1, r9
 80010c0:	46c4      	mov	ip, r8
 80010c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010c6:	fb09 f804 	mul.w	r8, r9, r4
 80010ca:	e7c4      	b.n	8001056 <__udivmoddi4+0x282>

080010cc <__aeabi_idiv0>:
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d6:	463b      	mov	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <MX_ADC1_Init+0x98>)
 80010e4:	4a21      	ldr	r2, [pc, #132]	@ (800116c <MX_ADC1_Init+0x9c>)
 80010e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <MX_ADC1_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <MX_ADC1_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <MX_ADC1_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <MX_ADC1_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001100:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <MX_ADC1_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <MX_ADC1_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110e:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <MX_ADC1_Init+0x98>)
 8001110:	4a17      	ldr	r2, [pc, #92]	@ (8001170 <MX_ADC1_Init+0xa0>)
 8001112:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <MX_ADC1_Init+0x98>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800111a:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <MX_ADC1_Init+0x98>)
 800111c:	2201      	movs	r2, #1
 800111e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <MX_ADC1_Init+0x98>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001128:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <MX_ADC1_Init+0x98>)
 800112a:	2201      	movs	r2, #1
 800112c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800112e:	480e      	ldr	r0, [pc, #56]	@ (8001168 <MX_ADC1_Init+0x98>)
 8001130:	f004 fc68 	bl	8005a04 <HAL_ADC_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800113a:	f000 fc4d 	bl	80019d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800113e:	2309      	movs	r3, #9
 8001140:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001142:	2301      	movs	r3, #1
 8001144:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	@ (8001168 <MX_ADC1_Init+0x98>)
 8001150:	f004 fde8 	bl	8005d24 <HAL_ADC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800115a:	f000 fc3d 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000042c 	.word	0x2000042c
 800116c:	40012000 	.word	0x40012000
 8001170:	0f000001 	.word	0x0f000001

08001174 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	@ 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a17      	ldr	r2, [pc, #92]	@ (80011f0 <HAL_ADC_MspInit+0x7c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d127      	bne.n	80011e6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <HAL_ADC_MspInit+0x80>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	4a15      	ldr	r2, [pc, #84]	@ (80011f4 <HAL_ADC_MspInit+0x80>)
 80011a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a6:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <HAL_ADC_MspInit+0x80>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <HAL_ADC_MspInit+0x80>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a0e      	ldr	r2, [pc, #56]	@ (80011f4 <HAL_ADC_MspInit+0x80>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <HAL_ADC_MspInit+0x80>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011ce:	2302      	movs	r3, #2
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d2:	2303      	movs	r3, #3
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <HAL_ADC_MspInit+0x84>)
 80011e2:	f005 fbeb 	bl	80069bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	@ 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40012000 	.word	0x40012000
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020400 	.word	0x40020400

080011fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_DMA_Init+0x3c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a0b      	ldr	r2, [pc, #44]	@ (8001238 <MX_DMA_Init+0x3c>)
 800120c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_DMA_Init+0x3c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	203a      	movs	r0, #58	@ 0x3a
 8001224:	f005 f887 	bl	8006336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001228:	203a      	movs	r0, #58	@ 0x3a
 800122a:	f005 f8a0 	bl	800636e <HAL_NVIC_EnableIRQ>

}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b61      	ldr	r3, [pc, #388]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a60      	ldr	r2, [pc, #384]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b5e      	ldr	r3, [pc, #376]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b5a      	ldr	r3, [pc, #360]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a59      	ldr	r2, [pc, #356]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b57      	ldr	r3, [pc, #348]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b53      	ldr	r3, [pc, #332]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a52      	ldr	r2, [pc, #328]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b50      	ldr	r3, [pc, #320]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b4c      	ldr	r3, [pc, #304]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a4b      	ldr	r2, [pc, #300]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b49      	ldr	r3, [pc, #292]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012c8:	4845      	ldr	r0, [pc, #276]	@ (80013e0 <MX_GPIO_Init+0x1a4>)
 80012ca:	f005 fcfb 	bl	8006cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, oled_CS_Pin|sd_CS_Pin, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2112      	movs	r1, #18
 80012d2:	4844      	ldr	r0, [pc, #272]	@ (80013e4 <MX_GPIO_Init+0x1a8>)
 80012d4:	f005 fcf6 	bl	8006cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, oled_DC_Pin|oled_RST_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	210c      	movs	r1, #12
 80012dc:	4841      	ldr	r0, [pc, #260]	@ (80013e4 <MX_GPIO_Init+0x1a8>)
 80012de:	f005 fcf1 	bl	8006cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, bmp2_CS_Pin|bmp1_CS_Pin|bmp3_CS_Pin, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 7194 	mov.w	r1, #296	@ 0x128
 80012e8:	483f      	ldr	r0, [pc, #252]	@ (80013e8 <MX_GPIO_Init+0x1ac>)
 80012ea:	f005 fceb 	bl	8006cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4836      	ldr	r0, [pc, #216]	@ (80013e0 <MX_GPIO_Init+0x1a4>)
 8001308:	f005 fb58 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800130c:	2301      	movs	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001310:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001316:	2301      	movs	r3, #1
 8001318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4830      	ldr	r0, [pc, #192]	@ (80013e4 <MX_GPIO_Init+0x1a8>)
 8001322:	f005 fb4b 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : oled_CS_Pin */
  GPIO_InitStruct.Pin = oled_CS_Pin;
 8001326:	2302      	movs	r3, #2
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132e:	2301      	movs	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(oled_CS_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4829      	ldr	r0, [pc, #164]	@ (80013e4 <MX_GPIO_Init+0x1a8>)
 800133e:	f005 fb3d 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pins : oled_DC_Pin oled_RST_Pin */
  GPIO_InitStruct.Pin = oled_DC_Pin|oled_RST_Pin;
 8001342:	230c      	movs	r3, #12
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4822      	ldr	r0, [pc, #136]	@ (80013e4 <MX_GPIO_Init+0x1a8>)
 800135a:	f005 fb2f 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : sd_CS_Pin */
  GPIO_InitStruct.Pin = sd_CS_Pin;
 800135e:	2310      	movs	r3, #16
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001366:	2301      	movs	r3, #1
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136a:	2302      	movs	r3, #2
 800136c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(sd_CS_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	481b      	ldr	r0, [pc, #108]	@ (80013e4 <MX_GPIO_Init+0x1a8>)
 8001376:	f005 fb21 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_KEY_Pin */
  GPIO_InitStruct.Pin = enc_KEY_Pin;
 800137a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001380:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(enc_KEY_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4814      	ldr	r0, [pc, #80]	@ (80013e4 <MX_GPIO_Init+0x1a8>)
 8001392:	f005 fb13 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pins : bmp2_CS_Pin bmp1_CS_Pin bmp3_CS_Pin */
  GPIO_InitStruct.Pin = bmp2_CS_Pin|bmp1_CS_Pin|bmp3_CS_Pin;
 8001396:	f44f 7394 	mov.w	r3, #296	@ 0x128
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	480e      	ldr	r0, [pc, #56]	@ (80013e8 <MX_GPIO_Init+0x1ac>)
 80013b0:	f005 fb04 	bl	80069bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2006      	movs	r0, #6
 80013ba:	f004 ffbc 	bl	8006336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013be:	2006      	movs	r0, #6
 80013c0:	f004 ffd5 	bl	800636e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	2028      	movs	r0, #40	@ 0x28
 80013ca:	f004 ffb4 	bl	8006336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013ce:	2028      	movs	r0, #40	@ 0x28
 80013d0:	f004 ffcd 	bl	800636e <HAL_NVIC_EnableIRQ>

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	@ 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400

080013ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <MX_I2C1_Init+0x50>)
 80013f2:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <MX_I2C1_Init+0x54>)
 80013f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_I2C1_Init+0x50>)
 80013f8:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <MX_I2C1_Init+0x58>)
 80013fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <MX_I2C1_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_I2C1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_I2C1_Init+0x50>)
 800140a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800140e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <MX_I2C1_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_I2C1_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_I2C1_Init+0x50>)
 800142a:	f005 fc7d 	bl	8006d28 <HAL_I2C_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001434:	f000 fad0 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000474 	.word	0x20000474
 8001440:	40005400 	.word	0x40005400
 8001444:	000186a0 	.word	0x000186a0

08001448 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	@ 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a19      	ldr	r2, [pc, #100]	@ (80014cc <HAL_I2C_MspInit+0x84>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d12b      	bne.n	80014c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <HAL_I2C_MspInit+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a17      	ldr	r2, [pc, #92]	@ (80014d0 <HAL_I2C_MspInit+0x88>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_I2C_MspInit+0x88>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001486:	23c0      	movs	r3, #192	@ 0xc0
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148a:	2312      	movs	r3, #18
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001496:	2304      	movs	r3, #4
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	480c      	ldr	r0, [pc, #48]	@ (80014d4 <HAL_I2C_MspInit+0x8c>)
 80014a2:	f005 fa8b 	bl	80069bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <HAL_I2C_MspInit+0x88>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a08      	ldr	r2, [pc, #32]	@ (80014d0 <HAL_I2C_MspInit+0x88>)
 80014b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_I2C_MspInit+0x88>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	@ 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40005400 	.word	0x40005400
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020400 	.word	0x40020400

080014d8 <get_adc_percentage>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_adc_percentage(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	ed2d 8b02 	vpush	{d8}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	uint16_t adc_position;

	HAL_ADC_Start(&hadc1);
 80014e2:	482c      	ldr	r0, [pc, #176]	@ (8001594 <get_adc_percentage+0xbc>)
 80014e4:	f004 fad2 	bl	8005a8c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 80014e8:	2101      	movs	r1, #1
 80014ea:	482a      	ldr	r0, [pc, #168]	@ (8001594 <get_adc_percentage+0xbc>)
 80014ec:	f004 fb82 	bl	8005bf4 <HAL_ADC_PollForConversion>
	adc_position = HAL_ADC_GetValue(&hadc1);
 80014f0:	4828      	ldr	r0, [pc, #160]	@ (8001594 <get_adc_percentage+0xbc>)
 80014f2:	f004 fc0a 	bl	8005d0a <HAL_ADC_GetValue>
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
	adc_position = ((adc_position - 150.0f) / (3700.0f - 150.0f)) * 100.0f;
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001504:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001598 <get_adc_percentage+0xc0>
 8001508:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800150c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800159c <get_adc_percentage+0xc4>
 8001510:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001514:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80015a0 <get_adc_percentage+0xc8>
 8001518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800151c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001520:	ee17 3a90 	vmov	r3, s15
 8001524:	80fb      	strh	r3, [r7, #6]
	adc_position = adc_position - fmodf(adc_position, 5.0f);
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	ee07 3a90 	vmov	s15, r3
 8001536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800153a:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800153e:	eeb0 0a67 	vmov.f32	s0, s15
 8001542:	f016 fdaf 	bl	80180a4 <fmodf>
 8001546:	eef0 7a40 	vmov.f32	s15, s0
 800154a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800154e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001552:	ee17 3a90 	vmov	r3, s15
 8001556:	80fb      	strh	r3, [r7, #6]
	s.adc_percentage = fminf(fmaxf(adc_position, 0.0f), 100.0f);
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	ee07 3a90 	vmov	s15, r3
 800155e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001562:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80015a4 <get_adc_percentage+0xcc>
 8001566:	eeb0 0a67 	vmov.f32	s0, s15
 800156a:	f016 fdbb 	bl	80180e4 <fmaxf>
 800156e:	eef0 7a40 	vmov.f32	s15, s0
 8001572:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 80015a0 <get_adc_percentage+0xc8>
 8001576:	eeb0 0a67 	vmov.f32	s0, s15
 800157a:	f016 fdd0 	bl	801811e <fminf>
 800157e:	eef0 7a40 	vmov.f32	s15, s0
 8001582:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <get_adc_percentage+0xd0>)
 8001584:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	ecbd 8b02 	vpop	{d8}
 8001592:	bd80      	pop	{r7, pc}
 8001594:	2000042c 	.word	0x2000042c
 8001598:	43160000 	.word	0x43160000
 800159c:	455de000 	.word	0x455de000
 80015a0:	42c80000 	.word	0x42c80000
 80015a4:	00000000 	.word	0x00000000
 80015a8:	200004c8 	.word	0x200004c8

080015ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015b0:	b08f      	sub	sp, #60	@ 0x3c
 80015b2:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b4:	f004 f990 	bl	80058d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b8:	f000 f926 	bl	8001808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015bc:	f7ff fe3e 	bl	800123c <MX_GPIO_Init>
  MX_DMA_Init();
 80015c0:	f7ff fe1c 	bl	80011fc <MX_DMA_Init>
  MX_ADC1_Init();
 80015c4:	f7ff fd84 	bl	80010d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015c8:	f7ff ff10 	bl	80013ec <MX_I2C1_Init>
  MX_SPI1_Init();
 80015cc:	f000 fa0a 	bl	80019e4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80015d0:	f011 fc40 	bl	8012e54 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80015d4:	f000 fca4 	bl	8001f20 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015d8:	f000 fd18 	bl	800200c <MX_TIM4_Init>
  MX_FATFS_Init();
 80015dc:	f00c f9d4 	bl	800d988 <MX_FATFS_Init>
  MX_TIM1_Init();
 80015e0:	f000 fc46 	bl	8001e70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	// TIMER
    HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80015e4:	213c      	movs	r1, #60	@ 0x3c
 80015e6:	4875      	ldr	r0, [pc, #468]	@ (80017bc <main+0x210>)
 80015e8:	f009 ffe6 	bl	800b5b8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80015ec:	4874      	ldr	r0, [pc, #464]	@ (80017c0 <main+0x214>)
 80015ee:	f009 fdd1 	bl	800b194 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015f2:	2100      	movs	r1, #0
 80015f4:	4873      	ldr	r0, [pc, #460]	@ (80017c4 <main+0x218>)
 80015f6:	f009 fe89 	bl	800b30c <HAL_TIM_PWM_Start>

	// OLED
	ST7735_Init();
 80015fa:	f003 ff03 	bl	8005404 <ST7735_Init>
	ST7735_FillScreen(ST7735_BLACK);
 80015fe:	2000      	movs	r0, #0
 8001600:	f004 f8d2 	bl	80057a8 <ST7735_FillScreen>

	// BMP x3
	for (uint8_t index = 0; index < BMP_SENSOR_COUNT; ++index) {
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e010      	b.n	800162c <main+0x80>
		if (!BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE, index)) {
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2301      	movs	r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	2101      	movs	r1, #1
 8001614:	486c      	ldr	r0, [pc, #432]	@ (80017c8 <main+0x21c>)
 8001616:	f001 fdef 	bl	80031f8 <BMP280_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <main+0x7a>
			printf("BMP280 sensor error\r\n");
 8001620:	486a      	ldr	r0, [pc, #424]	@ (80017cc <main+0x220>)
 8001622:	f013 f973 	bl	801490c <puts>
	for (uint8_t index = 0; index < BMP_SENSOR_COUNT; ++index) {
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	3301      	adds	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d9eb      	bls.n	800160a <main+0x5e>
		}
	}

	// SGP
	if (sgp_probe() != STATUS_OK) {
 8001632:	f003 fd41 	bl	80050b8 <sgp_probe>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <main+0x96>
		printf("SGP sensor error\r\n");
 800163c:	4864      	ldr	r0, [pc, #400]	@ (80017d0 <main+0x224>)
 800163e:	f013 f965 	bl	801490c <puts>
	}
	// INA
	if (!INA219_Init(&myina219, &hi2c1, INA219_ADDRESS)){
 8001642:	2240      	movs	r2, #64	@ 0x40
 8001644:	4963      	ldr	r1, [pc, #396]	@ (80017d4 <main+0x228>)
 8001646:	4864      	ldr	r0, [pc, #400]	@ (80017d8 <main+0x22c>)
 8001648:	f002 fc82 	bl	8003f50 <INA219_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <main+0xac>
		printf("INA sensor error\r\n");
 8001652:	4862      	ldr	r0, [pc, #392]	@ (80017dc <main+0x230>)
 8001654:	f013 f95a 	bl	801490c <puts>
	}

	// SD
	SDcardInit(&sd,"test.txt");
 8001658:	4961      	ldr	r1, [pc, #388]	@ (80017e0 <main+0x234>)
 800165a:	4862      	ldr	r0, [pc, #392]	@ (80017e4 <main+0x238>)
 800165c:	f001 fac4 	bl	8002be8 <SDcardInit>

	st.is_program_started = true;
 8001660:	4b61      	ldr	r3, [pc, #388]	@ (80017e8 <main+0x23c>)
 8001662:	2201      	movs	r2, #1
 8001664:	729a      	strb	r2, [r3, #10]
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// menu poczatkowe
		if (st.is_measurements_started == false) {
 8001666:	4b60      	ldr	r3, [pc, #384]	@ (80017e8 <main+0x23c>)
 8001668:	7a5b      	ldrb	r3, [r3, #9]
 800166a:	f083 0301 	eor.w	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <main+0xd0>
			OLED_manage(&st, &s);
 8001674:	495d      	ldr	r1, [pc, #372]	@ (80017ec <main+0x240>)
 8001676:	485c      	ldr	r0, [pc, #368]	@ (80017e8 <main+0x23c>)
 8001678:	f000 fdde 	bl	8002238 <OLED_manage>
		}
		// stele probkowanie
		if (st._interrupt_flag == true && st.is_measurements_started == true) {
 800167c:	4b5a      	ldr	r3, [pc, #360]	@ (80017e8 <main+0x23c>)
 800167e:	7a1b      	ldrb	r3, [r3, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <main+0xba>
 8001684:	4b58      	ldr	r3, [pc, #352]	@ (80017e8 <main+0x23c>)
 8001686:	7a5b      	ldrb	r3, [r3, #9]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0ec      	beq.n	8001666 <main+0xba>
			// ADC
			get_adc_percentage();
 800168c:	f7ff ff24 	bl	80014d8 <get_adc_percentage>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, s.adc_percentage*10);
 8001690:	4b56      	ldr	r3, [pc, #344]	@ (80017ec <main+0x240>)
 8001692:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001696:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800169a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169e:	4b49      	ldr	r3, [pc, #292]	@ (80017c4 <main+0x218>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a6:	ee17 2a90 	vmov	r2, s15
 80016aa:	635a      	str	r2, [r3, #52]	@ 0x34


			// BMP
			for (uint8_t index = 0; index < BMP_SENSOR_COUNT; ++index) {
 80016ac:	2300      	movs	r3, #0
 80016ae:	73bb      	strb	r3, [r7, #14]
 80016b0:	e010      	b.n	80016d4 <main+0x128>
				BMP280_ReadTemperatureAndPressure(&s.BMP280temperature[index], &s.BMP280pressure[index], index);
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4a4d      	ldr	r2, [pc, #308]	@ (80017ec <main+0x240>)
 80016b8:	1898      	adds	r0, r3, r2
 80016ba:	7bbb      	ldrb	r3, [r7, #14]
 80016bc:	3302      	adds	r3, #2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4a4a      	ldr	r2, [pc, #296]	@ (80017ec <main+0x240>)
 80016c2:	4413      	add	r3, r2
 80016c4:	3304      	adds	r3, #4
 80016c6:	7bba      	ldrb	r2, [r7, #14]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f001 ffe7 	bl	800369c <BMP280_ReadTemperatureAndPressure>
			for (uint8_t index = 0; index < BMP_SENSOR_COUNT; ++index) {
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	3301      	adds	r3, #1
 80016d2:	73bb      	strb	r3, [r7, #14]
 80016d4:	7bbb      	ldrb	r3, [r7, #14]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d9eb      	bls.n	80016b2 <main+0x106>
			}

			// SGP
			sgp_measure_iaq_blocking_read(&s.tvoc_ppb, &s.co2_eq_ppm);
 80016da:	4945      	ldr	r1, [pc, #276]	@ (80017f0 <main+0x244>)
 80016dc:	4845      	ldr	r0, [pc, #276]	@ (80017f4 <main+0x248>)
 80016de:	f003 fca3 	bl	8005028 <sgp_measure_iaq_blocking_read>
			sgp_measure_signals_blocking_read(&s.scaled_ethanol_signal, &s.scaled_h2_signal);
 80016e2:	4945      	ldr	r1, [pc, #276]	@ (80017f8 <main+0x24c>)
 80016e4:	4845      	ldr	r0, [pc, #276]	@ (80017fc <main+0x250>)
 80016e6:	f003 fcbd 	bl	8005064 <sgp_measure_signals_blocking_read>
			//sgp_set_absolute_humidity()

			// INA219
			s.INA219_Current = INA219_ReadCurrent_raw(&myina219);
 80016ea:	483b      	ldr	r0, [pc, #236]	@ (80017d8 <main+0x22c>)
 80016ec:	f002 fb65 	bl	8003dba <INA219_ReadCurrent_raw>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b3d      	ldr	r3, [pc, #244]	@ (80017ec <main+0x240>)
 80016f6:	845a      	strh	r2, [r3, #34]	@ 0x22
			s.INA219_Voltage = INA219_ReadBusVoltage(&myina219);
 80016f8:	4837      	ldr	r0, [pc, #220]	@ (80017d8 <main+0x22c>)
 80016fa:	f002 fb4b 	bl	8003d94 <INA219_ReadBusVoltage>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	4b3a      	ldr	r3, [pc, #232]	@ (80017ec <main+0x240>)
 8001704:	841a      	strh	r2, [r3, #32]
			s.INA219_Power = INA219_ReadPower(&myina219);
 8001706:	4834      	ldr	r0, [pc, #208]	@ (80017d8 <main+0x22c>)
 8001708:	f002 fb68 	bl	8003ddc <INA219_ReadPower>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4b36      	ldr	r3, [pc, #216]	@ (80017ec <main+0x240>)
 8001712:	849a      	strh	r2, [r3, #36]	@ 0x24

			// OLED
			OLED_manage(&st, &s);
 8001714:	4935      	ldr	r1, [pc, #212]	@ (80017ec <main+0x240>)
 8001716:	4834      	ldr	r0, [pc, #208]	@ (80017e8 <main+0x23c>)
 8001718:	f000 fd8e 	bl	8002238 <OLED_manage>

			// SD
			SDcardWriteData(&sd, &s);
 800171c:	4933      	ldr	r1, [pc, #204]	@ (80017ec <main+0x240>)
 800171e:	4831      	ldr	r0, [pc, #196]	@ (80017e4 <main+0x238>)
 8001720:	f001 fb3a 	bl	8002d98 <SDcardWriteData>

			// Transmit ofer uart
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001724:	4b31      	ldr	r3, [pc, #196]	@ (80017ec <main+0x240>)
 8001726:	8b1b      	ldrh	r3, [r3, #24]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001728:	469a      	mov	sl, r3
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 800172a:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <main+0x240>)
 800172c:	8b5b      	ldrh	r3, [r3, #26]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 800172e:	469b      	mov	fp, r3
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001730:	4b2e      	ldr	r3, [pc, #184]	@ (80017ec <main+0x240>)
 8001732:	8b9b      	ldrh	r3, [r3, #28]
 8001734:	ee07 3a90 	vmov	s15, r3
 8001738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001800 <main+0x254>
 8001740:	eec7 6a87 	vdiv.f32	s13, s15, s14
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001744:	ee16 0a90 	vmov	r0, s13
 8001748:	f7fe ff06 	bl	8000558 <__aeabi_f2d>
 800174c:	4604      	mov	r4, r0
 800174e:	460d      	mov	r5, r1
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001750:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <main+0x240>)
 8001752:	8bdb      	ldrh	r3, [r3, #30]
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001800 <main+0x254>
 8001760:	eec7 6a87 	vdiv.f32	s13, s15, s14
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001764:	ee16 0a90 	vmov	r0, s13
 8001768:	f7fe fef6 	bl	8000558 <__aeabi_f2d>
 800176c:	4680      	mov	r8, r0
 800176e:	4689      	mov	r9, r1
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001770:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <main+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe feef 	bl	8000558 <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	491b      	ldr	r1, [pc, #108]	@ (80017ec <main+0x240>)
 8001780:	68c9      	ldr	r1, [r1, #12]
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001782:	481a      	ldr	r0, [pc, #104]	@ (80017ec <main+0x240>)
 8001784:	8c00      	ldrh	r0, [r0, #32]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001786:	4606      	mov	r6, r0
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001788:	4818      	ldr	r0, [pc, #96]	@ (80017ec <main+0x240>)
 800178a:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 800178e:	6078      	str	r0, [r7, #4]
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001790:	4816      	ldr	r0, [pc, #88]	@ (80017ec <main+0x240>)
 8001792:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001794:	9009      	str	r0, [sp, #36]	@ 0x24
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	9008      	str	r0, [sp, #32]
 800179a:	9607      	str	r6, [sp, #28]
 800179c:	9106      	str	r1, [sp, #24]
 800179e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017a2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017a6:	e9cd 4500 	strd	r4, r5, [sp]
 80017aa:	465a      	mov	r2, fp
 80017ac:	4651      	mov	r1, sl
 80017ae:	4815      	ldr	r0, [pc, #84]	@ (8001804 <main+0x258>)
 80017b0:	f013 f844 	bl	801483c <iprintf>

			st._interrupt_flag = false;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <main+0x23c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	721a      	strb	r2, [r3, #8]
		if (st.is_measurements_started == false) {
 80017ba:	e754      	b.n	8001666 <main+0xba>
 80017bc:	20002630 	.word	0x20002630
 80017c0:	200026c0 	.word	0x200026c0
 80017c4:	20002678 	.word	0x20002678
 80017c8:	20002570 	.word	0x20002570
 80017cc:	080182e0 	.word	0x080182e0
 80017d0:	080182f8 	.word	0x080182f8
 80017d4:	20000474 	.word	0x20000474
 80017d8:	20002560 	.word	0x20002560
 80017dc:	0801830c 	.word	0x0801830c
 80017e0:	08018320 	.word	0x08018320
 80017e4:	200004f4 	.word	0x200004f4
 80017e8:	20000000 	.word	0x20000000
 80017ec:	200004c8 	.word	0x200004c8
 80017f0:	200004e2 	.word	0x200004e2
 80017f4:	200004e0 	.word	0x200004e0
 80017f8:	200004e6 	.word	0x200004e6
 80017fc:	200004e4 	.word	0x200004e4
 8001800:	44000000 	.word	0x44000000
 8001804:	0801832c 	.word	0x0801832c

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b094      	sub	sp, #80	@ 0x50
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	2230      	movs	r2, #48	@ 0x30
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f013 f9b0 	bl	8014b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <SystemClock_Config+0xc8>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	4a26      	ldr	r2, [pc, #152]	@ (80018d0 <SystemClock_Config+0xc8>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183a:	6413      	str	r3, [r2, #64]	@ 0x40
 800183c:	4b24      	ldr	r3, [pc, #144]	@ (80018d0 <SystemClock_Config+0xc8>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001848:	2300      	movs	r3, #0
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <SystemClock_Config+0xcc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a20      	ldr	r2, [pc, #128]	@ (80018d4 <SystemClock_Config+0xcc>)
 8001852:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <SystemClock_Config+0xcc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001864:	2301      	movs	r3, #1
 8001866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001868:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186e:	2302      	movs	r3, #2
 8001870:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001872:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001878:	2319      	movs	r3, #25
 800187a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800187c:	2390      	movs	r3, #144	@ 0x90
 800187e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001880:	2302      	movs	r3, #2
 8001882:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001884:	2303      	movs	r3, #3
 8001886:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001888:	f107 0320 	add.w	r3, r7, #32
 800188c:	4618      	mov	r0, r3
 800188e:	f008 fa6f 	bl	8009d70 <HAL_RCC_OscConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001898:	f000 f89e 	bl	80019d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189c:	230f      	movs	r3, #15
 800189e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a0:	2302      	movs	r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	2102      	movs	r1, #2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f008 fcd1 	bl	800a260 <HAL_RCC_ClockConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018c4:	f000 f888 	bl	80019d8 <Error_Handler>
  }
}
 80018c8:	bf00      	nop
 80018ca:	3750      	adds	r7, #80	@ 0x50
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40007000 	.word	0x40007000

080018d8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
// encoder
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a17      	ldr	r2, [pc, #92]	@ (8001944 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d126      	bne.n	8001938 <HAL_TIM_IC_CaptureCallback+0x60>
	    static uint16_t prev_enc_count = 0;
    	uint16_t enc_count = __HAL_TIM_GET_COUNTER(htim) / 4;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	81fb      	strh	r3, [r7, #14]

    	if (prev_enc_count != enc_count) {
 80018f4:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <HAL_TIM_IC_CaptureCallback+0x70>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	89fa      	ldrh	r2, [r7, #14]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d019      	beq.n	8001932 <HAL_TIM_IC_CaptureCallback+0x5a>
        	st.sensor_current = (enum SensorScreen)(enc_count % SENSOR_SCREEN_COUNT);
 80018fe:	89fb      	ldrh	r3, [r7, #14]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	b29b      	uxth	r3, r3
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b10      	ldr	r3, [pc, #64]	@ (800194c <HAL_TIM_IC_CaptureCallback+0x74>)
 800190a:	70da      	strb	r2, [r3, #3]
        	st.menu_current_ptr = (enum MenuScreen)(1 + (enc_count % (MENU_SCREEN_COUNT - 1)));
 800190c:	89fb      	ldrh	r3, [r7, #14]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	3301      	adds	r3, #1
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <HAL_TIM_IC_CaptureCallback+0x74>)
 800191c:	709a      	strb	r2, [r3, #2]
        	st.battery_ptr = enc_count % BATERYS_NUM;
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <HAL_TIM_IC_CaptureCallback+0x74>)
 800192a:	719a      	strb	r2, [r3, #6]

    		st.screen_clear = true;
 800192c:	4b07      	ldr	r3, [pc, #28]	@ (800194c <HAL_TIM_IC_CaptureCallback+0x74>)
 800192e:	2201      	movs	r2, #1
 8001930:	739a      	strb	r2, [r3, #14]
    	}
    	prev_enc_count = enc_count;
 8001932:	4a05      	ldr	r2, [pc, #20]	@ (8001948 <HAL_TIM_IC_CaptureCallback+0x70>)
 8001934:	89fb      	ldrh	r3, [r7, #14]
 8001936:	8013      	strh	r3, [r2, #0]
    }
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	40010000 	.word	0x40010000
 8001948:	20002568 	.word	0x20002568
 800194c:	20000000 	.word	0x20000000

08001950 <HAL_TIM_PeriodElapsedCallback>:

// main loop sensor data
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	if (htim == &htim4 && st.is_program_started == true){
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a0b      	ldr	r2, [pc, #44]	@ (8001988 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d10e      	bne.n	800197e <HAL_TIM_PeriodElapsedCallback+0x2e>
 8001960:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001962:	7a9b      	ldrb	r3, [r3, #10]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00a      	beq.n	800197e <HAL_TIM_PeriodElapsedCallback+0x2e>
		if (st._interrupt_flag == true){
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800196a:	7a1b      	ldrb	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_TIM_PeriodElapsedCallback+0x28>
			printf("Flaga _interrupt_flag jest juz 1\r\n");
 8001970:	4807      	ldr	r0, [pc, #28]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001972:	f012 ffcb 	bl	801490c <puts>
		}
		else{
			st._interrupt_flag = true;
		}
	}
}
 8001976:	e002      	b.n	800197e <HAL_TIM_PeriodElapsedCallback+0x2e>
			st._interrupt_flag = true;
 8001978:	4b04      	ldr	r3, [pc, #16]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800197a:	2201      	movs	r2, #1
 800197c:	721a      	strb	r2, [r3, #8]
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200026c0 	.word	0x200026c0
 800198c:	20000000 	.word	0x20000000
 8001990:	08018354 	.word	0x08018354

08001994 <HAL_GPIO_EXTI_Callback>:

// User Button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press_time = 0;
    uint32_t now = HAL_GetTick();
 800199e:	f004 f801 	bl	80059a4 <HAL_GetTick>
 80019a2:	60f8      	str	r0, [r7, #12]

    if (GPIO_Pin == enc_KEY_Pin) {
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019aa:	d10c      	bne.n	80019c6 <HAL_GPIO_EXTI_Callback+0x32>
        // debounce
        if (now - last_press_time >= 500) {
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019b8:	d305      	bcc.n	80019c6 <HAL_GPIO_EXTI_Callback+0x32>
            st.is_enc_pressed = true;
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x40>)
 80019bc:	2201      	movs	r2, #1
 80019be:	72da      	strb	r2, [r3, #11]
            last_press_time = now;
 80019c0:	4a03      	ldr	r2, [pc, #12]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6013      	str	r3, [r2, #0]
        }
    }
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000256c 	.word	0x2000256c
 80019d4:	20000000 	.word	0x20000000

080019d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019dc:	b672      	cpsid	i
}
 80019de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <Error_Handler+0x8>

080019e4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019e8:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <MX_SPI1_Init+0x64>)
 80019ea:	4a18      	ldr	r2, [pc, #96]	@ (8001a4c <MX_SPI1_Init+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ee:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <MX_SPI1_Init+0x64>)
 80019f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019f6:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <MX_SPI1_Init+0x64>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <MX_SPI1_Init+0x64>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <MX_SPI1_Init+0x64>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <MX_SPI1_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <MX_SPI1_Init+0x64>)
 8001a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a16:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <MX_SPI1_Init+0x64>)
 8001a18:	2210      	movs	r2, #16
 8001a1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <MX_SPI1_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <MX_SPI1_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a28:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <MX_SPI1_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <MX_SPI1_Init+0x64>)
 8001a30:	220a      	movs	r2, #10
 8001a32:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a34:	4804      	ldr	r0, [pc, #16]	@ (8001a48 <MX_SPI1_Init+0x64>)
 8001a36:	f008 fddf 	bl	800a5f8 <HAL_SPI_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a40:	f7ff ffca 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20002570 	.word	0x20002570
 8001a4c:	40013000 	.word	0x40013000

08001a50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	@ 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a34      	ldr	r2, [pc, #208]	@ (8001b40 <HAL_SPI_MspInit+0xf0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d161      	bne.n	8001b36 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b33      	ldr	r3, [pc, #204]	@ (8001b44 <HAL_SPI_MspInit+0xf4>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	4a32      	ldr	r2, [pc, #200]	@ (8001b44 <HAL_SPI_MspInit+0xf4>)
 8001a7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a82:	4b30      	ldr	r3, [pc, #192]	@ (8001b44 <HAL_SPI_MspInit+0xf4>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b2c      	ldr	r3, [pc, #176]	@ (8001b44 <HAL_SPI_MspInit+0xf4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a2b      	ldr	r2, [pc, #172]	@ (8001b44 <HAL_SPI_MspInit+0xf4>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b29      	ldr	r3, [pc, #164]	@ (8001b44 <HAL_SPI_MspInit+0xf4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001aaa:	23e0      	movs	r3, #224	@ 0xe0
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aba:	2305      	movs	r3, #5
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4820      	ldr	r0, [pc, #128]	@ (8001b48 <HAL_SPI_MspInit+0xf8>)
 8001ac6:	f004 ff79 	bl	80069bc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001aca:	4b20      	ldr	r3, [pc, #128]	@ (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001acc:	4a20      	ldr	r2, [pc, #128]	@ (8001b50 <HAL_SPI_MspInit+0x100>)
 8001ace:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001ad2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ad6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001ada:	2240      	movs	r2, #64	@ 0x40
 8001adc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ade:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae4:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001ae6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aea:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aec:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af2:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001af8:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b0a:	4810      	ldr	r0, [pc, #64]	@ (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001b0c:	f004 fc4a 	bl	80063a4 <HAL_DMA_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001b16:	f7ff ff5f 	bl	80019d8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001b1e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001b20:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <HAL_SPI_MspInit+0xfc>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2023      	movs	r0, #35	@ 0x23
 8001b2c:	f004 fc03 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b30:	2023      	movs	r0, #35	@ 0x23
 8001b32:	f004 fc1c 	bl	800636e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	@ 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40013000 	.word	0x40013000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	200025c8 	.word	0x200025c8
 8001b50:	40026440 	.word	0x40026440

08001b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <HAL_MspInit+0x4c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba0 <HAL_MspInit+0x4c>)
 8001b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <HAL_MspInit+0x4c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_MspInit+0x4c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ba0 <HAL_MspInit+0x4c>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_MspInit+0x4c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <SDTimer_Handler+0x40>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <SDTimer_Handler+0x1c>
	{
		Timer1--;
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <SDTimer_Handler+0x40>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <SDTimer_Handler+0x40>)
 8001bbe:	701a      	strb	r2, [r3, #0]
	}
	if (Timer2 > 0)
 8001bc0:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <SDTimer_Handler+0x44>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <SDTimer_Handler+0x34>
	{
		Timer2--;
 8001bca:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <SDTimer_Handler+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b04      	ldr	r3, [pc, #16]	@ (8001be8 <SDTimer_Handler+0x44>)
 8001bd6:	701a      	strb	r2, [r3, #0]
	}
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20002629 	.word	0x20002629
 8001be8:	2000262a 	.word	0x2000262a

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001c44:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <SysTick_Handler+0x30>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <SysTick_Handler+0x30>)
 8001c50:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10)
 8001c52:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <SysTick_Handler+0x30>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b09      	cmp	r3, #9
 8001c5a:	d904      	bls.n	8001c66 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001c5c:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <SysTick_Handler+0x30>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001c62:	f7ff ff9f 	bl	8001ba4 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c66:	f003 fe89 	bl	800597c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20002628 	.word	0x20002628

08001c74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_Pin);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f005 f83d 	bl	8006cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c88:	4802      	ldr	r0, [pc, #8]	@ (8001c94 <TIM1_CC_IRQHandler+0x10>)
 8001c8a:	f009 fd43 	bl	800b714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20002630 	.word	0x20002630

08001c98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <TIM4_IRQHandler+0x10>)
 8001c9e:	f009 fd39 	bl	800b714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200026c0 	.word	0x200026c0

08001cac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	@ (8001cbc <SPI1_IRQHandler+0x10>)
 8001cb2:	f009 f817 	bl	800ace4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20002570 	.word	0x20002570

08001cc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(enc_KEY_Pin);
 8001cc4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001cc8:	f005 f816 	bl	8006cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001cd4:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <DMA2_Stream2_IRQHandler+0x10>)
 8001cd6:	f004 fc35 	bl	8006544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200025c8 	.word	0x200025c8

08001ce4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ce8:	4802      	ldr	r0, [pc, #8]	@ (8001cf4 <OTG_FS_IRQHandler+0x10>)
 8001cea:	f006 ff33 	bl	8008b54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20004468 	.word	0x20004468

08001cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return 1;
 8001cfc:	2301      	movs	r3, #1
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_kill>:

int _kill(int pid, int sig)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d12:	f012 ff95 	bl	8014c40 <__errno>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2216      	movs	r2, #22
 8001d1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_exit>:

void _exit (int status)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ffe7 	bl	8001d08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d3a:	bf00      	nop
 8001d3c:	e7fd      	b.n	8001d3a <_exit+0x12>

08001d3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e00a      	b.n	8001d66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d50:	f3af 8000 	nop.w
 8001d54:	4601      	mov	r1, r0
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	60ba      	str	r2, [r7, #8]
 8001d5c:	b2ca      	uxtb	r2, r1
 8001d5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	dbf0      	blt.n	8001d50 <_read+0x12>
  }

  return len;
 8001d6e:	687b      	ldr	r3, [r7, #4]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001da0:	605a      	str	r2, [r3, #4]
  return 0;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_isatty>:

int _isatty(int file)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001db8:	2301      	movs	r3, #1
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de8:	4a14      	ldr	r2, [pc, #80]	@ (8001e3c <_sbrk+0x5c>)
 8001dea:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <_sbrk+0x60>)
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df4:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <_sbrk+0x64>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	@ (8001e48 <_sbrk+0x68>)
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d207      	bcs.n	8001e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e10:	f012 ff16 	bl	8014c40 <__errno>
 8001e14:	4603      	mov	r3, r0
 8001e16:	220c      	movs	r2, #12
 8001e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	e009      	b.n	8001e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e26:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a05      	ldr	r2, [pc, #20]	@ (8001e44 <_sbrk+0x64>)
 8001e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e32:	68fb      	ldr	r3, [r7, #12]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20020000 	.word	0x20020000
 8001e40:	00000400 	.word	0x00000400
 8001e44:	2000262c 	.word	0x2000262c
 8001e48:	20004cb8 	.word	0x20004cb8

08001e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e50:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <SystemInit+0x20>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e56:	4a05      	ldr	r2, [pc, #20]	@ (8001e6c <SystemInit+0x20>)
 8001e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	@ 0x30
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	2224      	movs	r2, #36	@ 0x24
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f012 fe7c 	bl	8014b7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e8c:	4b22      	ldr	r3, [pc, #136]	@ (8001f18 <MX_TIM1_Init+0xa8>)
 8001e8e:	4a23      	ldr	r2, [pc, #140]	@ (8001f1c <MX_TIM1_Init+0xac>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e92:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <MX_TIM1_Init+0xa8>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <MX_TIM1_Init+0xa8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <MX_TIM1_Init+0xa8>)
 8001ea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ea4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f18 <MX_TIM1_Init+0xa8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <MX_TIM1_Init+0xa8>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <MX_TIM1_Init+0xa8>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	480d      	ldr	r0, [pc, #52]	@ (8001f18 <MX_TIM1_Init+0xa8>)
 8001ee4:	f009 fac2 	bl	800b46c <HAL_TIM_Encoder_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001eee:	f7ff fd73 	bl	80019d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	4619      	mov	r1, r3
 8001efe:	4806      	ldr	r0, [pc, #24]	@ (8001f18 <MX_TIM1_Init+0xa8>)
 8001f00:	f00a f972 	bl	800c1e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001f0a:	f7ff fd65 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	3730      	adds	r7, #48	@ 0x30
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20002630 	.word	0x20002630
 8001f1c:	40010000 	.word	0x40010000

08001f20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08e      	sub	sp, #56	@ 0x38
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	f107 0320 	add.w	r3, r7, #32
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
 8001f4c:	615a      	str	r2, [r3, #20]
 8001f4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f50:	4b2c      	ldr	r3, [pc, #176]	@ (8002004 <MX_TIM3_Init+0xe4>)
 8001f52:	4a2d      	ldr	r2, [pc, #180]	@ (8002008 <MX_TIM3_Init+0xe8>)
 8001f54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001f56:	4b2b      	ldr	r3, [pc, #172]	@ (8002004 <MX_TIM3_Init+0xe4>)
 8001f58:	2247      	movs	r2, #71	@ 0x47
 8001f5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5c:	4b29      	ldr	r3, [pc, #164]	@ (8002004 <MX_TIM3_Init+0xe4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8001f62:	4b28      	ldr	r3, [pc, #160]	@ (8002004 <MX_TIM3_Init+0xe4>)
 8001f64:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001f68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6a:	4b26      	ldr	r3, [pc, #152]	@ (8002004 <MX_TIM3_Init+0xe4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f70:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <MX_TIM3_Init+0xe4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f76:	4823      	ldr	r0, [pc, #140]	@ (8002004 <MX_TIM3_Init+0xe4>)
 8001f78:	f009 f8bc 	bl	800b0f4 <HAL_TIM_Base_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f82:	f7ff fd29 	bl	80019d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f90:	4619      	mov	r1, r3
 8001f92:	481c      	ldr	r0, [pc, #112]	@ (8002004 <MX_TIM3_Init+0xe4>)
 8001f94:	f009 fd70 	bl	800ba78 <HAL_TIM_ConfigClockSource>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001f9e:	f7ff fd1b 	bl	80019d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fa2:	4818      	ldr	r0, [pc, #96]	@ (8002004 <MX_TIM3_Init+0xe4>)
 8001fa4:	f009 f958 	bl	800b258 <HAL_TIM_PWM_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001fae:	f7ff fd13 	bl	80019d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fba:	f107 0320 	add.w	r3, r7, #32
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4810      	ldr	r0, [pc, #64]	@ (8002004 <MX_TIM3_Init+0xe4>)
 8001fc2:	f00a f911 	bl	800c1e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001fcc:	f7ff fd04 	bl	80019d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd0:	2360      	movs	r3, #96	@ 0x60
 8001fd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4807      	ldr	r0, [pc, #28]	@ (8002004 <MX_TIM3_Init+0xe4>)
 8001fe8:	f009 fc84 	bl	800b8f4 <HAL_TIM_PWM_ConfigChannel>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ff2:	f7ff fcf1 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ff6:	4803      	ldr	r0, [pc, #12]	@ (8002004 <MX_TIM3_Init+0xe4>)
 8001ff8:	f000 f8e4 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8001ffc:	bf00      	nop
 8001ffe:	3738      	adds	r7, #56	@ 0x38
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20002678 	.word	0x20002678
 8002008:	40000400 	.word	0x40000400

0800200c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	463b      	mov	r3, r7
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002028:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <MX_TIM4_Init+0x94>)
 800202a:	4a1e      	ldr	r2, [pc, #120]	@ (80020a4 <MX_TIM4_Init+0x98>)
 800202c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 800202e:	4b1c      	ldr	r3, [pc, #112]	@ (80020a0 <MX_TIM4_Init+0x94>)
 8002030:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002034:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b1a      	ldr	r3, [pc, #104]	@ (80020a0 <MX_TIM4_Init+0x94>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 800203c:	4b18      	ldr	r3, [pc, #96]	@ (80020a0 <MX_TIM4_Init+0x94>)
 800203e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002042:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002044:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <MX_TIM4_Init+0x94>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <MX_TIM4_Init+0x94>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002050:	4813      	ldr	r0, [pc, #76]	@ (80020a0 <MX_TIM4_Init+0x94>)
 8002052:	f009 f84f 	bl	800b0f4 <HAL_TIM_Base_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800205c:	f7ff fcbc 	bl	80019d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002064:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002066:	f107 0308 	add.w	r3, r7, #8
 800206a:	4619      	mov	r1, r3
 800206c:	480c      	ldr	r0, [pc, #48]	@ (80020a0 <MX_TIM4_Init+0x94>)
 800206e:	f009 fd03 	bl	800ba78 <HAL_TIM_ConfigClockSource>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002078:	f7ff fcae 	bl	80019d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002084:	463b      	mov	r3, r7
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	@ (80020a0 <MX_TIM4_Init+0x94>)
 800208a:	f00a f8ad 	bl	800c1e8 <HAL_TIMEx_MasterConfigSynchronization>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002094:	f7ff fca0 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	200026c0 	.word	0x200026c0
 80020a4:	40000800 	.word	0x40000800

080020a8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	@ 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1d      	ldr	r2, [pc, #116]	@ (800213c <HAL_TIM_Encoder_MspInit+0x94>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d134      	bne.n	8002134 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x98>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x98>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020da:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x98>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x98>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	4a14      	ldr	r2, [pc, #80]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x98>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f6:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x98>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002102:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002114:	2301      	movs	r3, #1
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4619      	mov	r1, r3
 800211e:	4809      	ldr	r0, [pc, #36]	@ (8002144 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002120:	f004 fc4c 	bl	80069bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	201b      	movs	r0, #27
 800212a:	f004 f904 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800212e:	201b      	movs	r0, #27
 8002130:	f004 f91d 	bl	800636e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002134:	bf00      	nop
 8002136:	3728      	adds	r7, #40	@ 0x28
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40010000 	.word	0x40010000
 8002140:	40023800 	.word	0x40023800
 8002144:	40020000 	.word	0x40020000

08002148 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a18      	ldr	r2, [pc, #96]	@ (80021b8 <HAL_TIM_Base_MspInit+0x70>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10e      	bne.n	8002178 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b17      	ldr	r3, [pc, #92]	@ (80021bc <HAL_TIM_Base_MspInit+0x74>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	4a16      	ldr	r2, [pc, #88]	@ (80021bc <HAL_TIM_Base_MspInit+0x74>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	6413      	str	r3, [r2, #64]	@ 0x40
 800216a:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <HAL_TIM_Base_MspInit+0x74>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002176:	e01a      	b.n	80021ae <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a10      	ldr	r2, [pc, #64]	@ (80021c0 <HAL_TIM_Base_MspInit+0x78>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d115      	bne.n	80021ae <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	4b0d      	ldr	r3, [pc, #52]	@ (80021bc <HAL_TIM_Base_MspInit+0x74>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	4a0c      	ldr	r2, [pc, #48]	@ (80021bc <HAL_TIM_Base_MspInit+0x74>)
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	6413      	str	r3, [r2, #64]	@ 0x40
 8002192:	4b0a      	ldr	r3, [pc, #40]	@ (80021bc <HAL_TIM_Base_MspInit+0x74>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	201e      	movs	r0, #30
 80021a4:	f004 f8c7 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021a8:	201e      	movs	r0, #30
 80021aa:	f004 f8e0 	bl	800636e <HAL_NVIC_EnableIRQ>
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40000400 	.word	0x40000400
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40000800 	.word	0x40000800

080021c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a12      	ldr	r2, [pc, #72]	@ (800222c <HAL_TIM_MspPostInit+0x68>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d11d      	bne.n	8002222 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <HAL_TIM_MspPostInit+0x6c>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a10      	ldr	r2, [pc, #64]	@ (8002230 <HAL_TIM_MspPostInit+0x6c>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <HAL_TIM_MspPostInit+0x6c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002202:	2310      	movs	r3, #16
 8002204:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002212:	2302      	movs	r3, #2
 8002214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	4619      	mov	r1, r3
 800221c:	4805      	ldr	r0, [pc, #20]	@ (8002234 <HAL_TIM_MspPostInit+0x70>)
 800221e:	f004 fbcd 	bl	80069bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002222:	bf00      	nop
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40000400 	.word	0x40000400
 8002230:	40023800 	.word	0x40023800
 8002234:	40020400 	.word	0x40020400

08002238 <OLED_manage>:
	action_menu_battery_type,
	action_menu_adc,
	action_menu_stop
};

void OLED_manage(struct state *st, struct sensors *s) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
	switch (st->current_screen_type) {
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <OLED_manage+0x18>
 800224a:	2b01      	cmp	r3, #1
 800224c:	d02a      	beq.n	80022a4 <OLED_manage+0x6c>
			ST7735_FillScreenFast(ST7735_BLACK);
		}
		sensor_display[st->sensor_current](s);
	    break;
	default:
		break;
 800224e:	e03d      	b.n	80022cc <OLED_manage+0x94>
		if (st->is_enc_pressed || st->update_actions){
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7adb      	ldrb	r3, [r3, #11]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d103      	bne.n	8002260 <OLED_manage+0x28>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7b1b      	ldrb	r3, [r3, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <OLED_manage+0x3e>
			menu_actions[st->menu_current](st);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	785b      	ldrb	r3, [r3, #1]
 8002264:	461a      	mov	r2, r3
 8002266:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <OLED_manage+0x9c>)
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
			st->is_enc_pressed = false;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	72da      	strb	r2, [r3, #11]
		if (st->screen_clear == true && st->current_screen_type == SCREEN_MENU){
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7b9b      	ldrb	r3, [r3, #14]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d025      	beq.n	80022ca <OLED_manage+0x92>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d121      	bne.n	80022ca <OLED_manage+0x92>
			st->screen_clear = false;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	739a      	strb	r2, [r3, #14]
			ST7735_FillScreenFast(ST7735_BLACK);
 800228c:	2000      	movs	r0, #0
 800228e:	f003 fa9c 	bl	80057ca <ST7735_FillScreenFast>
			menu_display[st->menu_current](st);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	461a      	mov	r2, r3
 8002298:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <OLED_manage+0xa0>)
 800229a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	4798      	blx	r3
	    break;
 80022a2:	e012      	b.n	80022ca <OLED_manage+0x92>
		if (st->screen_clear == true) {
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7b9b      	ldrb	r3, [r3, #14]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <OLED_manage+0x80>
			st->screen_clear = false;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	739a      	strb	r2, [r3, #14]
			ST7735_FillScreenFast(ST7735_BLACK);
 80022b2:	2000      	movs	r0, #0
 80022b4:	f003 fa89 	bl	80057ca <ST7735_FillScreenFast>
		sensor_display[st->sensor_current](s);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	78db      	ldrb	r3, [r3, #3]
 80022bc:	461a      	mov	r2, r3
 80022be:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <OLED_manage+0xa4>)
 80022c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c4:	6838      	ldr	r0, [r7, #0]
 80022c6:	4798      	blx	r3
	    break;
 80022c8:	e000      	b.n	80022cc <OLED_manage+0x94>
	    break;
 80022ca:	bf00      	nop
	}
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000048 	.word	0x20000048
 80022d8:	20000034 	.word	0x20000034
 80022dc:	2000002c 	.word	0x2000002c

080022e0 <display_sensor_first>:

void display_sensor_first(struct sensors *s) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0ae      	sub	sp, #184	@ 0xb8
 80022e4:	af04      	add	r7, sp, #16
 80022e6:	6078      	str	r0, [r7, #4]
	char buffer[150];

	// Temperatura
	snprintf(buffer, sizeof(buffer), "Temp: %5.2f C ", s->BMP280temperature[0]);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f933 	bl	8000558 <__aeabi_f2d>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	f107 0008 	add.w	r0, r7, #8
 80022fa:	e9cd 2300 	strd	r2, r3, [sp]
 80022fe:	4a86      	ldr	r2, [pc, #536]	@ (8002518 <display_sensor_first+0x238>)
 8002300:	2196      	movs	r1, #150	@ 0x96
 8002302:	f012 fb0b 	bl	801491c <sniprintf>
	ST7735_WriteString(5, 5, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002306:	4b85      	ldr	r3, [pc, #532]	@ (800251c <display_sensor_first+0x23c>)
 8002308:	f107 0108 	add.w	r1, r7, #8
 800230c:	2200      	movs	r2, #0
 800230e:	9202      	str	r2, [sp, #8]
 8002310:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002314:	9201      	str	r2, [sp, #4]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	9200      	str	r2, [sp, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	460a      	mov	r2, r1
 800231e:	2105      	movs	r1, #5
 8002320:	2005      	movs	r0, #5
 8002322:	f003 f900 	bl	8005526 <ST7735_WriteString>

	// Ciśnienie
	snprintf(buffer, sizeof(buffer), "Prs:  %6.4f bar", (float)s->BMP280pressure[0] / 100000.0f);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002332:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8002520 <display_sensor_first+0x240>
 8002336:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800233a:	ee16 0a90 	vmov	r0, s13
 800233e:	f7fe f90b 	bl	8000558 <__aeabi_f2d>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	f107 0008 	add.w	r0, r7, #8
 800234a:	e9cd 2300 	strd	r2, r3, [sp]
 800234e:	4a75      	ldr	r2, [pc, #468]	@ (8002524 <display_sensor_first+0x244>)
 8002350:	2196      	movs	r1, #150	@ 0x96
 8002352:	f012 fae3 	bl	801491c <sniprintf>
	ST7735_WriteString(5,  20, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002356:	4b71      	ldr	r3, [pc, #452]	@ (800251c <display_sensor_first+0x23c>)
 8002358:	f107 0108 	add.w	r1, r7, #8
 800235c:	2200      	movs	r2, #0
 800235e:	9202      	str	r2, [sp, #8]
 8002360:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002364:	9201      	str	r2, [sp, #4]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	9200      	str	r2, [sp, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	460a      	mov	r2, r1
 800236e:	2114      	movs	r1, #20
 8002370:	2005      	movs	r0, #5
 8002372:	f003 f8d8 	bl	8005526 <ST7735_WriteString>

	// TVOC
	snprintf(buffer, sizeof(buffer), "TVOC: %6u ppb", s->tvoc_ppb);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	8b1b      	ldrh	r3, [r3, #24]
 800237a:	f107 0008 	add.w	r0, r7, #8
 800237e:	4a6a      	ldr	r2, [pc, #424]	@ (8002528 <display_sensor_first+0x248>)
 8002380:	2196      	movs	r1, #150	@ 0x96
 8002382:	f012 facb 	bl	801491c <sniprintf>
	ST7735_WriteString(5,  35, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002386:	4b65      	ldr	r3, [pc, #404]	@ (800251c <display_sensor_first+0x23c>)
 8002388:	f107 0108 	add.w	r1, r7, #8
 800238c:	2200      	movs	r2, #0
 800238e:	9202      	str	r2, [sp, #8]
 8002390:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002394:	9201      	str	r2, [sp, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	9200      	str	r2, [sp, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	460a      	mov	r2, r1
 800239e:	2123      	movs	r1, #35	@ 0x23
 80023a0:	2005      	movs	r0, #5
 80023a2:	f003 f8c0 	bl	8005526 <ST7735_WriteString>

	// CO2eq
	snprintf(buffer, sizeof(buffer), "CO2:  %6u ppm", s->co2_eq_ppm);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8b5b      	ldrh	r3, [r3, #26]
 80023aa:	f107 0008 	add.w	r0, r7, #8
 80023ae:	4a5f      	ldr	r2, [pc, #380]	@ (800252c <display_sensor_first+0x24c>)
 80023b0:	2196      	movs	r1, #150	@ 0x96
 80023b2:	f012 fab3 	bl	801491c <sniprintf>
	ST7735_WriteString(5,  50, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80023b6:	4b59      	ldr	r3, [pc, #356]	@ (800251c <display_sensor_first+0x23c>)
 80023b8:	f107 0108 	add.w	r1, r7, #8
 80023bc:	2200      	movs	r2, #0
 80023be:	9202      	str	r2, [sp, #8]
 80023c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023c4:	9201      	str	r2, [sp, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	9200      	str	r2, [sp, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	460a      	mov	r2, r1
 80023ce:	2132      	movs	r1, #50	@ 0x32
 80023d0:	2005      	movs	r0, #5
 80023d2:	f003 f8a8 	bl	8005526 <ST7735_WriteString>

	// Etanol/512.0
	float ethanol = s->scaled_ethanol_signal / 512.0f;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	8b9b      	ldrh	r3, [r3, #28]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e2:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8002530 <display_sensor_first+0x250>
 80023e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ea:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
	snprintf(buffer, sizeof(buffer), "EtOH: %6.2f", ethanol);
 80023ee:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80023f2:	f7fe f8b1 	bl	8000558 <__aeabi_f2d>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	f107 0008 	add.w	r0, r7, #8
 80023fe:	e9cd 2300 	strd	r2, r3, [sp]
 8002402:	4a4c      	ldr	r2, [pc, #304]	@ (8002534 <display_sensor_first+0x254>)
 8002404:	2196      	movs	r1, #150	@ 0x96
 8002406:	f012 fa89 	bl	801491c <sniprintf>
	ST7735_WriteString(5,  65, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800240a:	4b44      	ldr	r3, [pc, #272]	@ (800251c <display_sensor_first+0x23c>)
 800240c:	f107 0108 	add.w	r1, r7, #8
 8002410:	2200      	movs	r2, #0
 8002412:	9202      	str	r2, [sp, #8]
 8002414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002418:	9201      	str	r2, [sp, #4]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	9200      	str	r2, [sp, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	460a      	mov	r2, r1
 8002422:	2141      	movs	r1, #65	@ 0x41
 8002424:	2005      	movs	r0, #5
 8002426:	f003 f87e 	bl	8005526 <ST7735_WriteString>

	// H2/512.0
	float h2 = s->scaled_h2_signal / 512.0f;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8bdb      	ldrh	r3, [r3, #30]
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002436:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002530 <display_sensor_first+0x250>
 800243a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800243e:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
	snprintf(buffer, sizeof(buffer), "H2:   %6.2f", h2);
 8002442:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002446:	f7fe f887 	bl	8000558 <__aeabi_f2d>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	f107 0008 	add.w	r0, r7, #8
 8002452:	e9cd 2300 	strd	r2, r3, [sp]
 8002456:	4a38      	ldr	r2, [pc, #224]	@ (8002538 <display_sensor_first+0x258>)
 8002458:	2196      	movs	r1, #150	@ 0x96
 800245a:	f012 fa5f 	bl	801491c <sniprintf>
	ST7735_WriteString(5,  80, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800245e:	4b2f      	ldr	r3, [pc, #188]	@ (800251c <display_sensor_first+0x23c>)
 8002460:	f107 0108 	add.w	r1, r7, #8
 8002464:	2200      	movs	r2, #0
 8002466:	9202      	str	r2, [sp, #8]
 8002468:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800246c:	9201      	str	r2, [sp, #4]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	9200      	str	r2, [sp, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	460a      	mov	r2, r1
 8002476:	2150      	movs	r1, #80	@ 0x50
 8002478:	2005      	movs	r0, #5
 800247a:	f003 f854 	bl	8005526 <ST7735_WriteString>

	// INA219_Current
	snprintf(buffer, sizeof(buffer), "Current:  %4d mA", s->INA219_Current);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002484:	f107 0008 	add.w	r0, r7, #8
 8002488:	4a2c      	ldr	r2, [pc, #176]	@ (800253c <display_sensor_first+0x25c>)
 800248a:	2196      	movs	r1, #150	@ 0x96
 800248c:	f012 fa46 	bl	801491c <sniprintf>
	ST7735_WriteString(5,  95, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002490:	4b22      	ldr	r3, [pc, #136]	@ (800251c <display_sensor_first+0x23c>)
 8002492:	f107 0108 	add.w	r1, r7, #8
 8002496:	2200      	movs	r2, #0
 8002498:	9202      	str	r2, [sp, #8]
 800249a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800249e:	9201      	str	r2, [sp, #4]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	9200      	str	r2, [sp, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	460a      	mov	r2, r1
 80024a8:	215f      	movs	r1, #95	@ 0x5f
 80024aa:	2005      	movs	r0, #5
 80024ac:	f003 f83b 	bl	8005526 <ST7735_WriteString>

	// INA219_Voltage
	snprintf(buffer, sizeof(buffer), "Voltage:  %4u mV", s->INA219_Voltage);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	8c1b      	ldrh	r3, [r3, #32]
 80024b4:	f107 0008 	add.w	r0, r7, #8
 80024b8:	4a21      	ldr	r2, [pc, #132]	@ (8002540 <display_sensor_first+0x260>)
 80024ba:	2196      	movs	r1, #150	@ 0x96
 80024bc:	f012 fa2e 	bl	801491c <sniprintf>
	ST7735_WriteString(5,  110, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024c0:	4b16      	ldr	r3, [pc, #88]	@ (800251c <display_sensor_first+0x23c>)
 80024c2:	f107 0108 	add.w	r1, r7, #8
 80024c6:	2200      	movs	r2, #0
 80024c8:	9202      	str	r2, [sp, #8]
 80024ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024ce:	9201      	str	r2, [sp, #4]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	9200      	str	r2, [sp, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	460a      	mov	r2, r1
 80024d8:	216e      	movs	r1, #110	@ 0x6e
 80024da:	2005      	movs	r0, #5
 80024dc:	f003 f823 	bl	8005526 <ST7735_WriteString>

	// INA219_Power
	snprintf(buffer, sizeof(buffer), "Power:  %4u mW", s->INA219_Power);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80024e4:	f107 0008 	add.w	r0, r7, #8
 80024e8:	4a16      	ldr	r2, [pc, #88]	@ (8002544 <display_sensor_first+0x264>)
 80024ea:	2196      	movs	r1, #150	@ 0x96
 80024ec:	f012 fa16 	bl	801491c <sniprintf>
	ST7735_WriteString(5,  125, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024f0:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <display_sensor_first+0x23c>)
 80024f2:	f107 0108 	add.w	r1, r7, #8
 80024f6:	2200      	movs	r2, #0
 80024f8:	9202      	str	r2, [sp, #8]
 80024fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024fe:	9201      	str	r2, [sp, #4]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	9200      	str	r2, [sp, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	460a      	mov	r2, r1
 8002508:	217d      	movs	r1, #125	@ 0x7d
 800250a:	2005      	movs	r0, #5
 800250c:	f003 f80b 	bl	8005526 <ST7735_WriteString>
}
 8002510:	bf00      	nop
 8002512:	37a8      	adds	r7, #168	@ 0xa8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	08018378 	.word	0x08018378
 800251c:	200000e0 	.word	0x200000e0
 8002520:	47c35000 	.word	0x47c35000
 8002524:	08018388 	.word	0x08018388
 8002528:	08018398 	.word	0x08018398
 800252c:	080183a8 	.word	0x080183a8
 8002530:	44000000 	.word	0x44000000
 8002534:	080183b8 	.word	0x080183b8
 8002538:	080183c4 	.word	0x080183c4
 800253c:	080183d0 	.word	0x080183d0
 8002540:	080183e4 	.word	0x080183e4
 8002544:	080183f8 	.word	0x080183f8

08002548 <display_sensor_second>:

void display_sensor_second(struct sensors *s) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b0ac      	sub	sp, #176	@ 0xb0
 800254c:	af04      	add	r7, sp, #16
 800254e:	6078      	str	r0, [r7, #4]
	char buffer[150];

	// Temperatura 1
	snprintf(buffer, sizeof(buffer), "Temp1: %5.2f C ", s->BMP280temperature[0]);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd ffff 	bl	8000558 <__aeabi_f2d>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	f107 0008 	add.w	r0, r7, #8
 8002562:	e9cd 2300 	strd	r2, r3, [sp]
 8002566:	4a3a      	ldr	r2, [pc, #232]	@ (8002650 <display_sensor_second+0x108>)
 8002568:	2196      	movs	r1, #150	@ 0x96
 800256a:	f012 f9d7 	bl	801491c <sniprintf>
	ST7735_WriteString(5, 5, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800256e:	4b39      	ldr	r3, [pc, #228]	@ (8002654 <display_sensor_second+0x10c>)
 8002570:	f107 0108 	add.w	r1, r7, #8
 8002574:	2200      	movs	r2, #0
 8002576:	9202      	str	r2, [sp, #8]
 8002578:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800257c:	9201      	str	r2, [sp, #4]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	9200      	str	r2, [sp, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	460a      	mov	r2, r1
 8002586:	2105      	movs	r1, #5
 8002588:	2005      	movs	r0, #5
 800258a:	f002 ffcc 	bl	8005526 <ST7735_WriteString>

	// Temperatura 2
	snprintf(buffer, sizeof(buffer), "Temp2: %5.2f C ", s->BMP280temperature[1]);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fd ffe0 	bl	8000558 <__aeabi_f2d>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	f107 0008 	add.w	r0, r7, #8
 80025a0:	e9cd 2300 	strd	r2, r3, [sp]
 80025a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002658 <display_sensor_second+0x110>)
 80025a6:	2196      	movs	r1, #150	@ 0x96
 80025a8:	f012 f9b8 	bl	801491c <sniprintf>
	ST7735_WriteString(5, 20, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80025ac:	4b29      	ldr	r3, [pc, #164]	@ (8002654 <display_sensor_second+0x10c>)
 80025ae:	f107 0108 	add.w	r1, r7, #8
 80025b2:	2200      	movs	r2, #0
 80025b4:	9202      	str	r2, [sp, #8]
 80025b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ba:	9201      	str	r2, [sp, #4]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	9200      	str	r2, [sp, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	460a      	mov	r2, r1
 80025c4:	2114      	movs	r1, #20
 80025c6:	2005      	movs	r0, #5
 80025c8:	f002 ffad 	bl	8005526 <ST7735_WriteString>

	// Temperatura 3
	snprintf(buffer, sizeof(buffer), "Temp3: %5.2f C ", s->BMP280temperature[2]);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ffc1 	bl	8000558 <__aeabi_f2d>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	f107 0008 	add.w	r0, r7, #8
 80025de:	e9cd 2300 	strd	r2, r3, [sp]
 80025e2:	4a1e      	ldr	r2, [pc, #120]	@ (800265c <display_sensor_second+0x114>)
 80025e4:	2196      	movs	r1, #150	@ 0x96
 80025e6:	f012 f999 	bl	801491c <sniprintf>
	ST7735_WriteString(5, 35, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80025ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <display_sensor_second+0x10c>)
 80025ec:	f107 0108 	add.w	r1, r7, #8
 80025f0:	2200      	movs	r2, #0
 80025f2:	9202      	str	r2, [sp, #8]
 80025f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025f8:	9201      	str	r2, [sp, #4]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	9200      	str	r2, [sp, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	460a      	mov	r2, r1
 8002602:	2123      	movs	r1, #35	@ 0x23
 8002604:	2005      	movs	r0, #5
 8002606:	f002 ff8e 	bl	8005526 <ST7735_WriteString>

	// PWM "ADC: %.2f%%\r\n",
	snprintf(buffer, sizeof(buffer), "PWM: %.2f%% ", s->adc_percentage);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ffa2 	bl	8000558 <__aeabi_f2d>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	f107 0008 	add.w	r0, r7, #8
 800261c:	e9cd 2300 	strd	r2, r3, [sp]
 8002620:	4a0f      	ldr	r2, [pc, #60]	@ (8002660 <display_sensor_second+0x118>)
 8002622:	2196      	movs	r1, #150	@ 0x96
 8002624:	f012 f97a 	bl	801491c <sniprintf>
	ST7735_WriteString(5, 50, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002628:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <display_sensor_second+0x10c>)
 800262a:	f107 0108 	add.w	r1, r7, #8
 800262e:	2200      	movs	r2, #0
 8002630:	9202      	str	r2, [sp, #8]
 8002632:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002636:	9201      	str	r2, [sp, #4]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	9200      	str	r2, [sp, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	460a      	mov	r2, r1
 8002640:	2132      	movs	r1, #50	@ 0x32
 8002642:	2005      	movs	r0, #5
 8002644:	f002 ff6f 	bl	8005526 <ST7735_WriteString>
}
 8002648:	bf00      	nop
 800264a:	37a0      	adds	r7, #160	@ 0xa0
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	08018408 	.word	0x08018408
 8002654:	200000e0 	.word	0x200000e0
 8002658:	08018418 	.word	0x08018418
 800265c:	08018428 	.word	0x08018428
 8002660:	08018438 	.word	0x08018438

08002664 <display_menu_main>:

void display_menu_main(struct state *st) {
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b097      	sub	sp, #92	@ 0x5c
 8002668:	af04      	add	r7, sp, #16
 800266a:	6078      	str	r0, [r7, #4]
	char buffer[50];
    uint8_t first_visible;
    uint8_t ptr_pose;  // pointer position {up, middle, down}

    if (st->menu_current_ptr == MENU_START) {  // first position
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	789b      	ldrb	r3, [r3, #2]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d106      	bne.n	8002682 <display_menu_main+0x1e>
    	first_visible = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    	ptr_pose = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002680:	e012      	b.n	80026a8 <display_menu_main+0x44>
    }
    else if (st->menu_current_ptr == MENU_SCREEN_COUNT - 1) {  // last position
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	789b      	ldrb	r3, [r3, #2]
 8002686:	2b04      	cmp	r3, #4
 8002688:	d106      	bne.n	8002698 <display_menu_main+0x34>
    	first_visible = SCREENS_MENU_NUM - SCREENS_MENU_VISIBLE_ITEMS;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        ptr_pose = SCREENS_MENU_VISIBLE_ITEMS - 1;
 8002690:	2302      	movs	r3, #2
 8002692:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002696:	e007      	b.n	80026a8 <display_menu_main+0x44>
    }
    else {  // middle position
    	first_visible = st->menu_current_ptr - 2;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	789b      	ldrb	r3, [r3, #2]
 800269c:	3b02      	subs	r3, #2
 800269e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    	ptr_pose = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    for (uint8_t i = 0; i < SCREENS_MENU_VISIBLE_ITEMS; i++) {
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80026ae:	e05e      	b.n	800276e <display_menu_main+0x10a>
    	snprintf(buffer, sizeof(buffer), "%s", menu[first_visible + i]);
 80026b0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80026b4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80026b8:	4413      	add	r3, r2
 80026ba:	4a68      	ldr	r2, [pc, #416]	@ (800285c <display_menu_main+0x1f8>)
 80026bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c0:	f107 0008 	add.w	r0, r7, #8
 80026c4:	4a66      	ldr	r2, [pc, #408]	@ (8002860 <display_menu_main+0x1fc>)
 80026c6:	2132      	movs	r1, #50	@ 0x32
 80026c8:	f012 f928 	bl	801491c <sniprintf>

    	uint16_t x_pos = (ST7735_WIDTH - (strlen(buffer) * Font_11x18.width)) / 2;
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd fdd5 	bl	8000280 <strlen>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4a62      	ldr	r2, [pc, #392]	@ (8002864 <display_menu_main+0x200>)
 80026da:	7812      	ldrb	r2, [r2, #0]
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    	uint16_t y_pos = i*(Font_11x18.height+26)+26;
 80026e8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002864 <display_menu_main+0x200>)
 80026f0:	785b      	ldrb	r3, [r3, #1]
 80026f2:	331a      	adds	r3, #26
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	fb12 f303 	smulbb	r3, r2, r3
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	331a      	adds	r3, #26
 80026fe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    	ST7735_WriteString(x_pos, y_pos, buffer, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8002700:	4b58      	ldr	r3, [pc, #352]	@ (8002864 <display_menu_main+0x200>)
 8002702:	f107 0408 	add.w	r4, r7, #8
 8002706:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8002708:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 800270a:	2200      	movs	r2, #0
 800270c:	9202      	str	r2, [sp, #8]
 800270e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002712:	9201      	str	r2, [sp, #4]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	9200      	str	r2, [sp, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4622      	mov	r2, r4
 800271c:	f002 ff03 	bl	8005526 <ST7735_WriteString>
        // cursor
    	if ( ptr_pose == i ) {
 8002720:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002724:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002728:	429a      	cmp	r2, r3
 800272a:	d11b      	bne.n	8002764 <display_menu_main+0x100>
    		ST7735_FillRectangle(x_pos, y_pos + Font_11x18.height + 1, strlen(buffer)*Font_11x18.width, 2, ST7735_WHITE);
 800272c:	4b4d      	ldr	r3, [pc, #308]	@ (8002864 <display_menu_main+0x200>)
 800272e:	785b      	ldrb	r3, [r3, #1]
 8002730:	461a      	mov	r2, r3
 8002732:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002734:	4413      	add	r3, r2
 8002736:	b29b      	uxth	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	b29c      	uxth	r4, r3
 800273c:	f107 0308 	add.w	r3, r7, #8
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd fd9d 	bl	8000280 <strlen>
 8002746:	4603      	mov	r3, r0
 8002748:	b29b      	uxth	r3, r3
 800274a:	4a46      	ldr	r2, [pc, #280]	@ (8002864 <display_menu_main+0x200>)
 800274c:	7812      	ldrb	r2, [r2, #0]
 800274e:	fb13 f302 	smulbb	r3, r3, r2
 8002752:	b29a      	uxth	r2, r3
 8002754:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 8002756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	2302      	movs	r3, #2
 800275e:	4621      	mov	r1, r4
 8002760:	f002 ff2c 	bl	80055bc <ST7735_FillRectangle>
    for (uint8_t i = 0; i < SCREENS_MENU_VISIBLE_ITEMS; i++) {
 8002764:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002768:	3301      	adds	r3, #1
 800276a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800276e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002772:	2b02      	cmp	r3, #2
 8002774:	d99c      	bls.n	80026b0 <display_menu_main+0x4c>
    	}
    }

	uint16_t y_pos = ST7735_HEIGHT - Font_7x10.height;
 8002776:	4b3c      	ldr	r3, [pc, #240]	@ (8002868 <display_menu_main+0x204>)
 8002778:	785b      	ldrb	r3, [r3, #1]
 800277a:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800277e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	snprintf(buffer, sizeof(buffer), "%s", batteries[st->battery_current]);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	79db      	ldrb	r3, [r3, #7]
 8002786:	461a      	mov	r2, r3
 8002788:	4b38      	ldr	r3, [pc, #224]	@ (800286c <display_menu_main+0x208>)
 800278a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278e:	f107 0008 	add.w	r0, r7, #8
 8002792:	4a33      	ldr	r2, [pc, #204]	@ (8002860 <display_menu_main+0x1fc>)
 8002794:	2132      	movs	r1, #50	@ 0x32
 8002796:	f012 f8c1 	bl	801491c <sniprintf>
	ST7735_WriteString(5, y_pos, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800279a:	4b33      	ldr	r3, [pc, #204]	@ (8002868 <display_menu_main+0x204>)
 800279c:	f107 0008 	add.w	r0, r7, #8
 80027a0:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 80027a4:	2200      	movs	r2, #0
 80027a6:	9202      	str	r2, [sp, #8]
 80027a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027ac:	9201      	str	r2, [sp, #4]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	9200      	str	r2, [sp, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4602      	mov	r2, r0
 80027b6:	2005      	movs	r0, #5
 80027b8:	f002 feb5 	bl	8005526 <ST7735_WriteString>

	uint16_t x_pos = (strlen(buffer) + 2) * Font_7x10.width;
 80027bc:	f107 0308 	add.w	r3, r7, #8
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd fd5d 	bl	8000280 <strlen>
 80027c6:	4603      	mov	r3, r0
 80027c8:	3302      	adds	r3, #2
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4a26      	ldr	r2, [pc, #152]	@ (8002868 <display_menu_main+0x204>)
 80027ce:	7812      	ldrb	r2, [r2, #0]
 80027d0:	fb13 f302 	smulbb	r3, r3, r2
 80027d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	snprintf(buffer, sizeof(buffer), "%.1f%%", s.adc_percentage);
 80027d8:	4b25      	ldr	r3, [pc, #148]	@ (8002870 <display_menu_main+0x20c>)
 80027da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd febb 	bl	8000558 <__aeabi_f2d>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	f107 0008 	add.w	r0, r7, #8
 80027ea:	e9cd 2300 	strd	r2, r3, [sp]
 80027ee:	4a21      	ldr	r2, [pc, #132]	@ (8002874 <display_menu_main+0x210>)
 80027f0:	2132      	movs	r1, #50	@ 0x32
 80027f2:	f012 f893 	bl	801491c <sniprintf>
	ST7735_WriteString(x_pos, y_pos, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80027f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002868 <display_menu_main+0x204>)
 80027f8:	f107 0408 	add.w	r4, r7, #8
 80027fc:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 8002800:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8002804:	2200      	movs	r2, #0
 8002806:	9202      	str	r2, [sp, #8]
 8002808:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800280c:	9201      	str	r2, [sp, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	9200      	str	r2, [sp, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4622      	mov	r2, r4
 8002816:	f002 fe86 	bl	8005526 <ST7735_WriteString>

//	snprintf(buffer, sizeof(buffer), "%s", batteries[st->battery_current]);
//	x_pos = ST7735_WIDTH - (strlen(buffer) * Font_7x10.width) - 5;
//	ST7735_WriteString(x_pos, y_pos, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);

	x_pos = ST7735_WIDTH - img_thunder.width - 3;
 800281a:	4b17      	ldr	r3, [pc, #92]	@ (8002878 <display_menu_main+0x214>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	f1c3 037d 	rsb	r3, r3, #125	@ 0x7d
 8002822:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	y_pos = ST7735_HEIGHT - img_thunder.height - 3;
 8002826:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <display_menu_main+0x214>)
 8002828:	785b      	ldrb	r3, [r3, #1]
 800282a:	f1c3 039d 	rsb	r3, r3, #157	@ 0x9d
 800282e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	ST7735_DrawImage(x_pos, y_pos, img_thunder.width, img_thunder.height, img_thunder.data);
 8002832:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <display_menu_main+0x214>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <display_menu_main+0x214>)
 800283a:	785b      	ldrb	r3, [r3, #1]
 800283c:	461c      	mov	r4, r3
 800283e:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <display_menu_main+0x214>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 8002846:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	4623      	mov	r3, r4
 800284e:	f002 ffcd 	bl	80057ec <ST7735_DrawImage>

}
 8002852:	bf00      	nop
 8002854:	374c      	adds	r7, #76	@ 0x4c
 8002856:	46bd      	mov	sp, r7
 8002858:	bd90      	pop	{r4, r7, pc}
 800285a:	bf00      	nop
 800285c:	20000010 	.word	0x20000010
 8002860:	08018448 	.word	0x08018448
 8002864:	200000e8 	.word	0x200000e8
 8002868:	200000e0 	.word	0x200000e0
 800286c:	20000020 	.word	0x20000020
 8002870:	200004c8 	.word	0x200004c8
 8002874:	0801844c 	.word	0x0801844c
 8002878:	200000d8 	.word	0x200000d8

0800287c <display_menu_start>:

void display_menu_start(struct state *st) {
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b08d      	sub	sp, #52	@ 0x34
 8002880:	af04      	add	r7, sp, #16
 8002882:	6078      	str	r0, [r7, #4]
	char buffer[] = "Press to start";
 8002884:	4b18      	ldr	r3, [pc, #96]	@ (80028e8 <display_menu_start+0x6c>)
 8002886:	f107 040c 	add.w	r4, r7, #12
 800288a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800288c:	c407      	stmia	r4!, {r0, r1, r2}
 800288e:	8023      	strh	r3, [r4, #0]
 8002890:	3402      	adds	r4, #2
 8002892:	0c1b      	lsrs	r3, r3, #16
 8002894:	7023      	strb	r3, [r4, #0]

	//snprintf(buffer, sizeof(buffer), "Press to start");
	uint16_t x_pos = (ST7735_WIDTH - (strlen(buffer) * Font_7x10.width)) / 2;
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd fcf0 	bl	8000280 <strlen>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4a12      	ldr	r2, [pc, #72]	@ (80028ec <display_menu_start+0x70>)
 80028a4:	7812      	ldrb	r2, [r2, #0]
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	83fb      	strh	r3, [r7, #30]
	uint16_t y_pos = (ST7735_WIDTH + Font_7x10.height)/2;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <display_menu_start+0x70>)
 80028b4:	785b      	ldrb	r3, [r3, #1]
 80028b6:	3380      	adds	r3, #128	@ 0x80
 80028b8:	0fda      	lsrs	r2, r3, #31
 80028ba:	4413      	add	r3, r2
 80028bc:	105b      	asrs	r3, r3, #1
 80028be:	83bb      	strh	r3, [r7, #28]
	ST7735_WriteString(x_pos, y_pos, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80028c0:	4b0a      	ldr	r3, [pc, #40]	@ (80028ec <display_menu_start+0x70>)
 80028c2:	f107 040c 	add.w	r4, r7, #12
 80028c6:	8bb9      	ldrh	r1, [r7, #28]
 80028c8:	8bf8      	ldrh	r0, [r7, #30]
 80028ca:	2200      	movs	r2, #0
 80028cc:	9202      	str	r2, [sp, #8]
 80028ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028d2:	9201      	str	r2, [sp, #4]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	9200      	str	r2, [sp, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4622      	mov	r2, r4
 80028dc:	f002 fe23 	bl	8005526 <ST7735_WriteString>
}
 80028e0:	bf00      	nop
 80028e2:	3724      	adds	r7, #36	@ 0x24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd90      	pop	{r4, r7, pc}
 80028e8:	08018454 	.word	0x08018454
 80028ec:	200000e0 	.word	0x200000e0

080028f0 <display_menu_battery_type>:

void display_menu_battery_type(struct state *st) {
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b095      	sub	sp, #84	@ 0x54
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	6078      	str	r0, [r7, #4]
	char buffer[50];

    for (uint8_t i = 0; i < 2; i++) {
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80028fe:	e060      	b.n	80029c2 <display_menu_battery_type+0xd2>
    	snprintf(buffer, sizeof(buffer), "%s", batteries[i]);
 8002900:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002904:	4a33      	ldr	r2, [pc, #204]	@ (80029d4 <display_menu_battery_type+0xe4>)
 8002906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290a:	f107 0008 	add.w	r0, r7, #8
 800290e:	4a32      	ldr	r2, [pc, #200]	@ (80029d8 <display_menu_battery_type+0xe8>)
 8002910:	2132      	movs	r1, #50	@ 0x32
 8002912:	f012 f803 	bl	801491c <sniprintf>

    	uint16_t x_pos = (ST7735_WIDTH - (strlen(buffer) * Font_11x18.width)) / 2;
 8002916:	f107 0308 	add.w	r3, r7, #8
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fcb0 	bl	8000280 <strlen>
 8002920:	4603      	mov	r3, r0
 8002922:	4a2e      	ldr	r2, [pc, #184]	@ (80029dc <display_menu_battery_type+0xec>)
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800292e:	085b      	lsrs	r3, r3, #1
 8002930:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    	uint16_t y_pos = (ST7735_HEIGHT - (2 * Font_11x18.height))/2 + (2*Font_11x18.height*i);
 8002932:	4b2a      	ldr	r3, [pc, #168]	@ (80029dc <display_menu_battery_type+0xec>)
 8002934:	785b      	ldrb	r3, [r3, #1]
 8002936:	461a      	mov	r2, r3
 8002938:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800293c:	b29b      	uxth	r3, r3
 800293e:	fb12 f303 	smulbb	r3, r2, r3
 8002942:	b29b      	uxth	r3, r3
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	b29b      	uxth	r3, r3
 8002948:	4a24      	ldr	r2, [pc, #144]	@ (80029dc <display_menu_battery_type+0xec>)
 800294a:	7852      	ldrb	r2, [r2, #1]
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	b29b      	uxth	r3, r3
 8002950:	3350      	adds	r3, #80	@ 0x50
 8002952:	877b      	strh	r3, [r7, #58]	@ 0x3a
    	ST7735_WriteString(x_pos, y_pos, buffer, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8002954:	4b21      	ldr	r3, [pc, #132]	@ (80029dc <display_menu_battery_type+0xec>)
 8002956:	f107 0408 	add.w	r4, r7, #8
 800295a:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800295c:	8fb8      	ldrh	r0, [r7, #60]	@ 0x3c
 800295e:	2200      	movs	r2, #0
 8002960:	9202      	str	r2, [sp, #8]
 8002962:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002966:	9201      	str	r2, [sp, #4]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	9200      	str	r2, [sp, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4622      	mov	r2, r4
 8002970:	f002 fdd9 	bl	8005526 <ST7735_WriteString>
        // cursor
    	if ( st->battery_ptr == i ) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	799b      	ldrb	r3, [r3, #6]
 8002978:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800297c:	429a      	cmp	r2, r3
 800297e:	d11b      	bne.n	80029b8 <display_menu_battery_type+0xc8>
    		ST7735_FillRectangle(x_pos, y_pos + Font_11x18.height + 1, strlen(buffer)*Font_11x18.width, 2, ST7735_WHITE);
 8002980:	4b16      	ldr	r3, [pc, #88]	@ (80029dc <display_menu_battery_type+0xec>)
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	461a      	mov	r2, r3
 8002986:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002988:	4413      	add	r3, r2
 800298a:	b29b      	uxth	r3, r3
 800298c:	3301      	adds	r3, #1
 800298e:	b29c      	uxth	r4, r3
 8002990:	f107 0308 	add.w	r3, r7, #8
 8002994:	4618      	mov	r0, r3
 8002996:	f7fd fc73 	bl	8000280 <strlen>
 800299a:	4603      	mov	r3, r0
 800299c:	b29b      	uxth	r3, r3
 800299e:	4a0f      	ldr	r2, [pc, #60]	@ (80029dc <display_menu_battery_type+0xec>)
 80029a0:	7812      	ldrb	r2, [r2, #0]
 80029a2:	fb13 f302 	smulbb	r3, r3, r2
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	8fb8      	ldrh	r0, [r7, #60]	@ 0x3c
 80029aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2302      	movs	r3, #2
 80029b2:	4621      	mov	r1, r4
 80029b4:	f002 fe02 	bl	80055bc <ST7735_FillRectangle>
    for (uint8_t i = 0; i < 2; i++) {
 80029b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029bc:	3301      	adds	r3, #1
 80029be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80029c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d99a      	bls.n	8002900 <display_menu_battery_type+0x10>
    	}
    }
}
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
 80029ce:	3744      	adds	r7, #68	@ 0x44
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd90      	pop	{r4, r7, pc}
 80029d4:	20000020 	.word	0x20000020
 80029d8:	08018448 	.word	0x08018448
 80029dc:	200000e8 	.word	0x200000e8

080029e0 <display_menu_adc>:

void display_menu_adc(struct state *st) {
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b08d      	sub	sp, #52	@ 0x34
 80029e4:	af04      	add	r7, sp, #16
 80029e6:	6078      	str	r0, [r7, #4]
	char buffer[20];

	snprintf(buffer, sizeof(buffer), "PWM: %.1f%%", s.adc_percentage);
 80029e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a60 <display_menu_adc+0x80>)
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fdb3 	bl	8000558 <__aeabi_f2d>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	f107 0008 	add.w	r0, r7, #8
 80029fa:	e9cd 2300 	strd	r2, r3, [sp]
 80029fe:	4a19      	ldr	r2, [pc, #100]	@ (8002a64 <display_menu_adc+0x84>)
 8002a00:	2114      	movs	r1, #20
 8002a02:	f011 ff8b 	bl	801491c <sniprintf>
	uint16_t x_pos = (ST7735_WIDTH - (strlen(buffer) * Font_7x10.width)) / 2;
 8002a06:	f107 0308 	add.w	r3, r7, #8
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fc38 	bl	8000280 <strlen>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4a15      	ldr	r2, [pc, #84]	@ (8002a68 <display_menu_adc+0x88>)
 8002a14:	7812      	ldrb	r2, [r2, #0]
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	83fb      	strh	r3, [r7, #30]
	uint16_t y_pos = (ST7735_WIDTH + Font_7x10.height)/2;
 8002a22:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <display_menu_adc+0x88>)
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	3380      	adds	r3, #128	@ 0x80
 8002a28:	0fda      	lsrs	r2, r3, #31
 8002a2a:	4413      	add	r3, r2
 8002a2c:	105b      	asrs	r3, r3, #1
 8002a2e:	83bb      	strh	r3, [r7, #28]
	ST7735_WriteString(x_pos, y_pos, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002a30:	4b0d      	ldr	r3, [pc, #52]	@ (8002a68 <display_menu_adc+0x88>)
 8002a32:	f107 0408 	add.w	r4, r7, #8
 8002a36:	8bb9      	ldrh	r1, [r7, #28]
 8002a38:	8bf8      	ldrh	r0, [r7, #30]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	9202      	str	r2, [sp, #8]
 8002a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a42:	9201      	str	r2, [sp, #4]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	9200      	str	r2, [sp, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	f002 fd6b 	bl	8005526 <ST7735_WriteString>
	st->update_actions = true;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	731a      	strb	r2, [r3, #12]
}
 8002a56:	bf00      	nop
 8002a58:	3724      	adds	r7, #36	@ 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd90      	pop	{r4, r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200004c8 	.word	0x200004c8
 8002a64:	08018464 	.word	0x08018464
 8002a68:	200000e0 	.word	0x200000e0

08002a6c <display_menu_stop>:

void display_menu_stop(struct state *st) {
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b08b      	sub	sp, #44	@ 0x2c
 8002a70:	af04      	add	r7, sp, #16
 8002a72:	6078      	str	r0, [r7, #4]
	char buffer[] = "Stop";
 8002a74:	4b16      	ldr	r3, [pc, #88]	@ (8002ad0 <display_menu_stop+0x64>)
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	743b      	strb	r3, [r7, #16]

	uint16_t x_pos = (ST7735_WIDTH - (strlen(buffer) * Font_7x10.width)) / 2;
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fbfd 	bl	8000280 <strlen>
 8002a86:	4603      	mov	r3, r0
 8002a88:	4a12      	ldr	r2, [pc, #72]	@ (8002ad4 <display_menu_stop+0x68>)
 8002a8a:	7812      	ldrb	r2, [r2, #0]
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002a94:	085b      	lsrs	r3, r3, #1
 8002a96:	82fb      	strh	r3, [r7, #22]
	uint16_t y_pos = (ST7735_WIDTH + Font_7x10.height)/2;
 8002a98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <display_menu_stop+0x68>)
 8002a9a:	785b      	ldrb	r3, [r3, #1]
 8002a9c:	3380      	adds	r3, #128	@ 0x80
 8002a9e:	0fda      	lsrs	r2, r3, #31
 8002aa0:	4413      	add	r3, r2
 8002aa2:	105b      	asrs	r3, r3, #1
 8002aa4:	82bb      	strh	r3, [r7, #20]
	ST7735_WriteString(x_pos, y_pos, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <display_menu_stop+0x68>)
 8002aa8:	f107 040c 	add.w	r4, r7, #12
 8002aac:	8ab9      	ldrh	r1, [r7, #20]
 8002aae:	8af8      	ldrh	r0, [r7, #22]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	9202      	str	r2, [sp, #8]
 8002ab4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ab8:	9201      	str	r2, [sp, #4]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	9200      	str	r2, [sp, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4622      	mov	r2, r4
 8002ac2:	f002 fd30 	bl	8005526 <ST7735_WriteString>
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd90      	pop	{r4, r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	706f7453 	.word	0x706f7453
 8002ad4:	200000e0 	.word	0x200000e0

08002ad8 <action_menu_main>:

/*
 *  click action
 */

void action_menu_main(struct state *st) {
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	st->menu_current = st->menu_current_ptr;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	789a      	ldrb	r2, [r3, #2]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	705a      	strb	r2, [r3, #1]
    st->screen_clear = true;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	739a      	strb	r2, [r3, #14]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <action_menu_start>:

void action_menu_start(struct state *st) {
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
	st->current_screen_type = SCREEN_SENSOR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
	st->is_measurements_started = true;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	725a      	strb	r2, [r3, #9]

	st->menu_current = MENU_MAIN;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	705a      	strb	r2, [r3, #1]
    st->screen_clear = true;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	739a      	strb	r2, [r3, #14]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <action_menu_battery_type>:

void action_menu_battery_type(struct state *st) {
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
	st->battery_current = st->battery_ptr;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	799a      	ldrb	r2, [r3, #6]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	71da      	strb	r2, [r3, #7]
//	}
//	else if (batteries[st->battery_current] == "Li-On") {
//		HAL_GPIO_WritePin(GPIOx, GPIO_PIN_y, GPIO_PIN_RESET);
//	}

	st->current_screen_type = SCREEN_MENU;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
	st->menu_current = MENU_MAIN;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	705a      	strb	r2, [r3, #1]
    st->screen_clear = true;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	739a      	strb	r2, [r3, #14]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <action_menu_adc>:

void action_menu_adc(struct state *st) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	if (st->update_actions == true) {
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	7b1b      	ldrb	r3, [r3, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d014      	beq.n	8002b8e <action_menu_adc+0x3a>
		// update adc every 1s
	    static uint32_t last_update = 0;
	    uint32_t now = HAL_GetTick();
 8002b64:	f002 ff1e 	bl	80059a4 <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

	    if (now - last_update >= 1000) {
 8002b6a:	4b13      	ldr	r3, [pc, #76]	@ (8002bb8 <action_menu_adc+0x64>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b76:	d30a      	bcc.n	8002b8e <action_menu_adc+0x3a>
	        last_update = now;
 8002b78:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb8 <action_menu_adc+0x64>)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6013      	str	r3, [r2, #0]
			get_adc_percentage();
 8002b7e:	f7fe fcab 	bl	80014d8 <get_adc_percentage>

			// refresh adc val
			st->screen_clear = true;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	739a      	strb	r2, [r3, #14]
			st->update_actions = false;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	731a      	strb	r2, [r3, #12]
	    }
	}
	if (st->is_enc_pressed == true) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7adb      	ldrb	r3, [r3, #11]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <action_menu_adc+0x5a>
		st->update_actions = false;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	731a      	strb	r2, [r3, #12]
		st->menu_current = MENU_MAIN;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	705a      	strb	r2, [r3, #1]
		st->current_screen_type = SCREEN_MENU;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
        st->screen_clear = true;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	739a      	strb	r2, [r3, #14]
	}
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20002708 	.word	0x20002708

08002bbc <action_menu_stop>:

void action_menu_stop(struct state *st) {
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	st->current_screen_type = SCREEN_MENU;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
	st->is_measurements_started = true;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	725a      	strb	r2, [r3, #9]

	st->menu_current = MENU_MAIN;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	705a      	strb	r2, [r3, #1]
    st->screen_clear = true;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	739a      	strb	r2, [r3, #14]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <SDcardInit>:
 */

#include "logic/user_SDcard.h"


void SDcardInit(SDcard_t* sd, char* folder_name) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af04      	add	r7, sp, #16
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
	uint8_t retry_count = 1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
	while (retry_count--) {
 8002bf6:	e02e      	b.n	8002c56 <SDcardInit+0x6e>
		sd->res = f_mount(&sd->fs, "", 1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	495d      	ldr	r1, [pc, #372]	@ (8002d74 <SDcardInit+0x18c>)
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f00f f8fc 	bl	8011dfc <f_mount>
 8002c04:	4603      	mov	r3, r0
 8002c06:	461a      	mov	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c0e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
		if (sd->res == FR_OK) {
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c18:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d020      	beq.n	8002c62 <SDcardInit+0x7a>
			break;
		}
		printf("Error mounting filesystem! (%d). Retrying...\r\n", sd->res);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c26:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4852      	ldr	r0, [pc, #328]	@ (8002d78 <SDcardInit+0x190>)
 8002c2e:	f011 fe05 	bl	801483c <iprintf>
		ST7735_WriteString(10, 140, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002c32:	4b52      	ldr	r3, [pc, #328]	@ (8002d7c <SDcardInit+0x194>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	9202      	str	r2, [sp, #8]
 8002c38:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002c3c:	9201      	str	r2, [sp, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	9200      	str	r2, [sp, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a4e      	ldr	r2, [pc, #312]	@ (8002d80 <SDcardInit+0x198>)
 8002c46:	218c      	movs	r1, #140	@ 0x8c
 8002c48:	200a      	movs	r0, #10
 8002c4a:	f002 fc6c 	bl	8005526 <ST7735_WriteString>
		HAL_Delay(RETRY_DELAY_MS);
 8002c4e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c52:	f002 feb3 	bl	80059bc <HAL_Delay>
	while (retry_count--) {
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	1e5a      	subs	r2, r3, #1
 8002c5a:	73fa      	strb	r2, [r7, #15]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1cb      	bne.n	8002bf8 <SDcardInit+0x10>
 8002c60:	e000      	b.n	8002c64 <SDcardInit+0x7c>
			break;
 8002c62:	bf00      	nop
	}

	retry_count = 1;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
	while (retry_count--) {
 8002c68:	e031      	b.n	8002cce <SDcardInit+0xe6>
		sd->res = f_open(&sd->fil, "test.csv", FA_OPEN_ALWAYS | FA_WRITE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002c70:	3318      	adds	r3, #24
 8002c72:	2212      	movs	r2, #18
 8002c74:	4943      	ldr	r1, [pc, #268]	@ (8002d84 <SDcardInit+0x19c>)
 8002c76:	4618      	mov	r0, r3
 8002c78:	f00f f906 	bl	8011e88 <f_open>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	461a      	mov	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c86:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
		if (sd->res == FR_OK) {
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c90:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <SDcardInit+0xf2>
			break;
		}
		printf( "Error opening SDcard file! (%d). Retrying...\r\n", sd->res);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c9e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4838      	ldr	r0, [pc, #224]	@ (8002d88 <SDcardInit+0x1a0>)
 8002ca6:	f011 fdc9 	bl	801483c <iprintf>
		ST7735_WriteString(10, 140, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002caa:	4b34      	ldr	r3, [pc, #208]	@ (8002d7c <SDcardInit+0x194>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	9202      	str	r2, [sp, #8]
 8002cb0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002cb4:	9201      	str	r2, [sp, #4]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	9200      	str	r2, [sp, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a30      	ldr	r2, [pc, #192]	@ (8002d80 <SDcardInit+0x198>)
 8002cbe:	218c      	movs	r1, #140	@ 0x8c
 8002cc0:	200a      	movs	r0, #10
 8002cc2:	f002 fc30 	bl	8005526 <ST7735_WriteString>
		HAL_Delay(RETRY_DELAY_MS);
 8002cc6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002cca:	f002 fe77 	bl	80059bc <HAL_Delay>
	while (retry_count--) {
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	1e5a      	subs	r2, r3, #1
 8002cd2:	73fa      	strb	r2, [r7, #15]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1c8      	bne.n	8002c6a <SDcardInit+0x82>
 8002cd8:	e000      	b.n	8002cdc <SDcardInit+0xf4>
			break;
 8002cda:	bf00      	nop
	}

	sd->res = f_lseek(&sd->fil, f_size(&sd->fil));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002ce2:	3318      	adds	r3, #24
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f00f fcce 	bl	8012690 <f_lseek>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002cfe:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
	if (sd->res != FR_OK) {
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d08:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <SDcardInit+0x14a>
		printf("Error seeking to end of file! (%d)\r\n", sd->res);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d16:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	481b      	ldr	r0, [pc, #108]	@ (8002d8c <SDcardInit+0x1a4>)
 8002d1e:	f011 fd8d 	bl	801483c <iprintf>
		f_close(&sd->fil);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002d28:	3318      	adds	r3, #24
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f00f fc86 	bl	801263c <f_close>
		return;
 8002d30:	e01c      	b.n	8002d6c <SDcardInit+0x184>
	}
	if (retry_count == 0) {
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <SDcardInit+0x156>
		SDcardClose(sd);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f8d7 	bl	8002eec <SDcardClose>
	}

	f_puts("\n--- Nowy pomiar ---\n", &sd->fil);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002d44:	3318      	adds	r3, #24
 8002d46:	4619      	mov	r1, r3
 8002d48:	4811      	ldr	r0, [pc, #68]	@ (8002d90 <SDcardInit+0x1a8>)
 8002d4a:	f00f ff3c 	bl	8012bc6 <f_puts>
	f_puts("TVOC_ppb,CO2_eq_ppm,Ethanol_signal,H2_signal,Temperatura,Cisnienie,Napiecie_mV,Prad_mA,Moc_mW\n", &sd->fil);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002d54:	3318      	adds	r3, #24
 8002d56:	4619      	mov	r1, r3
 8002d58:	480e      	ldr	r0, [pc, #56]	@ (8002d94 <SDcardInit+0x1ac>)
 8002d5a:	f00f ff34 	bl	8012bc6 <f_puts>

	f_sync(&sd->fil);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002d64:	3318      	adds	r3, #24
 8002d66:	4618      	mov	r0, r3
 8002d68:	f00f fbea 	bl	8012540 <f_sync>
}
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	08018470 	.word	0x08018470
 8002d78:	08018474 	.word	0x08018474
 8002d7c:	200000e0 	.word	0x200000e0
 8002d80:	080184a4 	.word	0x080184a4
 8002d84:	080184b4 	.word	0x080184b4
 8002d88:	080184c0 	.word	0x080184c0
 8002d8c:	080184f0 	.word	0x080184f0
 8002d90:	08018518 	.word	0x08018518
 8002d94:	08018530 	.word	0x08018530

08002d98 <SDcardWriteData>:

void SDcardWriteData(SDcard_t* sd, struct sensors *s) {
 8002d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d9c:	b0c3      	sub	sp, #268	@ 0x10c
 8002d9e:	af0c      	add	r7, sp, #48	@ 0x30
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
	// ERROR SDcard -> OLED
	if (f_lseek(&sd->fil, f_size(&sd->fil)) != FR_OK) {
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002daa:	3318      	adds	r3, #24
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002db2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f00f fc6a 	bl	8012690 <f_lseek>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d011      	beq.n	8002de6 <SDcardWriteData+0x4e>
		printf("Error seeking in file!\r\n");
 8002dc2:	4843      	ldr	r0, [pc, #268]	@ (8002ed0 <SDcardWriteData+0x138>)
 8002dc4:	f011 fda2 	bl	801490c <puts>
		ST7735_WriteString(10, 140, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002dc8:	4b42      	ldr	r3, [pc, #264]	@ (8002ed4 <SDcardWriteData+0x13c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	9202      	str	r2, [sp, #8]
 8002dce:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002dd2:	9201      	str	r2, [sp, #4]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	9200      	str	r2, [sp, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a3f      	ldr	r2, [pc, #252]	@ (8002ed8 <SDcardWriteData+0x140>)
 8002ddc:	218c      	movs	r1, #140	@ 0x8c
 8002dde:	200a      	movs	r0, #10
 8002de0:	f002 fba1 	bl	8005526 <ST7735_WriteString>
 8002de4:	e06f      	b.n	8002ec6 <SDcardWriteData+0x12e>
		return;
	}

	char buffer[200];
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	8b1b      	ldrh	r3, [r3, #24]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002dea:	469a      	mov	sl, r3
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	8b5b      	ldrh	r3, [r3, #26]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002df0:	461e      	mov	r6, r3
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	8b9b      	ldrh	r3, [r3, #28]
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dfe:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002edc <SDcardWriteData+0x144>
 8002e02:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002e06:	ee16 0a90 	vmov	r0, s13
 8002e0a:	f7fd fba5 	bl	8000558 <__aeabi_f2d>
 8002e0e:	4604      	mov	r4, r0
 8002e10:	460d      	mov	r5, r1
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	8bdb      	ldrh	r3, [r3, #30]
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e1e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002edc <SDcardWriteData+0x144>
 8002e22:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002e26:	ee16 0a90 	vmov	r0, s13
 8002e2a:	f7fd fb95 	bl	8000558 <__aeabi_f2d>
 8002e2e:	4680      	mov	r8, r0
 8002e30:	4689      	mov	r9, r1
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	681b      	ldr	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fb8e 	bl	8000558 <__aeabi_f2d>
 8002e3c:	4683      	mov	fp, r0
 8002e3e:	468c      	mov	ip, r1
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	68c9      	ldr	r1, [r1, #12]
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002e44:	68b8      	ldr	r0, [r7, #8]
 8002e46:	8c00      	ldrh	r0, [r0, #32]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002e48:	6078      	str	r0, [r7, #4]
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002e4a:	68b8      	ldr	r0, [r7, #8]
 8002e4c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002e50:	4602      	mov	r2, r0
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002e52:	68b8      	ldr	r0, [r7, #8]
 8002e54:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002e56:	4603      	mov	r3, r0
 8002e58:	f107 0010 	add.w	r0, r7, #16
 8002e5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002e5e:	920a      	str	r2, [sp, #40]	@ 0x28
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e64:	9108      	str	r1, [sp, #32]
 8002e66:	e9cd bc06 	strd	fp, ip, [sp, #24]
 8002e6a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002e6e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002e72:	9600      	str	r6, [sp, #0]
 8002e74:	4653      	mov	r3, sl
 8002e76:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee0 <SDcardWriteData+0x148>)
 8002e78:	21c8      	movs	r1, #200	@ 0xc8
 8002e7a:	f011 fd4f 	bl	801491c <sniprintf>


	if (f_puts(buffer, &sd->fil) < 0) {
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002e84:	3318      	adds	r3, #24
 8002e86:	f107 0210 	add.w	r2, r7, #16
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	f00f fe9a 	bl	8012bc6 <f_puts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	da02      	bge.n	8002e9e <SDcardWriteData+0x106>
		printf("Error writing to file!\r\n");
 8002e98:	4812      	ldr	r0, [pc, #72]	@ (8002ee4 <SDcardWriteData+0x14c>)
 8002e9a:	f011 fd37 	bl	801490c <puts>
	}

	if (f_sync(&sd->fil) != FR_OK) {
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002ea4:	3318      	adds	r3, #24
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f00f fb4a 	bl	8012540 <f_sync>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <SDcardWriteData+0x120>
		printf("Error syncing file!\r\n");
 8002eb2:	480d      	ldr	r0, [pc, #52]	@ (8002ee8 <SDcardWriteData+0x150>)
 8002eb4:	f011 fd2a 	bl	801490c <puts>
	}
	f_sync(&sd->fil);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f00f fb3d 	bl	8012540 <f_sync>
}
 8002ec6:	37dc      	adds	r7, #220	@ 0xdc
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ece:	bf00      	nop
 8002ed0:	08018590 	.word	0x08018590
 8002ed4:	200000e0 	.word	0x200000e0
 8002ed8:	080184a4 	.word	0x080184a4
 8002edc:	44000000 	.word	0x44000000
 8002ee0:	080185a8 	.word	0x080185a8
 8002ee4:	080185cc 	.word	0x080185cc
 8002ee8:	080185e4 	.word	0x080185e4

08002eec <SDcardClose>:

void SDcardClose(SDcard_t* sd) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	if (f_close(&sd->fil) == FR_OK) {
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002efa:	3318      	adds	r3, #24
 8002efc:	4618      	mov	r0, r3
 8002efe:	f00f fb9d 	bl	801263c <f_close>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d103      	bne.n	8002f10 <SDcardClose+0x24>
		printf("Closing file!\r\n");
 8002f08:	4805      	ldr	r0, [pc, #20]	@ (8002f20 <SDcardClose+0x34>)
 8002f0a:	f011 fcff 	bl	801490c <puts>
	}
	else {
		printf("Error closing file!\r\n");
	}
}
 8002f0e:	e002      	b.n	8002f16 <SDcardClose+0x2a>
		printf("Error closing file!\r\n");
 8002f10:	4804      	ldr	r0, [pc, #16]	@ (8002f24 <SDcardClose+0x38>)
 8002f12:	f011 fcfb 	bl	801490c <puts>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	080185fc 	.word	0x080185fc
 8002f24:	0801860c 	.word	0x0801860c

08002f28 <BMP280_Read8>:

//
//	Functions
//
uint8_t BMP280_Read8(uint8_t addr, uint8_t index)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	4603      	mov	r3, r0
 8002f30:	460a      	mov	r2, r1
 8002f32:	71fb      	strb	r3, [r7, #7]
 8002f34:	4613      	mov	r3, r2
 8002f36:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp[2];
	tmp[0] = addr;
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8002f3c:	7b3b      	ldrb	r3, [r7, #12]
 8002f3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_RESET);
 8002f46:	79ba      	ldrb	r2, [r7, #6]
 8002f48:	491c      	ldr	r1, [pc, #112]	@ (8002fbc <BMP280_Read8+0x94>)
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	440b      	add	r3, r1
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	79ba      	ldrb	r2, [r7, #6]
 8002f58:	4918      	ldr	r1, [pc, #96]	@ (8002fbc <BMP280_Read8+0x94>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	3304      	adds	r3, #4
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f003 feaa 	bl	8006cc4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8002f70:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <BMP280_Read8+0x98>)
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	f107 020c 	add.w	r2, r7, #12
 8002f78:	f107 010c 	add.w	r1, r7, #12
 8002f7c:	230a      	movs	r3, #10
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2302      	movs	r3, #2
 8002f82:	f007 fd06 	bl	800a992 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_SET);
 8002f86:	79ba      	ldrb	r2, [r7, #6]
 8002f88:	490c      	ldr	r1, [pc, #48]	@ (8002fbc <BMP280_Read8+0x94>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	440b      	add	r3, r1
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	79ba      	ldrb	r2, [r7, #6]
 8002f98:	4908      	ldr	r1, [pc, #32]	@ (8002fbc <BMP280_Read8+0x94>)
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4619      	mov	r1, r3
 8002fac:	f003 fe8a 	bl	8006cc4 <HAL_GPIO_WritePin>
	return tmp[1];
 8002fb0:	7b7b      	ldrb	r3, [r7, #13]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	2000005c 	.word	0x2000005c
 8002fc0:	2000270c 	.word	0x2000270c

08002fc4 <BMP280_Read16>:
uint16_t BMP280_Read16(uint8_t addr, uint8_t index)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	4603      	mov	r3, r0
 8002fcc:	460a      	mov	r2, r1
 8002fce:	71fb      	strb	r3, [r7, #7]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[3];
	tmp[0] = addr;
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8002fd8:	7b3b      	ldrb	r3, [r7, #12]
 8002fda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_RESET);
 8002fe2:	79ba      	ldrb	r2, [r7, #6]
 8002fe4:	4920      	ldr	r1, [pc, #128]	@ (8003068 <BMP280_Read16+0xa4>)
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	79ba      	ldrb	r2, [r7, #6]
 8002ff4:	491c      	ldr	r1, [pc, #112]	@ (8003068 <BMP280_Read16+0xa4>)
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	3304      	adds	r3, #4
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	4619      	mov	r1, r3
 8003008:	f003 fe5c 	bl	8006cc4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 800300c:	4b17      	ldr	r3, [pc, #92]	@ (800306c <BMP280_Read16+0xa8>)
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	f107 020c 	add.w	r2, r7, #12
 8003014:	f107 010c 	add.w	r1, r7, #12
 8003018:	230a      	movs	r3, #10
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2303      	movs	r3, #3
 800301e:	f007 fcb8 	bl	800a992 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_SET);
 8003022:	79ba      	ldrb	r2, [r7, #6]
 8003024:	4910      	ldr	r1, [pc, #64]	@ (8003068 <BMP280_Read16+0xa4>)
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	79ba      	ldrb	r2, [r7, #6]
 8003034:	490c      	ldr	r1, [pc, #48]	@ (8003068 <BMP280_Read16+0xa4>)
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	440b      	add	r3, r1
 8003040:	3304      	adds	r3, #4
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	2201      	movs	r2, #1
 8003046:	4619      	mov	r1, r3
 8003048:	f003 fe3c 	bl	8006cc4 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 800304c:	7b7b      	ldrb	r3, [r7, #13]
 800304e:	b21b      	sxth	r3, r3
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	b21a      	sxth	r2, r3
 8003054:	7bbb      	ldrb	r3, [r7, #14]
 8003056:	b21b      	sxth	r3, r3
 8003058:	4313      	orrs	r3, r2
 800305a:	b21b      	sxth	r3, r3
 800305c:	b29b      	uxth	r3, r3
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	2000005c 	.word	0x2000005c
 800306c:	2000270c 	.word	0x2000270c

08003070 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr, uint8_t index)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	460a      	mov	r2, r1
 800307a:	71fb      	strb	r3, [r7, #7]
 800307c:	4613      	mov	r3, r2
 800307e:	71bb      	strb	r3, [r7, #6]
	uint16_t tmp;

	tmp = BMP280_Read16(addr, index);
 8003080:	79ba      	ldrb	r2, [r7, #6]
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ff9c 	bl	8002fc4 <BMP280_Read16>
 800308c:	4603      	mov	r3, r0
 800308e:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8003090:	89fb      	ldrh	r3, [r7, #14]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	b29b      	uxth	r3, r3
 8003096:	b21a      	sxth	r2, r3
 8003098:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	b21b      	sxth	r3, r3
 80030a0:	4313      	orrs	r3, r2
 80030a2:	b21b      	sxth	r3, r3
 80030a4:	b29b      	uxth	r3, r3
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <BMP280_Write8>:

void BMP280_Write8(uint8_t address, uint8_t data, uint8_t index)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
 80030ba:	460b      	mov	r3, r1
 80030bc:	71bb      	strb	r3, [r7, #6]
 80030be:	4613      	mov	r3, r2
 80030c0:	717b      	strb	r3, [r7, #5]
	uint8_t tmp[2];
	tmp[0] = address;
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 80030c6:	7b3b      	ldrb	r3, [r7, #12]
 80030c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 80030d0:	79bb      	ldrb	r3, [r7, #6]
 80030d2:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_RESET);
 80030d4:	797a      	ldrb	r2, [r7, #5]
 80030d6:	491c      	ldr	r1, [pc, #112]	@ (8003148 <BMP280_Write8+0x98>)
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	797a      	ldrb	r2, [r7, #5]
 80030e6:	4918      	ldr	r1, [pc, #96]	@ (8003148 <BMP280_Write8+0x98>)
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	440b      	add	r3, r1
 80030f2:	3304      	adds	r3, #4
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	2200      	movs	r2, #0
 80030f8:	4619      	mov	r1, r3
 80030fa:	f003 fde3 	bl	8006cc4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80030fe:	4b13      	ldr	r3, [pc, #76]	@ (800314c <BMP280_Write8+0x9c>)
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	f107 020c 	add.w	r2, r7, #12
 8003106:	f107 010c 	add.w	r1, r7, #12
 800310a:	230a      	movs	r3, #10
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	2302      	movs	r3, #2
 8003110:	f007 fc3f 	bl	800a992 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_SET);
 8003114:	797a      	ldrb	r2, [r7, #5]
 8003116:	490c      	ldr	r1, [pc, #48]	@ (8003148 <BMP280_Write8+0x98>)
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	797a      	ldrb	r2, [r7, #5]
 8003126:	4908      	ldr	r1, [pc, #32]	@ (8003148 <BMP280_Write8+0x98>)
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	3304      	adds	r3, #4
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	2201      	movs	r2, #1
 8003138:	4619      	mov	r1, r3
 800313a:	f003 fdc3 	bl	8006cc4 <HAL_GPIO_WritePin>
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2000005c 	.word	0x2000005c
 800314c:	2000270c 	.word	0x2000270c

08003150 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr, uint8_t index)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af02      	add	r7, sp, #8
 8003156:	4603      	mov	r3, r0
 8003158:	460a      	mov	r2, r1
 800315a:	71fb      	strb	r3, [r7, #7]
 800315c:	4613      	mov	r3, r2
 800315e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[4];
	tmp[0] = addr;
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8003164:	7b3b      	ldrb	r3, [r7, #12]
 8003166:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800316a:	b2db      	uxtb	r3, r3
 800316c:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_RESET);
 800316e:	79ba      	ldrb	r2, [r7, #6]
 8003170:	491f      	ldr	r1, [pc, #124]	@ (80031f0 <BMP280_Read24+0xa0>)
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	440b      	add	r3, r1
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	79ba      	ldrb	r2, [r7, #6]
 8003180:	491b      	ldr	r1, [pc, #108]	@ (80031f0 <BMP280_Read24+0xa0>)
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	440b      	add	r3, r1
 800318c:	3304      	adds	r3, #4
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	2200      	movs	r2, #0
 8003192:	4619      	mov	r1, r3
 8003194:	f003 fd96 	bl	8006cc4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8003198:	4b16      	ldr	r3, [pc, #88]	@ (80031f4 <BMP280_Read24+0xa4>)
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	f107 020c 	add.w	r2, r7, #12
 80031a0:	f107 010c 	add.w	r1, r7, #12
 80031a4:	230a      	movs	r3, #10
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	2303      	movs	r3, #3
 80031aa:	f007 fbf2 	bl	800a992 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_SET);
 80031ae:	79ba      	ldrb	r2, [r7, #6]
 80031b0:	490f      	ldr	r1, [pc, #60]	@ (80031f0 <BMP280_Read24+0xa0>)
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	440b      	add	r3, r1
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	79ba      	ldrb	r2, [r7, #6]
 80031c0:	490b      	ldr	r1, [pc, #44]	@ (80031f0 <BMP280_Read24+0xa0>)
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	440b      	add	r3, r1
 80031cc:	3304      	adds	r3, #4
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	2201      	movs	r2, #1
 80031d2:	4619      	mov	r1, r3
 80031d4:	f003 fd76 	bl	8006cc4 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 80031d8:	7b7b      	ldrb	r3, [r7, #13]
 80031da:	041a      	lsls	r2, r3, #16
 80031dc:	7bbb      	ldrb	r3, [r7, #14]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	4313      	orrs	r3, r2
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	4313      	orrs	r3, r2
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	2000005c 	.word	0x2000005c
 80031f4:	2000270c 	.word	0x2000270c

080031f8 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC, index);
}

uint8_t BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode, uint8_t index)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	4608      	mov	r0, r1
 8003202:	4611      	mov	r1, r2
 8003204:	461a      	mov	r2, r3
 8003206:	4603      	mov	r3, r0
 8003208:	70fb      	strb	r3, [r7, #3]
 800320a:	460b      	mov	r3, r1
 800320c:	70bb      	strb	r3, [r7, #2]
 800320e:	4613      	mov	r3, r2
 8003210:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 8003212:	4abb      	ldr	r2, [pc, #748]	@ (8003500 <BMP280_Init+0x308>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_RESET);
 8003218:	f897 2020 	ldrb.w	r2, [r7, #32]
 800321c:	49b9      	ldr	r1, [pc, #740]	@ (8003504 <BMP280_Init+0x30c>)
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	440b      	add	r3, r1
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800322e:	49b5      	ldr	r1, [pc, #724]	@ (8003504 <BMP280_Init+0x30c>)
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	440b      	add	r3, r1
 800323a:	3304      	adds	r3, #4
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	2200      	movs	r2, #0
 8003240:	4619      	mov	r1, r3
 8003242:	f003 fd3f 	bl	8006cc4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8003246:	2005      	movs	r0, #5
 8003248:	f002 fbb8 	bl	80059bc <HAL_Delay>
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_SET);
 800324c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003250:	49ac      	ldr	r1, [pc, #688]	@ (8003504 <BMP280_Init+0x30c>)
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	440b      	add	r3, r1
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003262:	49a8      	ldr	r1, [pc, #672]	@ (8003504 <BMP280_Init+0x30c>)
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	440b      	add	r3, r1
 800326e:	3304      	adds	r3, #4
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	2201      	movs	r2, #1
 8003274:	4619      	mov	r1, r3
 8003276:	f003 fd25 	bl	8006cc4 <HAL_GPIO_WritePin>

	if (mode > BMP280_NORMALMODE)
 800327a:	787b      	ldrb	r3, [r7, #1]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d901      	bls.n	8003284 <BMP280_Init+0x8c>
	    mode = BMP280_NORMALMODE;
 8003280:	2303      	movs	r3, #3
 8003282:	707b      	strb	r3, [r7, #1]
	sensors[index]._mode = mode;
 8003284:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003288:	499e      	ldr	r1, [pc, #632]	@ (8003504 <BMP280_Init+0x30c>)
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	3308      	adds	r3, #8
 8003296:	787a      	ldrb	r2, [r7, #1]
 8003298:	701a      	strb	r2, [r3, #0]
	if(mode == BMP280_FORCEDMODE)
 800329a:	787b      	ldrb	r3, [r7, #1]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <BMP280_Init+0xac>
		mode = BMP280_SLEEPMODE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	707b      	strb	r3, [r7, #1]
	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	2b05      	cmp	r3, #5
 80032a8:	d901      	bls.n	80032ae <BMP280_Init+0xb6>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80032aa:	2305      	movs	r3, #5
 80032ac:	70fb      	strb	r3, [r7, #3]
	sensors[index]._temperature_res = temperature_resolution;
 80032ae:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032b2:	4994      	ldr	r1, [pc, #592]	@ (8003504 <BMP280_Init+0x30c>)
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	440b      	add	r3, r1
 80032be:	3306      	adds	r3, #6
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	701a      	strb	r2, [r3, #0]
	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80032c4:	78bb      	ldrb	r3, [r7, #2]
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d901      	bls.n	80032ce <BMP280_Init+0xd6>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80032ca:	2305      	movs	r3, #5
 80032cc:	70bb      	strb	r3, [r7, #2]
	sensors[index]._pressure_oversampling = pressure_oversampling;
 80032ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032d2:	498c      	ldr	r1, [pc, #560]	@ (8003504 <BMP280_Init+0x30c>)
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	3307      	adds	r3, #7
 80032e0:	78ba      	ldrb	r2, [r7, #2]
 80032e2:	701a      	strb	r2, [r3, #0]

	uint8_t loop_count = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]
	while(BMP280_Read8(BMP280_CHIPID, index) != 0x58)
 80032e8:	e002      	b.n	80032f0 <BMP280_Init+0xf8>
	{
		loop_count++;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	3301      	adds	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
	while(BMP280_Read8(BMP280_CHIPID, index) != 0x58)
 80032f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032f4:	4619      	mov	r1, r3
 80032f6:	20d0      	movs	r0, #208	@ 0xd0
 80032f8:	f7ff fe16 	bl	8002f28 <BMP280_Read8>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b58      	cmp	r3, #88	@ 0x58
 8003300:	d1f3      	bne.n	80032ea <BMP280_Init+0xf2>
			return 0;
		}
	}

	/* read calibration data */
	sensors[index].t1 = BMP280_Read16LE(BMP280_DIG_T1, index);
 8003302:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800330a:	4619      	mov	r1, r3
 800330c:	2088      	movs	r0, #136	@ 0x88
 800330e:	f7ff feaf 	bl	8003070 <BMP280_Read16LE>
 8003312:	4603      	mov	r3, r0
 8003314:	4619      	mov	r1, r3
 8003316:	4a7b      	ldr	r2, [pc, #492]	@ (8003504 <BMP280_Init+0x30c>)
 8003318:	4623      	mov	r3, r4
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4423      	add	r3, r4
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	331e      	adds	r3, #30
 8003324:	460a      	mov	r2, r1
 8003326:	801a      	strh	r2, [r3, #0]
	sensors[index].t2 = BMP280_Read16LE(BMP280_DIG_T2, index);
 8003328:	f897 3020 	ldrb.w	r3, [r7, #32]
 800332c:	4619      	mov	r1, r3
 800332e:	208a      	movs	r0, #138	@ 0x8a
 8003330:	f7ff fe9e 	bl	8003070 <BMP280_Read16LE>
 8003334:	4603      	mov	r3, r0
 8003336:	f897 2020 	ldrb.w	r2, [r7, #32]
 800333a:	b218      	sxth	r0, r3
 800333c:	4971      	ldr	r1, [pc, #452]	@ (8003504 <BMP280_Init+0x30c>)
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	440b      	add	r3, r1
 8003348:	330a      	adds	r3, #10
 800334a:	4602      	mov	r2, r0
 800334c:	801a      	strh	r2, [r3, #0]
	sensors[index].t3 = BMP280_Read16LE(BMP280_DIG_T3, index);
 800334e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003352:	4619      	mov	r1, r3
 8003354:	208c      	movs	r0, #140	@ 0x8c
 8003356:	f7ff fe8b 	bl	8003070 <BMP280_Read16LE>
 800335a:	4603      	mov	r3, r0
 800335c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003360:	b218      	sxth	r0, r3
 8003362:	4968      	ldr	r1, [pc, #416]	@ (8003504 <BMP280_Init+0x30c>)
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	440b      	add	r3, r1
 800336e:	330c      	adds	r3, #12
 8003370:	4602      	mov	r2, r0
 8003372:	801a      	strh	r2, [r3, #0]

	sensors[index].p1 = BMP280_Read16LE(BMP280_DIG_P1, index);
 8003374:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003378:	f897 3020 	ldrb.w	r3, [r7, #32]
 800337c:	4619      	mov	r1, r3
 800337e:	208e      	movs	r0, #142	@ 0x8e
 8003380:	f7ff fe76 	bl	8003070 <BMP280_Read16LE>
 8003384:	4603      	mov	r3, r0
 8003386:	4619      	mov	r1, r3
 8003388:	4a5e      	ldr	r2, [pc, #376]	@ (8003504 <BMP280_Init+0x30c>)
 800338a:	4623      	mov	r3, r4
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4423      	add	r3, r4
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	3320      	adds	r3, #32
 8003396:	460a      	mov	r2, r1
 8003398:	801a      	strh	r2, [r3, #0]
	sensors[index].p2 = BMP280_Read16LE(BMP280_DIG_P2, index);
 800339a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800339e:	4619      	mov	r1, r3
 80033a0:	2090      	movs	r0, #144	@ 0x90
 80033a2:	f7ff fe65 	bl	8003070 <BMP280_Read16LE>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80033ac:	b218      	sxth	r0, r3
 80033ae:	4955      	ldr	r1, [pc, #340]	@ (8003504 <BMP280_Init+0x30c>)
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	330e      	adds	r3, #14
 80033bc:	4602      	mov	r2, r0
 80033be:	801a      	strh	r2, [r3, #0]
	sensors[index].p3 = BMP280_Read16LE(BMP280_DIG_P3, index);
 80033c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033c4:	4619      	mov	r1, r3
 80033c6:	2092      	movs	r0, #146	@ 0x92
 80033c8:	f7ff fe52 	bl	8003070 <BMP280_Read16LE>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80033d2:	b218      	sxth	r0, r3
 80033d4:	494b      	ldr	r1, [pc, #300]	@ (8003504 <BMP280_Init+0x30c>)
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	3310      	adds	r3, #16
 80033e2:	4602      	mov	r2, r0
 80033e4:	801a      	strh	r2, [r3, #0]
	sensors[index].p4 = BMP280_Read16LE(BMP280_DIG_P4, index);
 80033e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033ea:	4619      	mov	r1, r3
 80033ec:	2094      	movs	r0, #148	@ 0x94
 80033ee:	f7ff fe3f 	bl	8003070 <BMP280_Read16LE>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80033f8:	b218      	sxth	r0, r3
 80033fa:	4942      	ldr	r1, [pc, #264]	@ (8003504 <BMP280_Init+0x30c>)
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	440b      	add	r3, r1
 8003406:	3312      	adds	r3, #18
 8003408:	4602      	mov	r2, r0
 800340a:	801a      	strh	r2, [r3, #0]
	sensors[index].p5 = BMP280_Read16LE(BMP280_DIG_P5, index);
 800340c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003410:	4619      	mov	r1, r3
 8003412:	2096      	movs	r0, #150	@ 0x96
 8003414:	f7ff fe2c 	bl	8003070 <BMP280_Read16LE>
 8003418:	4603      	mov	r3, r0
 800341a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800341e:	b218      	sxth	r0, r3
 8003420:	4938      	ldr	r1, [pc, #224]	@ (8003504 <BMP280_Init+0x30c>)
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	440b      	add	r3, r1
 800342c:	3314      	adds	r3, #20
 800342e:	4602      	mov	r2, r0
 8003430:	801a      	strh	r2, [r3, #0]
	sensors[index].p6 = BMP280_Read16LE(BMP280_DIG_P6, index);
 8003432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003436:	4619      	mov	r1, r3
 8003438:	2098      	movs	r0, #152	@ 0x98
 800343a:	f7ff fe19 	bl	8003070 <BMP280_Read16LE>
 800343e:	4603      	mov	r3, r0
 8003440:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003444:	b218      	sxth	r0, r3
 8003446:	492f      	ldr	r1, [pc, #188]	@ (8003504 <BMP280_Init+0x30c>)
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	440b      	add	r3, r1
 8003452:	3316      	adds	r3, #22
 8003454:	4602      	mov	r2, r0
 8003456:	801a      	strh	r2, [r3, #0]
	sensors[index].p7 = BMP280_Read16LE(BMP280_DIG_P7, index);
 8003458:	f897 3020 	ldrb.w	r3, [r7, #32]
 800345c:	4619      	mov	r1, r3
 800345e:	209a      	movs	r0, #154	@ 0x9a
 8003460:	f7ff fe06 	bl	8003070 <BMP280_Read16LE>
 8003464:	4603      	mov	r3, r0
 8003466:	f897 2020 	ldrb.w	r2, [r7, #32]
 800346a:	b218      	sxth	r0, r3
 800346c:	4925      	ldr	r1, [pc, #148]	@ (8003504 <BMP280_Init+0x30c>)
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	440b      	add	r3, r1
 8003478:	3318      	adds	r3, #24
 800347a:	4602      	mov	r2, r0
 800347c:	801a      	strh	r2, [r3, #0]
	sensors[index].p8 = BMP280_Read16LE(BMP280_DIG_P8, index);
 800347e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003482:	4619      	mov	r1, r3
 8003484:	209c      	movs	r0, #156	@ 0x9c
 8003486:	f7ff fdf3 	bl	8003070 <BMP280_Read16LE>
 800348a:	4603      	mov	r3, r0
 800348c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003490:	b218      	sxth	r0, r3
 8003492:	491c      	ldr	r1, [pc, #112]	@ (8003504 <BMP280_Init+0x30c>)
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	331a      	adds	r3, #26
 80034a0:	4602      	mov	r2, r0
 80034a2:	801a      	strh	r2, [r3, #0]
	sensors[index].p9 = BMP280_Read16LE(BMP280_DIG_P9, index);
 80034a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034a8:	4619      	mov	r1, r3
 80034aa:	209e      	movs	r0, #158	@ 0x9e
 80034ac:	f7ff fde0 	bl	8003070 <BMP280_Read16LE>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80034b6:	b218      	sxth	r0, r3
 80034b8:	4912      	ldr	r1, [pc, #72]	@ (8003504 <BMP280_Init+0x30c>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	331c      	adds	r3, #28
 80034c6:	4602      	mov	r2, r0
 80034c8:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode), index);
 80034ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ce:	015b      	lsls	r3, r3, #5
 80034d0:	b25a      	sxtb	r2, r3
 80034d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	4313      	orrs	r3, r2
 80034dc:	b25a      	sxtb	r2, r3
 80034de:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	b25b      	sxtb	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80034ec:	4619      	mov	r1, r3
 80034ee:	20f4      	movs	r0, #244	@ 0xf4
 80034f0:	f7ff fdde 	bl	80030b0 <BMP280_Write8>
	return 1;
 80034f4:	2301      	movs	r3, #1
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd90      	pop	{r4, r7, pc}
 80034fe:	bf00      	nop
 8003500:	2000270c 	.word	0x2000270c
 8003504:	2000005c 	.word	0x2000005c

08003508 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(uint8_t index)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b089      	sub	sp, #36	@ 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  int32_t var1, var2;

  if(sensors[index]._mode == BMP280_FORCEDMODE)
 8003512:	79fa      	ldrb	r2, [r7, #7]
 8003514:	495e      	ldr	r1, [pc, #376]	@ (8003690 <BMP280_ReadTemperature+0x188>)
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	440b      	add	r3, r1
 8003520:	3308      	adds	r3, #8
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	f040 80a9 	bne.w	800367c <BMP280_ReadTemperature+0x174>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL, index);
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	4619      	mov	r1, r3
 800352e:	20f4      	movs	r0, #244	@ 0xf4
 8003530:	f7ff fcfa 	bl	8002f28 <BMP280_Read8>
 8003534:	4603      	mov	r3, r0
 8003536:	77fb      	strb	r3, [r7, #31]
	  ctrl &= ~(0x03);
 8003538:	7ffb      	ldrb	r3, [r7, #31]
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	77fb      	strb	r3, [r7, #31]
	  ctrl |= BMP280_FORCEDMODE;
 8003540:	7ffb      	ldrb	r3, [r7, #31]
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	77fb      	strb	r3, [r7, #31]
	  BMP280_Write8(BMP280_CONTROL, ctrl, index);
 8003548:	79fa      	ldrb	r2, [r7, #7]
 800354a:	7ffb      	ldrb	r3, [r7, #31]
 800354c:	4619      	mov	r1, r3
 800354e:	20f4      	movs	r0, #244	@ 0xf4
 8003550:	f7ff fdae 	bl	80030b0 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL, index); 	// Read written mode
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	4619      	mov	r1, r3
 8003558:	20f4      	movs	r0, #244	@ 0xf4
 800355a:	f7ff fce5 	bl	8002f28 <BMP280_Read8>
 800355e:	4603      	mov	r3, r0
 8003560:	77bb      	strb	r3, [r7, #30]
	  mode &= 0x03;							// Do not work without it...
 8003562:	7fbb      	ldrb	r3, [r7, #30]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	77bb      	strb	r3, [r7, #30]

	  if(mode == BMP280_FORCEDMODE)
 800356a:	7fbb      	ldrb	r3, [r7, #30]
 800356c:	2b01      	cmp	r3, #1
 800356e:	f040 8085 	bne.w	800367c <BMP280_ReadTemperature+0x174>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL, index);
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	4619      	mov	r1, r3
 8003576:	20f4      	movs	r0, #244	@ 0xf4
 8003578:	f7ff fcd6 	bl	8002f28 <BMP280_Read8>
 800357c:	4603      	mov	r3, r0
 800357e:	77bb      	strb	r3, [r7, #30]
			  mode &= 0x03;
 8003580:	7fbb      	ldrb	r3, [r7, #30]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	77bb      	strb	r3, [r7, #30]
			  if(mode == BMP280_SLEEPMODE)
 8003588:	7fbb      	ldrb	r3, [r7, #30]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d000      	beq.n	8003590 <BMP280_ReadTemperature+0x88>
			  mode = BMP280_Read8(BMP280_CONTROL, index);
 800358e:	e7f0      	b.n	8003572 <BMP280_ReadTemperature+0x6a>
				  break;
 8003590:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA, index);
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	4619      	mov	r1, r3
 8003596:	20fa      	movs	r0, #250	@ 0xfa
 8003598:	f7ff fdda 	bl	8003150 <BMP280_Read24>
 800359c:	4603      	mov	r3, r0
 800359e:	61bb      	str	r3, [r7, #24]
		  adc_T >>= 4;
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	111b      	asrs	r3, r3, #4
 80035a4:	61bb      	str	r3, [r7, #24]

		  var1  = ((((adc_T>>3) - ((int32_t)sensors[index].t1 <<1))) *
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	10d9      	asrs	r1, r3, #3
 80035aa:	79fa      	ldrb	r2, [r7, #7]
 80035ac:	4838      	ldr	r0, [pc, #224]	@ (8003690 <BMP280_ReadTemperature+0x188>)
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4403      	add	r3, r0
 80035b8:	331e      	adds	r3, #30
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	1ac9      	subs	r1, r1, r3
				  ((int32_t)sensors[index].t2)) >> 11;
 80035c0:	79fa      	ldrb	r2, [r7, #7]
 80035c2:	4833      	ldr	r0, [pc, #204]	@ (8003690 <BMP280_ReadTemperature+0x188>)
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4403      	add	r3, r0
 80035ce:	330a      	adds	r3, #10
 80035d0:	f9b3 3000 	ldrsh.w	r3, [r3]
		  var1  = ((((adc_T>>3) - ((int32_t)sensors[index].t1 <<1))) *
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	12db      	asrs	r3, r3, #11
 80035da:	617b      	str	r3, [r7, #20]

		  var2  = (((((adc_T>>4) - ((int32_t)sensors[index].t1)) *
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	1119      	asrs	r1, r3, #4
 80035e0:	79fa      	ldrb	r2, [r7, #7]
 80035e2:	482b      	ldr	r0, [pc, #172]	@ (8003690 <BMP280_ReadTemperature+0x188>)
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4403      	add	r3, r0
 80035ee:	331e      	adds	r3, #30
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	1ac9      	subs	r1, r1, r3
				  ((adc_T>>4) - ((int32_t)sensors[index].t1))) >> 12) *
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	1118      	asrs	r0, r3, #4
 80035f8:	79fa      	ldrb	r2, [r7, #7]
 80035fa:	4c25      	ldr	r4, [pc, #148]	@ (8003690 <BMP280_ReadTemperature+0x188>)
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4423      	add	r3, r4
 8003606:	331e      	adds	r3, #30
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	1ac3      	subs	r3, r0, r3
		  var2  = (((((adc_T>>4) - ((int32_t)sensors[index].t1)) *
 800360c:	fb01 f303 	mul.w	r3, r1, r3
				  ((adc_T>>4) - ((int32_t)sensors[index].t1))) >> 12) *
 8003610:	1319      	asrs	r1, r3, #12
				  ((int32_t)sensors[index].t3)) >> 14;
 8003612:	79fa      	ldrb	r2, [r7, #7]
 8003614:	481e      	ldr	r0, [pc, #120]	@ (8003690 <BMP280_ReadTemperature+0x188>)
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4403      	add	r3, r0
 8003620:	330c      	adds	r3, #12
 8003622:	f9b3 3000 	ldrsh.w	r3, [r3]
				  ((adc_T>>4) - ((int32_t)sensors[index].t1))) >> 12) *
 8003626:	fb01 f303 	mul.w	r3, r1, r3
		  var2  = (((((adc_T>>4) - ((int32_t)sensors[index].t1)) *
 800362a:	139b      	asrs	r3, r3, #14
 800362c:	613b      	str	r3, [r7, #16]

		  sensors[index].t_fine = var1 + var2;
 800362e:	79fa      	ldrb	r2, [r7, #7]
 8003630:	6979      	ldr	r1, [r7, #20]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4419      	add	r1, r3
 8003636:	4816      	ldr	r0, [pc, #88]	@ (8003690 <BMP280_ReadTemperature+0x188>)
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4403      	add	r3, r0
 8003642:	3324      	adds	r3, #36	@ 0x24
 8003644:	6019      	str	r1, [r3, #0]

		  float T  = (sensors[index].t_fine * 5 + 128) >> 8;
 8003646:	79fa      	ldrb	r2, [r7, #7]
 8003648:	4911      	ldr	r1, [pc, #68]	@ (8003690 <BMP280_ReadTemperature+0x188>)
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	3324      	adds	r3, #36	@ 0x24
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	3380      	adds	r3, #128	@ 0x80
 8003660:	121b      	asrs	r3, r3, #8
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800366a:	edc7 7a03 	vstr	s15, [r7, #12]
		  return T/100;
 800366e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003672:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8003694 <BMP280_ReadTemperature+0x18c>
 8003676:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800367a:	e001      	b.n	8003680 <BMP280_ReadTemperature+0x178>
	  }
  }

  return -99;
 800367c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8003698 <BMP280_ReadTemperature+0x190>
}
 8003680:	eef0 7a47 	vmov.f32	s15, s14
 8003684:	eeb0 0a67 	vmov.f32	s0, s15
 8003688:	3724      	adds	r7, #36	@ 0x24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd90      	pop	{r4, r7, pc}
 800368e:	bf00      	nop
 8003690:	2000005c 	.word	0x2000005c
 8003694:	42c80000 	.word	0x42c80000
 8003698:	c2c60000 	.word	0xc2c60000

0800369c <BMP280_ReadTemperatureAndPressure>:


uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure, uint8_t index)
{
 800369c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a0:	b0ce      	sub	sp, #312	@ 0x138
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80036a8:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80036ac:	4613      	mov	r3, r2
 80036ae:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature(index);
 80036b2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff ff26 	bl	8003508 <BMP280_ReadTemperature>
 80036bc:	eef0 7a40 	vmov.f32	s15, s0
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80036c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036cc:	edd3 7a00 	vldr	s15, [r3]
 80036d0:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 8003a18 <BMP280_ReadTemperatureAndPressure+0x37c>
 80036d4:	eef4 7a47 	vcmp.f32	s15, s14
 80036d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036dc:	d101      	bne.n	80036e2 <BMP280_ReadTemperatureAndPressure+0x46>
		  return -1;
 80036de:	23ff      	movs	r3, #255	@ 0xff
 80036e0:	e307      	b.n	8003cf2 <BMP280_ReadTemperatureAndPressure+0x656>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA, index);
 80036e2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80036e6:	4619      	mov	r1, r3
 80036e8:	20f7      	movs	r0, #247	@ 0xf7
 80036ea:	f7ff fd31 	bl	8003150 <BMP280_Read24>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	  adc_P >>= 4;
 80036f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80036f8:	111b      	asrs	r3, r3, #4
 80036fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

	  var1 = ((int64_t)sensors[index].t_fine) - 128000;
 80036fe:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8003702:	49c6      	ldr	r1, [pc, #792]	@ (8003a1c <BMP280_ReadTemperatureAndPressure+0x380>)
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	440b      	add	r3, r1
 800370e:	3324      	adds	r3, #36	@ 0x24
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	17da      	asrs	r2, r3, #31
 8003714:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003718:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800371c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003720:	460b      	mov	r3, r1
 8003722:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003728:	4613      	mov	r3, r2
 800372a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800372e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003730:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003734:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	  var2 = var1 * var1 * (int64_t)sensors[index].p6;
 8003738:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800373c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003740:	fb03 f102 	mul.w	r1, r3, r2
 8003744:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8003748:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	18ca      	adds	r2, r1, r3
 8003752:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003756:	fba3 4503 	umull	r4, r5, r3, r3
 800375a:	1953      	adds	r3, r2, r5
 800375c:	461d      	mov	r5, r3
 800375e:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8003762:	49ae      	ldr	r1, [pc, #696]	@ (8003a1c <BMP280_ReadTemperatureAndPressure+0x380>)
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	440b      	add	r3, r1
 800376e:	3316      	adds	r3, #22
 8003770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003774:	b21b      	sxth	r3, r3
 8003776:	17da      	asrs	r2, r3, #31
 8003778:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800377c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003780:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8003784:	4603      	mov	r3, r0
 8003786:	fb03 f205 	mul.w	r2, r3, r5
 800378a:	460b      	mov	r3, r1
 800378c:	fb04 f303 	mul.w	r3, r4, r3
 8003790:	4413      	add	r3, r2
 8003792:	4602      	mov	r2, r0
 8003794:	fba4 8902 	umull	r8, r9, r4, r2
 8003798:	444b      	add	r3, r9
 800379a:	4699      	mov	r9, r3
 800379c:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
 80037a0:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
	  var2 = var2 + ((var1*(int64_t)sensors[index].p5)<<17);
 80037a4:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80037a8:	499c      	ldr	r1, [pc, #624]	@ (8003a1c <BMP280_ReadTemperatureAndPressure+0x380>)
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	440b      	add	r3, r1
 80037b4:	3314      	adds	r3, #20
 80037b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ba:	b21b      	sxth	r3, r3
 80037bc:	17da      	asrs	r2, r3, #31
 80037be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037c2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80037c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80037ca:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80037ce:	462a      	mov	r2, r5
 80037d0:	fb02 f203 	mul.w	r2, r2, r3
 80037d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80037d8:	4621      	mov	r1, r4
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	441a      	add	r2, r3
 80037e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80037e4:	4621      	mov	r1, r4
 80037e6:	fba3 ab01 	umull	sl, fp, r3, r1
 80037ea:	eb02 030b 	add.w	r3, r2, fp
 80037ee:	469b      	mov	fp, r3
 80037f0:	f04f 0000 	mov.w	r0, #0
 80037f4:	f04f 0100 	mov.w	r1, #0
 80037f8:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80037fc:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8003800:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8003804:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003808:	1814      	adds	r4, r2, r0
 800380a:	643c      	str	r4, [r7, #64]	@ 0x40
 800380c:	414b      	adcs	r3, r1
 800380e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003810:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003814:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var2 = var2 + (((int64_t)sensors[index].p4)<<35);
 8003818:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 800381c:	497f      	ldr	r1, [pc, #508]	@ (8003a1c <BMP280_ReadTemperatureAndPressure+0x380>)
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	440b      	add	r3, r1
 8003828:	3312      	adds	r3, #18
 800382a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800382e:	b21b      	sxth	r3, r3
 8003830:	17da      	asrs	r2, r3, #31
 8003832:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003836:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800383a:	f04f 0000 	mov.w	r0, #0
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003846:	00d9      	lsls	r1, r3, #3
 8003848:	2000      	movs	r0, #0
 800384a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800384e:	1814      	adds	r4, r2, r0
 8003850:	63bc      	str	r4, [r7, #56]	@ 0x38
 8003852:	414b      	adcs	r3, r1
 8003854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003856:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800385a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var1 = ((var1 * var1 * (int64_t)sensors[index].p3)>>8) +
 800385e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8003862:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003866:	fb03 f102 	mul.w	r1, r3, r2
 800386a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800386e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	18ca      	adds	r2, r1, r3
 8003878:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800387c:	fba3 1303 	umull	r1, r3, r3, r3
 8003880:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003884:	460b      	mov	r3, r1
 8003886:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800388a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388e:	18d3      	adds	r3, r2, r3
 8003890:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003894:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8003898:	4960      	ldr	r1, [pc, #384]	@ (8003a1c <BMP280_ReadTemperatureAndPressure+0x380>)
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	440b      	add	r3, r1
 80038a4:	3310      	adds	r3, #16
 80038a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038aa:	b21b      	sxth	r3, r3
 80038ac:	17da      	asrs	r2, r3, #31
 80038ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038b2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038b6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80038ba:	462b      	mov	r3, r5
 80038bc:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80038c0:	4642      	mov	r2, r8
 80038c2:	fb02 f203 	mul.w	r2, r2, r3
 80038c6:	464b      	mov	r3, r9
 80038c8:	4621      	mov	r1, r4
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	4622      	mov	r2, r4
 80038d2:	4641      	mov	r1, r8
 80038d4:	fba2 1201 	umull	r1, r2, r2, r1
 80038d8:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80038dc:	460a      	mov	r2, r1
 80038de:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80038e2:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80038e6:	4413      	add	r3, r2
 80038e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80038ec:	f04f 0000 	mov.w	r0, #0
 80038f0:	f04f 0100 	mov.w	r1, #0
 80038f4:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80038f8:	4623      	mov	r3, r4
 80038fa:	0a18      	lsrs	r0, r3, #8
 80038fc:	462b      	mov	r3, r5
 80038fe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003902:	462b      	mov	r3, r5
 8003904:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)sensors[index].p2)<<12);
 8003906:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 800390a:	4c44      	ldr	r4, [pc, #272]	@ (8003a1c <BMP280_ReadTemperatureAndPressure+0x380>)
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4423      	add	r3, r4
 8003916:	330e      	adds	r3, #14
 8003918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800391c:	b21b      	sxth	r3, r3
 800391e:	17da      	asrs	r2, r3, #31
 8003920:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003924:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003928:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800392c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003930:	464a      	mov	r2, r9
 8003932:	fb02 f203 	mul.w	r2, r2, r3
 8003936:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800393a:	4644      	mov	r4, r8
 800393c:	fb04 f303 	mul.w	r3, r4, r3
 8003940:	441a      	add	r2, r3
 8003942:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003946:	4644      	mov	r4, r8
 8003948:	fba3 4304 	umull	r4, r3, r3, r4
 800394c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003950:	4623      	mov	r3, r4
 8003952:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395a:	18d3      	adds	r3, r2, r3
 800395c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800396c:	464c      	mov	r4, r9
 800396e:	0323      	lsls	r3, r4, #12
 8003970:	4644      	mov	r4, r8
 8003972:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8003976:	4644      	mov	r4, r8
 8003978:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)sensors[index].p3)>>8) +
 800397a:	1884      	adds	r4, r0, r2
 800397c:	633c      	str	r4, [r7, #48]	@ 0x30
 800397e:	eb41 0303 	adc.w	r3, r1, r3
 8003982:	637b      	str	r3, [r7, #52]	@ 0x34
 8003984:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003988:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)sensors[index].p1)>>33;
 800398c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8003990:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8003994:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8003998:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800399c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80039a0:	491e      	ldr	r1, [pc, #120]	@ (8003a1c <BMP280_ReadTemperatureAndPressure+0x380>)
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	440b      	add	r3, r1
 80039ac:	3320      	adds	r3, #32
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039b8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039bc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80039c0:	462b      	mov	r3, r5
 80039c2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80039c6:	4642      	mov	r2, r8
 80039c8:	fb02 f203 	mul.w	r2, r2, r3
 80039cc:	464b      	mov	r3, r9
 80039ce:	4621      	mov	r1, r4
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	4622      	mov	r2, r4
 80039d8:	4641      	mov	r1, r8
 80039da:	fba2 1201 	umull	r1, r2, r2, r1
 80039de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039e2:	460a      	mov	r2, r1
 80039e4:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80039e8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80039ec:	4413      	add	r3, r2
 80039ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039fe:	4629      	mov	r1, r5
 8003a00:	104a      	asrs	r2, r1, #1
 8003a02:	4629      	mov	r1, r5
 8003a04:	17cb      	asrs	r3, r1, #31
 8003a06:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	  if (var1 == 0) {
 8003a0a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	d106      	bne.n	8003a20 <BMP280_ReadTemperatureAndPressure+0x384>
	    return 0;  // avoid exception caused by division by zero
 8003a12:	2300      	movs	r3, #0
 8003a14:	e16d      	b.n	8003cf2 <BMP280_ReadTemperatureAndPressure+0x656>
 8003a16:	bf00      	nop
 8003a18:	c2c60000 	.word	0xc2c60000
 8003a1c:	2000005c 	.word	0x2000005c
	  }
	  p = 1048576 - adc_P;
 8003a20:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003a24:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8003a28:	17da      	asrs	r2, r3, #31
 8003a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a2e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003a32:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  p = (((p<<31) - var2)*3125) / var1;
 8003a36:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003a3a:	105b      	asrs	r3, r3, #1
 8003a3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a40:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003a44:	07db      	lsls	r3, r3, #31
 8003a46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a4a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003a4e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8003a52:	4621      	mov	r1, r4
 8003a54:	1a89      	subs	r1, r1, r2
 8003a56:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	eb61 0303 	sbc.w	r3, r1, r3
 8003a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a64:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8003a68:	4622      	mov	r2, r4
 8003a6a:	462b      	mov	r3, r5
 8003a6c:	1891      	adds	r1, r2, r2
 8003a6e:	6239      	str	r1, [r7, #32]
 8003a70:	415b      	adcs	r3, r3
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a78:	4621      	mov	r1, r4
 8003a7a:	1851      	adds	r1, r2, r1
 8003a7c:	61b9      	str	r1, [r7, #24]
 8003a7e:	4629      	mov	r1, r5
 8003a80:	414b      	adcs	r3, r1
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003a90:	4649      	mov	r1, r9
 8003a92:	018b      	lsls	r3, r1, #6
 8003a94:	4641      	mov	r1, r8
 8003a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	018a      	lsls	r2, r1, #6
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	1889      	adds	r1, r1, r2
 8003aa2:	6139      	str	r1, [r7, #16]
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	eb43 0101 	adc.w	r1, r3, r1
 8003aaa:	6179      	str	r1, [r7, #20]
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003ab8:	4649      	mov	r1, r9
 8003aba:	008b      	lsls	r3, r1, #2
 8003abc:	4641      	mov	r1, r8
 8003abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	008a      	lsls	r2, r1, #2
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	4622      	mov	r2, r4
 8003ace:	189b      	adds	r3, r3, r2
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	462a      	mov	r2, r5
 8003ad6:	eb42 0303 	adc.w	r3, r2, r3
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003ae8:	4649      	mov	r1, r9
 8003aea:	008b      	lsls	r3, r1, #2
 8003aec:	4641      	mov	r1, r8
 8003aee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af2:	4641      	mov	r1, r8
 8003af4:	008a      	lsls	r2, r1, #2
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	4622      	mov	r2, r4
 8003afe:	189b      	adds	r3, r3, r2
 8003b00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b02:	462b      	mov	r3, r5
 8003b04:	460a      	mov	r2, r1
 8003b06:	eb42 0303 	adc.w	r3, r2, r3
 8003b0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b0c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8003b10:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003b14:	f7fd f8c0 	bl	8000c98 <__aeabi_ldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	  var1 = (((int64_t)sensors[index].p9) * (p>>13) * (p>>13)) >> 25;
 8003b20:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8003b24:	4976      	ldr	r1, [pc, #472]	@ (8003d00 <BMP280_ReadTemperatureAndPressure+0x664>)
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	440b      	add	r3, r1
 8003b30:	331c      	adds	r3, #28
 8003b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b36:	b21b      	sxth	r3, r3
 8003b38:	17da      	asrs	r2, r3, #31
 8003b3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b3c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b3e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	0b50      	lsrs	r0, r2, #13
 8003b4c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003b50:	1359      	asrs	r1, r3, #13
 8003b52:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003b56:	462b      	mov	r3, r5
 8003b58:	fb00 f203 	mul.w	r2, r0, r3
 8003b5c:	4623      	mov	r3, r4
 8003b5e:	fb03 f301 	mul.w	r3, r3, r1
 8003b62:	4413      	add	r3, r2
 8003b64:	4622      	mov	r2, r4
 8003b66:	fba2 1200 	umull	r1, r2, r2, r0
 8003b6a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8003b6e:	460a      	mov	r2, r1
 8003b70:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8003b74:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003b78:	4413      	add	r3, r2
 8003b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b7e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003b82:	f04f 0000 	mov.w	r0, #0
 8003b86:	f04f 0100 	mov.w	r1, #0
 8003b8a:	0b50      	lsrs	r0, r2, #13
 8003b8c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003b90:	1359      	asrs	r1, r3, #13
 8003b92:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8003b96:	462b      	mov	r3, r5
 8003b98:	fb00 f203 	mul.w	r2, r0, r3
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	fb03 f301 	mul.w	r3, r3, r1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4622      	mov	r2, r4
 8003ba6:	fba2 1200 	umull	r1, r2, r2, r0
 8003baa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bae:	460a      	mov	r2, r1
 8003bb0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8003bb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003bb8:	4413      	add	r3, r2
 8003bba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8003bca:	4621      	mov	r1, r4
 8003bcc:	0e4a      	lsrs	r2, r1, #25
 8003bce:	4629      	mov	r1, r5
 8003bd0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	164b      	asrs	r3, r1, #25
 8003bd8:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	  var2 = (((int64_t)sensors[index].p8) * p) >> 19;
 8003bdc:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8003be0:	4947      	ldr	r1, [pc, #284]	@ (8003d00 <BMP280_ReadTemperatureAndPressure+0x664>)
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	440b      	add	r3, r1
 8003bec:	331a      	adds	r3, #26
 8003bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bf2:	b21b      	sxth	r3, r3
 8003bf4:	17da      	asrs	r2, r3, #31
 8003bf6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bf8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003bfe:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8003c02:	462a      	mov	r2, r5
 8003c04:	fb02 f203 	mul.w	r2, r2, r3
 8003c08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003c18:	4621      	mov	r1, r4
 8003c1a:	fba2 1201 	umull	r1, r2, r2, r1
 8003c1e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c22:	460a      	mov	r2, r1
 8003c24:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8003c28:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8003c3e:	4621      	mov	r1, r4
 8003c40:	0cca      	lsrs	r2, r1, #19
 8003c42:	4629      	mov	r1, r5
 8003c44:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003c48:	4629      	mov	r1, r5
 8003c4a:	14cb      	asrs	r3, r1, #19
 8003c4c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	  p = ((p + var1 + var2) >> 8) + (((int64_t)sensors[index].p7)<<4);
 8003c50:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8003c54:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8003c58:	1884      	adds	r4, r0, r2
 8003c5a:	663c      	str	r4, [r7, #96]	@ 0x60
 8003c5c:	eb41 0303 	adc.w	r3, r1, r3
 8003c60:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c62:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003c66:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	1889      	adds	r1, r1, r2
 8003c6e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c70:	4629      	mov	r1, r5
 8003c72:	eb43 0101 	adc.w	r1, r3, r1
 8003c76:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8003c78:	f04f 0000 	mov.w	r0, #0
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8003c84:	4623      	mov	r3, r4
 8003c86:	0a18      	lsrs	r0, r3, #8
 8003c88:	462b      	mov	r3, r5
 8003c8a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003c8e:	462b      	mov	r3, r5
 8003c90:	1219      	asrs	r1, r3, #8
 8003c92:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8003c96:	4c1a      	ldr	r4, [pc, #104]	@ (8003d00 <BMP280_ReadTemperatureAndPressure+0x664>)
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4423      	add	r3, r4
 8003ca2:	3318      	adds	r3, #24
 8003ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	17da      	asrs	r2, r3, #31
 8003cac:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cae:	657a      	str	r2, [r7, #84]	@ 0x54
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003cbc:	464c      	mov	r4, r9
 8003cbe:	0123      	lsls	r3, r4, #4
 8003cc0:	4644      	mov	r4, r8
 8003cc2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003cc6:	4644      	mov	r4, r8
 8003cc8:	0122      	lsls	r2, r4, #4
 8003cca:	1884      	adds	r4, r0, r2
 8003ccc:	603c      	str	r4, [r7, #0]
 8003cce:	eb41 0303 	adc.w	r3, r1, r3
 8003cd2:	607b      	str	r3, [r7, #4]
 8003cd4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003cd8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  *pressure = (int32_t)p/256;
 8003cdc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	da00      	bge.n	8003ce6 <BMP280_ReadTemperatureAndPressure+0x64a>
 8003ce4:	33ff      	adds	r3, #255	@ 0xff
 8003ce6:	121b      	asrs	r3, r3, #8
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003cee:	601a      	str	r2, [r3, #0]

	  return 0;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cfe:	bf00      	nop
 8003d00:	2000005c 	.word	0x2000005c

08003d04 <Read16>:
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @param:		register address in hexadecimal
 * @retval:		16 bit unsigned integer that represents the register's contents.
 */
uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af04      	add	r7, sp, #16
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d1c:	9302      	str	r3, [sp, #8]
 8003d1e:	2302      	movs	r3, #2
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	f107 030c 	add.w	r3, r7, #12
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	2301      	movs	r3, #1
 8003d2a:	2180      	movs	r1, #128	@ 0x80
 8003d2c:	f003 fd6a 	bl	8007804 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8003d30:	7b3b      	ldrb	r3, [r7, #12]
 8003d32:	b21b      	sxth	r3, r3
 8003d34:	021b      	lsls	r3, r3, #8
 8003d36:	b21a      	sxth	r2, r3
 8003d38:	7b7b      	ldrb	r3, [r7, #13]
 8003d3a:	b21b      	sxth	r3, r3
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	b21b      	sxth	r3, r3
 8003d40:	b29b      	uxth	r3, r3
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <Write16>:
				  HAL_BUSY     = 0x02U,
				  HAL_TIMEOUT  = 0x03U
				} HAL_StatusTypeDef;
 */
HAL_StatusTypeDef Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b088      	sub	sp, #32
 8003d4e:	af04      	add	r7, sp, #16
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	460b      	mov	r3, r1
 8003d54:	70fb      	strb	r3, [r7, #3]
 8003d56:	4613      	mov	r3, r2
 8003d58:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8003d5a:	883b      	ldrh	r3, [r7, #0]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8003d64:	883b      	ldrh	r3, [r7, #0]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d76:	9302      	str	r3, [sp, #8]
 8003d78:	2302      	movs	r3, #2
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2301      	movs	r3, #1
 8003d84:	2180      	movs	r1, #128	@ 0x80
 8003d86:	f003 fc43 	bl	8007610 <HAL_I2C_Mem_Write>
 8003d8a:	4603      	mov	r3, r0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <INA219_ReadBusVoltage>:
 * @brief: 		This function will read the battery voltage level being read.
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:		Returns voltage level in mili-volts
 */
uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff ffb0 	bl	8003d04 <Read16>
 8003da4:	4603      	mov	r3, r0
 8003da6:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8003da8:	89fb      	ldrh	r3, [r7, #14]
 8003daa:	08db      	lsrs	r3, r3, #3
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	b29b      	uxth	r3, r3

}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <INA219_ReadCurrent_raw>:
 *  @brief:	  	Gets the raw current value (16-bit signed integer, so +-32767)
 *  @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 *  @retval:	The raw current reading
 */
int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ff9d 	bl	8003d04 <Read16>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	81fb      	strh	r3, [r7, #14]

	return (result );
 8003dce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <INA219_ReadPower>:
 * 			Power multiplier is initialize in the calibration function.
 * @param:	Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:	Returns power level in mili-watts
 */
uint16_t INA219_ReadPower(INA219_t *ina219)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_POWER );
 8003de4:	2103      	movs	r1, #3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff ff8c 	bl	8003d04 <Read16>
 8003dec:	4603      	mov	r3, r0
 8003dee:	81fb      	strh	r3, [r7, #14]
	result = result * ina219_powerMultiplier_mW; // power is the power register times the power_LSB (power multiplier)
 8003df0:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <INA219_ReadPower+0x30>)
 8003df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	89fa      	ldrh	r2, [r7, #14]
 8003dfa:	fb12 f303 	smulbb	r3, r2, r3
 8003dfe:	81fb      	strh	r3, [r7, #14]
	return (result);
 8003e00:	89fb      	ldrh	r3, [r7, #14]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20002716 	.word	0x20002716

08003e10 <INA219_HealthCheck>:
 * 				the program that called the health check function what state our battery is
 * 				at and whether we have entered a "LOW" state. This way the program can take
 * 				appropriate action.
 */
enum BatteryState INA219_HealthCheck(INA219_t *ina219,float batteryPercentageThreshold,float batteryPercentage)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e1c:	edc7 0a01 	vstr	s1, [r7, #4]
	switch(batteryState)
 8003e20:	4b1e      	ldr	r3, [pc, #120]	@ (8003e9c <INA219_HealthCheck+0x8c>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d01b      	beq.n	8003e60 <INA219_HealthCheck+0x50>
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	dc2a      	bgt.n	8003e82 <INA219_HealthCheck+0x72>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <INA219_HealthCheck+0x26>
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d004      	beq.n	8003e3e <INA219_HealthCheck+0x2e>
 8003e34:	e025      	b.n	8003e82 <INA219_HealthCheck+0x72>
	{
		case (Battery_START):
			/* Enter your start up functionality here */
			batteryState = Battery_OK;
 8003e36:	4b19      	ldr	r3, [pc, #100]	@ (8003e9c <INA219_HealthCheck+0x8c>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
			break;
 8003e3c:	e025      	b.n	8003e8a <INA219_HealthCheck+0x7a>
		case (Battery_OK):
			/* Enter your battery OK state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8003e3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e42:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e4e:	dd03      	ble.n	8003e58 <INA219_HealthCheck+0x48>
			{
				batteryState = Battery_OK;
 8003e50:	4b12      	ldr	r3, [pc, #72]	@ (8003e9c <INA219_HealthCheck+0x8c>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8003e56:	e018      	b.n	8003e8a <INA219_HealthCheck+0x7a>
				 batteryState = Battery_LOW;
 8003e58:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <INA219_HealthCheck+0x8c>)
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	701a      	strb	r2, [r3, #0]
			break;
 8003e5e:	e014      	b.n	8003e8a <INA219_HealthCheck+0x7a>
		case (Battery_LOW):
			/* Enter your battery LOW state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8003e60:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e64:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e70:	dd03      	ble.n	8003e7a <INA219_HealthCheck+0x6a>
			{
				batteryState = Battery_OK;
 8003e72:	4b0a      	ldr	r3, [pc, #40]	@ (8003e9c <INA219_HealthCheck+0x8c>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8003e78:	e007      	b.n	8003e8a <INA219_HealthCheck+0x7a>
				 batteryState = Battery_LOW;
 8003e7a:	4b08      	ldr	r3, [pc, #32]	@ (8003e9c <INA219_HealthCheck+0x8c>)
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	701a      	strb	r2, [r3, #0]
			break;
 8003e80:	e003      	b.n	8003e8a <INA219_HealthCheck+0x7a>
		default:
			/*
			 * If program encounters a bug or a value outside what is expected we go here.
			 * Feel free to add functionality if needed.
			*/
			batteryState = Battery_START;
 8003e82:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <INA219_HealthCheck+0x8c>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
			break;
 8003e88:	bf00      	nop
	}
	return batteryState;
 8003e8a:	4b04      	ldr	r3, [pc, #16]	@ (8003e9c <INA219_HealthCheck+0x8c>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]

}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	20002710 	.word	0x20002710

08003ea0 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8003ea8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003eac:	2100      	movs	r1, #0
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff ff4b 	bl	8003d4a <Write16>
	HAL_Delay(1);
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	f001 fd81 	bl	80059bc <HAL_Delay>
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8003ece:	887b      	ldrh	r3, [r7, #2]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2105      	movs	r1, #5
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ff38 	bl	8003d4a <Write16>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8003eee:	887b      	ldrh	r3, [r7, #2]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff ff28 	bl	8003d4a <Write16>
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <INA219_setCalibration_16V_400mA>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_16V_400mA(INA219_t *ina219)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8003f0c:	f240 139f 	movw	r3, #415	@ 0x19f
 8003f10:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 8192;
 8003f12:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <INA219_setCalibration_16V_400mA+0x40>)
 8003f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f18:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <INA219_setCalibration_16V_400mA+0x44>)
 8003f1c:	2214      	movs	r2, #20
 8003f1e:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
 8003f20:	4b0a      	ldr	r3, [pc, #40]	@ (8003f4c <INA219_setCalibration_16V_400mA+0x48>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8003f26:	4b07      	ldr	r3, [pc, #28]	@ (8003f44 <INA219_setCalibration_16V_400mA+0x40>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff ffc8 	bl	8003ec2 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8003f32:	89fb      	ldrh	r3, [r7, #14]
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff ffd3 	bl	8003ee2 <INA219_setConfig>
}
 8003f3c:	bf00      	nop
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20002712 	.word	0x20002712
 8003f48:	20002714 	.word	0x20002714
 8003f4c:	20002716 	.word	0x20002716

08003f50 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	71fb      	strb	r3, [r7, #7]
	isFirst = false; // set global var used by INA219_GetMiliWattMinutes
 8003f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc8 <INA219_Init+0x78>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
	ina219->ina219_i2c = i2c;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	79fa      	ldrb	r2, [r7, #7]
 8003f6e:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8003f70:	4b16      	ldr	r3, [pc, #88]	@ (8003fcc <INA219_Init+0x7c>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8003f76:	4b16      	ldr	r3, [pc, #88]	@ (8003fd0 <INA219_Init+0x80>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	b299      	uxth	r1, r3
 8003f84:	2302      	movs	r3, #2
 8003f86:	2203      	movs	r2, #3
 8003f88:	68b8      	ldr	r0, [r7, #8]
 8003f8a:	f003 fe6d 	bl	8007c68 <HAL_I2C_IsDeviceReady>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d111      	bne.n	8003fbc <INA219_Init+0x6c>
	{
		// just to initialize our state machine.
		//The numbers 0.0f and 1.0f is just to call the healthcheck function.
		//Feel free to change this if you want. This function should be called in your main function to be polled.
		batteryState = Battery_START; // go to starting position.
 8003f98:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd4 <INA219_Init+0x84>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
		INA219_HealthCheck(ina219,0.0f,1.0f );
 8003f9e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003fa2:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8003fd8 <INA219_Init+0x88>
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7ff ff32 	bl	8003e10 <INA219_HealthCheck>
		INA219_Reset(ina219);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7ff ff77 	bl	8003ea0 <INA219_Reset>
		//INA219_setCalibration_32V_2A(ina219);
		INA219_setCalibration_16V_400mA(ina219);
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff ffa6 	bl	8003f04 <INA219_setCalibration_16V_400mA>


		return 1;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <INA219_Init+0x6e>
	}

	else
	{
		return 0;
 8003fbc:	2300      	movs	r3, #0
	}
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20002711 	.word	0x20002711
 8003fcc:	20002714 	.word	0x20002714
 8003fd0:	20002716 	.word	0x20002716
 8003fd4:	20002710 	.word	0x20002710
 8003fd8:	00000000 	.word	0x00000000

08003fdc <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2110      	movs	r1, #16
 8003fe4:	4802      	ldr	r0, [pc, #8]	@ (8003ff0 <SELECT+0x14>)
 8003fe6:	f002 fe6d 	bl	8006cc4 <HAL_GPIO_WritePin>
}
 8003fea:	bf00      	nop
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40020000 	.word	0x40020000

08003ff4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	2110      	movs	r1, #16
 8003ffc:	4802      	ldr	r0, [pc, #8]	@ (8004008 <DESELECT+0x14>)
 8003ffe:	f002 fe61 	bl	8006cc4 <HAL_GPIO_WritePin>
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40020000 	.word	0x40020000

0800400c <SPI_TxByte>:


static void SPI_TxByte(BYTE data)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004016:	bf00      	nop
 8004018:	4808      	ldr	r0, [pc, #32]	@ (800403c <SPI_TxByte+0x30>)
 800401a:	f006 ff6d 	bl	800aef8 <HAL_SPI_GetState>
 800401e:	4603      	mov	r3, r0
 8004020:	2b01      	cmp	r3, #1
 8004022:	d1f9      	bne.n	8004018 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8004024:	1df9      	adds	r1, r7, #7
 8004026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800402a:	2201      	movs	r2, #1
 800402c:	4803      	ldr	r0, [pc, #12]	@ (800403c <SPI_TxByte+0x30>)
 800402e:	f006 fb6c 	bl	800a70a <HAL_SPI_Transmit>
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20002570 	.word	0x20002570

08004040 <SPI_RxByte>:


static uint8_t SPI_RxByte(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8004046:	23ff      	movs	r3, #255	@ 0xff
 8004048:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800404e:	bf00      	nop
 8004050:	4809      	ldr	r0, [pc, #36]	@ (8004078 <SPI_RxByte+0x38>)
 8004052:	f006 ff51 	bl	800aef8 <HAL_SPI_GetState>
 8004056:	4603      	mov	r3, r0
 8004058:	2b01      	cmp	r3, #1
 800405a:	d1f9      	bne.n	8004050 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800405c:	1dba      	adds	r2, r7, #6
 800405e:	1df9      	adds	r1, r7, #7
 8004060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2301      	movs	r3, #1
 8004068:	4803      	ldr	r0, [pc, #12]	@ (8004078 <SPI_RxByte+0x38>)
 800406a:	f006 fc92 	bl	800a992 <HAL_SPI_TransmitReceive>

  return data;
 800406e:	79bb      	ldrb	r3, [r7, #6]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20002570 	.word	0x20002570

0800407c <SPI_RxBytePtr>:


static void SPI_RxBytePtr(uint8_t *buff)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8004084:	f7ff ffdc 	bl	8004040 <SPI_RxByte>
 8004088:	4603      	mov	r3, r0
 800408a:	461a      	mov	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	701a      	strb	r2, [r3, #0]
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <SD_ReadyWait>:


static uint8_t SD_ReadyWait(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
  uint8_t res;

   Timer2 = 50;
 800409e:	4b0b      	ldr	r3, [pc, #44]	@ (80040cc <SD_ReadyWait+0x34>)
 80040a0:	2232      	movs	r2, #50	@ 0x32
 80040a2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80040a4:	f7ff ffcc 	bl	8004040 <SPI_RxByte>

  do
  {
     res = SPI_RxByte();
 80040a8:	f7ff ffca 	bl	8004040 <SPI_RxByte>
 80040ac:	4603      	mov	r3, r0
 80040ae:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	2bff      	cmp	r3, #255	@ 0xff
 80040b4:	d004      	beq.n	80040c0 <SD_ReadyWait+0x28>
 80040b6:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <SD_ReadyWait+0x34>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f3      	bne.n	80040a8 <SD_ReadyWait+0x10>

  return res;
 80040c0:	79fb      	ldrb	r3, [r7, #7]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	2000262a 	.word	0x2000262a

080040d0 <SD_PowerOn>:

 static void SD_PowerOn(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80040d6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80040da:	617b      	str	r3, [r7, #20]

   DESELECT();
 80040dc:	f7ff ff8a 	bl	8003ff4 <DESELECT>

  for(int i = 0; i < 10; i++)
 80040e0:	2300      	movs	r3, #0
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	e005      	b.n	80040f2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80040e6:	20ff      	movs	r0, #255	@ 0xff
 80040e8:	f7ff ff90 	bl	800400c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	3301      	adds	r3, #1
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b09      	cmp	r3, #9
 80040f6:	ddf6      	ble.n	80040e6 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80040f8:	f7ff ff70 	bl	8003fdc <SELECT>

   cmd_arg[0] = (CMD0 | 0x40);
 80040fc:	2340      	movs	r3, #64	@ 0x40
 80040fe:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8004110:	2395      	movs	r3, #149	@ 0x95
 8004112:	727b      	strb	r3, [r7, #9]

   for (int i = 0; i < 6; i++)
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	e009      	b.n	800412e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800411a:	1d3a      	adds	r2, r7, #4
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff ff72 	bl	800400c <SPI_TxByte>
   for (int i = 0; i < 6; i++)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3301      	adds	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b05      	cmp	r3, #5
 8004132:	ddf2      	ble.n	800411a <SD_PowerOn+0x4a>
  }

   while ((SPI_RxByte() != 0x01) && Count)
 8004134:	e002      	b.n	800413c <SD_PowerOn+0x6c>
  {
    Count--;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	3b01      	subs	r3, #1
 800413a:	617b      	str	r3, [r7, #20]
   while ((SPI_RxByte() != 0x01) && Count)
 800413c:	f7ff ff80 	bl	8004040 <SPI_RxByte>
 8004140:	4603      	mov	r3, r0
 8004142:	2b01      	cmp	r3, #1
 8004144:	d002      	beq.n	800414c <SD_PowerOn+0x7c>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f4      	bne.n	8004136 <SD_PowerOn+0x66>
  }

  DESELECT();
 800414c:	f7ff ff52 	bl	8003ff4 <DESELECT>
  SPI_TxByte(0XFF);
 8004150:	20ff      	movs	r0, #255	@ 0xff
 8004152:	f7ff ff5b 	bl	800400c <SPI_TxByte>

  PowerFlag = 1;
 8004156:	4b03      	ldr	r3, [pc, #12]	@ (8004164 <SD_PowerOn+0x94>)
 8004158:	2201      	movs	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
}
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20002719 	.word	0x20002719

08004168 <SD_PowerOff>:

 static void SD_PowerOff(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800416c:	4b03      	ldr	r3, [pc, #12]	@ (800417c <SD_PowerOff+0x14>)
 800416e:	2200      	movs	r2, #0
 8004170:	701a      	strb	r2, [r3, #0]
}
 8004172:	bf00      	nop
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	20002719 	.word	0x20002719

08004180 <SD_CheckPower>:

 static uint8_t SD_CheckPower(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8004184:	4b03      	ldr	r3, [pc, #12]	@ (8004194 <SD_CheckPower+0x14>)
 8004186:	781b      	ldrb	r3, [r3, #0]
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20002719 	.word	0x20002719

08004198 <SD_RxDataBlock>:

 static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint8_t token;

   Timer1 = 10;
 80041a2:	4b17      	ldr	r3, [pc, #92]	@ (8004200 <SD_RxDataBlock+0x68>)
 80041a4:	220a      	movs	r2, #10
 80041a6:	701a      	strb	r2, [r3, #0]

  do
  {
    token = SPI_RxByte();
 80041a8:	f7ff ff4a 	bl	8004040 <SPI_RxByte>
 80041ac:	4603      	mov	r3, r0
 80041ae:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2bff      	cmp	r3, #255	@ 0xff
 80041b4:	d104      	bne.n	80041c0 <SD_RxDataBlock+0x28>
 80041b6:	4b12      	ldr	r3, [pc, #72]	@ (8004200 <SD_RxDataBlock+0x68>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f3      	bne.n	80041a8 <SD_RxDataBlock+0x10>


  if(token != 0xFE)
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80041c4:	d001      	beq.n	80041ca <SD_RxDataBlock+0x32>
    return FALSE;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e016      	b.n	80041f8 <SD_RxDataBlock+0x60>

  do
  {
    SPI_RxBytePtr(buff++);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff53 	bl	800407c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff ff4d 	bl	800407c <SPI_RxBytePtr>
  } while(btr -= 2);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	3b02      	subs	r3, #2
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1ed      	bne.n	80041ca <SD_RxDataBlock+0x32>

  SPI_RxByte();
 80041ee:	f7ff ff27 	bl	8004040 <SPI_RxByte>
  SPI_RxByte();
 80041f2:	f7ff ff25 	bl	8004040 <SPI_RxByte>

  return TRUE;
 80041f6:	2301      	movs	r3, #1
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20002629 	.word	0x20002629

08004204 <SD_TxDataBlock>:


#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp = 0, wc = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	2300      	movs	r3, #0
 8004216:	73bb      	strb	r3, [r7, #14]
  uint8_t i = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	737b      	strb	r3, [r7, #13]

  if (SD_ReadyWait() != 0xFF)
 800421c:	f7ff ff3c 	bl	8004098 <SD_ReadyWait>
 8004220:	4603      	mov	r3, r0
 8004222:	2bff      	cmp	r3, #255	@ 0xff
 8004224:	d001      	beq.n	800422a <SD_TxDataBlock+0x26>
    return FALSE;
 8004226:	2300      	movs	r3, #0
 8004228:	e040      	b.n	80042ac <SD_TxDataBlock+0xa8>

  SPI_TxByte(token);
 800422a:	78fb      	ldrb	r3, [r7, #3]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff feed 	bl	800400c <SPI_TxByte>

  if (token != 0xFD)
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	2bfd      	cmp	r3, #253	@ 0xfd
 8004236:	d031      	beq.n	800429c <SD_TxDataBlock+0x98>
  {
    wc = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	73bb      	strb	r3, [r7, #14]

    do
    {
      SPI_TxByte(*buff++);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff fee1 	bl	800400c <SPI_TxByte>
      SPI_TxByte(*buff++);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff feda 	bl	800400c <SPI_TxByte>
    } while (--wc);
 8004258:	7bbb      	ldrb	r3, [r7, #14]
 800425a:	3b01      	subs	r3, #1
 800425c:	73bb      	strb	r3, [r7, #14]
 800425e:	7bbb      	ldrb	r3, [r7, #14]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1eb      	bne.n	800423c <SD_TxDataBlock+0x38>

    SPI_RxByte();
 8004264:	f7ff feec 	bl	8004040 <SPI_RxByte>
    SPI_RxByte();
 8004268:	f7ff feea 	bl	8004040 <SPI_RxByte>

    while (i <= 64)
 800426c:	e00b      	b.n	8004286 <SD_TxDataBlock+0x82>
    {
      resp = SPI_RxByte();
 800426e:	f7ff fee7 	bl	8004040 <SPI_RxByte>
 8004272:	4603      	mov	r3, r0
 8004274:	73fb      	strb	r3, [r7, #15]

      if ((resp & 0x1F) == 0x05)
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	2b05      	cmp	r3, #5
 800427e:	d006      	beq.n	800428e <SD_TxDataBlock+0x8a>
        break;

      i++;
 8004280:	7b7b      	ldrb	r3, [r7, #13]
 8004282:	3301      	adds	r3, #1
 8004284:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8004286:	7b7b      	ldrb	r3, [r7, #13]
 8004288:	2b40      	cmp	r3, #64	@ 0x40
 800428a:	d9f0      	bls.n	800426e <SD_TxDataBlock+0x6a>
 800428c:	e000      	b.n	8004290 <SD_TxDataBlock+0x8c>
        break;
 800428e:	bf00      	nop
    }

    while (SPI_RxByte() == 0);
 8004290:	bf00      	nop
 8004292:	f7ff fed5 	bl	8004040 <SPI_RxByte>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0fa      	beq.n	8004292 <SD_TxDataBlock+0x8e>
  }

  if ((resp & 0x1F) == 0x05)
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	2b05      	cmp	r3, #5
 80042a4:	d101      	bne.n	80042aa <SD_TxDataBlock+0xa6>
    return TRUE;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <SD_TxDataBlock+0xa8>
  else
    return FALSE;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	6039      	str	r1, [r7, #0]
 80042be:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  if (SD_ReadyWait() != 0xFF)
 80042c0:	f7ff feea 	bl	8004098 <SD_ReadyWait>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2bff      	cmp	r3, #255	@ 0xff
 80042c8:	d001      	beq.n	80042ce <SD_SendCmd+0x1a>
    return 0xFF;
 80042ca:	23ff      	movs	r3, #255	@ 0xff
 80042cc:	e040      	b.n	8004350 <SD_SendCmd+0x9c>

  SPI_TxByte(cmd); 			/* Command */
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff fe9b 	bl	800400c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	0e1b      	lsrs	r3, r3, #24
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fe95 	bl	800400c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fe8f 	bl	800400c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	0a1b      	lsrs	r3, r3, #8
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fe89 	bl	800400c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fe84 	bl	800400c <SPI_TxByte>

  crc = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	2b40      	cmp	r3, #64	@ 0x40
 800430c:	d101      	bne.n	8004312 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800430e:	2395      	movs	r3, #149	@ 0x95
 8004310:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b48      	cmp	r3, #72	@ 0x48
 8004316:	d101      	bne.n	800431c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8004318:	2387      	movs	r3, #135	@ 0x87
 800431a:	73fb      	strb	r3, [r7, #15]

  /* CRC */
  SPI_TxByte(crc);
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fe74 	bl	800400c <SPI_TxByte>

  if (cmd == CMD12)
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	2b4c      	cmp	r3, #76	@ 0x4c
 8004328:	d101      	bne.n	800432e <SD_SendCmd+0x7a>
    SPI_RxByte();
 800432a:	f7ff fe89 	bl	8004040 <SPI_RxByte>

  uint8_t n = 10;
 800432e:	230a      	movs	r3, #10
 8004330:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8004332:	f7ff fe85 	bl	8004040 <SPI_RxByte>
 8004336:	4603      	mov	r3, r0
 8004338:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800433a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800433e:	2b00      	cmp	r3, #0
 8004340:	da05      	bge.n	800434e <SD_SendCmd+0x9a>
 8004342:	7bbb      	ldrb	r3, [r7, #14]
 8004344:	3b01      	subs	r3, #1
 8004346:	73bb      	strb	r3, [r7, #14]
 8004348:	7bbb      	ldrb	r3, [r7, #14]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f1      	bne.n	8004332 <SD_SendCmd+0x7e>

  return res;
 800434e:	7b7b      	ldrb	r3, [r7, #13]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <SD_disk_initialize>:


DSTATUS SD_disk_initialize(BYTE drv)
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  if(drv)
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8004368:	2301      	movs	r3, #1
 800436a:	e0d5      	b.n	8004518 <SD_disk_initialize+0x1c0>

  if(Stat & STA_NODISK)
 800436c:	4b6c      	ldr	r3, [pc, #432]	@ (8004520 <SD_disk_initialize+0x1c8>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <SD_disk_initialize+0x2a>
    return Stat;
 800437a:	4b69      	ldr	r3, [pc, #420]	@ (8004520 <SD_disk_initialize+0x1c8>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	e0ca      	b.n	8004518 <SD_disk_initialize+0x1c0>

  SD_PowerOn();
 8004382:	f7ff fea5 	bl	80040d0 <SD_PowerOn>

  SELECT();
 8004386:	f7ff fe29 	bl	8003fdc <SELECT>

  type = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	73bb      	strb	r3, [r7, #14]

  if (SD_SendCmd(CMD0, 0) == 1)
 800438e:	2100      	movs	r1, #0
 8004390:	2040      	movs	r0, #64	@ 0x40
 8004392:	f7ff ff8f 	bl	80042b4 <SD_SendCmd>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	f040 80a5 	bne.w	80044e8 <SD_disk_initialize+0x190>
  {
    Timer1 = 100;
 800439e:	4b61      	ldr	r3, [pc, #388]	@ (8004524 <SD_disk_initialize+0x1cc>)
 80043a0:	2264      	movs	r2, #100	@ 0x64
 80043a2:	701a      	strb	r2, [r3, #0]

    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80043a4:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80043a8:	2048      	movs	r0, #72	@ 0x48
 80043aa:	f7ff ff83 	bl	80042b4 <SD_SendCmd>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d158      	bne.n	8004466 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80043b4:	2300      	movs	r3, #0
 80043b6:	73fb      	strb	r3, [r7, #15]
 80043b8:	e00c      	b.n	80043d4 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80043ba:	7bfc      	ldrb	r4, [r7, #15]
 80043bc:	f7ff fe40 	bl	8004040 <SPI_RxByte>
 80043c0:	4603      	mov	r3, r0
 80043c2:	461a      	mov	r2, r3
 80043c4:	f104 0310 	add.w	r3, r4, #16
 80043c8:	443b      	add	r3, r7
 80043ca:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	3301      	adds	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d9ef      	bls.n	80043ba <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80043da:	7abb      	ldrb	r3, [r7, #10]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	f040 8083 	bne.w	80044e8 <SD_disk_initialize+0x190>
 80043e2:	7afb      	ldrb	r3, [r7, #11]
 80043e4:	2baa      	cmp	r3, #170	@ 0xaa
 80043e6:	d17f      	bne.n	80044e8 <SD_disk_initialize+0x190>
      {
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80043e8:	2100      	movs	r1, #0
 80043ea:	2077      	movs	r0, #119	@ 0x77
 80043ec:	f7ff ff62 	bl	80042b4 <SD_SendCmd>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d807      	bhi.n	8004406 <SD_disk_initialize+0xae>
 80043f6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80043fa:	2069      	movs	r0, #105	@ 0x69
 80043fc:	f7ff ff5a 	bl	80042b4 <SD_SendCmd>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8004406:	4b47      	ldr	r3, [pc, #284]	@ (8004524 <SD_disk_initialize+0x1cc>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1eb      	bne.n	80043e8 <SD_disk_initialize+0x90>
 8004410:	e000      	b.n	8004414 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8004412:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004414:	4b43      	ldr	r3, [pc, #268]	@ (8004524 <SD_disk_initialize+0x1cc>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d064      	beq.n	80044e8 <SD_disk_initialize+0x190>
 800441e:	2100      	movs	r1, #0
 8004420:	207a      	movs	r0, #122	@ 0x7a
 8004422:	f7ff ff47 	bl	80042b4 <SD_SendCmd>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d15d      	bne.n	80044e8 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]
 8004430:	e00c      	b.n	800444c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8004432:	7bfc      	ldrb	r4, [r7, #15]
 8004434:	f7ff fe04 	bl	8004040 <SPI_RxByte>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	f104 0310 	add.w	r3, r4, #16
 8004440:	443b      	add	r3, r7
 8004442:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	3301      	adds	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b03      	cmp	r3, #3
 8004450:	d9ef      	bls.n	8004432 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8004452:	7a3b      	ldrb	r3, [r7, #8]
 8004454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <SD_disk_initialize+0x108>
 800445c:	2306      	movs	r3, #6
 800445e:	e000      	b.n	8004462 <SD_disk_initialize+0x10a>
 8004460:	2302      	movs	r3, #2
 8004462:	73bb      	strb	r3, [r7, #14]
 8004464:	e040      	b.n	80044e8 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8004466:	2100      	movs	r1, #0
 8004468:	2077      	movs	r0, #119	@ 0x77
 800446a:	f7ff ff23 	bl	80042b4 <SD_SendCmd>
 800446e:	4603      	mov	r3, r0
 8004470:	2b01      	cmp	r3, #1
 8004472:	d808      	bhi.n	8004486 <SD_disk_initialize+0x12e>
 8004474:	2100      	movs	r1, #0
 8004476:	2069      	movs	r0, #105	@ 0x69
 8004478:	f7ff ff1c 	bl	80042b4 <SD_SendCmd>
 800447c:	4603      	mov	r3, r0
 800447e:	2b01      	cmp	r3, #1
 8004480:	d801      	bhi.n	8004486 <SD_disk_initialize+0x12e>
 8004482:	2302      	movs	r3, #2
 8004484:	e000      	b.n	8004488 <SD_disk_initialize+0x130>
 8004486:	2301      	movs	r3, #1
 8004488:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800448a:	7bbb      	ldrb	r3, [r7, #14]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d10e      	bne.n	80044ae <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8004490:	2100      	movs	r1, #0
 8004492:	2077      	movs	r0, #119	@ 0x77
 8004494:	f7ff ff0e 	bl	80042b4 <SD_SendCmd>
 8004498:	4603      	mov	r3, r0
 800449a:	2b01      	cmp	r3, #1
 800449c:	d80e      	bhi.n	80044bc <SD_disk_initialize+0x164>
 800449e:	2100      	movs	r1, #0
 80044a0:	2069      	movs	r0, #105	@ 0x69
 80044a2:	f7ff ff07 	bl	80042b4 <SD_SendCmd>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d107      	bne.n	80044bc <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80044ac:	e00d      	b.n	80044ca <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80044ae:	2100      	movs	r1, #0
 80044b0:	2041      	movs	r0, #65	@ 0x41
 80044b2:	f7ff feff 	bl	80042b4 <SD_SendCmd>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80044bc:	4b19      	ldr	r3, [pc, #100]	@ (8004524 <SD_disk_initialize+0x1cc>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e1      	bne.n	800448a <SD_disk_initialize+0x132>
 80044c6:	e000      	b.n	80044ca <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80044c8:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80044ca:	4b16      	ldr	r3, [pc, #88]	@ (8004524 <SD_disk_initialize+0x1cc>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d007      	beq.n	80044e4 <SD_disk_initialize+0x18c>
 80044d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044d8:	2050      	movs	r0, #80	@ 0x50
 80044da:	f7ff feeb 	bl	80042b4 <SD_SendCmd>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <SD_disk_initialize+0x190>
      {
        type = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80044e8:	4a0f      	ldr	r2, [pc, #60]	@ (8004528 <SD_disk_initialize+0x1d0>)
 80044ea:	7bbb      	ldrb	r3, [r7, #14]
 80044ec:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80044ee:	f7ff fd81 	bl	8003ff4 <DESELECT>

  SPI_RxByte();
 80044f2:	f7ff fda5 	bl	8004040 <SPI_RxByte>

  if (type)
 80044f6:	7bbb      	ldrb	r3, [r7, #14]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80044fc:	4b08      	ldr	r3, [pc, #32]	@ (8004520 <SD_disk_initialize+0x1c8>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	b2da      	uxtb	r2, r3
 8004508:	4b05      	ldr	r3, [pc, #20]	@ (8004520 <SD_disk_initialize+0x1c8>)
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e001      	b.n	8004512 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800450e:	f7ff fe2b 	bl	8004168 <SD_PowerOff>
  }

  return Stat;
 8004512:	4b03      	ldr	r3, [pc, #12]	@ (8004520 <SD_disk_initialize+0x1c8>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b2db      	uxtb	r3, r3
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	bd90      	pop	{r4, r7, pc}
 8004520:	200000d4 	.word	0x200000d4
 8004524:	20002629 	.word	0x20002629
 8004528:	20002718 	.word	0x20002718

0800452c <SD_disk_status>:

DSTATUS SD_disk_status(BYTE drv)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <SD_disk_status+0x14>
    return STA_NOINIT;
 800453c:	2301      	movs	r3, #1
 800453e:	e002      	b.n	8004546 <SD_disk_status+0x1a>

  return Stat;
 8004540:	4b04      	ldr	r3, [pc, #16]	@ (8004554 <SD_disk_status+0x28>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	b2db      	uxtb	r3, r3
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	200000d4 	.word	0x200000d4

08004558 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	4603      	mov	r3, r0
 8004566:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <SD_disk_read+0x1c>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <SD_disk_read+0x20>
    return RES_PARERR;
 8004574:	2304      	movs	r3, #4
 8004576:	e051      	b.n	800461c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8004578:	4b2a      	ldr	r3, [pc, #168]	@ (8004624 <SD_disk_read+0xcc>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8004586:	2303      	movs	r3, #3
 8004588:	e048      	b.n	800461c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800458a:	4b27      	ldr	r3, [pc, #156]	@ (8004628 <SD_disk_read+0xd0>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <SD_disk_read+0x44>
    sector *= 512;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	025b      	lsls	r3, r3, #9
 800459a:	607b      	str	r3, [r7, #4]

  SELECT();
 800459c:	f7ff fd1e 	bl	8003fdc <SELECT>

  if (count == 1)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d111      	bne.n	80045ca <SD_disk_read+0x72>
  {

    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	2051      	movs	r0, #81	@ 0x51
 80045aa:	f7ff fe83 	bl	80042b4 <SD_SendCmd>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d129      	bne.n	8004608 <SD_disk_read+0xb0>
 80045b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045b8:	68b8      	ldr	r0, [r7, #8]
 80045ba:	f7ff fded 	bl	8004198 <SD_RxDataBlock>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d021      	beq.n	8004608 <SD_disk_read+0xb0>
      count = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	e01e      	b.n	8004608 <SD_disk_read+0xb0>
  }
  else
  {
    if (SD_SendCmd(CMD18, sector) == 0)
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	2052      	movs	r0, #82	@ 0x52
 80045ce:	f7ff fe71 	bl	80042b4 <SD_SendCmd>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d117      	bne.n	8004608 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80045d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045dc:	68b8      	ldr	r0, [r7, #8]
 80045de:	f7ff fddb 	bl	8004198 <SD_RxDataBlock>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <SD_disk_read+0xa6>
          break;

        buff += 512;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80045ee:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	603b      	str	r3, [r7, #0]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1ed      	bne.n	80045d8 <SD_disk_read+0x80>
 80045fc:	e000      	b.n	8004600 <SD_disk_read+0xa8>
          break;
 80045fe:	bf00      	nop

      SD_SendCmd(CMD12, 0);
 8004600:	2100      	movs	r1, #0
 8004602:	204c      	movs	r0, #76	@ 0x4c
 8004604:	f7ff fe56 	bl	80042b4 <SD_SendCmd>
    }
  }

  DESELECT();
 8004608:	f7ff fcf4 	bl	8003ff4 <DESELECT>
  SPI_RxByte();
 800460c:	f7ff fd18 	bl	8004040 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	bf14      	ite	ne
 8004616:	2301      	movne	r3, #1
 8004618:	2300      	moveq	r3, #0
 800461a:	b2db      	uxtb	r3, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	200000d4 	.word	0x200000d4
 8004628:	20002718 	.word	0x20002718

0800462c <SD_disk_write>:

#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4603      	mov	r3, r0
 800463a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <SD_disk_write+0x1c>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <SD_disk_write+0x20>
    return RES_PARERR;
 8004648:	2304      	movs	r3, #4
 800464a:	e06b      	b.n	8004724 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 800464c:	4b37      	ldr	r3, [pc, #220]	@ (800472c <SD_disk_write+0x100>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <SD_disk_write+0x32>
    return RES_NOTRDY;
 800465a:	2303      	movs	r3, #3
 800465c:	e062      	b.n	8004724 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800465e:	4b33      	ldr	r3, [pc, #204]	@ (800472c <SD_disk_write+0x100>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <SD_disk_write+0x44>
    return RES_WRPRT;
 800466c:	2302      	movs	r3, #2
 800466e:	e059      	b.n	8004724 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8004670:	4b2f      	ldr	r3, [pc, #188]	@ (8004730 <SD_disk_write+0x104>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d102      	bne.n	8004682 <SD_disk_write+0x56>
    sector *= 512;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	025b      	lsls	r3, r3, #9
 8004680:	607b      	str	r3, [r7, #4]

  SELECT();
 8004682:	f7ff fcab 	bl	8003fdc <SELECT>

  if (count == 1)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d110      	bne.n	80046ae <SD_disk_write+0x82>
  {
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	2058      	movs	r0, #88	@ 0x58
 8004690:	f7ff fe10 	bl	80042b4 <SD_SendCmd>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d13a      	bne.n	8004710 <SD_disk_write+0xe4>
 800469a:	21fe      	movs	r1, #254	@ 0xfe
 800469c:	68b8      	ldr	r0, [r7, #8]
 800469e:	f7ff fdb1 	bl	8004204 <SD_TxDataBlock>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d033      	beq.n	8004710 <SD_disk_write+0xe4>
      count = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	e030      	b.n	8004710 <SD_disk_write+0xe4>
  }
  else
  {
    if (CardType & 2)
 80046ae:	4b20      	ldr	r3, [pc, #128]	@ (8004730 <SD_disk_write+0x104>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80046ba:	2100      	movs	r1, #0
 80046bc:	2077      	movs	r0, #119	@ 0x77
 80046be:	f7ff fdf9 	bl	80042b4 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80046c2:	6839      	ldr	r1, [r7, #0]
 80046c4:	2057      	movs	r0, #87	@ 0x57
 80046c6:	f7ff fdf5 	bl	80042b4 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	2059      	movs	r0, #89	@ 0x59
 80046ce:	f7ff fdf1 	bl	80042b4 <SD_SendCmd>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d11b      	bne.n	8004710 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80046d8:	21fc      	movs	r1, #252	@ 0xfc
 80046da:	68b8      	ldr	r0, [r7, #8]
 80046dc:	f7ff fd92 	bl	8004204 <SD_TxDataBlock>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <SD_disk_write+0xd0>
          break;

        buff += 512;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80046ec:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1ee      	bne.n	80046d8 <SD_disk_write+0xac>
 80046fa:	e000      	b.n	80046fe <SD_disk_write+0xd2>
          break;
 80046fc:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80046fe:	21fd      	movs	r1, #253	@ 0xfd
 8004700:	2000      	movs	r0, #0
 8004702:	f7ff fd7f 	bl	8004204 <SD_TxDataBlock>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <SD_disk_write+0xe4>
      {
        count = 1;
 800470c:	2301      	movs	r3, #1
 800470e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8004710:	f7ff fc70 	bl	8003ff4 <DESELECT>
  SPI_RxByte();
 8004714:	f7ff fc94 	bl	8004040 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	bf14      	ite	ne
 800471e:	2301      	movne	r3, #1
 8004720:	2300      	moveq	r3, #0
 8004722:	b2db      	uxtb	r3, r3
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	200000d4 	.word	0x200000d4
 8004730:	20002718 	.word	0x20002718

08004734 <SD_disk_ioctl>:
#endif /* _READONLY */

DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8004734:	b590      	push	{r4, r7, lr}
 8004736:	b08b      	sub	sp, #44	@ 0x2c
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	603a      	str	r2, [r7, #0]
 800473e:	71fb      	strb	r3, [r7, #7]
 8004740:	460b      	mov	r3, r1
 8004742:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800474e:	2304      	movs	r3, #4
 8004750:	e119      	b.n	8004986 <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8004758:	79bb      	ldrb	r3, [r7, #6]
 800475a:	2b05      	cmp	r3, #5
 800475c:	d129      	bne.n	80047b2 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d017      	beq.n	8004796 <SD_disk_ioctl+0x62>
 8004766:	2b02      	cmp	r3, #2
 8004768:	dc1f      	bgt.n	80047aa <SD_disk_ioctl+0x76>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <SD_disk_ioctl+0x40>
 800476e:	2b01      	cmp	r3, #1
 8004770:	d00b      	beq.n	800478a <SD_disk_ioctl+0x56>
 8004772:	e01a      	b.n	80047aa <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8004774:	f7ff fd04 	bl	8004180 <SD_CheckPower>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800477e:	f7ff fcf3 	bl	8004168 <SD_PowerOff>
      res = RES_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004788:	e0fb      	b.n	8004982 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 800478a:	f7ff fca1 	bl	80040d0 <SD_PowerOn>
      res = RES_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004794:	e0f5      	b.n	8004982 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	1c5c      	adds	r4, r3, #1
 800479a:	f7ff fcf1 	bl	8004180 <SD_CheckPower>
 800479e:	4603      	mov	r3, r0
 80047a0:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80047a2:	2300      	movs	r3, #0
 80047a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80047a8:	e0eb      	b.n	8004982 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 80047aa:	2304      	movs	r3, #4
 80047ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80047b0:	e0e7      	b.n	8004982 <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80047b2:	4b77      	ldr	r3, [pc, #476]	@ (8004990 <SD_disk_ioctl+0x25c>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e0e0      	b.n	8004986 <SD_disk_ioctl+0x252>

    SELECT();
 80047c4:	f7ff fc0a 	bl	8003fdc <SELECT>

    switch (ctrl)
 80047c8:	79bb      	ldrb	r3, [r7, #6]
 80047ca:	2b0d      	cmp	r3, #13
 80047cc:	f200 80ca 	bhi.w	8004964 <SD_disk_ioctl+0x230>
 80047d0:	a201      	add	r2, pc, #4	@ (adr r2, 80047d8 <SD_disk_ioctl+0xa4>)
 80047d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	080048cf 	.word	0x080048cf
 80047dc:	08004811 	.word	0x08004811
 80047e0:	080048bf 	.word	0x080048bf
 80047e4:	08004965 	.word	0x08004965
 80047e8:	08004965 	.word	0x08004965
 80047ec:	08004965 	.word	0x08004965
 80047f0:	08004965 	.word	0x08004965
 80047f4:	08004965 	.word	0x08004965
 80047f8:	08004965 	.word	0x08004965
 80047fc:	08004965 	.word	0x08004965
 8004800:	08004965 	.word	0x08004965
 8004804:	080048e1 	.word	0x080048e1
 8004808:	08004905 	.word	0x08004905
 800480c:	08004929 	.word	0x08004929
    {
    case GET_SECTOR_COUNT:
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004810:	2100      	movs	r1, #0
 8004812:	2049      	movs	r0, #73	@ 0x49
 8004814:	f7ff fd4e 	bl	80042b4 <SD_SendCmd>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	f040 80a6 	bne.w	800496c <SD_disk_ioctl+0x238>
 8004820:	f107 030c 	add.w	r3, r7, #12
 8004824:	2110      	movs	r1, #16
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fcb6 	bl	8004198 <SD_RxDataBlock>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 809c 	beq.w	800496c <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8004834:	7b3b      	ldrb	r3, [r7, #12]
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	d10d      	bne.n	800485a <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800483e:	7d7b      	ldrb	r3, [r7, #21]
 8004840:	461a      	mov	r2, r3
 8004842:	7d3b      	ldrb	r3, [r7, #20]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	b29b      	uxth	r3, r3
 8004848:	4413      	add	r3, r2
 800484a:	b29b      	uxth	r3, r3
 800484c:	3301      	adds	r3, #1
 800484e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8004850:	8bfb      	ldrh	r3, [r7, #30]
 8004852:	029a      	lsls	r2, r3, #10
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e02d      	b.n	80048b6 <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800485a:	7c7b      	ldrb	r3, [r7, #17]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	b2da      	uxtb	r2, r3
 8004862:	7dbb      	ldrb	r3, [r7, #22]
 8004864:	09db      	lsrs	r3, r3, #7
 8004866:	b2db      	uxtb	r3, r3
 8004868:	4413      	add	r3, r2
 800486a:	b2da      	uxtb	r2, r3
 800486c:	7d7b      	ldrb	r3, [r7, #21]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	b2db      	uxtb	r3, r3
 8004872:	f003 0306 	and.w	r3, r3, #6
 8004876:	b2db      	uxtb	r3, r3
 8004878:	4413      	add	r3, r2
 800487a:	b2db      	uxtb	r3, r3
 800487c:	3302      	adds	r3, #2
 800487e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004882:	7d3b      	ldrb	r3, [r7, #20]
 8004884:	099b      	lsrs	r3, r3, #6
 8004886:	b2db      	uxtb	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	7cfb      	ldrb	r3, [r7, #19]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	b29b      	uxth	r3, r3
 8004890:	4413      	add	r3, r2
 8004892:	b29a      	uxth	r2, r3
 8004894:	7cbb      	ldrb	r3, [r7, #18]
 8004896:	029b      	lsls	r3, r3, #10
 8004898:	b29b      	uxth	r3, r3
 800489a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800489e:	b29b      	uxth	r3, r3
 80048a0:	4413      	add	r3, r2
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3301      	adds	r3, #1
 80048a6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80048a8:	8bfa      	ldrh	r2, [r7, #30]
 80048aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048ae:	3b09      	subs	r3, #9
 80048b0:	409a      	lsls	r2, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80048bc:	e056      	b.n	800496c <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048c4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80048cc:	e055      	b.n	800497a <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF)
 80048ce:	f7ff fbe3 	bl	8004098 <SD_ReadyWait>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2bff      	cmp	r3, #255	@ 0xff
 80048d6:	d14b      	bne.n	8004970 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80048de:	e047      	b.n	8004970 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80048e0:	2100      	movs	r1, #0
 80048e2:	2049      	movs	r0, #73	@ 0x49
 80048e4:	f7ff fce6 	bl	80042b4 <SD_SendCmd>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d142      	bne.n	8004974 <SD_disk_ioctl+0x240>
 80048ee:	2110      	movs	r1, #16
 80048f0:	6a38      	ldr	r0, [r7, #32]
 80048f2:	f7ff fc51 	bl	8004198 <SD_RxDataBlock>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d03b      	beq.n	8004974 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004902:	e037      	b.n	8004974 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8004904:	2100      	movs	r1, #0
 8004906:	204a      	movs	r0, #74	@ 0x4a
 8004908:	f7ff fcd4 	bl	80042b4 <SD_SendCmd>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d132      	bne.n	8004978 <SD_disk_ioctl+0x244>
 8004912:	2110      	movs	r1, #16
 8004914:	6a38      	ldr	r0, [r7, #32]
 8004916:	f7ff fc3f 	bl	8004198 <SD_RxDataBlock>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d02b      	beq.n	8004978 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004926:	e027      	b.n	8004978 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      if (SD_SendCmd(CMD58, 0) == 0)
 8004928:	2100      	movs	r1, #0
 800492a:	207a      	movs	r0, #122	@ 0x7a
 800492c:	f7ff fcc2 	bl	80042b4 <SD_SendCmd>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d116      	bne.n	8004964 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 8004936:	2300      	movs	r3, #0
 8004938:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800493c:	e00b      	b.n	8004956 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 800493e:	6a3c      	ldr	r4, [r7, #32]
 8004940:	1c63      	adds	r3, r4, #1
 8004942:	623b      	str	r3, [r7, #32]
 8004944:	f7ff fb7c 	bl	8004040 <SPI_RxByte>
 8004948:	4603      	mov	r3, r0
 800494a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800494c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004950:	3301      	adds	r3, #1
 8004952:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004956:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800495a:	2b03      	cmp	r3, #3
 800495c:	d9ef      	bls.n	800493e <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8004964:	2304      	movs	r3, #4
 8004966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800496a:	e006      	b.n	800497a <SD_disk_ioctl+0x246>
      break;
 800496c:	bf00      	nop
 800496e:	e004      	b.n	800497a <SD_disk_ioctl+0x246>
      break;
 8004970:	bf00      	nop
 8004972:	e002      	b.n	800497a <SD_disk_ioctl+0x246>
      break;
 8004974:	bf00      	nop
 8004976:	e000      	b.n	800497a <SD_disk_ioctl+0x246>
      break;
 8004978:	bf00      	nop
    }

    DESELECT();
 800497a:	f7ff fb3b 	bl	8003ff4 <DESELECT>
    SPI_RxByte();
 800497e:	f7ff fb5f 	bl	8004040 <SPI_RxByte>
  }

  return res;
 8004982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004986:	4618      	mov	r0, r3
 8004988:	372c      	adds	r7, #44	@ 0x2c
 800498a:	46bd      	mov	sp, r7
 800498c:	bd90      	pop	{r4, r7, pc}
 800498e:	bf00      	nop
 8004990:	200000d4 	.word	0x200000d4

08004994 <_write>:
	return CDC_Transmit_FS(message, strlen((const char*)message));
}


int _write(int fd, unsigned char *buf, int len)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS(buf, len);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	4619      	mov	r1, r3
 80049a6:	68b8      	ldr	r0, [r7, #8]
 80049a8:	f00e fb12 	bl	8012fd0 <CDC_Transmit_FS>
    //serial_transmit((uint8_t*)buf);
    return len;
 80049ac:	687b      	ldr	r3, [r7, #4]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <sensirion_common_generate_crc>:
 */

#include "sensors/sensirion_common.h"

u8 sensirion_common_generate_crc(u8 *data, u16 count)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	807b      	strh	r3, [r7, #2]
    u16 current_byte;
    u8 crc = CRC8_INIT;
 80049c2:	23ff      	movs	r3, #255	@ 0xff
 80049c4:	737b      	strb	r3, [r7, #13]
    u8 crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80049c6:	2300      	movs	r3, #0
 80049c8:	81fb      	strh	r3, [r7, #14]
 80049ca:	e022      	b.n	8004a12 <sensirion_common_generate_crc+0x5c>
        crc ^= (data[current_byte]);
 80049cc:	89fb      	ldrh	r3, [r7, #14]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	781a      	ldrb	r2, [r3, #0]
 80049d4:	7b7b      	ldrb	r3, [r7, #13]
 80049d6:	4053      	eors	r3, r2
 80049d8:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80049da:	2308      	movs	r3, #8
 80049dc:	733b      	strb	r3, [r7, #12]
 80049de:	e012      	b.n	8004a06 <sensirion_common_generate_crc+0x50>
            if (crc & 0x80)
 80049e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	da08      	bge.n	80049fa <sensirion_common_generate_crc+0x44>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80049e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	b25b      	sxtb	r3, r3
 80049f0:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 80049f4:	b25b      	sxtb	r3, r3
 80049f6:	737b      	strb	r3, [r7, #13]
 80049f8:	e002      	b.n	8004a00 <sensirion_common_generate_crc+0x4a>
            else
                crc = (crc << 1);
 80049fa:	7b7b      	ldrb	r3, [r7, #13]
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8004a00:	7b3b      	ldrb	r3, [r7, #12]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	733b      	strb	r3, [r7, #12]
 8004a06:	7b3b      	ldrb	r3, [r7, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e9      	bne.n	80049e0 <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8004a0c:	89fb      	ldrh	r3, [r7, #14]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	81fb      	strh	r3, [r7, #14]
 8004a12:	89fa      	ldrh	r2, [r7, #14]
 8004a14:	887b      	ldrh	r3, [r7, #2]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d3d8      	bcc.n	80049cc <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 8004a1a:	7b7b      	ldrb	r3, [r7, #13]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <sensirion_common_check_crc>:

s8 sensirion_common_check_crc(u8 *data, u16 count, u8 checksum)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
 8004a34:	4613      	mov	r3, r2
 8004a36:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8004a38:	887b      	ldrh	r3, [r7, #2]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff ffba 	bl	80049b6 <sensirion_common_generate_crc>
 8004a42:	4603      	mov	r3, r0
 8004a44:	461a      	mov	r2, r3
 8004a46:	787b      	ldrb	r3, [r7, #1]
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d002      	beq.n	8004a52 <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8004a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a50:	e000      	b.n	8004a54 <sensirion_common_check_crc+0x2c>
    return STATUS_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <sensirion_i2c_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	4603      	mov	r3, r0
 8004a64:	6039      	str	r1, [r7, #0]
 8004a66:	71fb      	strb	r3, [r7, #7]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Receive(&hi2c1, address<<1, data, count, 100);
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	b299      	uxth	r1, r3
 8004a74:	88bb      	ldrh	r3, [r7, #4]
 8004a76:	2264      	movs	r2, #100	@ 0x64
 8004a78:	9200      	str	r2, [sp, #0]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	4804      	ldr	r0, [pc, #16]	@ (8004a90 <sensirion_i2c_read+0x34>)
 8004a7e:	f002 fb95 	bl	80071ac <HAL_I2C_Master_Receive>
 8004a82:	4603      	mov	r3, r0
 8004a84:	b25b      	sxtb	r3, r3
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000474 	.word	0x20000474

08004a94 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, uint8_t* data, uint16_t count)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	6039      	str	r1, [r7, #0]
 8004a9e:	71fb      	strb	r3, [r7, #7]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Transmit(&hi2c1, address<<1, data, count, 100);  // data is the start pointer of our array
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	b299      	uxth	r1, r3
 8004aac:	88bb      	ldrh	r3, [r7, #4]
 8004aae:	2264      	movs	r2, #100	@ 0x64
 8004ab0:	9200      	str	r2, [sp, #0]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	4804      	ldr	r0, [pc, #16]	@ (8004ac8 <sensirion_i2c_write+0x34>)
 8004ab6:	f002 fa7b 	bl	8006fb0 <HAL_I2C_Master_Transmit>
 8004aba:	4603      	mov	r3, r0
 8004abc:	b25b      	sxtb	r3, r3
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000474 	.word	0x20000474

08004acc <sensirion_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
	if(useconds >= 1000)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ada:	d308      	bcc.n	8004aee <sensirion_sleep_usec+0x22>
	{
		HAL_Delay(useconds / (uint32_t)1000);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a07      	ldr	r2, [pc, #28]	@ (8004afc <sensirion_sleep_usec+0x30>)
 8004ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae4:	099b      	lsrs	r3, r3, #6
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 ff68 	bl	80059bc <HAL_Delay>
	}
	else
	{
		HAL_Delay(1);
	}
}
 8004aec:	e002      	b.n	8004af4 <sensirion_sleep_usec+0x28>
		HAL_Delay(1);
 8004aee:	2001      	movs	r0, #1
 8004af0:	f000 ff64 	bl	80059bc <HAL_Delay>
}
 8004af4:	bf00      	nop
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	10624dd3 	.word	0x10624dd3

08004b00 <sgp_i2c_read_words>:
 *              The buffer may also have been modified on STATUS_FAIL return.
 * @data_words: Number of data words to read (without CRC bytes)
 *
 * Return:      STATUS_OK on success, STATUS_FAIL otherwise
 */
static s16 sgp_i2c_read_words(u16 *data, u16 data_words) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8004b0c:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8004b10:	6018      	str	r0, [r3, #0]
 8004b12:	460a      	mov	r2, r1
 8004b14:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8004b18:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 8004b1c:	801a      	strh	r2, [r3, #0]
    s16 ret;
    u16 i, j;
    u16 size = data_words * (SGP_WORD_LEN + CRC8_LEN);
 8004b1e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8004b22:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	0052      	lsls	r2, r2, #1
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f8a7 3412 	strh.w	r3, [r7, #1042]	@ 0x412
    u16 word_buf[SGP_MAX_PROFILE_RET_LEN / sizeof(u16)];
    u8 * const buf8 = (u8 *)word_buf;
 8004b32:	f107 0308 	add.w	r3, r7, #8
 8004b36:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c

    ret = sensirion_i2c_read(SGP_I2C_ADDRESS, buf8, size);
 8004b3a:	2058      	movs	r0, #88	@ 0x58
 8004b3c:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	@ 0x412
 8004b40:	461a      	mov	r2, r3
 8004b42:	f8d7 140c 	ldr.w	r1, [r7, #1036]	@ 0x40c
 8004b46:	f7ff ff89 	bl	8004a5c <sensirion_i2c_read>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f8a7 340a 	strh.w	r3, [r7, #1034]	@ 0x40a

    if (ret != 0)
 8004b50:	f9b7 340a 	ldrsh.w	r3, [r7, #1034]	@ 0x40a
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <sgp_i2c_read_words+0x5e>
        return STATUS_FAIL;
 8004b58:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5c:	e04e      	b.n	8004bfc <sgp_i2c_read_words+0xfc>

    /* check the CRC for each word */
    for (i = 0, j = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f8a7 3416 	strh.w	r3, [r7, #1046]	@ 0x416
 8004b64:	2300      	movs	r3, #0
 8004b66:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
 8004b6a:	e040      	b.n	8004bee <sgp_i2c_read_words+0xee>
         i < size;
         i += SGP_WORD_LEN + CRC8_LEN, j += SGP_WORD_LEN) {

        if (sensirion_common_check_crc(&buf8[i], SGP_WORD_LEN,
 8004b6c:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 8004b70:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8004b74:	18d0      	adds	r0, r2, r3
                                       buf8[i + SGP_WORD_LEN]) == STATUS_FAIL) {
 8004b76:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 8004b7a:	3302      	adds	r3, #2
 8004b7c:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8004b80:	4413      	add	r3, r2
        if (sensirion_common_check_crc(&buf8[i], SGP_WORD_LEN,
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	2102      	movs	r1, #2
 8004b88:	f7ff ff4e 	bl	8004a28 <sensirion_common_check_crc>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d102      	bne.n	8004b9a <sgp_i2c_read_words+0x9a>
            return STATUS_FAIL;
 8004b94:	f04f 33ff 	mov.w	r3, #4294967295
 8004b98:	e030      	b.n	8004bfc <sgp_i2c_read_words+0xfc>
        }
        ((u8 *)data)[j]     = buf8[i];
 8004b9a:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 8004b9e:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8004ba2:	441a      	add	r2, r3
 8004ba4:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 8004ba8:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 8004bac:	f2a1 4114 	subw	r1, r1, #1044	@ 0x414
 8004bb0:	6809      	ldr	r1, [r1, #0]
 8004bb2:	440b      	add	r3, r1
 8004bb4:	7812      	ldrb	r2, [r2, #0]
 8004bb6:	701a      	strb	r2, [r3, #0]
        ((u8 *)data)[j + 1] = buf8[i + 1];
 8004bb8:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8004bc2:	441a      	add	r2, r3
 8004bc4:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 8004bce:	f2a1 4114 	subw	r1, r1, #1044	@ 0x414
 8004bd2:	6809      	ldr	r1, [r1, #0]
 8004bd4:	440b      	add	r3, r1
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	701a      	strb	r2, [r3, #0]
         i += SGP_WORD_LEN + CRC8_LEN, j += SGP_WORD_LEN) {
 8004bda:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 8004bde:	3303      	adds	r3, #3
 8004be0:	f8a7 3416 	strh.w	r3, [r7, #1046]	@ 0x416
 8004be4:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 8004be8:	3302      	adds	r3, #2
 8004bea:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
         i < size;
 8004bee:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	@ 0x416
 8004bf2:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	@ 0x412
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d3b8      	bcc.n	8004b6c <sgp_i2c_read_words+0x6c>
    }

    return STATUS_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <sgp_i2c_write>:
 * sgp_i2c_write() - writes to the SGP sensor
 * @command:     Command
 *
 * Return:      STATUS_OK on success.
 */
static s16 sgp_i2c_write(const sgp_command* command) {
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
    s8 ret;

    ret = sensirion_i2c_write(SGP_I2C_ADDRESS, (uint8_t*)command->buf, SGP_COMMAND_LEN);
 8004c0e:	2058      	movs	r0, #88	@ 0x58
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	4619      	mov	r1, r3
 8004c16:	f7ff ff3d 	bl	8004a94 <sensirion_i2c_write>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	73fb      	strb	r3, [r7, #15]
    if (ret != 0)
 8004c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <sgp_i2c_write+0x26>
        return STATUS_FAIL;
 8004c26:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2a:	e000      	b.n	8004c2e <sgp_i2c_write+0x28>

    return STATUS_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <unpack_signals>:

/**
 * unpack_signals() - unpack signals which are stored in client_data.word_buf
 * @profile:    The profile
 */
static void unpack_signals(const struct sgp_profile *profile) {
 8004c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c3c:	b089      	sub	sp, #36	@ 0x24
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	466b      	mov	r3, sp
 8004c44:	461e      	mov	r6, r3
    s16 i, j;
    const struct sgp_signal *signal;
    u16 data_words = profile->number_of_signals;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	891b      	ldrh	r3, [r3, #8]
 8004c4a:	837b      	strh	r3, [r7, #26]
    u16 word_buf[data_words];
 8004c4c:	8b79      	ldrh	r1, [r7, #26]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	3b01      	subs	r3, #1
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	b28b      	uxth	r3, r1
 8004c56:	2200      	movs	r2, #0
 8004c58:	4698      	mov	r8, r3
 8004c5a:	4691      	mov	r9, r2
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8004c68:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8004c6c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8004c70:	b28b      	uxth	r3, r1
 8004c72:	2200      	movs	r2, #0
 8004c74:	461c      	mov	r4, r3
 8004c76:	4615      	mov	r5, r2
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	012b      	lsls	r3, r5, #4
 8004c82:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004c86:	0122      	lsls	r2, r4, #4
 8004c88:	460b      	mov	r3, r1
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	3307      	adds	r3, #7
 8004c8e:	08db      	lsrs	r3, r3, #3
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	ebad 0d03 	sub.w	sp, sp, r3
 8004c96:	466b      	mov	r3, sp
 8004c98:	3301      	adds	r3, #1
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	613b      	str	r3, [r7, #16]
    u16 value;

    /* copy buffer */
    for (i = 0; i < data_words; i++)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	83fb      	strh	r3, [r7, #30]
 8004ca4:	e011      	b.n	8004cca <unpack_signals+0x92>
        word_buf[i] = client_data.word_buf[i];
 8004ca6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004caa:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004cae:	4936      	ldr	r1, [pc, #216]	@ (8004d88 <unpack_signals+0x150>)
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	440b      	add	r3, r1
 8004cb6:	8899      	ldrh	r1, [r3, #4]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < data_words; i++)
 8004cbe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	83fb      	strh	r3, [r7, #30]
 8004cca:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004cce:	8b7b      	ldrh	r3, [r7, #26]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	dbe8      	blt.n	8004ca6 <unpack_signals+0x6e>

    /* signals are in reverse order in the data buffer */
    for (i = profile->number_of_signals - 1, j = 0; i >= 0; i -= 1, j += 1) {
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	891b      	ldrh	r3, [r3, #8]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	83fb      	strh	r3, [r7, #30]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	83bb      	strh	r3, [r7, #28]
 8004ce2:	e046      	b.n	8004d72 <unpack_signals+0x13a>
        signal = profile->signals[profile->number_of_signals - i - 1];
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	891b      	ldrh	r3, [r3, #8]
 8004cec:	4619      	mov	r1, r3
 8004cee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004cf2:	1acb      	subs	r3, r1, r3
 8004cf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60fb      	str	r3, [r7, #12]
        value = be16_to_cpu(word_buf[i]);
 8004d02:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004d0c:	b21b      	sxth	r3, r3
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	b21a      	sxth	r2, r3
 8004d12:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8004d1c:	0a1b      	lsrs	r3, r3, #8
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	b21b      	sxth	r3, r3
 8004d22:	4313      	orrs	r3, r2
 8004d24:	b21b      	sxth	r3, r3
 8004d26:	817b      	strh	r3, [r7, #10]

        if (signal->conversion_function != NULL)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d010      	beq.n	8004d52 <unpack_signals+0x11a>
            client_data.word_buf[j] = signal->conversion_function(value);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8004d38:	897a      	ldrh	r2, [r7, #10]
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4798      	blx	r3
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4619      	mov	r1, r3
 8004d42:	4a11      	ldr	r2, [pc, #68]	@ (8004d88 <unpack_signals+0x150>)
 8004d44:	f104 030c 	add.w	r3, r4, #12
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	4413      	add	r3, r2
 8004d4c:	460a      	mov	r2, r1
 8004d4e:	809a      	strh	r2, [r3, #4]
 8004d50:	e007      	b.n	8004d62 <unpack_signals+0x12a>
        else
            client_data.word_buf[j] = value;
 8004d52:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004d56:	4a0c      	ldr	r2, [pc, #48]	@ (8004d88 <unpack_signals+0x150>)
 8004d58:	330c      	adds	r3, #12
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	4413      	add	r3, r2
 8004d5e:	897a      	ldrh	r2, [r7, #10]
 8004d60:	809a      	strh	r2, [r3, #4]
    for (i = profile->number_of_signals - 1, j = 0; i >= 0; i -= 1, j += 1) {
 8004d62:	8bfb      	ldrh	r3, [r7, #30]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	83fb      	strh	r3, [r7, #30]
 8004d6a:	8bbb      	ldrh	r3, [r7, #28]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	83bb      	strh	r3, [r7, #28]
 8004d72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	dab4      	bge.n	8004ce4 <unpack_signals+0xac>
 8004d7a:	46b5      	mov	sp, r6
    }
}
 8004d7c:	bf00      	nop
 8004d7e:	3724      	adds	r7, #36	@ 0x24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d86:	bf00      	nop
 8004d88:	20002720 	.word	0x20002720

08004d8c <read_measurement>:
/**
 * read_measurement() - reads the result of a profile measurement
 *
 * Return:  Length of the written data to the buffer. Negative if it fails.
 */
static s16 read_measurement(const struct sgp_profile *profile) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]

    s16 ret;

    switch (client_data.current_state) {
 8004d94:	4b10      	ldr	r3, [pc, #64]	@ (8004dd8 <read_measurement+0x4c>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d116      	bne.n	8004dca <read_measurement+0x3e>

        case MEASURING_PROFILE_STATE:
            ret = sgp_i2c_read_words(client_data.word_buf,
                                     profile->number_of_signals);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	891b      	ldrh	r3, [r3, #8]
            ret = sgp_i2c_read_words(client_data.word_buf,
 8004da0:	4619      	mov	r1, r3
 8004da2:	480e      	ldr	r0, [pc, #56]	@ (8004ddc <read_measurement+0x50>)
 8004da4:	f7ff feac 	bl	8004b00 <sgp_i2c_read_words>
 8004da8:	4603      	mov	r3, r0
 8004daa:	81fb      	strh	r3, [r7, #14]

            if (ret)
 8004dac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <read_measurement+0x2e>
                /* Measurement in progress */
                return STATUS_FAIL;
 8004db4:	f04f 33ff 	mov.w	r3, #4294967295
 8004db8:	e009      	b.n	8004dce <read_measurement+0x42>

            unpack_signals(profile);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff ff3c 	bl	8004c38 <unpack_signals>
            client_data.current_state = WAIT_STATE;
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <read_measurement+0x4c>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]

            return STATUS_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e001      	b.n	8004dce <read_measurement+0x42>

        default:
            /* No command issued */
            return STATUS_FAIL;
 8004dca:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20002720 	.word	0x20002720
 8004ddc:	2000273c 	.word	0x2000273c

08004de0 <sgp_i2c_read_words_from_cmd>:
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_i2c_read_words_from_cmd(const sgp_command *cmd,
                                       u32 duration_us,
                                       u16 *data_words,
                                       u16 num_words) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	807b      	strh	r3, [r7, #2]

    if (sgp_i2c_write(cmd) == STATUS_FAIL)
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7ff ff09 	bl	8004c06 <sgp_i2c_write>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfa:	d102      	bne.n	8004e02 <sgp_i2c_read_words_from_cmd+0x22>
        return STATUS_FAIL;
 8004dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004e00:	e008      	b.n	8004e14 <sgp_i2c_read_words_from_cmd+0x34>

    /* the chip needs some time to write the data into the RAM */
    sensirion_sleep_usec(duration_us);
 8004e02:	68b8      	ldr	r0, [r7, #8]
 8004e04:	f7ff fe62 	bl	8004acc <sensirion_sleep_usec>
    return sgp_i2c_read_words(data_words, num_words);
 8004e08:	887b      	ldrh	r3, [r7, #2]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff fe77 	bl	8004b00 <sgp_i2c_read_words>
 8004e12:	4603      	mov	r3, r0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <sgp_run_profile>:
 * sgp_run_profile() - run a profile and read write its return to client_data
 * @profile     A pointer to the profile
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_run_profile(const struct sgp_profile *profile) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
    u32 duration_us = profile->duration_us + 5;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3305      	adds	r3, #5
 8004e2a:	60fb      	str	r3, [r7, #12]

    if (sgp_i2c_write(&profile->command) == STATUS_FAIL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	330c      	adds	r3, #12
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff fee8 	bl	8004c06 <sgp_i2c_write>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3c:	d102      	bne.n	8004e44 <sgp_run_profile+0x28>
        return STATUS_FAIL;
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e42:	e00f      	b.n	8004e64 <sgp_run_profile+0x48>

    sensirion_sleep_usec(duration_us);
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff fe41 	bl	8004acc <sensirion_sleep_usec>

    if (profile->number_of_signals > 0) {
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	891b      	ldrh	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <sgp_run_profile+0x46>
        client_data.current_state = MEASURING_PROFILE_STATE;
 8004e52:	4b06      	ldr	r3, [pc, #24]	@ (8004e6c <sgp_run_profile+0x50>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
        return read_measurement(profile);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff ff97 	bl	8004d8c <read_measurement>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	e000      	b.n	8004e64 <sgp_run_profile+0x48>
    }

    return STATUS_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20002720 	.word	0x20002720

08004e70 <sgp_get_profile_by_number>:
 * sgp_get_profile_by_number() - get a profile by its identifier number
 * @number      The number that identifies the profile
 *
 * Return:      A pointer to the profile or NULL if the profile does not exists
 */
static const struct sgp_profile *sgp_get_profile_by_number(u16 number) {
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	80fb      	strh	r3, [r7, #6]
    u8 i;
    const struct sgp_profile *profile = NULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < client_data.otp_features->number_of_profiles; i++) {
 8004e7e:	2300      	movs	r3, #0
 8004e80:	73fb      	strb	r3, [r7, #15]
 8004e82:	e010      	b.n	8004ea6 <sgp_get_profile_by_number+0x36>
        profile = client_data.otp_features->profiles[i];
 8004e84:	4b14      	ldr	r3, [pc, #80]	@ (8004ed8 <sgp_get_profile_by_number+0x68>)
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60bb      	str	r3, [r7, #8]
        if (number == profile->number)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	7a9b      	ldrb	r3, [r3, #10]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	88fb      	ldrh	r3, [r7, #6]
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00a      	beq.n	8004eb6 <sgp_get_profile_by_number+0x46>
    for (i = 0; i < client_data.otp_features->number_of_profiles; i++) {
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	73fb      	strb	r3, [r7, #15]
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed8 <sgp_get_profile_by_number+0x68>)
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	889b      	ldrh	r3, [r3, #4]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d3e7      	bcc.n	8004e84 <sgp_get_profile_by_number+0x14>
 8004eb4:	e000      	b.n	8004eb8 <sgp_get_profile_by_number+0x48>
            break;
 8004eb6:	bf00      	nop
    }

    if (i == client_data.otp_features->number_of_profiles) {
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	4b06      	ldr	r3, [pc, #24]	@ (8004ed8 <sgp_get_profile_by_number+0x68>)
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	889b      	ldrh	r3, [r3, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d101      	bne.n	8004eca <sgp_get_profile_by_number+0x5a>
        return NULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <sgp_get_profile_by_number+0x5c>
    }

    return profile;
 8004eca:	68bb      	ldr	r3, [r7, #8]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	20002720 	.word	0x20002720

08004edc <sgp_run_profile_by_number>:
 * sgp_run_profile_by_number() - run a profile by its identifier number
 * @number:     The number that identifies the profile
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_run_profile_by_number(u16 number) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	80fb      	strh	r3, [r7, #6]
    const struct sgp_profile *profile;

    profile = sgp_get_profile_by_number(number);
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff ffc1 	bl	8004e70 <sgp_get_profile_by_number>
 8004eee:	60f8      	str	r0, [r7, #12]
    if (profile == NULL)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <sgp_run_profile_by_number+0x20>
        return STATUS_FAIL;
 8004ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8004efa:	e00a      	b.n	8004f12 <sgp_run_profile_by_number+0x36>

    if (sgp_run_profile(profile) == STATUS_FAIL)
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff ff8d 	bl	8004e1c <sgp_run_profile>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d102      	bne.n	8004f10 <sgp_run_profile_by_number+0x34>
        return STATUS_FAIL;
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0e:	e000      	b.n	8004f12 <sgp_run_profile_by_number+0x36>

    return STATUS_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <sgp_detect_featureset_version>:
 *
 * @featureset:  Pointer to the featureset bits
 *
 * Return:    STATUS_OK on success
 */
static s16 sgp_detect_featureset_version(u16 *featureset) {
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
    s16 i, j;
    s16 ret = STATUS_FAIL;
 8004f24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f28:	827b      	strh	r3, [r7, #18]
    u16 feature_set_version = be16_to_cpu(*featureset);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b21b      	sxth	r3, r3
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	b21a      	sxth	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	b21b      	sxth	r3, r3
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	b21b      	sxth	r3, r3
 8004f42:	823b      	strh	r3, [r7, #16]
    const struct sgp_otp_featureset *sgp_featureset;

    client_data.info.feature_set_version = feature_set_version;
 8004f44:	4a35      	ldr	r2, [pc, #212]	@ (800501c <sgp_detect_featureset_version+0x100>)
 8004f46:	8a3b      	ldrh	r3, [r7, #16]
 8004f48:	8213      	strh	r3, [r2, #16]
    client_data.otp_features = &sgp_features_unknown;
 8004f4a:	4b34      	ldr	r3, [pc, #208]	@ (800501c <sgp_detect_featureset_version+0x100>)
 8004f4c:	4a34      	ldr	r2, [pc, #208]	@ (8005020 <sgp_detect_featureset_version+0x104>)
 8004f4e:	619a      	str	r2, [r3, #24]
    for (i = 0; i < sgp_supported_featuresets.number_of_supported_featuresets; ++i) {
 8004f50:	2300      	movs	r3, #0
 8004f52:	82fb      	strh	r3, [r7, #22]
 8004f54:	e054      	b.n	8005000 <sgp_detect_featureset_version+0xe4>
        sgp_featureset = sgp_supported_featuresets.featuresets[i];
 8004f56:	4b33      	ldr	r3, [pc, #204]	@ (8005024 <sgp_detect_featureset_version+0x108>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < sgp_featureset->number_of_supported_featureset_versions; ++j) {
 8004f66:	2300      	movs	r3, #0
 8004f68:	82bb      	strh	r3, [r7, #20]
 8004f6a:	e03f      	b.n	8004fec <sgp_detect_featureset_version+0xd0>
            if (SGP_FS_COMPAT(feature_set_version,
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	4413      	add	r3, r2
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	dd0f      	ble.n	8004fa2 <sgp_detect_featureset_version+0x86>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	4413      	add	r3, r2
 8004f8e:	881a      	ldrh	r2, [r3, #0]
 8004f90:	8a3b      	ldrh	r3, [r7, #16]
 8004f92:	4053      	eors	r3, r2
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	f24f 13e0 	movw	r3, #61920	@ 0xf1e0
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01a      	beq.n	8004fd8 <sgp_detect_featureset_version+0xbc>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	4413      	add	r3, r2
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d115      	bne.n	8004fe4 <sgp_detect_featureset_version+0xc8>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881a      	ldrh	r2, [r3, #0]
 8004fc6:	8a3b      	ldrh	r3, [r7, #16]
 8004fc8:	4053      	eors	r3, r2
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f24f 13ff 	movw	r3, #61951	@ 0xf1ff
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <sgp_detect_featureset_version+0xc8>
                              sgp_featureset->supported_featureset_versions[j])) {
                client_data.otp_features = sgp_featureset;
 8004fd8:	4a10      	ldr	r2, [pc, #64]	@ (800501c <sgp_detect_featureset_version+0x100>)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6193      	str	r3, [r2, #24]
                ret = STATUS_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	827b      	strh	r3, [r7, #18]
                break;
 8004fe2:	e009      	b.n	8004ff8 <sgp_detect_featureset_version+0xdc>
        for (j = 0; j < sgp_featureset->number_of_supported_featureset_versions; ++j) {
 8004fe4:	8abb      	ldrh	r3, [r7, #20]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	82bb      	strh	r3, [r7, #20]
 8004fec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	8992      	ldrh	r2, [r2, #12]
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	dbb9      	blt.n	8004f6c <sgp_detect_featureset_version+0x50>
    for (i = 0; i < sgp_supported_featuresets.number_of_supported_featuresets; ++i) {
 8004ff8:	8afb      	ldrh	r3, [r7, #22]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	82fb      	strh	r3, [r7, #22]
 8005000:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005004:	4a07      	ldr	r2, [pc, #28]	@ (8005024 <sgp_detect_featureset_version+0x108>)
 8005006:	8892      	ldrh	r2, [r2, #4]
 8005008:	4293      	cmp	r3, r2
 800500a:	dba4      	blt.n	8004f56 <sgp_detect_featureset_version+0x3a>
            }
        }
    }
    return ret;
 800500c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 8005010:	4618      	mov	r0, r3
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	20002720 	.word	0x20002720
 8005020:	08019ce8 	.word	0x08019ce8
 8005024:	08019f1c 	.word	0x08019f1c

08005028 <sgp_measure_iaq_blocking_read>:
 *
 * The profile is executed synchronously.
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
s16 sgp_measure_iaq_blocking_read(u16 *tvoc_ppb, u16 *co2_eq_ppm) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
    if (sgp_run_profile_by_number(PROFILE_NUMBER_IAQ_MEASURE) == STATUS_FAIL)
 8005032:	2001      	movs	r0, #1
 8005034:	f7ff ff52 	bl	8004edc <sgp_run_profile_by_number>
 8005038:	4603      	mov	r3, r0
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503e:	d102      	bne.n	8005046 <sgp_measure_iaq_blocking_read+0x1e>
        return STATUS_FAIL;
 8005040:	f04f 33ff 	mov.w	r3, #4294967295
 8005044:	e008      	b.n	8005058 <sgp_measure_iaq_blocking_read+0x30>

    *tvoc_ppb = client_data.word_buf[0];
 8005046:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <sgp_measure_iaq_blocking_read+0x38>)
 8005048:	8b9a      	ldrh	r2, [r3, #28]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = client_data.word_buf[1];
 800504e:	4b04      	ldr	r3, [pc, #16]	@ (8005060 <sgp_measure_iaq_blocking_read+0x38>)
 8005050:	8bda      	ldrh	r2, [r3, #30]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	801a      	strh	r2, [r3, #0]

    return STATUS_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20002720 	.word	0x20002720

08005064 <sgp_measure_signals_blocking_read>:
 *                    value by 512 to get the real signal.
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
s16 sgp_measure_signals_blocking_read(u16 *scaled_ethanol_signal,
                                      u16 *scaled_h2_signal) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]

    if (sgp_run_profile_by_number(PROFILE_NUMBER_MEASURE_SIGNALS) == STATUS_FAIL)
 800506e:	4b0c      	ldr	r3, [pc, #48]	@ (80050a0 <sgp_measure_signals_blocking_read+0x3c>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff ff32 	bl	8004edc <sgp_run_profile_by_number>
 8005078:	4603      	mov	r3, r0
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d102      	bne.n	8005086 <sgp_measure_signals_blocking_read+0x22>
        return STATUS_FAIL;
 8005080:	f04f 33ff 	mov.w	r3, #4294967295
 8005084:	e008      	b.n	8005098 <sgp_measure_signals_blocking_read+0x34>

    *scaled_ethanol_signal = client_data.word_buf[0];
 8005086:	4b07      	ldr	r3, [pc, #28]	@ (80050a4 <sgp_measure_signals_blocking_read+0x40>)
 8005088:	8b9a      	ldrh	r2, [r3, #28]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	801a      	strh	r2, [r3, #0]
    *scaled_h2_signal = client_data.word_buf[1];
 800508e:	4b05      	ldr	r3, [pc, #20]	@ (80050a4 <sgp_measure_signals_blocking_read+0x40>)
 8005090:	8bda      	ldrh	r2, [r3, #30]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	801a      	strh	r2, [r3, #0]

    return STATUS_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	08019cf8 	.word	0x08019cf8
 80050a4:	20002720 	.word	0x20002720

080050a8 <sgp_iaq_init>:
/**
 * sgp_iaq_init() - reset the SGP's internal IAQ baselines
 *
 * Return:  STATUS_OK on success.
 */
s16 sgp_iaq_init() {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
    return sgp_run_profile_by_number(PROFILE_NUMBER_IAQ_INIT);
 80050ac:	2000      	movs	r0, #0
 80050ae:	f7ff ff15 	bl	8004edc <sgp_run_profile_by_number>
 80050b2:	4603      	mov	r3, r0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <sgp_probe>:
 *
 * This call aleady initializes the IAQ baselines (sgp_iaq_init())
 *
 * Return:  STATUS_OK on success.
 */
s16 sgp_probe() {
 80050b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
    s16 err;
    const u64 *serial_buf = (const u64 *)client_data.word_buf;
 80050c0:	4b5d      	ldr	r3, [pc, #372]	@ (8005238 <sgp_probe+0x180>)
 80050c2:	607b      	str	r3, [r7, #4]

    client_data.current_state = WAIT_STATE;
 80050c4:	4b5d      	ldr	r3, [pc, #372]	@ (800523c <sgp_probe+0x184>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	701a      	strb	r2, [r3, #0]

    /* try to read the serial ID */
    err = sgp_i2c_read_words_from_cmd(&sgp_cmd_get_serial_id,
 80050ca:	2302      	movs	r3, #2
 80050cc:	4a5a      	ldr	r2, [pc, #360]	@ (8005238 <sgp_probe+0x180>)
 80050ce:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80050d2:	485b      	ldr	r0, [pc, #364]	@ (8005240 <sgp_probe+0x188>)
 80050d4:	f7ff fe84 	bl	8004de0 <sgp_i2c_read_words_from_cmd>
 80050d8:	4603      	mov	r3, r0
 80050da:	807b      	strh	r3, [r7, #2]
                                      SGP_CMD_GET_SERIAL_ID_DURATION_US,
                                      client_data.word_buf,
                                      SGP_CMD_GET_SERIAL_ID_WORDS);
    if (err == STATUS_FAIL)
 80050dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d102      	bne.n	80050ec <sgp_probe+0x34>
        return err;
 80050e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050ea:	e09f      	b.n	800522c <sgp_probe+0x174>

    client_data.info.serial_id = be64_to_cpu(*serial_buf) >> 16;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	b293      	uxth	r3, r2
 80050f4:	0219      	lsls	r1, r3, #8
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	b293      	uxth	r3, r2
 80050fe:	0a1b      	lsrs	r3, r3, #8
 8005100:	b29b      	uxth	r3, r3
 8005102:	430b      	orrs	r3, r1
 8005104:	041e      	lsls	r6, r3, #16
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	e9d3 0100 	ldrd	r0, r1, [r3]
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	0c02      	lsrs	r2, r0, #16
 8005116:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800511a:	0c0b      	lsrs	r3, r1, #16
 800511c:	b293      	uxth	r3, r2
 800511e:	ea4f 2c03 	mov.w	ip, r3, lsl #8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	0c02      	lsrs	r2, r0, #16
 8005132:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005136:	0c0b      	lsrs	r3, r1, #16
 8005138:	b293      	uxth	r3, r2
 800513a:	0a1b      	lsrs	r3, r3, #8
 800513c:	b29b      	uxth	r3, r3
 800513e:	ea4c 0303 	orr.w	r3, ip, r3
 8005142:	b29b      	uxth	r3, r3
 8005144:	4333      	orrs	r3, r6
 8005146:	2200      	movs	r2, #0
 8005148:	469a      	mov	sl, r3
 800514a:	4693      	mov	fp, r2
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	4653      	mov	r3, sl
 8005156:	2200      	movs	r2, #0
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	e9d1 ab00 	ldrd	sl, fp, [r1]
 800515e:	f04f 0000 	mov.w	r0, #0
 8005162:	f04f 0100 	mov.w	r1, #0
 8005166:	4658      	mov	r0, fp
 8005168:	2100      	movs	r1, #0
 800516a:	b281      	uxth	r1, r0
 800516c:	020e      	lsls	r6, r1, #8
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8005174:	f04f 0000 	mov.w	r0, #0
 8005178:	f04f 0100 	mov.w	r1, #0
 800517c:	4658      	mov	r0, fp
 800517e:	2100      	movs	r1, #0
 8005180:	b281      	uxth	r1, r0
 8005182:	0a09      	lsrs	r1, r1, #8
 8005184:	b289      	uxth	r1, r1
 8005186:	4331      	orrs	r1, r6
 8005188:	040e      	lsls	r6, r1, #16
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8005190:	f04f 0000 	mov.w	r0, #0
 8005194:	f04f 0100 	mov.w	r1, #0
 8005198:	ea4f 401b 	mov.w	r0, fp, lsr #16
 800519c:	2100      	movs	r1, #0
 800519e:	b281      	uxth	r1, r0
 80051a0:	ea4f 2c01 	mov.w	ip, r1, lsl #8
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	e9d1 ab00 	ldrd	sl, fp, [r1]
 80051aa:	f04f 0000 	mov.w	r0, #0
 80051ae:	f04f 0100 	mov.w	r1, #0
 80051b2:	ea4f 401b 	mov.w	r0, fp, lsr #16
 80051b6:	2100      	movs	r1, #0
 80051b8:	b281      	uxth	r1, r0
 80051ba:	0a09      	lsrs	r1, r1, #8
 80051bc:	b289      	uxth	r1, r1
 80051be:	ea4c 0101 	orr.w	r1, ip, r1
 80051c2:	b289      	uxth	r1, r1
 80051c4:	4331      	orrs	r1, r6
 80051c6:	2000      	movs	r0, #0
 80051c8:	4688      	mov	r8, r1
 80051ca:	4681      	mov	r9, r0
 80051cc:	ea42 0408 	orr.w	r4, r2, r8
 80051d0:	ea43 0509 	orr.w	r5, r3, r9
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	0c22      	lsrs	r2, r4, #16
 80051de:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80051e2:	0c2b      	lsrs	r3, r5, #16
 80051e4:	4915      	ldr	r1, [pc, #84]	@ (800523c <sgp_probe+0x184>)
 80051e6:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* read the featureset version */
    err = sgp_i2c_read_words_from_cmd(&sgp_cmd_get_featureset,
 80051ea:	2301      	movs	r3, #1
 80051ec:	4a12      	ldr	r2, [pc, #72]	@ (8005238 <sgp_probe+0x180>)
 80051ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80051f2:	4814      	ldr	r0, [pc, #80]	@ (8005244 <sgp_probe+0x18c>)
 80051f4:	f7ff fdf4 	bl	8004de0 <sgp_i2c_read_words_from_cmd>
 80051f8:	4603      	mov	r3, r0
 80051fa:	807b      	strh	r3, [r7, #2]
                                      SGP_CMD_GET_FEATURESET_DURATION_US,
                                      client_data.word_buf,
                                      SGP_CMD_GET_FEATURESET_WORDS);
    if (err == STATUS_FAIL)
 80051fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d102      	bne.n	800520c <sgp_probe+0x154>
        return STATUS_FAIL;
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	e00f      	b.n	800522c <sgp_probe+0x174>

    err = sgp_detect_featureset_version(client_data.word_buf);
 800520c:	480a      	ldr	r0, [pc, #40]	@ (8005238 <sgp_probe+0x180>)
 800520e:	f7ff fe85 	bl	8004f1c <sgp_detect_featureset_version>
 8005212:	4603      	mov	r3, r0
 8005214:	807b      	strh	r3, [r7, #2]
    if (err == STATUS_FAIL)
 8005216:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d102      	bne.n	8005226 <sgp_probe+0x16e>
        return STATUS_FAIL;
 8005220:	f04f 33ff 	mov.w	r3, #4294967295
 8005224:	e002      	b.n	800522c <sgp_probe+0x174>

    return sgp_iaq_init();
 8005226:	f7ff ff3f 	bl	80050a8 <sgp_iaq_init>
 800522a:	4603      	mov	r3, r0
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005236:	bf00      	nop
 8005238:	2000273c 	.word	0x2000273c
 800523c:	20002720 	.word	0x20002720
 8005240:	08019ce0 	.word	0x08019ce0
 8005244:	08019ce4 	.word	0x08019ce4

08005248 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800524c:	2200      	movs	r2, #0
 800524e:	2102      	movs	r1, #2
 8005250:	4802      	ldr	r0, [pc, #8]	@ (800525c <ST7735_Select+0x14>)
 8005252:	f001 fd37 	bl	8006cc4 <HAL_GPIO_WritePin>
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40020000 	.word	0x40020000

08005260 <ST7735_Unselect>:

void ST7735_Unselect() {
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8005264:	2201      	movs	r2, #1
 8005266:	2102      	movs	r1, #2
 8005268:	4802      	ldr	r0, [pc, #8]	@ (8005274 <ST7735_Unselect+0x14>)
 800526a:	f001 fd2b 	bl	8006cc4 <HAL_GPIO_WritePin>
}
 800526e:	bf00      	nop
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40020000 	.word	0x40020000

08005278 <ST7735_Reset>:

static void ST7735_Reset() {
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800527c:	2200      	movs	r2, #0
 800527e:	2108      	movs	r1, #8
 8005280:	4806      	ldr	r0, [pc, #24]	@ (800529c <ST7735_Reset+0x24>)
 8005282:	f001 fd1f 	bl	8006cc4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8005286:	2005      	movs	r0, #5
 8005288:	f000 fb98 	bl	80059bc <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800528c:	2201      	movs	r2, #1
 800528e:	2108      	movs	r1, #8
 8005290:	4802      	ldr	r0, [pc, #8]	@ (800529c <ST7735_Reset+0x24>)
 8005292:	f001 fd17 	bl	8006cc4 <HAL_GPIO_WritePin>
}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40020000 	.word	0x40020000

080052a0 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80052aa:	2200      	movs	r2, #0
 80052ac:	2104      	movs	r1, #4
 80052ae:	4807      	ldr	r0, [pc, #28]	@ (80052cc <ST7735_WriteCommand+0x2c>)
 80052b0:	f001 fd08 	bl	8006cc4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80052b4:	1df9      	adds	r1, r7, #7
 80052b6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ba:	2201      	movs	r2, #1
 80052bc:	4804      	ldr	r0, [pc, #16]	@ (80052d0 <ST7735_WriteCommand+0x30>)
 80052be:	f005 fa24 	bl	800a70a <HAL_SPI_Transmit>
}
 80052c2:	bf00      	nop
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40020000 	.word	0x40020000
 80052d0:	20002570 	.word	0x20002570

080052d4 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80052de:	2201      	movs	r2, #1
 80052e0:	2104      	movs	r1, #4
 80052e2:	4807      	ldr	r0, [pc, #28]	@ (8005300 <ST7735_WriteData+0x2c>)
 80052e4:	f001 fcee 	bl	8006cc4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	f04f 33ff 	mov.w	r3, #4294967295
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4804      	ldr	r0, [pc, #16]	@ (8005304 <ST7735_WriteData+0x30>)
 80052f4:	f005 fa09 	bl	800a70a <HAL_SPI_Transmit>
}
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40020000 	.word	0x40020000
 8005304:	20002570 	.word	0x20002570

08005308 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800531a:	e034      	b.n	8005386 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	607a      	str	r2, [r7, #4]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8005326:	7afb      	ldrb	r3, [r7, #11]
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff ffb9 	bl	80052a0 <ST7735_WriteCommand>

        numArgs = *addr++;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8005338:	7abb      	ldrb	r3, [r7, #10]
 800533a:	b29b      	uxth	r3, r3
 800533c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005340:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8005342:	7abb      	ldrb	r3, [r7, #10]
 8005344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005348:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800534a:	7abb      	ldrb	r3, [r7, #10]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8005350:	7abb      	ldrb	r3, [r7, #10]
 8005352:	4619      	mov	r1, r3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff ffbd 	bl	80052d4 <ST7735_WriteData>
            addr += numArgs;
 800535a:	7abb      	ldrb	r3, [r7, #10]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	4413      	add	r3, r2
 8005360:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8005362:	89bb      	ldrh	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00e      	beq.n	8005386 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8005372:	89bb      	ldrh	r3, [r7, #12]
 8005374:	2bff      	cmp	r3, #255	@ 0xff
 8005376:	d102      	bne.n	800537e <ST7735_ExecuteCommandList+0x76>
 8005378:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800537c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800537e:	89bb      	ldrh	r3, [r7, #12]
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fb1b 	bl	80059bc <HAL_Delay>
    while(numCommands--) {
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	1e5a      	subs	r2, r3, #1
 800538a:	73fa      	strb	r2, [r7, #15]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1c5      	bne.n	800531c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800539a:	b590      	push	{r4, r7, lr}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	4604      	mov	r4, r0
 80053a2:	4608      	mov	r0, r1
 80053a4:	4611      	mov	r1, r2
 80053a6:	461a      	mov	r2, r3
 80053a8:	4623      	mov	r3, r4
 80053aa:	71fb      	strb	r3, [r7, #7]
 80053ac:	4603      	mov	r3, r0
 80053ae:	71bb      	strb	r3, [r7, #6]
 80053b0:	460b      	mov	r3, r1
 80053b2:	717b      	strb	r3, [r7, #5]
 80053b4:	4613      	mov	r3, r2
 80053b6:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80053b8:	202a      	movs	r0, #42	@ 0x2a
 80053ba:	f7ff ff71 	bl	80052a0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80053be:	2300      	movs	r3, #0
 80053c0:	733b      	strb	r3, [r7, #12]
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	737b      	strb	r3, [r7, #13]
 80053c6:	2300      	movs	r3, #0
 80053c8:	73bb      	strb	r3, [r7, #14]
 80053ca:	797b      	ldrb	r3, [r7, #5]
 80053cc:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80053ce:	f107 030c 	add.w	r3, r7, #12
 80053d2:	2104      	movs	r1, #4
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ff7d 	bl	80052d4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80053da:	202b      	movs	r0, #43	@ 0x2b
 80053dc:	f7ff ff60 	bl	80052a0 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80053e0:	79bb      	ldrb	r3, [r7, #6]
 80053e2:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80053e4:	793b      	ldrb	r3, [r7, #4]
 80053e6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80053e8:	f107 030c 	add.w	r3, r7, #12
 80053ec:	2104      	movs	r1, #4
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff ff70 	bl	80052d4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80053f4:	202c      	movs	r0, #44	@ 0x2c
 80053f6:	f7ff ff53 	bl	80052a0 <ST7735_WriteCommand>
}
 80053fa:	bf00      	nop
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd90      	pop	{r4, r7, pc}
	...

08005404 <ST7735_Init>:

void ST7735_Init() {
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
    ST7735_Select();
 8005408:	f7ff ff1e 	bl	8005248 <ST7735_Select>
    ST7735_Reset();
 800540c:	f7ff ff34 	bl	8005278 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8005410:	4806      	ldr	r0, [pc, #24]	@ (800542c <ST7735_Init+0x28>)
 8005412:	f7ff ff79 	bl	8005308 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8005416:	4806      	ldr	r0, [pc, #24]	@ (8005430 <ST7735_Init+0x2c>)
 8005418:	f7ff ff76 	bl	8005308 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800541c:	4805      	ldr	r0, [pc, #20]	@ (8005434 <ST7735_Init+0x30>)
 800541e:	f7ff ff73 	bl	8005308 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8005422:	f7ff ff1d 	bl	8005260 <ST7735_Unselect>
}
 8005426:	bf00      	nop
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	08019f24 	.word	0x08019f24
 8005430:	08019f60 	.word	0x08019f60
 8005434:	08019f70 	.word	0x08019f70

08005438 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8005438:	b082      	sub	sp, #8
 800543a:	b590      	push	{r4, r7, lr}
 800543c:	b089      	sub	sp, #36	@ 0x24
 800543e:	af00      	add	r7, sp, #0
 8005440:	637b      	str	r3, [r7, #52]	@ 0x34
 8005442:	4603      	mov	r3, r0
 8005444:	80fb      	strh	r3, [r7, #6]
 8005446:	460b      	mov	r3, r1
 8005448:	80bb      	strh	r3, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	b2d8      	uxtb	r0, r3
 8005452:	88bb      	ldrh	r3, [r7, #4]
 8005454:	b2d9      	uxtb	r1, r3
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	b2da      	uxtb	r2, r3
 800545a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800545e:	4413      	add	r3, r2
 8005460:	b2db      	uxtb	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b2dc      	uxtb	r4, r3
 8005466:	88bb      	ldrh	r3, [r7, #4]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800546e:	4413      	add	r3, r2
 8005470:	b2db      	uxtb	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b2db      	uxtb	r3, r3
 8005476:	4622      	mov	r2, r4
 8005478:	f7ff ff8f 	bl	800539a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	e043      	b.n	800550a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8005482:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	3b20      	subs	r3, #32
 8005488:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	4619      	mov	r1, r3
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	440b      	add	r3, r1
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	4413      	add	r3, r2
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800549e:	2300      	movs	r3, #0
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	e029      	b.n	80054f8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00e      	beq.n	80054d2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80054b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80054b6:	0a1b      	lsrs	r3, r3, #8
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	743b      	strb	r3, [r7, #16]
 80054be:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80054c4:	f107 0310 	add.w	r3, r7, #16
 80054c8:	2102      	movs	r1, #2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff ff02 	bl	80052d4 <ST7735_WriteData>
 80054d0:	e00f      	b.n	80054f2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80054d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80054d6:	0a1b      	lsrs	r3, r3, #8
 80054d8:	b29b      	uxth	r3, r3
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	733b      	strb	r3, [r7, #12]
 80054de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80054e6:	f107 030c 	add.w	r3, r7, #12
 80054ea:	2102      	movs	r1, #2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff fef1 	bl	80052d4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	3301      	adds	r3, #1
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80054fc:	461a      	mov	r2, r3
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	4293      	cmp	r3, r2
 8005502:	d3cf      	bcc.n	80054a4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	3301      	adds	r3, #1
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800550e:	461a      	mov	r2, r3
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4293      	cmp	r3, r2
 8005514:	d3b5      	bcc.n	8005482 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8005516:	bf00      	nop
 8005518:	bf00      	nop
 800551a:	3724      	adds	r7, #36	@ 0x24
 800551c:	46bd      	mov	sp, r7
 800551e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005522:	b002      	add	sp, #8
 8005524:	4770      	bx	lr

08005526 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8005526:	b082      	sub	sp, #8
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af04      	add	r7, sp, #16
 800552e:	603a      	str	r2, [r7, #0]
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	4603      	mov	r3, r0
 8005534:	80fb      	strh	r3, [r7, #6]
 8005536:	460b      	mov	r3, r1
 8005538:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800553a:	f7ff fe85 	bl	8005248 <ST7735_Select>

    while(*str) {
 800553e:	e02d      	b.n	800559c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8005540:	88fb      	ldrh	r3, [r7, #6]
 8005542:	7d3a      	ldrb	r2, [r7, #20]
 8005544:	4413      	add	r3, r2
 8005546:	2b7f      	cmp	r3, #127	@ 0x7f
 8005548:	dd13      	ble.n	8005572 <ST7735_WriteString+0x4c>
            x = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800554e:	7d7b      	ldrb	r3, [r7, #21]
 8005550:	461a      	mov	r2, r3
 8005552:	88bb      	ldrh	r3, [r7, #4]
 8005554:	4413      	add	r3, r2
 8005556:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8005558:	88bb      	ldrh	r3, [r7, #4]
 800555a:	7d7a      	ldrb	r2, [r7, #21]
 800555c:	4413      	add	r3, r2
 800555e:	2b9f      	cmp	r3, #159	@ 0x9f
 8005560:	dc21      	bgt.n	80055a6 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b20      	cmp	r3, #32
 8005568:	d103      	bne.n	8005572 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	603b      	str	r3, [r7, #0]
                continue;
 8005570:	e014      	b.n	800559c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781a      	ldrb	r2, [r3, #0]
 8005576:	88b9      	ldrh	r1, [r7, #4]
 8005578:	88f8      	ldrh	r0, [r7, #6]
 800557a:	8c3b      	ldrh	r3, [r7, #32]
 800557c:	9302      	str	r3, [sp, #8]
 800557e:	8bbb      	ldrh	r3, [r7, #28]
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f7ff ff56 	bl	8005438 <ST7735_WriteChar>
        x += font.width;
 800558c:	7d3b      	ldrb	r3, [r7, #20]
 800558e:	461a      	mov	r2, r3
 8005590:	88fb      	ldrh	r3, [r7, #6]
 8005592:	4413      	add	r3, r2
 8005594:	80fb      	strh	r3, [r7, #6]
        str++;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	3301      	adds	r3, #1
 800559a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1cd      	bne.n	8005540 <ST7735_WriteString+0x1a>
 80055a4:	e000      	b.n	80055a8 <ST7735_WriteString+0x82>
                break;
 80055a6:	bf00      	nop
    }

    ST7735_Unselect();
 80055a8:	f7ff fe5a 	bl	8005260 <ST7735_Unselect>
}
 80055ac:	bf00      	nop
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b6:	b002      	add	sp, #8
 80055b8:	4770      	bx	lr
	...

080055bc <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80055bc:	b590      	push	{r4, r7, lr}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4604      	mov	r4, r0
 80055c4:	4608      	mov	r0, r1
 80055c6:	4611      	mov	r1, r2
 80055c8:	461a      	mov	r2, r3
 80055ca:	4623      	mov	r3, r4
 80055cc:	80fb      	strh	r3, [r7, #6]
 80055ce:	4603      	mov	r3, r0
 80055d0:	80bb      	strh	r3, [r7, #4]
 80055d2:	460b      	mov	r3, r1
 80055d4:	807b      	strh	r3, [r7, #2]
 80055d6:	4613      	mov	r3, r2
 80055d8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80055de:	d857      	bhi.n	8005690 <ST7735_FillRectangle+0xd4>
 80055e0:	88bb      	ldrh	r3, [r7, #4]
 80055e2:	2b9f      	cmp	r3, #159	@ 0x9f
 80055e4:	d854      	bhi.n	8005690 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	887b      	ldrh	r3, [r7, #2]
 80055ea:	4413      	add	r3, r2
 80055ec:	2b80      	cmp	r3, #128	@ 0x80
 80055ee:	dd03      	ble.n	80055f8 <ST7735_FillRectangle+0x3c>
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80055f6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80055f8:	88ba      	ldrh	r2, [r7, #4]
 80055fa:	883b      	ldrh	r3, [r7, #0]
 80055fc:	4413      	add	r3, r2
 80055fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8005600:	dd03      	ble.n	800560a <ST7735_FillRectangle+0x4e>
 8005602:	88bb      	ldrh	r3, [r7, #4]
 8005604:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8005608:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800560a:	f7ff fe1d 	bl	8005248 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	b2d8      	uxtb	r0, r3
 8005612:	88bb      	ldrh	r3, [r7, #4]
 8005614:	b2d9      	uxtb	r1, r3
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	b2da      	uxtb	r2, r3
 800561a:	887b      	ldrh	r3, [r7, #2]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	4413      	add	r3, r2
 8005620:	b2db      	uxtb	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b2dc      	uxtb	r4, r3
 8005626:	88bb      	ldrh	r3, [r7, #4]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	883b      	ldrh	r3, [r7, #0]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	4413      	add	r3, r2
 8005630:	b2db      	uxtb	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b2db      	uxtb	r3, r3
 8005636:	4622      	mov	r2, r4
 8005638:	f7ff feaf 	bl	800539a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800563c:	8c3b      	ldrh	r3, [r7, #32]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	b29b      	uxth	r3, r3
 8005642:	b2db      	uxtb	r3, r3
 8005644:	733b      	strb	r3, [r7, #12]
 8005646:	8c3b      	ldrh	r3, [r7, #32]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800564c:	2201      	movs	r2, #1
 800564e:	2104      	movs	r1, #4
 8005650:	4811      	ldr	r0, [pc, #68]	@ (8005698 <ST7735_FillRectangle+0xdc>)
 8005652:	f001 fb37 	bl	8006cc4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8005656:	883b      	ldrh	r3, [r7, #0]
 8005658:	80bb      	strh	r3, [r7, #4]
 800565a:	e013      	b.n	8005684 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 800565c:	887b      	ldrh	r3, [r7, #2]
 800565e:	80fb      	strh	r3, [r7, #6]
 8005660:	e00a      	b.n	8005678 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8005662:	f107 010c 	add.w	r1, r7, #12
 8005666:	f04f 33ff 	mov.w	r3, #4294967295
 800566a:	2202      	movs	r2, #2
 800566c:	480b      	ldr	r0, [pc, #44]	@ (800569c <ST7735_FillRectangle+0xe0>)
 800566e:	f005 f84c 	bl	800a70a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	3b01      	subs	r3, #1
 8005676:	80fb      	strh	r3, [r7, #6]
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1f1      	bne.n	8005662 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800567e:	88bb      	ldrh	r3, [r7, #4]
 8005680:	3b01      	subs	r3, #1
 8005682:	80bb      	strh	r3, [r7, #4]
 8005684:	88bb      	ldrh	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e8      	bne.n	800565c <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800568a:	f7ff fde9 	bl	8005260 <ST7735_Unselect>
 800568e:	e000      	b.n	8005692 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8005690:	bf00      	nop
}
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	bd90      	pop	{r4, r7, pc}
 8005698:	40020000 	.word	0x40020000
 800569c:	20002570 	.word	0x20002570

080056a0 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4604      	mov	r4, r0
 80056a8:	4608      	mov	r0, r1
 80056aa:	4611      	mov	r1, r2
 80056ac:	461a      	mov	r2, r3
 80056ae:	4623      	mov	r3, r4
 80056b0:	80fb      	strh	r3, [r7, #6]
 80056b2:	4603      	mov	r3, r0
 80056b4:	80bb      	strh	r3, [r7, #4]
 80056b6:	460b      	mov	r3, r1
 80056b8:	807b      	strh	r3, [r7, #2]
 80056ba:	4613      	mov	r3, r2
 80056bc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80056be:	88fb      	ldrh	r3, [r7, #6]
 80056c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80056c2:	d869      	bhi.n	8005798 <ST7735_FillRectangleFast+0xf8>
 80056c4:	88bb      	ldrh	r3, [r7, #4]
 80056c6:	2b9f      	cmp	r3, #159	@ 0x9f
 80056c8:	d866      	bhi.n	8005798 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	887b      	ldrh	r3, [r7, #2]
 80056ce:	4413      	add	r3, r2
 80056d0:	2b80      	cmp	r3, #128	@ 0x80
 80056d2:	dd03      	ble.n	80056dc <ST7735_FillRectangleFast+0x3c>
 80056d4:	88fb      	ldrh	r3, [r7, #6]
 80056d6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80056da:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80056dc:	88ba      	ldrh	r2, [r7, #4]
 80056de:	883b      	ldrh	r3, [r7, #0]
 80056e0:	4413      	add	r3, r2
 80056e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80056e4:	dd03      	ble.n	80056ee <ST7735_FillRectangleFast+0x4e>
 80056e6:	88bb      	ldrh	r3, [r7, #4]
 80056e8:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 80056ec:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80056ee:	f7ff fdab 	bl	8005248 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	b2d8      	uxtb	r0, r3
 80056f6:	88bb      	ldrh	r3, [r7, #4]
 80056f8:	b2d9      	uxtb	r1, r3
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	887b      	ldrh	r3, [r7, #2]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	4413      	add	r3, r2
 8005704:	b2db      	uxtb	r3, r3
 8005706:	3b01      	subs	r3, #1
 8005708:	b2dc      	uxtb	r4, r3
 800570a:	88bb      	ldrh	r3, [r7, #4]
 800570c:	b2da      	uxtb	r2, r3
 800570e:	883b      	ldrh	r3, [r7, #0]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	4413      	add	r3, r2
 8005714:	b2db      	uxtb	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b2db      	uxtb	r3, r3
 800571a:	4622      	mov	r2, r4
 800571c:	f7ff fe3d 	bl	800539a <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8005720:	8c3b      	ldrh	r3, [r7, #32]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	b29b      	uxth	r3, r3
 8005726:	b2db      	uxtb	r3, r3
 8005728:	723b      	strb	r3, [r7, #8]
 800572a:	8c3b      	ldrh	r3, [r7, #32]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8005730:	887b      	ldrh	r3, [r7, #2]
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	4618      	mov	r0, r3
 8005736:	f00e f89d 	bl	8013874 <malloc>
 800573a:	4603      	mov	r3, r0
 800573c:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 800573e:	2300      	movs	r3, #0
 8005740:	80fb      	strh	r3, [r7, #6]
 8005742:	e008      	b.n	8005756 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8005744:	88fb      	ldrh	r3, [r7, #6]
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	893a      	ldrh	r2, [r7, #8]
 800574e:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8005750:	88fb      	ldrh	r3, [r7, #6]
 8005752:	3301      	adds	r3, #1
 8005754:	80fb      	strh	r3, [r7, #6]
 8005756:	88fa      	ldrh	r2, [r7, #6]
 8005758:	887b      	ldrh	r3, [r7, #2]
 800575a:	429a      	cmp	r2, r3
 800575c:	d3f2      	bcc.n	8005744 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800575e:	2201      	movs	r2, #1
 8005760:	2104      	movs	r1, #4
 8005762:	480f      	ldr	r0, [pc, #60]	@ (80057a0 <ST7735_FillRectangleFast+0x100>)
 8005764:	f001 faae 	bl	8006cc4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8005768:	883b      	ldrh	r3, [r7, #0]
 800576a:	80bb      	strh	r3, [r7, #4]
 800576c:	e00b      	b.n	8005786 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 800576e:	887b      	ldrh	r3, [r7, #2]
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	f04f 33ff 	mov.w	r3, #4294967295
 8005778:	68f9      	ldr	r1, [r7, #12]
 800577a:	480a      	ldr	r0, [pc, #40]	@ (80057a4 <ST7735_FillRectangleFast+0x104>)
 800577c:	f004 ffc5 	bl	800a70a <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8005780:	88bb      	ldrh	r3, [r7, #4]
 8005782:	3b01      	subs	r3, #1
 8005784:	80bb      	strh	r3, [r7, #4]
 8005786:	88bb      	ldrh	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f0      	bne.n	800576e <ST7735_FillRectangleFast+0xce>

    free(line);
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f00e f879 	bl	8013884 <free>
    ST7735_Unselect();
 8005792:	f7ff fd65 	bl	8005260 <ST7735_Unselect>
 8005796:	e000      	b.n	800579a <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8005798:	bf00      	nop
}
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	bd90      	pop	{r4, r7, pc}
 80057a0:	40020000 	.word	0x40020000
 80057a4:	20002570 	.word	0x20002570

080057a8 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	4603      	mov	r3, r0
 80057b0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	23a0      	movs	r3, #160	@ 0xa0
 80057b8:	2280      	movs	r2, #128	@ 0x80
 80057ba:	2100      	movs	r1, #0
 80057bc:	2000      	movs	r0, #0
 80057be:	f7ff fefd 	bl	80055bc <ST7735_FillRectangle>
}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af02      	add	r7, sp, #8
 80057d0:	4603      	mov	r3, r0
 80057d2:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80057d4:	88fb      	ldrh	r3, [r7, #6]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	23a0      	movs	r3, #160	@ 0xa0
 80057da:	2280      	movs	r2, #128	@ 0x80
 80057dc:	2100      	movs	r1, #0
 80057de:	2000      	movs	r0, #0
 80057e0:	f7ff ff5e 	bl	80056a0 <ST7735_FillRectangleFast>
}
 80057e4:	bf00      	nop
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80057ec:	b590      	push	{r4, r7, lr}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4604      	mov	r4, r0
 80057f4:	4608      	mov	r0, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	461a      	mov	r2, r3
 80057fa:	4623      	mov	r3, r4
 80057fc:	80fb      	strh	r3, [r7, #6]
 80057fe:	4603      	mov	r3, r0
 8005800:	80bb      	strh	r3, [r7, #4]
 8005802:	460b      	mov	r3, r1
 8005804:	807b      	strh	r3, [r7, #2]
 8005806:	4613      	mov	r3, r2
 8005808:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	2b7f      	cmp	r3, #127	@ 0x7f
 800580e:	d831      	bhi.n	8005874 <ST7735_DrawImage+0x88>
 8005810:	88bb      	ldrh	r3, [r7, #4]
 8005812:	2b9f      	cmp	r3, #159	@ 0x9f
 8005814:	d82e      	bhi.n	8005874 <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8005816:	88fa      	ldrh	r2, [r7, #6]
 8005818:	887b      	ldrh	r3, [r7, #2]
 800581a:	4413      	add	r3, r2
 800581c:	2b80      	cmp	r3, #128	@ 0x80
 800581e:	dc2b      	bgt.n	8005878 <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8005820:	88ba      	ldrh	r2, [r7, #4]
 8005822:	883b      	ldrh	r3, [r7, #0]
 8005824:	4413      	add	r3, r2
 8005826:	2ba0      	cmp	r3, #160	@ 0xa0
 8005828:	dc28      	bgt.n	800587c <ST7735_DrawImage+0x90>

    ST7735_Select();
 800582a:	f7ff fd0d 	bl	8005248 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	b2d8      	uxtb	r0, r3
 8005832:	88bb      	ldrh	r3, [r7, #4]
 8005834:	b2d9      	uxtb	r1, r3
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	b2da      	uxtb	r2, r3
 800583a:	887b      	ldrh	r3, [r7, #2]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	4413      	add	r3, r2
 8005840:	b2db      	uxtb	r3, r3
 8005842:	3b01      	subs	r3, #1
 8005844:	b2dc      	uxtb	r4, r3
 8005846:	88bb      	ldrh	r3, [r7, #4]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	883b      	ldrh	r3, [r7, #0]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	4413      	add	r3, r2
 8005850:	b2db      	uxtb	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b2db      	uxtb	r3, r3
 8005856:	4622      	mov	r2, r4
 8005858:	f7ff fd9f 	bl	800539a <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 800585c:	887b      	ldrh	r3, [r7, #2]
 800585e:	883a      	ldrh	r2, [r7, #0]
 8005860:	fb02 f303 	mul.w	r3, r2, r3
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	4619      	mov	r1, r3
 8005868:	69b8      	ldr	r0, [r7, #24]
 800586a:	f7ff fd33 	bl	80052d4 <ST7735_WriteData>
    ST7735_Unselect();
 800586e:	f7ff fcf7 	bl	8005260 <ST7735_Unselect>
 8005872:	e004      	b.n	800587e <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8005874:	bf00      	nop
 8005876:	e002      	b.n	800587e <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8005878:	bf00      	nop
 800587a:	e000      	b.n	800587e <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800587c:	bf00      	nop
}
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	bd90      	pop	{r4, r7, pc}

08005884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005884:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80058bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005888:	f7fc fae0 	bl	8001e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800588c:	480c      	ldr	r0, [pc, #48]	@ (80058c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800588e:	490d      	ldr	r1, [pc, #52]	@ (80058c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005890:	4a0d      	ldr	r2, [pc, #52]	@ (80058c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005894:	e002      	b.n	800589c <LoopCopyDataInit>

08005896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800589a:	3304      	adds	r3, #4

0800589c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800589c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800589e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058a0:	d3f9      	bcc.n	8005896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058a2:	4a0a      	ldr	r2, [pc, #40]	@ (80058cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80058a4:	4c0a      	ldr	r4, [pc, #40]	@ (80058d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80058a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058a8:	e001      	b.n	80058ae <LoopFillZerobss>

080058aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058ac:	3204      	adds	r2, #4

080058ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058b0:	d3fb      	bcc.n	80058aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058b2:	f00f f9cb 	bl	8014c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058b6:	f7fb fe79 	bl	80015ac <main>
  bx  lr    
 80058ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80058bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80058c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058c4:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 80058c8:	0801a824 	.word	0x0801a824
  ldr r2, =_sbss
 80058cc:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 80058d0:	20004cb8 	.word	0x20004cb8

080058d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058d4:	e7fe      	b.n	80058d4 <ADC_IRQHandler>
	...

080058d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80058dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005918 <HAL_Init+0x40>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005918 <HAL_Init+0x40>)
 80058e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80058e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005918 <HAL_Init+0x40>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005918 <HAL_Init+0x40>)
 80058ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058f4:	4b08      	ldr	r3, [pc, #32]	@ (8005918 <HAL_Init+0x40>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a07      	ldr	r2, [pc, #28]	@ (8005918 <HAL_Init+0x40>)
 80058fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005900:	2003      	movs	r0, #3
 8005902:	f000 fd0d 	bl	8006320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005906:	200f      	movs	r0, #15
 8005908:	f000 f808 	bl	800591c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800590c:	f7fc f922 	bl	8001b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40023c00 	.word	0x40023c00

0800591c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005924:	4b12      	ldr	r3, [pc, #72]	@ (8005970 <HAL_InitTick+0x54>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	4b12      	ldr	r3, [pc, #72]	@ (8005974 <HAL_InitTick+0x58>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	4619      	mov	r1, r3
 800592e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005932:	fbb3 f3f1 	udiv	r3, r3, r1
 8005936:	fbb2 f3f3 	udiv	r3, r2, r3
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fd25 	bl	800638a <HAL_SYSTICK_Config>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e00e      	b.n	8005968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b0f      	cmp	r3, #15
 800594e:	d80a      	bhi.n	8005966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005950:	2200      	movs	r2, #0
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	f04f 30ff 	mov.w	r0, #4294967295
 8005958:	f000 fced 	bl	8006336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800595c:	4a06      	ldr	r2, [pc, #24]	@ (8005978 <HAL_InitTick+0x5c>)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e000      	b.n	8005968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20000028 	.word	0x20000028
 8005974:	20000140 	.word	0x20000140
 8005978:	2000013c 	.word	0x2000013c

0800597c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005980:	4b06      	ldr	r3, [pc, #24]	@ (800599c <HAL_IncTick+0x20>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	4b06      	ldr	r3, [pc, #24]	@ (80059a0 <HAL_IncTick+0x24>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4413      	add	r3, r2
 800598c:	4a04      	ldr	r2, [pc, #16]	@ (80059a0 <HAL_IncTick+0x24>)
 800598e:	6013      	str	r3, [r2, #0]
}
 8005990:	bf00      	nop
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	20000140 	.word	0x20000140
 80059a0:	20002d48 	.word	0x20002d48

080059a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  return uwTick;
 80059a8:	4b03      	ldr	r3, [pc, #12]	@ (80059b8 <HAL_GetTick+0x14>)
 80059aa:	681b      	ldr	r3, [r3, #0]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20002d48 	.word	0x20002d48

080059bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059c4:	f7ff ffee 	bl	80059a4 <HAL_GetTick>
 80059c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d4:	d005      	beq.n	80059e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a00 <HAL_Delay+0x44>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80059e2:	bf00      	nop
 80059e4:	f7ff ffde 	bl	80059a4 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d8f7      	bhi.n	80059e4 <HAL_Delay+0x28>
  {
  }
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000140 	.word	0x20000140

08005a04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e033      	b.n	8005a82 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fb fba6 	bl	8001174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3a:	f003 0310 	and.w	r3, r3, #16
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d118      	bne.n	8005a74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a4a:	f023 0302 	bic.w	r3, r3, #2
 8005a4e:	f043 0202 	orr.w	r2, r3, #2
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fa96 	bl	8005f88 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	f043 0201 	orr.w	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a72:	e001      	b.n	8005a78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_ADC_Start+0x1a>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e097      	b.n	8005bd6 <HAL_ADC_Start+0x14a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d018      	beq.n	8005aee <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005acc:	4b45      	ldr	r3, [pc, #276]	@ (8005be4 <HAL_ADC_Start+0x158>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a45      	ldr	r2, [pc, #276]	@ (8005be8 <HAL_ADC_Start+0x15c>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	0c9a      	lsrs	r2, r3, #18
 8005ad8:	4613      	mov	r3, r2
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	4413      	add	r3, r2
 8005ade:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005ae0:	e002      	b.n	8005ae8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f9      	bne.n	8005ae2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d15f      	bne.n	8005bbc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b00:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005b26:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b3a:	d106      	bne.n	8005b4a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b40:	f023 0206 	bic.w	r2, r3, #6
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	645a      	str	r2, [r3, #68]	@ 0x44
 8005b48:	e002      	b.n	8005b50 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b58:	4b24      	ldr	r3, [pc, #144]	@ (8005bec <HAL_ADC_Start+0x160>)
 8005b5a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005b64:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f003 031f 	and.w	r3, r3, #31
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10f      	bne.n	8005b92 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d129      	bne.n	8005bd4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005b8e:	609a      	str	r2, [r3, #8]
 8005b90:	e020      	b.n	8005bd4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a16      	ldr	r2, [pc, #88]	@ (8005bf0 <HAL_ADC_Start+0x164>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d11b      	bne.n	8005bd4 <HAL_ADC_Start+0x148>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d114      	bne.n	8005bd4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005bb8:	609a      	str	r2, [r3, #8]
 8005bba:	e00b      	b.n	8005bd4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc0:	f043 0210 	orr.w	r2, r3, #16
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bcc:	f043 0201 	orr.w	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20000028 	.word	0x20000028
 8005be8:	431bde83 	.word	0x431bde83
 8005bec:	40012300 	.word	0x40012300
 8005bf0:	40012000 	.word	0x40012000

08005bf4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c10:	d113      	bne.n	8005c3a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c20:	d10b      	bne.n	8005c3a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c26:	f043 0220 	orr.w	r2, r3, #32
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e063      	b.n	8005d02 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c3a:	f7ff feb3 	bl	80059a4 <HAL_GetTick>
 8005c3e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c40:	e021      	b.n	8005c86 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d01d      	beq.n	8005c86 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d007      	beq.n	8005c60 <HAL_ADC_PollForConversion+0x6c>
 8005c50:	f7ff fea8 	bl	80059a4 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d212      	bcs.n	8005c86 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d00b      	beq.n	8005c86 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c72:	f043 0204 	orr.w	r2, r3, #4
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e03d      	b.n	8005d02 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d1d6      	bne.n	8005c42 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0212 	mvn.w	r2, #18
 8005c9c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d123      	bne.n	8005d00 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d11f      	bne.n	8005d00 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d006      	beq.n	8005cdc <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d111      	bne.n	8005d00 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d105      	bne.n	8005d00 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf8:	f043 0201 	orr.w	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_ADC_ConfigChannel+0x1c>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e113      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x244>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b09      	cmp	r3, #9
 8005d4e:	d925      	bls.n	8005d9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68d9      	ldr	r1, [r3, #12]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4613      	mov	r3, r2
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	4413      	add	r3, r2
 8005d64:	3b1e      	subs	r3, #30
 8005d66:	2207      	movs	r2, #7
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	43da      	mvns	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	400a      	ands	r2, r1
 8005d74:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68d9      	ldr	r1, [r3, #12]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	4618      	mov	r0, r3
 8005d88:	4603      	mov	r3, r0
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4403      	add	r3, r0
 8005d8e:	3b1e      	subs	r3, #30
 8005d90:	409a      	lsls	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	e022      	b.n	8005de2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6919      	ldr	r1, [r3, #16]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	4613      	mov	r3, r2
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	4413      	add	r3, r2
 8005db0:	2207      	movs	r2, #7
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43da      	mvns	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	400a      	ands	r2, r1
 8005dbe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6919      	ldr	r1, [r3, #16]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	4403      	add	r3, r0
 8005dd8:	409a      	lsls	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b06      	cmp	r3, #6
 8005de8:	d824      	bhi.n	8005e34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	3b05      	subs	r3, #5
 8005dfc:	221f      	movs	r2, #31
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	43da      	mvns	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	400a      	ands	r2, r1
 8005e0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	4618      	mov	r0, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	3b05      	subs	r3, #5
 8005e26:	fa00 f203 	lsl.w	r2, r0, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e32:	e04c      	b.n	8005ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b0c      	cmp	r3, #12
 8005e3a:	d824      	bhi.n	8005e86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	3b23      	subs	r3, #35	@ 0x23
 8005e4e:	221f      	movs	r2, #31
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	43da      	mvns	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	400a      	ands	r2, r1
 8005e5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	3b23      	subs	r3, #35	@ 0x23
 8005e78:	fa00 f203 	lsl.w	r2, r0, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e84:	e023      	b.n	8005ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	3b41      	subs	r3, #65	@ 0x41
 8005e98:	221f      	movs	r2, #31
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43da      	mvns	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	400a      	ands	r2, r1
 8005ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	3b41      	subs	r3, #65	@ 0x41
 8005ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ece:	4b29      	ldr	r3, [pc, #164]	@ (8005f74 <HAL_ADC_ConfigChannel+0x250>)
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a28      	ldr	r2, [pc, #160]	@ (8005f78 <HAL_ADC_ConfigChannel+0x254>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d10f      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x1d8>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b12      	cmp	r3, #18
 8005ee2:	d10b      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1d      	ldr	r2, [pc, #116]	@ (8005f78 <HAL_ADC_ConfigChannel+0x254>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d12b      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x23a>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005f7c <HAL_ADC_ConfigChannel+0x258>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <HAL_ADC_ConfigChannel+0x1f4>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b11      	cmp	r3, #17
 8005f16:	d122      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a11      	ldr	r2, [pc, #68]	@ (8005f7c <HAL_ADC_ConfigChannel+0x258>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d111      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005f3a:	4b11      	ldr	r3, [pc, #68]	@ (8005f80 <HAL_ADC_ConfigChannel+0x25c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a11      	ldr	r2, [pc, #68]	@ (8005f84 <HAL_ADC_ConfigChannel+0x260>)
 8005f40:	fba2 2303 	umull	r2, r3, r2, r3
 8005f44:	0c9a      	lsrs	r2, r3, #18
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005f50:	e002      	b.n	8005f58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f9      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40012300 	.word	0x40012300
 8005f78:	40012000 	.word	0x40012000
 8005f7c:	10000012 	.word	0x10000012
 8005f80:	20000028 	.word	0x20000028
 8005f84:	431bde83 	.word	0x431bde83

08005f88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f90:	4b79      	ldr	r3, [pc, #484]	@ (8006178 <ADC_Init+0x1f0>)
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6859      	ldr	r1, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	021a      	lsls	r2, r3, #8
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005fe0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6859      	ldr	r1, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6899      	ldr	r1, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601a:	4a58      	ldr	r2, [pc, #352]	@ (800617c <ADC_Init+0x1f4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d022      	beq.n	8006066 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800602e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6899      	ldr	r1, [r3, #8]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6899      	ldr	r1, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	609a      	str	r2, [r3, #8]
 8006064:	e00f      	b.n	8006086 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006074:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006084:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0202 	bic.w	r2, r2, #2
 8006094:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6899      	ldr	r1, [r3, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	7e1b      	ldrb	r3, [r3, #24]
 80060a0:	005a      	lsls	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01b      	beq.n	80060ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80060d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6859      	ldr	r1, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060de:	3b01      	subs	r3, #1
 80060e0:	035a      	lsls	r2, r3, #13
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	e007      	b.n	80060fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800610a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	3b01      	subs	r3, #1
 8006118:	051a      	lsls	r2, r3, #20
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006130:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6899      	ldr	r1, [r3, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800613e:	025a      	lsls	r2, r3, #9
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6899      	ldr	r1, [r3, #8]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	029a      	lsls	r2, r3, #10
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	bf00      	nop
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40012300 	.word	0x40012300
 800617c:	0f000001 	.word	0x0f000001

08006180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006190:	4b0c      	ldr	r3, [pc, #48]	@ (80061c4 <__NVIC_SetPriorityGrouping+0x44>)
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800619c:	4013      	ands	r3, r2
 800619e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80061ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061b2:	4a04      	ldr	r2, [pc, #16]	@ (80061c4 <__NVIC_SetPriorityGrouping+0x44>)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	60d3      	str	r3, [r2, #12]
}
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	e000ed00 	.word	0xe000ed00

080061c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061cc:	4b04      	ldr	r3, [pc, #16]	@ (80061e0 <__NVIC_GetPriorityGrouping+0x18>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	0a1b      	lsrs	r3, r3, #8
 80061d2:	f003 0307 	and.w	r3, r3, #7
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	e000ed00 	.word	0xe000ed00

080061e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	db0b      	blt.n	800620e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	f003 021f 	and.w	r2, r3, #31
 80061fc:	4907      	ldr	r1, [pc, #28]	@ (800621c <__NVIC_EnableIRQ+0x38>)
 80061fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	2001      	movs	r0, #1
 8006206:	fa00 f202 	lsl.w	r2, r0, r2
 800620a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	e000e100 	.word	0xe000e100

08006220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	6039      	str	r1, [r7, #0]
 800622a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800622c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006230:	2b00      	cmp	r3, #0
 8006232:	db0a      	blt.n	800624a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	b2da      	uxtb	r2, r3
 8006238:	490c      	ldr	r1, [pc, #48]	@ (800626c <__NVIC_SetPriority+0x4c>)
 800623a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623e:	0112      	lsls	r2, r2, #4
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	440b      	add	r3, r1
 8006244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006248:	e00a      	b.n	8006260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	4908      	ldr	r1, [pc, #32]	@ (8006270 <__NVIC_SetPriority+0x50>)
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	3b04      	subs	r3, #4
 8006258:	0112      	lsls	r2, r2, #4
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	440b      	add	r3, r1
 800625e:	761a      	strb	r2, [r3, #24]
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	e000e100 	.word	0xe000e100
 8006270:	e000ed00 	.word	0xe000ed00

08006274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006274:	b480      	push	{r7}
 8006276:	b089      	sub	sp, #36	@ 0x24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f1c3 0307 	rsb	r3, r3, #7
 800628e:	2b04      	cmp	r3, #4
 8006290:	bf28      	it	cs
 8006292:	2304      	movcs	r3, #4
 8006294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	3304      	adds	r3, #4
 800629a:	2b06      	cmp	r3, #6
 800629c:	d902      	bls.n	80062a4 <NVIC_EncodePriority+0x30>
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	3b03      	subs	r3, #3
 80062a2:	e000      	b.n	80062a6 <NVIC_EncodePriority+0x32>
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062a8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	43da      	mvns	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	401a      	ands	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062bc:	f04f 31ff 	mov.w	r1, #4294967295
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	fa01 f303 	lsl.w	r3, r1, r3
 80062c6:	43d9      	mvns	r1, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062cc:	4313      	orrs	r3, r2
         );
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3724      	adds	r7, #36	@ 0x24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062ec:	d301      	bcc.n	80062f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062ee:	2301      	movs	r3, #1
 80062f0:	e00f      	b.n	8006312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062f2:	4a0a      	ldr	r2, [pc, #40]	@ (800631c <SysTick_Config+0x40>)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062fa:	210f      	movs	r1, #15
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	f7ff ff8e 	bl	8006220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006304:	4b05      	ldr	r3, [pc, #20]	@ (800631c <SysTick_Config+0x40>)
 8006306:	2200      	movs	r2, #0
 8006308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800630a:	4b04      	ldr	r3, [pc, #16]	@ (800631c <SysTick_Config+0x40>)
 800630c:	2207      	movs	r2, #7
 800630e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	e000e010 	.word	0xe000e010

08006320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff ff29 	bl	8006180 <__NVIC_SetPriorityGrouping>
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006336:	b580      	push	{r7, lr}
 8006338:	b086      	sub	sp, #24
 800633a:	af00      	add	r7, sp, #0
 800633c:	4603      	mov	r3, r0
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006344:	2300      	movs	r3, #0
 8006346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006348:	f7ff ff3e 	bl	80061c8 <__NVIC_GetPriorityGrouping>
 800634c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	6978      	ldr	r0, [r7, #20]
 8006354:	f7ff ff8e 	bl	8006274 <NVIC_EncodePriority>
 8006358:	4602      	mov	r2, r0
 800635a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800635e:	4611      	mov	r1, r2
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff ff5d 	bl	8006220 <__NVIC_SetPriority>
}
 8006366:	bf00      	nop
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	af00      	add	r7, sp, #0
 8006374:	4603      	mov	r3, r0
 8006376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff ff31 	bl	80061e4 <__NVIC_EnableIRQ>
}
 8006382:	bf00      	nop
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b082      	sub	sp, #8
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff ffa2 	bl	80062dc <SysTick_Config>
 8006398:	4603      	mov	r3, r0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80063b0:	f7ff faf8 	bl	80059a4 <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e099      	b.n	80064f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063e0:	e00f      	b.n	8006402 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063e2:	f7ff fadf 	bl	80059a4 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b05      	cmp	r3, #5
 80063ee:	d908      	bls.n	8006402 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2203      	movs	r2, #3
 80063fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e078      	b.n	80064f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e8      	bne.n	80063e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4b38      	ldr	r3, [pc, #224]	@ (80064fc <HAL_DMA_Init+0x158>)
 800641c:	4013      	ands	r3, r2
 800641e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800642e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800643a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006458:	2b04      	cmp	r3, #4
 800645a:	d107      	bne.n	800646c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006464:	4313      	orrs	r3, r2
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 0307 	bic.w	r3, r3, #7
 8006482:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006492:	2b04      	cmp	r3, #4
 8006494:	d117      	bne.n	80064c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00e      	beq.n	80064c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fa0b 	bl	80068c4 <DMA_CheckFifoParam>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d008      	beq.n	80064c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2240      	movs	r2, #64	@ 0x40
 80064b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80064c2:	2301      	movs	r3, #1
 80064c4:	e016      	b.n	80064f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f9c2 	bl	8006858 <DMA_CalcBaseAndBitshift>
 80064d4:	4603      	mov	r3, r0
 80064d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064dc:	223f      	movs	r2, #63	@ 0x3f
 80064de:	409a      	lsls	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	f010803f 	.word	0xf010803f

08006500 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d004      	beq.n	800651e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2280      	movs	r2, #128	@ 0x80
 8006518:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e00c      	b.n	8006538 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2205      	movs	r2, #5
 8006522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0201 	bic.w	r2, r2, #1
 8006534:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006550:	4b8e      	ldr	r3, [pc, #568]	@ (800678c <HAL_DMA_IRQHandler+0x248>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a8e      	ldr	r2, [pc, #568]	@ (8006790 <HAL_DMA_IRQHandler+0x24c>)
 8006556:	fba2 2303 	umull	r2, r3, r2, r3
 800655a:	0a9b      	lsrs	r3, r3, #10
 800655c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006562:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800656e:	2208      	movs	r2, #8
 8006570:	409a      	lsls	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4013      	ands	r3, r2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d01a      	beq.n	80065b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d013      	beq.n	80065b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0204 	bic.w	r2, r2, #4
 8006596:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800659c:	2208      	movs	r2, #8
 800659e:	409a      	lsls	r2, r3
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a8:	f043 0201 	orr.w	r2, r3, #1
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b4:	2201      	movs	r2, #1
 80065b6:	409a      	lsls	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4013      	ands	r3, r2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d012      	beq.n	80065e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065d2:	2201      	movs	r2, #1
 80065d4:	409a      	lsls	r2, r3
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065de:	f043 0202 	orr.w	r2, r3, #2
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ea:	2204      	movs	r2, #4
 80065ec:	409a      	lsls	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4013      	ands	r3, r2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d012      	beq.n	800661c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006608:	2204      	movs	r2, #4
 800660a:	409a      	lsls	r2, r3
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006614:	f043 0204 	orr.w	r2, r3, #4
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006620:	2210      	movs	r2, #16
 8006622:	409a      	lsls	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4013      	ands	r3, r2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d043      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0308 	and.w	r3, r3, #8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d03c      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800663e:	2210      	movs	r2, #16
 8006640:	409a      	lsls	r2, r3
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d018      	beq.n	8006686 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d108      	bne.n	8006674 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d024      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
 8006672:	e01f      	b.n	80066b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01b      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
 8006684:	e016      	b.n	80066b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d107      	bne.n	80066a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0208 	bic.w	r2, r2, #8
 80066a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b8:	2220      	movs	r2, #32
 80066ba:	409a      	lsls	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4013      	ands	r3, r2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 808f 	beq.w	80067e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0310 	and.w	r3, r3, #16
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8087 	beq.w	80067e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066da:	2220      	movs	r2, #32
 80066dc:	409a      	lsls	r2, r3
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b05      	cmp	r3, #5
 80066ec:	d136      	bne.n	800675c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0216 	bic.w	r2, r2, #22
 80066fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695a      	ldr	r2, [r3, #20]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800670c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006712:	2b00      	cmp	r3, #0
 8006714:	d103      	bne.n	800671e <HAL_DMA_IRQHandler+0x1da>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800671a:	2b00      	cmp	r3, #0
 800671c:	d007      	beq.n	800672e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0208 	bic.w	r2, r2, #8
 800672c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006732:	223f      	movs	r2, #63	@ 0x3f
 8006734:	409a      	lsls	r2, r3
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800674e:	2b00      	cmp	r3, #0
 8006750:	d07e      	beq.n	8006850 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
        }
        return;
 800675a:	e079      	b.n	8006850 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d01d      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10d      	bne.n	8006794 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800677c:	2b00      	cmp	r3, #0
 800677e:	d031      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
 8006788:	e02c      	b.n	80067e4 <HAL_DMA_IRQHandler+0x2a0>
 800678a:	bf00      	nop
 800678c:	20000028 	.word	0x20000028
 8006790:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d023      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
 80067a4:	e01e      	b.n	80067e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10f      	bne.n	80067d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0210 	bic.w	r2, r2, #16
 80067c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d032      	beq.n	8006852 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d022      	beq.n	800683e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2205      	movs	r2, #5
 80067fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	3301      	adds	r3, #1
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	429a      	cmp	r2, r3
 800681a:	d307      	bcc.n	800682c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f2      	bne.n	8006810 <HAL_DMA_IRQHandler+0x2cc>
 800682a:	e000      	b.n	800682e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800682c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	4798      	blx	r3
 800684e:	e000      	b.n	8006852 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006850:	bf00      	nop
    }
  }
}
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	b2db      	uxtb	r3, r3
 8006866:	3b10      	subs	r3, #16
 8006868:	4a14      	ldr	r2, [pc, #80]	@ (80068bc <DMA_CalcBaseAndBitshift+0x64>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	091b      	lsrs	r3, r3, #4
 8006870:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006872:	4a13      	ldr	r2, [pc, #76]	@ (80068c0 <DMA_CalcBaseAndBitshift+0x68>)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4413      	add	r3, r2
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b03      	cmp	r3, #3
 8006884:	d909      	bls.n	800689a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800688e:	f023 0303 	bic.w	r3, r3, #3
 8006892:	1d1a      	adds	r2, r3, #4
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	659a      	str	r2, [r3, #88]	@ 0x58
 8006898:	e007      	b.n	80068aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	aaaaaaab 	.word	0xaaaaaaab
 80068c0:	08019f9c 	.word	0x08019f9c

080068c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d11f      	bne.n	800691e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d856      	bhi.n	8006992 <DMA_CheckFifoParam+0xce>
 80068e4:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <DMA_CheckFifoParam+0x28>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	0800690f 	.word	0x0800690f
 80068f4:	080068fd 	.word	0x080068fd
 80068f8:	08006993 	.word	0x08006993
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d046      	beq.n	8006996 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800690c:	e043      	b.n	8006996 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006912:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006916:	d140      	bne.n	800699a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800691c:	e03d      	b.n	800699a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006926:	d121      	bne.n	800696c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b03      	cmp	r3, #3
 800692c:	d837      	bhi.n	800699e <DMA_CheckFifoParam+0xda>
 800692e:	a201      	add	r2, pc, #4	@ (adr r2, 8006934 <DMA_CheckFifoParam+0x70>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006945 	.word	0x08006945
 8006938:	0800694b 	.word	0x0800694b
 800693c:	08006945 	.word	0x08006945
 8006940:	0800695d 	.word	0x0800695d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	e030      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d025      	beq.n	80069a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800695a:	e022      	b.n	80069a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006960:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006964:	d11f      	bne.n	80069a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800696a:	e01c      	b.n	80069a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b02      	cmp	r3, #2
 8006970:	d903      	bls.n	800697a <DMA_CheckFifoParam+0xb6>
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b03      	cmp	r3, #3
 8006976:	d003      	beq.n	8006980 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006978:	e018      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
      break;
 800697e:	e015      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00e      	beq.n	80069aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	73fb      	strb	r3, [r7, #15]
      break;
 8006990:	e00b      	b.n	80069aa <DMA_CheckFifoParam+0xe6>
      break;
 8006992:	bf00      	nop
 8006994:	e00a      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
      break;
 8006996:	bf00      	nop
 8006998:	e008      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
      break;
 800699a:	bf00      	nop
 800699c:	e006      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
      break;
 800699e:	bf00      	nop
 80069a0:	e004      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
      break;
 80069a2:	bf00      	nop
 80069a4:	e002      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
      break;   
 80069a6:	bf00      	nop
 80069a8:	e000      	b.n	80069ac <DMA_CheckFifoParam+0xe8>
      break;
 80069aa:	bf00      	nop
    }
  } 
  
  return status; 
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop

080069bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069bc:	b480      	push	{r7}
 80069be:	b089      	sub	sp, #36	@ 0x24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069d2:	2300      	movs	r3, #0
 80069d4:	61fb      	str	r3, [r7, #28]
 80069d6:	e159      	b.n	8006c8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069d8:	2201      	movs	r2, #1
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4013      	ands	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	f040 8148 	bne.w	8006c86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d005      	beq.n	8006a0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d130      	bne.n	8006a70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	2203      	movs	r2, #3
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4013      	ands	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a44:	2201      	movs	r2, #1
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	4013      	ands	r3, r2
 8006a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f003 0201 	and.w	r2, r3, #1
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f003 0303 	and.w	r3, r3, #3
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d017      	beq.n	8006aac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	2203      	movs	r2, #3
 8006a88:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	4013      	ands	r3, r2
 8006a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f003 0303 	and.w	r3, r3, #3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d123      	bne.n	8006b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	08da      	lsrs	r2, r3, #3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3208      	adds	r2, #8
 8006ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	220f      	movs	r2, #15
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	43db      	mvns	r3, r3
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	08da      	lsrs	r2, r3, #3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3208      	adds	r2, #8
 8006afa:	69b9      	ldr	r1, [r7, #24]
 8006afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	2203      	movs	r2, #3
 8006b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b10:	43db      	mvns	r3, r3
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	4013      	ands	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f003 0203 	and.w	r2, r3, #3
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	fa02 f303 	lsl.w	r3, r2, r3
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80a2 	beq.w	8006c86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b42:	2300      	movs	r3, #0
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	4b57      	ldr	r3, [pc, #348]	@ (8006ca4 <HAL_GPIO_Init+0x2e8>)
 8006b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b4a:	4a56      	ldr	r2, [pc, #344]	@ (8006ca4 <HAL_GPIO_Init+0x2e8>)
 8006b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8006b52:	4b54      	ldr	r3, [pc, #336]	@ (8006ca4 <HAL_GPIO_Init+0x2e8>)
 8006b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b5e:	4a52      	ldr	r2, [pc, #328]	@ (8006ca8 <HAL_GPIO_Init+0x2ec>)
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	089b      	lsrs	r3, r3, #2
 8006b64:	3302      	adds	r3, #2
 8006b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	220f      	movs	r2, #15
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a49      	ldr	r2, [pc, #292]	@ (8006cac <HAL_GPIO_Init+0x2f0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d019      	beq.n	8006bbe <HAL_GPIO_Init+0x202>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a48      	ldr	r2, [pc, #288]	@ (8006cb0 <HAL_GPIO_Init+0x2f4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d013      	beq.n	8006bba <HAL_GPIO_Init+0x1fe>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a47      	ldr	r2, [pc, #284]	@ (8006cb4 <HAL_GPIO_Init+0x2f8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00d      	beq.n	8006bb6 <HAL_GPIO_Init+0x1fa>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a46      	ldr	r2, [pc, #280]	@ (8006cb8 <HAL_GPIO_Init+0x2fc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d007      	beq.n	8006bb2 <HAL_GPIO_Init+0x1f6>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a45      	ldr	r2, [pc, #276]	@ (8006cbc <HAL_GPIO_Init+0x300>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d101      	bne.n	8006bae <HAL_GPIO_Init+0x1f2>
 8006baa:	2304      	movs	r3, #4
 8006bac:	e008      	b.n	8006bc0 <HAL_GPIO_Init+0x204>
 8006bae:	2307      	movs	r3, #7
 8006bb0:	e006      	b.n	8006bc0 <HAL_GPIO_Init+0x204>
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e004      	b.n	8006bc0 <HAL_GPIO_Init+0x204>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e002      	b.n	8006bc0 <HAL_GPIO_Init+0x204>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <HAL_GPIO_Init+0x204>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	f002 0203 	and.w	r2, r2, #3
 8006bc6:	0092      	lsls	r2, r2, #2
 8006bc8:	4093      	lsls	r3, r2
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bd0:	4935      	ldr	r1, [pc, #212]	@ (8006ca8 <HAL_GPIO_Init+0x2ec>)
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	089b      	lsrs	r3, r3, #2
 8006bd6:	3302      	adds	r3, #2
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bde:	4b38      	ldr	r3, [pc, #224]	@ (8006cc0 <HAL_GPIO_Init+0x304>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	43db      	mvns	r3, r3
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	4013      	ands	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c02:	4a2f      	ldr	r2, [pc, #188]	@ (8006cc0 <HAL_GPIO_Init+0x304>)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c08:	4b2d      	ldr	r3, [pc, #180]	@ (8006cc0 <HAL_GPIO_Init+0x304>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	43db      	mvns	r3, r3
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	4013      	ands	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c2c:	4a24      	ldr	r2, [pc, #144]	@ (8006cc0 <HAL_GPIO_Init+0x304>)
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c32:	4b23      	ldr	r3, [pc, #140]	@ (8006cc0 <HAL_GPIO_Init+0x304>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	43db      	mvns	r3, r3
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c56:	4a1a      	ldr	r2, [pc, #104]	@ (8006cc0 <HAL_GPIO_Init+0x304>)
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c5c:	4b18      	ldr	r3, [pc, #96]	@ (8006cc0 <HAL_GPIO_Init+0x304>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	43db      	mvns	r3, r3
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c80:	4a0f      	ldr	r2, [pc, #60]	@ (8006cc0 <HAL_GPIO_Init+0x304>)
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	61fb      	str	r3, [r7, #28]
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	2b0f      	cmp	r3, #15
 8006c90:	f67f aea2 	bls.w	80069d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	3724      	adds	r7, #36	@ 0x24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	40013800 	.word	0x40013800
 8006cac:	40020000 	.word	0x40020000
 8006cb0:	40020400 	.word	0x40020400
 8006cb4:	40020800 	.word	0x40020800
 8006cb8:	40020c00 	.word	0x40020c00
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	40013c00 	.word	0x40013c00

08006cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	807b      	strh	r3, [r7, #2]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006cd4:	787b      	ldrb	r3, [r7, #1]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cda:	887a      	ldrh	r2, [r7, #2]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ce0:	e003      	b.n	8006cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ce2:	887b      	ldrh	r3, [r7, #2]
 8006ce4:	041a      	lsls	r2, r3, #16
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	619a      	str	r2, [r3, #24]
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
	...

08006cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006d02:	4b08      	ldr	r3, [pc, #32]	@ (8006d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d04:	695a      	ldr	r2, [r3, #20]
 8006d06:	88fb      	ldrh	r3, [r7, #6]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d006      	beq.n	8006d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d0e:	4a05      	ldr	r2, [pc, #20]	@ (8006d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d10:	88fb      	ldrh	r3, [r7, #6]
 8006d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d14:	88fb      	ldrh	r3, [r7, #6]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fa fe3c 	bl	8001994 <HAL_GPIO_EXTI_Callback>
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	40013c00 	.word	0x40013c00

08006d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e12b      	b.n	8006f92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fa fb7a 	bl	8001448 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2224      	movs	r2, #36	@ 0x24
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0201 	bic.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d8c:	f003 fc20 	bl	800a5d0 <HAL_RCC_GetPCLK1Freq>
 8006d90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	4a81      	ldr	r2, [pc, #516]	@ (8006f9c <HAL_I2C_Init+0x274>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d807      	bhi.n	8006dac <HAL_I2C_Init+0x84>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4a80      	ldr	r2, [pc, #512]	@ (8006fa0 <HAL_I2C_Init+0x278>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	bf94      	ite	ls
 8006da4:	2301      	movls	r3, #1
 8006da6:	2300      	movhi	r3, #0
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	e006      	b.n	8006dba <HAL_I2C_Init+0x92>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4a7d      	ldr	r2, [pc, #500]	@ (8006fa4 <HAL_I2C_Init+0x27c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	bf94      	ite	ls
 8006db4:	2301      	movls	r3, #1
 8006db6:	2300      	movhi	r3, #0
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e0e7      	b.n	8006f92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4a78      	ldr	r2, [pc, #480]	@ (8006fa8 <HAL_I2C_Init+0x280>)
 8006dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dca:	0c9b      	lsrs	r3, r3, #18
 8006dcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	4a6a      	ldr	r2, [pc, #424]	@ (8006f9c <HAL_I2C_Init+0x274>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d802      	bhi.n	8006dfc <HAL_I2C_Init+0xd4>
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	e009      	b.n	8006e10 <HAL_I2C_Init+0xe8>
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006e02:	fb02 f303 	mul.w	r3, r2, r3
 8006e06:	4a69      	ldr	r2, [pc, #420]	@ (8006fac <HAL_I2C_Init+0x284>)
 8006e08:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0c:	099b      	lsrs	r3, r3, #6
 8006e0e:	3301      	adds	r3, #1
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6812      	ldr	r2, [r2, #0]
 8006e14:	430b      	orrs	r3, r1
 8006e16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006e22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	495c      	ldr	r1, [pc, #368]	@ (8006f9c <HAL_I2C_Init+0x274>)
 8006e2c:	428b      	cmp	r3, r1
 8006e2e:	d819      	bhi.n	8006e64 <HAL_I2C_Init+0x13c>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	1e59      	subs	r1, r3, #1
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e3e:	1c59      	adds	r1, r3, #1
 8006e40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006e44:	400b      	ands	r3, r1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <HAL_I2C_Init+0x138>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	1e59      	subs	r1, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e58:	3301      	adds	r3, #1
 8006e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e5e:	e051      	b.n	8006f04 <HAL_I2C_Init+0x1dc>
 8006e60:	2304      	movs	r3, #4
 8006e62:	e04f      	b.n	8006f04 <HAL_I2C_Init+0x1dc>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d111      	bne.n	8006e90 <HAL_I2C_Init+0x168>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	1e58      	subs	r0, r3, #1
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6859      	ldr	r1, [r3, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	440b      	add	r3, r1
 8006e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e7e:	3301      	adds	r3, #1
 8006e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bf0c      	ite	eq
 8006e88:	2301      	moveq	r3, #1
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	e012      	b.n	8006eb6 <HAL_I2C_Init+0x18e>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	1e58      	subs	r0, r3, #1
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6859      	ldr	r1, [r3, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	0099      	lsls	r1, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bf0c      	ite	eq
 8006eb0:	2301      	moveq	r3, #1
 8006eb2:	2300      	movne	r3, #0
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <HAL_I2C_Init+0x196>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e022      	b.n	8006f04 <HAL_I2C_Init+0x1dc>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10e      	bne.n	8006ee4 <HAL_I2C_Init+0x1bc>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1e58      	subs	r0, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6859      	ldr	r1, [r3, #4]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	440b      	add	r3, r1
 8006ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ed8:	3301      	adds	r3, #1
 8006eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ee2:	e00f      	b.n	8006f04 <HAL_I2C_Init+0x1dc>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	1e58      	subs	r0, r3, #1
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6859      	ldr	r1, [r3, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	0099      	lsls	r1, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006efa:	3301      	adds	r3, #1
 8006efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f04:	6879      	ldr	r1, [r7, #4]
 8006f06:	6809      	ldr	r1, [r1, #0]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69da      	ldr	r2, [r3, #28]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006f32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	6911      	ldr	r1, [r2, #16]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	68d2      	ldr	r2, [r2, #12]
 8006f3e:	4311      	orrs	r1, r2
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6812      	ldr	r2, [r2, #0]
 8006f44:	430b      	orrs	r3, r1
 8006f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	695a      	ldr	r2, [r3, #20]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	000186a0 	.word	0x000186a0
 8006fa0:	001e847f 	.word	0x001e847f
 8006fa4:	003d08ff 	.word	0x003d08ff
 8006fa8:	431bde83 	.word	0x431bde83
 8006fac:	10624dd3 	.word	0x10624dd3

08006fb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	607a      	str	r2, [r7, #4]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	817b      	strh	r3, [r7, #10]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006fc4:	f7fe fcee 	bl	80059a4 <HAL_GetTick>
 8006fc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	f040 80e0 	bne.w	8007198 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	2319      	movs	r3, #25
 8006fde:	2201      	movs	r2, #1
 8006fe0:	4970      	ldr	r1, [pc, #448]	@ (80071a4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f001 fa3c 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006fee:	2302      	movs	r3, #2
 8006ff0:	e0d3      	b.n	800719a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d101      	bne.n	8007000 <HAL_I2C_Master_Transmit+0x50>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e0cc      	b.n	800719a <HAL_I2C_Master_Transmit+0x1ea>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b01      	cmp	r3, #1
 8007014:	d007      	beq.n	8007026 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f042 0201 	orr.w	r2, r2, #1
 8007024:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007034:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2221      	movs	r2, #33	@ 0x21
 800703a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2210      	movs	r2, #16
 8007042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	893a      	ldrh	r2, [r7, #8]
 8007056:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800705c:	b29a      	uxth	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4a50      	ldr	r2, [pc, #320]	@ (80071a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8007066:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007068:	8979      	ldrh	r1, [r7, #10]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	6a3a      	ldr	r2, [r7, #32]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 ff28 	bl	8007ec4 <I2C_MasterRequestWrite>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e08d      	b.n	800719a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800707e:	2300      	movs	r3, #0
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	613b      	str	r3, [r7, #16]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007094:	e066      	b.n	8007164 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	6a39      	ldr	r1, [r7, #32]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f001 fafa 	bl	8008694 <I2C_WaitOnTXEFlagUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00d      	beq.n	80070c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d107      	bne.n	80070be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e06b      	b.n	800719a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c6:	781a      	ldrb	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070dc:	b29b      	uxth	r3, r3
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ea:	3b01      	subs	r3, #1
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d11b      	bne.n	8007138 <HAL_I2C_Master_Transmit+0x188>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007104:	2b00      	cmp	r3, #0
 8007106:	d017      	beq.n	8007138 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710c:	781a      	ldrb	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007122:	b29b      	uxth	r3, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	b29a      	uxth	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	6a39      	ldr	r1, [r7, #32]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f001 faf1 	bl	8008724 <I2C_WaitOnBTFFlagUntilTimeout>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00d      	beq.n	8007164 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714c:	2b04      	cmp	r3, #4
 800714e:	d107      	bne.n	8007160 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800715e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e01a      	b.n	800719a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007168:	2b00      	cmp	r3, #0
 800716a:	d194      	bne.n	8007096 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800717a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2220      	movs	r2, #32
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	e000      	b.n	800719a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007198:	2302      	movs	r3, #2
  }
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	00100002 	.word	0x00100002
 80071a8:	ffff0000 	.word	0xffff0000

080071ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08c      	sub	sp, #48	@ 0x30
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	607a      	str	r2, [r7, #4]
 80071b6:	461a      	mov	r2, r3
 80071b8:	460b      	mov	r3, r1
 80071ba:	817b      	strh	r3, [r7, #10]
 80071bc:	4613      	mov	r3, r2
 80071be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071c0:	f7fe fbf0 	bl	80059a4 <HAL_GetTick>
 80071c4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	f040 8217 	bne.w	8007602 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	2319      	movs	r3, #25
 80071da:	2201      	movs	r2, #1
 80071dc:	497c      	ldr	r1, [pc, #496]	@ (80073d0 <HAL_I2C_Master_Receive+0x224>)
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f001 f93e 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80071ea:	2302      	movs	r3, #2
 80071ec:	e20a      	b.n	8007604 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d101      	bne.n	80071fc <HAL_I2C_Master_Receive+0x50>
 80071f8:	2302      	movs	r3, #2
 80071fa:	e203      	b.n	8007604 <HAL_I2C_Master_Receive+0x458>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b01      	cmp	r3, #1
 8007210:	d007      	beq.n	8007222 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f042 0201 	orr.w	r2, r2, #1
 8007220:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007230:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2222      	movs	r2, #34	@ 0x22
 8007236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2210      	movs	r2, #16
 800723e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	893a      	ldrh	r2, [r7, #8]
 8007252:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007258:	b29a      	uxth	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4a5c      	ldr	r2, [pc, #368]	@ (80073d4 <HAL_I2C_Master_Receive+0x228>)
 8007262:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007264:	8979      	ldrh	r1, [r7, #10]
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 feac 	bl	8007fc8 <I2C_MasterRequestRead>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e1c4      	b.n	8007604 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800727e:	2b00      	cmp	r3, #0
 8007280:	d113      	bne.n	80072aa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007282:	2300      	movs	r3, #0
 8007284:	623b      	str	r3, [r7, #32]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	623b      	str	r3, [r7, #32]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	623b      	str	r3, [r7, #32]
 8007296:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	e198      	b.n	80075dc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d11b      	bne.n	80072ea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c2:	2300      	movs	r3, #0
 80072c4:	61fb      	str	r3, [r7, #28]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	61fb      	str	r3, [r7, #28]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	61fb      	str	r3, [r7, #28]
 80072d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e178      	b.n	80075dc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d11b      	bne.n	800732a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007300:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007310:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007312:	2300      	movs	r3, #0
 8007314:	61bb      	str	r3, [r7, #24]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	61bb      	str	r3, [r7, #24]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	e158      	b.n	80075dc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007338:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800733a:	2300      	movs	r3, #0
 800733c:	617b      	str	r3, [r7, #20]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007350:	e144      	b.n	80075dc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007356:	2b03      	cmp	r3, #3
 8007358:	f200 80f1 	bhi.w	800753e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007360:	2b01      	cmp	r3, #1
 8007362:	d123      	bne.n	80073ac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007366:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f001 fa23 	bl	80087b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e145      	b.n	8007604 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691a      	ldr	r2, [r3, #16]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80073aa:	e117      	b.n	80075dc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d14e      	bne.n	8007452 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ba:	2200      	movs	r2, #0
 80073bc:	4906      	ldr	r1, [pc, #24]	@ (80073d8 <HAL_I2C_Master_Receive+0x22c>)
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f001 f84e 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d008      	beq.n	80073dc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e11a      	b.n	8007604 <HAL_I2C_Master_Receive+0x458>
 80073ce:	bf00      	nop
 80073d0:	00100002 	.word	0x00100002
 80073d4:	ffff0000 	.word	0xffff0000
 80073d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	691a      	ldr	r2, [r3, #16]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800743a:	3b01      	subs	r3, #1
 800743c:	b29a      	uxth	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007450:	e0c4      	b.n	80075dc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	2200      	movs	r2, #0
 800745a:	496c      	ldr	r1, [pc, #432]	@ (800760c <HAL_I2C_Master_Receive+0x460>)
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 ffff 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e0cb      	b.n	8007604 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800747a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691a      	ldr	r2, [r3, #16]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b4:	2200      	movs	r2, #0
 80074b6:	4955      	ldr	r1, [pc, #340]	@ (800760c <HAL_I2C_Master_Receive+0x460>)
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 ffd1 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e09d      	b.n	8007604 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	691a      	ldr	r2, [r3, #16]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007514:	b2d2      	uxtb	r2, r2
 8007516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007526:	3b01      	subs	r3, #1
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007532:	b29b      	uxth	r3, r3
 8007534:	3b01      	subs	r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800753c:	e04e      	b.n	80075dc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800753e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007540:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f001 f936 	bl	80087b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e058      	b.n	8007604 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800757a:	b29b      	uxth	r3, r3
 800757c:	3b01      	subs	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	f003 0304 	and.w	r3, r3, #4
 800758e:	2b04      	cmp	r3, #4
 8007590:	d124      	bne.n	80075dc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007596:	2b03      	cmp	r3, #3
 8007598:	d107      	bne.n	80075aa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075a8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f47f aeb6 	bne.w	8007352 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	e000      	b.n	8007604 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007602:	2302      	movs	r3, #2
  }
}
 8007604:	4618      	mov	r0, r3
 8007606:	3728      	adds	r7, #40	@ 0x28
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	00010004 	.word	0x00010004

08007610 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af02      	add	r7, sp, #8
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	4608      	mov	r0, r1
 800761a:	4611      	mov	r1, r2
 800761c:	461a      	mov	r2, r3
 800761e:	4603      	mov	r3, r0
 8007620:	817b      	strh	r3, [r7, #10]
 8007622:	460b      	mov	r3, r1
 8007624:	813b      	strh	r3, [r7, #8]
 8007626:	4613      	mov	r3, r2
 8007628:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800762a:	f7fe f9bb 	bl	80059a4 <HAL_GetTick>
 800762e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b20      	cmp	r3, #32
 800763a:	f040 80d9 	bne.w	80077f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	2319      	movs	r3, #25
 8007644:	2201      	movs	r2, #1
 8007646:	496d      	ldr	r1, [pc, #436]	@ (80077fc <HAL_I2C_Mem_Write+0x1ec>)
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 ff09 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007654:	2302      	movs	r3, #2
 8007656:	e0cc      	b.n	80077f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_I2C_Mem_Write+0x56>
 8007662:	2302      	movs	r3, #2
 8007664:	e0c5      	b.n	80077f2 <HAL_I2C_Mem_Write+0x1e2>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b01      	cmp	r3, #1
 800767a:	d007      	beq.n	800768c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0201 	orr.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800769a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2221      	movs	r2, #33	@ 0x21
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2240      	movs	r2, #64	@ 0x40
 80076a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6a3a      	ldr	r2, [r7, #32]
 80076b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80076bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4a4d      	ldr	r2, [pc, #308]	@ (8007800 <HAL_I2C_Mem_Write+0x1f0>)
 80076cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076ce:	88f8      	ldrh	r0, [r7, #6]
 80076d0:	893a      	ldrh	r2, [r7, #8]
 80076d2:	8979      	ldrh	r1, [r7, #10]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	4603      	mov	r3, r0
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fd40 	bl	8008164 <I2C_RequestMemoryWrite>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d052      	beq.n	8007790 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e081      	b.n	80077f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 ffce 	bl	8008694 <I2C_WaitOnTXEFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00d      	beq.n	800771a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007702:	2b04      	cmp	r3, #4
 8007704:	d107      	bne.n	8007716 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007714:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e06b      	b.n	80077f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771e:	781a      	ldrb	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007734:	3b01      	subs	r3, #1
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b04      	cmp	r3, #4
 8007756:	d11b      	bne.n	8007790 <HAL_I2C_Mem_Write+0x180>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800775c:	2b00      	cmp	r3, #0
 800775e:	d017      	beq.n	8007790 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007764:	781a      	ldrb	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1aa      	bne.n	80076ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 ffc1 	bl	8008724 <I2C_WaitOnBTFFlagUntilTimeout>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00d      	beq.n	80077c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	d107      	bne.n	80077c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e016      	b.n	80077f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	e000      	b.n	80077f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80077f0:	2302      	movs	r3, #2
  }
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	00100002 	.word	0x00100002
 8007800:	ffff0000 	.word	0xffff0000

08007804 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08c      	sub	sp, #48	@ 0x30
 8007808:	af02      	add	r7, sp, #8
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	4608      	mov	r0, r1
 800780e:	4611      	mov	r1, r2
 8007810:	461a      	mov	r2, r3
 8007812:	4603      	mov	r3, r0
 8007814:	817b      	strh	r3, [r7, #10]
 8007816:	460b      	mov	r3, r1
 8007818:	813b      	strh	r3, [r7, #8]
 800781a:	4613      	mov	r3, r2
 800781c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800781e:	f7fe f8c1 	bl	80059a4 <HAL_GetTick>
 8007822:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b20      	cmp	r3, #32
 800782e:	f040 8214 	bne.w	8007c5a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	2319      	movs	r3, #25
 8007838:	2201      	movs	r2, #1
 800783a:	497b      	ldr	r1, [pc, #492]	@ (8007a28 <HAL_I2C_Mem_Read+0x224>)
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fe0f 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007848:	2302      	movs	r3, #2
 800784a:	e207      	b.n	8007c5c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <HAL_I2C_Mem_Read+0x56>
 8007856:	2302      	movs	r3, #2
 8007858:	e200      	b.n	8007c5c <HAL_I2C_Mem_Read+0x458>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b01      	cmp	r3, #1
 800786e:	d007      	beq.n	8007880 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0201 	orr.w	r2, r2, #1
 800787e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800788e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2222      	movs	r2, #34	@ 0x22
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2240      	movs	r2, #64	@ 0x40
 800789c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80078b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4a5b      	ldr	r2, [pc, #364]	@ (8007a2c <HAL_I2C_Mem_Read+0x228>)
 80078c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078c2:	88f8      	ldrh	r0, [r7, #6]
 80078c4:	893a      	ldrh	r2, [r7, #8]
 80078c6:	8979      	ldrh	r1, [r7, #10]
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ca:	9301      	str	r3, [sp, #4]
 80078cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	4603      	mov	r3, r0
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 fcdc 	bl	8008290 <I2C_RequestMemoryRead>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e1bc      	b.n	8007c5c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d113      	bne.n	8007912 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ea:	2300      	movs	r3, #0
 80078ec:	623b      	str	r3, [r7, #32]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	623b      	str	r3, [r7, #32]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	623b      	str	r3, [r7, #32]
 80078fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	e190      	b.n	8007c34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007916:	2b01      	cmp	r3, #1
 8007918:	d11b      	bne.n	8007952 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007928:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800792a:	2300      	movs	r3, #0
 800792c:	61fb      	str	r3, [r7, #28]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	61fb      	str	r3, [r7, #28]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	61fb      	str	r3, [r7, #28]
 800793e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	e170      	b.n	8007c34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007956:	2b02      	cmp	r3, #2
 8007958:	d11b      	bne.n	8007992 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007968:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007978:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800797a:	2300      	movs	r3, #0
 800797c:	61bb      	str	r3, [r7, #24]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	61bb      	str	r3, [r7, #24]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	61bb      	str	r3, [r7, #24]
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	e150      	b.n	8007c34 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80079a8:	e144      	b.n	8007c34 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	f200 80f1 	bhi.w	8007b96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d123      	bne.n	8007a04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 fef7 	bl	80087b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e145      	b.n	8007c5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691a      	ldr	r2, [r3, #16]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007a02:	e117      	b.n	8007c34 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d14e      	bne.n	8007aaa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a12:	2200      	movs	r2, #0
 8007a14:	4906      	ldr	r1, [pc, #24]	@ (8007a30 <HAL_I2C_Mem_Read+0x22c>)
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 fd22 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d008      	beq.n	8007a34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e11a      	b.n	8007c5c <HAL_I2C_Mem_Read+0x458>
 8007a26:	bf00      	nop
 8007a28:	00100002 	.word	0x00100002
 8007a2c:	ffff0000 	.word	0xffff0000
 8007a30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	691a      	ldr	r2, [r3, #16]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4e:	b2d2      	uxtb	r2, r2
 8007a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007aa8:	e0c4      	b.n	8007c34 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	496c      	ldr	r1, [pc, #432]	@ (8007c64 <HAL_I2C_Mem_Read+0x460>)
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 fcd3 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e0cb      	b.n	8007c5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ade:	b2d2      	uxtb	r2, r2
 8007ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	4955      	ldr	r1, [pc, #340]	@ (8007c64 <HAL_I2C_Mem_Read+0x460>)
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 fca5 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e09d      	b.n	8007c5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	691a      	ldr	r2, [r3, #16]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3a:	b2d2      	uxtb	r2, r2
 8007b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6c:	b2d2      	uxtb	r2, r2
 8007b6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b74:	1c5a      	adds	r2, r3, #1
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007b94:	e04e      	b.n	8007c34 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 fe0a 	bl	80087b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e058      	b.n	8007c5c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691a      	ldr	r2, [r3, #16]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbc:	1c5a      	adds	r2, r3, #1
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f003 0304 	and.w	r3, r3, #4
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d124      	bne.n	8007c34 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d107      	bne.n	8007c02 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691a      	ldr	r2, [r3, #16]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0c:	b2d2      	uxtb	r2, r2
 8007c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c14:	1c5a      	adds	r2, r3, #1
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f47f aeb6 	bne.w	80079aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	e000      	b.n	8007c5c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007c5a:	2302      	movs	r3, #2
  }
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3728      	adds	r7, #40	@ 0x28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	00010004 	.word	0x00010004

08007c68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08a      	sub	sp, #40	@ 0x28
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	607a      	str	r2, [r7, #4]
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	460b      	mov	r3, r1
 8007c76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007c78:	f7fd fe94 	bl	80059a4 <HAL_GetTick>
 8007c7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	f040 8111 	bne.w	8007eb2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	2319      	movs	r3, #25
 8007c96:	2201      	movs	r2, #1
 8007c98:	4988      	ldr	r1, [pc, #544]	@ (8007ebc <HAL_I2C_IsDeviceReady+0x254>)
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 fbe0 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	e104      	b.n	8007eb4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_I2C_IsDeviceReady+0x50>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e0fd      	b.n	8007eb4 <HAL_I2C_IsDeviceReady+0x24c>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d007      	beq.n	8007cde <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0201 	orr.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007cec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2224      	movs	r2, #36	@ 0x24
 8007cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4a70      	ldr	r2, [pc, #448]	@ (8007ec0 <HAL_I2C_IsDeviceReady+0x258>)
 8007d00:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 fb9e 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00d      	beq.n	8007d46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d38:	d103      	bne.n	8007d42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d40:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e0b6      	b.n	8007eb4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d46:	897b      	ldrh	r3, [r7, #10]
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007d54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007d56:	f7fd fe25 	bl	80059a4 <HAL_GetTick>
 8007d5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	bf0c      	ite	eq
 8007d6a:	2301      	moveq	r3, #1
 8007d6c:	2300      	movne	r3, #0
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d80:	bf0c      	ite	eq
 8007d82:	2301      	moveq	r3, #1
 8007d84:	2300      	movne	r3, #0
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007d8a:	e025      	b.n	8007dd8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d8c:	f7fd fe0a 	bl	80059a4 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d302      	bcc.n	8007da2 <HAL_I2C_IsDeviceReady+0x13a>
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d103      	bne.n	8007daa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	22a0      	movs	r2, #160	@ 0xa0
 8007da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	bf0c      	ite	eq
 8007db8:	2301      	moveq	r3, #1
 8007dba:	2300      	movne	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dce:	bf0c      	ite	eq
 8007dd0:	2301      	moveq	r3, #1
 8007dd2:	2300      	movne	r3, #0
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2ba0      	cmp	r3, #160	@ 0xa0
 8007de2:	d005      	beq.n	8007df0 <HAL_I2C_IsDeviceReady+0x188>
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d102      	bne.n	8007df0 <HAL_I2C_IsDeviceReady+0x188>
 8007dea:	7dbb      	ldrb	r3, [r7, #22]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0cd      	beq.n	8007d8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d129      	bne.n	8007e5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e14:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e16:	2300      	movs	r3, #0
 8007e18:	613b      	str	r3, [r7, #16]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	613b      	str	r3, [r7, #16]
 8007e2a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	2319      	movs	r3, #25
 8007e32:	2201      	movs	r2, #1
 8007e34:	4921      	ldr	r1, [pc, #132]	@ (8007ebc <HAL_I2C_IsDeviceReady+0x254>)
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 fb12 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e036      	b.n	8007eb4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	e02c      	b.n	8007eb4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e68:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007e72:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	2319      	movs	r3, #25
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	490f      	ldr	r1, [pc, #60]	@ (8007ebc <HAL_I2C_IsDeviceReady+0x254>)
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 faee 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e012      	b.n	8007eb4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	3301      	adds	r3, #1
 8007e92:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	f4ff af32 	bcc.w	8007d02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e000      	b.n	8007eb4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007eb2:	2302      	movs	r3, #2
  }
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3720      	adds	r7, #32
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	00100002 	.word	0x00100002
 8007ec0:	ffff0000 	.word	0xffff0000

08007ec4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	607a      	str	r2, [r7, #4]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	d006      	beq.n	8007eee <I2C_MasterRequestWrite+0x2a>
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d003      	beq.n	8007eee <I2C_MasterRequestWrite+0x2a>
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007eec:	d108      	bne.n	8007f00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	e00b      	b.n	8007f18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f04:	2b12      	cmp	r3, #18
 8007f06:	d107      	bne.n	8007f18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 fa9b 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00d      	beq.n	8007f4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f3e:	d103      	bne.n	8007f48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e035      	b.n	8007fb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f54:	d108      	bne.n	8007f68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f56:	897b      	ldrh	r3, [r7, #10]
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007f64:	611a      	str	r2, [r3, #16]
 8007f66:	e01b      	b.n	8007fa0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007f68:	897b      	ldrh	r3, [r7, #10]
 8007f6a:	11db      	asrs	r3, r3, #7
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	f003 0306 	and.w	r3, r3, #6
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f063 030f 	orn	r3, r3, #15
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	490e      	ldr	r1, [pc, #56]	@ (8007fc0 <I2C_MasterRequestWrite+0xfc>)
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 fae4 	bl	8008554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e010      	b.n	8007fb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007f96:	897b      	ldrh	r3, [r7, #10]
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	4907      	ldr	r1, [pc, #28]	@ (8007fc4 <I2C_MasterRequestWrite+0x100>)
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 fad4 	bl	8008554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e000      	b.n	8007fb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	00010008 	.word	0x00010008
 8007fc4:	00010002 	.word	0x00010002

08007fc8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	607a      	str	r2, [r7, #4]
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fdc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007fec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b08      	cmp	r3, #8
 8007ff2:	d006      	beq.n	8008002 <I2C_MasterRequestRead+0x3a>
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d003      	beq.n	8008002 <I2C_MasterRequestRead+0x3a>
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008000:	d108      	bne.n	8008014 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	e00b      	b.n	800802c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008018:	2b11      	cmp	r3, #17
 800801a:	d107      	bne.n	800802c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800802a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 fa11 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00d      	beq.n	8008060 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800804e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008052:	d103      	bne.n	800805c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800805a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e079      	b.n	8008154 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008068:	d108      	bne.n	800807c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800806a:	897b      	ldrh	r3, [r7, #10]
 800806c:	b2db      	uxtb	r3, r3
 800806e:	f043 0301 	orr.w	r3, r3, #1
 8008072:	b2da      	uxtb	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	611a      	str	r2, [r3, #16]
 800807a:	e05f      	b.n	800813c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800807c:	897b      	ldrh	r3, [r7, #10]
 800807e:	11db      	asrs	r3, r3, #7
 8008080:	b2db      	uxtb	r3, r3
 8008082:	f003 0306 	and.w	r3, r3, #6
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f063 030f 	orn	r3, r3, #15
 800808c:	b2da      	uxtb	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	4930      	ldr	r1, [pc, #192]	@ (800815c <I2C_MasterRequestRead+0x194>)
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 fa5a 	bl	8008554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e054      	b.n	8008154 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80080aa:	897b      	ldrh	r3, [r7, #10]
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	4929      	ldr	r1, [pc, #164]	@ (8008160 <I2C_MasterRequestRead+0x198>)
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fa4a 	bl	8008554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e044      	b.n	8008154 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ca:	2300      	movs	r3, #0
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	613b      	str	r3, [r7, #16]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	613b      	str	r3, [r7, #16]
 80080de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 f9af 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00d      	beq.n	8008124 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008116:	d103      	bne.n	8008120 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800811e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e017      	b.n	8008154 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008124:	897b      	ldrh	r3, [r7, #10]
 8008126:	11db      	asrs	r3, r3, #7
 8008128:	b2db      	uxtb	r3, r3
 800812a:	f003 0306 	and.w	r3, r3, #6
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f063 030e 	orn	r3, r3, #14
 8008134:	b2da      	uxtb	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	4907      	ldr	r1, [pc, #28]	@ (8008160 <I2C_MasterRequestRead+0x198>)
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 fa06 	bl	8008554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e000      	b.n	8008154 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3718      	adds	r7, #24
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	00010008 	.word	0x00010008
 8008160:	00010002 	.word	0x00010002

08008164 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af02      	add	r7, sp, #8
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	4608      	mov	r0, r1
 800816e:	4611      	mov	r1, r2
 8008170:	461a      	mov	r2, r3
 8008172:	4603      	mov	r3, r0
 8008174:	817b      	strh	r3, [r7, #10]
 8008176:	460b      	mov	r3, r1
 8008178:	813b      	strh	r3, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800818c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	2200      	movs	r2, #0
 8008196:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 f960 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00d      	beq.n	80081c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081b4:	d103      	bne.n	80081be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e05f      	b.n	8008282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081c2:	897b      	ldrh	r3, [r7, #10]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	461a      	mov	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80081d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	6a3a      	ldr	r2, [r7, #32]
 80081d6:	492d      	ldr	r1, [pc, #180]	@ (800828c <I2C_RequestMemoryWrite+0x128>)
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f9bb 	bl	8008554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e04c      	b.n	8008282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081e8:	2300      	movs	r3, #0
 80081ea:	617b      	str	r3, [r7, #20]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008200:	6a39      	ldr	r1, [r7, #32]
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 fa46 	bl	8008694 <I2C_WaitOnTXEFlagUntilTimeout>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00d      	beq.n	800822a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008212:	2b04      	cmp	r3, #4
 8008214:	d107      	bne.n	8008226 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008224:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e02b      	b.n	8008282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d105      	bne.n	800823c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008230:	893b      	ldrh	r3, [r7, #8]
 8008232:	b2da      	uxtb	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	611a      	str	r2, [r3, #16]
 800823a:	e021      	b.n	8008280 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800823c:	893b      	ldrh	r3, [r7, #8]
 800823e:	0a1b      	lsrs	r3, r3, #8
 8008240:	b29b      	uxth	r3, r3
 8008242:	b2da      	uxtb	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800824a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800824c:	6a39      	ldr	r1, [r7, #32]
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fa20 	bl	8008694 <I2C_WaitOnTXEFlagUntilTimeout>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00d      	beq.n	8008276 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825e:	2b04      	cmp	r3, #4
 8008260:	d107      	bne.n	8008272 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008270:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e005      	b.n	8008282 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008276:	893b      	ldrh	r3, [r7, #8]
 8008278:	b2da      	uxtb	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	00010002 	.word	0x00010002

08008290 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b088      	sub	sp, #32
 8008294:	af02      	add	r7, sp, #8
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	4608      	mov	r0, r1
 800829a:	4611      	mov	r1, r2
 800829c:	461a      	mov	r2, r3
 800829e:	4603      	mov	r3, r0
 80082a0:	817b      	strh	r3, [r7, #10]
 80082a2:	460b      	mov	r3, r1
 80082a4:	813b      	strh	r3, [r7, #8]
 80082a6:	4613      	mov	r3, r2
 80082a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80082b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 f8c2 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00d      	beq.n	80082fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082f0:	d103      	bne.n	80082fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e0aa      	b.n	8008454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80082fe:	897b      	ldrh	r3, [r7, #10]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	461a      	mov	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800830c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	6a3a      	ldr	r2, [r7, #32]
 8008312:	4952      	ldr	r1, [pc, #328]	@ (800845c <I2C_RequestMemoryRead+0x1cc>)
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f000 f91d 	bl	8008554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e097      	b.n	8008454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008324:	2300      	movs	r3, #0
 8008326:	617b      	str	r3, [r7, #20]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800833a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800833c:	6a39      	ldr	r1, [r7, #32]
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f000 f9a8 	bl	8008694 <I2C_WaitOnTXEFlagUntilTimeout>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00d      	beq.n	8008366 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834e:	2b04      	cmp	r3, #4
 8008350:	d107      	bne.n	8008362 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008360:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e076      	b.n	8008454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008366:	88fb      	ldrh	r3, [r7, #6]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d105      	bne.n	8008378 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800836c:	893b      	ldrh	r3, [r7, #8]
 800836e:	b2da      	uxtb	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	611a      	str	r2, [r3, #16]
 8008376:	e021      	b.n	80083bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008378:	893b      	ldrh	r3, [r7, #8]
 800837a:	0a1b      	lsrs	r3, r3, #8
 800837c:	b29b      	uxth	r3, r3
 800837e:	b2da      	uxtb	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008388:	6a39      	ldr	r1, [r7, #32]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 f982 	bl	8008694 <I2C_WaitOnTXEFlagUntilTimeout>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00d      	beq.n	80083b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800839a:	2b04      	cmp	r3, #4
 800839c:	d107      	bne.n	80083ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e050      	b.n	8008454 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083b2:	893b      	ldrh	r3, [r7, #8]
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083be:	6a39      	ldr	r1, [r7, #32]
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 f967 	bl	8008694 <I2C_WaitOnTXEFlagUntilTimeout>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00d      	beq.n	80083e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	d107      	bne.n	80083e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e035      	b.n	8008454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	2200      	movs	r2, #0
 8008400:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 f82b 	bl	8008460 <I2C_WaitOnFlagUntilTimeout>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00d      	beq.n	800842c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800841a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800841e:	d103      	bne.n	8008428 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008426:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e013      	b.n	8008454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800842c:	897b      	ldrh	r3, [r7, #10]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	f043 0301 	orr.w	r3, r3, #1
 8008434:	b2da      	uxtb	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800843c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843e:	6a3a      	ldr	r2, [r7, #32]
 8008440:	4906      	ldr	r1, [pc, #24]	@ (800845c <I2C_RequestMemoryRead+0x1cc>)
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 f886 	bl	8008554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	00010002 	.word	0x00010002

08008460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	4613      	mov	r3, r2
 800846e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008470:	e048      	b.n	8008504 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008478:	d044      	beq.n	8008504 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800847a:	f7fd fa93 	bl	80059a4 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d302      	bcc.n	8008490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d139      	bne.n	8008504 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	0c1b      	lsrs	r3, r3, #16
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b01      	cmp	r3, #1
 8008498:	d10d      	bne.n	80084b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	43da      	mvns	r2, r3
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	4013      	ands	r3, r2
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	bf0c      	ite	eq
 80084ac:	2301      	moveq	r3, #1
 80084ae:	2300      	movne	r3, #0
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	461a      	mov	r2, r3
 80084b4:	e00c      	b.n	80084d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	43da      	mvns	r2, r3
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	4013      	ands	r3, r2
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	bf0c      	ite	eq
 80084c8:	2301      	moveq	r3, #1
 80084ca:	2300      	movne	r3, #0
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	461a      	mov	r2, r3
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d116      	bne.n	8008504 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2220      	movs	r2, #32
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f0:	f043 0220 	orr.w	r2, r3, #32
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e023      	b.n	800854c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	0c1b      	lsrs	r3, r3, #16
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b01      	cmp	r3, #1
 800850c:	d10d      	bne.n	800852a <I2C_WaitOnFlagUntilTimeout+0xca>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	43da      	mvns	r2, r3
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	4013      	ands	r3, r2
 800851a:	b29b      	uxth	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	bf0c      	ite	eq
 8008520:	2301      	moveq	r3, #1
 8008522:	2300      	movne	r3, #0
 8008524:	b2db      	uxtb	r3, r3
 8008526:	461a      	mov	r2, r3
 8008528:	e00c      	b.n	8008544 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	43da      	mvns	r2, r3
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	4013      	ands	r3, r2
 8008536:	b29b      	uxth	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	bf0c      	ite	eq
 800853c:	2301      	moveq	r3, #1
 800853e:	2300      	movne	r3, #0
 8008540:	b2db      	uxtb	r3, r3
 8008542:	461a      	mov	r2, r3
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	429a      	cmp	r2, r3
 8008548:	d093      	beq.n	8008472 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008562:	e071      	b.n	8008648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800856e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008572:	d123      	bne.n	80085bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008582:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800858c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2220      	movs	r2, #32
 8008598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a8:	f043 0204 	orr.w	r2, r3, #4
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e067      	b.n	800868c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c2:	d041      	beq.n	8008648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085c4:	f7fd f9ee 	bl	80059a4 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d302      	bcc.n	80085da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d136      	bne.n	8008648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	0c1b      	lsrs	r3, r3, #16
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d10c      	bne.n	80085fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	43da      	mvns	r2, r3
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	4013      	ands	r3, r2
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	bf14      	ite	ne
 80085f6:	2301      	movne	r3, #1
 80085f8:	2300      	moveq	r3, #0
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	e00b      	b.n	8008616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	43da      	mvns	r2, r3
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	4013      	ands	r3, r2
 800860a:	b29b      	uxth	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	bf14      	ite	ne
 8008610:	2301      	movne	r3, #1
 8008612:	2300      	moveq	r3, #0
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d016      	beq.n	8008648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008634:	f043 0220 	orr.w	r2, r3, #32
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e021      	b.n	800868c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b01      	cmp	r3, #1
 8008650:	d10c      	bne.n	800866c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	43da      	mvns	r2, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	4013      	ands	r3, r2
 800865e:	b29b      	uxth	r3, r3
 8008660:	2b00      	cmp	r3, #0
 8008662:	bf14      	ite	ne
 8008664:	2301      	movne	r3, #1
 8008666:	2300      	moveq	r3, #0
 8008668:	b2db      	uxtb	r3, r3
 800866a:	e00b      	b.n	8008684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	43da      	mvns	r2, r3
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4013      	ands	r3, r2
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	bf14      	ite	ne
 800867e:	2301      	movne	r3, #1
 8008680:	2300      	moveq	r3, #0
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b00      	cmp	r3, #0
 8008686:	f47f af6d 	bne.w	8008564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086a0:	e034      	b.n	800870c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f000 f8e3 	bl	800886e <I2C_IsAcknowledgeFailed>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e034      	b.n	800871c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b8:	d028      	beq.n	800870c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ba:	f7fd f973 	bl	80059a4 <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d302      	bcc.n	80086d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d11d      	bne.n	800870c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086da:	2b80      	cmp	r3, #128	@ 0x80
 80086dc:	d016      	beq.n	800870c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f8:	f043 0220 	orr.w	r2, r3, #32
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e007      	b.n	800871c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008716:	2b80      	cmp	r3, #128	@ 0x80
 8008718:	d1c3      	bne.n	80086a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008730:	e034      	b.n	800879c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 f89b 	bl	800886e <I2C_IsAcknowledgeFailed>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e034      	b.n	80087ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008748:	d028      	beq.n	800879c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800874a:	f7fd f92b 	bl	80059a4 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	429a      	cmp	r2, r3
 8008758:	d302      	bcc.n	8008760 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d11d      	bne.n	800879c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	f003 0304 	and.w	r3, r3, #4
 800876a:	2b04      	cmp	r3, #4
 800876c:	d016      	beq.n	800879c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2220      	movs	r2, #32
 8008778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008788:	f043 0220 	orr.w	r2, r3, #32
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e007      	b.n	80087ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	d1c3      	bne.n	8008732 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087c0:	e049      	b.n	8008856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	f003 0310 	and.w	r3, r3, #16
 80087cc:	2b10      	cmp	r3, #16
 80087ce:	d119      	bne.n	8008804 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f06f 0210 	mvn.w	r2, #16
 80087d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e030      	b.n	8008866 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008804:	f7fd f8ce 	bl	80059a4 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	429a      	cmp	r2, r3
 8008812:	d302      	bcc.n	800881a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d11d      	bne.n	8008856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008824:	2b40      	cmp	r3, #64	@ 0x40
 8008826:	d016      	beq.n	8008856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2220      	movs	r2, #32
 8008832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008842:	f043 0220 	orr.w	r2, r3, #32
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e007      	b.n	8008866 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008860:	2b40      	cmp	r3, #64	@ 0x40
 8008862:	d1ae      	bne.n	80087c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008884:	d11b      	bne.n	80088be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800888e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088aa:	f043 0204 	orr.w	r2, r3, #4
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e000      	b.n	80088c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af02      	add	r7, sp, #8
 80088d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e101      	b.n	8008ae2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d106      	bne.n	80088fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f00a fcb1 	bl	8013260 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2203      	movs	r2, #3
 8008902:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800890c:	d102      	bne.n	8008914 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4618      	mov	r0, r3
 800891a:	f003 fdfe 	bl	800c51a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	7c1a      	ldrb	r2, [r3, #16]
 8008926:	f88d 2000 	strb.w	r2, [sp]
 800892a:	3304      	adds	r3, #4
 800892c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800892e:	f003 fcdd 	bl	800c2ec <USB_CoreInit>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e0ce      	b.n	8008ae2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2100      	movs	r1, #0
 800894a:	4618      	mov	r0, r3
 800894c:	f003 fdf6 	bl	800c53c <USB_SetCurrentMode>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d005      	beq.n	8008962 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2202      	movs	r2, #2
 800895a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e0bf      	b.n	8008ae2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008962:	2300      	movs	r3, #0
 8008964:	73fb      	strb	r3, [r7, #15]
 8008966:	e04a      	b.n	80089fe <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008968:	7bfa      	ldrb	r2, [r7, #15]
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	4613      	mov	r3, r2
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	440b      	add	r3, r1
 8008976:	3315      	adds	r3, #21
 8008978:	2201      	movs	r2, #1
 800897a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800897c:	7bfa      	ldrb	r2, [r7, #15]
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	4613      	mov	r3, r2
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	440b      	add	r3, r1
 800898a:	3314      	adds	r3, #20
 800898c:	7bfa      	ldrb	r2, [r7, #15]
 800898e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008990:	7bfa      	ldrb	r2, [r7, #15]
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	b298      	uxth	r0, r3
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	4613      	mov	r3, r2
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	4413      	add	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	440b      	add	r3, r1
 80089a2:	332e      	adds	r3, #46	@ 0x2e
 80089a4:	4602      	mov	r2, r0
 80089a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80089a8:	7bfa      	ldrb	r2, [r7, #15]
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	4613      	mov	r3, r2
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	4413      	add	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	440b      	add	r3, r1
 80089b6:	3318      	adds	r3, #24
 80089b8:	2200      	movs	r2, #0
 80089ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80089bc:	7bfa      	ldrb	r2, [r7, #15]
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	4613      	mov	r3, r2
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	4413      	add	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	440b      	add	r3, r1
 80089ca:	331c      	adds	r3, #28
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80089d0:	7bfa      	ldrb	r2, [r7, #15]
 80089d2:	6879      	ldr	r1, [r7, #4]
 80089d4:	4613      	mov	r3, r2
 80089d6:	00db      	lsls	r3, r3, #3
 80089d8:	4413      	add	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	440b      	add	r3, r1
 80089de:	3320      	adds	r3, #32
 80089e0:	2200      	movs	r2, #0
 80089e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80089e4:	7bfa      	ldrb	r2, [r7, #15]
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	4613      	mov	r3, r2
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	4413      	add	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	440b      	add	r3, r1
 80089f2:	3324      	adds	r3, #36	@ 0x24
 80089f4:	2200      	movs	r2, #0
 80089f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	3301      	adds	r3, #1
 80089fc:	73fb      	strb	r3, [r7, #15]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	791b      	ldrb	r3, [r3, #4]
 8008a02:	7bfa      	ldrb	r2, [r7, #15]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d3af      	bcc.n	8008968 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
 8008a0c:	e044      	b.n	8008a98 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008a0e:	7bfa      	ldrb	r2, [r7, #15]
 8008a10:	6879      	ldr	r1, [r7, #4]
 8008a12:	4613      	mov	r3, r2
 8008a14:	00db      	lsls	r3, r3, #3
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	440b      	add	r3, r1
 8008a1c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008a20:	2200      	movs	r2, #0
 8008a22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008a24:	7bfa      	ldrb	r2, [r7, #15]
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008a36:	7bfa      	ldrb	r2, [r7, #15]
 8008a38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008a3a:	7bfa      	ldrb	r2, [r7, #15]
 8008a3c:	6879      	ldr	r1, [r7, #4]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	00db      	lsls	r3, r3, #3
 8008a42:	4413      	add	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	440b      	add	r3, r1
 8008a48:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008a50:	7bfa      	ldrb	r2, [r7, #15]
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	4613      	mov	r3, r2
 8008a56:	00db      	lsls	r3, r3, #3
 8008a58:	4413      	add	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	440b      	add	r3, r1
 8008a5e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008a66:	7bfa      	ldrb	r2, [r7, #15]
 8008a68:	6879      	ldr	r1, [r7, #4]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	00db      	lsls	r3, r3, #3
 8008a6e:	4413      	add	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	440b      	add	r3, r1
 8008a74:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008a7c:	7bfa      	ldrb	r2, [r7, #15]
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4613      	mov	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	3301      	adds	r3, #1
 8008a96:	73fb      	strb	r3, [r7, #15]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	791b      	ldrb	r3, [r3, #4]
 8008a9c:	7bfa      	ldrb	r2, [r7, #15]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d3b5      	bcc.n	8008a0e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6818      	ldr	r0, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	7c1a      	ldrb	r2, [r3, #16]
 8008aaa:	f88d 2000 	strb.w	r2, [sp]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ab2:	f003 fd8f 	bl	800c5d4 <USB_DevInit>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e00c      	b.n	8008ae2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f004 fdd9 	bl	800d692 <USB_DevDisconnect>

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b084      	sub	sp, #16
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d101      	bne.n	8008b06 <HAL_PCD_Start+0x1c>
 8008b02:	2302      	movs	r3, #2
 8008b04:	e022      	b.n	8008b4c <HAL_PCD_Start+0x62>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d009      	beq.n	8008b2e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d105      	bne.n	8008b2e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b26:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f003 fce0 	bl	800c4f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f004 fd87 	bl	800d650 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008b54:	b590      	push	{r4, r7, lr}
 8008b56:	b08d      	sub	sp, #52	@ 0x34
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f004 fe45 	bl	800d7fa <USB_GetMode>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f040 848c 	bne.w	8009490 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f004 fda9 	bl	800d6d4 <USB_ReadInterrupts>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 8482 	beq.w	800948e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	0a1b      	lsrs	r3, r3, #8
 8008b94:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f004 fd96 	bl	800d6d4 <USB_ReadInterrupts>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d107      	bne.n	8008bc2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	695a      	ldr	r2, [r3, #20]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f002 0202 	and.w	r2, r2, #2
 8008bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f004 fd84 	bl	800d6d4 <USB_ReadInterrupts>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	f003 0310 	and.w	r3, r3, #16
 8008bd2:	2b10      	cmp	r3, #16
 8008bd4:	d161      	bne.n	8008c9a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	699a      	ldr	r2, [r3, #24]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f022 0210 	bic.w	r2, r2, #16
 8008be4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	f003 020f 	and.w	r2, r3, #15
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	4413      	add	r3, r2
 8008c02:	3304      	adds	r3, #4
 8008c04:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008c0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c10:	d124      	bne.n	8008c5c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008c18:	4013      	ands	r3, r2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d035      	beq.n	8008c8a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	091b      	lsrs	r3, r3, #4
 8008c26:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008c28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	461a      	mov	r2, r3
 8008c30:	6a38      	ldr	r0, [r7, #32]
 8008c32:	f004 fbbb 	bl	800d3ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	091b      	lsrs	r3, r3, #4
 8008c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c42:	441a      	add	r2, r3
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	695a      	ldr	r2, [r3, #20]
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	091b      	lsrs	r3, r3, #4
 8008c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c54:	441a      	add	r2, r3
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	615a      	str	r2, [r3, #20]
 8008c5a:	e016      	b.n	8008c8a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008c62:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008c66:	d110      	bne.n	8008c8a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008c6e:	2208      	movs	r2, #8
 8008c70:	4619      	mov	r1, r3
 8008c72:	6a38      	ldr	r0, [r7, #32]
 8008c74:	f004 fb9a 	bl	800d3ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	695a      	ldr	r2, [r3, #20]
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	091b      	lsrs	r3, r3, #4
 8008c80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c84:	441a      	add	r2, r3
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	699a      	ldr	r2, [r3, #24]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f042 0210 	orr.w	r2, r2, #16
 8008c98:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f004 fd18 	bl	800d6d4 <USB_ReadInterrupts>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008caa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008cae:	f040 80a7 	bne.w	8008e00 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f004 fd1d 	bl	800d6fa <USB_ReadDevAllOutEpInterrupt>
 8008cc0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008cc2:	e099      	b.n	8008df8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 808e 	beq.w	8008dec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	4611      	mov	r1, r2
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f004 fd41 	bl	800d762 <USB_ReadDevOutEPInterrupt>
 8008ce0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00c      	beq.n	8008d06 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008cfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fea3 	bl	8009a4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	f003 0308 	and.w	r3, r3, #8
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00c      	beq.n	8008d2a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	2308      	movs	r3, #8
 8008d20:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008d22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 ff79 	bl	8009c1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f003 0310 	and.w	r3, r3, #16
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d008      	beq.n	8008d46 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d40:	461a      	mov	r2, r3
 8008d42:	2310      	movs	r3, #16
 8008d44:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d030      	beq.n	8008db2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d58:	2b80      	cmp	r3, #128	@ 0x80
 8008d5a:	d109      	bne.n	8008d70 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	69fa      	ldr	r2, [r7, #28]
 8008d66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008d6e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d72:	4613      	mov	r3, r2
 8008d74:	00db      	lsls	r3, r3, #3
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	4413      	add	r3, r2
 8008d82:	3304      	adds	r3, #4
 8008d84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	78db      	ldrb	r3, [r3, #3]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d108      	bne.n	8008da0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2200      	movs	r2, #0
 8008d92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f00a fb5c 	bl	8013458 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da2:	015a      	lsls	r2, r3, #5
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dac:	461a      	mov	r2, r3
 8008dae:	2302      	movs	r3, #2
 8008db0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f003 0320 	and.w	r3, r3, #32
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d008      	beq.n	8008dce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dc8:	461a      	mov	r2, r3
 8008dca:	2320      	movs	r3, #32
 8008dcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d009      	beq.n	8008dec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de4:	461a      	mov	r2, r3
 8008de6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008dea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dee:	3301      	adds	r3, #1
 8008df0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df4:	085b      	lsrs	r3, r3, #1
 8008df6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f47f af62 	bne.w	8008cc4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f004 fc65 	bl	800d6d4 <USB_ReadInterrupts>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008e10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e14:	f040 80db 	bne.w	8008fce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f004 fc86 	bl	800d72e <USB_ReadDevAllInEpInterrupt>
 8008e22:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008e28:	e0cd      	b.n	8008fc6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 80c2 	beq.w	8008fba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e3c:	b2d2      	uxtb	r2, r2
 8008e3e:	4611      	mov	r1, r2
 8008e40:	4618      	mov	r0, r3
 8008e42:	f004 fcac 	bl	800d79e <USB_ReadDevInEPInterrupt>
 8008e46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d057      	beq.n	8008f02 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e54:	f003 030f 	and.w	r3, r3, #15
 8008e58:	2201      	movs	r2, #1
 8008e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	43db      	mvns	r3, r3
 8008e6c:	69f9      	ldr	r1, [r7, #28]
 8008e6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e72:	4013      	ands	r3, r2
 8008e74:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e82:	461a      	mov	r2, r3
 8008e84:	2301      	movs	r3, #1
 8008e86:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	799b      	ldrb	r3, [r3, #6]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d132      	bne.n	8008ef6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008e90:	6879      	ldr	r1, [r7, #4]
 8008e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e94:	4613      	mov	r3, r2
 8008e96:	00db      	lsls	r3, r3, #3
 8008e98:	4413      	add	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	440b      	add	r3, r1
 8008e9e:	3320      	adds	r3, #32
 8008ea0:	6819      	ldr	r1, [r3, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	00db      	lsls	r3, r3, #3
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4403      	add	r3, r0
 8008eb0:	331c      	adds	r3, #28
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4419      	add	r1, r3
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eba:	4613      	mov	r3, r2
 8008ebc:	00db      	lsls	r3, r3, #3
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4403      	add	r3, r0
 8008ec4:	3320      	adds	r3, #32
 8008ec6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d113      	bne.n	8008ef6 <HAL_PCD_IRQHandler+0x3a2>
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	00db      	lsls	r3, r3, #3
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	440b      	add	r3, r1
 8008edc:	3324      	adds	r3, #36	@ 0x24
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d108      	bne.n	8008ef6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008eee:	461a      	mov	r2, r3
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	f004 fcb3 	bl	800d85c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f00a fa30 	bl	8013362 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	f003 0308 	and.w	r3, r3, #8
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d008      	beq.n	8008f1e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f18:	461a      	mov	r2, r3
 8008f1a:	2308      	movs	r3, #8
 8008f1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f003 0310 	and.w	r3, r3, #16
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d008      	beq.n	8008f3a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f34:	461a      	mov	r2, r3
 8008f36:	2310      	movs	r3, #16
 8008f38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d008      	beq.n	8008f56 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f50:	461a      	mov	r2, r3
 8008f52:	2340      	movs	r3, #64	@ 0x40
 8008f54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d023      	beq.n	8008fa8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008f60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f62:	6a38      	ldr	r0, [r7, #32]
 8008f64:	f003 fc9a 	bl	800c89c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	3310      	adds	r3, #16
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	4413      	add	r3, r2
 8008f78:	3304      	adds	r3, #4
 8008f7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	78db      	ldrb	r3, [r3, #3]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d108      	bne.n	8008f96 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	2200      	movs	r2, #0
 8008f88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f00a fa73 	bl	801347c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008fb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fcbd 	bl	8009934 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc2:	085b      	lsrs	r3, r3, #1
 8008fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f47f af2e 	bne.w	8008e2a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f004 fb7e 	bl	800d6d4 <USB_ReadInterrupts>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fe2:	d122      	bne.n	800902a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	69fa      	ldr	r2, [r7, #28]
 8008fee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ff2:	f023 0301 	bic.w	r3, r3, #1
 8008ff6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d108      	bne.n	8009014 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800900a:	2100      	movs	r1, #0
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fea3 	bl	8009d58 <HAL_PCDEx_LPM_Callback>
 8009012:	e002      	b.n	800901a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f00a fa11 	bl	801343c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	695a      	ldr	r2, [r3, #20]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8009028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4618      	mov	r0, r3
 8009030:	f004 fb50 	bl	800d6d4 <USB_ReadInterrupts>
 8009034:	4603      	mov	r3, r0
 8009036:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800903a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800903e:	d112      	bne.n	8009066 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	2b01      	cmp	r3, #1
 800904e:	d102      	bne.n	8009056 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f00a f9cd 	bl	80133f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	695a      	ldr	r2, [r3, #20]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8009064:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4618      	mov	r0, r3
 800906c:	f004 fb32 	bl	800d6d4 <USB_ReadInterrupts>
 8009070:	4603      	mov	r3, r0
 8009072:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800907a:	f040 80b7 	bne.w	80091ec <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800908c:	f023 0301 	bic.w	r3, r3, #1
 8009090:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2110      	movs	r1, #16
 8009098:	4618      	mov	r0, r3
 800909a:	f003 fbff 	bl	800c89c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800909e:	2300      	movs	r3, #0
 80090a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090a2:	e046      	b.n	8009132 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80090a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090b0:	461a      	mov	r2, r3
 80090b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80090b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80090b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090c8:	0151      	lsls	r1, r2, #5
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	440a      	add	r2, r1
 80090ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80090d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80090d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090da:	015a      	lsls	r2, r3, #5
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	4413      	add	r3, r2
 80090e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090e4:	461a      	mov	r2, r3
 80090e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80090ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80090ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090fc:	0151      	lsls	r1, r2, #5
 80090fe:	69fa      	ldr	r2, [r7, #28]
 8009100:	440a      	add	r2, r1
 8009102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009106:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800910a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800910c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800911c:	0151      	lsls	r1, r2, #5
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	440a      	add	r2, r1
 8009122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009126:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800912a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800912c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800912e:	3301      	adds	r3, #1
 8009130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	791b      	ldrb	r3, [r3, #4]
 8009136:	461a      	mov	r2, r3
 8009138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913a:	4293      	cmp	r3, r2
 800913c:	d3b2      	bcc.n	80090a4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009144:	69db      	ldr	r3, [r3, #28]
 8009146:	69fa      	ldr	r2, [r7, #28]
 8009148:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800914c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009150:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	7bdb      	ldrb	r3, [r3, #15]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d016      	beq.n	8009188 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009164:	69fa      	ldr	r2, [r7, #28]
 8009166:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800916a:	f043 030b 	orr.w	r3, r3, #11
 800916e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800917a:	69fa      	ldr	r2, [r7, #28]
 800917c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009180:	f043 030b 	orr.w	r3, r3, #11
 8009184:	6453      	str	r3, [r2, #68]	@ 0x44
 8009186:	e015      	b.n	80091b4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	69fa      	ldr	r2, [r7, #28]
 8009192:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009196:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800919a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800919e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	69fa      	ldr	r2, [r7, #28]
 80091aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091ae:	f043 030b 	orr.w	r3, r3, #11
 80091b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	69fa      	ldr	r2, [r7, #28]
 80091be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80091c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6818      	ldr	r0, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80091d6:	461a      	mov	r2, r3
 80091d8:	f004 fb40 	bl	800d85c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	695a      	ldr	r2, [r3, #20]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80091ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f004 fa6f 	bl	800d6d4 <USB_ReadInterrupts>
 80091f6:	4603      	mov	r3, r0
 80091f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009200:	d123      	bne.n	800924a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4618      	mov	r0, r3
 8009208:	f004 fb05 	bl	800d816 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4618      	mov	r0, r3
 8009212:	f003 fbbc 	bl	800c98e <USB_GetDevSpeed>
 8009216:	4603      	mov	r3, r0
 8009218:	461a      	mov	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681c      	ldr	r4, [r3, #0]
 8009222:	f001 f9c9 	bl	800a5b8 <HAL_RCC_GetHCLKFreq>
 8009226:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800922c:	461a      	mov	r2, r3
 800922e:	4620      	mov	r0, r4
 8009230:	f003 f8c0 	bl	800c3b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f00a f8bc 	bl	80133b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	695a      	ldr	r2, [r3, #20]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8009248:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4618      	mov	r0, r3
 8009250:	f004 fa40 	bl	800d6d4 <USB_ReadInterrupts>
 8009254:	4603      	mov	r3, r0
 8009256:	f003 0308 	and.w	r3, r3, #8
 800925a:	2b08      	cmp	r3, #8
 800925c:	d10a      	bne.n	8009274 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f00a f899 	bl	8013396 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	695a      	ldr	r2, [r3, #20]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f002 0208 	and.w	r2, r2, #8
 8009272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4618      	mov	r0, r3
 800927a:	f004 fa2b 	bl	800d6d4 <USB_ReadInterrupts>
 800927e:	4603      	mov	r3, r0
 8009280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009284:	2b80      	cmp	r3, #128	@ 0x80
 8009286:	d123      	bne.n	80092d0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009294:	2301      	movs	r3, #1
 8009296:	627b      	str	r3, [r7, #36]	@ 0x24
 8009298:	e014      	b.n	80092c4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800929e:	4613      	mov	r3, r2
 80092a0:	00db      	lsls	r3, r3, #3
 80092a2:	4413      	add	r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	440b      	add	r3, r1
 80092a8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d105      	bne.n	80092be <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80092b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fb0a 	bl	80098d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c0:	3301      	adds	r3, #1
 80092c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	791b      	ldrb	r3, [r3, #4]
 80092c8:	461a      	mov	r2, r3
 80092ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d3e4      	bcc.n	800929a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f004 f9fd 	bl	800d6d4 <USB_ReadInterrupts>
 80092da:	4603      	mov	r3, r0
 80092dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092e4:	d13c      	bne.n	8009360 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092e6:	2301      	movs	r3, #1
 80092e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80092ea:	e02b      	b.n	8009344 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80092ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009300:	4613      	mov	r3, r2
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	440b      	add	r3, r1
 800930a:	3318      	adds	r3, #24
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d115      	bne.n	800933e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009312:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009314:	2b00      	cmp	r3, #0
 8009316:	da12      	bge.n	800933e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800931c:	4613      	mov	r3, r2
 800931e:	00db      	lsls	r3, r3, #3
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	440b      	add	r3, r1
 8009326:	3317      	adds	r3, #23
 8009328:	2201      	movs	r2, #1
 800932a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800932c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932e:	b2db      	uxtb	r3, r3
 8009330:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009334:	b2db      	uxtb	r3, r3
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 faca 	bl	80098d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009340:	3301      	adds	r3, #1
 8009342:	627b      	str	r3, [r7, #36]	@ 0x24
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	791b      	ldrb	r3, [r3, #4]
 8009348:	461a      	mov	r2, r3
 800934a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934c:	4293      	cmp	r3, r2
 800934e:	d3cd      	bcc.n	80092ec <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	695a      	ldr	r2, [r3, #20]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800935e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4618      	mov	r0, r3
 8009366:	f004 f9b5 	bl	800d6d4 <USB_ReadInterrupts>
 800936a:	4603      	mov	r3, r0
 800936c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009370:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009374:	d156      	bne.n	8009424 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009376:	2301      	movs	r3, #1
 8009378:	627b      	str	r3, [r7, #36]	@ 0x24
 800937a:	e045      	b.n	8009408 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	4413      	add	r3, r2
 8009384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009390:	4613      	mov	r3, r2
 8009392:	00db      	lsls	r3, r3, #3
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	440b      	add	r3, r1
 800939a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d12e      	bne.n	8009402 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80093a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	da2b      	bge.n	8009402 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	0c1a      	lsrs	r2, r3, #16
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80093b4:	4053      	eors	r3, r2
 80093b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d121      	bne.n	8009402 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093c2:	4613      	mov	r3, r2
 80093c4:	00db      	lsls	r3, r3, #3
 80093c6:	4413      	add	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	440b      	add	r3, r1
 80093cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80093d0:	2201      	movs	r2, #1
 80093d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80093dc:	6a3b      	ldr	r3, [r7, #32]
 80093de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10a      	bne.n	8009402 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	69fa      	ldr	r2, [r7, #28]
 80093f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80093fe:	6053      	str	r3, [r2, #4]
            break;
 8009400:	e008      	b.n	8009414 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009404:	3301      	adds	r3, #1
 8009406:	627b      	str	r3, [r7, #36]	@ 0x24
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	791b      	ldrb	r3, [r3, #4]
 800940c:	461a      	mov	r2, r3
 800940e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009410:	4293      	cmp	r3, r2
 8009412:	d3b3      	bcc.n	800937c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	695a      	ldr	r2, [r3, #20]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4618      	mov	r0, r3
 800942a:	f004 f953 	bl	800d6d4 <USB_ReadInterrupts>
 800942e:	4603      	mov	r3, r0
 8009430:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009438:	d10a      	bne.n	8009450 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f00a f830 	bl	80134a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	695a      	ldr	r2, [r3, #20]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800944e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4618      	mov	r0, r3
 8009456:	f004 f93d 	bl	800d6d4 <USB_ReadInterrupts>
 800945a:	4603      	mov	r3, r0
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b04      	cmp	r3, #4
 8009462:	d115      	bne.n	8009490 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	f003 0304 	and.w	r3, r3, #4
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f00a f820 	bl	80134bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6859      	ldr	r1, [r3, #4]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	430a      	orrs	r2, r1
 800948a:	605a      	str	r2, [r3, #4]
 800948c:	e000      	b.n	8009490 <HAL_PCD_IRQHandler+0x93c>
      return;
 800948e:	bf00      	nop
    }
  }
}
 8009490:	3734      	adds	r7, #52	@ 0x34
 8009492:	46bd      	mov	sp, r7
 8009494:	bd90      	pop	{r4, r7, pc}

08009496 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	460b      	mov	r3, r1
 80094a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_PCD_SetAddress+0x1a>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e012      	b.n	80094d6 <HAL_PCD_SetAddress+0x40>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	78fa      	ldrb	r2, [r7, #3]
 80094bc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	78fa      	ldrb	r2, [r7, #3]
 80094c4:	4611      	mov	r1, r2
 80094c6:	4618      	mov	r0, r3
 80094c8:	f004 f89c 	bl	800d604 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	4608      	mov	r0, r1
 80094e8:	4611      	mov	r1, r2
 80094ea:	461a      	mov	r2, r3
 80094ec:	4603      	mov	r3, r0
 80094ee:	70fb      	strb	r3, [r7, #3]
 80094f0:	460b      	mov	r3, r1
 80094f2:	803b      	strh	r3, [r7, #0]
 80094f4:	4613      	mov	r3, r2
 80094f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80094fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009500:	2b00      	cmp	r3, #0
 8009502:	da0f      	bge.n	8009524 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009504:	78fb      	ldrb	r3, [r7, #3]
 8009506:	f003 020f 	and.w	r2, r3, #15
 800950a:	4613      	mov	r3, r2
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	3310      	adds	r3, #16
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	4413      	add	r3, r2
 8009518:	3304      	adds	r3, #4
 800951a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2201      	movs	r2, #1
 8009520:	705a      	strb	r2, [r3, #1]
 8009522:	e00f      	b.n	8009544 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009524:	78fb      	ldrb	r3, [r7, #3]
 8009526:	f003 020f 	and.w	r2, r3, #15
 800952a:	4613      	mov	r3, r2
 800952c:	00db      	lsls	r3, r3, #3
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	4413      	add	r3, r2
 800953a:	3304      	adds	r3, #4
 800953c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	f003 030f 	and.w	r3, r3, #15
 800954a:	b2da      	uxtb	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8009550:	883b      	ldrh	r3, [r7, #0]
 8009552:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	78ba      	ldrb	r2, [r7, #2]
 800955e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	785b      	ldrb	r3, [r3, #1]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d004      	beq.n	8009572 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009572:	78bb      	ldrb	r3, [r7, #2]
 8009574:	2b02      	cmp	r3, #2
 8009576:	d102      	bne.n	800957e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009584:	2b01      	cmp	r3, #1
 8009586:	d101      	bne.n	800958c <HAL_PCD_EP_Open+0xae>
 8009588:	2302      	movs	r3, #2
 800958a:	e00e      	b.n	80095aa <HAL_PCD_EP_Open+0xcc>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68f9      	ldr	r1, [r7, #12]
 800959a:	4618      	mov	r0, r3
 800959c:	f003 fa1c 	bl	800c9d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80095a8:	7afb      	ldrb	r3, [r7, #11]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	460b      	mov	r3, r1
 80095bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80095be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	da0f      	bge.n	80095e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095c6:	78fb      	ldrb	r3, [r7, #3]
 80095c8:	f003 020f 	and.w	r2, r3, #15
 80095cc:	4613      	mov	r3, r2
 80095ce:	00db      	lsls	r3, r3, #3
 80095d0:	4413      	add	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	3310      	adds	r3, #16
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	4413      	add	r3, r2
 80095da:	3304      	adds	r3, #4
 80095dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2201      	movs	r2, #1
 80095e2:	705a      	strb	r2, [r3, #1]
 80095e4:	e00f      	b.n	8009606 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	f003 020f 	and.w	r2, r3, #15
 80095ec:	4613      	mov	r3, r2
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	4413      	add	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	4413      	add	r3, r2
 80095fc:	3304      	adds	r3, #4
 80095fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009606:	78fb      	ldrb	r3, [r7, #3]
 8009608:	f003 030f 	and.w	r3, r3, #15
 800960c:	b2da      	uxtb	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009618:	2b01      	cmp	r3, #1
 800961a:	d101      	bne.n	8009620 <HAL_PCD_EP_Close+0x6e>
 800961c:	2302      	movs	r3, #2
 800961e:	e00e      	b.n	800963e <HAL_PCD_EP_Close+0x8c>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68f9      	ldr	r1, [r7, #12]
 800962e:	4618      	mov	r0, r3
 8009630:	f003 fa5a 	bl	800cae8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b086      	sub	sp, #24
 800964a:	af00      	add	r7, sp, #0
 800964c:	60f8      	str	r0, [r7, #12]
 800964e:	607a      	str	r2, [r7, #4]
 8009650:	603b      	str	r3, [r7, #0]
 8009652:	460b      	mov	r3, r1
 8009654:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009656:	7afb      	ldrb	r3, [r7, #11]
 8009658:	f003 020f 	and.w	r2, r3, #15
 800965c:	4613      	mov	r3, r2
 800965e:	00db      	lsls	r3, r3, #3
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	4413      	add	r3, r2
 800966c:	3304      	adds	r3, #4
 800966e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2200      	movs	r2, #0
 8009680:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	2200      	movs	r2, #0
 8009686:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009688:	7afb      	ldrb	r3, [r7, #11]
 800968a:	f003 030f 	and.w	r3, r3, #15
 800968e:	b2da      	uxtb	r2, r3
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	799b      	ldrb	r3, [r3, #6]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d102      	bne.n	80096a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	799b      	ldrb	r3, [r3, #6]
 80096aa:	461a      	mov	r2, r3
 80096ac:	6979      	ldr	r1, [r7, #20]
 80096ae:	f003 faf7 	bl	800cca0 <USB_EPStartXfer>

  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	460b      	mov	r3, r1
 80096c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80096c8:	78fb      	ldrb	r3, [r7, #3]
 80096ca:	f003 020f 	and.w	r2, r3, #15
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	4613      	mov	r3, r2
 80096d2:	00db      	lsls	r3, r3, #3
 80096d4:	4413      	add	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	440b      	add	r3, r1
 80096da:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80096de:	681b      	ldr	r3, [r3, #0]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	607a      	str	r2, [r7, #4]
 80096f6:	603b      	str	r3, [r7, #0]
 80096f8:	460b      	mov	r3, r1
 80096fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096fc:	7afb      	ldrb	r3, [r7, #11]
 80096fe:	f003 020f 	and.w	r2, r3, #15
 8009702:	4613      	mov	r3, r2
 8009704:	00db      	lsls	r3, r3, #3
 8009706:	4413      	add	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	3310      	adds	r3, #16
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	4413      	add	r3, r2
 8009710:	3304      	adds	r3, #4
 8009712:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	2200      	movs	r2, #0
 8009724:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	2201      	movs	r2, #1
 800972a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800972c:	7afb      	ldrb	r3, [r7, #11]
 800972e:	f003 030f 	and.w	r3, r3, #15
 8009732:	b2da      	uxtb	r2, r3
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	799b      	ldrb	r3, [r3, #6]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d102      	bne.n	8009746 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	799b      	ldrb	r3, [r3, #6]
 800974e:	461a      	mov	r2, r3
 8009750:	6979      	ldr	r1, [r7, #20]
 8009752:	f003 faa5 	bl	800cca0 <USB_EPStartXfer>

  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800976c:	78fb      	ldrb	r3, [r7, #3]
 800976e:	f003 030f 	and.w	r3, r3, #15
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	7912      	ldrb	r2, [r2, #4]
 8009776:	4293      	cmp	r3, r2
 8009778:	d901      	bls.n	800977e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e04f      	b.n	800981e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800977e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009782:	2b00      	cmp	r3, #0
 8009784:	da0f      	bge.n	80097a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009786:	78fb      	ldrb	r3, [r7, #3]
 8009788:	f003 020f 	and.w	r2, r3, #15
 800978c:	4613      	mov	r3, r2
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	3310      	adds	r3, #16
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	4413      	add	r3, r2
 800979a:	3304      	adds	r3, #4
 800979c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	705a      	strb	r2, [r3, #1]
 80097a4:	e00d      	b.n	80097c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80097a6:	78fa      	ldrb	r2, [r7, #3]
 80097a8:	4613      	mov	r3, r2
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	4413      	add	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	4413      	add	r3, r2
 80097b8:	3304      	adds	r3, #4
 80097ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2201      	movs	r2, #1
 80097c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097c8:	78fb      	ldrb	r3, [r7, #3]
 80097ca:	f003 030f 	and.w	r3, r3, #15
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d101      	bne.n	80097e2 <HAL_PCD_EP_SetStall+0x82>
 80097de:	2302      	movs	r3, #2
 80097e0:	e01d      	b.n	800981e <HAL_PCD_EP_SetStall+0xbe>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68f9      	ldr	r1, [r7, #12]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f003 fe33 	bl	800d45c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80097f6:	78fb      	ldrb	r3, [r7, #3]
 80097f8:	f003 030f 	and.w	r3, r3, #15
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d109      	bne.n	8009814 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	7999      	ldrb	r1, [r3, #6]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800980e:	461a      	mov	r2, r3
 8009810:	f004 f824 	bl	800d85c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b084      	sub	sp, #16
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	460b      	mov	r3, r1
 8009830:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009832:	78fb      	ldrb	r3, [r7, #3]
 8009834:	f003 030f 	and.w	r3, r3, #15
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	7912      	ldrb	r2, [r2, #4]
 800983c:	4293      	cmp	r3, r2
 800983e:	d901      	bls.n	8009844 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e042      	b.n	80098ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009848:	2b00      	cmp	r3, #0
 800984a:	da0f      	bge.n	800986c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	f003 020f 	and.w	r2, r3, #15
 8009852:	4613      	mov	r3, r2
 8009854:	00db      	lsls	r3, r3, #3
 8009856:	4413      	add	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	3310      	adds	r3, #16
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	4413      	add	r3, r2
 8009860:	3304      	adds	r3, #4
 8009862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2201      	movs	r2, #1
 8009868:	705a      	strb	r2, [r3, #1]
 800986a:	e00f      	b.n	800988c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800986c:	78fb      	ldrb	r3, [r7, #3]
 800986e:	f003 020f 	and.w	r2, r3, #15
 8009872:	4613      	mov	r3, r2
 8009874:	00db      	lsls	r3, r3, #3
 8009876:	4413      	add	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	4413      	add	r3, r2
 8009882:	3304      	adds	r3, #4
 8009884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009892:	78fb      	ldrb	r3, [r7, #3]
 8009894:	f003 030f 	and.w	r3, r3, #15
 8009898:	b2da      	uxtb	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d101      	bne.n	80098ac <HAL_PCD_EP_ClrStall+0x86>
 80098a8:	2302      	movs	r3, #2
 80098aa:	e00e      	b.n	80098ca <HAL_PCD_EP_ClrStall+0xa4>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68f9      	ldr	r1, [r7, #12]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f003 fe3c 	bl	800d538 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b084      	sub	sp, #16
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	460b      	mov	r3, r1
 80098dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80098de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	da0c      	bge.n	8009900 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098e6:	78fb      	ldrb	r3, [r7, #3]
 80098e8:	f003 020f 	and.w	r2, r3, #15
 80098ec:	4613      	mov	r3, r2
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	4413      	add	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	3310      	adds	r3, #16
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	4413      	add	r3, r2
 80098fa:	3304      	adds	r3, #4
 80098fc:	60fb      	str	r3, [r7, #12]
 80098fe:	e00c      	b.n	800991a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	f003 020f 	and.w	r2, r3, #15
 8009906:	4613      	mov	r3, r2
 8009908:	00db      	lsls	r3, r3, #3
 800990a:	4413      	add	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	4413      	add	r3, r2
 8009916:	3304      	adds	r3, #4
 8009918:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68f9      	ldr	r1, [r7, #12]
 8009920:	4618      	mov	r0, r3
 8009922:	f003 fc5b 	bl	800d1dc <USB_EPStopXfer>
 8009926:	4603      	mov	r3, r0
 8009928:	72fb      	strb	r3, [r7, #11]

  return ret;
 800992a:	7afb      	ldrb	r3, [r7, #11]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08a      	sub	sp, #40	@ 0x28
 8009938:	af02      	add	r7, sp, #8
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	4613      	mov	r3, r2
 800994c:	00db      	lsls	r3, r3, #3
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	3310      	adds	r3, #16
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	4413      	add	r3, r2
 8009958:	3304      	adds	r3, #4
 800995a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	695a      	ldr	r2, [r3, #20]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	429a      	cmp	r2, r3
 8009966:	d901      	bls.n	800996c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e06b      	b.n	8009a44 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	691a      	ldr	r2, [r3, #16]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	69fa      	ldr	r2, [r7, #28]
 800997e:	429a      	cmp	r2, r3
 8009980:	d902      	bls.n	8009988 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	3303      	adds	r3, #3
 800998c:	089b      	lsrs	r3, r3, #2
 800998e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009990:	e02a      	b.n	80099e8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	691a      	ldr	r2, [r3, #16]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	69fa      	ldr	r2, [r7, #28]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d902      	bls.n	80099ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	3303      	adds	r3, #3
 80099b2:	089b      	lsrs	r3, r3, #2
 80099b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	68d9      	ldr	r1, [r3, #12]
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	4603      	mov	r3, r0
 80099ca:	6978      	ldr	r0, [r7, #20]
 80099cc:	f003 fcb0 	bl	800d330 <USB_WritePacket>

    ep->xfer_buff  += len;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	68da      	ldr	r2, [r3, #12]
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	441a      	add	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	695a      	ldr	r2, [r3, #20]
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	441a      	add	r2, r3
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80099f8:	69ba      	ldr	r2, [r7, #24]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d809      	bhi.n	8009a12 <PCD_WriteEmptyTxFifo+0xde>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	695a      	ldr	r2, [r3, #20]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d203      	bcs.n	8009a12 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1bf      	bne.n	8009992 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	691a      	ldr	r2, [r3, #16]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d811      	bhi.n	8009a42 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	f003 030f 	and.w	r3, r3, #15
 8009a24:	2201      	movs	r2, #1
 8009a26:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	43db      	mvns	r3, r3
 8009a38:	6939      	ldr	r1, [r7, #16]
 8009a3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a3e:	4013      	ands	r3, r2
 8009a40:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3720      	adds	r7, #32
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	333c      	adds	r3, #60	@ 0x3c
 8009a64:	3304      	adds	r3, #4
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	799b      	ldrb	r3, [r3, #6]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d17b      	bne.n	8009b7a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	f003 0308 	and.w	r3, r3, #8
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d015      	beq.n	8009ab8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	4a61      	ldr	r2, [pc, #388]	@ (8009c14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	f240 80b9 	bls.w	8009c08 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 80b3 	beq.w	8009c08 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	015a      	lsls	r2, r3, #5
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ab4:	6093      	str	r3, [r2, #8]
 8009ab6:	e0a7      	b.n	8009c08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f003 0320 	and.w	r3, r3, #32
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d009      	beq.n	8009ad6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ace:	461a      	mov	r2, r3
 8009ad0:	2320      	movs	r3, #32
 8009ad2:	6093      	str	r3, [r2, #8]
 8009ad4:	e098      	b.n	8009c08 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f040 8093 	bne.w	8009c08 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	4a4b      	ldr	r2, [pc, #300]	@ (8009c14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d90f      	bls.n	8009b0a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00a      	beq.n	8009b0a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b00:	461a      	mov	r2, r3
 8009b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b06:	6093      	str	r3, [r2, #8]
 8009b08:	e07e      	b.n	8009c08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6a1a      	ldr	r2, [r3, #32]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	0159      	lsls	r1, r3, #5
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	440b      	add	r3, r1
 8009b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b36:	1ad2      	subs	r2, r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d114      	bne.n	8009b6c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d109      	bne.n	8009b5e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6818      	ldr	r0, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009b54:	461a      	mov	r2, r3
 8009b56:	2101      	movs	r1, #1
 8009b58:	f003 fe80 	bl	800d85c <USB_EP0_OutStart>
 8009b5c:	e006      	b.n	8009b6c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	68da      	ldr	r2, [r3, #12]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	441a      	add	r2, r3
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f009 fbda 	bl	801332c <HAL_PCD_DataOutStageCallback>
 8009b78:	e046      	b.n	8009c08 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	4a26      	ldr	r2, [pc, #152]	@ (8009c18 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d124      	bne.n	8009bcc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00a      	beq.n	8009ba2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	015a      	lsls	r2, r3, #5
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	4413      	add	r3, r2
 8009b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b98:	461a      	mov	r2, r3
 8009b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b9e:	6093      	str	r3, [r2, #8]
 8009ba0:	e032      	b.n	8009c08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	f003 0320 	and.w	r3, r3, #32
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d008      	beq.n	8009bbe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	015a      	lsls	r2, r3, #5
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bb8:	461a      	mov	r2, r3
 8009bba:	2320      	movs	r3, #32
 8009bbc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f009 fbb1 	bl	801332c <HAL_PCD_DataOutStageCallback>
 8009bca:	e01d      	b.n	8009c08 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d114      	bne.n	8009bfc <PCD_EP_OutXfrComplete_int+0x1b0>
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	00db      	lsls	r3, r3, #3
 8009bda:	4413      	add	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	440b      	add	r3, r1
 8009be0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d108      	bne.n	8009bfc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6818      	ldr	r0, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	f003 fe30 	bl	800d85c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f009 fb92 	bl	801332c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3720      	adds	r7, #32
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	4f54300a 	.word	0x4f54300a
 8009c18:	4f54310a 	.word	0x4f54310a

08009c1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	333c      	adds	r3, #60	@ 0x3c
 8009c34:	3304      	adds	r3, #4
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	015a      	lsls	r2, r3, #5
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	4413      	add	r3, r2
 8009c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	4a15      	ldr	r2, [pc, #84]	@ (8009ca4 <PCD_EP_OutSetupPacket_int+0x88>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d90e      	bls.n	8009c70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d009      	beq.n	8009c70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	015a      	lsls	r2, r3, #5
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	4413      	add	r3, r2
 8009c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c68:	461a      	mov	r2, r3
 8009c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f009 fb49 	bl	8013308 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	4a0a      	ldr	r2, [pc, #40]	@ (8009ca4 <PCD_EP_OutSetupPacket_int+0x88>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d90c      	bls.n	8009c98 <PCD_EP_OutSetupPacket_int+0x7c>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	799b      	ldrb	r3, [r3, #6]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d108      	bne.n	8009c98 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6818      	ldr	r0, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009c90:	461a      	mov	r2, r3
 8009c92:	2101      	movs	r1, #1
 8009c94:	f003 fde2 	bl	800d85c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3718      	adds	r7, #24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	4f54300a 	.word	0x4f54300a

08009ca8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cbe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009cc0:	78fb      	ldrb	r3, [r7, #3]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d107      	bne.n	8009cd6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009cc6:	883b      	ldrh	r3, [r7, #0]
 8009cc8:	0419      	lsls	r1, r3, #16
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8009cd4:	e028      	b.n	8009d28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cdc:	0c1b      	lsrs	r3, r3, #16
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	73fb      	strb	r3, [r7, #15]
 8009ce8:	e00d      	b.n	8009d06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	3340      	adds	r3, #64	@ 0x40
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	0c1b      	lsrs	r3, r3, #16
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	3301      	adds	r3, #1
 8009d04:	73fb      	strb	r3, [r7, #15]
 8009d06:	7bfa      	ldrb	r2, [r7, #15]
 8009d08:	78fb      	ldrb	r3, [r7, #3]
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d3ec      	bcc.n	8009cea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009d10:	883b      	ldrh	r3, [r7, #0]
 8009d12:	0418      	lsls	r0, r3, #16
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6819      	ldr	r1, [r3, #0]
 8009d18:	78fb      	ldrb	r3, [r7, #3]
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	4302      	orrs	r2, r0
 8009d20:	3340      	adds	r3, #64	@ 0x40
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	440b      	add	r3, r1
 8009d26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b083      	sub	sp, #12
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	460b      	mov	r3, r1
 8009d40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	887a      	ldrh	r2, [r7, #2]
 8009d48:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d101      	bne.n	8009d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e267      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d075      	beq.n	8009e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009d8e:	4b88      	ldr	r3, [pc, #544]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	f003 030c 	and.w	r3, r3, #12
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	d00c      	beq.n	8009db4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d9a:	4b85      	ldr	r3, [pc, #532]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009da2:	2b08      	cmp	r3, #8
 8009da4:	d112      	bne.n	8009dcc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009da6:	4b82      	ldr	r3, [pc, #520]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009db2:	d10b      	bne.n	8009dcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009db4:	4b7e      	ldr	r3, [pc, #504]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d05b      	beq.n	8009e78 <HAL_RCC_OscConfig+0x108>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d157      	bne.n	8009e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e242      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dd4:	d106      	bne.n	8009de4 <HAL_RCC_OscConfig+0x74>
 8009dd6:	4b76      	ldr	r3, [pc, #472]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a75      	ldr	r2, [pc, #468]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	e01d      	b.n	8009e20 <HAL_RCC_OscConfig+0xb0>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009dec:	d10c      	bne.n	8009e08 <HAL_RCC_OscConfig+0x98>
 8009dee:	4b70      	ldr	r3, [pc, #448]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a6f      	ldr	r2, [pc, #444]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009df8:	6013      	str	r3, [r2, #0]
 8009dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a6c      	ldr	r2, [pc, #432]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	e00b      	b.n	8009e20 <HAL_RCC_OscConfig+0xb0>
 8009e08:	4b69      	ldr	r3, [pc, #420]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a68      	ldr	r2, [pc, #416]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	4b66      	ldr	r3, [pc, #408]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a65      	ldr	r2, [pc, #404]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d013      	beq.n	8009e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e28:	f7fb fdbc 	bl	80059a4 <HAL_GetTick>
 8009e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e2e:	e008      	b.n	8009e42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e30:	f7fb fdb8 	bl	80059a4 <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	2b64      	cmp	r3, #100	@ 0x64
 8009e3c:	d901      	bls.n	8009e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e207      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e42:	4b5b      	ldr	r3, [pc, #364]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0f0      	beq.n	8009e30 <HAL_RCC_OscConfig+0xc0>
 8009e4e:	e014      	b.n	8009e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e50:	f7fb fda8 	bl	80059a4 <HAL_GetTick>
 8009e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e56:	e008      	b.n	8009e6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e58:	f7fb fda4 	bl	80059a4 <HAL_GetTick>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	2b64      	cmp	r3, #100	@ 0x64
 8009e64:	d901      	bls.n	8009e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e1f3      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e6a:	4b51      	ldr	r3, [pc, #324]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1f0      	bne.n	8009e58 <HAL_RCC_OscConfig+0xe8>
 8009e76:	e000      	b.n	8009e7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d063      	beq.n	8009f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009e86:	4b4a      	ldr	r3, [pc, #296]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f003 030c 	and.w	r3, r3, #12
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00b      	beq.n	8009eaa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e92:	4b47      	ldr	r3, [pc, #284]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009e9a:	2b08      	cmp	r3, #8
 8009e9c:	d11c      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e9e:	4b44      	ldr	r3, [pc, #272]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d116      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009eaa:	4b41      	ldr	r3, [pc, #260]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d005      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x152>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d001      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e1c7      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	4937      	ldr	r1, [pc, #220]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ed6:	e03a      	b.n	8009f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d020      	beq.n	8009f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ee0:	4b34      	ldr	r3, [pc, #208]	@ (8009fb4 <HAL_RCC_OscConfig+0x244>)
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ee6:	f7fb fd5d 	bl	80059a4 <HAL_GetTick>
 8009eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009eec:	e008      	b.n	8009f00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009eee:	f7fb fd59 	bl	80059a4 <HAL_GetTick>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d901      	bls.n	8009f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e1a8      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f00:	4b2b      	ldr	r3, [pc, #172]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 0302 	and.w	r3, r3, #2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0f0      	beq.n	8009eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f0c:	4b28      	ldr	r3, [pc, #160]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	4925      	ldr	r1, [pc, #148]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	600b      	str	r3, [r1, #0]
 8009f20:	e015      	b.n	8009f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f22:	4b24      	ldr	r3, [pc, #144]	@ (8009fb4 <HAL_RCC_OscConfig+0x244>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f28:	f7fb fd3c 	bl	80059a4 <HAL_GetTick>
 8009f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f2e:	e008      	b.n	8009f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f30:	f7fb fd38 	bl	80059a4 <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e187      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f42:	4b1b      	ldr	r3, [pc, #108]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 0302 	and.w	r3, r3, #2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1f0      	bne.n	8009f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0308 	and.w	r3, r3, #8
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d036      	beq.n	8009fc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	695b      	ldr	r3, [r3, #20]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d016      	beq.n	8009f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f62:	4b15      	ldr	r3, [pc, #84]	@ (8009fb8 <HAL_RCC_OscConfig+0x248>)
 8009f64:	2201      	movs	r2, #1
 8009f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f68:	f7fb fd1c 	bl	80059a4 <HAL_GetTick>
 8009f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f6e:	e008      	b.n	8009f82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f70:	f7fb fd18 	bl	80059a4 <HAL_GetTick>
 8009f74:	4602      	mov	r2, r0
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d901      	bls.n	8009f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e167      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f82:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb0 <HAL_RCC_OscConfig+0x240>)
 8009f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f86:	f003 0302 	and.w	r3, r3, #2
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0f0      	beq.n	8009f70 <HAL_RCC_OscConfig+0x200>
 8009f8e:	e01b      	b.n	8009fc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f90:	4b09      	ldr	r3, [pc, #36]	@ (8009fb8 <HAL_RCC_OscConfig+0x248>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f96:	f7fb fd05 	bl	80059a4 <HAL_GetTick>
 8009f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f9c:	e00e      	b.n	8009fbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f9e:	f7fb fd01 	bl	80059a4 <HAL_GetTick>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d907      	bls.n	8009fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e150      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
 8009fb0:	40023800 	.word	0x40023800
 8009fb4:	42470000 	.word	0x42470000
 8009fb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009fbc:	4b88      	ldr	r3, [pc, #544]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 8009fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fc0:	f003 0302 	and.w	r3, r3, #2
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1ea      	bne.n	8009f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 8097 	beq.w	800a104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009fda:	4b81      	ldr	r3, [pc, #516]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 8009fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10f      	bne.n	800a006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60bb      	str	r3, [r7, #8]
 8009fea:	4b7d      	ldr	r3, [pc, #500]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 8009fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fee:	4a7c      	ldr	r2, [pc, #496]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 8009ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8009ff6:	4b7a      	ldr	r3, [pc, #488]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 8009ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ffe:	60bb      	str	r3, [r7, #8]
 800a000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a002:	2301      	movs	r3, #1
 800a004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a006:	4b77      	ldr	r3, [pc, #476]	@ (800a1e4 <HAL_RCC_OscConfig+0x474>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d118      	bne.n	800a044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a012:	4b74      	ldr	r3, [pc, #464]	@ (800a1e4 <HAL_RCC_OscConfig+0x474>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a73      	ldr	r2, [pc, #460]	@ (800a1e4 <HAL_RCC_OscConfig+0x474>)
 800a018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a01c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a01e:	f7fb fcc1 	bl	80059a4 <HAL_GetTick>
 800a022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a024:	e008      	b.n	800a038 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a026:	f7fb fcbd 	bl	80059a4 <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	2b02      	cmp	r3, #2
 800a032:	d901      	bls.n	800a038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e10c      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a038:	4b6a      	ldr	r3, [pc, #424]	@ (800a1e4 <HAL_RCC_OscConfig+0x474>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a040:	2b00      	cmp	r3, #0
 800a042:	d0f0      	beq.n	800a026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d106      	bne.n	800a05a <HAL_RCC_OscConfig+0x2ea>
 800a04c:	4b64      	ldr	r3, [pc, #400]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a04e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a050:	4a63      	ldr	r2, [pc, #396]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a052:	f043 0301 	orr.w	r3, r3, #1
 800a056:	6713      	str	r3, [r2, #112]	@ 0x70
 800a058:	e01c      	b.n	800a094 <HAL_RCC_OscConfig+0x324>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	2b05      	cmp	r3, #5
 800a060:	d10c      	bne.n	800a07c <HAL_RCC_OscConfig+0x30c>
 800a062:	4b5f      	ldr	r3, [pc, #380]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a066:	4a5e      	ldr	r2, [pc, #376]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a068:	f043 0304 	orr.w	r3, r3, #4
 800a06c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a06e:	4b5c      	ldr	r3, [pc, #368]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a072:	4a5b      	ldr	r2, [pc, #364]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a074:	f043 0301 	orr.w	r3, r3, #1
 800a078:	6713      	str	r3, [r2, #112]	@ 0x70
 800a07a:	e00b      	b.n	800a094 <HAL_RCC_OscConfig+0x324>
 800a07c:	4b58      	ldr	r3, [pc, #352]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a07e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a080:	4a57      	ldr	r2, [pc, #348]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a082:	f023 0301 	bic.w	r3, r3, #1
 800a086:	6713      	str	r3, [r2, #112]	@ 0x70
 800a088:	4b55      	ldr	r3, [pc, #340]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a08a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a08c:	4a54      	ldr	r2, [pc, #336]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a08e:	f023 0304 	bic.w	r3, r3, #4
 800a092:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d015      	beq.n	800a0c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a09c:	f7fb fc82 	bl	80059a4 <HAL_GetTick>
 800a0a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0a2:	e00a      	b.n	800a0ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0a4:	f7fb fc7e 	bl	80059a4 <HAL_GetTick>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d901      	bls.n	800a0ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e0cb      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0ba:	4b49      	ldr	r3, [pc, #292]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a0bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0be:	f003 0302 	and.w	r3, r3, #2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d0ee      	beq.n	800a0a4 <HAL_RCC_OscConfig+0x334>
 800a0c6:	e014      	b.n	800a0f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0c8:	f7fb fc6c 	bl	80059a4 <HAL_GetTick>
 800a0cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a0ce:	e00a      	b.n	800a0e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0d0:	f7fb fc68 	bl	80059a4 <HAL_GetTick>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d901      	bls.n	800a0e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e0b5      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a0e6:	4b3e      	ldr	r3, [pc, #248]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a0e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1ee      	bne.n	800a0d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a0f2:	7dfb      	ldrb	r3, [r7, #23]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d105      	bne.n	800a104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0f8:	4b39      	ldr	r3, [pc, #228]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a0fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0fc:	4a38      	ldr	r2, [pc, #224]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a0fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a102:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 80a1 	beq.w	800a250 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a10e:	4b34      	ldr	r3, [pc, #208]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f003 030c 	and.w	r3, r3, #12
 800a116:	2b08      	cmp	r3, #8
 800a118:	d05c      	beq.n	800a1d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	699b      	ldr	r3, [r3, #24]
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d141      	bne.n	800a1a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a122:	4b31      	ldr	r3, [pc, #196]	@ (800a1e8 <HAL_RCC_OscConfig+0x478>)
 800a124:	2200      	movs	r2, #0
 800a126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a128:	f7fb fc3c 	bl	80059a4 <HAL_GetTick>
 800a12c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a12e:	e008      	b.n	800a142 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a130:	f7fb fc38 	bl	80059a4 <HAL_GetTick>
 800a134:	4602      	mov	r2, r0
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d901      	bls.n	800a142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	e087      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a142:	4b27      	ldr	r3, [pc, #156]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1f0      	bne.n	800a130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	69da      	ldr	r2, [r3, #28]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	431a      	orrs	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a15c:	019b      	lsls	r3, r3, #6
 800a15e:	431a      	orrs	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a164:	085b      	lsrs	r3, r3, #1
 800a166:	3b01      	subs	r3, #1
 800a168:	041b      	lsls	r3, r3, #16
 800a16a:	431a      	orrs	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a170:	061b      	lsls	r3, r3, #24
 800a172:	491b      	ldr	r1, [pc, #108]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a174:	4313      	orrs	r3, r2
 800a176:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a178:	4b1b      	ldr	r3, [pc, #108]	@ (800a1e8 <HAL_RCC_OscConfig+0x478>)
 800a17a:	2201      	movs	r2, #1
 800a17c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a17e:	f7fb fc11 	bl	80059a4 <HAL_GetTick>
 800a182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a184:	e008      	b.n	800a198 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a186:	f7fb fc0d 	bl	80059a4 <HAL_GetTick>
 800a18a:	4602      	mov	r2, r0
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	2b02      	cmp	r3, #2
 800a192:	d901      	bls.n	800a198 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a194:	2303      	movs	r3, #3
 800a196:	e05c      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a198:	4b11      	ldr	r3, [pc, #68]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d0f0      	beq.n	800a186 <HAL_RCC_OscConfig+0x416>
 800a1a4:	e054      	b.n	800a250 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1a6:	4b10      	ldr	r3, [pc, #64]	@ (800a1e8 <HAL_RCC_OscConfig+0x478>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1ac:	f7fb fbfa 	bl	80059a4 <HAL_GetTick>
 800a1b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1b2:	e008      	b.n	800a1c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1b4:	f7fb fbf6 	bl	80059a4 <HAL_GetTick>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d901      	bls.n	800a1c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e045      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1c6:	4b06      	ldr	r3, [pc, #24]	@ (800a1e0 <HAL_RCC_OscConfig+0x470>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1f0      	bne.n	800a1b4 <HAL_RCC_OscConfig+0x444>
 800a1d2:	e03d      	b.n	800a250 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d107      	bne.n	800a1ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e038      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
 800a1e0:	40023800 	.word	0x40023800
 800a1e4:	40007000 	.word	0x40007000
 800a1e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a1ec:	4b1b      	ldr	r3, [pc, #108]	@ (800a25c <HAL_RCC_OscConfig+0x4ec>)
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d028      	beq.n	800a24c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a204:	429a      	cmp	r2, r3
 800a206:	d121      	bne.n	800a24c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a212:	429a      	cmp	r2, r3
 800a214:	d11a      	bne.n	800a24c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a21c:	4013      	ands	r3, r2
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a224:	4293      	cmp	r3, r2
 800a226:	d111      	bne.n	800a24c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a232:	085b      	lsrs	r3, r3, #1
 800a234:	3b01      	subs	r3, #1
 800a236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a238:	429a      	cmp	r2, r3
 800a23a:	d107      	bne.n	800a24c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a248:	429a      	cmp	r2, r3
 800a24a:	d001      	beq.n	800a250 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e000      	b.n	800a252 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	40023800 	.word	0x40023800

0800a260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d101      	bne.n	800a274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	e0cc      	b.n	800a40e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a274:	4b68      	ldr	r3, [pc, #416]	@ (800a418 <HAL_RCC_ClockConfig+0x1b8>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 0307 	and.w	r3, r3, #7
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d90c      	bls.n	800a29c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a282:	4b65      	ldr	r3, [pc, #404]	@ (800a418 <HAL_RCC_ClockConfig+0x1b8>)
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	b2d2      	uxtb	r2, r2
 800a288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a28a:	4b63      	ldr	r3, [pc, #396]	@ (800a418 <HAL_RCC_ClockConfig+0x1b8>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 0307 	and.w	r3, r3, #7
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	429a      	cmp	r2, r3
 800a296:	d001      	beq.n	800a29c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e0b8      	b.n	800a40e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0302 	and.w	r3, r3, #2
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d020      	beq.n	800a2ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 0304 	and.w	r3, r3, #4
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d005      	beq.n	800a2c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a2b4:	4b59      	ldr	r3, [pc, #356]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	4a58      	ldr	r2, [pc, #352]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a2ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a2be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 0308 	and.w	r3, r3, #8
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d005      	beq.n	800a2d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a2cc:	4b53      	ldr	r3, [pc, #332]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	4a52      	ldr	r2, [pc, #328]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a2d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a2d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2d8:	4b50      	ldr	r3, [pc, #320]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	494d      	ldr	r1, [pc, #308]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 0301 	and.w	r3, r3, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d044      	beq.n	800a380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d107      	bne.n	800a30e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2fe:	4b47      	ldr	r3, [pc, #284]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a306:	2b00      	cmp	r3, #0
 800a308:	d119      	bne.n	800a33e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e07f      	b.n	800a40e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	2b02      	cmp	r3, #2
 800a314:	d003      	beq.n	800a31e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a31a:	2b03      	cmp	r3, #3
 800a31c:	d107      	bne.n	800a32e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a31e:	4b3f      	ldr	r3, [pc, #252]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a326:	2b00      	cmp	r3, #0
 800a328:	d109      	bne.n	800a33e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e06f      	b.n	800a40e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a32e:	4b3b      	ldr	r3, [pc, #236]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0302 	and.w	r3, r3, #2
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e067      	b.n	800a40e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a33e:	4b37      	ldr	r3, [pc, #220]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	f023 0203 	bic.w	r2, r3, #3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	4934      	ldr	r1, [pc, #208]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a34c:	4313      	orrs	r3, r2
 800a34e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a350:	f7fb fb28 	bl	80059a4 <HAL_GetTick>
 800a354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a356:	e00a      	b.n	800a36e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a358:	f7fb fb24 	bl	80059a4 <HAL_GetTick>
 800a35c:	4602      	mov	r2, r0
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a366:	4293      	cmp	r3, r2
 800a368:	d901      	bls.n	800a36e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e04f      	b.n	800a40e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a36e:	4b2b      	ldr	r3, [pc, #172]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	f003 020c 	and.w	r2, r3, #12
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d1eb      	bne.n	800a358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a380:	4b25      	ldr	r3, [pc, #148]	@ (800a418 <HAL_RCC_ClockConfig+0x1b8>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 0307 	and.w	r3, r3, #7
 800a388:	683a      	ldr	r2, [r7, #0]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d20c      	bcs.n	800a3a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a38e:	4b22      	ldr	r3, [pc, #136]	@ (800a418 <HAL_RCC_ClockConfig+0x1b8>)
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	b2d2      	uxtb	r2, r2
 800a394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a396:	4b20      	ldr	r3, [pc, #128]	@ (800a418 <HAL_RCC_ClockConfig+0x1b8>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d001      	beq.n	800a3a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e032      	b.n	800a40e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d008      	beq.n	800a3c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3b4:	4b19      	ldr	r3, [pc, #100]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	4916      	ldr	r1, [pc, #88]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0308 	and.w	r3, r3, #8
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d009      	beq.n	800a3e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a3d2:	4b12      	ldr	r3, [pc, #72]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	00db      	lsls	r3, r3, #3
 800a3e0:	490e      	ldr	r1, [pc, #56]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a3e6:	f000 f821 	bl	800a42c <HAL_RCC_GetSysClockFreq>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	4b0b      	ldr	r3, [pc, #44]	@ (800a41c <HAL_RCC_ClockConfig+0x1bc>)
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	091b      	lsrs	r3, r3, #4
 800a3f2:	f003 030f 	and.w	r3, r3, #15
 800a3f6:	490a      	ldr	r1, [pc, #40]	@ (800a420 <HAL_RCC_ClockConfig+0x1c0>)
 800a3f8:	5ccb      	ldrb	r3, [r1, r3]
 800a3fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a3fe:	4a09      	ldr	r2, [pc, #36]	@ (800a424 <HAL_RCC_ClockConfig+0x1c4>)
 800a400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a402:	4b09      	ldr	r3, [pc, #36]	@ (800a428 <HAL_RCC_ClockConfig+0x1c8>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4618      	mov	r0, r3
 800a408:	f7fb fa88 	bl	800591c <HAL_InitTick>

  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	40023c00 	.word	0x40023c00
 800a41c:	40023800 	.word	0x40023800
 800a420:	080186b4 	.word	0x080186b4
 800a424:	20000028 	.word	0x20000028
 800a428:	2000013c 	.word	0x2000013c

0800a42c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a42c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a430:	b090      	sub	sp, #64	@ 0x40
 800a432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a434:	2300      	movs	r3, #0
 800a436:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a438:	2300      	movs	r3, #0
 800a43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a444:	4b59      	ldr	r3, [pc, #356]	@ (800a5ac <HAL_RCC_GetSysClockFreq+0x180>)
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	f003 030c 	and.w	r3, r3, #12
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d00d      	beq.n	800a46c <HAL_RCC_GetSysClockFreq+0x40>
 800a450:	2b08      	cmp	r3, #8
 800a452:	f200 80a1 	bhi.w	800a598 <HAL_RCC_GetSysClockFreq+0x16c>
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <HAL_RCC_GetSysClockFreq+0x34>
 800a45a:	2b04      	cmp	r3, #4
 800a45c:	d003      	beq.n	800a466 <HAL_RCC_GetSysClockFreq+0x3a>
 800a45e:	e09b      	b.n	800a598 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a460:	4b53      	ldr	r3, [pc, #332]	@ (800a5b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a462:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a464:	e09b      	b.n	800a59e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a466:	4b53      	ldr	r3, [pc, #332]	@ (800a5b4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a468:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a46a:	e098      	b.n	800a59e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a46c:	4b4f      	ldr	r3, [pc, #316]	@ (800a5ac <HAL_RCC_GetSysClockFreq+0x180>)
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a474:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a476:	4b4d      	ldr	r3, [pc, #308]	@ (800a5ac <HAL_RCC_GetSysClockFreq+0x180>)
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d028      	beq.n	800a4d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a482:	4b4a      	ldr	r3, [pc, #296]	@ (800a5ac <HAL_RCC_GetSysClockFreq+0x180>)
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	099b      	lsrs	r3, r3, #6
 800a488:	2200      	movs	r2, #0
 800a48a:	623b      	str	r3, [r7, #32]
 800a48c:	627a      	str	r2, [r7, #36]	@ 0x24
 800a48e:	6a3b      	ldr	r3, [r7, #32]
 800a490:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a494:	2100      	movs	r1, #0
 800a496:	4b47      	ldr	r3, [pc, #284]	@ (800a5b4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a498:	fb03 f201 	mul.w	r2, r3, r1
 800a49c:	2300      	movs	r3, #0
 800a49e:	fb00 f303 	mul.w	r3, r0, r3
 800a4a2:	4413      	add	r3, r2
 800a4a4:	4a43      	ldr	r2, [pc, #268]	@ (800a5b4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a4a6:	fba0 1202 	umull	r1, r2, r0, r2
 800a4aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4ac:	460a      	mov	r2, r1
 800a4ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a4b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4b2:	4413      	add	r3, r2
 800a4b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	61bb      	str	r3, [r7, #24]
 800a4bc:	61fa      	str	r2, [r7, #28]
 800a4be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a4c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a4c6:	f7f6 fc37 	bl	8000d38 <__aeabi_uldivmod>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4d2:	e053      	b.n	800a57c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4d4:	4b35      	ldr	r3, [pc, #212]	@ (800a5ac <HAL_RCC_GetSysClockFreq+0x180>)
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	099b      	lsrs	r3, r3, #6
 800a4da:	2200      	movs	r2, #0
 800a4dc:	613b      	str	r3, [r7, #16]
 800a4de:	617a      	str	r2, [r7, #20]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a4e6:	f04f 0b00 	mov.w	fp, #0
 800a4ea:	4652      	mov	r2, sl
 800a4ec:	465b      	mov	r3, fp
 800a4ee:	f04f 0000 	mov.w	r0, #0
 800a4f2:	f04f 0100 	mov.w	r1, #0
 800a4f6:	0159      	lsls	r1, r3, #5
 800a4f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a4fc:	0150      	lsls	r0, r2, #5
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	ebb2 080a 	subs.w	r8, r2, sl
 800a506:	eb63 090b 	sbc.w	r9, r3, fp
 800a50a:	f04f 0200 	mov.w	r2, #0
 800a50e:	f04f 0300 	mov.w	r3, #0
 800a512:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a516:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a51a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a51e:	ebb2 0408 	subs.w	r4, r2, r8
 800a522:	eb63 0509 	sbc.w	r5, r3, r9
 800a526:	f04f 0200 	mov.w	r2, #0
 800a52a:	f04f 0300 	mov.w	r3, #0
 800a52e:	00eb      	lsls	r3, r5, #3
 800a530:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a534:	00e2      	lsls	r2, r4, #3
 800a536:	4614      	mov	r4, r2
 800a538:	461d      	mov	r5, r3
 800a53a:	eb14 030a 	adds.w	r3, r4, sl
 800a53e:	603b      	str	r3, [r7, #0]
 800a540:	eb45 030b 	adc.w	r3, r5, fp
 800a544:	607b      	str	r3, [r7, #4]
 800a546:	f04f 0200 	mov.w	r2, #0
 800a54a:	f04f 0300 	mov.w	r3, #0
 800a54e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a552:	4629      	mov	r1, r5
 800a554:	028b      	lsls	r3, r1, #10
 800a556:	4621      	mov	r1, r4
 800a558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a55c:	4621      	mov	r1, r4
 800a55e:	028a      	lsls	r2, r1, #10
 800a560:	4610      	mov	r0, r2
 800a562:	4619      	mov	r1, r3
 800a564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a566:	2200      	movs	r2, #0
 800a568:	60bb      	str	r3, [r7, #8]
 800a56a:	60fa      	str	r2, [r7, #12]
 800a56c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a570:	f7f6 fbe2 	bl	8000d38 <__aeabi_uldivmod>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	4613      	mov	r3, r2
 800a57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a57c:	4b0b      	ldr	r3, [pc, #44]	@ (800a5ac <HAL_RCC_GetSysClockFreq+0x180>)
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	0c1b      	lsrs	r3, r3, #16
 800a582:	f003 0303 	and.w	r3, r3, #3
 800a586:	3301      	adds	r3, #1
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a58c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a590:	fbb2 f3f3 	udiv	r3, r2, r3
 800a594:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a596:	e002      	b.n	800a59e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a598:	4b05      	ldr	r3, [pc, #20]	@ (800a5b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a59a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a59c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3740      	adds	r7, #64	@ 0x40
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5aa:	bf00      	nop
 800a5ac:	40023800 	.word	0x40023800
 800a5b0:	00f42400 	.word	0x00f42400
 800a5b4:	017d7840 	.word	0x017d7840

0800a5b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a5bc:	4b03      	ldr	r3, [pc, #12]	@ (800a5cc <HAL_RCC_GetHCLKFreq+0x14>)
 800a5be:	681b      	ldr	r3, [r3, #0]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	20000028 	.word	0x20000028

0800a5d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a5d4:	f7ff fff0 	bl	800a5b8 <HAL_RCC_GetHCLKFreq>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	4b05      	ldr	r3, [pc, #20]	@ (800a5f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	0a9b      	lsrs	r3, r3, #10
 800a5e0:	f003 0307 	and.w	r3, r3, #7
 800a5e4:	4903      	ldr	r1, [pc, #12]	@ (800a5f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a5e6:	5ccb      	ldrb	r3, [r1, r3]
 800a5e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	40023800 	.word	0x40023800
 800a5f4:	080186c4 	.word	0x080186c4

0800a5f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e07b      	b.n	800a702 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d108      	bne.n	800a624 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a61a:	d009      	beq.n	800a630 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	61da      	str	r2, [r3, #28]
 800a622:	e005      	b.n	800a630 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d106      	bne.n	800a650 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7f7 fa00 	bl	8001a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2202      	movs	r2, #2
 800a654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a666:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a678:	431a      	orrs	r2, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a682:	431a      	orrs	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	f003 0302 	and.w	r3, r3, #2
 800a68c:	431a      	orrs	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	431a      	orrs	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	69db      	ldr	r3, [r3, #28]
 800a6a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a1b      	ldr	r3, [r3, #32]
 800a6b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6b4:	ea42 0103 	orr.w	r1, r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	0c1b      	lsrs	r3, r3, #16
 800a6ce:	f003 0104 	and.w	r1, r3, #4
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d6:	f003 0210 	and.w	r2, r3, #16
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	69da      	ldr	r2, [r3, #28]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a6f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b088      	sub	sp, #32
 800a70e:	af00      	add	r7, sp, #0
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	60b9      	str	r1, [r7, #8]
 800a714:	603b      	str	r3, [r7, #0]
 800a716:	4613      	mov	r3, r2
 800a718:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a71a:	f7fb f943 	bl	80059a4 <HAL_GetTick>
 800a71e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a720:	88fb      	ldrh	r3, [r7, #6]
 800a722:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d001      	beq.n	800a734 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a730:	2302      	movs	r3, #2
 800a732:	e12a      	b.n	800a98a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d002      	beq.n	800a740 <HAL_SPI_Transmit+0x36>
 800a73a:	88fb      	ldrh	r3, [r7, #6]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	e122      	b.n	800a98a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d101      	bne.n	800a752 <HAL_SPI_Transmit+0x48>
 800a74e:	2302      	movs	r3, #2
 800a750:	e11b      	b.n	800a98a <HAL_SPI_Transmit+0x280>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2201      	movs	r2, #1
 800a756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2203      	movs	r2, #3
 800a75e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	88fa      	ldrh	r2, [r7, #6]
 800a772:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	88fa      	ldrh	r2, [r7, #6]
 800a778:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7a0:	d10f      	bne.n	800a7c2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a7b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a7c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7cc:	2b40      	cmp	r3, #64	@ 0x40
 800a7ce:	d007      	beq.n	800a7e0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7e8:	d152      	bne.n	800a890 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d002      	beq.n	800a7f8 <HAL_SPI_Transmit+0xee>
 800a7f2:	8b7b      	ldrh	r3, [r7, #26]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d145      	bne.n	800a884 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7fc:	881a      	ldrh	r2, [r3, #0]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a808:	1c9a      	adds	r2, r3, #2
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a812:	b29b      	uxth	r3, r3
 800a814:	3b01      	subs	r3, #1
 800a816:	b29a      	uxth	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a81c:	e032      	b.n	800a884 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	f003 0302 	and.w	r3, r3, #2
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d112      	bne.n	800a852 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a830:	881a      	ldrh	r2, [r3, #0]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a83c:	1c9a      	adds	r2, r3, #2
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a846:	b29b      	uxth	r3, r3
 800a848:	3b01      	subs	r3, #1
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a850:	e018      	b.n	800a884 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a852:	f7fb f8a7 	bl	80059a4 <HAL_GetTick>
 800a856:	4602      	mov	r2, r0
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	1ad3      	subs	r3, r2, r3
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d803      	bhi.n	800a86a <HAL_SPI_Transmit+0x160>
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a868:	d102      	bne.n	800a870 <HAL_SPI_Transmit+0x166>
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d109      	bne.n	800a884 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a880:	2303      	movs	r3, #3
 800a882:	e082      	b.n	800a98a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a888:	b29b      	uxth	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1c7      	bne.n	800a81e <HAL_SPI_Transmit+0x114>
 800a88e:	e053      	b.n	800a938 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d002      	beq.n	800a89e <HAL_SPI_Transmit+0x194>
 800a898:	8b7b      	ldrh	r3, [r7, #26]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d147      	bne.n	800a92e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	330c      	adds	r3, #12
 800a8a8:	7812      	ldrb	r2, [r2, #0]
 800a8aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8b0:	1c5a      	adds	r2, r3, #1
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a8c4:	e033      	b.n	800a92e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f003 0302 	and.w	r3, r3, #2
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d113      	bne.n	800a8fc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	330c      	adds	r3, #12
 800a8de:	7812      	ldrb	r2, [r2, #0]
 800a8e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8e6:	1c5a      	adds	r2, r3, #1
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a8fa:	e018      	b.n	800a92e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8fc:	f7fb f852 	bl	80059a4 <HAL_GetTick>
 800a900:	4602      	mov	r2, r0
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	683a      	ldr	r2, [r7, #0]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d803      	bhi.n	800a914 <HAL_SPI_Transmit+0x20a>
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a912:	d102      	bne.n	800a91a <HAL_SPI_Transmit+0x210>
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d109      	bne.n	800a92e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e02d      	b.n	800a98a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a932:	b29b      	uxth	r3, r3
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1c6      	bne.n	800a8c6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a938:	69fa      	ldr	r2, [r7, #28]
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f000 fb85 	bl	800b04c <SPI_EndRxTxTransaction>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2220      	movs	r2, #32
 800a94c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10a      	bne.n	800a96c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a956:	2300      	movs	r3, #0
 800a958:	617b      	str	r3, [r7, #20]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	617b      	str	r3, [r7, #20]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	617b      	str	r3, [r7, #20]
 800a96a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e000      	b.n	800a98a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800a988:	2300      	movs	r3, #0
  }
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3720      	adds	r7, #32
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b08a      	sub	sp, #40	@ 0x28
 800a996:	af00      	add	r7, sp, #0
 800a998:	60f8      	str	r0, [r7, #12]
 800a99a:	60b9      	str	r1, [r7, #8]
 800a99c:	607a      	str	r2, [r7, #4]
 800a99e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9a4:	f7fa fffe 	bl	80059a4 <HAL_GetTick>
 800a9a8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a9b0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a9b8:	887b      	ldrh	r3, [r7, #2]
 800a9ba:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a9bc:	7ffb      	ldrb	r3, [r7, #31]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d00c      	beq.n	800a9dc <HAL_SPI_TransmitReceive+0x4a>
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a9c8:	d106      	bne.n	800a9d8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d102      	bne.n	800a9d8 <HAL_SPI_TransmitReceive+0x46>
 800a9d2:	7ffb      	ldrb	r3, [r7, #31]
 800a9d4:	2b04      	cmp	r3, #4
 800a9d6:	d001      	beq.n	800a9dc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a9d8:	2302      	movs	r3, #2
 800a9da:	e17f      	b.n	800acdc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d005      	beq.n	800a9ee <HAL_SPI_TransmitReceive+0x5c>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <HAL_SPI_TransmitReceive+0x5c>
 800a9e8:	887b      	ldrh	r3, [r7, #2]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e174      	b.n	800acdc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d101      	bne.n	800aa00 <HAL_SPI_TransmitReceive+0x6e>
 800a9fc:	2302      	movs	r3, #2
 800a9fe:	e16d      	b.n	800acdc <HAL_SPI_TransmitReceive+0x34a>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b04      	cmp	r3, #4
 800aa12:	d003      	beq.n	800aa1c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2205      	movs	r2, #5
 800aa18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	887a      	ldrh	r2, [r7, #2]
 800aa2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	887a      	ldrh	r2, [r7, #2]
 800aa32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	68ba      	ldr	r2, [r7, #8]
 800aa38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	887a      	ldrh	r2, [r7, #2]
 800aa3e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	887a      	ldrh	r2, [r7, #2]
 800aa44:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa5c:	2b40      	cmp	r3, #64	@ 0x40
 800aa5e:	d007      	beq.n	800aa70 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa78:	d17e      	bne.n	800ab78 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d002      	beq.n	800aa88 <HAL_SPI_TransmitReceive+0xf6>
 800aa82:	8afb      	ldrh	r3, [r7, #22]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d16c      	bne.n	800ab62 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa8c:	881a      	ldrh	r2, [r3, #0]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa98:	1c9a      	adds	r2, r3, #2
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aaac:	e059      	b.n	800ab62 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	f003 0302 	and.w	r3, r3, #2
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d11b      	bne.n	800aaf4 <HAL_SPI_TransmitReceive+0x162>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d016      	beq.n	800aaf4 <HAL_SPI_TransmitReceive+0x162>
 800aac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d113      	bne.n	800aaf4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aad0:	881a      	ldrh	r2, [r3, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aadc:	1c9a      	adds	r2, r3, #2
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	3b01      	subs	r3, #1
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	f003 0301 	and.w	r3, r3, #1
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d119      	bne.n	800ab36 <HAL_SPI_TransmitReceive+0x1a4>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d014      	beq.n	800ab36 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68da      	ldr	r2, [r3, #12]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab16:	b292      	uxth	r2, r2
 800ab18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab1e:	1c9a      	adds	r2, r3, #2
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	b29a      	uxth	r2, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab32:	2301      	movs	r3, #1
 800ab34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ab36:	f7fa ff35 	bl	80059a4 <HAL_GetTick>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	6a3b      	ldr	r3, [r7, #32]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d80d      	bhi.n	800ab62 <HAL_SPI_TransmitReceive+0x1d0>
 800ab46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4c:	d009      	beq.n	800ab62 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	e0bc      	b.n	800acdc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1a0      	bne.n	800aaae <HAL_SPI_TransmitReceive+0x11c>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d19b      	bne.n	800aaae <HAL_SPI_TransmitReceive+0x11c>
 800ab76:	e082      	b.n	800ac7e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <HAL_SPI_TransmitReceive+0x1f4>
 800ab80:	8afb      	ldrh	r3, [r7, #22]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d171      	bne.n	800ac6a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	330c      	adds	r3, #12
 800ab90:	7812      	ldrb	r2, [r2, #0]
 800ab92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab98:	1c5a      	adds	r2, r3, #1
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	3b01      	subs	r3, #1
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abac:	e05d      	b.n	800ac6a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	f003 0302 	and.w	r3, r3, #2
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d11c      	bne.n	800abf6 <HAL_SPI_TransmitReceive+0x264>
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d017      	beq.n	800abf6 <HAL_SPI_TransmitReceive+0x264>
 800abc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d114      	bne.n	800abf6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	330c      	adds	r3, #12
 800abd6:	7812      	ldrb	r2, [r2, #0]
 800abd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abde:	1c5a      	adds	r2, r3, #1
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800abe8:	b29b      	uxth	r3, r3
 800abea:	3b01      	subs	r3, #1
 800abec:	b29a      	uxth	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800abf2:	2300      	movs	r3, #0
 800abf4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	f003 0301 	and.w	r3, r3, #1
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d119      	bne.n	800ac38 <HAL_SPI_TransmitReceive+0x2a6>
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d014      	beq.n	800ac38 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68da      	ldr	r2, [r3, #12]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac18:	b2d2      	uxtb	r2, r2
 800ac1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac20:	1c5a      	adds	r2, r3, #1
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac34:	2301      	movs	r3, #1
 800ac36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ac38:	f7fa feb4 	bl	80059a4 <HAL_GetTick>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d803      	bhi.n	800ac50 <HAL_SPI_TransmitReceive+0x2be>
 800ac48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4e:	d102      	bne.n	800ac56 <HAL_SPI_TransmitReceive+0x2c4>
 800ac50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d109      	bne.n	800ac6a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800ac66:	2303      	movs	r3, #3
 800ac68:	e038      	b.n	800acdc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d19c      	bne.n	800abae <HAL_SPI_TransmitReceive+0x21c>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d197      	bne.n	800abae <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac7e:	6a3a      	ldr	r2, [r7, #32]
 800ac80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f000 f9e2 	bl	800b04c <SPI_EndRxTxTransaction>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d008      	beq.n	800aca0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2220      	movs	r2, #32
 800ac92:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e01d      	b.n	800acdc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10a      	bne.n	800acbe <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aca8:	2300      	movs	r3, #0
 800acaa:	613b      	str	r3, [r7, #16]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	613b      	str	r3, [r7, #16]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	613b      	str	r3, [r7, #16]
 800acbc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d001      	beq.n	800acda <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e000      	b.n	800acdc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800acda:	2300      	movs	r3, #0
  }
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3728      	adds	r7, #40	@ 0x28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b088      	sub	sp, #32
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	099b      	lsrs	r3, r3, #6
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10f      	bne.n	800ad28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00a      	beq.n	800ad28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	099b      	lsrs	r3, r3, #6
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d004      	beq.n	800ad28 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	4798      	blx	r3
    return;
 800ad26:	e0d7      	b.n	800aed8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	085b      	lsrs	r3, r3, #1
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00a      	beq.n	800ad4a <HAL_SPI_IRQHandler+0x66>
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	09db      	lsrs	r3, r3, #7
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d004      	beq.n	800ad4a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	4798      	blx	r3
    return;
 800ad48:	e0c6      	b.n	800aed8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	095b      	lsrs	r3, r3, #5
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10c      	bne.n	800ad70 <HAL_SPI_IRQHandler+0x8c>
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	099b      	lsrs	r3, r3, #6
 800ad5a:	f003 0301 	and.w	r3, r3, #1
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d106      	bne.n	800ad70 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	0a1b      	lsrs	r3, r3, #8
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 80b4 	beq.w	800aed8 <HAL_SPI_IRQHandler+0x1f4>
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	095b      	lsrs	r3, r3, #5
 800ad74:	f003 0301 	and.w	r3, r3, #1
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 80ad 	beq.w	800aed8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	099b      	lsrs	r3, r3, #6
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d023      	beq.n	800add2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d011      	beq.n	800adba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad9a:	f043 0204 	orr.w	r2, r3, #4
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ada2:	2300      	movs	r3, #0
 800ada4:	617b      	str	r3, [r7, #20]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	617b      	str	r3, [r7, #20]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	617b      	str	r3, [r7, #20]
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	e00b      	b.n	800add2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800adba:	2300      	movs	r3, #0
 800adbc:	613b      	str	r3, [r7, #16]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	613b      	str	r3, [r7, #16]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	613b      	str	r3, [r7, #16]
 800adce:	693b      	ldr	r3, [r7, #16]
        return;
 800add0:	e082      	b.n	800aed8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	095b      	lsrs	r3, r3, #5
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	2b00      	cmp	r3, #0
 800addc:	d014      	beq.n	800ae08 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ade2:	f043 0201 	orr.w	r2, r3, #1
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800adea:	2300      	movs	r3, #0
 800adec:	60fb      	str	r3, [r7, #12]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	60fb      	str	r3, [r7, #12]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	0a1b      	lsrs	r3, r3, #8
 800ae0c:	f003 0301 	and.w	r3, r3, #1
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00c      	beq.n	800ae2e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae18:	f043 0208 	orr.w	r2, r3, #8
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ae20:	2300      	movs	r3, #0
 800ae22:	60bb      	str	r3, [r7, #8]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	60bb      	str	r3, [r7, #8]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d04f      	beq.n	800aed6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	685a      	ldr	r2, [r3, #4]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ae44:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	f003 0302 	and.w	r3, r3, #2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d104      	bne.n	800ae62 <HAL_SPI_IRQHandler+0x17e>
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	f003 0301 	and.w	r3, r3, #1
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d034      	beq.n	800aecc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f022 0203 	bic.w	r2, r2, #3
 800ae70:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d011      	beq.n	800ae9e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae7e:	4a18      	ldr	r2, [pc, #96]	@ (800aee0 <HAL_SPI_IRQHandler+0x1fc>)
 800ae80:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fb fb3a 	bl	8006500 <HAL_DMA_Abort_IT>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d005      	beq.n	800ae9e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d016      	beq.n	800aed4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aeaa:	4a0d      	ldr	r2, [pc, #52]	@ (800aee0 <HAL_SPI_IRQHandler+0x1fc>)
 800aeac:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fb fb24 	bl	8006500 <HAL_DMA_Abort_IT>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00a      	beq.n	800aed4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aec2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800aeca:	e003      	b.n	800aed4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f809 	bl	800aee4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800aed2:	e000      	b.n	800aed6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800aed4:	bf00      	nop
    return;
 800aed6:	bf00      	nop
  }
}
 800aed8:	3720      	adds	r7, #32
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	0800af15 	.word	0x0800af15

0800aee4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800aeec:	bf00      	nop
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800af06:	b2db      	uxtb	r3, r3
}
 800af08:	4618      	mov	r0, r3
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f7ff ffd8 	bl	800aee4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af34:	bf00      	nop
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b088      	sub	sp, #32
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	603b      	str	r3, [r7, #0]
 800af48:	4613      	mov	r3, r2
 800af4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800af4c:	f7fa fd2a 	bl	80059a4 <HAL_GetTick>
 800af50:	4602      	mov	r2, r0
 800af52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af54:	1a9b      	subs	r3, r3, r2
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	4413      	add	r3, r2
 800af5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800af5c:	f7fa fd22 	bl	80059a4 <HAL_GetTick>
 800af60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800af62:	4b39      	ldr	r3, [pc, #228]	@ (800b048 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	015b      	lsls	r3, r3, #5
 800af68:	0d1b      	lsrs	r3, r3, #20
 800af6a:	69fa      	ldr	r2, [r7, #28]
 800af6c:	fb02 f303 	mul.w	r3, r2, r3
 800af70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af72:	e055      	b.n	800b020 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7a:	d051      	beq.n	800b020 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af7c:	f7fa fd12 	bl	80059a4 <HAL_GetTick>
 800af80:	4602      	mov	r2, r0
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	69fa      	ldr	r2, [r7, #28]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d902      	bls.n	800af92 <SPI_WaitFlagStateUntilTimeout+0x56>
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d13d      	bne.n	800b00e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	685a      	ldr	r2, [r3, #4]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800afa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800afaa:	d111      	bne.n	800afd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afb4:	d004      	beq.n	800afc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afbe:	d107      	bne.n	800afd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800afce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afd8:	d10f      	bne.n	800affa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800afe8:	601a      	str	r2, [r3, #0]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aff8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2201      	movs	r2, #1
 800affe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b00a:	2303      	movs	r3, #3
 800b00c:	e018      	b.n	800b040 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d102      	bne.n	800b01a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800b014:	2300      	movs	r3, #0
 800b016:	61fb      	str	r3, [r7, #28]
 800b018:	e002      	b.n	800b020 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	3b01      	subs	r3, #1
 800b01e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	689a      	ldr	r2, [r3, #8]
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	4013      	ands	r3, r2
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	bf0c      	ite	eq
 800b030:	2301      	moveq	r3, #1
 800b032:	2300      	movne	r3, #0
 800b034:	b2db      	uxtb	r3, r3
 800b036:	461a      	mov	r2, r3
 800b038:	79fb      	ldrb	r3, [r7, #7]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d19a      	bne.n	800af74 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3720      	adds	r7, #32
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20000028 	.word	0x20000028

0800b04c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b088      	sub	sp, #32
 800b050:	af02      	add	r7, sp, #8
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2201      	movs	r2, #1
 800b060:	2102      	movs	r1, #2
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f7ff ff6a 	bl	800af3c <SPI_WaitFlagStateUntilTimeout>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d007      	beq.n	800b07e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b072:	f043 0220 	orr.w	r2, r3, #32
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e032      	b.n	800b0e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b07e:	4b1b      	ldr	r3, [pc, #108]	@ (800b0ec <SPI_EndRxTxTransaction+0xa0>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a1b      	ldr	r2, [pc, #108]	@ (800b0f0 <SPI_EndRxTxTransaction+0xa4>)
 800b084:	fba2 2303 	umull	r2, r3, r2, r3
 800b088:	0d5b      	lsrs	r3, r3, #21
 800b08a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b08e:	fb02 f303 	mul.w	r3, r2, r3
 800b092:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b09c:	d112      	bne.n	800b0c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	2180      	movs	r1, #128	@ 0x80
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f7ff ff47 	bl	800af3c <SPI_WaitFlagStateUntilTimeout>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d016      	beq.n	800b0e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0b8:	f043 0220 	orr.w	r2, r3, #32
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	e00f      	b.n	800b0e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00a      	beq.n	800b0e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0da:	2b80      	cmp	r3, #128	@ 0x80
 800b0dc:	d0f2      	beq.n	800b0c4 <SPI_EndRxTxTransaction+0x78>
 800b0de:	e000      	b.n	800b0e2 <SPI_EndRxTxTransaction+0x96>
        break;
 800b0e0:	bf00      	nop
  }

  return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	20000028 	.word	0x20000028
 800b0f0:	165e9f81 	.word	0x165e9f81

0800b0f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e041      	b.n	800b18a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d106      	bne.n	800b120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7f7 f814 	bl	8002148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2202      	movs	r2, #2
 800b124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3304      	adds	r3, #4
 800b130:	4619      	mov	r1, r3
 800b132:	4610      	mov	r0, r2
 800b134:	f000 fd86 	bl	800bc44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2201      	movs	r2, #1
 800b184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
	...

0800b194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d001      	beq.n	800b1ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e044      	b.n	800b236 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2202      	movs	r2, #2
 800b1b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68da      	ldr	r2, [r3, #12]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f042 0201 	orr.w	r2, r2, #1
 800b1c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a1e      	ldr	r2, [pc, #120]	@ (800b244 <HAL_TIM_Base_Start_IT+0xb0>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d018      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x6c>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1d6:	d013      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x6c>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a1a      	ldr	r2, [pc, #104]	@ (800b248 <HAL_TIM_Base_Start_IT+0xb4>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d00e      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x6c>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a19      	ldr	r2, [pc, #100]	@ (800b24c <HAL_TIM_Base_Start_IT+0xb8>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d009      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x6c>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a17      	ldr	r2, [pc, #92]	@ (800b250 <HAL_TIM_Base_Start_IT+0xbc>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d004      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x6c>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a16      	ldr	r2, [pc, #88]	@ (800b254 <HAL_TIM_Base_Start_IT+0xc0>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d111      	bne.n	800b224 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	f003 0307 	and.w	r3, r3, #7
 800b20a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2b06      	cmp	r3, #6
 800b210:	d010      	beq.n	800b234 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f042 0201 	orr.w	r2, r2, #1
 800b220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b222:	e007      	b.n	800b234 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f042 0201 	orr.w	r2, r2, #1
 800b232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	40010000 	.word	0x40010000
 800b248:	40000400 	.word	0x40000400
 800b24c:	40000800 	.word	0x40000800
 800b250:	40000c00 	.word	0x40000c00
 800b254:	40014000 	.word	0x40014000

0800b258 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d101      	bne.n	800b26a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e041      	b.n	800b2ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b270:	b2db      	uxtb	r3, r3
 800b272:	2b00      	cmp	r3, #0
 800b274:	d106      	bne.n	800b284 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f839 	bl	800b2f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2202      	movs	r2, #2
 800b288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3304      	adds	r3, #4
 800b294:	4619      	mov	r1, r3
 800b296:	4610      	mov	r0, r2
 800b298:	f000 fcd4 	bl	800bc44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b2f6:	b480      	push	{r7}
 800b2f8:	b083      	sub	sp, #12
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b2fe:	bf00      	nop
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
	...

0800b30c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d109      	bne.n	800b330 <HAL_TIM_PWM_Start+0x24>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b322:	b2db      	uxtb	r3, r3
 800b324:	2b01      	cmp	r3, #1
 800b326:	bf14      	ite	ne
 800b328:	2301      	movne	r3, #1
 800b32a:	2300      	moveq	r3, #0
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	e022      	b.n	800b376 <HAL_TIM_PWM_Start+0x6a>
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2b04      	cmp	r3, #4
 800b334:	d109      	bne.n	800b34a <HAL_TIM_PWM_Start+0x3e>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b01      	cmp	r3, #1
 800b340:	bf14      	ite	ne
 800b342:	2301      	movne	r3, #1
 800b344:	2300      	moveq	r3, #0
 800b346:	b2db      	uxtb	r3, r3
 800b348:	e015      	b.n	800b376 <HAL_TIM_PWM_Start+0x6a>
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	2b08      	cmp	r3, #8
 800b34e:	d109      	bne.n	800b364 <HAL_TIM_PWM_Start+0x58>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b356:	b2db      	uxtb	r3, r3
 800b358:	2b01      	cmp	r3, #1
 800b35a:	bf14      	ite	ne
 800b35c:	2301      	movne	r3, #1
 800b35e:	2300      	moveq	r3, #0
 800b360:	b2db      	uxtb	r3, r3
 800b362:	e008      	b.n	800b376 <HAL_TIM_PWM_Start+0x6a>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	bf14      	ite	ne
 800b370:	2301      	movne	r3, #1
 800b372:	2300      	moveq	r3, #0
 800b374:	b2db      	uxtb	r3, r3
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e068      	b.n	800b450 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d104      	bne.n	800b38e <HAL_TIM_PWM_Start+0x82>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2202      	movs	r2, #2
 800b388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b38c:	e013      	b.n	800b3b6 <HAL_TIM_PWM_Start+0xaa>
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	2b04      	cmp	r3, #4
 800b392:	d104      	bne.n	800b39e <HAL_TIM_PWM_Start+0x92>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2202      	movs	r2, #2
 800b398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b39c:	e00b      	b.n	800b3b6 <HAL_TIM_PWM_Start+0xaa>
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	2b08      	cmp	r3, #8
 800b3a2:	d104      	bne.n	800b3ae <HAL_TIM_PWM_Start+0xa2>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b3ac:	e003      	b.n	800b3b6 <HAL_TIM_PWM_Start+0xaa>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2202      	movs	r2, #2
 800b3b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 feec 	bl	800c19c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a23      	ldr	r2, [pc, #140]	@ (800b458 <HAL_TIM_PWM_Start+0x14c>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d107      	bne.n	800b3de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b3dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a1d      	ldr	r2, [pc, #116]	@ (800b458 <HAL_TIM_PWM_Start+0x14c>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d018      	beq.n	800b41a <HAL_TIM_PWM_Start+0x10e>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3f0:	d013      	beq.n	800b41a <HAL_TIM_PWM_Start+0x10e>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a19      	ldr	r2, [pc, #100]	@ (800b45c <HAL_TIM_PWM_Start+0x150>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d00e      	beq.n	800b41a <HAL_TIM_PWM_Start+0x10e>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a17      	ldr	r2, [pc, #92]	@ (800b460 <HAL_TIM_PWM_Start+0x154>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d009      	beq.n	800b41a <HAL_TIM_PWM_Start+0x10e>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a16      	ldr	r2, [pc, #88]	@ (800b464 <HAL_TIM_PWM_Start+0x158>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d004      	beq.n	800b41a <HAL_TIM_PWM_Start+0x10e>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a14      	ldr	r2, [pc, #80]	@ (800b468 <HAL_TIM_PWM_Start+0x15c>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d111      	bne.n	800b43e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	f003 0307 	and.w	r3, r3, #7
 800b424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b06      	cmp	r3, #6
 800b42a:	d010      	beq.n	800b44e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f042 0201 	orr.w	r2, r2, #1
 800b43a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b43c:	e007      	b.n	800b44e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f042 0201 	orr.w	r2, r2, #1
 800b44c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	40010000 	.word	0x40010000
 800b45c:	40000400 	.word	0x40000400
 800b460:	40000800 	.word	0x40000800
 800b464:	40000c00 	.word	0x40000c00
 800b468:	40014000 	.word	0x40014000

0800b46c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	e097      	b.n	800b5b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d106      	bne.n	800b49a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7f6 fe07 	bl	80020a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2202      	movs	r2, #2
 800b49e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	6812      	ldr	r2, [r2, #0]
 800b4ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b4b0:	f023 0307 	bic.w	r3, r3, #7
 800b4b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	3304      	adds	r3, #4
 800b4be:	4619      	mov	r1, r3
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	f000 fbbf 	bl	800bc44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	6a1b      	ldr	r3, [r3, #32]
 800b4dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4ee:	f023 0303 	bic.w	r3, r3, #3
 800b4f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	689a      	ldr	r2, [r3, #8]
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	021b      	lsls	r3, r3, #8
 800b4fe:	4313      	orrs	r3, r2
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	4313      	orrs	r3, r2
 800b504:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b50c:	f023 030c 	bic.w	r3, r3, #12
 800b510:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b518:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b51c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68da      	ldr	r2, [r3, #12]
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	021b      	lsls	r3, r3, #8
 800b528:	4313      	orrs	r3, r2
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	011a      	lsls	r2, r3, #4
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	031b      	lsls	r3, r3, #12
 800b53c:	4313      	orrs	r3, r2
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	4313      	orrs	r3, r2
 800b542:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b54a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b552:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	685a      	ldr	r2, [r3, #4]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	011b      	lsls	r3, r3, #4
 800b55e:	4313      	orrs	r3, r2
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	4313      	orrs	r3, r2
 800b564:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	697a      	ldr	r2, [r7, #20]
 800b56c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	693a      	ldr	r2, [r7, #16]
 800b574:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2201      	movs	r2, #1
 800b582:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2201      	movs	r2, #1
 800b58a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2201      	movs	r2, #1
 800b592:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b5c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b5d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b5d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b5e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d110      	bne.n	800b60a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d102      	bne.n	800b5f4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b5ee:	7b7b      	ldrb	r3, [r7, #13]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d001      	beq.n	800b5f8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e089      	b.n	800b70c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2202      	movs	r2, #2
 800b604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b608:	e031      	b.n	800b66e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	d110      	bne.n	800b632 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b610:	7bbb      	ldrb	r3, [r7, #14]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d102      	bne.n	800b61c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b616:	7b3b      	ldrb	r3, [r7, #12]
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d001      	beq.n	800b620 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e075      	b.n	800b70c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2202      	movs	r2, #2
 800b624:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2202      	movs	r2, #2
 800b62c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b630:	e01d      	b.n	800b66e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b632:	7bfb      	ldrb	r3, [r7, #15]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d108      	bne.n	800b64a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b638:	7bbb      	ldrb	r3, [r7, #14]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d105      	bne.n	800b64a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b63e:	7b7b      	ldrb	r3, [r7, #13]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d102      	bne.n	800b64a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b644:	7b3b      	ldrb	r3, [r7, #12]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d001      	beq.n	800b64e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e05e      	b.n	800b70c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2202      	movs	r2, #2
 800b652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2202      	movs	r2, #2
 800b65a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2202      	movs	r2, #2
 800b662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2202      	movs	r2, #2
 800b66a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d003      	beq.n	800b67c <HAL_TIM_Encoder_Start_IT+0xc4>
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2b04      	cmp	r3, #4
 800b678:	d010      	beq.n	800b69c <HAL_TIM_Encoder_Start_IT+0xe4>
 800b67a:	e01f      	b.n	800b6bc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2201      	movs	r2, #1
 800b682:	2100      	movs	r1, #0
 800b684:	4618      	mov	r0, r3
 800b686:	f000 fd89 	bl	800c19c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68da      	ldr	r2, [r3, #12]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f042 0202 	orr.w	r2, r2, #2
 800b698:	60da      	str	r2, [r3, #12]
      break;
 800b69a:	e02e      	b.n	800b6fa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	2104      	movs	r1, #4
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 fd79 	bl	800c19c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68da      	ldr	r2, [r3, #12]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f042 0204 	orr.w	r2, r2, #4
 800b6b8:	60da      	str	r2, [r3, #12]
      break;
 800b6ba:	e01e      	b.n	800b6fa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f000 fd69 	bl	800c19c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	2104      	movs	r1, #4
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 fd62 	bl	800c19c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68da      	ldr	r2, [r3, #12]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f042 0202 	orr.w	r2, r2, #2
 800b6e6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68da      	ldr	r2, [r3, #12]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f042 0204 	orr.w	r2, r2, #4
 800b6f6:	60da      	str	r2, [r3, #12]
      break;
 800b6f8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f042 0201 	orr.w	r2, r2, #1
 800b708:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	f003 0302 	and.w	r3, r3, #2
 800b732:	2b00      	cmp	r3, #0
 800b734:	d020      	beq.n	800b778 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f003 0302 	and.w	r3, r3, #2
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d01b      	beq.n	800b778 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f06f 0202 	mvn.w	r2, #2
 800b748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	699b      	ldr	r3, [r3, #24]
 800b756:	f003 0303 	and.w	r3, r3, #3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d003      	beq.n	800b766 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7f6 f8ba 	bl	80018d8 <HAL_TIM_IC_CaptureCallback>
 800b764:	e005      	b.n	800b772 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 fa4d 	bl	800bc06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fa54 	bl	800bc1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f003 0304 	and.w	r3, r3, #4
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d020      	beq.n	800b7c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f003 0304 	and.w	r3, r3, #4
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d01b      	beq.n	800b7c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f06f 0204 	mvn.w	r2, #4
 800b794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2202      	movs	r2, #2
 800b79a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	699b      	ldr	r3, [r3, #24]
 800b7a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d003      	beq.n	800b7b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f7f6 f894 	bl	80018d8 <HAL_TIM_IC_CaptureCallback>
 800b7b0:	e005      	b.n	800b7be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fa27 	bl	800bc06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 fa2e 	bl	800bc1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	f003 0308 	and.w	r3, r3, #8
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d020      	beq.n	800b810 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f003 0308 	and.w	r3, r3, #8
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d01b      	beq.n	800b810 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f06f 0208 	mvn.w	r2, #8
 800b7e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2204      	movs	r2, #4
 800b7e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	69db      	ldr	r3, [r3, #28]
 800b7ee:	f003 0303 	and.w	r3, r3, #3
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7f6 f86e 	bl	80018d8 <HAL_TIM_IC_CaptureCallback>
 800b7fc:	e005      	b.n	800b80a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fa01 	bl	800bc06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fa08 	bl	800bc1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	f003 0310 	and.w	r3, r3, #16
 800b816:	2b00      	cmp	r3, #0
 800b818:	d020      	beq.n	800b85c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f003 0310 	and.w	r3, r3, #16
 800b820:	2b00      	cmp	r3, #0
 800b822:	d01b      	beq.n	800b85c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f06f 0210 	mvn.w	r2, #16
 800b82c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2208      	movs	r2, #8
 800b832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	69db      	ldr	r3, [r3, #28]
 800b83a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d003      	beq.n	800b84a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7f6 f848 	bl	80018d8 <HAL_TIM_IC_CaptureCallback>
 800b848:	e005      	b.n	800b856 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f9db 	bl	800bc06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 f9e2 	bl	800bc1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	f003 0301 	and.w	r3, r3, #1
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00c      	beq.n	800b880 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f003 0301 	and.w	r3, r3, #1
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d007      	beq.n	800b880 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f06f 0201 	mvn.w	r2, #1
 800b878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7f6 f868 	bl	8001950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00c      	beq.n	800b8a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b890:	2b00      	cmp	r3, #0
 800b892:	d007      	beq.n	800b8a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b89c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fd1a 	bl	800c2d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00c      	beq.n	800b8c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d007      	beq.n	800b8c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b8c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f9b3 	bl	800bc2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	f003 0320 	and.w	r3, r3, #32
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d00c      	beq.n	800b8ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f003 0320 	and.w	r3, r3, #32
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d007      	beq.n	800b8ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f06f 0220 	mvn.w	r2, #32
 800b8e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fcec 	bl	800c2c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8ec:	bf00      	nop
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d101      	bne.n	800b912 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b90e:	2302      	movs	r3, #2
 800b910:	e0ae      	b.n	800ba70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2201      	movs	r2, #1
 800b916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b0c      	cmp	r3, #12
 800b91e:	f200 809f 	bhi.w	800ba60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b922:	a201      	add	r2, pc, #4	@ (adr r2, 800b928 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b928:	0800b95d 	.word	0x0800b95d
 800b92c:	0800ba61 	.word	0x0800ba61
 800b930:	0800ba61 	.word	0x0800ba61
 800b934:	0800ba61 	.word	0x0800ba61
 800b938:	0800b99d 	.word	0x0800b99d
 800b93c:	0800ba61 	.word	0x0800ba61
 800b940:	0800ba61 	.word	0x0800ba61
 800b944:	0800ba61 	.word	0x0800ba61
 800b948:	0800b9df 	.word	0x0800b9df
 800b94c:	0800ba61 	.word	0x0800ba61
 800b950:	0800ba61 	.word	0x0800ba61
 800b954:	0800ba61 	.word	0x0800ba61
 800b958:	0800ba1f 	.word	0x0800ba1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68b9      	ldr	r1, [r7, #8]
 800b962:	4618      	mov	r0, r3
 800b964:	f000 f9f4 	bl	800bd50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	699a      	ldr	r2, [r3, #24]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f042 0208 	orr.w	r2, r2, #8
 800b976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	699a      	ldr	r2, [r3, #24]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f022 0204 	bic.w	r2, r2, #4
 800b986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	6999      	ldr	r1, [r3, #24]
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	691a      	ldr	r2, [r3, #16]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	430a      	orrs	r2, r1
 800b998:	619a      	str	r2, [r3, #24]
      break;
 800b99a:	e064      	b.n	800ba66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68b9      	ldr	r1, [r7, #8]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 fa3a 	bl	800be1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	699a      	ldr	r2, [r3, #24]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	699a      	ldr	r2, [r3, #24]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6999      	ldr	r1, [r3, #24]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	021a      	lsls	r2, r3, #8
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	430a      	orrs	r2, r1
 800b9da:	619a      	str	r2, [r3, #24]
      break;
 800b9dc:	e043      	b.n	800ba66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68b9      	ldr	r1, [r7, #8]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f000 fa85 	bl	800bef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	69da      	ldr	r2, [r3, #28]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f042 0208 	orr.w	r2, r2, #8
 800b9f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	69da      	ldr	r2, [r3, #28]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f022 0204 	bic.w	r2, r2, #4
 800ba08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	69d9      	ldr	r1, [r3, #28]
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	691a      	ldr	r2, [r3, #16]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	430a      	orrs	r2, r1
 800ba1a:	61da      	str	r2, [r3, #28]
      break;
 800ba1c:	e023      	b.n	800ba66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	68b9      	ldr	r1, [r7, #8]
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 facf 	bl	800bfc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	69da      	ldr	r2, [r3, #28]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	69da      	ldr	r2, [r3, #28]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	69d9      	ldr	r1, [r3, #28]
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	021a      	lsls	r2, r3, #8
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	430a      	orrs	r2, r1
 800ba5c:	61da      	str	r2, [r3, #28]
      break;
 800ba5e:	e002      	b.n	800ba66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	75fb      	strb	r3, [r7, #23]
      break;
 800ba64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3718      	adds	r7, #24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba82:	2300      	movs	r3, #0
 800ba84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d101      	bne.n	800ba94 <HAL_TIM_ConfigClockSource+0x1c>
 800ba90:	2302      	movs	r3, #2
 800ba92:	e0b4      	b.n	800bbfe <HAL_TIM_ConfigClockSource+0x186>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2202      	movs	r2, #2
 800baa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800baba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68ba      	ldr	r2, [r7, #8]
 800bac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bacc:	d03e      	beq.n	800bb4c <HAL_TIM_ConfigClockSource+0xd4>
 800bace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bad2:	f200 8087 	bhi.w	800bbe4 <HAL_TIM_ConfigClockSource+0x16c>
 800bad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bada:	f000 8086 	beq.w	800bbea <HAL_TIM_ConfigClockSource+0x172>
 800bade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bae2:	d87f      	bhi.n	800bbe4 <HAL_TIM_ConfigClockSource+0x16c>
 800bae4:	2b70      	cmp	r3, #112	@ 0x70
 800bae6:	d01a      	beq.n	800bb1e <HAL_TIM_ConfigClockSource+0xa6>
 800bae8:	2b70      	cmp	r3, #112	@ 0x70
 800baea:	d87b      	bhi.n	800bbe4 <HAL_TIM_ConfigClockSource+0x16c>
 800baec:	2b60      	cmp	r3, #96	@ 0x60
 800baee:	d050      	beq.n	800bb92 <HAL_TIM_ConfigClockSource+0x11a>
 800baf0:	2b60      	cmp	r3, #96	@ 0x60
 800baf2:	d877      	bhi.n	800bbe4 <HAL_TIM_ConfigClockSource+0x16c>
 800baf4:	2b50      	cmp	r3, #80	@ 0x50
 800baf6:	d03c      	beq.n	800bb72 <HAL_TIM_ConfigClockSource+0xfa>
 800baf8:	2b50      	cmp	r3, #80	@ 0x50
 800bafa:	d873      	bhi.n	800bbe4 <HAL_TIM_ConfigClockSource+0x16c>
 800bafc:	2b40      	cmp	r3, #64	@ 0x40
 800bafe:	d058      	beq.n	800bbb2 <HAL_TIM_ConfigClockSource+0x13a>
 800bb00:	2b40      	cmp	r3, #64	@ 0x40
 800bb02:	d86f      	bhi.n	800bbe4 <HAL_TIM_ConfigClockSource+0x16c>
 800bb04:	2b30      	cmp	r3, #48	@ 0x30
 800bb06:	d064      	beq.n	800bbd2 <HAL_TIM_ConfigClockSource+0x15a>
 800bb08:	2b30      	cmp	r3, #48	@ 0x30
 800bb0a:	d86b      	bhi.n	800bbe4 <HAL_TIM_ConfigClockSource+0x16c>
 800bb0c:	2b20      	cmp	r3, #32
 800bb0e:	d060      	beq.n	800bbd2 <HAL_TIM_ConfigClockSource+0x15a>
 800bb10:	2b20      	cmp	r3, #32
 800bb12:	d867      	bhi.n	800bbe4 <HAL_TIM_ConfigClockSource+0x16c>
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d05c      	beq.n	800bbd2 <HAL_TIM_ConfigClockSource+0x15a>
 800bb18:	2b10      	cmp	r3, #16
 800bb1a:	d05a      	beq.n	800bbd2 <HAL_TIM_ConfigClockSource+0x15a>
 800bb1c:	e062      	b.n	800bbe4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb2e:	f000 fb15 	bl	800c15c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bb40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	609a      	str	r2, [r3, #8]
      break;
 800bb4a:	e04f      	b.n	800bbec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb5c:	f000 fafe 	bl	800c15c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	689a      	ldr	r2, [r3, #8]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bb6e:	609a      	str	r2, [r3, #8]
      break;
 800bb70:	e03c      	b.n	800bbec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f000 fa72 	bl	800c068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2150      	movs	r1, #80	@ 0x50
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f000 facb 	bl	800c126 <TIM_ITRx_SetConfig>
      break;
 800bb90:	e02c      	b.n	800bbec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb9e:	461a      	mov	r2, r3
 800bba0:	f000 fa91 	bl	800c0c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2160      	movs	r1, #96	@ 0x60
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 fabb 	bl	800c126 <TIM_ITRx_SetConfig>
      break;
 800bbb0:	e01c      	b.n	800bbec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	f000 fa52 	bl	800c068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2140      	movs	r1, #64	@ 0x40
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 faab 	bl	800c126 <TIM_ITRx_SetConfig>
      break;
 800bbd0:	e00c      	b.n	800bbec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	4610      	mov	r0, r2
 800bbde:	f000 faa2 	bl	800c126 <TIM_ITRx_SetConfig>
      break;
 800bbe2:	e003      	b.n	800bbec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	73fb      	strb	r3, [r7, #15]
      break;
 800bbe8:	e000      	b.n	800bbec <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bbea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bbfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc06:	b480      	push	{r7}
 800bc08:	b083      	sub	sp, #12
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc0e:	bf00      	nop
 800bc10:	370c      	adds	r7, #12
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	b083      	sub	sp, #12
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc22:	bf00      	nop
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b083      	sub	sp, #12
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc36:	bf00      	nop
 800bc38:	370c      	adds	r7, #12
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
	...

0800bc44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4a37      	ldr	r2, [pc, #220]	@ (800bd34 <TIM_Base_SetConfig+0xf0>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d00f      	beq.n	800bc7c <TIM_Base_SetConfig+0x38>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc62:	d00b      	beq.n	800bc7c <TIM_Base_SetConfig+0x38>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4a34      	ldr	r2, [pc, #208]	@ (800bd38 <TIM_Base_SetConfig+0xf4>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d007      	beq.n	800bc7c <TIM_Base_SetConfig+0x38>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a33      	ldr	r2, [pc, #204]	@ (800bd3c <TIM_Base_SetConfig+0xf8>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d003      	beq.n	800bc7c <TIM_Base_SetConfig+0x38>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4a32      	ldr	r2, [pc, #200]	@ (800bd40 <TIM_Base_SetConfig+0xfc>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d108      	bne.n	800bc8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4a28      	ldr	r2, [pc, #160]	@ (800bd34 <TIM_Base_SetConfig+0xf0>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d01b      	beq.n	800bcce <TIM_Base_SetConfig+0x8a>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc9c:	d017      	beq.n	800bcce <TIM_Base_SetConfig+0x8a>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4a25      	ldr	r2, [pc, #148]	@ (800bd38 <TIM_Base_SetConfig+0xf4>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d013      	beq.n	800bcce <TIM_Base_SetConfig+0x8a>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4a24      	ldr	r2, [pc, #144]	@ (800bd3c <TIM_Base_SetConfig+0xf8>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d00f      	beq.n	800bcce <TIM_Base_SetConfig+0x8a>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a23      	ldr	r2, [pc, #140]	@ (800bd40 <TIM_Base_SetConfig+0xfc>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d00b      	beq.n	800bcce <TIM_Base_SetConfig+0x8a>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a22      	ldr	r2, [pc, #136]	@ (800bd44 <TIM_Base_SetConfig+0x100>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d007      	beq.n	800bcce <TIM_Base_SetConfig+0x8a>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a21      	ldr	r2, [pc, #132]	@ (800bd48 <TIM_Base_SetConfig+0x104>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d003      	beq.n	800bcce <TIM_Base_SetConfig+0x8a>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a20      	ldr	r2, [pc, #128]	@ (800bd4c <TIM_Base_SetConfig+0x108>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d108      	bne.n	800bce0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	689a      	ldr	r2, [r3, #8]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a0c      	ldr	r2, [pc, #48]	@ (800bd34 <TIM_Base_SetConfig+0xf0>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d103      	bne.n	800bd0e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	691a      	ldr	r2, [r3, #16]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f043 0204 	orr.w	r2, r3, #4
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	601a      	str	r2, [r3, #0]
}
 800bd26:	bf00      	nop
 800bd28:	3714      	adds	r7, #20
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	40010000 	.word	0x40010000
 800bd38:	40000400 	.word	0x40000400
 800bd3c:	40000800 	.word	0x40000800
 800bd40:	40000c00 	.word	0x40000c00
 800bd44:	40014000 	.word	0x40014000
 800bd48:	40014400 	.word	0x40014400
 800bd4c:	40014800 	.word	0x40014800

0800bd50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b087      	sub	sp, #28
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a1b      	ldr	r3, [r3, #32]
 800bd64:	f023 0201 	bic.w	r2, r3, #1
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	699b      	ldr	r3, [r3, #24]
 800bd76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f023 0303 	bic.w	r3, r3, #3
 800bd86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f023 0302 	bic.w	r3, r3, #2
 800bd98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	697a      	ldr	r2, [r7, #20]
 800bda0:	4313      	orrs	r3, r2
 800bda2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a1c      	ldr	r2, [pc, #112]	@ (800be18 <TIM_OC1_SetConfig+0xc8>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d10c      	bne.n	800bdc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	f023 0308 	bic.w	r3, r3, #8
 800bdb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	697a      	ldr	r2, [r7, #20]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	f023 0304 	bic.w	r3, r3, #4
 800bdc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4a13      	ldr	r2, [pc, #76]	@ (800be18 <TIM_OC1_SetConfig+0xc8>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d111      	bne.n	800bdf2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bdd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	4313      	orrs	r3, r2
 800bde6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	621a      	str	r2, [r3, #32]
}
 800be0c:	bf00      	nop
 800be0e:	371c      	adds	r7, #28
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr
 800be18:	40010000 	.word	0x40010000

0800be1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b087      	sub	sp, #28
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a1b      	ldr	r3, [r3, #32]
 800be2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a1b      	ldr	r3, [r3, #32]
 800be30:	f023 0210 	bic.w	r2, r3, #16
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	021b      	lsls	r3, r3, #8
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	4313      	orrs	r3, r2
 800be5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	f023 0320 	bic.w	r3, r3, #32
 800be66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	011b      	lsls	r3, r3, #4
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	4313      	orrs	r3, r2
 800be72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a1e      	ldr	r2, [pc, #120]	@ (800bef0 <TIM_OC2_SetConfig+0xd4>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d10d      	bne.n	800be98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	011b      	lsls	r3, r3, #4
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4a15      	ldr	r2, [pc, #84]	@ (800bef0 <TIM_OC2_SetConfig+0xd4>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d113      	bne.n	800bec8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800beae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	695b      	ldr	r3, [r3, #20]
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	4313      	orrs	r3, r2
 800beba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	699b      	ldr	r3, [r3, #24]
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	693a      	ldr	r2, [r7, #16]
 800becc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	685a      	ldr	r2, [r3, #4]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	697a      	ldr	r2, [r7, #20]
 800bee0:	621a      	str	r2, [r3, #32]
}
 800bee2:	bf00      	nop
 800bee4:	371c      	adds	r7, #28
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	40010000 	.word	0x40010000

0800bef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b087      	sub	sp, #28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a1b      	ldr	r3, [r3, #32]
 800bf08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	69db      	ldr	r3, [r3, #28]
 800bf1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f023 0303 	bic.w	r3, r3, #3
 800bf2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bf3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	021b      	lsls	r3, r3, #8
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	4a1d      	ldr	r2, [pc, #116]	@ (800bfc4 <TIM_OC3_SetConfig+0xd0>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d10d      	bne.n	800bf6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bf58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	021b      	lsls	r3, r3, #8
 800bf60:	697a      	ldr	r2, [r7, #20]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bf6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4a14      	ldr	r2, [pc, #80]	@ (800bfc4 <TIM_OC3_SetConfig+0xd0>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d113      	bne.n	800bf9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bf84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	695b      	ldr	r3, [r3, #20]
 800bf8a:	011b      	lsls	r3, r3, #4
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	011b      	lsls	r3, r3, #4
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	693a      	ldr	r2, [r7, #16]
 800bfa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	685a      	ldr	r2, [r3, #4]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	697a      	ldr	r2, [r7, #20]
 800bfb6:	621a      	str	r2, [r3, #32]
}
 800bfb8:	bf00      	nop
 800bfba:	371c      	adds	r7, #28
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr
 800bfc4:	40010000 	.word	0x40010000

0800bfc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b087      	sub	sp, #28
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6a1b      	ldr	r3, [r3, #32]
 800bfd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a1b      	ldr	r3, [r3, #32]
 800bfdc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	69db      	ldr	r3, [r3, #28]
 800bfee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	021b      	lsls	r3, r3, #8
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	4313      	orrs	r3, r2
 800c00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	031b      	lsls	r3, r3, #12
 800c01a:	693a      	ldr	r2, [r7, #16]
 800c01c:	4313      	orrs	r3, r2
 800c01e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a10      	ldr	r2, [pc, #64]	@ (800c064 <TIM_OC4_SetConfig+0x9c>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d109      	bne.n	800c03c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c02e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	695b      	ldr	r3, [r3, #20]
 800c034:	019b      	lsls	r3, r3, #6
 800c036:	697a      	ldr	r2, [r7, #20]
 800c038:	4313      	orrs	r3, r2
 800c03a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	693a      	ldr	r2, [r7, #16]
 800c054:	621a      	str	r2, [r3, #32]
}
 800c056:	bf00      	nop
 800c058:	371c      	adds	r7, #28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	40010000 	.word	0x40010000

0800c068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c068:	b480      	push	{r7}
 800c06a:	b087      	sub	sp, #28
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6a1b      	ldr	r3, [r3, #32]
 800c078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	f023 0201 	bic.w	r2, r3, #1
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	699b      	ldr	r3, [r3, #24]
 800c08a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	011b      	lsls	r3, r3, #4
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	4313      	orrs	r3, r2
 800c09c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	f023 030a 	bic.w	r3, r3, #10
 800c0a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c0a6:	697a      	ldr	r2, [r7, #20]
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	621a      	str	r2, [r3, #32]
}
 800c0ba:	bf00      	nop
 800c0bc:	371c      	adds	r7, #28
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0c6:	b480      	push	{r7}
 800c0c8:	b087      	sub	sp, #28
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	60f8      	str	r0, [r7, #12]
 800c0ce:	60b9      	str	r1, [r7, #8]
 800c0d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6a1b      	ldr	r3, [r3, #32]
 800c0d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6a1b      	ldr	r3, [r3, #32]
 800c0dc:	f023 0210 	bic.w	r2, r3, #16
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	699b      	ldr	r3, [r3, #24]
 800c0e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c0f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	031b      	lsls	r3, r3, #12
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c102:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	011b      	lsls	r3, r3, #4
 800c108:	697a      	ldr	r2, [r7, #20]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	693a      	ldr	r2, [r7, #16]
 800c112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	621a      	str	r2, [r3, #32]
}
 800c11a:	bf00      	nop
 800c11c:	371c      	adds	r7, #28
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr

0800c126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c126:	b480      	push	{r7}
 800c128:	b085      	sub	sp, #20
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c13c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	4313      	orrs	r3, r2
 800c144:	f043 0307 	orr.w	r3, r3, #7
 800c148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	68fa      	ldr	r2, [r7, #12]
 800c14e:	609a      	str	r2, [r3, #8]
}
 800c150:	bf00      	nop
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b087      	sub	sp, #28
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	021a      	lsls	r2, r3, #8
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	431a      	orrs	r2, r3
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	4313      	orrs	r3, r2
 800c184:	697a      	ldr	r2, [r7, #20]
 800c186:	4313      	orrs	r3, r2
 800c188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	697a      	ldr	r2, [r7, #20]
 800c18e:	609a      	str	r2, [r3, #8]
}
 800c190:	bf00      	nop
 800c192:	371c      	adds	r7, #28
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b087      	sub	sp, #28
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	f003 031f 	and.w	r3, r3, #31
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6a1a      	ldr	r2, [r3, #32]
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	43db      	mvns	r3, r3
 800c1be:	401a      	ands	r2, r3
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6a1a      	ldr	r2, [r3, #32]
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	f003 031f 	and.w	r3, r3, #31
 800c1ce:	6879      	ldr	r1, [r7, #4]
 800c1d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c1d4:	431a      	orrs	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	621a      	str	r2, [r3, #32]
}
 800c1da:	bf00      	nop
 800c1dc:	371c      	adds	r7, #28
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
	...

0800c1e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d101      	bne.n	800c200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	e050      	b.n	800c2a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2202      	movs	r2, #2
 800c20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	4313      	orrs	r3, r2
 800c230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a1c      	ldr	r2, [pc, #112]	@ (800c2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d018      	beq.n	800c276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c24c:	d013      	beq.n	800c276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a18      	ldr	r2, [pc, #96]	@ (800c2b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d00e      	beq.n	800c276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a16      	ldr	r2, [pc, #88]	@ (800c2b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d009      	beq.n	800c276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a15      	ldr	r2, [pc, #84]	@ (800c2bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d004      	beq.n	800c276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a13      	ldr	r2, [pc, #76]	@ (800c2c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d10c      	bne.n	800c290 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c27c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	4313      	orrs	r3, r2
 800c286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	40010000 	.word	0x40010000
 800c2b4:	40000400 	.word	0x40000400
 800c2b8:	40000800 	.word	0x40000800
 800c2bc:	40000c00 	.word	0x40000c00
 800c2c0:	40014000 	.word	0x40014000

0800c2c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2cc:	bf00      	nop
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2e0:	bf00      	nop
 800c2e2:	370c      	adds	r7, #12
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c2ec:	b084      	sub	sp, #16
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b084      	sub	sp, #16
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	f107 001c 	add.w	r0, r7, #28
 800c2fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c2fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c302:	2b01      	cmp	r3, #1
 800c304:	d123      	bne.n	800c34e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c30a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800c31a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c32e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c332:	2b01      	cmp	r3, #1
 800c334:	d105      	bne.n	800c342 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f001 fae8 	bl	800d918 <USB_CoreReset>
 800c348:	4603      	mov	r3, r0
 800c34a:	73fb      	strb	r3, [r7, #15]
 800c34c:	e01b      	b.n	800c386 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f001 fadc 	bl	800d918 <USB_CoreReset>
 800c360:	4603      	mov	r3, r0
 800c362:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c364:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d106      	bne.n	800c37a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c370:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	639a      	str	r2, [r3, #56]	@ 0x38
 800c378:	e005      	b.n	800c386 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c37e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c386:	7fbb      	ldrb	r3, [r7, #30]
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d10b      	bne.n	800c3a4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	f043 0206 	orr.w	r2, r3, #6
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	f043 0220 	orr.w	r2, r3, #32
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c3b0:	b004      	add	sp, #16
 800c3b2:	4770      	bx	lr

0800c3b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b087      	sub	sp, #28
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c3c2:	79fb      	ldrb	r3, [r7, #7]
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d165      	bne.n	800c494 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	4a41      	ldr	r2, [pc, #260]	@ (800c4d0 <USB_SetTurnaroundTime+0x11c>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d906      	bls.n	800c3de <USB_SetTurnaroundTime+0x2a>
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	4a40      	ldr	r2, [pc, #256]	@ (800c4d4 <USB_SetTurnaroundTime+0x120>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d202      	bcs.n	800c3de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c3d8:	230f      	movs	r3, #15
 800c3da:	617b      	str	r3, [r7, #20]
 800c3dc:	e062      	b.n	800c4a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	4a3c      	ldr	r2, [pc, #240]	@ (800c4d4 <USB_SetTurnaroundTime+0x120>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d306      	bcc.n	800c3f4 <USB_SetTurnaroundTime+0x40>
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	4a3b      	ldr	r2, [pc, #236]	@ (800c4d8 <USB_SetTurnaroundTime+0x124>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d202      	bcs.n	800c3f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c3ee:	230e      	movs	r3, #14
 800c3f0:	617b      	str	r3, [r7, #20]
 800c3f2:	e057      	b.n	800c4a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	4a38      	ldr	r2, [pc, #224]	@ (800c4d8 <USB_SetTurnaroundTime+0x124>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d306      	bcc.n	800c40a <USB_SetTurnaroundTime+0x56>
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	4a37      	ldr	r2, [pc, #220]	@ (800c4dc <USB_SetTurnaroundTime+0x128>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d202      	bcs.n	800c40a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c404:	230d      	movs	r3, #13
 800c406:	617b      	str	r3, [r7, #20]
 800c408:	e04c      	b.n	800c4a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	4a33      	ldr	r2, [pc, #204]	@ (800c4dc <USB_SetTurnaroundTime+0x128>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d306      	bcc.n	800c420 <USB_SetTurnaroundTime+0x6c>
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	4a32      	ldr	r2, [pc, #200]	@ (800c4e0 <USB_SetTurnaroundTime+0x12c>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d802      	bhi.n	800c420 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c41a:	230c      	movs	r3, #12
 800c41c:	617b      	str	r3, [r7, #20]
 800c41e:	e041      	b.n	800c4a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	4a2f      	ldr	r2, [pc, #188]	@ (800c4e0 <USB_SetTurnaroundTime+0x12c>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d906      	bls.n	800c436 <USB_SetTurnaroundTime+0x82>
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	4a2e      	ldr	r2, [pc, #184]	@ (800c4e4 <USB_SetTurnaroundTime+0x130>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d802      	bhi.n	800c436 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c430:	230b      	movs	r3, #11
 800c432:	617b      	str	r3, [r7, #20]
 800c434:	e036      	b.n	800c4a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	4a2a      	ldr	r2, [pc, #168]	@ (800c4e4 <USB_SetTurnaroundTime+0x130>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d906      	bls.n	800c44c <USB_SetTurnaroundTime+0x98>
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	4a29      	ldr	r2, [pc, #164]	@ (800c4e8 <USB_SetTurnaroundTime+0x134>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d802      	bhi.n	800c44c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c446:	230a      	movs	r3, #10
 800c448:	617b      	str	r3, [r7, #20]
 800c44a:	e02b      	b.n	800c4a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	4a26      	ldr	r2, [pc, #152]	@ (800c4e8 <USB_SetTurnaroundTime+0x134>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d906      	bls.n	800c462 <USB_SetTurnaroundTime+0xae>
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	4a25      	ldr	r2, [pc, #148]	@ (800c4ec <USB_SetTurnaroundTime+0x138>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d202      	bcs.n	800c462 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c45c:	2309      	movs	r3, #9
 800c45e:	617b      	str	r3, [r7, #20]
 800c460:	e020      	b.n	800c4a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	4a21      	ldr	r2, [pc, #132]	@ (800c4ec <USB_SetTurnaroundTime+0x138>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d306      	bcc.n	800c478 <USB_SetTurnaroundTime+0xc4>
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	4a20      	ldr	r2, [pc, #128]	@ (800c4f0 <USB_SetTurnaroundTime+0x13c>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d802      	bhi.n	800c478 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c472:	2308      	movs	r3, #8
 800c474:	617b      	str	r3, [r7, #20]
 800c476:	e015      	b.n	800c4a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	4a1d      	ldr	r2, [pc, #116]	@ (800c4f0 <USB_SetTurnaroundTime+0x13c>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d906      	bls.n	800c48e <USB_SetTurnaroundTime+0xda>
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	4a1c      	ldr	r2, [pc, #112]	@ (800c4f4 <USB_SetTurnaroundTime+0x140>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d202      	bcs.n	800c48e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c488:	2307      	movs	r3, #7
 800c48a:	617b      	str	r3, [r7, #20]
 800c48c:	e00a      	b.n	800c4a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c48e:	2306      	movs	r3, #6
 800c490:	617b      	str	r3, [r7, #20]
 800c492:	e007      	b.n	800c4a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c494:	79fb      	ldrb	r3, [r7, #7]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d102      	bne.n	800c4a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c49a:	2309      	movs	r3, #9
 800c49c:	617b      	str	r3, [r7, #20]
 800c49e:	e001      	b.n	800c4a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c4a0:	2309      	movs	r3, #9
 800c4a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	68da      	ldr	r2, [r3, #12]
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	029b      	lsls	r3, r3, #10
 800c4b8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800c4bc:	431a      	orrs	r2, r3
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	371c      	adds	r7, #28
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr
 800c4d0:	00d8acbf 	.word	0x00d8acbf
 800c4d4:	00e4e1c0 	.word	0x00e4e1c0
 800c4d8:	00f42400 	.word	0x00f42400
 800c4dc:	01067380 	.word	0x01067380
 800c4e0:	011a499f 	.word	0x011a499f
 800c4e4:	01312cff 	.word	0x01312cff
 800c4e8:	014ca43f 	.word	0x014ca43f
 800c4ec:	016e3600 	.word	0x016e3600
 800c4f0:	01a6ab1f 	.word	0x01a6ab1f
 800c4f4:	01e84800 	.word	0x01e84800

0800c4f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	f043 0201 	orr.w	r2, r3, #1
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c51a:	b480      	push	{r7}
 800c51c:	b083      	sub	sp, #12
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	f023 0201 	bic.w	r2, r3, #1
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c52e:	2300      	movs	r3, #0
}
 800c530:	4618      	mov	r0, r3
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	460b      	mov	r3, r1
 800c546:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c548:	2300      	movs	r3, #0
 800c54a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c558:	78fb      	ldrb	r3, [r7, #3]
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d115      	bne.n	800c58a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c56a:	200a      	movs	r0, #10
 800c56c:	f7f9 fa26 	bl	80059bc <HAL_Delay>
      ms += 10U;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	330a      	adds	r3, #10
 800c574:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f001 f93f 	bl	800d7fa <USB_GetMode>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d01e      	beq.n	800c5c0 <USB_SetCurrentMode+0x84>
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2bc7      	cmp	r3, #199	@ 0xc7
 800c586:	d9f0      	bls.n	800c56a <USB_SetCurrentMode+0x2e>
 800c588:	e01a      	b.n	800c5c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c58a:	78fb      	ldrb	r3, [r7, #3]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d115      	bne.n	800c5bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c59c:	200a      	movs	r0, #10
 800c59e:	f7f9 fa0d 	bl	80059bc <HAL_Delay>
      ms += 10U;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	330a      	adds	r3, #10
 800c5a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f001 f926 	bl	800d7fa <USB_GetMode>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d005      	beq.n	800c5c0 <USB_SetCurrentMode+0x84>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2bc7      	cmp	r3, #199	@ 0xc7
 800c5b8:	d9f0      	bls.n	800c59c <USB_SetCurrentMode+0x60>
 800c5ba:	e001      	b.n	800c5c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c5bc:	2301      	movs	r3, #1
 800c5be:	e005      	b.n	800c5cc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2bc8      	cmp	r3, #200	@ 0xc8
 800c5c4:	d101      	bne.n	800c5ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e000      	b.n	800c5cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b086      	sub	sp, #24
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
 800c5de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c5e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	613b      	str	r3, [r7, #16]
 800c5f2:	e009      	b.n	800c608 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	3340      	adds	r3, #64	@ 0x40
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	4413      	add	r3, r2
 800c5fe:	2200      	movs	r2, #0
 800c600:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	3301      	adds	r3, #1
 800c606:	613b      	str	r3, [r7, #16]
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	2b0e      	cmp	r3, #14
 800c60c:	d9f2      	bls.n	800c5f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c60e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c612:	2b00      	cmp	r3, #0
 800c614:	d11c      	bne.n	800c650 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c624:	f043 0302 	orr.w	r3, r3, #2
 800c628:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c62e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c63a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c646:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	639a      	str	r2, [r3, #56]	@ 0x38
 800c64e:	e00b      	b.n	800c668 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c654:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c660:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c66e:	461a      	mov	r2, r3
 800c670:	2300      	movs	r3, #0
 800c672:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c674:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d10d      	bne.n	800c698 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c67c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c680:	2b00      	cmp	r3, #0
 800c682:	d104      	bne.n	800c68e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c684:	2100      	movs	r1, #0
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 f968 	bl	800c95c <USB_SetDevSpeed>
 800c68c:	e008      	b.n	800c6a0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c68e:	2101      	movs	r1, #1
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 f963 	bl	800c95c <USB_SetDevSpeed>
 800c696:	e003      	b.n	800c6a0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c698:	2103      	movs	r1, #3
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f95e 	bl	800c95c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c6a0:	2110      	movs	r1, #16
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 f8fa 	bl	800c89c <USB_FlushTxFifo>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d001      	beq.n	800c6b2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 f924 	bl	800c900 <USB_FlushRxFifo>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d001      	beq.n	800c6c2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	613b      	str	r3, [r7, #16]
 800c6ea:	e043      	b.n	800c774 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	015a      	lsls	r2, r3, #5
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c6fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c702:	d118      	bne.n	800c736 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10a      	bne.n	800c720 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	015a      	lsls	r2, r3, #5
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	4413      	add	r3, r2
 800c712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c716:	461a      	mov	r2, r3
 800c718:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c71c:	6013      	str	r3, [r2, #0]
 800c71e:	e013      	b.n	800c748 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	015a      	lsls	r2, r3, #5
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	4413      	add	r3, r2
 800c728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c72c:	461a      	mov	r2, r3
 800c72e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c732:	6013      	str	r3, [r2, #0]
 800c734:	e008      	b.n	800c748 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	015a      	lsls	r2, r3, #5
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	4413      	add	r3, r2
 800c73e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c742:	461a      	mov	r2, r3
 800c744:	2300      	movs	r3, #0
 800c746:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	015a      	lsls	r2, r3, #5
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	4413      	add	r3, r2
 800c750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c754:	461a      	mov	r2, r3
 800c756:	2300      	movs	r3, #0
 800c758:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	015a      	lsls	r2, r3, #5
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	4413      	add	r3, r2
 800c762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c766:	461a      	mov	r2, r3
 800c768:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c76c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	3301      	adds	r3, #1
 800c772:	613b      	str	r3, [r7, #16]
 800c774:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c778:	461a      	mov	r2, r3
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d3b5      	bcc.n	800c6ec <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c780:	2300      	movs	r3, #0
 800c782:	613b      	str	r3, [r7, #16]
 800c784:	e043      	b.n	800c80e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	015a      	lsls	r2, r3, #5
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	4413      	add	r3, r2
 800c78e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c798:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c79c:	d118      	bne.n	800c7d0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10a      	bne.n	800c7ba <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	015a      	lsls	r2, r3, #5
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	4413      	add	r3, r2
 800c7ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	e013      	b.n	800c7e2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	015a      	lsls	r2, r3, #5
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c7cc:	6013      	str	r3, [r2, #0]
 800c7ce:	e008      	b.n	800c7e2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	015a      	lsls	r2, r3, #5
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7dc:	461a      	mov	r2, r3
 800c7de:	2300      	movs	r3, #0
 800c7e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	015a      	lsls	r2, r3, #5
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	015a      	lsls	r2, r3, #5
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c800:	461a      	mov	r2, r3
 800c802:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c806:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	3301      	adds	r3, #1
 800c80c:	613b      	str	r3, [r7, #16]
 800c80e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c812:	461a      	mov	r2, r3
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	4293      	cmp	r3, r2
 800c818:	d3b5      	bcc.n	800c786 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c82c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c83a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c83c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c840:	2b00      	cmp	r3, #0
 800c842:	d105      	bne.n	800c850 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	699b      	ldr	r3, [r3, #24]
 800c848:	f043 0210 	orr.w	r2, r3, #16
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	699a      	ldr	r2, [r3, #24]
 800c854:	4b10      	ldr	r3, [pc, #64]	@ (800c898 <USB_DevInit+0x2c4>)
 800c856:	4313      	orrs	r3, r2
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c85c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c860:	2b00      	cmp	r3, #0
 800c862:	d005      	beq.n	800c870 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	699b      	ldr	r3, [r3, #24]
 800c868:	f043 0208 	orr.w	r2, r3, #8
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c870:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c874:	2b01      	cmp	r3, #1
 800c876:	d107      	bne.n	800c888 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	699b      	ldr	r3, [r3, #24]
 800c87c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c880:	f043 0304 	orr.w	r3, r3, #4
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c888:	7dfb      	ldrb	r3, [r7, #23]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3718      	adds	r7, #24
 800c88e:	46bd      	mov	sp, r7
 800c890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c894:	b004      	add	sp, #16
 800c896:	4770      	bx	lr
 800c898:	803c3800 	.word	0x803c3800

0800c89c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c8b6:	d901      	bls.n	800c8bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	e01b      	b.n	800c8f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	daf2      	bge.n	800c8aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	019b      	lsls	r3, r3, #6
 800c8cc:	f043 0220 	orr.w	r2, r3, #32
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c8e0:	d901      	bls.n	800c8e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	e006      	b.n	800c8f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	691b      	ldr	r3, [r3, #16]
 800c8ea:	f003 0320 	and.w	r3, r3, #32
 800c8ee:	2b20      	cmp	r3, #32
 800c8f0:	d0f0      	beq.n	800c8d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c8f2:	2300      	movs	r3, #0
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3714      	adds	r7, #20
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c908:	2300      	movs	r3, #0
 800c90a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	3301      	adds	r3, #1
 800c910:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c918:	d901      	bls.n	800c91e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c91a:	2303      	movs	r3, #3
 800c91c:	e018      	b.n	800c950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	691b      	ldr	r3, [r3, #16]
 800c922:	2b00      	cmp	r3, #0
 800c924:	daf2      	bge.n	800c90c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c926:	2300      	movs	r3, #0
 800c928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2210      	movs	r2, #16
 800c92e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	3301      	adds	r3, #1
 800c934:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c93c:	d901      	bls.n	800c942 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c93e:	2303      	movs	r3, #3
 800c940:	e006      	b.n	800c950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	691b      	ldr	r3, [r3, #16]
 800c946:	f003 0310 	and.w	r3, r3, #16
 800c94a:	2b10      	cmp	r3, #16
 800c94c:	d0f0      	beq.n	800c930 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c94e:	2300      	movs	r3, #0
}
 800c950:	4618      	mov	r0, r3
 800c952:	3714      	adds	r7, #20
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	460b      	mov	r3, r1
 800c966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	78fb      	ldrb	r3, [r7, #3]
 800c976:	68f9      	ldr	r1, [r7, #12]
 800c978:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c97c:	4313      	orrs	r3, r2
 800c97e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c980:	2300      	movs	r3, #0
}
 800c982:	4618      	mov	r0, r3
 800c984:	3714      	adds	r7, #20
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr

0800c98e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c98e:	b480      	push	{r7}
 800c990:	b087      	sub	sp, #28
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	f003 0306 	and.w	r3, r3, #6
 800c9a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d102      	bne.n	800c9b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	75fb      	strb	r3, [r7, #23]
 800c9b2:	e00a      	b.n	800c9ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d002      	beq.n	800c9c0 <USB_GetDevSpeed+0x32>
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2b06      	cmp	r3, #6
 800c9be:	d102      	bne.n	800c9c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	75fb      	strb	r3, [r7, #23]
 800c9c4:	e001      	b.n	800c9ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c9c6:	230f      	movs	r3, #15
 800c9c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c9ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	371c      	adds	r7, #28
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b085      	sub	sp, #20
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	785b      	ldrb	r3, [r3, #1]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d13a      	bne.n	800ca6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9fa:	69da      	ldr	r2, [r3, #28]
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	f003 030f 	and.w	r3, r3, #15
 800ca04:	2101      	movs	r1, #1
 800ca06:	fa01 f303 	lsl.w	r3, r1, r3
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	68f9      	ldr	r1, [r7, #12]
 800ca0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ca12:	4313      	orrs	r3, r2
 800ca14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	015a      	lsls	r2, r3, #5
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d155      	bne.n	800cad8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	015a      	lsls	r2, r3, #5
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	4413      	add	r3, r2
 800ca34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	791b      	ldrb	r3, [r3, #4]
 800ca46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ca48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	059b      	lsls	r3, r3, #22
 800ca4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ca50:	4313      	orrs	r3, r2
 800ca52:	68ba      	ldr	r2, [r7, #8]
 800ca54:	0151      	lsls	r1, r2, #5
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	440a      	add	r2, r1
 800ca5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca66:	6013      	str	r3, [r2, #0]
 800ca68:	e036      	b.n	800cad8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca70:	69da      	ldr	r2, [r3, #28]
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	f003 030f 	and.w	r3, r3, #15
 800ca7a:	2101      	movs	r1, #1
 800ca7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ca80:	041b      	lsls	r3, r3, #16
 800ca82:	68f9      	ldr	r1, [r7, #12]
 800ca84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d11a      	bne.n	800cad8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	015a      	lsls	r2, r3, #5
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	4413      	add	r3, r2
 800caaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	791b      	ldrb	r3, [r3, #4]
 800cabc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cabe:	430b      	orrs	r3, r1
 800cac0:	4313      	orrs	r3, r2
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	0151      	lsls	r1, r2, #5
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	440a      	add	r2, r1
 800caca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cad6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cad8:	2300      	movs	r3, #0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3714      	adds	r7, #20
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
	...

0800cae8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	785b      	ldrb	r3, [r3, #1]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d161      	bne.n	800cbc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	015a      	lsls	r2, r3, #5
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cb16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cb1a:	d11f      	bne.n	800cb5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	015a      	lsls	r2, r3, #5
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	4413      	add	r3, r2
 800cb24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68ba      	ldr	r2, [r7, #8]
 800cb2c:	0151      	lsls	r1, r2, #5
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	440a      	add	r2, r1
 800cb32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cb36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cb3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	015a      	lsls	r2, r3, #5
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	4413      	add	r3, r2
 800cb44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	0151      	lsls	r1, r2, #5
 800cb4e:	68fa      	ldr	r2, [r7, #12]
 800cb50:	440a      	add	r2, r1
 800cb52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cb56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cb5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	f003 030f 	and.w	r3, r3, #15
 800cb6c:	2101      	movs	r1, #1
 800cb6e:	fa01 f303 	lsl.w	r3, r1, r3
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	43db      	mvns	r3, r3
 800cb76:	68f9      	ldr	r1, [r7, #12]
 800cb78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb86:	69da      	ldr	r2, [r3, #28]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	f003 030f 	and.w	r3, r3, #15
 800cb90:	2101      	movs	r1, #1
 800cb92:	fa01 f303 	lsl.w	r3, r1, r3
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	43db      	mvns	r3, r3
 800cb9a:	68f9      	ldr	r1, [r7, #12]
 800cb9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cba0:	4013      	ands	r3, r2
 800cba2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	015a      	lsls	r2, r3, #5
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	4413      	add	r3, r2
 800cbac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	0159      	lsls	r1, r3, #5
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	440b      	add	r3, r1
 800cbba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	4b35      	ldr	r3, [pc, #212]	@ (800cc98 <USB_DeactivateEndpoint+0x1b0>)
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	600b      	str	r3, [r1, #0]
 800cbc6:	e060      	b.n	800cc8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	015a      	lsls	r2, r3, #5
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	4413      	add	r3, r2
 800cbd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cbda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cbde:	d11f      	bne.n	800cc20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	015a      	lsls	r2, r3, #5
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	68ba      	ldr	r2, [r7, #8]
 800cbf0:	0151      	lsls	r1, r2, #5
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	440a      	add	r2, r1
 800cbf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbfa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cbfe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	015a      	lsls	r2, r3, #5
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	4413      	add	r3, r2
 800cc08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68ba      	ldr	r2, [r7, #8]
 800cc10:	0151      	lsls	r1, r2, #5
 800cc12:	68fa      	ldr	r2, [r7, #12]
 800cc14:	440a      	add	r2, r1
 800cc16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cc1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	f003 030f 	and.w	r3, r3, #15
 800cc30:	2101      	movs	r1, #1
 800cc32:	fa01 f303 	lsl.w	r3, r1, r3
 800cc36:	041b      	lsls	r3, r3, #16
 800cc38:	43db      	mvns	r3, r3
 800cc3a:	68f9      	ldr	r1, [r7, #12]
 800cc3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cc40:	4013      	ands	r3, r2
 800cc42:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc4a:	69da      	ldr	r2, [r3, #28]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	f003 030f 	and.w	r3, r3, #15
 800cc54:	2101      	movs	r1, #1
 800cc56:	fa01 f303 	lsl.w	r3, r1, r3
 800cc5a:	041b      	lsls	r3, r3, #16
 800cc5c:	43db      	mvns	r3, r3
 800cc5e:	68f9      	ldr	r1, [r7, #12]
 800cc60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cc64:	4013      	ands	r3, r2
 800cc66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	015a      	lsls	r2, r3, #5
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	4413      	add	r3, r2
 800cc70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	0159      	lsls	r1, r3, #5
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	440b      	add	r3, r1
 800cc7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc82:	4619      	mov	r1, r3
 800cc84:	4b05      	ldr	r3, [pc, #20]	@ (800cc9c <USB_DeactivateEndpoint+0x1b4>)
 800cc86:	4013      	ands	r3, r2
 800cc88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3714      	adds	r7, #20
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr
 800cc98:	ec337800 	.word	0xec337800
 800cc9c:	eff37800 	.word	0xeff37800

0800cca0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b08a      	sub	sp, #40	@ 0x28
 800cca4:	af02      	add	r7, sp, #8
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	785b      	ldrb	r3, [r3, #1]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	f040 817f 	bne.w	800cfc0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d132      	bne.n	800cd30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	015a      	lsls	r2, r3, #5
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccd6:	691b      	ldr	r3, [r3, #16]
 800ccd8:	69ba      	ldr	r2, [r7, #24]
 800ccda:	0151      	lsls	r1, r2, #5
 800ccdc:	69fa      	ldr	r2, [r7, #28]
 800ccde:	440a      	add	r2, r1
 800cce0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cce4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800cce8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ccec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	015a      	lsls	r2, r3, #5
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccfa:	691b      	ldr	r3, [r3, #16]
 800ccfc:	69ba      	ldr	r2, [r7, #24]
 800ccfe:	0151      	lsls	r1, r2, #5
 800cd00:	69fa      	ldr	r2, [r7, #28]
 800cd02:	440a      	add	r2, r1
 800cd04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cd0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	015a      	lsls	r2, r3, #5
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	4413      	add	r3, r2
 800cd16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	69ba      	ldr	r2, [r7, #24]
 800cd1e:	0151      	lsls	r1, r2, #5
 800cd20:	69fa      	ldr	r2, [r7, #28]
 800cd22:	440a      	add	r2, r1
 800cd24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd28:	0cdb      	lsrs	r3, r3, #19
 800cd2a:	04db      	lsls	r3, r3, #19
 800cd2c:	6113      	str	r3, [r2, #16]
 800cd2e:	e097      	b.n	800ce60 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	015a      	lsls	r2, r3, #5
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	4413      	add	r3, r2
 800cd38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd3c:	691b      	ldr	r3, [r3, #16]
 800cd3e:	69ba      	ldr	r2, [r7, #24]
 800cd40:	0151      	lsls	r1, r2, #5
 800cd42:	69fa      	ldr	r2, [r7, #28]
 800cd44:	440a      	add	r2, r1
 800cd46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd4a:	0cdb      	lsrs	r3, r3, #19
 800cd4c:	04db      	lsls	r3, r3, #19
 800cd4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	015a      	lsls	r2, r3, #5
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	4413      	add	r3, r2
 800cd58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	69ba      	ldr	r2, [r7, #24]
 800cd60:	0151      	lsls	r1, r2, #5
 800cd62:	69fa      	ldr	r2, [r7, #28]
 800cd64:	440a      	add	r2, r1
 800cd66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd6a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800cd6e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800cd72:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d11a      	bne.n	800cdb0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	691a      	ldr	r2, [r3, #16]
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	689b      	ldr	r3, [r3, #8]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d903      	bls.n	800cd8e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	689a      	ldr	r2, [r3, #8]
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	015a      	lsls	r2, r3, #5
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	4413      	add	r3, r2
 800cd96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	69ba      	ldr	r2, [r7, #24]
 800cd9e:	0151      	lsls	r1, r2, #5
 800cda0:	69fa      	ldr	r2, [r7, #28]
 800cda2:	440a      	add	r2, r1
 800cda4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cda8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cdac:	6113      	str	r3, [r2, #16]
 800cdae:	e044      	b.n	800ce3a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	691a      	ldr	r2, [r3, #16]
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	689b      	ldr	r3, [r3, #8]
 800cdb8:	4413      	add	r3, r2
 800cdba:	1e5a      	subs	r2, r3, #1
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdc4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	015a      	lsls	r2, r3, #5
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	4413      	add	r3, r2
 800cdce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdd2:	691a      	ldr	r2, [r3, #16]
 800cdd4:	8afb      	ldrh	r3, [r7, #22]
 800cdd6:	04d9      	lsls	r1, r3, #19
 800cdd8:	4ba4      	ldr	r3, [pc, #656]	@ (800d06c <USB_EPStartXfer+0x3cc>)
 800cdda:	400b      	ands	r3, r1
 800cddc:	69b9      	ldr	r1, [r7, #24]
 800cdde:	0148      	lsls	r0, r1, #5
 800cde0:	69f9      	ldr	r1, [r7, #28]
 800cde2:	4401      	add	r1, r0
 800cde4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800cde8:	4313      	orrs	r3, r2
 800cdea:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	791b      	ldrb	r3, [r3, #4]
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d122      	bne.n	800ce3a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	015a      	lsls	r2, r3, #5
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	69ba      	ldr	r2, [r7, #24]
 800ce04:	0151      	lsls	r1, r2, #5
 800ce06:	69fa      	ldr	r2, [r7, #28]
 800ce08:	440a      	add	r2, r1
 800ce0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ce0e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ce12:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	015a      	lsls	r2, r3, #5
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce20:	691a      	ldr	r2, [r3, #16]
 800ce22:	8afb      	ldrh	r3, [r7, #22]
 800ce24:	075b      	lsls	r3, r3, #29
 800ce26:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ce2a:	69b9      	ldr	r1, [r7, #24]
 800ce2c:	0148      	lsls	r0, r1, #5
 800ce2e:	69f9      	ldr	r1, [r7, #28]
 800ce30:	4401      	add	r1, r0
 800ce32:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ce36:	4313      	orrs	r3, r2
 800ce38:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	015a      	lsls	r2, r3, #5
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	4413      	add	r3, r2
 800ce42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce46:	691a      	ldr	r2, [r3, #16]
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce50:	69b9      	ldr	r1, [r7, #24]
 800ce52:	0148      	lsls	r0, r1, #5
 800ce54:	69f9      	ldr	r1, [r7, #28]
 800ce56:	4401      	add	r1, r0
 800ce58:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ce60:	79fb      	ldrb	r3, [r7, #7]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d14b      	bne.n	800cefe <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	69db      	ldr	r3, [r3, #28]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d009      	beq.n	800ce82 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	015a      	lsls	r2, r3, #5
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	4413      	add	r3, r2
 800ce76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	69db      	ldr	r3, [r3, #28]
 800ce80:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	791b      	ldrb	r3, [r3, #4]
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d128      	bne.n	800cedc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d110      	bne.n	800cebc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	015a      	lsls	r2, r3, #5
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	4413      	add	r3, r2
 800cea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	69ba      	ldr	r2, [r7, #24]
 800ceaa:	0151      	lsls	r1, r2, #5
 800ceac:	69fa      	ldr	r2, [r7, #28]
 800ceae:	440a      	add	r2, r1
 800ceb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ceb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ceb8:	6013      	str	r3, [r2, #0]
 800ceba:	e00f      	b.n	800cedc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	015a      	lsls	r2, r3, #5
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	4413      	add	r3, r2
 800cec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	69ba      	ldr	r2, [r7, #24]
 800cecc:	0151      	lsls	r1, r2, #5
 800cece:	69fa      	ldr	r2, [r7, #28]
 800ced0:	440a      	add	r2, r1
 800ced2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ced6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ceda:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	015a      	lsls	r2, r3, #5
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	4413      	add	r3, r2
 800cee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	69ba      	ldr	r2, [r7, #24]
 800ceec:	0151      	lsls	r1, r2, #5
 800ceee:	69fa      	ldr	r2, [r7, #28]
 800cef0:	440a      	add	r2, r1
 800cef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cef6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cefa:	6013      	str	r3, [r2, #0]
 800cefc:	e166      	b.n	800d1cc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	015a      	lsls	r2, r3, #5
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	4413      	add	r3, r2
 800cf06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	69ba      	ldr	r2, [r7, #24]
 800cf0e:	0151      	lsls	r1, r2, #5
 800cf10:	69fa      	ldr	r2, [r7, #28]
 800cf12:	440a      	add	r2, r1
 800cf14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cf1c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	791b      	ldrb	r3, [r3, #4]
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d015      	beq.n	800cf52 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	691b      	ldr	r3, [r3, #16]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	f000 814e 	beq.w	800d1cc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	f003 030f 	and.w	r3, r3, #15
 800cf40:	2101      	movs	r1, #1
 800cf42:	fa01 f303 	lsl.w	r3, r1, r3
 800cf46:	69f9      	ldr	r1, [r7, #28]
 800cf48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	634b      	str	r3, [r1, #52]	@ 0x34
 800cf50:	e13c      	b.n	800d1cc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d110      	bne.n	800cf84 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	015a      	lsls	r2, r3, #5
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	4413      	add	r3, r2
 800cf6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	69ba      	ldr	r2, [r7, #24]
 800cf72:	0151      	lsls	r1, r2, #5
 800cf74:	69fa      	ldr	r2, [r7, #28]
 800cf76:	440a      	add	r2, r1
 800cf78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cf80:	6013      	str	r3, [r2, #0]
 800cf82:	e00f      	b.n	800cfa4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	015a      	lsls	r2, r3, #5
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	69ba      	ldr	r2, [r7, #24]
 800cf94:	0151      	lsls	r1, r2, #5
 800cf96:	69fa      	ldr	r2, [r7, #28]
 800cf98:	440a      	add	r2, r1
 800cf9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cfa2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	68d9      	ldr	r1, [r3, #12]
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	781a      	ldrb	r2, [r3, #0]
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	691b      	ldr	r3, [r3, #16]
 800cfb0:	b298      	uxth	r0, r3
 800cfb2:	79fb      	ldrb	r3, [r7, #7]
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f000 f9b9 	bl	800d330 <USB_WritePacket>
 800cfbe:	e105      	b.n	800d1cc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	015a      	lsls	r2, r3, #5
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfcc:	691b      	ldr	r3, [r3, #16]
 800cfce:	69ba      	ldr	r2, [r7, #24]
 800cfd0:	0151      	lsls	r1, r2, #5
 800cfd2:	69fa      	ldr	r2, [r7, #28]
 800cfd4:	440a      	add	r2, r1
 800cfd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cfda:	0cdb      	lsrs	r3, r3, #19
 800cfdc:	04db      	lsls	r3, r3, #19
 800cfde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cfe0:	69bb      	ldr	r3, [r7, #24]
 800cfe2:	015a      	lsls	r2, r3, #5
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfec:	691b      	ldr	r3, [r3, #16]
 800cfee:	69ba      	ldr	r2, [r7, #24]
 800cff0:	0151      	lsls	r1, r2, #5
 800cff2:	69fa      	ldr	r2, [r7, #28]
 800cff4:	440a      	add	r2, r1
 800cff6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cffa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800cffe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d002:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d132      	bne.n	800d070 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	691b      	ldr	r3, [r3, #16]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d003      	beq.n	800d01a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	689a      	ldr	r2, [r3, #8]
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	689a      	ldr	r2, [r3, #8]
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	015a      	lsls	r2, r3, #5
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	4413      	add	r3, r2
 800d02a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d02e:	691a      	ldr	r2, [r3, #16]
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	6a1b      	ldr	r3, [r3, #32]
 800d034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d038:	69b9      	ldr	r1, [r7, #24]
 800d03a:	0148      	lsls	r0, r1, #5
 800d03c:	69f9      	ldr	r1, [r7, #28]
 800d03e:	4401      	add	r1, r0
 800d040:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d044:	4313      	orrs	r3, r2
 800d046:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	015a      	lsls	r2, r3, #5
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	4413      	add	r3, r2
 800d050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d054:	691b      	ldr	r3, [r3, #16]
 800d056:	69ba      	ldr	r2, [r7, #24]
 800d058:	0151      	lsls	r1, r2, #5
 800d05a:	69fa      	ldr	r2, [r7, #28]
 800d05c:	440a      	add	r2, r1
 800d05e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d062:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d066:	6113      	str	r3, [r2, #16]
 800d068:	e062      	b.n	800d130 <USB_EPStartXfer+0x490>
 800d06a:	bf00      	nop
 800d06c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d123      	bne.n	800d0c0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	015a      	lsls	r2, r3, #5
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	4413      	add	r3, r2
 800d080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d084:	691a      	ldr	r2, [r3, #16]
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d08e:	69b9      	ldr	r1, [r7, #24]
 800d090:	0148      	lsls	r0, r1, #5
 800d092:	69f9      	ldr	r1, [r7, #28]
 800d094:	4401      	add	r1, r0
 800d096:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d09a:	4313      	orrs	r3, r2
 800d09c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	015a      	lsls	r2, r3, #5
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0aa:	691b      	ldr	r3, [r3, #16]
 800d0ac:	69ba      	ldr	r2, [r7, #24]
 800d0ae:	0151      	lsls	r1, r2, #5
 800d0b0:	69fa      	ldr	r2, [r7, #28]
 800d0b2:	440a      	add	r2, r1
 800d0b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d0bc:	6113      	str	r3, [r2, #16]
 800d0be:	e037      	b.n	800d130 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	691a      	ldr	r2, [r3, #16]
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	1e5a      	subs	r2, r3, #1
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0d4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	8afa      	ldrh	r2, [r7, #22]
 800d0dc:	fb03 f202 	mul.w	r2, r3, r2
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	015a      	lsls	r2, r3, #5
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0f0:	691a      	ldr	r2, [r3, #16]
 800d0f2:	8afb      	ldrh	r3, [r7, #22]
 800d0f4:	04d9      	lsls	r1, r3, #19
 800d0f6:	4b38      	ldr	r3, [pc, #224]	@ (800d1d8 <USB_EPStartXfer+0x538>)
 800d0f8:	400b      	ands	r3, r1
 800d0fa:	69b9      	ldr	r1, [r7, #24]
 800d0fc:	0148      	lsls	r0, r1, #5
 800d0fe:	69f9      	ldr	r1, [r7, #28]
 800d100:	4401      	add	r1, r0
 800d102:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d106:	4313      	orrs	r3, r2
 800d108:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	015a      	lsls	r2, r3, #5
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	4413      	add	r3, r2
 800d112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d116:	691a      	ldr	r2, [r3, #16]
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	6a1b      	ldr	r3, [r3, #32]
 800d11c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d120:	69b9      	ldr	r1, [r7, #24]
 800d122:	0148      	lsls	r0, r1, #5
 800d124:	69f9      	ldr	r1, [r7, #28]
 800d126:	4401      	add	r1, r0
 800d128:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d12c:	4313      	orrs	r3, r2
 800d12e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d130:	79fb      	ldrb	r3, [r7, #7]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d10d      	bne.n	800d152 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d009      	beq.n	800d152 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	68d9      	ldr	r1, [r3, #12]
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	015a      	lsls	r2, r3, #5
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	4413      	add	r3, r2
 800d14a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d14e:	460a      	mov	r2, r1
 800d150:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	791b      	ldrb	r3, [r3, #4]
 800d156:	2b01      	cmp	r3, #1
 800d158:	d128      	bne.n	800d1ac <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d166:	2b00      	cmp	r3, #0
 800d168:	d110      	bne.n	800d18c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	015a      	lsls	r2, r3, #5
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	4413      	add	r3, r2
 800d172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	69ba      	ldr	r2, [r7, #24]
 800d17a:	0151      	lsls	r1, r2, #5
 800d17c:	69fa      	ldr	r2, [r7, #28]
 800d17e:	440a      	add	r2, r1
 800d180:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d184:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d188:	6013      	str	r3, [r2, #0]
 800d18a:	e00f      	b.n	800d1ac <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	015a      	lsls	r2, r3, #5
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	4413      	add	r3, r2
 800d194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	69ba      	ldr	r2, [r7, #24]
 800d19c:	0151      	lsls	r1, r2, #5
 800d19e:	69fa      	ldr	r2, [r7, #28]
 800d1a0:	440a      	add	r2, r1
 800d1a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d1a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d1aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	015a      	lsls	r2, r3, #5
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	69ba      	ldr	r2, [r7, #24]
 800d1bc:	0151      	lsls	r1, r2, #5
 800d1be:	69fa      	ldr	r2, [r7, #28]
 800d1c0:	440a      	add	r2, r1
 800d1c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d1c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d1ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3720      	adds	r7, #32
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	1ff80000 	.word	0x1ff80000

0800d1dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b087      	sub	sp, #28
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	785b      	ldrb	r3, [r3, #1]
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d14a      	bne.n	800d290 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	015a      	lsls	r2, r3, #5
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	4413      	add	r3, r2
 800d204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d20e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d212:	f040 8086 	bne.w	800d322 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	015a      	lsls	r2, r3, #5
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	4413      	add	r3, r2
 800d220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	683a      	ldr	r2, [r7, #0]
 800d228:	7812      	ldrb	r2, [r2, #0]
 800d22a:	0151      	lsls	r1, r2, #5
 800d22c:	693a      	ldr	r2, [r7, #16]
 800d22e:	440a      	add	r2, r1
 800d230:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d234:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d238:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	015a      	lsls	r2, r3, #5
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	4413      	add	r3, r2
 800d244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	683a      	ldr	r2, [r7, #0]
 800d24c:	7812      	ldrb	r2, [r2, #0]
 800d24e:	0151      	lsls	r1, r2, #5
 800d250:	693a      	ldr	r2, [r7, #16]
 800d252:	440a      	add	r2, r1
 800d254:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d258:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d25c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	3301      	adds	r3, #1
 800d262:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d902      	bls.n	800d274 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	75fb      	strb	r3, [r7, #23]
          break;
 800d272:	e056      	b.n	800d322 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	015a      	lsls	r2, r3, #5
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	4413      	add	r3, r2
 800d27e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d288:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d28c:	d0e7      	beq.n	800d25e <USB_EPStopXfer+0x82>
 800d28e:	e048      	b.n	800d322 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	015a      	lsls	r2, r3, #5
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	4413      	add	r3, r2
 800d29a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d2a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d2a8:	d13b      	bne.n	800d322 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	015a      	lsls	r2, r3, #5
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	683a      	ldr	r2, [r7, #0]
 800d2bc:	7812      	ldrb	r2, [r2, #0]
 800d2be:	0151      	lsls	r1, r2, #5
 800d2c0:	693a      	ldr	r2, [r7, #16]
 800d2c2:	440a      	add	r2, r1
 800d2c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d2c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d2cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	015a      	lsls	r2, r3, #5
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	683a      	ldr	r2, [r7, #0]
 800d2e0:	7812      	ldrb	r2, [r2, #0]
 800d2e2:	0151      	lsls	r1, r2, #5
 800d2e4:	693a      	ldr	r2, [r7, #16]
 800d2e6:	440a      	add	r2, r1
 800d2e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d2ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d2f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d902      	bls.n	800d308 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d302:	2301      	movs	r3, #1
 800d304:	75fb      	strb	r3, [r7, #23]
          break;
 800d306:	e00c      	b.n	800d322 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	015a      	lsls	r2, r3, #5
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	4413      	add	r3, r2
 800d312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d31c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d320:	d0e7      	beq.n	800d2f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d322:	7dfb      	ldrb	r3, [r7, #23]
}
 800d324:	4618      	mov	r0, r3
 800d326:	371c      	adds	r7, #28
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d330:	b480      	push	{r7}
 800d332:	b089      	sub	sp, #36	@ 0x24
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	4611      	mov	r1, r2
 800d33c:	461a      	mov	r2, r3
 800d33e:	460b      	mov	r3, r1
 800d340:	71fb      	strb	r3, [r7, #7]
 800d342:	4613      	mov	r3, r2
 800d344:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d34e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d352:	2b00      	cmp	r3, #0
 800d354:	d123      	bne.n	800d39e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d356:	88bb      	ldrh	r3, [r7, #4]
 800d358:	3303      	adds	r3, #3
 800d35a:	089b      	lsrs	r3, r3, #2
 800d35c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d35e:	2300      	movs	r3, #0
 800d360:	61bb      	str	r3, [r7, #24]
 800d362:	e018      	b.n	800d396 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d364:	79fb      	ldrb	r3, [r7, #7]
 800d366:	031a      	lsls	r2, r3, #12
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	4413      	add	r3, r2
 800d36c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d370:	461a      	mov	r2, r3
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	3301      	adds	r3, #1
 800d37c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	3301      	adds	r3, #1
 800d382:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	3301      	adds	r3, #1
 800d388:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	3301      	adds	r3, #1
 800d38e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	3301      	adds	r3, #1
 800d394:	61bb      	str	r3, [r7, #24]
 800d396:	69ba      	ldr	r2, [r7, #24]
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d3e2      	bcc.n	800d364 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3724      	adds	r7, #36	@ 0x24
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b08b      	sub	sp, #44	@ 0x2c
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d3c2:	88fb      	ldrh	r3, [r7, #6]
 800d3c4:	089b      	lsrs	r3, r3, #2
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d3ca:	88fb      	ldrh	r3, [r7, #6]
 800d3cc:	f003 0303 	and.w	r3, r3, #3
 800d3d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	623b      	str	r3, [r7, #32]
 800d3d6:	e014      	b.n	800d402 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d3fc:	6a3b      	ldr	r3, [r7, #32]
 800d3fe:	3301      	adds	r3, #1
 800d400:	623b      	str	r3, [r7, #32]
 800d402:	6a3a      	ldr	r2, [r7, #32]
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	429a      	cmp	r2, r3
 800d408:	d3e6      	bcc.n	800d3d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d40a:	8bfb      	ldrh	r3, [r7, #30]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d01e      	beq.n	800d44e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d410:	2300      	movs	r3, #0
 800d412:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d41a:	461a      	mov	r2, r3
 800d41c:	f107 0310 	add.w	r3, r7, #16
 800d420:	6812      	ldr	r2, [r2, #0]
 800d422:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	6a3b      	ldr	r3, [r7, #32]
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	00db      	lsls	r3, r3, #3
 800d42c:	fa22 f303 	lsr.w	r3, r2, r3
 800d430:	b2da      	uxtb	r2, r3
 800d432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d434:	701a      	strb	r2, [r3, #0]
      i++;
 800d436:	6a3b      	ldr	r3, [r7, #32]
 800d438:	3301      	adds	r3, #1
 800d43a:	623b      	str	r3, [r7, #32]
      pDest++;
 800d43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43e:	3301      	adds	r3, #1
 800d440:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d442:	8bfb      	ldrh	r3, [r7, #30]
 800d444:	3b01      	subs	r3, #1
 800d446:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d448:	8bfb      	ldrh	r3, [r7, #30]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1ea      	bne.n	800d424 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d450:	4618      	mov	r0, r3
 800d452:	372c      	adds	r7, #44	@ 0x2c
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	785b      	ldrb	r3, [r3, #1]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d12c      	bne.n	800d4d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	015a      	lsls	r2, r3, #5
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	4413      	add	r3, r2
 800d480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	db12      	blt.n	800d4b0 <USB_EPSetStall+0x54>
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00f      	beq.n	800d4b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	015a      	lsls	r2, r3, #5
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	4413      	add	r3, r2
 800d498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	68ba      	ldr	r2, [r7, #8]
 800d4a0:	0151      	lsls	r1, r2, #5
 800d4a2:	68fa      	ldr	r2, [r7, #12]
 800d4a4:	440a      	add	r2, r1
 800d4a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d4aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d4ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	015a      	lsls	r2, r3, #5
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	68ba      	ldr	r2, [r7, #8]
 800d4c0:	0151      	lsls	r1, r2, #5
 800d4c2:	68fa      	ldr	r2, [r7, #12]
 800d4c4:	440a      	add	r2, r1
 800d4c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d4ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d4ce:	6013      	str	r3, [r2, #0]
 800d4d0:	e02b      	b.n	800d52a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	015a      	lsls	r2, r3, #5
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	4413      	add	r3, r2
 800d4da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	db12      	blt.n	800d50a <USB_EPSetStall+0xae>
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00f      	beq.n	800d50a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	015a      	lsls	r2, r3, #5
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	68ba      	ldr	r2, [r7, #8]
 800d4fa:	0151      	lsls	r1, r2, #5
 800d4fc:	68fa      	ldr	r2, [r7, #12]
 800d4fe:	440a      	add	r2, r1
 800d500:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d504:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d508:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	015a      	lsls	r2, r3, #5
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	4413      	add	r3, r2
 800d512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	0151      	lsls	r1, r2, #5
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	440a      	add	r2, r1
 800d520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d524:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d528:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3714      	adds	r7, #20
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d538:	b480      	push	{r7}
 800d53a:	b085      	sub	sp, #20
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	785b      	ldrb	r3, [r3, #1]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d128      	bne.n	800d5a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	015a      	lsls	r2, r3, #5
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	4413      	add	r3, r2
 800d55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	68ba      	ldr	r2, [r7, #8]
 800d564:	0151      	lsls	r1, r2, #5
 800d566:	68fa      	ldr	r2, [r7, #12]
 800d568:	440a      	add	r2, r1
 800d56a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d56e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d572:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	791b      	ldrb	r3, [r3, #4]
 800d578:	2b03      	cmp	r3, #3
 800d57a:	d003      	beq.n	800d584 <USB_EPClearStall+0x4c>
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	791b      	ldrb	r3, [r3, #4]
 800d580:	2b02      	cmp	r3, #2
 800d582:	d138      	bne.n	800d5f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	015a      	lsls	r2, r3, #5
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	4413      	add	r3, r2
 800d58c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	68ba      	ldr	r2, [r7, #8]
 800d594:	0151      	lsls	r1, r2, #5
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	440a      	add	r2, r1
 800d59a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d59e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d5a2:	6013      	str	r3, [r2, #0]
 800d5a4:	e027      	b.n	800d5f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	015a      	lsls	r2, r3, #5
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	0151      	lsls	r1, r2, #5
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	440a      	add	r2, r1
 800d5bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d5c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d5c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	791b      	ldrb	r3, [r3, #4]
 800d5ca:	2b03      	cmp	r3, #3
 800d5cc:	d003      	beq.n	800d5d6 <USB_EPClearStall+0x9e>
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	791b      	ldrb	r3, [r3, #4]
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d10f      	bne.n	800d5f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	015a      	lsls	r2, r3, #5
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	4413      	add	r3, r2
 800d5de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	0151      	lsls	r1, r2, #5
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	440a      	add	r2, r1
 800d5ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d5f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d5f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3714      	adds	r7, #20
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	460b      	mov	r3, r1
 800d60e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	68fa      	ldr	r2, [r7, #12]
 800d61e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d622:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d626:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	78fb      	ldrb	r3, [r7, #3]
 800d632:	011b      	lsls	r3, r3, #4
 800d634:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800d638:	68f9      	ldr	r1, [r7, #12]
 800d63a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d63e:	4313      	orrs	r3, r2
 800d640:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d642:	2300      	movs	r3, #0
}
 800d644:	4618      	mov	r0, r3
 800d646:	3714      	adds	r7, #20
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	68fa      	ldr	r2, [r7, #12]
 800d666:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d66a:	f023 0303 	bic.w	r3, r3, #3
 800d66e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	68fa      	ldr	r2, [r7, #12]
 800d67a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d67e:	f023 0302 	bic.w	r3, r3, #2
 800d682:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d692:	b480      	push	{r7}
 800d694:	b085      	sub	sp, #20
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d6ac:	f023 0303 	bic.w	r3, r3, #3
 800d6b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d6c0:	f043 0302 	orr.w	r3, r3, #2
 800d6c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d6c6:	2300      	movs	r3, #0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3714      	adds	r7, #20
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	695b      	ldr	r3, [r3, #20]
 800d6e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	699b      	ldr	r3, [r3, #24]
 800d6e6:	68fa      	ldr	r2, [r7, #12]
 800d6e8:	4013      	ands	r3, r2
 800d6ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr

0800d6fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d6fa:	b480      	push	{r7}
 800d6fc:	b085      	sub	sp, #20
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d70c:	699b      	ldr	r3, [r3, #24]
 800d70e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d716:	69db      	ldr	r3, [r3, #28]
 800d718:	68ba      	ldr	r2, [r7, #8]
 800d71a:	4013      	ands	r3, r2
 800d71c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	0c1b      	lsrs	r3, r3, #16
}
 800d722:	4618      	mov	r0, r3
 800d724:	3714      	adds	r7, #20
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr

0800d72e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d72e:	b480      	push	{r7}
 800d730:	b085      	sub	sp, #20
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d740:	699b      	ldr	r3, [r3, #24]
 800d742:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d74a:	69db      	ldr	r3, [r3, #28]
 800d74c:	68ba      	ldr	r2, [r7, #8]
 800d74e:	4013      	ands	r3, r2
 800d750:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	b29b      	uxth	r3, r3
}
 800d756:	4618      	mov	r0, r3
 800d758:	3714      	adds	r7, #20
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr

0800d762 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d762:	b480      	push	{r7}
 800d764:	b085      	sub	sp, #20
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
 800d76a:	460b      	mov	r3, r1
 800d76c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d772:	78fb      	ldrb	r3, [r7, #3]
 800d774:	015a      	lsls	r2, r3, #5
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	4413      	add	r3, r2
 800d77a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d77e:	689b      	ldr	r3, [r3, #8]
 800d780:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d788:	695b      	ldr	r3, [r3, #20]
 800d78a:	68ba      	ldr	r2, [r7, #8]
 800d78c:	4013      	ands	r3, r2
 800d78e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d790:	68bb      	ldr	r3, [r7, #8]
}
 800d792:	4618      	mov	r0, r3
 800d794:	3714      	adds	r7, #20
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr

0800d79e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d79e:	b480      	push	{r7}
 800d7a0:	b087      	sub	sp, #28
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d7c2:	78fb      	ldrb	r3, [r7, #3]
 800d7c4:	f003 030f 	and.w	r3, r3, #15
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ce:	01db      	lsls	r3, r3, #7
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	693a      	ldr	r2, [r7, #16]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d7d8:	78fb      	ldrb	r3, [r7, #3]
 800d7da:	015a      	lsls	r2, r3, #5
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	693a      	ldr	r2, [r7, #16]
 800d7e8:	4013      	ands	r3, r2
 800d7ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d7ec:	68bb      	ldr	r3, [r7, #8]
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	371c      	adds	r7, #28
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr

0800d7fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d7fa:	b480      	push	{r7}
 800d7fc:	b083      	sub	sp, #12
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	695b      	ldr	r3, [r3, #20]
 800d806:	f003 0301 	and.w	r3, r3, #1
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	370c      	adds	r7, #12
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr

0800d816 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800d816:	b480      	push	{r7}
 800d818:	b085      	sub	sp, #20
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d830:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d834:	f023 0307 	bic.w	r3, r3, #7
 800d838:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	68fa      	ldr	r2, [r7, #12]
 800d844:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d84c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b087      	sub	sp, #28
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	460b      	mov	r3, r1
 800d866:	607a      	str	r2, [r7, #4]
 800d868:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	333c      	adds	r3, #60	@ 0x3c
 800d872:	3304      	adds	r3, #4
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	4a26      	ldr	r2, [pc, #152]	@ (800d914 <USB_EP0_OutStart+0xb8>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d90a      	bls.n	800d896 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d88c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d890:	d101      	bne.n	800d896 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	e037      	b.n	800d906 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d89c:	461a      	mov	r2, r3
 800d89e:	2300      	movs	r3, #0
 800d8a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8a8:	691b      	ldr	r3, [r3, #16]
 800d8aa:	697a      	ldr	r2, [r7, #20]
 800d8ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d8b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d8b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8bc:	691b      	ldr	r3, [r3, #16]
 800d8be:	697a      	ldr	r2, [r7, #20]
 800d8c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d8c4:	f043 0318 	orr.w	r3, r3, #24
 800d8c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8d0:	691b      	ldr	r3, [r3, #16]
 800d8d2:	697a      	ldr	r2, [r7, #20]
 800d8d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d8d8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800d8dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d8de:	7afb      	ldrb	r3, [r7, #11]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d10f      	bne.n	800d904 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	697a      	ldr	r2, [r7, #20]
 800d8fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d8fe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800d902:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d904:	2300      	movs	r3, #0
}
 800d906:	4618      	mov	r0, r3
 800d908:	371c      	adds	r7, #28
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	4f54300a 	.word	0x4f54300a

0800d918 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d918:	b480      	push	{r7}
 800d91a:	b085      	sub	sp, #20
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d920:	2300      	movs	r3, #0
 800d922:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	3301      	adds	r3, #1
 800d928:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d930:	d901      	bls.n	800d936 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d932:	2303      	movs	r3, #3
 800d934:	e022      	b.n	800d97c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	daf2      	bge.n	800d924 <USB_CoreReset+0xc>

  count = 10U;
 800d93e:	230a      	movs	r3, #10
 800d940:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800d942:	e002      	b.n	800d94a <USB_CoreReset+0x32>
  {
    count--;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	3b01      	subs	r3, #1
 800d948:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d1f9      	bne.n	800d944 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	691b      	ldr	r3, [r3, #16]
 800d954:	f043 0201 	orr.w	r2, r3, #1
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	3301      	adds	r3, #1
 800d960:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d968:	d901      	bls.n	800d96e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800d96a:	2303      	movs	r3, #3
 800d96c:	e006      	b.n	800d97c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	f003 0301 	and.w	r3, r3, #1
 800d976:	2b01      	cmp	r3, #1
 800d978:	d0f0      	beq.n	800d95c <USB_CoreReset+0x44>

  return HAL_OK;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3714      	adds	r7, #20
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d98c:	4904      	ldr	r1, [pc, #16]	@ (800d9a0 <MX_FATFS_Init+0x18>)
 800d98e:	4805      	ldr	r0, [pc, #20]	@ (800d9a4 <MX_FATFS_Init+0x1c>)
 800d990:	f005 f98a 	bl	8012ca8 <FATFS_LinkDriver>
 800d994:	4603      	mov	r3, r0
 800d996:	461a      	mov	r2, r3
 800d998:	4b03      	ldr	r3, [pc, #12]	@ (800d9a8 <MX_FATFS_Init+0x20>)
 800d99a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d99c:	bf00      	nop
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	20002d50 	.word	0x20002d50
 800d9a4:	20000144 	.word	0x20000144
 800d9a8:	20002d4c 	.word	0x20002d4c

0800d9ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d9b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr

0800d9bc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800d9c6:	79fb      	ldrb	r3, [r7, #7]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7f6 fcc5 	bl	8004358 <SD_disk_initialize>
 800d9ce:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	4603      	mov	r3, r0
 800d9e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800d9e2:	79fb      	ldrb	r3, [r7, #7]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7f6 fda1 	bl	800452c <SD_disk_status>
 800d9ea:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60b9      	str	r1, [r7, #8]
 800d9fc:	607a      	str	r2, [r7, #4]
 800d9fe:	603b      	str	r3, [r7, #0]
 800da00:	4603      	mov	r3, r0
 800da02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800da04:	7bf8      	ldrb	r0, [r7, #15]
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	68b9      	ldr	r1, [r7, #8]
 800da0c:	f7f6 fda4 	bl	8004558 <SD_disk_read>
 800da10:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b084      	sub	sp, #16
 800da1e:	af00      	add	r7, sp, #0
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
 800da24:	603b      	str	r3, [r7, #0]
 800da26:	4603      	mov	r3, r0
 800da28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800da2a:	7bf8      	ldrb	r0, [r7, #15]
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	68b9      	ldr	r1, [r7, #8]
 800da32:	f7f6 fdfb 	bl	800462c <SD_disk_write>
 800da36:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3710      	adds	r7, #16
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	4603      	mov	r3, r0
 800da48:	603a      	str	r2, [r7, #0]
 800da4a:	71fb      	strb	r3, [r7, #7]
 800da4c:	460b      	mov	r3, r1
 800da4e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800da50:	79b9      	ldrb	r1, [r7, #6]
 800da52:	79fb      	ldrb	r3, [r7, #7]
 800da54:	683a      	ldr	r2, [r7, #0]
 800da56:	4618      	mov	r0, r3
 800da58:	f7f6 fe6c 	bl	8004734 <SD_disk_ioctl>
 800da5c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
	...

0800da68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	460b      	mov	r3, r1
 800da72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800da74:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800da78:	f005 feb8 	bl	80137ec <USBD_static_malloc>
 800da7c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d109      	bne.n	800da98 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	32b0      	adds	r2, #176	@ 0xb0
 800da8e:	2100      	movs	r1, #0
 800da90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800da94:	2302      	movs	r3, #2
 800da96:	e0d4      	b.n	800dc42 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800da98:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800da9c:	2100      	movs	r1, #0
 800da9e:	68f8      	ldr	r0, [r7, #12]
 800daa0:	f007 f86c 	bl	8014b7c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	32b0      	adds	r2, #176	@ 0xb0
 800daae:	68f9      	ldr	r1, [r7, #12]
 800dab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	32b0      	adds	r2, #176	@ 0xb0
 800dabe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	7c1b      	ldrb	r3, [r3, #16]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d138      	bne.n	800db42 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dad0:	4b5e      	ldr	r3, [pc, #376]	@ (800dc4c <USBD_CDC_Init+0x1e4>)
 800dad2:	7819      	ldrb	r1, [r3, #0]
 800dad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dad8:	2202      	movs	r2, #2
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f005 fd63 	bl	80135a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dae0:	4b5a      	ldr	r3, [pc, #360]	@ (800dc4c <USBD_CDC_Init+0x1e4>)
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	f003 020f 	and.w	r2, r3, #15
 800dae8:	6879      	ldr	r1, [r7, #4]
 800daea:	4613      	mov	r3, r2
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	4413      	add	r3, r2
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	440b      	add	r3, r1
 800daf4:	3323      	adds	r3, #35	@ 0x23
 800daf6:	2201      	movs	r2, #1
 800daf8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dafa:	4b55      	ldr	r3, [pc, #340]	@ (800dc50 <USBD_CDC_Init+0x1e8>)
 800dafc:	7819      	ldrb	r1, [r3, #0]
 800dafe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db02:	2202      	movs	r2, #2
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f005 fd4e 	bl	80135a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800db0a:	4b51      	ldr	r3, [pc, #324]	@ (800dc50 <USBD_CDC_Init+0x1e8>)
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	f003 020f 	and.w	r2, r3, #15
 800db12:	6879      	ldr	r1, [r7, #4]
 800db14:	4613      	mov	r3, r2
 800db16:	009b      	lsls	r3, r3, #2
 800db18:	4413      	add	r3, r2
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	440b      	add	r3, r1
 800db1e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800db22:	2201      	movs	r2, #1
 800db24:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800db26:	4b4b      	ldr	r3, [pc, #300]	@ (800dc54 <USBD_CDC_Init+0x1ec>)
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	f003 020f 	and.w	r2, r3, #15
 800db2e:	6879      	ldr	r1, [r7, #4]
 800db30:	4613      	mov	r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	4413      	add	r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	440b      	add	r3, r1
 800db3a:	331c      	adds	r3, #28
 800db3c:	2210      	movs	r2, #16
 800db3e:	601a      	str	r2, [r3, #0]
 800db40:	e035      	b.n	800dbae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800db42:	4b42      	ldr	r3, [pc, #264]	@ (800dc4c <USBD_CDC_Init+0x1e4>)
 800db44:	7819      	ldrb	r1, [r3, #0]
 800db46:	2340      	movs	r3, #64	@ 0x40
 800db48:	2202      	movs	r2, #2
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f005 fd2b 	bl	80135a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800db50:	4b3e      	ldr	r3, [pc, #248]	@ (800dc4c <USBD_CDC_Init+0x1e4>)
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	f003 020f 	and.w	r2, r3, #15
 800db58:	6879      	ldr	r1, [r7, #4]
 800db5a:	4613      	mov	r3, r2
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4413      	add	r3, r2
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	440b      	add	r3, r1
 800db64:	3323      	adds	r3, #35	@ 0x23
 800db66:	2201      	movs	r2, #1
 800db68:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800db6a:	4b39      	ldr	r3, [pc, #228]	@ (800dc50 <USBD_CDC_Init+0x1e8>)
 800db6c:	7819      	ldrb	r1, [r3, #0]
 800db6e:	2340      	movs	r3, #64	@ 0x40
 800db70:	2202      	movs	r2, #2
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f005 fd17 	bl	80135a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800db78:	4b35      	ldr	r3, [pc, #212]	@ (800dc50 <USBD_CDC_Init+0x1e8>)
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	f003 020f 	and.w	r2, r3, #15
 800db80:	6879      	ldr	r1, [r7, #4]
 800db82:	4613      	mov	r3, r2
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	4413      	add	r3, r2
 800db88:	009b      	lsls	r3, r3, #2
 800db8a:	440b      	add	r3, r1
 800db8c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800db90:	2201      	movs	r2, #1
 800db92:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800db94:	4b2f      	ldr	r3, [pc, #188]	@ (800dc54 <USBD_CDC_Init+0x1ec>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	f003 020f 	and.w	r2, r3, #15
 800db9c:	6879      	ldr	r1, [r7, #4]
 800db9e:	4613      	mov	r3, r2
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	440b      	add	r3, r1
 800dba8:	331c      	adds	r3, #28
 800dbaa:	2210      	movs	r2, #16
 800dbac:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dbae:	4b29      	ldr	r3, [pc, #164]	@ (800dc54 <USBD_CDC_Init+0x1ec>)
 800dbb0:	7819      	ldrb	r1, [r3, #0]
 800dbb2:	2308      	movs	r3, #8
 800dbb4:	2203      	movs	r2, #3
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f005 fcf5 	bl	80135a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dbbc:	4b25      	ldr	r3, [pc, #148]	@ (800dc54 <USBD_CDC_Init+0x1ec>)
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	f003 020f 	and.w	r2, r3, #15
 800dbc4:	6879      	ldr	r1, [r7, #4]
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	4413      	add	r3, r2
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	440b      	add	r3, r1
 800dbd0:	3323      	adds	r3, #35	@ 0x23
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	33b0      	adds	r3, #176	@ 0xb0
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	4413      	add	r3, r2
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d101      	bne.n	800dc10 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dc0c:	2302      	movs	r3, #2
 800dc0e:	e018      	b.n	800dc42 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	7c1b      	ldrb	r3, [r3, #16]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d10a      	bne.n	800dc2e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc18:	4b0d      	ldr	r3, [pc, #52]	@ (800dc50 <USBD_CDC_Init+0x1e8>)
 800dc1a:	7819      	ldrb	r1, [r3, #0]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f005 fdac 	bl	8013784 <USBD_LL_PrepareReceive>
 800dc2c:	e008      	b.n	800dc40 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc2e:	4b08      	ldr	r3, [pc, #32]	@ (800dc50 <USBD_CDC_Init+0x1e8>)
 800dc30:	7819      	ldrb	r1, [r3, #0]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc38:	2340      	movs	r3, #64	@ 0x40
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f005 fda2 	bl	8013784 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dc40:	2300      	movs	r3, #0
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3710      	adds	r7, #16
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	200001df 	.word	0x200001df
 800dc50:	200001e0 	.word	0x200001e0
 800dc54:	200001e1 	.word	0x200001e1

0800dc58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	460b      	mov	r3, r1
 800dc62:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dc64:	4b3a      	ldr	r3, [pc, #232]	@ (800dd50 <USBD_CDC_DeInit+0xf8>)
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	4619      	mov	r1, r3
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f005 fcc1 	bl	80135f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dc70:	4b37      	ldr	r3, [pc, #220]	@ (800dd50 <USBD_CDC_DeInit+0xf8>)
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	f003 020f 	and.w	r2, r3, #15
 800dc78:	6879      	ldr	r1, [r7, #4]
 800dc7a:	4613      	mov	r3, r2
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	4413      	add	r3, r2
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	440b      	add	r3, r1
 800dc84:	3323      	adds	r3, #35	@ 0x23
 800dc86:	2200      	movs	r2, #0
 800dc88:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dc8a:	4b32      	ldr	r3, [pc, #200]	@ (800dd54 <USBD_CDC_DeInit+0xfc>)
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f005 fcae 	bl	80135f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800dc96:	4b2f      	ldr	r3, [pc, #188]	@ (800dd54 <USBD_CDC_DeInit+0xfc>)
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	f003 020f 	and.w	r2, r3, #15
 800dc9e:	6879      	ldr	r1, [r7, #4]
 800dca0:	4613      	mov	r3, r2
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	4413      	add	r3, r2
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	440b      	add	r3, r1
 800dcaa:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800dcae:	2200      	movs	r2, #0
 800dcb0:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800dcb2:	4b29      	ldr	r3, [pc, #164]	@ (800dd58 <USBD_CDC_DeInit+0x100>)
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f005 fc9a 	bl	80135f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800dcbe:	4b26      	ldr	r3, [pc, #152]	@ (800dd58 <USBD_CDC_DeInit+0x100>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	f003 020f 	and.w	r2, r3, #15
 800dcc6:	6879      	ldr	r1, [r7, #4]
 800dcc8:	4613      	mov	r3, r2
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	4413      	add	r3, r2
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	440b      	add	r3, r1
 800dcd2:	3323      	adds	r3, #35	@ 0x23
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800dcd8:	4b1f      	ldr	r3, [pc, #124]	@ (800dd58 <USBD_CDC_DeInit+0x100>)
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	f003 020f 	and.w	r2, r3, #15
 800dce0:	6879      	ldr	r1, [r7, #4]
 800dce2:	4613      	mov	r3, r2
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	4413      	add	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	440b      	add	r3, r1
 800dcec:	331c      	adds	r3, #28
 800dcee:	2200      	movs	r2, #0
 800dcf0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	32b0      	adds	r2, #176	@ 0xb0
 800dcfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d01f      	beq.n	800dd44 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	33b0      	adds	r3, #176	@ 0xb0
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	4413      	add	r3, r2
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	32b0      	adds	r2, #176	@ 0xb0
 800dd22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd26:	4618      	mov	r0, r3
 800dd28:	f005 fd6e 	bl	8013808 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	32b0      	adds	r2, #176	@ 0xb0
 800dd36:	2100      	movs	r1, #0
 800dd38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3708      	adds	r7, #8
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	200001df 	.word	0x200001df
 800dd54:	200001e0 	.word	0x200001e0
 800dd58:	200001e1 	.word	0x200001e1

0800dd5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b086      	sub	sp, #24
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	32b0      	adds	r2, #176	@ 0xb0
 800dd70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dd76:	2300      	movs	r3, #0
 800dd78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d101      	bne.n	800dd8c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800dd88:	2303      	movs	r3, #3
 800dd8a:	e0bf      	b.n	800df0c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d050      	beq.n	800de3a <USBD_CDC_Setup+0xde>
 800dd98:	2b20      	cmp	r3, #32
 800dd9a:	f040 80af 	bne.w	800defc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	88db      	ldrh	r3, [r3, #6]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d03a      	beq.n	800de1c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	b25b      	sxtb	r3, r3
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	da1b      	bge.n	800dde8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	33b0      	adds	r3, #176	@ 0xb0
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	4413      	add	r3, r2
 800ddbe:	685b      	ldr	r3, [r3, #4]
 800ddc0:	689b      	ldr	r3, [r3, #8]
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ddc6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ddc8:	683a      	ldr	r2, [r7, #0]
 800ddca:	88d2      	ldrh	r2, [r2, #6]
 800ddcc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	88db      	ldrh	r3, [r3, #6]
 800ddd2:	2b07      	cmp	r3, #7
 800ddd4:	bf28      	it	cs
 800ddd6:	2307      	movcs	r3, #7
 800ddd8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	89fa      	ldrh	r2, [r7, #14]
 800ddde:	4619      	mov	r1, r3
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f001 fda9 	bl	800f938 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800dde6:	e090      	b.n	800df0a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	785a      	ldrb	r2, [r3, #1]
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	88db      	ldrh	r3, [r3, #6]
 800ddf6:	2b3f      	cmp	r3, #63	@ 0x3f
 800ddf8:	d803      	bhi.n	800de02 <USBD_CDC_Setup+0xa6>
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	88db      	ldrh	r3, [r3, #6]
 800ddfe:	b2da      	uxtb	r2, r3
 800de00:	e000      	b.n	800de04 <USBD_CDC_Setup+0xa8>
 800de02:	2240      	movs	r2, #64	@ 0x40
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800de0a:	6939      	ldr	r1, [r7, #16]
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800de12:	461a      	mov	r2, r3
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f001 fdbe 	bl	800f996 <USBD_CtlPrepareRx>
      break;
 800de1a:	e076      	b.n	800df0a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	33b0      	adds	r3, #176	@ 0xb0
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	4413      	add	r3, r2
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	683a      	ldr	r2, [r7, #0]
 800de30:	7850      	ldrb	r0, [r2, #1]
 800de32:	2200      	movs	r2, #0
 800de34:	6839      	ldr	r1, [r7, #0]
 800de36:	4798      	blx	r3
      break;
 800de38:	e067      	b.n	800df0a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	785b      	ldrb	r3, [r3, #1]
 800de3e:	2b0b      	cmp	r3, #11
 800de40:	d851      	bhi.n	800dee6 <USBD_CDC_Setup+0x18a>
 800de42:	a201      	add	r2, pc, #4	@ (adr r2, 800de48 <USBD_CDC_Setup+0xec>)
 800de44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de48:	0800de79 	.word	0x0800de79
 800de4c:	0800def5 	.word	0x0800def5
 800de50:	0800dee7 	.word	0x0800dee7
 800de54:	0800dee7 	.word	0x0800dee7
 800de58:	0800dee7 	.word	0x0800dee7
 800de5c:	0800dee7 	.word	0x0800dee7
 800de60:	0800dee7 	.word	0x0800dee7
 800de64:	0800dee7 	.word	0x0800dee7
 800de68:	0800dee7 	.word	0x0800dee7
 800de6c:	0800dee7 	.word	0x0800dee7
 800de70:	0800dea3 	.word	0x0800dea3
 800de74:	0800decd 	.word	0x0800decd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	2b03      	cmp	r3, #3
 800de82:	d107      	bne.n	800de94 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800de84:	f107 030a 	add.w	r3, r7, #10
 800de88:	2202      	movs	r2, #2
 800de8a:	4619      	mov	r1, r3
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f001 fd53 	bl	800f938 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800de92:	e032      	b.n	800defa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800de94:	6839      	ldr	r1, [r7, #0]
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f001 fcd1 	bl	800f83e <USBD_CtlError>
            ret = USBD_FAIL;
 800de9c:	2303      	movs	r3, #3
 800de9e:	75fb      	strb	r3, [r7, #23]
          break;
 800dea0:	e02b      	b.n	800defa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	2b03      	cmp	r3, #3
 800deac:	d107      	bne.n	800debe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800deae:	f107 030d 	add.w	r3, r7, #13
 800deb2:	2201      	movs	r2, #1
 800deb4:	4619      	mov	r1, r3
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f001 fd3e 	bl	800f938 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800debc:	e01d      	b.n	800defa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800debe:	6839      	ldr	r1, [r7, #0]
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f001 fcbc 	bl	800f83e <USBD_CtlError>
            ret = USBD_FAIL;
 800dec6:	2303      	movs	r3, #3
 800dec8:	75fb      	strb	r3, [r7, #23]
          break;
 800deca:	e016      	b.n	800defa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	2b03      	cmp	r3, #3
 800ded6:	d00f      	beq.n	800def8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ded8:	6839      	ldr	r1, [r7, #0]
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f001 fcaf 	bl	800f83e <USBD_CtlError>
            ret = USBD_FAIL;
 800dee0:	2303      	movs	r3, #3
 800dee2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dee4:	e008      	b.n	800def8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dee6:	6839      	ldr	r1, [r7, #0]
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f001 fca8 	bl	800f83e <USBD_CtlError>
          ret = USBD_FAIL;
 800deee:	2303      	movs	r3, #3
 800def0:	75fb      	strb	r3, [r7, #23]
          break;
 800def2:	e002      	b.n	800defa <USBD_CDC_Setup+0x19e>
          break;
 800def4:	bf00      	nop
 800def6:	e008      	b.n	800df0a <USBD_CDC_Setup+0x1ae>
          break;
 800def8:	bf00      	nop
      }
      break;
 800defa:	e006      	b.n	800df0a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800defc:	6839      	ldr	r1, [r7, #0]
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f001 fc9d 	bl	800f83e <USBD_CtlError>
      ret = USBD_FAIL;
 800df04:	2303      	movs	r3, #3
 800df06:	75fb      	strb	r3, [r7, #23]
      break;
 800df08:	bf00      	nop
  }

  return (uint8_t)ret;
 800df0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	460b      	mov	r3, r1
 800df1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	32b0      	adds	r2, #176	@ 0xb0
 800df32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800df3a:	2303      	movs	r3, #3
 800df3c:	e065      	b.n	800e00a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	32b0      	adds	r2, #176	@ 0xb0
 800df48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800df4e:	78fb      	ldrb	r3, [r7, #3]
 800df50:	f003 020f 	and.w	r2, r3, #15
 800df54:	6879      	ldr	r1, [r7, #4]
 800df56:	4613      	mov	r3, r2
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	4413      	add	r3, r2
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	440b      	add	r3, r1
 800df60:	3314      	adds	r3, #20
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d02f      	beq.n	800dfc8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800df68:	78fb      	ldrb	r3, [r7, #3]
 800df6a:	f003 020f 	and.w	r2, r3, #15
 800df6e:	6879      	ldr	r1, [r7, #4]
 800df70:	4613      	mov	r3, r2
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	4413      	add	r3, r2
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	440b      	add	r3, r1
 800df7a:	3314      	adds	r3, #20
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	78fb      	ldrb	r3, [r7, #3]
 800df80:	f003 010f 	and.w	r1, r3, #15
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	460b      	mov	r3, r1
 800df88:	00db      	lsls	r3, r3, #3
 800df8a:	440b      	add	r3, r1
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	4403      	add	r3, r0
 800df90:	331c      	adds	r3, #28
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	fbb2 f1f3 	udiv	r1, r2, r3
 800df98:	fb01 f303 	mul.w	r3, r1, r3
 800df9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d112      	bne.n	800dfc8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800dfa2:	78fb      	ldrb	r3, [r7, #3]
 800dfa4:	f003 020f 	and.w	r2, r3, #15
 800dfa8:	6879      	ldr	r1, [r7, #4]
 800dfaa:	4613      	mov	r3, r2
 800dfac:	009b      	lsls	r3, r3, #2
 800dfae:	4413      	add	r3, r2
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	440b      	add	r3, r1
 800dfb4:	3314      	adds	r3, #20
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dfba:	78f9      	ldrb	r1, [r7, #3]
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f005 fbbe 	bl	8013742 <USBD_LL_Transmit>
 800dfc6:	e01f      	b.n	800e008 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	33b0      	adds	r3, #176	@ 0xb0
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	4413      	add	r3, r2
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	691b      	ldr	r3, [r3, #16]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d010      	beq.n	800e008 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	33b0      	adds	r3, #176	@ 0xb0
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	4413      	add	r3, r2
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	691b      	ldr	r3, [r3, #16]
 800dff8:	68ba      	ldr	r2, [r7, #8]
 800dffa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800dffe:	68ba      	ldr	r2, [r7, #8]
 800e000:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e004:	78fa      	ldrb	r2, [r7, #3]
 800e006:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e008:	2300      	movs	r3, #0
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3710      	adds	r7, #16
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}

0800e012 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e012:	b580      	push	{r7, lr}
 800e014:	b084      	sub	sp, #16
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
 800e01a:	460b      	mov	r3, r1
 800e01c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	32b0      	adds	r2, #176	@ 0xb0
 800e028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e02c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	32b0      	adds	r2, #176	@ 0xb0
 800e038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d101      	bne.n	800e044 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e040:	2303      	movs	r3, #3
 800e042:	e01a      	b.n	800e07a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e044:	78fb      	ldrb	r3, [r7, #3]
 800e046:	4619      	mov	r1, r3
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f005 fbbc 	bl	80137c6 <USBD_LL_GetRxDataSize>
 800e04e:	4602      	mov	r2, r0
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	33b0      	adds	r3, #176	@ 0xb0
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	4413      	add	r3, r2
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e06e:	68fa      	ldr	r2, [r7, #12]
 800e070:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e074:	4611      	mov	r1, r2
 800e076:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e078:	2300      	movs	r3, #0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b084      	sub	sp, #16
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	32b0      	adds	r2, #176	@ 0xb0
 800e094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e098:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d101      	bne.n	800e0a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e0a0:	2303      	movs	r3, #3
 800e0a2:	e024      	b.n	800e0ee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0aa:	687a      	ldr	r2, [r7, #4]
 800e0ac:	33b0      	adds	r3, #176	@ 0xb0
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d019      	beq.n	800e0ec <USBD_CDC_EP0_RxReady+0x6a>
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e0be:	2bff      	cmp	r3, #255	@ 0xff
 800e0c0:	d014      	beq.n	800e0ec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	33b0      	adds	r3, #176	@ 0xb0
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	4413      	add	r3, r2
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	689b      	ldr	r3, [r3, #8]
 800e0d4:	68fa      	ldr	r2, [r7, #12]
 800e0d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e0da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e0e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	22ff      	movs	r2, #255	@ 0xff
 800e0e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
	...

0800e0f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b086      	sub	sp, #24
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e100:	2182      	movs	r1, #130	@ 0x82
 800e102:	4818      	ldr	r0, [pc, #96]	@ (800e164 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e104:	f000 fd62 	bl	800ebcc <USBD_GetEpDesc>
 800e108:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e10a:	2101      	movs	r1, #1
 800e10c:	4815      	ldr	r0, [pc, #84]	@ (800e164 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e10e:	f000 fd5d 	bl	800ebcc <USBD_GetEpDesc>
 800e112:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e114:	2181      	movs	r1, #129	@ 0x81
 800e116:	4813      	ldr	r0, [pc, #76]	@ (800e164 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e118:	f000 fd58 	bl	800ebcc <USBD_GetEpDesc>
 800e11c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d002      	beq.n	800e12a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	2210      	movs	r2, #16
 800e128:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d006      	beq.n	800e13e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	2200      	movs	r2, #0
 800e134:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e138:	711a      	strb	r2, [r3, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d006      	beq.n	800e152 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2200      	movs	r2, #0
 800e148:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e14c:	711a      	strb	r2, [r3, #4]
 800e14e:	2200      	movs	r2, #0
 800e150:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2243      	movs	r2, #67	@ 0x43
 800e156:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e158:	4b02      	ldr	r3, [pc, #8]	@ (800e164 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3718      	adds	r7, #24
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	2000019c 	.word	0x2000019c

0800e168 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e170:	2182      	movs	r1, #130	@ 0x82
 800e172:	4818      	ldr	r0, [pc, #96]	@ (800e1d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e174:	f000 fd2a 	bl	800ebcc <USBD_GetEpDesc>
 800e178:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e17a:	2101      	movs	r1, #1
 800e17c:	4815      	ldr	r0, [pc, #84]	@ (800e1d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e17e:	f000 fd25 	bl	800ebcc <USBD_GetEpDesc>
 800e182:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e184:	2181      	movs	r1, #129	@ 0x81
 800e186:	4813      	ldr	r0, [pc, #76]	@ (800e1d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e188:	f000 fd20 	bl	800ebcc <USBD_GetEpDesc>
 800e18c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d002      	beq.n	800e19a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	2210      	movs	r2, #16
 800e198:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d006      	beq.n	800e1ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	711a      	strb	r2, [r3, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f042 0202 	orr.w	r2, r2, #2
 800e1ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d006      	beq.n	800e1c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	711a      	strb	r2, [r3, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f042 0202 	orr.w	r2, r2, #2
 800e1c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2243      	movs	r2, #67	@ 0x43
 800e1c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e1c8:	4b02      	ldr	r3, [pc, #8]	@ (800e1d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3718      	adds	r7, #24
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	2000019c 	.word	0x2000019c

0800e1d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e1e0:	2182      	movs	r1, #130	@ 0x82
 800e1e2:	4818      	ldr	r0, [pc, #96]	@ (800e244 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e1e4:	f000 fcf2 	bl	800ebcc <USBD_GetEpDesc>
 800e1e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e1ea:	2101      	movs	r1, #1
 800e1ec:	4815      	ldr	r0, [pc, #84]	@ (800e244 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e1ee:	f000 fced 	bl	800ebcc <USBD_GetEpDesc>
 800e1f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e1f4:	2181      	movs	r1, #129	@ 0x81
 800e1f6:	4813      	ldr	r0, [pc, #76]	@ (800e244 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e1f8:	f000 fce8 	bl	800ebcc <USBD_GetEpDesc>
 800e1fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d002      	beq.n	800e20a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	2210      	movs	r2, #16
 800e208:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d006      	beq.n	800e21e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	2200      	movs	r2, #0
 800e214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e218:	711a      	strb	r2, [r3, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d006      	beq.n	800e232 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2200      	movs	r2, #0
 800e228:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e22c:	711a      	strb	r2, [r3, #4]
 800e22e:	2200      	movs	r2, #0
 800e230:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2243      	movs	r2, #67	@ 0x43
 800e236:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e238:	4b02      	ldr	r3, [pc, #8]	@ (800e244 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3718      	adds	r7, #24
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	2000019c 	.word	0x2000019c

0800e248 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e248:	b480      	push	{r7}
 800e24a:	b083      	sub	sp, #12
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	220a      	movs	r2, #10
 800e254:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e256:	4b03      	ldr	r3, [pc, #12]	@ (800e264 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e258:	4618      	mov	r0, r3
 800e25a:	370c      	adds	r7, #12
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr
 800e264:	20000158 	.word	0x20000158

0800e268 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d101      	bne.n	800e27c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e278:	2303      	movs	r3, #3
 800e27a:	e009      	b.n	800e290 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	33b0      	adds	r3, #176	@ 0xb0
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4413      	add	r3, r2
 800e28a:	683a      	ldr	r2, [r7, #0]
 800e28c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e28e:	2300      	movs	r3, #0
}
 800e290:	4618      	mov	r0, r3
 800e292:	370c      	adds	r7, #12
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b087      	sub	sp, #28
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	32b0      	adds	r2, #176	@ 0xb0
 800e2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e2be:	2303      	movs	r3, #3
 800e2c0:	e008      	b.n	800e2d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	68ba      	ldr	r2, [r7, #8]
 800e2c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e2d2:	2300      	movs	r3, #0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	371c      	adds	r7, #28
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b085      	sub	sp, #20
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	32b0      	adds	r2, #176	@ 0xb0
 800e2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d101      	bne.n	800e304 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e300:	2303      	movs	r3, #3
 800e302:	e004      	b.n	800e30e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	683a      	ldr	r2, [r7, #0]
 800e308:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e30c:	2300      	movs	r3, #0
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3714      	adds	r7, #20
 800e312:	46bd      	mov	sp, r7
 800e314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e318:	4770      	bx	lr
	...

0800e31c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	32b0      	adds	r2, #176	@ 0xb0
 800e32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e332:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e334:	2301      	movs	r3, #1
 800e336:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d101      	bne.n	800e342 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e33e:	2303      	movs	r3, #3
 800e340:	e025      	b.n	800e38e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d11f      	bne.n	800e38c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	2201      	movs	r2, #1
 800e350:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e354:	4b10      	ldr	r3, [pc, #64]	@ (800e398 <USBD_CDC_TransmitPacket+0x7c>)
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	f003 020f 	and.w	r2, r3, #15
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	4613      	mov	r3, r2
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	4413      	add	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	4403      	add	r3, r0
 800e36e:	3314      	adds	r3, #20
 800e370:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e372:	4b09      	ldr	r3, [pc, #36]	@ (800e398 <USBD_CDC_TransmitPacket+0x7c>)
 800e374:	7819      	ldrb	r1, [r3, #0]
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f005 f9dd 	bl	8013742 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e388:	2300      	movs	r3, #0
 800e38a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3710      	adds	r7, #16
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	200001df 	.word	0x200001df

0800e39c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	32b0      	adds	r2, #176	@ 0xb0
 800e3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	32b0      	adds	r2, #176	@ 0xb0
 800e3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d101      	bne.n	800e3ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	e018      	b.n	800e3fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	7c1b      	ldrb	r3, [r3, #16]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d10a      	bne.n	800e3e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e3d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e404 <USBD_CDC_ReceivePacket+0x68>)
 800e3d4:	7819      	ldrb	r1, [r3, #0]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e3dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f005 f9cf 	bl	8013784 <USBD_LL_PrepareReceive>
 800e3e6:	e008      	b.n	800e3fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e3e8:	4b06      	ldr	r3, [pc, #24]	@ (800e404 <USBD_CDC_ReceivePacket+0x68>)
 800e3ea:	7819      	ldrb	r1, [r3, #0]
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e3f2:	2340      	movs	r3, #64	@ 0x40
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f005 f9c5 	bl	8013784 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e3fa:	2300      	movs	r3, #0
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3710      	adds	r7, #16
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	200001e0 	.word	0x200001e0

0800e408 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b086      	sub	sp, #24
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	4613      	mov	r3, r2
 800e414:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d101      	bne.n	800e420 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e41c:	2303      	movs	r3, #3
 800e41e:	e01f      	b.n	800e460 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2200      	movs	r2, #0
 800e424:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2200      	movs	r2, #0
 800e42c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2200      	movs	r2, #0
 800e434:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d003      	beq.n	800e446 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	68ba      	ldr	r2, [r7, #8]
 800e442:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2201      	movs	r2, #1
 800e44a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	79fa      	ldrb	r2, [r7, #7]
 800e452:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e454:	68f8      	ldr	r0, [r7, #12]
 800e456:	f005 f83f 	bl	80134d8 <USBD_LL_Init>
 800e45a:	4603      	mov	r3, r0
 800e45c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3718      	adds	r7, #24
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e472:	2300      	movs	r3, #0
 800e474:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d101      	bne.n	800e480 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e47c:	2303      	movs	r3, #3
 800e47e:	e025      	b.n	800e4cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	683a      	ldr	r2, [r7, #0]
 800e484:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	32ae      	adds	r2, #174	@ 0xae
 800e492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d00f      	beq.n	800e4bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	32ae      	adds	r2, #174	@ 0xae
 800e4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ac:	f107 020e 	add.w	r2, r7, #14
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	4798      	blx	r3
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e4c2:	1c5a      	adds	r2, r3, #1
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3710      	adds	r7, #16
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f005 f847 	bl	8013570 <USBD_LL_Start>
 800e4e2:	4603      	mov	r3, r0
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e4f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	370c      	adds	r7, #12
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr

0800e502 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e502:	b580      	push	{r7, lr}
 800e504:	b084      	sub	sp, #16
 800e506:	af00      	add	r7, sp, #0
 800e508:	6078      	str	r0, [r7, #4]
 800e50a:	460b      	mov	r3, r1
 800e50c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e50e:	2300      	movs	r3, #0
 800e510:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d009      	beq.n	800e530 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	78fa      	ldrb	r2, [r7, #3]
 800e526:	4611      	mov	r1, r2
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	4798      	blx	r3
 800e52c:	4603      	mov	r3, r0
 800e52e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e530:	7bfb      	ldrb	r3, [r7, #15]
}
 800e532:	4618      	mov	r0, r3
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}

0800e53a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e53a:	b580      	push	{r7, lr}
 800e53c:	b084      	sub	sp, #16
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
 800e542:	460b      	mov	r3, r1
 800e544:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e546:	2300      	movs	r3, #0
 800e548:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	78fa      	ldrb	r2, [r7, #3]
 800e554:	4611      	mov	r1, r2
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	4798      	blx	r3
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d001      	beq.n	800e564 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e560:	2303      	movs	r3, #3
 800e562:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e564:	7bfb      	ldrb	r3, [r7, #15]
}
 800e566:	4618      	mov	r0, r3
 800e568:	3710      	adds	r7, #16
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}

0800e56e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e56e:	b580      	push	{r7, lr}
 800e570:	b084      	sub	sp, #16
 800e572:	af00      	add	r7, sp, #0
 800e574:	6078      	str	r0, [r7, #4]
 800e576:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e57e:	6839      	ldr	r1, [r7, #0]
 800e580:	4618      	mov	r0, r3
 800e582:	f001 f922 	bl	800f7ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2201      	movs	r2, #1
 800e58a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e594:	461a      	mov	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e5a2:	f003 031f 	and.w	r3, r3, #31
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	d01a      	beq.n	800e5e0 <USBD_LL_SetupStage+0x72>
 800e5aa:	2b02      	cmp	r3, #2
 800e5ac:	d822      	bhi.n	800e5f4 <USBD_LL_SetupStage+0x86>
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d002      	beq.n	800e5b8 <USBD_LL_SetupStage+0x4a>
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d00a      	beq.n	800e5cc <USBD_LL_SetupStage+0x5e>
 800e5b6:	e01d      	b.n	800e5f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e5be:	4619      	mov	r1, r3
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fb77 	bl	800ecb4 <USBD_StdDevReq>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	73fb      	strb	r3, [r7, #15]
      break;
 800e5ca:	e020      	b.n	800e60e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 fbdf 	bl	800ed98 <USBD_StdItfReq>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	73fb      	strb	r3, [r7, #15]
      break;
 800e5de:	e016      	b.n	800e60e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 fc41 	bl	800ee70 <USBD_StdEPReq>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	73fb      	strb	r3, [r7, #15]
      break;
 800e5f2:	e00c      	b.n	800e60e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e5fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	4619      	mov	r1, r3
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f005 f814 	bl	8013630 <USBD_LL_StallEP>
 800e608:	4603      	mov	r3, r0
 800e60a:	73fb      	strb	r3, [r7, #15]
      break;
 800e60c:	bf00      	nop
  }

  return ret;
 800e60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e610:	4618      	mov	r0, r3
 800e612:	3710      	adds	r7, #16
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b086      	sub	sp, #24
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	460b      	mov	r3, r1
 800e622:	607a      	str	r2, [r7, #4]
 800e624:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e626:	2300      	movs	r3, #0
 800e628:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800e62a:	7afb      	ldrb	r3, [r7, #11]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d177      	bne.n	800e720 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e636:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e63e:	2b03      	cmp	r3, #3
 800e640:	f040 80a1 	bne.w	800e786 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	693a      	ldr	r2, [r7, #16]
 800e64a:	8992      	ldrh	r2, [r2, #12]
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d91c      	bls.n	800e68a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	693a      	ldr	r2, [r7, #16]
 800e656:	8992      	ldrh	r2, [r2, #12]
 800e658:	1a9a      	subs	r2, r3, r2
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	693a      	ldr	r2, [r7, #16]
 800e664:	8992      	ldrh	r2, [r2, #12]
 800e666:	441a      	add	r2, r3
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	6919      	ldr	r1, [r3, #16]
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	899b      	ldrh	r3, [r3, #12]
 800e674:	461a      	mov	r2, r3
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	4293      	cmp	r3, r2
 800e67c:	bf38      	it	cc
 800e67e:	4613      	movcc	r3, r2
 800e680:	461a      	mov	r2, r3
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f001 f9a8 	bl	800f9d8 <USBD_CtlContinueRx>
 800e688:	e07d      	b.n	800e786 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e690:	f003 031f 	and.w	r3, r3, #31
 800e694:	2b02      	cmp	r3, #2
 800e696:	d014      	beq.n	800e6c2 <USBD_LL_DataOutStage+0xaa>
 800e698:	2b02      	cmp	r3, #2
 800e69a:	d81d      	bhi.n	800e6d8 <USBD_LL_DataOutStage+0xc0>
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d002      	beq.n	800e6a6 <USBD_LL_DataOutStage+0x8e>
 800e6a0:	2b01      	cmp	r3, #1
 800e6a2:	d003      	beq.n	800e6ac <USBD_LL_DataOutStage+0x94>
 800e6a4:	e018      	b.n	800e6d8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	75bb      	strb	r3, [r7, #22]
            break;
 800e6aa:	e018      	b.n	800e6de <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	f000 fa6e 	bl	800eb98 <USBD_CoreFindIF>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	75bb      	strb	r3, [r7, #22]
            break;
 800e6c0:	e00d      	b.n	800e6de <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e6c8:	b2db      	uxtb	r3, r3
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	f000 fa70 	bl	800ebb2 <USBD_CoreFindEP>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	75bb      	strb	r3, [r7, #22]
            break;
 800e6d6:	e002      	b.n	800e6de <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	75bb      	strb	r3, [r7, #22]
            break;
 800e6dc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e6de:	7dbb      	ldrb	r3, [r7, #22]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d119      	bne.n	800e718 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	2b03      	cmp	r3, #3
 800e6ee:	d113      	bne.n	800e718 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e6f0:	7dba      	ldrb	r2, [r7, #22]
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	32ae      	adds	r2, #174	@ 0xae
 800e6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6fa:	691b      	ldr	r3, [r3, #16]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d00b      	beq.n	800e718 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800e700:	7dba      	ldrb	r2, [r7, #22]
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e708:	7dba      	ldrb	r2, [r7, #22]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	32ae      	adds	r2, #174	@ 0xae
 800e70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e712:	691b      	ldr	r3, [r3, #16]
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f001 f96e 	bl	800f9fa <USBD_CtlSendStatus>
 800e71e:	e032      	b.n	800e786 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e720:	7afb      	ldrb	r3, [r7, #11]
 800e722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e726:	b2db      	uxtb	r3, r3
 800e728:	4619      	mov	r1, r3
 800e72a:	68f8      	ldr	r0, [r7, #12]
 800e72c:	f000 fa41 	bl	800ebb2 <USBD_CoreFindEP>
 800e730:	4603      	mov	r3, r0
 800e732:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e734:	7dbb      	ldrb	r3, [r7, #22]
 800e736:	2bff      	cmp	r3, #255	@ 0xff
 800e738:	d025      	beq.n	800e786 <USBD_LL_DataOutStage+0x16e>
 800e73a:	7dbb      	ldrb	r3, [r7, #22]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d122      	bne.n	800e786 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e746:	b2db      	uxtb	r3, r3
 800e748:	2b03      	cmp	r3, #3
 800e74a:	d117      	bne.n	800e77c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e74c:	7dba      	ldrb	r2, [r7, #22]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	32ae      	adds	r2, #174	@ 0xae
 800e752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e756:	699b      	ldr	r3, [r3, #24]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d00f      	beq.n	800e77c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800e75c:	7dba      	ldrb	r2, [r7, #22]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e764:	7dba      	ldrb	r2, [r7, #22]
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	32ae      	adds	r2, #174	@ 0xae
 800e76a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e76e:	699b      	ldr	r3, [r3, #24]
 800e770:	7afa      	ldrb	r2, [r7, #11]
 800e772:	4611      	mov	r1, r2
 800e774:	68f8      	ldr	r0, [r7, #12]
 800e776:	4798      	blx	r3
 800e778:	4603      	mov	r3, r0
 800e77a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e77c:	7dfb      	ldrb	r3, [r7, #23]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d001      	beq.n	800e786 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800e782:	7dfb      	ldrb	r3, [r7, #23]
 800e784:	e000      	b.n	800e788 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3718      	adds	r7, #24
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b086      	sub	sp, #24
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	460b      	mov	r3, r1
 800e79a:	607a      	str	r2, [r7, #4]
 800e79c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800e79e:	7afb      	ldrb	r3, [r7, #11]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d178      	bne.n	800e896 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	3314      	adds	r3, #20
 800e7a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	d163      	bne.n	800e87c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	685b      	ldr	r3, [r3, #4]
 800e7b8:	693a      	ldr	r2, [r7, #16]
 800e7ba:	8992      	ldrh	r2, [r2, #12]
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d91c      	bls.n	800e7fa <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	693a      	ldr	r2, [r7, #16]
 800e7c6:	8992      	ldrh	r2, [r2, #12]
 800e7c8:	1a9a      	subs	r2, r3, r2
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	691b      	ldr	r3, [r3, #16]
 800e7d2:	693a      	ldr	r2, [r7, #16]
 800e7d4:	8992      	ldrh	r2, [r2, #12]
 800e7d6:	441a      	add	r2, r3
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	6919      	ldr	r1, [r3, #16]
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f001 f8c4 	bl	800f974 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	2100      	movs	r1, #0
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f004 ffc6 	bl	8013784 <USBD_LL_PrepareReceive>
 800e7f8:	e040      	b.n	800e87c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	899b      	ldrh	r3, [r3, #12]
 800e7fe:	461a      	mov	r2, r3
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	429a      	cmp	r2, r3
 800e806:	d11c      	bne.n	800e842 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	693a      	ldr	r2, [r7, #16]
 800e80e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e810:	4293      	cmp	r3, r2
 800e812:	d316      	bcc.n	800e842 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e81e:	429a      	cmp	r2, r3
 800e820:	d20f      	bcs.n	800e842 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e822:	2200      	movs	r2, #0
 800e824:	2100      	movs	r1, #0
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f001 f8a4 	bl	800f974 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2200      	movs	r2, #0
 800e830:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e834:	2300      	movs	r3, #0
 800e836:	2200      	movs	r2, #0
 800e838:	2100      	movs	r1, #0
 800e83a:	68f8      	ldr	r0, [r7, #12]
 800e83c:	f004 ffa2 	bl	8013784 <USBD_LL_PrepareReceive>
 800e840:	e01c      	b.n	800e87c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	2b03      	cmp	r3, #3
 800e84c:	d10f      	bne.n	800e86e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d009      	beq.n	800e86e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2200      	movs	r2, #0
 800e85e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	68f8      	ldr	r0, [r7, #12]
 800e86c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e86e:	2180      	movs	r1, #128	@ 0x80
 800e870:	68f8      	ldr	r0, [r7, #12]
 800e872:	f004 fedd 	bl	8013630 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e876:	68f8      	ldr	r0, [r7, #12]
 800e878:	f001 f8d2 	bl	800fa20 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d03a      	beq.n	800e8fc <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f7ff fe30 	bl	800e4ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2200      	movs	r2, #0
 800e890:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e894:	e032      	b.n	800e8fc <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e896:	7afb      	ldrb	r3, [r7, #11]
 800e898:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e89c:	b2db      	uxtb	r3, r3
 800e89e:	4619      	mov	r1, r3
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	f000 f986 	bl	800ebb2 <USBD_CoreFindEP>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e8aa:	7dfb      	ldrb	r3, [r7, #23]
 800e8ac:	2bff      	cmp	r3, #255	@ 0xff
 800e8ae:	d025      	beq.n	800e8fc <USBD_LL_DataInStage+0x16c>
 800e8b0:	7dfb      	ldrb	r3, [r7, #23]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d122      	bne.n	800e8fc <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	2b03      	cmp	r3, #3
 800e8c0:	d11c      	bne.n	800e8fc <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e8c2:	7dfa      	ldrb	r2, [r7, #23]
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	32ae      	adds	r2, #174	@ 0xae
 800e8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8cc:	695b      	ldr	r3, [r3, #20]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d014      	beq.n	800e8fc <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800e8d2:	7dfa      	ldrb	r2, [r7, #23]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e8da:	7dfa      	ldrb	r2, [r7, #23]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	32ae      	adds	r2, #174	@ 0xae
 800e8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8e4:	695b      	ldr	r3, [r3, #20]
 800e8e6:	7afa      	ldrb	r2, [r7, #11]
 800e8e8:	4611      	mov	r1, r2
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	4798      	blx	r3
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e8f2:	7dbb      	ldrb	r3, [r7, #22]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d001      	beq.n	800e8fc <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800e8f8:	7dbb      	ldrb	r3, [r7, #22]
 800e8fa:	e000      	b.n	800e8fe <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3718      	adds	r7, #24
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b084      	sub	sp, #16
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e90e:	2300      	movs	r3, #0
 800e910:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2201      	movs	r2, #1
 800e916:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2200      	movs	r2, #0
 800e926:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2200      	movs	r2, #0
 800e92c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2200      	movs	r2, #0
 800e934:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d014      	beq.n	800e96c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00e      	beq.n	800e96c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	687a      	ldr	r2, [r7, #4]
 800e958:	6852      	ldr	r2, [r2, #4]
 800e95a:	b2d2      	uxtb	r2, r2
 800e95c:	4611      	mov	r1, r2
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	4798      	blx	r3
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d001      	beq.n	800e96c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e968:	2303      	movs	r3, #3
 800e96a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e96c:	2340      	movs	r3, #64	@ 0x40
 800e96e:	2200      	movs	r2, #0
 800e970:	2100      	movs	r1, #0
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f004 fe17 	bl	80135a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2201      	movs	r2, #1
 800e97c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2240      	movs	r2, #64	@ 0x40
 800e984:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e988:	2340      	movs	r3, #64	@ 0x40
 800e98a:	2200      	movs	r2, #0
 800e98c:	2180      	movs	r1, #128	@ 0x80
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f004 fe09 	bl	80135a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2201      	movs	r2, #1
 800e998:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2240      	movs	r2, #64	@ 0x40
 800e9a0:	841a      	strh	r2, [r3, #32]

  return ret;
 800e9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3710      	adds	r7, #16
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	78fa      	ldrb	r2, [r7, #3]
 800e9bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e9be:	2300      	movs	r3, #0
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b04      	cmp	r3, #4
 800e9de:	d006      	beq.n	800e9ee <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9e6:	b2da      	uxtb	r2, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2204      	movs	r2, #4
 800e9f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e9f6:	2300      	movs	r3, #0
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea12:	b2db      	uxtb	r3, r3
 800ea14:	2b04      	cmp	r3, #4
 800ea16:	d106      	bne.n	800ea26 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ea1e:	b2da      	uxtb	r2, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ea26:	2300      	movs	r3, #0
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	370c      	adds	r7, #12
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr

0800ea34 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	2b03      	cmp	r3, #3
 800ea46:	d110      	bne.n	800ea6a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00b      	beq.n	800ea6a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea58:	69db      	ldr	r3, [r3, #28]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d005      	beq.n	800ea6a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea64:	69db      	ldr	r3, [r3, #28]
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ea6a:	2300      	movs	r3, #0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	32ae      	adds	r2, #174	@ 0xae
 800ea8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d101      	bne.n	800ea96 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ea92:	2303      	movs	r3, #3
 800ea94:	e01c      	b.n	800ead0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea9c:	b2db      	uxtb	r3, r3
 800ea9e:	2b03      	cmp	r3, #3
 800eaa0:	d115      	bne.n	800eace <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	32ae      	adds	r2, #174	@ 0xae
 800eaac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eab0:	6a1b      	ldr	r3, [r3, #32]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00b      	beq.n	800eace <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	32ae      	adds	r2, #174	@ 0xae
 800eac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eac4:	6a1b      	ldr	r3, [r3, #32]
 800eac6:	78fa      	ldrb	r2, [r7, #3]
 800eac8:	4611      	mov	r1, r2
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eace:	2300      	movs	r3, #0
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	460b      	mov	r3, r1
 800eae2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	32ae      	adds	r2, #174	@ 0xae
 800eaee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d101      	bne.n	800eafa <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800eaf6:	2303      	movs	r3, #3
 800eaf8:	e01c      	b.n	800eb34 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	2b03      	cmp	r3, #3
 800eb04:	d115      	bne.n	800eb32 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	32ae      	adds	r2, #174	@ 0xae
 800eb10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00b      	beq.n	800eb32 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	32ae      	adds	r2, #174	@ 0xae
 800eb24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb2a:	78fa      	ldrb	r2, [r7, #3]
 800eb2c:	4611      	mov	r1, r2
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb32:	2300      	movs	r3, #0
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eb44:	2300      	movs	r3, #0
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	370c      	adds	r7, #12
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr

0800eb52 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b084      	sub	sp, #16
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00e      	beq.n	800eb8e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb76:	685b      	ldr	r3, [r3, #4]
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	6852      	ldr	r2, [r2, #4]
 800eb7c:	b2d2      	uxtb	r2, r2
 800eb7e:	4611      	mov	r1, r2
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	4798      	blx	r3
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d001      	beq.n	800eb8e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800eb8a:	2303      	movs	r3, #3
 800eb8c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3710      	adds	r7, #16
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	460b      	mov	r3, r1
 800eba2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eba4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	370c      	adds	r7, #12
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr

0800ebb2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ebb2:	b480      	push	{r7}
 800ebb4:	b083      	sub	sp, #12
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
 800ebba:	460b      	mov	r3, r1
 800ebbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ebbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b086      	sub	sp, #24
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	885b      	ldrh	r3, [r3, #2]
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	68fa      	ldr	r2, [r7, #12]
 800ebec:	7812      	ldrb	r2, [r2, #0]
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d91f      	bls.n	800ec32 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ebf8:	e013      	b.n	800ec22 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ebfa:	f107 030a 	add.w	r3, r7, #10
 800ebfe:	4619      	mov	r1, r3
 800ec00:	6978      	ldr	r0, [r7, #20]
 800ec02:	f000 f81b 	bl	800ec3c <USBD_GetNextDesc>
 800ec06:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	785b      	ldrb	r3, [r3, #1]
 800ec0c:	2b05      	cmp	r3, #5
 800ec0e:	d108      	bne.n	800ec22 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	789b      	ldrb	r3, [r3, #2]
 800ec18:	78fa      	ldrb	r2, [r7, #3]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d008      	beq.n	800ec30 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	885b      	ldrh	r3, [r3, #2]
 800ec26:	b29a      	uxth	r2, r3
 800ec28:	897b      	ldrh	r3, [r7, #10]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d8e5      	bhi.n	800ebfa <USBD_GetEpDesc+0x2e>
 800ec2e:	e000      	b.n	800ec32 <USBD_GetEpDesc+0x66>
          break;
 800ec30:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ec32:	693b      	ldr	r3, [r7, #16]
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3718      	adds	r7, #24
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	881b      	ldrh	r3, [r3, #0]
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	7812      	ldrb	r2, [r2, #0]
 800ec52:	4413      	add	r3, r2
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	461a      	mov	r2, r3
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	4413      	add	r3, r2
 800ec64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ec66:	68fb      	ldr	r3, [r7, #12]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3714      	adds	r7, #20
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b087      	sub	sp, #28
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	3301      	adds	r3, #1
 800ec8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ec92:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ec96:	021b      	lsls	r3, r3, #8
 800ec98:	b21a      	sxth	r2, r3
 800ec9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	b21b      	sxth	r3, r3
 800eca2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800eca4:	89fb      	ldrh	r3, [r7, #14]
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	371c      	adds	r7, #28
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
	...

0800ecb4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ecca:	2b40      	cmp	r3, #64	@ 0x40
 800eccc:	d005      	beq.n	800ecda <USBD_StdDevReq+0x26>
 800ecce:	2b40      	cmp	r3, #64	@ 0x40
 800ecd0:	d857      	bhi.n	800ed82 <USBD_StdDevReq+0xce>
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d00f      	beq.n	800ecf6 <USBD_StdDevReq+0x42>
 800ecd6:	2b20      	cmp	r3, #32
 800ecd8:	d153      	bne.n	800ed82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	32ae      	adds	r2, #174	@ 0xae
 800ece4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ece8:	689b      	ldr	r3, [r3, #8]
 800ecea:	6839      	ldr	r1, [r7, #0]
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	4798      	blx	r3
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	73fb      	strb	r3, [r7, #15]
      break;
 800ecf4:	e04a      	b.n	800ed8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	785b      	ldrb	r3, [r3, #1]
 800ecfa:	2b09      	cmp	r3, #9
 800ecfc:	d83b      	bhi.n	800ed76 <USBD_StdDevReq+0xc2>
 800ecfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ed04 <USBD_StdDevReq+0x50>)
 800ed00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed04:	0800ed59 	.word	0x0800ed59
 800ed08:	0800ed6d 	.word	0x0800ed6d
 800ed0c:	0800ed77 	.word	0x0800ed77
 800ed10:	0800ed63 	.word	0x0800ed63
 800ed14:	0800ed77 	.word	0x0800ed77
 800ed18:	0800ed37 	.word	0x0800ed37
 800ed1c:	0800ed2d 	.word	0x0800ed2d
 800ed20:	0800ed77 	.word	0x0800ed77
 800ed24:	0800ed4f 	.word	0x0800ed4f
 800ed28:	0800ed41 	.word	0x0800ed41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ed2c:	6839      	ldr	r1, [r7, #0]
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 fa3e 	bl	800f1b0 <USBD_GetDescriptor>
          break;
 800ed34:	e024      	b.n	800ed80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ed36:	6839      	ldr	r1, [r7, #0]
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 fba3 	bl	800f484 <USBD_SetAddress>
          break;
 800ed3e:	e01f      	b.n	800ed80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ed40:	6839      	ldr	r1, [r7, #0]
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 fbe2 	bl	800f50c <USBD_SetConfig>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	73fb      	strb	r3, [r7, #15]
          break;
 800ed4c:	e018      	b.n	800ed80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ed4e:	6839      	ldr	r1, [r7, #0]
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f000 fc85 	bl	800f660 <USBD_GetConfig>
          break;
 800ed56:	e013      	b.n	800ed80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ed58:	6839      	ldr	r1, [r7, #0]
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 fcb6 	bl	800f6cc <USBD_GetStatus>
          break;
 800ed60:	e00e      	b.n	800ed80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ed62:	6839      	ldr	r1, [r7, #0]
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f000 fce5 	bl	800f734 <USBD_SetFeature>
          break;
 800ed6a:	e009      	b.n	800ed80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ed6c:	6839      	ldr	r1, [r7, #0]
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 fd09 	bl	800f786 <USBD_ClrFeature>
          break;
 800ed74:	e004      	b.n	800ed80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ed76:	6839      	ldr	r1, [r7, #0]
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f000 fd60 	bl	800f83e <USBD_CtlError>
          break;
 800ed7e:	bf00      	nop
      }
      break;
 800ed80:	e004      	b.n	800ed8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ed82:	6839      	ldr	r1, [r7, #0]
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fd5a 	bl	800f83e <USBD_CtlError>
      break;
 800ed8a:	bf00      	nop
  }

  return ret;
 800ed8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop

0800ed98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eda2:	2300      	movs	r3, #0
 800eda4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800edae:	2b40      	cmp	r3, #64	@ 0x40
 800edb0:	d005      	beq.n	800edbe <USBD_StdItfReq+0x26>
 800edb2:	2b40      	cmp	r3, #64	@ 0x40
 800edb4:	d852      	bhi.n	800ee5c <USBD_StdItfReq+0xc4>
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d001      	beq.n	800edbe <USBD_StdItfReq+0x26>
 800edba:	2b20      	cmp	r3, #32
 800edbc:	d14e      	bne.n	800ee5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edc4:	b2db      	uxtb	r3, r3
 800edc6:	3b01      	subs	r3, #1
 800edc8:	2b02      	cmp	r3, #2
 800edca:	d840      	bhi.n	800ee4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	889b      	ldrh	r3, [r3, #4]
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	2b01      	cmp	r3, #1
 800edd4:	d836      	bhi.n	800ee44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	889b      	ldrh	r3, [r3, #4]
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	4619      	mov	r1, r3
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f7ff feda 	bl	800eb98 <USBD_CoreFindIF>
 800ede4:	4603      	mov	r3, r0
 800ede6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ede8:	7bbb      	ldrb	r3, [r7, #14]
 800edea:	2bff      	cmp	r3, #255	@ 0xff
 800edec:	d01d      	beq.n	800ee2a <USBD_StdItfReq+0x92>
 800edee:	7bbb      	ldrb	r3, [r7, #14]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d11a      	bne.n	800ee2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800edf4:	7bba      	ldrb	r2, [r7, #14]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	32ae      	adds	r2, #174	@ 0xae
 800edfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00f      	beq.n	800ee24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ee04:	7bba      	ldrb	r2, [r7, #14]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ee0c:	7bba      	ldrb	r2, [r7, #14]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	32ae      	adds	r2, #174	@ 0xae
 800ee12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee16:	689b      	ldr	r3, [r3, #8]
 800ee18:	6839      	ldr	r1, [r7, #0]
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	4798      	blx	r3
 800ee1e:	4603      	mov	r3, r0
 800ee20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ee22:	e004      	b.n	800ee2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ee24:	2303      	movs	r3, #3
 800ee26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ee28:	e001      	b.n	800ee2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ee2a:	2303      	movs	r3, #3
 800ee2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	88db      	ldrh	r3, [r3, #6]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d110      	bne.n	800ee58 <USBD_StdItfReq+0xc0>
 800ee36:	7bfb      	ldrb	r3, [r7, #15]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d10d      	bne.n	800ee58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f000 fddc 	bl	800f9fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ee42:	e009      	b.n	800ee58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ee44:	6839      	ldr	r1, [r7, #0]
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f000 fcf9 	bl	800f83e <USBD_CtlError>
          break;
 800ee4c:	e004      	b.n	800ee58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ee4e:	6839      	ldr	r1, [r7, #0]
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f000 fcf4 	bl	800f83e <USBD_CtlError>
          break;
 800ee56:	e000      	b.n	800ee5a <USBD_StdItfReq+0xc2>
          break;
 800ee58:	bf00      	nop
      }
      break;
 800ee5a:	e004      	b.n	800ee66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ee5c:	6839      	ldr	r1, [r7, #0]
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 fced 	bl	800f83e <USBD_CtlError>
      break;
 800ee64:	bf00      	nop
  }

  return ret;
 800ee66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3710      	adds	r7, #16
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	889b      	ldrh	r3, [r3, #4]
 800ee82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ee8c:	2b40      	cmp	r3, #64	@ 0x40
 800ee8e:	d007      	beq.n	800eea0 <USBD_StdEPReq+0x30>
 800ee90:	2b40      	cmp	r3, #64	@ 0x40
 800ee92:	f200 8181 	bhi.w	800f198 <USBD_StdEPReq+0x328>
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d02a      	beq.n	800eef0 <USBD_StdEPReq+0x80>
 800ee9a:	2b20      	cmp	r3, #32
 800ee9c:	f040 817c 	bne.w	800f198 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800eea0:	7bbb      	ldrb	r3, [r7, #14]
 800eea2:	4619      	mov	r1, r3
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f7ff fe84 	bl	800ebb2 <USBD_CoreFindEP>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eeae:	7b7b      	ldrb	r3, [r7, #13]
 800eeb0:	2bff      	cmp	r3, #255	@ 0xff
 800eeb2:	f000 8176 	beq.w	800f1a2 <USBD_StdEPReq+0x332>
 800eeb6:	7b7b      	ldrb	r3, [r7, #13]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f040 8172 	bne.w	800f1a2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800eebe:	7b7a      	ldrb	r2, [r7, #13]
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800eec6:	7b7a      	ldrb	r2, [r7, #13]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	32ae      	adds	r2, #174	@ 0xae
 800eecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eed0:	689b      	ldr	r3, [r3, #8]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	f000 8165 	beq.w	800f1a2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800eed8:	7b7a      	ldrb	r2, [r7, #13]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	32ae      	adds	r2, #174	@ 0xae
 800eede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eee2:	689b      	ldr	r3, [r3, #8]
 800eee4:	6839      	ldr	r1, [r7, #0]
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	4798      	blx	r3
 800eeea:	4603      	mov	r3, r0
 800eeec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800eeee:	e158      	b.n	800f1a2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	785b      	ldrb	r3, [r3, #1]
 800eef4:	2b03      	cmp	r3, #3
 800eef6:	d008      	beq.n	800ef0a <USBD_StdEPReq+0x9a>
 800eef8:	2b03      	cmp	r3, #3
 800eefa:	f300 8147 	bgt.w	800f18c <USBD_StdEPReq+0x31c>
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	f000 809b 	beq.w	800f03a <USBD_StdEPReq+0x1ca>
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d03c      	beq.n	800ef82 <USBD_StdEPReq+0x112>
 800ef08:	e140      	b.n	800f18c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	2b02      	cmp	r3, #2
 800ef14:	d002      	beq.n	800ef1c <USBD_StdEPReq+0xac>
 800ef16:	2b03      	cmp	r3, #3
 800ef18:	d016      	beq.n	800ef48 <USBD_StdEPReq+0xd8>
 800ef1a:	e02c      	b.n	800ef76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef1c:	7bbb      	ldrb	r3, [r7, #14]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d00d      	beq.n	800ef3e <USBD_StdEPReq+0xce>
 800ef22:	7bbb      	ldrb	r3, [r7, #14]
 800ef24:	2b80      	cmp	r3, #128	@ 0x80
 800ef26:	d00a      	beq.n	800ef3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef28:	7bbb      	ldrb	r3, [r7, #14]
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f004 fb7f 	bl	8013630 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef32:	2180      	movs	r1, #128	@ 0x80
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f004 fb7b 	bl	8013630 <USBD_LL_StallEP>
 800ef3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ef3c:	e020      	b.n	800ef80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ef3e:	6839      	ldr	r1, [r7, #0]
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 fc7c 	bl	800f83e <USBD_CtlError>
              break;
 800ef46:	e01b      	b.n	800ef80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	885b      	ldrh	r3, [r3, #2]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d10e      	bne.n	800ef6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ef50:	7bbb      	ldrb	r3, [r7, #14]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d00b      	beq.n	800ef6e <USBD_StdEPReq+0xfe>
 800ef56:	7bbb      	ldrb	r3, [r7, #14]
 800ef58:	2b80      	cmp	r3, #128	@ 0x80
 800ef5a:	d008      	beq.n	800ef6e <USBD_StdEPReq+0xfe>
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	88db      	ldrh	r3, [r3, #6]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d104      	bne.n	800ef6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef64:	7bbb      	ldrb	r3, [r7, #14]
 800ef66:	4619      	mov	r1, r3
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f004 fb61 	bl	8013630 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 fd43 	bl	800f9fa <USBD_CtlSendStatus>

              break;
 800ef74:	e004      	b.n	800ef80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ef76:	6839      	ldr	r1, [r7, #0]
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f000 fc60 	bl	800f83e <USBD_CtlError>
              break;
 800ef7e:	bf00      	nop
          }
          break;
 800ef80:	e109      	b.n	800f196 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	2b02      	cmp	r3, #2
 800ef8c:	d002      	beq.n	800ef94 <USBD_StdEPReq+0x124>
 800ef8e:	2b03      	cmp	r3, #3
 800ef90:	d016      	beq.n	800efc0 <USBD_StdEPReq+0x150>
 800ef92:	e04b      	b.n	800f02c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef94:	7bbb      	ldrb	r3, [r7, #14]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00d      	beq.n	800efb6 <USBD_StdEPReq+0x146>
 800ef9a:	7bbb      	ldrb	r3, [r7, #14]
 800ef9c:	2b80      	cmp	r3, #128	@ 0x80
 800ef9e:	d00a      	beq.n	800efb6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800efa0:	7bbb      	ldrb	r3, [r7, #14]
 800efa2:	4619      	mov	r1, r3
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f004 fb43 	bl	8013630 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800efaa:	2180      	movs	r1, #128	@ 0x80
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f004 fb3f 	bl	8013630 <USBD_LL_StallEP>
 800efb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800efb4:	e040      	b.n	800f038 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800efb6:	6839      	ldr	r1, [r7, #0]
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f000 fc40 	bl	800f83e <USBD_CtlError>
              break;
 800efbe:	e03b      	b.n	800f038 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	885b      	ldrh	r3, [r3, #2]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d136      	bne.n	800f036 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800efc8:	7bbb      	ldrb	r3, [r7, #14]
 800efca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d004      	beq.n	800efdc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800efd2:	7bbb      	ldrb	r3, [r7, #14]
 800efd4:	4619      	mov	r1, r3
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f004 fb49 	bl	801366e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 fd0c 	bl	800f9fa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800efe2:	7bbb      	ldrb	r3, [r7, #14]
 800efe4:	4619      	mov	r1, r3
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7ff fde3 	bl	800ebb2 <USBD_CoreFindEP>
 800efec:	4603      	mov	r3, r0
 800efee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eff0:	7b7b      	ldrb	r3, [r7, #13]
 800eff2:	2bff      	cmp	r3, #255	@ 0xff
 800eff4:	d01f      	beq.n	800f036 <USBD_StdEPReq+0x1c6>
 800eff6:	7b7b      	ldrb	r3, [r7, #13]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d11c      	bne.n	800f036 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800effc:	7b7a      	ldrb	r2, [r7, #13]
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f004:	7b7a      	ldrb	r2, [r7, #13]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	32ae      	adds	r2, #174	@ 0xae
 800f00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f00e:	689b      	ldr	r3, [r3, #8]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d010      	beq.n	800f036 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f014:	7b7a      	ldrb	r2, [r7, #13]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	32ae      	adds	r2, #174	@ 0xae
 800f01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f01e:	689b      	ldr	r3, [r3, #8]
 800f020:	6839      	ldr	r1, [r7, #0]
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	4798      	blx	r3
 800f026:	4603      	mov	r3, r0
 800f028:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f02a:	e004      	b.n	800f036 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f02c:	6839      	ldr	r1, [r7, #0]
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f000 fc05 	bl	800f83e <USBD_CtlError>
              break;
 800f034:	e000      	b.n	800f038 <USBD_StdEPReq+0x1c8>
              break;
 800f036:	bf00      	nop
          }
          break;
 800f038:	e0ad      	b.n	800f196 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f040:	b2db      	uxtb	r3, r3
 800f042:	2b02      	cmp	r3, #2
 800f044:	d002      	beq.n	800f04c <USBD_StdEPReq+0x1dc>
 800f046:	2b03      	cmp	r3, #3
 800f048:	d033      	beq.n	800f0b2 <USBD_StdEPReq+0x242>
 800f04a:	e099      	b.n	800f180 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f04c:	7bbb      	ldrb	r3, [r7, #14]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d007      	beq.n	800f062 <USBD_StdEPReq+0x1f2>
 800f052:	7bbb      	ldrb	r3, [r7, #14]
 800f054:	2b80      	cmp	r3, #128	@ 0x80
 800f056:	d004      	beq.n	800f062 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f058:	6839      	ldr	r1, [r7, #0]
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f000 fbef 	bl	800f83e <USBD_CtlError>
                break;
 800f060:	e093      	b.n	800f18a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f066:	2b00      	cmp	r3, #0
 800f068:	da0b      	bge.n	800f082 <USBD_StdEPReq+0x212>
 800f06a:	7bbb      	ldrb	r3, [r7, #14]
 800f06c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f070:	4613      	mov	r3, r2
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	4413      	add	r3, r2
 800f076:	009b      	lsls	r3, r3, #2
 800f078:	3310      	adds	r3, #16
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	4413      	add	r3, r2
 800f07e:	3304      	adds	r3, #4
 800f080:	e00b      	b.n	800f09a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f082:	7bbb      	ldrb	r3, [r7, #14]
 800f084:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f088:	4613      	mov	r3, r2
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	4413      	add	r3, r2
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	4413      	add	r3, r2
 800f098:	3304      	adds	r3, #4
 800f09a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	330e      	adds	r3, #14
 800f0a6:	2202      	movs	r2, #2
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f000 fc44 	bl	800f938 <USBD_CtlSendData>
              break;
 800f0b0:	e06b      	b.n	800f18a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f0b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	da11      	bge.n	800f0de <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f0ba:	7bbb      	ldrb	r3, [r7, #14]
 800f0bc:	f003 020f 	and.w	r2, r3, #15
 800f0c0:	6879      	ldr	r1, [r7, #4]
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	009b      	lsls	r3, r3, #2
 800f0c6:	4413      	add	r3, r2
 800f0c8:	009b      	lsls	r3, r3, #2
 800f0ca:	440b      	add	r3, r1
 800f0cc:	3323      	adds	r3, #35	@ 0x23
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d117      	bne.n	800f104 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800f0d4:	6839      	ldr	r1, [r7, #0]
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 fbb1 	bl	800f83e <USBD_CtlError>
                  break;
 800f0dc:	e055      	b.n	800f18a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f0de:	7bbb      	ldrb	r3, [r7, #14]
 800f0e0:	f003 020f 	and.w	r2, r3, #15
 800f0e4:	6879      	ldr	r1, [r7, #4]
 800f0e6:	4613      	mov	r3, r2
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	4413      	add	r3, r2
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	440b      	add	r3, r1
 800f0f0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d104      	bne.n	800f104 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800f0fa:	6839      	ldr	r1, [r7, #0]
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 fb9e 	bl	800f83e <USBD_CtlError>
                  break;
 800f102:	e042      	b.n	800f18a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	da0b      	bge.n	800f124 <USBD_StdEPReq+0x2b4>
 800f10c:	7bbb      	ldrb	r3, [r7, #14]
 800f10e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f112:	4613      	mov	r3, r2
 800f114:	009b      	lsls	r3, r3, #2
 800f116:	4413      	add	r3, r2
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	3310      	adds	r3, #16
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	4413      	add	r3, r2
 800f120:	3304      	adds	r3, #4
 800f122:	e00b      	b.n	800f13c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f124:	7bbb      	ldrb	r3, [r7, #14]
 800f126:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f12a:	4613      	mov	r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	4413      	add	r3, r2
 800f130:	009b      	lsls	r3, r3, #2
 800f132:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f136:	687a      	ldr	r2, [r7, #4]
 800f138:	4413      	add	r3, r2
 800f13a:	3304      	adds	r3, #4
 800f13c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f13e:	7bbb      	ldrb	r3, [r7, #14]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d002      	beq.n	800f14a <USBD_StdEPReq+0x2da>
 800f144:	7bbb      	ldrb	r3, [r7, #14]
 800f146:	2b80      	cmp	r3, #128	@ 0x80
 800f148:	d103      	bne.n	800f152 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	2200      	movs	r2, #0
 800f14e:	739a      	strb	r2, [r3, #14]
 800f150:	e00e      	b.n	800f170 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f152:	7bbb      	ldrb	r3, [r7, #14]
 800f154:	4619      	mov	r1, r3
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f004 faa8 	bl	80136ac <USBD_LL_IsStallEP>
 800f15c:	4603      	mov	r3, r0
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d003      	beq.n	800f16a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	2201      	movs	r2, #1
 800f166:	739a      	strb	r2, [r3, #14]
 800f168:	e002      	b.n	800f170 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	2200      	movs	r2, #0
 800f16e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	330e      	adds	r3, #14
 800f174:	2202      	movs	r2, #2
 800f176:	4619      	mov	r1, r3
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f000 fbdd 	bl	800f938 <USBD_CtlSendData>
              break;
 800f17e:	e004      	b.n	800f18a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800f180:	6839      	ldr	r1, [r7, #0]
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 fb5b 	bl	800f83e <USBD_CtlError>
              break;
 800f188:	bf00      	nop
          }
          break;
 800f18a:	e004      	b.n	800f196 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800f18c:	6839      	ldr	r1, [r7, #0]
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f000 fb55 	bl	800f83e <USBD_CtlError>
          break;
 800f194:	bf00      	nop
      }
      break;
 800f196:	e005      	b.n	800f1a4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800f198:	6839      	ldr	r1, [r7, #0]
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 fb4f 	bl	800f83e <USBD_CtlError>
      break;
 800f1a0:	e000      	b.n	800f1a4 <USBD_StdEPReq+0x334>
      break;
 800f1a2:	bf00      	nop
  }

  return ret;
 800f1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3710      	adds	r7, #16
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
	...

0800f1b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	885b      	ldrh	r3, [r3, #2]
 800f1ca:	0a1b      	lsrs	r3, r3, #8
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	3b01      	subs	r3, #1
 800f1d0:	2b06      	cmp	r3, #6
 800f1d2:	f200 8128 	bhi.w	800f426 <USBD_GetDescriptor+0x276>
 800f1d6:	a201      	add	r2, pc, #4	@ (adr r2, 800f1dc <USBD_GetDescriptor+0x2c>)
 800f1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1dc:	0800f1f9 	.word	0x0800f1f9
 800f1e0:	0800f211 	.word	0x0800f211
 800f1e4:	0800f251 	.word	0x0800f251
 800f1e8:	0800f427 	.word	0x0800f427
 800f1ec:	0800f427 	.word	0x0800f427
 800f1f0:	0800f3c7 	.word	0x0800f3c7
 800f1f4:	0800f3f3 	.word	0x0800f3f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	7c12      	ldrb	r2, [r2, #16]
 800f204:	f107 0108 	add.w	r1, r7, #8
 800f208:	4610      	mov	r0, r2
 800f20a:	4798      	blx	r3
 800f20c:	60f8      	str	r0, [r7, #12]
      break;
 800f20e:	e112      	b.n	800f436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	7c1b      	ldrb	r3, [r3, #16]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d10d      	bne.n	800f234 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f21e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f220:	f107 0208 	add.w	r2, r7, #8
 800f224:	4610      	mov	r0, r2
 800f226:	4798      	blx	r3
 800f228:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	3301      	adds	r3, #1
 800f22e:	2202      	movs	r2, #2
 800f230:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f232:	e100      	b.n	800f436 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f23a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f23c:	f107 0208 	add.w	r2, r7, #8
 800f240:	4610      	mov	r0, r2
 800f242:	4798      	blx	r3
 800f244:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	3301      	adds	r3, #1
 800f24a:	2202      	movs	r2, #2
 800f24c:	701a      	strb	r2, [r3, #0]
      break;
 800f24e:	e0f2      	b.n	800f436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	885b      	ldrh	r3, [r3, #2]
 800f254:	b2db      	uxtb	r3, r3
 800f256:	2b05      	cmp	r3, #5
 800f258:	f200 80ac 	bhi.w	800f3b4 <USBD_GetDescriptor+0x204>
 800f25c:	a201      	add	r2, pc, #4	@ (adr r2, 800f264 <USBD_GetDescriptor+0xb4>)
 800f25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f262:	bf00      	nop
 800f264:	0800f27d 	.word	0x0800f27d
 800f268:	0800f2b1 	.word	0x0800f2b1
 800f26c:	0800f2e5 	.word	0x0800f2e5
 800f270:	0800f319 	.word	0x0800f319
 800f274:	0800f34d 	.word	0x0800f34d
 800f278:	0800f381 	.word	0x0800f381
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d00b      	beq.n	800f2a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	687a      	ldr	r2, [r7, #4]
 800f292:	7c12      	ldrb	r2, [r2, #16]
 800f294:	f107 0108 	add.w	r1, r7, #8
 800f298:	4610      	mov	r0, r2
 800f29a:	4798      	blx	r3
 800f29c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f29e:	e091      	b.n	800f3c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f2a0:	6839      	ldr	r1, [r7, #0]
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 facb 	bl	800f83e <USBD_CtlError>
            err++;
 800f2a8:	7afb      	ldrb	r3, [r7, #11]
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	72fb      	strb	r3, [r7, #11]
          break;
 800f2ae:	e089      	b.n	800f3c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d00b      	beq.n	800f2d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	7c12      	ldrb	r2, [r2, #16]
 800f2c8:	f107 0108 	add.w	r1, r7, #8
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	4798      	blx	r3
 800f2d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2d2:	e077      	b.n	800f3c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f2d4:	6839      	ldr	r1, [r7, #0]
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 fab1 	bl	800f83e <USBD_CtlError>
            err++;
 800f2dc:	7afb      	ldrb	r3, [r7, #11]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	72fb      	strb	r3, [r7, #11]
          break;
 800f2e2:	e06f      	b.n	800f3c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d00b      	beq.n	800f308 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	7c12      	ldrb	r2, [r2, #16]
 800f2fc:	f107 0108 	add.w	r1, r7, #8
 800f300:	4610      	mov	r0, r2
 800f302:	4798      	blx	r3
 800f304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f306:	e05d      	b.n	800f3c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f308:	6839      	ldr	r1, [r7, #0]
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f000 fa97 	bl	800f83e <USBD_CtlError>
            err++;
 800f310:	7afb      	ldrb	r3, [r7, #11]
 800f312:	3301      	adds	r3, #1
 800f314:	72fb      	strb	r3, [r7, #11]
          break;
 800f316:	e055      	b.n	800f3c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f31e:	691b      	ldr	r3, [r3, #16]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d00b      	beq.n	800f33c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f32a:	691b      	ldr	r3, [r3, #16]
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	7c12      	ldrb	r2, [r2, #16]
 800f330:	f107 0108 	add.w	r1, r7, #8
 800f334:	4610      	mov	r0, r2
 800f336:	4798      	blx	r3
 800f338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f33a:	e043      	b.n	800f3c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f33c:	6839      	ldr	r1, [r7, #0]
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 fa7d 	bl	800f83e <USBD_CtlError>
            err++;
 800f344:	7afb      	ldrb	r3, [r7, #11]
 800f346:	3301      	adds	r3, #1
 800f348:	72fb      	strb	r3, [r7, #11]
          break;
 800f34a:	e03b      	b.n	800f3c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f352:	695b      	ldr	r3, [r3, #20]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d00b      	beq.n	800f370 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f35e:	695b      	ldr	r3, [r3, #20]
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	7c12      	ldrb	r2, [r2, #16]
 800f364:	f107 0108 	add.w	r1, r7, #8
 800f368:	4610      	mov	r0, r2
 800f36a:	4798      	blx	r3
 800f36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f36e:	e029      	b.n	800f3c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f370:	6839      	ldr	r1, [r7, #0]
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 fa63 	bl	800f83e <USBD_CtlError>
            err++;
 800f378:	7afb      	ldrb	r3, [r7, #11]
 800f37a:	3301      	adds	r3, #1
 800f37c:	72fb      	strb	r3, [r7, #11]
          break;
 800f37e:	e021      	b.n	800f3c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f386:	699b      	ldr	r3, [r3, #24]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d00b      	beq.n	800f3a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f392:	699b      	ldr	r3, [r3, #24]
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	7c12      	ldrb	r2, [r2, #16]
 800f398:	f107 0108 	add.w	r1, r7, #8
 800f39c:	4610      	mov	r0, r2
 800f39e:	4798      	blx	r3
 800f3a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f3a2:	e00f      	b.n	800f3c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f3a4:	6839      	ldr	r1, [r7, #0]
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f000 fa49 	bl	800f83e <USBD_CtlError>
            err++;
 800f3ac:	7afb      	ldrb	r3, [r7, #11]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	72fb      	strb	r3, [r7, #11]
          break;
 800f3b2:	e007      	b.n	800f3c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f3b4:	6839      	ldr	r1, [r7, #0]
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f000 fa41 	bl	800f83e <USBD_CtlError>
          err++;
 800f3bc:	7afb      	ldrb	r3, [r7, #11]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f3c2:	bf00      	nop
      }
      break;
 800f3c4:	e037      	b.n	800f436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	7c1b      	ldrb	r3, [r3, #16]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d109      	bne.n	800f3e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3d6:	f107 0208 	add.w	r2, r7, #8
 800f3da:	4610      	mov	r0, r2
 800f3dc:	4798      	blx	r3
 800f3de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f3e0:	e029      	b.n	800f436 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f3e2:	6839      	ldr	r1, [r7, #0]
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 fa2a 	bl	800f83e <USBD_CtlError>
        err++;
 800f3ea:	7afb      	ldrb	r3, [r7, #11]
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	72fb      	strb	r3, [r7, #11]
      break;
 800f3f0:	e021      	b.n	800f436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	7c1b      	ldrb	r3, [r3, #16]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d10d      	bne.n	800f416 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f402:	f107 0208 	add.w	r2, r7, #8
 800f406:	4610      	mov	r0, r2
 800f408:	4798      	blx	r3
 800f40a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	3301      	adds	r3, #1
 800f410:	2207      	movs	r2, #7
 800f412:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f414:	e00f      	b.n	800f436 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f416:	6839      	ldr	r1, [r7, #0]
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f000 fa10 	bl	800f83e <USBD_CtlError>
        err++;
 800f41e:	7afb      	ldrb	r3, [r7, #11]
 800f420:	3301      	adds	r3, #1
 800f422:	72fb      	strb	r3, [r7, #11]
      break;
 800f424:	e007      	b.n	800f436 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f426:	6839      	ldr	r1, [r7, #0]
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 fa08 	bl	800f83e <USBD_CtlError>
      err++;
 800f42e:	7afb      	ldrb	r3, [r7, #11]
 800f430:	3301      	adds	r3, #1
 800f432:	72fb      	strb	r3, [r7, #11]
      break;
 800f434:	bf00      	nop
  }

  if (err != 0U)
 800f436:	7afb      	ldrb	r3, [r7, #11]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d11e      	bne.n	800f47a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	88db      	ldrh	r3, [r3, #6]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d016      	beq.n	800f472 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f444:	893b      	ldrh	r3, [r7, #8]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d00e      	beq.n	800f468 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	88da      	ldrh	r2, [r3, #6]
 800f44e:	893b      	ldrh	r3, [r7, #8]
 800f450:	4293      	cmp	r3, r2
 800f452:	bf28      	it	cs
 800f454:	4613      	movcs	r3, r2
 800f456:	b29b      	uxth	r3, r3
 800f458:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f45a:	893b      	ldrh	r3, [r7, #8]
 800f45c:	461a      	mov	r2, r3
 800f45e:	68f9      	ldr	r1, [r7, #12]
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 fa69 	bl	800f938 <USBD_CtlSendData>
 800f466:	e009      	b.n	800f47c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f468:	6839      	ldr	r1, [r7, #0]
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f000 f9e7 	bl	800f83e <USBD_CtlError>
 800f470:	e004      	b.n	800f47c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 fac1 	bl	800f9fa <USBD_CtlSendStatus>
 800f478:	e000      	b.n	800f47c <USBD_GetDescriptor+0x2cc>
    return;
 800f47a:	bf00      	nop
  }
}
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop

0800f484 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	889b      	ldrh	r3, [r3, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d131      	bne.n	800f4fa <USBD_SetAddress+0x76>
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	88db      	ldrh	r3, [r3, #6]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d12d      	bne.n	800f4fa <USBD_SetAddress+0x76>
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	885b      	ldrh	r3, [r3, #2]
 800f4a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800f4a4:	d829      	bhi.n	800f4fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	885b      	ldrh	r3, [r3, #2]
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	2b03      	cmp	r3, #3
 800f4bc:	d104      	bne.n	800f4c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f4be:	6839      	ldr	r1, [r7, #0]
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 f9bc 	bl	800f83e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4c6:	e01d      	b.n	800f504 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	7bfa      	ldrb	r2, [r7, #15]
 800f4cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f4d0:	7bfb      	ldrb	r3, [r7, #15]
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f004 f915 	bl	8013704 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 fa8d 	bl	800f9fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f4e0:	7bfb      	ldrb	r3, [r7, #15]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d004      	beq.n	800f4f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2202      	movs	r2, #2
 800f4ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4ee:	e009      	b.n	800f504 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4f8:	e004      	b.n	800f504 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f4fa:	6839      	ldr	r1, [r7, #0]
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f000 f99e 	bl	800f83e <USBD_CtlError>
  }
}
 800f502:	bf00      	nop
 800f504:	bf00      	nop
 800f506:	3710      	adds	r7, #16
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f516:	2300      	movs	r3, #0
 800f518:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	885b      	ldrh	r3, [r3, #2]
 800f51e:	b2da      	uxtb	r2, r3
 800f520:	4b4e      	ldr	r3, [pc, #312]	@ (800f65c <USBD_SetConfig+0x150>)
 800f522:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f524:	4b4d      	ldr	r3, [pc, #308]	@ (800f65c <USBD_SetConfig+0x150>)
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d905      	bls.n	800f538 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f52c:	6839      	ldr	r1, [r7, #0]
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 f985 	bl	800f83e <USBD_CtlError>
    return USBD_FAIL;
 800f534:	2303      	movs	r3, #3
 800f536:	e08c      	b.n	800f652 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	2b02      	cmp	r3, #2
 800f542:	d002      	beq.n	800f54a <USBD_SetConfig+0x3e>
 800f544:	2b03      	cmp	r3, #3
 800f546:	d029      	beq.n	800f59c <USBD_SetConfig+0x90>
 800f548:	e075      	b.n	800f636 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f54a:	4b44      	ldr	r3, [pc, #272]	@ (800f65c <USBD_SetConfig+0x150>)
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d020      	beq.n	800f594 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f552:	4b42      	ldr	r3, [pc, #264]	@ (800f65c <USBD_SetConfig+0x150>)
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	461a      	mov	r2, r3
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f55c:	4b3f      	ldr	r3, [pc, #252]	@ (800f65c <USBD_SetConfig+0x150>)
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	4619      	mov	r1, r3
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7fe ffcd 	bl	800e502 <USBD_SetClassConfig>
 800f568:	4603      	mov	r3, r0
 800f56a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f56c:	7bfb      	ldrb	r3, [r7, #15]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d008      	beq.n	800f584 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f572:	6839      	ldr	r1, [r7, #0]
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 f962 	bl	800f83e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2202      	movs	r2, #2
 800f57e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f582:	e065      	b.n	800f650 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f000 fa38 	bl	800f9fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2203      	movs	r2, #3
 800f58e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f592:	e05d      	b.n	800f650 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f000 fa30 	bl	800f9fa <USBD_CtlSendStatus>
      break;
 800f59a:	e059      	b.n	800f650 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f59c:	4b2f      	ldr	r3, [pc, #188]	@ (800f65c <USBD_SetConfig+0x150>)
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d112      	bne.n	800f5ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2202      	movs	r2, #2
 800f5a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f5ac:	4b2b      	ldr	r3, [pc, #172]	@ (800f65c <USBD_SetConfig+0x150>)
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f5b6:	4b29      	ldr	r3, [pc, #164]	@ (800f65c <USBD_SetConfig+0x150>)
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f7fe ffbc 	bl	800e53a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 fa19 	bl	800f9fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f5c8:	e042      	b.n	800f650 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f5ca:	4b24      	ldr	r3, [pc, #144]	@ (800f65c <USBD_SetConfig+0x150>)
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d02a      	beq.n	800f62e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	685b      	ldr	r3, [r3, #4]
 800f5dc:	b2db      	uxtb	r3, r3
 800f5de:	4619      	mov	r1, r3
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f7fe ffaa 	bl	800e53a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f5e6:	4b1d      	ldr	r3, [pc, #116]	@ (800f65c <USBD_SetConfig+0x150>)
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f5f0:	4b1a      	ldr	r3, [pc, #104]	@ (800f65c <USBD_SetConfig+0x150>)
 800f5f2:	781b      	ldrb	r3, [r3, #0]
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7fe ff83 	bl	800e502 <USBD_SetClassConfig>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f600:	7bfb      	ldrb	r3, [r7, #15]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d00f      	beq.n	800f626 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f606:	6839      	ldr	r1, [r7, #0]
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f000 f918 	bl	800f83e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	b2db      	uxtb	r3, r3
 800f614:	4619      	mov	r1, r3
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f7fe ff8f 	bl	800e53a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2202      	movs	r2, #2
 800f620:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f624:	e014      	b.n	800f650 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 f9e7 	bl	800f9fa <USBD_CtlSendStatus>
      break;
 800f62c:	e010      	b.n	800f650 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 f9e3 	bl	800f9fa <USBD_CtlSendStatus>
      break;
 800f634:	e00c      	b.n	800f650 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f636:	6839      	ldr	r1, [r7, #0]
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 f900 	bl	800f83e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f63e:	4b07      	ldr	r3, [pc, #28]	@ (800f65c <USBD_SetConfig+0x150>)
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	4619      	mov	r1, r3
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f7fe ff78 	bl	800e53a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f64a:	2303      	movs	r3, #3
 800f64c:	73fb      	strb	r3, [r7, #15]
      break;
 800f64e:	bf00      	nop
  }

  return ret;
 800f650:	7bfb      	ldrb	r3, [r7, #15]
}
 800f652:	4618      	mov	r0, r3
 800f654:	3710      	adds	r7, #16
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	20002d54 	.word	0x20002d54

0800f660 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	88db      	ldrh	r3, [r3, #6]
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d004      	beq.n	800f67c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f672:	6839      	ldr	r1, [r7, #0]
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 f8e2 	bl	800f83e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f67a:	e023      	b.n	800f6c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f682:	b2db      	uxtb	r3, r3
 800f684:	2b02      	cmp	r3, #2
 800f686:	dc02      	bgt.n	800f68e <USBD_GetConfig+0x2e>
 800f688:	2b00      	cmp	r3, #0
 800f68a:	dc03      	bgt.n	800f694 <USBD_GetConfig+0x34>
 800f68c:	e015      	b.n	800f6ba <USBD_GetConfig+0x5a>
 800f68e:	2b03      	cmp	r3, #3
 800f690:	d00b      	beq.n	800f6aa <USBD_GetConfig+0x4a>
 800f692:	e012      	b.n	800f6ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2200      	movs	r2, #0
 800f698:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	3308      	adds	r3, #8
 800f69e:	2201      	movs	r2, #1
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 f948 	bl	800f938 <USBD_CtlSendData>
        break;
 800f6a8:	e00c      	b.n	800f6c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	3304      	adds	r3, #4
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f000 f940 	bl	800f938 <USBD_CtlSendData>
        break;
 800f6b8:	e004      	b.n	800f6c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f6ba:	6839      	ldr	r1, [r7, #0]
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f000 f8be 	bl	800f83e <USBD_CtlError>
        break;
 800f6c2:	bf00      	nop
}
 800f6c4:	bf00      	nop
 800f6c6:	3708      	adds	r7, #8
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	3b01      	subs	r3, #1
 800f6e0:	2b02      	cmp	r3, #2
 800f6e2:	d81e      	bhi.n	800f722 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	88db      	ldrh	r3, [r3, #6]
 800f6e8:	2b02      	cmp	r3, #2
 800f6ea:	d004      	beq.n	800f6f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f6ec:	6839      	ldr	r1, [r7, #0]
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 f8a5 	bl	800f83e <USBD_CtlError>
        break;
 800f6f4:	e01a      	b.n	800f72c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f702:	2b00      	cmp	r3, #0
 800f704:	d005      	beq.n	800f712 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	68db      	ldr	r3, [r3, #12]
 800f70a:	f043 0202 	orr.w	r2, r3, #2
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	330c      	adds	r3, #12
 800f716:	2202      	movs	r2, #2
 800f718:	4619      	mov	r1, r3
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 f90c 	bl	800f938 <USBD_CtlSendData>
      break;
 800f720:	e004      	b.n	800f72c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f722:	6839      	ldr	r1, [r7, #0]
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 f88a 	bl	800f83e <USBD_CtlError>
      break;
 800f72a:	bf00      	nop
  }
}
 800f72c:	bf00      	nop
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	885b      	ldrh	r3, [r3, #2]
 800f742:	2b01      	cmp	r3, #1
 800f744:	d107      	bne.n	800f756 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2201      	movs	r2, #1
 800f74a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 f953 	bl	800f9fa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f754:	e013      	b.n	800f77e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	885b      	ldrh	r3, [r3, #2]
 800f75a:	2b02      	cmp	r3, #2
 800f75c:	d10b      	bne.n	800f776 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	889b      	ldrh	r3, [r3, #4]
 800f762:	0a1b      	lsrs	r3, r3, #8
 800f764:	b29b      	uxth	r3, r3
 800f766:	b2da      	uxtb	r2, r3
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f000 f943 	bl	800f9fa <USBD_CtlSendStatus>
}
 800f774:	e003      	b.n	800f77e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f776:	6839      	ldr	r1, [r7, #0]
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 f860 	bl	800f83e <USBD_CtlError>
}
 800f77e:	bf00      	nop
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}

0800f786 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f786:	b580      	push	{r7, lr}
 800f788:	b082      	sub	sp, #8
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	6078      	str	r0, [r7, #4]
 800f78e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f796:	b2db      	uxtb	r3, r3
 800f798:	3b01      	subs	r3, #1
 800f79a:	2b02      	cmp	r3, #2
 800f79c:	d80b      	bhi.n	800f7b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	885b      	ldrh	r3, [r3, #2]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d10c      	bne.n	800f7c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f000 f923 	bl	800f9fa <USBD_CtlSendStatus>
      }
      break;
 800f7b4:	e004      	b.n	800f7c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f7b6:	6839      	ldr	r1, [r7, #0]
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 f840 	bl	800f83e <USBD_CtlError>
      break;
 800f7be:	e000      	b.n	800f7c2 <USBD_ClrFeature+0x3c>
      break;
 800f7c0:	bf00      	nop
  }
}
 800f7c2:	bf00      	nop
 800f7c4:	3708      	adds	r7, #8
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}

0800f7ca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f7ca:	b580      	push	{r7, lr}
 800f7cc:	b084      	sub	sp, #16
 800f7ce:	af00      	add	r7, sp, #0
 800f7d0:	6078      	str	r0, [r7, #4]
 800f7d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	781a      	ldrb	r2, [r3, #0]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	781a      	ldrb	r2, [r3, #0]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f7f4:	68f8      	ldr	r0, [r7, #12]
 800f7f6:	f7ff fa3d 	bl	800ec74 <SWAPBYTE>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	3301      	adds	r3, #1
 800f806:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	3301      	adds	r3, #1
 800f80c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f80e:	68f8      	ldr	r0, [r7, #12]
 800f810:	f7ff fa30 	bl	800ec74 <SWAPBYTE>
 800f814:	4603      	mov	r3, r0
 800f816:	461a      	mov	r2, r3
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	3301      	adds	r3, #1
 800f820:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	3301      	adds	r3, #1
 800f826:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f7ff fa23 	bl	800ec74 <SWAPBYTE>
 800f82e:	4603      	mov	r3, r0
 800f830:	461a      	mov	r2, r3
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	80da      	strh	r2, [r3, #6]
}
 800f836:	bf00      	nop
 800f838:	3710      	adds	r7, #16
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}

0800f83e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f83e:	b580      	push	{r7, lr}
 800f840:	b082      	sub	sp, #8
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
 800f846:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f848:	2180      	movs	r1, #128	@ 0x80
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f003 fef0 	bl	8013630 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f850:	2100      	movs	r1, #0
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f003 feec 	bl	8013630 <USBD_LL_StallEP>
}
 800f858:	bf00      	nop
 800f85a:	3708      	adds	r7, #8
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b086      	sub	sp, #24
 800f864:	af00      	add	r7, sp, #0
 800f866:	60f8      	str	r0, [r7, #12]
 800f868:	60b9      	str	r1, [r7, #8]
 800f86a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f86c:	2300      	movs	r3, #0
 800f86e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d042      	beq.n	800f8fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f87a:	6938      	ldr	r0, [r7, #16]
 800f87c:	f000 f842 	bl	800f904 <USBD_GetLen>
 800f880:	4603      	mov	r3, r0
 800f882:	3301      	adds	r3, #1
 800f884:	005b      	lsls	r3, r3, #1
 800f886:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f88a:	d808      	bhi.n	800f89e <USBD_GetString+0x3e>
 800f88c:	6938      	ldr	r0, [r7, #16]
 800f88e:	f000 f839 	bl	800f904 <USBD_GetLen>
 800f892:	4603      	mov	r3, r0
 800f894:	3301      	adds	r3, #1
 800f896:	b29b      	uxth	r3, r3
 800f898:	005b      	lsls	r3, r3, #1
 800f89a:	b29a      	uxth	r2, r3
 800f89c:	e001      	b.n	800f8a2 <USBD_GetString+0x42>
 800f89e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f8a6:	7dfb      	ldrb	r3, [r7, #23]
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	4413      	add	r3, r2
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	7812      	ldrb	r2, [r2, #0]
 800f8b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800f8b2:	7dfb      	ldrb	r3, [r7, #23]
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f8b8:	7dfb      	ldrb	r3, [r7, #23]
 800f8ba:	68ba      	ldr	r2, [r7, #8]
 800f8bc:	4413      	add	r3, r2
 800f8be:	2203      	movs	r2, #3
 800f8c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800f8c2:	7dfb      	ldrb	r3, [r7, #23]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f8c8:	e013      	b.n	800f8f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f8ca:	7dfb      	ldrb	r3, [r7, #23]
 800f8cc:	68ba      	ldr	r2, [r7, #8]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	693a      	ldr	r2, [r7, #16]
 800f8d2:	7812      	ldrb	r2, [r2, #0]
 800f8d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	613b      	str	r3, [r7, #16]
    idx++;
 800f8dc:	7dfb      	ldrb	r3, [r7, #23]
 800f8de:	3301      	adds	r3, #1
 800f8e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f8e2:	7dfb      	ldrb	r3, [r7, #23]
 800f8e4:	68ba      	ldr	r2, [r7, #8]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	701a      	strb	r2, [r3, #0]
    idx++;
 800f8ec:	7dfb      	ldrb	r3, [r7, #23]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d1e7      	bne.n	800f8ca <USBD_GetString+0x6a>
 800f8fa:	e000      	b.n	800f8fe <USBD_GetString+0x9e>
    return;
 800f8fc:	bf00      	nop
  }
}
 800f8fe:	3718      	adds	r7, #24
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f904:	b480      	push	{r7}
 800f906:	b085      	sub	sp, #20
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f90c:	2300      	movs	r3, #0
 800f90e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f914:	e005      	b.n	800f922 <USBD_GetLen+0x1e>
  {
    len++;
 800f916:	7bfb      	ldrb	r3, [r7, #15]
 800f918:	3301      	adds	r3, #1
 800f91a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	3301      	adds	r3, #1
 800f920:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d1f5      	bne.n	800f916 <USBD_GetLen+0x12>
  }

  return len;
 800f92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3714      	adds	r7, #20
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr

0800f938 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2202      	movs	r2, #2
 800f948:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	687a      	ldr	r2, [r7, #4]
 800f950:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	68ba      	ldr	r2, [r7, #8]
 800f956:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	687a      	ldr	r2, [r7, #4]
 800f95c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	68ba      	ldr	r2, [r7, #8]
 800f962:	2100      	movs	r1, #0
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	f003 feec 	bl	8013742 <USBD_LL_Transmit>

  return USBD_OK;
 800f96a:	2300      	movs	r3, #0
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3710      	adds	r7, #16
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	68ba      	ldr	r2, [r7, #8]
 800f984:	2100      	movs	r1, #0
 800f986:	68f8      	ldr	r0, [r7, #12]
 800f988:	f003 fedb 	bl	8013742 <USBD_LL_Transmit>

  return USBD_OK;
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3710      	adds	r7, #16
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}

0800f996 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f996:	b580      	push	{r7, lr}
 800f998:	b084      	sub	sp, #16
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	60f8      	str	r0, [r7, #12]
 800f99e:	60b9      	str	r1, [r7, #8]
 800f9a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2203      	movs	r2, #3
 800f9a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	687a      	ldr	r2, [r7, #4]
 800f9ae:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	68ba      	ldr	r2, [r7, #8]
 800f9b6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	68ba      	ldr	r2, [r7, #8]
 800f9c6:	2100      	movs	r1, #0
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f003 fedb 	bl	8013784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f9ce:	2300      	movs	r3, #0
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3710      	adds	r7, #16
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b084      	sub	sp, #16
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	68ba      	ldr	r2, [r7, #8]
 800f9e8:	2100      	movs	r1, #0
 800f9ea:	68f8      	ldr	r0, [r7, #12]
 800f9ec:	f003 feca 	bl	8013784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f9f0:	2300      	movs	r3, #0
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b082      	sub	sp, #8
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2204      	movs	r2, #4
 800fa06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	2100      	movs	r1, #0
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f003 fe96 	bl	8013742 <USBD_LL_Transmit>

  return USBD_OK;
 800fa16:	2300      	movs	r3, #0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2205      	movs	r2, #5
 800fa2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa30:	2300      	movs	r3, #0
 800fa32:	2200      	movs	r2, #0
 800fa34:	2100      	movs	r1, #0
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f003 fea4 	bl	8013784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fa3c:	2300      	movs	r3, #0
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3708      	adds	r7, #8
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
	...

0800fa48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b084      	sub	sp, #16
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	4603      	mov	r3, r0
 800fa50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fa52:	79fb      	ldrb	r3, [r7, #7]
 800fa54:	4a08      	ldr	r2, [pc, #32]	@ (800fa78 <disk_status+0x30>)
 800fa56:	009b      	lsls	r3, r3, #2
 800fa58:	4413      	add	r3, r2
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	79fa      	ldrb	r2, [r7, #7]
 800fa60:	4905      	ldr	r1, [pc, #20]	@ (800fa78 <disk_status+0x30>)
 800fa62:	440a      	add	r2, r1
 800fa64:	7a12      	ldrb	r2, [r2, #8]
 800fa66:	4610      	mov	r0, r2
 800fa68:	4798      	blx	r3
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fa6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3710      	adds	r7, #16
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	20002f80 	.word	0x20002f80

0800fa7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b084      	sub	sp, #16
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	4603      	mov	r3, r0
 800fa84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fa86:	2300      	movs	r3, #0
 800fa88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fa8a:	79fb      	ldrb	r3, [r7, #7]
 800fa8c:	4a0e      	ldr	r2, [pc, #56]	@ (800fac8 <disk_initialize+0x4c>)
 800fa8e:	5cd3      	ldrb	r3, [r2, r3]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d114      	bne.n	800fabe <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fa94:	79fb      	ldrb	r3, [r7, #7]
 800fa96:	4a0c      	ldr	r2, [pc, #48]	@ (800fac8 <disk_initialize+0x4c>)
 800fa98:	009b      	lsls	r3, r3, #2
 800fa9a:	4413      	add	r3, r2
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	79fa      	ldrb	r2, [r7, #7]
 800faa2:	4909      	ldr	r1, [pc, #36]	@ (800fac8 <disk_initialize+0x4c>)
 800faa4:	440a      	add	r2, r1
 800faa6:	7a12      	ldrb	r2, [r2, #8]
 800faa8:	4610      	mov	r0, r2
 800faaa:	4798      	blx	r3
 800faac:	4603      	mov	r3, r0
 800faae:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800fab0:	7bfb      	ldrb	r3, [r7, #15]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d103      	bne.n	800fabe <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800fab6:	79fb      	ldrb	r3, [r7, #7]
 800fab8:	4a03      	ldr	r2, [pc, #12]	@ (800fac8 <disk_initialize+0x4c>)
 800faba:	2101      	movs	r1, #1
 800fabc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800fabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3710      	adds	r7, #16
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	20002f80 	.word	0x20002f80

0800facc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800facc:	b590      	push	{r4, r7, lr}
 800face:	b087      	sub	sp, #28
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	60b9      	str	r1, [r7, #8]
 800fad4:	607a      	str	r2, [r7, #4]
 800fad6:	603b      	str	r3, [r7, #0]
 800fad8:	4603      	mov	r3, r0
 800fada:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fadc:	7bfb      	ldrb	r3, [r7, #15]
 800fade:	4a0a      	ldr	r2, [pc, #40]	@ (800fb08 <disk_read+0x3c>)
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	4413      	add	r3, r2
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	689c      	ldr	r4, [r3, #8]
 800fae8:	7bfb      	ldrb	r3, [r7, #15]
 800faea:	4a07      	ldr	r2, [pc, #28]	@ (800fb08 <disk_read+0x3c>)
 800faec:	4413      	add	r3, r2
 800faee:	7a18      	ldrb	r0, [r3, #8]
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	687a      	ldr	r2, [r7, #4]
 800faf4:	68b9      	ldr	r1, [r7, #8]
 800faf6:	47a0      	blx	r4
 800faf8:	4603      	mov	r3, r0
 800fafa:	75fb      	strb	r3, [r7, #23]
  return res;
 800fafc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	371c      	adds	r7, #28
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd90      	pop	{r4, r7, pc}
 800fb06:	bf00      	nop
 800fb08:	20002f80 	.word	0x20002f80

0800fb0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fb0c:	b590      	push	{r4, r7, lr}
 800fb0e:	b087      	sub	sp, #28
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60b9      	str	r1, [r7, #8]
 800fb14:	607a      	str	r2, [r7, #4]
 800fb16:	603b      	str	r3, [r7, #0]
 800fb18:	4603      	mov	r3, r0
 800fb1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fb1c:	7bfb      	ldrb	r3, [r7, #15]
 800fb1e:	4a0a      	ldr	r2, [pc, #40]	@ (800fb48 <disk_write+0x3c>)
 800fb20:	009b      	lsls	r3, r3, #2
 800fb22:	4413      	add	r3, r2
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	68dc      	ldr	r4, [r3, #12]
 800fb28:	7bfb      	ldrb	r3, [r7, #15]
 800fb2a:	4a07      	ldr	r2, [pc, #28]	@ (800fb48 <disk_write+0x3c>)
 800fb2c:	4413      	add	r3, r2
 800fb2e:	7a18      	ldrb	r0, [r3, #8]
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	68b9      	ldr	r1, [r7, #8]
 800fb36:	47a0      	blx	r4
 800fb38:	4603      	mov	r3, r0
 800fb3a:	75fb      	strb	r3, [r7, #23]
  return res;
 800fb3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	371c      	adds	r7, #28
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd90      	pop	{r4, r7, pc}
 800fb46:	bf00      	nop
 800fb48:	20002f80 	.word	0x20002f80

0800fb4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b084      	sub	sp, #16
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	4603      	mov	r3, r0
 800fb54:	603a      	str	r2, [r7, #0]
 800fb56:	71fb      	strb	r3, [r7, #7]
 800fb58:	460b      	mov	r3, r1
 800fb5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fb5c:	79fb      	ldrb	r3, [r7, #7]
 800fb5e:	4a09      	ldr	r2, [pc, #36]	@ (800fb84 <disk_ioctl+0x38>)
 800fb60:	009b      	lsls	r3, r3, #2
 800fb62:	4413      	add	r3, r2
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	691b      	ldr	r3, [r3, #16]
 800fb68:	79fa      	ldrb	r2, [r7, #7]
 800fb6a:	4906      	ldr	r1, [pc, #24]	@ (800fb84 <disk_ioctl+0x38>)
 800fb6c:	440a      	add	r2, r1
 800fb6e:	7a10      	ldrb	r0, [r2, #8]
 800fb70:	79b9      	ldrb	r1, [r7, #6]
 800fb72:	683a      	ldr	r2, [r7, #0]
 800fb74:	4798      	blx	r3
 800fb76:	4603      	mov	r3, r0
 800fb78:	73fb      	strb	r3, [r7, #15]
  return res;
 800fb7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3710      	adds	r7, #16
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	20002f80 	.word	0x20002f80

0800fb88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	3301      	adds	r3, #1
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fb98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb9c:	021b      	lsls	r3, r3, #8
 800fb9e:	b21a      	sxth	r2, r3
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	b21b      	sxth	r3, r3
 800fba6:	4313      	orrs	r3, r2
 800fba8:	b21b      	sxth	r3, r3
 800fbaa:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fbac:	89fb      	ldrh	r3, [r7, #14]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3714      	adds	r7, #20
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr

0800fbba <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fbba:	b480      	push	{r7}
 800fbbc:	b085      	sub	sp, #20
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	3303      	adds	r3, #3
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	021b      	lsls	r3, r3, #8
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	3202      	adds	r2, #2
 800fbd2:	7812      	ldrb	r2, [r2, #0]
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	021b      	lsls	r3, r3, #8
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	3201      	adds	r2, #1
 800fbe0:	7812      	ldrb	r2, [r2, #0]
 800fbe2:	4313      	orrs	r3, r2
 800fbe4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	021b      	lsls	r3, r3, #8
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	7812      	ldrb	r2, [r2, #0]
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	60fb      	str	r3, [r7, #12]
	return rv;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3714      	adds	r7, #20
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr

0800fc00 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fc00:	b480      	push	{r7}
 800fc02:	b083      	sub	sp, #12
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	460b      	mov	r3, r1
 800fc0a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	1c5a      	adds	r2, r3, #1
 800fc10:	607a      	str	r2, [r7, #4]
 800fc12:	887a      	ldrh	r2, [r7, #2]
 800fc14:	b2d2      	uxtb	r2, r2
 800fc16:	701a      	strb	r2, [r3, #0]
 800fc18:	887b      	ldrh	r3, [r7, #2]
 800fc1a:	0a1b      	lsrs	r3, r3, #8
 800fc1c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	1c5a      	adds	r2, r3, #1
 800fc22:	607a      	str	r2, [r7, #4]
 800fc24:	887a      	ldrh	r2, [r7, #2]
 800fc26:	b2d2      	uxtb	r2, r2
 800fc28:	701a      	strb	r2, [r3, #0]
}
 800fc2a:	bf00      	nop
 800fc2c:	370c      	adds	r7, #12
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr

0800fc36 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fc36:	b480      	push	{r7}
 800fc38:	b083      	sub	sp, #12
 800fc3a:	af00      	add	r7, sp, #0
 800fc3c:	6078      	str	r0, [r7, #4]
 800fc3e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	1c5a      	adds	r2, r3, #1
 800fc44:	607a      	str	r2, [r7, #4]
 800fc46:	683a      	ldr	r2, [r7, #0]
 800fc48:	b2d2      	uxtb	r2, r2
 800fc4a:	701a      	strb	r2, [r3, #0]
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	0a1b      	lsrs	r3, r3, #8
 800fc50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	1c5a      	adds	r2, r3, #1
 800fc56:	607a      	str	r2, [r7, #4]
 800fc58:	683a      	ldr	r2, [r7, #0]
 800fc5a:	b2d2      	uxtb	r2, r2
 800fc5c:	701a      	strb	r2, [r3, #0]
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	0a1b      	lsrs	r3, r3, #8
 800fc62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	1c5a      	adds	r2, r3, #1
 800fc68:	607a      	str	r2, [r7, #4]
 800fc6a:	683a      	ldr	r2, [r7, #0]
 800fc6c:	b2d2      	uxtb	r2, r2
 800fc6e:	701a      	strb	r2, [r3, #0]
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	0a1b      	lsrs	r3, r3, #8
 800fc74:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	1c5a      	adds	r2, r3, #1
 800fc7a:	607a      	str	r2, [r7, #4]
 800fc7c:	683a      	ldr	r2, [r7, #0]
 800fc7e:	b2d2      	uxtb	r2, r2
 800fc80:	701a      	strb	r2, [r3, #0]
}
 800fc82:	bf00      	nop
 800fc84:	370c      	adds	r7, #12
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr

0800fc8e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fc8e:	b480      	push	{r7}
 800fc90:	b087      	sub	sp, #28
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	60f8      	str	r0, [r7, #12]
 800fc96:	60b9      	str	r1, [r7, #8]
 800fc98:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d00d      	beq.n	800fcc4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fca8:	693a      	ldr	r2, [r7, #16]
 800fcaa:	1c53      	adds	r3, r2, #1
 800fcac:	613b      	str	r3, [r7, #16]
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	1c59      	adds	r1, r3, #1
 800fcb2:	6179      	str	r1, [r7, #20]
 800fcb4:	7812      	ldrb	r2, [r2, #0]
 800fcb6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	3b01      	subs	r3, #1
 800fcbc:	607b      	str	r3, [r7, #4]
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d1f1      	bne.n	800fca8 <mem_cpy+0x1a>
	}
}
 800fcc4:	bf00      	nop
 800fcc6:	371c      	adds	r7, #28
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcce:	4770      	bx	lr

0800fcd0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fcd0:	b480      	push	{r7}
 800fcd2:	b087      	sub	sp, #28
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	1c5a      	adds	r2, r3, #1
 800fce4:	617a      	str	r2, [r7, #20]
 800fce6:	68ba      	ldr	r2, [r7, #8]
 800fce8:	b2d2      	uxtb	r2, r2
 800fcea:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	3b01      	subs	r3, #1
 800fcf0:	607b      	str	r3, [r7, #4]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d1f3      	bne.n	800fce0 <mem_set+0x10>
}
 800fcf8:	bf00      	nop
 800fcfa:	bf00      	nop
 800fcfc:	371c      	adds	r7, #28
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr

0800fd06 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fd06:	b480      	push	{r7}
 800fd08:	b089      	sub	sp, #36	@ 0x24
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	60f8      	str	r0, [r7, #12]
 800fd0e:	60b9      	str	r1, [r7, #8]
 800fd10:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	61fb      	str	r3, [r7, #28]
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fd1e:	69fb      	ldr	r3, [r7, #28]
 800fd20:	1c5a      	adds	r2, r3, #1
 800fd22:	61fa      	str	r2, [r7, #28]
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	4619      	mov	r1, r3
 800fd28:	69bb      	ldr	r3, [r7, #24]
 800fd2a:	1c5a      	adds	r2, r3, #1
 800fd2c:	61ba      	str	r2, [r7, #24]
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	1acb      	subs	r3, r1, r3
 800fd32:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	3b01      	subs	r3, #1
 800fd38:	607b      	str	r3, [r7, #4]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <mem_cmp+0x40>
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d0eb      	beq.n	800fd1e <mem_cmp+0x18>

	return r;
 800fd46:	697b      	ldr	r3, [r7, #20]
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3724      	adds	r7, #36	@ 0x24
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd52:	4770      	bx	lr

0800fd54 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fd54:	b480      	push	{r7}
 800fd56:	b083      	sub	sp, #12
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fd5e:	e002      	b.n	800fd66 <chk_chr+0x12>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	3301      	adds	r3, #1
 800fd64:	607b      	str	r3, [r7, #4]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d005      	beq.n	800fd7a <chk_chr+0x26>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	781b      	ldrb	r3, [r3, #0]
 800fd72:	461a      	mov	r2, r3
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d1f2      	bne.n	800fd60 <chk_chr+0xc>
	return *str;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	781b      	ldrb	r3, [r3, #0]
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	370c      	adds	r7, #12
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr
	...

0800fd8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b085      	sub	sp, #20
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fd96:	2300      	movs	r3, #0
 800fd98:	60bb      	str	r3, [r7, #8]
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	60fb      	str	r3, [r7, #12]
 800fd9e:	e029      	b.n	800fdf4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fda0:	4a27      	ldr	r2, [pc, #156]	@ (800fe40 <chk_lock+0xb4>)
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	011b      	lsls	r3, r3, #4
 800fda6:	4413      	add	r3, r2
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d01d      	beq.n	800fdea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fdae:	4a24      	ldr	r2, [pc, #144]	@ (800fe40 <chk_lock+0xb4>)
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	011b      	lsls	r3, r3, #4
 800fdb4:	4413      	add	r3, r2
 800fdb6:	681a      	ldr	r2, [r3, #0]
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d116      	bne.n	800fdee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fdc0:	4a1f      	ldr	r2, [pc, #124]	@ (800fe40 <chk_lock+0xb4>)
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	011b      	lsls	r3, r3, #4
 800fdc6:	4413      	add	r3, r2
 800fdc8:	3304      	adds	r3, #4
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d10c      	bne.n	800fdee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fdd4:	4a1a      	ldr	r2, [pc, #104]	@ (800fe40 <chk_lock+0xb4>)
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	011b      	lsls	r3, r3, #4
 800fdda:	4413      	add	r3, r2
 800fddc:	3308      	adds	r3, #8
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d102      	bne.n	800fdee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fde8:	e007      	b.n	800fdfa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fdea:	2301      	movs	r3, #1
 800fdec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	60fb      	str	r3, [r7, #12]
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2b01      	cmp	r3, #1
 800fdf8:	d9d2      	bls.n	800fda0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2b02      	cmp	r3, #2
 800fdfe:	d109      	bne.n	800fe14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d102      	bne.n	800fe0c <chk_lock+0x80>
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	2b02      	cmp	r3, #2
 800fe0a:	d101      	bne.n	800fe10 <chk_lock+0x84>
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	e010      	b.n	800fe32 <chk_lock+0xa6>
 800fe10:	2312      	movs	r3, #18
 800fe12:	e00e      	b.n	800fe32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d108      	bne.n	800fe2c <chk_lock+0xa0>
 800fe1a:	4a09      	ldr	r2, [pc, #36]	@ (800fe40 <chk_lock+0xb4>)
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	011b      	lsls	r3, r3, #4
 800fe20:	4413      	add	r3, r2
 800fe22:	330c      	adds	r3, #12
 800fe24:	881b      	ldrh	r3, [r3, #0]
 800fe26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe2a:	d101      	bne.n	800fe30 <chk_lock+0xa4>
 800fe2c:	2310      	movs	r3, #16
 800fe2e:	e000      	b.n	800fe32 <chk_lock+0xa6>
 800fe30:	2300      	movs	r3, #0
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3714      	adds	r7, #20
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop
 800fe40:	20002d60 	.word	0x20002d60

0800fe44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	607b      	str	r3, [r7, #4]
 800fe4e:	e002      	b.n	800fe56 <enq_lock+0x12>
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	3301      	adds	r3, #1
 800fe54:	607b      	str	r3, [r7, #4]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d806      	bhi.n	800fe6a <enq_lock+0x26>
 800fe5c:	4a09      	ldr	r2, [pc, #36]	@ (800fe84 <enq_lock+0x40>)
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	011b      	lsls	r3, r3, #4
 800fe62:	4413      	add	r3, r2
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d1f2      	bne.n	800fe50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2b02      	cmp	r3, #2
 800fe6e:	bf14      	ite	ne
 800fe70:	2301      	movne	r3, #1
 800fe72:	2300      	moveq	r3, #0
 800fe74:	b2db      	uxtb	r3, r3
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	370c      	adds	r7, #12
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr
 800fe82:	bf00      	nop
 800fe84:	20002d60 	.word	0x20002d60

0800fe88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b085      	sub	sp, #20
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fe92:	2300      	movs	r3, #0
 800fe94:	60fb      	str	r3, [r7, #12]
 800fe96:	e01f      	b.n	800fed8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fe98:	4a41      	ldr	r2, [pc, #260]	@ (800ffa0 <inc_lock+0x118>)
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	011b      	lsls	r3, r3, #4
 800fe9e:	4413      	add	r3, r2
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d113      	bne.n	800fed2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800feaa:	4a3d      	ldr	r2, [pc, #244]	@ (800ffa0 <inc_lock+0x118>)
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	011b      	lsls	r3, r3, #4
 800feb0:	4413      	add	r3, r2
 800feb2:	3304      	adds	r3, #4
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800feba:	429a      	cmp	r2, r3
 800febc:	d109      	bne.n	800fed2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800febe:	4a38      	ldr	r2, [pc, #224]	@ (800ffa0 <inc_lock+0x118>)
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	011b      	lsls	r3, r3, #4
 800fec4:	4413      	add	r3, r2
 800fec6:	3308      	adds	r3, #8
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fece:	429a      	cmp	r2, r3
 800fed0:	d006      	beq.n	800fee0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	3301      	adds	r3, #1
 800fed6:	60fb      	str	r3, [r7, #12]
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d9dc      	bls.n	800fe98 <inc_lock+0x10>
 800fede:	e000      	b.n	800fee2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fee0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	d132      	bne.n	800ff4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fee8:	2300      	movs	r3, #0
 800feea:	60fb      	str	r3, [r7, #12]
 800feec:	e002      	b.n	800fef4 <inc_lock+0x6c>
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	3301      	adds	r3, #1
 800fef2:	60fb      	str	r3, [r7, #12]
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2b01      	cmp	r3, #1
 800fef8:	d806      	bhi.n	800ff08 <inc_lock+0x80>
 800fefa:	4a29      	ldr	r2, [pc, #164]	@ (800ffa0 <inc_lock+0x118>)
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	011b      	lsls	r3, r3, #4
 800ff00:	4413      	add	r3, r2
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d1f2      	bne.n	800feee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2b02      	cmp	r3, #2
 800ff0c:	d101      	bne.n	800ff12 <inc_lock+0x8a>
 800ff0e:	2300      	movs	r3, #0
 800ff10:	e040      	b.n	800ff94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	4922      	ldr	r1, [pc, #136]	@ (800ffa0 <inc_lock+0x118>)
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	011b      	lsls	r3, r3, #4
 800ff1c:	440b      	add	r3, r1
 800ff1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	689a      	ldr	r2, [r3, #8]
 800ff24:	491e      	ldr	r1, [pc, #120]	@ (800ffa0 <inc_lock+0x118>)
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	011b      	lsls	r3, r3, #4
 800ff2a:	440b      	add	r3, r1
 800ff2c:	3304      	adds	r3, #4
 800ff2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	695a      	ldr	r2, [r3, #20]
 800ff34:	491a      	ldr	r1, [pc, #104]	@ (800ffa0 <inc_lock+0x118>)
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	011b      	lsls	r3, r3, #4
 800ff3a:	440b      	add	r3, r1
 800ff3c:	3308      	adds	r3, #8
 800ff3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ff40:	4a17      	ldr	r2, [pc, #92]	@ (800ffa0 <inc_lock+0x118>)
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	011b      	lsls	r3, r3, #4
 800ff46:	4413      	add	r3, r2
 800ff48:	330c      	adds	r3, #12
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d009      	beq.n	800ff68 <inc_lock+0xe0>
 800ff54:	4a12      	ldr	r2, [pc, #72]	@ (800ffa0 <inc_lock+0x118>)
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	011b      	lsls	r3, r3, #4
 800ff5a:	4413      	add	r3, r2
 800ff5c:	330c      	adds	r3, #12
 800ff5e:	881b      	ldrh	r3, [r3, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d001      	beq.n	800ff68 <inc_lock+0xe0>
 800ff64:	2300      	movs	r3, #0
 800ff66:	e015      	b.n	800ff94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d108      	bne.n	800ff80 <inc_lock+0xf8>
 800ff6e:	4a0c      	ldr	r2, [pc, #48]	@ (800ffa0 <inc_lock+0x118>)
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	011b      	lsls	r3, r3, #4
 800ff74:	4413      	add	r3, r2
 800ff76:	330c      	adds	r3, #12
 800ff78:	881b      	ldrh	r3, [r3, #0]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	b29a      	uxth	r2, r3
 800ff7e:	e001      	b.n	800ff84 <inc_lock+0xfc>
 800ff80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ff84:	4906      	ldr	r1, [pc, #24]	@ (800ffa0 <inc_lock+0x118>)
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	011b      	lsls	r3, r3, #4
 800ff8a:	440b      	add	r3, r1
 800ff8c:	330c      	adds	r3, #12
 800ff8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	3301      	adds	r3, #1
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3714      	adds	r7, #20
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr
 800ffa0:	20002d60 	.word	0x20002d60

0800ffa4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	607b      	str	r3, [r7, #4]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d825      	bhi.n	8010004 <dec_lock+0x60>
		n = Files[i].ctr;
 800ffb8:	4a17      	ldr	r2, [pc, #92]	@ (8010018 <dec_lock+0x74>)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	011b      	lsls	r3, r3, #4
 800ffbe:	4413      	add	r3, r2
 800ffc0:	330c      	adds	r3, #12
 800ffc2:	881b      	ldrh	r3, [r3, #0]
 800ffc4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ffc6:	89fb      	ldrh	r3, [r7, #14]
 800ffc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ffcc:	d101      	bne.n	800ffd2 <dec_lock+0x2e>
 800ffce:	2300      	movs	r3, #0
 800ffd0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ffd2:	89fb      	ldrh	r3, [r7, #14]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d002      	beq.n	800ffde <dec_lock+0x3a>
 800ffd8:	89fb      	ldrh	r3, [r7, #14]
 800ffda:	3b01      	subs	r3, #1
 800ffdc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ffde:	4a0e      	ldr	r2, [pc, #56]	@ (8010018 <dec_lock+0x74>)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	011b      	lsls	r3, r3, #4
 800ffe4:	4413      	add	r3, r2
 800ffe6:	330c      	adds	r3, #12
 800ffe8:	89fa      	ldrh	r2, [r7, #14]
 800ffea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ffec:	89fb      	ldrh	r3, [r7, #14]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d105      	bne.n	800fffe <dec_lock+0x5a>
 800fff2:	4a09      	ldr	r2, [pc, #36]	@ (8010018 <dec_lock+0x74>)
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	011b      	lsls	r3, r3, #4
 800fff8:	4413      	add	r3, r2
 800fffa:	2200      	movs	r2, #0
 800fffc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fffe:	2300      	movs	r3, #0
 8010000:	737b      	strb	r3, [r7, #13]
 8010002:	e001      	b.n	8010008 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010004:	2302      	movs	r3, #2
 8010006:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010008:	7b7b      	ldrb	r3, [r7, #13]
}
 801000a:	4618      	mov	r0, r3
 801000c:	3714      	adds	r7, #20
 801000e:	46bd      	mov	sp, r7
 8010010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop
 8010018:	20002d60 	.word	0x20002d60

0801001c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801001c:	b480      	push	{r7}
 801001e:	b085      	sub	sp, #20
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010024:	2300      	movs	r3, #0
 8010026:	60fb      	str	r3, [r7, #12]
 8010028:	e010      	b.n	801004c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801002a:	4a0d      	ldr	r2, [pc, #52]	@ (8010060 <clear_lock+0x44>)
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	011b      	lsls	r3, r3, #4
 8010030:	4413      	add	r3, r2
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	429a      	cmp	r2, r3
 8010038:	d105      	bne.n	8010046 <clear_lock+0x2a>
 801003a:	4a09      	ldr	r2, [pc, #36]	@ (8010060 <clear_lock+0x44>)
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	011b      	lsls	r3, r3, #4
 8010040:	4413      	add	r3, r2
 8010042:	2200      	movs	r2, #0
 8010044:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	3301      	adds	r3, #1
 801004a:	60fb      	str	r3, [r7, #12]
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2b01      	cmp	r3, #1
 8010050:	d9eb      	bls.n	801002a <clear_lock+0xe>
	}
}
 8010052:	bf00      	nop
 8010054:	bf00      	nop
 8010056:	3714      	adds	r7, #20
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr
 8010060:	20002d60 	.word	0x20002d60

08010064 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b086      	sub	sp, #24
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801006c:	2300      	movs	r3, #0
 801006e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	78db      	ldrb	r3, [r3, #3]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d034      	beq.n	80100e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801007c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	7858      	ldrb	r0, [r3, #1]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8010088:	2301      	movs	r3, #1
 801008a:	697a      	ldr	r2, [r7, #20]
 801008c:	f7ff fd3e 	bl	800fb0c <disk_write>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d002      	beq.n	801009c <sync_window+0x38>
			res = FR_DISK_ERR;
 8010096:	2301      	movs	r3, #1
 8010098:	73fb      	strb	r3, [r7, #15]
 801009a:	e022      	b.n	80100e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100a6:	697a      	ldr	r2, [r7, #20]
 80100a8:	1ad2      	subs	r2, r2, r3
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6a1b      	ldr	r3, [r3, #32]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d217      	bcs.n	80100e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	789b      	ldrb	r3, [r3, #2]
 80100b6:	613b      	str	r3, [r7, #16]
 80100b8:	e010      	b.n	80100dc <sync_window+0x78>
					wsect += fs->fsize;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6a1b      	ldr	r3, [r3, #32]
 80100be:	697a      	ldr	r2, [r7, #20]
 80100c0:	4413      	add	r3, r2
 80100c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	7858      	ldrb	r0, [r3, #1]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80100ce:	2301      	movs	r3, #1
 80100d0:	697a      	ldr	r2, [r7, #20]
 80100d2:	f7ff fd1b 	bl	800fb0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	3b01      	subs	r3, #1
 80100da:	613b      	str	r3, [r7, #16]
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	2b01      	cmp	r3, #1
 80100e0:	d8eb      	bhi.n	80100ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80100e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3718      	adds	r7, #24
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80100f6:	2300      	movs	r3, #0
 80100f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100fe:	683a      	ldr	r2, [r7, #0]
 8010100:	429a      	cmp	r2, r3
 8010102:	d01b      	beq.n	801013c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f7ff ffad 	bl	8010064 <sync_window>
 801010a:	4603      	mov	r3, r0
 801010c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801010e:	7bfb      	ldrb	r3, [r7, #15]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d113      	bne.n	801013c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	7858      	ldrb	r0, [r3, #1]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801011e:	2301      	movs	r3, #1
 8010120:	683a      	ldr	r2, [r7, #0]
 8010122:	f7ff fcd3 	bl	800facc <disk_read>
 8010126:	4603      	mov	r3, r0
 8010128:	2b00      	cmp	r3, #0
 801012a:	d004      	beq.n	8010136 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801012c:	f04f 33ff 	mov.w	r3, #4294967295
 8010130:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010132:	2301      	movs	r3, #1
 8010134:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	683a      	ldr	r2, [r7, #0]
 801013a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801013c:	7bfb      	ldrb	r3, [r7, #15]
}
 801013e:	4618      	mov	r0, r3
 8010140:	3710      	adds	r7, #16
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
	...

08010148 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b084      	sub	sp, #16
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f7ff ff87 	bl	8010064 <sync_window>
 8010156:	4603      	mov	r3, r0
 8010158:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801015a:	7bfb      	ldrb	r3, [r7, #15]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d159      	bne.n	8010214 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	2b03      	cmp	r3, #3
 8010166:	d149      	bne.n	80101fc <sync_fs+0xb4>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	791b      	ldrb	r3, [r3, #4]
 801016c:	2b01      	cmp	r3, #1
 801016e:	d145      	bne.n	80101fc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	899b      	ldrh	r3, [r3, #12]
 801017a:	461a      	mov	r2, r3
 801017c:	2100      	movs	r1, #0
 801017e:	f7ff fda7 	bl	800fcd0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	3338      	adds	r3, #56	@ 0x38
 8010186:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801018a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801018e:	4618      	mov	r0, r3
 8010190:	f7ff fd36 	bl	800fc00 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	3338      	adds	r3, #56	@ 0x38
 8010198:	4921      	ldr	r1, [pc, #132]	@ (8010220 <sync_fs+0xd8>)
 801019a:	4618      	mov	r0, r3
 801019c:	f7ff fd4b 	bl	800fc36 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	3338      	adds	r3, #56	@ 0x38
 80101a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80101a8:	491e      	ldr	r1, [pc, #120]	@ (8010224 <sync_fs+0xdc>)
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7ff fd43 	bl	800fc36 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	3338      	adds	r3, #56	@ 0x38
 80101b4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	699b      	ldr	r3, [r3, #24]
 80101bc:	4619      	mov	r1, r3
 80101be:	4610      	mov	r0, r2
 80101c0:	f7ff fd39 	bl	800fc36 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	3338      	adds	r3, #56	@ 0x38
 80101c8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	695b      	ldr	r3, [r3, #20]
 80101d0:	4619      	mov	r1, r3
 80101d2:	4610      	mov	r0, r2
 80101d4:	f7ff fd2f 	bl	800fc36 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101dc:	1c5a      	adds	r2, r3, #1
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	7858      	ldrb	r0, [r3, #1]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80101f0:	2301      	movs	r3, #1
 80101f2:	f7ff fc8b 	bl	800fb0c <disk_write>
			fs->fsi_flag = 0;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2200      	movs	r2, #0
 80101fa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	785b      	ldrb	r3, [r3, #1]
 8010200:	2200      	movs	r2, #0
 8010202:	2100      	movs	r1, #0
 8010204:	4618      	mov	r0, r3
 8010206:	f7ff fca1 	bl	800fb4c <disk_ioctl>
 801020a:	4603      	mov	r3, r0
 801020c:	2b00      	cmp	r3, #0
 801020e:	d001      	beq.n	8010214 <sync_fs+0xcc>
 8010210:	2301      	movs	r3, #1
 8010212:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010214:	7bfb      	ldrb	r3, [r7, #15]
}
 8010216:	4618      	mov	r0, r3
 8010218:	3710      	adds	r7, #16
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	41615252 	.word	0x41615252
 8010224:	61417272 	.word	0x61417272

08010228 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	3b02      	subs	r3, #2
 8010236:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	69db      	ldr	r3, [r3, #28]
 801023c:	3b02      	subs	r3, #2
 801023e:	683a      	ldr	r2, [r7, #0]
 8010240:	429a      	cmp	r2, r3
 8010242:	d301      	bcc.n	8010248 <clust2sect+0x20>
 8010244:	2300      	movs	r3, #0
 8010246:	e008      	b.n	801025a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	895b      	ldrh	r3, [r3, #10]
 801024c:	461a      	mov	r2, r3
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	fb03 f202 	mul.w	r2, r3, r2
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010258:	4413      	add	r3, r2
}
 801025a:	4618      	mov	r0, r3
 801025c:	370c      	adds	r7, #12
 801025e:	46bd      	mov	sp, r7
 8010260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010264:	4770      	bx	lr

08010266 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010266:	b580      	push	{r7, lr}
 8010268:	b086      	sub	sp, #24
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	2b01      	cmp	r3, #1
 801027a:	d904      	bls.n	8010286 <get_fat+0x20>
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	69db      	ldr	r3, [r3, #28]
 8010280:	683a      	ldr	r2, [r7, #0]
 8010282:	429a      	cmp	r2, r3
 8010284:	d302      	bcc.n	801028c <get_fat+0x26>
		val = 1;	/* Internal error */
 8010286:	2301      	movs	r3, #1
 8010288:	617b      	str	r3, [r7, #20]
 801028a:	e0ba      	b.n	8010402 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801028c:	f04f 33ff 	mov.w	r3, #4294967295
 8010290:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	2b03      	cmp	r3, #3
 8010298:	f000 8082 	beq.w	80103a0 <get_fat+0x13a>
 801029c:	2b03      	cmp	r3, #3
 801029e:	f300 80a6 	bgt.w	80103ee <get_fat+0x188>
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	d002      	beq.n	80102ac <get_fat+0x46>
 80102a6:	2b02      	cmp	r3, #2
 80102a8:	d055      	beq.n	8010356 <get_fat+0xf0>
 80102aa:	e0a0      	b.n	80103ee <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	60fb      	str	r3, [r7, #12]
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	085b      	lsrs	r3, r3, #1
 80102b4:	68fa      	ldr	r2, [r7, #12]
 80102b6:	4413      	add	r3, r2
 80102b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80102ba:	693b      	ldr	r3, [r7, #16]
 80102bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	899b      	ldrh	r3, [r3, #12]
 80102c2:	4619      	mov	r1, r3
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80102ca:	4413      	add	r3, r2
 80102cc:	4619      	mov	r1, r3
 80102ce:	6938      	ldr	r0, [r7, #16]
 80102d0:	f7ff ff0c 	bl	80100ec <move_window>
 80102d4:	4603      	mov	r3, r0
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	f040 808c 	bne.w	80103f4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	1c5a      	adds	r2, r3, #1
 80102e0:	60fa      	str	r2, [r7, #12]
 80102e2:	693a      	ldr	r2, [r7, #16]
 80102e4:	8992      	ldrh	r2, [r2, #12]
 80102e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80102ea:	fb01 f202 	mul.w	r2, r1, r2
 80102ee:	1a9b      	subs	r3, r3, r2
 80102f0:	693a      	ldr	r2, [r7, #16]
 80102f2:	4413      	add	r3, r2
 80102f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80102f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	899b      	ldrh	r3, [r3, #12]
 8010302:	4619      	mov	r1, r3
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	fbb3 f3f1 	udiv	r3, r3, r1
 801030a:	4413      	add	r3, r2
 801030c:	4619      	mov	r1, r3
 801030e:	6938      	ldr	r0, [r7, #16]
 8010310:	f7ff feec 	bl	80100ec <move_window>
 8010314:	4603      	mov	r3, r0
 8010316:	2b00      	cmp	r3, #0
 8010318:	d16e      	bne.n	80103f8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	899b      	ldrh	r3, [r3, #12]
 801031e:	461a      	mov	r2, r3
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	fbb3 f1f2 	udiv	r1, r3, r2
 8010326:	fb01 f202 	mul.w	r2, r1, r2
 801032a:	1a9b      	subs	r3, r3, r2
 801032c:	693a      	ldr	r2, [r7, #16]
 801032e:	4413      	add	r3, r2
 8010330:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010334:	021b      	lsls	r3, r3, #8
 8010336:	68ba      	ldr	r2, [r7, #8]
 8010338:	4313      	orrs	r3, r2
 801033a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	f003 0301 	and.w	r3, r3, #1
 8010342:	2b00      	cmp	r3, #0
 8010344:	d002      	beq.n	801034c <get_fat+0xe6>
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	091b      	lsrs	r3, r3, #4
 801034a:	e002      	b.n	8010352 <get_fat+0xec>
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010352:	617b      	str	r3, [r7, #20]
			break;
 8010354:	e055      	b.n	8010402 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	899b      	ldrh	r3, [r3, #12]
 801035e:	085b      	lsrs	r3, r3, #1
 8010360:	b29b      	uxth	r3, r3
 8010362:	4619      	mov	r1, r3
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	fbb3 f3f1 	udiv	r3, r3, r1
 801036a:	4413      	add	r3, r2
 801036c:	4619      	mov	r1, r3
 801036e:	6938      	ldr	r0, [r7, #16]
 8010370:	f7ff febc 	bl	80100ec <move_window>
 8010374:	4603      	mov	r3, r0
 8010376:	2b00      	cmp	r3, #0
 8010378:	d140      	bne.n	80103fc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801037a:	693b      	ldr	r3, [r7, #16]
 801037c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	005b      	lsls	r3, r3, #1
 8010384:	693a      	ldr	r2, [r7, #16]
 8010386:	8992      	ldrh	r2, [r2, #12]
 8010388:	fbb3 f0f2 	udiv	r0, r3, r2
 801038c:	fb00 f202 	mul.w	r2, r0, r2
 8010390:	1a9b      	subs	r3, r3, r2
 8010392:	440b      	add	r3, r1
 8010394:	4618      	mov	r0, r3
 8010396:	f7ff fbf7 	bl	800fb88 <ld_word>
 801039a:	4603      	mov	r3, r0
 801039c:	617b      	str	r3, [r7, #20]
			break;
 801039e:	e030      	b.n	8010402 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	899b      	ldrh	r3, [r3, #12]
 80103a8:	089b      	lsrs	r3, r3, #2
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	4619      	mov	r1, r3
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80103b4:	4413      	add	r3, r2
 80103b6:	4619      	mov	r1, r3
 80103b8:	6938      	ldr	r0, [r7, #16]
 80103ba:	f7ff fe97 	bl	80100ec <move_window>
 80103be:	4603      	mov	r3, r0
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d11d      	bne.n	8010400 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	009b      	lsls	r3, r3, #2
 80103ce:	693a      	ldr	r2, [r7, #16]
 80103d0:	8992      	ldrh	r2, [r2, #12]
 80103d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80103d6:	fb00 f202 	mul.w	r2, r0, r2
 80103da:	1a9b      	subs	r3, r3, r2
 80103dc:	440b      	add	r3, r1
 80103de:	4618      	mov	r0, r3
 80103e0:	f7ff fbeb 	bl	800fbba <ld_dword>
 80103e4:	4603      	mov	r3, r0
 80103e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80103ea:	617b      	str	r3, [r7, #20]
			break;
 80103ec:	e009      	b.n	8010402 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80103ee:	2301      	movs	r3, #1
 80103f0:	617b      	str	r3, [r7, #20]
 80103f2:	e006      	b.n	8010402 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80103f4:	bf00      	nop
 80103f6:	e004      	b.n	8010402 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80103f8:	bf00      	nop
 80103fa:	e002      	b.n	8010402 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80103fc:	bf00      	nop
 80103fe:	e000      	b.n	8010402 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010400:	bf00      	nop
		}
	}

	return val;
 8010402:	697b      	ldr	r3, [r7, #20]
}
 8010404:	4618      	mov	r0, r3
 8010406:	3718      	adds	r7, #24
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801040c:	b590      	push	{r4, r7, lr}
 801040e:	b089      	sub	sp, #36	@ 0x24
 8010410:	af00      	add	r7, sp, #0
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010418:	2302      	movs	r3, #2
 801041a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	2b01      	cmp	r3, #1
 8010420:	f240 8109 	bls.w	8010636 <put_fat+0x22a>
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	69db      	ldr	r3, [r3, #28]
 8010428:	68ba      	ldr	r2, [r7, #8]
 801042a:	429a      	cmp	r2, r3
 801042c:	f080 8103 	bcs.w	8010636 <put_fat+0x22a>
		switch (fs->fs_type) {
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	2b03      	cmp	r3, #3
 8010436:	f000 80b6 	beq.w	80105a6 <put_fat+0x19a>
 801043a:	2b03      	cmp	r3, #3
 801043c:	f300 80fb 	bgt.w	8010636 <put_fat+0x22a>
 8010440:	2b01      	cmp	r3, #1
 8010442:	d003      	beq.n	801044c <put_fat+0x40>
 8010444:	2b02      	cmp	r3, #2
 8010446:	f000 8083 	beq.w	8010550 <put_fat+0x144>
 801044a:	e0f4      	b.n	8010636 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	61bb      	str	r3, [r7, #24]
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	085b      	lsrs	r3, r3, #1
 8010454:	69ba      	ldr	r2, [r7, #24]
 8010456:	4413      	add	r3, r2
 8010458:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	899b      	ldrh	r3, [r3, #12]
 8010462:	4619      	mov	r1, r3
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	fbb3 f3f1 	udiv	r3, r3, r1
 801046a:	4413      	add	r3, r2
 801046c:	4619      	mov	r1, r3
 801046e:	68f8      	ldr	r0, [r7, #12]
 8010470:	f7ff fe3c 	bl	80100ec <move_window>
 8010474:	4603      	mov	r3, r0
 8010476:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010478:	7ffb      	ldrb	r3, [r7, #31]
 801047a:	2b00      	cmp	r3, #0
 801047c:	f040 80d4 	bne.w	8010628 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	1c5a      	adds	r2, r3, #1
 801048a:	61ba      	str	r2, [r7, #24]
 801048c:	68fa      	ldr	r2, [r7, #12]
 801048e:	8992      	ldrh	r2, [r2, #12]
 8010490:	fbb3 f0f2 	udiv	r0, r3, r2
 8010494:	fb00 f202 	mul.w	r2, r0, r2
 8010498:	1a9b      	subs	r3, r3, r2
 801049a:	440b      	add	r3, r1
 801049c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	f003 0301 	and.w	r3, r3, #1
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d00d      	beq.n	80104c4 <put_fat+0xb8>
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	b25b      	sxtb	r3, r3
 80104ae:	f003 030f 	and.w	r3, r3, #15
 80104b2:	b25a      	sxtb	r2, r3
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	b25b      	sxtb	r3, r3
 80104b8:	011b      	lsls	r3, r3, #4
 80104ba:	b25b      	sxtb	r3, r3
 80104bc:	4313      	orrs	r3, r2
 80104be:	b25b      	sxtb	r3, r3
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	e001      	b.n	80104c8 <put_fat+0xbc>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	b2db      	uxtb	r3, r3
 80104c8:	697a      	ldr	r2, [r7, #20]
 80104ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2201      	movs	r2, #1
 80104d0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	899b      	ldrh	r3, [r3, #12]
 80104da:	4619      	mov	r1, r3
 80104dc:	69bb      	ldr	r3, [r7, #24]
 80104de:	fbb3 f3f1 	udiv	r3, r3, r1
 80104e2:	4413      	add	r3, r2
 80104e4:	4619      	mov	r1, r3
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f7ff fe00 	bl	80100ec <move_window>
 80104ec:	4603      	mov	r3, r0
 80104ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80104f0:	7ffb      	ldrb	r3, [r7, #31]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	f040 809a 	bne.w	801062c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	899b      	ldrh	r3, [r3, #12]
 8010502:	461a      	mov	r2, r3
 8010504:	69bb      	ldr	r3, [r7, #24]
 8010506:	fbb3 f0f2 	udiv	r0, r3, r2
 801050a:	fb00 f202 	mul.w	r2, r0, r2
 801050e:	1a9b      	subs	r3, r3, r2
 8010510:	440b      	add	r3, r1
 8010512:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	f003 0301 	and.w	r3, r3, #1
 801051a:	2b00      	cmp	r3, #0
 801051c:	d003      	beq.n	8010526 <put_fat+0x11a>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	091b      	lsrs	r3, r3, #4
 8010522:	b2db      	uxtb	r3, r3
 8010524:	e00e      	b.n	8010544 <put_fat+0x138>
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	b25b      	sxtb	r3, r3
 801052c:	f023 030f 	bic.w	r3, r3, #15
 8010530:	b25a      	sxtb	r2, r3
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	0a1b      	lsrs	r3, r3, #8
 8010536:	b25b      	sxtb	r3, r3
 8010538:	f003 030f 	and.w	r3, r3, #15
 801053c:	b25b      	sxtb	r3, r3
 801053e:	4313      	orrs	r3, r2
 8010540:	b25b      	sxtb	r3, r3
 8010542:	b2db      	uxtb	r3, r3
 8010544:	697a      	ldr	r2, [r7, #20]
 8010546:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2201      	movs	r2, #1
 801054c:	70da      	strb	r2, [r3, #3]
			break;
 801054e:	e072      	b.n	8010636 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	899b      	ldrh	r3, [r3, #12]
 8010558:	085b      	lsrs	r3, r3, #1
 801055a:	b29b      	uxth	r3, r3
 801055c:	4619      	mov	r1, r3
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	fbb3 f3f1 	udiv	r3, r3, r1
 8010564:	4413      	add	r3, r2
 8010566:	4619      	mov	r1, r3
 8010568:	68f8      	ldr	r0, [r7, #12]
 801056a:	f7ff fdbf 	bl	80100ec <move_window>
 801056e:	4603      	mov	r3, r0
 8010570:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010572:	7ffb      	ldrb	r3, [r7, #31]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d15b      	bne.n	8010630 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	005b      	lsls	r3, r3, #1
 8010582:	68fa      	ldr	r2, [r7, #12]
 8010584:	8992      	ldrh	r2, [r2, #12]
 8010586:	fbb3 f0f2 	udiv	r0, r3, r2
 801058a:	fb00 f202 	mul.w	r2, r0, r2
 801058e:	1a9b      	subs	r3, r3, r2
 8010590:	440b      	add	r3, r1
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	b292      	uxth	r2, r2
 8010596:	4611      	mov	r1, r2
 8010598:	4618      	mov	r0, r3
 801059a:	f7ff fb31 	bl	800fc00 <st_word>
			fs->wflag = 1;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2201      	movs	r2, #1
 80105a2:	70da      	strb	r2, [r3, #3]
			break;
 80105a4:	e047      	b.n	8010636 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	899b      	ldrh	r3, [r3, #12]
 80105ae:	089b      	lsrs	r3, r3, #2
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	4619      	mov	r1, r3
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80105ba:	4413      	add	r3, r2
 80105bc:	4619      	mov	r1, r3
 80105be:	68f8      	ldr	r0, [r7, #12]
 80105c0:	f7ff fd94 	bl	80100ec <move_window>
 80105c4:	4603      	mov	r3, r0
 80105c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80105c8:	7ffb      	ldrb	r3, [r7, #31]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d132      	bne.n	8010634 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	009b      	lsls	r3, r3, #2
 80105de:	68fa      	ldr	r2, [r7, #12]
 80105e0:	8992      	ldrh	r2, [r2, #12]
 80105e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80105e6:	fb00 f202 	mul.w	r2, r0, r2
 80105ea:	1a9b      	subs	r3, r3, r2
 80105ec:	440b      	add	r3, r1
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7ff fae3 	bl	800fbba <ld_dword>
 80105f4:	4603      	mov	r3, r0
 80105f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80105fa:	4323      	orrs	r3, r4
 80105fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	009b      	lsls	r3, r3, #2
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	8992      	ldrh	r2, [r2, #12]
 801060c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010610:	fb00 f202 	mul.w	r2, r0, r2
 8010614:	1a9b      	subs	r3, r3, r2
 8010616:	440b      	add	r3, r1
 8010618:	6879      	ldr	r1, [r7, #4]
 801061a:	4618      	mov	r0, r3
 801061c:	f7ff fb0b 	bl	800fc36 <st_dword>
			fs->wflag = 1;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	2201      	movs	r2, #1
 8010624:	70da      	strb	r2, [r3, #3]
			break;
 8010626:	e006      	b.n	8010636 <put_fat+0x22a>
			if (res != FR_OK) break;
 8010628:	bf00      	nop
 801062a:	e004      	b.n	8010636 <put_fat+0x22a>
			if (res != FR_OK) break;
 801062c:	bf00      	nop
 801062e:	e002      	b.n	8010636 <put_fat+0x22a>
			if (res != FR_OK) break;
 8010630:	bf00      	nop
 8010632:	e000      	b.n	8010636 <put_fat+0x22a>
			if (res != FR_OK) break;
 8010634:	bf00      	nop
		}
	}
	return res;
 8010636:	7ffb      	ldrb	r3, [r7, #31]
}
 8010638:	4618      	mov	r0, r3
 801063a:	3724      	adds	r7, #36	@ 0x24
 801063c:	46bd      	mov	sp, r7
 801063e:	bd90      	pop	{r4, r7, pc}

08010640 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b088      	sub	sp, #32
 8010644:	af00      	add	r7, sp, #0
 8010646:	60f8      	str	r0, [r7, #12]
 8010648:	60b9      	str	r1, [r7, #8]
 801064a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	2b01      	cmp	r3, #1
 801065a:	d904      	bls.n	8010666 <remove_chain+0x26>
 801065c:	69bb      	ldr	r3, [r7, #24]
 801065e:	69db      	ldr	r3, [r3, #28]
 8010660:	68ba      	ldr	r2, [r7, #8]
 8010662:	429a      	cmp	r2, r3
 8010664:	d301      	bcc.n	801066a <remove_chain+0x2a>
 8010666:	2302      	movs	r3, #2
 8010668:	e04b      	b.n	8010702 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d00c      	beq.n	801068a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010670:	f04f 32ff 	mov.w	r2, #4294967295
 8010674:	6879      	ldr	r1, [r7, #4]
 8010676:	69b8      	ldr	r0, [r7, #24]
 8010678:	f7ff fec8 	bl	801040c <put_fat>
 801067c:	4603      	mov	r3, r0
 801067e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010680:	7ffb      	ldrb	r3, [r7, #31]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d001      	beq.n	801068a <remove_chain+0x4a>
 8010686:	7ffb      	ldrb	r3, [r7, #31]
 8010688:	e03b      	b.n	8010702 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801068a:	68b9      	ldr	r1, [r7, #8]
 801068c:	68f8      	ldr	r0, [r7, #12]
 801068e:	f7ff fdea 	bl	8010266 <get_fat>
 8010692:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d031      	beq.n	80106fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	2b01      	cmp	r3, #1
 801069e:	d101      	bne.n	80106a4 <remove_chain+0x64>
 80106a0:	2302      	movs	r3, #2
 80106a2:	e02e      	b.n	8010702 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106aa:	d101      	bne.n	80106b0 <remove_chain+0x70>
 80106ac:	2301      	movs	r3, #1
 80106ae:	e028      	b.n	8010702 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80106b0:	2200      	movs	r2, #0
 80106b2:	68b9      	ldr	r1, [r7, #8]
 80106b4:	69b8      	ldr	r0, [r7, #24]
 80106b6:	f7ff fea9 	bl	801040c <put_fat>
 80106ba:	4603      	mov	r3, r0
 80106bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80106be:	7ffb      	ldrb	r3, [r7, #31]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d001      	beq.n	80106c8 <remove_chain+0x88>
 80106c4:	7ffb      	ldrb	r3, [r7, #31]
 80106c6:	e01c      	b.n	8010702 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	699a      	ldr	r2, [r3, #24]
 80106cc:	69bb      	ldr	r3, [r7, #24]
 80106ce:	69db      	ldr	r3, [r3, #28]
 80106d0:	3b02      	subs	r3, #2
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d20b      	bcs.n	80106ee <remove_chain+0xae>
			fs->free_clst++;
 80106d6:	69bb      	ldr	r3, [r7, #24]
 80106d8:	699b      	ldr	r3, [r3, #24]
 80106da:	1c5a      	adds	r2, r3, #1
 80106dc:	69bb      	ldr	r3, [r7, #24]
 80106de:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80106e0:	69bb      	ldr	r3, [r7, #24]
 80106e2:	791b      	ldrb	r3, [r3, #4]
 80106e4:	f043 0301 	orr.w	r3, r3, #1
 80106e8:	b2da      	uxtb	r2, r3
 80106ea:	69bb      	ldr	r3, [r7, #24]
 80106ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80106f2:	69bb      	ldr	r3, [r7, #24]
 80106f4:	69db      	ldr	r3, [r3, #28]
 80106f6:	68ba      	ldr	r2, [r7, #8]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d3c6      	bcc.n	801068a <remove_chain+0x4a>
 80106fc:	e000      	b.n	8010700 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80106fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010700:	2300      	movs	r3, #0
}
 8010702:	4618      	mov	r0, r3
 8010704:	3720      	adds	r7, #32
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}

0801070a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801070a:	b580      	push	{r7, lr}
 801070c:	b088      	sub	sp, #32
 801070e:	af00      	add	r7, sp, #0
 8010710:	6078      	str	r0, [r7, #4]
 8010712:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d10d      	bne.n	801073c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	695b      	ldr	r3, [r3, #20]
 8010724:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010726:	69bb      	ldr	r3, [r7, #24]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d004      	beq.n	8010736 <create_chain+0x2c>
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	69db      	ldr	r3, [r3, #28]
 8010730:	69ba      	ldr	r2, [r7, #24]
 8010732:	429a      	cmp	r2, r3
 8010734:	d31b      	bcc.n	801076e <create_chain+0x64>
 8010736:	2301      	movs	r3, #1
 8010738:	61bb      	str	r3, [r7, #24]
 801073a:	e018      	b.n	801076e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801073c:	6839      	ldr	r1, [r7, #0]
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f7ff fd91 	bl	8010266 <get_fat>
 8010744:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	2b01      	cmp	r3, #1
 801074a:	d801      	bhi.n	8010750 <create_chain+0x46>
 801074c:	2301      	movs	r3, #1
 801074e:	e070      	b.n	8010832 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010756:	d101      	bne.n	801075c <create_chain+0x52>
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	e06a      	b.n	8010832 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	69db      	ldr	r3, [r3, #28]
 8010760:	68fa      	ldr	r2, [r7, #12]
 8010762:	429a      	cmp	r2, r3
 8010764:	d201      	bcs.n	801076a <create_chain+0x60>
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	e063      	b.n	8010832 <create_chain+0x128>
		scl = clst;
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010772:	69fb      	ldr	r3, [r7, #28]
 8010774:	3301      	adds	r3, #1
 8010776:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	69db      	ldr	r3, [r3, #28]
 801077c:	69fa      	ldr	r2, [r7, #28]
 801077e:	429a      	cmp	r2, r3
 8010780:	d307      	bcc.n	8010792 <create_chain+0x88>
				ncl = 2;
 8010782:	2302      	movs	r3, #2
 8010784:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010786:	69fa      	ldr	r2, [r7, #28]
 8010788:	69bb      	ldr	r3, [r7, #24]
 801078a:	429a      	cmp	r2, r3
 801078c:	d901      	bls.n	8010792 <create_chain+0x88>
 801078e:	2300      	movs	r3, #0
 8010790:	e04f      	b.n	8010832 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010792:	69f9      	ldr	r1, [r7, #28]
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f7ff fd66 	bl	8010266 <get_fat>
 801079a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d00e      	beq.n	80107c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d003      	beq.n	80107b0 <create_chain+0xa6>
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ae:	d101      	bne.n	80107b4 <create_chain+0xaa>
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	e03e      	b.n	8010832 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80107b4:	69fa      	ldr	r2, [r7, #28]
 80107b6:	69bb      	ldr	r3, [r7, #24]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d1da      	bne.n	8010772 <create_chain+0x68>
 80107bc:	2300      	movs	r3, #0
 80107be:	e038      	b.n	8010832 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80107c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80107c2:	f04f 32ff 	mov.w	r2, #4294967295
 80107c6:	69f9      	ldr	r1, [r7, #28]
 80107c8:	6938      	ldr	r0, [r7, #16]
 80107ca:	f7ff fe1f 	bl	801040c <put_fat>
 80107ce:	4603      	mov	r3, r0
 80107d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80107d2:	7dfb      	ldrb	r3, [r7, #23]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d109      	bne.n	80107ec <create_chain+0xe2>
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d006      	beq.n	80107ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80107de:	69fa      	ldr	r2, [r7, #28]
 80107e0:	6839      	ldr	r1, [r7, #0]
 80107e2:	6938      	ldr	r0, [r7, #16]
 80107e4:	f7ff fe12 	bl	801040c <put_fat>
 80107e8:	4603      	mov	r3, r0
 80107ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80107ec:	7dfb      	ldrb	r3, [r7, #23]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d116      	bne.n	8010820 <create_chain+0x116>
		fs->last_clst = ncl;
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	69fa      	ldr	r2, [r7, #28]
 80107f6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80107f8:	693b      	ldr	r3, [r7, #16]
 80107fa:	699a      	ldr	r2, [r3, #24]
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	69db      	ldr	r3, [r3, #28]
 8010800:	3b02      	subs	r3, #2
 8010802:	429a      	cmp	r2, r3
 8010804:	d804      	bhi.n	8010810 <create_chain+0x106>
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	699b      	ldr	r3, [r3, #24]
 801080a:	1e5a      	subs	r2, r3, #1
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	791b      	ldrb	r3, [r3, #4]
 8010814:	f043 0301 	orr.w	r3, r3, #1
 8010818:	b2da      	uxtb	r2, r3
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	711a      	strb	r2, [r3, #4]
 801081e:	e007      	b.n	8010830 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010820:	7dfb      	ldrb	r3, [r7, #23]
 8010822:	2b01      	cmp	r3, #1
 8010824:	d102      	bne.n	801082c <create_chain+0x122>
 8010826:	f04f 33ff 	mov.w	r3, #4294967295
 801082a:	e000      	b.n	801082e <create_chain+0x124>
 801082c:	2301      	movs	r3, #1
 801082e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010830:	69fb      	ldr	r3, [r7, #28]
}
 8010832:	4618      	mov	r0, r3
 8010834:	3720      	adds	r7, #32
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801083a:	b480      	push	{r7}
 801083c:	b087      	sub	sp, #28
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
 8010842:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801084e:	3304      	adds	r3, #4
 8010850:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	899b      	ldrh	r3, [r3, #12]
 8010856:	461a      	mov	r2, r3
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	fbb3 f3f2 	udiv	r3, r3, r2
 801085e:	68fa      	ldr	r2, [r7, #12]
 8010860:	8952      	ldrh	r2, [r2, #10]
 8010862:	fbb3 f3f2 	udiv	r3, r3, r2
 8010866:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	1d1a      	adds	r2, r3, #4
 801086c:	613a      	str	r2, [r7, #16]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d101      	bne.n	801087c <clmt_clust+0x42>
 8010878:	2300      	movs	r3, #0
 801087a:	e010      	b.n	801089e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801087c:	697a      	ldr	r2, [r7, #20]
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	429a      	cmp	r2, r3
 8010882:	d307      	bcc.n	8010894 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8010884:	697a      	ldr	r2, [r7, #20]
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	1ad3      	subs	r3, r2, r3
 801088a:	617b      	str	r3, [r7, #20]
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	3304      	adds	r3, #4
 8010890:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010892:	e7e9      	b.n	8010868 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8010894:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	4413      	add	r3, r2
}
 801089e:	4618      	mov	r0, r3
 80108a0:	371c      	adds	r7, #28
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr

080108aa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80108aa:	b580      	push	{r7, lr}
 80108ac:	b086      	sub	sp, #24
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
 80108b2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80108c0:	d204      	bcs.n	80108cc <dir_sdi+0x22>
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	f003 031f 	and.w	r3, r3, #31
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d001      	beq.n	80108d0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80108cc:	2302      	movs	r3, #2
 80108ce:	e071      	b.n	80109b4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	683a      	ldr	r2, [r7, #0]
 80108d4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	689b      	ldr	r3, [r3, #8]
 80108da:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d106      	bne.n	80108f0 <dir_sdi+0x46>
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	781b      	ldrb	r3, [r3, #0]
 80108e6:	2b02      	cmp	r3, #2
 80108e8:	d902      	bls.n	80108f0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108ee:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d10c      	bne.n	8010910 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	095b      	lsrs	r3, r3, #5
 80108fa:	693a      	ldr	r2, [r7, #16]
 80108fc:	8912      	ldrh	r2, [r2, #8]
 80108fe:	4293      	cmp	r3, r2
 8010900:	d301      	bcc.n	8010906 <dir_sdi+0x5c>
 8010902:	2302      	movs	r3, #2
 8010904:	e056      	b.n	80109b4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	61da      	str	r2, [r3, #28]
 801090e:	e02d      	b.n	801096c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	895b      	ldrh	r3, [r3, #10]
 8010914:	461a      	mov	r2, r3
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	899b      	ldrh	r3, [r3, #12]
 801091a:	fb02 f303 	mul.w	r3, r2, r3
 801091e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010920:	e019      	b.n	8010956 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6979      	ldr	r1, [r7, #20]
 8010926:	4618      	mov	r0, r3
 8010928:	f7ff fc9d 	bl	8010266 <get_fat>
 801092c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010934:	d101      	bne.n	801093a <dir_sdi+0x90>
 8010936:	2301      	movs	r3, #1
 8010938:	e03c      	b.n	80109b4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	2b01      	cmp	r3, #1
 801093e:	d904      	bls.n	801094a <dir_sdi+0xa0>
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	69db      	ldr	r3, [r3, #28]
 8010944:	697a      	ldr	r2, [r7, #20]
 8010946:	429a      	cmp	r2, r3
 8010948:	d301      	bcc.n	801094e <dir_sdi+0xa4>
 801094a:	2302      	movs	r3, #2
 801094c:	e032      	b.n	80109b4 <dir_sdi+0x10a>
			ofs -= csz;
 801094e:	683a      	ldr	r2, [r7, #0]
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	1ad3      	subs	r3, r2, r3
 8010954:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010956:	683a      	ldr	r2, [r7, #0]
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	429a      	cmp	r2, r3
 801095c:	d2e1      	bcs.n	8010922 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801095e:	6979      	ldr	r1, [r7, #20]
 8010960:	6938      	ldr	r0, [r7, #16]
 8010962:	f7ff fc61 	bl	8010228 <clust2sect>
 8010966:	4602      	mov	r2, r0
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	697a      	ldr	r2, [r7, #20]
 8010970:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	69db      	ldr	r3, [r3, #28]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d101      	bne.n	801097e <dir_sdi+0xd4>
 801097a:	2302      	movs	r3, #2
 801097c:	e01a      	b.n	80109b4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	69da      	ldr	r2, [r3, #28]
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	899b      	ldrh	r3, [r3, #12]
 8010986:	4619      	mov	r1, r3
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	fbb3 f3f1 	udiv	r3, r3, r1
 801098e:	441a      	add	r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	899b      	ldrh	r3, [r3, #12]
 801099e:	461a      	mov	r2, r3
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80109a6:	fb00 f202 	mul.w	r2, r0, r2
 80109aa:	1a9b      	subs	r3, r3, r2
 80109ac:	18ca      	adds	r2, r1, r3
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80109b2:	2300      	movs	r3, #0
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3718      	adds	r7, #24
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}

080109bc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b086      	sub	sp, #24
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	695b      	ldr	r3, [r3, #20]
 80109d0:	3320      	adds	r3, #32
 80109d2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	69db      	ldr	r3, [r3, #28]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d003      	beq.n	80109e4 <dir_next+0x28>
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80109e2:	d301      	bcc.n	80109e8 <dir_next+0x2c>
 80109e4:	2304      	movs	r3, #4
 80109e6:	e0bb      	b.n	8010b60 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	899b      	ldrh	r3, [r3, #12]
 80109ec:	461a      	mov	r2, r3
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80109f4:	fb01 f202 	mul.w	r2, r1, r2
 80109f8:	1a9b      	subs	r3, r3, r2
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	f040 809d 	bne.w	8010b3a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	69db      	ldr	r3, [r3, #28]
 8010a04:	1c5a      	adds	r2, r3, #1
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	699b      	ldr	r3, [r3, #24]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d10b      	bne.n	8010a2a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	095b      	lsrs	r3, r3, #5
 8010a16:	68fa      	ldr	r2, [r7, #12]
 8010a18:	8912      	ldrh	r2, [r2, #8]
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	f0c0 808d 	bcc.w	8010b3a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	61da      	str	r2, [r3, #28]
 8010a26:	2304      	movs	r3, #4
 8010a28:	e09a      	b.n	8010b60 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	899b      	ldrh	r3, [r3, #12]
 8010a2e:	461a      	mov	r2, r3
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a36:	68fa      	ldr	r2, [r7, #12]
 8010a38:	8952      	ldrh	r2, [r2, #10]
 8010a3a:	3a01      	subs	r2, #1
 8010a3c:	4013      	ands	r3, r2
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d17b      	bne.n	8010b3a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010a42:	687a      	ldr	r2, [r7, #4]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	699b      	ldr	r3, [r3, #24]
 8010a48:	4619      	mov	r1, r3
 8010a4a:	4610      	mov	r0, r2
 8010a4c:	f7ff fc0b 	bl	8010266 <get_fat>
 8010a50:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	2b01      	cmp	r3, #1
 8010a56:	d801      	bhi.n	8010a5c <dir_next+0xa0>
 8010a58:	2302      	movs	r3, #2
 8010a5a:	e081      	b.n	8010b60 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a62:	d101      	bne.n	8010a68 <dir_next+0xac>
 8010a64:	2301      	movs	r3, #1
 8010a66:	e07b      	b.n	8010b60 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	69db      	ldr	r3, [r3, #28]
 8010a6c:	697a      	ldr	r2, [r7, #20]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d359      	bcc.n	8010b26 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d104      	bne.n	8010a82 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	61da      	str	r2, [r3, #28]
 8010a7e:	2304      	movs	r3, #4
 8010a80:	e06e      	b.n	8010b60 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010a82:	687a      	ldr	r2, [r7, #4]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	699b      	ldr	r3, [r3, #24]
 8010a88:	4619      	mov	r1, r3
 8010a8a:	4610      	mov	r0, r2
 8010a8c:	f7ff fe3d 	bl	801070a <create_chain>
 8010a90:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d101      	bne.n	8010a9c <dir_next+0xe0>
 8010a98:	2307      	movs	r3, #7
 8010a9a:	e061      	b.n	8010b60 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d101      	bne.n	8010aa6 <dir_next+0xea>
 8010aa2:	2302      	movs	r3, #2
 8010aa4:	e05c      	b.n	8010b60 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aac:	d101      	bne.n	8010ab2 <dir_next+0xf6>
 8010aae:	2301      	movs	r3, #1
 8010ab0:	e056      	b.n	8010b60 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	f7ff fad6 	bl	8010064 <sync_window>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d001      	beq.n	8010ac2 <dir_next+0x106>
 8010abe:	2301      	movs	r3, #1
 8010ac0:	e04e      	b.n	8010b60 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	899b      	ldrh	r3, [r3, #12]
 8010acc:	461a      	mov	r2, r3
 8010ace:	2100      	movs	r1, #0
 8010ad0:	f7ff f8fe 	bl	800fcd0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	613b      	str	r3, [r7, #16]
 8010ad8:	6979      	ldr	r1, [r7, #20]
 8010ada:	68f8      	ldr	r0, [r7, #12]
 8010adc:	f7ff fba4 	bl	8010228 <clust2sect>
 8010ae0:	4602      	mov	r2, r0
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	635a      	str	r2, [r3, #52]	@ 0x34
 8010ae6:	e012      	b.n	8010b0e <dir_next+0x152>
						fs->wflag = 1;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	2201      	movs	r2, #1
 8010aec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010aee:	68f8      	ldr	r0, [r7, #12]
 8010af0:	f7ff fab8 	bl	8010064 <sync_window>
 8010af4:	4603      	mov	r3, r0
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d001      	beq.n	8010afe <dir_next+0x142>
 8010afa:	2301      	movs	r3, #1
 8010afc:	e030      	b.n	8010b60 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	3301      	adds	r3, #1
 8010b02:	613b      	str	r3, [r7, #16]
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b08:	1c5a      	adds	r2, r3, #1
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	895b      	ldrh	r3, [r3, #10]
 8010b12:	461a      	mov	r2, r3
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	4293      	cmp	r3, r2
 8010b18:	d3e6      	bcc.n	8010ae8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	1ad2      	subs	r2, r2, r3
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	697a      	ldr	r2, [r7, #20]
 8010b2a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010b2c:	6979      	ldr	r1, [r7, #20]
 8010b2e:	68f8      	ldr	r0, [r7, #12]
 8010b30:	f7ff fb7a 	bl	8010228 <clust2sect>
 8010b34:	4602      	mov	r2, r0
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	68ba      	ldr	r2, [r7, #8]
 8010b3e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	899b      	ldrh	r3, [r3, #12]
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b52:	fb00 f202 	mul.w	r2, r0, r2
 8010b56:	1a9b      	subs	r3, r3, r2
 8010b58:	18ca      	adds	r2, r1, r3
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010b5e:	2300      	movs	r3, #0
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3718      	adds	r7, #24
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}

08010b68 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b086      	sub	sp, #24
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010b78:	2100      	movs	r1, #0
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f7ff fe95 	bl	80108aa <dir_sdi>
 8010b80:	4603      	mov	r3, r0
 8010b82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010b84:	7dfb      	ldrb	r3, [r7, #23]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d12b      	bne.n	8010be2 <dir_alloc+0x7a>
		n = 0;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	69db      	ldr	r3, [r3, #28]
 8010b92:	4619      	mov	r1, r3
 8010b94:	68f8      	ldr	r0, [r7, #12]
 8010b96:	f7ff faa9 	bl	80100ec <move_window>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010b9e:	7dfb      	ldrb	r3, [r7, #23]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d11d      	bne.n	8010be0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6a1b      	ldr	r3, [r3, #32]
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	2be5      	cmp	r3, #229	@ 0xe5
 8010bac:	d004      	beq.n	8010bb8 <dir_alloc+0x50>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6a1b      	ldr	r3, [r3, #32]
 8010bb2:	781b      	ldrb	r3, [r3, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d107      	bne.n	8010bc8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	3301      	adds	r3, #1
 8010bbc:	613b      	str	r3, [r7, #16]
 8010bbe:	693a      	ldr	r2, [r7, #16]
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d102      	bne.n	8010bcc <dir_alloc+0x64>
 8010bc6:	e00c      	b.n	8010be2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010bc8:	2300      	movs	r3, #0
 8010bca:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010bcc:	2101      	movs	r1, #1
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f7ff fef4 	bl	80109bc <dir_next>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010bd8:	7dfb      	ldrb	r3, [r7, #23]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d0d7      	beq.n	8010b8e <dir_alloc+0x26>
 8010bde:	e000      	b.n	8010be2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010be0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010be2:	7dfb      	ldrb	r3, [r7, #23]
 8010be4:	2b04      	cmp	r3, #4
 8010be6:	d101      	bne.n	8010bec <dir_alloc+0x84>
 8010be8:	2307      	movs	r3, #7
 8010bea:	75fb      	strb	r3, [r7, #23]
	return res;
 8010bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3718      	adds	r7, #24
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}

08010bf6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010bf6:	b580      	push	{r7, lr}
 8010bf8:	b084      	sub	sp, #16
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	6078      	str	r0, [r7, #4]
 8010bfe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	331a      	adds	r3, #26
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7fe ffbf 	bl	800fb88 <ld_word>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	2b03      	cmp	r3, #3
 8010c14:	d109      	bne.n	8010c2a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	3314      	adds	r3, #20
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7fe ffb4 	bl	800fb88 <ld_word>
 8010c20:	4603      	mov	r3, r0
 8010c22:	041b      	lsls	r3, r3, #16
 8010c24:	68fa      	ldr	r2, [r7, #12]
 8010c26:	4313      	orrs	r3, r2
 8010c28:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3710      	adds	r7, #16
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	331a      	adds	r3, #26
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	b292      	uxth	r2, r2
 8010c48:	4611      	mov	r1, r2
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fe ffd8 	bl	800fc00 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	781b      	ldrb	r3, [r3, #0]
 8010c54:	2b03      	cmp	r3, #3
 8010c56:	d109      	bne.n	8010c6c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	f103 0214 	add.w	r2, r3, #20
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	0c1b      	lsrs	r3, r3, #16
 8010c62:	b29b      	uxth	r3, r3
 8010c64:	4619      	mov	r1, r3
 8010c66:	4610      	mov	r0, r2
 8010c68:	f7fe ffca 	bl	800fc00 <st_word>
	}
}
 8010c6c:	bf00      	nop
 8010c6e:	3710      	adds	r7, #16
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8010c74:	b590      	push	{r4, r7, lr}
 8010c76:	b087      	sub	sp, #28
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	331a      	adds	r3, #26
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7fe ff80 	bl	800fb88 <ld_word>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d001      	beq.n	8010c92 <cmp_lfn+0x1e>
 8010c8e:	2300      	movs	r3, #0
 8010c90:	e059      	b.n	8010d46 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010c9a:	1e5a      	subs	r2, r3, #1
 8010c9c:	4613      	mov	r3, r2
 8010c9e:	005b      	lsls	r3, r3, #1
 8010ca0:	4413      	add	r3, r2
 8010ca2:	009b      	lsls	r3, r3, #2
 8010ca4:	4413      	add	r3, r2
 8010ca6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010ca8:	2301      	movs	r3, #1
 8010caa:	81fb      	strh	r3, [r7, #14]
 8010cac:	2300      	movs	r3, #0
 8010cae:	613b      	str	r3, [r7, #16]
 8010cb0:	e033      	b.n	8010d1a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8010cb2:	4a27      	ldr	r2, [pc, #156]	@ (8010d50 <cmp_lfn+0xdc>)
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	461a      	mov	r2, r3
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	4413      	add	r3, r2
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7fe ff61 	bl	800fb88 <ld_word>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8010cca:	89fb      	ldrh	r3, [r7, #14]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d01a      	beq.n	8010d06 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	2bfe      	cmp	r3, #254	@ 0xfe
 8010cd4:	d812      	bhi.n	8010cfc <cmp_lfn+0x88>
 8010cd6:	89bb      	ldrh	r3, [r7, #12]
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f002 f831 	bl	8012d40 <ff_wtoupper>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	461c      	mov	r4, r3
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	1c5a      	adds	r2, r3, #1
 8010ce6:	617a      	str	r2, [r7, #20]
 8010ce8:	005b      	lsls	r3, r3, #1
 8010cea:	687a      	ldr	r2, [r7, #4]
 8010cec:	4413      	add	r3, r2
 8010cee:	881b      	ldrh	r3, [r3, #0]
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f002 f825 	bl	8012d40 <ff_wtoupper>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	429c      	cmp	r4, r3
 8010cfa:	d001      	beq.n	8010d00 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	e022      	b.n	8010d46 <cmp_lfn+0xd2>
			}
			wc = uc;
 8010d00:	89bb      	ldrh	r3, [r7, #12]
 8010d02:	81fb      	strh	r3, [r7, #14]
 8010d04:	e006      	b.n	8010d14 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010d06:	89bb      	ldrh	r3, [r7, #12]
 8010d08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d001      	beq.n	8010d14 <cmp_lfn+0xa0>
 8010d10:	2300      	movs	r3, #0
 8010d12:	e018      	b.n	8010d46 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	3301      	adds	r3, #1
 8010d18:	613b      	str	r3, [r7, #16]
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	2b0c      	cmp	r3, #12
 8010d1e:	d9c8      	bls.n	8010cb2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d00b      	beq.n	8010d44 <cmp_lfn+0xd0>
 8010d2c:	89fb      	ldrh	r3, [r7, #14]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d008      	beq.n	8010d44 <cmp_lfn+0xd0>
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	005b      	lsls	r3, r3, #1
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	4413      	add	r3, r2
 8010d3a:	881b      	ldrh	r3, [r3, #0]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d001      	beq.n	8010d44 <cmp_lfn+0xd0>
 8010d40:	2300      	movs	r3, #0
 8010d42:	e000      	b.n	8010d46 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8010d44:	2301      	movs	r3, #1
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	371c      	adds	r7, #28
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd90      	pop	{r4, r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	0801a024 	.word	0x0801a024

08010d54 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b088      	sub	sp, #32
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	4611      	mov	r1, r2
 8010d60:	461a      	mov	r2, r3
 8010d62:	460b      	mov	r3, r1
 8010d64:	71fb      	strb	r3, [r7, #7]
 8010d66:	4613      	mov	r3, r2
 8010d68:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	330d      	adds	r3, #13
 8010d6e:	79ba      	ldrb	r2, [r7, #6]
 8010d70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	330b      	adds	r3, #11
 8010d76:	220f      	movs	r2, #15
 8010d78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	330c      	adds	r3, #12
 8010d7e:	2200      	movs	r2, #0
 8010d80:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	331a      	adds	r3, #26
 8010d86:	2100      	movs	r1, #0
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fe ff39 	bl	800fc00 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010d8e:	79fb      	ldrb	r3, [r7, #7]
 8010d90:	1e5a      	subs	r2, r3, #1
 8010d92:	4613      	mov	r3, r2
 8010d94:	005b      	lsls	r3, r3, #1
 8010d96:	4413      	add	r3, r2
 8010d98:	009b      	lsls	r3, r3, #2
 8010d9a:	4413      	add	r3, r2
 8010d9c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	82fb      	strh	r3, [r7, #22]
 8010da2:	2300      	movs	r3, #0
 8010da4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010da6:	8afb      	ldrh	r3, [r7, #22]
 8010da8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d007      	beq.n	8010dc0 <put_lfn+0x6c>
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	1c5a      	adds	r2, r3, #1
 8010db4:	61fa      	str	r2, [r7, #28]
 8010db6:	005b      	lsls	r3, r3, #1
 8010db8:	68fa      	ldr	r2, [r7, #12]
 8010dba:	4413      	add	r3, r2
 8010dbc:	881b      	ldrh	r3, [r3, #0]
 8010dbe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8010dc0:	4a17      	ldr	r2, [pc, #92]	@ (8010e20 <put_lfn+0xcc>)
 8010dc2:	69bb      	ldr	r3, [r7, #24]
 8010dc4:	4413      	add	r3, r2
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	461a      	mov	r2, r3
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	4413      	add	r3, r2
 8010dce:	8afa      	ldrh	r2, [r7, #22]
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7fe ff14 	bl	800fc00 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010dd8:	8afb      	ldrh	r3, [r7, #22]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d102      	bne.n	8010de4 <put_lfn+0x90>
 8010dde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010de2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8010de4:	69bb      	ldr	r3, [r7, #24]
 8010de6:	3301      	adds	r3, #1
 8010de8:	61bb      	str	r3, [r7, #24]
 8010dea:	69bb      	ldr	r3, [r7, #24]
 8010dec:	2b0c      	cmp	r3, #12
 8010dee:	d9da      	bls.n	8010da6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010df0:	8afb      	ldrh	r3, [r7, #22]
 8010df2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d006      	beq.n	8010e08 <put_lfn+0xb4>
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	005b      	lsls	r3, r3, #1
 8010dfe:	68fa      	ldr	r2, [r7, #12]
 8010e00:	4413      	add	r3, r2
 8010e02:	881b      	ldrh	r3, [r3, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d103      	bne.n	8010e10 <put_lfn+0xbc>
 8010e08:	79fb      	ldrb	r3, [r7, #7]
 8010e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e0e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	79fa      	ldrb	r2, [r7, #7]
 8010e14:	701a      	strb	r2, [r3, #0]
}
 8010e16:	bf00      	nop
 8010e18:	3720      	adds	r7, #32
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	0801a024 	.word	0x0801a024

08010e24 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b08c      	sub	sp, #48	@ 0x30
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	60f8      	str	r0, [r7, #12]
 8010e2c:	60b9      	str	r1, [r7, #8]
 8010e2e:	607a      	str	r2, [r7, #4]
 8010e30:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8010e32:	220b      	movs	r2, #11
 8010e34:	68b9      	ldr	r1, [r7, #8]
 8010e36:	68f8      	ldr	r0, [r7, #12]
 8010e38:	f7fe ff29 	bl	800fc8e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	2b05      	cmp	r3, #5
 8010e40:	d92b      	bls.n	8010e9a <gen_numname+0x76>
		sr = seq;
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8010e46:	e022      	b.n	8010e8e <gen_numname+0x6a>
			wc = *lfn++;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	1c9a      	adds	r2, r3, #2
 8010e4c:	607a      	str	r2, [r7, #4]
 8010e4e:	881b      	ldrh	r3, [r3, #0]
 8010e50:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8010e52:	2300      	movs	r3, #0
 8010e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e56:	e017      	b.n	8010e88 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	005a      	lsls	r2, r3, #1
 8010e5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010e5e:	f003 0301 	and.w	r3, r3, #1
 8010e62:	4413      	add	r3, r2
 8010e64:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8010e66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010e68:	085b      	lsrs	r3, r3, #1
 8010e6a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010e6c:	69fb      	ldr	r3, [r7, #28]
 8010e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d005      	beq.n	8010e82 <gen_numname+0x5e>
 8010e76:	69fb      	ldr	r3, [r7, #28]
 8010e78:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8010e7c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8010e80:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8010e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e84:	3301      	adds	r3, #1
 8010e86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e8a:	2b0f      	cmp	r3, #15
 8010e8c:	d9e4      	bls.n	8010e58 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	881b      	ldrh	r3, [r3, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d1d8      	bne.n	8010e48 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8010e9a:	2307      	movs	r3, #7
 8010e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	b2db      	uxtb	r3, r3
 8010ea2:	f003 030f 	and.w	r3, r3, #15
 8010ea6:	b2db      	uxtb	r3, r3
 8010ea8:	3330      	adds	r3, #48	@ 0x30
 8010eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8010eae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010eb2:	2b39      	cmp	r3, #57	@ 0x39
 8010eb4:	d904      	bls.n	8010ec0 <gen_numname+0x9c>
 8010eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010eba:	3307      	adds	r3, #7
 8010ebc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8010ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec2:	1e5a      	subs	r2, r3, #1
 8010ec4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010ec6:	3330      	adds	r3, #48	@ 0x30
 8010ec8:	443b      	add	r3, r7
 8010eca:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010ece:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	091b      	lsrs	r3, r3, #4
 8010ed6:	603b      	str	r3, [r7, #0]
	} while (seq);
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d1df      	bne.n	8010e9e <gen_numname+0x7a>
	ns[i] = '~';
 8010ede:	f107 0214 	add.w	r2, r7, #20
 8010ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ee4:	4413      	add	r3, r2
 8010ee6:	227e      	movs	r2, #126	@ 0x7e
 8010ee8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8010eea:	2300      	movs	r3, #0
 8010eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8010eee:	e002      	b.n	8010ef6 <gen_numname+0xd2>
 8010ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d205      	bcs.n	8010f0a <gen_numname+0xe6>
 8010efe:	68fa      	ldr	r2, [r7, #12]
 8010f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f02:	4413      	add	r3, r2
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	2b20      	cmp	r3, #32
 8010f08:	d1f2      	bne.n	8010ef0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f0c:	2b07      	cmp	r3, #7
 8010f0e:	d807      	bhi.n	8010f20 <gen_numname+0xfc>
 8010f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f12:	1c5a      	adds	r2, r3, #1
 8010f14:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010f16:	3330      	adds	r3, #48	@ 0x30
 8010f18:	443b      	add	r3, r7
 8010f1a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8010f1e:	e000      	b.n	8010f22 <gen_numname+0xfe>
 8010f20:	2120      	movs	r1, #32
 8010f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f24:	1c5a      	adds	r2, r3, #1
 8010f26:	627a      	str	r2, [r7, #36]	@ 0x24
 8010f28:	68fa      	ldr	r2, [r7, #12]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	460a      	mov	r2, r1
 8010f2e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8010f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f32:	2b07      	cmp	r3, #7
 8010f34:	d9e9      	bls.n	8010f0a <gen_numname+0xe6>
}
 8010f36:	bf00      	nop
 8010f38:	bf00      	nop
 8010f3a:	3730      	adds	r7, #48	@ 0x30
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}

08010f40 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b085      	sub	sp, #20
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8010f4c:	230b      	movs	r3, #11
 8010f4e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010f50:	7bfb      	ldrb	r3, [r7, #15]
 8010f52:	b2da      	uxtb	r2, r3
 8010f54:	0852      	lsrs	r2, r2, #1
 8010f56:	01db      	lsls	r3, r3, #7
 8010f58:	4313      	orrs	r3, r2
 8010f5a:	b2da      	uxtb	r2, r3
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	1c59      	adds	r1, r3, #1
 8010f60:	6079      	str	r1, [r7, #4]
 8010f62:	781b      	ldrb	r3, [r3, #0]
 8010f64:	4413      	add	r3, r2
 8010f66:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	3b01      	subs	r3, #1
 8010f6c:	60bb      	str	r3, [r7, #8]
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d1ed      	bne.n	8010f50 <sum_sfn+0x10>
	return sum;
 8010f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3714      	adds	r7, #20
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr

08010f82 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b086      	sub	sp, #24
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010f90:	2100      	movs	r1, #0
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f7ff fc89 	bl	80108aa <dir_sdi>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010f9c:	7dfb      	ldrb	r3, [r7, #23]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d001      	beq.n	8010fa6 <dir_find+0x24>
 8010fa2:	7dfb      	ldrb	r3, [r7, #23]
 8010fa4:	e0a9      	b.n	80110fa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010fa6:	23ff      	movs	r3, #255	@ 0xff
 8010fa8:	753b      	strb	r3, [r7, #20]
 8010faa:	7d3b      	ldrb	r3, [r7, #20]
 8010fac:	757b      	strb	r3, [r7, #21]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8010fb4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	69db      	ldr	r3, [r3, #28]
 8010fba:	4619      	mov	r1, r3
 8010fbc:	6938      	ldr	r0, [r7, #16]
 8010fbe:	f7ff f895 	bl	80100ec <move_window>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010fc6:	7dfb      	ldrb	r3, [r7, #23]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	f040 8090 	bne.w	80110ee <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6a1b      	ldr	r3, [r3, #32]
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010fd6:	7dbb      	ldrb	r3, [r7, #22]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d102      	bne.n	8010fe2 <dir_find+0x60>
 8010fdc:	2304      	movs	r3, #4
 8010fde:	75fb      	strb	r3, [r7, #23]
 8010fe0:	e08a      	b.n	80110f8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6a1b      	ldr	r3, [r3, #32]
 8010fe6:	330b      	adds	r3, #11
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010fee:	73fb      	strb	r3, [r7, #15]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	7bfa      	ldrb	r2, [r7, #15]
 8010ff4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010ff6:	7dbb      	ldrb	r3, [r7, #22]
 8010ff8:	2be5      	cmp	r3, #229	@ 0xe5
 8010ffa:	d007      	beq.n	801100c <dir_find+0x8a>
 8010ffc:	7bfb      	ldrb	r3, [r7, #15]
 8010ffe:	f003 0308 	and.w	r3, r3, #8
 8011002:	2b00      	cmp	r3, #0
 8011004:	d009      	beq.n	801101a <dir_find+0x98>
 8011006:	7bfb      	ldrb	r3, [r7, #15]
 8011008:	2b0f      	cmp	r3, #15
 801100a:	d006      	beq.n	801101a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801100c:	23ff      	movs	r3, #255	@ 0xff
 801100e:	757b      	strb	r3, [r7, #21]
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f04f 32ff 	mov.w	r2, #4294967295
 8011016:	631a      	str	r2, [r3, #48]	@ 0x30
 8011018:	e05e      	b.n	80110d8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801101a:	7bfb      	ldrb	r3, [r7, #15]
 801101c:	2b0f      	cmp	r3, #15
 801101e:	d136      	bne.n	801108e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801102a:	2b00      	cmp	r3, #0
 801102c:	d154      	bne.n	80110d8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801102e:	7dbb      	ldrb	r3, [r7, #22]
 8011030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011034:	2b00      	cmp	r3, #0
 8011036:	d00d      	beq.n	8011054 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6a1b      	ldr	r3, [r3, #32]
 801103c:	7b5b      	ldrb	r3, [r3, #13]
 801103e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011040:	7dbb      	ldrb	r3, [r7, #22]
 8011042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011046:	75bb      	strb	r3, [r7, #22]
 8011048:	7dbb      	ldrb	r3, [r7, #22]
 801104a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	695a      	ldr	r2, [r3, #20]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011054:	7dba      	ldrb	r2, [r7, #22]
 8011056:	7d7b      	ldrb	r3, [r7, #21]
 8011058:	429a      	cmp	r2, r3
 801105a:	d115      	bne.n	8011088 <dir_find+0x106>
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6a1b      	ldr	r3, [r3, #32]
 8011060:	330d      	adds	r3, #13
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	7d3a      	ldrb	r2, [r7, #20]
 8011066:	429a      	cmp	r2, r3
 8011068:	d10e      	bne.n	8011088 <dir_find+0x106>
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	691a      	ldr	r2, [r3, #16]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6a1b      	ldr	r3, [r3, #32]
 8011072:	4619      	mov	r1, r3
 8011074:	4610      	mov	r0, r2
 8011076:	f7ff fdfd 	bl	8010c74 <cmp_lfn>
 801107a:	4603      	mov	r3, r0
 801107c:	2b00      	cmp	r3, #0
 801107e:	d003      	beq.n	8011088 <dir_find+0x106>
 8011080:	7d7b      	ldrb	r3, [r7, #21]
 8011082:	3b01      	subs	r3, #1
 8011084:	b2db      	uxtb	r3, r3
 8011086:	e000      	b.n	801108a <dir_find+0x108>
 8011088:	23ff      	movs	r3, #255	@ 0xff
 801108a:	757b      	strb	r3, [r7, #21]
 801108c:	e024      	b.n	80110d8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801108e:	7d7b      	ldrb	r3, [r7, #21]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d109      	bne.n	80110a8 <dir_find+0x126>
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6a1b      	ldr	r3, [r3, #32]
 8011098:	4618      	mov	r0, r3
 801109a:	f7ff ff51 	bl	8010f40 <sum_sfn>
 801109e:	4603      	mov	r3, r0
 80110a0:	461a      	mov	r2, r3
 80110a2:	7d3b      	ldrb	r3, [r7, #20]
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d024      	beq.n	80110f2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80110ae:	f003 0301 	and.w	r3, r3, #1
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d10a      	bne.n	80110cc <dir_find+0x14a>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6a18      	ldr	r0, [r3, #32]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	3324      	adds	r3, #36	@ 0x24
 80110be:	220b      	movs	r2, #11
 80110c0:	4619      	mov	r1, r3
 80110c2:	f7fe fe20 	bl	800fd06 <mem_cmp>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d014      	beq.n	80110f6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80110cc:	23ff      	movs	r3, #255	@ 0xff
 80110ce:	757b      	strb	r3, [r7, #21]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f04f 32ff 	mov.w	r2, #4294967295
 80110d6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80110d8:	2100      	movs	r1, #0
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f7ff fc6e 	bl	80109bc <dir_next>
 80110e0:	4603      	mov	r3, r0
 80110e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80110e4:	7dfb      	ldrb	r3, [r7, #23]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	f43f af65 	beq.w	8010fb6 <dir_find+0x34>
 80110ec:	e004      	b.n	80110f8 <dir_find+0x176>
		if (res != FR_OK) break;
 80110ee:	bf00      	nop
 80110f0:	e002      	b.n	80110f8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80110f2:	bf00      	nop
 80110f4:	e000      	b.n	80110f8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80110f6:	bf00      	nop

	return res;
 80110f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3718      	adds	r7, #24
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
	...

08011104 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b08c      	sub	sp, #48	@ 0x30
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011118:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801111c:	2b00      	cmp	r3, #0
 801111e:	d001      	beq.n	8011124 <dir_register+0x20>
 8011120:	2306      	movs	r3, #6
 8011122:	e0e0      	b.n	80112e6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011124:	2300      	movs	r3, #0
 8011126:	627b      	str	r3, [r7, #36]	@ 0x24
 8011128:	e002      	b.n	8011130 <dir_register+0x2c>
 801112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801112c:	3301      	adds	r3, #1
 801112e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011130:	69fb      	ldr	r3, [r7, #28]
 8011132:	691a      	ldr	r2, [r3, #16]
 8011134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011136:	005b      	lsls	r3, r3, #1
 8011138:	4413      	add	r3, r2
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d1f4      	bne.n	801112a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8011146:	f107 030c 	add.w	r3, r7, #12
 801114a:	220c      	movs	r2, #12
 801114c:	4618      	mov	r0, r3
 801114e:	f7fe fd9e 	bl	800fc8e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011152:	7dfb      	ldrb	r3, [r7, #23]
 8011154:	f003 0301 	and.w	r3, r3, #1
 8011158:	2b00      	cmp	r3, #0
 801115a:	d032      	beq.n	80111c2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2240      	movs	r2, #64	@ 0x40
 8011160:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8011164:	2301      	movs	r3, #1
 8011166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011168:	e016      	b.n	8011198 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8011170:	69fb      	ldr	r3, [r7, #28]
 8011172:	691a      	ldr	r2, [r3, #16]
 8011174:	f107 010c 	add.w	r1, r7, #12
 8011178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801117a:	f7ff fe53 	bl	8010e24 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f7ff feff 	bl	8010f82 <dir_find>
 8011184:	4603      	mov	r3, r0
 8011186:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801118a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801118e:	2b00      	cmp	r3, #0
 8011190:	d106      	bne.n	80111a0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8011192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011194:	3301      	adds	r3, #1
 8011196:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801119a:	2b63      	cmp	r3, #99	@ 0x63
 801119c:	d9e5      	bls.n	801116a <dir_register+0x66>
 801119e:	e000      	b.n	80111a2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80111a0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80111a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111a4:	2b64      	cmp	r3, #100	@ 0x64
 80111a6:	d101      	bne.n	80111ac <dir_register+0xa8>
 80111a8:	2307      	movs	r3, #7
 80111aa:	e09c      	b.n	80112e6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80111ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80111b0:	2b04      	cmp	r3, #4
 80111b2:	d002      	beq.n	80111ba <dir_register+0xb6>
 80111b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80111b8:	e095      	b.n	80112e6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80111ba:	7dfa      	ldrb	r2, [r7, #23]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80111c2:	7dfb      	ldrb	r3, [r7, #23]
 80111c4:	f003 0302 	and.w	r3, r3, #2
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d007      	beq.n	80111dc <dir_register+0xd8>
 80111cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ce:	330c      	adds	r3, #12
 80111d0:	4a47      	ldr	r2, [pc, #284]	@ (80112f0 <dir_register+0x1ec>)
 80111d2:	fba2 2303 	umull	r2, r3, r2, r3
 80111d6:	089b      	lsrs	r3, r3, #2
 80111d8:	3301      	adds	r3, #1
 80111da:	e000      	b.n	80111de <dir_register+0xda>
 80111dc:	2301      	movs	r3, #1
 80111de:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80111e0:	6a39      	ldr	r1, [r7, #32]
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f7ff fcc0 	bl	8010b68 <dir_alloc>
 80111e8:	4603      	mov	r3, r0
 80111ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80111ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d148      	bne.n	8011288 <dir_register+0x184>
 80111f6:	6a3b      	ldr	r3, [r7, #32]
 80111f8:	3b01      	subs	r3, #1
 80111fa:	623b      	str	r3, [r7, #32]
 80111fc:	6a3b      	ldr	r3, [r7, #32]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d042      	beq.n	8011288 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	695a      	ldr	r2, [r3, #20]
 8011206:	6a3b      	ldr	r3, [r7, #32]
 8011208:	015b      	lsls	r3, r3, #5
 801120a:	1ad3      	subs	r3, r2, r3
 801120c:	4619      	mov	r1, r3
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f7ff fb4b 	bl	80108aa <dir_sdi>
 8011214:	4603      	mov	r3, r0
 8011216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801121a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801121e:	2b00      	cmp	r3, #0
 8011220:	d132      	bne.n	8011288 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	3324      	adds	r3, #36	@ 0x24
 8011226:	4618      	mov	r0, r3
 8011228:	f7ff fe8a 	bl	8010f40 <sum_sfn>
 801122c:	4603      	mov	r3, r0
 801122e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	69db      	ldr	r3, [r3, #28]
 8011234:	4619      	mov	r1, r3
 8011236:	69f8      	ldr	r0, [r7, #28]
 8011238:	f7fe ff58 	bl	80100ec <move_window>
 801123c:	4603      	mov	r3, r0
 801123e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8011242:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011246:	2b00      	cmp	r3, #0
 8011248:	d11d      	bne.n	8011286 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801124a:	69fb      	ldr	r3, [r7, #28]
 801124c:	6918      	ldr	r0, [r3, #16]
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6a19      	ldr	r1, [r3, #32]
 8011252:	6a3b      	ldr	r3, [r7, #32]
 8011254:	b2da      	uxtb	r2, r3
 8011256:	7efb      	ldrb	r3, [r7, #27]
 8011258:	f7ff fd7c 	bl	8010d54 <put_lfn>
				fs->wflag = 1;
 801125c:	69fb      	ldr	r3, [r7, #28]
 801125e:	2201      	movs	r2, #1
 8011260:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8011262:	2100      	movs	r1, #0
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f7ff fba9 	bl	80109bc <dir_next>
 801126a:	4603      	mov	r3, r0
 801126c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8011270:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011274:	2b00      	cmp	r3, #0
 8011276:	d107      	bne.n	8011288 <dir_register+0x184>
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	3b01      	subs	r3, #1
 801127c:	623b      	str	r3, [r7, #32]
 801127e:	6a3b      	ldr	r3, [r7, #32]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d1d5      	bne.n	8011230 <dir_register+0x12c>
 8011284:	e000      	b.n	8011288 <dir_register+0x184>
				if (res != FR_OK) break;
 8011286:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011288:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801128c:	2b00      	cmp	r3, #0
 801128e:	d128      	bne.n	80112e2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	69db      	ldr	r3, [r3, #28]
 8011294:	4619      	mov	r1, r3
 8011296:	69f8      	ldr	r0, [r7, #28]
 8011298:	f7fe ff28 	bl	80100ec <move_window>
 801129c:	4603      	mov	r3, r0
 801129e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80112a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d11b      	bne.n	80112e2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6a1b      	ldr	r3, [r3, #32]
 80112ae:	2220      	movs	r2, #32
 80112b0:	2100      	movs	r1, #0
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7fe fd0c 	bl	800fcd0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6a18      	ldr	r0, [r3, #32]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	3324      	adds	r3, #36	@ 0x24
 80112c0:	220b      	movs	r2, #11
 80112c2:	4619      	mov	r1, r3
 80112c4:	f7fe fce3 	bl	800fc8e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6a1b      	ldr	r3, [r3, #32]
 80112d2:	330c      	adds	r3, #12
 80112d4:	f002 0218 	and.w	r2, r2, #24
 80112d8:	b2d2      	uxtb	r2, r2
 80112da:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	2201      	movs	r2, #1
 80112e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80112e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3730      	adds	r7, #48	@ 0x30
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
 80112ee:	bf00      	nop
 80112f0:	4ec4ec4f 	.word	0x4ec4ec4f

080112f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b08a      	sub	sp, #40	@ 0x28
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	613b      	str	r3, [r7, #16]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	691b      	ldr	r3, [r3, #16]
 801130a:	60fb      	str	r3, [r7, #12]
 801130c:	2300      	movs	r3, #0
 801130e:	617b      	str	r3, [r7, #20]
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8011314:	69bb      	ldr	r3, [r7, #24]
 8011316:	1c5a      	adds	r2, r3, #1
 8011318:	61ba      	str	r2, [r7, #24]
 801131a:	693a      	ldr	r2, [r7, #16]
 801131c:	4413      	add	r3, r2
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8011322:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011324:	2b1f      	cmp	r3, #31
 8011326:	d940      	bls.n	80113aa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8011328:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801132a:	2b2f      	cmp	r3, #47	@ 0x2f
 801132c:	d006      	beq.n	801133c <create_name+0x48>
 801132e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011330:	2b5c      	cmp	r3, #92	@ 0x5c
 8011332:	d110      	bne.n	8011356 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011334:	e002      	b.n	801133c <create_name+0x48>
 8011336:	69bb      	ldr	r3, [r7, #24]
 8011338:	3301      	adds	r3, #1
 801133a:	61bb      	str	r3, [r7, #24]
 801133c:	693a      	ldr	r2, [r7, #16]
 801133e:	69bb      	ldr	r3, [r7, #24]
 8011340:	4413      	add	r3, r2
 8011342:	781b      	ldrb	r3, [r3, #0]
 8011344:	2b2f      	cmp	r3, #47	@ 0x2f
 8011346:	d0f6      	beq.n	8011336 <create_name+0x42>
 8011348:	693a      	ldr	r2, [r7, #16]
 801134a:	69bb      	ldr	r3, [r7, #24]
 801134c:	4413      	add	r3, r2
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	2b5c      	cmp	r3, #92	@ 0x5c
 8011352:	d0f0      	beq.n	8011336 <create_name+0x42>
			break;
 8011354:	e02a      	b.n	80113ac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	2bfe      	cmp	r3, #254	@ 0xfe
 801135a:	d901      	bls.n	8011360 <create_name+0x6c>
 801135c:	2306      	movs	r3, #6
 801135e:	e17d      	b.n	801165c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8011360:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011362:	b2db      	uxtb	r3, r3
 8011364:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8011366:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011368:	2101      	movs	r1, #1
 801136a:	4618      	mov	r0, r3
 801136c:	f001 fcac 	bl	8012cc8 <ff_convert>
 8011370:	4603      	mov	r3, r0
 8011372:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8011374:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011376:	2b00      	cmp	r3, #0
 8011378:	d101      	bne.n	801137e <create_name+0x8a>
 801137a:	2306      	movs	r3, #6
 801137c:	e16e      	b.n	801165c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801137e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011380:	2b7f      	cmp	r3, #127	@ 0x7f
 8011382:	d809      	bhi.n	8011398 <create_name+0xa4>
 8011384:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011386:	4619      	mov	r1, r3
 8011388:	488d      	ldr	r0, [pc, #564]	@ (80115c0 <create_name+0x2cc>)
 801138a:	f7fe fce3 	bl	800fd54 <chk_chr>
 801138e:	4603      	mov	r3, r0
 8011390:	2b00      	cmp	r3, #0
 8011392:	d001      	beq.n	8011398 <create_name+0xa4>
 8011394:	2306      	movs	r3, #6
 8011396:	e161      	b.n	801165c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	1c5a      	adds	r2, r3, #1
 801139c:	617a      	str	r2, [r7, #20]
 801139e:	005b      	lsls	r3, r3, #1
 80113a0:	68fa      	ldr	r2, [r7, #12]
 80113a2:	4413      	add	r3, r2
 80113a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80113a6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80113a8:	e7b4      	b.n	8011314 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80113aa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80113ac:	693a      	ldr	r2, [r7, #16]
 80113ae:	69bb      	ldr	r3, [r7, #24]
 80113b0:	441a      	add	r2, r3
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80113b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80113b8:	2b1f      	cmp	r3, #31
 80113ba:	d801      	bhi.n	80113c0 <create_name+0xcc>
 80113bc:	2304      	movs	r3, #4
 80113be:	e000      	b.n	80113c2 <create_name+0xce>
 80113c0:	2300      	movs	r3, #0
 80113c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80113c6:	e011      	b.n	80113ec <create_name+0xf8>
		w = lfn[di - 1];
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80113ce:	3b01      	subs	r3, #1
 80113d0:	005b      	lsls	r3, r3, #1
 80113d2:	68fa      	ldr	r2, [r7, #12]
 80113d4:	4413      	add	r3, r2
 80113d6:	881b      	ldrh	r3, [r3, #0]
 80113d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80113da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80113dc:	2b20      	cmp	r3, #32
 80113de:	d002      	beq.n	80113e6 <create_name+0xf2>
 80113e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80113e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80113e4:	d106      	bne.n	80113f4 <create_name+0x100>
		di--;
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	3b01      	subs	r3, #1
 80113ea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d1ea      	bne.n	80113c8 <create_name+0xd4>
 80113f2:	e000      	b.n	80113f6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80113f4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	005b      	lsls	r3, r3, #1
 80113fa:	68fa      	ldr	r2, [r7, #12]
 80113fc:	4413      	add	r3, r2
 80113fe:	2200      	movs	r2, #0
 8011400:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d101      	bne.n	801140c <create_name+0x118>
 8011408:	2306      	movs	r3, #6
 801140a:	e127      	b.n	801165c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	3324      	adds	r3, #36	@ 0x24
 8011410:	220b      	movs	r2, #11
 8011412:	2120      	movs	r1, #32
 8011414:	4618      	mov	r0, r3
 8011416:	f7fe fc5b 	bl	800fcd0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801141a:	2300      	movs	r3, #0
 801141c:	61bb      	str	r3, [r7, #24]
 801141e:	e002      	b.n	8011426 <create_name+0x132>
 8011420:	69bb      	ldr	r3, [r7, #24]
 8011422:	3301      	adds	r3, #1
 8011424:	61bb      	str	r3, [r7, #24]
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	005b      	lsls	r3, r3, #1
 801142a:	68fa      	ldr	r2, [r7, #12]
 801142c:	4413      	add	r3, r2
 801142e:	881b      	ldrh	r3, [r3, #0]
 8011430:	2b20      	cmp	r3, #32
 8011432:	d0f5      	beq.n	8011420 <create_name+0x12c>
 8011434:	69bb      	ldr	r3, [r7, #24]
 8011436:	005b      	lsls	r3, r3, #1
 8011438:	68fa      	ldr	r2, [r7, #12]
 801143a:	4413      	add	r3, r2
 801143c:	881b      	ldrh	r3, [r3, #0]
 801143e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011440:	d0ee      	beq.n	8011420 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8011442:	69bb      	ldr	r3, [r7, #24]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d009      	beq.n	801145c <create_name+0x168>
 8011448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801144c:	f043 0303 	orr.w	r3, r3, #3
 8011450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8011454:	e002      	b.n	801145c <create_name+0x168>
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	3b01      	subs	r3, #1
 801145a:	617b      	str	r3, [r7, #20]
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d009      	beq.n	8011476 <create_name+0x182>
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011468:	3b01      	subs	r3, #1
 801146a:	005b      	lsls	r3, r3, #1
 801146c:	68fa      	ldr	r2, [r7, #12]
 801146e:	4413      	add	r3, r2
 8011470:	881b      	ldrh	r3, [r3, #0]
 8011472:	2b2e      	cmp	r3, #46	@ 0x2e
 8011474:	d1ef      	bne.n	8011456 <create_name+0x162>

	i = b = 0; ni = 8;
 8011476:	2300      	movs	r3, #0
 8011478:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801147c:	2300      	movs	r3, #0
 801147e:	623b      	str	r3, [r7, #32]
 8011480:	2308      	movs	r3, #8
 8011482:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8011484:	69bb      	ldr	r3, [r7, #24]
 8011486:	1c5a      	adds	r2, r3, #1
 8011488:	61ba      	str	r2, [r7, #24]
 801148a:	005b      	lsls	r3, r3, #1
 801148c:	68fa      	ldr	r2, [r7, #12]
 801148e:	4413      	add	r3, r2
 8011490:	881b      	ldrh	r3, [r3, #0]
 8011492:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8011494:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011496:	2b00      	cmp	r3, #0
 8011498:	f000 8090 	beq.w	80115bc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801149c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801149e:	2b20      	cmp	r3, #32
 80114a0:	d006      	beq.n	80114b0 <create_name+0x1bc>
 80114a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80114a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80114a6:	d10a      	bne.n	80114be <create_name+0x1ca>
 80114a8:	69ba      	ldr	r2, [r7, #24]
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d006      	beq.n	80114be <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80114b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114b4:	f043 0303 	orr.w	r3, r3, #3
 80114b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80114bc:	e07d      	b.n	80115ba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80114be:	6a3a      	ldr	r2, [r7, #32]
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d203      	bcs.n	80114ce <create_name+0x1da>
 80114c6:	69ba      	ldr	r2, [r7, #24]
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d123      	bne.n	8011516 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80114ce:	69fb      	ldr	r3, [r7, #28]
 80114d0:	2b0b      	cmp	r3, #11
 80114d2:	d106      	bne.n	80114e2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80114d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114d8:	f043 0303 	orr.w	r3, r3, #3
 80114dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80114e0:	e075      	b.n	80115ce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80114e2:	69ba      	ldr	r2, [r7, #24]
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d005      	beq.n	80114f6 <create_name+0x202>
 80114ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114ee:	f043 0303 	orr.w	r3, r3, #3
 80114f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80114f6:	69ba      	ldr	r2, [r7, #24]
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d866      	bhi.n	80115cc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	61bb      	str	r3, [r7, #24]
 8011502:	2308      	movs	r3, #8
 8011504:	623b      	str	r3, [r7, #32]
 8011506:	230b      	movs	r3, #11
 8011508:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801150a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801150e:	009b      	lsls	r3, r3, #2
 8011510:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011514:	e051      	b.n	80115ba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8011516:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011518:	2b7f      	cmp	r3, #127	@ 0x7f
 801151a:	d914      	bls.n	8011546 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801151c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801151e:	2100      	movs	r1, #0
 8011520:	4618      	mov	r0, r3
 8011522:	f001 fbd1 	bl	8012cc8 <ff_convert>
 8011526:	4603      	mov	r3, r0
 8011528:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801152a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801152c:	2b00      	cmp	r3, #0
 801152e:	d004      	beq.n	801153a <create_name+0x246>
 8011530:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011532:	3b80      	subs	r3, #128	@ 0x80
 8011534:	4a23      	ldr	r2, [pc, #140]	@ (80115c4 <create_name+0x2d0>)
 8011536:	5cd3      	ldrb	r3, [r2, r3]
 8011538:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801153a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801153e:	f043 0302 	orr.w	r3, r3, #2
 8011542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8011546:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011548:	2b00      	cmp	r3, #0
 801154a:	d007      	beq.n	801155c <create_name+0x268>
 801154c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801154e:	4619      	mov	r1, r3
 8011550:	481d      	ldr	r0, [pc, #116]	@ (80115c8 <create_name+0x2d4>)
 8011552:	f7fe fbff 	bl	800fd54 <chk_chr>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d008      	beq.n	801156e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801155c:	235f      	movs	r3, #95	@ 0x5f
 801155e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011564:	f043 0303 	orr.w	r3, r3, #3
 8011568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801156c:	e01b      	b.n	80115a6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801156e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011570:	2b40      	cmp	r3, #64	@ 0x40
 8011572:	d909      	bls.n	8011588 <create_name+0x294>
 8011574:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011576:	2b5a      	cmp	r3, #90	@ 0x5a
 8011578:	d806      	bhi.n	8011588 <create_name+0x294>
					b |= 2;
 801157a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801157e:	f043 0302 	orr.w	r3, r3, #2
 8011582:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011586:	e00e      	b.n	80115a6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8011588:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801158a:	2b60      	cmp	r3, #96	@ 0x60
 801158c:	d90b      	bls.n	80115a6 <create_name+0x2b2>
 801158e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011590:	2b7a      	cmp	r3, #122	@ 0x7a
 8011592:	d808      	bhi.n	80115a6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8011594:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011598:	f043 0301 	orr.w	r3, r3, #1
 801159c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80115a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80115a2:	3b20      	subs	r3, #32
 80115a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80115a6:	6a3b      	ldr	r3, [r7, #32]
 80115a8:	1c5a      	adds	r2, r3, #1
 80115aa:	623a      	str	r2, [r7, #32]
 80115ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80115ae:	b2d1      	uxtb	r1, r2
 80115b0:	687a      	ldr	r2, [r7, #4]
 80115b2:	4413      	add	r3, r2
 80115b4:	460a      	mov	r2, r1
 80115b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80115ba:	e763      	b.n	8011484 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80115bc:	bf00      	nop
 80115be:	e006      	b.n	80115ce <create_name+0x2da>
 80115c0:	08018624 	.word	0x08018624
 80115c4:	08019fa4 	.word	0x08019fa4
 80115c8:	08018630 	.word	0x08018630
			if (si > di) break;			/* No extension */
 80115cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80115d4:	2be5      	cmp	r3, #229	@ 0xe5
 80115d6:	d103      	bne.n	80115e0 <create_name+0x2ec>
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2205      	movs	r2, #5
 80115dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	2b08      	cmp	r3, #8
 80115e4:	d104      	bne.n	80115f0 <create_name+0x2fc>
 80115e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80115ea:	009b      	lsls	r3, r3, #2
 80115ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80115f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80115f4:	f003 030c 	and.w	r3, r3, #12
 80115f8:	2b0c      	cmp	r3, #12
 80115fa:	d005      	beq.n	8011608 <create_name+0x314>
 80115fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011600:	f003 0303 	and.w	r3, r3, #3
 8011604:	2b03      	cmp	r3, #3
 8011606:	d105      	bne.n	8011614 <create_name+0x320>
 8011608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801160c:	f043 0302 	orr.w	r3, r3, #2
 8011610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8011614:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011618:	f003 0302 	and.w	r3, r3, #2
 801161c:	2b00      	cmp	r3, #0
 801161e:	d117      	bne.n	8011650 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8011620:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011624:	f003 0303 	and.w	r3, r3, #3
 8011628:	2b01      	cmp	r3, #1
 801162a:	d105      	bne.n	8011638 <create_name+0x344>
 801162c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011630:	f043 0310 	orr.w	r3, r3, #16
 8011634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8011638:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801163c:	f003 030c 	and.w	r3, r3, #12
 8011640:	2b04      	cmp	r3, #4
 8011642:	d105      	bne.n	8011650 <create_name+0x35c>
 8011644:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011648:	f043 0308 	orr.w	r3, r3, #8
 801164c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011656:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801165a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801165c:	4618      	mov	r0, r3
 801165e:	3728      	adds	r7, #40	@ 0x28
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}

08011664 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b086      	sub	sp, #24
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011678:	e002      	b.n	8011680 <follow_path+0x1c>
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	3301      	adds	r3, #1
 801167e:	603b      	str	r3, [r7, #0]
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	781b      	ldrb	r3, [r3, #0]
 8011684:	2b2f      	cmp	r3, #47	@ 0x2f
 8011686:	d0f8      	beq.n	801167a <follow_path+0x16>
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	2b5c      	cmp	r3, #92	@ 0x5c
 801168e:	d0f4      	beq.n	801167a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011690:	693b      	ldr	r3, [r7, #16]
 8011692:	2200      	movs	r2, #0
 8011694:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	2b1f      	cmp	r3, #31
 801169c:	d80a      	bhi.n	80116b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2280      	movs	r2, #128	@ 0x80
 80116a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80116a6:	2100      	movs	r1, #0
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f7ff f8fe 	bl	80108aa <dir_sdi>
 80116ae:	4603      	mov	r3, r0
 80116b0:	75fb      	strb	r3, [r7, #23]
 80116b2:	e048      	b.n	8011746 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80116b4:	463b      	mov	r3, r7
 80116b6:	4619      	mov	r1, r3
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f7ff fe1b 	bl	80112f4 <create_name>
 80116be:	4603      	mov	r3, r0
 80116c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80116c2:	7dfb      	ldrb	r3, [r7, #23]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d139      	bne.n	801173c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f7ff fc5a 	bl	8010f82 <dir_find>
 80116ce:	4603      	mov	r3, r0
 80116d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80116d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80116da:	7dfb      	ldrb	r3, [r7, #23]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d00a      	beq.n	80116f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80116e0:	7dfb      	ldrb	r3, [r7, #23]
 80116e2:	2b04      	cmp	r3, #4
 80116e4:	d12c      	bne.n	8011740 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80116e6:	7afb      	ldrb	r3, [r7, #11]
 80116e8:	f003 0304 	and.w	r3, r3, #4
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d127      	bne.n	8011740 <follow_path+0xdc>
 80116f0:	2305      	movs	r3, #5
 80116f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80116f4:	e024      	b.n	8011740 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80116f6:	7afb      	ldrb	r3, [r7, #11]
 80116f8:	f003 0304 	and.w	r3, r3, #4
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d121      	bne.n	8011744 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	799b      	ldrb	r3, [r3, #6]
 8011704:	f003 0310 	and.w	r3, r3, #16
 8011708:	2b00      	cmp	r3, #0
 801170a:	d102      	bne.n	8011712 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801170c:	2305      	movs	r3, #5
 801170e:	75fb      	strb	r3, [r7, #23]
 8011710:	e019      	b.n	8011746 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	695b      	ldr	r3, [r3, #20]
 801171c:	68fa      	ldr	r2, [r7, #12]
 801171e:	8992      	ldrh	r2, [r2, #12]
 8011720:	fbb3 f0f2 	udiv	r0, r3, r2
 8011724:	fb00 f202 	mul.w	r2, r0, r2
 8011728:	1a9b      	subs	r3, r3, r2
 801172a:	440b      	add	r3, r1
 801172c:	4619      	mov	r1, r3
 801172e:	68f8      	ldr	r0, [r7, #12]
 8011730:	f7ff fa61 	bl	8010bf6 <ld_clust>
 8011734:	4602      	mov	r2, r0
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801173a:	e7bb      	b.n	80116b4 <follow_path+0x50>
			if (res != FR_OK) break;
 801173c:	bf00      	nop
 801173e:	e002      	b.n	8011746 <follow_path+0xe2>
				break;
 8011740:	bf00      	nop
 8011742:	e000      	b.n	8011746 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011744:	bf00      	nop
			}
		}
	}

	return res;
 8011746:	7dfb      	ldrb	r3, [r7, #23]
}
 8011748:	4618      	mov	r0, r3
 801174a:	3718      	adds	r7, #24
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011750:	b480      	push	{r7}
 8011752:	b087      	sub	sp, #28
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011758:	f04f 33ff 	mov.w	r3, #4294967295
 801175c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d031      	beq.n	80117ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	617b      	str	r3, [r7, #20]
 801176c:	e002      	b.n	8011774 <get_ldnumber+0x24>
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	3301      	adds	r3, #1
 8011772:	617b      	str	r3, [r7, #20]
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	781b      	ldrb	r3, [r3, #0]
 8011778:	2b1f      	cmp	r3, #31
 801177a:	d903      	bls.n	8011784 <get_ldnumber+0x34>
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	2b3a      	cmp	r3, #58	@ 0x3a
 8011782:	d1f4      	bne.n	801176e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	2b3a      	cmp	r3, #58	@ 0x3a
 801178a:	d11c      	bne.n	80117c6 <get_ldnumber+0x76>
			tp = *path;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	1c5a      	adds	r2, r3, #1
 8011796:	60fa      	str	r2, [r7, #12]
 8011798:	781b      	ldrb	r3, [r3, #0]
 801179a:	3b30      	subs	r3, #48	@ 0x30
 801179c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	2b09      	cmp	r3, #9
 80117a2:	d80e      	bhi.n	80117c2 <get_ldnumber+0x72>
 80117a4:	68fa      	ldr	r2, [r7, #12]
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d10a      	bne.n	80117c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d107      	bne.n	80117c2 <get_ldnumber+0x72>
					vol = (int)i;
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	3301      	adds	r3, #1
 80117ba:	617b      	str	r3, [r7, #20]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	697a      	ldr	r2, [r7, #20]
 80117c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80117c2:	693b      	ldr	r3, [r7, #16]
 80117c4:	e002      	b.n	80117cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80117c6:	2300      	movs	r3, #0
 80117c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80117ca:	693b      	ldr	r3, [r7, #16]
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	371c      	adds	r7, #28
 80117d0:	46bd      	mov	sp, r7
 80117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d6:	4770      	bx	lr

080117d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2200      	movs	r2, #0
 80117e6:	70da      	strb	r2, [r3, #3]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f04f 32ff 	mov.w	r2, #4294967295
 80117ee:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80117f0:	6839      	ldr	r1, [r7, #0]
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f7fe fc7a 	bl	80100ec <move_window>
 80117f8:	4603      	mov	r3, r0
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d001      	beq.n	8011802 <check_fs+0x2a>
 80117fe:	2304      	movs	r3, #4
 8011800:	e038      	b.n	8011874 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	3338      	adds	r3, #56	@ 0x38
 8011806:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801180a:	4618      	mov	r0, r3
 801180c:	f7fe f9bc 	bl	800fb88 <ld_word>
 8011810:	4603      	mov	r3, r0
 8011812:	461a      	mov	r2, r3
 8011814:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011818:	429a      	cmp	r2, r3
 801181a:	d001      	beq.n	8011820 <check_fs+0x48>
 801181c:	2303      	movs	r3, #3
 801181e:	e029      	b.n	8011874 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011826:	2be9      	cmp	r3, #233	@ 0xe9
 8011828:	d009      	beq.n	801183e <check_fs+0x66>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011830:	2beb      	cmp	r3, #235	@ 0xeb
 8011832:	d11e      	bne.n	8011872 <check_fs+0x9a>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801183a:	2b90      	cmp	r3, #144	@ 0x90
 801183c:	d119      	bne.n	8011872 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	3338      	adds	r3, #56	@ 0x38
 8011842:	3336      	adds	r3, #54	@ 0x36
 8011844:	4618      	mov	r0, r3
 8011846:	f7fe f9b8 	bl	800fbba <ld_dword>
 801184a:	4603      	mov	r3, r0
 801184c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011850:	4a0a      	ldr	r2, [pc, #40]	@ (801187c <check_fs+0xa4>)
 8011852:	4293      	cmp	r3, r2
 8011854:	d101      	bne.n	801185a <check_fs+0x82>
 8011856:	2300      	movs	r3, #0
 8011858:	e00c      	b.n	8011874 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	3338      	adds	r3, #56	@ 0x38
 801185e:	3352      	adds	r3, #82	@ 0x52
 8011860:	4618      	mov	r0, r3
 8011862:	f7fe f9aa 	bl	800fbba <ld_dword>
 8011866:	4603      	mov	r3, r0
 8011868:	4a05      	ldr	r2, [pc, #20]	@ (8011880 <check_fs+0xa8>)
 801186a:	4293      	cmp	r3, r2
 801186c:	d101      	bne.n	8011872 <check_fs+0x9a>
 801186e:	2300      	movs	r3, #0
 8011870:	e000      	b.n	8011874 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011872:	2302      	movs	r3, #2
}
 8011874:	4618      	mov	r0, r3
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	00544146 	.word	0x00544146
 8011880:	33544146 	.word	0x33544146

08011884 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b096      	sub	sp, #88	@ 0x58
 8011888:	af00      	add	r7, sp, #0
 801188a:	60f8      	str	r0, [r7, #12]
 801188c:	60b9      	str	r1, [r7, #8]
 801188e:	4613      	mov	r3, r2
 8011890:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	2200      	movs	r2, #0
 8011896:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011898:	68f8      	ldr	r0, [r7, #12]
 801189a:	f7ff ff59 	bl	8011750 <get_ldnumber>
 801189e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80118a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	da01      	bge.n	80118aa <find_volume+0x26>
 80118a6:	230b      	movs	r3, #11
 80118a8:	e265      	b.n	8011d76 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80118aa:	4a9f      	ldr	r2, [pc, #636]	@ (8011b28 <find_volume+0x2a4>)
 80118ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80118b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d101      	bne.n	80118be <find_volume+0x3a>
 80118ba:	230c      	movs	r3, #12
 80118bc:	e25b      	b.n	8011d76 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80118c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80118c4:	79fb      	ldrb	r3, [r7, #7]
 80118c6:	f023 0301 	bic.w	r3, r3, #1
 80118ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80118cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d01a      	beq.n	801190a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80118d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d6:	785b      	ldrb	r3, [r3, #1]
 80118d8:	4618      	mov	r0, r3
 80118da:	f7fe f8b5 	bl	800fa48 <disk_status>
 80118de:	4603      	mov	r3, r0
 80118e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80118e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80118e8:	f003 0301 	and.w	r3, r3, #1
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d10c      	bne.n	801190a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80118f0:	79fb      	ldrb	r3, [r7, #7]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d007      	beq.n	8011906 <find_volume+0x82>
 80118f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80118fa:	f003 0304 	and.w	r3, r3, #4
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d001      	beq.n	8011906 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011902:	230a      	movs	r3, #10
 8011904:	e237      	b.n	8011d76 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8011906:	2300      	movs	r3, #0
 8011908:	e235      	b.n	8011d76 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801190a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801190c:	2200      	movs	r2, #0
 801190e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011912:	b2da      	uxtb	r2, r3
 8011914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011916:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801191a:	785b      	ldrb	r3, [r3, #1]
 801191c:	4618      	mov	r0, r3
 801191e:	f7fe f8ad 	bl	800fa7c <disk_initialize>
 8011922:	4603      	mov	r3, r0
 8011924:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011928:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801192c:	f003 0301 	and.w	r3, r3, #1
 8011930:	2b00      	cmp	r3, #0
 8011932:	d001      	beq.n	8011938 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011934:	2303      	movs	r3, #3
 8011936:	e21e      	b.n	8011d76 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011938:	79fb      	ldrb	r3, [r7, #7]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d007      	beq.n	801194e <find_volume+0xca>
 801193e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011942:	f003 0304 	and.w	r3, r3, #4
 8011946:	2b00      	cmp	r3, #0
 8011948:	d001      	beq.n	801194e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801194a:	230a      	movs	r3, #10
 801194c:	e213      	b.n	8011d76 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801194e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011950:	7858      	ldrb	r0, [r3, #1]
 8011952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011954:	330c      	adds	r3, #12
 8011956:	461a      	mov	r2, r3
 8011958:	2102      	movs	r1, #2
 801195a:	f7fe f8f7 	bl	800fb4c <disk_ioctl>
 801195e:	4603      	mov	r3, r0
 8011960:	2b00      	cmp	r3, #0
 8011962:	d001      	beq.n	8011968 <find_volume+0xe4>
 8011964:	2301      	movs	r3, #1
 8011966:	e206      	b.n	8011d76 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801196a:	899b      	ldrh	r3, [r3, #12]
 801196c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011970:	d80d      	bhi.n	801198e <find_volume+0x10a>
 8011972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011974:	899b      	ldrh	r3, [r3, #12]
 8011976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801197a:	d308      	bcc.n	801198e <find_volume+0x10a>
 801197c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801197e:	899b      	ldrh	r3, [r3, #12]
 8011980:	461a      	mov	r2, r3
 8011982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011984:	899b      	ldrh	r3, [r3, #12]
 8011986:	3b01      	subs	r3, #1
 8011988:	4013      	ands	r3, r2
 801198a:	2b00      	cmp	r3, #0
 801198c:	d001      	beq.n	8011992 <find_volume+0x10e>
 801198e:	2301      	movs	r3, #1
 8011990:	e1f1      	b.n	8011d76 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011992:	2300      	movs	r3, #0
 8011994:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011996:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011998:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801199a:	f7ff ff1d 	bl	80117d8 <check_fs>
 801199e:	4603      	mov	r3, r0
 80119a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80119a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80119a8:	2b02      	cmp	r3, #2
 80119aa:	d149      	bne.n	8011a40 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80119ac:	2300      	movs	r3, #0
 80119ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80119b0:	e01e      	b.n	80119f0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80119b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119b4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80119b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119ba:	011b      	lsls	r3, r3, #4
 80119bc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80119c0:	4413      	add	r3, r2
 80119c2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80119c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119c6:	3304      	adds	r3, #4
 80119c8:	781b      	ldrb	r3, [r3, #0]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d006      	beq.n	80119dc <find_volume+0x158>
 80119ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119d0:	3308      	adds	r3, #8
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fe f8f1 	bl	800fbba <ld_dword>
 80119d8:	4602      	mov	r2, r0
 80119da:	e000      	b.n	80119de <find_volume+0x15a>
 80119dc:	2200      	movs	r2, #0
 80119de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119e0:	009b      	lsls	r3, r3, #2
 80119e2:	3358      	adds	r3, #88	@ 0x58
 80119e4:	443b      	add	r3, r7
 80119e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80119ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119ec:	3301      	adds	r3, #1
 80119ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80119f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119f2:	2b03      	cmp	r3, #3
 80119f4:	d9dd      	bls.n	80119b2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80119f6:	2300      	movs	r3, #0
 80119f8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80119fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d002      	beq.n	8011a06 <find_volume+0x182>
 8011a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a02:	3b01      	subs	r3, #1
 8011a04:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	3358      	adds	r3, #88	@ 0x58
 8011a0c:	443b      	add	r3, r7
 8011a0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011a12:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d005      	beq.n	8011a26 <find_volume+0x1a2>
 8011a1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011a1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011a1e:	f7ff fedb 	bl	80117d8 <check_fs>
 8011a22:	4603      	mov	r3, r0
 8011a24:	e000      	b.n	8011a28 <find_volume+0x1a4>
 8011a26:	2303      	movs	r3, #3
 8011a28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011a2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011a30:	2b01      	cmp	r3, #1
 8011a32:	d905      	bls.n	8011a40 <find_volume+0x1bc>
 8011a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a36:	3301      	adds	r3, #1
 8011a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a3c:	2b03      	cmp	r3, #3
 8011a3e:	d9e2      	bls.n	8011a06 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011a40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011a44:	2b04      	cmp	r3, #4
 8011a46:	d101      	bne.n	8011a4c <find_volume+0x1c8>
 8011a48:	2301      	movs	r3, #1
 8011a4a:	e194      	b.n	8011d76 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011a50:	2b01      	cmp	r3, #1
 8011a52:	d901      	bls.n	8011a58 <find_volume+0x1d4>
 8011a54:	230d      	movs	r3, #13
 8011a56:	e18e      	b.n	8011d76 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a5a:	3338      	adds	r3, #56	@ 0x38
 8011a5c:	330b      	adds	r3, #11
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7fe f892 	bl	800fb88 <ld_word>
 8011a64:	4603      	mov	r3, r0
 8011a66:	461a      	mov	r2, r3
 8011a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a6a:	899b      	ldrh	r3, [r3, #12]
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	d001      	beq.n	8011a74 <find_volume+0x1f0>
 8011a70:	230d      	movs	r3, #13
 8011a72:	e180      	b.n	8011d76 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a76:	3338      	adds	r3, #56	@ 0x38
 8011a78:	3316      	adds	r3, #22
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7fe f884 	bl	800fb88 <ld_word>
 8011a80:	4603      	mov	r3, r0
 8011a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d106      	bne.n	8011a98 <find_volume+0x214>
 8011a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a8c:	3338      	adds	r3, #56	@ 0x38
 8011a8e:	3324      	adds	r3, #36	@ 0x24
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7fe f892 	bl	800fbba <ld_dword>
 8011a96:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8011a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011a9c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aa0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8011aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aa6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aaa:	789b      	ldrb	r3, [r3, #2]
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d005      	beq.n	8011abc <find_volume+0x238>
 8011ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ab2:	789b      	ldrb	r3, [r3, #2]
 8011ab4:	2b02      	cmp	r3, #2
 8011ab6:	d001      	beq.n	8011abc <find_volume+0x238>
 8011ab8:	230d      	movs	r3, #13
 8011aba:	e15c      	b.n	8011d76 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011abe:	789b      	ldrb	r3, [r3, #2]
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ac4:	fb02 f303 	mul.w	r3, r2, r3
 8011ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011acc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011ad0:	461a      	mov	r2, r3
 8011ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad8:	895b      	ldrh	r3, [r3, #10]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d008      	beq.n	8011af0 <find_volume+0x26c>
 8011ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ae0:	895b      	ldrh	r3, [r3, #10]
 8011ae2:	461a      	mov	r2, r3
 8011ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ae6:	895b      	ldrh	r3, [r3, #10]
 8011ae8:	3b01      	subs	r3, #1
 8011aea:	4013      	ands	r3, r2
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d001      	beq.n	8011af4 <find_volume+0x270>
 8011af0:	230d      	movs	r3, #13
 8011af2:	e140      	b.n	8011d76 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af6:	3338      	adds	r3, #56	@ 0x38
 8011af8:	3311      	adds	r3, #17
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7fe f844 	bl	800fb88 <ld_word>
 8011b00:	4603      	mov	r3, r0
 8011b02:	461a      	mov	r2, r3
 8011b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b0a:	891b      	ldrh	r3, [r3, #8]
 8011b0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b0e:	8992      	ldrh	r2, [r2, #12]
 8011b10:	0952      	lsrs	r2, r2, #5
 8011b12:	b292      	uxth	r2, r2
 8011b14:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b18:	fb01 f202 	mul.w	r2, r1, r2
 8011b1c:	1a9b      	subs	r3, r3, r2
 8011b1e:	b29b      	uxth	r3, r3
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d003      	beq.n	8011b2c <find_volume+0x2a8>
 8011b24:	230d      	movs	r3, #13
 8011b26:	e126      	b.n	8011d76 <find_volume+0x4f2>
 8011b28:	20002d58 	.word	0x20002d58

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b2e:	3338      	adds	r3, #56	@ 0x38
 8011b30:	3313      	adds	r3, #19
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7fe f828 	bl	800fb88 <ld_word>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011b3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d106      	bne.n	8011b50 <find_volume+0x2cc>
 8011b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b44:	3338      	adds	r3, #56	@ 0x38
 8011b46:	3320      	adds	r3, #32
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7fe f836 	bl	800fbba <ld_dword>
 8011b4e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b52:	3338      	adds	r3, #56	@ 0x38
 8011b54:	330e      	adds	r3, #14
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7fe f816 	bl	800fb88 <ld_word>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011b60:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d101      	bne.n	8011b6a <find_volume+0x2e6>
 8011b66:	230d      	movs	r3, #13
 8011b68:	e105      	b.n	8011d76 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011b6a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b6e:	4413      	add	r3, r2
 8011b70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b72:	8911      	ldrh	r1, [r2, #8]
 8011b74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b76:	8992      	ldrh	r2, [r2, #12]
 8011b78:	0952      	lsrs	r2, r2, #5
 8011b7a:	b292      	uxth	r2, r2
 8011b7c:	fbb1 f2f2 	udiv	r2, r1, r2
 8011b80:	b292      	uxth	r2, r2
 8011b82:	4413      	add	r3, r2
 8011b84:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011b86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d201      	bcs.n	8011b92 <find_volume+0x30e>
 8011b8e:	230d      	movs	r3, #13
 8011b90:	e0f1      	b.n	8011d76 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b96:	1ad3      	subs	r3, r2, r3
 8011b98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b9a:	8952      	ldrh	r2, [r2, #10]
 8011b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ba0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d101      	bne.n	8011bac <find_volume+0x328>
 8011ba8:	230d      	movs	r3, #13
 8011baa:	e0e4      	b.n	8011d76 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8011bac:	2303      	movs	r3, #3
 8011bae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011bb8:	4293      	cmp	r3, r2
 8011bba:	d802      	bhi.n	8011bc2 <find_volume+0x33e>
 8011bbc:	2302      	movs	r3, #2
 8011bbe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bc4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011bc8:	4293      	cmp	r3, r2
 8011bca:	d802      	bhi.n	8011bd2 <find_volume+0x34e>
 8011bcc:	2301      	movs	r3, #1
 8011bce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bd4:	1c9a      	adds	r2, r3, #2
 8011bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bd8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8011bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bdc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011bde:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011be0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011be4:	441a      	add	r2, r3
 8011be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011be8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8011bea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bee:	441a      	add	r2, r3
 8011bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bf2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8011bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011bf8:	2b03      	cmp	r3, #3
 8011bfa:	d11e      	bne.n	8011c3a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bfe:	3338      	adds	r3, #56	@ 0x38
 8011c00:	332a      	adds	r3, #42	@ 0x2a
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fd ffc0 	bl	800fb88 <ld_word>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d001      	beq.n	8011c12 <find_volume+0x38e>
 8011c0e:	230d      	movs	r3, #13
 8011c10:	e0b1      	b.n	8011d76 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c14:	891b      	ldrh	r3, [r3, #8]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d001      	beq.n	8011c1e <find_volume+0x39a>
 8011c1a:	230d      	movs	r3, #13
 8011c1c:	e0ab      	b.n	8011d76 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c20:	3338      	adds	r3, #56	@ 0x38
 8011c22:	332c      	adds	r3, #44	@ 0x2c
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fd ffc8 	bl	800fbba <ld_dword>
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c32:	69db      	ldr	r3, [r3, #28]
 8011c34:	009b      	lsls	r3, r3, #2
 8011c36:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c38:	e01f      	b.n	8011c7a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c3c:	891b      	ldrh	r3, [r3, #8]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d101      	bne.n	8011c46 <find_volume+0x3c2>
 8011c42:	230d      	movs	r3, #13
 8011c44:	e097      	b.n	8011d76 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c4c:	441a      	add	r2, r3
 8011c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c50:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011c52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011c56:	2b02      	cmp	r3, #2
 8011c58:	d103      	bne.n	8011c62 <find_volume+0x3de>
 8011c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c5c:	69db      	ldr	r3, [r3, #28]
 8011c5e:	005b      	lsls	r3, r3, #1
 8011c60:	e00a      	b.n	8011c78 <find_volume+0x3f4>
 8011c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c64:	69da      	ldr	r2, [r3, #28]
 8011c66:	4613      	mov	r3, r2
 8011c68:	005b      	lsls	r3, r3, #1
 8011c6a:	4413      	add	r3, r2
 8011c6c:	085a      	lsrs	r2, r3, #1
 8011c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c70:	69db      	ldr	r3, [r3, #28]
 8011c72:	f003 0301 	and.w	r3, r3, #1
 8011c76:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011c78:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c7c:	6a1a      	ldr	r2, [r3, #32]
 8011c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c80:	899b      	ldrh	r3, [r3, #12]
 8011c82:	4619      	mov	r1, r3
 8011c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c86:	440b      	add	r3, r1
 8011c88:	3b01      	subs	r3, #1
 8011c8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011c8c:	8989      	ldrh	r1, [r1, #12]
 8011c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d201      	bcs.n	8011c9a <find_volume+0x416>
 8011c96:	230d      	movs	r3, #13
 8011c98:	e06d      	b.n	8011d76 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8011ca0:	619a      	str	r2, [r3, #24]
 8011ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ca4:	699a      	ldr	r2, [r3, #24]
 8011ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ca8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8011caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cac:	2280      	movs	r2, #128	@ 0x80
 8011cae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011cb4:	2b03      	cmp	r3, #3
 8011cb6:	d149      	bne.n	8011d4c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cba:	3338      	adds	r3, #56	@ 0x38
 8011cbc:	3330      	adds	r3, #48	@ 0x30
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fd ff62 	bl	800fb88 <ld_word>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d140      	bne.n	8011d4c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ccc:	3301      	adds	r3, #1
 8011cce:	4619      	mov	r1, r3
 8011cd0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011cd2:	f7fe fa0b 	bl	80100ec <move_window>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d137      	bne.n	8011d4c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8011cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cde:	2200      	movs	r2, #0
 8011ce0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ce4:	3338      	adds	r3, #56	@ 0x38
 8011ce6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7fd ff4c 	bl	800fb88 <ld_word>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	461a      	mov	r2, r3
 8011cf4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011cf8:	429a      	cmp	r2, r3
 8011cfa:	d127      	bne.n	8011d4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cfe:	3338      	adds	r3, #56	@ 0x38
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7fd ff5a 	bl	800fbba <ld_dword>
 8011d06:	4603      	mov	r3, r0
 8011d08:	4a1d      	ldr	r2, [pc, #116]	@ (8011d80 <find_volume+0x4fc>)
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	d11e      	bne.n	8011d4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d10:	3338      	adds	r3, #56	@ 0x38
 8011d12:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7fd ff4f 	bl	800fbba <ld_dword>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	4a19      	ldr	r2, [pc, #100]	@ (8011d84 <find_volume+0x500>)
 8011d20:	4293      	cmp	r3, r2
 8011d22:	d113      	bne.n	8011d4c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d26:	3338      	adds	r3, #56	@ 0x38
 8011d28:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f7fd ff44 	bl	800fbba <ld_dword>
 8011d32:	4602      	mov	r2, r0
 8011d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d36:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d3a:	3338      	adds	r3, #56	@ 0x38
 8011d3c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7fd ff3a 	bl	800fbba <ld_dword>
 8011d46:	4602      	mov	r2, r0
 8011d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d4a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d4e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011d52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011d54:	4b0c      	ldr	r3, [pc, #48]	@ (8011d88 <find_volume+0x504>)
 8011d56:	881b      	ldrh	r3, [r3, #0]
 8011d58:	3301      	adds	r3, #1
 8011d5a:	b29a      	uxth	r2, r3
 8011d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8011d88 <find_volume+0x504>)
 8011d5e:	801a      	strh	r2, [r3, #0]
 8011d60:	4b09      	ldr	r3, [pc, #36]	@ (8011d88 <find_volume+0x504>)
 8011d62:	881a      	ldrh	r2, [r3, #0]
 8011d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d66:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d6a:	4a08      	ldr	r2, [pc, #32]	@ (8011d8c <find_volume+0x508>)
 8011d6c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011d6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011d70:	f7fe f954 	bl	801001c <clear_lock>
#endif
	return FR_OK;
 8011d74:	2300      	movs	r3, #0
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3758      	adds	r7, #88	@ 0x58
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}
 8011d7e:	bf00      	nop
 8011d80:	41615252 	.word	0x41615252
 8011d84:	61417272 	.word	0x61417272
 8011d88:	20002d5c 	.word	0x20002d5c
 8011d8c:	20002d80 	.word	0x20002d80

08011d90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011d9a:	2309      	movs	r3, #9
 8011d9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d01c      	beq.n	8011dde <validate+0x4e>
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d018      	beq.n	8011dde <validate+0x4e>
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d013      	beq.n	8011dde <validate+0x4e>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	889a      	ldrh	r2, [r3, #4]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	88db      	ldrh	r3, [r3, #6]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d10c      	bne.n	8011dde <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	785b      	ldrb	r3, [r3, #1]
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7fd fe3c 	bl	800fa48 <disk_status>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	f003 0301 	and.w	r3, r3, #1
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d101      	bne.n	8011dde <validate+0x4e>
			res = FR_OK;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011dde:	7bfb      	ldrb	r3, [r7, #15]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d102      	bne.n	8011dea <validate+0x5a>
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	e000      	b.n	8011dec <validate+0x5c>
 8011dea:	2300      	movs	r3, #0
 8011dec:	683a      	ldr	r2, [r7, #0]
 8011dee:	6013      	str	r3, [r2, #0]
	return res;
 8011df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3710      	adds	r7, #16
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
	...

08011dfc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b088      	sub	sp, #32
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	4613      	mov	r3, r2
 8011e08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011e0e:	f107 0310 	add.w	r3, r7, #16
 8011e12:	4618      	mov	r0, r3
 8011e14:	f7ff fc9c 	bl	8011750 <get_ldnumber>
 8011e18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011e1a:	69fb      	ldr	r3, [r7, #28]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	da01      	bge.n	8011e24 <f_mount+0x28>
 8011e20:	230b      	movs	r3, #11
 8011e22:	e02b      	b.n	8011e7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011e24:	4a17      	ldr	r2, [pc, #92]	@ (8011e84 <f_mount+0x88>)
 8011e26:	69fb      	ldr	r3, [r7, #28]
 8011e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011e2e:	69bb      	ldr	r3, [r7, #24]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d005      	beq.n	8011e40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011e34:	69b8      	ldr	r0, [r7, #24]
 8011e36:	f7fe f8f1 	bl	801001c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011e3a:	69bb      	ldr	r3, [r7, #24]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d002      	beq.n	8011e4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011e4c:	68fa      	ldr	r2, [r7, #12]
 8011e4e:	490d      	ldr	r1, [pc, #52]	@ (8011e84 <f_mount+0x88>)
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d002      	beq.n	8011e62 <f_mount+0x66>
 8011e5c:	79fb      	ldrb	r3, [r7, #7]
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d001      	beq.n	8011e66 <f_mount+0x6a>
 8011e62:	2300      	movs	r3, #0
 8011e64:	e00a      	b.n	8011e7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011e66:	f107 010c 	add.w	r1, r7, #12
 8011e6a:	f107 0308 	add.w	r3, r7, #8
 8011e6e:	2200      	movs	r2, #0
 8011e70:	4618      	mov	r0, r3
 8011e72:	f7ff fd07 	bl	8011884 <find_volume>
 8011e76:	4603      	mov	r3, r0
 8011e78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3720      	adds	r7, #32
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}
 8011e84:	20002d58 	.word	0x20002d58

08011e88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b09a      	sub	sp, #104	@ 0x68
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	4613      	mov	r3, r2
 8011e94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d101      	bne.n	8011ea0 <f_open+0x18>
 8011e9c:	2309      	movs	r3, #9
 8011e9e:	e1b7      	b.n	8012210 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011ea0:	79fb      	ldrb	r3, [r7, #7]
 8011ea2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011ea6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011ea8:	79fa      	ldrb	r2, [r7, #7]
 8011eaa:	f107 0114 	add.w	r1, r7, #20
 8011eae:	f107 0308 	add.w	r3, r7, #8
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7ff fce6 	bl	8011884 <find_volume>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8011ebe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	f040 819b 	bne.w	80121fe <f_open+0x376>
		dj.obj.fs = fs;
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011ecc:	68ba      	ldr	r2, [r7, #8]
 8011ece:	f107 0318 	add.w	r3, r7, #24
 8011ed2:	4611      	mov	r1, r2
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7ff fbc5 	bl	8011664 <follow_path>
 8011eda:	4603      	mov	r3, r0
 8011edc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011ee0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d118      	bne.n	8011f1a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011ee8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011eec:	b25b      	sxtb	r3, r3
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	da03      	bge.n	8011efa <f_open+0x72>
				res = FR_INVALID_NAME;
 8011ef2:	2306      	movs	r3, #6
 8011ef4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011ef8:	e00f      	b.n	8011f1a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011efa:	79fb      	ldrb	r3, [r7, #7]
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	bf8c      	ite	hi
 8011f00:	2301      	movhi	r3, #1
 8011f02:	2300      	movls	r3, #0
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	461a      	mov	r2, r3
 8011f08:	f107 0318 	add.w	r3, r7, #24
 8011f0c:	4611      	mov	r1, r2
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f7fd ff3c 	bl	800fd8c <chk_lock>
 8011f14:	4603      	mov	r3, r0
 8011f16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011f1a:	79fb      	ldrb	r3, [r7, #7]
 8011f1c:	f003 031c 	and.w	r3, r3, #28
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d07f      	beq.n	8012024 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8011f24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d017      	beq.n	8011f5c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011f2c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011f30:	2b04      	cmp	r3, #4
 8011f32:	d10e      	bne.n	8011f52 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011f34:	f7fd ff86 	bl	800fe44 <enq_lock>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d006      	beq.n	8011f4c <f_open+0xc4>
 8011f3e:	f107 0318 	add.w	r3, r7, #24
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7ff f8de 	bl	8011104 <dir_register>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	e000      	b.n	8011f4e <f_open+0xc6>
 8011f4c:	2312      	movs	r3, #18
 8011f4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011f52:	79fb      	ldrb	r3, [r7, #7]
 8011f54:	f043 0308 	orr.w	r3, r3, #8
 8011f58:	71fb      	strb	r3, [r7, #7]
 8011f5a:	e010      	b.n	8011f7e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011f5c:	7fbb      	ldrb	r3, [r7, #30]
 8011f5e:	f003 0311 	and.w	r3, r3, #17
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d003      	beq.n	8011f6e <f_open+0xe6>
					res = FR_DENIED;
 8011f66:	2307      	movs	r3, #7
 8011f68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011f6c:	e007      	b.n	8011f7e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011f6e:	79fb      	ldrb	r3, [r7, #7]
 8011f70:	f003 0304 	and.w	r3, r3, #4
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d002      	beq.n	8011f7e <f_open+0xf6>
 8011f78:	2308      	movs	r3, #8
 8011f7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011f7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d168      	bne.n	8012058 <f_open+0x1d0>
 8011f86:	79fb      	ldrb	r3, [r7, #7]
 8011f88:	f003 0308 	and.w	r3, r3, #8
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d063      	beq.n	8012058 <f_open+0x1d0>
				dw = GET_FATTIME();
 8011f90:	f7fb fd0c 	bl	800d9ac <get_fattime>
 8011f94:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f98:	330e      	adds	r3, #14
 8011f9a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7fd fe4a 	bl	800fc36 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fa4:	3316      	adds	r3, #22
 8011fa6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fd fe44 	bl	800fc36 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fb0:	330b      	adds	r3, #11
 8011fb2:	2220      	movs	r2, #32
 8011fb4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011fba:	4611      	mov	r1, r2
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7fe fe1a 	bl	8010bf6 <ld_clust>
 8011fc2:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011fc8:	2200      	movs	r2, #0
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f7fe fe32 	bl	8010c34 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fd2:	331c      	adds	r3, #28
 8011fd4:	2100      	movs	r1, #0
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fd fe2d 	bl	800fc36 <st_dword>
					fs->wflag = 1;
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	2201      	movs	r2, #1
 8011fe0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d037      	beq.n	8012058 <f_open+0x1d0>
						dw = fs->winsect;
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fec:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8011fee:	f107 0318 	add.w	r3, r7, #24
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7fe fb22 	bl	8010640 <remove_chain>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8012002:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012006:	2b00      	cmp	r3, #0
 8012008:	d126      	bne.n	8012058 <f_open+0x1d0>
							res = move_window(fs, dw);
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801200e:	4618      	mov	r0, r3
 8012010:	f7fe f86c 	bl	80100ec <move_window>
 8012014:	4603      	mov	r3, r0
 8012016:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801201e:	3a01      	subs	r2, #1
 8012020:	615a      	str	r2, [r3, #20]
 8012022:	e019      	b.n	8012058 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012024:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012028:	2b00      	cmp	r3, #0
 801202a:	d115      	bne.n	8012058 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801202c:	7fbb      	ldrb	r3, [r7, #30]
 801202e:	f003 0310 	and.w	r3, r3, #16
 8012032:	2b00      	cmp	r3, #0
 8012034:	d003      	beq.n	801203e <f_open+0x1b6>
					res = FR_NO_FILE;
 8012036:	2304      	movs	r3, #4
 8012038:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801203c:	e00c      	b.n	8012058 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801203e:	79fb      	ldrb	r3, [r7, #7]
 8012040:	f003 0302 	and.w	r3, r3, #2
 8012044:	2b00      	cmp	r3, #0
 8012046:	d007      	beq.n	8012058 <f_open+0x1d0>
 8012048:	7fbb      	ldrb	r3, [r7, #30]
 801204a:	f003 0301 	and.w	r3, r3, #1
 801204e:	2b00      	cmp	r3, #0
 8012050:	d002      	beq.n	8012058 <f_open+0x1d0>
						res = FR_DENIED;
 8012052:	2307      	movs	r3, #7
 8012054:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012058:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801205c:	2b00      	cmp	r3, #0
 801205e:	d126      	bne.n	80120ae <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012060:	79fb      	ldrb	r3, [r7, #7]
 8012062:	f003 0308 	and.w	r3, r3, #8
 8012066:	2b00      	cmp	r3, #0
 8012068:	d003      	beq.n	8012072 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801206a:	79fb      	ldrb	r3, [r7, #7]
 801206c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012070:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801207a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012080:	79fb      	ldrb	r3, [r7, #7]
 8012082:	2b01      	cmp	r3, #1
 8012084:	bf8c      	ite	hi
 8012086:	2301      	movhi	r3, #1
 8012088:	2300      	movls	r3, #0
 801208a:	b2db      	uxtb	r3, r3
 801208c:	461a      	mov	r2, r3
 801208e:	f107 0318 	add.w	r3, r7, #24
 8012092:	4611      	mov	r1, r2
 8012094:	4618      	mov	r0, r3
 8012096:	f7fd fef7 	bl	800fe88 <inc_lock>
 801209a:	4602      	mov	r2, r0
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	691b      	ldr	r3, [r3, #16]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d102      	bne.n	80120ae <f_open+0x226>
 80120a8:	2302      	movs	r3, #2
 80120aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80120ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	f040 80a3 	bne.w	80121fe <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80120b8:	697b      	ldr	r3, [r7, #20]
 80120ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80120bc:	4611      	mov	r1, r2
 80120be:	4618      	mov	r0, r3
 80120c0:	f7fe fd99 	bl	8010bf6 <ld_clust>
 80120c4:	4602      	mov	r2, r0
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80120ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120cc:	331c      	adds	r3, #28
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7fd fd73 	bl	800fbba <ld_dword>
 80120d4:	4602      	mov	r2, r0
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	2200      	movs	r2, #0
 80120de:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80120e0:	697a      	ldr	r2, [r7, #20]
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	88da      	ldrh	r2, [r3, #6]
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	79fa      	ldrb	r2, [r7, #7]
 80120f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	2200      	movs	r2, #0
 80120f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	2200      	movs	r2, #0
 80120fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	2200      	movs	r2, #0
 8012104:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	3330      	adds	r3, #48	@ 0x30
 801210a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801210e:	2100      	movs	r1, #0
 8012110:	4618      	mov	r0, r3
 8012112:	f7fd fddd 	bl	800fcd0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012116:	79fb      	ldrb	r3, [r7, #7]
 8012118:	f003 0320 	and.w	r3, r3, #32
 801211c:	2b00      	cmp	r3, #0
 801211e:	d06e      	beq.n	80121fe <f_open+0x376>
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	68db      	ldr	r3, [r3, #12]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d06a      	beq.n	80121fe <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	68da      	ldr	r2, [r3, #12]
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	895b      	ldrh	r3, [r3, #10]
 8012134:	461a      	mov	r2, r3
 8012136:	697b      	ldr	r3, [r7, #20]
 8012138:	899b      	ldrh	r3, [r3, #12]
 801213a:	fb02 f303 	mul.w	r3, r2, r3
 801213e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	689b      	ldr	r3, [r3, #8]
 8012144:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	68db      	ldr	r3, [r3, #12]
 801214a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801214c:	e016      	b.n	801217c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012152:	4618      	mov	r0, r3
 8012154:	f7fe f887 	bl	8010266 <get_fat>
 8012158:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801215a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801215c:	2b01      	cmp	r3, #1
 801215e:	d802      	bhi.n	8012166 <f_open+0x2de>
 8012160:	2302      	movs	r3, #2
 8012162:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012166:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801216c:	d102      	bne.n	8012174 <f_open+0x2ec>
 801216e:	2301      	movs	r3, #1
 8012170:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012174:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801217c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012180:	2b00      	cmp	r3, #0
 8012182:	d103      	bne.n	801218c <f_open+0x304>
 8012184:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012188:	429a      	cmp	r2, r3
 801218a:	d8e0      	bhi.n	801214e <f_open+0x2c6>
				}
				fp->clust = clst;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012190:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012192:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012196:	2b00      	cmp	r3, #0
 8012198:	d131      	bne.n	80121fe <f_open+0x376>
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	899b      	ldrh	r3, [r3, #12]
 801219e:	461a      	mov	r2, r3
 80121a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80121a6:	fb01 f202 	mul.w	r2, r1, r2
 80121aa:	1a9b      	subs	r3, r3, r2
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d026      	beq.n	80121fe <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7fe f837 	bl	8010228 <clust2sect>
 80121ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80121bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d103      	bne.n	80121ca <f_open+0x342>
						res = FR_INT_ERR;
 80121c2:	2302      	movs	r3, #2
 80121c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80121c8:	e019      	b.n	80121fe <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	899b      	ldrh	r3, [r3, #12]
 80121ce:	461a      	mov	r2, r3
 80121d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80121d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121d8:	441a      	add	r2, r3
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80121de:	697b      	ldr	r3, [r7, #20]
 80121e0:	7858      	ldrb	r0, [r3, #1]
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	6a1a      	ldr	r2, [r3, #32]
 80121ec:	2301      	movs	r3, #1
 80121ee:	f7fd fc6d 	bl	800facc <disk_read>
 80121f2:	4603      	mov	r3, r0
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d002      	beq.n	80121fe <f_open+0x376>
 80121f8:	2301      	movs	r3, #1
 80121fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80121fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012202:	2b00      	cmp	r3, #0
 8012204:	d002      	beq.n	801220c <f_open+0x384>
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	2200      	movs	r2, #0
 801220a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801220c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8012210:	4618      	mov	r0, r3
 8012212:	3768      	adds	r7, #104	@ 0x68
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}

08012218 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b08c      	sub	sp, #48	@ 0x30
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	60b9      	str	r1, [r7, #8]
 8012222:	607a      	str	r2, [r7, #4]
 8012224:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	2200      	movs	r2, #0
 801222e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	f107 0210 	add.w	r2, r7, #16
 8012236:	4611      	mov	r1, r2
 8012238:	4618      	mov	r0, r3
 801223a:	f7ff fda9 	bl	8011d90 <validate>
 801223e:	4603      	mov	r3, r0
 8012240:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012244:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012248:	2b00      	cmp	r3, #0
 801224a:	d107      	bne.n	801225c <f_write+0x44>
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	7d5b      	ldrb	r3, [r3, #21]
 8012250:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012254:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012258:	2b00      	cmp	r3, #0
 801225a:	d002      	beq.n	8012262 <f_write+0x4a>
 801225c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012260:	e16a      	b.n	8012538 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	7d1b      	ldrb	r3, [r3, #20]
 8012266:	f003 0302 	and.w	r3, r3, #2
 801226a:	2b00      	cmp	r3, #0
 801226c:	d101      	bne.n	8012272 <f_write+0x5a>
 801226e:	2307      	movs	r3, #7
 8012270:	e162      	b.n	8012538 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	699a      	ldr	r2, [r3, #24]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	441a      	add	r2, r3
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	699b      	ldr	r3, [r3, #24]
 801227e:	429a      	cmp	r2, r3
 8012280:	f080 814c 	bcs.w	801251c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	699b      	ldr	r3, [r3, #24]
 8012288:	43db      	mvns	r3, r3
 801228a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801228c:	e146      	b.n	801251c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	699b      	ldr	r3, [r3, #24]
 8012292:	693a      	ldr	r2, [r7, #16]
 8012294:	8992      	ldrh	r2, [r2, #12]
 8012296:	fbb3 f1f2 	udiv	r1, r3, r2
 801229a:	fb01 f202 	mul.w	r2, r1, r2
 801229e:	1a9b      	subs	r3, r3, r2
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	f040 80f1 	bne.w	8012488 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	699b      	ldr	r3, [r3, #24]
 80122aa:	693a      	ldr	r2, [r7, #16]
 80122ac:	8992      	ldrh	r2, [r2, #12]
 80122ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80122b2:	693a      	ldr	r2, [r7, #16]
 80122b4:	8952      	ldrh	r2, [r2, #10]
 80122b6:	3a01      	subs	r2, #1
 80122b8:	4013      	ands	r3, r2
 80122ba:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80122bc:	69bb      	ldr	r3, [r7, #24]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d143      	bne.n	801234a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	699b      	ldr	r3, [r3, #24]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d10c      	bne.n	80122e4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	689b      	ldr	r3, [r3, #8]
 80122ce:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80122d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d11a      	bne.n	801230c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2100      	movs	r1, #0
 80122da:	4618      	mov	r0, r3
 80122dc:	f7fe fa15 	bl	801070a <create_chain>
 80122e0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80122e2:	e013      	b.n	801230c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d007      	beq.n	80122fc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	699b      	ldr	r3, [r3, #24]
 80122f0:	4619      	mov	r1, r3
 80122f2:	68f8      	ldr	r0, [r7, #12]
 80122f4:	f7fe faa1 	bl	801083a <clmt_clust>
 80122f8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80122fa:	e007      	b.n	801230c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80122fc:	68fa      	ldr	r2, [r7, #12]
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	69db      	ldr	r3, [r3, #28]
 8012302:	4619      	mov	r1, r3
 8012304:	4610      	mov	r0, r2
 8012306:	f7fe fa00 	bl	801070a <create_chain>
 801230a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801230c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801230e:	2b00      	cmp	r3, #0
 8012310:	f000 8109 	beq.w	8012526 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012316:	2b01      	cmp	r3, #1
 8012318:	d104      	bne.n	8012324 <f_write+0x10c>
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	2202      	movs	r2, #2
 801231e:	755a      	strb	r2, [r3, #21]
 8012320:	2302      	movs	r3, #2
 8012322:	e109      	b.n	8012538 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801232a:	d104      	bne.n	8012336 <f_write+0x11e>
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2201      	movs	r2, #1
 8012330:	755a      	strb	r2, [r3, #21]
 8012332:	2301      	movs	r3, #1
 8012334:	e100      	b.n	8012538 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801233a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	689b      	ldr	r3, [r3, #8]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d102      	bne.n	801234a <f_write+0x132>
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012348:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	7d1b      	ldrb	r3, [r3, #20]
 801234e:	b25b      	sxtb	r3, r3
 8012350:	2b00      	cmp	r3, #0
 8012352:	da18      	bge.n	8012386 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	7858      	ldrb	r0, [r3, #1]
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	6a1a      	ldr	r2, [r3, #32]
 8012362:	2301      	movs	r3, #1
 8012364:	f7fd fbd2 	bl	800fb0c <disk_write>
 8012368:	4603      	mov	r3, r0
 801236a:	2b00      	cmp	r3, #0
 801236c:	d004      	beq.n	8012378 <f_write+0x160>
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	2201      	movs	r2, #1
 8012372:	755a      	strb	r2, [r3, #21]
 8012374:	2301      	movs	r3, #1
 8012376:	e0df      	b.n	8012538 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	7d1b      	ldrb	r3, [r3, #20]
 801237c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012380:	b2da      	uxtb	r2, r3
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012386:	693a      	ldr	r2, [r7, #16]
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	69db      	ldr	r3, [r3, #28]
 801238c:	4619      	mov	r1, r3
 801238e:	4610      	mov	r0, r2
 8012390:	f7fd ff4a 	bl	8010228 <clust2sect>
 8012394:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d104      	bne.n	80123a6 <f_write+0x18e>
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	2202      	movs	r2, #2
 80123a0:	755a      	strb	r2, [r3, #21]
 80123a2:	2302      	movs	r3, #2
 80123a4:	e0c8      	b.n	8012538 <f_write+0x320>
			sect += csect;
 80123a6:	697a      	ldr	r2, [r7, #20]
 80123a8:	69bb      	ldr	r3, [r7, #24]
 80123aa:	4413      	add	r3, r2
 80123ac:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80123ae:	693b      	ldr	r3, [r7, #16]
 80123b0:	899b      	ldrh	r3, [r3, #12]
 80123b2:	461a      	mov	r2, r3
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80123ba:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80123bc:	6a3b      	ldr	r3, [r7, #32]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d043      	beq.n	801244a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80123c2:	69ba      	ldr	r2, [r7, #24]
 80123c4:	6a3b      	ldr	r3, [r7, #32]
 80123c6:	4413      	add	r3, r2
 80123c8:	693a      	ldr	r2, [r7, #16]
 80123ca:	8952      	ldrh	r2, [r2, #10]
 80123cc:	4293      	cmp	r3, r2
 80123ce:	d905      	bls.n	80123dc <f_write+0x1c4>
					cc = fs->csize - csect;
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	895b      	ldrh	r3, [r3, #10]
 80123d4:	461a      	mov	r2, r3
 80123d6:	69bb      	ldr	r3, [r7, #24]
 80123d8:	1ad3      	subs	r3, r2, r3
 80123da:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	7858      	ldrb	r0, [r3, #1]
 80123e0:	6a3b      	ldr	r3, [r7, #32]
 80123e2:	697a      	ldr	r2, [r7, #20]
 80123e4:	69f9      	ldr	r1, [r7, #28]
 80123e6:	f7fd fb91 	bl	800fb0c <disk_write>
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d004      	beq.n	80123fa <f_write+0x1e2>
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	2201      	movs	r2, #1
 80123f4:	755a      	strb	r2, [r3, #21]
 80123f6:	2301      	movs	r3, #1
 80123f8:	e09e      	b.n	8012538 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	6a1a      	ldr	r2, [r3, #32]
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	1ad3      	subs	r3, r2, r3
 8012402:	6a3a      	ldr	r2, [r7, #32]
 8012404:	429a      	cmp	r2, r3
 8012406:	d918      	bls.n	801243a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	6a1a      	ldr	r2, [r3, #32]
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	1ad3      	subs	r3, r2, r3
 8012416:	693a      	ldr	r2, [r7, #16]
 8012418:	8992      	ldrh	r2, [r2, #12]
 801241a:	fb02 f303 	mul.w	r3, r2, r3
 801241e:	69fa      	ldr	r2, [r7, #28]
 8012420:	18d1      	adds	r1, r2, r3
 8012422:	693b      	ldr	r3, [r7, #16]
 8012424:	899b      	ldrh	r3, [r3, #12]
 8012426:	461a      	mov	r2, r3
 8012428:	f7fd fc31 	bl	800fc8e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	7d1b      	ldrb	r3, [r3, #20]
 8012430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012434:	b2da      	uxtb	r2, r3
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	899b      	ldrh	r3, [r3, #12]
 801243e:	461a      	mov	r2, r3
 8012440:	6a3b      	ldr	r3, [r7, #32]
 8012442:	fb02 f303 	mul.w	r3, r2, r3
 8012446:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8012448:	e04b      	b.n	80124e2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	6a1b      	ldr	r3, [r3, #32]
 801244e:	697a      	ldr	r2, [r7, #20]
 8012450:	429a      	cmp	r2, r3
 8012452:	d016      	beq.n	8012482 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	699a      	ldr	r2, [r3, #24]
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801245c:	429a      	cmp	r2, r3
 801245e:	d210      	bcs.n	8012482 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	7858      	ldrb	r0, [r3, #1]
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801246a:	2301      	movs	r3, #1
 801246c:	697a      	ldr	r2, [r7, #20]
 801246e:	f7fd fb2d 	bl	800facc <disk_read>
 8012472:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012474:	2b00      	cmp	r3, #0
 8012476:	d004      	beq.n	8012482 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	2201      	movs	r2, #1
 801247c:	755a      	strb	r2, [r3, #21]
 801247e:	2301      	movs	r3, #1
 8012480:	e05a      	b.n	8012538 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	697a      	ldr	r2, [r7, #20]
 8012486:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	899b      	ldrh	r3, [r3, #12]
 801248c:	4618      	mov	r0, r3
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	699b      	ldr	r3, [r3, #24]
 8012492:	693a      	ldr	r2, [r7, #16]
 8012494:	8992      	ldrh	r2, [r2, #12]
 8012496:	fbb3 f1f2 	udiv	r1, r3, r2
 801249a:	fb01 f202 	mul.w	r2, r1, r2
 801249e:	1a9b      	subs	r3, r3, r2
 80124a0:	1ac3      	subs	r3, r0, r3
 80124a2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80124a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d901      	bls.n	80124b0 <f_write+0x298>
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	699b      	ldr	r3, [r3, #24]
 80124ba:	693a      	ldr	r2, [r7, #16]
 80124bc:	8992      	ldrh	r2, [r2, #12]
 80124be:	fbb3 f0f2 	udiv	r0, r3, r2
 80124c2:	fb00 f202 	mul.w	r2, r0, r2
 80124c6:	1a9b      	subs	r3, r3, r2
 80124c8:	440b      	add	r3, r1
 80124ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124cc:	69f9      	ldr	r1, [r7, #28]
 80124ce:	4618      	mov	r0, r3
 80124d0:	f7fd fbdd 	bl	800fc8e <mem_cpy>
		fp->flag |= FA_DIRTY;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	7d1b      	ldrb	r3, [r3, #20]
 80124d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80124dc:	b2da      	uxtb	r2, r3
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80124e2:	69fa      	ldr	r2, [r7, #28]
 80124e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124e6:	4413      	add	r3, r2
 80124e8:	61fb      	str	r3, [r7, #28]
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	699a      	ldr	r2, [r3, #24]
 80124ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124f0:	441a      	add	r2, r3
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	619a      	str	r2, [r3, #24]
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	68da      	ldr	r2, [r3, #12]
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	699b      	ldr	r3, [r3, #24]
 80124fe:	429a      	cmp	r2, r3
 8012500:	bf38      	it	cc
 8012502:	461a      	movcc	r2, r3
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	60da      	str	r2, [r3, #12]
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801250e:	441a      	add	r2, r3
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	601a      	str	r2, [r3, #0]
 8012514:	687a      	ldr	r2, [r7, #4]
 8012516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012518:	1ad3      	subs	r3, r2, r3
 801251a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2b00      	cmp	r3, #0
 8012520:	f47f aeb5 	bne.w	801228e <f_write+0x76>
 8012524:	e000      	b.n	8012528 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012526:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	7d1b      	ldrb	r3, [r3, #20]
 801252c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012530:	b2da      	uxtb	r2, r3
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012536:	2300      	movs	r3, #0
}
 8012538:	4618      	mov	r0, r3
 801253a:	3730      	adds	r7, #48	@ 0x30
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b086      	sub	sp, #24
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f107 0208 	add.w	r2, r7, #8
 801254e:	4611      	mov	r1, r2
 8012550:	4618      	mov	r0, r3
 8012552:	f7ff fc1d 	bl	8011d90 <validate>
 8012556:	4603      	mov	r3, r0
 8012558:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801255a:	7dfb      	ldrb	r3, [r7, #23]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d168      	bne.n	8012632 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	7d1b      	ldrb	r3, [r3, #20]
 8012564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012568:	2b00      	cmp	r3, #0
 801256a:	d062      	beq.n	8012632 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	7d1b      	ldrb	r3, [r3, #20]
 8012570:	b25b      	sxtb	r3, r3
 8012572:	2b00      	cmp	r3, #0
 8012574:	da15      	bge.n	80125a2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	7858      	ldrb	r0, [r3, #1]
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	6a1a      	ldr	r2, [r3, #32]
 8012584:	2301      	movs	r3, #1
 8012586:	f7fd fac1 	bl	800fb0c <disk_write>
 801258a:	4603      	mov	r3, r0
 801258c:	2b00      	cmp	r3, #0
 801258e:	d001      	beq.n	8012594 <f_sync+0x54>
 8012590:	2301      	movs	r3, #1
 8012592:	e04f      	b.n	8012634 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	7d1b      	ldrb	r3, [r3, #20]
 8012598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801259c:	b2da      	uxtb	r2, r3
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80125a2:	f7fb fa03 	bl	800d9ac <get_fattime>
 80125a6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80125a8:	68ba      	ldr	r2, [r7, #8]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125ae:	4619      	mov	r1, r3
 80125b0:	4610      	mov	r0, r2
 80125b2:	f7fd fd9b 	bl	80100ec <move_window>
 80125b6:	4603      	mov	r3, r0
 80125b8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80125ba:	7dfb      	ldrb	r3, [r7, #23]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d138      	bne.n	8012632 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125c4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	330b      	adds	r3, #11
 80125ca:	781a      	ldrb	r2, [r3, #0]
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	330b      	adds	r3, #11
 80125d0:	f042 0220 	orr.w	r2, r2, #32
 80125d4:	b2d2      	uxtb	r2, r2
 80125d6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	6818      	ldr	r0, [r3, #0]
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	689b      	ldr	r3, [r3, #8]
 80125e0:	461a      	mov	r2, r3
 80125e2:	68f9      	ldr	r1, [r7, #12]
 80125e4:	f7fe fb26 	bl	8010c34 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	f103 021c 	add.w	r2, r3, #28
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	68db      	ldr	r3, [r3, #12]
 80125f2:	4619      	mov	r1, r3
 80125f4:	4610      	mov	r0, r2
 80125f6:	f7fd fb1e 	bl	800fc36 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	3316      	adds	r3, #22
 80125fe:	6939      	ldr	r1, [r7, #16]
 8012600:	4618      	mov	r0, r3
 8012602:	f7fd fb18 	bl	800fc36 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	3312      	adds	r3, #18
 801260a:	2100      	movs	r1, #0
 801260c:	4618      	mov	r0, r3
 801260e:	f7fd faf7 	bl	800fc00 <st_word>
					fs->wflag = 1;
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	2201      	movs	r2, #1
 8012616:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	4618      	mov	r0, r3
 801261c:	f7fd fd94 	bl	8010148 <sync_fs>
 8012620:	4603      	mov	r3, r0
 8012622:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	7d1b      	ldrb	r3, [r3, #20]
 8012628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801262c:	b2da      	uxtb	r2, r3
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012632:	7dfb      	ldrb	r3, [r7, #23]
}
 8012634:	4618      	mov	r0, r3
 8012636:	3718      	adds	r7, #24
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b084      	sub	sp, #16
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f7ff ff7b 	bl	8012540 <f_sync>
 801264a:	4603      	mov	r3, r0
 801264c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801264e:	7bfb      	ldrb	r3, [r7, #15]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d118      	bne.n	8012686 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f107 0208 	add.w	r2, r7, #8
 801265a:	4611      	mov	r1, r2
 801265c:	4618      	mov	r0, r3
 801265e:	f7ff fb97 	bl	8011d90 <validate>
 8012662:	4603      	mov	r3, r0
 8012664:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012666:	7bfb      	ldrb	r3, [r7, #15]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d10c      	bne.n	8012686 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	691b      	ldr	r3, [r3, #16]
 8012670:	4618      	mov	r0, r3
 8012672:	f7fd fc97 	bl	800ffa4 <dec_lock>
 8012676:	4603      	mov	r3, r0
 8012678:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801267a:	7bfb      	ldrb	r3, [r7, #15]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d102      	bne.n	8012686 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2200      	movs	r2, #0
 8012684:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012686:	7bfb      	ldrb	r3, [r7, #15]
}
 8012688:	4618      	mov	r0, r3
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b090      	sub	sp, #64	@ 0x40
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f107 0208 	add.w	r2, r7, #8
 80126a0:	4611      	mov	r1, r2
 80126a2:	4618      	mov	r0, r3
 80126a4:	f7ff fb74 	bl	8011d90 <validate>
 80126a8:	4603      	mov	r3, r0
 80126aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80126ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d103      	bne.n	80126be <f_lseek+0x2e>
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	7d5b      	ldrb	r3, [r3, #21]
 80126ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80126be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d002      	beq.n	80126cc <f_lseek+0x3c>
 80126c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80126ca:	e201      	b.n	8012ad0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	f000 80d9 	beq.w	8012888 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126dc:	d15a      	bne.n	8012794 <f_lseek+0x104>
			tbl = fp->cltbl;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126e2:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80126e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126e6:	1d1a      	adds	r2, r3, #4
 80126e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	617b      	str	r3, [r7, #20]
 80126ee:	2302      	movs	r3, #2
 80126f0:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	689b      	ldr	r3, [r3, #8]
 80126f6:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80126f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d03a      	beq.n	8012774 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80126fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012700:	613b      	str	r3, [r7, #16]
 8012702:	2300      	movs	r3, #0
 8012704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012708:	3302      	adds	r3, #2
 801270a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801270c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801270e:	60fb      	str	r3, [r7, #12]
 8012710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012712:	3301      	adds	r3, #1
 8012714:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801271a:	4618      	mov	r0, r3
 801271c:	f7fd fda3 	bl	8010266 <get_fat>
 8012720:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012724:	2b01      	cmp	r3, #1
 8012726:	d804      	bhi.n	8012732 <f_lseek+0xa2>
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2202      	movs	r2, #2
 801272c:	755a      	strb	r2, [r3, #21]
 801272e:	2302      	movs	r3, #2
 8012730:	e1ce      	b.n	8012ad0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012738:	d104      	bne.n	8012744 <f_lseek+0xb4>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2201      	movs	r2, #1
 801273e:	755a      	strb	r2, [r3, #21]
 8012740:	2301      	movs	r3, #1
 8012742:	e1c5      	b.n	8012ad0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	3301      	adds	r3, #1
 8012748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801274a:	429a      	cmp	r2, r3
 801274c:	d0de      	beq.n	801270c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801274e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	429a      	cmp	r2, r3
 8012754:	d809      	bhi.n	801276a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012758:	1d1a      	adds	r2, r3, #4
 801275a:	627a      	str	r2, [r7, #36]	@ 0x24
 801275c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801275e:	601a      	str	r2, [r3, #0]
 8012760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012762:	1d1a      	adds	r2, r3, #4
 8012764:	627a      	str	r2, [r7, #36]	@ 0x24
 8012766:	693a      	ldr	r2, [r7, #16]
 8012768:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	69db      	ldr	r3, [r3, #28]
 801276e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012770:	429a      	cmp	r2, r3
 8012772:	d3c4      	bcc.n	80126fe <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801277a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801277c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801277e:	697b      	ldr	r3, [r7, #20]
 8012780:	429a      	cmp	r2, r3
 8012782:	d803      	bhi.n	801278c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012786:	2200      	movs	r2, #0
 8012788:	601a      	str	r2, [r3, #0]
 801278a:	e19f      	b.n	8012acc <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801278c:	2311      	movs	r3, #17
 801278e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8012792:	e19b      	b.n	8012acc <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	683a      	ldr	r2, [r7, #0]
 801279a:	429a      	cmp	r2, r3
 801279c:	d902      	bls.n	80127a4 <f_lseek+0x114>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	68db      	ldr	r3, [r3, #12]
 80127a2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	683a      	ldr	r2, [r7, #0]
 80127a8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	f000 818d 	beq.w	8012acc <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	3b01      	subs	r3, #1
 80127b6:	4619      	mov	r1, r3
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	f7fe f83e 	bl	801083a <clmt_clust>
 80127be:	4602      	mov	r2, r0
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80127c4:	68ba      	ldr	r2, [r7, #8]
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	69db      	ldr	r3, [r3, #28]
 80127ca:	4619      	mov	r1, r3
 80127cc:	4610      	mov	r0, r2
 80127ce:	f7fd fd2b 	bl	8010228 <clust2sect>
 80127d2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80127d4:	69bb      	ldr	r3, [r7, #24]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d104      	bne.n	80127e4 <f_lseek+0x154>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2202      	movs	r2, #2
 80127de:	755a      	strb	r2, [r3, #21]
 80127e0:	2302      	movs	r3, #2
 80127e2:	e175      	b.n	8012ad0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	3b01      	subs	r3, #1
 80127e8:	68ba      	ldr	r2, [r7, #8]
 80127ea:	8992      	ldrh	r2, [r2, #12]
 80127ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80127f0:	68ba      	ldr	r2, [r7, #8]
 80127f2:	8952      	ldrh	r2, [r2, #10]
 80127f4:	3a01      	subs	r2, #1
 80127f6:	4013      	ands	r3, r2
 80127f8:	69ba      	ldr	r2, [r7, #24]
 80127fa:	4413      	add	r3, r2
 80127fc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	699b      	ldr	r3, [r3, #24]
 8012802:	68ba      	ldr	r2, [r7, #8]
 8012804:	8992      	ldrh	r2, [r2, #12]
 8012806:	fbb3 f1f2 	udiv	r1, r3, r2
 801280a:	fb01 f202 	mul.w	r2, r1, r2
 801280e:	1a9b      	subs	r3, r3, r2
 8012810:	2b00      	cmp	r3, #0
 8012812:	f000 815b 	beq.w	8012acc <f_lseek+0x43c>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6a1b      	ldr	r3, [r3, #32]
 801281a:	69ba      	ldr	r2, [r7, #24]
 801281c:	429a      	cmp	r2, r3
 801281e:	f000 8155 	beq.w	8012acc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	7d1b      	ldrb	r3, [r3, #20]
 8012826:	b25b      	sxtb	r3, r3
 8012828:	2b00      	cmp	r3, #0
 801282a:	da18      	bge.n	801285e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	7858      	ldrb	r0, [r3, #1]
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6a1a      	ldr	r2, [r3, #32]
 801283a:	2301      	movs	r3, #1
 801283c:	f7fd f966 	bl	800fb0c <disk_write>
 8012840:	4603      	mov	r3, r0
 8012842:	2b00      	cmp	r3, #0
 8012844:	d004      	beq.n	8012850 <f_lseek+0x1c0>
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	2201      	movs	r2, #1
 801284a:	755a      	strb	r2, [r3, #21]
 801284c:	2301      	movs	r3, #1
 801284e:	e13f      	b.n	8012ad0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	7d1b      	ldrb	r3, [r3, #20]
 8012854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012858:	b2da      	uxtb	r2, r3
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	7858      	ldrb	r0, [r3, #1]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012868:	2301      	movs	r3, #1
 801286a:	69ba      	ldr	r2, [r7, #24]
 801286c:	f7fd f92e 	bl	800facc <disk_read>
 8012870:	4603      	mov	r3, r0
 8012872:	2b00      	cmp	r3, #0
 8012874:	d004      	beq.n	8012880 <f_lseek+0x1f0>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2201      	movs	r2, #1
 801287a:	755a      	strb	r2, [r3, #21]
 801287c:	2301      	movs	r3, #1
 801287e:	e127      	b.n	8012ad0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	69ba      	ldr	r2, [r7, #24]
 8012884:	621a      	str	r2, [r3, #32]
 8012886:	e121      	b.n	8012acc <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	683a      	ldr	r2, [r7, #0]
 801288e:	429a      	cmp	r2, r3
 8012890:	d908      	bls.n	80128a4 <f_lseek+0x214>
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	7d1b      	ldrb	r3, [r3, #20]
 8012896:	f003 0302 	and.w	r3, r3, #2
 801289a:	2b00      	cmp	r3, #0
 801289c:	d102      	bne.n	80128a4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	68db      	ldr	r3, [r3, #12]
 80128a2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	699b      	ldr	r3, [r3, #24]
 80128a8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80128aa:	2300      	movs	r3, #0
 80128ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128b2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	f000 80b5 	beq.w	8012a26 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	895b      	ldrh	r3, [r3, #10]
 80128c0:	461a      	mov	r2, r3
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	899b      	ldrh	r3, [r3, #12]
 80128c6:	fb02 f303 	mul.w	r3, r2, r3
 80128ca:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80128cc:	6a3b      	ldr	r3, [r7, #32]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d01b      	beq.n	801290a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	1e5a      	subs	r2, r3, #1
 80128d6:	69fb      	ldr	r3, [r7, #28]
 80128d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80128dc:	6a3b      	ldr	r3, [r7, #32]
 80128de:	1e59      	subs	r1, r3, #1
 80128e0:	69fb      	ldr	r3, [r7, #28]
 80128e2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d30f      	bcc.n	801290a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80128ea:	6a3b      	ldr	r3, [r7, #32]
 80128ec:	1e5a      	subs	r2, r3, #1
 80128ee:	69fb      	ldr	r3, [r7, #28]
 80128f0:	425b      	negs	r3, r3
 80128f2:	401a      	ands	r2, r3
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	699b      	ldr	r3, [r3, #24]
 80128fc:	683a      	ldr	r2, [r7, #0]
 80128fe:	1ad3      	subs	r3, r2, r3
 8012900:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	69db      	ldr	r3, [r3, #28]
 8012906:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012908:	e022      	b.n	8012950 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	689b      	ldr	r3, [r3, #8]
 801290e:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012912:	2b00      	cmp	r3, #0
 8012914:	d119      	bne.n	801294a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2100      	movs	r1, #0
 801291a:	4618      	mov	r0, r3
 801291c:	f7fd fef5 	bl	801070a <create_chain>
 8012920:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012924:	2b01      	cmp	r3, #1
 8012926:	d104      	bne.n	8012932 <f_lseek+0x2a2>
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2202      	movs	r2, #2
 801292c:	755a      	strb	r2, [r3, #21]
 801292e:	2302      	movs	r3, #2
 8012930:	e0ce      	b.n	8012ad0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012938:	d104      	bne.n	8012944 <f_lseek+0x2b4>
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2201      	movs	r2, #1
 801293e:	755a      	strb	r2, [r3, #21]
 8012940:	2301      	movs	r3, #1
 8012942:	e0c5      	b.n	8012ad0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012948:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801294e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012952:	2b00      	cmp	r3, #0
 8012954:	d067      	beq.n	8012a26 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8012956:	e03a      	b.n	80129ce <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8012958:	683a      	ldr	r2, [r7, #0]
 801295a:	69fb      	ldr	r3, [r7, #28]
 801295c:	1ad3      	subs	r3, r2, r3
 801295e:	603b      	str	r3, [r7, #0]
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	699a      	ldr	r2, [r3, #24]
 8012964:	69fb      	ldr	r3, [r7, #28]
 8012966:	441a      	add	r2, r3
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	7d1b      	ldrb	r3, [r3, #20]
 8012970:	f003 0302 	and.w	r3, r3, #2
 8012974:	2b00      	cmp	r3, #0
 8012976:	d00b      	beq.n	8012990 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801297c:	4618      	mov	r0, r3
 801297e:	f7fd fec4 	bl	801070a <create_chain>
 8012982:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012986:	2b00      	cmp	r3, #0
 8012988:	d108      	bne.n	801299c <f_lseek+0x30c>
							ofs = 0; break;
 801298a:	2300      	movs	r3, #0
 801298c:	603b      	str	r3, [r7, #0]
 801298e:	e022      	b.n	80129d6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012994:	4618      	mov	r0, r3
 8012996:	f7fd fc66 	bl	8010266 <get_fat>
 801299a:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801299c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801299e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129a2:	d104      	bne.n	80129ae <f_lseek+0x31e>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2201      	movs	r2, #1
 80129a8:	755a      	strb	r2, [r3, #21]
 80129aa:	2301      	movs	r3, #1
 80129ac:	e090      	b.n	8012ad0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80129ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	d904      	bls.n	80129be <f_lseek+0x32e>
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	69db      	ldr	r3, [r3, #28]
 80129b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d304      	bcc.n	80129c8 <f_lseek+0x338>
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2202      	movs	r2, #2
 80129c2:	755a      	strb	r2, [r3, #21]
 80129c4:	2302      	movs	r3, #2
 80129c6:	e083      	b.n	8012ad0 <f_lseek+0x440>
					fp->clust = clst;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80129cc:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80129ce:	683a      	ldr	r2, [r7, #0]
 80129d0:	69fb      	ldr	r3, [r7, #28]
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d8c0      	bhi.n	8012958 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	699a      	ldr	r2, [r3, #24]
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	441a      	add	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	899b      	ldrh	r3, [r3, #12]
 80129e6:	461a      	mov	r2, r3
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80129ee:	fb01 f202 	mul.w	r2, r1, r2
 80129f2:	1a9b      	subs	r3, r3, r2
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d016      	beq.n	8012a26 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7fd fc13 	bl	8010228 <clust2sect>
 8012a02:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d104      	bne.n	8012a14 <f_lseek+0x384>
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2202      	movs	r2, #2
 8012a0e:	755a      	strb	r2, [r3, #21]
 8012a10:	2302      	movs	r3, #2
 8012a12:	e05d      	b.n	8012ad0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	899b      	ldrh	r3, [r3, #12]
 8012a18:	461a      	mov	r2, r3
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012a22:	4413      	add	r3, r2
 8012a24:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	699a      	ldr	r2, [r3, #24]
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	68db      	ldr	r3, [r3, #12]
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d90a      	bls.n	8012a48 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	699a      	ldr	r2, [r3, #24]
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	7d1b      	ldrb	r3, [r3, #20]
 8012a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a42:	b2da      	uxtb	r2, r3
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	699b      	ldr	r3, [r3, #24]
 8012a4c:	68ba      	ldr	r2, [r7, #8]
 8012a4e:	8992      	ldrh	r2, [r2, #12]
 8012a50:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a54:	fb01 f202 	mul.w	r2, r1, r2
 8012a58:	1a9b      	subs	r3, r3, r2
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d036      	beq.n	8012acc <f_lseek+0x43c>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6a1b      	ldr	r3, [r3, #32]
 8012a62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d031      	beq.n	8012acc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	7d1b      	ldrb	r3, [r3, #20]
 8012a6c:	b25b      	sxtb	r3, r3
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	da18      	bge.n	8012aa4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	7858      	ldrb	r0, [r3, #1]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6a1a      	ldr	r2, [r3, #32]
 8012a80:	2301      	movs	r3, #1
 8012a82:	f7fd f843 	bl	800fb0c <disk_write>
 8012a86:	4603      	mov	r3, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d004      	beq.n	8012a96 <f_lseek+0x406>
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2201      	movs	r2, #1
 8012a90:	755a      	strb	r2, [r3, #21]
 8012a92:	2301      	movs	r3, #1
 8012a94:	e01c      	b.n	8012ad0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	7d1b      	ldrb	r3, [r3, #20]
 8012a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012a9e:	b2da      	uxtb	r2, r3
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	7858      	ldrb	r0, [r3, #1]
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012aae:	2301      	movs	r3, #1
 8012ab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012ab2:	f7fd f80b 	bl	800facc <disk_read>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d004      	beq.n	8012ac6 <f_lseek+0x436>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2201      	movs	r2, #1
 8012ac0:	755a      	strb	r2, [r3, #21]
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	e004      	b.n	8012ad0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012aca:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012acc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3740      	adds	r7, #64	@ 0x40
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}

08012ad8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b084      	sub	sp, #16
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	460b      	mov	r3, r1
 8012ae2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8012ae4:	78fb      	ldrb	r3, [r7, #3]
 8012ae6:	2b0a      	cmp	r3, #10
 8012ae8:	d103      	bne.n	8012af2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8012aea:	210d      	movs	r1, #13
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f7ff fff3 	bl	8012ad8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	685b      	ldr	r3, [r3, #4]
 8012af6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	db25      	blt.n	8012b4a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	1c5a      	adds	r2, r3, #1
 8012b02:	60fa      	str	r2, [r7, #12]
 8012b04:	687a      	ldr	r2, [r7, #4]
 8012b06:	4413      	add	r3, r2
 8012b08:	78fa      	ldrb	r2, [r7, #3]
 8012b0a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	2b3c      	cmp	r3, #60	@ 0x3c
 8012b10:	dd12      	ble.n	8012b38 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6818      	ldr	r0, [r3, #0]
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f103 010c 	add.w	r1, r3, #12
 8012b1c:	68fa      	ldr	r2, [r7, #12]
 8012b1e:	f107 0308 	add.w	r3, r7, #8
 8012b22:	f7ff fb79 	bl	8012218 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8012b26:	68ba      	ldr	r2, [r7, #8]
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	429a      	cmp	r2, r3
 8012b2c:	d101      	bne.n	8012b32 <putc_bfd+0x5a>
 8012b2e:	2300      	movs	r3, #0
 8012b30:	e001      	b.n	8012b36 <putc_bfd+0x5e>
 8012b32:	f04f 33ff 	mov.w	r3, #4294967295
 8012b36:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	68fa      	ldr	r2, [r7, #12]
 8012b3c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	689b      	ldr	r3, [r3, #8]
 8012b42:	1c5a      	adds	r2, r3, #1
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	609a      	str	r2, [r3, #8]
 8012b48:	e000      	b.n	8012b4c <putc_bfd+0x74>
	if (i < 0) return;
 8012b4a:	bf00      	nop
}
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}

08012b52 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8012b52:	b580      	push	{r7, lr}
 8012b54:	b084      	sub	sp, #16
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	685b      	ldr	r3, [r3, #4]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	db16      	blt.n	8012b90 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6818      	ldr	r0, [r3, #0]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f103 010c 	add.w	r1, r3, #12
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	461a      	mov	r2, r3
 8012b72:	f107 030c 	add.w	r3, r7, #12
 8012b76:	f7ff fb4f 	bl	8012218 <f_write>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d107      	bne.n	8012b90 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	685b      	ldr	r3, [r3, #4]
 8012b84:	68fa      	ldr	r2, [r7, #12]
 8012b86:	4293      	cmp	r3, r2
 8012b88:	d102      	bne.n	8012b90 <putc_flush+0x3e>
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	689b      	ldr	r3, [r3, #8]
 8012b8e:	e001      	b.n	8012b94 <putc_flush+0x42>
	return EOF;
 8012b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	3710      	adds	r7, #16
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}

08012b9c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b083      	sub	sp, #12
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	683a      	ldr	r2, [r7, #0]
 8012baa:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2200      	movs	r2, #0
 8012bb0:	605a      	str	r2, [r3, #4]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	685a      	ldr	r2, [r3, #4]
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	609a      	str	r2, [r3, #8]
}
 8012bba:	bf00      	nop
 8012bbc:	370c      	adds	r7, #12
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc4:	4770      	bx	lr

08012bc6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8012bc6:	b580      	push	{r7, lr}
 8012bc8:	b096      	sub	sp, #88	@ 0x58
 8012bca:	af00      	add	r7, sp, #0
 8012bcc:	6078      	str	r0, [r7, #4]
 8012bce:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8012bd0:	f107 030c 	add.w	r3, r7, #12
 8012bd4:	6839      	ldr	r1, [r7, #0]
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7ff ffe0 	bl	8012b9c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8012bdc:	e009      	b.n	8012bf2 <f_puts+0x2c>
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	1c5a      	adds	r2, r3, #1
 8012be2:	607a      	str	r2, [r7, #4]
 8012be4:	781a      	ldrb	r2, [r3, #0]
 8012be6:	f107 030c 	add.w	r3, r7, #12
 8012bea:	4611      	mov	r1, r2
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7ff ff73 	bl	8012ad8 <putc_bfd>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	781b      	ldrb	r3, [r3, #0]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d1f1      	bne.n	8012bde <f_puts+0x18>
	return putc_flush(&pb);
 8012bfa:	f107 030c 	add.w	r3, r7, #12
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f7ff ffa7 	bl	8012b52 <putc_flush>
 8012c04:	4603      	mov	r3, r0
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3758      	adds	r7, #88	@ 0x58
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}
	...

08012c10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b087      	sub	sp, #28
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	60f8      	str	r0, [r7, #12]
 8012c18:	60b9      	str	r1, [r7, #8]
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012c1e:	2301      	movs	r3, #1
 8012c20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012c22:	2300      	movs	r3, #0
 8012c24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012c26:	4b1f      	ldr	r3, [pc, #124]	@ (8012ca4 <FATFS_LinkDriverEx+0x94>)
 8012c28:	7a5b      	ldrb	r3, [r3, #9]
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d131      	bne.n	8012c94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012c30:	4b1c      	ldr	r3, [pc, #112]	@ (8012ca4 <FATFS_LinkDriverEx+0x94>)
 8012c32:	7a5b      	ldrb	r3, [r3, #9]
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	461a      	mov	r2, r3
 8012c38:	4b1a      	ldr	r3, [pc, #104]	@ (8012ca4 <FATFS_LinkDriverEx+0x94>)
 8012c3a:	2100      	movs	r1, #0
 8012c3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012c3e:	4b19      	ldr	r3, [pc, #100]	@ (8012ca4 <FATFS_LinkDriverEx+0x94>)
 8012c40:	7a5b      	ldrb	r3, [r3, #9]
 8012c42:	b2db      	uxtb	r3, r3
 8012c44:	4a17      	ldr	r2, [pc, #92]	@ (8012ca4 <FATFS_LinkDriverEx+0x94>)
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	4413      	add	r3, r2
 8012c4a:	68fa      	ldr	r2, [r7, #12]
 8012c4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012c4e:	4b15      	ldr	r3, [pc, #84]	@ (8012ca4 <FATFS_LinkDriverEx+0x94>)
 8012c50:	7a5b      	ldrb	r3, [r3, #9]
 8012c52:	b2db      	uxtb	r3, r3
 8012c54:	461a      	mov	r2, r3
 8012c56:	4b13      	ldr	r3, [pc, #76]	@ (8012ca4 <FATFS_LinkDriverEx+0x94>)
 8012c58:	4413      	add	r3, r2
 8012c5a:	79fa      	ldrb	r2, [r7, #7]
 8012c5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012c5e:	4b11      	ldr	r3, [pc, #68]	@ (8012ca4 <FATFS_LinkDriverEx+0x94>)
 8012c60:	7a5b      	ldrb	r3, [r3, #9]
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	1c5a      	adds	r2, r3, #1
 8012c66:	b2d1      	uxtb	r1, r2
 8012c68:	4a0e      	ldr	r2, [pc, #56]	@ (8012ca4 <FATFS_LinkDriverEx+0x94>)
 8012c6a:	7251      	strb	r1, [r2, #9]
 8012c6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012c6e:	7dbb      	ldrb	r3, [r7, #22]
 8012c70:	3330      	adds	r3, #48	@ 0x30
 8012c72:	b2da      	uxtb	r2, r3
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	3301      	adds	r3, #1
 8012c7c:	223a      	movs	r2, #58	@ 0x3a
 8012c7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012c80:	68bb      	ldr	r3, [r7, #8]
 8012c82:	3302      	adds	r3, #2
 8012c84:	222f      	movs	r2, #47	@ 0x2f
 8012c86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	3303      	adds	r3, #3
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012c90:	2300      	movs	r3, #0
 8012c92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	371c      	adds	r7, #28
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca0:	4770      	bx	lr
 8012ca2:	bf00      	nop
 8012ca4:	20002f80 	.word	0x20002f80

08012ca8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
 8012cb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	6839      	ldr	r1, [r7, #0]
 8012cb6:	6878      	ldr	r0, [r7, #4]
 8012cb8:	f7ff ffaa 	bl	8012c10 <FATFS_LinkDriverEx>
 8012cbc:	4603      	mov	r3, r0
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3708      	adds	r7, #8
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
	...

08012cc8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b085      	sub	sp, #20
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	4603      	mov	r3, r0
 8012cd0:	6039      	str	r1, [r7, #0]
 8012cd2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012cd4:	88fb      	ldrh	r3, [r7, #6]
 8012cd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8012cd8:	d802      	bhi.n	8012ce0 <ff_convert+0x18>
		c = chr;
 8012cda:	88fb      	ldrh	r3, [r7, #6]
 8012cdc:	81fb      	strh	r3, [r7, #14]
 8012cde:	e025      	b.n	8012d2c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d00b      	beq.n	8012cfe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012ce6:	88fb      	ldrh	r3, [r7, #6]
 8012ce8:	2bff      	cmp	r3, #255	@ 0xff
 8012cea:	d805      	bhi.n	8012cf8 <ff_convert+0x30>
 8012cec:	88fb      	ldrh	r3, [r7, #6]
 8012cee:	3b80      	subs	r3, #128	@ 0x80
 8012cf0:	4a12      	ldr	r2, [pc, #72]	@ (8012d3c <ff_convert+0x74>)
 8012cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012cf6:	e000      	b.n	8012cfa <ff_convert+0x32>
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	81fb      	strh	r3, [r7, #14]
 8012cfc:	e016      	b.n	8012d2c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012cfe:	2300      	movs	r3, #0
 8012d00:	81fb      	strh	r3, [r7, #14]
 8012d02:	e009      	b.n	8012d18 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012d04:	89fb      	ldrh	r3, [r7, #14]
 8012d06:	4a0d      	ldr	r2, [pc, #52]	@ (8012d3c <ff_convert+0x74>)
 8012d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012d0c:	88fa      	ldrh	r2, [r7, #6]
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	d006      	beq.n	8012d20 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012d12:	89fb      	ldrh	r3, [r7, #14]
 8012d14:	3301      	adds	r3, #1
 8012d16:	81fb      	strh	r3, [r7, #14]
 8012d18:	89fb      	ldrh	r3, [r7, #14]
 8012d1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8012d1c:	d9f2      	bls.n	8012d04 <ff_convert+0x3c>
 8012d1e:	e000      	b.n	8012d22 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012d20:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012d22:	89fb      	ldrh	r3, [r7, #14]
 8012d24:	3380      	adds	r3, #128	@ 0x80
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	b2db      	uxtb	r3, r3
 8012d2a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012d2c:	89fb      	ldrh	r3, [r7, #14]
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3714      	adds	r7, #20
 8012d32:	46bd      	mov	sp, r7
 8012d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d38:	4770      	bx	lr
 8012d3a:	bf00      	nop
 8012d3c:	0801a034 	.word	0x0801a034

08012d40 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012d40:	b480      	push	{r7}
 8012d42:	b087      	sub	sp, #28
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	4603      	mov	r3, r0
 8012d48:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012d4a:	88fb      	ldrh	r3, [r7, #6]
 8012d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012d50:	d201      	bcs.n	8012d56 <ff_wtoupper+0x16>
 8012d52:	4b3e      	ldr	r3, [pc, #248]	@ (8012e4c <ff_wtoupper+0x10c>)
 8012d54:	e000      	b.n	8012d58 <ff_wtoupper+0x18>
 8012d56:	4b3e      	ldr	r3, [pc, #248]	@ (8012e50 <ff_wtoupper+0x110>)
 8012d58:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	1c9a      	adds	r2, r3, #2
 8012d5e:	617a      	str	r2, [r7, #20]
 8012d60:	881b      	ldrh	r3, [r3, #0]
 8012d62:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012d64:	8a7b      	ldrh	r3, [r7, #18]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d068      	beq.n	8012e3c <ff_wtoupper+0xfc>
 8012d6a:	88fa      	ldrh	r2, [r7, #6]
 8012d6c:	8a7b      	ldrh	r3, [r7, #18]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d364      	bcc.n	8012e3c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	1c9a      	adds	r2, r3, #2
 8012d76:	617a      	str	r2, [r7, #20]
 8012d78:	881b      	ldrh	r3, [r3, #0]
 8012d7a:	823b      	strh	r3, [r7, #16]
 8012d7c:	8a3b      	ldrh	r3, [r7, #16]
 8012d7e:	0a1b      	lsrs	r3, r3, #8
 8012d80:	81fb      	strh	r3, [r7, #14]
 8012d82:	8a3b      	ldrh	r3, [r7, #16]
 8012d84:	b2db      	uxtb	r3, r3
 8012d86:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012d88:	88fa      	ldrh	r2, [r7, #6]
 8012d8a:	8a79      	ldrh	r1, [r7, #18]
 8012d8c:	8a3b      	ldrh	r3, [r7, #16]
 8012d8e:	440b      	add	r3, r1
 8012d90:	429a      	cmp	r2, r3
 8012d92:	da49      	bge.n	8012e28 <ff_wtoupper+0xe8>
			switch (cmd) {
 8012d94:	89fb      	ldrh	r3, [r7, #14]
 8012d96:	2b08      	cmp	r3, #8
 8012d98:	d84f      	bhi.n	8012e3a <ff_wtoupper+0xfa>
 8012d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8012da0 <ff_wtoupper+0x60>)
 8012d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012da0:	08012dc5 	.word	0x08012dc5
 8012da4:	08012dd7 	.word	0x08012dd7
 8012da8:	08012ded 	.word	0x08012ded
 8012dac:	08012df5 	.word	0x08012df5
 8012db0:	08012dfd 	.word	0x08012dfd
 8012db4:	08012e05 	.word	0x08012e05
 8012db8:	08012e0d 	.word	0x08012e0d
 8012dbc:	08012e15 	.word	0x08012e15
 8012dc0:	08012e1d 	.word	0x08012e1d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012dc4:	88fa      	ldrh	r2, [r7, #6]
 8012dc6:	8a7b      	ldrh	r3, [r7, #18]
 8012dc8:	1ad3      	subs	r3, r2, r3
 8012dca:	005b      	lsls	r3, r3, #1
 8012dcc:	697a      	ldr	r2, [r7, #20]
 8012dce:	4413      	add	r3, r2
 8012dd0:	881b      	ldrh	r3, [r3, #0]
 8012dd2:	80fb      	strh	r3, [r7, #6]
 8012dd4:	e027      	b.n	8012e26 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012dd6:	88fa      	ldrh	r2, [r7, #6]
 8012dd8:	8a7b      	ldrh	r3, [r7, #18]
 8012dda:	1ad3      	subs	r3, r2, r3
 8012ddc:	b29b      	uxth	r3, r3
 8012dde:	f003 0301 	and.w	r3, r3, #1
 8012de2:	b29b      	uxth	r3, r3
 8012de4:	88fa      	ldrh	r2, [r7, #6]
 8012de6:	1ad3      	subs	r3, r2, r3
 8012de8:	80fb      	strh	r3, [r7, #6]
 8012dea:	e01c      	b.n	8012e26 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012dec:	88fb      	ldrh	r3, [r7, #6]
 8012dee:	3b10      	subs	r3, #16
 8012df0:	80fb      	strh	r3, [r7, #6]
 8012df2:	e018      	b.n	8012e26 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012df4:	88fb      	ldrh	r3, [r7, #6]
 8012df6:	3b20      	subs	r3, #32
 8012df8:	80fb      	strh	r3, [r7, #6]
 8012dfa:	e014      	b.n	8012e26 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012dfc:	88fb      	ldrh	r3, [r7, #6]
 8012dfe:	3b30      	subs	r3, #48	@ 0x30
 8012e00:	80fb      	strh	r3, [r7, #6]
 8012e02:	e010      	b.n	8012e26 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012e04:	88fb      	ldrh	r3, [r7, #6]
 8012e06:	3b1a      	subs	r3, #26
 8012e08:	80fb      	strh	r3, [r7, #6]
 8012e0a:	e00c      	b.n	8012e26 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012e0c:	88fb      	ldrh	r3, [r7, #6]
 8012e0e:	3308      	adds	r3, #8
 8012e10:	80fb      	strh	r3, [r7, #6]
 8012e12:	e008      	b.n	8012e26 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012e14:	88fb      	ldrh	r3, [r7, #6]
 8012e16:	3b50      	subs	r3, #80	@ 0x50
 8012e18:	80fb      	strh	r3, [r7, #6]
 8012e1a:	e004      	b.n	8012e26 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012e1c:	88fb      	ldrh	r3, [r7, #6]
 8012e1e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8012e22:	80fb      	strh	r3, [r7, #6]
 8012e24:	bf00      	nop
			}
			break;
 8012e26:	e008      	b.n	8012e3a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012e28:	89fb      	ldrh	r3, [r7, #14]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d195      	bne.n	8012d5a <ff_wtoupper+0x1a>
 8012e2e:	8a3b      	ldrh	r3, [r7, #16]
 8012e30:	005b      	lsls	r3, r3, #1
 8012e32:	697a      	ldr	r2, [r7, #20]
 8012e34:	4413      	add	r3, r2
 8012e36:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012e38:	e78f      	b.n	8012d5a <ff_wtoupper+0x1a>
			break;
 8012e3a:	bf00      	nop
	}

	return chr;
 8012e3c:	88fb      	ldrh	r3, [r7, #6]
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	371c      	adds	r7, #28
 8012e42:	46bd      	mov	sp, r7
 8012e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e48:	4770      	bx	lr
 8012e4a:	bf00      	nop
 8012e4c:	0801a134 	.word	0x0801a134
 8012e50:	0801a328 	.word	0x0801a328

08012e54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012e58:	2200      	movs	r2, #0
 8012e5a:	4912      	ldr	r1, [pc, #72]	@ (8012ea4 <MX_USB_DEVICE_Init+0x50>)
 8012e5c:	4812      	ldr	r0, [pc, #72]	@ (8012ea8 <MX_USB_DEVICE_Init+0x54>)
 8012e5e:	f7fb fad3 	bl	800e408 <USBD_Init>
 8012e62:	4603      	mov	r3, r0
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d001      	beq.n	8012e6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012e68:	f7ee fdb6 	bl	80019d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012e6c:	490f      	ldr	r1, [pc, #60]	@ (8012eac <MX_USB_DEVICE_Init+0x58>)
 8012e6e:	480e      	ldr	r0, [pc, #56]	@ (8012ea8 <MX_USB_DEVICE_Init+0x54>)
 8012e70:	f7fb fafa 	bl	800e468 <USBD_RegisterClass>
 8012e74:	4603      	mov	r3, r0
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d001      	beq.n	8012e7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012e7a:	f7ee fdad 	bl	80019d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012e7e:	490c      	ldr	r1, [pc, #48]	@ (8012eb0 <MX_USB_DEVICE_Init+0x5c>)
 8012e80:	4809      	ldr	r0, [pc, #36]	@ (8012ea8 <MX_USB_DEVICE_Init+0x54>)
 8012e82:	f7fb f9f1 	bl	800e268 <USBD_CDC_RegisterInterface>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d001      	beq.n	8012e90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012e8c:	f7ee fda4 	bl	80019d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012e90:	4805      	ldr	r0, [pc, #20]	@ (8012ea8 <MX_USB_DEVICE_Init+0x54>)
 8012e92:	f7fb fb1f 	bl	800e4d4 <USBD_Start>
 8012e96:	4603      	mov	r3, r0
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d001      	beq.n	8012ea0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012e9c:	f7ee fd9c 	bl	80019d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012ea0:	bf00      	nop
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	200001f8 	.word	0x200001f8
 8012ea8:	20002f8c 	.word	0x20002f8c
 8012eac:	20000164 	.word	0x20000164
 8012eb0:	200001e4 	.word	0x200001e4

08012eb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012eb8:	2200      	movs	r2, #0
 8012eba:	4905      	ldr	r1, [pc, #20]	@ (8012ed0 <CDC_Init_FS+0x1c>)
 8012ebc:	4805      	ldr	r0, [pc, #20]	@ (8012ed4 <CDC_Init_FS+0x20>)
 8012ebe:	f7fb f9ed 	bl	800e29c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012ec2:	4905      	ldr	r1, [pc, #20]	@ (8012ed8 <CDC_Init_FS+0x24>)
 8012ec4:	4803      	ldr	r0, [pc, #12]	@ (8012ed4 <CDC_Init_FS+0x20>)
 8012ec6:	f7fb fa0b 	bl	800e2e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012eca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	bd80      	pop	{r7, pc}
 8012ed0:	20003a68 	.word	0x20003a68
 8012ed4:	20002f8c 	.word	0x20002f8c
 8012ed8:	20003268 	.word	0x20003268

08012edc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012edc:	b480      	push	{r7}
 8012ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012ee0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eea:	4770      	bx	lr

08012eec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012eec:	b480      	push	{r7}
 8012eee:	b083      	sub	sp, #12
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	6039      	str	r1, [r7, #0]
 8012ef6:	71fb      	strb	r3, [r7, #7]
 8012ef8:	4613      	mov	r3, r2
 8012efa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012efc:	79fb      	ldrb	r3, [r7, #7]
 8012efe:	2b23      	cmp	r3, #35	@ 0x23
 8012f00:	d84a      	bhi.n	8012f98 <CDC_Control_FS+0xac>
 8012f02:	a201      	add	r2, pc, #4	@ (adr r2, 8012f08 <CDC_Control_FS+0x1c>)
 8012f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f08:	08012f99 	.word	0x08012f99
 8012f0c:	08012f99 	.word	0x08012f99
 8012f10:	08012f99 	.word	0x08012f99
 8012f14:	08012f99 	.word	0x08012f99
 8012f18:	08012f99 	.word	0x08012f99
 8012f1c:	08012f99 	.word	0x08012f99
 8012f20:	08012f99 	.word	0x08012f99
 8012f24:	08012f99 	.word	0x08012f99
 8012f28:	08012f99 	.word	0x08012f99
 8012f2c:	08012f99 	.word	0x08012f99
 8012f30:	08012f99 	.word	0x08012f99
 8012f34:	08012f99 	.word	0x08012f99
 8012f38:	08012f99 	.word	0x08012f99
 8012f3c:	08012f99 	.word	0x08012f99
 8012f40:	08012f99 	.word	0x08012f99
 8012f44:	08012f99 	.word	0x08012f99
 8012f48:	08012f99 	.word	0x08012f99
 8012f4c:	08012f99 	.word	0x08012f99
 8012f50:	08012f99 	.word	0x08012f99
 8012f54:	08012f99 	.word	0x08012f99
 8012f58:	08012f99 	.word	0x08012f99
 8012f5c:	08012f99 	.word	0x08012f99
 8012f60:	08012f99 	.word	0x08012f99
 8012f64:	08012f99 	.word	0x08012f99
 8012f68:	08012f99 	.word	0x08012f99
 8012f6c:	08012f99 	.word	0x08012f99
 8012f70:	08012f99 	.word	0x08012f99
 8012f74:	08012f99 	.word	0x08012f99
 8012f78:	08012f99 	.word	0x08012f99
 8012f7c:	08012f99 	.word	0x08012f99
 8012f80:	08012f99 	.word	0x08012f99
 8012f84:	08012f99 	.word	0x08012f99
 8012f88:	08012f99 	.word	0x08012f99
 8012f8c:	08012f99 	.word	0x08012f99
 8012f90:	08012f99 	.word	0x08012f99
 8012f94:	08012f99 	.word	0x08012f99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012f98:	bf00      	nop
  }

  return (USBD_OK);
 8012f9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	370c      	adds	r7, #12
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa6:	4770      	bx	lr

08012fa8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012fb2:	6879      	ldr	r1, [r7, #4]
 8012fb4:	4805      	ldr	r0, [pc, #20]	@ (8012fcc <CDC_Receive_FS+0x24>)
 8012fb6:	f7fb f993 	bl	800e2e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012fba:	4804      	ldr	r0, [pc, #16]	@ (8012fcc <CDC_Receive_FS+0x24>)
 8012fbc:	f7fb f9ee 	bl	800e39c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012fc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3708      	adds	r7, #8
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}
 8012fca:	bf00      	nop
 8012fcc:	20002f8c 	.word	0x20002f8c

08012fd0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b084      	sub	sp, #16
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	460b      	mov	r3, r1
 8012fda:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8013018 <CDC_Transmit_FS+0x48>)
 8012fe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012fe6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d001      	beq.n	8012ff6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	e00b      	b.n	801300e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012ff6:	887b      	ldrh	r3, [r7, #2]
 8012ff8:	461a      	mov	r2, r3
 8012ffa:	6879      	ldr	r1, [r7, #4]
 8012ffc:	4806      	ldr	r0, [pc, #24]	@ (8013018 <CDC_Transmit_FS+0x48>)
 8012ffe:	f7fb f94d 	bl	800e29c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013002:	4805      	ldr	r0, [pc, #20]	@ (8013018 <CDC_Transmit_FS+0x48>)
 8013004:	f7fb f98a 	bl	800e31c <USBD_CDC_TransmitPacket>
 8013008:	4603      	mov	r3, r0
 801300a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801300c:	7bfb      	ldrb	r3, [r7, #15]
}
 801300e:	4618      	mov	r0, r3
 8013010:	3710      	adds	r7, #16
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
 8013016:	bf00      	nop
 8013018:	20002f8c 	.word	0x20002f8c

0801301c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801301c:	b480      	push	{r7}
 801301e:	b087      	sub	sp, #28
 8013020:	af00      	add	r7, sp, #0
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	60b9      	str	r1, [r7, #8]
 8013026:	4613      	mov	r3, r2
 8013028:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801302a:	2300      	movs	r3, #0
 801302c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801302e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013032:	4618      	mov	r0, r3
 8013034:	371c      	adds	r7, #28
 8013036:	46bd      	mov	sp, r7
 8013038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303c:	4770      	bx	lr
	...

08013040 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013040:	b480      	push	{r7}
 8013042:	b083      	sub	sp, #12
 8013044:	af00      	add	r7, sp, #0
 8013046:	4603      	mov	r3, r0
 8013048:	6039      	str	r1, [r7, #0]
 801304a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	2212      	movs	r2, #18
 8013050:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013052:	4b03      	ldr	r3, [pc, #12]	@ (8013060 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013054:	4618      	mov	r0, r3
 8013056:	370c      	adds	r7, #12
 8013058:	46bd      	mov	sp, r7
 801305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305e:	4770      	bx	lr
 8013060:	20000214 	.word	0x20000214

08013064 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013064:	b480      	push	{r7}
 8013066:	b083      	sub	sp, #12
 8013068:	af00      	add	r7, sp, #0
 801306a:	4603      	mov	r3, r0
 801306c:	6039      	str	r1, [r7, #0]
 801306e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	2204      	movs	r2, #4
 8013074:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013076:	4b03      	ldr	r3, [pc, #12]	@ (8013084 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013078:	4618      	mov	r0, r3
 801307a:	370c      	adds	r7, #12
 801307c:	46bd      	mov	sp, r7
 801307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013082:	4770      	bx	lr
 8013084:	20000228 	.word	0x20000228

08013088 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af00      	add	r7, sp, #0
 801308e:	4603      	mov	r3, r0
 8013090:	6039      	str	r1, [r7, #0]
 8013092:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013094:	79fb      	ldrb	r3, [r7, #7]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d105      	bne.n	80130a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801309a:	683a      	ldr	r2, [r7, #0]
 801309c:	4907      	ldr	r1, [pc, #28]	@ (80130bc <USBD_FS_ProductStrDescriptor+0x34>)
 801309e:	4808      	ldr	r0, [pc, #32]	@ (80130c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80130a0:	f7fc fbde 	bl	800f860 <USBD_GetString>
 80130a4:	e004      	b.n	80130b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80130a6:	683a      	ldr	r2, [r7, #0]
 80130a8:	4904      	ldr	r1, [pc, #16]	@ (80130bc <USBD_FS_ProductStrDescriptor+0x34>)
 80130aa:	4805      	ldr	r0, [pc, #20]	@ (80130c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80130ac:	f7fc fbd8 	bl	800f860 <USBD_GetString>
  }
  return USBD_StrDesc;
 80130b0:	4b02      	ldr	r3, [pc, #8]	@ (80130bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80130b2:	4618      	mov	r0, r3
 80130b4:	3708      	adds	r7, #8
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}
 80130ba:	bf00      	nop
 80130bc:	20004268 	.word	0x20004268
 80130c0:	0801866c 	.word	0x0801866c

080130c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	4603      	mov	r3, r0
 80130cc:	6039      	str	r1, [r7, #0]
 80130ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80130d0:	683a      	ldr	r2, [r7, #0]
 80130d2:	4904      	ldr	r1, [pc, #16]	@ (80130e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80130d4:	4804      	ldr	r0, [pc, #16]	@ (80130e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80130d6:	f7fc fbc3 	bl	800f860 <USBD_GetString>
  return USBD_StrDesc;
 80130da:	4b02      	ldr	r3, [pc, #8]	@ (80130e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80130dc:	4618      	mov	r0, r3
 80130de:	3708      	adds	r7, #8
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}
 80130e4:	20004268 	.word	0x20004268
 80130e8:	08018684 	.word	0x08018684

080130ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b082      	sub	sp, #8
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	4603      	mov	r3, r0
 80130f4:	6039      	str	r1, [r7, #0]
 80130f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	221a      	movs	r2, #26
 80130fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80130fe:	f000 f843 	bl	8013188 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013102:	4b02      	ldr	r3, [pc, #8]	@ (801310c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013104:	4618      	mov	r0, r3
 8013106:	3708      	adds	r7, #8
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	2000022c 	.word	0x2000022c

08013110 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b082      	sub	sp, #8
 8013114:	af00      	add	r7, sp, #0
 8013116:	4603      	mov	r3, r0
 8013118:	6039      	str	r1, [r7, #0]
 801311a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801311c:	79fb      	ldrb	r3, [r7, #7]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d105      	bne.n	801312e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013122:	683a      	ldr	r2, [r7, #0]
 8013124:	4907      	ldr	r1, [pc, #28]	@ (8013144 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013126:	4808      	ldr	r0, [pc, #32]	@ (8013148 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013128:	f7fc fb9a 	bl	800f860 <USBD_GetString>
 801312c:	e004      	b.n	8013138 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801312e:	683a      	ldr	r2, [r7, #0]
 8013130:	4904      	ldr	r1, [pc, #16]	@ (8013144 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013132:	4805      	ldr	r0, [pc, #20]	@ (8013148 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013134:	f7fc fb94 	bl	800f860 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013138:	4b02      	ldr	r3, [pc, #8]	@ (8013144 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801313a:	4618      	mov	r0, r3
 801313c:	3708      	adds	r7, #8
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}
 8013142:	bf00      	nop
 8013144:	20004268 	.word	0x20004268
 8013148:	08018698 	.word	0x08018698

0801314c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b082      	sub	sp, #8
 8013150:	af00      	add	r7, sp, #0
 8013152:	4603      	mov	r3, r0
 8013154:	6039      	str	r1, [r7, #0]
 8013156:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013158:	79fb      	ldrb	r3, [r7, #7]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d105      	bne.n	801316a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801315e:	683a      	ldr	r2, [r7, #0]
 8013160:	4907      	ldr	r1, [pc, #28]	@ (8013180 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013162:	4808      	ldr	r0, [pc, #32]	@ (8013184 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013164:	f7fc fb7c 	bl	800f860 <USBD_GetString>
 8013168:	e004      	b.n	8013174 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801316a:	683a      	ldr	r2, [r7, #0]
 801316c:	4904      	ldr	r1, [pc, #16]	@ (8013180 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801316e:	4805      	ldr	r0, [pc, #20]	@ (8013184 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013170:	f7fc fb76 	bl	800f860 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013174:	4b02      	ldr	r3, [pc, #8]	@ (8013180 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013176:	4618      	mov	r0, r3
 8013178:	3708      	adds	r7, #8
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}
 801317e:	bf00      	nop
 8013180:	20004268 	.word	0x20004268
 8013184:	080186a4 	.word	0x080186a4

08013188 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b084      	sub	sp, #16
 801318c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801318e:	4b0f      	ldr	r3, [pc, #60]	@ (80131cc <Get_SerialNum+0x44>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013194:	4b0e      	ldr	r3, [pc, #56]	@ (80131d0 <Get_SerialNum+0x48>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801319a:	4b0e      	ldr	r3, [pc, #56]	@ (80131d4 <Get_SerialNum+0x4c>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80131a0:	68fa      	ldr	r2, [r7, #12]
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	4413      	add	r3, r2
 80131a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d009      	beq.n	80131c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80131ae:	2208      	movs	r2, #8
 80131b0:	4909      	ldr	r1, [pc, #36]	@ (80131d8 <Get_SerialNum+0x50>)
 80131b2:	68f8      	ldr	r0, [r7, #12]
 80131b4:	f000 f814 	bl	80131e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80131b8:	2204      	movs	r2, #4
 80131ba:	4908      	ldr	r1, [pc, #32]	@ (80131dc <Get_SerialNum+0x54>)
 80131bc:	68b8      	ldr	r0, [r7, #8]
 80131be:	f000 f80f 	bl	80131e0 <IntToUnicode>
  }
}
 80131c2:	bf00      	nop
 80131c4:	3710      	adds	r7, #16
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}
 80131ca:	bf00      	nop
 80131cc:	1fff7a10 	.word	0x1fff7a10
 80131d0:	1fff7a14 	.word	0x1fff7a14
 80131d4:	1fff7a18 	.word	0x1fff7a18
 80131d8:	2000022e 	.word	0x2000022e
 80131dc:	2000023e 	.word	0x2000023e

080131e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80131e0:	b480      	push	{r7}
 80131e2:	b087      	sub	sp, #28
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	60f8      	str	r0, [r7, #12]
 80131e8:	60b9      	str	r1, [r7, #8]
 80131ea:	4613      	mov	r3, r2
 80131ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80131ee:	2300      	movs	r3, #0
 80131f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80131f2:	2300      	movs	r3, #0
 80131f4:	75fb      	strb	r3, [r7, #23]
 80131f6:	e027      	b.n	8013248 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	0f1b      	lsrs	r3, r3, #28
 80131fc:	2b09      	cmp	r3, #9
 80131fe:	d80b      	bhi.n	8013218 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	0f1b      	lsrs	r3, r3, #28
 8013204:	b2da      	uxtb	r2, r3
 8013206:	7dfb      	ldrb	r3, [r7, #23]
 8013208:	005b      	lsls	r3, r3, #1
 801320a:	4619      	mov	r1, r3
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	440b      	add	r3, r1
 8013210:	3230      	adds	r2, #48	@ 0x30
 8013212:	b2d2      	uxtb	r2, r2
 8013214:	701a      	strb	r2, [r3, #0]
 8013216:	e00a      	b.n	801322e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	0f1b      	lsrs	r3, r3, #28
 801321c:	b2da      	uxtb	r2, r3
 801321e:	7dfb      	ldrb	r3, [r7, #23]
 8013220:	005b      	lsls	r3, r3, #1
 8013222:	4619      	mov	r1, r3
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	440b      	add	r3, r1
 8013228:	3237      	adds	r2, #55	@ 0x37
 801322a:	b2d2      	uxtb	r2, r2
 801322c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	011b      	lsls	r3, r3, #4
 8013232:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013234:	7dfb      	ldrb	r3, [r7, #23]
 8013236:	005b      	lsls	r3, r3, #1
 8013238:	3301      	adds	r3, #1
 801323a:	68ba      	ldr	r2, [r7, #8]
 801323c:	4413      	add	r3, r2
 801323e:	2200      	movs	r2, #0
 8013240:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013242:	7dfb      	ldrb	r3, [r7, #23]
 8013244:	3301      	adds	r3, #1
 8013246:	75fb      	strb	r3, [r7, #23]
 8013248:	7dfa      	ldrb	r2, [r7, #23]
 801324a:	79fb      	ldrb	r3, [r7, #7]
 801324c:	429a      	cmp	r2, r3
 801324e:	d3d3      	bcc.n	80131f8 <IntToUnicode+0x18>
  }
}
 8013250:	bf00      	nop
 8013252:	bf00      	nop
 8013254:	371c      	adds	r7, #28
 8013256:	46bd      	mov	sp, r7
 8013258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325c:	4770      	bx	lr
	...

08013260 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b08a      	sub	sp, #40	@ 0x28
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013268:	f107 0314 	add.w	r3, r7, #20
 801326c:	2200      	movs	r2, #0
 801326e:	601a      	str	r2, [r3, #0]
 8013270:	605a      	str	r2, [r3, #4]
 8013272:	609a      	str	r2, [r3, #8]
 8013274:	60da      	str	r2, [r3, #12]
 8013276:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013280:	d13a      	bne.n	80132f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013282:	2300      	movs	r3, #0
 8013284:	613b      	str	r3, [r7, #16]
 8013286:	4b1e      	ldr	r3, [pc, #120]	@ (8013300 <HAL_PCD_MspInit+0xa0>)
 8013288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801328a:	4a1d      	ldr	r2, [pc, #116]	@ (8013300 <HAL_PCD_MspInit+0xa0>)
 801328c:	f043 0301 	orr.w	r3, r3, #1
 8013290:	6313      	str	r3, [r2, #48]	@ 0x30
 8013292:	4b1b      	ldr	r3, [pc, #108]	@ (8013300 <HAL_PCD_MspInit+0xa0>)
 8013294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013296:	f003 0301 	and.w	r3, r3, #1
 801329a:	613b      	str	r3, [r7, #16]
 801329c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801329e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80132a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132a4:	2302      	movs	r3, #2
 80132a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132a8:	2300      	movs	r3, #0
 80132aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80132ac:	2303      	movs	r3, #3
 80132ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80132b0:	230a      	movs	r3, #10
 80132b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80132b4:	f107 0314 	add.w	r3, r7, #20
 80132b8:	4619      	mov	r1, r3
 80132ba:	4812      	ldr	r0, [pc, #72]	@ (8013304 <HAL_PCD_MspInit+0xa4>)
 80132bc:	f7f3 fb7e 	bl	80069bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80132c0:	4b0f      	ldr	r3, [pc, #60]	@ (8013300 <HAL_PCD_MspInit+0xa0>)
 80132c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80132c4:	4a0e      	ldr	r2, [pc, #56]	@ (8013300 <HAL_PCD_MspInit+0xa0>)
 80132c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132ca:	6353      	str	r3, [r2, #52]	@ 0x34
 80132cc:	2300      	movs	r3, #0
 80132ce:	60fb      	str	r3, [r7, #12]
 80132d0:	4b0b      	ldr	r3, [pc, #44]	@ (8013300 <HAL_PCD_MspInit+0xa0>)
 80132d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132d4:	4a0a      	ldr	r2, [pc, #40]	@ (8013300 <HAL_PCD_MspInit+0xa0>)
 80132d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80132da:	6453      	str	r3, [r2, #68]	@ 0x44
 80132dc:	4b08      	ldr	r3, [pc, #32]	@ (8013300 <HAL_PCD_MspInit+0xa0>)
 80132de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80132e4:	60fb      	str	r3, [r7, #12]
 80132e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80132e8:	2200      	movs	r2, #0
 80132ea:	2100      	movs	r1, #0
 80132ec:	2043      	movs	r0, #67	@ 0x43
 80132ee:	f7f3 f822 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80132f2:	2043      	movs	r0, #67	@ 0x43
 80132f4:	f7f3 f83b 	bl	800636e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80132f8:	bf00      	nop
 80132fa:	3728      	adds	r7, #40	@ 0x28
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	40023800 	.word	0x40023800
 8013304:	40020000 	.word	0x40020000

08013308 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b082      	sub	sp, #8
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801331c:	4619      	mov	r1, r3
 801331e:	4610      	mov	r0, r2
 8013320:	f7fb f925 	bl	800e56e <USBD_LL_SetupStage>
}
 8013324:	bf00      	nop
 8013326:	3708      	adds	r7, #8
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}

0801332c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	460b      	mov	r3, r1
 8013336:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801333e:	78fa      	ldrb	r2, [r7, #3]
 8013340:	6879      	ldr	r1, [r7, #4]
 8013342:	4613      	mov	r3, r2
 8013344:	00db      	lsls	r3, r3, #3
 8013346:	4413      	add	r3, r2
 8013348:	009b      	lsls	r3, r3, #2
 801334a:	440b      	add	r3, r1
 801334c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013350:	681a      	ldr	r2, [r3, #0]
 8013352:	78fb      	ldrb	r3, [r7, #3]
 8013354:	4619      	mov	r1, r3
 8013356:	f7fb f95f 	bl	800e618 <USBD_LL_DataOutStage>
}
 801335a:	bf00      	nop
 801335c:	3708      	adds	r7, #8
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}

08013362 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013362:	b580      	push	{r7, lr}
 8013364:	b082      	sub	sp, #8
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
 801336a:	460b      	mov	r3, r1
 801336c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8013374:	78fa      	ldrb	r2, [r7, #3]
 8013376:	6879      	ldr	r1, [r7, #4]
 8013378:	4613      	mov	r3, r2
 801337a:	00db      	lsls	r3, r3, #3
 801337c:	4413      	add	r3, r2
 801337e:	009b      	lsls	r3, r3, #2
 8013380:	440b      	add	r3, r1
 8013382:	3320      	adds	r3, #32
 8013384:	681a      	ldr	r2, [r3, #0]
 8013386:	78fb      	ldrb	r3, [r7, #3]
 8013388:	4619      	mov	r1, r3
 801338a:	f7fb fa01 	bl	800e790 <USBD_LL_DataInStage>
}
 801338e:	bf00      	nop
 8013390:	3708      	adds	r7, #8
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}

08013396 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013396:	b580      	push	{r7, lr}
 8013398:	b082      	sub	sp, #8
 801339a:	af00      	add	r7, sp, #0
 801339c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7fb fb45 	bl	800ea34 <USBD_LL_SOF>
}
 80133aa:	bf00      	nop
 80133ac:	3708      	adds	r7, #8
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}

080133b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133b2:	b580      	push	{r7, lr}
 80133b4:	b084      	sub	sp, #16
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80133ba:	2301      	movs	r3, #1
 80133bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	79db      	ldrb	r3, [r3, #7]
 80133c2:	2b02      	cmp	r3, #2
 80133c4:	d001      	beq.n	80133ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80133c6:	f7ee fb07 	bl	80019d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80133d0:	7bfa      	ldrb	r2, [r7, #15]
 80133d2:	4611      	mov	r1, r2
 80133d4:	4618      	mov	r0, r3
 80133d6:	f7fb fae9 	bl	800e9ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80133e0:	4618      	mov	r0, r3
 80133e2:	f7fb fa90 	bl	800e906 <USBD_LL_Reset>
}
 80133e6:	bf00      	nop
 80133e8:	3710      	adds	r7, #16
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}
	...

080133f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80133fe:	4618      	mov	r0, r3
 8013400:	f7fb fae4 	bl	800e9cc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	687a      	ldr	r2, [r7, #4]
 8013410:	6812      	ldr	r2, [r2, #0]
 8013412:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013416:	f043 0301 	orr.w	r3, r3, #1
 801341a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	7adb      	ldrb	r3, [r3, #11]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d005      	beq.n	8013430 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013424:	4b04      	ldr	r3, [pc, #16]	@ (8013438 <HAL_PCD_SuspendCallback+0x48>)
 8013426:	691b      	ldr	r3, [r3, #16]
 8013428:	4a03      	ldr	r2, [pc, #12]	@ (8013438 <HAL_PCD_SuspendCallback+0x48>)
 801342a:	f043 0306 	orr.w	r3, r3, #6
 801342e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013430:	bf00      	nop
 8013432:	3708      	adds	r7, #8
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}
 8013438:	e000ed00 	.word	0xe000ed00

0801343c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b082      	sub	sp, #8
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801344a:	4618      	mov	r0, r3
 801344c:	f7fb fada 	bl	800ea04 <USBD_LL_Resume>
}
 8013450:	bf00      	nop
 8013452:	3708      	adds	r7, #8
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}

08013458 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b082      	sub	sp, #8
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
 8013460:	460b      	mov	r3, r1
 8013462:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801346a:	78fa      	ldrb	r2, [r7, #3]
 801346c:	4611      	mov	r1, r2
 801346e:	4618      	mov	r0, r3
 8013470:	f7fb fb32 	bl	800ead8 <USBD_LL_IsoOUTIncomplete>
}
 8013474:	bf00      	nop
 8013476:	3708      	adds	r7, #8
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}

0801347c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	460b      	mov	r3, r1
 8013486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801348e:	78fa      	ldrb	r2, [r7, #3]
 8013490:	4611      	mov	r1, r2
 8013492:	4618      	mov	r0, r3
 8013494:	f7fb faee 	bl	800ea74 <USBD_LL_IsoINIncomplete>
}
 8013498:	bf00      	nop
 801349a:	3708      	adds	r7, #8
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}

080134a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7fb fb44 	bl	800eb3c <USBD_LL_DevConnected>
}
 80134b4:	bf00      	nop
 80134b6:	3708      	adds	r7, #8
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}

080134bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b082      	sub	sp, #8
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7fb fb41 	bl	800eb52 <USBD_LL_DevDisconnected>
}
 80134d0:	bf00      	nop
 80134d2:	3708      	adds	r7, #8
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d13c      	bne.n	8013562 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80134e8:	4a20      	ldr	r2, [pc, #128]	@ (801356c <USBD_LL_Init+0x94>)
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	4a1e      	ldr	r2, [pc, #120]	@ (801356c <USBD_LL_Init+0x94>)
 80134f4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80134f8:	4b1c      	ldr	r3, [pc, #112]	@ (801356c <USBD_LL_Init+0x94>)
 80134fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80134fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8013500:	4b1a      	ldr	r3, [pc, #104]	@ (801356c <USBD_LL_Init+0x94>)
 8013502:	2204      	movs	r2, #4
 8013504:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013506:	4b19      	ldr	r3, [pc, #100]	@ (801356c <USBD_LL_Init+0x94>)
 8013508:	2202      	movs	r2, #2
 801350a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801350c:	4b17      	ldr	r3, [pc, #92]	@ (801356c <USBD_LL_Init+0x94>)
 801350e:	2200      	movs	r2, #0
 8013510:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013512:	4b16      	ldr	r3, [pc, #88]	@ (801356c <USBD_LL_Init+0x94>)
 8013514:	2202      	movs	r2, #2
 8013516:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013518:	4b14      	ldr	r3, [pc, #80]	@ (801356c <USBD_LL_Init+0x94>)
 801351a:	2200      	movs	r2, #0
 801351c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801351e:	4b13      	ldr	r3, [pc, #76]	@ (801356c <USBD_LL_Init+0x94>)
 8013520:	2200      	movs	r2, #0
 8013522:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013524:	4b11      	ldr	r3, [pc, #68]	@ (801356c <USBD_LL_Init+0x94>)
 8013526:	2200      	movs	r2, #0
 8013528:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801352a:	4b10      	ldr	r3, [pc, #64]	@ (801356c <USBD_LL_Init+0x94>)
 801352c:	2200      	movs	r2, #0
 801352e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013530:	4b0e      	ldr	r3, [pc, #56]	@ (801356c <USBD_LL_Init+0x94>)
 8013532:	2200      	movs	r2, #0
 8013534:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013536:	480d      	ldr	r0, [pc, #52]	@ (801356c <USBD_LL_Init+0x94>)
 8013538:	f7f5 f9c8 	bl	80088cc <HAL_PCD_Init>
 801353c:	4603      	mov	r3, r0
 801353e:	2b00      	cmp	r3, #0
 8013540:	d001      	beq.n	8013546 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013542:	f7ee fa49 	bl	80019d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013546:	2180      	movs	r1, #128	@ 0x80
 8013548:	4808      	ldr	r0, [pc, #32]	@ (801356c <USBD_LL_Init+0x94>)
 801354a:	f7f6 fbf4 	bl	8009d36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801354e:	2240      	movs	r2, #64	@ 0x40
 8013550:	2100      	movs	r1, #0
 8013552:	4806      	ldr	r0, [pc, #24]	@ (801356c <USBD_LL_Init+0x94>)
 8013554:	f7f6 fba8 	bl	8009ca8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013558:	2280      	movs	r2, #128	@ 0x80
 801355a:	2101      	movs	r1, #1
 801355c:	4803      	ldr	r0, [pc, #12]	@ (801356c <USBD_LL_Init+0x94>)
 801355e:	f7f6 fba3 	bl	8009ca8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013562:	2300      	movs	r3, #0
}
 8013564:	4618      	mov	r0, r3
 8013566:	3708      	adds	r7, #8
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}
 801356c:	20004468 	.word	0x20004468

08013570 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b084      	sub	sp, #16
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013578:	2300      	movs	r3, #0
 801357a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801357c:	2300      	movs	r3, #0
 801357e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013586:	4618      	mov	r0, r3
 8013588:	f7f5 faaf 	bl	8008aea <HAL_PCD_Start>
 801358c:	4603      	mov	r3, r0
 801358e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013590:	7bfb      	ldrb	r3, [r7, #15]
 8013592:	4618      	mov	r0, r3
 8013594:	f000 f942 	bl	801381c <USBD_Get_USB_Status>
 8013598:	4603      	mov	r3, r0
 801359a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801359c:	7bbb      	ldrb	r3, [r7, #14]
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3710      	adds	r7, #16
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}

080135a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80135a6:	b580      	push	{r7, lr}
 80135a8:	b084      	sub	sp, #16
 80135aa:	af00      	add	r7, sp, #0
 80135ac:	6078      	str	r0, [r7, #4]
 80135ae:	4608      	mov	r0, r1
 80135b0:	4611      	mov	r1, r2
 80135b2:	461a      	mov	r2, r3
 80135b4:	4603      	mov	r3, r0
 80135b6:	70fb      	strb	r3, [r7, #3]
 80135b8:	460b      	mov	r3, r1
 80135ba:	70bb      	strb	r3, [r7, #2]
 80135bc:	4613      	mov	r3, r2
 80135be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135c0:	2300      	movs	r3, #0
 80135c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135c4:	2300      	movs	r3, #0
 80135c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80135ce:	78bb      	ldrb	r3, [r7, #2]
 80135d0:	883a      	ldrh	r2, [r7, #0]
 80135d2:	78f9      	ldrb	r1, [r7, #3]
 80135d4:	f7f5 ff83 	bl	80094de <HAL_PCD_EP_Open>
 80135d8:	4603      	mov	r3, r0
 80135da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80135dc:	7bfb      	ldrb	r3, [r7, #15]
 80135de:	4618      	mov	r0, r3
 80135e0:	f000 f91c 	bl	801381c <USBD_Get_USB_Status>
 80135e4:	4603      	mov	r3, r0
 80135e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80135e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3710      	adds	r7, #16
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}

080135f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80135f2:	b580      	push	{r7, lr}
 80135f4:	b084      	sub	sp, #16
 80135f6:	af00      	add	r7, sp, #0
 80135f8:	6078      	str	r0, [r7, #4]
 80135fa:	460b      	mov	r3, r1
 80135fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135fe:	2300      	movs	r3, #0
 8013600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013602:	2300      	movs	r3, #0
 8013604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801360c:	78fa      	ldrb	r2, [r7, #3]
 801360e:	4611      	mov	r1, r2
 8013610:	4618      	mov	r0, r3
 8013612:	f7f5 ffce 	bl	80095b2 <HAL_PCD_EP_Close>
 8013616:	4603      	mov	r3, r0
 8013618:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801361a:	7bfb      	ldrb	r3, [r7, #15]
 801361c:	4618      	mov	r0, r3
 801361e:	f000 f8fd 	bl	801381c <USBD_Get_USB_Status>
 8013622:	4603      	mov	r3, r0
 8013624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013626:	7bbb      	ldrb	r3, [r7, #14]
}
 8013628:	4618      	mov	r0, r3
 801362a:	3710      	adds	r7, #16
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}

08013630 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b084      	sub	sp, #16
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	460b      	mov	r3, r1
 801363a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801363c:	2300      	movs	r3, #0
 801363e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013640:	2300      	movs	r3, #0
 8013642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801364a:	78fa      	ldrb	r2, [r7, #3]
 801364c:	4611      	mov	r1, r2
 801364e:	4618      	mov	r0, r3
 8013650:	f7f6 f886 	bl	8009760 <HAL_PCD_EP_SetStall>
 8013654:	4603      	mov	r3, r0
 8013656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013658:	7bfb      	ldrb	r3, [r7, #15]
 801365a:	4618      	mov	r0, r3
 801365c:	f000 f8de 	bl	801381c <USBD_Get_USB_Status>
 8013660:	4603      	mov	r3, r0
 8013662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013664:	7bbb      	ldrb	r3, [r7, #14]
}
 8013666:	4618      	mov	r0, r3
 8013668:	3710      	adds	r7, #16
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}

0801366e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801366e:	b580      	push	{r7, lr}
 8013670:	b084      	sub	sp, #16
 8013672:	af00      	add	r7, sp, #0
 8013674:	6078      	str	r0, [r7, #4]
 8013676:	460b      	mov	r3, r1
 8013678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801367a:	2300      	movs	r3, #0
 801367c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801367e:	2300      	movs	r3, #0
 8013680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013688:	78fa      	ldrb	r2, [r7, #3]
 801368a:	4611      	mov	r1, r2
 801368c:	4618      	mov	r0, r3
 801368e:	f7f6 f8ca 	bl	8009826 <HAL_PCD_EP_ClrStall>
 8013692:	4603      	mov	r3, r0
 8013694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013696:	7bfb      	ldrb	r3, [r7, #15]
 8013698:	4618      	mov	r0, r3
 801369a:	f000 f8bf 	bl	801381c <USBD_Get_USB_Status>
 801369e:	4603      	mov	r3, r0
 80136a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80136a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	3710      	adds	r7, #16
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}

080136ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136ac:	b480      	push	{r7}
 80136ae:	b085      	sub	sp, #20
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	460b      	mov	r3, r1
 80136b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80136be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80136c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	da0b      	bge.n	80136e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80136c8:	78fb      	ldrb	r3, [r7, #3]
 80136ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80136ce:	68f9      	ldr	r1, [r7, #12]
 80136d0:	4613      	mov	r3, r2
 80136d2:	00db      	lsls	r3, r3, #3
 80136d4:	4413      	add	r3, r2
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	440b      	add	r3, r1
 80136da:	3316      	adds	r3, #22
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	e00b      	b.n	80136f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80136e0:	78fb      	ldrb	r3, [r7, #3]
 80136e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80136e6:	68f9      	ldr	r1, [r7, #12]
 80136e8:	4613      	mov	r3, r2
 80136ea:	00db      	lsls	r3, r3, #3
 80136ec:	4413      	add	r3, r2
 80136ee:	009b      	lsls	r3, r3, #2
 80136f0:	440b      	add	r3, r1
 80136f2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80136f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3714      	adds	r7, #20
 80136fc:	46bd      	mov	sp, r7
 80136fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013702:	4770      	bx	lr

08013704 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b084      	sub	sp, #16
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	460b      	mov	r3, r1
 801370e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013710:	2300      	movs	r3, #0
 8013712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013714:	2300      	movs	r3, #0
 8013716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801371e:	78fa      	ldrb	r2, [r7, #3]
 8013720:	4611      	mov	r1, r2
 8013722:	4618      	mov	r0, r3
 8013724:	f7f5 feb7 	bl	8009496 <HAL_PCD_SetAddress>
 8013728:	4603      	mov	r3, r0
 801372a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801372c:	7bfb      	ldrb	r3, [r7, #15]
 801372e:	4618      	mov	r0, r3
 8013730:	f000 f874 	bl	801381c <USBD_Get_USB_Status>
 8013734:	4603      	mov	r3, r0
 8013736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013738:	7bbb      	ldrb	r3, [r7, #14]
}
 801373a:	4618      	mov	r0, r3
 801373c:	3710      	adds	r7, #16
 801373e:	46bd      	mov	sp, r7
 8013740:	bd80      	pop	{r7, pc}

08013742 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013742:	b580      	push	{r7, lr}
 8013744:	b086      	sub	sp, #24
 8013746:	af00      	add	r7, sp, #0
 8013748:	60f8      	str	r0, [r7, #12]
 801374a:	607a      	str	r2, [r7, #4]
 801374c:	603b      	str	r3, [r7, #0]
 801374e:	460b      	mov	r3, r1
 8013750:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013752:	2300      	movs	r3, #0
 8013754:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013756:	2300      	movs	r3, #0
 8013758:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013760:	7af9      	ldrb	r1, [r7, #11]
 8013762:	683b      	ldr	r3, [r7, #0]
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	f7f5 ffc1 	bl	80096ec <HAL_PCD_EP_Transmit>
 801376a:	4603      	mov	r3, r0
 801376c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801376e:	7dfb      	ldrb	r3, [r7, #23]
 8013770:	4618      	mov	r0, r3
 8013772:	f000 f853 	bl	801381c <USBD_Get_USB_Status>
 8013776:	4603      	mov	r3, r0
 8013778:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801377a:	7dbb      	ldrb	r3, [r7, #22]
}
 801377c:	4618      	mov	r0, r3
 801377e:	3718      	adds	r7, #24
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}

08013784 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b086      	sub	sp, #24
 8013788:	af00      	add	r7, sp, #0
 801378a:	60f8      	str	r0, [r7, #12]
 801378c:	607a      	str	r2, [r7, #4]
 801378e:	603b      	str	r3, [r7, #0]
 8013790:	460b      	mov	r3, r1
 8013792:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013794:	2300      	movs	r3, #0
 8013796:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013798:	2300      	movs	r3, #0
 801379a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80137a2:	7af9      	ldrb	r1, [r7, #11]
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	687a      	ldr	r2, [r7, #4]
 80137a8:	f7f5 ff4d 	bl	8009646 <HAL_PCD_EP_Receive>
 80137ac:	4603      	mov	r3, r0
 80137ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80137b0:	7dfb      	ldrb	r3, [r7, #23]
 80137b2:	4618      	mov	r0, r3
 80137b4:	f000 f832 	bl	801381c <USBD_Get_USB_Status>
 80137b8:	4603      	mov	r3, r0
 80137ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80137bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80137be:	4618      	mov	r0, r3
 80137c0:	3718      	adds	r7, #24
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}

080137c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80137c6:	b580      	push	{r7, lr}
 80137c8:	b082      	sub	sp, #8
 80137ca:	af00      	add	r7, sp, #0
 80137cc:	6078      	str	r0, [r7, #4]
 80137ce:	460b      	mov	r3, r1
 80137d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80137d8:	78fa      	ldrb	r2, [r7, #3]
 80137da:	4611      	mov	r1, r2
 80137dc:	4618      	mov	r0, r3
 80137de:	f7f5 ff6d 	bl	80096bc <HAL_PCD_EP_GetRxCount>
 80137e2:	4603      	mov	r3, r0
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	3708      	adds	r7, #8
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}

080137ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80137f4:	4b03      	ldr	r3, [pc, #12]	@ (8013804 <USBD_static_malloc+0x18>)
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	370c      	adds	r7, #12
 80137fa:	46bd      	mov	sp, r7
 80137fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013800:	4770      	bx	lr
 8013802:	bf00      	nop
 8013804:	2000494c 	.word	0x2000494c

08013808 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013808:	b480      	push	{r7}
 801380a:	b083      	sub	sp, #12
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]

}
 8013810:	bf00      	nop
 8013812:	370c      	adds	r7, #12
 8013814:	46bd      	mov	sp, r7
 8013816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381a:	4770      	bx	lr

0801381c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801381c:	b480      	push	{r7}
 801381e:	b085      	sub	sp, #20
 8013820:	af00      	add	r7, sp, #0
 8013822:	4603      	mov	r3, r0
 8013824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013826:	2300      	movs	r3, #0
 8013828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801382a:	79fb      	ldrb	r3, [r7, #7]
 801382c:	2b03      	cmp	r3, #3
 801382e:	d817      	bhi.n	8013860 <USBD_Get_USB_Status+0x44>
 8013830:	a201      	add	r2, pc, #4	@ (adr r2, 8013838 <USBD_Get_USB_Status+0x1c>)
 8013832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013836:	bf00      	nop
 8013838:	08013849 	.word	0x08013849
 801383c:	0801384f 	.word	0x0801384f
 8013840:	08013855 	.word	0x08013855
 8013844:	0801385b 	.word	0x0801385b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013848:	2300      	movs	r3, #0
 801384a:	73fb      	strb	r3, [r7, #15]
    break;
 801384c:	e00b      	b.n	8013866 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801384e:	2303      	movs	r3, #3
 8013850:	73fb      	strb	r3, [r7, #15]
    break;
 8013852:	e008      	b.n	8013866 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013854:	2301      	movs	r3, #1
 8013856:	73fb      	strb	r3, [r7, #15]
    break;
 8013858:	e005      	b.n	8013866 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801385a:	2303      	movs	r3, #3
 801385c:	73fb      	strb	r3, [r7, #15]
    break;
 801385e:	e002      	b.n	8013866 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013860:	2303      	movs	r3, #3
 8013862:	73fb      	strb	r3, [r7, #15]
    break;
 8013864:	bf00      	nop
  }
  return usb_status;
 8013866:	7bfb      	ldrb	r3, [r7, #15]
}
 8013868:	4618      	mov	r0, r3
 801386a:	3714      	adds	r7, #20
 801386c:	46bd      	mov	sp, r7
 801386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013872:	4770      	bx	lr

08013874 <malloc>:
 8013874:	4b02      	ldr	r3, [pc, #8]	@ (8013880 <malloc+0xc>)
 8013876:	4601      	mov	r1, r0
 8013878:	6818      	ldr	r0, [r3, #0]
 801387a:	f000 b82d 	b.w	80138d8 <_malloc_r>
 801387e:	bf00      	nop
 8013880:	20000254 	.word	0x20000254

08013884 <free>:
 8013884:	4b02      	ldr	r3, [pc, #8]	@ (8013890 <free+0xc>)
 8013886:	4601      	mov	r1, r0
 8013888:	6818      	ldr	r0, [r3, #0]
 801388a:	f002 b865 	b.w	8015958 <_free_r>
 801388e:	bf00      	nop
 8013890:	20000254 	.word	0x20000254

08013894 <sbrk_aligned>:
 8013894:	b570      	push	{r4, r5, r6, lr}
 8013896:	4e0f      	ldr	r6, [pc, #60]	@ (80138d4 <sbrk_aligned+0x40>)
 8013898:	460c      	mov	r4, r1
 801389a:	6831      	ldr	r1, [r6, #0]
 801389c:	4605      	mov	r5, r0
 801389e:	b911      	cbnz	r1, 80138a6 <sbrk_aligned+0x12>
 80138a0:	f001 f9ac 	bl	8014bfc <_sbrk_r>
 80138a4:	6030      	str	r0, [r6, #0]
 80138a6:	4621      	mov	r1, r4
 80138a8:	4628      	mov	r0, r5
 80138aa:	f001 f9a7 	bl	8014bfc <_sbrk_r>
 80138ae:	1c43      	adds	r3, r0, #1
 80138b0:	d103      	bne.n	80138ba <sbrk_aligned+0x26>
 80138b2:	f04f 34ff 	mov.w	r4, #4294967295
 80138b6:	4620      	mov	r0, r4
 80138b8:	bd70      	pop	{r4, r5, r6, pc}
 80138ba:	1cc4      	adds	r4, r0, #3
 80138bc:	f024 0403 	bic.w	r4, r4, #3
 80138c0:	42a0      	cmp	r0, r4
 80138c2:	d0f8      	beq.n	80138b6 <sbrk_aligned+0x22>
 80138c4:	1a21      	subs	r1, r4, r0
 80138c6:	4628      	mov	r0, r5
 80138c8:	f001 f998 	bl	8014bfc <_sbrk_r>
 80138cc:	3001      	adds	r0, #1
 80138ce:	d1f2      	bne.n	80138b6 <sbrk_aligned+0x22>
 80138d0:	e7ef      	b.n	80138b2 <sbrk_aligned+0x1e>
 80138d2:	bf00      	nop
 80138d4:	20004b6c 	.word	0x20004b6c

080138d8 <_malloc_r>:
 80138d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138dc:	1ccd      	adds	r5, r1, #3
 80138de:	f025 0503 	bic.w	r5, r5, #3
 80138e2:	3508      	adds	r5, #8
 80138e4:	2d0c      	cmp	r5, #12
 80138e6:	bf38      	it	cc
 80138e8:	250c      	movcc	r5, #12
 80138ea:	2d00      	cmp	r5, #0
 80138ec:	4606      	mov	r6, r0
 80138ee:	db01      	blt.n	80138f4 <_malloc_r+0x1c>
 80138f0:	42a9      	cmp	r1, r5
 80138f2:	d904      	bls.n	80138fe <_malloc_r+0x26>
 80138f4:	230c      	movs	r3, #12
 80138f6:	6033      	str	r3, [r6, #0]
 80138f8:	2000      	movs	r0, #0
 80138fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80139d4 <_malloc_r+0xfc>
 8013902:	f000 f869 	bl	80139d8 <__malloc_lock>
 8013906:	f8d8 3000 	ldr.w	r3, [r8]
 801390a:	461c      	mov	r4, r3
 801390c:	bb44      	cbnz	r4, 8013960 <_malloc_r+0x88>
 801390e:	4629      	mov	r1, r5
 8013910:	4630      	mov	r0, r6
 8013912:	f7ff ffbf 	bl	8013894 <sbrk_aligned>
 8013916:	1c43      	adds	r3, r0, #1
 8013918:	4604      	mov	r4, r0
 801391a:	d158      	bne.n	80139ce <_malloc_r+0xf6>
 801391c:	f8d8 4000 	ldr.w	r4, [r8]
 8013920:	4627      	mov	r7, r4
 8013922:	2f00      	cmp	r7, #0
 8013924:	d143      	bne.n	80139ae <_malloc_r+0xd6>
 8013926:	2c00      	cmp	r4, #0
 8013928:	d04b      	beq.n	80139c2 <_malloc_r+0xea>
 801392a:	6823      	ldr	r3, [r4, #0]
 801392c:	4639      	mov	r1, r7
 801392e:	4630      	mov	r0, r6
 8013930:	eb04 0903 	add.w	r9, r4, r3
 8013934:	f001 f962 	bl	8014bfc <_sbrk_r>
 8013938:	4581      	cmp	r9, r0
 801393a:	d142      	bne.n	80139c2 <_malloc_r+0xea>
 801393c:	6821      	ldr	r1, [r4, #0]
 801393e:	1a6d      	subs	r5, r5, r1
 8013940:	4629      	mov	r1, r5
 8013942:	4630      	mov	r0, r6
 8013944:	f7ff ffa6 	bl	8013894 <sbrk_aligned>
 8013948:	3001      	adds	r0, #1
 801394a:	d03a      	beq.n	80139c2 <_malloc_r+0xea>
 801394c:	6823      	ldr	r3, [r4, #0]
 801394e:	442b      	add	r3, r5
 8013950:	6023      	str	r3, [r4, #0]
 8013952:	f8d8 3000 	ldr.w	r3, [r8]
 8013956:	685a      	ldr	r2, [r3, #4]
 8013958:	bb62      	cbnz	r2, 80139b4 <_malloc_r+0xdc>
 801395a:	f8c8 7000 	str.w	r7, [r8]
 801395e:	e00f      	b.n	8013980 <_malloc_r+0xa8>
 8013960:	6822      	ldr	r2, [r4, #0]
 8013962:	1b52      	subs	r2, r2, r5
 8013964:	d420      	bmi.n	80139a8 <_malloc_r+0xd0>
 8013966:	2a0b      	cmp	r2, #11
 8013968:	d917      	bls.n	801399a <_malloc_r+0xc2>
 801396a:	1961      	adds	r1, r4, r5
 801396c:	42a3      	cmp	r3, r4
 801396e:	6025      	str	r5, [r4, #0]
 8013970:	bf18      	it	ne
 8013972:	6059      	strne	r1, [r3, #4]
 8013974:	6863      	ldr	r3, [r4, #4]
 8013976:	bf08      	it	eq
 8013978:	f8c8 1000 	streq.w	r1, [r8]
 801397c:	5162      	str	r2, [r4, r5]
 801397e:	604b      	str	r3, [r1, #4]
 8013980:	4630      	mov	r0, r6
 8013982:	f000 f82f 	bl	80139e4 <__malloc_unlock>
 8013986:	f104 000b 	add.w	r0, r4, #11
 801398a:	1d23      	adds	r3, r4, #4
 801398c:	f020 0007 	bic.w	r0, r0, #7
 8013990:	1ac2      	subs	r2, r0, r3
 8013992:	bf1c      	itt	ne
 8013994:	1a1b      	subne	r3, r3, r0
 8013996:	50a3      	strne	r3, [r4, r2]
 8013998:	e7af      	b.n	80138fa <_malloc_r+0x22>
 801399a:	6862      	ldr	r2, [r4, #4]
 801399c:	42a3      	cmp	r3, r4
 801399e:	bf0c      	ite	eq
 80139a0:	f8c8 2000 	streq.w	r2, [r8]
 80139a4:	605a      	strne	r2, [r3, #4]
 80139a6:	e7eb      	b.n	8013980 <_malloc_r+0xa8>
 80139a8:	4623      	mov	r3, r4
 80139aa:	6864      	ldr	r4, [r4, #4]
 80139ac:	e7ae      	b.n	801390c <_malloc_r+0x34>
 80139ae:	463c      	mov	r4, r7
 80139b0:	687f      	ldr	r7, [r7, #4]
 80139b2:	e7b6      	b.n	8013922 <_malloc_r+0x4a>
 80139b4:	461a      	mov	r2, r3
 80139b6:	685b      	ldr	r3, [r3, #4]
 80139b8:	42a3      	cmp	r3, r4
 80139ba:	d1fb      	bne.n	80139b4 <_malloc_r+0xdc>
 80139bc:	2300      	movs	r3, #0
 80139be:	6053      	str	r3, [r2, #4]
 80139c0:	e7de      	b.n	8013980 <_malloc_r+0xa8>
 80139c2:	230c      	movs	r3, #12
 80139c4:	6033      	str	r3, [r6, #0]
 80139c6:	4630      	mov	r0, r6
 80139c8:	f000 f80c 	bl	80139e4 <__malloc_unlock>
 80139cc:	e794      	b.n	80138f8 <_malloc_r+0x20>
 80139ce:	6005      	str	r5, [r0, #0]
 80139d0:	e7d6      	b.n	8013980 <_malloc_r+0xa8>
 80139d2:	bf00      	nop
 80139d4:	20004b70 	.word	0x20004b70

080139d8 <__malloc_lock>:
 80139d8:	4801      	ldr	r0, [pc, #4]	@ (80139e0 <__malloc_lock+0x8>)
 80139da:	f001 b95c 	b.w	8014c96 <__retarget_lock_acquire_recursive>
 80139de:	bf00      	nop
 80139e0:	20004cb4 	.word	0x20004cb4

080139e4 <__malloc_unlock>:
 80139e4:	4801      	ldr	r0, [pc, #4]	@ (80139ec <__malloc_unlock+0x8>)
 80139e6:	f001 b957 	b.w	8014c98 <__retarget_lock_release_recursive>
 80139ea:	bf00      	nop
 80139ec:	20004cb4 	.word	0x20004cb4

080139f0 <__cvt>:
 80139f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139f4:	ec57 6b10 	vmov	r6, r7, d0
 80139f8:	2f00      	cmp	r7, #0
 80139fa:	460c      	mov	r4, r1
 80139fc:	4619      	mov	r1, r3
 80139fe:	463b      	mov	r3, r7
 8013a00:	bfbb      	ittet	lt
 8013a02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013a06:	461f      	movlt	r7, r3
 8013a08:	2300      	movge	r3, #0
 8013a0a:	232d      	movlt	r3, #45	@ 0x2d
 8013a0c:	700b      	strb	r3, [r1, #0]
 8013a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013a14:	4691      	mov	r9, r2
 8013a16:	f023 0820 	bic.w	r8, r3, #32
 8013a1a:	bfbc      	itt	lt
 8013a1c:	4632      	movlt	r2, r6
 8013a1e:	4616      	movlt	r6, r2
 8013a20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013a24:	d005      	beq.n	8013a32 <__cvt+0x42>
 8013a26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013a2a:	d100      	bne.n	8013a2e <__cvt+0x3e>
 8013a2c:	3401      	adds	r4, #1
 8013a2e:	2102      	movs	r1, #2
 8013a30:	e000      	b.n	8013a34 <__cvt+0x44>
 8013a32:	2103      	movs	r1, #3
 8013a34:	ab03      	add	r3, sp, #12
 8013a36:	9301      	str	r3, [sp, #4]
 8013a38:	ab02      	add	r3, sp, #8
 8013a3a:	9300      	str	r3, [sp, #0]
 8013a3c:	ec47 6b10 	vmov	d0, r6, r7
 8013a40:	4653      	mov	r3, sl
 8013a42:	4622      	mov	r2, r4
 8013a44:	f001 f9b8 	bl	8014db8 <_dtoa_r>
 8013a48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013a4c:	4605      	mov	r5, r0
 8013a4e:	d119      	bne.n	8013a84 <__cvt+0x94>
 8013a50:	f019 0f01 	tst.w	r9, #1
 8013a54:	d00e      	beq.n	8013a74 <__cvt+0x84>
 8013a56:	eb00 0904 	add.w	r9, r0, r4
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	4630      	mov	r0, r6
 8013a60:	4639      	mov	r1, r7
 8013a62:	f7ed f839 	bl	8000ad8 <__aeabi_dcmpeq>
 8013a66:	b108      	cbz	r0, 8013a6c <__cvt+0x7c>
 8013a68:	f8cd 900c 	str.w	r9, [sp, #12]
 8013a6c:	2230      	movs	r2, #48	@ 0x30
 8013a6e:	9b03      	ldr	r3, [sp, #12]
 8013a70:	454b      	cmp	r3, r9
 8013a72:	d31e      	bcc.n	8013ab2 <__cvt+0xc2>
 8013a74:	9b03      	ldr	r3, [sp, #12]
 8013a76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013a78:	1b5b      	subs	r3, r3, r5
 8013a7a:	4628      	mov	r0, r5
 8013a7c:	6013      	str	r3, [r2, #0]
 8013a7e:	b004      	add	sp, #16
 8013a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013a88:	eb00 0904 	add.w	r9, r0, r4
 8013a8c:	d1e5      	bne.n	8013a5a <__cvt+0x6a>
 8013a8e:	7803      	ldrb	r3, [r0, #0]
 8013a90:	2b30      	cmp	r3, #48	@ 0x30
 8013a92:	d10a      	bne.n	8013aaa <__cvt+0xba>
 8013a94:	2200      	movs	r2, #0
 8013a96:	2300      	movs	r3, #0
 8013a98:	4630      	mov	r0, r6
 8013a9a:	4639      	mov	r1, r7
 8013a9c:	f7ed f81c 	bl	8000ad8 <__aeabi_dcmpeq>
 8013aa0:	b918      	cbnz	r0, 8013aaa <__cvt+0xba>
 8013aa2:	f1c4 0401 	rsb	r4, r4, #1
 8013aa6:	f8ca 4000 	str.w	r4, [sl]
 8013aaa:	f8da 3000 	ldr.w	r3, [sl]
 8013aae:	4499      	add	r9, r3
 8013ab0:	e7d3      	b.n	8013a5a <__cvt+0x6a>
 8013ab2:	1c59      	adds	r1, r3, #1
 8013ab4:	9103      	str	r1, [sp, #12]
 8013ab6:	701a      	strb	r2, [r3, #0]
 8013ab8:	e7d9      	b.n	8013a6e <__cvt+0x7e>

08013aba <__exponent>:
 8013aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013abc:	2900      	cmp	r1, #0
 8013abe:	bfba      	itte	lt
 8013ac0:	4249      	neglt	r1, r1
 8013ac2:	232d      	movlt	r3, #45	@ 0x2d
 8013ac4:	232b      	movge	r3, #43	@ 0x2b
 8013ac6:	2909      	cmp	r1, #9
 8013ac8:	7002      	strb	r2, [r0, #0]
 8013aca:	7043      	strb	r3, [r0, #1]
 8013acc:	dd29      	ble.n	8013b22 <__exponent+0x68>
 8013ace:	f10d 0307 	add.w	r3, sp, #7
 8013ad2:	461d      	mov	r5, r3
 8013ad4:	270a      	movs	r7, #10
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	fbb1 f6f7 	udiv	r6, r1, r7
 8013adc:	fb07 1416 	mls	r4, r7, r6, r1
 8013ae0:	3430      	adds	r4, #48	@ 0x30
 8013ae2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013ae6:	460c      	mov	r4, r1
 8013ae8:	2c63      	cmp	r4, #99	@ 0x63
 8013aea:	f103 33ff 	add.w	r3, r3, #4294967295
 8013aee:	4631      	mov	r1, r6
 8013af0:	dcf1      	bgt.n	8013ad6 <__exponent+0x1c>
 8013af2:	3130      	adds	r1, #48	@ 0x30
 8013af4:	1e94      	subs	r4, r2, #2
 8013af6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013afa:	1c41      	adds	r1, r0, #1
 8013afc:	4623      	mov	r3, r4
 8013afe:	42ab      	cmp	r3, r5
 8013b00:	d30a      	bcc.n	8013b18 <__exponent+0x5e>
 8013b02:	f10d 0309 	add.w	r3, sp, #9
 8013b06:	1a9b      	subs	r3, r3, r2
 8013b08:	42ac      	cmp	r4, r5
 8013b0a:	bf88      	it	hi
 8013b0c:	2300      	movhi	r3, #0
 8013b0e:	3302      	adds	r3, #2
 8013b10:	4403      	add	r3, r0
 8013b12:	1a18      	subs	r0, r3, r0
 8013b14:	b003      	add	sp, #12
 8013b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b18:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013b1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013b20:	e7ed      	b.n	8013afe <__exponent+0x44>
 8013b22:	2330      	movs	r3, #48	@ 0x30
 8013b24:	3130      	adds	r1, #48	@ 0x30
 8013b26:	7083      	strb	r3, [r0, #2]
 8013b28:	70c1      	strb	r1, [r0, #3]
 8013b2a:	1d03      	adds	r3, r0, #4
 8013b2c:	e7f1      	b.n	8013b12 <__exponent+0x58>
	...

08013b30 <_printf_float>:
 8013b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b34:	b08d      	sub	sp, #52	@ 0x34
 8013b36:	460c      	mov	r4, r1
 8013b38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013b3c:	4616      	mov	r6, r2
 8013b3e:	461f      	mov	r7, r3
 8013b40:	4605      	mov	r5, r0
 8013b42:	f001 f823 	bl	8014b8c <_localeconv_r>
 8013b46:	6803      	ldr	r3, [r0, #0]
 8013b48:	9304      	str	r3, [sp, #16]
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7ec fb98 	bl	8000280 <strlen>
 8013b50:	2300      	movs	r3, #0
 8013b52:	930a      	str	r3, [sp, #40]	@ 0x28
 8013b54:	f8d8 3000 	ldr.w	r3, [r8]
 8013b58:	9005      	str	r0, [sp, #20]
 8013b5a:	3307      	adds	r3, #7
 8013b5c:	f023 0307 	bic.w	r3, r3, #7
 8013b60:	f103 0208 	add.w	r2, r3, #8
 8013b64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013b68:	f8d4 b000 	ldr.w	fp, [r4]
 8013b6c:	f8c8 2000 	str.w	r2, [r8]
 8013b70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013b74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013b78:	9307      	str	r3, [sp, #28]
 8013b7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8013b7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013b82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b86:	4b9c      	ldr	r3, [pc, #624]	@ (8013df8 <_printf_float+0x2c8>)
 8013b88:	f04f 32ff 	mov.w	r2, #4294967295
 8013b8c:	f7ec ffd6 	bl	8000b3c <__aeabi_dcmpun>
 8013b90:	bb70      	cbnz	r0, 8013bf0 <_printf_float+0xc0>
 8013b92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b96:	4b98      	ldr	r3, [pc, #608]	@ (8013df8 <_printf_float+0x2c8>)
 8013b98:	f04f 32ff 	mov.w	r2, #4294967295
 8013b9c:	f7ec ffb0 	bl	8000b00 <__aeabi_dcmple>
 8013ba0:	bb30      	cbnz	r0, 8013bf0 <_printf_float+0xc0>
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	4640      	mov	r0, r8
 8013ba8:	4649      	mov	r1, r9
 8013baa:	f7ec ff9f 	bl	8000aec <__aeabi_dcmplt>
 8013bae:	b110      	cbz	r0, 8013bb6 <_printf_float+0x86>
 8013bb0:	232d      	movs	r3, #45	@ 0x2d
 8013bb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013bb6:	4a91      	ldr	r2, [pc, #580]	@ (8013dfc <_printf_float+0x2cc>)
 8013bb8:	4b91      	ldr	r3, [pc, #580]	@ (8013e00 <_printf_float+0x2d0>)
 8013bba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013bbe:	bf8c      	ite	hi
 8013bc0:	4690      	movhi	r8, r2
 8013bc2:	4698      	movls	r8, r3
 8013bc4:	2303      	movs	r3, #3
 8013bc6:	6123      	str	r3, [r4, #16]
 8013bc8:	f02b 0304 	bic.w	r3, fp, #4
 8013bcc:	6023      	str	r3, [r4, #0]
 8013bce:	f04f 0900 	mov.w	r9, #0
 8013bd2:	9700      	str	r7, [sp, #0]
 8013bd4:	4633      	mov	r3, r6
 8013bd6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013bd8:	4621      	mov	r1, r4
 8013bda:	4628      	mov	r0, r5
 8013bdc:	f000 f9d2 	bl	8013f84 <_printf_common>
 8013be0:	3001      	adds	r0, #1
 8013be2:	f040 808d 	bne.w	8013d00 <_printf_float+0x1d0>
 8013be6:	f04f 30ff 	mov.w	r0, #4294967295
 8013bea:	b00d      	add	sp, #52	@ 0x34
 8013bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bf0:	4642      	mov	r2, r8
 8013bf2:	464b      	mov	r3, r9
 8013bf4:	4640      	mov	r0, r8
 8013bf6:	4649      	mov	r1, r9
 8013bf8:	f7ec ffa0 	bl	8000b3c <__aeabi_dcmpun>
 8013bfc:	b140      	cbz	r0, 8013c10 <_printf_float+0xe0>
 8013bfe:	464b      	mov	r3, r9
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	bfbc      	itt	lt
 8013c04:	232d      	movlt	r3, #45	@ 0x2d
 8013c06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013c0a:	4a7e      	ldr	r2, [pc, #504]	@ (8013e04 <_printf_float+0x2d4>)
 8013c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8013e08 <_printf_float+0x2d8>)
 8013c0e:	e7d4      	b.n	8013bba <_printf_float+0x8a>
 8013c10:	6863      	ldr	r3, [r4, #4]
 8013c12:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013c16:	9206      	str	r2, [sp, #24]
 8013c18:	1c5a      	adds	r2, r3, #1
 8013c1a:	d13b      	bne.n	8013c94 <_printf_float+0x164>
 8013c1c:	2306      	movs	r3, #6
 8013c1e:	6063      	str	r3, [r4, #4]
 8013c20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013c24:	2300      	movs	r3, #0
 8013c26:	6022      	str	r2, [r4, #0]
 8013c28:	9303      	str	r3, [sp, #12]
 8013c2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8013c2c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013c30:	ab09      	add	r3, sp, #36	@ 0x24
 8013c32:	9300      	str	r3, [sp, #0]
 8013c34:	6861      	ldr	r1, [r4, #4]
 8013c36:	ec49 8b10 	vmov	d0, r8, r9
 8013c3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013c3e:	4628      	mov	r0, r5
 8013c40:	f7ff fed6 	bl	80139f0 <__cvt>
 8013c44:	9b06      	ldr	r3, [sp, #24]
 8013c46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013c48:	2b47      	cmp	r3, #71	@ 0x47
 8013c4a:	4680      	mov	r8, r0
 8013c4c:	d129      	bne.n	8013ca2 <_printf_float+0x172>
 8013c4e:	1cc8      	adds	r0, r1, #3
 8013c50:	db02      	blt.n	8013c58 <_printf_float+0x128>
 8013c52:	6863      	ldr	r3, [r4, #4]
 8013c54:	4299      	cmp	r1, r3
 8013c56:	dd41      	ble.n	8013cdc <_printf_float+0x1ac>
 8013c58:	f1aa 0a02 	sub.w	sl, sl, #2
 8013c5c:	fa5f fa8a 	uxtb.w	sl, sl
 8013c60:	3901      	subs	r1, #1
 8013c62:	4652      	mov	r2, sl
 8013c64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013c68:	9109      	str	r1, [sp, #36]	@ 0x24
 8013c6a:	f7ff ff26 	bl	8013aba <__exponent>
 8013c6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013c70:	1813      	adds	r3, r2, r0
 8013c72:	2a01      	cmp	r2, #1
 8013c74:	4681      	mov	r9, r0
 8013c76:	6123      	str	r3, [r4, #16]
 8013c78:	dc02      	bgt.n	8013c80 <_printf_float+0x150>
 8013c7a:	6822      	ldr	r2, [r4, #0]
 8013c7c:	07d2      	lsls	r2, r2, #31
 8013c7e:	d501      	bpl.n	8013c84 <_printf_float+0x154>
 8013c80:	3301      	adds	r3, #1
 8013c82:	6123      	str	r3, [r4, #16]
 8013c84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d0a2      	beq.n	8013bd2 <_printf_float+0xa2>
 8013c8c:	232d      	movs	r3, #45	@ 0x2d
 8013c8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c92:	e79e      	b.n	8013bd2 <_printf_float+0xa2>
 8013c94:	9a06      	ldr	r2, [sp, #24]
 8013c96:	2a47      	cmp	r2, #71	@ 0x47
 8013c98:	d1c2      	bne.n	8013c20 <_printf_float+0xf0>
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d1c0      	bne.n	8013c20 <_printf_float+0xf0>
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	e7bd      	b.n	8013c1e <_printf_float+0xee>
 8013ca2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013ca6:	d9db      	bls.n	8013c60 <_printf_float+0x130>
 8013ca8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013cac:	d118      	bne.n	8013ce0 <_printf_float+0x1b0>
 8013cae:	2900      	cmp	r1, #0
 8013cb0:	6863      	ldr	r3, [r4, #4]
 8013cb2:	dd0b      	ble.n	8013ccc <_printf_float+0x19c>
 8013cb4:	6121      	str	r1, [r4, #16]
 8013cb6:	b913      	cbnz	r3, 8013cbe <_printf_float+0x18e>
 8013cb8:	6822      	ldr	r2, [r4, #0]
 8013cba:	07d0      	lsls	r0, r2, #31
 8013cbc:	d502      	bpl.n	8013cc4 <_printf_float+0x194>
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	440b      	add	r3, r1
 8013cc2:	6123      	str	r3, [r4, #16]
 8013cc4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013cc6:	f04f 0900 	mov.w	r9, #0
 8013cca:	e7db      	b.n	8013c84 <_printf_float+0x154>
 8013ccc:	b913      	cbnz	r3, 8013cd4 <_printf_float+0x1a4>
 8013cce:	6822      	ldr	r2, [r4, #0]
 8013cd0:	07d2      	lsls	r2, r2, #31
 8013cd2:	d501      	bpl.n	8013cd8 <_printf_float+0x1a8>
 8013cd4:	3302      	adds	r3, #2
 8013cd6:	e7f4      	b.n	8013cc2 <_printf_float+0x192>
 8013cd8:	2301      	movs	r3, #1
 8013cda:	e7f2      	b.n	8013cc2 <_printf_float+0x192>
 8013cdc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013ce0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ce2:	4299      	cmp	r1, r3
 8013ce4:	db05      	blt.n	8013cf2 <_printf_float+0x1c2>
 8013ce6:	6823      	ldr	r3, [r4, #0]
 8013ce8:	6121      	str	r1, [r4, #16]
 8013cea:	07d8      	lsls	r0, r3, #31
 8013cec:	d5ea      	bpl.n	8013cc4 <_printf_float+0x194>
 8013cee:	1c4b      	adds	r3, r1, #1
 8013cf0:	e7e7      	b.n	8013cc2 <_printf_float+0x192>
 8013cf2:	2900      	cmp	r1, #0
 8013cf4:	bfd4      	ite	le
 8013cf6:	f1c1 0202 	rsble	r2, r1, #2
 8013cfa:	2201      	movgt	r2, #1
 8013cfc:	4413      	add	r3, r2
 8013cfe:	e7e0      	b.n	8013cc2 <_printf_float+0x192>
 8013d00:	6823      	ldr	r3, [r4, #0]
 8013d02:	055a      	lsls	r2, r3, #21
 8013d04:	d407      	bmi.n	8013d16 <_printf_float+0x1e6>
 8013d06:	6923      	ldr	r3, [r4, #16]
 8013d08:	4642      	mov	r2, r8
 8013d0a:	4631      	mov	r1, r6
 8013d0c:	4628      	mov	r0, r5
 8013d0e:	47b8      	blx	r7
 8013d10:	3001      	adds	r0, #1
 8013d12:	d12b      	bne.n	8013d6c <_printf_float+0x23c>
 8013d14:	e767      	b.n	8013be6 <_printf_float+0xb6>
 8013d16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013d1a:	f240 80dd 	bls.w	8013ed8 <_printf_float+0x3a8>
 8013d1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013d22:	2200      	movs	r2, #0
 8013d24:	2300      	movs	r3, #0
 8013d26:	f7ec fed7 	bl	8000ad8 <__aeabi_dcmpeq>
 8013d2a:	2800      	cmp	r0, #0
 8013d2c:	d033      	beq.n	8013d96 <_printf_float+0x266>
 8013d2e:	4a37      	ldr	r2, [pc, #220]	@ (8013e0c <_printf_float+0x2dc>)
 8013d30:	2301      	movs	r3, #1
 8013d32:	4631      	mov	r1, r6
 8013d34:	4628      	mov	r0, r5
 8013d36:	47b8      	blx	r7
 8013d38:	3001      	adds	r0, #1
 8013d3a:	f43f af54 	beq.w	8013be6 <_printf_float+0xb6>
 8013d3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013d42:	4543      	cmp	r3, r8
 8013d44:	db02      	blt.n	8013d4c <_printf_float+0x21c>
 8013d46:	6823      	ldr	r3, [r4, #0]
 8013d48:	07d8      	lsls	r0, r3, #31
 8013d4a:	d50f      	bpl.n	8013d6c <_printf_float+0x23c>
 8013d4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d50:	4631      	mov	r1, r6
 8013d52:	4628      	mov	r0, r5
 8013d54:	47b8      	blx	r7
 8013d56:	3001      	adds	r0, #1
 8013d58:	f43f af45 	beq.w	8013be6 <_printf_float+0xb6>
 8013d5c:	f04f 0900 	mov.w	r9, #0
 8013d60:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d64:	f104 0a1a 	add.w	sl, r4, #26
 8013d68:	45c8      	cmp	r8, r9
 8013d6a:	dc09      	bgt.n	8013d80 <_printf_float+0x250>
 8013d6c:	6823      	ldr	r3, [r4, #0]
 8013d6e:	079b      	lsls	r3, r3, #30
 8013d70:	f100 8103 	bmi.w	8013f7a <_printf_float+0x44a>
 8013d74:	68e0      	ldr	r0, [r4, #12]
 8013d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013d78:	4298      	cmp	r0, r3
 8013d7a:	bfb8      	it	lt
 8013d7c:	4618      	movlt	r0, r3
 8013d7e:	e734      	b.n	8013bea <_printf_float+0xba>
 8013d80:	2301      	movs	r3, #1
 8013d82:	4652      	mov	r2, sl
 8013d84:	4631      	mov	r1, r6
 8013d86:	4628      	mov	r0, r5
 8013d88:	47b8      	blx	r7
 8013d8a:	3001      	adds	r0, #1
 8013d8c:	f43f af2b 	beq.w	8013be6 <_printf_float+0xb6>
 8013d90:	f109 0901 	add.w	r9, r9, #1
 8013d94:	e7e8      	b.n	8013d68 <_printf_float+0x238>
 8013d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	dc39      	bgt.n	8013e10 <_printf_float+0x2e0>
 8013d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8013e0c <_printf_float+0x2dc>)
 8013d9e:	2301      	movs	r3, #1
 8013da0:	4631      	mov	r1, r6
 8013da2:	4628      	mov	r0, r5
 8013da4:	47b8      	blx	r7
 8013da6:	3001      	adds	r0, #1
 8013da8:	f43f af1d 	beq.w	8013be6 <_printf_float+0xb6>
 8013dac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013db0:	ea59 0303 	orrs.w	r3, r9, r3
 8013db4:	d102      	bne.n	8013dbc <_printf_float+0x28c>
 8013db6:	6823      	ldr	r3, [r4, #0]
 8013db8:	07d9      	lsls	r1, r3, #31
 8013dba:	d5d7      	bpl.n	8013d6c <_printf_float+0x23c>
 8013dbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013dc0:	4631      	mov	r1, r6
 8013dc2:	4628      	mov	r0, r5
 8013dc4:	47b8      	blx	r7
 8013dc6:	3001      	adds	r0, #1
 8013dc8:	f43f af0d 	beq.w	8013be6 <_printf_float+0xb6>
 8013dcc:	f04f 0a00 	mov.w	sl, #0
 8013dd0:	f104 0b1a 	add.w	fp, r4, #26
 8013dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013dd6:	425b      	negs	r3, r3
 8013dd8:	4553      	cmp	r3, sl
 8013dda:	dc01      	bgt.n	8013de0 <_printf_float+0x2b0>
 8013ddc:	464b      	mov	r3, r9
 8013dde:	e793      	b.n	8013d08 <_printf_float+0x1d8>
 8013de0:	2301      	movs	r3, #1
 8013de2:	465a      	mov	r2, fp
 8013de4:	4631      	mov	r1, r6
 8013de6:	4628      	mov	r0, r5
 8013de8:	47b8      	blx	r7
 8013dea:	3001      	adds	r0, #1
 8013dec:	f43f aefb 	beq.w	8013be6 <_printf_float+0xb6>
 8013df0:	f10a 0a01 	add.w	sl, sl, #1
 8013df4:	e7ee      	b.n	8013dd4 <_printf_float+0x2a4>
 8013df6:	bf00      	nop
 8013df8:	7fefffff 	.word	0x7fefffff
 8013dfc:	0801a3e8 	.word	0x0801a3e8
 8013e00:	0801a3e4 	.word	0x0801a3e4
 8013e04:	0801a3f0 	.word	0x0801a3f0
 8013e08:	0801a3ec 	.word	0x0801a3ec
 8013e0c:	0801a3f4 	.word	0x0801a3f4
 8013e10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013e12:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013e16:	4553      	cmp	r3, sl
 8013e18:	bfa8      	it	ge
 8013e1a:	4653      	movge	r3, sl
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	4699      	mov	r9, r3
 8013e20:	dc36      	bgt.n	8013e90 <_printf_float+0x360>
 8013e22:	f04f 0b00 	mov.w	fp, #0
 8013e26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e2a:	f104 021a 	add.w	r2, r4, #26
 8013e2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013e30:	9306      	str	r3, [sp, #24]
 8013e32:	eba3 0309 	sub.w	r3, r3, r9
 8013e36:	455b      	cmp	r3, fp
 8013e38:	dc31      	bgt.n	8013e9e <_printf_float+0x36e>
 8013e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e3c:	459a      	cmp	sl, r3
 8013e3e:	dc3a      	bgt.n	8013eb6 <_printf_float+0x386>
 8013e40:	6823      	ldr	r3, [r4, #0]
 8013e42:	07da      	lsls	r2, r3, #31
 8013e44:	d437      	bmi.n	8013eb6 <_printf_float+0x386>
 8013e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e48:	ebaa 0903 	sub.w	r9, sl, r3
 8013e4c:	9b06      	ldr	r3, [sp, #24]
 8013e4e:	ebaa 0303 	sub.w	r3, sl, r3
 8013e52:	4599      	cmp	r9, r3
 8013e54:	bfa8      	it	ge
 8013e56:	4699      	movge	r9, r3
 8013e58:	f1b9 0f00 	cmp.w	r9, #0
 8013e5c:	dc33      	bgt.n	8013ec6 <_printf_float+0x396>
 8013e5e:	f04f 0800 	mov.w	r8, #0
 8013e62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e66:	f104 0b1a 	add.w	fp, r4, #26
 8013e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e6c:	ebaa 0303 	sub.w	r3, sl, r3
 8013e70:	eba3 0309 	sub.w	r3, r3, r9
 8013e74:	4543      	cmp	r3, r8
 8013e76:	f77f af79 	ble.w	8013d6c <_printf_float+0x23c>
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	465a      	mov	r2, fp
 8013e7e:	4631      	mov	r1, r6
 8013e80:	4628      	mov	r0, r5
 8013e82:	47b8      	blx	r7
 8013e84:	3001      	adds	r0, #1
 8013e86:	f43f aeae 	beq.w	8013be6 <_printf_float+0xb6>
 8013e8a:	f108 0801 	add.w	r8, r8, #1
 8013e8e:	e7ec      	b.n	8013e6a <_printf_float+0x33a>
 8013e90:	4642      	mov	r2, r8
 8013e92:	4631      	mov	r1, r6
 8013e94:	4628      	mov	r0, r5
 8013e96:	47b8      	blx	r7
 8013e98:	3001      	adds	r0, #1
 8013e9a:	d1c2      	bne.n	8013e22 <_printf_float+0x2f2>
 8013e9c:	e6a3      	b.n	8013be6 <_printf_float+0xb6>
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	4631      	mov	r1, r6
 8013ea2:	4628      	mov	r0, r5
 8013ea4:	9206      	str	r2, [sp, #24]
 8013ea6:	47b8      	blx	r7
 8013ea8:	3001      	adds	r0, #1
 8013eaa:	f43f ae9c 	beq.w	8013be6 <_printf_float+0xb6>
 8013eae:	9a06      	ldr	r2, [sp, #24]
 8013eb0:	f10b 0b01 	add.w	fp, fp, #1
 8013eb4:	e7bb      	b.n	8013e2e <_printf_float+0x2fe>
 8013eb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013eba:	4631      	mov	r1, r6
 8013ebc:	4628      	mov	r0, r5
 8013ebe:	47b8      	blx	r7
 8013ec0:	3001      	adds	r0, #1
 8013ec2:	d1c0      	bne.n	8013e46 <_printf_float+0x316>
 8013ec4:	e68f      	b.n	8013be6 <_printf_float+0xb6>
 8013ec6:	9a06      	ldr	r2, [sp, #24]
 8013ec8:	464b      	mov	r3, r9
 8013eca:	4442      	add	r2, r8
 8013ecc:	4631      	mov	r1, r6
 8013ece:	4628      	mov	r0, r5
 8013ed0:	47b8      	blx	r7
 8013ed2:	3001      	adds	r0, #1
 8013ed4:	d1c3      	bne.n	8013e5e <_printf_float+0x32e>
 8013ed6:	e686      	b.n	8013be6 <_printf_float+0xb6>
 8013ed8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013edc:	f1ba 0f01 	cmp.w	sl, #1
 8013ee0:	dc01      	bgt.n	8013ee6 <_printf_float+0x3b6>
 8013ee2:	07db      	lsls	r3, r3, #31
 8013ee4:	d536      	bpl.n	8013f54 <_printf_float+0x424>
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	4642      	mov	r2, r8
 8013eea:	4631      	mov	r1, r6
 8013eec:	4628      	mov	r0, r5
 8013eee:	47b8      	blx	r7
 8013ef0:	3001      	adds	r0, #1
 8013ef2:	f43f ae78 	beq.w	8013be6 <_printf_float+0xb6>
 8013ef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013efa:	4631      	mov	r1, r6
 8013efc:	4628      	mov	r0, r5
 8013efe:	47b8      	blx	r7
 8013f00:	3001      	adds	r0, #1
 8013f02:	f43f ae70 	beq.w	8013be6 <_printf_float+0xb6>
 8013f06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f12:	f7ec fde1 	bl	8000ad8 <__aeabi_dcmpeq>
 8013f16:	b9c0      	cbnz	r0, 8013f4a <_printf_float+0x41a>
 8013f18:	4653      	mov	r3, sl
 8013f1a:	f108 0201 	add.w	r2, r8, #1
 8013f1e:	4631      	mov	r1, r6
 8013f20:	4628      	mov	r0, r5
 8013f22:	47b8      	blx	r7
 8013f24:	3001      	adds	r0, #1
 8013f26:	d10c      	bne.n	8013f42 <_printf_float+0x412>
 8013f28:	e65d      	b.n	8013be6 <_printf_float+0xb6>
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	465a      	mov	r2, fp
 8013f2e:	4631      	mov	r1, r6
 8013f30:	4628      	mov	r0, r5
 8013f32:	47b8      	blx	r7
 8013f34:	3001      	adds	r0, #1
 8013f36:	f43f ae56 	beq.w	8013be6 <_printf_float+0xb6>
 8013f3a:	f108 0801 	add.w	r8, r8, #1
 8013f3e:	45d0      	cmp	r8, sl
 8013f40:	dbf3      	blt.n	8013f2a <_printf_float+0x3fa>
 8013f42:	464b      	mov	r3, r9
 8013f44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013f48:	e6df      	b.n	8013d0a <_printf_float+0x1da>
 8013f4a:	f04f 0800 	mov.w	r8, #0
 8013f4e:	f104 0b1a 	add.w	fp, r4, #26
 8013f52:	e7f4      	b.n	8013f3e <_printf_float+0x40e>
 8013f54:	2301      	movs	r3, #1
 8013f56:	4642      	mov	r2, r8
 8013f58:	e7e1      	b.n	8013f1e <_printf_float+0x3ee>
 8013f5a:	2301      	movs	r3, #1
 8013f5c:	464a      	mov	r2, r9
 8013f5e:	4631      	mov	r1, r6
 8013f60:	4628      	mov	r0, r5
 8013f62:	47b8      	blx	r7
 8013f64:	3001      	adds	r0, #1
 8013f66:	f43f ae3e 	beq.w	8013be6 <_printf_float+0xb6>
 8013f6a:	f108 0801 	add.w	r8, r8, #1
 8013f6e:	68e3      	ldr	r3, [r4, #12]
 8013f70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013f72:	1a5b      	subs	r3, r3, r1
 8013f74:	4543      	cmp	r3, r8
 8013f76:	dcf0      	bgt.n	8013f5a <_printf_float+0x42a>
 8013f78:	e6fc      	b.n	8013d74 <_printf_float+0x244>
 8013f7a:	f04f 0800 	mov.w	r8, #0
 8013f7e:	f104 0919 	add.w	r9, r4, #25
 8013f82:	e7f4      	b.n	8013f6e <_printf_float+0x43e>

08013f84 <_printf_common>:
 8013f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f88:	4616      	mov	r6, r2
 8013f8a:	4698      	mov	r8, r3
 8013f8c:	688a      	ldr	r2, [r1, #8]
 8013f8e:	690b      	ldr	r3, [r1, #16]
 8013f90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013f94:	4293      	cmp	r3, r2
 8013f96:	bfb8      	it	lt
 8013f98:	4613      	movlt	r3, r2
 8013f9a:	6033      	str	r3, [r6, #0]
 8013f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013fa0:	4607      	mov	r7, r0
 8013fa2:	460c      	mov	r4, r1
 8013fa4:	b10a      	cbz	r2, 8013faa <_printf_common+0x26>
 8013fa6:	3301      	adds	r3, #1
 8013fa8:	6033      	str	r3, [r6, #0]
 8013faa:	6823      	ldr	r3, [r4, #0]
 8013fac:	0699      	lsls	r1, r3, #26
 8013fae:	bf42      	ittt	mi
 8013fb0:	6833      	ldrmi	r3, [r6, #0]
 8013fb2:	3302      	addmi	r3, #2
 8013fb4:	6033      	strmi	r3, [r6, #0]
 8013fb6:	6825      	ldr	r5, [r4, #0]
 8013fb8:	f015 0506 	ands.w	r5, r5, #6
 8013fbc:	d106      	bne.n	8013fcc <_printf_common+0x48>
 8013fbe:	f104 0a19 	add.w	sl, r4, #25
 8013fc2:	68e3      	ldr	r3, [r4, #12]
 8013fc4:	6832      	ldr	r2, [r6, #0]
 8013fc6:	1a9b      	subs	r3, r3, r2
 8013fc8:	42ab      	cmp	r3, r5
 8013fca:	dc26      	bgt.n	801401a <_printf_common+0x96>
 8013fcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013fd0:	6822      	ldr	r2, [r4, #0]
 8013fd2:	3b00      	subs	r3, #0
 8013fd4:	bf18      	it	ne
 8013fd6:	2301      	movne	r3, #1
 8013fd8:	0692      	lsls	r2, r2, #26
 8013fda:	d42b      	bmi.n	8014034 <_printf_common+0xb0>
 8013fdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013fe0:	4641      	mov	r1, r8
 8013fe2:	4638      	mov	r0, r7
 8013fe4:	47c8      	blx	r9
 8013fe6:	3001      	adds	r0, #1
 8013fe8:	d01e      	beq.n	8014028 <_printf_common+0xa4>
 8013fea:	6823      	ldr	r3, [r4, #0]
 8013fec:	6922      	ldr	r2, [r4, #16]
 8013fee:	f003 0306 	and.w	r3, r3, #6
 8013ff2:	2b04      	cmp	r3, #4
 8013ff4:	bf02      	ittt	eq
 8013ff6:	68e5      	ldreq	r5, [r4, #12]
 8013ff8:	6833      	ldreq	r3, [r6, #0]
 8013ffa:	1aed      	subeq	r5, r5, r3
 8013ffc:	68a3      	ldr	r3, [r4, #8]
 8013ffe:	bf0c      	ite	eq
 8014000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014004:	2500      	movne	r5, #0
 8014006:	4293      	cmp	r3, r2
 8014008:	bfc4      	itt	gt
 801400a:	1a9b      	subgt	r3, r3, r2
 801400c:	18ed      	addgt	r5, r5, r3
 801400e:	2600      	movs	r6, #0
 8014010:	341a      	adds	r4, #26
 8014012:	42b5      	cmp	r5, r6
 8014014:	d11a      	bne.n	801404c <_printf_common+0xc8>
 8014016:	2000      	movs	r0, #0
 8014018:	e008      	b.n	801402c <_printf_common+0xa8>
 801401a:	2301      	movs	r3, #1
 801401c:	4652      	mov	r2, sl
 801401e:	4641      	mov	r1, r8
 8014020:	4638      	mov	r0, r7
 8014022:	47c8      	blx	r9
 8014024:	3001      	adds	r0, #1
 8014026:	d103      	bne.n	8014030 <_printf_common+0xac>
 8014028:	f04f 30ff 	mov.w	r0, #4294967295
 801402c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014030:	3501      	adds	r5, #1
 8014032:	e7c6      	b.n	8013fc2 <_printf_common+0x3e>
 8014034:	18e1      	adds	r1, r4, r3
 8014036:	1c5a      	adds	r2, r3, #1
 8014038:	2030      	movs	r0, #48	@ 0x30
 801403a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801403e:	4422      	add	r2, r4
 8014040:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014044:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014048:	3302      	adds	r3, #2
 801404a:	e7c7      	b.n	8013fdc <_printf_common+0x58>
 801404c:	2301      	movs	r3, #1
 801404e:	4622      	mov	r2, r4
 8014050:	4641      	mov	r1, r8
 8014052:	4638      	mov	r0, r7
 8014054:	47c8      	blx	r9
 8014056:	3001      	adds	r0, #1
 8014058:	d0e6      	beq.n	8014028 <_printf_common+0xa4>
 801405a:	3601      	adds	r6, #1
 801405c:	e7d9      	b.n	8014012 <_printf_common+0x8e>
	...

08014060 <_printf_i>:
 8014060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014064:	7e0f      	ldrb	r7, [r1, #24]
 8014066:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014068:	2f78      	cmp	r7, #120	@ 0x78
 801406a:	4691      	mov	r9, r2
 801406c:	4680      	mov	r8, r0
 801406e:	460c      	mov	r4, r1
 8014070:	469a      	mov	sl, r3
 8014072:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014076:	d807      	bhi.n	8014088 <_printf_i+0x28>
 8014078:	2f62      	cmp	r7, #98	@ 0x62
 801407a:	d80a      	bhi.n	8014092 <_printf_i+0x32>
 801407c:	2f00      	cmp	r7, #0
 801407e:	f000 80d1 	beq.w	8014224 <_printf_i+0x1c4>
 8014082:	2f58      	cmp	r7, #88	@ 0x58
 8014084:	f000 80b8 	beq.w	80141f8 <_printf_i+0x198>
 8014088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801408c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014090:	e03a      	b.n	8014108 <_printf_i+0xa8>
 8014092:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014096:	2b15      	cmp	r3, #21
 8014098:	d8f6      	bhi.n	8014088 <_printf_i+0x28>
 801409a:	a101      	add	r1, pc, #4	@ (adr r1, 80140a0 <_printf_i+0x40>)
 801409c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80140a0:	080140f9 	.word	0x080140f9
 80140a4:	0801410d 	.word	0x0801410d
 80140a8:	08014089 	.word	0x08014089
 80140ac:	08014089 	.word	0x08014089
 80140b0:	08014089 	.word	0x08014089
 80140b4:	08014089 	.word	0x08014089
 80140b8:	0801410d 	.word	0x0801410d
 80140bc:	08014089 	.word	0x08014089
 80140c0:	08014089 	.word	0x08014089
 80140c4:	08014089 	.word	0x08014089
 80140c8:	08014089 	.word	0x08014089
 80140cc:	0801420b 	.word	0x0801420b
 80140d0:	08014137 	.word	0x08014137
 80140d4:	080141c5 	.word	0x080141c5
 80140d8:	08014089 	.word	0x08014089
 80140dc:	08014089 	.word	0x08014089
 80140e0:	0801422d 	.word	0x0801422d
 80140e4:	08014089 	.word	0x08014089
 80140e8:	08014137 	.word	0x08014137
 80140ec:	08014089 	.word	0x08014089
 80140f0:	08014089 	.word	0x08014089
 80140f4:	080141cd 	.word	0x080141cd
 80140f8:	6833      	ldr	r3, [r6, #0]
 80140fa:	1d1a      	adds	r2, r3, #4
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	6032      	str	r2, [r6, #0]
 8014100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014104:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014108:	2301      	movs	r3, #1
 801410a:	e09c      	b.n	8014246 <_printf_i+0x1e6>
 801410c:	6833      	ldr	r3, [r6, #0]
 801410e:	6820      	ldr	r0, [r4, #0]
 8014110:	1d19      	adds	r1, r3, #4
 8014112:	6031      	str	r1, [r6, #0]
 8014114:	0606      	lsls	r6, r0, #24
 8014116:	d501      	bpl.n	801411c <_printf_i+0xbc>
 8014118:	681d      	ldr	r5, [r3, #0]
 801411a:	e003      	b.n	8014124 <_printf_i+0xc4>
 801411c:	0645      	lsls	r5, r0, #25
 801411e:	d5fb      	bpl.n	8014118 <_printf_i+0xb8>
 8014120:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014124:	2d00      	cmp	r5, #0
 8014126:	da03      	bge.n	8014130 <_printf_i+0xd0>
 8014128:	232d      	movs	r3, #45	@ 0x2d
 801412a:	426d      	negs	r5, r5
 801412c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014130:	4858      	ldr	r0, [pc, #352]	@ (8014294 <_printf_i+0x234>)
 8014132:	230a      	movs	r3, #10
 8014134:	e011      	b.n	801415a <_printf_i+0xfa>
 8014136:	6821      	ldr	r1, [r4, #0]
 8014138:	6833      	ldr	r3, [r6, #0]
 801413a:	0608      	lsls	r0, r1, #24
 801413c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014140:	d402      	bmi.n	8014148 <_printf_i+0xe8>
 8014142:	0649      	lsls	r1, r1, #25
 8014144:	bf48      	it	mi
 8014146:	b2ad      	uxthmi	r5, r5
 8014148:	2f6f      	cmp	r7, #111	@ 0x6f
 801414a:	4852      	ldr	r0, [pc, #328]	@ (8014294 <_printf_i+0x234>)
 801414c:	6033      	str	r3, [r6, #0]
 801414e:	bf14      	ite	ne
 8014150:	230a      	movne	r3, #10
 8014152:	2308      	moveq	r3, #8
 8014154:	2100      	movs	r1, #0
 8014156:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801415a:	6866      	ldr	r6, [r4, #4]
 801415c:	60a6      	str	r6, [r4, #8]
 801415e:	2e00      	cmp	r6, #0
 8014160:	db05      	blt.n	801416e <_printf_i+0x10e>
 8014162:	6821      	ldr	r1, [r4, #0]
 8014164:	432e      	orrs	r6, r5
 8014166:	f021 0104 	bic.w	r1, r1, #4
 801416a:	6021      	str	r1, [r4, #0]
 801416c:	d04b      	beq.n	8014206 <_printf_i+0x1a6>
 801416e:	4616      	mov	r6, r2
 8014170:	fbb5 f1f3 	udiv	r1, r5, r3
 8014174:	fb03 5711 	mls	r7, r3, r1, r5
 8014178:	5dc7      	ldrb	r7, [r0, r7]
 801417a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801417e:	462f      	mov	r7, r5
 8014180:	42bb      	cmp	r3, r7
 8014182:	460d      	mov	r5, r1
 8014184:	d9f4      	bls.n	8014170 <_printf_i+0x110>
 8014186:	2b08      	cmp	r3, #8
 8014188:	d10b      	bne.n	80141a2 <_printf_i+0x142>
 801418a:	6823      	ldr	r3, [r4, #0]
 801418c:	07df      	lsls	r7, r3, #31
 801418e:	d508      	bpl.n	80141a2 <_printf_i+0x142>
 8014190:	6923      	ldr	r3, [r4, #16]
 8014192:	6861      	ldr	r1, [r4, #4]
 8014194:	4299      	cmp	r1, r3
 8014196:	bfde      	ittt	le
 8014198:	2330      	movle	r3, #48	@ 0x30
 801419a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801419e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80141a2:	1b92      	subs	r2, r2, r6
 80141a4:	6122      	str	r2, [r4, #16]
 80141a6:	f8cd a000 	str.w	sl, [sp]
 80141aa:	464b      	mov	r3, r9
 80141ac:	aa03      	add	r2, sp, #12
 80141ae:	4621      	mov	r1, r4
 80141b0:	4640      	mov	r0, r8
 80141b2:	f7ff fee7 	bl	8013f84 <_printf_common>
 80141b6:	3001      	adds	r0, #1
 80141b8:	d14a      	bne.n	8014250 <_printf_i+0x1f0>
 80141ba:	f04f 30ff 	mov.w	r0, #4294967295
 80141be:	b004      	add	sp, #16
 80141c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141c4:	6823      	ldr	r3, [r4, #0]
 80141c6:	f043 0320 	orr.w	r3, r3, #32
 80141ca:	6023      	str	r3, [r4, #0]
 80141cc:	4832      	ldr	r0, [pc, #200]	@ (8014298 <_printf_i+0x238>)
 80141ce:	2778      	movs	r7, #120	@ 0x78
 80141d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80141d4:	6823      	ldr	r3, [r4, #0]
 80141d6:	6831      	ldr	r1, [r6, #0]
 80141d8:	061f      	lsls	r7, r3, #24
 80141da:	f851 5b04 	ldr.w	r5, [r1], #4
 80141de:	d402      	bmi.n	80141e6 <_printf_i+0x186>
 80141e0:	065f      	lsls	r7, r3, #25
 80141e2:	bf48      	it	mi
 80141e4:	b2ad      	uxthmi	r5, r5
 80141e6:	6031      	str	r1, [r6, #0]
 80141e8:	07d9      	lsls	r1, r3, #31
 80141ea:	bf44      	itt	mi
 80141ec:	f043 0320 	orrmi.w	r3, r3, #32
 80141f0:	6023      	strmi	r3, [r4, #0]
 80141f2:	b11d      	cbz	r5, 80141fc <_printf_i+0x19c>
 80141f4:	2310      	movs	r3, #16
 80141f6:	e7ad      	b.n	8014154 <_printf_i+0xf4>
 80141f8:	4826      	ldr	r0, [pc, #152]	@ (8014294 <_printf_i+0x234>)
 80141fa:	e7e9      	b.n	80141d0 <_printf_i+0x170>
 80141fc:	6823      	ldr	r3, [r4, #0]
 80141fe:	f023 0320 	bic.w	r3, r3, #32
 8014202:	6023      	str	r3, [r4, #0]
 8014204:	e7f6      	b.n	80141f4 <_printf_i+0x194>
 8014206:	4616      	mov	r6, r2
 8014208:	e7bd      	b.n	8014186 <_printf_i+0x126>
 801420a:	6833      	ldr	r3, [r6, #0]
 801420c:	6825      	ldr	r5, [r4, #0]
 801420e:	6961      	ldr	r1, [r4, #20]
 8014210:	1d18      	adds	r0, r3, #4
 8014212:	6030      	str	r0, [r6, #0]
 8014214:	062e      	lsls	r6, r5, #24
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	d501      	bpl.n	801421e <_printf_i+0x1be>
 801421a:	6019      	str	r1, [r3, #0]
 801421c:	e002      	b.n	8014224 <_printf_i+0x1c4>
 801421e:	0668      	lsls	r0, r5, #25
 8014220:	d5fb      	bpl.n	801421a <_printf_i+0x1ba>
 8014222:	8019      	strh	r1, [r3, #0]
 8014224:	2300      	movs	r3, #0
 8014226:	6123      	str	r3, [r4, #16]
 8014228:	4616      	mov	r6, r2
 801422a:	e7bc      	b.n	80141a6 <_printf_i+0x146>
 801422c:	6833      	ldr	r3, [r6, #0]
 801422e:	1d1a      	adds	r2, r3, #4
 8014230:	6032      	str	r2, [r6, #0]
 8014232:	681e      	ldr	r6, [r3, #0]
 8014234:	6862      	ldr	r2, [r4, #4]
 8014236:	2100      	movs	r1, #0
 8014238:	4630      	mov	r0, r6
 801423a:	f7eb ffd1 	bl	80001e0 <memchr>
 801423e:	b108      	cbz	r0, 8014244 <_printf_i+0x1e4>
 8014240:	1b80      	subs	r0, r0, r6
 8014242:	6060      	str	r0, [r4, #4]
 8014244:	6863      	ldr	r3, [r4, #4]
 8014246:	6123      	str	r3, [r4, #16]
 8014248:	2300      	movs	r3, #0
 801424a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801424e:	e7aa      	b.n	80141a6 <_printf_i+0x146>
 8014250:	6923      	ldr	r3, [r4, #16]
 8014252:	4632      	mov	r2, r6
 8014254:	4649      	mov	r1, r9
 8014256:	4640      	mov	r0, r8
 8014258:	47d0      	blx	sl
 801425a:	3001      	adds	r0, #1
 801425c:	d0ad      	beq.n	80141ba <_printf_i+0x15a>
 801425e:	6823      	ldr	r3, [r4, #0]
 8014260:	079b      	lsls	r3, r3, #30
 8014262:	d413      	bmi.n	801428c <_printf_i+0x22c>
 8014264:	68e0      	ldr	r0, [r4, #12]
 8014266:	9b03      	ldr	r3, [sp, #12]
 8014268:	4298      	cmp	r0, r3
 801426a:	bfb8      	it	lt
 801426c:	4618      	movlt	r0, r3
 801426e:	e7a6      	b.n	80141be <_printf_i+0x15e>
 8014270:	2301      	movs	r3, #1
 8014272:	4632      	mov	r2, r6
 8014274:	4649      	mov	r1, r9
 8014276:	4640      	mov	r0, r8
 8014278:	47d0      	blx	sl
 801427a:	3001      	adds	r0, #1
 801427c:	d09d      	beq.n	80141ba <_printf_i+0x15a>
 801427e:	3501      	adds	r5, #1
 8014280:	68e3      	ldr	r3, [r4, #12]
 8014282:	9903      	ldr	r1, [sp, #12]
 8014284:	1a5b      	subs	r3, r3, r1
 8014286:	42ab      	cmp	r3, r5
 8014288:	dcf2      	bgt.n	8014270 <_printf_i+0x210>
 801428a:	e7eb      	b.n	8014264 <_printf_i+0x204>
 801428c:	2500      	movs	r5, #0
 801428e:	f104 0619 	add.w	r6, r4, #25
 8014292:	e7f5      	b.n	8014280 <_printf_i+0x220>
 8014294:	0801a3f6 	.word	0x0801a3f6
 8014298:	0801a407 	.word	0x0801a407

0801429c <_scanf_float>:
 801429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142a0:	b087      	sub	sp, #28
 80142a2:	4691      	mov	r9, r2
 80142a4:	9303      	str	r3, [sp, #12]
 80142a6:	688b      	ldr	r3, [r1, #8]
 80142a8:	1e5a      	subs	r2, r3, #1
 80142aa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80142ae:	bf81      	itttt	hi
 80142b0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80142b4:	eb03 0b05 	addhi.w	fp, r3, r5
 80142b8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80142bc:	608b      	strhi	r3, [r1, #8]
 80142be:	680b      	ldr	r3, [r1, #0]
 80142c0:	460a      	mov	r2, r1
 80142c2:	f04f 0500 	mov.w	r5, #0
 80142c6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80142ca:	f842 3b1c 	str.w	r3, [r2], #28
 80142ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80142d2:	4680      	mov	r8, r0
 80142d4:	460c      	mov	r4, r1
 80142d6:	bf98      	it	ls
 80142d8:	f04f 0b00 	movls.w	fp, #0
 80142dc:	9201      	str	r2, [sp, #4]
 80142de:	4616      	mov	r6, r2
 80142e0:	46aa      	mov	sl, r5
 80142e2:	462f      	mov	r7, r5
 80142e4:	9502      	str	r5, [sp, #8]
 80142e6:	68a2      	ldr	r2, [r4, #8]
 80142e8:	b15a      	cbz	r2, 8014302 <_scanf_float+0x66>
 80142ea:	f8d9 3000 	ldr.w	r3, [r9]
 80142ee:	781b      	ldrb	r3, [r3, #0]
 80142f0:	2b4e      	cmp	r3, #78	@ 0x4e
 80142f2:	d863      	bhi.n	80143bc <_scanf_float+0x120>
 80142f4:	2b40      	cmp	r3, #64	@ 0x40
 80142f6:	d83b      	bhi.n	8014370 <_scanf_float+0xd4>
 80142f8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80142fc:	b2c8      	uxtb	r0, r1
 80142fe:	280e      	cmp	r0, #14
 8014300:	d939      	bls.n	8014376 <_scanf_float+0xda>
 8014302:	b11f      	cbz	r7, 801430c <_scanf_float+0x70>
 8014304:	6823      	ldr	r3, [r4, #0]
 8014306:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801430a:	6023      	str	r3, [r4, #0]
 801430c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014310:	f1ba 0f01 	cmp.w	sl, #1
 8014314:	f200 8114 	bhi.w	8014540 <_scanf_float+0x2a4>
 8014318:	9b01      	ldr	r3, [sp, #4]
 801431a:	429e      	cmp	r6, r3
 801431c:	f200 8105 	bhi.w	801452a <_scanf_float+0x28e>
 8014320:	2001      	movs	r0, #1
 8014322:	b007      	add	sp, #28
 8014324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014328:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801432c:	2a0d      	cmp	r2, #13
 801432e:	d8e8      	bhi.n	8014302 <_scanf_float+0x66>
 8014330:	a101      	add	r1, pc, #4	@ (adr r1, 8014338 <_scanf_float+0x9c>)
 8014332:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014336:	bf00      	nop
 8014338:	08014481 	.word	0x08014481
 801433c:	08014303 	.word	0x08014303
 8014340:	08014303 	.word	0x08014303
 8014344:	08014303 	.word	0x08014303
 8014348:	080144dd 	.word	0x080144dd
 801434c:	080144b7 	.word	0x080144b7
 8014350:	08014303 	.word	0x08014303
 8014354:	08014303 	.word	0x08014303
 8014358:	0801448f 	.word	0x0801448f
 801435c:	08014303 	.word	0x08014303
 8014360:	08014303 	.word	0x08014303
 8014364:	08014303 	.word	0x08014303
 8014368:	08014303 	.word	0x08014303
 801436c:	0801444b 	.word	0x0801444b
 8014370:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8014374:	e7da      	b.n	801432c <_scanf_float+0x90>
 8014376:	290e      	cmp	r1, #14
 8014378:	d8c3      	bhi.n	8014302 <_scanf_float+0x66>
 801437a:	a001      	add	r0, pc, #4	@ (adr r0, 8014380 <_scanf_float+0xe4>)
 801437c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014380:	0801443b 	.word	0x0801443b
 8014384:	08014303 	.word	0x08014303
 8014388:	0801443b 	.word	0x0801443b
 801438c:	080144cb 	.word	0x080144cb
 8014390:	08014303 	.word	0x08014303
 8014394:	080143dd 	.word	0x080143dd
 8014398:	08014421 	.word	0x08014421
 801439c:	08014421 	.word	0x08014421
 80143a0:	08014421 	.word	0x08014421
 80143a4:	08014421 	.word	0x08014421
 80143a8:	08014421 	.word	0x08014421
 80143ac:	08014421 	.word	0x08014421
 80143b0:	08014421 	.word	0x08014421
 80143b4:	08014421 	.word	0x08014421
 80143b8:	08014421 	.word	0x08014421
 80143bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80143be:	d809      	bhi.n	80143d4 <_scanf_float+0x138>
 80143c0:	2b60      	cmp	r3, #96	@ 0x60
 80143c2:	d8b1      	bhi.n	8014328 <_scanf_float+0x8c>
 80143c4:	2b54      	cmp	r3, #84	@ 0x54
 80143c6:	d07b      	beq.n	80144c0 <_scanf_float+0x224>
 80143c8:	2b59      	cmp	r3, #89	@ 0x59
 80143ca:	d19a      	bne.n	8014302 <_scanf_float+0x66>
 80143cc:	2d07      	cmp	r5, #7
 80143ce:	d198      	bne.n	8014302 <_scanf_float+0x66>
 80143d0:	2508      	movs	r5, #8
 80143d2:	e02f      	b.n	8014434 <_scanf_float+0x198>
 80143d4:	2b74      	cmp	r3, #116	@ 0x74
 80143d6:	d073      	beq.n	80144c0 <_scanf_float+0x224>
 80143d8:	2b79      	cmp	r3, #121	@ 0x79
 80143da:	e7f6      	b.n	80143ca <_scanf_float+0x12e>
 80143dc:	6821      	ldr	r1, [r4, #0]
 80143de:	05c8      	lsls	r0, r1, #23
 80143e0:	d51e      	bpl.n	8014420 <_scanf_float+0x184>
 80143e2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80143e6:	6021      	str	r1, [r4, #0]
 80143e8:	3701      	adds	r7, #1
 80143ea:	f1bb 0f00 	cmp.w	fp, #0
 80143ee:	d003      	beq.n	80143f8 <_scanf_float+0x15c>
 80143f0:	3201      	adds	r2, #1
 80143f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80143f6:	60a2      	str	r2, [r4, #8]
 80143f8:	68a3      	ldr	r3, [r4, #8]
 80143fa:	3b01      	subs	r3, #1
 80143fc:	60a3      	str	r3, [r4, #8]
 80143fe:	6923      	ldr	r3, [r4, #16]
 8014400:	3301      	adds	r3, #1
 8014402:	6123      	str	r3, [r4, #16]
 8014404:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014408:	3b01      	subs	r3, #1
 801440a:	2b00      	cmp	r3, #0
 801440c:	f8c9 3004 	str.w	r3, [r9, #4]
 8014410:	f340 8082 	ble.w	8014518 <_scanf_float+0x27c>
 8014414:	f8d9 3000 	ldr.w	r3, [r9]
 8014418:	3301      	adds	r3, #1
 801441a:	f8c9 3000 	str.w	r3, [r9]
 801441e:	e762      	b.n	80142e6 <_scanf_float+0x4a>
 8014420:	eb1a 0105 	adds.w	r1, sl, r5
 8014424:	f47f af6d 	bne.w	8014302 <_scanf_float+0x66>
 8014428:	6822      	ldr	r2, [r4, #0]
 801442a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801442e:	6022      	str	r2, [r4, #0]
 8014430:	460d      	mov	r5, r1
 8014432:	468a      	mov	sl, r1
 8014434:	f806 3b01 	strb.w	r3, [r6], #1
 8014438:	e7de      	b.n	80143f8 <_scanf_float+0x15c>
 801443a:	6822      	ldr	r2, [r4, #0]
 801443c:	0610      	lsls	r0, r2, #24
 801443e:	f57f af60 	bpl.w	8014302 <_scanf_float+0x66>
 8014442:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014446:	6022      	str	r2, [r4, #0]
 8014448:	e7f4      	b.n	8014434 <_scanf_float+0x198>
 801444a:	f1ba 0f00 	cmp.w	sl, #0
 801444e:	d10c      	bne.n	801446a <_scanf_float+0x1ce>
 8014450:	b977      	cbnz	r7, 8014470 <_scanf_float+0x1d4>
 8014452:	6822      	ldr	r2, [r4, #0]
 8014454:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014458:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801445c:	d108      	bne.n	8014470 <_scanf_float+0x1d4>
 801445e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014462:	6022      	str	r2, [r4, #0]
 8014464:	f04f 0a01 	mov.w	sl, #1
 8014468:	e7e4      	b.n	8014434 <_scanf_float+0x198>
 801446a:	f1ba 0f02 	cmp.w	sl, #2
 801446e:	d050      	beq.n	8014512 <_scanf_float+0x276>
 8014470:	2d01      	cmp	r5, #1
 8014472:	d002      	beq.n	801447a <_scanf_float+0x1de>
 8014474:	2d04      	cmp	r5, #4
 8014476:	f47f af44 	bne.w	8014302 <_scanf_float+0x66>
 801447a:	3501      	adds	r5, #1
 801447c:	b2ed      	uxtb	r5, r5
 801447e:	e7d9      	b.n	8014434 <_scanf_float+0x198>
 8014480:	f1ba 0f01 	cmp.w	sl, #1
 8014484:	f47f af3d 	bne.w	8014302 <_scanf_float+0x66>
 8014488:	f04f 0a02 	mov.w	sl, #2
 801448c:	e7d2      	b.n	8014434 <_scanf_float+0x198>
 801448e:	b975      	cbnz	r5, 80144ae <_scanf_float+0x212>
 8014490:	2f00      	cmp	r7, #0
 8014492:	f47f af37 	bne.w	8014304 <_scanf_float+0x68>
 8014496:	6822      	ldr	r2, [r4, #0]
 8014498:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801449c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80144a0:	f040 8103 	bne.w	80146aa <_scanf_float+0x40e>
 80144a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80144a8:	6022      	str	r2, [r4, #0]
 80144aa:	2501      	movs	r5, #1
 80144ac:	e7c2      	b.n	8014434 <_scanf_float+0x198>
 80144ae:	2d03      	cmp	r5, #3
 80144b0:	d0e3      	beq.n	801447a <_scanf_float+0x1de>
 80144b2:	2d05      	cmp	r5, #5
 80144b4:	e7df      	b.n	8014476 <_scanf_float+0x1da>
 80144b6:	2d02      	cmp	r5, #2
 80144b8:	f47f af23 	bne.w	8014302 <_scanf_float+0x66>
 80144bc:	2503      	movs	r5, #3
 80144be:	e7b9      	b.n	8014434 <_scanf_float+0x198>
 80144c0:	2d06      	cmp	r5, #6
 80144c2:	f47f af1e 	bne.w	8014302 <_scanf_float+0x66>
 80144c6:	2507      	movs	r5, #7
 80144c8:	e7b4      	b.n	8014434 <_scanf_float+0x198>
 80144ca:	6822      	ldr	r2, [r4, #0]
 80144cc:	0591      	lsls	r1, r2, #22
 80144ce:	f57f af18 	bpl.w	8014302 <_scanf_float+0x66>
 80144d2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80144d6:	6022      	str	r2, [r4, #0]
 80144d8:	9702      	str	r7, [sp, #8]
 80144da:	e7ab      	b.n	8014434 <_scanf_float+0x198>
 80144dc:	6822      	ldr	r2, [r4, #0]
 80144de:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80144e2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80144e6:	d005      	beq.n	80144f4 <_scanf_float+0x258>
 80144e8:	0550      	lsls	r0, r2, #21
 80144ea:	f57f af0a 	bpl.w	8014302 <_scanf_float+0x66>
 80144ee:	2f00      	cmp	r7, #0
 80144f0:	f000 80db 	beq.w	80146aa <_scanf_float+0x40e>
 80144f4:	0591      	lsls	r1, r2, #22
 80144f6:	bf58      	it	pl
 80144f8:	9902      	ldrpl	r1, [sp, #8]
 80144fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80144fe:	bf58      	it	pl
 8014500:	1a79      	subpl	r1, r7, r1
 8014502:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014506:	bf58      	it	pl
 8014508:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801450c:	6022      	str	r2, [r4, #0]
 801450e:	2700      	movs	r7, #0
 8014510:	e790      	b.n	8014434 <_scanf_float+0x198>
 8014512:	f04f 0a03 	mov.w	sl, #3
 8014516:	e78d      	b.n	8014434 <_scanf_float+0x198>
 8014518:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801451c:	4649      	mov	r1, r9
 801451e:	4640      	mov	r0, r8
 8014520:	4798      	blx	r3
 8014522:	2800      	cmp	r0, #0
 8014524:	f43f aedf 	beq.w	80142e6 <_scanf_float+0x4a>
 8014528:	e6eb      	b.n	8014302 <_scanf_float+0x66>
 801452a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801452e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014532:	464a      	mov	r2, r9
 8014534:	4640      	mov	r0, r8
 8014536:	4798      	blx	r3
 8014538:	6923      	ldr	r3, [r4, #16]
 801453a:	3b01      	subs	r3, #1
 801453c:	6123      	str	r3, [r4, #16]
 801453e:	e6eb      	b.n	8014318 <_scanf_float+0x7c>
 8014540:	1e6b      	subs	r3, r5, #1
 8014542:	2b06      	cmp	r3, #6
 8014544:	d824      	bhi.n	8014590 <_scanf_float+0x2f4>
 8014546:	2d02      	cmp	r5, #2
 8014548:	d836      	bhi.n	80145b8 <_scanf_float+0x31c>
 801454a:	9b01      	ldr	r3, [sp, #4]
 801454c:	429e      	cmp	r6, r3
 801454e:	f67f aee7 	bls.w	8014320 <_scanf_float+0x84>
 8014552:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014556:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801455a:	464a      	mov	r2, r9
 801455c:	4640      	mov	r0, r8
 801455e:	4798      	blx	r3
 8014560:	6923      	ldr	r3, [r4, #16]
 8014562:	3b01      	subs	r3, #1
 8014564:	6123      	str	r3, [r4, #16]
 8014566:	e7f0      	b.n	801454a <_scanf_float+0x2ae>
 8014568:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801456c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014570:	464a      	mov	r2, r9
 8014572:	4640      	mov	r0, r8
 8014574:	4798      	blx	r3
 8014576:	6923      	ldr	r3, [r4, #16]
 8014578:	3b01      	subs	r3, #1
 801457a:	6123      	str	r3, [r4, #16]
 801457c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014580:	fa5f fa8a 	uxtb.w	sl, sl
 8014584:	f1ba 0f02 	cmp.w	sl, #2
 8014588:	d1ee      	bne.n	8014568 <_scanf_float+0x2cc>
 801458a:	3d03      	subs	r5, #3
 801458c:	b2ed      	uxtb	r5, r5
 801458e:	1b76      	subs	r6, r6, r5
 8014590:	6823      	ldr	r3, [r4, #0]
 8014592:	05da      	lsls	r2, r3, #23
 8014594:	d530      	bpl.n	80145f8 <_scanf_float+0x35c>
 8014596:	055b      	lsls	r3, r3, #21
 8014598:	d511      	bpl.n	80145be <_scanf_float+0x322>
 801459a:	9b01      	ldr	r3, [sp, #4]
 801459c:	429e      	cmp	r6, r3
 801459e:	f67f aebf 	bls.w	8014320 <_scanf_float+0x84>
 80145a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80145a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80145aa:	464a      	mov	r2, r9
 80145ac:	4640      	mov	r0, r8
 80145ae:	4798      	blx	r3
 80145b0:	6923      	ldr	r3, [r4, #16]
 80145b2:	3b01      	subs	r3, #1
 80145b4:	6123      	str	r3, [r4, #16]
 80145b6:	e7f0      	b.n	801459a <_scanf_float+0x2fe>
 80145b8:	46aa      	mov	sl, r5
 80145ba:	46b3      	mov	fp, r6
 80145bc:	e7de      	b.n	801457c <_scanf_float+0x2e0>
 80145be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80145c2:	6923      	ldr	r3, [r4, #16]
 80145c4:	2965      	cmp	r1, #101	@ 0x65
 80145c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80145ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80145ce:	6123      	str	r3, [r4, #16]
 80145d0:	d00c      	beq.n	80145ec <_scanf_float+0x350>
 80145d2:	2945      	cmp	r1, #69	@ 0x45
 80145d4:	d00a      	beq.n	80145ec <_scanf_float+0x350>
 80145d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80145da:	464a      	mov	r2, r9
 80145dc:	4640      	mov	r0, r8
 80145de:	4798      	blx	r3
 80145e0:	6923      	ldr	r3, [r4, #16]
 80145e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80145e6:	3b01      	subs	r3, #1
 80145e8:	1eb5      	subs	r5, r6, #2
 80145ea:	6123      	str	r3, [r4, #16]
 80145ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80145f0:	464a      	mov	r2, r9
 80145f2:	4640      	mov	r0, r8
 80145f4:	4798      	blx	r3
 80145f6:	462e      	mov	r6, r5
 80145f8:	6822      	ldr	r2, [r4, #0]
 80145fa:	f012 0210 	ands.w	r2, r2, #16
 80145fe:	d001      	beq.n	8014604 <_scanf_float+0x368>
 8014600:	2000      	movs	r0, #0
 8014602:	e68e      	b.n	8014322 <_scanf_float+0x86>
 8014604:	7032      	strb	r2, [r6, #0]
 8014606:	6823      	ldr	r3, [r4, #0]
 8014608:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801460c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014610:	d125      	bne.n	801465e <_scanf_float+0x3c2>
 8014612:	9b02      	ldr	r3, [sp, #8]
 8014614:	429f      	cmp	r7, r3
 8014616:	d00a      	beq.n	801462e <_scanf_float+0x392>
 8014618:	1bda      	subs	r2, r3, r7
 801461a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801461e:	429e      	cmp	r6, r3
 8014620:	bf28      	it	cs
 8014622:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8014626:	4922      	ldr	r1, [pc, #136]	@ (80146b0 <_scanf_float+0x414>)
 8014628:	4630      	mov	r0, r6
 801462a:	f000 f9ad 	bl	8014988 <siprintf>
 801462e:	9901      	ldr	r1, [sp, #4]
 8014630:	2200      	movs	r2, #0
 8014632:	4640      	mov	r0, r8
 8014634:	f002 fc88 	bl	8016f48 <_strtod_r>
 8014638:	9b03      	ldr	r3, [sp, #12]
 801463a:	6821      	ldr	r1, [r4, #0]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	f011 0f02 	tst.w	r1, #2
 8014642:	ec57 6b10 	vmov	r6, r7, d0
 8014646:	f103 0204 	add.w	r2, r3, #4
 801464a:	d015      	beq.n	8014678 <_scanf_float+0x3dc>
 801464c:	9903      	ldr	r1, [sp, #12]
 801464e:	600a      	str	r2, [r1, #0]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	e9c3 6700 	strd	r6, r7, [r3]
 8014656:	68e3      	ldr	r3, [r4, #12]
 8014658:	3301      	adds	r3, #1
 801465a:	60e3      	str	r3, [r4, #12]
 801465c:	e7d0      	b.n	8014600 <_scanf_float+0x364>
 801465e:	9b04      	ldr	r3, [sp, #16]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d0e4      	beq.n	801462e <_scanf_float+0x392>
 8014664:	9905      	ldr	r1, [sp, #20]
 8014666:	230a      	movs	r3, #10
 8014668:	3101      	adds	r1, #1
 801466a:	4640      	mov	r0, r8
 801466c:	f002 fcec 	bl	8017048 <_strtol_r>
 8014670:	9b04      	ldr	r3, [sp, #16]
 8014672:	9e05      	ldr	r6, [sp, #20]
 8014674:	1ac2      	subs	r2, r0, r3
 8014676:	e7d0      	b.n	801461a <_scanf_float+0x37e>
 8014678:	f011 0f04 	tst.w	r1, #4
 801467c:	9903      	ldr	r1, [sp, #12]
 801467e:	600a      	str	r2, [r1, #0]
 8014680:	d1e6      	bne.n	8014650 <_scanf_float+0x3b4>
 8014682:	681d      	ldr	r5, [r3, #0]
 8014684:	4632      	mov	r2, r6
 8014686:	463b      	mov	r3, r7
 8014688:	4630      	mov	r0, r6
 801468a:	4639      	mov	r1, r7
 801468c:	f7ec fa56 	bl	8000b3c <__aeabi_dcmpun>
 8014690:	b128      	cbz	r0, 801469e <_scanf_float+0x402>
 8014692:	4808      	ldr	r0, [pc, #32]	@ (80146b4 <_scanf_float+0x418>)
 8014694:	f000 fb02 	bl	8014c9c <nanf>
 8014698:	ed85 0a00 	vstr	s0, [r5]
 801469c:	e7db      	b.n	8014656 <_scanf_float+0x3ba>
 801469e:	4630      	mov	r0, r6
 80146a0:	4639      	mov	r1, r7
 80146a2:	f7ec faa9 	bl	8000bf8 <__aeabi_d2f>
 80146a6:	6028      	str	r0, [r5, #0]
 80146a8:	e7d5      	b.n	8014656 <_scanf_float+0x3ba>
 80146aa:	2700      	movs	r7, #0
 80146ac:	e62e      	b.n	801430c <_scanf_float+0x70>
 80146ae:	bf00      	nop
 80146b0:	0801a418 	.word	0x0801a418
 80146b4:	0801a559 	.word	0x0801a559

080146b8 <std>:
 80146b8:	2300      	movs	r3, #0
 80146ba:	b510      	push	{r4, lr}
 80146bc:	4604      	mov	r4, r0
 80146be:	e9c0 3300 	strd	r3, r3, [r0]
 80146c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80146c6:	6083      	str	r3, [r0, #8]
 80146c8:	8181      	strh	r1, [r0, #12]
 80146ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80146cc:	81c2      	strh	r2, [r0, #14]
 80146ce:	6183      	str	r3, [r0, #24]
 80146d0:	4619      	mov	r1, r3
 80146d2:	2208      	movs	r2, #8
 80146d4:	305c      	adds	r0, #92	@ 0x5c
 80146d6:	f000 fa51 	bl	8014b7c <memset>
 80146da:	4b0d      	ldr	r3, [pc, #52]	@ (8014710 <std+0x58>)
 80146dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80146de:	4b0d      	ldr	r3, [pc, #52]	@ (8014714 <std+0x5c>)
 80146e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80146e2:	4b0d      	ldr	r3, [pc, #52]	@ (8014718 <std+0x60>)
 80146e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80146e6:	4b0d      	ldr	r3, [pc, #52]	@ (801471c <std+0x64>)
 80146e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80146ea:	4b0d      	ldr	r3, [pc, #52]	@ (8014720 <std+0x68>)
 80146ec:	6224      	str	r4, [r4, #32]
 80146ee:	429c      	cmp	r4, r3
 80146f0:	d006      	beq.n	8014700 <std+0x48>
 80146f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80146f6:	4294      	cmp	r4, r2
 80146f8:	d002      	beq.n	8014700 <std+0x48>
 80146fa:	33d0      	adds	r3, #208	@ 0xd0
 80146fc:	429c      	cmp	r4, r3
 80146fe:	d105      	bne.n	801470c <std+0x54>
 8014700:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014708:	f000 bac4 	b.w	8014c94 <__retarget_lock_init_recursive>
 801470c:	bd10      	pop	{r4, pc}
 801470e:	bf00      	nop
 8014710:	080149cd 	.word	0x080149cd
 8014714:	080149ef 	.word	0x080149ef
 8014718:	08014a27 	.word	0x08014a27
 801471c:	08014a4b 	.word	0x08014a4b
 8014720:	20004b74 	.word	0x20004b74

08014724 <stdio_exit_handler>:
 8014724:	4a02      	ldr	r2, [pc, #8]	@ (8014730 <stdio_exit_handler+0xc>)
 8014726:	4903      	ldr	r1, [pc, #12]	@ (8014734 <stdio_exit_handler+0x10>)
 8014728:	4803      	ldr	r0, [pc, #12]	@ (8014738 <stdio_exit_handler+0x14>)
 801472a:	f000 b869 	b.w	8014800 <_fwalk_sglue>
 801472e:	bf00      	nop
 8014730:	20000248 	.word	0x20000248
 8014734:	08017689 	.word	0x08017689
 8014738:	20000258 	.word	0x20000258

0801473c <cleanup_stdio>:
 801473c:	6841      	ldr	r1, [r0, #4]
 801473e:	4b0c      	ldr	r3, [pc, #48]	@ (8014770 <cleanup_stdio+0x34>)
 8014740:	4299      	cmp	r1, r3
 8014742:	b510      	push	{r4, lr}
 8014744:	4604      	mov	r4, r0
 8014746:	d001      	beq.n	801474c <cleanup_stdio+0x10>
 8014748:	f002 ff9e 	bl	8017688 <_fflush_r>
 801474c:	68a1      	ldr	r1, [r4, #8]
 801474e:	4b09      	ldr	r3, [pc, #36]	@ (8014774 <cleanup_stdio+0x38>)
 8014750:	4299      	cmp	r1, r3
 8014752:	d002      	beq.n	801475a <cleanup_stdio+0x1e>
 8014754:	4620      	mov	r0, r4
 8014756:	f002 ff97 	bl	8017688 <_fflush_r>
 801475a:	68e1      	ldr	r1, [r4, #12]
 801475c:	4b06      	ldr	r3, [pc, #24]	@ (8014778 <cleanup_stdio+0x3c>)
 801475e:	4299      	cmp	r1, r3
 8014760:	d004      	beq.n	801476c <cleanup_stdio+0x30>
 8014762:	4620      	mov	r0, r4
 8014764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014768:	f002 bf8e 	b.w	8017688 <_fflush_r>
 801476c:	bd10      	pop	{r4, pc}
 801476e:	bf00      	nop
 8014770:	20004b74 	.word	0x20004b74
 8014774:	20004bdc 	.word	0x20004bdc
 8014778:	20004c44 	.word	0x20004c44

0801477c <global_stdio_init.part.0>:
 801477c:	b510      	push	{r4, lr}
 801477e:	4b0b      	ldr	r3, [pc, #44]	@ (80147ac <global_stdio_init.part.0+0x30>)
 8014780:	4c0b      	ldr	r4, [pc, #44]	@ (80147b0 <global_stdio_init.part.0+0x34>)
 8014782:	4a0c      	ldr	r2, [pc, #48]	@ (80147b4 <global_stdio_init.part.0+0x38>)
 8014784:	601a      	str	r2, [r3, #0]
 8014786:	4620      	mov	r0, r4
 8014788:	2200      	movs	r2, #0
 801478a:	2104      	movs	r1, #4
 801478c:	f7ff ff94 	bl	80146b8 <std>
 8014790:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014794:	2201      	movs	r2, #1
 8014796:	2109      	movs	r1, #9
 8014798:	f7ff ff8e 	bl	80146b8 <std>
 801479c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80147a0:	2202      	movs	r2, #2
 80147a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147a6:	2112      	movs	r1, #18
 80147a8:	f7ff bf86 	b.w	80146b8 <std>
 80147ac:	20004cac 	.word	0x20004cac
 80147b0:	20004b74 	.word	0x20004b74
 80147b4:	08014725 	.word	0x08014725

080147b8 <__sfp_lock_acquire>:
 80147b8:	4801      	ldr	r0, [pc, #4]	@ (80147c0 <__sfp_lock_acquire+0x8>)
 80147ba:	f000 ba6c 	b.w	8014c96 <__retarget_lock_acquire_recursive>
 80147be:	bf00      	nop
 80147c0:	20004cb5 	.word	0x20004cb5

080147c4 <__sfp_lock_release>:
 80147c4:	4801      	ldr	r0, [pc, #4]	@ (80147cc <__sfp_lock_release+0x8>)
 80147c6:	f000 ba67 	b.w	8014c98 <__retarget_lock_release_recursive>
 80147ca:	bf00      	nop
 80147cc:	20004cb5 	.word	0x20004cb5

080147d0 <__sinit>:
 80147d0:	b510      	push	{r4, lr}
 80147d2:	4604      	mov	r4, r0
 80147d4:	f7ff fff0 	bl	80147b8 <__sfp_lock_acquire>
 80147d8:	6a23      	ldr	r3, [r4, #32]
 80147da:	b11b      	cbz	r3, 80147e4 <__sinit+0x14>
 80147dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147e0:	f7ff bff0 	b.w	80147c4 <__sfp_lock_release>
 80147e4:	4b04      	ldr	r3, [pc, #16]	@ (80147f8 <__sinit+0x28>)
 80147e6:	6223      	str	r3, [r4, #32]
 80147e8:	4b04      	ldr	r3, [pc, #16]	@ (80147fc <__sinit+0x2c>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d1f5      	bne.n	80147dc <__sinit+0xc>
 80147f0:	f7ff ffc4 	bl	801477c <global_stdio_init.part.0>
 80147f4:	e7f2      	b.n	80147dc <__sinit+0xc>
 80147f6:	bf00      	nop
 80147f8:	0801473d 	.word	0x0801473d
 80147fc:	20004cac 	.word	0x20004cac

08014800 <_fwalk_sglue>:
 8014800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014804:	4607      	mov	r7, r0
 8014806:	4688      	mov	r8, r1
 8014808:	4614      	mov	r4, r2
 801480a:	2600      	movs	r6, #0
 801480c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014810:	f1b9 0901 	subs.w	r9, r9, #1
 8014814:	d505      	bpl.n	8014822 <_fwalk_sglue+0x22>
 8014816:	6824      	ldr	r4, [r4, #0]
 8014818:	2c00      	cmp	r4, #0
 801481a:	d1f7      	bne.n	801480c <_fwalk_sglue+0xc>
 801481c:	4630      	mov	r0, r6
 801481e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014822:	89ab      	ldrh	r3, [r5, #12]
 8014824:	2b01      	cmp	r3, #1
 8014826:	d907      	bls.n	8014838 <_fwalk_sglue+0x38>
 8014828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801482c:	3301      	adds	r3, #1
 801482e:	d003      	beq.n	8014838 <_fwalk_sglue+0x38>
 8014830:	4629      	mov	r1, r5
 8014832:	4638      	mov	r0, r7
 8014834:	47c0      	blx	r8
 8014836:	4306      	orrs	r6, r0
 8014838:	3568      	adds	r5, #104	@ 0x68
 801483a:	e7e9      	b.n	8014810 <_fwalk_sglue+0x10>

0801483c <iprintf>:
 801483c:	b40f      	push	{r0, r1, r2, r3}
 801483e:	b507      	push	{r0, r1, r2, lr}
 8014840:	4906      	ldr	r1, [pc, #24]	@ (801485c <iprintf+0x20>)
 8014842:	ab04      	add	r3, sp, #16
 8014844:	6808      	ldr	r0, [r1, #0]
 8014846:	f853 2b04 	ldr.w	r2, [r3], #4
 801484a:	6881      	ldr	r1, [r0, #8]
 801484c:	9301      	str	r3, [sp, #4]
 801484e:	f002 fd7f 	bl	8017350 <_vfiprintf_r>
 8014852:	b003      	add	sp, #12
 8014854:	f85d eb04 	ldr.w	lr, [sp], #4
 8014858:	b004      	add	sp, #16
 801485a:	4770      	bx	lr
 801485c:	20000254 	.word	0x20000254

08014860 <_puts_r>:
 8014860:	6a03      	ldr	r3, [r0, #32]
 8014862:	b570      	push	{r4, r5, r6, lr}
 8014864:	6884      	ldr	r4, [r0, #8]
 8014866:	4605      	mov	r5, r0
 8014868:	460e      	mov	r6, r1
 801486a:	b90b      	cbnz	r3, 8014870 <_puts_r+0x10>
 801486c:	f7ff ffb0 	bl	80147d0 <__sinit>
 8014870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014872:	07db      	lsls	r3, r3, #31
 8014874:	d405      	bmi.n	8014882 <_puts_r+0x22>
 8014876:	89a3      	ldrh	r3, [r4, #12]
 8014878:	0598      	lsls	r0, r3, #22
 801487a:	d402      	bmi.n	8014882 <_puts_r+0x22>
 801487c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801487e:	f000 fa0a 	bl	8014c96 <__retarget_lock_acquire_recursive>
 8014882:	89a3      	ldrh	r3, [r4, #12]
 8014884:	0719      	lsls	r1, r3, #28
 8014886:	d502      	bpl.n	801488e <_puts_r+0x2e>
 8014888:	6923      	ldr	r3, [r4, #16]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d135      	bne.n	80148fa <_puts_r+0x9a>
 801488e:	4621      	mov	r1, r4
 8014890:	4628      	mov	r0, r5
 8014892:	f000 f91d 	bl	8014ad0 <__swsetup_r>
 8014896:	b380      	cbz	r0, 80148fa <_puts_r+0x9a>
 8014898:	f04f 35ff 	mov.w	r5, #4294967295
 801489c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801489e:	07da      	lsls	r2, r3, #31
 80148a0:	d405      	bmi.n	80148ae <_puts_r+0x4e>
 80148a2:	89a3      	ldrh	r3, [r4, #12]
 80148a4:	059b      	lsls	r3, r3, #22
 80148a6:	d402      	bmi.n	80148ae <_puts_r+0x4e>
 80148a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80148aa:	f000 f9f5 	bl	8014c98 <__retarget_lock_release_recursive>
 80148ae:	4628      	mov	r0, r5
 80148b0:	bd70      	pop	{r4, r5, r6, pc}
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	da04      	bge.n	80148c0 <_puts_r+0x60>
 80148b6:	69a2      	ldr	r2, [r4, #24]
 80148b8:	429a      	cmp	r2, r3
 80148ba:	dc17      	bgt.n	80148ec <_puts_r+0x8c>
 80148bc:	290a      	cmp	r1, #10
 80148be:	d015      	beq.n	80148ec <_puts_r+0x8c>
 80148c0:	6823      	ldr	r3, [r4, #0]
 80148c2:	1c5a      	adds	r2, r3, #1
 80148c4:	6022      	str	r2, [r4, #0]
 80148c6:	7019      	strb	r1, [r3, #0]
 80148c8:	68a3      	ldr	r3, [r4, #8]
 80148ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80148ce:	3b01      	subs	r3, #1
 80148d0:	60a3      	str	r3, [r4, #8]
 80148d2:	2900      	cmp	r1, #0
 80148d4:	d1ed      	bne.n	80148b2 <_puts_r+0x52>
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	da11      	bge.n	80148fe <_puts_r+0x9e>
 80148da:	4622      	mov	r2, r4
 80148dc:	210a      	movs	r1, #10
 80148de:	4628      	mov	r0, r5
 80148e0:	f000 f8b7 	bl	8014a52 <__swbuf_r>
 80148e4:	3001      	adds	r0, #1
 80148e6:	d0d7      	beq.n	8014898 <_puts_r+0x38>
 80148e8:	250a      	movs	r5, #10
 80148ea:	e7d7      	b.n	801489c <_puts_r+0x3c>
 80148ec:	4622      	mov	r2, r4
 80148ee:	4628      	mov	r0, r5
 80148f0:	f000 f8af 	bl	8014a52 <__swbuf_r>
 80148f4:	3001      	adds	r0, #1
 80148f6:	d1e7      	bne.n	80148c8 <_puts_r+0x68>
 80148f8:	e7ce      	b.n	8014898 <_puts_r+0x38>
 80148fa:	3e01      	subs	r6, #1
 80148fc:	e7e4      	b.n	80148c8 <_puts_r+0x68>
 80148fe:	6823      	ldr	r3, [r4, #0]
 8014900:	1c5a      	adds	r2, r3, #1
 8014902:	6022      	str	r2, [r4, #0]
 8014904:	220a      	movs	r2, #10
 8014906:	701a      	strb	r2, [r3, #0]
 8014908:	e7ee      	b.n	80148e8 <_puts_r+0x88>
	...

0801490c <puts>:
 801490c:	4b02      	ldr	r3, [pc, #8]	@ (8014918 <puts+0xc>)
 801490e:	4601      	mov	r1, r0
 8014910:	6818      	ldr	r0, [r3, #0]
 8014912:	f7ff bfa5 	b.w	8014860 <_puts_r>
 8014916:	bf00      	nop
 8014918:	20000254 	.word	0x20000254

0801491c <sniprintf>:
 801491c:	b40c      	push	{r2, r3}
 801491e:	b530      	push	{r4, r5, lr}
 8014920:	4b18      	ldr	r3, [pc, #96]	@ (8014984 <sniprintf+0x68>)
 8014922:	1e0c      	subs	r4, r1, #0
 8014924:	681d      	ldr	r5, [r3, #0]
 8014926:	b09d      	sub	sp, #116	@ 0x74
 8014928:	da08      	bge.n	801493c <sniprintf+0x20>
 801492a:	238b      	movs	r3, #139	@ 0x8b
 801492c:	602b      	str	r3, [r5, #0]
 801492e:	f04f 30ff 	mov.w	r0, #4294967295
 8014932:	b01d      	add	sp, #116	@ 0x74
 8014934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014938:	b002      	add	sp, #8
 801493a:	4770      	bx	lr
 801493c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014940:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014944:	f04f 0300 	mov.w	r3, #0
 8014948:	931b      	str	r3, [sp, #108]	@ 0x6c
 801494a:	bf14      	ite	ne
 801494c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014950:	4623      	moveq	r3, r4
 8014952:	9304      	str	r3, [sp, #16]
 8014954:	9307      	str	r3, [sp, #28]
 8014956:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801495a:	9002      	str	r0, [sp, #8]
 801495c:	9006      	str	r0, [sp, #24]
 801495e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014962:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014964:	ab21      	add	r3, sp, #132	@ 0x84
 8014966:	a902      	add	r1, sp, #8
 8014968:	4628      	mov	r0, r5
 801496a:	9301      	str	r3, [sp, #4]
 801496c:	f002 fbca 	bl	8017104 <_svfiprintf_r>
 8014970:	1c43      	adds	r3, r0, #1
 8014972:	bfbc      	itt	lt
 8014974:	238b      	movlt	r3, #139	@ 0x8b
 8014976:	602b      	strlt	r3, [r5, #0]
 8014978:	2c00      	cmp	r4, #0
 801497a:	d0da      	beq.n	8014932 <sniprintf+0x16>
 801497c:	9b02      	ldr	r3, [sp, #8]
 801497e:	2200      	movs	r2, #0
 8014980:	701a      	strb	r2, [r3, #0]
 8014982:	e7d6      	b.n	8014932 <sniprintf+0x16>
 8014984:	20000254 	.word	0x20000254

08014988 <siprintf>:
 8014988:	b40e      	push	{r1, r2, r3}
 801498a:	b510      	push	{r4, lr}
 801498c:	b09d      	sub	sp, #116	@ 0x74
 801498e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014990:	9002      	str	r0, [sp, #8]
 8014992:	9006      	str	r0, [sp, #24]
 8014994:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014998:	480a      	ldr	r0, [pc, #40]	@ (80149c4 <siprintf+0x3c>)
 801499a:	9107      	str	r1, [sp, #28]
 801499c:	9104      	str	r1, [sp, #16]
 801499e:	490a      	ldr	r1, [pc, #40]	@ (80149c8 <siprintf+0x40>)
 80149a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80149a4:	9105      	str	r1, [sp, #20]
 80149a6:	2400      	movs	r4, #0
 80149a8:	a902      	add	r1, sp, #8
 80149aa:	6800      	ldr	r0, [r0, #0]
 80149ac:	9301      	str	r3, [sp, #4]
 80149ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80149b0:	f002 fba8 	bl	8017104 <_svfiprintf_r>
 80149b4:	9b02      	ldr	r3, [sp, #8]
 80149b6:	701c      	strb	r4, [r3, #0]
 80149b8:	b01d      	add	sp, #116	@ 0x74
 80149ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149be:	b003      	add	sp, #12
 80149c0:	4770      	bx	lr
 80149c2:	bf00      	nop
 80149c4:	20000254 	.word	0x20000254
 80149c8:	ffff0208 	.word	0xffff0208

080149cc <__sread>:
 80149cc:	b510      	push	{r4, lr}
 80149ce:	460c      	mov	r4, r1
 80149d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149d4:	f000 f900 	bl	8014bd8 <_read_r>
 80149d8:	2800      	cmp	r0, #0
 80149da:	bfab      	itete	ge
 80149dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80149de:	89a3      	ldrhlt	r3, [r4, #12]
 80149e0:	181b      	addge	r3, r3, r0
 80149e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80149e6:	bfac      	ite	ge
 80149e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80149ea:	81a3      	strhlt	r3, [r4, #12]
 80149ec:	bd10      	pop	{r4, pc}

080149ee <__swrite>:
 80149ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149f2:	461f      	mov	r7, r3
 80149f4:	898b      	ldrh	r3, [r1, #12]
 80149f6:	05db      	lsls	r3, r3, #23
 80149f8:	4605      	mov	r5, r0
 80149fa:	460c      	mov	r4, r1
 80149fc:	4616      	mov	r6, r2
 80149fe:	d505      	bpl.n	8014a0c <__swrite+0x1e>
 8014a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a04:	2302      	movs	r3, #2
 8014a06:	2200      	movs	r2, #0
 8014a08:	f000 f8d4 	bl	8014bb4 <_lseek_r>
 8014a0c:	89a3      	ldrh	r3, [r4, #12]
 8014a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014a16:	81a3      	strh	r3, [r4, #12]
 8014a18:	4632      	mov	r2, r6
 8014a1a:	463b      	mov	r3, r7
 8014a1c:	4628      	mov	r0, r5
 8014a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a22:	f000 b8fb 	b.w	8014c1c <_write_r>

08014a26 <__sseek>:
 8014a26:	b510      	push	{r4, lr}
 8014a28:	460c      	mov	r4, r1
 8014a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a2e:	f000 f8c1 	bl	8014bb4 <_lseek_r>
 8014a32:	1c43      	adds	r3, r0, #1
 8014a34:	89a3      	ldrh	r3, [r4, #12]
 8014a36:	bf15      	itete	ne
 8014a38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014a3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014a3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014a42:	81a3      	strheq	r3, [r4, #12]
 8014a44:	bf18      	it	ne
 8014a46:	81a3      	strhne	r3, [r4, #12]
 8014a48:	bd10      	pop	{r4, pc}

08014a4a <__sclose>:
 8014a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a4e:	f000 b8a1 	b.w	8014b94 <_close_r>

08014a52 <__swbuf_r>:
 8014a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a54:	460e      	mov	r6, r1
 8014a56:	4614      	mov	r4, r2
 8014a58:	4605      	mov	r5, r0
 8014a5a:	b118      	cbz	r0, 8014a64 <__swbuf_r+0x12>
 8014a5c:	6a03      	ldr	r3, [r0, #32]
 8014a5e:	b90b      	cbnz	r3, 8014a64 <__swbuf_r+0x12>
 8014a60:	f7ff feb6 	bl	80147d0 <__sinit>
 8014a64:	69a3      	ldr	r3, [r4, #24]
 8014a66:	60a3      	str	r3, [r4, #8]
 8014a68:	89a3      	ldrh	r3, [r4, #12]
 8014a6a:	071a      	lsls	r2, r3, #28
 8014a6c:	d501      	bpl.n	8014a72 <__swbuf_r+0x20>
 8014a6e:	6923      	ldr	r3, [r4, #16]
 8014a70:	b943      	cbnz	r3, 8014a84 <__swbuf_r+0x32>
 8014a72:	4621      	mov	r1, r4
 8014a74:	4628      	mov	r0, r5
 8014a76:	f000 f82b 	bl	8014ad0 <__swsetup_r>
 8014a7a:	b118      	cbz	r0, 8014a84 <__swbuf_r+0x32>
 8014a7c:	f04f 37ff 	mov.w	r7, #4294967295
 8014a80:	4638      	mov	r0, r7
 8014a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a84:	6823      	ldr	r3, [r4, #0]
 8014a86:	6922      	ldr	r2, [r4, #16]
 8014a88:	1a98      	subs	r0, r3, r2
 8014a8a:	6963      	ldr	r3, [r4, #20]
 8014a8c:	b2f6      	uxtb	r6, r6
 8014a8e:	4283      	cmp	r3, r0
 8014a90:	4637      	mov	r7, r6
 8014a92:	dc05      	bgt.n	8014aa0 <__swbuf_r+0x4e>
 8014a94:	4621      	mov	r1, r4
 8014a96:	4628      	mov	r0, r5
 8014a98:	f002 fdf6 	bl	8017688 <_fflush_r>
 8014a9c:	2800      	cmp	r0, #0
 8014a9e:	d1ed      	bne.n	8014a7c <__swbuf_r+0x2a>
 8014aa0:	68a3      	ldr	r3, [r4, #8]
 8014aa2:	3b01      	subs	r3, #1
 8014aa4:	60a3      	str	r3, [r4, #8]
 8014aa6:	6823      	ldr	r3, [r4, #0]
 8014aa8:	1c5a      	adds	r2, r3, #1
 8014aaa:	6022      	str	r2, [r4, #0]
 8014aac:	701e      	strb	r6, [r3, #0]
 8014aae:	6962      	ldr	r2, [r4, #20]
 8014ab0:	1c43      	adds	r3, r0, #1
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d004      	beq.n	8014ac0 <__swbuf_r+0x6e>
 8014ab6:	89a3      	ldrh	r3, [r4, #12]
 8014ab8:	07db      	lsls	r3, r3, #31
 8014aba:	d5e1      	bpl.n	8014a80 <__swbuf_r+0x2e>
 8014abc:	2e0a      	cmp	r6, #10
 8014abe:	d1df      	bne.n	8014a80 <__swbuf_r+0x2e>
 8014ac0:	4621      	mov	r1, r4
 8014ac2:	4628      	mov	r0, r5
 8014ac4:	f002 fde0 	bl	8017688 <_fflush_r>
 8014ac8:	2800      	cmp	r0, #0
 8014aca:	d0d9      	beq.n	8014a80 <__swbuf_r+0x2e>
 8014acc:	e7d6      	b.n	8014a7c <__swbuf_r+0x2a>
	...

08014ad0 <__swsetup_r>:
 8014ad0:	b538      	push	{r3, r4, r5, lr}
 8014ad2:	4b29      	ldr	r3, [pc, #164]	@ (8014b78 <__swsetup_r+0xa8>)
 8014ad4:	4605      	mov	r5, r0
 8014ad6:	6818      	ldr	r0, [r3, #0]
 8014ad8:	460c      	mov	r4, r1
 8014ada:	b118      	cbz	r0, 8014ae4 <__swsetup_r+0x14>
 8014adc:	6a03      	ldr	r3, [r0, #32]
 8014ade:	b90b      	cbnz	r3, 8014ae4 <__swsetup_r+0x14>
 8014ae0:	f7ff fe76 	bl	80147d0 <__sinit>
 8014ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ae8:	0719      	lsls	r1, r3, #28
 8014aea:	d422      	bmi.n	8014b32 <__swsetup_r+0x62>
 8014aec:	06da      	lsls	r2, r3, #27
 8014aee:	d407      	bmi.n	8014b00 <__swsetup_r+0x30>
 8014af0:	2209      	movs	r2, #9
 8014af2:	602a      	str	r2, [r5, #0]
 8014af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014af8:	81a3      	strh	r3, [r4, #12]
 8014afa:	f04f 30ff 	mov.w	r0, #4294967295
 8014afe:	e033      	b.n	8014b68 <__swsetup_r+0x98>
 8014b00:	0758      	lsls	r0, r3, #29
 8014b02:	d512      	bpl.n	8014b2a <__swsetup_r+0x5a>
 8014b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014b06:	b141      	cbz	r1, 8014b1a <__swsetup_r+0x4a>
 8014b08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014b0c:	4299      	cmp	r1, r3
 8014b0e:	d002      	beq.n	8014b16 <__swsetup_r+0x46>
 8014b10:	4628      	mov	r0, r5
 8014b12:	f000 ff21 	bl	8015958 <_free_r>
 8014b16:	2300      	movs	r3, #0
 8014b18:	6363      	str	r3, [r4, #52]	@ 0x34
 8014b1a:	89a3      	ldrh	r3, [r4, #12]
 8014b1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014b20:	81a3      	strh	r3, [r4, #12]
 8014b22:	2300      	movs	r3, #0
 8014b24:	6063      	str	r3, [r4, #4]
 8014b26:	6923      	ldr	r3, [r4, #16]
 8014b28:	6023      	str	r3, [r4, #0]
 8014b2a:	89a3      	ldrh	r3, [r4, #12]
 8014b2c:	f043 0308 	orr.w	r3, r3, #8
 8014b30:	81a3      	strh	r3, [r4, #12]
 8014b32:	6923      	ldr	r3, [r4, #16]
 8014b34:	b94b      	cbnz	r3, 8014b4a <__swsetup_r+0x7a>
 8014b36:	89a3      	ldrh	r3, [r4, #12]
 8014b38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014b40:	d003      	beq.n	8014b4a <__swsetup_r+0x7a>
 8014b42:	4621      	mov	r1, r4
 8014b44:	4628      	mov	r0, r5
 8014b46:	f002 fded 	bl	8017724 <__smakebuf_r>
 8014b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b4e:	f013 0201 	ands.w	r2, r3, #1
 8014b52:	d00a      	beq.n	8014b6a <__swsetup_r+0x9a>
 8014b54:	2200      	movs	r2, #0
 8014b56:	60a2      	str	r2, [r4, #8]
 8014b58:	6962      	ldr	r2, [r4, #20]
 8014b5a:	4252      	negs	r2, r2
 8014b5c:	61a2      	str	r2, [r4, #24]
 8014b5e:	6922      	ldr	r2, [r4, #16]
 8014b60:	b942      	cbnz	r2, 8014b74 <__swsetup_r+0xa4>
 8014b62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014b66:	d1c5      	bne.n	8014af4 <__swsetup_r+0x24>
 8014b68:	bd38      	pop	{r3, r4, r5, pc}
 8014b6a:	0799      	lsls	r1, r3, #30
 8014b6c:	bf58      	it	pl
 8014b6e:	6962      	ldrpl	r2, [r4, #20]
 8014b70:	60a2      	str	r2, [r4, #8]
 8014b72:	e7f4      	b.n	8014b5e <__swsetup_r+0x8e>
 8014b74:	2000      	movs	r0, #0
 8014b76:	e7f7      	b.n	8014b68 <__swsetup_r+0x98>
 8014b78:	20000254 	.word	0x20000254

08014b7c <memset>:
 8014b7c:	4402      	add	r2, r0
 8014b7e:	4603      	mov	r3, r0
 8014b80:	4293      	cmp	r3, r2
 8014b82:	d100      	bne.n	8014b86 <memset+0xa>
 8014b84:	4770      	bx	lr
 8014b86:	f803 1b01 	strb.w	r1, [r3], #1
 8014b8a:	e7f9      	b.n	8014b80 <memset+0x4>

08014b8c <_localeconv_r>:
 8014b8c:	4800      	ldr	r0, [pc, #0]	@ (8014b90 <_localeconv_r+0x4>)
 8014b8e:	4770      	bx	lr
 8014b90:	20000394 	.word	0x20000394

08014b94 <_close_r>:
 8014b94:	b538      	push	{r3, r4, r5, lr}
 8014b96:	4d06      	ldr	r5, [pc, #24]	@ (8014bb0 <_close_r+0x1c>)
 8014b98:	2300      	movs	r3, #0
 8014b9a:	4604      	mov	r4, r0
 8014b9c:	4608      	mov	r0, r1
 8014b9e:	602b      	str	r3, [r5, #0]
 8014ba0:	f7ed f8ea 	bl	8001d78 <_close>
 8014ba4:	1c43      	adds	r3, r0, #1
 8014ba6:	d102      	bne.n	8014bae <_close_r+0x1a>
 8014ba8:	682b      	ldr	r3, [r5, #0]
 8014baa:	b103      	cbz	r3, 8014bae <_close_r+0x1a>
 8014bac:	6023      	str	r3, [r4, #0]
 8014bae:	bd38      	pop	{r3, r4, r5, pc}
 8014bb0:	20004cb0 	.word	0x20004cb0

08014bb4 <_lseek_r>:
 8014bb4:	b538      	push	{r3, r4, r5, lr}
 8014bb6:	4d07      	ldr	r5, [pc, #28]	@ (8014bd4 <_lseek_r+0x20>)
 8014bb8:	4604      	mov	r4, r0
 8014bba:	4608      	mov	r0, r1
 8014bbc:	4611      	mov	r1, r2
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	602a      	str	r2, [r5, #0]
 8014bc2:	461a      	mov	r2, r3
 8014bc4:	f7ed f8ff 	bl	8001dc6 <_lseek>
 8014bc8:	1c43      	adds	r3, r0, #1
 8014bca:	d102      	bne.n	8014bd2 <_lseek_r+0x1e>
 8014bcc:	682b      	ldr	r3, [r5, #0]
 8014bce:	b103      	cbz	r3, 8014bd2 <_lseek_r+0x1e>
 8014bd0:	6023      	str	r3, [r4, #0]
 8014bd2:	bd38      	pop	{r3, r4, r5, pc}
 8014bd4:	20004cb0 	.word	0x20004cb0

08014bd8 <_read_r>:
 8014bd8:	b538      	push	{r3, r4, r5, lr}
 8014bda:	4d07      	ldr	r5, [pc, #28]	@ (8014bf8 <_read_r+0x20>)
 8014bdc:	4604      	mov	r4, r0
 8014bde:	4608      	mov	r0, r1
 8014be0:	4611      	mov	r1, r2
 8014be2:	2200      	movs	r2, #0
 8014be4:	602a      	str	r2, [r5, #0]
 8014be6:	461a      	mov	r2, r3
 8014be8:	f7ed f8a9 	bl	8001d3e <_read>
 8014bec:	1c43      	adds	r3, r0, #1
 8014bee:	d102      	bne.n	8014bf6 <_read_r+0x1e>
 8014bf0:	682b      	ldr	r3, [r5, #0]
 8014bf2:	b103      	cbz	r3, 8014bf6 <_read_r+0x1e>
 8014bf4:	6023      	str	r3, [r4, #0]
 8014bf6:	bd38      	pop	{r3, r4, r5, pc}
 8014bf8:	20004cb0 	.word	0x20004cb0

08014bfc <_sbrk_r>:
 8014bfc:	b538      	push	{r3, r4, r5, lr}
 8014bfe:	4d06      	ldr	r5, [pc, #24]	@ (8014c18 <_sbrk_r+0x1c>)
 8014c00:	2300      	movs	r3, #0
 8014c02:	4604      	mov	r4, r0
 8014c04:	4608      	mov	r0, r1
 8014c06:	602b      	str	r3, [r5, #0]
 8014c08:	f7ed f8ea 	bl	8001de0 <_sbrk>
 8014c0c:	1c43      	adds	r3, r0, #1
 8014c0e:	d102      	bne.n	8014c16 <_sbrk_r+0x1a>
 8014c10:	682b      	ldr	r3, [r5, #0]
 8014c12:	b103      	cbz	r3, 8014c16 <_sbrk_r+0x1a>
 8014c14:	6023      	str	r3, [r4, #0]
 8014c16:	bd38      	pop	{r3, r4, r5, pc}
 8014c18:	20004cb0 	.word	0x20004cb0

08014c1c <_write_r>:
 8014c1c:	b538      	push	{r3, r4, r5, lr}
 8014c1e:	4d07      	ldr	r5, [pc, #28]	@ (8014c3c <_write_r+0x20>)
 8014c20:	4604      	mov	r4, r0
 8014c22:	4608      	mov	r0, r1
 8014c24:	4611      	mov	r1, r2
 8014c26:	2200      	movs	r2, #0
 8014c28:	602a      	str	r2, [r5, #0]
 8014c2a:	461a      	mov	r2, r3
 8014c2c:	f7ef feb2 	bl	8004994 <_write>
 8014c30:	1c43      	adds	r3, r0, #1
 8014c32:	d102      	bne.n	8014c3a <_write_r+0x1e>
 8014c34:	682b      	ldr	r3, [r5, #0]
 8014c36:	b103      	cbz	r3, 8014c3a <_write_r+0x1e>
 8014c38:	6023      	str	r3, [r4, #0]
 8014c3a:	bd38      	pop	{r3, r4, r5, pc}
 8014c3c:	20004cb0 	.word	0x20004cb0

08014c40 <__errno>:
 8014c40:	4b01      	ldr	r3, [pc, #4]	@ (8014c48 <__errno+0x8>)
 8014c42:	6818      	ldr	r0, [r3, #0]
 8014c44:	4770      	bx	lr
 8014c46:	bf00      	nop
 8014c48:	20000254 	.word	0x20000254

08014c4c <__libc_init_array>:
 8014c4c:	b570      	push	{r4, r5, r6, lr}
 8014c4e:	4d0d      	ldr	r5, [pc, #52]	@ (8014c84 <__libc_init_array+0x38>)
 8014c50:	4c0d      	ldr	r4, [pc, #52]	@ (8014c88 <__libc_init_array+0x3c>)
 8014c52:	1b64      	subs	r4, r4, r5
 8014c54:	10a4      	asrs	r4, r4, #2
 8014c56:	2600      	movs	r6, #0
 8014c58:	42a6      	cmp	r6, r4
 8014c5a:	d109      	bne.n	8014c70 <__libc_init_array+0x24>
 8014c5c:	4d0b      	ldr	r5, [pc, #44]	@ (8014c8c <__libc_init_array+0x40>)
 8014c5e:	4c0c      	ldr	r4, [pc, #48]	@ (8014c90 <__libc_init_array+0x44>)
 8014c60:	f003 fb18 	bl	8018294 <_init>
 8014c64:	1b64      	subs	r4, r4, r5
 8014c66:	10a4      	asrs	r4, r4, #2
 8014c68:	2600      	movs	r6, #0
 8014c6a:	42a6      	cmp	r6, r4
 8014c6c:	d105      	bne.n	8014c7a <__libc_init_array+0x2e>
 8014c6e:	bd70      	pop	{r4, r5, r6, pc}
 8014c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c74:	4798      	blx	r3
 8014c76:	3601      	adds	r6, #1
 8014c78:	e7ee      	b.n	8014c58 <__libc_init_array+0xc>
 8014c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c7e:	4798      	blx	r3
 8014c80:	3601      	adds	r6, #1
 8014c82:	e7f2      	b.n	8014c6a <__libc_init_array+0x1e>
 8014c84:	0801a81c 	.word	0x0801a81c
 8014c88:	0801a81c 	.word	0x0801a81c
 8014c8c:	0801a81c 	.word	0x0801a81c
 8014c90:	0801a820 	.word	0x0801a820

08014c94 <__retarget_lock_init_recursive>:
 8014c94:	4770      	bx	lr

08014c96 <__retarget_lock_acquire_recursive>:
 8014c96:	4770      	bx	lr

08014c98 <__retarget_lock_release_recursive>:
 8014c98:	4770      	bx	lr
	...

08014c9c <nanf>:
 8014c9c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014ca4 <nanf+0x8>
 8014ca0:	4770      	bx	lr
 8014ca2:	bf00      	nop
 8014ca4:	7fc00000 	.word	0x7fc00000

08014ca8 <quorem>:
 8014ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cac:	6903      	ldr	r3, [r0, #16]
 8014cae:	690c      	ldr	r4, [r1, #16]
 8014cb0:	42a3      	cmp	r3, r4
 8014cb2:	4607      	mov	r7, r0
 8014cb4:	db7e      	blt.n	8014db4 <quorem+0x10c>
 8014cb6:	3c01      	subs	r4, #1
 8014cb8:	f101 0814 	add.w	r8, r1, #20
 8014cbc:	00a3      	lsls	r3, r4, #2
 8014cbe:	f100 0514 	add.w	r5, r0, #20
 8014cc2:	9300      	str	r3, [sp, #0]
 8014cc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014cc8:	9301      	str	r3, [sp, #4]
 8014cca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014cce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014cd2:	3301      	adds	r3, #1
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014cda:	fbb2 f6f3 	udiv	r6, r2, r3
 8014cde:	d32e      	bcc.n	8014d3e <quorem+0x96>
 8014ce0:	f04f 0a00 	mov.w	sl, #0
 8014ce4:	46c4      	mov	ip, r8
 8014ce6:	46ae      	mov	lr, r5
 8014ce8:	46d3      	mov	fp, sl
 8014cea:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014cee:	b298      	uxth	r0, r3
 8014cf0:	fb06 a000 	mla	r0, r6, r0, sl
 8014cf4:	0c02      	lsrs	r2, r0, #16
 8014cf6:	0c1b      	lsrs	r3, r3, #16
 8014cf8:	fb06 2303 	mla	r3, r6, r3, r2
 8014cfc:	f8de 2000 	ldr.w	r2, [lr]
 8014d00:	b280      	uxth	r0, r0
 8014d02:	b292      	uxth	r2, r2
 8014d04:	1a12      	subs	r2, r2, r0
 8014d06:	445a      	add	r2, fp
 8014d08:	f8de 0000 	ldr.w	r0, [lr]
 8014d0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014d10:	b29b      	uxth	r3, r3
 8014d12:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014d16:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014d1a:	b292      	uxth	r2, r2
 8014d1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014d20:	45e1      	cmp	r9, ip
 8014d22:	f84e 2b04 	str.w	r2, [lr], #4
 8014d26:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014d2a:	d2de      	bcs.n	8014cea <quorem+0x42>
 8014d2c:	9b00      	ldr	r3, [sp, #0]
 8014d2e:	58eb      	ldr	r3, [r5, r3]
 8014d30:	b92b      	cbnz	r3, 8014d3e <quorem+0x96>
 8014d32:	9b01      	ldr	r3, [sp, #4]
 8014d34:	3b04      	subs	r3, #4
 8014d36:	429d      	cmp	r5, r3
 8014d38:	461a      	mov	r2, r3
 8014d3a:	d32f      	bcc.n	8014d9c <quorem+0xf4>
 8014d3c:	613c      	str	r4, [r7, #16]
 8014d3e:	4638      	mov	r0, r7
 8014d40:	f001 f910 	bl	8015f64 <__mcmp>
 8014d44:	2800      	cmp	r0, #0
 8014d46:	db25      	blt.n	8014d94 <quorem+0xec>
 8014d48:	4629      	mov	r1, r5
 8014d4a:	2000      	movs	r0, #0
 8014d4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014d50:	f8d1 c000 	ldr.w	ip, [r1]
 8014d54:	fa1f fe82 	uxth.w	lr, r2
 8014d58:	fa1f f38c 	uxth.w	r3, ip
 8014d5c:	eba3 030e 	sub.w	r3, r3, lr
 8014d60:	4403      	add	r3, r0
 8014d62:	0c12      	lsrs	r2, r2, #16
 8014d64:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014d68:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014d6c:	b29b      	uxth	r3, r3
 8014d6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014d72:	45c1      	cmp	r9, r8
 8014d74:	f841 3b04 	str.w	r3, [r1], #4
 8014d78:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014d7c:	d2e6      	bcs.n	8014d4c <quorem+0xa4>
 8014d7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d86:	b922      	cbnz	r2, 8014d92 <quorem+0xea>
 8014d88:	3b04      	subs	r3, #4
 8014d8a:	429d      	cmp	r5, r3
 8014d8c:	461a      	mov	r2, r3
 8014d8e:	d30b      	bcc.n	8014da8 <quorem+0x100>
 8014d90:	613c      	str	r4, [r7, #16]
 8014d92:	3601      	adds	r6, #1
 8014d94:	4630      	mov	r0, r6
 8014d96:	b003      	add	sp, #12
 8014d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d9c:	6812      	ldr	r2, [r2, #0]
 8014d9e:	3b04      	subs	r3, #4
 8014da0:	2a00      	cmp	r2, #0
 8014da2:	d1cb      	bne.n	8014d3c <quorem+0x94>
 8014da4:	3c01      	subs	r4, #1
 8014da6:	e7c6      	b.n	8014d36 <quorem+0x8e>
 8014da8:	6812      	ldr	r2, [r2, #0]
 8014daa:	3b04      	subs	r3, #4
 8014dac:	2a00      	cmp	r2, #0
 8014dae:	d1ef      	bne.n	8014d90 <quorem+0xe8>
 8014db0:	3c01      	subs	r4, #1
 8014db2:	e7ea      	b.n	8014d8a <quorem+0xe2>
 8014db4:	2000      	movs	r0, #0
 8014db6:	e7ee      	b.n	8014d96 <quorem+0xee>

08014db8 <_dtoa_r>:
 8014db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dbc:	69c7      	ldr	r7, [r0, #28]
 8014dbe:	b097      	sub	sp, #92	@ 0x5c
 8014dc0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8014dc4:	ec55 4b10 	vmov	r4, r5, d0
 8014dc8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014dca:	9107      	str	r1, [sp, #28]
 8014dcc:	4681      	mov	r9, r0
 8014dce:	920c      	str	r2, [sp, #48]	@ 0x30
 8014dd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8014dd2:	b97f      	cbnz	r7, 8014df4 <_dtoa_r+0x3c>
 8014dd4:	2010      	movs	r0, #16
 8014dd6:	f7fe fd4d 	bl	8013874 <malloc>
 8014dda:	4602      	mov	r2, r0
 8014ddc:	f8c9 001c 	str.w	r0, [r9, #28]
 8014de0:	b920      	cbnz	r0, 8014dec <_dtoa_r+0x34>
 8014de2:	4ba9      	ldr	r3, [pc, #676]	@ (8015088 <_dtoa_r+0x2d0>)
 8014de4:	21ef      	movs	r1, #239	@ 0xef
 8014de6:	48a9      	ldr	r0, [pc, #676]	@ (801508c <_dtoa_r+0x2d4>)
 8014de8:	f002 fd3e 	bl	8017868 <__assert_func>
 8014dec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014df0:	6007      	str	r7, [r0, #0]
 8014df2:	60c7      	str	r7, [r0, #12]
 8014df4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014df8:	6819      	ldr	r1, [r3, #0]
 8014dfa:	b159      	cbz	r1, 8014e14 <_dtoa_r+0x5c>
 8014dfc:	685a      	ldr	r2, [r3, #4]
 8014dfe:	604a      	str	r2, [r1, #4]
 8014e00:	2301      	movs	r3, #1
 8014e02:	4093      	lsls	r3, r2
 8014e04:	608b      	str	r3, [r1, #8]
 8014e06:	4648      	mov	r0, r9
 8014e08:	f000 fe30 	bl	8015a6c <_Bfree>
 8014e0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014e10:	2200      	movs	r2, #0
 8014e12:	601a      	str	r2, [r3, #0]
 8014e14:	1e2b      	subs	r3, r5, #0
 8014e16:	bfb9      	ittee	lt
 8014e18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014e1c:	9305      	strlt	r3, [sp, #20]
 8014e1e:	2300      	movge	r3, #0
 8014e20:	6033      	strge	r3, [r6, #0]
 8014e22:	9f05      	ldr	r7, [sp, #20]
 8014e24:	4b9a      	ldr	r3, [pc, #616]	@ (8015090 <_dtoa_r+0x2d8>)
 8014e26:	bfbc      	itt	lt
 8014e28:	2201      	movlt	r2, #1
 8014e2a:	6032      	strlt	r2, [r6, #0]
 8014e2c:	43bb      	bics	r3, r7
 8014e2e:	d112      	bne.n	8014e56 <_dtoa_r+0x9e>
 8014e30:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014e32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014e36:	6013      	str	r3, [r2, #0]
 8014e38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014e3c:	4323      	orrs	r3, r4
 8014e3e:	f000 855a 	beq.w	80158f6 <_dtoa_r+0xb3e>
 8014e42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014e44:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80150a4 <_dtoa_r+0x2ec>
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	f000 855c 	beq.w	8015906 <_dtoa_r+0xb4e>
 8014e4e:	f10a 0303 	add.w	r3, sl, #3
 8014e52:	f000 bd56 	b.w	8015902 <_dtoa_r+0xb4a>
 8014e56:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	ec51 0b17 	vmov	r0, r1, d7
 8014e60:	2300      	movs	r3, #0
 8014e62:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8014e66:	f7eb fe37 	bl	8000ad8 <__aeabi_dcmpeq>
 8014e6a:	4680      	mov	r8, r0
 8014e6c:	b158      	cbz	r0, 8014e86 <_dtoa_r+0xce>
 8014e6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014e70:	2301      	movs	r3, #1
 8014e72:	6013      	str	r3, [r2, #0]
 8014e74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014e76:	b113      	cbz	r3, 8014e7e <_dtoa_r+0xc6>
 8014e78:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014e7a:	4b86      	ldr	r3, [pc, #536]	@ (8015094 <_dtoa_r+0x2dc>)
 8014e7c:	6013      	str	r3, [r2, #0]
 8014e7e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80150a8 <_dtoa_r+0x2f0>
 8014e82:	f000 bd40 	b.w	8015906 <_dtoa_r+0xb4e>
 8014e86:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8014e8a:	aa14      	add	r2, sp, #80	@ 0x50
 8014e8c:	a915      	add	r1, sp, #84	@ 0x54
 8014e8e:	4648      	mov	r0, r9
 8014e90:	f001 f988 	bl	80161a4 <__d2b>
 8014e94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014e98:	9002      	str	r0, [sp, #8]
 8014e9a:	2e00      	cmp	r6, #0
 8014e9c:	d078      	beq.n	8014f90 <_dtoa_r+0x1d8>
 8014e9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014ea0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8014ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014ea8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014eac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014eb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014eb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014eb8:	4619      	mov	r1, r3
 8014eba:	2200      	movs	r2, #0
 8014ebc:	4b76      	ldr	r3, [pc, #472]	@ (8015098 <_dtoa_r+0x2e0>)
 8014ebe:	f7eb f9eb 	bl	8000298 <__aeabi_dsub>
 8014ec2:	a36b      	add	r3, pc, #428	@ (adr r3, 8015070 <_dtoa_r+0x2b8>)
 8014ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec8:	f7eb fb9e 	bl	8000608 <__aeabi_dmul>
 8014ecc:	a36a      	add	r3, pc, #424	@ (adr r3, 8015078 <_dtoa_r+0x2c0>)
 8014ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ed2:	f7eb f9e3 	bl	800029c <__adddf3>
 8014ed6:	4604      	mov	r4, r0
 8014ed8:	4630      	mov	r0, r6
 8014eda:	460d      	mov	r5, r1
 8014edc:	f7eb fb2a 	bl	8000534 <__aeabi_i2d>
 8014ee0:	a367      	add	r3, pc, #412	@ (adr r3, 8015080 <_dtoa_r+0x2c8>)
 8014ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee6:	f7eb fb8f 	bl	8000608 <__aeabi_dmul>
 8014eea:	4602      	mov	r2, r0
 8014eec:	460b      	mov	r3, r1
 8014eee:	4620      	mov	r0, r4
 8014ef0:	4629      	mov	r1, r5
 8014ef2:	f7eb f9d3 	bl	800029c <__adddf3>
 8014ef6:	4604      	mov	r4, r0
 8014ef8:	460d      	mov	r5, r1
 8014efa:	f7eb fe35 	bl	8000b68 <__aeabi_d2iz>
 8014efe:	2200      	movs	r2, #0
 8014f00:	4607      	mov	r7, r0
 8014f02:	2300      	movs	r3, #0
 8014f04:	4620      	mov	r0, r4
 8014f06:	4629      	mov	r1, r5
 8014f08:	f7eb fdf0 	bl	8000aec <__aeabi_dcmplt>
 8014f0c:	b140      	cbz	r0, 8014f20 <_dtoa_r+0x168>
 8014f0e:	4638      	mov	r0, r7
 8014f10:	f7eb fb10 	bl	8000534 <__aeabi_i2d>
 8014f14:	4622      	mov	r2, r4
 8014f16:	462b      	mov	r3, r5
 8014f18:	f7eb fdde 	bl	8000ad8 <__aeabi_dcmpeq>
 8014f1c:	b900      	cbnz	r0, 8014f20 <_dtoa_r+0x168>
 8014f1e:	3f01      	subs	r7, #1
 8014f20:	2f16      	cmp	r7, #22
 8014f22:	d852      	bhi.n	8014fca <_dtoa_r+0x212>
 8014f24:	4b5d      	ldr	r3, [pc, #372]	@ (801509c <_dtoa_r+0x2e4>)
 8014f26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014f32:	f7eb fddb 	bl	8000aec <__aeabi_dcmplt>
 8014f36:	2800      	cmp	r0, #0
 8014f38:	d049      	beq.n	8014fce <_dtoa_r+0x216>
 8014f3a:	3f01      	subs	r7, #1
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8014f40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014f42:	1b9b      	subs	r3, r3, r6
 8014f44:	1e5a      	subs	r2, r3, #1
 8014f46:	bf45      	ittet	mi
 8014f48:	f1c3 0301 	rsbmi	r3, r3, #1
 8014f4c:	9300      	strmi	r3, [sp, #0]
 8014f4e:	2300      	movpl	r3, #0
 8014f50:	2300      	movmi	r3, #0
 8014f52:	9206      	str	r2, [sp, #24]
 8014f54:	bf54      	ite	pl
 8014f56:	9300      	strpl	r3, [sp, #0]
 8014f58:	9306      	strmi	r3, [sp, #24]
 8014f5a:	2f00      	cmp	r7, #0
 8014f5c:	db39      	blt.n	8014fd2 <_dtoa_r+0x21a>
 8014f5e:	9b06      	ldr	r3, [sp, #24]
 8014f60:	970d      	str	r7, [sp, #52]	@ 0x34
 8014f62:	443b      	add	r3, r7
 8014f64:	9306      	str	r3, [sp, #24]
 8014f66:	2300      	movs	r3, #0
 8014f68:	9308      	str	r3, [sp, #32]
 8014f6a:	9b07      	ldr	r3, [sp, #28]
 8014f6c:	2b09      	cmp	r3, #9
 8014f6e:	d863      	bhi.n	8015038 <_dtoa_r+0x280>
 8014f70:	2b05      	cmp	r3, #5
 8014f72:	bfc4      	itt	gt
 8014f74:	3b04      	subgt	r3, #4
 8014f76:	9307      	strgt	r3, [sp, #28]
 8014f78:	9b07      	ldr	r3, [sp, #28]
 8014f7a:	f1a3 0302 	sub.w	r3, r3, #2
 8014f7e:	bfcc      	ite	gt
 8014f80:	2400      	movgt	r4, #0
 8014f82:	2401      	movle	r4, #1
 8014f84:	2b03      	cmp	r3, #3
 8014f86:	d863      	bhi.n	8015050 <_dtoa_r+0x298>
 8014f88:	e8df f003 	tbb	[pc, r3]
 8014f8c:	2b375452 	.word	0x2b375452
 8014f90:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8014f94:	441e      	add	r6, r3
 8014f96:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014f9a:	2b20      	cmp	r3, #32
 8014f9c:	bfc1      	itttt	gt
 8014f9e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014fa2:	409f      	lslgt	r7, r3
 8014fa4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014fa8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014fac:	bfd6      	itet	le
 8014fae:	f1c3 0320 	rsble	r3, r3, #32
 8014fb2:	ea47 0003 	orrgt.w	r0, r7, r3
 8014fb6:	fa04 f003 	lslle.w	r0, r4, r3
 8014fba:	f7eb faab 	bl	8000514 <__aeabi_ui2d>
 8014fbe:	2201      	movs	r2, #1
 8014fc0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014fc4:	3e01      	subs	r6, #1
 8014fc6:	9212      	str	r2, [sp, #72]	@ 0x48
 8014fc8:	e776      	b.n	8014eb8 <_dtoa_r+0x100>
 8014fca:	2301      	movs	r3, #1
 8014fcc:	e7b7      	b.n	8014f3e <_dtoa_r+0x186>
 8014fce:	9010      	str	r0, [sp, #64]	@ 0x40
 8014fd0:	e7b6      	b.n	8014f40 <_dtoa_r+0x188>
 8014fd2:	9b00      	ldr	r3, [sp, #0]
 8014fd4:	1bdb      	subs	r3, r3, r7
 8014fd6:	9300      	str	r3, [sp, #0]
 8014fd8:	427b      	negs	r3, r7
 8014fda:	9308      	str	r3, [sp, #32]
 8014fdc:	2300      	movs	r3, #0
 8014fde:	930d      	str	r3, [sp, #52]	@ 0x34
 8014fe0:	e7c3      	b.n	8014f6a <_dtoa_r+0x1b2>
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014fe6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fe8:	eb07 0b03 	add.w	fp, r7, r3
 8014fec:	f10b 0301 	add.w	r3, fp, #1
 8014ff0:	2b01      	cmp	r3, #1
 8014ff2:	9303      	str	r3, [sp, #12]
 8014ff4:	bfb8      	it	lt
 8014ff6:	2301      	movlt	r3, #1
 8014ff8:	e006      	b.n	8015008 <_dtoa_r+0x250>
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ffe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015000:	2b00      	cmp	r3, #0
 8015002:	dd28      	ble.n	8015056 <_dtoa_r+0x29e>
 8015004:	469b      	mov	fp, r3
 8015006:	9303      	str	r3, [sp, #12]
 8015008:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801500c:	2100      	movs	r1, #0
 801500e:	2204      	movs	r2, #4
 8015010:	f102 0514 	add.w	r5, r2, #20
 8015014:	429d      	cmp	r5, r3
 8015016:	d926      	bls.n	8015066 <_dtoa_r+0x2ae>
 8015018:	6041      	str	r1, [r0, #4]
 801501a:	4648      	mov	r0, r9
 801501c:	f000 fce6 	bl	80159ec <_Balloc>
 8015020:	4682      	mov	sl, r0
 8015022:	2800      	cmp	r0, #0
 8015024:	d142      	bne.n	80150ac <_dtoa_r+0x2f4>
 8015026:	4b1e      	ldr	r3, [pc, #120]	@ (80150a0 <_dtoa_r+0x2e8>)
 8015028:	4602      	mov	r2, r0
 801502a:	f240 11af 	movw	r1, #431	@ 0x1af
 801502e:	e6da      	b.n	8014de6 <_dtoa_r+0x2e>
 8015030:	2300      	movs	r3, #0
 8015032:	e7e3      	b.n	8014ffc <_dtoa_r+0x244>
 8015034:	2300      	movs	r3, #0
 8015036:	e7d5      	b.n	8014fe4 <_dtoa_r+0x22c>
 8015038:	2401      	movs	r4, #1
 801503a:	2300      	movs	r3, #0
 801503c:	9307      	str	r3, [sp, #28]
 801503e:	9409      	str	r4, [sp, #36]	@ 0x24
 8015040:	f04f 3bff 	mov.w	fp, #4294967295
 8015044:	2200      	movs	r2, #0
 8015046:	f8cd b00c 	str.w	fp, [sp, #12]
 801504a:	2312      	movs	r3, #18
 801504c:	920c      	str	r2, [sp, #48]	@ 0x30
 801504e:	e7db      	b.n	8015008 <_dtoa_r+0x250>
 8015050:	2301      	movs	r3, #1
 8015052:	9309      	str	r3, [sp, #36]	@ 0x24
 8015054:	e7f4      	b.n	8015040 <_dtoa_r+0x288>
 8015056:	f04f 0b01 	mov.w	fp, #1
 801505a:	f8cd b00c 	str.w	fp, [sp, #12]
 801505e:	465b      	mov	r3, fp
 8015060:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015064:	e7d0      	b.n	8015008 <_dtoa_r+0x250>
 8015066:	3101      	adds	r1, #1
 8015068:	0052      	lsls	r2, r2, #1
 801506a:	e7d1      	b.n	8015010 <_dtoa_r+0x258>
 801506c:	f3af 8000 	nop.w
 8015070:	636f4361 	.word	0x636f4361
 8015074:	3fd287a7 	.word	0x3fd287a7
 8015078:	8b60c8b3 	.word	0x8b60c8b3
 801507c:	3fc68a28 	.word	0x3fc68a28
 8015080:	509f79fb 	.word	0x509f79fb
 8015084:	3fd34413 	.word	0x3fd34413
 8015088:	0801a42a 	.word	0x0801a42a
 801508c:	0801a441 	.word	0x0801a441
 8015090:	7ff00000 	.word	0x7ff00000
 8015094:	0801a3f5 	.word	0x0801a3f5
 8015098:	3ff80000 	.word	0x3ff80000
 801509c:	0801a5f0 	.word	0x0801a5f0
 80150a0:	0801a499 	.word	0x0801a499
 80150a4:	0801a426 	.word	0x0801a426
 80150a8:	0801a3f4 	.word	0x0801a3f4
 80150ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80150b0:	6018      	str	r0, [r3, #0]
 80150b2:	9b03      	ldr	r3, [sp, #12]
 80150b4:	2b0e      	cmp	r3, #14
 80150b6:	f200 80a1 	bhi.w	80151fc <_dtoa_r+0x444>
 80150ba:	2c00      	cmp	r4, #0
 80150bc:	f000 809e 	beq.w	80151fc <_dtoa_r+0x444>
 80150c0:	2f00      	cmp	r7, #0
 80150c2:	dd33      	ble.n	801512c <_dtoa_r+0x374>
 80150c4:	4b9c      	ldr	r3, [pc, #624]	@ (8015338 <_dtoa_r+0x580>)
 80150c6:	f007 020f 	and.w	r2, r7, #15
 80150ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80150ce:	ed93 7b00 	vldr	d7, [r3]
 80150d2:	05f8      	lsls	r0, r7, #23
 80150d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80150d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80150dc:	d516      	bpl.n	801510c <_dtoa_r+0x354>
 80150de:	4b97      	ldr	r3, [pc, #604]	@ (801533c <_dtoa_r+0x584>)
 80150e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80150e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80150e8:	f7eb fbb8 	bl	800085c <__aeabi_ddiv>
 80150ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80150f0:	f004 040f 	and.w	r4, r4, #15
 80150f4:	2603      	movs	r6, #3
 80150f6:	4d91      	ldr	r5, [pc, #580]	@ (801533c <_dtoa_r+0x584>)
 80150f8:	b954      	cbnz	r4, 8015110 <_dtoa_r+0x358>
 80150fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80150fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015102:	f7eb fbab 	bl	800085c <__aeabi_ddiv>
 8015106:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801510a:	e028      	b.n	801515e <_dtoa_r+0x3a6>
 801510c:	2602      	movs	r6, #2
 801510e:	e7f2      	b.n	80150f6 <_dtoa_r+0x33e>
 8015110:	07e1      	lsls	r1, r4, #31
 8015112:	d508      	bpl.n	8015126 <_dtoa_r+0x36e>
 8015114:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015118:	e9d5 2300 	ldrd	r2, r3, [r5]
 801511c:	f7eb fa74 	bl	8000608 <__aeabi_dmul>
 8015120:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015124:	3601      	adds	r6, #1
 8015126:	1064      	asrs	r4, r4, #1
 8015128:	3508      	adds	r5, #8
 801512a:	e7e5      	b.n	80150f8 <_dtoa_r+0x340>
 801512c:	f000 80af 	beq.w	801528e <_dtoa_r+0x4d6>
 8015130:	427c      	negs	r4, r7
 8015132:	4b81      	ldr	r3, [pc, #516]	@ (8015338 <_dtoa_r+0x580>)
 8015134:	4d81      	ldr	r5, [pc, #516]	@ (801533c <_dtoa_r+0x584>)
 8015136:	f004 020f 	and.w	r2, r4, #15
 801513a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015142:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015146:	f7eb fa5f 	bl	8000608 <__aeabi_dmul>
 801514a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801514e:	1124      	asrs	r4, r4, #4
 8015150:	2300      	movs	r3, #0
 8015152:	2602      	movs	r6, #2
 8015154:	2c00      	cmp	r4, #0
 8015156:	f040 808f 	bne.w	8015278 <_dtoa_r+0x4c0>
 801515a:	2b00      	cmp	r3, #0
 801515c:	d1d3      	bne.n	8015106 <_dtoa_r+0x34e>
 801515e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015160:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015164:	2b00      	cmp	r3, #0
 8015166:	f000 8094 	beq.w	8015292 <_dtoa_r+0x4da>
 801516a:	4b75      	ldr	r3, [pc, #468]	@ (8015340 <_dtoa_r+0x588>)
 801516c:	2200      	movs	r2, #0
 801516e:	4620      	mov	r0, r4
 8015170:	4629      	mov	r1, r5
 8015172:	f7eb fcbb 	bl	8000aec <__aeabi_dcmplt>
 8015176:	2800      	cmp	r0, #0
 8015178:	f000 808b 	beq.w	8015292 <_dtoa_r+0x4da>
 801517c:	9b03      	ldr	r3, [sp, #12]
 801517e:	2b00      	cmp	r3, #0
 8015180:	f000 8087 	beq.w	8015292 <_dtoa_r+0x4da>
 8015184:	f1bb 0f00 	cmp.w	fp, #0
 8015188:	dd34      	ble.n	80151f4 <_dtoa_r+0x43c>
 801518a:	4620      	mov	r0, r4
 801518c:	4b6d      	ldr	r3, [pc, #436]	@ (8015344 <_dtoa_r+0x58c>)
 801518e:	2200      	movs	r2, #0
 8015190:	4629      	mov	r1, r5
 8015192:	f7eb fa39 	bl	8000608 <__aeabi_dmul>
 8015196:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801519a:	f107 38ff 	add.w	r8, r7, #4294967295
 801519e:	3601      	adds	r6, #1
 80151a0:	465c      	mov	r4, fp
 80151a2:	4630      	mov	r0, r6
 80151a4:	f7eb f9c6 	bl	8000534 <__aeabi_i2d>
 80151a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80151ac:	f7eb fa2c 	bl	8000608 <__aeabi_dmul>
 80151b0:	4b65      	ldr	r3, [pc, #404]	@ (8015348 <_dtoa_r+0x590>)
 80151b2:	2200      	movs	r2, #0
 80151b4:	f7eb f872 	bl	800029c <__adddf3>
 80151b8:	4605      	mov	r5, r0
 80151ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80151be:	2c00      	cmp	r4, #0
 80151c0:	d16a      	bne.n	8015298 <_dtoa_r+0x4e0>
 80151c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80151c6:	4b61      	ldr	r3, [pc, #388]	@ (801534c <_dtoa_r+0x594>)
 80151c8:	2200      	movs	r2, #0
 80151ca:	f7eb f865 	bl	8000298 <__aeabi_dsub>
 80151ce:	4602      	mov	r2, r0
 80151d0:	460b      	mov	r3, r1
 80151d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80151d6:	462a      	mov	r2, r5
 80151d8:	4633      	mov	r3, r6
 80151da:	f7eb fca5 	bl	8000b28 <__aeabi_dcmpgt>
 80151de:	2800      	cmp	r0, #0
 80151e0:	f040 8298 	bne.w	8015714 <_dtoa_r+0x95c>
 80151e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80151e8:	462a      	mov	r2, r5
 80151ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80151ee:	f7eb fc7d 	bl	8000aec <__aeabi_dcmplt>
 80151f2:	bb38      	cbnz	r0, 8015244 <_dtoa_r+0x48c>
 80151f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80151f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80151fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80151fe:	2b00      	cmp	r3, #0
 8015200:	f2c0 8157 	blt.w	80154b2 <_dtoa_r+0x6fa>
 8015204:	2f0e      	cmp	r7, #14
 8015206:	f300 8154 	bgt.w	80154b2 <_dtoa_r+0x6fa>
 801520a:	4b4b      	ldr	r3, [pc, #300]	@ (8015338 <_dtoa_r+0x580>)
 801520c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015210:	ed93 7b00 	vldr	d7, [r3]
 8015214:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015216:	2b00      	cmp	r3, #0
 8015218:	ed8d 7b00 	vstr	d7, [sp]
 801521c:	f280 80e5 	bge.w	80153ea <_dtoa_r+0x632>
 8015220:	9b03      	ldr	r3, [sp, #12]
 8015222:	2b00      	cmp	r3, #0
 8015224:	f300 80e1 	bgt.w	80153ea <_dtoa_r+0x632>
 8015228:	d10c      	bne.n	8015244 <_dtoa_r+0x48c>
 801522a:	4b48      	ldr	r3, [pc, #288]	@ (801534c <_dtoa_r+0x594>)
 801522c:	2200      	movs	r2, #0
 801522e:	ec51 0b17 	vmov	r0, r1, d7
 8015232:	f7eb f9e9 	bl	8000608 <__aeabi_dmul>
 8015236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801523a:	f7eb fc6b 	bl	8000b14 <__aeabi_dcmpge>
 801523e:	2800      	cmp	r0, #0
 8015240:	f000 8266 	beq.w	8015710 <_dtoa_r+0x958>
 8015244:	2400      	movs	r4, #0
 8015246:	4625      	mov	r5, r4
 8015248:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801524a:	4656      	mov	r6, sl
 801524c:	ea6f 0803 	mvn.w	r8, r3
 8015250:	2700      	movs	r7, #0
 8015252:	4621      	mov	r1, r4
 8015254:	4648      	mov	r0, r9
 8015256:	f000 fc09 	bl	8015a6c <_Bfree>
 801525a:	2d00      	cmp	r5, #0
 801525c:	f000 80bd 	beq.w	80153da <_dtoa_r+0x622>
 8015260:	b12f      	cbz	r7, 801526e <_dtoa_r+0x4b6>
 8015262:	42af      	cmp	r7, r5
 8015264:	d003      	beq.n	801526e <_dtoa_r+0x4b6>
 8015266:	4639      	mov	r1, r7
 8015268:	4648      	mov	r0, r9
 801526a:	f000 fbff 	bl	8015a6c <_Bfree>
 801526e:	4629      	mov	r1, r5
 8015270:	4648      	mov	r0, r9
 8015272:	f000 fbfb 	bl	8015a6c <_Bfree>
 8015276:	e0b0      	b.n	80153da <_dtoa_r+0x622>
 8015278:	07e2      	lsls	r2, r4, #31
 801527a:	d505      	bpl.n	8015288 <_dtoa_r+0x4d0>
 801527c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015280:	f7eb f9c2 	bl	8000608 <__aeabi_dmul>
 8015284:	3601      	adds	r6, #1
 8015286:	2301      	movs	r3, #1
 8015288:	1064      	asrs	r4, r4, #1
 801528a:	3508      	adds	r5, #8
 801528c:	e762      	b.n	8015154 <_dtoa_r+0x39c>
 801528e:	2602      	movs	r6, #2
 8015290:	e765      	b.n	801515e <_dtoa_r+0x3a6>
 8015292:	9c03      	ldr	r4, [sp, #12]
 8015294:	46b8      	mov	r8, r7
 8015296:	e784      	b.n	80151a2 <_dtoa_r+0x3ea>
 8015298:	4b27      	ldr	r3, [pc, #156]	@ (8015338 <_dtoa_r+0x580>)
 801529a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801529c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80152a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80152a4:	4454      	add	r4, sl
 80152a6:	2900      	cmp	r1, #0
 80152a8:	d054      	beq.n	8015354 <_dtoa_r+0x59c>
 80152aa:	4929      	ldr	r1, [pc, #164]	@ (8015350 <_dtoa_r+0x598>)
 80152ac:	2000      	movs	r0, #0
 80152ae:	f7eb fad5 	bl	800085c <__aeabi_ddiv>
 80152b2:	4633      	mov	r3, r6
 80152b4:	462a      	mov	r2, r5
 80152b6:	f7ea ffef 	bl	8000298 <__aeabi_dsub>
 80152ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80152be:	4656      	mov	r6, sl
 80152c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80152c4:	f7eb fc50 	bl	8000b68 <__aeabi_d2iz>
 80152c8:	4605      	mov	r5, r0
 80152ca:	f7eb f933 	bl	8000534 <__aeabi_i2d>
 80152ce:	4602      	mov	r2, r0
 80152d0:	460b      	mov	r3, r1
 80152d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80152d6:	f7ea ffdf 	bl	8000298 <__aeabi_dsub>
 80152da:	3530      	adds	r5, #48	@ 0x30
 80152dc:	4602      	mov	r2, r0
 80152de:	460b      	mov	r3, r1
 80152e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80152e4:	f806 5b01 	strb.w	r5, [r6], #1
 80152e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80152ec:	f7eb fbfe 	bl	8000aec <__aeabi_dcmplt>
 80152f0:	2800      	cmp	r0, #0
 80152f2:	d172      	bne.n	80153da <_dtoa_r+0x622>
 80152f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80152f8:	4911      	ldr	r1, [pc, #68]	@ (8015340 <_dtoa_r+0x588>)
 80152fa:	2000      	movs	r0, #0
 80152fc:	f7ea ffcc 	bl	8000298 <__aeabi_dsub>
 8015300:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015304:	f7eb fbf2 	bl	8000aec <__aeabi_dcmplt>
 8015308:	2800      	cmp	r0, #0
 801530a:	f040 80b4 	bne.w	8015476 <_dtoa_r+0x6be>
 801530e:	42a6      	cmp	r6, r4
 8015310:	f43f af70 	beq.w	80151f4 <_dtoa_r+0x43c>
 8015314:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015318:	4b0a      	ldr	r3, [pc, #40]	@ (8015344 <_dtoa_r+0x58c>)
 801531a:	2200      	movs	r2, #0
 801531c:	f7eb f974 	bl	8000608 <__aeabi_dmul>
 8015320:	4b08      	ldr	r3, [pc, #32]	@ (8015344 <_dtoa_r+0x58c>)
 8015322:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015326:	2200      	movs	r2, #0
 8015328:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801532c:	f7eb f96c 	bl	8000608 <__aeabi_dmul>
 8015330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015334:	e7c4      	b.n	80152c0 <_dtoa_r+0x508>
 8015336:	bf00      	nop
 8015338:	0801a5f0 	.word	0x0801a5f0
 801533c:	0801a5c8 	.word	0x0801a5c8
 8015340:	3ff00000 	.word	0x3ff00000
 8015344:	40240000 	.word	0x40240000
 8015348:	401c0000 	.word	0x401c0000
 801534c:	40140000 	.word	0x40140000
 8015350:	3fe00000 	.word	0x3fe00000
 8015354:	4631      	mov	r1, r6
 8015356:	4628      	mov	r0, r5
 8015358:	f7eb f956 	bl	8000608 <__aeabi_dmul>
 801535c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015360:	9413      	str	r4, [sp, #76]	@ 0x4c
 8015362:	4656      	mov	r6, sl
 8015364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015368:	f7eb fbfe 	bl	8000b68 <__aeabi_d2iz>
 801536c:	4605      	mov	r5, r0
 801536e:	f7eb f8e1 	bl	8000534 <__aeabi_i2d>
 8015372:	4602      	mov	r2, r0
 8015374:	460b      	mov	r3, r1
 8015376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801537a:	f7ea ff8d 	bl	8000298 <__aeabi_dsub>
 801537e:	3530      	adds	r5, #48	@ 0x30
 8015380:	f806 5b01 	strb.w	r5, [r6], #1
 8015384:	4602      	mov	r2, r0
 8015386:	460b      	mov	r3, r1
 8015388:	42a6      	cmp	r6, r4
 801538a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801538e:	f04f 0200 	mov.w	r2, #0
 8015392:	d124      	bne.n	80153de <_dtoa_r+0x626>
 8015394:	4baf      	ldr	r3, [pc, #700]	@ (8015654 <_dtoa_r+0x89c>)
 8015396:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801539a:	f7ea ff7f 	bl	800029c <__adddf3>
 801539e:	4602      	mov	r2, r0
 80153a0:	460b      	mov	r3, r1
 80153a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80153a6:	f7eb fbbf 	bl	8000b28 <__aeabi_dcmpgt>
 80153aa:	2800      	cmp	r0, #0
 80153ac:	d163      	bne.n	8015476 <_dtoa_r+0x6be>
 80153ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80153b2:	49a8      	ldr	r1, [pc, #672]	@ (8015654 <_dtoa_r+0x89c>)
 80153b4:	2000      	movs	r0, #0
 80153b6:	f7ea ff6f 	bl	8000298 <__aeabi_dsub>
 80153ba:	4602      	mov	r2, r0
 80153bc:	460b      	mov	r3, r1
 80153be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80153c2:	f7eb fb93 	bl	8000aec <__aeabi_dcmplt>
 80153c6:	2800      	cmp	r0, #0
 80153c8:	f43f af14 	beq.w	80151f4 <_dtoa_r+0x43c>
 80153cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80153ce:	1e73      	subs	r3, r6, #1
 80153d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80153d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80153d6:	2b30      	cmp	r3, #48	@ 0x30
 80153d8:	d0f8      	beq.n	80153cc <_dtoa_r+0x614>
 80153da:	4647      	mov	r7, r8
 80153dc:	e03b      	b.n	8015456 <_dtoa_r+0x69e>
 80153de:	4b9e      	ldr	r3, [pc, #632]	@ (8015658 <_dtoa_r+0x8a0>)
 80153e0:	f7eb f912 	bl	8000608 <__aeabi_dmul>
 80153e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80153e8:	e7bc      	b.n	8015364 <_dtoa_r+0x5ac>
 80153ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80153ee:	4656      	mov	r6, sl
 80153f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153f4:	4620      	mov	r0, r4
 80153f6:	4629      	mov	r1, r5
 80153f8:	f7eb fa30 	bl	800085c <__aeabi_ddiv>
 80153fc:	f7eb fbb4 	bl	8000b68 <__aeabi_d2iz>
 8015400:	4680      	mov	r8, r0
 8015402:	f7eb f897 	bl	8000534 <__aeabi_i2d>
 8015406:	e9dd 2300 	ldrd	r2, r3, [sp]
 801540a:	f7eb f8fd 	bl	8000608 <__aeabi_dmul>
 801540e:	4602      	mov	r2, r0
 8015410:	460b      	mov	r3, r1
 8015412:	4620      	mov	r0, r4
 8015414:	4629      	mov	r1, r5
 8015416:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801541a:	f7ea ff3d 	bl	8000298 <__aeabi_dsub>
 801541e:	f806 4b01 	strb.w	r4, [r6], #1
 8015422:	9d03      	ldr	r5, [sp, #12]
 8015424:	eba6 040a 	sub.w	r4, r6, sl
 8015428:	42a5      	cmp	r5, r4
 801542a:	4602      	mov	r2, r0
 801542c:	460b      	mov	r3, r1
 801542e:	d133      	bne.n	8015498 <_dtoa_r+0x6e0>
 8015430:	f7ea ff34 	bl	800029c <__adddf3>
 8015434:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015438:	4604      	mov	r4, r0
 801543a:	460d      	mov	r5, r1
 801543c:	f7eb fb74 	bl	8000b28 <__aeabi_dcmpgt>
 8015440:	b9c0      	cbnz	r0, 8015474 <_dtoa_r+0x6bc>
 8015442:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015446:	4620      	mov	r0, r4
 8015448:	4629      	mov	r1, r5
 801544a:	f7eb fb45 	bl	8000ad8 <__aeabi_dcmpeq>
 801544e:	b110      	cbz	r0, 8015456 <_dtoa_r+0x69e>
 8015450:	f018 0f01 	tst.w	r8, #1
 8015454:	d10e      	bne.n	8015474 <_dtoa_r+0x6bc>
 8015456:	9902      	ldr	r1, [sp, #8]
 8015458:	4648      	mov	r0, r9
 801545a:	f000 fb07 	bl	8015a6c <_Bfree>
 801545e:	2300      	movs	r3, #0
 8015460:	7033      	strb	r3, [r6, #0]
 8015462:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015464:	3701      	adds	r7, #1
 8015466:	601f      	str	r7, [r3, #0]
 8015468:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801546a:	2b00      	cmp	r3, #0
 801546c:	f000 824b 	beq.w	8015906 <_dtoa_r+0xb4e>
 8015470:	601e      	str	r6, [r3, #0]
 8015472:	e248      	b.n	8015906 <_dtoa_r+0xb4e>
 8015474:	46b8      	mov	r8, r7
 8015476:	4633      	mov	r3, r6
 8015478:	461e      	mov	r6, r3
 801547a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801547e:	2a39      	cmp	r2, #57	@ 0x39
 8015480:	d106      	bne.n	8015490 <_dtoa_r+0x6d8>
 8015482:	459a      	cmp	sl, r3
 8015484:	d1f8      	bne.n	8015478 <_dtoa_r+0x6c0>
 8015486:	2230      	movs	r2, #48	@ 0x30
 8015488:	f108 0801 	add.w	r8, r8, #1
 801548c:	f88a 2000 	strb.w	r2, [sl]
 8015490:	781a      	ldrb	r2, [r3, #0]
 8015492:	3201      	adds	r2, #1
 8015494:	701a      	strb	r2, [r3, #0]
 8015496:	e7a0      	b.n	80153da <_dtoa_r+0x622>
 8015498:	4b6f      	ldr	r3, [pc, #444]	@ (8015658 <_dtoa_r+0x8a0>)
 801549a:	2200      	movs	r2, #0
 801549c:	f7eb f8b4 	bl	8000608 <__aeabi_dmul>
 80154a0:	2200      	movs	r2, #0
 80154a2:	2300      	movs	r3, #0
 80154a4:	4604      	mov	r4, r0
 80154a6:	460d      	mov	r5, r1
 80154a8:	f7eb fb16 	bl	8000ad8 <__aeabi_dcmpeq>
 80154ac:	2800      	cmp	r0, #0
 80154ae:	d09f      	beq.n	80153f0 <_dtoa_r+0x638>
 80154b0:	e7d1      	b.n	8015456 <_dtoa_r+0x69e>
 80154b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80154b4:	2a00      	cmp	r2, #0
 80154b6:	f000 80ea 	beq.w	801568e <_dtoa_r+0x8d6>
 80154ba:	9a07      	ldr	r2, [sp, #28]
 80154bc:	2a01      	cmp	r2, #1
 80154be:	f300 80cd 	bgt.w	801565c <_dtoa_r+0x8a4>
 80154c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80154c4:	2a00      	cmp	r2, #0
 80154c6:	f000 80c1 	beq.w	801564c <_dtoa_r+0x894>
 80154ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80154ce:	9c08      	ldr	r4, [sp, #32]
 80154d0:	9e00      	ldr	r6, [sp, #0]
 80154d2:	9a00      	ldr	r2, [sp, #0]
 80154d4:	441a      	add	r2, r3
 80154d6:	9200      	str	r2, [sp, #0]
 80154d8:	9a06      	ldr	r2, [sp, #24]
 80154da:	2101      	movs	r1, #1
 80154dc:	441a      	add	r2, r3
 80154de:	4648      	mov	r0, r9
 80154e0:	9206      	str	r2, [sp, #24]
 80154e2:	f000 fbc1 	bl	8015c68 <__i2b>
 80154e6:	4605      	mov	r5, r0
 80154e8:	b166      	cbz	r6, 8015504 <_dtoa_r+0x74c>
 80154ea:	9b06      	ldr	r3, [sp, #24]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	dd09      	ble.n	8015504 <_dtoa_r+0x74c>
 80154f0:	42b3      	cmp	r3, r6
 80154f2:	9a00      	ldr	r2, [sp, #0]
 80154f4:	bfa8      	it	ge
 80154f6:	4633      	movge	r3, r6
 80154f8:	1ad2      	subs	r2, r2, r3
 80154fa:	9200      	str	r2, [sp, #0]
 80154fc:	9a06      	ldr	r2, [sp, #24]
 80154fe:	1af6      	subs	r6, r6, r3
 8015500:	1ad3      	subs	r3, r2, r3
 8015502:	9306      	str	r3, [sp, #24]
 8015504:	9b08      	ldr	r3, [sp, #32]
 8015506:	b30b      	cbz	r3, 801554c <_dtoa_r+0x794>
 8015508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801550a:	2b00      	cmp	r3, #0
 801550c:	f000 80c6 	beq.w	801569c <_dtoa_r+0x8e4>
 8015510:	2c00      	cmp	r4, #0
 8015512:	f000 80c0 	beq.w	8015696 <_dtoa_r+0x8de>
 8015516:	4629      	mov	r1, r5
 8015518:	4622      	mov	r2, r4
 801551a:	4648      	mov	r0, r9
 801551c:	f000 fc5c 	bl	8015dd8 <__pow5mult>
 8015520:	9a02      	ldr	r2, [sp, #8]
 8015522:	4601      	mov	r1, r0
 8015524:	4605      	mov	r5, r0
 8015526:	4648      	mov	r0, r9
 8015528:	f000 fbb4 	bl	8015c94 <__multiply>
 801552c:	9902      	ldr	r1, [sp, #8]
 801552e:	4680      	mov	r8, r0
 8015530:	4648      	mov	r0, r9
 8015532:	f000 fa9b 	bl	8015a6c <_Bfree>
 8015536:	9b08      	ldr	r3, [sp, #32]
 8015538:	1b1b      	subs	r3, r3, r4
 801553a:	9308      	str	r3, [sp, #32]
 801553c:	f000 80b1 	beq.w	80156a2 <_dtoa_r+0x8ea>
 8015540:	9a08      	ldr	r2, [sp, #32]
 8015542:	4641      	mov	r1, r8
 8015544:	4648      	mov	r0, r9
 8015546:	f000 fc47 	bl	8015dd8 <__pow5mult>
 801554a:	9002      	str	r0, [sp, #8]
 801554c:	2101      	movs	r1, #1
 801554e:	4648      	mov	r0, r9
 8015550:	f000 fb8a 	bl	8015c68 <__i2b>
 8015554:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015556:	4604      	mov	r4, r0
 8015558:	2b00      	cmp	r3, #0
 801555a:	f000 81d8 	beq.w	801590e <_dtoa_r+0xb56>
 801555e:	461a      	mov	r2, r3
 8015560:	4601      	mov	r1, r0
 8015562:	4648      	mov	r0, r9
 8015564:	f000 fc38 	bl	8015dd8 <__pow5mult>
 8015568:	9b07      	ldr	r3, [sp, #28]
 801556a:	2b01      	cmp	r3, #1
 801556c:	4604      	mov	r4, r0
 801556e:	f300 809f 	bgt.w	80156b0 <_dtoa_r+0x8f8>
 8015572:	9b04      	ldr	r3, [sp, #16]
 8015574:	2b00      	cmp	r3, #0
 8015576:	f040 8097 	bne.w	80156a8 <_dtoa_r+0x8f0>
 801557a:	9b05      	ldr	r3, [sp, #20]
 801557c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015580:	2b00      	cmp	r3, #0
 8015582:	f040 8093 	bne.w	80156ac <_dtoa_r+0x8f4>
 8015586:	9b05      	ldr	r3, [sp, #20]
 8015588:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801558c:	0d1b      	lsrs	r3, r3, #20
 801558e:	051b      	lsls	r3, r3, #20
 8015590:	b133      	cbz	r3, 80155a0 <_dtoa_r+0x7e8>
 8015592:	9b00      	ldr	r3, [sp, #0]
 8015594:	3301      	adds	r3, #1
 8015596:	9300      	str	r3, [sp, #0]
 8015598:	9b06      	ldr	r3, [sp, #24]
 801559a:	3301      	adds	r3, #1
 801559c:	9306      	str	r3, [sp, #24]
 801559e:	2301      	movs	r3, #1
 80155a0:	9308      	str	r3, [sp, #32]
 80155a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	f000 81b8 	beq.w	801591a <_dtoa_r+0xb62>
 80155aa:	6923      	ldr	r3, [r4, #16]
 80155ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80155b0:	6918      	ldr	r0, [r3, #16]
 80155b2:	f000 fb0d 	bl	8015bd0 <__hi0bits>
 80155b6:	f1c0 0020 	rsb	r0, r0, #32
 80155ba:	9b06      	ldr	r3, [sp, #24]
 80155bc:	4418      	add	r0, r3
 80155be:	f010 001f 	ands.w	r0, r0, #31
 80155c2:	f000 8082 	beq.w	80156ca <_dtoa_r+0x912>
 80155c6:	f1c0 0320 	rsb	r3, r0, #32
 80155ca:	2b04      	cmp	r3, #4
 80155cc:	dd73      	ble.n	80156b6 <_dtoa_r+0x8fe>
 80155ce:	9b00      	ldr	r3, [sp, #0]
 80155d0:	f1c0 001c 	rsb	r0, r0, #28
 80155d4:	4403      	add	r3, r0
 80155d6:	9300      	str	r3, [sp, #0]
 80155d8:	9b06      	ldr	r3, [sp, #24]
 80155da:	4403      	add	r3, r0
 80155dc:	4406      	add	r6, r0
 80155de:	9306      	str	r3, [sp, #24]
 80155e0:	9b00      	ldr	r3, [sp, #0]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	dd05      	ble.n	80155f2 <_dtoa_r+0x83a>
 80155e6:	9902      	ldr	r1, [sp, #8]
 80155e8:	461a      	mov	r2, r3
 80155ea:	4648      	mov	r0, r9
 80155ec:	f000 fc4e 	bl	8015e8c <__lshift>
 80155f0:	9002      	str	r0, [sp, #8]
 80155f2:	9b06      	ldr	r3, [sp, #24]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	dd05      	ble.n	8015604 <_dtoa_r+0x84c>
 80155f8:	4621      	mov	r1, r4
 80155fa:	461a      	mov	r2, r3
 80155fc:	4648      	mov	r0, r9
 80155fe:	f000 fc45 	bl	8015e8c <__lshift>
 8015602:	4604      	mov	r4, r0
 8015604:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015606:	2b00      	cmp	r3, #0
 8015608:	d061      	beq.n	80156ce <_dtoa_r+0x916>
 801560a:	9802      	ldr	r0, [sp, #8]
 801560c:	4621      	mov	r1, r4
 801560e:	f000 fca9 	bl	8015f64 <__mcmp>
 8015612:	2800      	cmp	r0, #0
 8015614:	da5b      	bge.n	80156ce <_dtoa_r+0x916>
 8015616:	2300      	movs	r3, #0
 8015618:	9902      	ldr	r1, [sp, #8]
 801561a:	220a      	movs	r2, #10
 801561c:	4648      	mov	r0, r9
 801561e:	f000 fa47 	bl	8015ab0 <__multadd>
 8015622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015624:	9002      	str	r0, [sp, #8]
 8015626:	f107 38ff 	add.w	r8, r7, #4294967295
 801562a:	2b00      	cmp	r3, #0
 801562c:	f000 8177 	beq.w	801591e <_dtoa_r+0xb66>
 8015630:	4629      	mov	r1, r5
 8015632:	2300      	movs	r3, #0
 8015634:	220a      	movs	r2, #10
 8015636:	4648      	mov	r0, r9
 8015638:	f000 fa3a 	bl	8015ab0 <__multadd>
 801563c:	f1bb 0f00 	cmp.w	fp, #0
 8015640:	4605      	mov	r5, r0
 8015642:	dc6f      	bgt.n	8015724 <_dtoa_r+0x96c>
 8015644:	9b07      	ldr	r3, [sp, #28]
 8015646:	2b02      	cmp	r3, #2
 8015648:	dc49      	bgt.n	80156de <_dtoa_r+0x926>
 801564a:	e06b      	b.n	8015724 <_dtoa_r+0x96c>
 801564c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801564e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015652:	e73c      	b.n	80154ce <_dtoa_r+0x716>
 8015654:	3fe00000 	.word	0x3fe00000
 8015658:	40240000 	.word	0x40240000
 801565c:	9b03      	ldr	r3, [sp, #12]
 801565e:	1e5c      	subs	r4, r3, #1
 8015660:	9b08      	ldr	r3, [sp, #32]
 8015662:	42a3      	cmp	r3, r4
 8015664:	db09      	blt.n	801567a <_dtoa_r+0x8c2>
 8015666:	1b1c      	subs	r4, r3, r4
 8015668:	9b03      	ldr	r3, [sp, #12]
 801566a:	2b00      	cmp	r3, #0
 801566c:	f6bf af30 	bge.w	80154d0 <_dtoa_r+0x718>
 8015670:	9b00      	ldr	r3, [sp, #0]
 8015672:	9a03      	ldr	r2, [sp, #12]
 8015674:	1a9e      	subs	r6, r3, r2
 8015676:	2300      	movs	r3, #0
 8015678:	e72b      	b.n	80154d2 <_dtoa_r+0x71a>
 801567a:	9b08      	ldr	r3, [sp, #32]
 801567c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801567e:	9408      	str	r4, [sp, #32]
 8015680:	1ae3      	subs	r3, r4, r3
 8015682:	441a      	add	r2, r3
 8015684:	9e00      	ldr	r6, [sp, #0]
 8015686:	9b03      	ldr	r3, [sp, #12]
 8015688:	920d      	str	r2, [sp, #52]	@ 0x34
 801568a:	2400      	movs	r4, #0
 801568c:	e721      	b.n	80154d2 <_dtoa_r+0x71a>
 801568e:	9c08      	ldr	r4, [sp, #32]
 8015690:	9e00      	ldr	r6, [sp, #0]
 8015692:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8015694:	e728      	b.n	80154e8 <_dtoa_r+0x730>
 8015696:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801569a:	e751      	b.n	8015540 <_dtoa_r+0x788>
 801569c:	9a08      	ldr	r2, [sp, #32]
 801569e:	9902      	ldr	r1, [sp, #8]
 80156a0:	e750      	b.n	8015544 <_dtoa_r+0x78c>
 80156a2:	f8cd 8008 	str.w	r8, [sp, #8]
 80156a6:	e751      	b.n	801554c <_dtoa_r+0x794>
 80156a8:	2300      	movs	r3, #0
 80156aa:	e779      	b.n	80155a0 <_dtoa_r+0x7e8>
 80156ac:	9b04      	ldr	r3, [sp, #16]
 80156ae:	e777      	b.n	80155a0 <_dtoa_r+0x7e8>
 80156b0:	2300      	movs	r3, #0
 80156b2:	9308      	str	r3, [sp, #32]
 80156b4:	e779      	b.n	80155aa <_dtoa_r+0x7f2>
 80156b6:	d093      	beq.n	80155e0 <_dtoa_r+0x828>
 80156b8:	9a00      	ldr	r2, [sp, #0]
 80156ba:	331c      	adds	r3, #28
 80156bc:	441a      	add	r2, r3
 80156be:	9200      	str	r2, [sp, #0]
 80156c0:	9a06      	ldr	r2, [sp, #24]
 80156c2:	441a      	add	r2, r3
 80156c4:	441e      	add	r6, r3
 80156c6:	9206      	str	r2, [sp, #24]
 80156c8:	e78a      	b.n	80155e0 <_dtoa_r+0x828>
 80156ca:	4603      	mov	r3, r0
 80156cc:	e7f4      	b.n	80156b8 <_dtoa_r+0x900>
 80156ce:	9b03      	ldr	r3, [sp, #12]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	46b8      	mov	r8, r7
 80156d4:	dc20      	bgt.n	8015718 <_dtoa_r+0x960>
 80156d6:	469b      	mov	fp, r3
 80156d8:	9b07      	ldr	r3, [sp, #28]
 80156da:	2b02      	cmp	r3, #2
 80156dc:	dd1e      	ble.n	801571c <_dtoa_r+0x964>
 80156de:	f1bb 0f00 	cmp.w	fp, #0
 80156e2:	f47f adb1 	bne.w	8015248 <_dtoa_r+0x490>
 80156e6:	4621      	mov	r1, r4
 80156e8:	465b      	mov	r3, fp
 80156ea:	2205      	movs	r2, #5
 80156ec:	4648      	mov	r0, r9
 80156ee:	f000 f9df 	bl	8015ab0 <__multadd>
 80156f2:	4601      	mov	r1, r0
 80156f4:	4604      	mov	r4, r0
 80156f6:	9802      	ldr	r0, [sp, #8]
 80156f8:	f000 fc34 	bl	8015f64 <__mcmp>
 80156fc:	2800      	cmp	r0, #0
 80156fe:	f77f ada3 	ble.w	8015248 <_dtoa_r+0x490>
 8015702:	4656      	mov	r6, sl
 8015704:	2331      	movs	r3, #49	@ 0x31
 8015706:	f806 3b01 	strb.w	r3, [r6], #1
 801570a:	f108 0801 	add.w	r8, r8, #1
 801570e:	e59f      	b.n	8015250 <_dtoa_r+0x498>
 8015710:	9c03      	ldr	r4, [sp, #12]
 8015712:	46b8      	mov	r8, r7
 8015714:	4625      	mov	r5, r4
 8015716:	e7f4      	b.n	8015702 <_dtoa_r+0x94a>
 8015718:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801571c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801571e:	2b00      	cmp	r3, #0
 8015720:	f000 8101 	beq.w	8015926 <_dtoa_r+0xb6e>
 8015724:	2e00      	cmp	r6, #0
 8015726:	dd05      	ble.n	8015734 <_dtoa_r+0x97c>
 8015728:	4629      	mov	r1, r5
 801572a:	4632      	mov	r2, r6
 801572c:	4648      	mov	r0, r9
 801572e:	f000 fbad 	bl	8015e8c <__lshift>
 8015732:	4605      	mov	r5, r0
 8015734:	9b08      	ldr	r3, [sp, #32]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d05c      	beq.n	80157f4 <_dtoa_r+0xa3c>
 801573a:	6869      	ldr	r1, [r5, #4]
 801573c:	4648      	mov	r0, r9
 801573e:	f000 f955 	bl	80159ec <_Balloc>
 8015742:	4606      	mov	r6, r0
 8015744:	b928      	cbnz	r0, 8015752 <_dtoa_r+0x99a>
 8015746:	4b82      	ldr	r3, [pc, #520]	@ (8015950 <_dtoa_r+0xb98>)
 8015748:	4602      	mov	r2, r0
 801574a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801574e:	f7ff bb4a 	b.w	8014de6 <_dtoa_r+0x2e>
 8015752:	692a      	ldr	r2, [r5, #16]
 8015754:	3202      	adds	r2, #2
 8015756:	0092      	lsls	r2, r2, #2
 8015758:	f105 010c 	add.w	r1, r5, #12
 801575c:	300c      	adds	r0, #12
 801575e:	f002 f86b 	bl	8017838 <memcpy>
 8015762:	2201      	movs	r2, #1
 8015764:	4631      	mov	r1, r6
 8015766:	4648      	mov	r0, r9
 8015768:	f000 fb90 	bl	8015e8c <__lshift>
 801576c:	f10a 0301 	add.w	r3, sl, #1
 8015770:	9300      	str	r3, [sp, #0]
 8015772:	eb0a 030b 	add.w	r3, sl, fp
 8015776:	9308      	str	r3, [sp, #32]
 8015778:	9b04      	ldr	r3, [sp, #16]
 801577a:	f003 0301 	and.w	r3, r3, #1
 801577e:	462f      	mov	r7, r5
 8015780:	9306      	str	r3, [sp, #24]
 8015782:	4605      	mov	r5, r0
 8015784:	9b00      	ldr	r3, [sp, #0]
 8015786:	9802      	ldr	r0, [sp, #8]
 8015788:	4621      	mov	r1, r4
 801578a:	f103 3bff 	add.w	fp, r3, #4294967295
 801578e:	f7ff fa8b 	bl	8014ca8 <quorem>
 8015792:	4603      	mov	r3, r0
 8015794:	3330      	adds	r3, #48	@ 0x30
 8015796:	9003      	str	r0, [sp, #12]
 8015798:	4639      	mov	r1, r7
 801579a:	9802      	ldr	r0, [sp, #8]
 801579c:	9309      	str	r3, [sp, #36]	@ 0x24
 801579e:	f000 fbe1 	bl	8015f64 <__mcmp>
 80157a2:	462a      	mov	r2, r5
 80157a4:	9004      	str	r0, [sp, #16]
 80157a6:	4621      	mov	r1, r4
 80157a8:	4648      	mov	r0, r9
 80157aa:	f000 fbf7 	bl	8015f9c <__mdiff>
 80157ae:	68c2      	ldr	r2, [r0, #12]
 80157b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157b2:	4606      	mov	r6, r0
 80157b4:	bb02      	cbnz	r2, 80157f8 <_dtoa_r+0xa40>
 80157b6:	4601      	mov	r1, r0
 80157b8:	9802      	ldr	r0, [sp, #8]
 80157ba:	f000 fbd3 	bl	8015f64 <__mcmp>
 80157be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157c0:	4602      	mov	r2, r0
 80157c2:	4631      	mov	r1, r6
 80157c4:	4648      	mov	r0, r9
 80157c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80157c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80157ca:	f000 f94f 	bl	8015a6c <_Bfree>
 80157ce:	9b07      	ldr	r3, [sp, #28]
 80157d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80157d2:	9e00      	ldr	r6, [sp, #0]
 80157d4:	ea42 0103 	orr.w	r1, r2, r3
 80157d8:	9b06      	ldr	r3, [sp, #24]
 80157da:	4319      	orrs	r1, r3
 80157dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157de:	d10d      	bne.n	80157fc <_dtoa_r+0xa44>
 80157e0:	2b39      	cmp	r3, #57	@ 0x39
 80157e2:	d027      	beq.n	8015834 <_dtoa_r+0xa7c>
 80157e4:	9a04      	ldr	r2, [sp, #16]
 80157e6:	2a00      	cmp	r2, #0
 80157e8:	dd01      	ble.n	80157ee <_dtoa_r+0xa36>
 80157ea:	9b03      	ldr	r3, [sp, #12]
 80157ec:	3331      	adds	r3, #49	@ 0x31
 80157ee:	f88b 3000 	strb.w	r3, [fp]
 80157f2:	e52e      	b.n	8015252 <_dtoa_r+0x49a>
 80157f4:	4628      	mov	r0, r5
 80157f6:	e7b9      	b.n	801576c <_dtoa_r+0x9b4>
 80157f8:	2201      	movs	r2, #1
 80157fa:	e7e2      	b.n	80157c2 <_dtoa_r+0xa0a>
 80157fc:	9904      	ldr	r1, [sp, #16]
 80157fe:	2900      	cmp	r1, #0
 8015800:	db04      	blt.n	801580c <_dtoa_r+0xa54>
 8015802:	9807      	ldr	r0, [sp, #28]
 8015804:	4301      	orrs	r1, r0
 8015806:	9806      	ldr	r0, [sp, #24]
 8015808:	4301      	orrs	r1, r0
 801580a:	d120      	bne.n	801584e <_dtoa_r+0xa96>
 801580c:	2a00      	cmp	r2, #0
 801580e:	ddee      	ble.n	80157ee <_dtoa_r+0xa36>
 8015810:	9902      	ldr	r1, [sp, #8]
 8015812:	9300      	str	r3, [sp, #0]
 8015814:	2201      	movs	r2, #1
 8015816:	4648      	mov	r0, r9
 8015818:	f000 fb38 	bl	8015e8c <__lshift>
 801581c:	4621      	mov	r1, r4
 801581e:	9002      	str	r0, [sp, #8]
 8015820:	f000 fba0 	bl	8015f64 <__mcmp>
 8015824:	2800      	cmp	r0, #0
 8015826:	9b00      	ldr	r3, [sp, #0]
 8015828:	dc02      	bgt.n	8015830 <_dtoa_r+0xa78>
 801582a:	d1e0      	bne.n	80157ee <_dtoa_r+0xa36>
 801582c:	07da      	lsls	r2, r3, #31
 801582e:	d5de      	bpl.n	80157ee <_dtoa_r+0xa36>
 8015830:	2b39      	cmp	r3, #57	@ 0x39
 8015832:	d1da      	bne.n	80157ea <_dtoa_r+0xa32>
 8015834:	2339      	movs	r3, #57	@ 0x39
 8015836:	f88b 3000 	strb.w	r3, [fp]
 801583a:	4633      	mov	r3, r6
 801583c:	461e      	mov	r6, r3
 801583e:	3b01      	subs	r3, #1
 8015840:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015844:	2a39      	cmp	r2, #57	@ 0x39
 8015846:	d04e      	beq.n	80158e6 <_dtoa_r+0xb2e>
 8015848:	3201      	adds	r2, #1
 801584a:	701a      	strb	r2, [r3, #0]
 801584c:	e501      	b.n	8015252 <_dtoa_r+0x49a>
 801584e:	2a00      	cmp	r2, #0
 8015850:	dd03      	ble.n	801585a <_dtoa_r+0xaa2>
 8015852:	2b39      	cmp	r3, #57	@ 0x39
 8015854:	d0ee      	beq.n	8015834 <_dtoa_r+0xa7c>
 8015856:	3301      	adds	r3, #1
 8015858:	e7c9      	b.n	80157ee <_dtoa_r+0xa36>
 801585a:	9a00      	ldr	r2, [sp, #0]
 801585c:	9908      	ldr	r1, [sp, #32]
 801585e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015862:	428a      	cmp	r2, r1
 8015864:	d028      	beq.n	80158b8 <_dtoa_r+0xb00>
 8015866:	9902      	ldr	r1, [sp, #8]
 8015868:	2300      	movs	r3, #0
 801586a:	220a      	movs	r2, #10
 801586c:	4648      	mov	r0, r9
 801586e:	f000 f91f 	bl	8015ab0 <__multadd>
 8015872:	42af      	cmp	r7, r5
 8015874:	9002      	str	r0, [sp, #8]
 8015876:	f04f 0300 	mov.w	r3, #0
 801587a:	f04f 020a 	mov.w	r2, #10
 801587e:	4639      	mov	r1, r7
 8015880:	4648      	mov	r0, r9
 8015882:	d107      	bne.n	8015894 <_dtoa_r+0xadc>
 8015884:	f000 f914 	bl	8015ab0 <__multadd>
 8015888:	4607      	mov	r7, r0
 801588a:	4605      	mov	r5, r0
 801588c:	9b00      	ldr	r3, [sp, #0]
 801588e:	3301      	adds	r3, #1
 8015890:	9300      	str	r3, [sp, #0]
 8015892:	e777      	b.n	8015784 <_dtoa_r+0x9cc>
 8015894:	f000 f90c 	bl	8015ab0 <__multadd>
 8015898:	4629      	mov	r1, r5
 801589a:	4607      	mov	r7, r0
 801589c:	2300      	movs	r3, #0
 801589e:	220a      	movs	r2, #10
 80158a0:	4648      	mov	r0, r9
 80158a2:	f000 f905 	bl	8015ab0 <__multadd>
 80158a6:	4605      	mov	r5, r0
 80158a8:	e7f0      	b.n	801588c <_dtoa_r+0xad4>
 80158aa:	f1bb 0f00 	cmp.w	fp, #0
 80158ae:	bfcc      	ite	gt
 80158b0:	465e      	movgt	r6, fp
 80158b2:	2601      	movle	r6, #1
 80158b4:	4456      	add	r6, sl
 80158b6:	2700      	movs	r7, #0
 80158b8:	9902      	ldr	r1, [sp, #8]
 80158ba:	9300      	str	r3, [sp, #0]
 80158bc:	2201      	movs	r2, #1
 80158be:	4648      	mov	r0, r9
 80158c0:	f000 fae4 	bl	8015e8c <__lshift>
 80158c4:	4621      	mov	r1, r4
 80158c6:	9002      	str	r0, [sp, #8]
 80158c8:	f000 fb4c 	bl	8015f64 <__mcmp>
 80158cc:	2800      	cmp	r0, #0
 80158ce:	dcb4      	bgt.n	801583a <_dtoa_r+0xa82>
 80158d0:	d102      	bne.n	80158d8 <_dtoa_r+0xb20>
 80158d2:	9b00      	ldr	r3, [sp, #0]
 80158d4:	07db      	lsls	r3, r3, #31
 80158d6:	d4b0      	bmi.n	801583a <_dtoa_r+0xa82>
 80158d8:	4633      	mov	r3, r6
 80158da:	461e      	mov	r6, r3
 80158dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80158e0:	2a30      	cmp	r2, #48	@ 0x30
 80158e2:	d0fa      	beq.n	80158da <_dtoa_r+0xb22>
 80158e4:	e4b5      	b.n	8015252 <_dtoa_r+0x49a>
 80158e6:	459a      	cmp	sl, r3
 80158e8:	d1a8      	bne.n	801583c <_dtoa_r+0xa84>
 80158ea:	2331      	movs	r3, #49	@ 0x31
 80158ec:	f108 0801 	add.w	r8, r8, #1
 80158f0:	f88a 3000 	strb.w	r3, [sl]
 80158f4:	e4ad      	b.n	8015252 <_dtoa_r+0x49a>
 80158f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80158f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8015954 <_dtoa_r+0xb9c>
 80158fc:	b11b      	cbz	r3, 8015906 <_dtoa_r+0xb4e>
 80158fe:	f10a 0308 	add.w	r3, sl, #8
 8015902:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015904:	6013      	str	r3, [r2, #0]
 8015906:	4650      	mov	r0, sl
 8015908:	b017      	add	sp, #92	@ 0x5c
 801590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801590e:	9b07      	ldr	r3, [sp, #28]
 8015910:	2b01      	cmp	r3, #1
 8015912:	f77f ae2e 	ble.w	8015572 <_dtoa_r+0x7ba>
 8015916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015918:	9308      	str	r3, [sp, #32]
 801591a:	2001      	movs	r0, #1
 801591c:	e64d      	b.n	80155ba <_dtoa_r+0x802>
 801591e:	f1bb 0f00 	cmp.w	fp, #0
 8015922:	f77f aed9 	ble.w	80156d8 <_dtoa_r+0x920>
 8015926:	4656      	mov	r6, sl
 8015928:	9802      	ldr	r0, [sp, #8]
 801592a:	4621      	mov	r1, r4
 801592c:	f7ff f9bc 	bl	8014ca8 <quorem>
 8015930:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8015934:	f806 3b01 	strb.w	r3, [r6], #1
 8015938:	eba6 020a 	sub.w	r2, r6, sl
 801593c:	4593      	cmp	fp, r2
 801593e:	ddb4      	ble.n	80158aa <_dtoa_r+0xaf2>
 8015940:	9902      	ldr	r1, [sp, #8]
 8015942:	2300      	movs	r3, #0
 8015944:	220a      	movs	r2, #10
 8015946:	4648      	mov	r0, r9
 8015948:	f000 f8b2 	bl	8015ab0 <__multadd>
 801594c:	9002      	str	r0, [sp, #8]
 801594e:	e7eb      	b.n	8015928 <_dtoa_r+0xb70>
 8015950:	0801a499 	.word	0x0801a499
 8015954:	0801a41d 	.word	0x0801a41d

08015958 <_free_r>:
 8015958:	b538      	push	{r3, r4, r5, lr}
 801595a:	4605      	mov	r5, r0
 801595c:	2900      	cmp	r1, #0
 801595e:	d041      	beq.n	80159e4 <_free_r+0x8c>
 8015960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015964:	1f0c      	subs	r4, r1, #4
 8015966:	2b00      	cmp	r3, #0
 8015968:	bfb8      	it	lt
 801596a:	18e4      	addlt	r4, r4, r3
 801596c:	f7fe f834 	bl	80139d8 <__malloc_lock>
 8015970:	4a1d      	ldr	r2, [pc, #116]	@ (80159e8 <_free_r+0x90>)
 8015972:	6813      	ldr	r3, [r2, #0]
 8015974:	b933      	cbnz	r3, 8015984 <_free_r+0x2c>
 8015976:	6063      	str	r3, [r4, #4]
 8015978:	6014      	str	r4, [r2, #0]
 801597a:	4628      	mov	r0, r5
 801597c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015980:	f7fe b830 	b.w	80139e4 <__malloc_unlock>
 8015984:	42a3      	cmp	r3, r4
 8015986:	d908      	bls.n	801599a <_free_r+0x42>
 8015988:	6820      	ldr	r0, [r4, #0]
 801598a:	1821      	adds	r1, r4, r0
 801598c:	428b      	cmp	r3, r1
 801598e:	bf01      	itttt	eq
 8015990:	6819      	ldreq	r1, [r3, #0]
 8015992:	685b      	ldreq	r3, [r3, #4]
 8015994:	1809      	addeq	r1, r1, r0
 8015996:	6021      	streq	r1, [r4, #0]
 8015998:	e7ed      	b.n	8015976 <_free_r+0x1e>
 801599a:	461a      	mov	r2, r3
 801599c:	685b      	ldr	r3, [r3, #4]
 801599e:	b10b      	cbz	r3, 80159a4 <_free_r+0x4c>
 80159a0:	42a3      	cmp	r3, r4
 80159a2:	d9fa      	bls.n	801599a <_free_r+0x42>
 80159a4:	6811      	ldr	r1, [r2, #0]
 80159a6:	1850      	adds	r0, r2, r1
 80159a8:	42a0      	cmp	r0, r4
 80159aa:	d10b      	bne.n	80159c4 <_free_r+0x6c>
 80159ac:	6820      	ldr	r0, [r4, #0]
 80159ae:	4401      	add	r1, r0
 80159b0:	1850      	adds	r0, r2, r1
 80159b2:	4283      	cmp	r3, r0
 80159b4:	6011      	str	r1, [r2, #0]
 80159b6:	d1e0      	bne.n	801597a <_free_r+0x22>
 80159b8:	6818      	ldr	r0, [r3, #0]
 80159ba:	685b      	ldr	r3, [r3, #4]
 80159bc:	6053      	str	r3, [r2, #4]
 80159be:	4408      	add	r0, r1
 80159c0:	6010      	str	r0, [r2, #0]
 80159c2:	e7da      	b.n	801597a <_free_r+0x22>
 80159c4:	d902      	bls.n	80159cc <_free_r+0x74>
 80159c6:	230c      	movs	r3, #12
 80159c8:	602b      	str	r3, [r5, #0]
 80159ca:	e7d6      	b.n	801597a <_free_r+0x22>
 80159cc:	6820      	ldr	r0, [r4, #0]
 80159ce:	1821      	adds	r1, r4, r0
 80159d0:	428b      	cmp	r3, r1
 80159d2:	bf04      	itt	eq
 80159d4:	6819      	ldreq	r1, [r3, #0]
 80159d6:	685b      	ldreq	r3, [r3, #4]
 80159d8:	6063      	str	r3, [r4, #4]
 80159da:	bf04      	itt	eq
 80159dc:	1809      	addeq	r1, r1, r0
 80159de:	6021      	streq	r1, [r4, #0]
 80159e0:	6054      	str	r4, [r2, #4]
 80159e2:	e7ca      	b.n	801597a <_free_r+0x22>
 80159e4:	bd38      	pop	{r3, r4, r5, pc}
 80159e6:	bf00      	nop
 80159e8:	20004b70 	.word	0x20004b70

080159ec <_Balloc>:
 80159ec:	b570      	push	{r4, r5, r6, lr}
 80159ee:	69c6      	ldr	r6, [r0, #28]
 80159f0:	4604      	mov	r4, r0
 80159f2:	460d      	mov	r5, r1
 80159f4:	b976      	cbnz	r6, 8015a14 <_Balloc+0x28>
 80159f6:	2010      	movs	r0, #16
 80159f8:	f7fd ff3c 	bl	8013874 <malloc>
 80159fc:	4602      	mov	r2, r0
 80159fe:	61e0      	str	r0, [r4, #28]
 8015a00:	b920      	cbnz	r0, 8015a0c <_Balloc+0x20>
 8015a02:	4b18      	ldr	r3, [pc, #96]	@ (8015a64 <_Balloc+0x78>)
 8015a04:	4818      	ldr	r0, [pc, #96]	@ (8015a68 <_Balloc+0x7c>)
 8015a06:	216b      	movs	r1, #107	@ 0x6b
 8015a08:	f001 ff2e 	bl	8017868 <__assert_func>
 8015a0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015a10:	6006      	str	r6, [r0, #0]
 8015a12:	60c6      	str	r6, [r0, #12]
 8015a14:	69e6      	ldr	r6, [r4, #28]
 8015a16:	68f3      	ldr	r3, [r6, #12]
 8015a18:	b183      	cbz	r3, 8015a3c <_Balloc+0x50>
 8015a1a:	69e3      	ldr	r3, [r4, #28]
 8015a1c:	68db      	ldr	r3, [r3, #12]
 8015a1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015a22:	b9b8      	cbnz	r0, 8015a54 <_Balloc+0x68>
 8015a24:	2101      	movs	r1, #1
 8015a26:	fa01 f605 	lsl.w	r6, r1, r5
 8015a2a:	1d72      	adds	r2, r6, #5
 8015a2c:	0092      	lsls	r2, r2, #2
 8015a2e:	4620      	mov	r0, r4
 8015a30:	f001 ff38 	bl	80178a4 <_calloc_r>
 8015a34:	b160      	cbz	r0, 8015a50 <_Balloc+0x64>
 8015a36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015a3a:	e00e      	b.n	8015a5a <_Balloc+0x6e>
 8015a3c:	2221      	movs	r2, #33	@ 0x21
 8015a3e:	2104      	movs	r1, #4
 8015a40:	4620      	mov	r0, r4
 8015a42:	f001 ff2f 	bl	80178a4 <_calloc_r>
 8015a46:	69e3      	ldr	r3, [r4, #28]
 8015a48:	60f0      	str	r0, [r6, #12]
 8015a4a:	68db      	ldr	r3, [r3, #12]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d1e4      	bne.n	8015a1a <_Balloc+0x2e>
 8015a50:	2000      	movs	r0, #0
 8015a52:	bd70      	pop	{r4, r5, r6, pc}
 8015a54:	6802      	ldr	r2, [r0, #0]
 8015a56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015a60:	e7f7      	b.n	8015a52 <_Balloc+0x66>
 8015a62:	bf00      	nop
 8015a64:	0801a42a 	.word	0x0801a42a
 8015a68:	0801a4aa 	.word	0x0801a4aa

08015a6c <_Bfree>:
 8015a6c:	b570      	push	{r4, r5, r6, lr}
 8015a6e:	69c6      	ldr	r6, [r0, #28]
 8015a70:	4605      	mov	r5, r0
 8015a72:	460c      	mov	r4, r1
 8015a74:	b976      	cbnz	r6, 8015a94 <_Bfree+0x28>
 8015a76:	2010      	movs	r0, #16
 8015a78:	f7fd fefc 	bl	8013874 <malloc>
 8015a7c:	4602      	mov	r2, r0
 8015a7e:	61e8      	str	r0, [r5, #28]
 8015a80:	b920      	cbnz	r0, 8015a8c <_Bfree+0x20>
 8015a82:	4b09      	ldr	r3, [pc, #36]	@ (8015aa8 <_Bfree+0x3c>)
 8015a84:	4809      	ldr	r0, [pc, #36]	@ (8015aac <_Bfree+0x40>)
 8015a86:	218f      	movs	r1, #143	@ 0x8f
 8015a88:	f001 feee 	bl	8017868 <__assert_func>
 8015a8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015a90:	6006      	str	r6, [r0, #0]
 8015a92:	60c6      	str	r6, [r0, #12]
 8015a94:	b13c      	cbz	r4, 8015aa6 <_Bfree+0x3a>
 8015a96:	69eb      	ldr	r3, [r5, #28]
 8015a98:	6862      	ldr	r2, [r4, #4]
 8015a9a:	68db      	ldr	r3, [r3, #12]
 8015a9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015aa0:	6021      	str	r1, [r4, #0]
 8015aa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015aa6:	bd70      	pop	{r4, r5, r6, pc}
 8015aa8:	0801a42a 	.word	0x0801a42a
 8015aac:	0801a4aa 	.word	0x0801a4aa

08015ab0 <__multadd>:
 8015ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab4:	690d      	ldr	r5, [r1, #16]
 8015ab6:	4607      	mov	r7, r0
 8015ab8:	460c      	mov	r4, r1
 8015aba:	461e      	mov	r6, r3
 8015abc:	f101 0c14 	add.w	ip, r1, #20
 8015ac0:	2000      	movs	r0, #0
 8015ac2:	f8dc 3000 	ldr.w	r3, [ip]
 8015ac6:	b299      	uxth	r1, r3
 8015ac8:	fb02 6101 	mla	r1, r2, r1, r6
 8015acc:	0c1e      	lsrs	r6, r3, #16
 8015ace:	0c0b      	lsrs	r3, r1, #16
 8015ad0:	fb02 3306 	mla	r3, r2, r6, r3
 8015ad4:	b289      	uxth	r1, r1
 8015ad6:	3001      	adds	r0, #1
 8015ad8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015adc:	4285      	cmp	r5, r0
 8015ade:	f84c 1b04 	str.w	r1, [ip], #4
 8015ae2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015ae6:	dcec      	bgt.n	8015ac2 <__multadd+0x12>
 8015ae8:	b30e      	cbz	r6, 8015b2e <__multadd+0x7e>
 8015aea:	68a3      	ldr	r3, [r4, #8]
 8015aec:	42ab      	cmp	r3, r5
 8015aee:	dc19      	bgt.n	8015b24 <__multadd+0x74>
 8015af0:	6861      	ldr	r1, [r4, #4]
 8015af2:	4638      	mov	r0, r7
 8015af4:	3101      	adds	r1, #1
 8015af6:	f7ff ff79 	bl	80159ec <_Balloc>
 8015afa:	4680      	mov	r8, r0
 8015afc:	b928      	cbnz	r0, 8015b0a <__multadd+0x5a>
 8015afe:	4602      	mov	r2, r0
 8015b00:	4b0c      	ldr	r3, [pc, #48]	@ (8015b34 <__multadd+0x84>)
 8015b02:	480d      	ldr	r0, [pc, #52]	@ (8015b38 <__multadd+0x88>)
 8015b04:	21ba      	movs	r1, #186	@ 0xba
 8015b06:	f001 feaf 	bl	8017868 <__assert_func>
 8015b0a:	6922      	ldr	r2, [r4, #16]
 8015b0c:	3202      	adds	r2, #2
 8015b0e:	f104 010c 	add.w	r1, r4, #12
 8015b12:	0092      	lsls	r2, r2, #2
 8015b14:	300c      	adds	r0, #12
 8015b16:	f001 fe8f 	bl	8017838 <memcpy>
 8015b1a:	4621      	mov	r1, r4
 8015b1c:	4638      	mov	r0, r7
 8015b1e:	f7ff ffa5 	bl	8015a6c <_Bfree>
 8015b22:	4644      	mov	r4, r8
 8015b24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015b28:	3501      	adds	r5, #1
 8015b2a:	615e      	str	r6, [r3, #20]
 8015b2c:	6125      	str	r5, [r4, #16]
 8015b2e:	4620      	mov	r0, r4
 8015b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b34:	0801a499 	.word	0x0801a499
 8015b38:	0801a4aa 	.word	0x0801a4aa

08015b3c <__s2b>:
 8015b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b40:	460c      	mov	r4, r1
 8015b42:	4615      	mov	r5, r2
 8015b44:	461f      	mov	r7, r3
 8015b46:	2209      	movs	r2, #9
 8015b48:	3308      	adds	r3, #8
 8015b4a:	4606      	mov	r6, r0
 8015b4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015b50:	2100      	movs	r1, #0
 8015b52:	2201      	movs	r2, #1
 8015b54:	429a      	cmp	r2, r3
 8015b56:	db09      	blt.n	8015b6c <__s2b+0x30>
 8015b58:	4630      	mov	r0, r6
 8015b5a:	f7ff ff47 	bl	80159ec <_Balloc>
 8015b5e:	b940      	cbnz	r0, 8015b72 <__s2b+0x36>
 8015b60:	4602      	mov	r2, r0
 8015b62:	4b19      	ldr	r3, [pc, #100]	@ (8015bc8 <__s2b+0x8c>)
 8015b64:	4819      	ldr	r0, [pc, #100]	@ (8015bcc <__s2b+0x90>)
 8015b66:	21d3      	movs	r1, #211	@ 0xd3
 8015b68:	f001 fe7e 	bl	8017868 <__assert_func>
 8015b6c:	0052      	lsls	r2, r2, #1
 8015b6e:	3101      	adds	r1, #1
 8015b70:	e7f0      	b.n	8015b54 <__s2b+0x18>
 8015b72:	9b08      	ldr	r3, [sp, #32]
 8015b74:	6143      	str	r3, [r0, #20]
 8015b76:	2d09      	cmp	r5, #9
 8015b78:	f04f 0301 	mov.w	r3, #1
 8015b7c:	6103      	str	r3, [r0, #16]
 8015b7e:	dd16      	ble.n	8015bae <__s2b+0x72>
 8015b80:	f104 0909 	add.w	r9, r4, #9
 8015b84:	46c8      	mov	r8, r9
 8015b86:	442c      	add	r4, r5
 8015b88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015b8c:	4601      	mov	r1, r0
 8015b8e:	3b30      	subs	r3, #48	@ 0x30
 8015b90:	220a      	movs	r2, #10
 8015b92:	4630      	mov	r0, r6
 8015b94:	f7ff ff8c 	bl	8015ab0 <__multadd>
 8015b98:	45a0      	cmp	r8, r4
 8015b9a:	d1f5      	bne.n	8015b88 <__s2b+0x4c>
 8015b9c:	f1a5 0408 	sub.w	r4, r5, #8
 8015ba0:	444c      	add	r4, r9
 8015ba2:	1b2d      	subs	r5, r5, r4
 8015ba4:	1963      	adds	r3, r4, r5
 8015ba6:	42bb      	cmp	r3, r7
 8015ba8:	db04      	blt.n	8015bb4 <__s2b+0x78>
 8015baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bae:	340a      	adds	r4, #10
 8015bb0:	2509      	movs	r5, #9
 8015bb2:	e7f6      	b.n	8015ba2 <__s2b+0x66>
 8015bb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015bb8:	4601      	mov	r1, r0
 8015bba:	3b30      	subs	r3, #48	@ 0x30
 8015bbc:	220a      	movs	r2, #10
 8015bbe:	4630      	mov	r0, r6
 8015bc0:	f7ff ff76 	bl	8015ab0 <__multadd>
 8015bc4:	e7ee      	b.n	8015ba4 <__s2b+0x68>
 8015bc6:	bf00      	nop
 8015bc8:	0801a499 	.word	0x0801a499
 8015bcc:	0801a4aa 	.word	0x0801a4aa

08015bd0 <__hi0bits>:
 8015bd0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	bf36      	itet	cc
 8015bd8:	0403      	lslcc	r3, r0, #16
 8015bda:	2000      	movcs	r0, #0
 8015bdc:	2010      	movcc	r0, #16
 8015bde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015be2:	bf3c      	itt	cc
 8015be4:	021b      	lslcc	r3, r3, #8
 8015be6:	3008      	addcc	r0, #8
 8015be8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015bec:	bf3c      	itt	cc
 8015bee:	011b      	lslcc	r3, r3, #4
 8015bf0:	3004      	addcc	r0, #4
 8015bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015bf6:	bf3c      	itt	cc
 8015bf8:	009b      	lslcc	r3, r3, #2
 8015bfa:	3002      	addcc	r0, #2
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	db05      	blt.n	8015c0c <__hi0bits+0x3c>
 8015c00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015c04:	f100 0001 	add.w	r0, r0, #1
 8015c08:	bf08      	it	eq
 8015c0a:	2020      	moveq	r0, #32
 8015c0c:	4770      	bx	lr

08015c0e <__lo0bits>:
 8015c0e:	6803      	ldr	r3, [r0, #0]
 8015c10:	4602      	mov	r2, r0
 8015c12:	f013 0007 	ands.w	r0, r3, #7
 8015c16:	d00b      	beq.n	8015c30 <__lo0bits+0x22>
 8015c18:	07d9      	lsls	r1, r3, #31
 8015c1a:	d421      	bmi.n	8015c60 <__lo0bits+0x52>
 8015c1c:	0798      	lsls	r0, r3, #30
 8015c1e:	bf49      	itett	mi
 8015c20:	085b      	lsrmi	r3, r3, #1
 8015c22:	089b      	lsrpl	r3, r3, #2
 8015c24:	2001      	movmi	r0, #1
 8015c26:	6013      	strmi	r3, [r2, #0]
 8015c28:	bf5c      	itt	pl
 8015c2a:	6013      	strpl	r3, [r2, #0]
 8015c2c:	2002      	movpl	r0, #2
 8015c2e:	4770      	bx	lr
 8015c30:	b299      	uxth	r1, r3
 8015c32:	b909      	cbnz	r1, 8015c38 <__lo0bits+0x2a>
 8015c34:	0c1b      	lsrs	r3, r3, #16
 8015c36:	2010      	movs	r0, #16
 8015c38:	b2d9      	uxtb	r1, r3
 8015c3a:	b909      	cbnz	r1, 8015c40 <__lo0bits+0x32>
 8015c3c:	3008      	adds	r0, #8
 8015c3e:	0a1b      	lsrs	r3, r3, #8
 8015c40:	0719      	lsls	r1, r3, #28
 8015c42:	bf04      	itt	eq
 8015c44:	091b      	lsreq	r3, r3, #4
 8015c46:	3004      	addeq	r0, #4
 8015c48:	0799      	lsls	r1, r3, #30
 8015c4a:	bf04      	itt	eq
 8015c4c:	089b      	lsreq	r3, r3, #2
 8015c4e:	3002      	addeq	r0, #2
 8015c50:	07d9      	lsls	r1, r3, #31
 8015c52:	d403      	bmi.n	8015c5c <__lo0bits+0x4e>
 8015c54:	085b      	lsrs	r3, r3, #1
 8015c56:	f100 0001 	add.w	r0, r0, #1
 8015c5a:	d003      	beq.n	8015c64 <__lo0bits+0x56>
 8015c5c:	6013      	str	r3, [r2, #0]
 8015c5e:	4770      	bx	lr
 8015c60:	2000      	movs	r0, #0
 8015c62:	4770      	bx	lr
 8015c64:	2020      	movs	r0, #32
 8015c66:	4770      	bx	lr

08015c68 <__i2b>:
 8015c68:	b510      	push	{r4, lr}
 8015c6a:	460c      	mov	r4, r1
 8015c6c:	2101      	movs	r1, #1
 8015c6e:	f7ff febd 	bl	80159ec <_Balloc>
 8015c72:	4602      	mov	r2, r0
 8015c74:	b928      	cbnz	r0, 8015c82 <__i2b+0x1a>
 8015c76:	4b05      	ldr	r3, [pc, #20]	@ (8015c8c <__i2b+0x24>)
 8015c78:	4805      	ldr	r0, [pc, #20]	@ (8015c90 <__i2b+0x28>)
 8015c7a:	f240 1145 	movw	r1, #325	@ 0x145
 8015c7e:	f001 fdf3 	bl	8017868 <__assert_func>
 8015c82:	2301      	movs	r3, #1
 8015c84:	6144      	str	r4, [r0, #20]
 8015c86:	6103      	str	r3, [r0, #16]
 8015c88:	bd10      	pop	{r4, pc}
 8015c8a:	bf00      	nop
 8015c8c:	0801a499 	.word	0x0801a499
 8015c90:	0801a4aa 	.word	0x0801a4aa

08015c94 <__multiply>:
 8015c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c98:	4617      	mov	r7, r2
 8015c9a:	690a      	ldr	r2, [r1, #16]
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	429a      	cmp	r2, r3
 8015ca0:	bfa8      	it	ge
 8015ca2:	463b      	movge	r3, r7
 8015ca4:	4689      	mov	r9, r1
 8015ca6:	bfa4      	itt	ge
 8015ca8:	460f      	movge	r7, r1
 8015caa:	4699      	movge	r9, r3
 8015cac:	693d      	ldr	r5, [r7, #16]
 8015cae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	6879      	ldr	r1, [r7, #4]
 8015cb6:	eb05 060a 	add.w	r6, r5, sl
 8015cba:	42b3      	cmp	r3, r6
 8015cbc:	b085      	sub	sp, #20
 8015cbe:	bfb8      	it	lt
 8015cc0:	3101      	addlt	r1, #1
 8015cc2:	f7ff fe93 	bl	80159ec <_Balloc>
 8015cc6:	b930      	cbnz	r0, 8015cd6 <__multiply+0x42>
 8015cc8:	4602      	mov	r2, r0
 8015cca:	4b41      	ldr	r3, [pc, #260]	@ (8015dd0 <__multiply+0x13c>)
 8015ccc:	4841      	ldr	r0, [pc, #260]	@ (8015dd4 <__multiply+0x140>)
 8015cce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015cd2:	f001 fdc9 	bl	8017868 <__assert_func>
 8015cd6:	f100 0414 	add.w	r4, r0, #20
 8015cda:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8015cde:	4623      	mov	r3, r4
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	4573      	cmp	r3, lr
 8015ce4:	d320      	bcc.n	8015d28 <__multiply+0x94>
 8015ce6:	f107 0814 	add.w	r8, r7, #20
 8015cea:	f109 0114 	add.w	r1, r9, #20
 8015cee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015cf2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015cf6:	9302      	str	r3, [sp, #8]
 8015cf8:	1beb      	subs	r3, r5, r7
 8015cfa:	3b15      	subs	r3, #21
 8015cfc:	f023 0303 	bic.w	r3, r3, #3
 8015d00:	3304      	adds	r3, #4
 8015d02:	3715      	adds	r7, #21
 8015d04:	42bd      	cmp	r5, r7
 8015d06:	bf38      	it	cc
 8015d08:	2304      	movcc	r3, #4
 8015d0a:	9301      	str	r3, [sp, #4]
 8015d0c:	9b02      	ldr	r3, [sp, #8]
 8015d0e:	9103      	str	r1, [sp, #12]
 8015d10:	428b      	cmp	r3, r1
 8015d12:	d80c      	bhi.n	8015d2e <__multiply+0x9a>
 8015d14:	2e00      	cmp	r6, #0
 8015d16:	dd03      	ble.n	8015d20 <__multiply+0x8c>
 8015d18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d055      	beq.n	8015dcc <__multiply+0x138>
 8015d20:	6106      	str	r6, [r0, #16]
 8015d22:	b005      	add	sp, #20
 8015d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d28:	f843 2b04 	str.w	r2, [r3], #4
 8015d2c:	e7d9      	b.n	8015ce2 <__multiply+0x4e>
 8015d2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8015d32:	f1ba 0f00 	cmp.w	sl, #0
 8015d36:	d01f      	beq.n	8015d78 <__multiply+0xe4>
 8015d38:	46c4      	mov	ip, r8
 8015d3a:	46a1      	mov	r9, r4
 8015d3c:	2700      	movs	r7, #0
 8015d3e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015d42:	f8d9 3000 	ldr.w	r3, [r9]
 8015d46:	fa1f fb82 	uxth.w	fp, r2
 8015d4a:	b29b      	uxth	r3, r3
 8015d4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8015d50:	443b      	add	r3, r7
 8015d52:	f8d9 7000 	ldr.w	r7, [r9]
 8015d56:	0c12      	lsrs	r2, r2, #16
 8015d58:	0c3f      	lsrs	r7, r7, #16
 8015d5a:	fb0a 7202 	mla	r2, sl, r2, r7
 8015d5e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015d68:	4565      	cmp	r5, ip
 8015d6a:	f849 3b04 	str.w	r3, [r9], #4
 8015d6e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8015d72:	d8e4      	bhi.n	8015d3e <__multiply+0xaa>
 8015d74:	9b01      	ldr	r3, [sp, #4]
 8015d76:	50e7      	str	r7, [r4, r3]
 8015d78:	9b03      	ldr	r3, [sp, #12]
 8015d7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015d7e:	3104      	adds	r1, #4
 8015d80:	f1b9 0f00 	cmp.w	r9, #0
 8015d84:	d020      	beq.n	8015dc8 <__multiply+0x134>
 8015d86:	6823      	ldr	r3, [r4, #0]
 8015d88:	4647      	mov	r7, r8
 8015d8a:	46a4      	mov	ip, r4
 8015d8c:	f04f 0a00 	mov.w	sl, #0
 8015d90:	f8b7 b000 	ldrh.w	fp, [r7]
 8015d94:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015d98:	fb09 220b 	mla	r2, r9, fp, r2
 8015d9c:	4452      	add	r2, sl
 8015d9e:	b29b      	uxth	r3, r3
 8015da0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015da4:	f84c 3b04 	str.w	r3, [ip], #4
 8015da8:	f857 3b04 	ldr.w	r3, [r7], #4
 8015dac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015db0:	f8bc 3000 	ldrh.w	r3, [ip]
 8015db4:	fb09 330a 	mla	r3, r9, sl, r3
 8015db8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015dbc:	42bd      	cmp	r5, r7
 8015dbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015dc2:	d8e5      	bhi.n	8015d90 <__multiply+0xfc>
 8015dc4:	9a01      	ldr	r2, [sp, #4]
 8015dc6:	50a3      	str	r3, [r4, r2]
 8015dc8:	3404      	adds	r4, #4
 8015dca:	e79f      	b.n	8015d0c <__multiply+0x78>
 8015dcc:	3e01      	subs	r6, #1
 8015dce:	e7a1      	b.n	8015d14 <__multiply+0x80>
 8015dd0:	0801a499 	.word	0x0801a499
 8015dd4:	0801a4aa 	.word	0x0801a4aa

08015dd8 <__pow5mult>:
 8015dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ddc:	4615      	mov	r5, r2
 8015dde:	f012 0203 	ands.w	r2, r2, #3
 8015de2:	4607      	mov	r7, r0
 8015de4:	460e      	mov	r6, r1
 8015de6:	d007      	beq.n	8015df8 <__pow5mult+0x20>
 8015de8:	4c25      	ldr	r4, [pc, #148]	@ (8015e80 <__pow5mult+0xa8>)
 8015dea:	3a01      	subs	r2, #1
 8015dec:	2300      	movs	r3, #0
 8015dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015df2:	f7ff fe5d 	bl	8015ab0 <__multadd>
 8015df6:	4606      	mov	r6, r0
 8015df8:	10ad      	asrs	r5, r5, #2
 8015dfa:	d03d      	beq.n	8015e78 <__pow5mult+0xa0>
 8015dfc:	69fc      	ldr	r4, [r7, #28]
 8015dfe:	b97c      	cbnz	r4, 8015e20 <__pow5mult+0x48>
 8015e00:	2010      	movs	r0, #16
 8015e02:	f7fd fd37 	bl	8013874 <malloc>
 8015e06:	4602      	mov	r2, r0
 8015e08:	61f8      	str	r0, [r7, #28]
 8015e0a:	b928      	cbnz	r0, 8015e18 <__pow5mult+0x40>
 8015e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8015e84 <__pow5mult+0xac>)
 8015e0e:	481e      	ldr	r0, [pc, #120]	@ (8015e88 <__pow5mult+0xb0>)
 8015e10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015e14:	f001 fd28 	bl	8017868 <__assert_func>
 8015e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015e1c:	6004      	str	r4, [r0, #0]
 8015e1e:	60c4      	str	r4, [r0, #12]
 8015e20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015e28:	b94c      	cbnz	r4, 8015e3e <__pow5mult+0x66>
 8015e2a:	f240 2171 	movw	r1, #625	@ 0x271
 8015e2e:	4638      	mov	r0, r7
 8015e30:	f7ff ff1a 	bl	8015c68 <__i2b>
 8015e34:	2300      	movs	r3, #0
 8015e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8015e3a:	4604      	mov	r4, r0
 8015e3c:	6003      	str	r3, [r0, #0]
 8015e3e:	f04f 0900 	mov.w	r9, #0
 8015e42:	07eb      	lsls	r3, r5, #31
 8015e44:	d50a      	bpl.n	8015e5c <__pow5mult+0x84>
 8015e46:	4631      	mov	r1, r6
 8015e48:	4622      	mov	r2, r4
 8015e4a:	4638      	mov	r0, r7
 8015e4c:	f7ff ff22 	bl	8015c94 <__multiply>
 8015e50:	4631      	mov	r1, r6
 8015e52:	4680      	mov	r8, r0
 8015e54:	4638      	mov	r0, r7
 8015e56:	f7ff fe09 	bl	8015a6c <_Bfree>
 8015e5a:	4646      	mov	r6, r8
 8015e5c:	106d      	asrs	r5, r5, #1
 8015e5e:	d00b      	beq.n	8015e78 <__pow5mult+0xa0>
 8015e60:	6820      	ldr	r0, [r4, #0]
 8015e62:	b938      	cbnz	r0, 8015e74 <__pow5mult+0x9c>
 8015e64:	4622      	mov	r2, r4
 8015e66:	4621      	mov	r1, r4
 8015e68:	4638      	mov	r0, r7
 8015e6a:	f7ff ff13 	bl	8015c94 <__multiply>
 8015e6e:	6020      	str	r0, [r4, #0]
 8015e70:	f8c0 9000 	str.w	r9, [r0]
 8015e74:	4604      	mov	r4, r0
 8015e76:	e7e4      	b.n	8015e42 <__pow5mult+0x6a>
 8015e78:	4630      	mov	r0, r6
 8015e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e7e:	bf00      	nop
 8015e80:	0801a5bc 	.word	0x0801a5bc
 8015e84:	0801a42a 	.word	0x0801a42a
 8015e88:	0801a4aa 	.word	0x0801a4aa

08015e8c <__lshift>:
 8015e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e90:	460c      	mov	r4, r1
 8015e92:	6849      	ldr	r1, [r1, #4]
 8015e94:	6923      	ldr	r3, [r4, #16]
 8015e96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015e9a:	68a3      	ldr	r3, [r4, #8]
 8015e9c:	4607      	mov	r7, r0
 8015e9e:	4691      	mov	r9, r2
 8015ea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015ea4:	f108 0601 	add.w	r6, r8, #1
 8015ea8:	42b3      	cmp	r3, r6
 8015eaa:	db0b      	blt.n	8015ec4 <__lshift+0x38>
 8015eac:	4638      	mov	r0, r7
 8015eae:	f7ff fd9d 	bl	80159ec <_Balloc>
 8015eb2:	4605      	mov	r5, r0
 8015eb4:	b948      	cbnz	r0, 8015eca <__lshift+0x3e>
 8015eb6:	4602      	mov	r2, r0
 8015eb8:	4b28      	ldr	r3, [pc, #160]	@ (8015f5c <__lshift+0xd0>)
 8015eba:	4829      	ldr	r0, [pc, #164]	@ (8015f60 <__lshift+0xd4>)
 8015ebc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015ec0:	f001 fcd2 	bl	8017868 <__assert_func>
 8015ec4:	3101      	adds	r1, #1
 8015ec6:	005b      	lsls	r3, r3, #1
 8015ec8:	e7ee      	b.n	8015ea8 <__lshift+0x1c>
 8015eca:	2300      	movs	r3, #0
 8015ecc:	f100 0114 	add.w	r1, r0, #20
 8015ed0:	f100 0210 	add.w	r2, r0, #16
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	4553      	cmp	r3, sl
 8015ed8:	db33      	blt.n	8015f42 <__lshift+0xb6>
 8015eda:	6920      	ldr	r0, [r4, #16]
 8015edc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015ee0:	f104 0314 	add.w	r3, r4, #20
 8015ee4:	f019 091f 	ands.w	r9, r9, #31
 8015ee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015eec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015ef0:	d02b      	beq.n	8015f4a <__lshift+0xbe>
 8015ef2:	f1c9 0e20 	rsb	lr, r9, #32
 8015ef6:	468a      	mov	sl, r1
 8015ef8:	2200      	movs	r2, #0
 8015efa:	6818      	ldr	r0, [r3, #0]
 8015efc:	fa00 f009 	lsl.w	r0, r0, r9
 8015f00:	4310      	orrs	r0, r2
 8015f02:	f84a 0b04 	str.w	r0, [sl], #4
 8015f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f0a:	459c      	cmp	ip, r3
 8015f0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015f10:	d8f3      	bhi.n	8015efa <__lshift+0x6e>
 8015f12:	ebac 0304 	sub.w	r3, ip, r4
 8015f16:	3b15      	subs	r3, #21
 8015f18:	f023 0303 	bic.w	r3, r3, #3
 8015f1c:	3304      	adds	r3, #4
 8015f1e:	f104 0015 	add.w	r0, r4, #21
 8015f22:	4560      	cmp	r0, ip
 8015f24:	bf88      	it	hi
 8015f26:	2304      	movhi	r3, #4
 8015f28:	50ca      	str	r2, [r1, r3]
 8015f2a:	b10a      	cbz	r2, 8015f30 <__lshift+0xa4>
 8015f2c:	f108 0602 	add.w	r6, r8, #2
 8015f30:	3e01      	subs	r6, #1
 8015f32:	4638      	mov	r0, r7
 8015f34:	612e      	str	r6, [r5, #16]
 8015f36:	4621      	mov	r1, r4
 8015f38:	f7ff fd98 	bl	8015a6c <_Bfree>
 8015f3c:	4628      	mov	r0, r5
 8015f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f42:	f842 0f04 	str.w	r0, [r2, #4]!
 8015f46:	3301      	adds	r3, #1
 8015f48:	e7c5      	b.n	8015ed6 <__lshift+0x4a>
 8015f4a:	3904      	subs	r1, #4
 8015f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f50:	f841 2f04 	str.w	r2, [r1, #4]!
 8015f54:	459c      	cmp	ip, r3
 8015f56:	d8f9      	bhi.n	8015f4c <__lshift+0xc0>
 8015f58:	e7ea      	b.n	8015f30 <__lshift+0xa4>
 8015f5a:	bf00      	nop
 8015f5c:	0801a499 	.word	0x0801a499
 8015f60:	0801a4aa 	.word	0x0801a4aa

08015f64 <__mcmp>:
 8015f64:	690a      	ldr	r2, [r1, #16]
 8015f66:	4603      	mov	r3, r0
 8015f68:	6900      	ldr	r0, [r0, #16]
 8015f6a:	1a80      	subs	r0, r0, r2
 8015f6c:	b530      	push	{r4, r5, lr}
 8015f6e:	d10e      	bne.n	8015f8e <__mcmp+0x2a>
 8015f70:	3314      	adds	r3, #20
 8015f72:	3114      	adds	r1, #20
 8015f74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015f78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015f7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015f80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015f84:	4295      	cmp	r5, r2
 8015f86:	d003      	beq.n	8015f90 <__mcmp+0x2c>
 8015f88:	d205      	bcs.n	8015f96 <__mcmp+0x32>
 8015f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f8e:	bd30      	pop	{r4, r5, pc}
 8015f90:	42a3      	cmp	r3, r4
 8015f92:	d3f3      	bcc.n	8015f7c <__mcmp+0x18>
 8015f94:	e7fb      	b.n	8015f8e <__mcmp+0x2a>
 8015f96:	2001      	movs	r0, #1
 8015f98:	e7f9      	b.n	8015f8e <__mcmp+0x2a>
	...

08015f9c <__mdiff>:
 8015f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fa0:	4689      	mov	r9, r1
 8015fa2:	4606      	mov	r6, r0
 8015fa4:	4611      	mov	r1, r2
 8015fa6:	4648      	mov	r0, r9
 8015fa8:	4614      	mov	r4, r2
 8015faa:	f7ff ffdb 	bl	8015f64 <__mcmp>
 8015fae:	1e05      	subs	r5, r0, #0
 8015fb0:	d112      	bne.n	8015fd8 <__mdiff+0x3c>
 8015fb2:	4629      	mov	r1, r5
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	f7ff fd19 	bl	80159ec <_Balloc>
 8015fba:	4602      	mov	r2, r0
 8015fbc:	b928      	cbnz	r0, 8015fca <__mdiff+0x2e>
 8015fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80160bc <__mdiff+0x120>)
 8015fc0:	f240 2137 	movw	r1, #567	@ 0x237
 8015fc4:	483e      	ldr	r0, [pc, #248]	@ (80160c0 <__mdiff+0x124>)
 8015fc6:	f001 fc4f 	bl	8017868 <__assert_func>
 8015fca:	2301      	movs	r3, #1
 8015fcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015fd0:	4610      	mov	r0, r2
 8015fd2:	b003      	add	sp, #12
 8015fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fd8:	bfbc      	itt	lt
 8015fda:	464b      	movlt	r3, r9
 8015fdc:	46a1      	movlt	r9, r4
 8015fde:	4630      	mov	r0, r6
 8015fe0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015fe4:	bfba      	itte	lt
 8015fe6:	461c      	movlt	r4, r3
 8015fe8:	2501      	movlt	r5, #1
 8015fea:	2500      	movge	r5, #0
 8015fec:	f7ff fcfe 	bl	80159ec <_Balloc>
 8015ff0:	4602      	mov	r2, r0
 8015ff2:	b918      	cbnz	r0, 8015ffc <__mdiff+0x60>
 8015ff4:	4b31      	ldr	r3, [pc, #196]	@ (80160bc <__mdiff+0x120>)
 8015ff6:	f240 2145 	movw	r1, #581	@ 0x245
 8015ffa:	e7e3      	b.n	8015fc4 <__mdiff+0x28>
 8015ffc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016000:	6926      	ldr	r6, [r4, #16]
 8016002:	60c5      	str	r5, [r0, #12]
 8016004:	f109 0310 	add.w	r3, r9, #16
 8016008:	f109 0514 	add.w	r5, r9, #20
 801600c:	f104 0e14 	add.w	lr, r4, #20
 8016010:	f100 0b14 	add.w	fp, r0, #20
 8016014:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016018:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801601c:	9301      	str	r3, [sp, #4]
 801601e:	46d9      	mov	r9, fp
 8016020:	f04f 0c00 	mov.w	ip, #0
 8016024:	9b01      	ldr	r3, [sp, #4]
 8016026:	f85e 0b04 	ldr.w	r0, [lr], #4
 801602a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801602e:	9301      	str	r3, [sp, #4]
 8016030:	fa1f f38a 	uxth.w	r3, sl
 8016034:	4619      	mov	r1, r3
 8016036:	b283      	uxth	r3, r0
 8016038:	1acb      	subs	r3, r1, r3
 801603a:	0c00      	lsrs	r0, r0, #16
 801603c:	4463      	add	r3, ip
 801603e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016042:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016046:	b29b      	uxth	r3, r3
 8016048:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801604c:	4576      	cmp	r6, lr
 801604e:	f849 3b04 	str.w	r3, [r9], #4
 8016052:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016056:	d8e5      	bhi.n	8016024 <__mdiff+0x88>
 8016058:	1b33      	subs	r3, r6, r4
 801605a:	3b15      	subs	r3, #21
 801605c:	f023 0303 	bic.w	r3, r3, #3
 8016060:	3415      	adds	r4, #21
 8016062:	3304      	adds	r3, #4
 8016064:	42a6      	cmp	r6, r4
 8016066:	bf38      	it	cc
 8016068:	2304      	movcc	r3, #4
 801606a:	441d      	add	r5, r3
 801606c:	445b      	add	r3, fp
 801606e:	461e      	mov	r6, r3
 8016070:	462c      	mov	r4, r5
 8016072:	4544      	cmp	r4, r8
 8016074:	d30e      	bcc.n	8016094 <__mdiff+0xf8>
 8016076:	f108 0103 	add.w	r1, r8, #3
 801607a:	1b49      	subs	r1, r1, r5
 801607c:	f021 0103 	bic.w	r1, r1, #3
 8016080:	3d03      	subs	r5, #3
 8016082:	45a8      	cmp	r8, r5
 8016084:	bf38      	it	cc
 8016086:	2100      	movcc	r1, #0
 8016088:	440b      	add	r3, r1
 801608a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801608e:	b191      	cbz	r1, 80160b6 <__mdiff+0x11a>
 8016090:	6117      	str	r7, [r2, #16]
 8016092:	e79d      	b.n	8015fd0 <__mdiff+0x34>
 8016094:	f854 1b04 	ldr.w	r1, [r4], #4
 8016098:	46e6      	mov	lr, ip
 801609a:	0c08      	lsrs	r0, r1, #16
 801609c:	fa1c fc81 	uxtah	ip, ip, r1
 80160a0:	4471      	add	r1, lr
 80160a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80160a6:	b289      	uxth	r1, r1
 80160a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80160ac:	f846 1b04 	str.w	r1, [r6], #4
 80160b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80160b4:	e7dd      	b.n	8016072 <__mdiff+0xd6>
 80160b6:	3f01      	subs	r7, #1
 80160b8:	e7e7      	b.n	801608a <__mdiff+0xee>
 80160ba:	bf00      	nop
 80160bc:	0801a499 	.word	0x0801a499
 80160c0:	0801a4aa 	.word	0x0801a4aa

080160c4 <__ulp>:
 80160c4:	b082      	sub	sp, #8
 80160c6:	ed8d 0b00 	vstr	d0, [sp]
 80160ca:	9a01      	ldr	r2, [sp, #4]
 80160cc:	4b0f      	ldr	r3, [pc, #60]	@ (801610c <__ulp+0x48>)
 80160ce:	4013      	ands	r3, r2
 80160d0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	dc08      	bgt.n	80160ea <__ulp+0x26>
 80160d8:	425b      	negs	r3, r3
 80160da:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80160de:	ea4f 5223 	mov.w	r2, r3, asr #20
 80160e2:	da04      	bge.n	80160ee <__ulp+0x2a>
 80160e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80160e8:	4113      	asrs	r3, r2
 80160ea:	2200      	movs	r2, #0
 80160ec:	e008      	b.n	8016100 <__ulp+0x3c>
 80160ee:	f1a2 0314 	sub.w	r3, r2, #20
 80160f2:	2b1e      	cmp	r3, #30
 80160f4:	bfda      	itte	le
 80160f6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80160fa:	40da      	lsrle	r2, r3
 80160fc:	2201      	movgt	r2, #1
 80160fe:	2300      	movs	r3, #0
 8016100:	4619      	mov	r1, r3
 8016102:	4610      	mov	r0, r2
 8016104:	ec41 0b10 	vmov	d0, r0, r1
 8016108:	b002      	add	sp, #8
 801610a:	4770      	bx	lr
 801610c:	7ff00000 	.word	0x7ff00000

08016110 <__b2d>:
 8016110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016114:	6906      	ldr	r6, [r0, #16]
 8016116:	f100 0814 	add.w	r8, r0, #20
 801611a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801611e:	1f37      	subs	r7, r6, #4
 8016120:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016124:	4610      	mov	r0, r2
 8016126:	f7ff fd53 	bl	8015bd0 <__hi0bits>
 801612a:	f1c0 0320 	rsb	r3, r0, #32
 801612e:	280a      	cmp	r0, #10
 8016130:	600b      	str	r3, [r1, #0]
 8016132:	491b      	ldr	r1, [pc, #108]	@ (80161a0 <__b2d+0x90>)
 8016134:	dc15      	bgt.n	8016162 <__b2d+0x52>
 8016136:	f1c0 0c0b 	rsb	ip, r0, #11
 801613a:	fa22 f30c 	lsr.w	r3, r2, ip
 801613e:	45b8      	cmp	r8, r7
 8016140:	ea43 0501 	orr.w	r5, r3, r1
 8016144:	bf34      	ite	cc
 8016146:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801614a:	2300      	movcs	r3, #0
 801614c:	3015      	adds	r0, #21
 801614e:	fa02 f000 	lsl.w	r0, r2, r0
 8016152:	fa23 f30c 	lsr.w	r3, r3, ip
 8016156:	4303      	orrs	r3, r0
 8016158:	461c      	mov	r4, r3
 801615a:	ec45 4b10 	vmov	d0, r4, r5
 801615e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016162:	45b8      	cmp	r8, r7
 8016164:	bf3a      	itte	cc
 8016166:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801616a:	f1a6 0708 	subcc.w	r7, r6, #8
 801616e:	2300      	movcs	r3, #0
 8016170:	380b      	subs	r0, #11
 8016172:	d012      	beq.n	801619a <__b2d+0x8a>
 8016174:	f1c0 0120 	rsb	r1, r0, #32
 8016178:	fa23 f401 	lsr.w	r4, r3, r1
 801617c:	4082      	lsls	r2, r0
 801617e:	4322      	orrs	r2, r4
 8016180:	4547      	cmp	r7, r8
 8016182:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016186:	bf8c      	ite	hi
 8016188:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801618c:	2200      	movls	r2, #0
 801618e:	4083      	lsls	r3, r0
 8016190:	40ca      	lsrs	r2, r1
 8016192:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016196:	4313      	orrs	r3, r2
 8016198:	e7de      	b.n	8016158 <__b2d+0x48>
 801619a:	ea42 0501 	orr.w	r5, r2, r1
 801619e:	e7db      	b.n	8016158 <__b2d+0x48>
 80161a0:	3ff00000 	.word	0x3ff00000

080161a4 <__d2b>:
 80161a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80161a8:	460f      	mov	r7, r1
 80161aa:	2101      	movs	r1, #1
 80161ac:	ec59 8b10 	vmov	r8, r9, d0
 80161b0:	4616      	mov	r6, r2
 80161b2:	f7ff fc1b 	bl	80159ec <_Balloc>
 80161b6:	4604      	mov	r4, r0
 80161b8:	b930      	cbnz	r0, 80161c8 <__d2b+0x24>
 80161ba:	4602      	mov	r2, r0
 80161bc:	4b23      	ldr	r3, [pc, #140]	@ (801624c <__d2b+0xa8>)
 80161be:	4824      	ldr	r0, [pc, #144]	@ (8016250 <__d2b+0xac>)
 80161c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80161c4:	f001 fb50 	bl	8017868 <__assert_func>
 80161c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80161cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80161d0:	b10d      	cbz	r5, 80161d6 <__d2b+0x32>
 80161d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80161d6:	9301      	str	r3, [sp, #4]
 80161d8:	f1b8 0300 	subs.w	r3, r8, #0
 80161dc:	d023      	beq.n	8016226 <__d2b+0x82>
 80161de:	4668      	mov	r0, sp
 80161e0:	9300      	str	r3, [sp, #0]
 80161e2:	f7ff fd14 	bl	8015c0e <__lo0bits>
 80161e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80161ea:	b1d0      	cbz	r0, 8016222 <__d2b+0x7e>
 80161ec:	f1c0 0320 	rsb	r3, r0, #32
 80161f0:	fa02 f303 	lsl.w	r3, r2, r3
 80161f4:	430b      	orrs	r3, r1
 80161f6:	40c2      	lsrs	r2, r0
 80161f8:	6163      	str	r3, [r4, #20]
 80161fa:	9201      	str	r2, [sp, #4]
 80161fc:	9b01      	ldr	r3, [sp, #4]
 80161fe:	61a3      	str	r3, [r4, #24]
 8016200:	2b00      	cmp	r3, #0
 8016202:	bf0c      	ite	eq
 8016204:	2201      	moveq	r2, #1
 8016206:	2202      	movne	r2, #2
 8016208:	6122      	str	r2, [r4, #16]
 801620a:	b1a5      	cbz	r5, 8016236 <__d2b+0x92>
 801620c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016210:	4405      	add	r5, r0
 8016212:	603d      	str	r5, [r7, #0]
 8016214:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016218:	6030      	str	r0, [r6, #0]
 801621a:	4620      	mov	r0, r4
 801621c:	b003      	add	sp, #12
 801621e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016222:	6161      	str	r1, [r4, #20]
 8016224:	e7ea      	b.n	80161fc <__d2b+0x58>
 8016226:	a801      	add	r0, sp, #4
 8016228:	f7ff fcf1 	bl	8015c0e <__lo0bits>
 801622c:	9b01      	ldr	r3, [sp, #4]
 801622e:	6163      	str	r3, [r4, #20]
 8016230:	3020      	adds	r0, #32
 8016232:	2201      	movs	r2, #1
 8016234:	e7e8      	b.n	8016208 <__d2b+0x64>
 8016236:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801623a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801623e:	6038      	str	r0, [r7, #0]
 8016240:	6918      	ldr	r0, [r3, #16]
 8016242:	f7ff fcc5 	bl	8015bd0 <__hi0bits>
 8016246:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801624a:	e7e5      	b.n	8016218 <__d2b+0x74>
 801624c:	0801a499 	.word	0x0801a499
 8016250:	0801a4aa 	.word	0x0801a4aa

08016254 <__ratio>:
 8016254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016258:	b085      	sub	sp, #20
 801625a:	e9cd 1000 	strd	r1, r0, [sp]
 801625e:	a902      	add	r1, sp, #8
 8016260:	f7ff ff56 	bl	8016110 <__b2d>
 8016264:	9800      	ldr	r0, [sp, #0]
 8016266:	a903      	add	r1, sp, #12
 8016268:	ec55 4b10 	vmov	r4, r5, d0
 801626c:	f7ff ff50 	bl	8016110 <__b2d>
 8016270:	9b01      	ldr	r3, [sp, #4]
 8016272:	6919      	ldr	r1, [r3, #16]
 8016274:	9b00      	ldr	r3, [sp, #0]
 8016276:	691b      	ldr	r3, [r3, #16]
 8016278:	1ac9      	subs	r1, r1, r3
 801627a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801627e:	1a9b      	subs	r3, r3, r2
 8016280:	ec5b ab10 	vmov	sl, fp, d0
 8016284:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016288:	2b00      	cmp	r3, #0
 801628a:	bfce      	itee	gt
 801628c:	462a      	movgt	r2, r5
 801628e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016292:	465a      	movle	r2, fp
 8016294:	462f      	mov	r7, r5
 8016296:	46d9      	mov	r9, fp
 8016298:	bfcc      	ite	gt
 801629a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801629e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80162a2:	464b      	mov	r3, r9
 80162a4:	4652      	mov	r2, sl
 80162a6:	4620      	mov	r0, r4
 80162a8:	4639      	mov	r1, r7
 80162aa:	f7ea fad7 	bl	800085c <__aeabi_ddiv>
 80162ae:	ec41 0b10 	vmov	d0, r0, r1
 80162b2:	b005      	add	sp, #20
 80162b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080162b8 <__copybits>:
 80162b8:	3901      	subs	r1, #1
 80162ba:	b570      	push	{r4, r5, r6, lr}
 80162bc:	1149      	asrs	r1, r1, #5
 80162be:	6914      	ldr	r4, [r2, #16]
 80162c0:	3101      	adds	r1, #1
 80162c2:	f102 0314 	add.w	r3, r2, #20
 80162c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80162ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80162ce:	1f05      	subs	r5, r0, #4
 80162d0:	42a3      	cmp	r3, r4
 80162d2:	d30c      	bcc.n	80162ee <__copybits+0x36>
 80162d4:	1aa3      	subs	r3, r4, r2
 80162d6:	3b11      	subs	r3, #17
 80162d8:	f023 0303 	bic.w	r3, r3, #3
 80162dc:	3211      	adds	r2, #17
 80162de:	42a2      	cmp	r2, r4
 80162e0:	bf88      	it	hi
 80162e2:	2300      	movhi	r3, #0
 80162e4:	4418      	add	r0, r3
 80162e6:	2300      	movs	r3, #0
 80162e8:	4288      	cmp	r0, r1
 80162ea:	d305      	bcc.n	80162f8 <__copybits+0x40>
 80162ec:	bd70      	pop	{r4, r5, r6, pc}
 80162ee:	f853 6b04 	ldr.w	r6, [r3], #4
 80162f2:	f845 6f04 	str.w	r6, [r5, #4]!
 80162f6:	e7eb      	b.n	80162d0 <__copybits+0x18>
 80162f8:	f840 3b04 	str.w	r3, [r0], #4
 80162fc:	e7f4      	b.n	80162e8 <__copybits+0x30>

080162fe <__any_on>:
 80162fe:	f100 0214 	add.w	r2, r0, #20
 8016302:	6900      	ldr	r0, [r0, #16]
 8016304:	114b      	asrs	r3, r1, #5
 8016306:	4298      	cmp	r0, r3
 8016308:	b510      	push	{r4, lr}
 801630a:	db11      	blt.n	8016330 <__any_on+0x32>
 801630c:	dd0a      	ble.n	8016324 <__any_on+0x26>
 801630e:	f011 011f 	ands.w	r1, r1, #31
 8016312:	d007      	beq.n	8016324 <__any_on+0x26>
 8016314:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016318:	fa24 f001 	lsr.w	r0, r4, r1
 801631c:	fa00 f101 	lsl.w	r1, r0, r1
 8016320:	428c      	cmp	r4, r1
 8016322:	d10b      	bne.n	801633c <__any_on+0x3e>
 8016324:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016328:	4293      	cmp	r3, r2
 801632a:	d803      	bhi.n	8016334 <__any_on+0x36>
 801632c:	2000      	movs	r0, #0
 801632e:	bd10      	pop	{r4, pc}
 8016330:	4603      	mov	r3, r0
 8016332:	e7f7      	b.n	8016324 <__any_on+0x26>
 8016334:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016338:	2900      	cmp	r1, #0
 801633a:	d0f5      	beq.n	8016328 <__any_on+0x2a>
 801633c:	2001      	movs	r0, #1
 801633e:	e7f6      	b.n	801632e <__any_on+0x30>

08016340 <sulp>:
 8016340:	b570      	push	{r4, r5, r6, lr}
 8016342:	4604      	mov	r4, r0
 8016344:	460d      	mov	r5, r1
 8016346:	ec45 4b10 	vmov	d0, r4, r5
 801634a:	4616      	mov	r6, r2
 801634c:	f7ff feba 	bl	80160c4 <__ulp>
 8016350:	ec51 0b10 	vmov	r0, r1, d0
 8016354:	b17e      	cbz	r6, 8016376 <sulp+0x36>
 8016356:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801635a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801635e:	2b00      	cmp	r3, #0
 8016360:	dd09      	ble.n	8016376 <sulp+0x36>
 8016362:	051b      	lsls	r3, r3, #20
 8016364:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8016368:	2400      	movs	r4, #0
 801636a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801636e:	4622      	mov	r2, r4
 8016370:	462b      	mov	r3, r5
 8016372:	f7ea f949 	bl	8000608 <__aeabi_dmul>
 8016376:	ec41 0b10 	vmov	d0, r0, r1
 801637a:	bd70      	pop	{r4, r5, r6, pc}
 801637c:	0000      	movs	r0, r0
	...

08016380 <_strtod_l>:
 8016380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016384:	b09f      	sub	sp, #124	@ 0x7c
 8016386:	460c      	mov	r4, r1
 8016388:	9217      	str	r2, [sp, #92]	@ 0x5c
 801638a:	2200      	movs	r2, #0
 801638c:	921a      	str	r2, [sp, #104]	@ 0x68
 801638e:	9005      	str	r0, [sp, #20]
 8016390:	f04f 0a00 	mov.w	sl, #0
 8016394:	f04f 0b00 	mov.w	fp, #0
 8016398:	460a      	mov	r2, r1
 801639a:	9219      	str	r2, [sp, #100]	@ 0x64
 801639c:	7811      	ldrb	r1, [r2, #0]
 801639e:	292b      	cmp	r1, #43	@ 0x2b
 80163a0:	d04a      	beq.n	8016438 <_strtod_l+0xb8>
 80163a2:	d838      	bhi.n	8016416 <_strtod_l+0x96>
 80163a4:	290d      	cmp	r1, #13
 80163a6:	d832      	bhi.n	801640e <_strtod_l+0x8e>
 80163a8:	2908      	cmp	r1, #8
 80163aa:	d832      	bhi.n	8016412 <_strtod_l+0x92>
 80163ac:	2900      	cmp	r1, #0
 80163ae:	d03b      	beq.n	8016428 <_strtod_l+0xa8>
 80163b0:	2200      	movs	r2, #0
 80163b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80163b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80163b6:	782a      	ldrb	r2, [r5, #0]
 80163b8:	2a30      	cmp	r2, #48	@ 0x30
 80163ba:	f040 80b2 	bne.w	8016522 <_strtod_l+0x1a2>
 80163be:	786a      	ldrb	r2, [r5, #1]
 80163c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80163c4:	2a58      	cmp	r2, #88	@ 0x58
 80163c6:	d16e      	bne.n	80164a6 <_strtod_l+0x126>
 80163c8:	9302      	str	r3, [sp, #8]
 80163ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163cc:	9301      	str	r3, [sp, #4]
 80163ce:	ab1a      	add	r3, sp, #104	@ 0x68
 80163d0:	9300      	str	r3, [sp, #0]
 80163d2:	4a8f      	ldr	r2, [pc, #572]	@ (8016610 <_strtod_l+0x290>)
 80163d4:	9805      	ldr	r0, [sp, #20]
 80163d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80163d8:	a919      	add	r1, sp, #100	@ 0x64
 80163da:	f001 fadf 	bl	801799c <__gethex>
 80163de:	f010 060f 	ands.w	r6, r0, #15
 80163e2:	4604      	mov	r4, r0
 80163e4:	d005      	beq.n	80163f2 <_strtod_l+0x72>
 80163e6:	2e06      	cmp	r6, #6
 80163e8:	d128      	bne.n	801643c <_strtod_l+0xbc>
 80163ea:	3501      	adds	r5, #1
 80163ec:	2300      	movs	r3, #0
 80163ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80163f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80163f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	f040 858e 	bne.w	8016f16 <_strtod_l+0xb96>
 80163fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163fc:	b1cb      	cbz	r3, 8016432 <_strtod_l+0xb2>
 80163fe:	4652      	mov	r2, sl
 8016400:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016404:	ec43 2b10 	vmov	d0, r2, r3
 8016408:	b01f      	add	sp, #124	@ 0x7c
 801640a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801640e:	2920      	cmp	r1, #32
 8016410:	d1ce      	bne.n	80163b0 <_strtod_l+0x30>
 8016412:	3201      	adds	r2, #1
 8016414:	e7c1      	b.n	801639a <_strtod_l+0x1a>
 8016416:	292d      	cmp	r1, #45	@ 0x2d
 8016418:	d1ca      	bne.n	80163b0 <_strtod_l+0x30>
 801641a:	2101      	movs	r1, #1
 801641c:	910e      	str	r1, [sp, #56]	@ 0x38
 801641e:	1c51      	adds	r1, r2, #1
 8016420:	9119      	str	r1, [sp, #100]	@ 0x64
 8016422:	7852      	ldrb	r2, [r2, #1]
 8016424:	2a00      	cmp	r2, #0
 8016426:	d1c5      	bne.n	80163b4 <_strtod_l+0x34>
 8016428:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801642a:	9419      	str	r4, [sp, #100]	@ 0x64
 801642c:	2b00      	cmp	r3, #0
 801642e:	f040 8570 	bne.w	8016f12 <_strtod_l+0xb92>
 8016432:	4652      	mov	r2, sl
 8016434:	465b      	mov	r3, fp
 8016436:	e7e5      	b.n	8016404 <_strtod_l+0x84>
 8016438:	2100      	movs	r1, #0
 801643a:	e7ef      	b.n	801641c <_strtod_l+0x9c>
 801643c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801643e:	b13a      	cbz	r2, 8016450 <_strtod_l+0xd0>
 8016440:	2135      	movs	r1, #53	@ 0x35
 8016442:	a81c      	add	r0, sp, #112	@ 0x70
 8016444:	f7ff ff38 	bl	80162b8 <__copybits>
 8016448:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801644a:	9805      	ldr	r0, [sp, #20]
 801644c:	f7ff fb0e 	bl	8015a6c <_Bfree>
 8016450:	3e01      	subs	r6, #1
 8016452:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016454:	2e04      	cmp	r6, #4
 8016456:	d806      	bhi.n	8016466 <_strtod_l+0xe6>
 8016458:	e8df f006 	tbb	[pc, r6]
 801645c:	201d0314 	.word	0x201d0314
 8016460:	14          	.byte	0x14
 8016461:	00          	.byte	0x00
 8016462:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8016466:	05e1      	lsls	r1, r4, #23
 8016468:	bf48      	it	mi
 801646a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801646e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016472:	0d1b      	lsrs	r3, r3, #20
 8016474:	051b      	lsls	r3, r3, #20
 8016476:	2b00      	cmp	r3, #0
 8016478:	d1bb      	bne.n	80163f2 <_strtod_l+0x72>
 801647a:	f7fe fbe1 	bl	8014c40 <__errno>
 801647e:	2322      	movs	r3, #34	@ 0x22
 8016480:	6003      	str	r3, [r0, #0]
 8016482:	e7b6      	b.n	80163f2 <_strtod_l+0x72>
 8016484:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016488:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801648c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016490:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016494:	e7e7      	b.n	8016466 <_strtod_l+0xe6>
 8016496:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8016618 <_strtod_l+0x298>
 801649a:	e7e4      	b.n	8016466 <_strtod_l+0xe6>
 801649c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80164a0:	f04f 3aff 	mov.w	sl, #4294967295
 80164a4:	e7df      	b.n	8016466 <_strtod_l+0xe6>
 80164a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80164a8:	1c5a      	adds	r2, r3, #1
 80164aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80164ac:	785b      	ldrb	r3, [r3, #1]
 80164ae:	2b30      	cmp	r3, #48	@ 0x30
 80164b0:	d0f9      	beq.n	80164a6 <_strtod_l+0x126>
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d09d      	beq.n	80163f2 <_strtod_l+0x72>
 80164b6:	2301      	movs	r3, #1
 80164b8:	2700      	movs	r7, #0
 80164ba:	9308      	str	r3, [sp, #32]
 80164bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80164be:	930c      	str	r3, [sp, #48]	@ 0x30
 80164c0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80164c2:	46b9      	mov	r9, r7
 80164c4:	220a      	movs	r2, #10
 80164c6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80164c8:	7805      	ldrb	r5, [r0, #0]
 80164ca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80164ce:	b2d9      	uxtb	r1, r3
 80164d0:	2909      	cmp	r1, #9
 80164d2:	d928      	bls.n	8016526 <_strtod_l+0x1a6>
 80164d4:	494f      	ldr	r1, [pc, #316]	@ (8016614 <_strtod_l+0x294>)
 80164d6:	2201      	movs	r2, #1
 80164d8:	f001 f97a 	bl	80177d0 <strncmp>
 80164dc:	2800      	cmp	r0, #0
 80164de:	d032      	beq.n	8016546 <_strtod_l+0x1c6>
 80164e0:	2000      	movs	r0, #0
 80164e2:	462a      	mov	r2, r5
 80164e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80164e6:	464d      	mov	r5, r9
 80164e8:	4603      	mov	r3, r0
 80164ea:	2a65      	cmp	r2, #101	@ 0x65
 80164ec:	d001      	beq.n	80164f2 <_strtod_l+0x172>
 80164ee:	2a45      	cmp	r2, #69	@ 0x45
 80164f0:	d114      	bne.n	801651c <_strtod_l+0x19c>
 80164f2:	b91d      	cbnz	r5, 80164fc <_strtod_l+0x17c>
 80164f4:	9a08      	ldr	r2, [sp, #32]
 80164f6:	4302      	orrs	r2, r0
 80164f8:	d096      	beq.n	8016428 <_strtod_l+0xa8>
 80164fa:	2500      	movs	r5, #0
 80164fc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80164fe:	1c62      	adds	r2, r4, #1
 8016500:	9219      	str	r2, [sp, #100]	@ 0x64
 8016502:	7862      	ldrb	r2, [r4, #1]
 8016504:	2a2b      	cmp	r2, #43	@ 0x2b
 8016506:	d07a      	beq.n	80165fe <_strtod_l+0x27e>
 8016508:	2a2d      	cmp	r2, #45	@ 0x2d
 801650a:	d07e      	beq.n	801660a <_strtod_l+0x28a>
 801650c:	f04f 0c00 	mov.w	ip, #0
 8016510:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016514:	2909      	cmp	r1, #9
 8016516:	f240 8085 	bls.w	8016624 <_strtod_l+0x2a4>
 801651a:	9419      	str	r4, [sp, #100]	@ 0x64
 801651c:	f04f 0800 	mov.w	r8, #0
 8016520:	e0a5      	b.n	801666e <_strtod_l+0x2ee>
 8016522:	2300      	movs	r3, #0
 8016524:	e7c8      	b.n	80164b8 <_strtod_l+0x138>
 8016526:	f1b9 0f08 	cmp.w	r9, #8
 801652a:	bfd8      	it	le
 801652c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801652e:	f100 0001 	add.w	r0, r0, #1
 8016532:	bfda      	itte	le
 8016534:	fb02 3301 	mlale	r3, r2, r1, r3
 8016538:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801653a:	fb02 3707 	mlagt	r7, r2, r7, r3
 801653e:	f109 0901 	add.w	r9, r9, #1
 8016542:	9019      	str	r0, [sp, #100]	@ 0x64
 8016544:	e7bf      	b.n	80164c6 <_strtod_l+0x146>
 8016546:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016548:	1c5a      	adds	r2, r3, #1
 801654a:	9219      	str	r2, [sp, #100]	@ 0x64
 801654c:	785a      	ldrb	r2, [r3, #1]
 801654e:	f1b9 0f00 	cmp.w	r9, #0
 8016552:	d03b      	beq.n	80165cc <_strtod_l+0x24c>
 8016554:	900a      	str	r0, [sp, #40]	@ 0x28
 8016556:	464d      	mov	r5, r9
 8016558:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801655c:	2b09      	cmp	r3, #9
 801655e:	d912      	bls.n	8016586 <_strtod_l+0x206>
 8016560:	2301      	movs	r3, #1
 8016562:	e7c2      	b.n	80164ea <_strtod_l+0x16a>
 8016564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016566:	1c5a      	adds	r2, r3, #1
 8016568:	9219      	str	r2, [sp, #100]	@ 0x64
 801656a:	785a      	ldrb	r2, [r3, #1]
 801656c:	3001      	adds	r0, #1
 801656e:	2a30      	cmp	r2, #48	@ 0x30
 8016570:	d0f8      	beq.n	8016564 <_strtod_l+0x1e4>
 8016572:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016576:	2b08      	cmp	r3, #8
 8016578:	f200 84d2 	bhi.w	8016f20 <_strtod_l+0xba0>
 801657c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801657e:	900a      	str	r0, [sp, #40]	@ 0x28
 8016580:	2000      	movs	r0, #0
 8016582:	930c      	str	r3, [sp, #48]	@ 0x30
 8016584:	4605      	mov	r5, r0
 8016586:	3a30      	subs	r2, #48	@ 0x30
 8016588:	f100 0301 	add.w	r3, r0, #1
 801658c:	d018      	beq.n	80165c0 <_strtod_l+0x240>
 801658e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016590:	4419      	add	r1, r3
 8016592:	910a      	str	r1, [sp, #40]	@ 0x28
 8016594:	462e      	mov	r6, r5
 8016596:	f04f 0e0a 	mov.w	lr, #10
 801659a:	1c71      	adds	r1, r6, #1
 801659c:	eba1 0c05 	sub.w	ip, r1, r5
 80165a0:	4563      	cmp	r3, ip
 80165a2:	dc15      	bgt.n	80165d0 <_strtod_l+0x250>
 80165a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80165a8:	182b      	adds	r3, r5, r0
 80165aa:	2b08      	cmp	r3, #8
 80165ac:	f105 0501 	add.w	r5, r5, #1
 80165b0:	4405      	add	r5, r0
 80165b2:	dc1a      	bgt.n	80165ea <_strtod_l+0x26a>
 80165b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80165b6:	230a      	movs	r3, #10
 80165b8:	fb03 2301 	mla	r3, r3, r1, r2
 80165bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80165be:	2300      	movs	r3, #0
 80165c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80165c2:	1c51      	adds	r1, r2, #1
 80165c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80165c6:	7852      	ldrb	r2, [r2, #1]
 80165c8:	4618      	mov	r0, r3
 80165ca:	e7c5      	b.n	8016558 <_strtod_l+0x1d8>
 80165cc:	4648      	mov	r0, r9
 80165ce:	e7ce      	b.n	801656e <_strtod_l+0x1ee>
 80165d0:	2e08      	cmp	r6, #8
 80165d2:	dc05      	bgt.n	80165e0 <_strtod_l+0x260>
 80165d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80165d6:	fb0e f606 	mul.w	r6, lr, r6
 80165da:	960b      	str	r6, [sp, #44]	@ 0x2c
 80165dc:	460e      	mov	r6, r1
 80165de:	e7dc      	b.n	801659a <_strtod_l+0x21a>
 80165e0:	2910      	cmp	r1, #16
 80165e2:	bfd8      	it	le
 80165e4:	fb0e f707 	mulle.w	r7, lr, r7
 80165e8:	e7f8      	b.n	80165dc <_strtod_l+0x25c>
 80165ea:	2b0f      	cmp	r3, #15
 80165ec:	bfdc      	itt	le
 80165ee:	230a      	movle	r3, #10
 80165f0:	fb03 2707 	mlale	r7, r3, r7, r2
 80165f4:	e7e3      	b.n	80165be <_strtod_l+0x23e>
 80165f6:	2300      	movs	r3, #0
 80165f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80165fa:	2301      	movs	r3, #1
 80165fc:	e77a      	b.n	80164f4 <_strtod_l+0x174>
 80165fe:	f04f 0c00 	mov.w	ip, #0
 8016602:	1ca2      	adds	r2, r4, #2
 8016604:	9219      	str	r2, [sp, #100]	@ 0x64
 8016606:	78a2      	ldrb	r2, [r4, #2]
 8016608:	e782      	b.n	8016510 <_strtod_l+0x190>
 801660a:	f04f 0c01 	mov.w	ip, #1
 801660e:	e7f8      	b.n	8016602 <_strtod_l+0x282>
 8016610:	0801a6cc 	.word	0x0801a6cc
 8016614:	0801a503 	.word	0x0801a503
 8016618:	7ff00000 	.word	0x7ff00000
 801661c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801661e:	1c51      	adds	r1, r2, #1
 8016620:	9119      	str	r1, [sp, #100]	@ 0x64
 8016622:	7852      	ldrb	r2, [r2, #1]
 8016624:	2a30      	cmp	r2, #48	@ 0x30
 8016626:	d0f9      	beq.n	801661c <_strtod_l+0x29c>
 8016628:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801662c:	2908      	cmp	r1, #8
 801662e:	f63f af75 	bhi.w	801651c <_strtod_l+0x19c>
 8016632:	3a30      	subs	r2, #48	@ 0x30
 8016634:	9209      	str	r2, [sp, #36]	@ 0x24
 8016636:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016638:	920f      	str	r2, [sp, #60]	@ 0x3c
 801663a:	f04f 080a 	mov.w	r8, #10
 801663e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016640:	1c56      	adds	r6, r2, #1
 8016642:	9619      	str	r6, [sp, #100]	@ 0x64
 8016644:	7852      	ldrb	r2, [r2, #1]
 8016646:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801664a:	f1be 0f09 	cmp.w	lr, #9
 801664e:	d939      	bls.n	80166c4 <_strtod_l+0x344>
 8016650:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016652:	1a76      	subs	r6, r6, r1
 8016654:	2e08      	cmp	r6, #8
 8016656:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801665a:	dc03      	bgt.n	8016664 <_strtod_l+0x2e4>
 801665c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801665e:	4588      	cmp	r8, r1
 8016660:	bfa8      	it	ge
 8016662:	4688      	movge	r8, r1
 8016664:	f1bc 0f00 	cmp.w	ip, #0
 8016668:	d001      	beq.n	801666e <_strtod_l+0x2ee>
 801666a:	f1c8 0800 	rsb	r8, r8, #0
 801666e:	2d00      	cmp	r5, #0
 8016670:	d14e      	bne.n	8016710 <_strtod_l+0x390>
 8016672:	9908      	ldr	r1, [sp, #32]
 8016674:	4308      	orrs	r0, r1
 8016676:	f47f aebc 	bne.w	80163f2 <_strtod_l+0x72>
 801667a:	2b00      	cmp	r3, #0
 801667c:	f47f aed4 	bne.w	8016428 <_strtod_l+0xa8>
 8016680:	2a69      	cmp	r2, #105	@ 0x69
 8016682:	d028      	beq.n	80166d6 <_strtod_l+0x356>
 8016684:	dc25      	bgt.n	80166d2 <_strtod_l+0x352>
 8016686:	2a49      	cmp	r2, #73	@ 0x49
 8016688:	d025      	beq.n	80166d6 <_strtod_l+0x356>
 801668a:	2a4e      	cmp	r2, #78	@ 0x4e
 801668c:	f47f aecc 	bne.w	8016428 <_strtod_l+0xa8>
 8016690:	499a      	ldr	r1, [pc, #616]	@ (80168fc <_strtod_l+0x57c>)
 8016692:	a819      	add	r0, sp, #100	@ 0x64
 8016694:	f001 fba4 	bl	8017de0 <__match>
 8016698:	2800      	cmp	r0, #0
 801669a:	f43f aec5 	beq.w	8016428 <_strtod_l+0xa8>
 801669e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80166a0:	781b      	ldrb	r3, [r3, #0]
 80166a2:	2b28      	cmp	r3, #40	@ 0x28
 80166a4:	d12e      	bne.n	8016704 <_strtod_l+0x384>
 80166a6:	4996      	ldr	r1, [pc, #600]	@ (8016900 <_strtod_l+0x580>)
 80166a8:	aa1c      	add	r2, sp, #112	@ 0x70
 80166aa:	a819      	add	r0, sp, #100	@ 0x64
 80166ac:	f001 fbac 	bl	8017e08 <__hexnan>
 80166b0:	2805      	cmp	r0, #5
 80166b2:	d127      	bne.n	8016704 <_strtod_l+0x384>
 80166b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80166b6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80166ba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80166be:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80166c2:	e696      	b.n	80163f2 <_strtod_l+0x72>
 80166c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80166c6:	fb08 2101 	mla	r1, r8, r1, r2
 80166ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80166ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80166d0:	e7b5      	b.n	801663e <_strtod_l+0x2be>
 80166d2:	2a6e      	cmp	r2, #110	@ 0x6e
 80166d4:	e7da      	b.n	801668c <_strtod_l+0x30c>
 80166d6:	498b      	ldr	r1, [pc, #556]	@ (8016904 <_strtod_l+0x584>)
 80166d8:	a819      	add	r0, sp, #100	@ 0x64
 80166da:	f001 fb81 	bl	8017de0 <__match>
 80166de:	2800      	cmp	r0, #0
 80166e0:	f43f aea2 	beq.w	8016428 <_strtod_l+0xa8>
 80166e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80166e6:	4988      	ldr	r1, [pc, #544]	@ (8016908 <_strtod_l+0x588>)
 80166e8:	3b01      	subs	r3, #1
 80166ea:	a819      	add	r0, sp, #100	@ 0x64
 80166ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80166ee:	f001 fb77 	bl	8017de0 <__match>
 80166f2:	b910      	cbnz	r0, 80166fa <_strtod_l+0x37a>
 80166f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80166f6:	3301      	adds	r3, #1
 80166f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80166fa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8016918 <_strtod_l+0x598>
 80166fe:	f04f 0a00 	mov.w	sl, #0
 8016702:	e676      	b.n	80163f2 <_strtod_l+0x72>
 8016704:	4881      	ldr	r0, [pc, #516]	@ (801690c <_strtod_l+0x58c>)
 8016706:	f001 f8a7 	bl	8017858 <nan>
 801670a:	ec5b ab10 	vmov	sl, fp, d0
 801670e:	e670      	b.n	80163f2 <_strtod_l+0x72>
 8016710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016712:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016714:	eba8 0303 	sub.w	r3, r8, r3
 8016718:	f1b9 0f00 	cmp.w	r9, #0
 801671c:	bf08      	it	eq
 801671e:	46a9      	moveq	r9, r5
 8016720:	2d10      	cmp	r5, #16
 8016722:	9309      	str	r3, [sp, #36]	@ 0x24
 8016724:	462c      	mov	r4, r5
 8016726:	bfa8      	it	ge
 8016728:	2410      	movge	r4, #16
 801672a:	f7e9 fef3 	bl	8000514 <__aeabi_ui2d>
 801672e:	2d09      	cmp	r5, #9
 8016730:	4682      	mov	sl, r0
 8016732:	468b      	mov	fp, r1
 8016734:	dc13      	bgt.n	801675e <_strtod_l+0x3de>
 8016736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016738:	2b00      	cmp	r3, #0
 801673a:	f43f ae5a 	beq.w	80163f2 <_strtod_l+0x72>
 801673e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016740:	dd78      	ble.n	8016834 <_strtod_l+0x4b4>
 8016742:	2b16      	cmp	r3, #22
 8016744:	dc5f      	bgt.n	8016806 <_strtod_l+0x486>
 8016746:	4972      	ldr	r1, [pc, #456]	@ (8016910 <_strtod_l+0x590>)
 8016748:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801674c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016750:	4652      	mov	r2, sl
 8016752:	465b      	mov	r3, fp
 8016754:	f7e9 ff58 	bl	8000608 <__aeabi_dmul>
 8016758:	4682      	mov	sl, r0
 801675a:	468b      	mov	fp, r1
 801675c:	e649      	b.n	80163f2 <_strtod_l+0x72>
 801675e:	4b6c      	ldr	r3, [pc, #432]	@ (8016910 <_strtod_l+0x590>)
 8016760:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016764:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016768:	f7e9 ff4e 	bl	8000608 <__aeabi_dmul>
 801676c:	4682      	mov	sl, r0
 801676e:	4638      	mov	r0, r7
 8016770:	468b      	mov	fp, r1
 8016772:	f7e9 fecf 	bl	8000514 <__aeabi_ui2d>
 8016776:	4602      	mov	r2, r0
 8016778:	460b      	mov	r3, r1
 801677a:	4650      	mov	r0, sl
 801677c:	4659      	mov	r1, fp
 801677e:	f7e9 fd8d 	bl	800029c <__adddf3>
 8016782:	2d0f      	cmp	r5, #15
 8016784:	4682      	mov	sl, r0
 8016786:	468b      	mov	fp, r1
 8016788:	ddd5      	ble.n	8016736 <_strtod_l+0x3b6>
 801678a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801678c:	1b2c      	subs	r4, r5, r4
 801678e:	441c      	add	r4, r3
 8016790:	2c00      	cmp	r4, #0
 8016792:	f340 8093 	ble.w	80168bc <_strtod_l+0x53c>
 8016796:	f014 030f 	ands.w	r3, r4, #15
 801679a:	d00a      	beq.n	80167b2 <_strtod_l+0x432>
 801679c:	495c      	ldr	r1, [pc, #368]	@ (8016910 <_strtod_l+0x590>)
 801679e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80167a2:	4652      	mov	r2, sl
 80167a4:	465b      	mov	r3, fp
 80167a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167aa:	f7e9 ff2d 	bl	8000608 <__aeabi_dmul>
 80167ae:	4682      	mov	sl, r0
 80167b0:	468b      	mov	fp, r1
 80167b2:	f034 040f 	bics.w	r4, r4, #15
 80167b6:	d073      	beq.n	80168a0 <_strtod_l+0x520>
 80167b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80167bc:	dd49      	ble.n	8016852 <_strtod_l+0x4d2>
 80167be:	2400      	movs	r4, #0
 80167c0:	46a0      	mov	r8, r4
 80167c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80167c4:	46a1      	mov	r9, r4
 80167c6:	9a05      	ldr	r2, [sp, #20]
 80167c8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8016918 <_strtod_l+0x598>
 80167cc:	2322      	movs	r3, #34	@ 0x22
 80167ce:	6013      	str	r3, [r2, #0]
 80167d0:	f04f 0a00 	mov.w	sl, #0
 80167d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	f43f ae0b 	beq.w	80163f2 <_strtod_l+0x72>
 80167dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80167de:	9805      	ldr	r0, [sp, #20]
 80167e0:	f7ff f944 	bl	8015a6c <_Bfree>
 80167e4:	9805      	ldr	r0, [sp, #20]
 80167e6:	4649      	mov	r1, r9
 80167e8:	f7ff f940 	bl	8015a6c <_Bfree>
 80167ec:	9805      	ldr	r0, [sp, #20]
 80167ee:	4641      	mov	r1, r8
 80167f0:	f7ff f93c 	bl	8015a6c <_Bfree>
 80167f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80167f6:	9805      	ldr	r0, [sp, #20]
 80167f8:	f7ff f938 	bl	8015a6c <_Bfree>
 80167fc:	9805      	ldr	r0, [sp, #20]
 80167fe:	4621      	mov	r1, r4
 8016800:	f7ff f934 	bl	8015a6c <_Bfree>
 8016804:	e5f5      	b.n	80163f2 <_strtod_l+0x72>
 8016806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016808:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801680c:	4293      	cmp	r3, r2
 801680e:	dbbc      	blt.n	801678a <_strtod_l+0x40a>
 8016810:	4c3f      	ldr	r4, [pc, #252]	@ (8016910 <_strtod_l+0x590>)
 8016812:	f1c5 050f 	rsb	r5, r5, #15
 8016816:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801681a:	4652      	mov	r2, sl
 801681c:	465b      	mov	r3, fp
 801681e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016822:	f7e9 fef1 	bl	8000608 <__aeabi_dmul>
 8016826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016828:	1b5d      	subs	r5, r3, r5
 801682a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801682e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016832:	e78f      	b.n	8016754 <_strtod_l+0x3d4>
 8016834:	3316      	adds	r3, #22
 8016836:	dba8      	blt.n	801678a <_strtod_l+0x40a>
 8016838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801683a:	eba3 0808 	sub.w	r8, r3, r8
 801683e:	4b34      	ldr	r3, [pc, #208]	@ (8016910 <_strtod_l+0x590>)
 8016840:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8016844:	e9d8 2300 	ldrd	r2, r3, [r8]
 8016848:	4650      	mov	r0, sl
 801684a:	4659      	mov	r1, fp
 801684c:	f7ea f806 	bl	800085c <__aeabi_ddiv>
 8016850:	e782      	b.n	8016758 <_strtod_l+0x3d8>
 8016852:	2300      	movs	r3, #0
 8016854:	4f2f      	ldr	r7, [pc, #188]	@ (8016914 <_strtod_l+0x594>)
 8016856:	1124      	asrs	r4, r4, #4
 8016858:	4650      	mov	r0, sl
 801685a:	4659      	mov	r1, fp
 801685c:	461e      	mov	r6, r3
 801685e:	2c01      	cmp	r4, #1
 8016860:	dc21      	bgt.n	80168a6 <_strtod_l+0x526>
 8016862:	b10b      	cbz	r3, 8016868 <_strtod_l+0x4e8>
 8016864:	4682      	mov	sl, r0
 8016866:	468b      	mov	fp, r1
 8016868:	492a      	ldr	r1, [pc, #168]	@ (8016914 <_strtod_l+0x594>)
 801686a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801686e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8016872:	4652      	mov	r2, sl
 8016874:	465b      	mov	r3, fp
 8016876:	e9d1 0100 	ldrd	r0, r1, [r1]
 801687a:	f7e9 fec5 	bl	8000608 <__aeabi_dmul>
 801687e:	4b26      	ldr	r3, [pc, #152]	@ (8016918 <_strtod_l+0x598>)
 8016880:	460a      	mov	r2, r1
 8016882:	400b      	ands	r3, r1
 8016884:	4925      	ldr	r1, [pc, #148]	@ (801691c <_strtod_l+0x59c>)
 8016886:	428b      	cmp	r3, r1
 8016888:	4682      	mov	sl, r0
 801688a:	d898      	bhi.n	80167be <_strtod_l+0x43e>
 801688c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8016890:	428b      	cmp	r3, r1
 8016892:	bf86      	itte	hi
 8016894:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8016920 <_strtod_l+0x5a0>
 8016898:	f04f 3aff 	movhi.w	sl, #4294967295
 801689c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80168a0:	2300      	movs	r3, #0
 80168a2:	9308      	str	r3, [sp, #32]
 80168a4:	e076      	b.n	8016994 <_strtod_l+0x614>
 80168a6:	07e2      	lsls	r2, r4, #31
 80168a8:	d504      	bpl.n	80168b4 <_strtod_l+0x534>
 80168aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80168ae:	f7e9 feab 	bl	8000608 <__aeabi_dmul>
 80168b2:	2301      	movs	r3, #1
 80168b4:	3601      	adds	r6, #1
 80168b6:	1064      	asrs	r4, r4, #1
 80168b8:	3708      	adds	r7, #8
 80168ba:	e7d0      	b.n	801685e <_strtod_l+0x4de>
 80168bc:	d0f0      	beq.n	80168a0 <_strtod_l+0x520>
 80168be:	4264      	negs	r4, r4
 80168c0:	f014 020f 	ands.w	r2, r4, #15
 80168c4:	d00a      	beq.n	80168dc <_strtod_l+0x55c>
 80168c6:	4b12      	ldr	r3, [pc, #72]	@ (8016910 <_strtod_l+0x590>)
 80168c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80168cc:	4650      	mov	r0, sl
 80168ce:	4659      	mov	r1, fp
 80168d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168d4:	f7e9 ffc2 	bl	800085c <__aeabi_ddiv>
 80168d8:	4682      	mov	sl, r0
 80168da:	468b      	mov	fp, r1
 80168dc:	1124      	asrs	r4, r4, #4
 80168de:	d0df      	beq.n	80168a0 <_strtod_l+0x520>
 80168e0:	2c1f      	cmp	r4, #31
 80168e2:	dd1f      	ble.n	8016924 <_strtod_l+0x5a4>
 80168e4:	2400      	movs	r4, #0
 80168e6:	46a0      	mov	r8, r4
 80168e8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80168ea:	46a1      	mov	r9, r4
 80168ec:	9a05      	ldr	r2, [sp, #20]
 80168ee:	2322      	movs	r3, #34	@ 0x22
 80168f0:	f04f 0a00 	mov.w	sl, #0
 80168f4:	f04f 0b00 	mov.w	fp, #0
 80168f8:	6013      	str	r3, [r2, #0]
 80168fa:	e76b      	b.n	80167d4 <_strtod_l+0x454>
 80168fc:	0801a3f1 	.word	0x0801a3f1
 8016900:	0801a6b8 	.word	0x0801a6b8
 8016904:	0801a3e9 	.word	0x0801a3e9
 8016908:	0801a420 	.word	0x0801a420
 801690c:	0801a559 	.word	0x0801a559
 8016910:	0801a5f0 	.word	0x0801a5f0
 8016914:	0801a5c8 	.word	0x0801a5c8
 8016918:	7ff00000 	.word	0x7ff00000
 801691c:	7ca00000 	.word	0x7ca00000
 8016920:	7fefffff 	.word	0x7fefffff
 8016924:	f014 0310 	ands.w	r3, r4, #16
 8016928:	bf18      	it	ne
 801692a:	236a      	movne	r3, #106	@ 0x6a
 801692c:	4ea9      	ldr	r6, [pc, #676]	@ (8016bd4 <_strtod_l+0x854>)
 801692e:	9308      	str	r3, [sp, #32]
 8016930:	4650      	mov	r0, sl
 8016932:	4659      	mov	r1, fp
 8016934:	2300      	movs	r3, #0
 8016936:	07e7      	lsls	r7, r4, #31
 8016938:	d504      	bpl.n	8016944 <_strtod_l+0x5c4>
 801693a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801693e:	f7e9 fe63 	bl	8000608 <__aeabi_dmul>
 8016942:	2301      	movs	r3, #1
 8016944:	1064      	asrs	r4, r4, #1
 8016946:	f106 0608 	add.w	r6, r6, #8
 801694a:	d1f4      	bne.n	8016936 <_strtod_l+0x5b6>
 801694c:	b10b      	cbz	r3, 8016952 <_strtod_l+0x5d2>
 801694e:	4682      	mov	sl, r0
 8016950:	468b      	mov	fp, r1
 8016952:	9b08      	ldr	r3, [sp, #32]
 8016954:	b1b3      	cbz	r3, 8016984 <_strtod_l+0x604>
 8016956:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801695a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801695e:	2b00      	cmp	r3, #0
 8016960:	4659      	mov	r1, fp
 8016962:	dd0f      	ble.n	8016984 <_strtod_l+0x604>
 8016964:	2b1f      	cmp	r3, #31
 8016966:	dd56      	ble.n	8016a16 <_strtod_l+0x696>
 8016968:	2b34      	cmp	r3, #52	@ 0x34
 801696a:	bfde      	ittt	le
 801696c:	f04f 33ff 	movle.w	r3, #4294967295
 8016970:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8016974:	4093      	lslle	r3, r2
 8016976:	f04f 0a00 	mov.w	sl, #0
 801697a:	bfcc      	ite	gt
 801697c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016980:	ea03 0b01 	andle.w	fp, r3, r1
 8016984:	2200      	movs	r2, #0
 8016986:	2300      	movs	r3, #0
 8016988:	4650      	mov	r0, sl
 801698a:	4659      	mov	r1, fp
 801698c:	f7ea f8a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8016990:	2800      	cmp	r0, #0
 8016992:	d1a7      	bne.n	80168e4 <_strtod_l+0x564>
 8016994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016996:	9300      	str	r3, [sp, #0]
 8016998:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801699a:	9805      	ldr	r0, [sp, #20]
 801699c:	462b      	mov	r3, r5
 801699e:	464a      	mov	r2, r9
 80169a0:	f7ff f8cc 	bl	8015b3c <__s2b>
 80169a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80169a6:	2800      	cmp	r0, #0
 80169a8:	f43f af09 	beq.w	80167be <_strtod_l+0x43e>
 80169ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80169ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80169b0:	2a00      	cmp	r2, #0
 80169b2:	eba3 0308 	sub.w	r3, r3, r8
 80169b6:	bfa8      	it	ge
 80169b8:	2300      	movge	r3, #0
 80169ba:	9312      	str	r3, [sp, #72]	@ 0x48
 80169bc:	2400      	movs	r4, #0
 80169be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80169c2:	9316      	str	r3, [sp, #88]	@ 0x58
 80169c4:	46a0      	mov	r8, r4
 80169c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80169c8:	9805      	ldr	r0, [sp, #20]
 80169ca:	6859      	ldr	r1, [r3, #4]
 80169cc:	f7ff f80e 	bl	80159ec <_Balloc>
 80169d0:	4681      	mov	r9, r0
 80169d2:	2800      	cmp	r0, #0
 80169d4:	f43f aef7 	beq.w	80167c6 <_strtod_l+0x446>
 80169d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80169da:	691a      	ldr	r2, [r3, #16]
 80169dc:	3202      	adds	r2, #2
 80169de:	f103 010c 	add.w	r1, r3, #12
 80169e2:	0092      	lsls	r2, r2, #2
 80169e4:	300c      	adds	r0, #12
 80169e6:	f000 ff27 	bl	8017838 <memcpy>
 80169ea:	ec4b ab10 	vmov	d0, sl, fp
 80169ee:	9805      	ldr	r0, [sp, #20]
 80169f0:	aa1c      	add	r2, sp, #112	@ 0x70
 80169f2:	a91b      	add	r1, sp, #108	@ 0x6c
 80169f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80169f8:	f7ff fbd4 	bl	80161a4 <__d2b>
 80169fc:	901a      	str	r0, [sp, #104]	@ 0x68
 80169fe:	2800      	cmp	r0, #0
 8016a00:	f43f aee1 	beq.w	80167c6 <_strtod_l+0x446>
 8016a04:	9805      	ldr	r0, [sp, #20]
 8016a06:	2101      	movs	r1, #1
 8016a08:	f7ff f92e 	bl	8015c68 <__i2b>
 8016a0c:	4680      	mov	r8, r0
 8016a0e:	b948      	cbnz	r0, 8016a24 <_strtod_l+0x6a4>
 8016a10:	f04f 0800 	mov.w	r8, #0
 8016a14:	e6d7      	b.n	80167c6 <_strtod_l+0x446>
 8016a16:	f04f 32ff 	mov.w	r2, #4294967295
 8016a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8016a1e:	ea03 0a0a 	and.w	sl, r3, sl
 8016a22:	e7af      	b.n	8016984 <_strtod_l+0x604>
 8016a24:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8016a26:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016a28:	2d00      	cmp	r5, #0
 8016a2a:	bfab      	itete	ge
 8016a2c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8016a2e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8016a30:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8016a32:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8016a34:	bfac      	ite	ge
 8016a36:	18ef      	addge	r7, r5, r3
 8016a38:	1b5e      	sublt	r6, r3, r5
 8016a3a:	9b08      	ldr	r3, [sp, #32]
 8016a3c:	1aed      	subs	r5, r5, r3
 8016a3e:	4415      	add	r5, r2
 8016a40:	4b65      	ldr	r3, [pc, #404]	@ (8016bd8 <_strtod_l+0x858>)
 8016a42:	3d01      	subs	r5, #1
 8016a44:	429d      	cmp	r5, r3
 8016a46:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016a4a:	da50      	bge.n	8016aee <_strtod_l+0x76e>
 8016a4c:	1b5b      	subs	r3, r3, r5
 8016a4e:	2b1f      	cmp	r3, #31
 8016a50:	eba2 0203 	sub.w	r2, r2, r3
 8016a54:	f04f 0101 	mov.w	r1, #1
 8016a58:	dc3d      	bgt.n	8016ad6 <_strtod_l+0x756>
 8016a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8016a5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016a60:	2300      	movs	r3, #0
 8016a62:	9310      	str	r3, [sp, #64]	@ 0x40
 8016a64:	18bd      	adds	r5, r7, r2
 8016a66:	9b08      	ldr	r3, [sp, #32]
 8016a68:	42af      	cmp	r7, r5
 8016a6a:	4416      	add	r6, r2
 8016a6c:	441e      	add	r6, r3
 8016a6e:	463b      	mov	r3, r7
 8016a70:	bfa8      	it	ge
 8016a72:	462b      	movge	r3, r5
 8016a74:	42b3      	cmp	r3, r6
 8016a76:	bfa8      	it	ge
 8016a78:	4633      	movge	r3, r6
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	bfc2      	ittt	gt
 8016a7e:	1aed      	subgt	r5, r5, r3
 8016a80:	1af6      	subgt	r6, r6, r3
 8016a82:	1aff      	subgt	r7, r7, r3
 8016a84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	dd16      	ble.n	8016ab8 <_strtod_l+0x738>
 8016a8a:	4641      	mov	r1, r8
 8016a8c:	9805      	ldr	r0, [sp, #20]
 8016a8e:	461a      	mov	r2, r3
 8016a90:	f7ff f9a2 	bl	8015dd8 <__pow5mult>
 8016a94:	4680      	mov	r8, r0
 8016a96:	2800      	cmp	r0, #0
 8016a98:	d0ba      	beq.n	8016a10 <_strtod_l+0x690>
 8016a9a:	4601      	mov	r1, r0
 8016a9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016a9e:	9805      	ldr	r0, [sp, #20]
 8016aa0:	f7ff f8f8 	bl	8015c94 <__multiply>
 8016aa4:	900a      	str	r0, [sp, #40]	@ 0x28
 8016aa6:	2800      	cmp	r0, #0
 8016aa8:	f43f ae8d 	beq.w	80167c6 <_strtod_l+0x446>
 8016aac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016aae:	9805      	ldr	r0, [sp, #20]
 8016ab0:	f7fe ffdc 	bl	8015a6c <_Bfree>
 8016ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ab6:	931a      	str	r3, [sp, #104]	@ 0x68
 8016ab8:	2d00      	cmp	r5, #0
 8016aba:	dc1d      	bgt.n	8016af8 <_strtod_l+0x778>
 8016abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	dd23      	ble.n	8016b0a <_strtod_l+0x78a>
 8016ac2:	4649      	mov	r1, r9
 8016ac4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016ac6:	9805      	ldr	r0, [sp, #20]
 8016ac8:	f7ff f986 	bl	8015dd8 <__pow5mult>
 8016acc:	4681      	mov	r9, r0
 8016ace:	b9e0      	cbnz	r0, 8016b0a <_strtod_l+0x78a>
 8016ad0:	f04f 0900 	mov.w	r9, #0
 8016ad4:	e677      	b.n	80167c6 <_strtod_l+0x446>
 8016ad6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8016ada:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8016ade:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8016ae2:	35e2      	adds	r5, #226	@ 0xe2
 8016ae4:	fa01 f305 	lsl.w	r3, r1, r5
 8016ae8:	9310      	str	r3, [sp, #64]	@ 0x40
 8016aea:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016aec:	e7ba      	b.n	8016a64 <_strtod_l+0x6e4>
 8016aee:	2300      	movs	r3, #0
 8016af0:	9310      	str	r3, [sp, #64]	@ 0x40
 8016af2:	2301      	movs	r3, #1
 8016af4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016af6:	e7b5      	b.n	8016a64 <_strtod_l+0x6e4>
 8016af8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016afa:	9805      	ldr	r0, [sp, #20]
 8016afc:	462a      	mov	r2, r5
 8016afe:	f7ff f9c5 	bl	8015e8c <__lshift>
 8016b02:	901a      	str	r0, [sp, #104]	@ 0x68
 8016b04:	2800      	cmp	r0, #0
 8016b06:	d1d9      	bne.n	8016abc <_strtod_l+0x73c>
 8016b08:	e65d      	b.n	80167c6 <_strtod_l+0x446>
 8016b0a:	2e00      	cmp	r6, #0
 8016b0c:	dd07      	ble.n	8016b1e <_strtod_l+0x79e>
 8016b0e:	4649      	mov	r1, r9
 8016b10:	9805      	ldr	r0, [sp, #20]
 8016b12:	4632      	mov	r2, r6
 8016b14:	f7ff f9ba 	bl	8015e8c <__lshift>
 8016b18:	4681      	mov	r9, r0
 8016b1a:	2800      	cmp	r0, #0
 8016b1c:	d0d8      	beq.n	8016ad0 <_strtod_l+0x750>
 8016b1e:	2f00      	cmp	r7, #0
 8016b20:	dd08      	ble.n	8016b34 <_strtod_l+0x7b4>
 8016b22:	4641      	mov	r1, r8
 8016b24:	9805      	ldr	r0, [sp, #20]
 8016b26:	463a      	mov	r2, r7
 8016b28:	f7ff f9b0 	bl	8015e8c <__lshift>
 8016b2c:	4680      	mov	r8, r0
 8016b2e:	2800      	cmp	r0, #0
 8016b30:	f43f ae49 	beq.w	80167c6 <_strtod_l+0x446>
 8016b34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016b36:	9805      	ldr	r0, [sp, #20]
 8016b38:	464a      	mov	r2, r9
 8016b3a:	f7ff fa2f 	bl	8015f9c <__mdiff>
 8016b3e:	4604      	mov	r4, r0
 8016b40:	2800      	cmp	r0, #0
 8016b42:	f43f ae40 	beq.w	80167c6 <_strtod_l+0x446>
 8016b46:	68c3      	ldr	r3, [r0, #12]
 8016b48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	60c3      	str	r3, [r0, #12]
 8016b4e:	4641      	mov	r1, r8
 8016b50:	f7ff fa08 	bl	8015f64 <__mcmp>
 8016b54:	2800      	cmp	r0, #0
 8016b56:	da45      	bge.n	8016be4 <_strtod_l+0x864>
 8016b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016b5a:	ea53 030a 	orrs.w	r3, r3, sl
 8016b5e:	d16b      	bne.n	8016c38 <_strtod_l+0x8b8>
 8016b60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d167      	bne.n	8016c38 <_strtod_l+0x8b8>
 8016b68:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016b6c:	0d1b      	lsrs	r3, r3, #20
 8016b6e:	051b      	lsls	r3, r3, #20
 8016b70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016b74:	d960      	bls.n	8016c38 <_strtod_l+0x8b8>
 8016b76:	6963      	ldr	r3, [r4, #20]
 8016b78:	b913      	cbnz	r3, 8016b80 <_strtod_l+0x800>
 8016b7a:	6923      	ldr	r3, [r4, #16]
 8016b7c:	2b01      	cmp	r3, #1
 8016b7e:	dd5b      	ble.n	8016c38 <_strtod_l+0x8b8>
 8016b80:	4621      	mov	r1, r4
 8016b82:	2201      	movs	r2, #1
 8016b84:	9805      	ldr	r0, [sp, #20]
 8016b86:	f7ff f981 	bl	8015e8c <__lshift>
 8016b8a:	4641      	mov	r1, r8
 8016b8c:	4604      	mov	r4, r0
 8016b8e:	f7ff f9e9 	bl	8015f64 <__mcmp>
 8016b92:	2800      	cmp	r0, #0
 8016b94:	dd50      	ble.n	8016c38 <_strtod_l+0x8b8>
 8016b96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016b9a:	9a08      	ldr	r2, [sp, #32]
 8016b9c:	0d1b      	lsrs	r3, r3, #20
 8016b9e:	051b      	lsls	r3, r3, #20
 8016ba0:	2a00      	cmp	r2, #0
 8016ba2:	d06a      	beq.n	8016c7a <_strtod_l+0x8fa>
 8016ba4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016ba8:	d867      	bhi.n	8016c7a <_strtod_l+0x8fa>
 8016baa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016bae:	f67f ae9d 	bls.w	80168ec <_strtod_l+0x56c>
 8016bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8016bdc <_strtod_l+0x85c>)
 8016bb4:	4650      	mov	r0, sl
 8016bb6:	4659      	mov	r1, fp
 8016bb8:	2200      	movs	r2, #0
 8016bba:	f7e9 fd25 	bl	8000608 <__aeabi_dmul>
 8016bbe:	4b08      	ldr	r3, [pc, #32]	@ (8016be0 <_strtod_l+0x860>)
 8016bc0:	400b      	ands	r3, r1
 8016bc2:	4682      	mov	sl, r0
 8016bc4:	468b      	mov	fp, r1
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	f47f ae08 	bne.w	80167dc <_strtod_l+0x45c>
 8016bcc:	9a05      	ldr	r2, [sp, #20]
 8016bce:	2322      	movs	r3, #34	@ 0x22
 8016bd0:	6013      	str	r3, [r2, #0]
 8016bd2:	e603      	b.n	80167dc <_strtod_l+0x45c>
 8016bd4:	0801a6e0 	.word	0x0801a6e0
 8016bd8:	fffffc02 	.word	0xfffffc02
 8016bdc:	39500000 	.word	0x39500000
 8016be0:	7ff00000 	.word	0x7ff00000
 8016be4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8016be8:	d165      	bne.n	8016cb6 <_strtod_l+0x936>
 8016bea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016bec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016bf0:	b35a      	cbz	r2, 8016c4a <_strtod_l+0x8ca>
 8016bf2:	4a9f      	ldr	r2, [pc, #636]	@ (8016e70 <_strtod_l+0xaf0>)
 8016bf4:	4293      	cmp	r3, r2
 8016bf6:	d12b      	bne.n	8016c50 <_strtod_l+0x8d0>
 8016bf8:	9b08      	ldr	r3, [sp, #32]
 8016bfa:	4651      	mov	r1, sl
 8016bfc:	b303      	cbz	r3, 8016c40 <_strtod_l+0x8c0>
 8016bfe:	4b9d      	ldr	r3, [pc, #628]	@ (8016e74 <_strtod_l+0xaf4>)
 8016c00:	465a      	mov	r2, fp
 8016c02:	4013      	ands	r3, r2
 8016c04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016c08:	f04f 32ff 	mov.w	r2, #4294967295
 8016c0c:	d81b      	bhi.n	8016c46 <_strtod_l+0x8c6>
 8016c0e:	0d1b      	lsrs	r3, r3, #20
 8016c10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016c14:	fa02 f303 	lsl.w	r3, r2, r3
 8016c18:	4299      	cmp	r1, r3
 8016c1a:	d119      	bne.n	8016c50 <_strtod_l+0x8d0>
 8016c1c:	4b96      	ldr	r3, [pc, #600]	@ (8016e78 <_strtod_l+0xaf8>)
 8016c1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016c20:	429a      	cmp	r2, r3
 8016c22:	d102      	bne.n	8016c2a <_strtod_l+0x8aa>
 8016c24:	3101      	adds	r1, #1
 8016c26:	f43f adce 	beq.w	80167c6 <_strtod_l+0x446>
 8016c2a:	4b92      	ldr	r3, [pc, #584]	@ (8016e74 <_strtod_l+0xaf4>)
 8016c2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016c2e:	401a      	ands	r2, r3
 8016c30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8016c34:	f04f 0a00 	mov.w	sl, #0
 8016c38:	9b08      	ldr	r3, [sp, #32]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d1b9      	bne.n	8016bb2 <_strtod_l+0x832>
 8016c3e:	e5cd      	b.n	80167dc <_strtod_l+0x45c>
 8016c40:	f04f 33ff 	mov.w	r3, #4294967295
 8016c44:	e7e8      	b.n	8016c18 <_strtod_l+0x898>
 8016c46:	4613      	mov	r3, r2
 8016c48:	e7e6      	b.n	8016c18 <_strtod_l+0x898>
 8016c4a:	ea53 030a 	orrs.w	r3, r3, sl
 8016c4e:	d0a2      	beq.n	8016b96 <_strtod_l+0x816>
 8016c50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016c52:	b1db      	cbz	r3, 8016c8c <_strtod_l+0x90c>
 8016c54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016c56:	4213      	tst	r3, r2
 8016c58:	d0ee      	beq.n	8016c38 <_strtod_l+0x8b8>
 8016c5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c5c:	9a08      	ldr	r2, [sp, #32]
 8016c5e:	4650      	mov	r0, sl
 8016c60:	4659      	mov	r1, fp
 8016c62:	b1bb      	cbz	r3, 8016c94 <_strtod_l+0x914>
 8016c64:	f7ff fb6c 	bl	8016340 <sulp>
 8016c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016c6c:	ec53 2b10 	vmov	r2, r3, d0
 8016c70:	f7e9 fb14 	bl	800029c <__adddf3>
 8016c74:	4682      	mov	sl, r0
 8016c76:	468b      	mov	fp, r1
 8016c78:	e7de      	b.n	8016c38 <_strtod_l+0x8b8>
 8016c7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016c7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016c82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016c86:	f04f 3aff 	mov.w	sl, #4294967295
 8016c8a:	e7d5      	b.n	8016c38 <_strtod_l+0x8b8>
 8016c8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016c8e:	ea13 0f0a 	tst.w	r3, sl
 8016c92:	e7e1      	b.n	8016c58 <_strtod_l+0x8d8>
 8016c94:	f7ff fb54 	bl	8016340 <sulp>
 8016c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016c9c:	ec53 2b10 	vmov	r2, r3, d0
 8016ca0:	f7e9 fafa 	bl	8000298 <__aeabi_dsub>
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	4682      	mov	sl, r0
 8016caa:	468b      	mov	fp, r1
 8016cac:	f7e9 ff14 	bl	8000ad8 <__aeabi_dcmpeq>
 8016cb0:	2800      	cmp	r0, #0
 8016cb2:	d0c1      	beq.n	8016c38 <_strtod_l+0x8b8>
 8016cb4:	e61a      	b.n	80168ec <_strtod_l+0x56c>
 8016cb6:	4641      	mov	r1, r8
 8016cb8:	4620      	mov	r0, r4
 8016cba:	f7ff facb 	bl	8016254 <__ratio>
 8016cbe:	ec57 6b10 	vmov	r6, r7, d0
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016cc8:	4630      	mov	r0, r6
 8016cca:	4639      	mov	r1, r7
 8016ccc:	f7e9 ff18 	bl	8000b00 <__aeabi_dcmple>
 8016cd0:	2800      	cmp	r0, #0
 8016cd2:	d06f      	beq.n	8016db4 <_strtod_l+0xa34>
 8016cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d17a      	bne.n	8016dd0 <_strtod_l+0xa50>
 8016cda:	f1ba 0f00 	cmp.w	sl, #0
 8016cde:	d158      	bne.n	8016d92 <_strtod_l+0xa12>
 8016ce0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d15a      	bne.n	8016da0 <_strtod_l+0xa20>
 8016cea:	4b64      	ldr	r3, [pc, #400]	@ (8016e7c <_strtod_l+0xafc>)
 8016cec:	2200      	movs	r2, #0
 8016cee:	4630      	mov	r0, r6
 8016cf0:	4639      	mov	r1, r7
 8016cf2:	f7e9 fefb 	bl	8000aec <__aeabi_dcmplt>
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	d159      	bne.n	8016dae <_strtod_l+0xa2e>
 8016cfa:	4630      	mov	r0, r6
 8016cfc:	4639      	mov	r1, r7
 8016cfe:	4b60      	ldr	r3, [pc, #384]	@ (8016e80 <_strtod_l+0xb00>)
 8016d00:	2200      	movs	r2, #0
 8016d02:	f7e9 fc81 	bl	8000608 <__aeabi_dmul>
 8016d06:	4606      	mov	r6, r0
 8016d08:	460f      	mov	r7, r1
 8016d0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8016d0e:	9606      	str	r6, [sp, #24]
 8016d10:	9307      	str	r3, [sp, #28]
 8016d12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016d16:	4d57      	ldr	r5, [pc, #348]	@ (8016e74 <_strtod_l+0xaf4>)
 8016d18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016d1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016d1e:	401d      	ands	r5, r3
 8016d20:	4b58      	ldr	r3, [pc, #352]	@ (8016e84 <_strtod_l+0xb04>)
 8016d22:	429d      	cmp	r5, r3
 8016d24:	f040 80b2 	bne.w	8016e8c <_strtod_l+0xb0c>
 8016d28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016d2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8016d2e:	ec4b ab10 	vmov	d0, sl, fp
 8016d32:	f7ff f9c7 	bl	80160c4 <__ulp>
 8016d36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016d3a:	ec51 0b10 	vmov	r0, r1, d0
 8016d3e:	f7e9 fc63 	bl	8000608 <__aeabi_dmul>
 8016d42:	4652      	mov	r2, sl
 8016d44:	465b      	mov	r3, fp
 8016d46:	f7e9 faa9 	bl	800029c <__adddf3>
 8016d4a:	460b      	mov	r3, r1
 8016d4c:	4949      	ldr	r1, [pc, #292]	@ (8016e74 <_strtod_l+0xaf4>)
 8016d4e:	4a4e      	ldr	r2, [pc, #312]	@ (8016e88 <_strtod_l+0xb08>)
 8016d50:	4019      	ands	r1, r3
 8016d52:	4291      	cmp	r1, r2
 8016d54:	4682      	mov	sl, r0
 8016d56:	d942      	bls.n	8016dde <_strtod_l+0xa5e>
 8016d58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016d5a:	4b47      	ldr	r3, [pc, #284]	@ (8016e78 <_strtod_l+0xaf8>)
 8016d5c:	429a      	cmp	r2, r3
 8016d5e:	d103      	bne.n	8016d68 <_strtod_l+0x9e8>
 8016d60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016d62:	3301      	adds	r3, #1
 8016d64:	f43f ad2f 	beq.w	80167c6 <_strtod_l+0x446>
 8016d68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8016e78 <_strtod_l+0xaf8>
 8016d6c:	f04f 3aff 	mov.w	sl, #4294967295
 8016d70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016d72:	9805      	ldr	r0, [sp, #20]
 8016d74:	f7fe fe7a 	bl	8015a6c <_Bfree>
 8016d78:	9805      	ldr	r0, [sp, #20]
 8016d7a:	4649      	mov	r1, r9
 8016d7c:	f7fe fe76 	bl	8015a6c <_Bfree>
 8016d80:	9805      	ldr	r0, [sp, #20]
 8016d82:	4641      	mov	r1, r8
 8016d84:	f7fe fe72 	bl	8015a6c <_Bfree>
 8016d88:	9805      	ldr	r0, [sp, #20]
 8016d8a:	4621      	mov	r1, r4
 8016d8c:	f7fe fe6e 	bl	8015a6c <_Bfree>
 8016d90:	e619      	b.n	80169c6 <_strtod_l+0x646>
 8016d92:	f1ba 0f01 	cmp.w	sl, #1
 8016d96:	d103      	bne.n	8016da0 <_strtod_l+0xa20>
 8016d98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	f43f ada6 	beq.w	80168ec <_strtod_l+0x56c>
 8016da0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8016e50 <_strtod_l+0xad0>
 8016da4:	4f35      	ldr	r7, [pc, #212]	@ (8016e7c <_strtod_l+0xafc>)
 8016da6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016daa:	2600      	movs	r6, #0
 8016dac:	e7b1      	b.n	8016d12 <_strtod_l+0x992>
 8016dae:	4f34      	ldr	r7, [pc, #208]	@ (8016e80 <_strtod_l+0xb00>)
 8016db0:	2600      	movs	r6, #0
 8016db2:	e7aa      	b.n	8016d0a <_strtod_l+0x98a>
 8016db4:	4b32      	ldr	r3, [pc, #200]	@ (8016e80 <_strtod_l+0xb00>)
 8016db6:	4630      	mov	r0, r6
 8016db8:	4639      	mov	r1, r7
 8016dba:	2200      	movs	r2, #0
 8016dbc:	f7e9 fc24 	bl	8000608 <__aeabi_dmul>
 8016dc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016dc2:	4606      	mov	r6, r0
 8016dc4:	460f      	mov	r7, r1
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d09f      	beq.n	8016d0a <_strtod_l+0x98a>
 8016dca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016dce:	e7a0      	b.n	8016d12 <_strtod_l+0x992>
 8016dd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8016e58 <_strtod_l+0xad8>
 8016dd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016dd8:	ec57 6b17 	vmov	r6, r7, d7
 8016ddc:	e799      	b.n	8016d12 <_strtod_l+0x992>
 8016dde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016de2:	9b08      	ldr	r3, [sp, #32]
 8016de4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d1c1      	bne.n	8016d70 <_strtod_l+0x9f0>
 8016dec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016df0:	0d1b      	lsrs	r3, r3, #20
 8016df2:	051b      	lsls	r3, r3, #20
 8016df4:	429d      	cmp	r5, r3
 8016df6:	d1bb      	bne.n	8016d70 <_strtod_l+0x9f0>
 8016df8:	4630      	mov	r0, r6
 8016dfa:	4639      	mov	r1, r7
 8016dfc:	f7e9 ffb4 	bl	8000d68 <__aeabi_d2lz>
 8016e00:	f7e9 fbd4 	bl	80005ac <__aeabi_l2d>
 8016e04:	4602      	mov	r2, r0
 8016e06:	460b      	mov	r3, r1
 8016e08:	4630      	mov	r0, r6
 8016e0a:	4639      	mov	r1, r7
 8016e0c:	f7e9 fa44 	bl	8000298 <__aeabi_dsub>
 8016e10:	460b      	mov	r3, r1
 8016e12:	4602      	mov	r2, r0
 8016e14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8016e18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8016e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e1e:	ea46 060a 	orr.w	r6, r6, sl
 8016e22:	431e      	orrs	r6, r3
 8016e24:	d06f      	beq.n	8016f06 <_strtod_l+0xb86>
 8016e26:	a30e      	add	r3, pc, #56	@ (adr r3, 8016e60 <_strtod_l+0xae0>)
 8016e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e2c:	f7e9 fe5e 	bl	8000aec <__aeabi_dcmplt>
 8016e30:	2800      	cmp	r0, #0
 8016e32:	f47f acd3 	bne.w	80167dc <_strtod_l+0x45c>
 8016e36:	a30c      	add	r3, pc, #48	@ (adr r3, 8016e68 <_strtod_l+0xae8>)
 8016e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016e40:	f7e9 fe72 	bl	8000b28 <__aeabi_dcmpgt>
 8016e44:	2800      	cmp	r0, #0
 8016e46:	d093      	beq.n	8016d70 <_strtod_l+0x9f0>
 8016e48:	e4c8      	b.n	80167dc <_strtod_l+0x45c>
 8016e4a:	bf00      	nop
 8016e4c:	f3af 8000 	nop.w
 8016e50:	00000000 	.word	0x00000000
 8016e54:	bff00000 	.word	0xbff00000
 8016e58:	00000000 	.word	0x00000000
 8016e5c:	3ff00000 	.word	0x3ff00000
 8016e60:	94a03595 	.word	0x94a03595
 8016e64:	3fdfffff 	.word	0x3fdfffff
 8016e68:	35afe535 	.word	0x35afe535
 8016e6c:	3fe00000 	.word	0x3fe00000
 8016e70:	000fffff 	.word	0x000fffff
 8016e74:	7ff00000 	.word	0x7ff00000
 8016e78:	7fefffff 	.word	0x7fefffff
 8016e7c:	3ff00000 	.word	0x3ff00000
 8016e80:	3fe00000 	.word	0x3fe00000
 8016e84:	7fe00000 	.word	0x7fe00000
 8016e88:	7c9fffff 	.word	0x7c9fffff
 8016e8c:	9b08      	ldr	r3, [sp, #32]
 8016e8e:	b323      	cbz	r3, 8016eda <_strtod_l+0xb5a>
 8016e90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8016e94:	d821      	bhi.n	8016eda <_strtod_l+0xb5a>
 8016e96:	a328      	add	r3, pc, #160	@ (adr r3, 8016f38 <_strtod_l+0xbb8>)
 8016e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e9c:	4630      	mov	r0, r6
 8016e9e:	4639      	mov	r1, r7
 8016ea0:	f7e9 fe2e 	bl	8000b00 <__aeabi_dcmple>
 8016ea4:	b1a0      	cbz	r0, 8016ed0 <_strtod_l+0xb50>
 8016ea6:	4639      	mov	r1, r7
 8016ea8:	4630      	mov	r0, r6
 8016eaa:	f7e9 fe85 	bl	8000bb8 <__aeabi_d2uiz>
 8016eae:	2801      	cmp	r0, #1
 8016eb0:	bf38      	it	cc
 8016eb2:	2001      	movcc	r0, #1
 8016eb4:	f7e9 fb2e 	bl	8000514 <__aeabi_ui2d>
 8016eb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016eba:	4606      	mov	r6, r0
 8016ebc:	460f      	mov	r7, r1
 8016ebe:	b9fb      	cbnz	r3, 8016f00 <_strtod_l+0xb80>
 8016ec0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016ec4:	9014      	str	r0, [sp, #80]	@ 0x50
 8016ec6:	9315      	str	r3, [sp, #84]	@ 0x54
 8016ec8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8016ecc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016ed0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016ed2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8016ed6:	1b5b      	subs	r3, r3, r5
 8016ed8:	9311      	str	r3, [sp, #68]	@ 0x44
 8016eda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8016ede:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8016ee2:	f7ff f8ef 	bl	80160c4 <__ulp>
 8016ee6:	4650      	mov	r0, sl
 8016ee8:	ec53 2b10 	vmov	r2, r3, d0
 8016eec:	4659      	mov	r1, fp
 8016eee:	f7e9 fb8b 	bl	8000608 <__aeabi_dmul>
 8016ef2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016ef6:	f7e9 f9d1 	bl	800029c <__adddf3>
 8016efa:	4682      	mov	sl, r0
 8016efc:	468b      	mov	fp, r1
 8016efe:	e770      	b.n	8016de2 <_strtod_l+0xa62>
 8016f00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8016f04:	e7e0      	b.n	8016ec8 <_strtod_l+0xb48>
 8016f06:	a30e      	add	r3, pc, #56	@ (adr r3, 8016f40 <_strtod_l+0xbc0>)
 8016f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f0c:	f7e9 fdee 	bl	8000aec <__aeabi_dcmplt>
 8016f10:	e798      	b.n	8016e44 <_strtod_l+0xac4>
 8016f12:	2300      	movs	r3, #0
 8016f14:	930e      	str	r3, [sp, #56]	@ 0x38
 8016f16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016f18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f1a:	6013      	str	r3, [r2, #0]
 8016f1c:	f7ff ba6d 	b.w	80163fa <_strtod_l+0x7a>
 8016f20:	2a65      	cmp	r2, #101	@ 0x65
 8016f22:	f43f ab68 	beq.w	80165f6 <_strtod_l+0x276>
 8016f26:	2a45      	cmp	r2, #69	@ 0x45
 8016f28:	f43f ab65 	beq.w	80165f6 <_strtod_l+0x276>
 8016f2c:	2301      	movs	r3, #1
 8016f2e:	f7ff bba0 	b.w	8016672 <_strtod_l+0x2f2>
 8016f32:	bf00      	nop
 8016f34:	f3af 8000 	nop.w
 8016f38:	ffc00000 	.word	0xffc00000
 8016f3c:	41dfffff 	.word	0x41dfffff
 8016f40:	94a03595 	.word	0x94a03595
 8016f44:	3fcfffff 	.word	0x3fcfffff

08016f48 <_strtod_r>:
 8016f48:	4b01      	ldr	r3, [pc, #4]	@ (8016f50 <_strtod_r+0x8>)
 8016f4a:	f7ff ba19 	b.w	8016380 <_strtod_l>
 8016f4e:	bf00      	nop
 8016f50:	200002a4 	.word	0x200002a4

08016f54 <_strtol_l.isra.0>:
 8016f54:	2b24      	cmp	r3, #36	@ 0x24
 8016f56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f5a:	4686      	mov	lr, r0
 8016f5c:	4690      	mov	r8, r2
 8016f5e:	d801      	bhi.n	8016f64 <_strtol_l.isra.0+0x10>
 8016f60:	2b01      	cmp	r3, #1
 8016f62:	d106      	bne.n	8016f72 <_strtol_l.isra.0+0x1e>
 8016f64:	f7fd fe6c 	bl	8014c40 <__errno>
 8016f68:	2316      	movs	r3, #22
 8016f6a:	6003      	str	r3, [r0, #0]
 8016f6c:	2000      	movs	r0, #0
 8016f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f72:	4834      	ldr	r0, [pc, #208]	@ (8017044 <_strtol_l.isra.0+0xf0>)
 8016f74:	460d      	mov	r5, r1
 8016f76:	462a      	mov	r2, r5
 8016f78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f7c:	5d06      	ldrb	r6, [r0, r4]
 8016f7e:	f016 0608 	ands.w	r6, r6, #8
 8016f82:	d1f8      	bne.n	8016f76 <_strtol_l.isra.0+0x22>
 8016f84:	2c2d      	cmp	r4, #45	@ 0x2d
 8016f86:	d110      	bne.n	8016faa <_strtol_l.isra.0+0x56>
 8016f88:	782c      	ldrb	r4, [r5, #0]
 8016f8a:	2601      	movs	r6, #1
 8016f8c:	1c95      	adds	r5, r2, #2
 8016f8e:	f033 0210 	bics.w	r2, r3, #16
 8016f92:	d115      	bne.n	8016fc0 <_strtol_l.isra.0+0x6c>
 8016f94:	2c30      	cmp	r4, #48	@ 0x30
 8016f96:	d10d      	bne.n	8016fb4 <_strtol_l.isra.0+0x60>
 8016f98:	782a      	ldrb	r2, [r5, #0]
 8016f9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016f9e:	2a58      	cmp	r2, #88	@ 0x58
 8016fa0:	d108      	bne.n	8016fb4 <_strtol_l.isra.0+0x60>
 8016fa2:	786c      	ldrb	r4, [r5, #1]
 8016fa4:	3502      	adds	r5, #2
 8016fa6:	2310      	movs	r3, #16
 8016fa8:	e00a      	b.n	8016fc0 <_strtol_l.isra.0+0x6c>
 8016faa:	2c2b      	cmp	r4, #43	@ 0x2b
 8016fac:	bf04      	itt	eq
 8016fae:	782c      	ldrbeq	r4, [r5, #0]
 8016fb0:	1c95      	addeq	r5, r2, #2
 8016fb2:	e7ec      	b.n	8016f8e <_strtol_l.isra.0+0x3a>
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d1f6      	bne.n	8016fa6 <_strtol_l.isra.0+0x52>
 8016fb8:	2c30      	cmp	r4, #48	@ 0x30
 8016fba:	bf14      	ite	ne
 8016fbc:	230a      	movne	r3, #10
 8016fbe:	2308      	moveq	r3, #8
 8016fc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016fc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016fc8:	2200      	movs	r2, #0
 8016fca:	fbbc f9f3 	udiv	r9, ip, r3
 8016fce:	4610      	mov	r0, r2
 8016fd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8016fd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016fd8:	2f09      	cmp	r7, #9
 8016fda:	d80f      	bhi.n	8016ffc <_strtol_l.isra.0+0xa8>
 8016fdc:	463c      	mov	r4, r7
 8016fde:	42a3      	cmp	r3, r4
 8016fe0:	dd1b      	ble.n	801701a <_strtol_l.isra.0+0xc6>
 8016fe2:	1c57      	adds	r7, r2, #1
 8016fe4:	d007      	beq.n	8016ff6 <_strtol_l.isra.0+0xa2>
 8016fe6:	4581      	cmp	r9, r0
 8016fe8:	d314      	bcc.n	8017014 <_strtol_l.isra.0+0xc0>
 8016fea:	d101      	bne.n	8016ff0 <_strtol_l.isra.0+0x9c>
 8016fec:	45a2      	cmp	sl, r4
 8016fee:	db11      	blt.n	8017014 <_strtol_l.isra.0+0xc0>
 8016ff0:	fb00 4003 	mla	r0, r0, r3, r4
 8016ff4:	2201      	movs	r2, #1
 8016ff6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ffa:	e7eb      	b.n	8016fd4 <_strtol_l.isra.0+0x80>
 8016ffc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017000:	2f19      	cmp	r7, #25
 8017002:	d801      	bhi.n	8017008 <_strtol_l.isra.0+0xb4>
 8017004:	3c37      	subs	r4, #55	@ 0x37
 8017006:	e7ea      	b.n	8016fde <_strtol_l.isra.0+0x8a>
 8017008:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801700c:	2f19      	cmp	r7, #25
 801700e:	d804      	bhi.n	801701a <_strtol_l.isra.0+0xc6>
 8017010:	3c57      	subs	r4, #87	@ 0x57
 8017012:	e7e4      	b.n	8016fde <_strtol_l.isra.0+0x8a>
 8017014:	f04f 32ff 	mov.w	r2, #4294967295
 8017018:	e7ed      	b.n	8016ff6 <_strtol_l.isra.0+0xa2>
 801701a:	1c53      	adds	r3, r2, #1
 801701c:	d108      	bne.n	8017030 <_strtol_l.isra.0+0xdc>
 801701e:	2322      	movs	r3, #34	@ 0x22
 8017020:	f8ce 3000 	str.w	r3, [lr]
 8017024:	4660      	mov	r0, ip
 8017026:	f1b8 0f00 	cmp.w	r8, #0
 801702a:	d0a0      	beq.n	8016f6e <_strtol_l.isra.0+0x1a>
 801702c:	1e69      	subs	r1, r5, #1
 801702e:	e006      	b.n	801703e <_strtol_l.isra.0+0xea>
 8017030:	b106      	cbz	r6, 8017034 <_strtol_l.isra.0+0xe0>
 8017032:	4240      	negs	r0, r0
 8017034:	f1b8 0f00 	cmp.w	r8, #0
 8017038:	d099      	beq.n	8016f6e <_strtol_l.isra.0+0x1a>
 801703a:	2a00      	cmp	r2, #0
 801703c:	d1f6      	bne.n	801702c <_strtol_l.isra.0+0xd8>
 801703e:	f8c8 1000 	str.w	r1, [r8]
 8017042:	e794      	b.n	8016f6e <_strtol_l.isra.0+0x1a>
 8017044:	0801a709 	.word	0x0801a709

08017048 <_strtol_r>:
 8017048:	f7ff bf84 	b.w	8016f54 <_strtol_l.isra.0>

0801704c <__ssputs_r>:
 801704c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017050:	688e      	ldr	r6, [r1, #8]
 8017052:	461f      	mov	r7, r3
 8017054:	42be      	cmp	r6, r7
 8017056:	680b      	ldr	r3, [r1, #0]
 8017058:	4682      	mov	sl, r0
 801705a:	460c      	mov	r4, r1
 801705c:	4690      	mov	r8, r2
 801705e:	d82d      	bhi.n	80170bc <__ssputs_r+0x70>
 8017060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017064:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017068:	d026      	beq.n	80170b8 <__ssputs_r+0x6c>
 801706a:	6965      	ldr	r5, [r4, #20]
 801706c:	6909      	ldr	r1, [r1, #16]
 801706e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017072:	eba3 0901 	sub.w	r9, r3, r1
 8017076:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801707a:	1c7b      	adds	r3, r7, #1
 801707c:	444b      	add	r3, r9
 801707e:	106d      	asrs	r5, r5, #1
 8017080:	429d      	cmp	r5, r3
 8017082:	bf38      	it	cc
 8017084:	461d      	movcc	r5, r3
 8017086:	0553      	lsls	r3, r2, #21
 8017088:	d527      	bpl.n	80170da <__ssputs_r+0x8e>
 801708a:	4629      	mov	r1, r5
 801708c:	f7fc fc24 	bl	80138d8 <_malloc_r>
 8017090:	4606      	mov	r6, r0
 8017092:	b360      	cbz	r0, 80170ee <__ssputs_r+0xa2>
 8017094:	6921      	ldr	r1, [r4, #16]
 8017096:	464a      	mov	r2, r9
 8017098:	f000 fbce 	bl	8017838 <memcpy>
 801709c:	89a3      	ldrh	r3, [r4, #12]
 801709e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80170a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80170a6:	81a3      	strh	r3, [r4, #12]
 80170a8:	6126      	str	r6, [r4, #16]
 80170aa:	6165      	str	r5, [r4, #20]
 80170ac:	444e      	add	r6, r9
 80170ae:	eba5 0509 	sub.w	r5, r5, r9
 80170b2:	6026      	str	r6, [r4, #0]
 80170b4:	60a5      	str	r5, [r4, #8]
 80170b6:	463e      	mov	r6, r7
 80170b8:	42be      	cmp	r6, r7
 80170ba:	d900      	bls.n	80170be <__ssputs_r+0x72>
 80170bc:	463e      	mov	r6, r7
 80170be:	6820      	ldr	r0, [r4, #0]
 80170c0:	4632      	mov	r2, r6
 80170c2:	4641      	mov	r1, r8
 80170c4:	f000 fb6a 	bl	801779c <memmove>
 80170c8:	68a3      	ldr	r3, [r4, #8]
 80170ca:	1b9b      	subs	r3, r3, r6
 80170cc:	60a3      	str	r3, [r4, #8]
 80170ce:	6823      	ldr	r3, [r4, #0]
 80170d0:	4433      	add	r3, r6
 80170d2:	6023      	str	r3, [r4, #0]
 80170d4:	2000      	movs	r0, #0
 80170d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170da:	462a      	mov	r2, r5
 80170dc:	f000 ff41 	bl	8017f62 <_realloc_r>
 80170e0:	4606      	mov	r6, r0
 80170e2:	2800      	cmp	r0, #0
 80170e4:	d1e0      	bne.n	80170a8 <__ssputs_r+0x5c>
 80170e6:	6921      	ldr	r1, [r4, #16]
 80170e8:	4650      	mov	r0, sl
 80170ea:	f7fe fc35 	bl	8015958 <_free_r>
 80170ee:	230c      	movs	r3, #12
 80170f0:	f8ca 3000 	str.w	r3, [sl]
 80170f4:	89a3      	ldrh	r3, [r4, #12]
 80170f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80170fa:	81a3      	strh	r3, [r4, #12]
 80170fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017100:	e7e9      	b.n	80170d6 <__ssputs_r+0x8a>
	...

08017104 <_svfiprintf_r>:
 8017104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017108:	4698      	mov	r8, r3
 801710a:	898b      	ldrh	r3, [r1, #12]
 801710c:	061b      	lsls	r3, r3, #24
 801710e:	b09d      	sub	sp, #116	@ 0x74
 8017110:	4607      	mov	r7, r0
 8017112:	460d      	mov	r5, r1
 8017114:	4614      	mov	r4, r2
 8017116:	d510      	bpl.n	801713a <_svfiprintf_r+0x36>
 8017118:	690b      	ldr	r3, [r1, #16]
 801711a:	b973      	cbnz	r3, 801713a <_svfiprintf_r+0x36>
 801711c:	2140      	movs	r1, #64	@ 0x40
 801711e:	f7fc fbdb 	bl	80138d8 <_malloc_r>
 8017122:	6028      	str	r0, [r5, #0]
 8017124:	6128      	str	r0, [r5, #16]
 8017126:	b930      	cbnz	r0, 8017136 <_svfiprintf_r+0x32>
 8017128:	230c      	movs	r3, #12
 801712a:	603b      	str	r3, [r7, #0]
 801712c:	f04f 30ff 	mov.w	r0, #4294967295
 8017130:	b01d      	add	sp, #116	@ 0x74
 8017132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017136:	2340      	movs	r3, #64	@ 0x40
 8017138:	616b      	str	r3, [r5, #20]
 801713a:	2300      	movs	r3, #0
 801713c:	9309      	str	r3, [sp, #36]	@ 0x24
 801713e:	2320      	movs	r3, #32
 8017140:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017144:	f8cd 800c 	str.w	r8, [sp, #12]
 8017148:	2330      	movs	r3, #48	@ 0x30
 801714a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80172e8 <_svfiprintf_r+0x1e4>
 801714e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017152:	f04f 0901 	mov.w	r9, #1
 8017156:	4623      	mov	r3, r4
 8017158:	469a      	mov	sl, r3
 801715a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801715e:	b10a      	cbz	r2, 8017164 <_svfiprintf_r+0x60>
 8017160:	2a25      	cmp	r2, #37	@ 0x25
 8017162:	d1f9      	bne.n	8017158 <_svfiprintf_r+0x54>
 8017164:	ebba 0b04 	subs.w	fp, sl, r4
 8017168:	d00b      	beq.n	8017182 <_svfiprintf_r+0x7e>
 801716a:	465b      	mov	r3, fp
 801716c:	4622      	mov	r2, r4
 801716e:	4629      	mov	r1, r5
 8017170:	4638      	mov	r0, r7
 8017172:	f7ff ff6b 	bl	801704c <__ssputs_r>
 8017176:	3001      	adds	r0, #1
 8017178:	f000 80a7 	beq.w	80172ca <_svfiprintf_r+0x1c6>
 801717c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801717e:	445a      	add	r2, fp
 8017180:	9209      	str	r2, [sp, #36]	@ 0x24
 8017182:	f89a 3000 	ldrb.w	r3, [sl]
 8017186:	2b00      	cmp	r3, #0
 8017188:	f000 809f 	beq.w	80172ca <_svfiprintf_r+0x1c6>
 801718c:	2300      	movs	r3, #0
 801718e:	f04f 32ff 	mov.w	r2, #4294967295
 8017192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017196:	f10a 0a01 	add.w	sl, sl, #1
 801719a:	9304      	str	r3, [sp, #16]
 801719c:	9307      	str	r3, [sp, #28]
 801719e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80171a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80171a4:	4654      	mov	r4, sl
 80171a6:	2205      	movs	r2, #5
 80171a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171ac:	484e      	ldr	r0, [pc, #312]	@ (80172e8 <_svfiprintf_r+0x1e4>)
 80171ae:	f7e9 f817 	bl	80001e0 <memchr>
 80171b2:	9a04      	ldr	r2, [sp, #16]
 80171b4:	b9d8      	cbnz	r0, 80171ee <_svfiprintf_r+0xea>
 80171b6:	06d0      	lsls	r0, r2, #27
 80171b8:	bf44      	itt	mi
 80171ba:	2320      	movmi	r3, #32
 80171bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80171c0:	0711      	lsls	r1, r2, #28
 80171c2:	bf44      	itt	mi
 80171c4:	232b      	movmi	r3, #43	@ 0x2b
 80171c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80171ca:	f89a 3000 	ldrb.w	r3, [sl]
 80171ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80171d0:	d015      	beq.n	80171fe <_svfiprintf_r+0xfa>
 80171d2:	9a07      	ldr	r2, [sp, #28]
 80171d4:	4654      	mov	r4, sl
 80171d6:	2000      	movs	r0, #0
 80171d8:	f04f 0c0a 	mov.w	ip, #10
 80171dc:	4621      	mov	r1, r4
 80171de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80171e2:	3b30      	subs	r3, #48	@ 0x30
 80171e4:	2b09      	cmp	r3, #9
 80171e6:	d94b      	bls.n	8017280 <_svfiprintf_r+0x17c>
 80171e8:	b1b0      	cbz	r0, 8017218 <_svfiprintf_r+0x114>
 80171ea:	9207      	str	r2, [sp, #28]
 80171ec:	e014      	b.n	8017218 <_svfiprintf_r+0x114>
 80171ee:	eba0 0308 	sub.w	r3, r0, r8
 80171f2:	fa09 f303 	lsl.w	r3, r9, r3
 80171f6:	4313      	orrs	r3, r2
 80171f8:	9304      	str	r3, [sp, #16]
 80171fa:	46a2      	mov	sl, r4
 80171fc:	e7d2      	b.n	80171a4 <_svfiprintf_r+0xa0>
 80171fe:	9b03      	ldr	r3, [sp, #12]
 8017200:	1d19      	adds	r1, r3, #4
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	9103      	str	r1, [sp, #12]
 8017206:	2b00      	cmp	r3, #0
 8017208:	bfbb      	ittet	lt
 801720a:	425b      	neglt	r3, r3
 801720c:	f042 0202 	orrlt.w	r2, r2, #2
 8017210:	9307      	strge	r3, [sp, #28]
 8017212:	9307      	strlt	r3, [sp, #28]
 8017214:	bfb8      	it	lt
 8017216:	9204      	strlt	r2, [sp, #16]
 8017218:	7823      	ldrb	r3, [r4, #0]
 801721a:	2b2e      	cmp	r3, #46	@ 0x2e
 801721c:	d10a      	bne.n	8017234 <_svfiprintf_r+0x130>
 801721e:	7863      	ldrb	r3, [r4, #1]
 8017220:	2b2a      	cmp	r3, #42	@ 0x2a
 8017222:	d132      	bne.n	801728a <_svfiprintf_r+0x186>
 8017224:	9b03      	ldr	r3, [sp, #12]
 8017226:	1d1a      	adds	r2, r3, #4
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	9203      	str	r2, [sp, #12]
 801722c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017230:	3402      	adds	r4, #2
 8017232:	9305      	str	r3, [sp, #20]
 8017234:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80172f8 <_svfiprintf_r+0x1f4>
 8017238:	7821      	ldrb	r1, [r4, #0]
 801723a:	2203      	movs	r2, #3
 801723c:	4650      	mov	r0, sl
 801723e:	f7e8 ffcf 	bl	80001e0 <memchr>
 8017242:	b138      	cbz	r0, 8017254 <_svfiprintf_r+0x150>
 8017244:	9b04      	ldr	r3, [sp, #16]
 8017246:	eba0 000a 	sub.w	r0, r0, sl
 801724a:	2240      	movs	r2, #64	@ 0x40
 801724c:	4082      	lsls	r2, r0
 801724e:	4313      	orrs	r3, r2
 8017250:	3401      	adds	r4, #1
 8017252:	9304      	str	r3, [sp, #16]
 8017254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017258:	4824      	ldr	r0, [pc, #144]	@ (80172ec <_svfiprintf_r+0x1e8>)
 801725a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801725e:	2206      	movs	r2, #6
 8017260:	f7e8 ffbe 	bl	80001e0 <memchr>
 8017264:	2800      	cmp	r0, #0
 8017266:	d036      	beq.n	80172d6 <_svfiprintf_r+0x1d2>
 8017268:	4b21      	ldr	r3, [pc, #132]	@ (80172f0 <_svfiprintf_r+0x1ec>)
 801726a:	bb1b      	cbnz	r3, 80172b4 <_svfiprintf_r+0x1b0>
 801726c:	9b03      	ldr	r3, [sp, #12]
 801726e:	3307      	adds	r3, #7
 8017270:	f023 0307 	bic.w	r3, r3, #7
 8017274:	3308      	adds	r3, #8
 8017276:	9303      	str	r3, [sp, #12]
 8017278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801727a:	4433      	add	r3, r6
 801727c:	9309      	str	r3, [sp, #36]	@ 0x24
 801727e:	e76a      	b.n	8017156 <_svfiprintf_r+0x52>
 8017280:	fb0c 3202 	mla	r2, ip, r2, r3
 8017284:	460c      	mov	r4, r1
 8017286:	2001      	movs	r0, #1
 8017288:	e7a8      	b.n	80171dc <_svfiprintf_r+0xd8>
 801728a:	2300      	movs	r3, #0
 801728c:	3401      	adds	r4, #1
 801728e:	9305      	str	r3, [sp, #20]
 8017290:	4619      	mov	r1, r3
 8017292:	f04f 0c0a 	mov.w	ip, #10
 8017296:	4620      	mov	r0, r4
 8017298:	f810 2b01 	ldrb.w	r2, [r0], #1
 801729c:	3a30      	subs	r2, #48	@ 0x30
 801729e:	2a09      	cmp	r2, #9
 80172a0:	d903      	bls.n	80172aa <_svfiprintf_r+0x1a6>
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d0c6      	beq.n	8017234 <_svfiprintf_r+0x130>
 80172a6:	9105      	str	r1, [sp, #20]
 80172a8:	e7c4      	b.n	8017234 <_svfiprintf_r+0x130>
 80172aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80172ae:	4604      	mov	r4, r0
 80172b0:	2301      	movs	r3, #1
 80172b2:	e7f0      	b.n	8017296 <_svfiprintf_r+0x192>
 80172b4:	ab03      	add	r3, sp, #12
 80172b6:	9300      	str	r3, [sp, #0]
 80172b8:	462a      	mov	r2, r5
 80172ba:	4b0e      	ldr	r3, [pc, #56]	@ (80172f4 <_svfiprintf_r+0x1f0>)
 80172bc:	a904      	add	r1, sp, #16
 80172be:	4638      	mov	r0, r7
 80172c0:	f7fc fc36 	bl	8013b30 <_printf_float>
 80172c4:	1c42      	adds	r2, r0, #1
 80172c6:	4606      	mov	r6, r0
 80172c8:	d1d6      	bne.n	8017278 <_svfiprintf_r+0x174>
 80172ca:	89ab      	ldrh	r3, [r5, #12]
 80172cc:	065b      	lsls	r3, r3, #25
 80172ce:	f53f af2d 	bmi.w	801712c <_svfiprintf_r+0x28>
 80172d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80172d4:	e72c      	b.n	8017130 <_svfiprintf_r+0x2c>
 80172d6:	ab03      	add	r3, sp, #12
 80172d8:	9300      	str	r3, [sp, #0]
 80172da:	462a      	mov	r2, r5
 80172dc:	4b05      	ldr	r3, [pc, #20]	@ (80172f4 <_svfiprintf_r+0x1f0>)
 80172de:	a904      	add	r1, sp, #16
 80172e0:	4638      	mov	r0, r7
 80172e2:	f7fc febd 	bl	8014060 <_printf_i>
 80172e6:	e7ed      	b.n	80172c4 <_svfiprintf_r+0x1c0>
 80172e8:	0801a505 	.word	0x0801a505
 80172ec:	0801a50f 	.word	0x0801a50f
 80172f0:	08013b31 	.word	0x08013b31
 80172f4:	0801704d 	.word	0x0801704d
 80172f8:	0801a50b 	.word	0x0801a50b

080172fc <__sfputc_r>:
 80172fc:	6893      	ldr	r3, [r2, #8]
 80172fe:	3b01      	subs	r3, #1
 8017300:	2b00      	cmp	r3, #0
 8017302:	b410      	push	{r4}
 8017304:	6093      	str	r3, [r2, #8]
 8017306:	da08      	bge.n	801731a <__sfputc_r+0x1e>
 8017308:	6994      	ldr	r4, [r2, #24]
 801730a:	42a3      	cmp	r3, r4
 801730c:	db01      	blt.n	8017312 <__sfputc_r+0x16>
 801730e:	290a      	cmp	r1, #10
 8017310:	d103      	bne.n	801731a <__sfputc_r+0x1e>
 8017312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017316:	f7fd bb9c 	b.w	8014a52 <__swbuf_r>
 801731a:	6813      	ldr	r3, [r2, #0]
 801731c:	1c58      	adds	r0, r3, #1
 801731e:	6010      	str	r0, [r2, #0]
 8017320:	7019      	strb	r1, [r3, #0]
 8017322:	4608      	mov	r0, r1
 8017324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017328:	4770      	bx	lr

0801732a <__sfputs_r>:
 801732a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801732c:	4606      	mov	r6, r0
 801732e:	460f      	mov	r7, r1
 8017330:	4614      	mov	r4, r2
 8017332:	18d5      	adds	r5, r2, r3
 8017334:	42ac      	cmp	r4, r5
 8017336:	d101      	bne.n	801733c <__sfputs_r+0x12>
 8017338:	2000      	movs	r0, #0
 801733a:	e007      	b.n	801734c <__sfputs_r+0x22>
 801733c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017340:	463a      	mov	r2, r7
 8017342:	4630      	mov	r0, r6
 8017344:	f7ff ffda 	bl	80172fc <__sfputc_r>
 8017348:	1c43      	adds	r3, r0, #1
 801734a:	d1f3      	bne.n	8017334 <__sfputs_r+0xa>
 801734c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017350 <_vfiprintf_r>:
 8017350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017354:	460d      	mov	r5, r1
 8017356:	b09d      	sub	sp, #116	@ 0x74
 8017358:	4614      	mov	r4, r2
 801735a:	4698      	mov	r8, r3
 801735c:	4606      	mov	r6, r0
 801735e:	b118      	cbz	r0, 8017368 <_vfiprintf_r+0x18>
 8017360:	6a03      	ldr	r3, [r0, #32]
 8017362:	b90b      	cbnz	r3, 8017368 <_vfiprintf_r+0x18>
 8017364:	f7fd fa34 	bl	80147d0 <__sinit>
 8017368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801736a:	07d9      	lsls	r1, r3, #31
 801736c:	d405      	bmi.n	801737a <_vfiprintf_r+0x2a>
 801736e:	89ab      	ldrh	r3, [r5, #12]
 8017370:	059a      	lsls	r2, r3, #22
 8017372:	d402      	bmi.n	801737a <_vfiprintf_r+0x2a>
 8017374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017376:	f7fd fc8e 	bl	8014c96 <__retarget_lock_acquire_recursive>
 801737a:	89ab      	ldrh	r3, [r5, #12]
 801737c:	071b      	lsls	r3, r3, #28
 801737e:	d501      	bpl.n	8017384 <_vfiprintf_r+0x34>
 8017380:	692b      	ldr	r3, [r5, #16]
 8017382:	b99b      	cbnz	r3, 80173ac <_vfiprintf_r+0x5c>
 8017384:	4629      	mov	r1, r5
 8017386:	4630      	mov	r0, r6
 8017388:	f7fd fba2 	bl	8014ad0 <__swsetup_r>
 801738c:	b170      	cbz	r0, 80173ac <_vfiprintf_r+0x5c>
 801738e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017390:	07dc      	lsls	r4, r3, #31
 8017392:	d504      	bpl.n	801739e <_vfiprintf_r+0x4e>
 8017394:	f04f 30ff 	mov.w	r0, #4294967295
 8017398:	b01d      	add	sp, #116	@ 0x74
 801739a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801739e:	89ab      	ldrh	r3, [r5, #12]
 80173a0:	0598      	lsls	r0, r3, #22
 80173a2:	d4f7      	bmi.n	8017394 <_vfiprintf_r+0x44>
 80173a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80173a6:	f7fd fc77 	bl	8014c98 <__retarget_lock_release_recursive>
 80173aa:	e7f3      	b.n	8017394 <_vfiprintf_r+0x44>
 80173ac:	2300      	movs	r3, #0
 80173ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80173b0:	2320      	movs	r3, #32
 80173b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80173b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80173ba:	2330      	movs	r3, #48	@ 0x30
 80173bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801756c <_vfiprintf_r+0x21c>
 80173c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80173c4:	f04f 0901 	mov.w	r9, #1
 80173c8:	4623      	mov	r3, r4
 80173ca:	469a      	mov	sl, r3
 80173cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173d0:	b10a      	cbz	r2, 80173d6 <_vfiprintf_r+0x86>
 80173d2:	2a25      	cmp	r2, #37	@ 0x25
 80173d4:	d1f9      	bne.n	80173ca <_vfiprintf_r+0x7a>
 80173d6:	ebba 0b04 	subs.w	fp, sl, r4
 80173da:	d00b      	beq.n	80173f4 <_vfiprintf_r+0xa4>
 80173dc:	465b      	mov	r3, fp
 80173de:	4622      	mov	r2, r4
 80173e0:	4629      	mov	r1, r5
 80173e2:	4630      	mov	r0, r6
 80173e4:	f7ff ffa1 	bl	801732a <__sfputs_r>
 80173e8:	3001      	adds	r0, #1
 80173ea:	f000 80a7 	beq.w	801753c <_vfiprintf_r+0x1ec>
 80173ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80173f0:	445a      	add	r2, fp
 80173f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80173f4:	f89a 3000 	ldrb.w	r3, [sl]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	f000 809f 	beq.w	801753c <_vfiprintf_r+0x1ec>
 80173fe:	2300      	movs	r3, #0
 8017400:	f04f 32ff 	mov.w	r2, #4294967295
 8017404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017408:	f10a 0a01 	add.w	sl, sl, #1
 801740c:	9304      	str	r3, [sp, #16]
 801740e:	9307      	str	r3, [sp, #28]
 8017410:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017414:	931a      	str	r3, [sp, #104]	@ 0x68
 8017416:	4654      	mov	r4, sl
 8017418:	2205      	movs	r2, #5
 801741a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801741e:	4853      	ldr	r0, [pc, #332]	@ (801756c <_vfiprintf_r+0x21c>)
 8017420:	f7e8 fede 	bl	80001e0 <memchr>
 8017424:	9a04      	ldr	r2, [sp, #16]
 8017426:	b9d8      	cbnz	r0, 8017460 <_vfiprintf_r+0x110>
 8017428:	06d1      	lsls	r1, r2, #27
 801742a:	bf44      	itt	mi
 801742c:	2320      	movmi	r3, #32
 801742e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017432:	0713      	lsls	r3, r2, #28
 8017434:	bf44      	itt	mi
 8017436:	232b      	movmi	r3, #43	@ 0x2b
 8017438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801743c:	f89a 3000 	ldrb.w	r3, [sl]
 8017440:	2b2a      	cmp	r3, #42	@ 0x2a
 8017442:	d015      	beq.n	8017470 <_vfiprintf_r+0x120>
 8017444:	9a07      	ldr	r2, [sp, #28]
 8017446:	4654      	mov	r4, sl
 8017448:	2000      	movs	r0, #0
 801744a:	f04f 0c0a 	mov.w	ip, #10
 801744e:	4621      	mov	r1, r4
 8017450:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017454:	3b30      	subs	r3, #48	@ 0x30
 8017456:	2b09      	cmp	r3, #9
 8017458:	d94b      	bls.n	80174f2 <_vfiprintf_r+0x1a2>
 801745a:	b1b0      	cbz	r0, 801748a <_vfiprintf_r+0x13a>
 801745c:	9207      	str	r2, [sp, #28]
 801745e:	e014      	b.n	801748a <_vfiprintf_r+0x13a>
 8017460:	eba0 0308 	sub.w	r3, r0, r8
 8017464:	fa09 f303 	lsl.w	r3, r9, r3
 8017468:	4313      	orrs	r3, r2
 801746a:	9304      	str	r3, [sp, #16]
 801746c:	46a2      	mov	sl, r4
 801746e:	e7d2      	b.n	8017416 <_vfiprintf_r+0xc6>
 8017470:	9b03      	ldr	r3, [sp, #12]
 8017472:	1d19      	adds	r1, r3, #4
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	9103      	str	r1, [sp, #12]
 8017478:	2b00      	cmp	r3, #0
 801747a:	bfbb      	ittet	lt
 801747c:	425b      	neglt	r3, r3
 801747e:	f042 0202 	orrlt.w	r2, r2, #2
 8017482:	9307      	strge	r3, [sp, #28]
 8017484:	9307      	strlt	r3, [sp, #28]
 8017486:	bfb8      	it	lt
 8017488:	9204      	strlt	r2, [sp, #16]
 801748a:	7823      	ldrb	r3, [r4, #0]
 801748c:	2b2e      	cmp	r3, #46	@ 0x2e
 801748e:	d10a      	bne.n	80174a6 <_vfiprintf_r+0x156>
 8017490:	7863      	ldrb	r3, [r4, #1]
 8017492:	2b2a      	cmp	r3, #42	@ 0x2a
 8017494:	d132      	bne.n	80174fc <_vfiprintf_r+0x1ac>
 8017496:	9b03      	ldr	r3, [sp, #12]
 8017498:	1d1a      	adds	r2, r3, #4
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	9203      	str	r2, [sp, #12]
 801749e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80174a2:	3402      	adds	r4, #2
 80174a4:	9305      	str	r3, [sp, #20]
 80174a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801757c <_vfiprintf_r+0x22c>
 80174aa:	7821      	ldrb	r1, [r4, #0]
 80174ac:	2203      	movs	r2, #3
 80174ae:	4650      	mov	r0, sl
 80174b0:	f7e8 fe96 	bl	80001e0 <memchr>
 80174b4:	b138      	cbz	r0, 80174c6 <_vfiprintf_r+0x176>
 80174b6:	9b04      	ldr	r3, [sp, #16]
 80174b8:	eba0 000a 	sub.w	r0, r0, sl
 80174bc:	2240      	movs	r2, #64	@ 0x40
 80174be:	4082      	lsls	r2, r0
 80174c0:	4313      	orrs	r3, r2
 80174c2:	3401      	adds	r4, #1
 80174c4:	9304      	str	r3, [sp, #16]
 80174c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174ca:	4829      	ldr	r0, [pc, #164]	@ (8017570 <_vfiprintf_r+0x220>)
 80174cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80174d0:	2206      	movs	r2, #6
 80174d2:	f7e8 fe85 	bl	80001e0 <memchr>
 80174d6:	2800      	cmp	r0, #0
 80174d8:	d03f      	beq.n	801755a <_vfiprintf_r+0x20a>
 80174da:	4b26      	ldr	r3, [pc, #152]	@ (8017574 <_vfiprintf_r+0x224>)
 80174dc:	bb1b      	cbnz	r3, 8017526 <_vfiprintf_r+0x1d6>
 80174de:	9b03      	ldr	r3, [sp, #12]
 80174e0:	3307      	adds	r3, #7
 80174e2:	f023 0307 	bic.w	r3, r3, #7
 80174e6:	3308      	adds	r3, #8
 80174e8:	9303      	str	r3, [sp, #12]
 80174ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174ec:	443b      	add	r3, r7
 80174ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80174f0:	e76a      	b.n	80173c8 <_vfiprintf_r+0x78>
 80174f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80174f6:	460c      	mov	r4, r1
 80174f8:	2001      	movs	r0, #1
 80174fa:	e7a8      	b.n	801744e <_vfiprintf_r+0xfe>
 80174fc:	2300      	movs	r3, #0
 80174fe:	3401      	adds	r4, #1
 8017500:	9305      	str	r3, [sp, #20]
 8017502:	4619      	mov	r1, r3
 8017504:	f04f 0c0a 	mov.w	ip, #10
 8017508:	4620      	mov	r0, r4
 801750a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801750e:	3a30      	subs	r2, #48	@ 0x30
 8017510:	2a09      	cmp	r2, #9
 8017512:	d903      	bls.n	801751c <_vfiprintf_r+0x1cc>
 8017514:	2b00      	cmp	r3, #0
 8017516:	d0c6      	beq.n	80174a6 <_vfiprintf_r+0x156>
 8017518:	9105      	str	r1, [sp, #20]
 801751a:	e7c4      	b.n	80174a6 <_vfiprintf_r+0x156>
 801751c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017520:	4604      	mov	r4, r0
 8017522:	2301      	movs	r3, #1
 8017524:	e7f0      	b.n	8017508 <_vfiprintf_r+0x1b8>
 8017526:	ab03      	add	r3, sp, #12
 8017528:	9300      	str	r3, [sp, #0]
 801752a:	462a      	mov	r2, r5
 801752c:	4b12      	ldr	r3, [pc, #72]	@ (8017578 <_vfiprintf_r+0x228>)
 801752e:	a904      	add	r1, sp, #16
 8017530:	4630      	mov	r0, r6
 8017532:	f7fc fafd 	bl	8013b30 <_printf_float>
 8017536:	4607      	mov	r7, r0
 8017538:	1c78      	adds	r0, r7, #1
 801753a:	d1d6      	bne.n	80174ea <_vfiprintf_r+0x19a>
 801753c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801753e:	07d9      	lsls	r1, r3, #31
 8017540:	d405      	bmi.n	801754e <_vfiprintf_r+0x1fe>
 8017542:	89ab      	ldrh	r3, [r5, #12]
 8017544:	059a      	lsls	r2, r3, #22
 8017546:	d402      	bmi.n	801754e <_vfiprintf_r+0x1fe>
 8017548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801754a:	f7fd fba5 	bl	8014c98 <__retarget_lock_release_recursive>
 801754e:	89ab      	ldrh	r3, [r5, #12]
 8017550:	065b      	lsls	r3, r3, #25
 8017552:	f53f af1f 	bmi.w	8017394 <_vfiprintf_r+0x44>
 8017556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017558:	e71e      	b.n	8017398 <_vfiprintf_r+0x48>
 801755a:	ab03      	add	r3, sp, #12
 801755c:	9300      	str	r3, [sp, #0]
 801755e:	462a      	mov	r2, r5
 8017560:	4b05      	ldr	r3, [pc, #20]	@ (8017578 <_vfiprintf_r+0x228>)
 8017562:	a904      	add	r1, sp, #16
 8017564:	4630      	mov	r0, r6
 8017566:	f7fc fd7b 	bl	8014060 <_printf_i>
 801756a:	e7e4      	b.n	8017536 <_vfiprintf_r+0x1e6>
 801756c:	0801a505 	.word	0x0801a505
 8017570:	0801a50f 	.word	0x0801a50f
 8017574:	08013b31 	.word	0x08013b31
 8017578:	0801732b 	.word	0x0801732b
 801757c:	0801a50b 	.word	0x0801a50b

08017580 <__sflush_r>:
 8017580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017588:	0716      	lsls	r6, r2, #28
 801758a:	4605      	mov	r5, r0
 801758c:	460c      	mov	r4, r1
 801758e:	d454      	bmi.n	801763a <__sflush_r+0xba>
 8017590:	684b      	ldr	r3, [r1, #4]
 8017592:	2b00      	cmp	r3, #0
 8017594:	dc02      	bgt.n	801759c <__sflush_r+0x1c>
 8017596:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017598:	2b00      	cmp	r3, #0
 801759a:	dd48      	ble.n	801762e <__sflush_r+0xae>
 801759c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801759e:	2e00      	cmp	r6, #0
 80175a0:	d045      	beq.n	801762e <__sflush_r+0xae>
 80175a2:	2300      	movs	r3, #0
 80175a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80175a8:	682f      	ldr	r7, [r5, #0]
 80175aa:	6a21      	ldr	r1, [r4, #32]
 80175ac:	602b      	str	r3, [r5, #0]
 80175ae:	d030      	beq.n	8017612 <__sflush_r+0x92>
 80175b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80175b2:	89a3      	ldrh	r3, [r4, #12]
 80175b4:	0759      	lsls	r1, r3, #29
 80175b6:	d505      	bpl.n	80175c4 <__sflush_r+0x44>
 80175b8:	6863      	ldr	r3, [r4, #4]
 80175ba:	1ad2      	subs	r2, r2, r3
 80175bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80175be:	b10b      	cbz	r3, 80175c4 <__sflush_r+0x44>
 80175c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80175c2:	1ad2      	subs	r2, r2, r3
 80175c4:	2300      	movs	r3, #0
 80175c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80175c8:	6a21      	ldr	r1, [r4, #32]
 80175ca:	4628      	mov	r0, r5
 80175cc:	47b0      	blx	r6
 80175ce:	1c43      	adds	r3, r0, #1
 80175d0:	89a3      	ldrh	r3, [r4, #12]
 80175d2:	d106      	bne.n	80175e2 <__sflush_r+0x62>
 80175d4:	6829      	ldr	r1, [r5, #0]
 80175d6:	291d      	cmp	r1, #29
 80175d8:	d82b      	bhi.n	8017632 <__sflush_r+0xb2>
 80175da:	4a2a      	ldr	r2, [pc, #168]	@ (8017684 <__sflush_r+0x104>)
 80175dc:	40ca      	lsrs	r2, r1
 80175de:	07d6      	lsls	r6, r2, #31
 80175e0:	d527      	bpl.n	8017632 <__sflush_r+0xb2>
 80175e2:	2200      	movs	r2, #0
 80175e4:	6062      	str	r2, [r4, #4]
 80175e6:	04d9      	lsls	r1, r3, #19
 80175e8:	6922      	ldr	r2, [r4, #16]
 80175ea:	6022      	str	r2, [r4, #0]
 80175ec:	d504      	bpl.n	80175f8 <__sflush_r+0x78>
 80175ee:	1c42      	adds	r2, r0, #1
 80175f0:	d101      	bne.n	80175f6 <__sflush_r+0x76>
 80175f2:	682b      	ldr	r3, [r5, #0]
 80175f4:	b903      	cbnz	r3, 80175f8 <__sflush_r+0x78>
 80175f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80175f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80175fa:	602f      	str	r7, [r5, #0]
 80175fc:	b1b9      	cbz	r1, 801762e <__sflush_r+0xae>
 80175fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017602:	4299      	cmp	r1, r3
 8017604:	d002      	beq.n	801760c <__sflush_r+0x8c>
 8017606:	4628      	mov	r0, r5
 8017608:	f7fe f9a6 	bl	8015958 <_free_r>
 801760c:	2300      	movs	r3, #0
 801760e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017610:	e00d      	b.n	801762e <__sflush_r+0xae>
 8017612:	2301      	movs	r3, #1
 8017614:	4628      	mov	r0, r5
 8017616:	47b0      	blx	r6
 8017618:	4602      	mov	r2, r0
 801761a:	1c50      	adds	r0, r2, #1
 801761c:	d1c9      	bne.n	80175b2 <__sflush_r+0x32>
 801761e:	682b      	ldr	r3, [r5, #0]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d0c6      	beq.n	80175b2 <__sflush_r+0x32>
 8017624:	2b1d      	cmp	r3, #29
 8017626:	d001      	beq.n	801762c <__sflush_r+0xac>
 8017628:	2b16      	cmp	r3, #22
 801762a:	d11e      	bne.n	801766a <__sflush_r+0xea>
 801762c:	602f      	str	r7, [r5, #0]
 801762e:	2000      	movs	r0, #0
 8017630:	e022      	b.n	8017678 <__sflush_r+0xf8>
 8017632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017636:	b21b      	sxth	r3, r3
 8017638:	e01b      	b.n	8017672 <__sflush_r+0xf2>
 801763a:	690f      	ldr	r7, [r1, #16]
 801763c:	2f00      	cmp	r7, #0
 801763e:	d0f6      	beq.n	801762e <__sflush_r+0xae>
 8017640:	0793      	lsls	r3, r2, #30
 8017642:	680e      	ldr	r6, [r1, #0]
 8017644:	bf08      	it	eq
 8017646:	694b      	ldreq	r3, [r1, #20]
 8017648:	600f      	str	r7, [r1, #0]
 801764a:	bf18      	it	ne
 801764c:	2300      	movne	r3, #0
 801764e:	eba6 0807 	sub.w	r8, r6, r7
 8017652:	608b      	str	r3, [r1, #8]
 8017654:	f1b8 0f00 	cmp.w	r8, #0
 8017658:	dde9      	ble.n	801762e <__sflush_r+0xae>
 801765a:	6a21      	ldr	r1, [r4, #32]
 801765c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801765e:	4643      	mov	r3, r8
 8017660:	463a      	mov	r2, r7
 8017662:	4628      	mov	r0, r5
 8017664:	47b0      	blx	r6
 8017666:	2800      	cmp	r0, #0
 8017668:	dc08      	bgt.n	801767c <__sflush_r+0xfc>
 801766a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801766e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017672:	81a3      	strh	r3, [r4, #12]
 8017674:	f04f 30ff 	mov.w	r0, #4294967295
 8017678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801767c:	4407      	add	r7, r0
 801767e:	eba8 0800 	sub.w	r8, r8, r0
 8017682:	e7e7      	b.n	8017654 <__sflush_r+0xd4>
 8017684:	20400001 	.word	0x20400001

08017688 <_fflush_r>:
 8017688:	b538      	push	{r3, r4, r5, lr}
 801768a:	690b      	ldr	r3, [r1, #16]
 801768c:	4605      	mov	r5, r0
 801768e:	460c      	mov	r4, r1
 8017690:	b913      	cbnz	r3, 8017698 <_fflush_r+0x10>
 8017692:	2500      	movs	r5, #0
 8017694:	4628      	mov	r0, r5
 8017696:	bd38      	pop	{r3, r4, r5, pc}
 8017698:	b118      	cbz	r0, 80176a2 <_fflush_r+0x1a>
 801769a:	6a03      	ldr	r3, [r0, #32]
 801769c:	b90b      	cbnz	r3, 80176a2 <_fflush_r+0x1a>
 801769e:	f7fd f897 	bl	80147d0 <__sinit>
 80176a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d0f3      	beq.n	8017692 <_fflush_r+0xa>
 80176aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80176ac:	07d0      	lsls	r0, r2, #31
 80176ae:	d404      	bmi.n	80176ba <_fflush_r+0x32>
 80176b0:	0599      	lsls	r1, r3, #22
 80176b2:	d402      	bmi.n	80176ba <_fflush_r+0x32>
 80176b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80176b6:	f7fd faee 	bl	8014c96 <__retarget_lock_acquire_recursive>
 80176ba:	4628      	mov	r0, r5
 80176bc:	4621      	mov	r1, r4
 80176be:	f7ff ff5f 	bl	8017580 <__sflush_r>
 80176c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80176c4:	07da      	lsls	r2, r3, #31
 80176c6:	4605      	mov	r5, r0
 80176c8:	d4e4      	bmi.n	8017694 <_fflush_r+0xc>
 80176ca:	89a3      	ldrh	r3, [r4, #12]
 80176cc:	059b      	lsls	r3, r3, #22
 80176ce:	d4e1      	bmi.n	8017694 <_fflush_r+0xc>
 80176d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80176d2:	f7fd fae1 	bl	8014c98 <__retarget_lock_release_recursive>
 80176d6:	e7dd      	b.n	8017694 <_fflush_r+0xc>

080176d8 <__swhatbuf_r>:
 80176d8:	b570      	push	{r4, r5, r6, lr}
 80176da:	460c      	mov	r4, r1
 80176dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176e0:	2900      	cmp	r1, #0
 80176e2:	b096      	sub	sp, #88	@ 0x58
 80176e4:	4615      	mov	r5, r2
 80176e6:	461e      	mov	r6, r3
 80176e8:	da0d      	bge.n	8017706 <__swhatbuf_r+0x2e>
 80176ea:	89a3      	ldrh	r3, [r4, #12]
 80176ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80176f0:	f04f 0100 	mov.w	r1, #0
 80176f4:	bf14      	ite	ne
 80176f6:	2340      	movne	r3, #64	@ 0x40
 80176f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80176fc:	2000      	movs	r0, #0
 80176fe:	6031      	str	r1, [r6, #0]
 8017700:	602b      	str	r3, [r5, #0]
 8017702:	b016      	add	sp, #88	@ 0x58
 8017704:	bd70      	pop	{r4, r5, r6, pc}
 8017706:	466a      	mov	r2, sp
 8017708:	f000 f874 	bl	80177f4 <_fstat_r>
 801770c:	2800      	cmp	r0, #0
 801770e:	dbec      	blt.n	80176ea <__swhatbuf_r+0x12>
 8017710:	9901      	ldr	r1, [sp, #4]
 8017712:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017716:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801771a:	4259      	negs	r1, r3
 801771c:	4159      	adcs	r1, r3
 801771e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017722:	e7eb      	b.n	80176fc <__swhatbuf_r+0x24>

08017724 <__smakebuf_r>:
 8017724:	898b      	ldrh	r3, [r1, #12]
 8017726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017728:	079d      	lsls	r5, r3, #30
 801772a:	4606      	mov	r6, r0
 801772c:	460c      	mov	r4, r1
 801772e:	d507      	bpl.n	8017740 <__smakebuf_r+0x1c>
 8017730:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017734:	6023      	str	r3, [r4, #0]
 8017736:	6123      	str	r3, [r4, #16]
 8017738:	2301      	movs	r3, #1
 801773a:	6163      	str	r3, [r4, #20]
 801773c:	b003      	add	sp, #12
 801773e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017740:	ab01      	add	r3, sp, #4
 8017742:	466a      	mov	r2, sp
 8017744:	f7ff ffc8 	bl	80176d8 <__swhatbuf_r>
 8017748:	9f00      	ldr	r7, [sp, #0]
 801774a:	4605      	mov	r5, r0
 801774c:	4639      	mov	r1, r7
 801774e:	4630      	mov	r0, r6
 8017750:	f7fc f8c2 	bl	80138d8 <_malloc_r>
 8017754:	b948      	cbnz	r0, 801776a <__smakebuf_r+0x46>
 8017756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801775a:	059a      	lsls	r2, r3, #22
 801775c:	d4ee      	bmi.n	801773c <__smakebuf_r+0x18>
 801775e:	f023 0303 	bic.w	r3, r3, #3
 8017762:	f043 0302 	orr.w	r3, r3, #2
 8017766:	81a3      	strh	r3, [r4, #12]
 8017768:	e7e2      	b.n	8017730 <__smakebuf_r+0xc>
 801776a:	89a3      	ldrh	r3, [r4, #12]
 801776c:	6020      	str	r0, [r4, #0]
 801776e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017772:	81a3      	strh	r3, [r4, #12]
 8017774:	9b01      	ldr	r3, [sp, #4]
 8017776:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801777a:	b15b      	cbz	r3, 8017794 <__smakebuf_r+0x70>
 801777c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017780:	4630      	mov	r0, r6
 8017782:	f000 f849 	bl	8017818 <_isatty_r>
 8017786:	b128      	cbz	r0, 8017794 <__smakebuf_r+0x70>
 8017788:	89a3      	ldrh	r3, [r4, #12]
 801778a:	f023 0303 	bic.w	r3, r3, #3
 801778e:	f043 0301 	orr.w	r3, r3, #1
 8017792:	81a3      	strh	r3, [r4, #12]
 8017794:	89a3      	ldrh	r3, [r4, #12]
 8017796:	431d      	orrs	r5, r3
 8017798:	81a5      	strh	r5, [r4, #12]
 801779a:	e7cf      	b.n	801773c <__smakebuf_r+0x18>

0801779c <memmove>:
 801779c:	4288      	cmp	r0, r1
 801779e:	b510      	push	{r4, lr}
 80177a0:	eb01 0402 	add.w	r4, r1, r2
 80177a4:	d902      	bls.n	80177ac <memmove+0x10>
 80177a6:	4284      	cmp	r4, r0
 80177a8:	4623      	mov	r3, r4
 80177aa:	d807      	bhi.n	80177bc <memmove+0x20>
 80177ac:	1e43      	subs	r3, r0, #1
 80177ae:	42a1      	cmp	r1, r4
 80177b0:	d008      	beq.n	80177c4 <memmove+0x28>
 80177b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80177b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80177ba:	e7f8      	b.n	80177ae <memmove+0x12>
 80177bc:	4402      	add	r2, r0
 80177be:	4601      	mov	r1, r0
 80177c0:	428a      	cmp	r2, r1
 80177c2:	d100      	bne.n	80177c6 <memmove+0x2a>
 80177c4:	bd10      	pop	{r4, pc}
 80177c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80177ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80177ce:	e7f7      	b.n	80177c0 <memmove+0x24>

080177d0 <strncmp>:
 80177d0:	b510      	push	{r4, lr}
 80177d2:	b16a      	cbz	r2, 80177f0 <strncmp+0x20>
 80177d4:	3901      	subs	r1, #1
 80177d6:	1884      	adds	r4, r0, r2
 80177d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80177e0:	429a      	cmp	r2, r3
 80177e2:	d103      	bne.n	80177ec <strncmp+0x1c>
 80177e4:	42a0      	cmp	r0, r4
 80177e6:	d001      	beq.n	80177ec <strncmp+0x1c>
 80177e8:	2a00      	cmp	r2, #0
 80177ea:	d1f5      	bne.n	80177d8 <strncmp+0x8>
 80177ec:	1ad0      	subs	r0, r2, r3
 80177ee:	bd10      	pop	{r4, pc}
 80177f0:	4610      	mov	r0, r2
 80177f2:	e7fc      	b.n	80177ee <strncmp+0x1e>

080177f4 <_fstat_r>:
 80177f4:	b538      	push	{r3, r4, r5, lr}
 80177f6:	4d07      	ldr	r5, [pc, #28]	@ (8017814 <_fstat_r+0x20>)
 80177f8:	2300      	movs	r3, #0
 80177fa:	4604      	mov	r4, r0
 80177fc:	4608      	mov	r0, r1
 80177fe:	4611      	mov	r1, r2
 8017800:	602b      	str	r3, [r5, #0]
 8017802:	f7ea fac5 	bl	8001d90 <_fstat>
 8017806:	1c43      	adds	r3, r0, #1
 8017808:	d102      	bne.n	8017810 <_fstat_r+0x1c>
 801780a:	682b      	ldr	r3, [r5, #0]
 801780c:	b103      	cbz	r3, 8017810 <_fstat_r+0x1c>
 801780e:	6023      	str	r3, [r4, #0]
 8017810:	bd38      	pop	{r3, r4, r5, pc}
 8017812:	bf00      	nop
 8017814:	20004cb0 	.word	0x20004cb0

08017818 <_isatty_r>:
 8017818:	b538      	push	{r3, r4, r5, lr}
 801781a:	4d06      	ldr	r5, [pc, #24]	@ (8017834 <_isatty_r+0x1c>)
 801781c:	2300      	movs	r3, #0
 801781e:	4604      	mov	r4, r0
 8017820:	4608      	mov	r0, r1
 8017822:	602b      	str	r3, [r5, #0]
 8017824:	f7ea fac4 	bl	8001db0 <_isatty>
 8017828:	1c43      	adds	r3, r0, #1
 801782a:	d102      	bne.n	8017832 <_isatty_r+0x1a>
 801782c:	682b      	ldr	r3, [r5, #0]
 801782e:	b103      	cbz	r3, 8017832 <_isatty_r+0x1a>
 8017830:	6023      	str	r3, [r4, #0]
 8017832:	bd38      	pop	{r3, r4, r5, pc}
 8017834:	20004cb0 	.word	0x20004cb0

08017838 <memcpy>:
 8017838:	440a      	add	r2, r1
 801783a:	4291      	cmp	r1, r2
 801783c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017840:	d100      	bne.n	8017844 <memcpy+0xc>
 8017842:	4770      	bx	lr
 8017844:	b510      	push	{r4, lr}
 8017846:	f811 4b01 	ldrb.w	r4, [r1], #1
 801784a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801784e:	4291      	cmp	r1, r2
 8017850:	d1f9      	bne.n	8017846 <memcpy+0xe>
 8017852:	bd10      	pop	{r4, pc}
 8017854:	0000      	movs	r0, r0
	...

08017858 <nan>:
 8017858:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017860 <nan+0x8>
 801785c:	4770      	bx	lr
 801785e:	bf00      	nop
 8017860:	00000000 	.word	0x00000000
 8017864:	7ff80000 	.word	0x7ff80000

08017868 <__assert_func>:
 8017868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801786a:	4614      	mov	r4, r2
 801786c:	461a      	mov	r2, r3
 801786e:	4b09      	ldr	r3, [pc, #36]	@ (8017894 <__assert_func+0x2c>)
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	4605      	mov	r5, r0
 8017874:	68d8      	ldr	r0, [r3, #12]
 8017876:	b14c      	cbz	r4, 801788c <__assert_func+0x24>
 8017878:	4b07      	ldr	r3, [pc, #28]	@ (8017898 <__assert_func+0x30>)
 801787a:	9100      	str	r1, [sp, #0]
 801787c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017880:	4906      	ldr	r1, [pc, #24]	@ (801789c <__assert_func+0x34>)
 8017882:	462b      	mov	r3, r5
 8017884:	f000 fba8 	bl	8017fd8 <fiprintf>
 8017888:	f000 fbb8 	bl	8017ffc <abort>
 801788c:	4b04      	ldr	r3, [pc, #16]	@ (80178a0 <__assert_func+0x38>)
 801788e:	461c      	mov	r4, r3
 8017890:	e7f3      	b.n	801787a <__assert_func+0x12>
 8017892:	bf00      	nop
 8017894:	20000254 	.word	0x20000254
 8017898:	0801a51e 	.word	0x0801a51e
 801789c:	0801a52b 	.word	0x0801a52b
 80178a0:	0801a559 	.word	0x0801a559

080178a4 <_calloc_r>:
 80178a4:	b570      	push	{r4, r5, r6, lr}
 80178a6:	fba1 5402 	umull	r5, r4, r1, r2
 80178aa:	b934      	cbnz	r4, 80178ba <_calloc_r+0x16>
 80178ac:	4629      	mov	r1, r5
 80178ae:	f7fc f813 	bl	80138d8 <_malloc_r>
 80178b2:	4606      	mov	r6, r0
 80178b4:	b928      	cbnz	r0, 80178c2 <_calloc_r+0x1e>
 80178b6:	4630      	mov	r0, r6
 80178b8:	bd70      	pop	{r4, r5, r6, pc}
 80178ba:	220c      	movs	r2, #12
 80178bc:	6002      	str	r2, [r0, #0]
 80178be:	2600      	movs	r6, #0
 80178c0:	e7f9      	b.n	80178b6 <_calloc_r+0x12>
 80178c2:	462a      	mov	r2, r5
 80178c4:	4621      	mov	r1, r4
 80178c6:	f7fd f959 	bl	8014b7c <memset>
 80178ca:	e7f4      	b.n	80178b6 <_calloc_r+0x12>

080178cc <rshift>:
 80178cc:	6903      	ldr	r3, [r0, #16]
 80178ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80178d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80178da:	f100 0414 	add.w	r4, r0, #20
 80178de:	dd45      	ble.n	801796c <rshift+0xa0>
 80178e0:	f011 011f 	ands.w	r1, r1, #31
 80178e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80178e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80178ec:	d10c      	bne.n	8017908 <rshift+0x3c>
 80178ee:	f100 0710 	add.w	r7, r0, #16
 80178f2:	4629      	mov	r1, r5
 80178f4:	42b1      	cmp	r1, r6
 80178f6:	d334      	bcc.n	8017962 <rshift+0x96>
 80178f8:	1a9b      	subs	r3, r3, r2
 80178fa:	009b      	lsls	r3, r3, #2
 80178fc:	1eea      	subs	r2, r5, #3
 80178fe:	4296      	cmp	r6, r2
 8017900:	bf38      	it	cc
 8017902:	2300      	movcc	r3, #0
 8017904:	4423      	add	r3, r4
 8017906:	e015      	b.n	8017934 <rshift+0x68>
 8017908:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801790c:	f1c1 0820 	rsb	r8, r1, #32
 8017910:	40cf      	lsrs	r7, r1
 8017912:	f105 0e04 	add.w	lr, r5, #4
 8017916:	46a1      	mov	r9, r4
 8017918:	4576      	cmp	r6, lr
 801791a:	46f4      	mov	ip, lr
 801791c:	d815      	bhi.n	801794a <rshift+0x7e>
 801791e:	1a9a      	subs	r2, r3, r2
 8017920:	0092      	lsls	r2, r2, #2
 8017922:	3a04      	subs	r2, #4
 8017924:	3501      	adds	r5, #1
 8017926:	42ae      	cmp	r6, r5
 8017928:	bf38      	it	cc
 801792a:	2200      	movcc	r2, #0
 801792c:	18a3      	adds	r3, r4, r2
 801792e:	50a7      	str	r7, [r4, r2]
 8017930:	b107      	cbz	r7, 8017934 <rshift+0x68>
 8017932:	3304      	adds	r3, #4
 8017934:	1b1a      	subs	r2, r3, r4
 8017936:	42a3      	cmp	r3, r4
 8017938:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801793c:	bf08      	it	eq
 801793e:	2300      	moveq	r3, #0
 8017940:	6102      	str	r2, [r0, #16]
 8017942:	bf08      	it	eq
 8017944:	6143      	streq	r3, [r0, #20]
 8017946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801794a:	f8dc c000 	ldr.w	ip, [ip]
 801794e:	fa0c fc08 	lsl.w	ip, ip, r8
 8017952:	ea4c 0707 	orr.w	r7, ip, r7
 8017956:	f849 7b04 	str.w	r7, [r9], #4
 801795a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801795e:	40cf      	lsrs	r7, r1
 8017960:	e7da      	b.n	8017918 <rshift+0x4c>
 8017962:	f851 cb04 	ldr.w	ip, [r1], #4
 8017966:	f847 cf04 	str.w	ip, [r7, #4]!
 801796a:	e7c3      	b.n	80178f4 <rshift+0x28>
 801796c:	4623      	mov	r3, r4
 801796e:	e7e1      	b.n	8017934 <rshift+0x68>

08017970 <__hexdig_fun>:
 8017970:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017974:	2b09      	cmp	r3, #9
 8017976:	d802      	bhi.n	801797e <__hexdig_fun+0xe>
 8017978:	3820      	subs	r0, #32
 801797a:	b2c0      	uxtb	r0, r0
 801797c:	4770      	bx	lr
 801797e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017982:	2b05      	cmp	r3, #5
 8017984:	d801      	bhi.n	801798a <__hexdig_fun+0x1a>
 8017986:	3847      	subs	r0, #71	@ 0x47
 8017988:	e7f7      	b.n	801797a <__hexdig_fun+0xa>
 801798a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801798e:	2b05      	cmp	r3, #5
 8017990:	d801      	bhi.n	8017996 <__hexdig_fun+0x26>
 8017992:	3827      	subs	r0, #39	@ 0x27
 8017994:	e7f1      	b.n	801797a <__hexdig_fun+0xa>
 8017996:	2000      	movs	r0, #0
 8017998:	4770      	bx	lr
	...

0801799c <__gethex>:
 801799c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179a0:	b085      	sub	sp, #20
 80179a2:	468a      	mov	sl, r1
 80179a4:	9302      	str	r3, [sp, #8]
 80179a6:	680b      	ldr	r3, [r1, #0]
 80179a8:	9001      	str	r0, [sp, #4]
 80179aa:	4690      	mov	r8, r2
 80179ac:	1c9c      	adds	r4, r3, #2
 80179ae:	46a1      	mov	r9, r4
 80179b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80179b4:	2830      	cmp	r0, #48	@ 0x30
 80179b6:	d0fa      	beq.n	80179ae <__gethex+0x12>
 80179b8:	eba9 0303 	sub.w	r3, r9, r3
 80179bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80179c0:	f7ff ffd6 	bl	8017970 <__hexdig_fun>
 80179c4:	4605      	mov	r5, r0
 80179c6:	2800      	cmp	r0, #0
 80179c8:	d168      	bne.n	8017a9c <__gethex+0x100>
 80179ca:	49a0      	ldr	r1, [pc, #640]	@ (8017c4c <__gethex+0x2b0>)
 80179cc:	2201      	movs	r2, #1
 80179ce:	4648      	mov	r0, r9
 80179d0:	f7ff fefe 	bl	80177d0 <strncmp>
 80179d4:	4607      	mov	r7, r0
 80179d6:	2800      	cmp	r0, #0
 80179d8:	d167      	bne.n	8017aaa <__gethex+0x10e>
 80179da:	f899 0001 	ldrb.w	r0, [r9, #1]
 80179de:	4626      	mov	r6, r4
 80179e0:	f7ff ffc6 	bl	8017970 <__hexdig_fun>
 80179e4:	2800      	cmp	r0, #0
 80179e6:	d062      	beq.n	8017aae <__gethex+0x112>
 80179e8:	4623      	mov	r3, r4
 80179ea:	7818      	ldrb	r0, [r3, #0]
 80179ec:	2830      	cmp	r0, #48	@ 0x30
 80179ee:	4699      	mov	r9, r3
 80179f0:	f103 0301 	add.w	r3, r3, #1
 80179f4:	d0f9      	beq.n	80179ea <__gethex+0x4e>
 80179f6:	f7ff ffbb 	bl	8017970 <__hexdig_fun>
 80179fa:	fab0 f580 	clz	r5, r0
 80179fe:	096d      	lsrs	r5, r5, #5
 8017a00:	f04f 0b01 	mov.w	fp, #1
 8017a04:	464a      	mov	r2, r9
 8017a06:	4616      	mov	r6, r2
 8017a08:	3201      	adds	r2, #1
 8017a0a:	7830      	ldrb	r0, [r6, #0]
 8017a0c:	f7ff ffb0 	bl	8017970 <__hexdig_fun>
 8017a10:	2800      	cmp	r0, #0
 8017a12:	d1f8      	bne.n	8017a06 <__gethex+0x6a>
 8017a14:	498d      	ldr	r1, [pc, #564]	@ (8017c4c <__gethex+0x2b0>)
 8017a16:	2201      	movs	r2, #1
 8017a18:	4630      	mov	r0, r6
 8017a1a:	f7ff fed9 	bl	80177d0 <strncmp>
 8017a1e:	2800      	cmp	r0, #0
 8017a20:	d13f      	bne.n	8017aa2 <__gethex+0x106>
 8017a22:	b944      	cbnz	r4, 8017a36 <__gethex+0x9a>
 8017a24:	1c74      	adds	r4, r6, #1
 8017a26:	4622      	mov	r2, r4
 8017a28:	4616      	mov	r6, r2
 8017a2a:	3201      	adds	r2, #1
 8017a2c:	7830      	ldrb	r0, [r6, #0]
 8017a2e:	f7ff ff9f 	bl	8017970 <__hexdig_fun>
 8017a32:	2800      	cmp	r0, #0
 8017a34:	d1f8      	bne.n	8017a28 <__gethex+0x8c>
 8017a36:	1ba4      	subs	r4, r4, r6
 8017a38:	00a7      	lsls	r7, r4, #2
 8017a3a:	7833      	ldrb	r3, [r6, #0]
 8017a3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017a40:	2b50      	cmp	r3, #80	@ 0x50
 8017a42:	d13e      	bne.n	8017ac2 <__gethex+0x126>
 8017a44:	7873      	ldrb	r3, [r6, #1]
 8017a46:	2b2b      	cmp	r3, #43	@ 0x2b
 8017a48:	d033      	beq.n	8017ab2 <__gethex+0x116>
 8017a4a:	2b2d      	cmp	r3, #45	@ 0x2d
 8017a4c:	d034      	beq.n	8017ab8 <__gethex+0x11c>
 8017a4e:	1c71      	adds	r1, r6, #1
 8017a50:	2400      	movs	r4, #0
 8017a52:	7808      	ldrb	r0, [r1, #0]
 8017a54:	f7ff ff8c 	bl	8017970 <__hexdig_fun>
 8017a58:	1e43      	subs	r3, r0, #1
 8017a5a:	b2db      	uxtb	r3, r3
 8017a5c:	2b18      	cmp	r3, #24
 8017a5e:	d830      	bhi.n	8017ac2 <__gethex+0x126>
 8017a60:	f1a0 0210 	sub.w	r2, r0, #16
 8017a64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017a68:	f7ff ff82 	bl	8017970 <__hexdig_fun>
 8017a6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8017a70:	fa5f fc8c 	uxtb.w	ip, ip
 8017a74:	f1bc 0f18 	cmp.w	ip, #24
 8017a78:	f04f 030a 	mov.w	r3, #10
 8017a7c:	d91e      	bls.n	8017abc <__gethex+0x120>
 8017a7e:	b104      	cbz	r4, 8017a82 <__gethex+0xe6>
 8017a80:	4252      	negs	r2, r2
 8017a82:	4417      	add	r7, r2
 8017a84:	f8ca 1000 	str.w	r1, [sl]
 8017a88:	b1ed      	cbz	r5, 8017ac6 <__gethex+0x12a>
 8017a8a:	f1bb 0f00 	cmp.w	fp, #0
 8017a8e:	bf0c      	ite	eq
 8017a90:	2506      	moveq	r5, #6
 8017a92:	2500      	movne	r5, #0
 8017a94:	4628      	mov	r0, r5
 8017a96:	b005      	add	sp, #20
 8017a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a9c:	2500      	movs	r5, #0
 8017a9e:	462c      	mov	r4, r5
 8017aa0:	e7b0      	b.n	8017a04 <__gethex+0x68>
 8017aa2:	2c00      	cmp	r4, #0
 8017aa4:	d1c7      	bne.n	8017a36 <__gethex+0x9a>
 8017aa6:	4627      	mov	r7, r4
 8017aa8:	e7c7      	b.n	8017a3a <__gethex+0x9e>
 8017aaa:	464e      	mov	r6, r9
 8017aac:	462f      	mov	r7, r5
 8017aae:	2501      	movs	r5, #1
 8017ab0:	e7c3      	b.n	8017a3a <__gethex+0x9e>
 8017ab2:	2400      	movs	r4, #0
 8017ab4:	1cb1      	adds	r1, r6, #2
 8017ab6:	e7cc      	b.n	8017a52 <__gethex+0xb6>
 8017ab8:	2401      	movs	r4, #1
 8017aba:	e7fb      	b.n	8017ab4 <__gethex+0x118>
 8017abc:	fb03 0002 	mla	r0, r3, r2, r0
 8017ac0:	e7ce      	b.n	8017a60 <__gethex+0xc4>
 8017ac2:	4631      	mov	r1, r6
 8017ac4:	e7de      	b.n	8017a84 <__gethex+0xe8>
 8017ac6:	eba6 0309 	sub.w	r3, r6, r9
 8017aca:	3b01      	subs	r3, #1
 8017acc:	4629      	mov	r1, r5
 8017ace:	2b07      	cmp	r3, #7
 8017ad0:	dc0a      	bgt.n	8017ae8 <__gethex+0x14c>
 8017ad2:	9801      	ldr	r0, [sp, #4]
 8017ad4:	f7fd ff8a 	bl	80159ec <_Balloc>
 8017ad8:	4604      	mov	r4, r0
 8017ada:	b940      	cbnz	r0, 8017aee <__gethex+0x152>
 8017adc:	4b5c      	ldr	r3, [pc, #368]	@ (8017c50 <__gethex+0x2b4>)
 8017ade:	4602      	mov	r2, r0
 8017ae0:	21e4      	movs	r1, #228	@ 0xe4
 8017ae2:	485c      	ldr	r0, [pc, #368]	@ (8017c54 <__gethex+0x2b8>)
 8017ae4:	f7ff fec0 	bl	8017868 <__assert_func>
 8017ae8:	3101      	adds	r1, #1
 8017aea:	105b      	asrs	r3, r3, #1
 8017aec:	e7ef      	b.n	8017ace <__gethex+0x132>
 8017aee:	f100 0a14 	add.w	sl, r0, #20
 8017af2:	2300      	movs	r3, #0
 8017af4:	4655      	mov	r5, sl
 8017af6:	469b      	mov	fp, r3
 8017af8:	45b1      	cmp	r9, r6
 8017afa:	d337      	bcc.n	8017b6c <__gethex+0x1d0>
 8017afc:	f845 bb04 	str.w	fp, [r5], #4
 8017b00:	eba5 050a 	sub.w	r5, r5, sl
 8017b04:	10ad      	asrs	r5, r5, #2
 8017b06:	6125      	str	r5, [r4, #16]
 8017b08:	4658      	mov	r0, fp
 8017b0a:	f7fe f861 	bl	8015bd0 <__hi0bits>
 8017b0e:	016d      	lsls	r5, r5, #5
 8017b10:	f8d8 6000 	ldr.w	r6, [r8]
 8017b14:	1a2d      	subs	r5, r5, r0
 8017b16:	42b5      	cmp	r5, r6
 8017b18:	dd54      	ble.n	8017bc4 <__gethex+0x228>
 8017b1a:	1bad      	subs	r5, r5, r6
 8017b1c:	4629      	mov	r1, r5
 8017b1e:	4620      	mov	r0, r4
 8017b20:	f7fe fbed 	bl	80162fe <__any_on>
 8017b24:	4681      	mov	r9, r0
 8017b26:	b178      	cbz	r0, 8017b48 <__gethex+0x1ac>
 8017b28:	1e6b      	subs	r3, r5, #1
 8017b2a:	1159      	asrs	r1, r3, #5
 8017b2c:	f003 021f 	and.w	r2, r3, #31
 8017b30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017b34:	f04f 0901 	mov.w	r9, #1
 8017b38:	fa09 f202 	lsl.w	r2, r9, r2
 8017b3c:	420a      	tst	r2, r1
 8017b3e:	d003      	beq.n	8017b48 <__gethex+0x1ac>
 8017b40:	454b      	cmp	r3, r9
 8017b42:	dc36      	bgt.n	8017bb2 <__gethex+0x216>
 8017b44:	f04f 0902 	mov.w	r9, #2
 8017b48:	4629      	mov	r1, r5
 8017b4a:	4620      	mov	r0, r4
 8017b4c:	f7ff febe 	bl	80178cc <rshift>
 8017b50:	442f      	add	r7, r5
 8017b52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017b56:	42bb      	cmp	r3, r7
 8017b58:	da42      	bge.n	8017be0 <__gethex+0x244>
 8017b5a:	9801      	ldr	r0, [sp, #4]
 8017b5c:	4621      	mov	r1, r4
 8017b5e:	f7fd ff85 	bl	8015a6c <_Bfree>
 8017b62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017b64:	2300      	movs	r3, #0
 8017b66:	6013      	str	r3, [r2, #0]
 8017b68:	25a3      	movs	r5, #163	@ 0xa3
 8017b6a:	e793      	b.n	8017a94 <__gethex+0xf8>
 8017b6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017b70:	2a2e      	cmp	r2, #46	@ 0x2e
 8017b72:	d012      	beq.n	8017b9a <__gethex+0x1fe>
 8017b74:	2b20      	cmp	r3, #32
 8017b76:	d104      	bne.n	8017b82 <__gethex+0x1e6>
 8017b78:	f845 bb04 	str.w	fp, [r5], #4
 8017b7c:	f04f 0b00 	mov.w	fp, #0
 8017b80:	465b      	mov	r3, fp
 8017b82:	7830      	ldrb	r0, [r6, #0]
 8017b84:	9303      	str	r3, [sp, #12]
 8017b86:	f7ff fef3 	bl	8017970 <__hexdig_fun>
 8017b8a:	9b03      	ldr	r3, [sp, #12]
 8017b8c:	f000 000f 	and.w	r0, r0, #15
 8017b90:	4098      	lsls	r0, r3
 8017b92:	ea4b 0b00 	orr.w	fp, fp, r0
 8017b96:	3304      	adds	r3, #4
 8017b98:	e7ae      	b.n	8017af8 <__gethex+0x15c>
 8017b9a:	45b1      	cmp	r9, r6
 8017b9c:	d8ea      	bhi.n	8017b74 <__gethex+0x1d8>
 8017b9e:	492b      	ldr	r1, [pc, #172]	@ (8017c4c <__gethex+0x2b0>)
 8017ba0:	9303      	str	r3, [sp, #12]
 8017ba2:	2201      	movs	r2, #1
 8017ba4:	4630      	mov	r0, r6
 8017ba6:	f7ff fe13 	bl	80177d0 <strncmp>
 8017baa:	9b03      	ldr	r3, [sp, #12]
 8017bac:	2800      	cmp	r0, #0
 8017bae:	d1e1      	bne.n	8017b74 <__gethex+0x1d8>
 8017bb0:	e7a2      	b.n	8017af8 <__gethex+0x15c>
 8017bb2:	1ea9      	subs	r1, r5, #2
 8017bb4:	4620      	mov	r0, r4
 8017bb6:	f7fe fba2 	bl	80162fe <__any_on>
 8017bba:	2800      	cmp	r0, #0
 8017bbc:	d0c2      	beq.n	8017b44 <__gethex+0x1a8>
 8017bbe:	f04f 0903 	mov.w	r9, #3
 8017bc2:	e7c1      	b.n	8017b48 <__gethex+0x1ac>
 8017bc4:	da09      	bge.n	8017bda <__gethex+0x23e>
 8017bc6:	1b75      	subs	r5, r6, r5
 8017bc8:	4621      	mov	r1, r4
 8017bca:	9801      	ldr	r0, [sp, #4]
 8017bcc:	462a      	mov	r2, r5
 8017bce:	f7fe f95d 	bl	8015e8c <__lshift>
 8017bd2:	1b7f      	subs	r7, r7, r5
 8017bd4:	4604      	mov	r4, r0
 8017bd6:	f100 0a14 	add.w	sl, r0, #20
 8017bda:	f04f 0900 	mov.w	r9, #0
 8017bde:	e7b8      	b.n	8017b52 <__gethex+0x1b6>
 8017be0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017be4:	42bd      	cmp	r5, r7
 8017be6:	dd6f      	ble.n	8017cc8 <__gethex+0x32c>
 8017be8:	1bed      	subs	r5, r5, r7
 8017bea:	42ae      	cmp	r6, r5
 8017bec:	dc34      	bgt.n	8017c58 <__gethex+0x2bc>
 8017bee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017bf2:	2b02      	cmp	r3, #2
 8017bf4:	d022      	beq.n	8017c3c <__gethex+0x2a0>
 8017bf6:	2b03      	cmp	r3, #3
 8017bf8:	d024      	beq.n	8017c44 <__gethex+0x2a8>
 8017bfa:	2b01      	cmp	r3, #1
 8017bfc:	d115      	bne.n	8017c2a <__gethex+0x28e>
 8017bfe:	42ae      	cmp	r6, r5
 8017c00:	d113      	bne.n	8017c2a <__gethex+0x28e>
 8017c02:	2e01      	cmp	r6, #1
 8017c04:	d10b      	bne.n	8017c1e <__gethex+0x282>
 8017c06:	9a02      	ldr	r2, [sp, #8]
 8017c08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017c0c:	6013      	str	r3, [r2, #0]
 8017c0e:	2301      	movs	r3, #1
 8017c10:	6123      	str	r3, [r4, #16]
 8017c12:	f8ca 3000 	str.w	r3, [sl]
 8017c16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017c18:	2562      	movs	r5, #98	@ 0x62
 8017c1a:	601c      	str	r4, [r3, #0]
 8017c1c:	e73a      	b.n	8017a94 <__gethex+0xf8>
 8017c1e:	1e71      	subs	r1, r6, #1
 8017c20:	4620      	mov	r0, r4
 8017c22:	f7fe fb6c 	bl	80162fe <__any_on>
 8017c26:	2800      	cmp	r0, #0
 8017c28:	d1ed      	bne.n	8017c06 <__gethex+0x26a>
 8017c2a:	9801      	ldr	r0, [sp, #4]
 8017c2c:	4621      	mov	r1, r4
 8017c2e:	f7fd ff1d 	bl	8015a6c <_Bfree>
 8017c32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017c34:	2300      	movs	r3, #0
 8017c36:	6013      	str	r3, [r2, #0]
 8017c38:	2550      	movs	r5, #80	@ 0x50
 8017c3a:	e72b      	b.n	8017a94 <__gethex+0xf8>
 8017c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d1f3      	bne.n	8017c2a <__gethex+0x28e>
 8017c42:	e7e0      	b.n	8017c06 <__gethex+0x26a>
 8017c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d1dd      	bne.n	8017c06 <__gethex+0x26a>
 8017c4a:	e7ee      	b.n	8017c2a <__gethex+0x28e>
 8017c4c:	0801a503 	.word	0x0801a503
 8017c50:	0801a499 	.word	0x0801a499
 8017c54:	0801a55a 	.word	0x0801a55a
 8017c58:	1e6f      	subs	r7, r5, #1
 8017c5a:	f1b9 0f00 	cmp.w	r9, #0
 8017c5e:	d130      	bne.n	8017cc2 <__gethex+0x326>
 8017c60:	b127      	cbz	r7, 8017c6c <__gethex+0x2d0>
 8017c62:	4639      	mov	r1, r7
 8017c64:	4620      	mov	r0, r4
 8017c66:	f7fe fb4a 	bl	80162fe <__any_on>
 8017c6a:	4681      	mov	r9, r0
 8017c6c:	117a      	asrs	r2, r7, #5
 8017c6e:	2301      	movs	r3, #1
 8017c70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017c74:	f007 071f 	and.w	r7, r7, #31
 8017c78:	40bb      	lsls	r3, r7
 8017c7a:	4213      	tst	r3, r2
 8017c7c:	4629      	mov	r1, r5
 8017c7e:	4620      	mov	r0, r4
 8017c80:	bf18      	it	ne
 8017c82:	f049 0902 	orrne.w	r9, r9, #2
 8017c86:	f7ff fe21 	bl	80178cc <rshift>
 8017c8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017c8e:	1b76      	subs	r6, r6, r5
 8017c90:	2502      	movs	r5, #2
 8017c92:	f1b9 0f00 	cmp.w	r9, #0
 8017c96:	d047      	beq.n	8017d28 <__gethex+0x38c>
 8017c98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017c9c:	2b02      	cmp	r3, #2
 8017c9e:	d015      	beq.n	8017ccc <__gethex+0x330>
 8017ca0:	2b03      	cmp	r3, #3
 8017ca2:	d017      	beq.n	8017cd4 <__gethex+0x338>
 8017ca4:	2b01      	cmp	r3, #1
 8017ca6:	d109      	bne.n	8017cbc <__gethex+0x320>
 8017ca8:	f019 0f02 	tst.w	r9, #2
 8017cac:	d006      	beq.n	8017cbc <__gethex+0x320>
 8017cae:	f8da 3000 	ldr.w	r3, [sl]
 8017cb2:	ea49 0903 	orr.w	r9, r9, r3
 8017cb6:	f019 0f01 	tst.w	r9, #1
 8017cba:	d10e      	bne.n	8017cda <__gethex+0x33e>
 8017cbc:	f045 0510 	orr.w	r5, r5, #16
 8017cc0:	e032      	b.n	8017d28 <__gethex+0x38c>
 8017cc2:	f04f 0901 	mov.w	r9, #1
 8017cc6:	e7d1      	b.n	8017c6c <__gethex+0x2d0>
 8017cc8:	2501      	movs	r5, #1
 8017cca:	e7e2      	b.n	8017c92 <__gethex+0x2f6>
 8017ccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017cce:	f1c3 0301 	rsb	r3, r3, #1
 8017cd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d0f0      	beq.n	8017cbc <__gethex+0x320>
 8017cda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017cde:	f104 0314 	add.w	r3, r4, #20
 8017ce2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017ce6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017cea:	f04f 0c00 	mov.w	ip, #0
 8017cee:	4618      	mov	r0, r3
 8017cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cf4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017cf8:	d01b      	beq.n	8017d32 <__gethex+0x396>
 8017cfa:	3201      	adds	r2, #1
 8017cfc:	6002      	str	r2, [r0, #0]
 8017cfe:	2d02      	cmp	r5, #2
 8017d00:	f104 0314 	add.w	r3, r4, #20
 8017d04:	d13c      	bne.n	8017d80 <__gethex+0x3e4>
 8017d06:	f8d8 2000 	ldr.w	r2, [r8]
 8017d0a:	3a01      	subs	r2, #1
 8017d0c:	42b2      	cmp	r2, r6
 8017d0e:	d109      	bne.n	8017d24 <__gethex+0x388>
 8017d10:	1171      	asrs	r1, r6, #5
 8017d12:	2201      	movs	r2, #1
 8017d14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017d18:	f006 061f 	and.w	r6, r6, #31
 8017d1c:	fa02 f606 	lsl.w	r6, r2, r6
 8017d20:	421e      	tst	r6, r3
 8017d22:	d13a      	bne.n	8017d9a <__gethex+0x3fe>
 8017d24:	f045 0520 	orr.w	r5, r5, #32
 8017d28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017d2a:	601c      	str	r4, [r3, #0]
 8017d2c:	9b02      	ldr	r3, [sp, #8]
 8017d2e:	601f      	str	r7, [r3, #0]
 8017d30:	e6b0      	b.n	8017a94 <__gethex+0xf8>
 8017d32:	4299      	cmp	r1, r3
 8017d34:	f843 cc04 	str.w	ip, [r3, #-4]
 8017d38:	d8d9      	bhi.n	8017cee <__gethex+0x352>
 8017d3a:	68a3      	ldr	r3, [r4, #8]
 8017d3c:	459b      	cmp	fp, r3
 8017d3e:	db17      	blt.n	8017d70 <__gethex+0x3d4>
 8017d40:	6861      	ldr	r1, [r4, #4]
 8017d42:	9801      	ldr	r0, [sp, #4]
 8017d44:	3101      	adds	r1, #1
 8017d46:	f7fd fe51 	bl	80159ec <_Balloc>
 8017d4a:	4681      	mov	r9, r0
 8017d4c:	b918      	cbnz	r0, 8017d56 <__gethex+0x3ba>
 8017d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8017db8 <__gethex+0x41c>)
 8017d50:	4602      	mov	r2, r0
 8017d52:	2184      	movs	r1, #132	@ 0x84
 8017d54:	e6c5      	b.n	8017ae2 <__gethex+0x146>
 8017d56:	6922      	ldr	r2, [r4, #16]
 8017d58:	3202      	adds	r2, #2
 8017d5a:	f104 010c 	add.w	r1, r4, #12
 8017d5e:	0092      	lsls	r2, r2, #2
 8017d60:	300c      	adds	r0, #12
 8017d62:	f7ff fd69 	bl	8017838 <memcpy>
 8017d66:	4621      	mov	r1, r4
 8017d68:	9801      	ldr	r0, [sp, #4]
 8017d6a:	f7fd fe7f 	bl	8015a6c <_Bfree>
 8017d6e:	464c      	mov	r4, r9
 8017d70:	6923      	ldr	r3, [r4, #16]
 8017d72:	1c5a      	adds	r2, r3, #1
 8017d74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017d78:	6122      	str	r2, [r4, #16]
 8017d7a:	2201      	movs	r2, #1
 8017d7c:	615a      	str	r2, [r3, #20]
 8017d7e:	e7be      	b.n	8017cfe <__gethex+0x362>
 8017d80:	6922      	ldr	r2, [r4, #16]
 8017d82:	455a      	cmp	r2, fp
 8017d84:	dd0b      	ble.n	8017d9e <__gethex+0x402>
 8017d86:	2101      	movs	r1, #1
 8017d88:	4620      	mov	r0, r4
 8017d8a:	f7ff fd9f 	bl	80178cc <rshift>
 8017d8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017d92:	3701      	adds	r7, #1
 8017d94:	42bb      	cmp	r3, r7
 8017d96:	f6ff aee0 	blt.w	8017b5a <__gethex+0x1be>
 8017d9a:	2501      	movs	r5, #1
 8017d9c:	e7c2      	b.n	8017d24 <__gethex+0x388>
 8017d9e:	f016 061f 	ands.w	r6, r6, #31
 8017da2:	d0fa      	beq.n	8017d9a <__gethex+0x3fe>
 8017da4:	4453      	add	r3, sl
 8017da6:	f1c6 0620 	rsb	r6, r6, #32
 8017daa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017dae:	f7fd ff0f 	bl	8015bd0 <__hi0bits>
 8017db2:	42b0      	cmp	r0, r6
 8017db4:	dbe7      	blt.n	8017d86 <__gethex+0x3ea>
 8017db6:	e7f0      	b.n	8017d9a <__gethex+0x3fe>
 8017db8:	0801a499 	.word	0x0801a499

08017dbc <L_shift>:
 8017dbc:	f1c2 0208 	rsb	r2, r2, #8
 8017dc0:	0092      	lsls	r2, r2, #2
 8017dc2:	b570      	push	{r4, r5, r6, lr}
 8017dc4:	f1c2 0620 	rsb	r6, r2, #32
 8017dc8:	6843      	ldr	r3, [r0, #4]
 8017dca:	6804      	ldr	r4, [r0, #0]
 8017dcc:	fa03 f506 	lsl.w	r5, r3, r6
 8017dd0:	432c      	orrs	r4, r5
 8017dd2:	40d3      	lsrs	r3, r2
 8017dd4:	6004      	str	r4, [r0, #0]
 8017dd6:	f840 3f04 	str.w	r3, [r0, #4]!
 8017dda:	4288      	cmp	r0, r1
 8017ddc:	d3f4      	bcc.n	8017dc8 <L_shift+0xc>
 8017dde:	bd70      	pop	{r4, r5, r6, pc}

08017de0 <__match>:
 8017de0:	b530      	push	{r4, r5, lr}
 8017de2:	6803      	ldr	r3, [r0, #0]
 8017de4:	3301      	adds	r3, #1
 8017de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017dea:	b914      	cbnz	r4, 8017df2 <__match+0x12>
 8017dec:	6003      	str	r3, [r0, #0]
 8017dee:	2001      	movs	r0, #1
 8017df0:	bd30      	pop	{r4, r5, pc}
 8017df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017df6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017dfa:	2d19      	cmp	r5, #25
 8017dfc:	bf98      	it	ls
 8017dfe:	3220      	addls	r2, #32
 8017e00:	42a2      	cmp	r2, r4
 8017e02:	d0f0      	beq.n	8017de6 <__match+0x6>
 8017e04:	2000      	movs	r0, #0
 8017e06:	e7f3      	b.n	8017df0 <__match+0x10>

08017e08 <__hexnan>:
 8017e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e0c:	680b      	ldr	r3, [r1, #0]
 8017e0e:	6801      	ldr	r1, [r0, #0]
 8017e10:	115e      	asrs	r6, r3, #5
 8017e12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017e16:	f013 031f 	ands.w	r3, r3, #31
 8017e1a:	b087      	sub	sp, #28
 8017e1c:	bf18      	it	ne
 8017e1e:	3604      	addne	r6, #4
 8017e20:	2500      	movs	r5, #0
 8017e22:	1f37      	subs	r7, r6, #4
 8017e24:	4682      	mov	sl, r0
 8017e26:	4690      	mov	r8, r2
 8017e28:	9301      	str	r3, [sp, #4]
 8017e2a:	f846 5c04 	str.w	r5, [r6, #-4]
 8017e2e:	46b9      	mov	r9, r7
 8017e30:	463c      	mov	r4, r7
 8017e32:	9502      	str	r5, [sp, #8]
 8017e34:	46ab      	mov	fp, r5
 8017e36:	784a      	ldrb	r2, [r1, #1]
 8017e38:	1c4b      	adds	r3, r1, #1
 8017e3a:	9303      	str	r3, [sp, #12]
 8017e3c:	b342      	cbz	r2, 8017e90 <__hexnan+0x88>
 8017e3e:	4610      	mov	r0, r2
 8017e40:	9105      	str	r1, [sp, #20]
 8017e42:	9204      	str	r2, [sp, #16]
 8017e44:	f7ff fd94 	bl	8017970 <__hexdig_fun>
 8017e48:	2800      	cmp	r0, #0
 8017e4a:	d151      	bne.n	8017ef0 <__hexnan+0xe8>
 8017e4c:	9a04      	ldr	r2, [sp, #16]
 8017e4e:	9905      	ldr	r1, [sp, #20]
 8017e50:	2a20      	cmp	r2, #32
 8017e52:	d818      	bhi.n	8017e86 <__hexnan+0x7e>
 8017e54:	9b02      	ldr	r3, [sp, #8]
 8017e56:	459b      	cmp	fp, r3
 8017e58:	dd13      	ble.n	8017e82 <__hexnan+0x7a>
 8017e5a:	454c      	cmp	r4, r9
 8017e5c:	d206      	bcs.n	8017e6c <__hexnan+0x64>
 8017e5e:	2d07      	cmp	r5, #7
 8017e60:	dc04      	bgt.n	8017e6c <__hexnan+0x64>
 8017e62:	462a      	mov	r2, r5
 8017e64:	4649      	mov	r1, r9
 8017e66:	4620      	mov	r0, r4
 8017e68:	f7ff ffa8 	bl	8017dbc <L_shift>
 8017e6c:	4544      	cmp	r4, r8
 8017e6e:	d952      	bls.n	8017f16 <__hexnan+0x10e>
 8017e70:	2300      	movs	r3, #0
 8017e72:	f1a4 0904 	sub.w	r9, r4, #4
 8017e76:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e7a:	f8cd b008 	str.w	fp, [sp, #8]
 8017e7e:	464c      	mov	r4, r9
 8017e80:	461d      	mov	r5, r3
 8017e82:	9903      	ldr	r1, [sp, #12]
 8017e84:	e7d7      	b.n	8017e36 <__hexnan+0x2e>
 8017e86:	2a29      	cmp	r2, #41	@ 0x29
 8017e88:	d157      	bne.n	8017f3a <__hexnan+0x132>
 8017e8a:	3102      	adds	r1, #2
 8017e8c:	f8ca 1000 	str.w	r1, [sl]
 8017e90:	f1bb 0f00 	cmp.w	fp, #0
 8017e94:	d051      	beq.n	8017f3a <__hexnan+0x132>
 8017e96:	454c      	cmp	r4, r9
 8017e98:	d206      	bcs.n	8017ea8 <__hexnan+0xa0>
 8017e9a:	2d07      	cmp	r5, #7
 8017e9c:	dc04      	bgt.n	8017ea8 <__hexnan+0xa0>
 8017e9e:	462a      	mov	r2, r5
 8017ea0:	4649      	mov	r1, r9
 8017ea2:	4620      	mov	r0, r4
 8017ea4:	f7ff ff8a 	bl	8017dbc <L_shift>
 8017ea8:	4544      	cmp	r4, r8
 8017eaa:	d936      	bls.n	8017f1a <__hexnan+0x112>
 8017eac:	f1a8 0204 	sub.w	r2, r8, #4
 8017eb0:	4623      	mov	r3, r4
 8017eb2:	f853 1b04 	ldr.w	r1, [r3], #4
 8017eb6:	f842 1f04 	str.w	r1, [r2, #4]!
 8017eba:	429f      	cmp	r7, r3
 8017ebc:	d2f9      	bcs.n	8017eb2 <__hexnan+0xaa>
 8017ebe:	1b3b      	subs	r3, r7, r4
 8017ec0:	f023 0303 	bic.w	r3, r3, #3
 8017ec4:	3304      	adds	r3, #4
 8017ec6:	3401      	adds	r4, #1
 8017ec8:	3e03      	subs	r6, #3
 8017eca:	42b4      	cmp	r4, r6
 8017ecc:	bf88      	it	hi
 8017ece:	2304      	movhi	r3, #4
 8017ed0:	4443      	add	r3, r8
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	f843 2b04 	str.w	r2, [r3], #4
 8017ed8:	429f      	cmp	r7, r3
 8017eda:	d2fb      	bcs.n	8017ed4 <__hexnan+0xcc>
 8017edc:	683b      	ldr	r3, [r7, #0]
 8017ede:	b91b      	cbnz	r3, 8017ee8 <__hexnan+0xe0>
 8017ee0:	4547      	cmp	r7, r8
 8017ee2:	d128      	bne.n	8017f36 <__hexnan+0x12e>
 8017ee4:	2301      	movs	r3, #1
 8017ee6:	603b      	str	r3, [r7, #0]
 8017ee8:	2005      	movs	r0, #5
 8017eea:	b007      	add	sp, #28
 8017eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ef0:	3501      	adds	r5, #1
 8017ef2:	2d08      	cmp	r5, #8
 8017ef4:	f10b 0b01 	add.w	fp, fp, #1
 8017ef8:	dd06      	ble.n	8017f08 <__hexnan+0x100>
 8017efa:	4544      	cmp	r4, r8
 8017efc:	d9c1      	bls.n	8017e82 <__hexnan+0x7a>
 8017efe:	2300      	movs	r3, #0
 8017f00:	f844 3c04 	str.w	r3, [r4, #-4]
 8017f04:	2501      	movs	r5, #1
 8017f06:	3c04      	subs	r4, #4
 8017f08:	6822      	ldr	r2, [r4, #0]
 8017f0a:	f000 000f 	and.w	r0, r0, #15
 8017f0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017f12:	6020      	str	r0, [r4, #0]
 8017f14:	e7b5      	b.n	8017e82 <__hexnan+0x7a>
 8017f16:	2508      	movs	r5, #8
 8017f18:	e7b3      	b.n	8017e82 <__hexnan+0x7a>
 8017f1a:	9b01      	ldr	r3, [sp, #4]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d0dd      	beq.n	8017edc <__hexnan+0xd4>
 8017f20:	f1c3 0320 	rsb	r3, r3, #32
 8017f24:	f04f 32ff 	mov.w	r2, #4294967295
 8017f28:	40da      	lsrs	r2, r3
 8017f2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017f2e:	4013      	ands	r3, r2
 8017f30:	f846 3c04 	str.w	r3, [r6, #-4]
 8017f34:	e7d2      	b.n	8017edc <__hexnan+0xd4>
 8017f36:	3f04      	subs	r7, #4
 8017f38:	e7d0      	b.n	8017edc <__hexnan+0xd4>
 8017f3a:	2004      	movs	r0, #4
 8017f3c:	e7d5      	b.n	8017eea <__hexnan+0xe2>

08017f3e <__ascii_mbtowc>:
 8017f3e:	b082      	sub	sp, #8
 8017f40:	b901      	cbnz	r1, 8017f44 <__ascii_mbtowc+0x6>
 8017f42:	a901      	add	r1, sp, #4
 8017f44:	b142      	cbz	r2, 8017f58 <__ascii_mbtowc+0x1a>
 8017f46:	b14b      	cbz	r3, 8017f5c <__ascii_mbtowc+0x1e>
 8017f48:	7813      	ldrb	r3, [r2, #0]
 8017f4a:	600b      	str	r3, [r1, #0]
 8017f4c:	7812      	ldrb	r2, [r2, #0]
 8017f4e:	1e10      	subs	r0, r2, #0
 8017f50:	bf18      	it	ne
 8017f52:	2001      	movne	r0, #1
 8017f54:	b002      	add	sp, #8
 8017f56:	4770      	bx	lr
 8017f58:	4610      	mov	r0, r2
 8017f5a:	e7fb      	b.n	8017f54 <__ascii_mbtowc+0x16>
 8017f5c:	f06f 0001 	mvn.w	r0, #1
 8017f60:	e7f8      	b.n	8017f54 <__ascii_mbtowc+0x16>

08017f62 <_realloc_r>:
 8017f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f66:	4607      	mov	r7, r0
 8017f68:	4614      	mov	r4, r2
 8017f6a:	460d      	mov	r5, r1
 8017f6c:	b921      	cbnz	r1, 8017f78 <_realloc_r+0x16>
 8017f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f72:	4611      	mov	r1, r2
 8017f74:	f7fb bcb0 	b.w	80138d8 <_malloc_r>
 8017f78:	b92a      	cbnz	r2, 8017f86 <_realloc_r+0x24>
 8017f7a:	f7fd fced 	bl	8015958 <_free_r>
 8017f7e:	4625      	mov	r5, r4
 8017f80:	4628      	mov	r0, r5
 8017f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f86:	f000 f840 	bl	801800a <_malloc_usable_size_r>
 8017f8a:	4284      	cmp	r4, r0
 8017f8c:	4606      	mov	r6, r0
 8017f8e:	d802      	bhi.n	8017f96 <_realloc_r+0x34>
 8017f90:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017f94:	d8f4      	bhi.n	8017f80 <_realloc_r+0x1e>
 8017f96:	4621      	mov	r1, r4
 8017f98:	4638      	mov	r0, r7
 8017f9a:	f7fb fc9d 	bl	80138d8 <_malloc_r>
 8017f9e:	4680      	mov	r8, r0
 8017fa0:	b908      	cbnz	r0, 8017fa6 <_realloc_r+0x44>
 8017fa2:	4645      	mov	r5, r8
 8017fa4:	e7ec      	b.n	8017f80 <_realloc_r+0x1e>
 8017fa6:	42b4      	cmp	r4, r6
 8017fa8:	4622      	mov	r2, r4
 8017faa:	4629      	mov	r1, r5
 8017fac:	bf28      	it	cs
 8017fae:	4632      	movcs	r2, r6
 8017fb0:	f7ff fc42 	bl	8017838 <memcpy>
 8017fb4:	4629      	mov	r1, r5
 8017fb6:	4638      	mov	r0, r7
 8017fb8:	f7fd fcce 	bl	8015958 <_free_r>
 8017fbc:	e7f1      	b.n	8017fa2 <_realloc_r+0x40>

08017fbe <__ascii_wctomb>:
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	4608      	mov	r0, r1
 8017fc2:	b141      	cbz	r1, 8017fd6 <__ascii_wctomb+0x18>
 8017fc4:	2aff      	cmp	r2, #255	@ 0xff
 8017fc6:	d904      	bls.n	8017fd2 <__ascii_wctomb+0x14>
 8017fc8:	228a      	movs	r2, #138	@ 0x8a
 8017fca:	601a      	str	r2, [r3, #0]
 8017fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8017fd0:	4770      	bx	lr
 8017fd2:	700a      	strb	r2, [r1, #0]
 8017fd4:	2001      	movs	r0, #1
 8017fd6:	4770      	bx	lr

08017fd8 <fiprintf>:
 8017fd8:	b40e      	push	{r1, r2, r3}
 8017fda:	b503      	push	{r0, r1, lr}
 8017fdc:	4601      	mov	r1, r0
 8017fde:	ab03      	add	r3, sp, #12
 8017fe0:	4805      	ldr	r0, [pc, #20]	@ (8017ff8 <fiprintf+0x20>)
 8017fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fe6:	6800      	ldr	r0, [r0, #0]
 8017fe8:	9301      	str	r3, [sp, #4]
 8017fea:	f7ff f9b1 	bl	8017350 <_vfiprintf_r>
 8017fee:	b002      	add	sp, #8
 8017ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ff4:	b003      	add	sp, #12
 8017ff6:	4770      	bx	lr
 8017ff8:	20000254 	.word	0x20000254

08017ffc <abort>:
 8017ffc:	b508      	push	{r3, lr}
 8017ffe:	2006      	movs	r0, #6
 8018000:	f000 f834 	bl	801806c <raise>
 8018004:	2001      	movs	r0, #1
 8018006:	f7e9 fe8f 	bl	8001d28 <_exit>

0801800a <_malloc_usable_size_r>:
 801800a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801800e:	1f18      	subs	r0, r3, #4
 8018010:	2b00      	cmp	r3, #0
 8018012:	bfbc      	itt	lt
 8018014:	580b      	ldrlt	r3, [r1, r0]
 8018016:	18c0      	addlt	r0, r0, r3
 8018018:	4770      	bx	lr

0801801a <_raise_r>:
 801801a:	291f      	cmp	r1, #31
 801801c:	b538      	push	{r3, r4, r5, lr}
 801801e:	4605      	mov	r5, r0
 8018020:	460c      	mov	r4, r1
 8018022:	d904      	bls.n	801802e <_raise_r+0x14>
 8018024:	2316      	movs	r3, #22
 8018026:	6003      	str	r3, [r0, #0]
 8018028:	f04f 30ff 	mov.w	r0, #4294967295
 801802c:	bd38      	pop	{r3, r4, r5, pc}
 801802e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018030:	b112      	cbz	r2, 8018038 <_raise_r+0x1e>
 8018032:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018036:	b94b      	cbnz	r3, 801804c <_raise_r+0x32>
 8018038:	4628      	mov	r0, r5
 801803a:	f000 f831 	bl	80180a0 <_getpid_r>
 801803e:	4622      	mov	r2, r4
 8018040:	4601      	mov	r1, r0
 8018042:	4628      	mov	r0, r5
 8018044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018048:	f000 b818 	b.w	801807c <_kill_r>
 801804c:	2b01      	cmp	r3, #1
 801804e:	d00a      	beq.n	8018066 <_raise_r+0x4c>
 8018050:	1c59      	adds	r1, r3, #1
 8018052:	d103      	bne.n	801805c <_raise_r+0x42>
 8018054:	2316      	movs	r3, #22
 8018056:	6003      	str	r3, [r0, #0]
 8018058:	2001      	movs	r0, #1
 801805a:	e7e7      	b.n	801802c <_raise_r+0x12>
 801805c:	2100      	movs	r1, #0
 801805e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018062:	4620      	mov	r0, r4
 8018064:	4798      	blx	r3
 8018066:	2000      	movs	r0, #0
 8018068:	e7e0      	b.n	801802c <_raise_r+0x12>
	...

0801806c <raise>:
 801806c:	4b02      	ldr	r3, [pc, #8]	@ (8018078 <raise+0xc>)
 801806e:	4601      	mov	r1, r0
 8018070:	6818      	ldr	r0, [r3, #0]
 8018072:	f7ff bfd2 	b.w	801801a <_raise_r>
 8018076:	bf00      	nop
 8018078:	20000254 	.word	0x20000254

0801807c <_kill_r>:
 801807c:	b538      	push	{r3, r4, r5, lr}
 801807e:	4d07      	ldr	r5, [pc, #28]	@ (801809c <_kill_r+0x20>)
 8018080:	2300      	movs	r3, #0
 8018082:	4604      	mov	r4, r0
 8018084:	4608      	mov	r0, r1
 8018086:	4611      	mov	r1, r2
 8018088:	602b      	str	r3, [r5, #0]
 801808a:	f7e9 fe3d 	bl	8001d08 <_kill>
 801808e:	1c43      	adds	r3, r0, #1
 8018090:	d102      	bne.n	8018098 <_kill_r+0x1c>
 8018092:	682b      	ldr	r3, [r5, #0]
 8018094:	b103      	cbz	r3, 8018098 <_kill_r+0x1c>
 8018096:	6023      	str	r3, [r4, #0]
 8018098:	bd38      	pop	{r3, r4, r5, pc}
 801809a:	bf00      	nop
 801809c:	20004cb0 	.word	0x20004cb0

080180a0 <_getpid_r>:
 80180a0:	f7e9 be2a 	b.w	8001cf8 <_getpid>

080180a4 <fmodf>:
 80180a4:	b508      	push	{r3, lr}
 80180a6:	ed2d 8b02 	vpush	{d8}
 80180aa:	eef0 8a40 	vmov.f32	s17, s0
 80180ae:	eeb0 8a60 	vmov.f32	s16, s1
 80180b2:	f000 f86d 	bl	8018190 <__ieee754_fmodf>
 80180b6:	eef4 8a48 	vcmp.f32	s17, s16
 80180ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180be:	d60c      	bvs.n	80180da <fmodf+0x36>
 80180c0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80180e0 <fmodf+0x3c>
 80180c4:	eeb4 8a68 	vcmp.f32	s16, s17
 80180c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180cc:	d105      	bne.n	80180da <fmodf+0x36>
 80180ce:	f7fc fdb7 	bl	8014c40 <__errno>
 80180d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80180d6:	2321      	movs	r3, #33	@ 0x21
 80180d8:	6003      	str	r3, [r0, #0]
 80180da:	ecbd 8b02 	vpop	{d8}
 80180de:	bd08      	pop	{r3, pc}
 80180e0:	00000000 	.word	0x00000000

080180e4 <fmaxf>:
 80180e4:	b508      	push	{r3, lr}
 80180e6:	ed2d 8b02 	vpush	{d8}
 80180ea:	eeb0 8a40 	vmov.f32	s16, s0
 80180ee:	eef0 8a60 	vmov.f32	s17, s1
 80180f2:	f000 f831 	bl	8018158 <__fpclassifyf>
 80180f6:	b930      	cbnz	r0, 8018106 <fmaxf+0x22>
 80180f8:	eeb0 8a68 	vmov.f32	s16, s17
 80180fc:	eeb0 0a48 	vmov.f32	s0, s16
 8018100:	ecbd 8b02 	vpop	{d8}
 8018104:	bd08      	pop	{r3, pc}
 8018106:	eeb0 0a68 	vmov.f32	s0, s17
 801810a:	f000 f825 	bl	8018158 <__fpclassifyf>
 801810e:	2800      	cmp	r0, #0
 8018110:	d0f4      	beq.n	80180fc <fmaxf+0x18>
 8018112:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801811a:	dded      	ble.n	80180f8 <fmaxf+0x14>
 801811c:	e7ee      	b.n	80180fc <fmaxf+0x18>

0801811e <fminf>:
 801811e:	b508      	push	{r3, lr}
 8018120:	ed2d 8b02 	vpush	{d8}
 8018124:	eeb0 8a40 	vmov.f32	s16, s0
 8018128:	eef0 8a60 	vmov.f32	s17, s1
 801812c:	f000 f814 	bl	8018158 <__fpclassifyf>
 8018130:	b930      	cbnz	r0, 8018140 <fminf+0x22>
 8018132:	eeb0 8a68 	vmov.f32	s16, s17
 8018136:	eeb0 0a48 	vmov.f32	s0, s16
 801813a:	ecbd 8b02 	vpop	{d8}
 801813e:	bd08      	pop	{r3, pc}
 8018140:	eeb0 0a68 	vmov.f32	s0, s17
 8018144:	f000 f808 	bl	8018158 <__fpclassifyf>
 8018148:	2800      	cmp	r0, #0
 801814a:	d0f4      	beq.n	8018136 <fminf+0x18>
 801814c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018154:	d5ed      	bpl.n	8018132 <fminf+0x14>
 8018156:	e7ee      	b.n	8018136 <fminf+0x18>

08018158 <__fpclassifyf>:
 8018158:	ee10 3a10 	vmov	r3, s0
 801815c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8018160:	d00d      	beq.n	801817e <__fpclassifyf+0x26>
 8018162:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8018166:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801816a:	d30a      	bcc.n	8018182 <__fpclassifyf+0x2a>
 801816c:	4b07      	ldr	r3, [pc, #28]	@ (801818c <__fpclassifyf+0x34>)
 801816e:	1e42      	subs	r2, r0, #1
 8018170:	429a      	cmp	r2, r3
 8018172:	d908      	bls.n	8018186 <__fpclassifyf+0x2e>
 8018174:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8018178:	4258      	negs	r0, r3
 801817a:	4158      	adcs	r0, r3
 801817c:	4770      	bx	lr
 801817e:	2002      	movs	r0, #2
 8018180:	4770      	bx	lr
 8018182:	2004      	movs	r0, #4
 8018184:	4770      	bx	lr
 8018186:	2003      	movs	r0, #3
 8018188:	4770      	bx	lr
 801818a:	bf00      	nop
 801818c:	007ffffe 	.word	0x007ffffe

08018190 <__ieee754_fmodf>:
 8018190:	b570      	push	{r4, r5, r6, lr}
 8018192:	ee10 6a90 	vmov	r6, s1
 8018196:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801819a:	1e5a      	subs	r2, r3, #1
 801819c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80181a0:	d206      	bcs.n	80181b0 <__ieee754_fmodf+0x20>
 80181a2:	ee10 4a10 	vmov	r4, s0
 80181a6:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 80181aa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80181ae:	d304      	bcc.n	80181ba <__ieee754_fmodf+0x2a>
 80181b0:	ee60 0a20 	vmul.f32	s1, s0, s1
 80181b4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80181b8:	bd70      	pop	{r4, r5, r6, pc}
 80181ba:	4299      	cmp	r1, r3
 80181bc:	dbfc      	blt.n	80181b8 <__ieee754_fmodf+0x28>
 80181be:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 80181c2:	d105      	bne.n	80181d0 <__ieee754_fmodf+0x40>
 80181c4:	4b32      	ldr	r3, [pc, #200]	@ (8018290 <__ieee754_fmodf+0x100>)
 80181c6:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 80181ca:	ed93 0a00 	vldr	s0, [r3]
 80181ce:	e7f3      	b.n	80181b8 <__ieee754_fmodf+0x28>
 80181d0:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80181d4:	d146      	bne.n	8018264 <__ieee754_fmodf+0xd4>
 80181d6:	020a      	lsls	r2, r1, #8
 80181d8:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 80181dc:	2a00      	cmp	r2, #0
 80181de:	dc3e      	bgt.n	801825e <__ieee754_fmodf+0xce>
 80181e0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80181e4:	bf01      	itttt	eq
 80181e6:	021a      	lsleq	r2, r3, #8
 80181e8:	fab2 f282 	clzeq	r2, r2
 80181ec:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 80181f0:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 80181f4:	bf16      	itet	ne
 80181f6:	15da      	asrne	r2, r3, #23
 80181f8:	3282      	addeq	r2, #130	@ 0x82
 80181fa:	3a7f      	subne	r2, #127	@ 0x7f
 80181fc:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8018200:	bfbb      	ittet	lt
 8018202:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8018206:	1a24      	sublt	r4, r4, r0
 8018208:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 801820c:	40a1      	lsllt	r1, r4
 801820e:	bfa8      	it	ge
 8018210:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8018214:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8018218:	bfb5      	itete	lt
 801821a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801821e:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8018222:	1aa4      	sublt	r4, r4, r2
 8018224:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8018228:	bfb8      	it	lt
 801822a:	fa03 f404 	lsllt.w	r4, r3, r4
 801822e:	1a80      	subs	r0, r0, r2
 8018230:	1b0b      	subs	r3, r1, r4
 8018232:	b9d0      	cbnz	r0, 801826a <__ieee754_fmodf+0xda>
 8018234:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8018238:	bf28      	it	cs
 801823a:	460b      	movcs	r3, r1
 801823c:	2b00      	cmp	r3, #0
 801823e:	d0c1      	beq.n	80181c4 <__ieee754_fmodf+0x34>
 8018240:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8018244:	db19      	blt.n	801827a <__ieee754_fmodf+0xea>
 8018246:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801824a:	db19      	blt.n	8018280 <__ieee754_fmodf+0xf0>
 801824c:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8018250:	327f      	adds	r2, #127	@ 0x7f
 8018252:	432b      	orrs	r3, r5
 8018254:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8018258:	ee00 3a10 	vmov	s0, r3
 801825c:	e7ac      	b.n	80181b8 <__ieee754_fmodf+0x28>
 801825e:	3801      	subs	r0, #1
 8018260:	0052      	lsls	r2, r2, #1
 8018262:	e7bb      	b.n	80181dc <__ieee754_fmodf+0x4c>
 8018264:	15c8      	asrs	r0, r1, #23
 8018266:	387f      	subs	r0, #127	@ 0x7f
 8018268:	e7ba      	b.n	80181e0 <__ieee754_fmodf+0x50>
 801826a:	2b00      	cmp	r3, #0
 801826c:	da02      	bge.n	8018274 <__ieee754_fmodf+0xe4>
 801826e:	0049      	lsls	r1, r1, #1
 8018270:	3801      	subs	r0, #1
 8018272:	e7dd      	b.n	8018230 <__ieee754_fmodf+0xa0>
 8018274:	d0a6      	beq.n	80181c4 <__ieee754_fmodf+0x34>
 8018276:	0059      	lsls	r1, r3, #1
 8018278:	e7fa      	b.n	8018270 <__ieee754_fmodf+0xe0>
 801827a:	005b      	lsls	r3, r3, #1
 801827c:	3a01      	subs	r2, #1
 801827e:	e7df      	b.n	8018240 <__ieee754_fmodf+0xb0>
 8018280:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8018284:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8018288:	3282      	adds	r2, #130	@ 0x82
 801828a:	4113      	asrs	r3, r2
 801828c:	432b      	orrs	r3, r5
 801828e:	e7e3      	b.n	8018258 <__ieee754_fmodf+0xc8>
 8018290:	0801a80c 	.word	0x0801a80c

08018294 <_init>:
 8018294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018296:	bf00      	nop
 8018298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801829a:	bc08      	pop	{r3}
 801829c:	469e      	mov	lr, r3
 801829e:	4770      	bx	lr

080182a0 <_fini>:
 80182a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182a2:	bf00      	nop
 80182a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80182a6:	bc08      	pop	{r3}
 80182a8:	469e      	mov	lr, r3
 80182aa:	4770      	bx	lr
