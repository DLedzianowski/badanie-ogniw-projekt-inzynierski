
badanie-ogniw-blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017b3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001650  08017ce0  08017ce0  00018ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019330  08019330  0001b3a8  2**0
                  CONTENTS
  4 .ARM          00000008  08019330  08019330  0001a330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019338  08019338  0001b3a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019338  08019338  0001a338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801933c  0801933c  0001a33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003a8  20000000  08019340  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048a0  200003a8  080196e8  0001b3a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004c48  080196e8  0001bc48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b3a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028734  00000000  00000000  0001b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006894  00000000  00000000  00043b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002270  00000000  00000000  0004a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a50  00000000  00000000  0004c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223a6  00000000  00000000  0004e060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033b7c  00000000  00000000  00070406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9429  00000000  00000000  000a3f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d3ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a52c  00000000  00000000  0014d3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0015791c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003a8 	.word	0x200003a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017cc4 	.word	0x08017cc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003ac 	.word	0x200003ac
 80001dc:	08017cc4 	.word	0x08017cc4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9eb 	b.w	8001090 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9a0 	b.w	8001090 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	460c      	mov	r4, r1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d14e      	bne.n	8000e7e <__udivmoddi4+0xaa>
 8000de0:	4694      	mov	ip, r2
 8000de2:	458c      	cmp	ip, r1
 8000de4:	4686      	mov	lr, r0
 8000de6:	fab2 f282 	clz	r2, r2
 8000dea:	d962      	bls.n	8000eb2 <__udivmoddi4+0xde>
 8000dec:	b14a      	cbz	r2, 8000e02 <__udivmoddi4+0x2e>
 8000dee:	f1c2 0320 	rsb	r3, r2, #32
 8000df2:	4091      	lsls	r1, r2
 8000df4:	fa20 f303 	lsr.w	r3, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	4319      	orrs	r1, r3
 8000dfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f f68c 	uxth.w	r6, ip
 8000e0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb07 1114 	mls	r1, r7, r4, r1
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb04 f106 	mul.w	r1, r4, r6
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x64>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e2a:	f080 8112 	bcs.w	8001052 <__udivmoddi4+0x27e>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 810f 	bls.w	8001052 <__udivmoddi4+0x27e>
 8000e34:	3c02      	subs	r4, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a59      	subs	r1, r3, r1
 8000e3a:	fa1f f38e 	uxth.w	r3, lr
 8000e3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e42:	fb07 1110 	mls	r1, r7, r0, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f606 	mul.w	r6, r0, r6
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x94>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e5a:	f080 80fc 	bcs.w	8001056 <__udivmoddi4+0x282>
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	f240 80f9 	bls.w	8001056 <__udivmoddi4+0x282>
 8000e64:	4463      	add	r3, ip
 8000e66:	3802      	subs	r0, #2
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e6e:	2100      	movs	r1, #0
 8000e70:	b11d      	cbz	r5, 8000e7a <__udivmoddi4+0xa6>
 8000e72:	40d3      	lsrs	r3, r2
 8000e74:	2200      	movs	r2, #0
 8000e76:	e9c5 3200 	strd	r3, r2, [r5]
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d905      	bls.n	8000e8e <__udivmoddi4+0xba>
 8000e82:	b10d      	cbz	r5, 8000e88 <__udivmoddi4+0xb4>
 8000e84:	e9c5 0100 	strd	r0, r1, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e7f5      	b.n	8000e7a <__udivmoddi4+0xa6>
 8000e8e:	fab3 f183 	clz	r1, r3
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d146      	bne.n	8000f24 <__udivmoddi4+0x150>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d302      	bcc.n	8000ea0 <__udivmoddi4+0xcc>
 8000e9a:	4290      	cmp	r0, r2
 8000e9c:	f0c0 80f0 	bcc.w	8001080 <__udivmoddi4+0x2ac>
 8000ea0:	1a86      	subs	r6, r0, r2
 8000ea2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	2d00      	cmp	r5, #0
 8000eaa:	d0e6      	beq.n	8000e7a <__udivmoddi4+0xa6>
 8000eac:	e9c5 6300 	strd	r6, r3, [r5]
 8000eb0:	e7e3      	b.n	8000e7a <__udivmoddi4+0xa6>
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	f040 8090 	bne.w	8000fd8 <__udivmoddi4+0x204>
 8000eb8:	eba1 040c 	sub.w	r4, r1, ip
 8000ebc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec0:	fa1f f78c 	uxth.w	r7, ip
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ece:	fb08 4416 	mls	r4, r8, r6, r4
 8000ed2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ed6:	fb07 f006 	mul.w	r0, r7, r6
 8000eda:	4298      	cmp	r0, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x11c>
 8000ede:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x11a>
 8000ee8:	4298      	cmp	r0, r3
 8000eea:	f200 80cd 	bhi.w	8001088 <__udivmoddi4+0x2b4>
 8000eee:	4626      	mov	r6, r4
 8000ef0:	1a1c      	subs	r4, r3, r0
 8000ef2:	fa1f f38e 	uxth.w	r3, lr
 8000ef6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000efa:	fb08 4410 	mls	r4, r8, r0, r4
 8000efe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f02:	fb00 f707 	mul.w	r7, r0, r7
 8000f06:	429f      	cmp	r7, r3
 8000f08:	d908      	bls.n	8000f1c <__udivmoddi4+0x148>
 8000f0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f12:	d202      	bcs.n	8000f1a <__udivmoddi4+0x146>
 8000f14:	429f      	cmp	r7, r3
 8000f16:	f200 80b0 	bhi.w	800107a <__udivmoddi4+0x2a6>
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	1bdb      	subs	r3, r3, r7
 8000f1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f22:	e7a5      	b.n	8000e70 <__udivmoddi4+0x9c>
 8000f24:	f1c1 0620 	rsb	r6, r1, #32
 8000f28:	408b      	lsls	r3, r1
 8000f2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f34:	fa04 f301 	lsl.w	r3, r4, r1
 8000f38:	ea43 030c 	orr.w	r3, r3, ip
 8000f3c:	40f4      	lsrs	r4, r6
 8000f3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f42:	0c38      	lsrs	r0, r7, #16
 8000f44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f48:	fbb4 fef0 	udiv	lr, r4, r0
 8000f4c:	fa1f fc87 	uxth.w	ip, r7
 8000f50:	fb00 441e 	mls	r4, r0, lr, r4
 8000f54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f58:	fb0e f90c 	mul.w	r9, lr, ip
 8000f5c:	45a1      	cmp	r9, r4
 8000f5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f62:	d90a      	bls.n	8000f7a <__udivmoddi4+0x1a6>
 8000f64:	193c      	adds	r4, r7, r4
 8000f66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f6a:	f080 8084 	bcs.w	8001076 <__udivmoddi4+0x2a2>
 8000f6e:	45a1      	cmp	r9, r4
 8000f70:	f240 8081 	bls.w	8001076 <__udivmoddi4+0x2a2>
 8000f74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f78:	443c      	add	r4, r7
 8000f7a:	eba4 0409 	sub.w	r4, r4, r9
 8000f7e:	fa1f f983 	uxth.w	r9, r3
 8000f82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f86:	fb00 4413 	mls	r4, r0, r3, r4
 8000f8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f92:	45a4      	cmp	ip, r4
 8000f94:	d907      	bls.n	8000fa6 <__udivmoddi4+0x1d2>
 8000f96:	193c      	adds	r4, r7, r4
 8000f98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f9c:	d267      	bcs.n	800106e <__udivmoddi4+0x29a>
 8000f9e:	45a4      	cmp	ip, r4
 8000fa0:	d965      	bls.n	800106e <__udivmoddi4+0x29a>
 8000fa2:	3b02      	subs	r3, #2
 8000fa4:	443c      	add	r4, r7
 8000fa6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000faa:	fba0 9302 	umull	r9, r3, r0, r2
 8000fae:	eba4 040c 	sub.w	r4, r4, ip
 8000fb2:	429c      	cmp	r4, r3
 8000fb4:	46ce      	mov	lr, r9
 8000fb6:	469c      	mov	ip, r3
 8000fb8:	d351      	bcc.n	800105e <__udivmoddi4+0x28a>
 8000fba:	d04e      	beq.n	800105a <__udivmoddi4+0x286>
 8000fbc:	b155      	cbz	r5, 8000fd4 <__udivmoddi4+0x200>
 8000fbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000fc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fca:	40cb      	lsrs	r3, r1
 8000fcc:	431e      	orrs	r6, r3
 8000fce:	40cc      	lsrs	r4, r1
 8000fd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	e750      	b.n	8000e7a <__udivmoddi4+0xa6>
 8000fd8:	f1c2 0320 	rsb	r3, r2, #32
 8000fdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000fe0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fe8:	4094      	lsls	r4, r2
 8000fea:	430c      	orrs	r4, r1
 8000fec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ff0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ff4:	fa1f f78c 	uxth.w	r7, ip
 8000ff8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ffc:	fb08 3110 	mls	r1, r8, r0, r3
 8001000:	0c23      	lsrs	r3, r4, #16
 8001002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001006:	fb00 f107 	mul.w	r1, r0, r7
 800100a:	4299      	cmp	r1, r3
 800100c:	d908      	bls.n	8001020 <__udivmoddi4+0x24c>
 800100e:	eb1c 0303 	adds.w	r3, ip, r3
 8001012:	f100 36ff 	add.w	r6, r0, #4294967295
 8001016:	d22c      	bcs.n	8001072 <__udivmoddi4+0x29e>
 8001018:	4299      	cmp	r1, r3
 800101a:	d92a      	bls.n	8001072 <__udivmoddi4+0x29e>
 800101c:	3802      	subs	r0, #2
 800101e:	4463      	add	r3, ip
 8001020:	1a5b      	subs	r3, r3, r1
 8001022:	b2a4      	uxth	r4, r4
 8001024:	fbb3 f1f8 	udiv	r1, r3, r8
 8001028:	fb08 3311 	mls	r3, r8, r1, r3
 800102c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001030:	fb01 f307 	mul.w	r3, r1, r7
 8001034:	42a3      	cmp	r3, r4
 8001036:	d908      	bls.n	800104a <__udivmoddi4+0x276>
 8001038:	eb1c 0404 	adds.w	r4, ip, r4
 800103c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001040:	d213      	bcs.n	800106a <__udivmoddi4+0x296>
 8001042:	42a3      	cmp	r3, r4
 8001044:	d911      	bls.n	800106a <__udivmoddi4+0x296>
 8001046:	3902      	subs	r1, #2
 8001048:	4464      	add	r4, ip
 800104a:	1ae4      	subs	r4, r4, r3
 800104c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001050:	e739      	b.n	8000ec6 <__udivmoddi4+0xf2>
 8001052:	4604      	mov	r4, r0
 8001054:	e6f0      	b.n	8000e38 <__udivmoddi4+0x64>
 8001056:	4608      	mov	r0, r1
 8001058:	e706      	b.n	8000e68 <__udivmoddi4+0x94>
 800105a:	45c8      	cmp	r8, r9
 800105c:	d2ae      	bcs.n	8000fbc <__udivmoddi4+0x1e8>
 800105e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001062:	eb63 0c07 	sbc.w	ip, r3, r7
 8001066:	3801      	subs	r0, #1
 8001068:	e7a8      	b.n	8000fbc <__udivmoddi4+0x1e8>
 800106a:	4631      	mov	r1, r6
 800106c:	e7ed      	b.n	800104a <__udivmoddi4+0x276>
 800106e:	4603      	mov	r3, r0
 8001070:	e799      	b.n	8000fa6 <__udivmoddi4+0x1d2>
 8001072:	4630      	mov	r0, r6
 8001074:	e7d4      	b.n	8001020 <__udivmoddi4+0x24c>
 8001076:	46d6      	mov	lr, sl
 8001078:	e77f      	b.n	8000f7a <__udivmoddi4+0x1a6>
 800107a:	4463      	add	r3, ip
 800107c:	3802      	subs	r0, #2
 800107e:	e74d      	b.n	8000f1c <__udivmoddi4+0x148>
 8001080:	4606      	mov	r6, r0
 8001082:	4623      	mov	r3, r4
 8001084:	4608      	mov	r0, r1
 8001086:	e70f      	b.n	8000ea8 <__udivmoddi4+0xd4>
 8001088:	3e02      	subs	r6, #2
 800108a:	4463      	add	r3, ip
 800108c:	e730      	b.n	8000ef0 <__udivmoddi4+0x11c>
 800108e:	bf00      	nop

08001090 <__aeabi_idiv0>:
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	463b      	mov	r3, r7
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010a6:	4b21      	ldr	r3, [pc, #132]	@ (800112c <MX_ADC1_Init+0x98>)
 80010a8:	4a21      	ldr	r2, [pc, #132]	@ (8001130 <MX_ADC1_Init+0x9c>)
 80010aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <MX_ADC1_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010be:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_ADC1_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_ADC1_Init+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d2:	4b16      	ldr	r3, [pc, #88]	@ (800112c <MX_ADC1_Init+0x98>)
 80010d4:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <MX_ADC1_Init+0xa0>)
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_ADC1_Init+0x98>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010de:	4b13      	ldr	r3, [pc, #76]	@ (800112c <MX_ADC1_Init+0x98>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_ADC1_Init+0x98>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f2:	480e      	ldr	r0, [pc, #56]	@ (800112c <MX_ADC1_Init+0x98>)
 80010f4:	f004 f81a 	bl	800512c <HAL_ADC_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010fe:	f000 ff15 	bl	8001f2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001102:	2309      	movs	r3, #9
 8001104:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <MX_ADC1_Init+0x98>)
 8001114:	f004 f99a 	bl	800544c <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800111e:	f000 ff05 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200003c4 	.word	0x200003c4
 8001130:	40012000 	.word	0x40012000
 8001134:	0f000001 	.word	0x0f000001

08001138 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a17      	ldr	r2, [pc, #92]	@ (80011b4 <HAL_ADC_MspInit+0x7c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d127      	bne.n	80011aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_ADC_MspInit+0x80>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	4a15      	ldr	r2, [pc, #84]	@ (80011b8 <HAL_ADC_MspInit+0x80>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001168:	6453      	str	r3, [r2, #68]	@ 0x44
 800116a:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <HAL_ADC_MspInit+0x80>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <HAL_ADC_MspInit+0x80>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <HAL_ADC_MspInit+0x80>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <HAL_ADC_MspInit+0x80>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001192:	2302      	movs	r3, #2
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	@ (80011bc <HAL_ADC_MspInit+0x84>)
 80011a6:	f004 ff9d 	bl	80060e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	@ 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40012000 	.word	0x40012000
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020400 	.word	0x40020400

080011c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <MX_DMA_Init+0x3c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a0b      	ldr	r2, [pc, #44]	@ (80011fc <MX_DMA_Init+0x3c>)
 80011d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_DMA_Init+0x3c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	203a      	movs	r0, #58	@ 0x3a
 80011e8:	f004 fc39 	bl	8005a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011ec:	203a      	movs	r0, #58	@ 0x3a
 80011ee:	f004 fc52 	bl	8005a96 <HAL_NVIC_EnableIRQ>

}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b56      	ldr	r3, [pc, #344]	@ (8001374 <MX_GPIO_Init+0x174>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a55      	ldr	r2, [pc, #340]	@ (8001374 <MX_GPIO_Init+0x174>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b53      	ldr	r3, [pc, #332]	@ (8001374 <MX_GPIO_Init+0x174>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b4f      	ldr	r3, [pc, #316]	@ (8001374 <MX_GPIO_Init+0x174>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a4e      	ldr	r2, [pc, #312]	@ (8001374 <MX_GPIO_Init+0x174>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b4c      	ldr	r3, [pc, #304]	@ (8001374 <MX_GPIO_Init+0x174>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b48      	ldr	r3, [pc, #288]	@ (8001374 <MX_GPIO_Init+0x174>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a47      	ldr	r2, [pc, #284]	@ (8001374 <MX_GPIO_Init+0x174>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b45      	ldr	r3, [pc, #276]	@ (8001374 <MX_GPIO_Init+0x174>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b41      	ldr	r3, [pc, #260]	@ (8001374 <MX_GPIO_Init+0x174>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a40      	ldr	r2, [pc, #256]	@ (8001374 <MX_GPIO_Init+0x174>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b3e      	ldr	r3, [pc, #248]	@ (8001374 <MX_GPIO_Init+0x174>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800128c:	483a      	ldr	r0, [pc, #232]	@ (8001378 <MX_GPIO_Init+0x178>)
 800128e:	f005 f8ad 	bl	80063ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, oled_CS_Pin|sd_CS_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2112      	movs	r1, #18
 8001296:	4839      	ldr	r0, [pc, #228]	@ (800137c <MX_GPIO_Init+0x17c>)
 8001298:	f005 f8a8 	bl	80063ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, oled_DC_Pin|oled_RST_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	210c      	movs	r1, #12
 80012a0:	4836      	ldr	r0, [pc, #216]	@ (800137c <MX_GPIO_Init+0x17c>)
 80012a2:	f005 f8a3 	bl	80063ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, bmp2_CS_Pin|bmp1_CS_Pin|bmp3_CS_Pin, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	f44f 7194 	mov.w	r1, #296	@ 0x128
 80012ac:	4834      	ldr	r0, [pc, #208]	@ (8001380 <MX_GPIO_Init+0x180>)
 80012ae:	f005 f89d 	bl	80063ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	482b      	ldr	r0, [pc, #172]	@ (8001378 <MX_GPIO_Init+0x178>)
 80012cc:	f004 ff0a 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80012d0:	2301      	movs	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012da:	2301      	movs	r3, #1
 80012dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4825      	ldr	r0, [pc, #148]	@ (800137c <MX_GPIO_Init+0x17c>)
 80012e6:	f004 fefd 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : oled_CS_Pin */
  GPIO_InitStruct.Pin = oled_CS_Pin;
 80012ea:	2302      	movs	r3, #2
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(oled_CS_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	481e      	ldr	r0, [pc, #120]	@ (800137c <MX_GPIO_Init+0x17c>)
 8001302:	f004 feef 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : oled_DC_Pin oled_RST_Pin */
  GPIO_InitStruct.Pin = oled_DC_Pin|oled_RST_Pin;
 8001306:	230c      	movs	r3, #12
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4817      	ldr	r0, [pc, #92]	@ (800137c <MX_GPIO_Init+0x17c>)
 800131e:	f004 fee1 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : sd_CS_Pin */
  GPIO_InitStruct.Pin = sd_CS_Pin;
 8001322:	2310      	movs	r3, #16
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132a:	2301      	movs	r3, #1
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132e:	2302      	movs	r3, #2
 8001330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(sd_CS_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	4810      	ldr	r0, [pc, #64]	@ (800137c <MX_GPIO_Init+0x17c>)
 800133a:	f004 fed3 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : bmp2_CS_Pin bmp1_CS_Pin bmp3_CS_Pin */
  GPIO_InitStruct.Pin = bmp2_CS_Pin|bmp1_CS_Pin|bmp3_CS_Pin;
 800133e:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001348:	2301      	movs	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	480a      	ldr	r0, [pc, #40]	@ (8001380 <MX_GPIO_Init+0x180>)
 8001358:	f004 fec4 	bl	80060e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	2006      	movs	r0, #6
 8001362:	f004 fb7c 	bl	8005a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001366:	2006      	movs	r0, #6
 8001368:	f004 fb95 	bl	8005a96 <HAL_NVIC_EnableIRQ>

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	@ 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800
 8001378:	40020800 	.word	0x40020800
 800137c:	40020000 	.word	0x40020000
 8001380:	40020400 	.word	0x40020400

08001384 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_I2C1_Init+0x50>)
 800138a:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <MX_I2C1_Init+0x54>)
 800138c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_I2C1_Init+0x50>)
 8001390:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <MX_I2C1_Init+0x58>)
 8001392:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_I2C1_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_I2C1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013c2:	f005 f845 	bl	8006450 <HAL_I2C_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013cc:	f000 fdae 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000040c 	.word	0x2000040c
 80013d8:	40005400 	.word	0x40005400
 80013dc:	000186a0 	.word	0x000186a0

080013e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a19      	ldr	r2, [pc, #100]	@ (8001464 <HAL_I2C_MspInit+0x84>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d12b      	bne.n	800145a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <HAL_I2C_MspInit+0x88>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <HAL_I2C_MspInit+0x88>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <HAL_I2C_MspInit+0x88>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800141e:	23c0      	movs	r3, #192	@ 0xc0
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001422:	2312      	movs	r3, #18
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800142e:	2304      	movs	r3, #4
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	480c      	ldr	r0, [pc, #48]	@ (800146c <HAL_I2C_MspInit+0x8c>)
 800143a:	f004 fe53 	bl	80060e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <HAL_I2C_MspInit+0x88>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	4a08      	ldr	r2, [pc, #32]	@ (8001468 <HAL_I2C_MspInit+0x88>)
 8001448:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800144c:	6413      	str	r3, [r2, #64]	@ 0x40
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_I2C_MspInit+0x88>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	@ 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40005400 	.word	0x40005400
 8001468:	40023800 	.word	0x40023800
 800146c:	40020400 	.word	0x40020400

08001470 <SDcardInit>:
void OLEDdisplay(struct sensors *s);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDcardInit(char* folder_name) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af04      	add	r7, sp, #16
 8001476:	6078      	str	r0, [r7, #4]
    uint8_t retry_count = 5;
 8001478:	2305      	movs	r3, #5
 800147a:	73fb      	strb	r3, [r7, #15]
    //char buffer[150];

    while (retry_count--) {
 800147c:	e024      	b.n	80014c8 <SDcardInit+0x58>
        res = f_mount(&fs, "", 1);
 800147e:	2201      	movs	r2, #1
 8001480:	4942      	ldr	r1, [pc, #264]	@ (800158c <SDcardInit+0x11c>)
 8001482:	4843      	ldr	r0, [pc, #268]	@ (8001590 <SDcardInit+0x120>)
 8001484:	f010 f9d0 	bl	8011828 <f_mount>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b41      	ldr	r3, [pc, #260]	@ (8001594 <SDcardInit+0x124>)
 800148e:	701a      	strb	r2, [r3, #0]
        if (res == FR_OK) {
 8001490:	4b40      	ldr	r3, [pc, #256]	@ (8001594 <SDcardInit+0x124>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01d      	beq.n	80014d4 <SDcardInit+0x64>
        	break;
        }
        printf("Error mounting filesystem! (%d). Retrying...\r\n", res);
 8001498:	4b3e      	ldr	r3, [pc, #248]	@ (8001594 <SDcardInit+0x124>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	483e      	ldr	r0, [pc, #248]	@ (8001598 <SDcardInit+0x128>)
 80014a0:	f012 feea 	bl	8014278 <iprintf>
//        snprintf(buffer, sizeof(buffer), "Error mounting filesystem! (%d). Retrying...\r\n", res);
//        serial_transmit((uint8_t*)(buffer));

     	ST7735_WriteString(10, 140, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 80014a4:	4b3d      	ldr	r3, [pc, #244]	@ (800159c <SDcardInit+0x12c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	9202      	str	r2, [sp, #8]
 80014aa:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80014ae:	9201      	str	r2, [sp, #4]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	9200      	str	r2, [sp, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a3a      	ldr	r2, [pc, #232]	@ (80015a0 <SDcardInit+0x130>)
 80014b8:	218c      	movs	r1, #140	@ 0x8c
 80014ba:	200a      	movs	r0, #10
 80014bc:	f003 fc13 	bl	8004ce6 <ST7735_WriteString>
        HAL_Delay(RETRY_DELAY_MS);
 80014c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014c4:	f003 fe0e 	bl	80050e4 <HAL_Delay>
    while (retry_count--) {
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	1e5a      	subs	r2, r3, #1
 80014cc:	73fa      	strb	r2, [r7, #15]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1d5      	bne.n	800147e <SDcardInit+0xe>
 80014d2:	e000      	b.n	80014d6 <SDcardInit+0x66>
        	break;
 80014d4:	bf00      	nop
    }

    retry_count = 5;
 80014d6:	2305      	movs	r3, #5
 80014d8:	73fb      	strb	r3, [r7, #15]
    while (retry_count--) {
 80014da:	e024      	b.n	8001526 <SDcardInit+0xb6>
        res = f_open(&fil, "test.txt", FA_OPEN_ALWAYS | FA_WRITE);
 80014dc:	2212      	movs	r2, #18
 80014de:	4931      	ldr	r1, [pc, #196]	@ (80015a4 <SDcardInit+0x134>)
 80014e0:	4831      	ldr	r0, [pc, #196]	@ (80015a8 <SDcardInit+0x138>)
 80014e2:	f010 f9e7 	bl	80118b4 <f_open>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <SDcardInit+0x124>)
 80014ec:	701a      	strb	r2, [r3, #0]
        if (res == FR_OK) {
 80014ee:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <SDcardInit+0x124>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d01d      	beq.n	8001532 <SDcardInit+0xc2>
            break;
        }
        printf( "Error opening SDcard file! (%d). Retrying...\r\n", res);
 80014f6:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <SDcardInit+0x124>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	482b      	ldr	r0, [pc, #172]	@ (80015ac <SDcardInit+0x13c>)
 80014fe:	f012 febb 	bl	8014278 <iprintf>
//    	snprintf(buffer, sizeof(buffer), "Error opening SDcard file! (%d). Retrying...\r\n", res);
//    	serial_transmit((uint8_t*)(buffer));
     	ST7735_WriteString(10, 140, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 8001502:	4b26      	ldr	r3, [pc, #152]	@ (800159c <SDcardInit+0x12c>)
 8001504:	2200      	movs	r2, #0
 8001506:	9202      	str	r2, [sp, #8]
 8001508:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800150c:	9201      	str	r2, [sp, #4]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	9200      	str	r2, [sp, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a22      	ldr	r2, [pc, #136]	@ (80015a0 <SDcardInit+0x130>)
 8001516:	218c      	movs	r1, #140	@ 0x8c
 8001518:	200a      	movs	r0, #10
 800151a:	f003 fbe4 	bl	8004ce6 <ST7735_WriteString>
        HAL_Delay(RETRY_DELAY_MS);
 800151e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001522:	f003 fddf 	bl	80050e4 <HAL_Delay>
    while (retry_count--) {
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	1e5a      	subs	r2, r3, #1
 800152a:	73fa      	strb	r2, [r7, #15]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1d5      	bne.n	80014dc <SDcardInit+0x6c>
 8001530:	e000      	b.n	8001534 <SDcardInit+0xc4>
            break;
 8001532:	bf00      	nop
    }

    res = f_lseek(&fil, f_size(&fil));
 8001534:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <SDcardInit+0x138>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4619      	mov	r1, r3
 800153a:	481b      	ldr	r0, [pc, #108]	@ (80015a8 <SDcardInit+0x138>)
 800153c:	f010 fdbe 	bl	80120bc <f_lseek>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <SDcardInit+0x124>)
 8001546:	701a      	strb	r2, [r3, #0]
    if (res != FR_OK) {
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <SDcardInit+0x124>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d009      	beq.n	8001564 <SDcardInit+0xf4>
    	printf("Error seeking to end of file! (%d)\r\n", res);
 8001550:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <SDcardInit+0x124>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	4816      	ldr	r0, [pc, #88]	@ (80015b0 <SDcardInit+0x140>)
 8001558:	f012 fe8e 	bl	8014278 <iprintf>
//    	snprintf(buffer, sizeof(buffer), "Error seeking to end of file! (%d)\r\n", res);
//    	serial_transmit((uint8_t*)(buffer));
        f_close(&fil);
 800155c:	4812      	ldr	r0, [pc, #72]	@ (80015a8 <SDcardInit+0x138>)
 800155e:	f010 fd83 	bl	8012068 <f_close>
        return;
 8001562:	e00f      	b.n	8001584 <SDcardInit+0x114>
    }
    if (retry_count == 0) {
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <SDcardInit+0xfe>
    	SDcardClose();
 800156a:	f000 f8bf 	bl	80016ec <SDcardClose>
	}

    f_puts("\n--- Nowy pomiar ---\n", &fil);
 800156e:	490e      	ldr	r1, [pc, #56]	@ (80015a8 <SDcardInit+0x138>)
 8001570:	4810      	ldr	r0, [pc, #64]	@ (80015b4 <SDcardInit+0x144>)
 8001572:	f011 f83e 	bl	80125f2 <f_puts>
    f_puts("TVOC_ppb,CO2_eq_ppm,Ethanol_signal,H2_signal,Temperatura,Cisnienie,Napiecie_mV,Prad_mA,Moc_mW\n", &fil);
 8001576:	490c      	ldr	r1, [pc, #48]	@ (80015a8 <SDcardInit+0x138>)
 8001578:	480f      	ldr	r0, [pc, #60]	@ (80015b8 <SDcardInit+0x148>)
 800157a:	f011 f83a 	bl	80125f2 <f_puts>

    f_sync(&fil);
 800157e:	480a      	ldr	r0, [pc, #40]	@ (80015a8 <SDcardInit+0x138>)
 8001580:	f010 fcf4 	bl	8011f6c <f_sync>

}
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	08017ce0 	.word	0x08017ce0
 8001590:	2000049c 	.word	0x2000049c
 8001594:	20002504 	.word	0x20002504
 8001598:	08017ce4 	.word	0x08017ce4
 800159c:	20000080 	.word	0x20000080
 80015a0:	08017d14 	.word	0x08017d14
 80015a4:	08017d24 	.word	0x08017d24
 80015a8:	200014d4 	.word	0x200014d4
 80015ac:	08017d30 	.word	0x08017d30
 80015b0:	08017d60 	.word	0x08017d60
 80015b4:	08017d88 	.word	0x08017d88
 80015b8:	08017da0 	.word	0x08017da0

080015bc <SDcardWriteData>:

void SDcardWriteData(struct sensors *s) {
 80015bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015c0:	b0c1      	sub	sp, #260	@ 0x104
 80015c2:	af0c      	add	r7, sp, #48	@ 0x30
 80015c4:	6078      	str	r0, [r7, #4]
	// ERROR SDcard -> OLED
	if (f_lseek(&fil, f_size(&fil)) != FR_OK) {
 80015c6:	4b41      	ldr	r3, [pc, #260]	@ (80016cc <SDcardWriteData+0x110>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	4619      	mov	r1, r3
 80015cc:	483f      	ldr	r0, [pc, #252]	@ (80016cc <SDcardWriteData+0x110>)
 80015ce:	f010 fd75 	bl	80120bc <f_lseek>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d011      	beq.n	80015fc <SDcardWriteData+0x40>
	printf("Error seeking in file!\r\n");
 80015d8:	483d      	ldr	r0, [pc, #244]	@ (80016d0 <SDcardWriteData+0x114>)
 80015da:	f012 feb5 	bl	8014348 <puts>
//  	serial_transmit((uint8_t*)("Error seeking in file!\r\n"));

  	 ST7735_WriteString(10, 140, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 80015de:	4b3d      	ldr	r3, [pc, #244]	@ (80016d4 <SDcardWriteData+0x118>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	9202      	str	r2, [sp, #8]
 80015e4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80015e8:	9201      	str	r2, [sp, #4]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	9200      	str	r2, [sp, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a39      	ldr	r2, [pc, #228]	@ (80016d8 <SDcardWriteData+0x11c>)
 80015f2:	218c      	movs	r1, #140	@ 0x8c
 80015f4:	200a      	movs	r0, #10
 80015f6:	f003 fb76 	bl	8004ce6 <ST7735_WriteString>
 80015fa:	e063      	b.n	80016c4 <SDcardWriteData+0x108>
  	 return;
	}

	char buffer[200];
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	8b1b      	ldrh	r3, [r3, #24]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8001600:	469a      	mov	sl, r3
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	8b5b      	ldrh	r3, [r3, #26]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8001606:	461e      	mov	r6, r3
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	8b9b      	ldrh	r3, [r3, #28]
 800160c:	ee07 3a90 	vmov	s15, r3
 8001610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001614:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80016dc <SDcardWriteData+0x120>
 8001618:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 800161c:	ee16 0a90 	vmov	r0, s13
 8001620:	f7fe ff9a 	bl	8000558 <__aeabi_f2d>
 8001624:	4604      	mov	r4, r0
 8001626:	460d      	mov	r5, r1
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	8bdb      	ldrh	r3, [r3, #30]
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001634:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80016dc <SDcardWriteData+0x120>
 8001638:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 800163c:	ee16 0a90 	vmov	r0, s13
 8001640:	f7fe ff8a 	bl	8000558 <__aeabi_f2d>
 8001644:	4680      	mov	r8, r0
 8001646:	4689      	mov	r9, r1
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff83 	bl	8000558 <__aeabi_f2d>
 8001652:	4683      	mov	fp, r0
 8001654:	468c      	mov	ip, r1
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	68c9      	ldr	r1, [r1, #12]
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	8c00      	ldrh	r0, [r0, #32]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 800165e:	6038      	str	r0, [r7, #0]
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8001666:	4602      	mov	r2, r0
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature[0], s->BMP280pressure[0],s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 800166c:	4603      	mov	r3, r0
 800166e:	f107 0008 	add.w	r0, r7, #8
 8001672:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001674:	920a      	str	r2, [sp, #40]	@ 0x28
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	9309      	str	r3, [sp, #36]	@ 0x24
 800167a:	9108      	str	r1, [sp, #32]
 800167c:	e9cd bc06 	strd	fp, ip, [sp, #24]
 8001680:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001684:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001688:	9600      	str	r6, [sp, #0]
 800168a:	4653      	mov	r3, sl
 800168c:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <SDcardWriteData+0x124>)
 800168e:	21c8      	movs	r1, #200	@ 0xc8
 8001690:	f012 fe62 	bl	8014358 <sniprintf>

	if (f_puts(buffer, &fil) < 0) {
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	490c      	ldr	r1, [pc, #48]	@ (80016cc <SDcardWriteData+0x110>)
 800169a:	4618      	mov	r0, r3
 800169c:	f010 ffa9 	bl	80125f2 <f_puts>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	da02      	bge.n	80016ac <SDcardWriteData+0xf0>
		printf("Error writing to file!\r\n");
 80016a6:	480f      	ldr	r0, [pc, #60]	@ (80016e4 <SDcardWriteData+0x128>)
 80016a8:	f012 fe4e 	bl	8014348 <puts>
//		serial_transmit((uint8_t*)("Error writing to file!\r\n"));
	}

	if (f_sync(&fil) != FR_OK) {
 80016ac:	4807      	ldr	r0, [pc, #28]	@ (80016cc <SDcardWriteData+0x110>)
 80016ae:	f010 fc5d 	bl	8011f6c <f_sync>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <SDcardWriteData+0x102>
		printf("Error syncing file!\r\n");
 80016b8:	480b      	ldr	r0, [pc, #44]	@ (80016e8 <SDcardWriteData+0x12c>)
 80016ba:	f012 fe45 	bl	8014348 <puts>
//		serial_transmit((uint8_t*)("Error syncing file!\r\n"));
	}
	f_sync(&fil);
 80016be:	4803      	ldr	r0, [pc, #12]	@ (80016cc <SDcardWriteData+0x110>)
 80016c0:	f010 fc54 	bl	8011f6c <f_sync>
}
 80016c4:	37d4      	adds	r7, #212	@ 0xd4
 80016c6:	46bd      	mov	sp, r7
 80016c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016cc:	200014d4 	.word	0x200014d4
 80016d0:	08017e00 	.word	0x08017e00
 80016d4:	20000080 	.word	0x20000080
 80016d8:	08017d14 	.word	0x08017d14
 80016dc:	44000000 	.word	0x44000000
 80016e0:	08017e18 	.word	0x08017e18
 80016e4:	08017e3c 	.word	0x08017e3c
 80016e8:	08017e54 	.word	0x08017e54

080016ec <SDcardClose>:

void SDcardClose(void) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
    if (f_close(&fil) != FR_OK) {
 80016f0:	4805      	ldr	r0, [pc, #20]	@ (8001708 <SDcardClose+0x1c>)
 80016f2:	f010 fcb9 	bl	8012068 <f_close>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <SDcardClose+0x16>
		printf("Error closing file!\r\n");
 80016fc:	4803      	ldr	r0, [pc, #12]	@ (800170c <SDcardClose+0x20>)
 80016fe:	f012 fe23 	bl	8014348 <puts>
//    	serial_transmit((uint8_t*)("Error closing file!\r\n"));
    }
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200014d4 	.word	0x200014d4
 800170c:	08017e6c 	.word	0x08017e6c

08001710 <OLED_first_screen>:

void OLED_first_screen(struct sensors *s){
 8001710:	b580      	push	{r7, lr}
 8001712:	b0ae      	sub	sp, #184	@ 0xb8
 8001714:	af04      	add	r7, sp, #16
 8001716:	6078      	str	r0, [r7, #4]
    // Temperatura
//    int tempInt = (int)(s->BMP280temperature * 100);
//    int tempFrac = tempInt % 100;
//    snprintf(buffer, sizeof(buffer), "Temp: %d.%02d C    ", tempInt / 100, tempFrac);
//    ST7735_WriteString(5,  5, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
    snprintf(buffer, sizeof(buffer), "Temp: %5.2f C ", s->BMP280temperature[0]);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff1b 	bl	8000558 <__aeabi_f2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	f107 0008 	add.w	r0, r7, #8
 800172a:	e9cd 2300 	strd	r2, r3, [sp]
 800172e:	4a86      	ldr	r2, [pc, #536]	@ (8001948 <OLED_first_screen+0x238>)
 8001730:	2196      	movs	r1, #150	@ 0x96
 8001732:	f012 fe11 	bl	8014358 <sniprintf>
    ST7735_WriteString(5, 5, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001736:	4b85      	ldr	r3, [pc, #532]	@ (800194c <OLED_first_screen+0x23c>)
 8001738:	f107 0108 	add.w	r1, r7, #8
 800173c:	2200      	movs	r2, #0
 800173e:	9202      	str	r2, [sp, #8]
 8001740:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001744:	9201      	str	r2, [sp, #4]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	9200      	str	r2, [sp, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	460a      	mov	r2, r1
 800174e:	2105      	movs	r1, #5
 8001750:	2005      	movs	r0, #5
 8001752:	f003 fac8 	bl	8004ce6 <ST7735_WriteString>

    // Ciśnienie
    snprintf(buffer, sizeof(buffer), "Prs:  %6.4f bar", (float)s->BMP280pressure[0] / 100000.0f);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001762:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8001950 <OLED_first_screen+0x240>
 8001766:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800176a:	ee16 0a90 	vmov	r0, s13
 800176e:	f7fe fef3 	bl	8000558 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	f107 0008 	add.w	r0, r7, #8
 800177a:	e9cd 2300 	strd	r2, r3, [sp]
 800177e:	4a75      	ldr	r2, [pc, #468]	@ (8001954 <OLED_first_screen+0x244>)
 8001780:	2196      	movs	r1, #150	@ 0x96
 8001782:	f012 fde9 	bl	8014358 <sniprintf>
    ST7735_WriteString(5,  20, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001786:	4b71      	ldr	r3, [pc, #452]	@ (800194c <OLED_first_screen+0x23c>)
 8001788:	f107 0108 	add.w	r1, r7, #8
 800178c:	2200      	movs	r2, #0
 800178e:	9202      	str	r2, [sp, #8]
 8001790:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001794:	9201      	str	r2, [sp, #4]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	9200      	str	r2, [sp, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	460a      	mov	r2, r1
 800179e:	2114      	movs	r1, #20
 80017a0:	2005      	movs	r0, #5
 80017a2:	f003 faa0 	bl	8004ce6 <ST7735_WriteString>

    // TVOC
    snprintf(buffer, sizeof(buffer), "TVOC: %6u ppb", s->tvoc_ppb);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	8b1b      	ldrh	r3, [r3, #24]
 80017aa:	f107 0008 	add.w	r0, r7, #8
 80017ae:	4a6a      	ldr	r2, [pc, #424]	@ (8001958 <OLED_first_screen+0x248>)
 80017b0:	2196      	movs	r1, #150	@ 0x96
 80017b2:	f012 fdd1 	bl	8014358 <sniprintf>
    ST7735_WriteString(5,  35, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80017b6:	4b65      	ldr	r3, [pc, #404]	@ (800194c <OLED_first_screen+0x23c>)
 80017b8:	f107 0108 	add.w	r1, r7, #8
 80017bc:	2200      	movs	r2, #0
 80017be:	9202      	str	r2, [sp, #8]
 80017c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017c4:	9201      	str	r2, [sp, #4]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	9200      	str	r2, [sp, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	460a      	mov	r2, r1
 80017ce:	2123      	movs	r1, #35	@ 0x23
 80017d0:	2005      	movs	r0, #5
 80017d2:	f003 fa88 	bl	8004ce6 <ST7735_WriteString>

    // CO2eq
    snprintf(buffer, sizeof(buffer), "CO2:  %6u ppm", s->co2_eq_ppm);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	8b5b      	ldrh	r3, [r3, #26]
 80017da:	f107 0008 	add.w	r0, r7, #8
 80017de:	4a5f      	ldr	r2, [pc, #380]	@ (800195c <OLED_first_screen+0x24c>)
 80017e0:	2196      	movs	r1, #150	@ 0x96
 80017e2:	f012 fdb9 	bl	8014358 <sniprintf>
    ST7735_WriteString(5,  50, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80017e6:	4b59      	ldr	r3, [pc, #356]	@ (800194c <OLED_first_screen+0x23c>)
 80017e8:	f107 0108 	add.w	r1, r7, #8
 80017ec:	2200      	movs	r2, #0
 80017ee:	9202      	str	r2, [sp, #8]
 80017f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017f4:	9201      	str	r2, [sp, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	9200      	str	r2, [sp, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	460a      	mov	r2, r1
 80017fe:	2132      	movs	r1, #50	@ 0x32
 8001800:	2005      	movs	r0, #5
 8001802:	f003 fa70 	bl	8004ce6 <ST7735_WriteString>

    // Etanol/512.0
    float ethanol = s->scaled_ethanol_signal / 512.0f;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	8b9b      	ldrh	r3, [r3, #28]
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001812:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8001960 <OLED_first_screen+0x250>
 8001816:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800181a:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    snprintf(buffer, sizeof(buffer), "EtOH: %6.2f", ethanol);
 800181e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001822:	f7fe fe99 	bl	8000558 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	f107 0008 	add.w	r0, r7, #8
 800182e:	e9cd 2300 	strd	r2, r3, [sp]
 8001832:	4a4c      	ldr	r2, [pc, #304]	@ (8001964 <OLED_first_screen+0x254>)
 8001834:	2196      	movs	r1, #150	@ 0x96
 8001836:	f012 fd8f 	bl	8014358 <sniprintf>
    ST7735_WriteString(5,  65, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800183a:	4b44      	ldr	r3, [pc, #272]	@ (800194c <OLED_first_screen+0x23c>)
 800183c:	f107 0108 	add.w	r1, r7, #8
 8001840:	2200      	movs	r2, #0
 8001842:	9202      	str	r2, [sp, #8]
 8001844:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001848:	9201      	str	r2, [sp, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	9200      	str	r2, [sp, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	460a      	mov	r2, r1
 8001852:	2141      	movs	r1, #65	@ 0x41
 8001854:	2005      	movs	r0, #5
 8001856:	f003 fa46 	bl	8004ce6 <ST7735_WriteString>

    // H2/512.0
    float h2 = s->scaled_h2_signal / 512.0f;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	8bdb      	ldrh	r3, [r3, #30]
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001866:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001960 <OLED_first_screen+0x250>
 800186a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186e:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
    snprintf(buffer, sizeof(buffer), "H2:   %6.2f", h2);
 8001872:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001876:	f7fe fe6f 	bl	8000558 <__aeabi_f2d>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	f107 0008 	add.w	r0, r7, #8
 8001882:	e9cd 2300 	strd	r2, r3, [sp]
 8001886:	4a38      	ldr	r2, [pc, #224]	@ (8001968 <OLED_first_screen+0x258>)
 8001888:	2196      	movs	r1, #150	@ 0x96
 800188a:	f012 fd65 	bl	8014358 <sniprintf>
    ST7735_WriteString(5,  80, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800188e:	4b2f      	ldr	r3, [pc, #188]	@ (800194c <OLED_first_screen+0x23c>)
 8001890:	f107 0108 	add.w	r1, r7, #8
 8001894:	2200      	movs	r2, #0
 8001896:	9202      	str	r2, [sp, #8]
 8001898:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800189c:	9201      	str	r2, [sp, #4]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	9200      	str	r2, [sp, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	460a      	mov	r2, r1
 80018a6:	2150      	movs	r1, #80	@ 0x50
 80018a8:	2005      	movs	r0, #5
 80018aa:	f003 fa1c 	bl	8004ce6 <ST7735_WriteString>

    // INA219_Current
    snprintf(buffer, sizeof(buffer), "Current:  %4d mA", s->INA219_Current);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80018b4:	f107 0008 	add.w	r0, r7, #8
 80018b8:	4a2c      	ldr	r2, [pc, #176]	@ (800196c <OLED_first_screen+0x25c>)
 80018ba:	2196      	movs	r1, #150	@ 0x96
 80018bc:	f012 fd4c 	bl	8014358 <sniprintf>
    ST7735_WriteString(5,  95, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80018c0:	4b22      	ldr	r3, [pc, #136]	@ (800194c <OLED_first_screen+0x23c>)
 80018c2:	f107 0108 	add.w	r1, r7, #8
 80018c6:	2200      	movs	r2, #0
 80018c8:	9202      	str	r2, [sp, #8]
 80018ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ce:	9201      	str	r2, [sp, #4]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	9200      	str	r2, [sp, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	460a      	mov	r2, r1
 80018d8:	215f      	movs	r1, #95	@ 0x5f
 80018da:	2005      	movs	r0, #5
 80018dc:	f003 fa03 	bl	8004ce6 <ST7735_WriteString>

    // INA219_Voltage
    snprintf(buffer, sizeof(buffer), "Voltage:  %4u mV", s->INA219_Voltage);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	8c1b      	ldrh	r3, [r3, #32]
 80018e4:	f107 0008 	add.w	r0, r7, #8
 80018e8:	4a21      	ldr	r2, [pc, #132]	@ (8001970 <OLED_first_screen+0x260>)
 80018ea:	2196      	movs	r1, #150	@ 0x96
 80018ec:	f012 fd34 	bl	8014358 <sniprintf>
    ST7735_WriteString(5,  110, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80018f0:	4b16      	ldr	r3, [pc, #88]	@ (800194c <OLED_first_screen+0x23c>)
 80018f2:	f107 0108 	add.w	r1, r7, #8
 80018f6:	2200      	movs	r2, #0
 80018f8:	9202      	str	r2, [sp, #8]
 80018fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018fe:	9201      	str	r2, [sp, #4]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	9200      	str	r2, [sp, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	460a      	mov	r2, r1
 8001908:	216e      	movs	r1, #110	@ 0x6e
 800190a:	2005      	movs	r0, #5
 800190c:	f003 f9eb 	bl	8004ce6 <ST7735_WriteString>

    // INA219_Power
    snprintf(buffer, sizeof(buffer), "Power:  %4u mW", s->INA219_Power);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001914:	f107 0008 	add.w	r0, r7, #8
 8001918:	4a16      	ldr	r2, [pc, #88]	@ (8001974 <OLED_first_screen+0x264>)
 800191a:	2196      	movs	r1, #150	@ 0x96
 800191c:	f012 fd1c 	bl	8014358 <sniprintf>
	ST7735_WriteString(5,  125, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001920:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <OLED_first_screen+0x23c>)
 8001922:	f107 0108 	add.w	r1, r7, #8
 8001926:	2200      	movs	r2, #0
 8001928:	9202      	str	r2, [sp, #8]
 800192a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800192e:	9201      	str	r2, [sp, #4]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	9200      	str	r2, [sp, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	460a      	mov	r2, r1
 8001938:	217d      	movs	r1, #125	@ 0x7d
 800193a:	2005      	movs	r0, #5
 800193c:	f003 f9d3 	bl	8004ce6 <ST7735_WriteString>
}
 8001940:	bf00      	nop
 8001942:	37a8      	adds	r7, #168	@ 0xa8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	08017e84 	.word	0x08017e84
 800194c:	20000080 	.word	0x20000080
 8001950:	47c35000 	.word	0x47c35000
 8001954:	08017e94 	.word	0x08017e94
 8001958:	08017ea4 	.word	0x08017ea4
 800195c:	08017eb4 	.word	0x08017eb4
 8001960:	44000000 	.word	0x44000000
 8001964:	08017ec4 	.word	0x08017ec4
 8001968:	08017ed0 	.word	0x08017ed0
 800196c:	08017edc 	.word	0x08017edc
 8001970:	08017ef0 	.word	0x08017ef0
 8001974:	08017f04 	.word	0x08017f04

08001978 <OLED_second_screen>:

void OLED_second_screen(struct sensors *s){
 8001978:	b580      	push	{r7, lr}
 800197a:	b0ac      	sub	sp, #176	@ 0xb0
 800197c:	af04      	add	r7, sp, #16
 800197e:	6078      	str	r0, [r7, #4]
	char buffer[150];

	// Temperatura 1
	snprintf(buffer, sizeof(buffer), "Temp1: %5.2f C ", s->BMP280temperature[0]);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fde7 	bl	8000558 <__aeabi_f2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	f107 0008 	add.w	r0, r7, #8
 8001992:	e9cd 2300 	strd	r2, r3, [sp]
 8001996:	4a3a      	ldr	r2, [pc, #232]	@ (8001a80 <OLED_second_screen+0x108>)
 8001998:	2196      	movs	r1, #150	@ 0x96
 800199a:	f012 fcdd 	bl	8014358 <sniprintf>
	ST7735_WriteString(5, 5, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800199e:	4b39      	ldr	r3, [pc, #228]	@ (8001a84 <OLED_second_screen+0x10c>)
 80019a0:	f107 0108 	add.w	r1, r7, #8
 80019a4:	2200      	movs	r2, #0
 80019a6:	9202      	str	r2, [sp, #8]
 80019a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ac:	9201      	str	r2, [sp, #4]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	9200      	str	r2, [sp, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	460a      	mov	r2, r1
 80019b6:	2105      	movs	r1, #5
 80019b8:	2005      	movs	r0, #5
 80019ba:	f003 f994 	bl	8004ce6 <ST7735_WriteString>

	// Temperatura 2
	snprintf(buffer, sizeof(buffer), "Temp2: %5.2f C ", s->BMP280temperature[1]);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdc8 	bl	8000558 <__aeabi_f2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	f107 0008 	add.w	r0, r7, #8
 80019d0:	e9cd 2300 	strd	r2, r3, [sp]
 80019d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001a88 <OLED_second_screen+0x110>)
 80019d6:	2196      	movs	r1, #150	@ 0x96
 80019d8:	f012 fcbe 	bl	8014358 <sniprintf>
	ST7735_WriteString(5, 20, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80019dc:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <OLED_second_screen+0x10c>)
 80019de:	f107 0108 	add.w	r1, r7, #8
 80019e2:	2200      	movs	r2, #0
 80019e4:	9202      	str	r2, [sp, #8]
 80019e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ea:	9201      	str	r2, [sp, #4]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	9200      	str	r2, [sp, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	460a      	mov	r2, r1
 80019f4:	2114      	movs	r1, #20
 80019f6:	2005      	movs	r0, #5
 80019f8:	f003 f975 	bl	8004ce6 <ST7735_WriteString>

	// Temperatura 3
	snprintf(buffer, sizeof(buffer), "Temp3: %5.2f C ", s->BMP280temperature[2]);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fda9 	bl	8000558 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	f107 0008 	add.w	r0, r7, #8
 8001a0e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a12:	4a1e      	ldr	r2, [pc, #120]	@ (8001a8c <OLED_second_screen+0x114>)
 8001a14:	2196      	movs	r1, #150	@ 0x96
 8001a16:	f012 fc9f 	bl	8014358 <sniprintf>
	ST7735_WriteString(5, 35, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <OLED_second_screen+0x10c>)
 8001a1c:	f107 0108 	add.w	r1, r7, #8
 8001a20:	2200      	movs	r2, #0
 8001a22:	9202      	str	r2, [sp, #8]
 8001a24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a28:	9201      	str	r2, [sp, #4]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	460a      	mov	r2, r1
 8001a32:	2123      	movs	r1, #35	@ 0x23
 8001a34:	2005      	movs	r0, #5
 8001a36:	f003 f956 	bl	8004ce6 <ST7735_WriteString>

	// PWM "ADC: %.2f%%\r\n",
	snprintf(buffer, sizeof(buffer), "PWM: %.2f%% ", s->adc_percentage);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd8a 	bl	8000558 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	f107 0008 	add.w	r0, r7, #8
 8001a4c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a50:	4a0f      	ldr	r2, [pc, #60]	@ (8001a90 <OLED_second_screen+0x118>)
 8001a52:	2196      	movs	r1, #150	@ 0x96
 8001a54:	f012 fc80 	bl	8014358 <sniprintf>
	ST7735_WriteString(5, 50, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001a58:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <OLED_second_screen+0x10c>)
 8001a5a:	f107 0108 	add.w	r1, r7, #8
 8001a5e:	2200      	movs	r2, #0
 8001a60:	9202      	str	r2, [sp, #8]
 8001a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a66:	9201      	str	r2, [sp, #4]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	9200      	str	r2, [sp, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	460a      	mov	r2, r1
 8001a70:	2132      	movs	r1, #50	@ 0x32
 8001a72:	2005      	movs	r0, #5
 8001a74:	f003 f937 	bl	8004ce6 <ST7735_WriteString>
}
 8001a78:	bf00      	nop
 8001a7a:	37a0      	adds	r7, #160	@ 0xa0
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	08017f14 	.word	0x08017f14
 8001a84:	20000080 	.word	0x20000080
 8001a88:	08017f24 	.word	0x08017f24
 8001a8c:	08017f34 	.word	0x08017f34
 8001a90:	08017f44 	.word	0x08017f44

08001a94 <OLEDdisplay>:

void OLEDdisplay(struct sensors *s) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	if (clean_screen == 1){
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <OLEDdisplay+0x44>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <OLEDdisplay+0x1c>
	  ST7735_FillScreenFast(ST7735_BLACK);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f003 fa70 	bl	8004f8a <ST7735_FillScreenFast>
	  clean_screen = 0;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <OLEDdisplay+0x44>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
	}
	switch (screen_num) {
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <OLEDdisplay+0x48>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <OLEDdisplay+0x2a>
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d004      	beq.n	8001ac6 <OLEDdisplay+0x32>
			break;
		case 1:
			OLED_second_screen(s);
			break;
		default:
			break;
 8001abc:	e007      	b.n	8001ace <OLEDdisplay+0x3a>
			OLED_first_screen(s);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fe26 	bl	8001710 <OLED_first_screen>
			break;
 8001ac4:	e003      	b.n	8001ace <OLEDdisplay+0x3a>
			OLED_second_screen(s);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ff56 	bl	8001978 <OLED_second_screen>
			break;
 8001acc:	bf00      	nop
	}
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000461 	.word	0x20000461
 8001adc:	20000462 	.word	0x20000462

08001ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae4:	ed2d 8b02 	vpush	{d8}
 8001ae8:	b0c1      	sub	sp, #260	@ 0x104
 8001aea:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aec:	f003 fa88 	bl	8005000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af0:	f000 f970 	bl	8001dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af4:	f7ff fb84 	bl	8001200 <MX_GPIO_Init>
  MX_DMA_Init();
 8001af8:	f7ff fb62 	bl	80011c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001afc:	f7ff faca 	bl	8001094 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001b00:	f7ff fc40 	bl	8001384 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001b04:	f000 fa18 	bl	8001f38 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001b08:	f000 fd86 	bl	8002618 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001b0c:	f010 feb8 	bl	8012880 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001b10:	f000 fc46 	bl	80023a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b14:	f000 fcba 	bl	800248c <MX_TIM4_Init>
  MX_FATFS_Init();
 8001b18:	f00b fc4c 	bl	800d3b4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  // TIMER
  HAL_TIM_Base_Start_IT(&htim4);
 8001b1c:	4895      	ldr	r0, [pc, #596]	@ (8001d74 <main+0x294>)
 8001b1e:	f008 fed5 	bl	800a8cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b22:	2100      	movs	r1, #0
 8001b24:	4894      	ldr	r0, [pc, #592]	@ (8001d78 <main+0x298>)
 8001b26:	f008 ff8d 	bl	800aa44 <HAL_TIM_PWM_Start>

  // OLED
  ST7735_Init();
 8001b2a:	f003 f84b 	bl	8004bc4 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f003 fa1a 	bl	8004f68 <ST7735_FillScreen>

  // BMP x3
  for (uint8_t index = 0; index < BMP_SENSOR_COUNT; ++index) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001b3a:	e013      	b.n	8001b64 <main+0x84>
	  if (!BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE, index)) {
 8001b3c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2301      	movs	r3, #1
 8001b44:	2203      	movs	r2, #3
 8001b46:	2101      	movs	r1, #1
 8001b48:	488c      	ldr	r0, [pc, #560]	@ (8001d7c <main+0x29c>)
 8001b4a:	f000 ff3b 	bl	80029c4 <BMP280_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <main+0x7a>
		printf("BMP280 sensor error\r\n");
 8001b54:	488a      	ldr	r0, [pc, #552]	@ (8001d80 <main+0x2a0>)
 8001b56:	f012 fbf7 	bl	8014348 <puts>
  for (uint8_t index = 0; index < BMP_SENSOR_COUNT; ++index) {
 8001b5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001b64:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d9e7      	bls.n	8001b3c <main+0x5c>
//	    serial_transmit((uint8_t*)("BMP280 sensor error\r\n"));
	  }
  }

  // SGP
  if (sgp_probe() != STATUS_OK) {
 8001b6c:	f002 fe84 	bl	8004878 <sgp_probe>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <main+0x9c>
	  printf("SGP sensor error\r\n");
 8001b76:	4883      	ldr	r0, [pc, #524]	@ (8001d84 <main+0x2a4>)
 8001b78:	f012 fbe6 	bl	8014348 <puts>
//    serial_transmit((uint8_t*)("SGP sensor error\r\n"));
  }
  // INA
  if (!INA219_Init(&myina219, &hi2c1, INA219_ADDRESS)){
 8001b7c:	2240      	movs	r2, #64	@ 0x40
 8001b7e:	4982      	ldr	r1, [pc, #520]	@ (8001d88 <main+0x2a8>)
 8001b80:	4882      	ldr	r0, [pc, #520]	@ (8001d8c <main+0x2ac>)
 8001b82:	f001 fdc7 	bl	8003714 <INA219_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <main+0xb2>
	  printf("INA sensor error\r\n");
 8001b8c:	4880      	ldr	r0, [pc, #512]	@ (8001d90 <main+0x2b0>)
 8001b8e:	f012 fbdb 	bl	8014348 <puts>
//    serial_transmit((uint8_t*)("INA sensor error\r\n"));
  }

  // SD
  SDcardInit("test.txt");
 8001b92:	4880      	ldr	r0, [pc, #512]	@ (8001d94 <main+0x2b4>)
 8001b94:	f7ff fc6c 	bl	8001470 <SDcardInit>

  is_program_started = 1;
 8001b98:	4b7f      	ldr	r3, [pc, #508]	@ (8001d98 <main+0x2b8>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// stele probkowanie
	  	if (_interrupt_flag == 1){
 8001b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d9c <main+0x2bc>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d1fb      	bne.n	8001b9e <main+0xbe>
	  		char bufferm[200];

	    	// ADC
	    	HAL_ADC_Start(&hadc1);
 8001ba6:	487e      	ldr	r0, [pc, #504]	@ (8001da0 <main+0x2c0>)
 8001ba8:	f003 fb04 	bl	80051b4 <HAL_ADC_Start>
	    	HAL_ADC_PollForConversion(&hadc1, 1);
 8001bac:	2101      	movs	r1, #1
 8001bae:	487c      	ldr	r0, [pc, #496]	@ (8001da0 <main+0x2c0>)
 8001bb0:	f003 fbb4 	bl	800531c <HAL_ADC_PollForConversion>
	    	adc_position = HAL_ADC_GetValue(&hadc1);
 8001bb4:	487a      	ldr	r0, [pc, #488]	@ (8001da0 <main+0x2c0>)
 8001bb6:	f003 fc3c 	bl	8005432 <HAL_ADC_GetValue>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	4b79      	ldr	r3, [pc, #484]	@ (8001da4 <main+0x2c4>)
 8001bc0:	801a      	strh	r2, [r3, #0]
	        s.adc_percentage = ((adc_position - 150.0f) / (3700.0f - 150.0f)) * 100.0f;
 8001bc2:	4b78      	ldr	r3, [pc, #480]	@ (8001da4 <main+0x2c4>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bce:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8001da8 <main+0x2c8>
 8001bd2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001bd6:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8001dac <main+0x2cc>
 8001bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bde:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8001db0 <main+0x2d0>
 8001be2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be6:	4b73      	ldr	r3, [pc, #460]	@ (8001db4 <main+0x2d4>)
 8001be8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	        s.adc_percentage = s.adc_percentage - fmodf(s.adc_percentage, 5.0f);
 8001bec:	4b71      	ldr	r3, [pc, #452]	@ (8001db4 <main+0x2d4>)
 8001bee:	ed93 8a0a 	vldr	s16, [r3, #40]	@ 0x28
 8001bf2:	4b70      	ldr	r3, [pc, #448]	@ (8001db4 <main+0x2d4>)
 8001bf4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001bf8:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8001bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001c00:	f015 ff68 	bl	8017ad4 <fmodf>
 8001c04:	eef0 7a40 	vmov.f32	s15, s0
 8001c08:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001c0c:	4b69      	ldr	r3, [pc, #420]	@ (8001db4 <main+0x2d4>)
 8001c0e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	        s.adc_percentage = fminf(fmaxf(s.adc_percentage, 0.0f), 100.0f);
 8001c12:	4b68      	ldr	r3, [pc, #416]	@ (8001db4 <main+0x2d4>)
 8001c14:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001c18:	eddf 0a67 	vldr	s1, [pc, #412]	@ 8001db8 <main+0x2d8>
 8001c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c20:	f015 ff78 	bl	8017b14 <fmaxf>
 8001c24:	eef0 7a40 	vmov.f32	s15, s0
 8001c28:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8001db0 <main+0x2d0>
 8001c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c30:	f015 ff8d 	bl	8017b4e <fminf>
 8001c34:	eef0 7a40 	vmov.f32	s15, s0
 8001c38:	4b5e      	ldr	r3, [pc, #376]	@ (8001db4 <main+0x2d4>)
 8001c3a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, s.adc_percentage*10);
 8001c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001db4 <main+0x2d4>)
 8001c40:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001c44:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d78 <main+0x298>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c54:	ee17 2a90 	vmov	r2, s15
 8001c58:	635a      	str	r2, [r3, #52]	@ 0x34


	  		// BMP
	    	for (uint8_t index = 0; index < BMP_SENSOR_COUNT; ++index) {
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6
 8001c60:	e015      	b.n	8001c8e <main+0x1ae>
	    		BMP280_ReadTemperatureAndPressure(&s.BMP280temperature[index], &s.BMP280pressure[index], index);
 8001c62:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4a52      	ldr	r2, [pc, #328]	@ (8001db4 <main+0x2d4>)
 8001c6a:	1898      	adds	r0, r3, r2
 8001c6c:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8001c70:	3302      	adds	r3, #2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4a4f      	ldr	r2, [pc, #316]	@ (8001db4 <main+0x2d4>)
 8001c76:	4413      	add	r3, r2
 8001c78:	3304      	adds	r3, #4
 8001c7a:	f897 20d6 	ldrb.w	r2, [r7, #214]	@ 0xd6
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f001 f8f0 	bl	8002e64 <BMP280_ReadTemperatureAndPressure>
	    	for (uint8_t index = 0; index < BMP_SENSOR_COUNT; ++index) {
 8001c84:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8001c88:	3301      	adds	r3, #1
 8001c8a:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6
 8001c8e:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d9e5      	bls.n	8001c62 <main+0x182>
	    	}

			// SGP
			sgp_measure_iaq_blocking_read(&s.tvoc_ppb, &s.co2_eq_ppm);
 8001c96:	4949      	ldr	r1, [pc, #292]	@ (8001dbc <main+0x2dc>)
 8001c98:	4849      	ldr	r0, [pc, #292]	@ (8001dc0 <main+0x2e0>)
 8001c9a:	f002 fda5 	bl	80047e8 <sgp_measure_iaq_blocking_read>
			sgp_measure_signals_blocking_read(&s.scaled_ethanol_signal, &s.scaled_h2_signal);
 8001c9e:	4949      	ldr	r1, [pc, #292]	@ (8001dc4 <main+0x2e4>)
 8001ca0:	4849      	ldr	r0, [pc, #292]	@ (8001dc8 <main+0x2e8>)
 8001ca2:	f002 fdbf 	bl	8004824 <sgp_measure_signals_blocking_read>
			//sgp_set_absolute_humidity()

			// INA219
			s.INA219_Current = INA219_ReadCurrent_raw(&myina219);
 8001ca6:	4839      	ldr	r0, [pc, #228]	@ (8001d8c <main+0x2ac>)
 8001ca8:	f001 fc6a 	bl	8003580 <INA219_ReadCurrent_raw>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b40      	ldr	r3, [pc, #256]	@ (8001db4 <main+0x2d4>)
 8001cb2:	845a      	strh	r2, [r3, #34]	@ 0x22
			s.INA219_Voltage = INA219_ReadBusVoltage(&myina219);
 8001cb4:	4835      	ldr	r0, [pc, #212]	@ (8001d8c <main+0x2ac>)
 8001cb6:	f001 fc50 	bl	800355a <INA219_ReadBusVoltage>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <main+0x2d4>)
 8001cc0:	841a      	strh	r2, [r3, #32]
			s.INA219_Power = INA219_ReadPower(&myina219);
 8001cc2:	4832      	ldr	r0, [pc, #200]	@ (8001d8c <main+0x2ac>)
 8001cc4:	f001 fc6c 	bl	80035a0 <INA219_ReadPower>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b39      	ldr	r3, [pc, #228]	@ (8001db4 <main+0x2d4>)
 8001cce:	849a      	strh	r2, [r3, #36]	@ 0x24

			// OLED
			OLEDdisplay(&s);
 8001cd0:	4838      	ldr	r0, [pc, #224]	@ (8001db4 <main+0x2d4>)
 8001cd2:	f7ff fedf 	bl	8001a94 <OLEDdisplay>

			// SD
			SDcardWriteData(&s);
 8001cd6:	4837      	ldr	r0, [pc, #220]	@ (8001db4 <main+0x2d4>)
 8001cd8:	f7ff fc70 	bl	80015bc <SDcardWriteData>

			// Transmit ofer uart
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001cdc:	4b35      	ldr	r3, [pc, #212]	@ (8001db4 <main+0x2d4>)
 8001cde:	8b1b      	ldrh	r3, [r3, #24]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001ce0:	469a      	mov	sl, r3
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001ce2:	4b34      	ldr	r3, [pc, #208]	@ (8001db4 <main+0x2d4>)
 8001ce4:	8b5b      	ldrh	r3, [r3, #26]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001ce6:	469b      	mov	fp, r3
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001ce8:	4b32      	ldr	r3, [pc, #200]	@ (8001db4 <main+0x2d4>)
 8001cea:	8b9b      	ldrh	r3, [r3, #28]
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf4:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001dcc <main+0x2ec>
 8001cf8:	eec7 6a87 	vdiv.f32	s13, s15, s14
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001cfc:	ee16 0a90 	vmov	r0, s13
 8001d00:	f7fe fc2a 	bl	8000558 <__aeabi_f2d>
 8001d04:	4604      	mov	r4, r0
 8001d06:	460d      	mov	r5, r1
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001d08:	4b2a      	ldr	r3, [pc, #168]	@ (8001db4 <main+0x2d4>)
 8001d0a:	8bdb      	ldrh	r3, [r3, #30]
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d14:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001dcc <main+0x2ec>
 8001d18:	eec7 6a87 	vdiv.f32	s13, s15, s14
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001d1c:	ee16 0a90 	vmov	r0, s13
 8001d20:	f7fe fc1a 	bl	8000558 <__aeabi_f2d>
 8001d24:	4680      	mov	r8, r0
 8001d26:	4689      	mov	r9, r1
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001d28:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <main+0x2d4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fc13 	bl	8000558 <__aeabi_f2d>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	491f      	ldr	r1, [pc, #124]	@ (8001db4 <main+0x2d4>)
 8001d38:	68c9      	ldr	r1, [r1, #12]
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001d3a:	481e      	ldr	r0, [pc, #120]	@ (8001db4 <main+0x2d4>)
 8001d3c:	8c00      	ldrh	r0, [r0, #32]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001d3e:	4606      	mov	r6, r0
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001d40:	481c      	ldr	r0, [pc, #112]	@ (8001db4 <main+0x2d4>)
 8001d42:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001d46:	6078      	str	r0, [r7, #4]
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8001d48:	481a      	ldr	r0, [pc, #104]	@ (8001db4 <main+0x2d4>)
 8001d4a:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8001d4c:	9009      	str	r0, [sp, #36]	@ 0x24
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	9008      	str	r0, [sp, #32]
 8001d52:	9607      	str	r6, [sp, #28]
 8001d54:	9106      	str	r1, [sp, #24]
 8001d56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d5a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d5e:	e9cd 4500 	strd	r4, r5, [sp]
 8001d62:	465a      	mov	r2, fp
 8001d64:	4651      	mov	r1, sl
 8001d66:	481a      	ldr	r0, [pc, #104]	@ (8001dd0 <main+0x2f0>)
 8001d68:	f012 fa86 	bl	8014278 <iprintf>

			//snprintf(bufferm, sizeof(bufferm), "{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
			//		s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature[0], s.BMP280pressure[0], s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
			//serial_transmit((uint8_t*)(bufferm));

			_interrupt_flag = 0;
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <main+0x2bc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
	  	if (_interrupt_flag == 1){
 8001d72:	e714      	b.n	8001b9e <main+0xbe>
 8001d74:	20002610 	.word	0x20002610
 8001d78:	200025c8 	.word	0x200025c8
 8001d7c:	20002508 	.word	0x20002508
 8001d80:	08017f54 	.word	0x08017f54
 8001d84:	08017f6c 	.word	0x08017f6c
 8001d88:	2000040c 	.word	0x2000040c
 8001d8c:	20000494 	.word	0x20000494
 8001d90:	08017f80 	.word	0x08017f80
 8001d94:	08017d24 	.word	0x08017d24
 8001d98:	20000460 	.word	0x20000460
 8001d9c:	20000463 	.word	0x20000463
 8001da0:	200003c4 	.word	0x200003c4
 8001da4:	20000464 	.word	0x20000464
 8001da8:	43160000 	.word	0x43160000
 8001dac:	455de000 	.word	0x455de000
 8001db0:	42c80000 	.word	0x42c80000
 8001db4:	20000468 	.word	0x20000468
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	20000482 	.word	0x20000482
 8001dc0:	20000480 	.word	0x20000480
 8001dc4:	20000486 	.word	0x20000486
 8001dc8:	20000484 	.word	0x20000484
 8001dcc:	44000000 	.word	0x44000000
 8001dd0:	08017f94 	.word	0x08017f94

08001dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b094      	sub	sp, #80	@ 0x50
 8001dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dda:	f107 0320 	add.w	r3, r7, #32
 8001dde:	2230      	movs	r2, #48	@ 0x30
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f012 fbe4 	bl	80145b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	4b27      	ldr	r3, [pc, #156]	@ (8001e9c <SystemClock_Config+0xc8>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	4a26      	ldr	r2, [pc, #152]	@ (8001e9c <SystemClock_Config+0xc8>)
 8001e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e08:	4b24      	ldr	r3, [pc, #144]	@ (8001e9c <SystemClock_Config+0xc8>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e14:	2300      	movs	r3, #0
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <SystemClock_Config+0xcc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a20      	ldr	r2, [pc, #128]	@ (8001ea0 <SystemClock_Config+0xcc>)
 8001e1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <SystemClock_Config+0xcc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e30:	2301      	movs	r3, #1
 8001e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e44:	2319      	movs	r3, #25
 8001e46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001e48:	2390      	movs	r3, #144	@ 0x90
 8001e4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001e50:	2303      	movs	r3, #3
 8001e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e54:	f107 0320 	add.w	r3, r7, #32
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f007 fb1d 	bl	8009498 <HAL_RCC_OscConfig>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e64:	f000 f862 	bl	8001f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e68:	230f      	movs	r3, #15
 8001e6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	2102      	movs	r1, #2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f007 fd7f 	bl	8009988 <HAL_RCC_ClockConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e90:	f000 f84c 	bl	8001f2c <Error_Handler>
  }
}
 8001e94:	bf00      	nop
 8001e96:	3750      	adds	r7, #80	@ 0x50
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40007000 	.word	0x40007000

08001ea4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if (htim == &htim4 && is_program_started == 1){
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a0b      	ldr	r2, [pc, #44]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d10e      	bne.n	8001ed2 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d10a      	bne.n	8001ed2 <HAL_TIM_PeriodElapsedCallback+0x2e>
  	if (_interrupt_flag == 1){
 8001ebc:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d103      	bne.n	8001ecc <HAL_TIM_PeriodElapsedCallback+0x28>
  		printf("Flaga _interrupt_flag jest juz 1\r\n");
 8001ec4:	4808      	ldr	r0, [pc, #32]	@ (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ec6:	f012 fa3f 	bl	8014348 <puts>
  	}
  	else{
  		_interrupt_flag = 1;
  	}
  }
}
 8001eca:	e002      	b.n	8001ed2 <HAL_TIM_PeriodElapsedCallback+0x2e>
  		_interrupt_flag = 1;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20002610 	.word	0x20002610
 8001ee0:	20000460 	.word	0x20000460
 8001ee4:	20000463 	.word	0x20000463
 8001ee8:	08017fbc 	.word	0x08017fbc

08001eec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == KEY_Pin) {
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d10d      	bne.n	8001f18 <HAL_GPIO_EXTI_Callback+0x2c>
		screen_num = (screen_num + 1) % SCREENS_NUM;
 8001efc:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x38>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	3301      	adds	r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	bfb8      	it	lt
 8001f0a:	425b      	neglt	r3, r3
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x38>)
 8001f10:	701a      	strb	r2, [r3, #0]
		clean_screen = 1;
 8001f12:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
	}
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	20000462 	.word	0x20000462
 8001f28:	20000461 	.word	0x20000461

08001f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
}
 8001f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <Error_Handler+0x8>

08001f38 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f3e:	4a18      	ldr	r2, [pc, #96]	@ (8001fa0 <MX_SPI1_Init+0x68>)
 8001f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f42:	4b16      	ldr	r3, [pc, #88]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f56:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f70:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f7c:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f84:	220a      	movs	r2, #10
 8001f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f88:	4804      	ldr	r0, [pc, #16]	@ (8001f9c <MX_SPI1_Init+0x64>)
 8001f8a:	f007 fedd 	bl	8009d48 <HAL_SPI_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f94:	f7ff ffca 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20002508 	.word	0x20002508
 8001fa0:	40013000 	.word	0x40013000

08001fa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a34      	ldr	r2, [pc, #208]	@ (8002094 <HAL_SPI_MspInit+0xf0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d161      	bne.n	800208a <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b33      	ldr	r3, [pc, #204]	@ (8002098 <HAL_SPI_MspInit+0xf4>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	4a32      	ldr	r2, [pc, #200]	@ (8002098 <HAL_SPI_MspInit+0xf4>)
 8001fd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd6:	4b30      	ldr	r3, [pc, #192]	@ (8002098 <HAL_SPI_MspInit+0xf4>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8002098 <HAL_SPI_MspInit+0xf4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a2b      	ldr	r2, [pc, #172]	@ (8002098 <HAL_SPI_MspInit+0xf4>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b29      	ldr	r3, [pc, #164]	@ (8002098 <HAL_SPI_MspInit+0xf4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ffe:	23e0      	movs	r3, #224	@ 0xe0
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200e:	2305      	movs	r3, #5
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4820      	ldr	r0, [pc, #128]	@ (800209c <HAL_SPI_MspInit+0xf8>)
 800201a:	f004 f863 	bl	80060e4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800201e:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <HAL_SPI_MspInit+0xfc>)
 8002020:	4a20      	ldr	r2, [pc, #128]	@ (80020a4 <HAL_SPI_MspInit+0x100>)
 8002022:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8002024:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <HAL_SPI_MspInit+0xfc>)
 8002026:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800202a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800202c:	4b1c      	ldr	r3, [pc, #112]	@ (80020a0 <HAL_SPI_MspInit+0xfc>)
 800202e:	2240      	movs	r2, #64	@ 0x40
 8002030:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002032:	4b1b      	ldr	r3, [pc, #108]	@ (80020a0 <HAL_SPI_MspInit+0xfc>)
 8002034:	2200      	movs	r2, #0
 8002036:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002038:	4b19      	ldr	r3, [pc, #100]	@ (80020a0 <HAL_SPI_MspInit+0xfc>)
 800203a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800203e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002040:	4b17      	ldr	r3, [pc, #92]	@ (80020a0 <HAL_SPI_MspInit+0xfc>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002046:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <HAL_SPI_MspInit+0xfc>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800204c:	4b14      	ldr	r3, [pc, #80]	@ (80020a0 <HAL_SPI_MspInit+0xfc>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002052:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <HAL_SPI_MspInit+0xfc>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <HAL_SPI_MspInit+0xfc>)
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800205e:	4810      	ldr	r0, [pc, #64]	@ (80020a0 <HAL_SPI_MspInit+0xfc>)
 8002060:	f003 fd34 	bl	8005acc <HAL_DMA_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800206a:	f7ff ff5f 	bl	8001f2c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a0b      	ldr	r2, [pc, #44]	@ (80020a0 <HAL_SPI_MspInit+0xfc>)
 8002072:	649a      	str	r2, [r3, #72]	@ 0x48
 8002074:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <HAL_SPI_MspInit+0xfc>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	2023      	movs	r0, #35	@ 0x23
 8002080:	f003 fced 	bl	8005a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002084:	2023      	movs	r0, #35	@ 0x23
 8002086:	f003 fd06 	bl	8005a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	@ 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40013000 	.word	0x40013000
 8002098:	40023800 	.word	0x40023800
 800209c:	40020000 	.word	0x40020000
 80020a0:	20002560 	.word	0x20002560
 80020a4:	40026440 	.word	0x40026440

080020a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <HAL_MspInit+0x4c>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b6:	4a0f      	ldr	r2, [pc, #60]	@ (80020f4 <HAL_MspInit+0x4c>)
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020be:	4b0d      	ldr	r3, [pc, #52]	@ (80020f4 <HAL_MspInit+0x4c>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_MspInit+0x4c>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	4a08      	ldr	r2, [pc, #32]	@ (80020f4 <HAL_MspInit+0x4c>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_MspInit+0x4c>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 80020fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <SDTimer_Handler+0x40>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <SDTimer_Handler+0x1c>
	{
		Timer1--;
 8002106:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <SDTimer_Handler+0x40>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <SDTimer_Handler+0x40>)
 8002112:	701a      	strb	r2, [r3, #0]
	}
	if (Timer2 > 0)
 8002114:	4b09      	ldr	r3, [pc, #36]	@ (800213c <SDTimer_Handler+0x44>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <SDTimer_Handler+0x34>
	{
		Timer2--;
 800211e:	4b07      	ldr	r3, [pc, #28]	@ (800213c <SDTimer_Handler+0x44>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b04      	ldr	r3, [pc, #16]	@ (800213c <SDTimer_Handler+0x44>)
 800212a:	701a      	strb	r2, [r3, #0]
	}
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	200025c1 	.word	0x200025c1
 800213c:	200025c2 	.word	0x200025c2

08002140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <NMI_Handler+0x4>

08002148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214c:	bf00      	nop
 800214e:	e7fd      	b.n	800214c <HardFault_Handler+0x4>

08002150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <MemManage_Handler+0x4>

08002158 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <BusFault_Handler+0x4>

08002160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <UsageFault_Handler+0x4>

08002168 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <SysTick_Handler+0x30>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <SysTick_Handler+0x30>)
 80021a4:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10)
 80021a6:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <SysTick_Handler+0x30>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b09      	cmp	r3, #9
 80021ae:	d904      	bls.n	80021ba <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80021b0:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <SysTick_Handler+0x30>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80021b6:	f7ff ff9f 	bl	80020f8 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ba:	f002 ff73 	bl	80050a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200025c0 	.word	0x200025c0

080021c8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_Pin);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f004 f927 	bl	8006420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021dc:	4802      	ldr	r0, [pc, #8]	@ (80021e8 <TIM4_IRQHandler+0x10>)
 80021de:	f008 fce1 	bl	800aba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20002610 	.word	0x20002610

080021ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021f0:	4802      	ldr	r0, [pc, #8]	@ (80021fc <SPI1_IRQHandler+0x10>)
 80021f2:	f008 f91f 	bl	800a434 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20002508 	.word	0x20002508

08002200 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002204:	4802      	ldr	r0, [pc, #8]	@ (8002210 <DMA2_Stream2_IRQHandler+0x10>)
 8002206:	f003 fd31 	bl	8005c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20002560 	.word	0x20002560

08002214 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002218:	4802      	ldr	r0, [pc, #8]	@ (8002224 <OTG_FS_IRQHandler+0x10>)
 800221a:	f006 f82f 	bl	800827c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200043f8 	.word	0x200043f8

08002228 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return 1;
 800222c:	2301      	movs	r3, #1
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_kill>:

int _kill(int pid, int sig)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002242:	f012 fa17 	bl	8014674 <__errno>
 8002246:	4603      	mov	r3, r0
 8002248:	2216      	movs	r2, #22
 800224a:	601a      	str	r2, [r3, #0]
  return -1;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <_exit>:

void _exit (int status)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ffe7 	bl	8002238 <_kill>
  while (1) {}    /* Make sure we hang here */
 800226a:	bf00      	nop
 800226c:	e7fd      	b.n	800226a <_exit+0x12>

0800226e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e00a      	b.n	8002296 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002280:	f3af 8000 	nop.w
 8002284:	4601      	mov	r1, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	60ba      	str	r2, [r7, #8]
 800228c:	b2ca      	uxtb	r2, r1
 800228e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	dbf0      	blt.n	8002280 <_read+0x12>
  }

  return len;
 800229e:	687b      	ldr	r3, [r7, #4]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022d0:	605a      	str	r2, [r3, #4]
  return 0;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_isatty>:

int _isatty(int file)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022e8:	2301      	movs	r3, #1
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002318:	4a14      	ldr	r2, [pc, #80]	@ (800236c <_sbrk+0x5c>)
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <_sbrk+0x60>)
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002324:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <_sbrk+0x64>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <_sbrk+0x64>)
 800232e:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <_sbrk+0x68>)
 8002330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <_sbrk+0x64>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	429a      	cmp	r2, r3
 800233e:	d207      	bcs.n	8002350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002340:	f012 f998 	bl	8014674 <__errno>
 8002344:	4603      	mov	r3, r0
 8002346:	220c      	movs	r2, #12
 8002348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	e009      	b.n	8002364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002350:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002356:	4b07      	ldr	r3, [pc, #28]	@ (8002374 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	4a05      	ldr	r2, [pc, #20]	@ (8002374 <_sbrk+0x64>)
 8002360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20020000 	.word	0x20020000
 8002370:	00000400 	.word	0x00000400
 8002374:	200025c4 	.word	0x200025c4
 8002378:	20004c48 	.word	0x20004c48

0800237c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <SystemInit+0x20>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002386:	4a05      	ldr	r2, [pc, #20]	@ (800239c <SystemInit+0x20>)
 8002388:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800238c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08e      	sub	sp, #56	@ 0x38
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b4:	f107 0320 	add.w	r3, r7, #32
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
 80023cc:	615a      	str	r2, [r3, #20]
 80023ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002484 <MX_TIM3_Init+0xe4>)
 80023d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002488 <MX_TIM3_Init+0xe8>)
 80023d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80023d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002484 <MX_TIM3_Init+0xe4>)
 80023d8:	2247      	movs	r2, #71	@ 0x47
 80023da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023dc:	4b29      	ldr	r3, [pc, #164]	@ (8002484 <MX_TIM3_Init+0xe4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80023e2:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <MX_TIM3_Init+0xe4>)
 80023e4:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80023e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ea:	4b26      	ldr	r3, [pc, #152]	@ (8002484 <MX_TIM3_Init+0xe4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f0:	4b24      	ldr	r3, [pc, #144]	@ (8002484 <MX_TIM3_Init+0xe4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023f6:	4823      	ldr	r0, [pc, #140]	@ (8002484 <MX_TIM3_Init+0xe4>)
 80023f8:	f008 fa18 	bl	800a82c <HAL_TIM_Base_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002402:	f7ff fd93 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002406:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800240a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800240c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002410:	4619      	mov	r1, r3
 8002412:	481c      	ldr	r0, [pc, #112]	@ (8002484 <MX_TIM3_Init+0xe4>)
 8002414:	f008 fd78 	bl	800af08 <HAL_TIM_ConfigClockSource>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800241e:	f7ff fd85 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002422:	4818      	ldr	r0, [pc, #96]	@ (8002484 <MX_TIM3_Init+0xe4>)
 8002424:	f008 fab4 	bl	800a990 <HAL_TIM_PWM_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800242e:	f7ff fd7d 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	4619      	mov	r1, r3
 8002440:	4810      	ldr	r0, [pc, #64]	@ (8002484 <MX_TIM3_Init+0xe4>)
 8002442:	f009 f923 	bl	800b68c <HAL_TIMEx_MasterConfigSynchronization>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800244c:	f7ff fd6e 	bl	8001f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002450:	2360      	movs	r3, #96	@ 0x60
 8002452:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	2200      	movs	r2, #0
 8002464:	4619      	mov	r1, r3
 8002466:	4807      	ldr	r0, [pc, #28]	@ (8002484 <MX_TIM3_Init+0xe4>)
 8002468:	f008 fc8c 	bl	800ad84 <HAL_TIM_PWM_ConfigChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002472:	f7ff fd5b 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002476:	4803      	ldr	r0, [pc, #12]	@ (8002484 <MX_TIM3_Init+0xe4>)
 8002478:	f000 f894 	bl	80025a4 <HAL_TIM_MspPostInit>

}
 800247c:	bf00      	nop
 800247e:	3738      	adds	r7, #56	@ 0x38
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200025c8 	.word	0x200025c8
 8002488:	40000400 	.word	0x40000400

0800248c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a0:	463b      	mov	r3, r7
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002520 <MX_TIM4_Init+0x94>)
 80024aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002524 <MX_TIM4_Init+0x98>)
 80024ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80024ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002520 <MX_TIM4_Init+0x94>)
 80024b0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80024b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <MX_TIM4_Init+0x94>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80024bc:	4b18      	ldr	r3, [pc, #96]	@ (8002520 <MX_TIM4_Init+0x94>)
 80024be:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80024c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c4:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <MX_TIM4_Init+0x94>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ca:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <MX_TIM4_Init+0x94>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024d0:	4813      	ldr	r0, [pc, #76]	@ (8002520 <MX_TIM4_Init+0x94>)
 80024d2:	f008 f9ab 	bl	800a82c <HAL_TIM_Base_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80024dc:	f7ff fd26 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	4619      	mov	r1, r3
 80024ec:	480c      	ldr	r0, [pc, #48]	@ (8002520 <MX_TIM4_Init+0x94>)
 80024ee:	f008 fd0b 	bl	800af08 <HAL_TIM_ConfigClockSource>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80024f8:	f7ff fd18 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002504:	463b      	mov	r3, r7
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	@ (8002520 <MX_TIM4_Init+0x94>)
 800250a:	f009 f8bf 	bl	800b68c <HAL_TIMEx_MasterConfigSynchronization>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002514:	f7ff fd0a 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20002610 	.word	0x20002610
 8002524:	40000800 	.word	0x40000800

08002528 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a18      	ldr	r2, [pc, #96]	@ (8002598 <HAL_TIM_Base_MspInit+0x70>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d10e      	bne.n	8002558 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b17      	ldr	r3, [pc, #92]	@ (800259c <HAL_TIM_Base_MspInit+0x74>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	4a16      	ldr	r2, [pc, #88]	@ (800259c <HAL_TIM_Base_MspInit+0x74>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	6413      	str	r3, [r2, #64]	@ 0x40
 800254a:	4b14      	ldr	r3, [pc, #80]	@ (800259c <HAL_TIM_Base_MspInit+0x74>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002556:	e01a      	b.n	800258e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a10      	ldr	r2, [pc, #64]	@ (80025a0 <HAL_TIM_Base_MspInit+0x78>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d115      	bne.n	800258e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <HAL_TIM_Base_MspInit+0x74>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	4a0c      	ldr	r2, [pc, #48]	@ (800259c <HAL_TIM_Base_MspInit+0x74>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	6413      	str	r3, [r2, #64]	@ 0x40
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_TIM_Base_MspInit+0x74>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	201e      	movs	r0, #30
 8002584:	f003 fa6b 	bl	8005a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002588:	201e      	movs	r0, #30
 800258a:	f003 fa84 	bl	8005a96 <HAL_NVIC_EnableIRQ>
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40000400 	.word	0x40000400
 800259c:	40023800 	.word	0x40023800
 80025a0:	40000800 	.word	0x40000800

080025a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a12      	ldr	r2, [pc, #72]	@ (800260c <HAL_TIM_MspPostInit+0x68>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d11d      	bne.n	8002602 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <HAL_TIM_MspPostInit+0x6c>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	4a10      	ldr	r2, [pc, #64]	@ (8002610 <HAL_TIM_MspPostInit+0x6c>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <HAL_TIM_MspPostInit+0x6c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025e2:	2310      	movs	r3, #16
 80025e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025f2:	2302      	movs	r3, #2
 80025f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f6:	f107 030c 	add.w	r3, r7, #12
 80025fa:	4619      	mov	r1, r3
 80025fc:	4805      	ldr	r0, [pc, #20]	@ (8002614 <HAL_TIM_MspPostInit+0x70>)
 80025fe:	f003 fd71 	bl	80060e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002602:	bf00      	nop
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40000400 	.word	0x40000400
 8002610:	40023800 	.word	0x40023800
 8002614:	40020400 	.word	0x40020400

08002618 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800261c:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 800261e:	4a12      	ldr	r2, [pc, #72]	@ (8002668 <MX_USART1_UART_Init+0x50>)
 8002620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 8002624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800262a:	4b0e      	ldr	r3, [pc, #56]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002630:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002636:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800263c:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 800263e:	220c      	movs	r2, #12
 8002640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002642:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800264e:	4805      	ldr	r0, [pc, #20]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 8002650:	f009 f89e 	bl	800b790 <HAL_UART_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800265a:	f7ff fc67 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20002658 	.word	0x20002658
 8002668:	40011000 	.word	0x40011000

0800266c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	@ 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a19      	ldr	r2, [pc, #100]	@ (80026f0 <HAL_UART_MspInit+0x84>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d12c      	bne.n	80026e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <HAL_UART_MspInit+0x88>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	4a17      	ldr	r2, [pc, #92]	@ (80026f4 <HAL_UART_MspInit+0x88>)
 8002698:	f043 0310 	orr.w	r3, r3, #16
 800269c:	6453      	str	r3, [r2, #68]	@ 0x44
 800269e:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <HAL_UART_MspInit+0x88>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <HAL_UART_MspInit+0x88>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	4a10      	ldr	r2, [pc, #64]	@ (80026f4 <HAL_UART_MspInit+0x88>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ba:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <HAL_UART_MspInit+0x88>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d4:	2303      	movs	r3, #3
 80026d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026d8:	2307      	movs	r3, #7
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	4619      	mov	r1, r3
 80026e2:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <HAL_UART_MspInit+0x8c>)
 80026e4:	f003 fcfe 	bl	80060e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026e8:	bf00      	nop
 80026ea:	3728      	adds	r7, #40	@ 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40011000 	.word	0x40011000
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020000 	.word	0x40020000

080026fc <BMP280_Read8>:

//
//	Functions
//
uint8_t BMP280_Read8(uint8_t addr, uint8_t index)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af02      	add	r7, sp, #8
 8002702:	4603      	mov	r3, r0
 8002704:	460a      	mov	r2, r1
 8002706:	71fb      	strb	r3, [r7, #7]
 8002708:	4613      	mov	r3, r2
 800270a:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp[2];
	tmp[0] = addr;
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8002710:	7b3b      	ldrb	r3, [r7, #12]
 8002712:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002716:	b2db      	uxtb	r3, r3
 8002718:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_RESET);
 800271a:	79ba      	ldrb	r2, [r7, #6]
 800271c:	491c      	ldr	r1, [pc, #112]	@ (8002790 <BMP280_Read8+0x94>)
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	79ba      	ldrb	r2, [r7, #6]
 800272c:	4918      	ldr	r1, [pc, #96]	@ (8002790 <BMP280_Read8+0x94>)
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	3304      	adds	r3, #4
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	2200      	movs	r2, #0
 800273e:	4619      	mov	r1, r3
 8002740:	f003 fe54 	bl	80063ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <BMP280_Read8+0x98>)
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	f107 020c 	add.w	r2, r7, #12
 800274c:	f107 010c 	add.w	r1, r7, #12
 8002750:	230a      	movs	r3, #10
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2302      	movs	r3, #2
 8002756:	f007 fcc4 	bl	800a0e2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_SET);
 800275a:	79ba      	ldrb	r2, [r7, #6]
 800275c:	490c      	ldr	r1, [pc, #48]	@ (8002790 <BMP280_Read8+0x94>)
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	440b      	add	r3, r1
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	79ba      	ldrb	r2, [r7, #6]
 800276c:	4908      	ldr	r1, [pc, #32]	@ (8002790 <BMP280_Read8+0x94>)
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	440b      	add	r3, r1
 8002778:	3304      	adds	r3, #4
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	2201      	movs	r2, #1
 800277e:	4619      	mov	r1, r3
 8002780:	f003 fe34 	bl	80063ec <HAL_GPIO_WritePin>
	return tmp[1];
 8002784:	7b7b      	ldrb	r3, [r7, #13]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000004 	.word	0x20000004
 8002794:	200026a0 	.word	0x200026a0

08002798 <BMP280_Read16>:
uint16_t BMP280_Read16(uint8_t addr, uint8_t index)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af02      	add	r7, sp, #8
 800279e:	4603      	mov	r3, r0
 80027a0:	460a      	mov	r2, r1
 80027a2:	71fb      	strb	r3, [r7, #7]
 80027a4:	4613      	mov	r3, r2
 80027a6:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[3];
	tmp[0] = addr;
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80027ac:	7b3b      	ldrb	r3, [r7, #12]
 80027ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_RESET);
 80027b6:	79ba      	ldrb	r2, [r7, #6]
 80027b8:	491f      	ldr	r1, [pc, #124]	@ (8002838 <BMP280_Read16+0xa0>)
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	79ba      	ldrb	r2, [r7, #6]
 80027c8:	491b      	ldr	r1, [pc, #108]	@ (8002838 <BMP280_Read16+0xa0>)
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	3304      	adds	r3, #4
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	4619      	mov	r1, r3
 80027dc:	f003 fe06 	bl	80063ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 80027e0:	4b16      	ldr	r3, [pc, #88]	@ (800283c <BMP280_Read16+0xa4>)
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	f107 020c 	add.w	r2, r7, #12
 80027e8:	f107 010c 	add.w	r1, r7, #12
 80027ec:	230a      	movs	r3, #10
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	2303      	movs	r3, #3
 80027f2:	f007 fc76 	bl	800a0e2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_SET);
 80027f6:	79ba      	ldrb	r2, [r7, #6]
 80027f8:	490f      	ldr	r1, [pc, #60]	@ (8002838 <BMP280_Read16+0xa0>)
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	440b      	add	r3, r1
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	79ba      	ldrb	r2, [r7, #6]
 8002808:	490b      	ldr	r1, [pc, #44]	@ (8002838 <BMP280_Read16+0xa0>)
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	3304      	adds	r3, #4
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	4619      	mov	r1, r3
 800281c:	f003 fde6 	bl	80063ec <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 8002820:	7b7b      	ldrb	r3, [r7, #13]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	b21a      	sxth	r2, r3
 8002826:	7bbb      	ldrb	r3, [r7, #14]
 8002828:	b21b      	sxth	r3, r3
 800282a:	4313      	orrs	r3, r2
 800282c:	b21b      	sxth	r3, r3
 800282e:	b29b      	uxth	r3, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000004 	.word	0x20000004
 800283c:	200026a0 	.word	0x200026a0

08002840 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr, uint8_t index)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	460a      	mov	r2, r1
 800284a:	71fb      	strb	r3, [r7, #7]
 800284c:	4613      	mov	r3, r2
 800284e:	71bb      	strb	r3, [r7, #6]
	uint16_t tmp;

	tmp = BMP280_Read16(addr, index);
 8002850:	79ba      	ldrb	r2, [r7, #6]
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff9e 	bl	8002798 <BMP280_Read16>
 800285c:	4603      	mov	r3, r0
 800285e:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8002860:	89fb      	ldrh	r3, [r7, #14]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	b29b      	uxth	r3, r3
 8002866:	b21a      	sxth	r2, r3
 8002868:	89fb      	ldrh	r3, [r7, #14]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	b21b      	sxth	r3, r3
 800286e:	4313      	orrs	r3, r2
 8002870:	b21b      	sxth	r3, r3
 8002872:	b29b      	uxth	r3, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <BMP280_Write8>:

void BMP280_Write8(uint8_t address, uint8_t data, uint8_t index)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af02      	add	r7, sp, #8
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
 8002886:	460b      	mov	r3, r1
 8002888:	71bb      	strb	r3, [r7, #6]
 800288a:	4613      	mov	r3, r2
 800288c:	717b      	strb	r3, [r7, #5]
	uint8_t tmp[2];
	tmp[0] = address;
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 8002892:	7b3b      	ldrb	r3, [r7, #12]
 8002894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002898:	b2db      	uxtb	r3, r3
 800289a:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 800289c:	79bb      	ldrb	r3, [r7, #6]
 800289e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_RESET);
 80028a0:	797a      	ldrb	r2, [r7, #5]
 80028a2:	491c      	ldr	r1, [pc, #112]	@ (8002914 <BMP280_Write8+0x98>)
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	797a      	ldrb	r2, [r7, #5]
 80028b2:	4918      	ldr	r1, [pc, #96]	@ (8002914 <BMP280_Write8+0x98>)
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	440b      	add	r3, r1
 80028be:	3304      	adds	r3, #4
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	2200      	movs	r2, #0
 80028c4:	4619      	mov	r1, r3
 80028c6:	f003 fd91 	bl	80063ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80028ca:	4b13      	ldr	r3, [pc, #76]	@ (8002918 <BMP280_Write8+0x9c>)
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	f107 020c 	add.w	r2, r7, #12
 80028d2:	f107 010c 	add.w	r1, r7, #12
 80028d6:	230a      	movs	r3, #10
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2302      	movs	r3, #2
 80028dc:	f007 fc01 	bl	800a0e2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_SET);
 80028e0:	797a      	ldrb	r2, [r7, #5]
 80028e2:	490c      	ldr	r1, [pc, #48]	@ (8002914 <BMP280_Write8+0x98>)
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	797a      	ldrb	r2, [r7, #5]
 80028f2:	4908      	ldr	r1, [pc, #32]	@ (8002914 <BMP280_Write8+0x98>)
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	440b      	add	r3, r1
 80028fe:	3304      	adds	r3, #4
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	2201      	movs	r2, #1
 8002904:	4619      	mov	r1, r3
 8002906:	f003 fd71 	bl	80063ec <HAL_GPIO_WritePin>
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000004 	.word	0x20000004
 8002918:	200026a0 	.word	0x200026a0

0800291c <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr, uint8_t index)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af02      	add	r7, sp, #8
 8002922:	4603      	mov	r3, r0
 8002924:	460a      	mov	r2, r1
 8002926:	71fb      	strb	r3, [r7, #7]
 8002928:	4613      	mov	r3, r2
 800292a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[4];
	tmp[0] = addr;
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8002930:	7b3b      	ldrb	r3, [r7, #12]
 8002932:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002936:	b2db      	uxtb	r3, r3
 8002938:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_RESET);
 800293a:	79ba      	ldrb	r2, [r7, #6]
 800293c:	491f      	ldr	r1, [pc, #124]	@ (80029bc <BMP280_Read24+0xa0>)
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	79ba      	ldrb	r2, [r7, #6]
 800294c:	491b      	ldr	r1, [pc, #108]	@ (80029bc <BMP280_Read24+0xa0>)
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	440b      	add	r3, r1
 8002958:	3304      	adds	r3, #4
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	4619      	mov	r1, r3
 8002960:	f003 fd44 	bl	80063ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8002964:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <BMP280_Read24+0xa4>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	f107 020c 	add.w	r2, r7, #12
 800296c:	f107 010c 	add.w	r1, r7, #12
 8002970:	230a      	movs	r3, #10
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2303      	movs	r3, #3
 8002976:	f007 fbb4 	bl	800a0e2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_SET);
 800297a:	79ba      	ldrb	r2, [r7, #6]
 800297c:	490f      	ldr	r1, [pc, #60]	@ (80029bc <BMP280_Read24+0xa0>)
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	79ba      	ldrb	r2, [r7, #6]
 800298c:	490b      	ldr	r1, [pc, #44]	@ (80029bc <BMP280_Read24+0xa0>)
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	3304      	adds	r3, #4
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	2201      	movs	r2, #1
 800299e:	4619      	mov	r1, r3
 80029a0:	f003 fd24 	bl	80063ec <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 80029a4:	7b7b      	ldrb	r3, [r7, #13]
 80029a6:	041a      	lsls	r2, r3, #16
 80029a8:	7bbb      	ldrb	r3, [r7, #14]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	4313      	orrs	r3, r2
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	4313      	orrs	r3, r2
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000004 	.word	0x20000004
 80029c0:	200026a0 	.word	0x200026a0

080029c4 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC, index);
}

uint8_t BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode, uint8_t index)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	70fb      	strb	r3, [r7, #3]
 80029d6:	460b      	mov	r3, r1
 80029d8:	70bb      	strb	r3, [r7, #2]
 80029da:	4613      	mov	r3, r2
 80029dc:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 80029de:	4aba      	ldr	r2, [pc, #744]	@ (8002cc8 <BMP280_Init+0x304>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_RESET);
 80029e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029e8:	49b8      	ldr	r1, [pc, #736]	@ (8002ccc <BMP280_Init+0x308>)
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029fa:	49b4      	ldr	r1, [pc, #720]	@ (8002ccc <BMP280_Init+0x308>)
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	3304      	adds	r3, #4
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f003 fced 	bl	80063ec <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002a12:	2005      	movs	r0, #5
 8002a14:	f002 fb66 	bl	80050e4 <HAL_Delay>
	HAL_GPIO_WritePin(sensors[index].CS_Port, sensors[index].CS_Pin, GPIO_PIN_SET);
 8002a18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a1c:	49ab      	ldr	r1, [pc, #684]	@ (8002ccc <BMP280_Init+0x308>)
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a2e:	49a7      	ldr	r1, [pc, #668]	@ (8002ccc <BMP280_Init+0x308>)
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4619      	mov	r1, r3
 8002a42:	f003 fcd3 	bl	80063ec <HAL_GPIO_WritePin>

	if (mode > BMP280_NORMALMODE)
 8002a46:	787b      	ldrb	r3, [r7, #1]
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d901      	bls.n	8002a50 <BMP280_Init+0x8c>
	    mode = BMP280_NORMALMODE;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	707b      	strb	r3, [r7, #1]
	sensors[index]._mode = mode;
 8002a50:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a54:	499d      	ldr	r1, [pc, #628]	@ (8002ccc <BMP280_Init+0x308>)
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	3308      	adds	r3, #8
 8002a62:	787a      	ldrb	r2, [r7, #1]
 8002a64:	701a      	strb	r2, [r3, #0]
	if(mode == BMP280_FORCEDMODE)
 8002a66:	787b      	ldrb	r3, [r7, #1]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <BMP280_Init+0xac>
		mode = BMP280_SLEEPMODE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	707b      	strb	r3, [r7, #1]
	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d901      	bls.n	8002a7a <BMP280_Init+0xb6>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8002a76:	2305      	movs	r3, #5
 8002a78:	70fb      	strb	r3, [r7, #3]
	sensors[index]._temperature_res = temperature_resolution;
 8002a7a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a7e:	4993      	ldr	r1, [pc, #588]	@ (8002ccc <BMP280_Init+0x308>)
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	3306      	adds	r3, #6
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	701a      	strb	r2, [r3, #0]
	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8002a90:	78bb      	ldrb	r3, [r7, #2]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d901      	bls.n	8002a9a <BMP280_Init+0xd6>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8002a96:	2305      	movs	r3, #5
 8002a98:	70bb      	strb	r3, [r7, #2]
	sensors[index]._pressure_oversampling = pressure_oversampling;
 8002a9a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a9e:	498b      	ldr	r1, [pc, #556]	@ (8002ccc <BMP280_Init+0x308>)
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3307      	adds	r3, #7
 8002aac:	78ba      	ldrb	r2, [r7, #2]
 8002aae:	701a      	strb	r2, [r3, #0]

	uint8_t loop_count = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
	while(BMP280_Read8(BMP280_CHIPID, index) != 0x58)
 8002ab4:	e002      	b.n	8002abc <BMP280_Init+0xf8>
	{
		loop_count++;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
	while(BMP280_Read8(BMP280_CHIPID, index) != 0x58)
 8002abc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	20d0      	movs	r0, #208	@ 0xd0
 8002ac4:	f7ff fe1a 	bl	80026fc <BMP280_Read8>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b58      	cmp	r3, #88	@ 0x58
 8002acc:	d1f3      	bne.n	8002ab6 <BMP280_Init+0xf2>
			return 0;
		}
	}

	/* read calibration data */
	sensors[index].t1 = BMP280_Read16LE(BMP280_DIG_T1, index);
 8002ace:	f897 4020 	ldrb.w	r4, [r7, #32]
 8002ad2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	2088      	movs	r0, #136	@ 0x88
 8002ada:	f7ff feb1 	bl	8002840 <BMP280_Read16LE>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4a7a      	ldr	r2, [pc, #488]	@ (8002ccc <BMP280_Init+0x308>)
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4423      	add	r3, r4
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	331e      	adds	r3, #30
 8002af0:	460a      	mov	r2, r1
 8002af2:	801a      	strh	r2, [r3, #0]
	sensors[index].t2 = BMP280_Read16LE(BMP280_DIG_T2, index);
 8002af4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002af8:	4619      	mov	r1, r3
 8002afa:	208a      	movs	r0, #138	@ 0x8a
 8002afc:	f7ff fea0 	bl	8002840 <BMP280_Read16LE>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b06:	b218      	sxth	r0, r3
 8002b08:	4970      	ldr	r1, [pc, #448]	@ (8002ccc <BMP280_Init+0x308>)
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	330a      	adds	r3, #10
 8002b16:	4602      	mov	r2, r0
 8002b18:	801a      	strh	r2, [r3, #0]
	sensors[index].t3 = BMP280_Read16LE(BMP280_DIG_T3, index);
 8002b1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	208c      	movs	r0, #140	@ 0x8c
 8002b22:	f7ff fe8d 	bl	8002840 <BMP280_Read16LE>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b2c:	b218      	sxth	r0, r3
 8002b2e:	4967      	ldr	r1, [pc, #412]	@ (8002ccc <BMP280_Init+0x308>)
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	801a      	strh	r2, [r3, #0]

	sensors[index].p1 = BMP280_Read16LE(BMP280_DIG_P1, index);
 8002b40:	f897 4020 	ldrb.w	r4, [r7, #32]
 8002b44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	208e      	movs	r0, #142	@ 0x8e
 8002b4c:	f7ff fe78 	bl	8002840 <BMP280_Read16LE>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4619      	mov	r1, r3
 8002b54:	4a5d      	ldr	r2, [pc, #372]	@ (8002ccc <BMP280_Init+0x308>)
 8002b56:	4623      	mov	r3, r4
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4423      	add	r3, r4
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3320      	adds	r3, #32
 8002b62:	460a      	mov	r2, r1
 8002b64:	801a      	strh	r2, [r3, #0]
	sensors[index].p2 = BMP280_Read16LE(BMP280_DIG_P2, index);
 8002b66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	2090      	movs	r0, #144	@ 0x90
 8002b6e:	f7ff fe67 	bl	8002840 <BMP280_Read16LE>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b78:	b218      	sxth	r0, r3
 8002b7a:	4954      	ldr	r1, [pc, #336]	@ (8002ccc <BMP280_Init+0x308>)
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	330e      	adds	r3, #14
 8002b88:	4602      	mov	r2, r0
 8002b8a:	801a      	strh	r2, [r3, #0]
	sensors[index].p3 = BMP280_Read16LE(BMP280_DIG_P3, index);
 8002b8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b90:	4619      	mov	r1, r3
 8002b92:	2092      	movs	r0, #146	@ 0x92
 8002b94:	f7ff fe54 	bl	8002840 <BMP280_Read16LE>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b9e:	b218      	sxth	r0, r3
 8002ba0:	494a      	ldr	r1, [pc, #296]	@ (8002ccc <BMP280_Init+0x308>)
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	3310      	adds	r3, #16
 8002bae:	4602      	mov	r2, r0
 8002bb0:	801a      	strh	r2, [r3, #0]
	sensors[index].p4 = BMP280_Read16LE(BMP280_DIG_P4, index);
 8002bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	2094      	movs	r0, #148	@ 0x94
 8002bba:	f7ff fe41 	bl	8002840 <BMP280_Read16LE>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002bc4:	b218      	sxth	r0, r3
 8002bc6:	4941      	ldr	r1, [pc, #260]	@ (8002ccc <BMP280_Init+0x308>)
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3312      	adds	r3, #18
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	801a      	strh	r2, [r3, #0]
	sensors[index].p5 = BMP280_Read16LE(BMP280_DIG_P5, index);
 8002bd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	2096      	movs	r0, #150	@ 0x96
 8002be0:	f7ff fe2e 	bl	8002840 <BMP280_Read16LE>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002bea:	b218      	sxth	r0, r3
 8002bec:	4937      	ldr	r1, [pc, #220]	@ (8002ccc <BMP280_Init+0x308>)
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3314      	adds	r3, #20
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	801a      	strh	r2, [r3, #0]
	sensors[index].p6 = BMP280_Read16LE(BMP280_DIG_P6, index);
 8002bfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c02:	4619      	mov	r1, r3
 8002c04:	2098      	movs	r0, #152	@ 0x98
 8002c06:	f7ff fe1b 	bl	8002840 <BMP280_Read16LE>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c10:	b218      	sxth	r0, r3
 8002c12:	492e      	ldr	r1, [pc, #184]	@ (8002ccc <BMP280_Init+0x308>)
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3316      	adds	r3, #22
 8002c20:	4602      	mov	r2, r0
 8002c22:	801a      	strh	r2, [r3, #0]
	sensors[index].p7 = BMP280_Read16LE(BMP280_DIG_P7, index);
 8002c24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	209a      	movs	r0, #154	@ 0x9a
 8002c2c:	f7ff fe08 	bl	8002840 <BMP280_Read16LE>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c36:	b218      	sxth	r0, r3
 8002c38:	4924      	ldr	r1, [pc, #144]	@ (8002ccc <BMP280_Init+0x308>)
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	3318      	adds	r3, #24
 8002c46:	4602      	mov	r2, r0
 8002c48:	801a      	strh	r2, [r3, #0]
	sensors[index].p8 = BMP280_Read16LE(BMP280_DIG_P8, index);
 8002c4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	209c      	movs	r0, #156	@ 0x9c
 8002c52:	f7ff fdf5 	bl	8002840 <BMP280_Read16LE>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c5c:	b218      	sxth	r0, r3
 8002c5e:	491b      	ldr	r1, [pc, #108]	@ (8002ccc <BMP280_Init+0x308>)
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	440b      	add	r3, r1
 8002c6a:	331a      	adds	r3, #26
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	801a      	strh	r2, [r3, #0]
	sensors[index].p9 = BMP280_Read16LE(BMP280_DIG_P9, index);
 8002c70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c74:	4619      	mov	r1, r3
 8002c76:	209e      	movs	r0, #158	@ 0x9e
 8002c78:	f7ff fde2 	bl	8002840 <BMP280_Read16LE>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c82:	b218      	sxth	r0, r3
 8002c84:	4911      	ldr	r1, [pc, #68]	@ (8002ccc <BMP280_Init+0x308>)
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	331c      	adds	r3, #28
 8002c92:	4602      	mov	r2, r0
 8002c94:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode), index);
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	015b      	lsls	r3, r3, #5
 8002c9a:	b25a      	sxtb	r2, r3
 8002c9c:	78bb      	ldrb	r3, [r7, #2]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	b25b      	sxtb	r3, r3
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	b25a      	sxtb	r2, r3
 8002ca6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	20f4      	movs	r0, #244	@ 0xf4
 8002cb8:	f7ff fde0 	bl	800287c <BMP280_Write8>
	return 1;
 8002cbc:	2301      	movs	r3, #1
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd90      	pop	{r4, r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200026a0 	.word	0x200026a0
 8002ccc:	20000004 	.word	0x20000004

08002cd0 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(uint8_t index)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b089      	sub	sp, #36	@ 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  int32_t var1, var2;

  if(sensors[index]._mode == BMP280_FORCEDMODE)
 8002cda:	79fa      	ldrb	r2, [r7, #7]
 8002cdc:	495e      	ldr	r1, [pc, #376]	@ (8002e58 <BMP280_ReadTemperature+0x188>)
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3308      	adds	r3, #8
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	f040 80a9 	bne.w	8002e44 <BMP280_ReadTemperature+0x174>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL, index);
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	20f4      	movs	r0, #244	@ 0xf4
 8002cf8:	f7ff fd00 	bl	80026fc <BMP280_Read8>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	77fb      	strb	r3, [r7, #31]
	  ctrl &= ~(0x03);
 8002d00:	7ffb      	ldrb	r3, [r7, #31]
 8002d02:	f023 0303 	bic.w	r3, r3, #3
 8002d06:	77fb      	strb	r3, [r7, #31]
	  ctrl |= BMP280_FORCEDMODE;
 8002d08:	7ffb      	ldrb	r3, [r7, #31]
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	77fb      	strb	r3, [r7, #31]
	  BMP280_Write8(BMP280_CONTROL, ctrl, index);
 8002d10:	79fa      	ldrb	r2, [r7, #7]
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	4619      	mov	r1, r3
 8002d16:	20f4      	movs	r0, #244	@ 0xf4
 8002d18:	f7ff fdb0 	bl	800287c <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL, index); 	// Read written mode
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	20f4      	movs	r0, #244	@ 0xf4
 8002d22:	f7ff fceb 	bl	80026fc <BMP280_Read8>
 8002d26:	4603      	mov	r3, r0
 8002d28:	77bb      	strb	r3, [r7, #30]
	  mode &= 0x03;							// Do not work without it...
 8002d2a:	7fbb      	ldrb	r3, [r7, #30]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	77bb      	strb	r3, [r7, #30]

	  if(mode == BMP280_FORCEDMODE)
 8002d32:	7fbb      	ldrb	r3, [r7, #30]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	f040 8085 	bne.w	8002e44 <BMP280_ReadTemperature+0x174>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL, index);
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	20f4      	movs	r0, #244	@ 0xf4
 8002d40:	f7ff fcdc 	bl	80026fc <BMP280_Read8>
 8002d44:	4603      	mov	r3, r0
 8002d46:	77bb      	strb	r3, [r7, #30]
			  mode &= 0x03;
 8002d48:	7fbb      	ldrb	r3, [r7, #30]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	77bb      	strb	r3, [r7, #30]
			  if(mode == BMP280_SLEEPMODE)
 8002d50:	7fbb      	ldrb	r3, [r7, #30]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d000      	beq.n	8002d58 <BMP280_ReadTemperature+0x88>
			  mode = BMP280_Read8(BMP280_CONTROL, index);
 8002d56:	e7f0      	b.n	8002d3a <BMP280_ReadTemperature+0x6a>
				  break;
 8002d58:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA, index);
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	20fa      	movs	r0, #250	@ 0xfa
 8002d60:	f7ff fddc 	bl	800291c <BMP280_Read24>
 8002d64:	4603      	mov	r3, r0
 8002d66:	61bb      	str	r3, [r7, #24]
		  adc_T >>= 4;
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	111b      	asrs	r3, r3, #4
 8002d6c:	61bb      	str	r3, [r7, #24]

		  var1  = ((((adc_T>>3) - ((int32_t)sensors[index].t1 <<1))) *
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	10d9      	asrs	r1, r3, #3
 8002d72:	79fa      	ldrb	r2, [r7, #7]
 8002d74:	4838      	ldr	r0, [pc, #224]	@ (8002e58 <BMP280_ReadTemperature+0x188>)
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4403      	add	r3, r0
 8002d80:	331e      	adds	r3, #30
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	1ac9      	subs	r1, r1, r3
				  ((int32_t)sensors[index].t2)) >> 11;
 8002d88:	79fa      	ldrb	r2, [r7, #7]
 8002d8a:	4833      	ldr	r0, [pc, #204]	@ (8002e58 <BMP280_ReadTemperature+0x188>)
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4403      	add	r3, r0
 8002d96:	330a      	adds	r3, #10
 8002d98:	f9b3 3000 	ldrsh.w	r3, [r3]
		  var1  = ((((adc_T>>3) - ((int32_t)sensors[index].t1 <<1))) *
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	12db      	asrs	r3, r3, #11
 8002da2:	617b      	str	r3, [r7, #20]

		  var2  = (((((adc_T>>4) - ((int32_t)sensors[index].t1)) *
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	1119      	asrs	r1, r3, #4
 8002da8:	79fa      	ldrb	r2, [r7, #7]
 8002daa:	482b      	ldr	r0, [pc, #172]	@ (8002e58 <BMP280_ReadTemperature+0x188>)
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4403      	add	r3, r0
 8002db6:	331e      	adds	r3, #30
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	1ac9      	subs	r1, r1, r3
				  ((adc_T>>4) - ((int32_t)sensors[index].t1))) >> 12) *
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	1118      	asrs	r0, r3, #4
 8002dc0:	79fa      	ldrb	r2, [r7, #7]
 8002dc2:	4c25      	ldr	r4, [pc, #148]	@ (8002e58 <BMP280_ReadTemperature+0x188>)
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4423      	add	r3, r4
 8002dce:	331e      	adds	r3, #30
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	1ac3      	subs	r3, r0, r3
		  var2  = (((((adc_T>>4) - ((int32_t)sensors[index].t1)) *
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
				  ((adc_T>>4) - ((int32_t)sensors[index].t1))) >> 12) *
 8002dd8:	1319      	asrs	r1, r3, #12
				  ((int32_t)sensors[index].t3)) >> 14;
 8002dda:	79fa      	ldrb	r2, [r7, #7]
 8002ddc:	481e      	ldr	r0, [pc, #120]	@ (8002e58 <BMP280_ReadTemperature+0x188>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4403      	add	r3, r0
 8002de8:	330c      	adds	r3, #12
 8002dea:	f9b3 3000 	ldrsh.w	r3, [r3]
				  ((adc_T>>4) - ((int32_t)sensors[index].t1))) >> 12) *
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
		  var2  = (((((adc_T>>4) - ((int32_t)sensors[index].t1)) *
 8002df2:	139b      	asrs	r3, r3, #14
 8002df4:	613b      	str	r3, [r7, #16]

		  sensors[index].t_fine = var1 + var2;
 8002df6:	79fa      	ldrb	r2, [r7, #7]
 8002df8:	6979      	ldr	r1, [r7, #20]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4419      	add	r1, r3
 8002dfe:	4816      	ldr	r0, [pc, #88]	@ (8002e58 <BMP280_ReadTemperature+0x188>)
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4403      	add	r3, r0
 8002e0a:	3324      	adds	r3, #36	@ 0x24
 8002e0c:	6019      	str	r1, [r3, #0]

		  float T  = (sensors[index].t_fine * 5 + 128) >> 8;
 8002e0e:	79fa      	ldrb	r2, [r7, #7]
 8002e10:	4911      	ldr	r1, [pc, #68]	@ (8002e58 <BMP280_ReadTemperature+0x188>)
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	440b      	add	r3, r1
 8002e1c:	3324      	adds	r3, #36	@ 0x24
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	3380      	adds	r3, #128	@ 0x80
 8002e28:	121b      	asrs	r3, r3, #8
 8002e2a:	ee07 3a90 	vmov	s15, r3
 8002e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e32:	edc7 7a03 	vstr	s15, [r7, #12]
		  return T/100;
 8002e36:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e3a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002e5c <BMP280_ReadTemperature+0x18c>
 8002e3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e42:	e001      	b.n	8002e48 <BMP280_ReadTemperature+0x178>
	  }
  }

  return -99;
 8002e44:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002e60 <BMP280_ReadTemperature+0x190>
}
 8002e48:	eef0 7a47 	vmov.f32	s15, s14
 8002e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e50:	3724      	adds	r7, #36	@ 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd90      	pop	{r4, r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000004 	.word	0x20000004
 8002e5c:	42c80000 	.word	0x42c80000
 8002e60:	c2c60000 	.word	0xc2c60000

08002e64 <BMP280_ReadTemperatureAndPressure>:


uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure, uint8_t index)
{
 8002e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e68:	b0ce      	sub	sp, #312	@ 0x138
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8002e70:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8002e74:	4613      	mov	r3, r2
 8002e76:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature(index);
 8002e7a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ff26 	bl	8002cd0 <BMP280_ReadTemperature>
 8002e84:	eef0 7a40 	vmov.f32	s15, s0
 8002e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8c:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8002e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 80031e0 <BMP280_ReadTemperatureAndPressure+0x37c>
 8002e9c:	eef4 7a47 	vcmp.f32	s15, s14
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	d101      	bne.n	8002eaa <BMP280_ReadTemperatureAndPressure+0x46>
		  return -1;
 8002ea6:	23ff      	movs	r3, #255	@ 0xff
 8002ea8:	e307      	b.n	80034ba <BMP280_ReadTemperatureAndPressure+0x656>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA, index);
 8002eaa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002eae:	4619      	mov	r1, r3
 8002eb0:	20f7      	movs	r0, #247	@ 0xf7
 8002eb2:	f7ff fd33 	bl	800291c <BMP280_Read24>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	  adc_P >>= 4;
 8002ebc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002ec0:	111b      	asrs	r3, r3, #4
 8002ec2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

	  var1 = ((int64_t)sensors[index].t_fine) - 128000;
 8002ec6:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8002eca:	49c6      	ldr	r1, [pc, #792]	@ (80031e4 <BMP280_ReadTemperatureAndPressure+0x380>)
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3324      	adds	r3, #36	@ 0x24
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	17da      	asrs	r2, r3, #31
 8002edc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ee0:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002ee4:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002ee8:	460b      	mov	r3, r1
 8002eea:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8002eee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ef8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002efc:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	  var2 = var1 * var1 * (int64_t)sensors[index].p6;
 8002f00:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002f04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f08:	fb03 f102 	mul.w	r1, r3, r2
 8002f0c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002f10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
 8002f18:	18ca      	adds	r2, r1, r3
 8002f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f1e:	fba3 4503 	umull	r4, r5, r3, r3
 8002f22:	1953      	adds	r3, r2, r5
 8002f24:	461d      	mov	r5, r3
 8002f26:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8002f2a:	49ae      	ldr	r1, [pc, #696]	@ (80031e4 <BMP280_ReadTemperatureAndPressure+0x380>)
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	3316      	adds	r3, #22
 8002f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f3c:	b21b      	sxth	r3, r3
 8002f3e:	17da      	asrs	r2, r3, #31
 8002f40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f48:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	fb03 f205 	mul.w	r2, r3, r5
 8002f52:	460b      	mov	r3, r1
 8002f54:	fb04 f303 	mul.w	r3, r4, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	fba4 8902 	umull	r8, r9, r4, r2
 8002f60:	444b      	add	r3, r9
 8002f62:	4699      	mov	r9, r3
 8002f64:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
 8002f68:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
	  var2 = var2 + ((var1*(int64_t)sensors[index].p5)<<17);
 8002f6c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8002f70:	499c      	ldr	r1, [pc, #624]	@ (80031e4 <BMP280_ReadTemperatureAndPressure+0x380>)
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3314      	adds	r3, #20
 8002f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f82:	b21b      	sxth	r3, r3
 8002f84:	17da      	asrs	r2, r3, #31
 8002f86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f8a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f92:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8002f96:	462a      	mov	r2, r5
 8002f98:	fb02 f203 	mul.w	r2, r2, r3
 8002f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	441a      	add	r2, r3
 8002fa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002fac:	4621      	mov	r1, r4
 8002fae:	fba3 ab01 	umull	sl, fp, r3, r1
 8002fb2:	eb02 030b 	add.w	r3, r2, fp
 8002fb6:	469b      	mov	fp, r3
 8002fb8:	f04f 0000 	mov.w	r0, #0
 8002fbc:	f04f 0100 	mov.w	r1, #0
 8002fc0:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8002fc4:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8002fc8:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8002fcc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002fd0:	1814      	adds	r4, r2, r0
 8002fd2:	643c      	str	r4, [r7, #64]	@ 0x40
 8002fd4:	414b      	adcs	r3, r1
 8002fd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fd8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002fdc:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var2 = var2 + (((int64_t)sensors[index].p4)<<35);
 8002fe0:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8002fe4:	497f      	ldr	r1, [pc, #508]	@ (80031e4 <BMP280_ReadTemperatureAndPressure+0x380>)
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	3312      	adds	r3, #18
 8002ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff6:	b21b      	sxth	r3, r3
 8002ff8:	17da      	asrs	r2, r3, #31
 8002ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ffe:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003002:	f04f 0000 	mov.w	r0, #0
 8003006:	f04f 0100 	mov.w	r1, #0
 800300a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800300e:	00d9      	lsls	r1, r3, #3
 8003010:	2000      	movs	r0, #0
 8003012:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003016:	1814      	adds	r4, r2, r0
 8003018:	63bc      	str	r4, [r7, #56]	@ 0x38
 800301a:	414b      	adcs	r3, r1
 800301c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800301e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003022:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var1 = ((var1 * var1 * (int64_t)sensors[index].p3)>>8) +
 8003026:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800302a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800302e:	fb03 f102 	mul.w	r1, r3, r2
 8003032:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8003036:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	18ca      	adds	r2, r1, r3
 8003040:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003044:	fba3 1303 	umull	r1, r3, r3, r3
 8003048:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800304c:	460b      	mov	r3, r1
 800304e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003056:	18d3      	adds	r3, r2, r3
 8003058:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800305c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8003060:	4960      	ldr	r1, [pc, #384]	@ (80031e4 <BMP280_ReadTemperatureAndPressure+0x380>)
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	440b      	add	r3, r1
 800306c:	3310      	adds	r3, #16
 800306e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003072:	b21b      	sxth	r3, r3
 8003074:	17da      	asrs	r2, r3, #31
 8003076:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800307a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800307e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8003082:	462b      	mov	r3, r5
 8003084:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8003088:	4642      	mov	r2, r8
 800308a:	fb02 f203 	mul.w	r2, r2, r3
 800308e:	464b      	mov	r3, r9
 8003090:	4621      	mov	r1, r4
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	4622      	mov	r2, r4
 800309a:	4641      	mov	r1, r8
 800309c:	fba2 1201 	umull	r1, r2, r2, r1
 80030a0:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80030a4:	460a      	mov	r2, r1
 80030a6:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80030aa:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80030ae:	4413      	add	r3, r2
 80030b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80030c0:	4623      	mov	r3, r4
 80030c2:	0a18      	lsrs	r0, r3, #8
 80030c4:	462b      	mov	r3, r5
 80030c6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80030ca:	462b      	mov	r3, r5
 80030cc:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)sensors[index].p2)<<12);
 80030ce:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80030d2:	4c44      	ldr	r4, [pc, #272]	@ (80031e4 <BMP280_ReadTemperatureAndPressure+0x380>)
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4423      	add	r3, r4
 80030de:	330e      	adds	r3, #14
 80030e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	17da      	asrs	r2, r3, #31
 80030e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030ec:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80030f4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030f8:	464a      	mov	r2, r9
 80030fa:	fb02 f203 	mul.w	r2, r2, r3
 80030fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003102:	4644      	mov	r4, r8
 8003104:	fb04 f303 	mul.w	r3, r4, r3
 8003108:	441a      	add	r2, r3
 800310a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800310e:	4644      	mov	r4, r8
 8003110:	fba3 4304 	umull	r4, r3, r3, r4
 8003114:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003118:	4623      	mov	r3, r4
 800311a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003122:	18d3      	adds	r3, r2, r3
 8003124:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8003134:	464c      	mov	r4, r9
 8003136:	0323      	lsls	r3, r4, #12
 8003138:	4644      	mov	r4, r8
 800313a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800313e:	4644      	mov	r4, r8
 8003140:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)sensors[index].p3)>>8) +
 8003142:	1884      	adds	r4, r0, r2
 8003144:	633c      	str	r4, [r7, #48]	@ 0x30
 8003146:	eb41 0303 	adc.w	r3, r1, r3
 800314a:	637b      	str	r3, [r7, #52]	@ 0x34
 800314c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003150:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)sensors[index].p1)>>33;
 8003154:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8003158:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800315c:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8003160:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8003164:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8003168:	491e      	ldr	r1, [pc, #120]	@ (80031e4 <BMP280_ReadTemperatureAndPressure+0x380>)
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	3320      	adds	r3, #32
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	b29b      	uxth	r3, r3
 800317a:	2200      	movs	r2, #0
 800317c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003180:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003184:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003188:	462b      	mov	r3, r5
 800318a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800318e:	4642      	mov	r2, r8
 8003190:	fb02 f203 	mul.w	r2, r2, r3
 8003194:	464b      	mov	r3, r9
 8003196:	4621      	mov	r1, r4
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	4622      	mov	r2, r4
 80031a0:	4641      	mov	r1, r8
 80031a2:	fba2 1201 	umull	r1, r2, r2, r1
 80031a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031aa:	460a      	mov	r2, r1
 80031ac:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80031b0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80031b4:	4413      	add	r3, r2
 80031b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031c6:	4629      	mov	r1, r5
 80031c8:	104a      	asrs	r2, r1, #1
 80031ca:	4629      	mov	r1, r5
 80031cc:	17cb      	asrs	r3, r1, #31
 80031ce:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	  if (var1 == 0) {
 80031d2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80031d6:	4313      	orrs	r3, r2
 80031d8:	d106      	bne.n	80031e8 <BMP280_ReadTemperatureAndPressure+0x384>
	    return 0;  // avoid exception caused by division by zero
 80031da:	2300      	movs	r3, #0
 80031dc:	e16d      	b.n	80034ba <BMP280_ReadTemperatureAndPressure+0x656>
 80031de:	bf00      	nop
 80031e0:	c2c60000 	.word	0xc2c60000
 80031e4:	20000004 	.word	0x20000004
	  }
	  p = 1048576 - adc_P;
 80031e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80031ec:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80031f0:	17da      	asrs	r2, r3, #31
 80031f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031f6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80031fa:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  p = (((p<<31) - var2)*3125) / var1;
 80031fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003202:	105b      	asrs	r3, r3, #1
 8003204:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003208:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800320c:	07db      	lsls	r3, r3, #31
 800320e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003212:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003216:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800321a:	4621      	mov	r1, r4
 800321c:	1a89      	subs	r1, r1, r2
 800321e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8003222:	4629      	mov	r1, r5
 8003224:	eb61 0303 	sbc.w	r3, r1, r3
 8003228:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800322c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8003230:	4622      	mov	r2, r4
 8003232:	462b      	mov	r3, r5
 8003234:	1891      	adds	r1, r2, r2
 8003236:	6239      	str	r1, [r7, #32]
 8003238:	415b      	adcs	r3, r3
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
 800323c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003240:	4621      	mov	r1, r4
 8003242:	1851      	adds	r1, r2, r1
 8003244:	61b9      	str	r1, [r7, #24]
 8003246:	4629      	mov	r1, r5
 8003248:	414b      	adcs	r3, r1
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003258:	4649      	mov	r1, r9
 800325a:	018b      	lsls	r3, r1, #6
 800325c:	4641      	mov	r1, r8
 800325e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003262:	4641      	mov	r1, r8
 8003264:	018a      	lsls	r2, r1, #6
 8003266:	4641      	mov	r1, r8
 8003268:	1889      	adds	r1, r1, r2
 800326a:	6139      	str	r1, [r7, #16]
 800326c:	4649      	mov	r1, r9
 800326e:	eb43 0101 	adc.w	r1, r3, r1
 8003272:	6179      	str	r1, [r7, #20]
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003280:	4649      	mov	r1, r9
 8003282:	008b      	lsls	r3, r1, #2
 8003284:	4641      	mov	r1, r8
 8003286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800328a:	4641      	mov	r1, r8
 800328c:	008a      	lsls	r2, r1, #2
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	4603      	mov	r3, r0
 8003294:	4622      	mov	r2, r4
 8003296:	189b      	adds	r3, r3, r2
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	460b      	mov	r3, r1
 800329c:	462a      	mov	r2, r5
 800329e:	eb42 0303 	adc.w	r3, r2, r3
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80032b0:	4649      	mov	r1, r9
 80032b2:	008b      	lsls	r3, r1, #2
 80032b4:	4641      	mov	r1, r8
 80032b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ba:	4641      	mov	r1, r8
 80032bc:	008a      	lsls	r2, r1, #2
 80032be:	4610      	mov	r0, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	4603      	mov	r3, r0
 80032c4:	4622      	mov	r2, r4
 80032c6:	189b      	adds	r3, r3, r2
 80032c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032ca:	462b      	mov	r3, r5
 80032cc:	460a      	mov	r2, r1
 80032ce:	eb42 0303 	adc.w	r3, r2, r3
 80032d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032d4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80032d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80032dc:	f7fd fcdc 	bl	8000c98 <__aeabi_ldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	  var1 = (((int64_t)sensors[index].p9) * (p>>13) * (p>>13)) >> 25;
 80032e8:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80032ec:	4976      	ldr	r1, [pc, #472]	@ (80034c8 <BMP280_ReadTemperatureAndPressure+0x664>)
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	331c      	adds	r3, #28
 80032fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032fe:	b21b      	sxth	r3, r3
 8003300:	17da      	asrs	r2, r3, #31
 8003302:	673b      	str	r3, [r7, #112]	@ 0x70
 8003304:	677a      	str	r2, [r7, #116]	@ 0x74
 8003306:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800330a:	f04f 0000 	mov.w	r0, #0
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	0b50      	lsrs	r0, r2, #13
 8003314:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003318:	1359      	asrs	r1, r3, #13
 800331a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800331e:	462b      	mov	r3, r5
 8003320:	fb00 f203 	mul.w	r2, r0, r3
 8003324:	4623      	mov	r3, r4
 8003326:	fb03 f301 	mul.w	r3, r3, r1
 800332a:	4413      	add	r3, r2
 800332c:	4622      	mov	r2, r4
 800332e:	fba2 1200 	umull	r1, r2, r2, r0
 8003332:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8003336:	460a      	mov	r2, r1
 8003338:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800333c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003340:	4413      	add	r3, r2
 8003342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003346:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800334a:	f04f 0000 	mov.w	r0, #0
 800334e:	f04f 0100 	mov.w	r1, #0
 8003352:	0b50      	lsrs	r0, r2, #13
 8003354:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003358:	1359      	asrs	r1, r3, #13
 800335a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800335e:	462b      	mov	r3, r5
 8003360:	fb00 f203 	mul.w	r2, r0, r3
 8003364:	4623      	mov	r3, r4
 8003366:	fb03 f301 	mul.w	r3, r3, r1
 800336a:	4413      	add	r3, r2
 800336c:	4622      	mov	r2, r4
 800336e:	fba2 1200 	umull	r1, r2, r2, r0
 8003372:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003376:	460a      	mov	r2, r1
 8003378:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800337c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003380:	4413      	add	r3, r2
 8003382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8003392:	4621      	mov	r1, r4
 8003394:	0e4a      	lsrs	r2, r1, #25
 8003396:	4629      	mov	r1, r5
 8003398:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800339c:	4629      	mov	r1, r5
 800339e:	164b      	asrs	r3, r1, #25
 80033a0:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	  var2 = (((int64_t)sensors[index].p8) * p) >> 19;
 80033a4:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80033a8:	4947      	ldr	r1, [pc, #284]	@ (80034c8 <BMP280_ReadTemperatureAndPressure+0x664>)
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	440b      	add	r3, r1
 80033b4:	331a      	adds	r3, #26
 80033b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	17da      	asrs	r2, r3, #31
 80033be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033c0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80033c6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80033ca:	462a      	mov	r2, r5
 80033cc:	fb02 f203 	mul.w	r2, r2, r3
 80033d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033d4:	4621      	mov	r1, r4
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80033e0:	4621      	mov	r1, r4
 80033e2:	fba2 1201 	umull	r1, r2, r2, r1
 80033e6:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033ea:	460a      	mov	r2, r1
 80033ec:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80033f0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80033f4:	4413      	add	r3, r2
 80033f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8003406:	4621      	mov	r1, r4
 8003408:	0cca      	lsrs	r2, r1, #19
 800340a:	4629      	mov	r1, r5
 800340c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003410:	4629      	mov	r1, r5
 8003412:	14cb      	asrs	r3, r1, #19
 8003414:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	  p = ((p + var1 + var2) >> 8) + (((int64_t)sensors[index].p7)<<4);
 8003418:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800341c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8003420:	1884      	adds	r4, r0, r2
 8003422:	663c      	str	r4, [r7, #96]	@ 0x60
 8003424:	eb41 0303 	adc.w	r3, r1, r3
 8003428:	667b      	str	r3, [r7, #100]	@ 0x64
 800342a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800342e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003432:	4621      	mov	r1, r4
 8003434:	1889      	adds	r1, r1, r2
 8003436:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003438:	4629      	mov	r1, r5
 800343a:	eb43 0101 	adc.w	r1, r3, r1
 800343e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8003440:	f04f 0000 	mov.w	r0, #0
 8003444:	f04f 0100 	mov.w	r1, #0
 8003448:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800344c:	4623      	mov	r3, r4
 800344e:	0a18      	lsrs	r0, r3, #8
 8003450:	462b      	mov	r3, r5
 8003452:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003456:	462b      	mov	r3, r5
 8003458:	1219      	asrs	r1, r3, #8
 800345a:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 800345e:	4c1a      	ldr	r4, [pc, #104]	@ (80034c8 <BMP280_ReadTemperatureAndPressure+0x664>)
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4423      	add	r3, r4
 800346a:	3318      	adds	r3, #24
 800346c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003470:	b21b      	sxth	r3, r3
 8003472:	17da      	asrs	r2, r3, #31
 8003474:	653b      	str	r3, [r7, #80]	@ 0x50
 8003476:	657a      	str	r2, [r7, #84]	@ 0x54
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003484:	464c      	mov	r4, r9
 8003486:	0123      	lsls	r3, r4, #4
 8003488:	4644      	mov	r4, r8
 800348a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800348e:	4644      	mov	r4, r8
 8003490:	0122      	lsls	r2, r4, #4
 8003492:	1884      	adds	r4, r0, r2
 8003494:	603c      	str	r4, [r7, #0]
 8003496:	eb41 0303 	adc.w	r3, r1, r3
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	e9d7 3400 	ldrd	r3, r4, [r7]
 80034a0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  *pressure = (int32_t)p/256;
 80034a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	da00      	bge.n	80034ae <BMP280_ReadTemperatureAndPressure+0x64a>
 80034ac:	33ff      	adds	r3, #255	@ 0xff
 80034ae:	121b      	asrs	r3, r3, #8
 80034b0:	461a      	mov	r2, r3
 80034b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80034b6:	601a      	str	r2, [r3, #0]

	  return 0;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80034c0:	46bd      	mov	sp, r7
 80034c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034c6:	bf00      	nop
 80034c8:	20000004 	.word	0x20000004

080034cc <Read16>:
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @param:		register address in hexadecimal
 * @retval:		16 bit unsigned integer that represents the register's contents.
 */
uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af04      	add	r7, sp, #16
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	b29a      	uxth	r2, r3
 80034e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034e4:	9302      	str	r3, [sp, #8]
 80034e6:	2302      	movs	r3, #2
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	f107 030c 	add.w	r3, r7, #12
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	2301      	movs	r3, #1
 80034f2:	2180      	movs	r1, #128	@ 0x80
 80034f4:	f003 fd1a 	bl	8006f2c <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 80034f8:	7b3b      	ldrb	r3, [r7, #12]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	b21a      	sxth	r2, r3
 80034fe:	7b7b      	ldrb	r3, [r7, #13]
 8003500:	b21b      	sxth	r3, r3
 8003502:	4313      	orrs	r3, r2
 8003504:	b21b      	sxth	r3, r3
 8003506:	b29b      	uxth	r3, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <Write16>:
				  HAL_BUSY     = 0x02U,
				  HAL_TIMEOUT  = 0x03U
				} HAL_StatusTypeDef;
 */
HAL_StatusTypeDef Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af04      	add	r7, sp, #16
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	70fb      	strb	r3, [r7, #3]
 800351c:	4613      	mov	r3, r2
 800351e:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8003520:	883b      	ldrh	r3, [r7, #0]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	b29b      	uxth	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 800352a:	883b      	ldrh	r3, [r7, #0]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	b29a      	uxth	r2, r3
 8003538:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800353c:	9302      	str	r3, [sp, #8]
 800353e:	2302      	movs	r3, #2
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	f107 030c 	add.w	r3, r7, #12
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2301      	movs	r3, #1
 800354a:	2180      	movs	r1, #128	@ 0x80
 800354c:	f003 fbf4 	bl	8006d38 <HAL_I2C_Mem_Write>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <INA219_ReadBusVoltage>:
 * @brief: 		This function will read the battery voltage level being read.
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:		Returns voltage level in mili-volts
 */
uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8003562:	2102      	movs	r1, #2
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ffb1 	bl	80034cc <Read16>
 800356a:	4603      	mov	r3, r0
 800356c:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 800356e:	89fb      	ldrh	r3, [r7, #14]
 8003570:	08db      	lsrs	r3, r3, #3
 8003572:	b29b      	uxth	r3, r3
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	b29b      	uxth	r3, r3

}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <INA219_ReadCurrent_raw>:
 *  @brief:	  	Gets the raw current value (16-bit signed integer, so +-32767)
 *  @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 *  @retval:	The raw current reading
 */
int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8003588:	2104      	movs	r1, #4
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ff9e 	bl	80034cc <Read16>
 8003590:	4603      	mov	r3, r0
 8003592:	81fb      	strh	r3, [r7, #14]

	return (result );
 8003594:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <INA219_ReadPower>:
 * 			Power multiplier is initialize in the calibration function.
 * @param:	Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:	Returns power level in mili-watts
 */
uint16_t INA219_ReadPower(INA219_t *ina219)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_POWER );
 80035a8:	2103      	movs	r1, #3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ff8e 	bl	80034cc <Read16>
 80035b0:	4603      	mov	r3, r0
 80035b2:	81fb      	strh	r3, [r7, #14]
	result = result * ina219_powerMultiplier_mW; // power is the power register times the power_LSB (power multiplier)
 80035b4:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <INA219_ReadPower+0x30>)
 80035b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	89fa      	ldrh	r2, [r7, #14]
 80035be:	fb12 f303 	smulbb	r3, r2, r3
 80035c2:	81fb      	strh	r3, [r7, #14]
	return (result);
 80035c4:	89fb      	ldrh	r3, [r7, #14]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200026aa 	.word	0x200026aa

080035d4 <INA219_HealthCheck>:
 * 				the program that called the health check function what state our battery is
 * 				at and whether we have entered a "LOW" state. This way the program can take
 * 				appropriate action.
 */
enum BatteryState INA219_HealthCheck(INA219_t *ina219,float batteryPercentageThreshold,float batteryPercentage)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80035e0:	edc7 0a01 	vstr	s1, [r7, #4]
	switch(batteryState)
 80035e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003660 <INA219_HealthCheck+0x8c>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d01b      	beq.n	8003624 <INA219_HealthCheck+0x50>
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	dc2a      	bgt.n	8003646 <INA219_HealthCheck+0x72>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <INA219_HealthCheck+0x26>
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d004      	beq.n	8003602 <INA219_HealthCheck+0x2e>
 80035f8:	e025      	b.n	8003646 <INA219_HealthCheck+0x72>
	{
		case (Battery_START):
			/* Enter your start up functionality here */
			batteryState = Battery_OK;
 80035fa:	4b19      	ldr	r3, [pc, #100]	@ (8003660 <INA219_HealthCheck+0x8c>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
			break;
 8003600:	e025      	b.n	800364e <INA219_HealthCheck+0x7a>
		case (Battery_OK):
			/* Enter your battery OK state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8003602:	ed97 7a01 	vldr	s14, [r7, #4]
 8003606:	edd7 7a02 	vldr	s15, [r7, #8]
 800360a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800360e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003612:	dd03      	ble.n	800361c <INA219_HealthCheck+0x48>
			{
				batteryState = Battery_OK;
 8003614:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <INA219_HealthCheck+0x8c>)
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 800361a:	e018      	b.n	800364e <INA219_HealthCheck+0x7a>
				 batteryState = Battery_LOW;
 800361c:	4b10      	ldr	r3, [pc, #64]	@ (8003660 <INA219_HealthCheck+0x8c>)
 800361e:	2202      	movs	r2, #2
 8003620:	701a      	strb	r2, [r3, #0]
			break;
 8003622:	e014      	b.n	800364e <INA219_HealthCheck+0x7a>
		case (Battery_LOW):
			/* Enter your battery LOW state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8003624:	ed97 7a01 	vldr	s14, [r7, #4]
 8003628:	edd7 7a02 	vldr	s15, [r7, #8]
 800362c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003634:	dd03      	ble.n	800363e <INA219_HealthCheck+0x6a>
			{
				batteryState = Battery_OK;
 8003636:	4b0a      	ldr	r3, [pc, #40]	@ (8003660 <INA219_HealthCheck+0x8c>)
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 800363c:	e007      	b.n	800364e <INA219_HealthCheck+0x7a>
				 batteryState = Battery_LOW;
 800363e:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <INA219_HealthCheck+0x8c>)
 8003640:	2202      	movs	r2, #2
 8003642:	701a      	strb	r2, [r3, #0]
			break;
 8003644:	e003      	b.n	800364e <INA219_HealthCheck+0x7a>
		default:
			/*
			 * If program encounters a bug or a value outside what is expected we go here.
			 * Feel free to add functionality if needed.
			*/
			batteryState = Battery_START;
 8003646:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <INA219_HealthCheck+0x8c>)
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
			break;
 800364c:	bf00      	nop
	}
	return batteryState;
 800364e:	4b04      	ldr	r3, [pc, #16]	@ (8003660 <INA219_HealthCheck+0x8c>)
 8003650:	781b      	ldrb	r3, [r3, #0]

}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	200026a4 	.word	0x200026a4

08003664 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 800366c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003670:	2100      	movs	r1, #0
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff ff4c 	bl	8003510 <Write16>
	HAL_Delay(1);
 8003678:	2001      	movs	r0, #1
 800367a:	f001 fd33 	bl	80050e4 <HAL_Delay>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	460b      	mov	r3, r1
 8003690:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8003692:	887b      	ldrh	r3, [r7, #2]
 8003694:	461a      	mov	r2, r3
 8003696:	2105      	movs	r1, #5
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ff39 	bl	8003510 <Write16>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	460b      	mov	r3, r1
 80036b0:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 80036b2:	887b      	ldrh	r3, [r7, #2]
 80036b4:	461a      	mov	r2, r3
 80036b6:	2100      	movs	r1, #0
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff29 	bl	8003510 <Write16>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <INA219_setCalibration_16V_400mA>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_16V_400mA(INA219_t *ina219)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 80036d0:	f240 139f 	movw	r3, #415	@ 0x19f
 80036d4:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 8192;
 80036d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <INA219_setCalibration_16V_400mA+0x40>)
 80036d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036dc:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
 80036de:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <INA219_setCalibration_16V_400mA+0x44>)
 80036e0:	2214      	movs	r2, #20
 80036e2:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
 80036e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003710 <INA219_setCalibration_16V_400mA+0x48>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 80036ea:	4b07      	ldr	r3, [pc, #28]	@ (8003708 <INA219_setCalibration_16V_400mA+0x40>)
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	4619      	mov	r1, r3
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ffc8 	bl	8003686 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 80036f6:	89fb      	ldrh	r3, [r7, #14]
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ffd3 	bl	80036a6 <INA219_setConfig>
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	200026a6 	.word	0x200026a6
 800370c:	200026a8 	.word	0x200026a8
 8003710:	200026aa 	.word	0x200026aa

08003714 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	4613      	mov	r3, r2
 8003720:	71fb      	strb	r3, [r7, #7]
	isFirst = false; // set global var used by INA219_GetMiliWattMinutes
 8003722:	4b1a      	ldr	r3, [pc, #104]	@ (800378c <INA219_Init+0x78>)
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
	ina219->ina219_i2c = i2c;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	79fa      	ldrb	r2, [r7, #7]
 8003732:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8003734:	4b16      	ldr	r3, [pc, #88]	@ (8003790 <INA219_Init+0x7c>)
 8003736:	2200      	movs	r2, #0
 8003738:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 800373a:	4b16      	ldr	r3, [pc, #88]	@ (8003794 <INA219_Init+0x80>)
 800373c:	2200      	movs	r2, #0
 800373e:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	b29b      	uxth	r3, r3
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	b299      	uxth	r1, r3
 8003748:	2302      	movs	r3, #2
 800374a:	2203      	movs	r2, #3
 800374c:	68b8      	ldr	r0, [r7, #8]
 800374e:	f003 fe1f 	bl	8007390 <HAL_I2C_IsDeviceReady>
 8003752:	4603      	mov	r3, r0
 8003754:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d111      	bne.n	8003780 <INA219_Init+0x6c>
	{
		// just to initialize our state machine.
		//The numbers 0.0f and 1.0f is just to call the healthcheck function.
		//Feel free to change this if you want. This function should be called in your main function to be polled.
		batteryState = Battery_START; // go to starting position.
 800375c:	4b0e      	ldr	r3, [pc, #56]	@ (8003798 <INA219_Init+0x84>)
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
		INA219_HealthCheck(ina219,0.0f,1.0f );
 8003762:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003766:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800379c <INA219_Init+0x88>
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7ff ff32 	bl	80035d4 <INA219_HealthCheck>
		INA219_Reset(ina219);
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f7ff ff77 	bl	8003664 <INA219_Reset>
		//INA219_setCalibration_32V_2A(ina219);
		INA219_setCalibration_16V_400mA(ina219);
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff ffa6 	bl	80036c8 <INA219_setCalibration_16V_400mA>


		return 1;
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <INA219_Init+0x6e>
	}

	else
	{
		return 0;
 8003780:	2300      	movs	r3, #0
	}
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	200026a5 	.word	0x200026a5
 8003790:	200026a8 	.word	0x200026a8
 8003794:	200026aa 	.word	0x200026aa
 8003798:	200026a4 	.word	0x200026a4
 800379c:	00000000 	.word	0x00000000

080037a0 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80037a4:	2200      	movs	r2, #0
 80037a6:	2110      	movs	r1, #16
 80037a8:	4802      	ldr	r0, [pc, #8]	@ (80037b4 <SELECT+0x14>)
 80037aa:	f002 fe1f 	bl	80063ec <HAL_GPIO_WritePin>
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40020000 	.word	0x40020000

080037b8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80037bc:	2201      	movs	r2, #1
 80037be:	2110      	movs	r1, #16
 80037c0:	4802      	ldr	r0, [pc, #8]	@ (80037cc <DESELECT+0x14>)
 80037c2:	f002 fe13 	bl	80063ec <HAL_GPIO_WritePin>
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40020000 	.word	0x40020000

080037d0 <SPI_TxByte>:


static void SPI_TxByte(BYTE data)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80037da:	bf00      	nop
 80037dc:	4808      	ldr	r0, [pc, #32]	@ (8003800 <SPI_TxByte+0x30>)
 80037de:	f006 ff27 	bl	800a630 <HAL_SPI_GetState>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d1f9      	bne.n	80037dc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80037e8:	1df9      	adds	r1, r7, #7
 80037ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037ee:	2201      	movs	r2, #1
 80037f0:	4803      	ldr	r0, [pc, #12]	@ (8003800 <SPI_TxByte+0x30>)
 80037f2:	f006 fb32 	bl	8009e5a <HAL_SPI_Transmit>
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20002508 	.word	0x20002508

08003804 <SPI_RxByte>:


static uint8_t SPI_RxByte(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800380a:	23ff      	movs	r3, #255	@ 0xff
 800380c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8003812:	bf00      	nop
 8003814:	4809      	ldr	r0, [pc, #36]	@ (800383c <SPI_RxByte+0x38>)
 8003816:	f006 ff0b 	bl	800a630 <HAL_SPI_GetState>
 800381a:	4603      	mov	r3, r0
 800381c:	2b01      	cmp	r3, #1
 800381e:	d1f9      	bne.n	8003814 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8003820:	1dba      	adds	r2, r7, #6
 8003822:	1df9      	adds	r1, r7, #7
 8003824:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	2301      	movs	r3, #1
 800382c:	4803      	ldr	r0, [pc, #12]	@ (800383c <SPI_RxByte+0x38>)
 800382e:	f006 fc58 	bl	800a0e2 <HAL_SPI_TransmitReceive>

  return data;
 8003832:	79bb      	ldrb	r3, [r7, #6]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20002508 	.word	0x20002508

08003840 <SPI_RxBytePtr>:


static void SPI_RxBytePtr(uint8_t *buff)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8003848:	f7ff ffdc 	bl	8003804 <SPI_RxByte>
 800384c:	4603      	mov	r3, r0
 800384e:	461a      	mov	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	701a      	strb	r2, [r3, #0]
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <SD_ReadyWait>:


static uint8_t SD_ReadyWait(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
  uint8_t res;

   Timer2 = 50;
 8003862:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <SD_ReadyWait+0x34>)
 8003864:	2232      	movs	r2, #50	@ 0x32
 8003866:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8003868:	f7ff ffcc 	bl	8003804 <SPI_RxByte>

  do
  {
     res = SPI_RxByte();
 800386c:	f7ff ffca 	bl	8003804 <SPI_RxByte>
 8003870:	4603      	mov	r3, r0
 8003872:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	2bff      	cmp	r3, #255	@ 0xff
 8003878:	d004      	beq.n	8003884 <SD_ReadyWait+0x28>
 800387a:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <SD_ReadyWait+0x34>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f3      	bne.n	800386c <SD_ReadyWait+0x10>

  return res;
 8003884:	79fb      	ldrb	r3, [r7, #7]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	200025c2 	.word	0x200025c2

08003894 <SD_PowerOn>:

 static void SD_PowerOn(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800389a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800389e:	617b      	str	r3, [r7, #20]

   DESELECT();
 80038a0:	f7ff ff8a 	bl	80037b8 <DESELECT>

  for(int i = 0; i < 10; i++)
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	e005      	b.n	80038b6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80038aa:	20ff      	movs	r0, #255	@ 0xff
 80038ac:	f7ff ff90 	bl	80037d0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	3301      	adds	r3, #1
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b09      	cmp	r3, #9
 80038ba:	ddf6      	ble.n	80038aa <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80038bc:	f7ff ff70 	bl	80037a0 <SELECT>

   cmd_arg[0] = (CMD0 | 0x40);
 80038c0:	2340      	movs	r3, #64	@ 0x40
 80038c2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80038d4:	2395      	movs	r3, #149	@ 0x95
 80038d6:	727b      	strb	r3, [r7, #9]

   for (int i = 0; i < 6; i++)
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e009      	b.n	80038f2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80038de:	1d3a      	adds	r2, r7, #4
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ff72 	bl	80037d0 <SPI_TxByte>
   for (int i = 0; i < 6; i++)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3301      	adds	r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b05      	cmp	r3, #5
 80038f6:	ddf2      	ble.n	80038de <SD_PowerOn+0x4a>
  }

   while ((SPI_RxByte() != 0x01) && Count)
 80038f8:	e002      	b.n	8003900 <SD_PowerOn+0x6c>
  {
    Count--;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
   while ((SPI_RxByte() != 0x01) && Count)
 8003900:	f7ff ff80 	bl	8003804 <SPI_RxByte>
 8003904:	4603      	mov	r3, r0
 8003906:	2b01      	cmp	r3, #1
 8003908:	d002      	beq.n	8003910 <SD_PowerOn+0x7c>
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f4      	bne.n	80038fa <SD_PowerOn+0x66>
  }

  DESELECT();
 8003910:	f7ff ff52 	bl	80037b8 <DESELECT>
  SPI_TxByte(0XFF);
 8003914:	20ff      	movs	r0, #255	@ 0xff
 8003916:	f7ff ff5b 	bl	80037d0 <SPI_TxByte>

  PowerFlag = 1;
 800391a:	4b03      	ldr	r3, [pc, #12]	@ (8003928 <SD_PowerOn+0x94>)
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
}
 8003920:	bf00      	nop
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	200026ad 	.word	0x200026ad

0800392c <SD_PowerOff>:

 static void SD_PowerOff(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <SD_PowerOff+0x14>)
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
}
 8003936:	bf00      	nop
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	200026ad 	.word	0x200026ad

08003944 <SD_CheckPower>:

 static uint8_t SD_CheckPower(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8003948:	4b03      	ldr	r3, [pc, #12]	@ (8003958 <SD_CheckPower+0x14>)
 800394a:	781b      	ldrb	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	200026ad 	.word	0x200026ad

0800395c <SD_RxDataBlock>:

 static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint8_t token;

   Timer1 = 10;
 8003966:	4b17      	ldr	r3, [pc, #92]	@ (80039c4 <SD_RxDataBlock+0x68>)
 8003968:	220a      	movs	r2, #10
 800396a:	701a      	strb	r2, [r3, #0]

  do
  {
    token = SPI_RxByte();
 800396c:	f7ff ff4a 	bl	8003804 <SPI_RxByte>
 8003970:	4603      	mov	r3, r0
 8003972:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2bff      	cmp	r3, #255	@ 0xff
 8003978:	d104      	bne.n	8003984 <SD_RxDataBlock+0x28>
 800397a:	4b12      	ldr	r3, [pc, #72]	@ (80039c4 <SD_RxDataBlock+0x68>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f3      	bne.n	800396c <SD_RxDataBlock+0x10>


  if(token != 0xFE)
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2bfe      	cmp	r3, #254	@ 0xfe
 8003988:	d001      	beq.n	800398e <SD_RxDataBlock+0x32>
    return FALSE;
 800398a:	2300      	movs	r3, #0
 800398c:	e016      	b.n	80039bc <SD_RxDataBlock+0x60>

  do
  {
    SPI_RxBytePtr(buff++);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ff53 	bl	8003840 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff4d 	bl	8003840 <SPI_RxBytePtr>
  } while(btr -= 2);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	3b02      	subs	r3, #2
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1ed      	bne.n	800398e <SD_RxDataBlock+0x32>

  SPI_RxByte();
 80039b2:	f7ff ff27 	bl	8003804 <SPI_RxByte>
  SPI_RxByte();
 80039b6:	f7ff ff25 	bl	8003804 <SPI_RxByte>

  return TRUE;
 80039ba:	2301      	movs	r3, #1
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	200025c1 	.word	0x200025c1

080039c8 <SD_TxDataBlock>:


#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp = 0, wc = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	2300      	movs	r3, #0
 80039da:	73bb      	strb	r3, [r7, #14]
  uint8_t i = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	737b      	strb	r3, [r7, #13]

  if (SD_ReadyWait() != 0xFF)
 80039e0:	f7ff ff3c 	bl	800385c <SD_ReadyWait>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2bff      	cmp	r3, #255	@ 0xff
 80039e8:	d001      	beq.n	80039ee <SD_TxDataBlock+0x26>
    return FALSE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e040      	b.n	8003a70 <SD_TxDataBlock+0xa8>

  SPI_TxByte(token);
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff feed 	bl	80037d0 <SPI_TxByte>

  if (token != 0xFD)
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	2bfd      	cmp	r3, #253	@ 0xfd
 80039fa:	d031      	beq.n	8003a60 <SD_TxDataBlock+0x98>
  {
    wc = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	73bb      	strb	r3, [r7, #14]

    do
    {
      SPI_TxByte(*buff++);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fee1 	bl	80037d0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff feda 	bl	80037d0 <SPI_TxByte>
    } while (--wc);
 8003a1c:	7bbb      	ldrb	r3, [r7, #14]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	73bb      	strb	r3, [r7, #14]
 8003a22:	7bbb      	ldrb	r3, [r7, #14]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1eb      	bne.n	8003a00 <SD_TxDataBlock+0x38>

    SPI_RxByte();
 8003a28:	f7ff feec 	bl	8003804 <SPI_RxByte>
    SPI_RxByte();
 8003a2c:	f7ff feea 	bl	8003804 <SPI_RxByte>

    while (i <= 64)
 8003a30:	e00b      	b.n	8003a4a <SD_TxDataBlock+0x82>
    {
      resp = SPI_RxByte();
 8003a32:	f7ff fee7 	bl	8003804 <SPI_RxByte>
 8003a36:	4603      	mov	r3, r0
 8003a38:	73fb      	strb	r3, [r7, #15]

      if ((resp & 0x1F) == 0x05)
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d006      	beq.n	8003a52 <SD_TxDataBlock+0x8a>
        break;

      i++;
 8003a44:	7b7b      	ldrb	r3, [r7, #13]
 8003a46:	3301      	adds	r3, #1
 8003a48:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8003a4a:	7b7b      	ldrb	r3, [r7, #13]
 8003a4c:	2b40      	cmp	r3, #64	@ 0x40
 8003a4e:	d9f0      	bls.n	8003a32 <SD_TxDataBlock+0x6a>
 8003a50:	e000      	b.n	8003a54 <SD_TxDataBlock+0x8c>
        break;
 8003a52:	bf00      	nop
    }

    while (SPI_RxByte() == 0);
 8003a54:	bf00      	nop
 8003a56:	f7ff fed5 	bl	8003804 <SPI_RxByte>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0fa      	beq.n	8003a56 <SD_TxDataBlock+0x8e>
  }

  if ((resp & 0x1F) == 0x05)
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	2b05      	cmp	r3, #5
 8003a68:	d101      	bne.n	8003a6e <SD_TxDataBlock+0xa6>
    return TRUE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <SD_TxDataBlock+0xa8>
  else
    return FALSE;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	6039      	str	r1, [r7, #0]
 8003a82:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  if (SD_ReadyWait() != 0xFF)
 8003a84:	f7ff feea 	bl	800385c <SD_ReadyWait>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2bff      	cmp	r3, #255	@ 0xff
 8003a8c:	d001      	beq.n	8003a92 <SD_SendCmd+0x1a>
    return 0xFF;
 8003a8e:	23ff      	movs	r3, #255	@ 0xff
 8003a90:	e040      	b.n	8003b14 <SD_SendCmd+0x9c>

  SPI_TxByte(cmd); 			/* Command */
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff fe9b 	bl	80037d0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	0e1b      	lsrs	r3, r3, #24
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fe95 	bl	80037d0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fe8f 	bl	80037d0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	0a1b      	lsrs	r3, r3, #8
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fe89 	bl	80037d0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff fe84 	bl	80037d0 <SPI_TxByte>

  crc = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	2b40      	cmp	r3, #64	@ 0x40
 8003ad0:	d101      	bne.n	8003ad6 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8003ad2:	2395      	movs	r3, #149	@ 0x95
 8003ad4:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	2b48      	cmp	r3, #72	@ 0x48
 8003ada:	d101      	bne.n	8003ae0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8003adc:	2387      	movs	r3, #135	@ 0x87
 8003ade:	73fb      	strb	r3, [r7, #15]

  /* CRC */
  SPI_TxByte(crc);
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fe74 	bl	80037d0 <SPI_TxByte>

  if (cmd == CMD12)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	2b4c      	cmp	r3, #76	@ 0x4c
 8003aec:	d101      	bne.n	8003af2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8003aee:	f7ff fe89 	bl	8003804 <SPI_RxByte>

  uint8_t n = 10;
 8003af2:	230a      	movs	r3, #10
 8003af4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8003af6:	f7ff fe85 	bl	8003804 <SPI_RxByte>
 8003afa:	4603      	mov	r3, r0
 8003afc:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8003afe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	da05      	bge.n	8003b12 <SD_SendCmd+0x9a>
 8003b06:	7bbb      	ldrb	r3, [r7, #14]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	73bb      	strb	r3, [r7, #14]
 8003b0c:	7bbb      	ldrb	r3, [r7, #14]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f1      	bne.n	8003af6 <SD_SendCmd+0x7e>

  return res;
 8003b12:	7b7b      	ldrb	r3, [r7, #13]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <SD_disk_initialize>:


DSTATUS SD_disk_initialize(BYTE drv)
{
 8003b1c:	b590      	push	{r4, r7, lr}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  if(drv)
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0d5      	b.n	8003cdc <SD_disk_initialize+0x1c0>

  if(Stat & STA_NODISK)
 8003b30:	4b6c      	ldr	r3, [pc, #432]	@ (8003ce4 <SD_disk_initialize+0x1c8>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <SD_disk_initialize+0x2a>
    return Stat;
 8003b3e:	4b69      	ldr	r3, [pc, #420]	@ (8003ce4 <SD_disk_initialize+0x1c8>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	e0ca      	b.n	8003cdc <SD_disk_initialize+0x1c0>

  SD_PowerOn();
 8003b46:	f7ff fea5 	bl	8003894 <SD_PowerOn>

  SELECT();
 8003b4a:	f7ff fe29 	bl	80037a0 <SELECT>

  type = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73bb      	strb	r3, [r7, #14]

  if (SD_SendCmd(CMD0, 0) == 1)
 8003b52:	2100      	movs	r1, #0
 8003b54:	2040      	movs	r0, #64	@ 0x40
 8003b56:	f7ff ff8f 	bl	8003a78 <SD_SendCmd>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	f040 80a5 	bne.w	8003cac <SD_disk_initialize+0x190>
  {
    Timer1 = 100;
 8003b62:	4b61      	ldr	r3, [pc, #388]	@ (8003ce8 <SD_disk_initialize+0x1cc>)
 8003b64:	2264      	movs	r2, #100	@ 0x64
 8003b66:	701a      	strb	r2, [r3, #0]

    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003b68:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003b6c:	2048      	movs	r0, #72	@ 0x48
 8003b6e:	f7ff ff83 	bl	8003a78 <SD_SendCmd>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d158      	bne.n	8003c2a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	73fb      	strb	r3, [r7, #15]
 8003b7c:	e00c      	b.n	8003b98 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8003b7e:	7bfc      	ldrb	r4, [r7, #15]
 8003b80:	f7ff fe40 	bl	8003804 <SPI_RxByte>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	f104 0310 	add.w	r3, r4, #16
 8003b8c:	443b      	add	r3, r7
 8003b8e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	3301      	adds	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d9ef      	bls.n	8003b7e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003b9e:	7abb      	ldrb	r3, [r7, #10]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	f040 8083 	bne.w	8003cac <SD_disk_initialize+0x190>
 8003ba6:	7afb      	ldrb	r3, [r7, #11]
 8003ba8:	2baa      	cmp	r3, #170	@ 0xaa
 8003baa:	d17f      	bne.n	8003cac <SD_disk_initialize+0x190>
      {
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8003bac:	2100      	movs	r1, #0
 8003bae:	2077      	movs	r0, #119	@ 0x77
 8003bb0:	f7ff ff62 	bl	8003a78 <SD_SendCmd>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d807      	bhi.n	8003bca <SD_disk_initialize+0xae>
 8003bba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003bbe:	2069      	movs	r0, #105	@ 0x69
 8003bc0:	f7ff ff5a 	bl	8003a78 <SD_SendCmd>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8003bca:	4b47      	ldr	r3, [pc, #284]	@ (8003ce8 <SD_disk_initialize+0x1cc>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1eb      	bne.n	8003bac <SD_disk_initialize+0x90>
 8003bd4:	e000      	b.n	8003bd8 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8003bd6:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003bd8:	4b43      	ldr	r3, [pc, #268]	@ (8003ce8 <SD_disk_initialize+0x1cc>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d064      	beq.n	8003cac <SD_disk_initialize+0x190>
 8003be2:	2100      	movs	r1, #0
 8003be4:	207a      	movs	r0, #122	@ 0x7a
 8003be6:	f7ff ff47 	bl	8003a78 <SD_SendCmd>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d15d      	bne.n	8003cac <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	e00c      	b.n	8003c10 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8003bf6:	7bfc      	ldrb	r4, [r7, #15]
 8003bf8:	f7ff fe04 	bl	8003804 <SPI_RxByte>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f104 0310 	add.w	r3, r4, #16
 8003c04:	443b      	add	r3, r7
 8003c06:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d9ef      	bls.n	8003bf6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8003c16:	7a3b      	ldrb	r3, [r7, #8]
 8003c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <SD_disk_initialize+0x108>
 8003c20:	2306      	movs	r3, #6
 8003c22:	e000      	b.n	8003c26 <SD_disk_initialize+0x10a>
 8003c24:	2302      	movs	r3, #2
 8003c26:	73bb      	strb	r3, [r7, #14]
 8003c28:	e040      	b.n	8003cac <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	2077      	movs	r0, #119	@ 0x77
 8003c2e:	f7ff ff23 	bl	8003a78 <SD_SendCmd>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d808      	bhi.n	8003c4a <SD_disk_initialize+0x12e>
 8003c38:	2100      	movs	r1, #0
 8003c3a:	2069      	movs	r0, #105	@ 0x69
 8003c3c:	f7ff ff1c 	bl	8003a78 <SD_SendCmd>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d801      	bhi.n	8003c4a <SD_disk_initialize+0x12e>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e000      	b.n	8003c4c <SD_disk_initialize+0x130>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8003c4e:	7bbb      	ldrb	r3, [r7, #14]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d10e      	bne.n	8003c72 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8003c54:	2100      	movs	r1, #0
 8003c56:	2077      	movs	r0, #119	@ 0x77
 8003c58:	f7ff ff0e 	bl	8003a78 <SD_SendCmd>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d80e      	bhi.n	8003c80 <SD_disk_initialize+0x164>
 8003c62:	2100      	movs	r1, #0
 8003c64:	2069      	movs	r0, #105	@ 0x69
 8003c66:	f7ff ff07 	bl	8003a78 <SD_SendCmd>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d107      	bne.n	8003c80 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8003c70:	e00d      	b.n	8003c8e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8003c72:	2100      	movs	r1, #0
 8003c74:	2041      	movs	r0, #65	@ 0x41
 8003c76:	f7ff feff 	bl	8003a78 <SD_SendCmd>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8003c80:	4b19      	ldr	r3, [pc, #100]	@ (8003ce8 <SD_disk_initialize+0x1cc>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e1      	bne.n	8003c4e <SD_disk_initialize+0x132>
 8003c8a:	e000      	b.n	8003c8e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8003c8c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8003c8e:	4b16      	ldr	r3, [pc, #88]	@ (8003ce8 <SD_disk_initialize+0x1cc>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d007      	beq.n	8003ca8 <SD_disk_initialize+0x18c>
 8003c98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c9c:	2050      	movs	r0, #80	@ 0x50
 8003c9e:	f7ff feeb 	bl	8003a78 <SD_SendCmd>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <SD_disk_initialize+0x190>
      {
        type = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8003cac:	4a0f      	ldr	r2, [pc, #60]	@ (8003cec <SD_disk_initialize+0x1d0>)
 8003cae:	7bbb      	ldrb	r3, [r7, #14]
 8003cb0:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8003cb2:	f7ff fd81 	bl	80037b8 <DESELECT>

  SPI_RxByte();
 8003cb6:	f7ff fda5 	bl	8003804 <SPI_RxByte>

  if (type)
 8003cba:	7bbb      	ldrb	r3, [r7, #14]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8003cc0:	4b08      	ldr	r3, [pc, #32]	@ (8003ce4 <SD_disk_initialize+0x1c8>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <SD_disk_initialize+0x1c8>)
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	e001      	b.n	8003cd6 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8003cd2:	f7ff fe2b 	bl	800392c <SD_PowerOff>
  }

  return Stat;
 8003cd6:	4b03      	ldr	r3, [pc, #12]	@ (8003ce4 <SD_disk_initialize+0x1c8>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b2db      	uxtb	r3, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd90      	pop	{r4, r7, pc}
 8003ce4:	2000007c 	.word	0x2000007c
 8003ce8:	200025c1 	.word	0x200025c1
 8003cec:	200026ac 	.word	0x200026ac

08003cf0 <SD_disk_status>:

DSTATUS SD_disk_status(BYTE drv)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <SD_disk_status+0x14>
    return STA_NOINIT;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e002      	b.n	8003d0a <SD_disk_status+0x1a>

  return Stat;
 8003d04:	4b04      	ldr	r3, [pc, #16]	@ (8003d18 <SD_disk_status+0x28>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	b2db      	uxtb	r3, r3
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	2000007c 	.word	0x2000007c

08003d1c <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4603      	mov	r3, r0
 8003d2a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <SD_disk_read+0x1c>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <SD_disk_read+0x20>
    return RES_PARERR;
 8003d38:	2304      	movs	r3, #4
 8003d3a:	e051      	b.n	8003de0 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8003d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003de8 <SD_disk_read+0xcc>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <SD_disk_read+0x32>
    return RES_NOTRDY;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e048      	b.n	8003de0 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8003d4e:	4b27      	ldr	r3, [pc, #156]	@ (8003dec <SD_disk_read+0xd0>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <SD_disk_read+0x44>
    sector *= 512;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	025b      	lsls	r3, r3, #9
 8003d5e:	607b      	str	r3, [r7, #4]

  SELECT();
 8003d60:	f7ff fd1e 	bl	80037a0 <SELECT>

  if (count == 1)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d111      	bne.n	8003d8e <SD_disk_read+0x72>
  {

    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	2051      	movs	r0, #81	@ 0x51
 8003d6e:	f7ff fe83 	bl	8003a78 <SD_SendCmd>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d129      	bne.n	8003dcc <SD_disk_read+0xb0>
 8003d78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d7c:	68b8      	ldr	r0, [r7, #8]
 8003d7e:	f7ff fded 	bl	800395c <SD_RxDataBlock>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d021      	beq.n	8003dcc <SD_disk_read+0xb0>
      count = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	e01e      	b.n	8003dcc <SD_disk_read+0xb0>
  }
  else
  {
    if (SD_SendCmd(CMD18, sector) == 0)
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	2052      	movs	r0, #82	@ 0x52
 8003d92:	f7ff fe71 	bl	8003a78 <SD_SendCmd>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d117      	bne.n	8003dcc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8003d9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003da0:	68b8      	ldr	r0, [r7, #8]
 8003da2:	f7ff fddb 	bl	800395c <SD_RxDataBlock>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003db2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	603b      	str	r3, [r7, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1ed      	bne.n	8003d9c <SD_disk_read+0x80>
 8003dc0:	e000      	b.n	8003dc4 <SD_disk_read+0xa8>
          break;
 8003dc2:	bf00      	nop

      SD_SendCmd(CMD12, 0);
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	204c      	movs	r0, #76	@ 0x4c
 8003dc8:	f7ff fe56 	bl	8003a78 <SD_SendCmd>
    }
  }

  DESELECT();
 8003dcc:	f7ff fcf4 	bl	80037b8 <DESELECT>
  SPI_RxByte();
 8003dd0:	f7ff fd18 	bl	8003804 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bf14      	ite	ne
 8003dda:	2301      	movne	r3, #1
 8003ddc:	2300      	moveq	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	2000007c 	.word	0x2000007c
 8003dec:	200026ac 	.word	0x200026ac

08003df0 <SD_disk_write>:

#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <SD_disk_write+0x1c>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <SD_disk_write+0x20>
    return RES_PARERR;
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	e06b      	b.n	8003ee8 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8003e10:	4b37      	ldr	r3, [pc, #220]	@ (8003ef0 <SD_disk_write+0x100>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e062      	b.n	8003ee8 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8003e22:	4b33      	ldr	r3, [pc, #204]	@ (8003ef0 <SD_disk_write+0x100>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <SD_disk_write+0x44>
    return RES_WRPRT;
 8003e30:	2302      	movs	r3, #2
 8003e32:	e059      	b.n	8003ee8 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8003e34:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef4 <SD_disk_write+0x104>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d102      	bne.n	8003e46 <SD_disk_write+0x56>
    sector *= 512;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	025b      	lsls	r3, r3, #9
 8003e44:	607b      	str	r3, [r7, #4]

  SELECT();
 8003e46:	f7ff fcab 	bl	80037a0 <SELECT>

  if (count == 1)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d110      	bne.n	8003e72 <SD_disk_write+0x82>
  {
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	2058      	movs	r0, #88	@ 0x58
 8003e54:	f7ff fe10 	bl	8003a78 <SD_SendCmd>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d13a      	bne.n	8003ed4 <SD_disk_write+0xe4>
 8003e5e:	21fe      	movs	r1, #254	@ 0xfe
 8003e60:	68b8      	ldr	r0, [r7, #8]
 8003e62:	f7ff fdb1 	bl	80039c8 <SD_TxDataBlock>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d033      	beq.n	8003ed4 <SD_disk_write+0xe4>
      count = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	e030      	b.n	8003ed4 <SD_disk_write+0xe4>
  }
  else
  {
    if (CardType & 2)
 8003e72:	4b20      	ldr	r3, [pc, #128]	@ (8003ef4 <SD_disk_write+0x104>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8003e7e:	2100      	movs	r1, #0
 8003e80:	2077      	movs	r0, #119	@ 0x77
 8003e82:	f7ff fdf9 	bl	8003a78 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003e86:	6839      	ldr	r1, [r7, #0]
 8003e88:	2057      	movs	r0, #87	@ 0x57
 8003e8a:	f7ff fdf5 	bl	8003a78 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	2059      	movs	r0, #89	@ 0x59
 8003e92:	f7ff fdf1 	bl	8003a78 <SD_SendCmd>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d11b      	bne.n	8003ed4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8003e9c:	21fc      	movs	r1, #252	@ 0xfc
 8003e9e:	68b8      	ldr	r0, [r7, #8]
 8003ea0:	f7ff fd92 	bl	80039c8 <SD_TxDataBlock>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003eb0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1ee      	bne.n	8003e9c <SD_disk_write+0xac>
 8003ebe:	e000      	b.n	8003ec2 <SD_disk_write+0xd2>
          break;
 8003ec0:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8003ec2:	21fd      	movs	r1, #253	@ 0xfd
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f7ff fd7f 	bl	80039c8 <SD_TxDataBlock>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <SD_disk_write+0xe4>
      {
        count = 1;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8003ed4:	f7ff fc70 	bl	80037b8 <DESELECT>
  SPI_RxByte();
 8003ed8:	f7ff fc94 	bl	8003804 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bf14      	ite	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	2300      	moveq	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	2000007c 	.word	0x2000007c
 8003ef4:	200026ac 	.word	0x200026ac

08003ef8 <SD_disk_ioctl>:
#endif /* _READONLY */

DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003ef8:	b590      	push	{r4, r7, lr}
 8003efa:	b08b      	sub	sp, #44	@ 0x2c
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	603a      	str	r2, [r7, #0]
 8003f02:	71fb      	strb	r3, [r7, #7]
 8003f04:	460b      	mov	r3, r1
 8003f06:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8003f12:	2304      	movs	r3, #4
 8003f14:	e119      	b.n	800414a <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8003f1c:	79bb      	ldrb	r3, [r7, #6]
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d129      	bne.n	8003f76 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d017      	beq.n	8003f5a <SD_disk_ioctl+0x62>
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	dc1f      	bgt.n	8003f6e <SD_disk_ioctl+0x76>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <SD_disk_ioctl+0x40>
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d00b      	beq.n	8003f4e <SD_disk_ioctl+0x56>
 8003f36:	e01a      	b.n	8003f6e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8003f38:	f7ff fd04 	bl	8003944 <SD_CheckPower>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8003f42:	f7ff fcf3 	bl	800392c <SD_PowerOff>
      res = RES_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003f4c:	e0fb      	b.n	8004146 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8003f4e:	f7ff fca1 	bl	8003894 <SD_PowerOn>
      res = RES_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003f58:	e0f5      	b.n	8004146 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	1c5c      	adds	r4, r3, #1
 8003f5e:	f7ff fcf1 	bl	8003944 <SD_CheckPower>
 8003f62:	4603      	mov	r3, r0
 8003f64:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8003f66:	2300      	movs	r3, #0
 8003f68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003f6c:	e0eb      	b.n	8004146 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8003f6e:	2304      	movs	r3, #4
 8003f70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003f74:	e0e7      	b.n	8004146 <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8003f76:	4b77      	ldr	r3, [pc, #476]	@ (8004154 <SD_disk_ioctl+0x25c>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e0e0      	b.n	800414a <SD_disk_ioctl+0x252>

    SELECT();
 8003f88:	f7ff fc0a 	bl	80037a0 <SELECT>

    switch (ctrl)
 8003f8c:	79bb      	ldrb	r3, [r7, #6]
 8003f8e:	2b0d      	cmp	r3, #13
 8003f90:	f200 80ca 	bhi.w	8004128 <SD_disk_ioctl+0x230>
 8003f94:	a201      	add	r2, pc, #4	@ (adr r2, 8003f9c <SD_disk_ioctl+0xa4>)
 8003f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9a:	bf00      	nop
 8003f9c:	08004093 	.word	0x08004093
 8003fa0:	08003fd5 	.word	0x08003fd5
 8003fa4:	08004083 	.word	0x08004083
 8003fa8:	08004129 	.word	0x08004129
 8003fac:	08004129 	.word	0x08004129
 8003fb0:	08004129 	.word	0x08004129
 8003fb4:	08004129 	.word	0x08004129
 8003fb8:	08004129 	.word	0x08004129
 8003fbc:	08004129 	.word	0x08004129
 8003fc0:	08004129 	.word	0x08004129
 8003fc4:	08004129 	.word	0x08004129
 8003fc8:	080040a5 	.word	0x080040a5
 8003fcc:	080040c9 	.word	0x080040c9
 8003fd0:	080040ed 	.word	0x080040ed
    {
    case GET_SECTOR_COUNT:
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	2049      	movs	r0, #73	@ 0x49
 8003fd8:	f7ff fd4e 	bl	8003a78 <SD_SendCmd>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 80a6 	bne.w	8004130 <SD_disk_ioctl+0x238>
 8003fe4:	f107 030c 	add.w	r3, r7, #12
 8003fe8:	2110      	movs	r1, #16
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fcb6 	bl	800395c <SD_RxDataBlock>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 809c 	beq.w	8004130 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8003ff8:	7b3b      	ldrb	r3, [r7, #12]
 8003ffa:	099b      	lsrs	r3, r3, #6
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d10d      	bne.n	800401e <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004002:	7d7b      	ldrb	r3, [r7, #21]
 8004004:	461a      	mov	r2, r3
 8004006:	7d3b      	ldrb	r3, [r7, #20]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	b29b      	uxth	r3, r3
 800400c:	4413      	add	r3, r2
 800400e:	b29b      	uxth	r3, r3
 8004010:	3301      	adds	r3, #1
 8004012:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8004014:	8bfb      	ldrh	r3, [r7, #30]
 8004016:	029a      	lsls	r2, r3, #10
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e02d      	b.n	800407a <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800401e:	7c7b      	ldrb	r3, [r7, #17]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	b2da      	uxtb	r2, r3
 8004026:	7dbb      	ldrb	r3, [r7, #22]
 8004028:	09db      	lsrs	r3, r3, #7
 800402a:	b2db      	uxtb	r3, r3
 800402c:	4413      	add	r3, r2
 800402e:	b2da      	uxtb	r2, r3
 8004030:	7d7b      	ldrb	r3, [r7, #21]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f003 0306 	and.w	r3, r3, #6
 800403a:	b2db      	uxtb	r3, r3
 800403c:	4413      	add	r3, r2
 800403e:	b2db      	uxtb	r3, r3
 8004040:	3302      	adds	r3, #2
 8004042:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004046:	7d3b      	ldrb	r3, [r7, #20]
 8004048:	099b      	lsrs	r3, r3, #6
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	7cfb      	ldrb	r3, [r7, #19]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	b29b      	uxth	r3, r3
 8004054:	4413      	add	r3, r2
 8004056:	b29a      	uxth	r2, r3
 8004058:	7cbb      	ldrb	r3, [r7, #18]
 800405a:	029b      	lsls	r3, r3, #10
 800405c:	b29b      	uxth	r3, r3
 800405e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004062:	b29b      	uxth	r3, r3
 8004064:	4413      	add	r3, r2
 8004066:	b29b      	uxth	r3, r3
 8004068:	3301      	adds	r3, #1
 800406a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800406c:	8bfa      	ldrh	r2, [r7, #30]
 800406e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004072:	3b09      	subs	r3, #9
 8004074:	409a      	lsls	r2, r3
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8004080:	e056      	b.n	8004130 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004088:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004090:	e055      	b.n	800413e <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF)
 8004092:	f7ff fbe3 	bl	800385c <SD_ReadyWait>
 8004096:	4603      	mov	r3, r0
 8004098:	2bff      	cmp	r3, #255	@ 0xff
 800409a:	d14b      	bne.n	8004134 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80040a2:	e047      	b.n	8004134 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80040a4:	2100      	movs	r1, #0
 80040a6:	2049      	movs	r0, #73	@ 0x49
 80040a8:	f7ff fce6 	bl	8003a78 <SD_SendCmd>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d142      	bne.n	8004138 <SD_disk_ioctl+0x240>
 80040b2:	2110      	movs	r1, #16
 80040b4:	6a38      	ldr	r0, [r7, #32]
 80040b6:	f7ff fc51 	bl	800395c <SD_RxDataBlock>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d03b      	beq.n	8004138 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80040c6:	e037      	b.n	8004138 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80040c8:	2100      	movs	r1, #0
 80040ca:	204a      	movs	r0, #74	@ 0x4a
 80040cc:	f7ff fcd4 	bl	8003a78 <SD_SendCmd>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d132      	bne.n	800413c <SD_disk_ioctl+0x244>
 80040d6:	2110      	movs	r1, #16
 80040d8:	6a38      	ldr	r0, [r7, #32]
 80040da:	f7ff fc3f 	bl	800395c <SD_RxDataBlock>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d02b      	beq.n	800413c <SD_disk_ioctl+0x244>
        res = RES_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80040ea:	e027      	b.n	800413c <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      if (SD_SendCmd(CMD58, 0) == 0)
 80040ec:	2100      	movs	r1, #0
 80040ee:	207a      	movs	r0, #122	@ 0x7a
 80040f0:	f7ff fcc2 	bl	8003a78 <SD_SendCmd>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d116      	bne.n	8004128 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004100:	e00b      	b.n	800411a <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8004102:	6a3c      	ldr	r4, [r7, #32]
 8004104:	1c63      	adds	r3, r4, #1
 8004106:	623b      	str	r3, [r7, #32]
 8004108:	f7ff fb7c 	bl	8003804 <SPI_RxByte>
 800410c:	4603      	mov	r3, r0
 800410e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8004110:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004114:	3301      	adds	r3, #1
 8004116:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800411a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800411e:	2b03      	cmp	r3, #3
 8004120:	d9ef      	bls.n	8004102 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8004128:	2304      	movs	r3, #4
 800412a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800412e:	e006      	b.n	800413e <SD_disk_ioctl+0x246>
      break;
 8004130:	bf00      	nop
 8004132:	e004      	b.n	800413e <SD_disk_ioctl+0x246>
      break;
 8004134:	bf00      	nop
 8004136:	e002      	b.n	800413e <SD_disk_ioctl+0x246>
      break;
 8004138:	bf00      	nop
 800413a:	e000      	b.n	800413e <SD_disk_ioctl+0x246>
      break;
 800413c:	bf00      	nop
    }

    DESELECT();
 800413e:	f7ff fb3b 	bl	80037b8 <DESELECT>
    SPI_RxByte();
 8004142:	f7ff fb5f 	bl	8003804 <SPI_RxByte>
  }

  return res;
 8004146:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800414a:	4618      	mov	r0, r3
 800414c:	372c      	adds	r7, #44	@ 0x2c
 800414e:	46bd      	mov	sp, r7
 8004150:	bd90      	pop	{r4, r7, pc}
 8004152:	bf00      	nop
 8004154:	2000007c 	.word	0x2000007c

08004158 <_write>:
	return CDC_Transmit_FS(message, strlen((const char*)message));
}


int _write(int fd, unsigned char *buf, int len)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS(buf, len);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	b29b      	uxth	r3, r3
 8004168:	4619      	mov	r1, r3
 800416a:	68b8      	ldr	r0, [r7, #8]
 800416c:	f00e fc46 	bl	80129fc <CDC_Transmit_FS>
    //serial_transmit((uint8_t*)buf);
    return len;
 8004170:	687b      	ldr	r3, [r7, #4]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <sensirion_common_generate_crc>:
 */

#include "sensors/sensirion_common.h"

u8 sensirion_common_generate_crc(u8 *data, u16 count)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	460b      	mov	r3, r1
 8004184:	807b      	strh	r3, [r7, #2]
    u16 current_byte;
    u8 crc = CRC8_INIT;
 8004186:	23ff      	movs	r3, #255	@ 0xff
 8004188:	737b      	strb	r3, [r7, #13]
    u8 crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800418a:	2300      	movs	r3, #0
 800418c:	81fb      	strh	r3, [r7, #14]
 800418e:	e021      	b.n	80041d4 <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8004190:	89fb      	ldrh	r3, [r7, #14]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	781a      	ldrb	r2, [r3, #0]
 8004198:	7b7b      	ldrb	r3, [r7, #13]
 800419a:	4053      	eors	r3, r2
 800419c:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800419e:	2308      	movs	r3, #8
 80041a0:	733b      	strb	r3, [r7, #12]
 80041a2:	e011      	b.n	80041c8 <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 80041a4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	da07      	bge.n	80041bc <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80041ac:	7b7b      	ldrb	r3, [r7, #13]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	b25b      	sxtb	r3, r3
 80041b2:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 80041b6:	b25b      	sxtb	r3, r3
 80041b8:	737b      	strb	r3, [r7, #13]
 80041ba:	e002      	b.n	80041c2 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 80041bc:	7b7b      	ldrb	r3, [r7, #13]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80041c2:	7b3b      	ldrb	r3, [r7, #12]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	733b      	strb	r3, [r7, #12]
 80041c8:	7b3b      	ldrb	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1ea      	bne.n	80041a4 <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80041ce:	89fb      	ldrh	r3, [r7, #14]
 80041d0:	3301      	adds	r3, #1
 80041d2:	81fb      	strh	r3, [r7, #14]
 80041d4:	89fa      	ldrh	r2, [r7, #14]
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d3d9      	bcc.n	8004190 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80041dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <sensirion_common_check_crc>:

s8 sensirion_common_check_crc(u8 *data, u16 count, u8 checksum)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	460b      	mov	r3, r1
 80041f4:	807b      	strh	r3, [r7, #2]
 80041f6:	4613      	mov	r3, r2
 80041f8:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80041fa:	887b      	ldrh	r3, [r7, #2]
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ffbb 	bl	800417a <sensirion_common_generate_crc>
 8004204:	4603      	mov	r3, r0
 8004206:	461a      	mov	r2, r3
 8004208:	787b      	ldrb	r3, [r7, #1]
 800420a:	4293      	cmp	r3, r2
 800420c:	d002      	beq.n	8004214 <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
 8004212:	e000      	b.n	8004216 <sensirion_common_check_crc+0x2c>
    return STATUS_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <sensirion_i2c_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af02      	add	r7, sp, #8
 8004226:	4603      	mov	r3, r0
 8004228:	6039      	str	r1, [r7, #0]
 800422a:	71fb      	strb	r3, [r7, #7]
 800422c:	4613      	mov	r3, r2
 800422e:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Receive(&hi2c1, address<<1, data, count, 100);
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	b29b      	uxth	r3, r3
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	b299      	uxth	r1, r3
 8004238:	88bb      	ldrh	r3, [r7, #4]
 800423a:	2264      	movs	r2, #100	@ 0x64
 800423c:	9200      	str	r2, [sp, #0]
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	4804      	ldr	r0, [pc, #16]	@ (8004254 <sensirion_i2c_read+0x34>)
 8004242:	f002 fb47 	bl	80068d4 <HAL_I2C_Master_Receive>
 8004246:	4603      	mov	r3, r0
 8004248:	b25b      	sxtb	r3, r3
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	2000040c 	.word	0x2000040c

08004258 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, uint8_t* data, uint16_t count)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af02      	add	r7, sp, #8
 800425e:	4603      	mov	r3, r0
 8004260:	6039      	str	r1, [r7, #0]
 8004262:	71fb      	strb	r3, [r7, #7]
 8004264:	4613      	mov	r3, r2
 8004266:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Transmit(&hi2c1, address<<1, data, count, 100);  // data is the start pointer of our array
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	b29b      	uxth	r3, r3
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	b299      	uxth	r1, r3
 8004270:	88bb      	ldrh	r3, [r7, #4]
 8004272:	2264      	movs	r2, #100	@ 0x64
 8004274:	9200      	str	r2, [sp, #0]
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	4804      	ldr	r0, [pc, #16]	@ (800428c <sensirion_i2c_write+0x34>)
 800427a:	f002 fa2d 	bl	80066d8 <HAL_I2C_Master_Transmit>
 800427e:	4603      	mov	r3, r0
 8004280:	b25b      	sxtb	r3, r3
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	2000040c 	.word	0x2000040c

08004290 <sensirion_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	if(useconds >= 1000)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800429e:	d308      	bcc.n	80042b2 <sensirion_sleep_usec+0x22>
	{
		HAL_Delay(useconds / (uint32_t)1000);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a07      	ldr	r2, [pc, #28]	@ (80042c0 <sensirion_sleep_usec+0x30>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	099b      	lsrs	r3, r3, #6
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 ff1a 	bl	80050e4 <HAL_Delay>
	}
	else
	{
		HAL_Delay(1);
	}
}
 80042b0:	e002      	b.n	80042b8 <sensirion_sleep_usec+0x28>
		HAL_Delay(1);
 80042b2:	2001      	movs	r0, #1
 80042b4:	f000 ff16 	bl	80050e4 <HAL_Delay>
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	10624dd3 	.word	0x10624dd3

080042c4 <sgp_i2c_read_words>:
 *              The buffer may also have been modified on STATUS_FAIL return.
 * @data_words: Number of data words to read (without CRC bytes)
 *
 * Return:      STATUS_OK on success, STATUS_FAIL otherwise
 */
static s16 sgp_i2c_read_words(u16 *data, u16 data_words) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80042d0:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80042d4:	6018      	str	r0, [r3, #0]
 80042d6:	460a      	mov	r2, r1
 80042d8:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80042dc:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 80042e0:	801a      	strh	r2, [r3, #0]
    s16 ret;
    u16 i, j;
    u16 size = data_words * (SGP_WORD_LEN + CRC8_LEN);
 80042e2:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80042e6:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	0052      	lsls	r2, r2, #1
 80042f0:	4413      	add	r3, r2
 80042f2:	f8a7 3412 	strh.w	r3, [r7, #1042]	@ 0x412
    u16 word_buf[SGP_MAX_PROFILE_RET_LEN / sizeof(u16)];
    u8 * const buf8 = (u8 *)word_buf;
 80042f6:	f107 0308 	add.w	r3, r7, #8
 80042fa:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c

    ret = sensirion_i2c_read(SGP_I2C_ADDRESS, buf8, size);
 80042fe:	2058      	movs	r0, #88	@ 0x58
 8004300:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	@ 0x412
 8004304:	461a      	mov	r2, r3
 8004306:	f8d7 140c 	ldr.w	r1, [r7, #1036]	@ 0x40c
 800430a:	f7ff ff89 	bl	8004220 <sensirion_i2c_read>
 800430e:	4603      	mov	r3, r0
 8004310:	f8a7 340a 	strh.w	r3, [r7, #1034]	@ 0x40a

    if (ret != 0)
 8004314:	f9b7 340a 	ldrsh.w	r3, [r7, #1034]	@ 0x40a
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <sgp_i2c_read_words+0x5e>
        return STATUS_FAIL;
 800431c:	f04f 33ff 	mov.w	r3, #4294967295
 8004320:	e04e      	b.n	80043c0 <sgp_i2c_read_words+0xfc>

    /* check the CRC for each word */
    for (i = 0, j = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	f8a7 3416 	strh.w	r3, [r7, #1046]	@ 0x416
 8004328:	2300      	movs	r3, #0
 800432a:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
 800432e:	e040      	b.n	80043b2 <sgp_i2c_read_words+0xee>
         i < size;
         i += SGP_WORD_LEN + CRC8_LEN, j += SGP_WORD_LEN) {

        if (sensirion_common_check_crc(&buf8[i], SGP_WORD_LEN,
 8004330:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 8004334:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8004338:	18d0      	adds	r0, r2, r3
                                       buf8[i + SGP_WORD_LEN]) == STATUS_FAIL) {
 800433a:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 800433e:	3302      	adds	r3, #2
 8004340:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8004344:	4413      	add	r3, r2
        if (sensirion_common_check_crc(&buf8[i], SGP_WORD_LEN,
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	2102      	movs	r1, #2
 800434c:	f7ff ff4d 	bl	80041ea <sensirion_common_check_crc>
 8004350:	4603      	mov	r3, r0
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d102      	bne.n	800435e <sgp_i2c_read_words+0x9a>
            return STATUS_FAIL;
 8004358:	f04f 33ff 	mov.w	r3, #4294967295
 800435c:	e030      	b.n	80043c0 <sgp_i2c_read_words+0xfc>
        }
        ((u8 *)data)[j]     = buf8[i];
 800435e:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 8004362:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8004366:	441a      	add	r2, r3
 8004368:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 800436c:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 8004370:	f2a1 4114 	subw	r1, r1, #1044	@ 0x414
 8004374:	6809      	ldr	r1, [r1, #0]
 8004376:	440b      	add	r3, r1
 8004378:	7812      	ldrb	r2, [r2, #0]
 800437a:	701a      	strb	r2, [r3, #0]
        ((u8 *)data)[j + 1] = buf8[i + 1];
 800437c:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 8004380:	3301      	adds	r3, #1
 8004382:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8004386:	441a      	add	r2, r3
 8004388:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 800438c:	3301      	adds	r3, #1
 800438e:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 8004392:	f2a1 4114 	subw	r1, r1, #1044	@ 0x414
 8004396:	6809      	ldr	r1, [r1, #0]
 8004398:	440b      	add	r3, r1
 800439a:	7812      	ldrb	r2, [r2, #0]
 800439c:	701a      	strb	r2, [r3, #0]
         i += SGP_WORD_LEN + CRC8_LEN, j += SGP_WORD_LEN) {
 800439e:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 80043a2:	3303      	adds	r3, #3
 80043a4:	f8a7 3416 	strh.w	r3, [r7, #1046]	@ 0x416
 80043a8:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 80043ac:	3302      	adds	r3, #2
 80043ae:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
         i < size;
 80043b2:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	@ 0x416
 80043b6:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	@ 0x412
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d3b8      	bcc.n	8004330 <sgp_i2c_read_words+0x6c>
    }

    return STATUS_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <sgp_i2c_write>:
 * sgp_i2c_write() - writes to the SGP sensor
 * @command:     Command
 *
 * Return:      STATUS_OK on success.
 */
static s16 sgp_i2c_write(const sgp_command* command) {
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
    s8 ret;

    ret = sensirion_i2c_write(SGP_I2C_ADDRESS, (uint8_t*)command->buf, SGP_COMMAND_LEN);
 80043d2:	2058      	movs	r0, #88	@ 0x58
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	4619      	mov	r1, r3
 80043da:	f7ff ff3d 	bl	8004258 <sensirion_i2c_write>
 80043de:	4603      	mov	r3, r0
 80043e0:	73fb      	strb	r3, [r7, #15]
    if (ret != 0)
 80043e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <sgp_i2c_write+0x26>
        return STATUS_FAIL;
 80043ea:	f04f 33ff 	mov.w	r3, #4294967295
 80043ee:	e000      	b.n	80043f2 <sgp_i2c_write+0x28>

    return STATUS_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <unpack_signals>:

/**
 * unpack_signals() - unpack signals which are stored in client_data.word_buf
 * @profile:    The profile
 */
static void unpack_signals(const struct sgp_profile *profile) {
 80043fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004400:	b089      	sub	sp, #36	@ 0x24
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	466b      	mov	r3, sp
 8004408:	461e      	mov	r6, r3
    s16 i, j;
    const struct sgp_signal *signal;
    u16 data_words = profile->number_of_signals;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	891b      	ldrh	r3, [r3, #8]
 800440e:	837b      	strh	r3, [r7, #26]
    u16 word_buf[data_words];
 8004410:	8b79      	ldrh	r1, [r7, #26]
 8004412:	460b      	mov	r3, r1
 8004414:	3b01      	subs	r3, #1
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	b28b      	uxth	r3, r1
 800441a:	2200      	movs	r2, #0
 800441c:	4698      	mov	r8, r3
 800441e:	4691      	mov	r9, r2
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800442c:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8004430:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8004434:	b28b      	uxth	r3, r1
 8004436:	2200      	movs	r2, #0
 8004438:	461c      	mov	r4, r3
 800443a:	4615      	mov	r5, r2
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	012b      	lsls	r3, r5, #4
 8004446:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800444a:	0122      	lsls	r2, r4, #4
 800444c:	460b      	mov	r3, r1
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	3307      	adds	r3, #7
 8004452:	08db      	lsrs	r3, r3, #3
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	ebad 0d03 	sub.w	sp, sp, r3
 800445a:	466b      	mov	r3, sp
 800445c:	3301      	adds	r3, #1
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	613b      	str	r3, [r7, #16]
    u16 value;

    /* copy buffer */
    for (i = 0; i < data_words; i++)
 8004464:	2300      	movs	r3, #0
 8004466:	83fb      	strh	r3, [r7, #30]
 8004468:	e011      	b.n	800448e <unpack_signals+0x92>
        word_buf[i] = client_data.word_buf[i];
 800446a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800446e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004472:	4935      	ldr	r1, [pc, #212]	@ (8004548 <unpack_signals+0x14c>)
 8004474:	330c      	adds	r3, #12
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	440b      	add	r3, r1
 800447a:	8899      	ldrh	r1, [r3, #4]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < data_words; i++)
 8004482:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004486:	b29b      	uxth	r3, r3
 8004488:	3301      	adds	r3, #1
 800448a:	b29b      	uxth	r3, r3
 800448c:	83fb      	strh	r3, [r7, #30]
 800448e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004492:	8b7b      	ldrh	r3, [r7, #26]
 8004494:	429a      	cmp	r2, r3
 8004496:	dbe8      	blt.n	800446a <unpack_signals+0x6e>

    /* signals are in reverse order in the data buffer */
    for (i = profile->number_of_signals - 1, j = 0; i >= 0; i -= 1, j += 1) {
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	891b      	ldrh	r3, [r3, #8]
 800449c:	3b01      	subs	r3, #1
 800449e:	b29b      	uxth	r3, r3
 80044a0:	83fb      	strh	r3, [r7, #30]
 80044a2:	2300      	movs	r3, #0
 80044a4:	83bb      	strh	r3, [r7, #28]
 80044a6:	e045      	b.n	8004534 <unpack_signals+0x138>
        signal = profile->signals[profile->number_of_signals - i - 1];
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	891b      	ldrh	r3, [r3, #8]
 80044b0:	4619      	mov	r1, r3
 80044b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044b6:	1acb      	subs	r3, r1, r3
 80044b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044bc:	3b01      	subs	r3, #1
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
        value = be16_to_cpu(word_buf[i]);
 80044c6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	b21a      	sxth	r2, r3
 80044d4:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	b21b      	sxth	r3, r3
 80044e4:	4313      	orrs	r3, r2
 80044e6:	b21b      	sxth	r3, r3
 80044e8:	817b      	strh	r3, [r7, #10]

        if (signal->conversion_function != NULL)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d010      	beq.n	8004514 <unpack_signals+0x118>
            client_data.word_buf[j] = signal->conversion_function(value);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80044fa:	897a      	ldrh	r2, [r7, #10]
 80044fc:	4610      	mov	r0, r2
 80044fe:	4798      	blx	r3
 8004500:	4603      	mov	r3, r0
 8004502:	4619      	mov	r1, r3
 8004504:	4a10      	ldr	r2, [pc, #64]	@ (8004548 <unpack_signals+0x14c>)
 8004506:	f104 030c 	add.w	r3, r4, #12
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	460a      	mov	r2, r1
 8004510:	809a      	strh	r2, [r3, #4]
 8004512:	e007      	b.n	8004524 <unpack_signals+0x128>
        else
            client_data.word_buf[j] = value;
 8004514:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004518:	4a0b      	ldr	r2, [pc, #44]	@ (8004548 <unpack_signals+0x14c>)
 800451a:	330c      	adds	r3, #12
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4413      	add	r3, r2
 8004520:	897a      	ldrh	r2, [r7, #10]
 8004522:	809a      	strh	r2, [r3, #4]
    for (i = profile->number_of_signals - 1, j = 0; i >= 0; i -= 1, j += 1) {
 8004524:	8bfb      	ldrh	r3, [r7, #30]
 8004526:	3b01      	subs	r3, #1
 8004528:	b29b      	uxth	r3, r3
 800452a:	83fb      	strh	r3, [r7, #30]
 800452c:	8bbb      	ldrh	r3, [r7, #28]
 800452e:	3301      	adds	r3, #1
 8004530:	b29b      	uxth	r3, r3
 8004532:	83bb      	strh	r3, [r7, #28]
 8004534:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004538:	2b00      	cmp	r3, #0
 800453a:	dab5      	bge.n	80044a8 <unpack_signals+0xac>
 800453c:	46b5      	mov	sp, r6
    }
}
 800453e:	bf00      	nop
 8004540:	3724      	adds	r7, #36	@ 0x24
 8004542:	46bd      	mov	sp, r7
 8004544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004548:	200026b0 	.word	0x200026b0

0800454c <read_measurement>:
/**
 * read_measurement() - reads the result of a profile measurement
 *
 * Return:  Length of the written data to the buffer. Negative if it fails.
 */
static s16 read_measurement(const struct sgp_profile *profile) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]

    s16 ret;

    switch (client_data.current_state) {
 8004554:	4b10      	ldr	r3, [pc, #64]	@ (8004598 <read_measurement+0x4c>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d116      	bne.n	800458a <read_measurement+0x3e>

        case MEASURING_PROFILE_STATE:
            ret = sgp_i2c_read_words(client_data.word_buf,
                                     profile->number_of_signals);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	891b      	ldrh	r3, [r3, #8]
            ret = sgp_i2c_read_words(client_data.word_buf,
 8004560:	4619      	mov	r1, r3
 8004562:	480e      	ldr	r0, [pc, #56]	@ (800459c <read_measurement+0x50>)
 8004564:	f7ff feae 	bl	80042c4 <sgp_i2c_read_words>
 8004568:	4603      	mov	r3, r0
 800456a:	81fb      	strh	r3, [r7, #14]

            if (ret)
 800456c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <read_measurement+0x2e>
                /* Measurement in progress */
                return STATUS_FAIL;
 8004574:	f04f 33ff 	mov.w	r3, #4294967295
 8004578:	e009      	b.n	800458e <read_measurement+0x42>

            unpack_signals(profile);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff ff3e 	bl	80043fc <unpack_signals>
            client_data.current_state = WAIT_STATE;
 8004580:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <read_measurement+0x4c>)
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]

            return STATUS_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e001      	b.n	800458e <read_measurement+0x42>

        default:
            /* No command issued */
            return STATUS_FAIL;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	200026b0 	.word	0x200026b0
 800459c:	200026cc 	.word	0x200026cc

080045a0 <sgp_i2c_read_words_from_cmd>:
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_i2c_read_words_from_cmd(const sgp_command *cmd,
                                       u32 duration_us,
                                       u16 *data_words,
                                       u16 num_words) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	807b      	strh	r3, [r7, #2]

    if (sgp_i2c_write(cmd) == STATUS_FAIL)
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff ff0b 	bl	80043ca <sgp_i2c_write>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ba:	d102      	bne.n	80045c2 <sgp_i2c_read_words_from_cmd+0x22>
        return STATUS_FAIL;
 80045bc:	f04f 33ff 	mov.w	r3, #4294967295
 80045c0:	e008      	b.n	80045d4 <sgp_i2c_read_words_from_cmd+0x34>

    /* the chip needs some time to write the data into the RAM */
    sensirion_sleep_usec(duration_us);
 80045c2:	68b8      	ldr	r0, [r7, #8]
 80045c4:	f7ff fe64 	bl	8004290 <sensirion_sleep_usec>
    return sgp_i2c_read_words(data_words, num_words);
 80045c8:	887b      	ldrh	r3, [r7, #2]
 80045ca:	4619      	mov	r1, r3
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff fe79 	bl	80042c4 <sgp_i2c_read_words>
 80045d2:	4603      	mov	r3, r0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <sgp_run_profile>:
 * sgp_run_profile() - run a profile and read write its return to client_data
 * @profile     A pointer to the profile
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_run_profile(const struct sgp_profile *profile) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
    u32 duration_us = profile->duration_us + 5;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3305      	adds	r3, #5
 80045ea:	60fb      	str	r3, [r7, #12]

    if (sgp_i2c_write(&profile->command) == STATUS_FAIL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	330c      	adds	r3, #12
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff feea 	bl	80043ca <sgp_i2c_write>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d102      	bne.n	8004604 <sgp_run_profile+0x28>
        return STATUS_FAIL;
 80045fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004602:	e00f      	b.n	8004624 <sgp_run_profile+0x48>

    sensirion_sleep_usec(duration_us);
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7ff fe43 	bl	8004290 <sensirion_sleep_usec>

    if (profile->number_of_signals > 0) {
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	891b      	ldrh	r3, [r3, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d007      	beq.n	8004622 <sgp_run_profile+0x46>
        client_data.current_state = MEASURING_PROFILE_STATE;
 8004612:	4b06      	ldr	r3, [pc, #24]	@ (800462c <sgp_run_profile+0x50>)
 8004614:	2201      	movs	r2, #1
 8004616:	701a      	strb	r2, [r3, #0]
        return read_measurement(profile);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff ff97 	bl	800454c <read_measurement>
 800461e:	4603      	mov	r3, r0
 8004620:	e000      	b.n	8004624 <sgp_run_profile+0x48>
    }

    return STATUS_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	200026b0 	.word	0x200026b0

08004630 <sgp_get_profile_by_number>:
 * sgp_get_profile_by_number() - get a profile by its identifier number
 * @number      The number that identifies the profile
 *
 * Return:      A pointer to the profile or NULL if the profile does not exists
 */
static const struct sgp_profile *sgp_get_profile_by_number(u16 number) {
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	80fb      	strh	r3, [r7, #6]
    u8 i;
    const struct sgp_profile *profile = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < client_data.otp_features->number_of_profiles; i++) {
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]
 8004642:	e010      	b.n	8004666 <sgp_get_profile_by_number+0x36>
        profile = client_data.otp_features->profiles[i];
 8004644:	4b14      	ldr	r3, [pc, #80]	@ (8004698 <sgp_get_profile_by_number+0x68>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60bb      	str	r3, [r7, #8]
        if (number == profile->number)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	7a9b      	ldrb	r3, [r3, #10]
 8004658:	461a      	mov	r2, r3
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	4293      	cmp	r3, r2
 800465e:	d00a      	beq.n	8004676 <sgp_get_profile_by_number+0x46>
    for (i = 0; i < client_data.otp_features->number_of_profiles; i++) {
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	3301      	adds	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	b29a      	uxth	r2, r3
 800466a:	4b0b      	ldr	r3, [pc, #44]	@ (8004698 <sgp_get_profile_by_number+0x68>)
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	889b      	ldrh	r3, [r3, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d3e7      	bcc.n	8004644 <sgp_get_profile_by_number+0x14>
 8004674:	e000      	b.n	8004678 <sgp_get_profile_by_number+0x48>
            break;
 8004676:	bf00      	nop
    }

    if (i == client_data.otp_features->number_of_profiles) {
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	b29a      	uxth	r2, r3
 800467c:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <sgp_get_profile_by_number+0x68>)
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	889b      	ldrh	r3, [r3, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	d101      	bne.n	800468a <sgp_get_profile_by_number+0x5a>
        return NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	e000      	b.n	800468c <sgp_get_profile_by_number+0x5c>
    }

    return profile;
 800468a:	68bb      	ldr	r3, [r7, #8]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	200026b0 	.word	0x200026b0

0800469c <sgp_run_profile_by_number>:
 * sgp_run_profile_by_number() - run a profile by its identifier number
 * @number:     The number that identifies the profile
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_run_profile_by_number(u16 number) {
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	80fb      	strh	r3, [r7, #6]
    const struct sgp_profile *profile;

    profile = sgp_get_profile_by_number(number);
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ffc1 	bl	8004630 <sgp_get_profile_by_number>
 80046ae:	60f8      	str	r0, [r7, #12]
    if (profile == NULL)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d102      	bne.n	80046bc <sgp_run_profile_by_number+0x20>
        return STATUS_FAIL;
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ba:	e00a      	b.n	80046d2 <sgp_run_profile_by_number+0x36>

    if (sgp_run_profile(profile) == STATUS_FAIL)
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff ff8d 	bl	80045dc <sgp_run_profile>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d102      	bne.n	80046d0 <sgp_run_profile_by_number+0x34>
        return STATUS_FAIL;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
 80046ce:	e000      	b.n	80046d2 <sgp_run_profile_by_number+0x36>

    return STATUS_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <sgp_detect_featureset_version>:
 *
 * @featureset:  Pointer to the featureset bits
 *
 * Return:    STATUS_OK on success
 */
static s16 sgp_detect_featureset_version(u16 *featureset) {
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
    s16 i, j;
    s16 ret = STATUS_FAIL;
 80046e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046e8:	827b      	strh	r3, [r7, #18]
    u16 feature_set_version = be16_to_cpu(*featureset);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	021b      	lsls	r3, r3, #8
 80046f0:	b21a      	sxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	b21b      	sxth	r3, r3
 80046fc:	4313      	orrs	r3, r2
 80046fe:	b21b      	sxth	r3, r3
 8004700:	823b      	strh	r3, [r7, #16]
    const struct sgp_otp_featureset *sgp_featureset;

    client_data.info.feature_set_version = feature_set_version;
 8004702:	4a36      	ldr	r2, [pc, #216]	@ (80047dc <sgp_detect_featureset_version+0x100>)
 8004704:	8a3b      	ldrh	r3, [r7, #16]
 8004706:	8213      	strh	r3, [r2, #16]
    client_data.otp_features = &sgp_features_unknown;
 8004708:	4b34      	ldr	r3, [pc, #208]	@ (80047dc <sgp_detect_featureset_version+0x100>)
 800470a:	4a35      	ldr	r2, [pc, #212]	@ (80047e0 <sgp_detect_featureset_version+0x104>)
 800470c:	619a      	str	r2, [r3, #24]
    for (i = 0; i < sgp_supported_featuresets.number_of_supported_featuresets; ++i) {
 800470e:	2300      	movs	r3, #0
 8004710:	82fb      	strh	r3, [r7, #22]
 8004712:	e054      	b.n	80047be <sgp_detect_featureset_version+0xe2>
        sgp_featureset = sgp_supported_featuresets.featuresets[i];
 8004714:	4b33      	ldr	r3, [pc, #204]	@ (80047e4 <sgp_detect_featureset_version+0x108>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < sgp_featureset->number_of_supported_featureset_versions; ++j) {
 8004724:	2300      	movs	r3, #0
 8004726:	82bb      	strh	r3, [r7, #20]
 8004728:	e03f      	b.n	80047aa <sgp_detect_featureset_version+0xce>
            if (SGP_FS_COMPAT(feature_set_version,
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800473c:	2b00      	cmp	r3, #0
 800473e:	dd0f      	ble.n	8004760 <sgp_detect_featureset_version+0x84>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	881a      	ldrh	r2, [r3, #0]
 800474e:	8a3b      	ldrh	r3, [r7, #16]
 8004750:	4053      	eors	r3, r2
 8004752:	b29b      	uxth	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	f24f 13e0 	movw	r3, #61920	@ 0xf1e0
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01a      	beq.n	8004796 <sgp_detect_featureset_version+0xba>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4413      	add	r3, r2
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d115      	bne.n	80047a2 <sgp_detect_featureset_version+0xc6>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	881a      	ldrh	r2, [r3, #0]
 8004784:	8a3b      	ldrh	r3, [r7, #16]
 8004786:	4053      	eors	r3, r2
 8004788:	b29b      	uxth	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	f24f 13ff 	movw	r3, #61951	@ 0xf1ff
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d105      	bne.n	80047a2 <sgp_detect_featureset_version+0xc6>
                              sgp_featureset->supported_featureset_versions[j])) {
                client_data.otp_features = sgp_featureset;
 8004796:	4a11      	ldr	r2, [pc, #68]	@ (80047dc <sgp_detect_featureset_version+0x100>)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6193      	str	r3, [r2, #24]
                ret = STATUS_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	827b      	strh	r3, [r7, #18]
                break;
 80047a0:	e009      	b.n	80047b6 <sgp_detect_featureset_version+0xda>
        for (j = 0; j < sgp_featureset->number_of_supported_featureset_versions; ++j) {
 80047a2:	8abb      	ldrh	r3, [r7, #20]
 80047a4:	3301      	adds	r3, #1
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	82bb      	strh	r3, [r7, #20]
 80047aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	8992      	ldrh	r2, [r2, #12]
 80047b2:	4293      	cmp	r3, r2
 80047b4:	dbb9      	blt.n	800472a <sgp_detect_featureset_version+0x4e>
    for (i = 0; i < sgp_supported_featuresets.number_of_supported_featuresets; ++i) {
 80047b6:	8afb      	ldrh	r3, [r7, #22]
 80047b8:	3301      	adds	r3, #1
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	82fb      	strh	r3, [r7, #22]
 80047be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80047c2:	4a08      	ldr	r2, [pc, #32]	@ (80047e4 <sgp_detect_featureset_version+0x108>)
 80047c4:	8892      	ldrh	r2, [r2, #4]
 80047c6:	4293      	cmp	r3, r2
 80047c8:	dba4      	blt.n	8004714 <sgp_detect_featureset_version+0x38>
            }
        }
    }
    return ret;
 80047ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	200026b0 	.word	0x200026b0
 80047e0:	080187fc 	.word	0x080187fc
 80047e4:	08018a30 	.word	0x08018a30

080047e8 <sgp_measure_iaq_blocking_read>:
 *
 * The profile is executed synchronously.
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
s16 sgp_measure_iaq_blocking_read(u16 *tvoc_ppb, u16 *co2_eq_ppm) {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
    if (sgp_run_profile_by_number(PROFILE_NUMBER_IAQ_MEASURE) == STATUS_FAIL)
 80047f2:	2001      	movs	r0, #1
 80047f4:	f7ff ff52 	bl	800469c <sgp_run_profile_by_number>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fe:	d102      	bne.n	8004806 <sgp_measure_iaq_blocking_read+0x1e>
        return STATUS_FAIL;
 8004800:	f04f 33ff 	mov.w	r3, #4294967295
 8004804:	e008      	b.n	8004818 <sgp_measure_iaq_blocking_read+0x30>

    *tvoc_ppb = client_data.word_buf[0];
 8004806:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <sgp_measure_iaq_blocking_read+0x38>)
 8004808:	8b9a      	ldrh	r2, [r3, #28]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = client_data.word_buf[1];
 800480e:	4b04      	ldr	r3, [pc, #16]	@ (8004820 <sgp_measure_iaq_blocking_read+0x38>)
 8004810:	8bda      	ldrh	r2, [r3, #30]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	801a      	strh	r2, [r3, #0]

    return STATUS_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	200026b0 	.word	0x200026b0

08004824 <sgp_measure_signals_blocking_read>:
 *                    value by 512 to get the real signal.
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
s16 sgp_measure_signals_blocking_read(u16 *scaled_ethanol_signal,
                                      u16 *scaled_h2_signal) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]

    if (sgp_run_profile_by_number(PROFILE_NUMBER_MEASURE_SIGNALS) == STATUS_FAIL)
 800482e:	4b0c      	ldr	r3, [pc, #48]	@ (8004860 <sgp_measure_signals_blocking_read+0x3c>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff ff32 	bl	800469c <sgp_run_profile_by_number>
 8004838:	4603      	mov	r3, r0
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d102      	bne.n	8004846 <sgp_measure_signals_blocking_read+0x22>
        return STATUS_FAIL;
 8004840:	f04f 33ff 	mov.w	r3, #4294967295
 8004844:	e008      	b.n	8004858 <sgp_measure_signals_blocking_read+0x34>

    *scaled_ethanol_signal = client_data.word_buf[0];
 8004846:	4b07      	ldr	r3, [pc, #28]	@ (8004864 <sgp_measure_signals_blocking_read+0x40>)
 8004848:	8b9a      	ldrh	r2, [r3, #28]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	801a      	strh	r2, [r3, #0]
    *scaled_h2_signal = client_data.word_buf[1];
 800484e:	4b05      	ldr	r3, [pc, #20]	@ (8004864 <sgp_measure_signals_blocking_read+0x40>)
 8004850:	8bda      	ldrh	r2, [r3, #30]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	801a      	strh	r2, [r3, #0]

    return STATUS_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	0801880c 	.word	0x0801880c
 8004864:	200026b0 	.word	0x200026b0

08004868 <sgp_iaq_init>:
/**
 * sgp_iaq_init() - reset the SGP's internal IAQ baselines
 *
 * Return:  STATUS_OK on success.
 */
s16 sgp_iaq_init() {
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
    return sgp_run_profile_by_number(PROFILE_NUMBER_IAQ_INIT);
 800486c:	2000      	movs	r0, #0
 800486e:	f7ff ff15 	bl	800469c <sgp_run_profile_by_number>
 8004872:	4603      	mov	r3, r0
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}

08004878 <sgp_probe>:
 *
 * This call aleady initializes the IAQ baselines (sgp_iaq_init())
 *
 * Return:  STATUS_OK on success.
 */
s16 sgp_probe() {
 8004878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
    s16 err;
    const u64 *serial_buf = (const u64 *)client_data.word_buf;
 8004880:	4b5d      	ldr	r3, [pc, #372]	@ (80049f8 <sgp_probe+0x180>)
 8004882:	607b      	str	r3, [r7, #4]

    client_data.current_state = WAIT_STATE;
 8004884:	4b5d      	ldr	r3, [pc, #372]	@ (80049fc <sgp_probe+0x184>)
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]

    /* try to read the serial ID */
    err = sgp_i2c_read_words_from_cmd(&sgp_cmd_get_serial_id,
 800488a:	2302      	movs	r3, #2
 800488c:	4a5a      	ldr	r2, [pc, #360]	@ (80049f8 <sgp_probe+0x180>)
 800488e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004892:	485b      	ldr	r0, [pc, #364]	@ (8004a00 <sgp_probe+0x188>)
 8004894:	f7ff fe84 	bl	80045a0 <sgp_i2c_read_words_from_cmd>
 8004898:	4603      	mov	r3, r0
 800489a:	807b      	strh	r3, [r7, #2]
                                      SGP_CMD_GET_SERIAL_ID_DURATION_US,
                                      client_data.word_buf,
                                      SGP_CMD_GET_SERIAL_ID_WORDS);
    if (err == STATUS_FAIL)
 800489c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a4:	d102      	bne.n	80048ac <sgp_probe+0x34>
        return err;
 80048a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048aa:	e09f      	b.n	80049ec <sgp_probe+0x174>

    client_data.info.serial_id = be64_to_cpu(*serial_buf) >> 16;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	b293      	uxth	r3, r2
 80048b4:	0219      	lsls	r1, r3, #8
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	b293      	uxth	r3, r2
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	430b      	orrs	r3, r1
 80048c4:	041e      	lsls	r6, r3, #16
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	0c02      	lsrs	r2, r0, #16
 80048d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80048da:	0c0b      	lsrs	r3, r1, #16
 80048dc:	b293      	uxth	r3, r2
 80048de:	ea4f 2c03 	mov.w	ip, r3, lsl #8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	0c02      	lsrs	r2, r0, #16
 80048f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80048f6:	0c0b      	lsrs	r3, r1, #16
 80048f8:	b293      	uxth	r3, r2
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	ea4c 0303 	orr.w	r3, ip, r3
 8004902:	b29b      	uxth	r3, r3
 8004904:	4333      	orrs	r3, r6
 8004906:	2200      	movs	r2, #0
 8004908:	469a      	mov	sl, r3
 800490a:	4693      	mov	fp, r2
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	4653      	mov	r3, sl
 8004916:	2200      	movs	r2, #0
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	e9d1 ab00 	ldrd	sl, fp, [r1]
 800491e:	f04f 0000 	mov.w	r0, #0
 8004922:	f04f 0100 	mov.w	r1, #0
 8004926:	4658      	mov	r0, fp
 8004928:	2100      	movs	r1, #0
 800492a:	b281      	uxth	r1, r0
 800492c:	020e      	lsls	r6, r1, #8
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8004934:	f04f 0000 	mov.w	r0, #0
 8004938:	f04f 0100 	mov.w	r1, #0
 800493c:	4658      	mov	r0, fp
 800493e:	2100      	movs	r1, #0
 8004940:	b281      	uxth	r1, r0
 8004942:	0a09      	lsrs	r1, r1, #8
 8004944:	b289      	uxth	r1, r1
 8004946:	4331      	orrs	r1, r6
 8004948:	040e      	lsls	r6, r1, #16
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8004950:	f04f 0000 	mov.w	r0, #0
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	ea4f 401b 	mov.w	r0, fp, lsr #16
 800495c:	2100      	movs	r1, #0
 800495e:	b281      	uxth	r1, r0
 8004960:	ea4f 2c01 	mov.w	ip, r1, lsl #8
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	e9d1 ab00 	ldrd	sl, fp, [r1]
 800496a:	f04f 0000 	mov.w	r0, #0
 800496e:	f04f 0100 	mov.w	r1, #0
 8004972:	ea4f 401b 	mov.w	r0, fp, lsr #16
 8004976:	2100      	movs	r1, #0
 8004978:	b281      	uxth	r1, r0
 800497a:	0a09      	lsrs	r1, r1, #8
 800497c:	b289      	uxth	r1, r1
 800497e:	ea4c 0101 	orr.w	r1, ip, r1
 8004982:	b289      	uxth	r1, r1
 8004984:	4331      	orrs	r1, r6
 8004986:	2000      	movs	r0, #0
 8004988:	4688      	mov	r8, r1
 800498a:	4681      	mov	r9, r0
 800498c:	ea42 0408 	orr.w	r4, r2, r8
 8004990:	ea43 0509 	orr.w	r5, r3, r9
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	0c22      	lsrs	r2, r4, #16
 800499e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80049a2:	0c2b      	lsrs	r3, r5, #16
 80049a4:	4915      	ldr	r1, [pc, #84]	@ (80049fc <sgp_probe+0x184>)
 80049a6:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* read the featureset version */
    err = sgp_i2c_read_words_from_cmd(&sgp_cmd_get_featureset,
 80049aa:	2301      	movs	r3, #1
 80049ac:	4a12      	ldr	r2, [pc, #72]	@ (80049f8 <sgp_probe+0x180>)
 80049ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80049b2:	4814      	ldr	r0, [pc, #80]	@ (8004a04 <sgp_probe+0x18c>)
 80049b4:	f7ff fdf4 	bl	80045a0 <sgp_i2c_read_words_from_cmd>
 80049b8:	4603      	mov	r3, r0
 80049ba:	807b      	strh	r3, [r7, #2]
                                      SGP_CMD_GET_FEATURESET_DURATION_US,
                                      client_data.word_buf,
                                      SGP_CMD_GET_FEATURESET_WORDS);
    if (err == STATUS_FAIL)
 80049bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d102      	bne.n	80049cc <sgp_probe+0x154>
        return STATUS_FAIL;
 80049c6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ca:	e00f      	b.n	80049ec <sgp_probe+0x174>

    err = sgp_detect_featureset_version(client_data.word_buf);
 80049cc:	480a      	ldr	r0, [pc, #40]	@ (80049f8 <sgp_probe+0x180>)
 80049ce:	f7ff fe85 	bl	80046dc <sgp_detect_featureset_version>
 80049d2:	4603      	mov	r3, r0
 80049d4:	807b      	strh	r3, [r7, #2]
    if (err == STATUS_FAIL)
 80049d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049de:	d102      	bne.n	80049e6 <sgp_probe+0x16e>
        return STATUS_FAIL;
 80049e0:	f04f 33ff 	mov.w	r3, #4294967295
 80049e4:	e002      	b.n	80049ec <sgp_probe+0x174>

    return sgp_iaq_init();
 80049e6:	f7ff ff3f 	bl	8004868 <sgp_iaq_init>
 80049ea:	4603      	mov	r3, r0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f6:	bf00      	nop
 80049f8:	200026cc 	.word	0x200026cc
 80049fc:	200026b0 	.word	0x200026b0
 8004a00:	080187f4 	.word	0x080187f4
 8004a04:	080187f8 	.word	0x080187f8

08004a08 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2102      	movs	r1, #2
 8004a10:	4802      	ldr	r0, [pc, #8]	@ (8004a1c <ST7735_Select+0x14>)
 8004a12:	f001 fceb 	bl	80063ec <HAL_GPIO_WritePin>
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40020000 	.word	0x40020000

08004a20 <ST7735_Unselect>:

void ST7735_Unselect() {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8004a24:	2201      	movs	r2, #1
 8004a26:	2102      	movs	r1, #2
 8004a28:	4802      	ldr	r0, [pc, #8]	@ (8004a34 <ST7735_Unselect+0x14>)
 8004a2a:	f001 fcdf 	bl	80063ec <HAL_GPIO_WritePin>
}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40020000 	.word	0x40020000

08004a38 <ST7735_Reset>:

static void ST7735_Reset() {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2108      	movs	r1, #8
 8004a40:	4806      	ldr	r0, [pc, #24]	@ (8004a5c <ST7735_Reset+0x24>)
 8004a42:	f001 fcd3 	bl	80063ec <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8004a46:	2005      	movs	r0, #5
 8004a48:	f000 fb4c 	bl	80050e4 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	2108      	movs	r1, #8
 8004a50:	4802      	ldr	r0, [pc, #8]	@ (8004a5c <ST7735_Reset+0x24>)
 8004a52:	f001 fccb 	bl	80063ec <HAL_GPIO_WritePin>
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40020000 	.word	0x40020000

08004a60 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2104      	movs	r1, #4
 8004a6e:	4807      	ldr	r0, [pc, #28]	@ (8004a8c <ST7735_WriteCommand+0x2c>)
 8004a70:	f001 fcbc 	bl	80063ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8004a74:	1df9      	adds	r1, r7, #7
 8004a76:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	4804      	ldr	r0, [pc, #16]	@ (8004a90 <ST7735_WriteCommand+0x30>)
 8004a7e:	f005 f9ec 	bl	8009e5a <HAL_SPI_Transmit>
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40020000 	.word	0x40020000
 8004a90:	20002508 	.word	0x20002508

08004a94 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	2104      	movs	r1, #4
 8004aa2:	4807      	ldr	r0, [pc, #28]	@ (8004ac0 <ST7735_WriteData+0x2c>)
 8004aa4:	f001 fca2 	bl	80063ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4804      	ldr	r0, [pc, #16]	@ (8004ac4 <ST7735_WriteData+0x30>)
 8004ab4:	f005 f9d1 	bl	8009e5a <HAL_SPI_Transmit>
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40020000 	.word	0x40020000
 8004ac4:	20002508 	.word	0x20002508

08004ac8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8004ada:	e034      	b.n	8004b46 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8004ae6:	7afb      	ldrb	r3, [r7, #11]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ffb9 	bl	8004a60 <ST7735_WriteCommand>

        numArgs = *addr++;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8004af8:	7abb      	ldrb	r3, [r7, #10]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b00:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8004b02:	7abb      	ldrb	r3, [r7, #10]
 8004b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b08:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8004b0a:	7abb      	ldrb	r3, [r7, #10]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8004b10:	7abb      	ldrb	r3, [r7, #10]
 8004b12:	4619      	mov	r1, r3
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff ffbd 	bl	8004a94 <ST7735_WriteData>
            addr += numArgs;
 8004b1a:	7abb      	ldrb	r3, [r7, #10]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	4413      	add	r3, r2
 8004b20:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8004b22:	89bb      	ldrh	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00e      	beq.n	8004b46 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8004b32:	89bb      	ldrh	r3, [r7, #12]
 8004b34:	2bff      	cmp	r3, #255	@ 0xff
 8004b36:	d102      	bne.n	8004b3e <ST7735_ExecuteCommandList+0x76>
 8004b38:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004b3c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8004b3e:	89bb      	ldrh	r3, [r7, #12]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 facf 	bl	80050e4 <HAL_Delay>
    while(numCommands--) {
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	1e5a      	subs	r2, r3, #1
 8004b4a:	73fa      	strb	r2, [r7, #15]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1c5      	bne.n	8004adc <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8004b5a:	b590      	push	{r4, r7, lr}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	4604      	mov	r4, r0
 8004b62:	4608      	mov	r0, r1
 8004b64:	4611      	mov	r1, r2
 8004b66:	461a      	mov	r2, r3
 8004b68:	4623      	mov	r3, r4
 8004b6a:	71fb      	strb	r3, [r7, #7]
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	71bb      	strb	r3, [r7, #6]
 8004b70:	460b      	mov	r3, r1
 8004b72:	717b      	strb	r3, [r7, #5]
 8004b74:	4613      	mov	r3, r2
 8004b76:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8004b78:	202a      	movs	r0, #42	@ 0x2a
 8004b7a:	f7ff ff71 	bl	8004a60 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8004b7e:	2300      	movs	r3, #0
 8004b80:	733b      	strb	r3, [r7, #12]
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	737b      	strb	r3, [r7, #13]
 8004b86:	2300      	movs	r3, #0
 8004b88:	73bb      	strb	r3, [r7, #14]
 8004b8a:	797b      	ldrb	r3, [r7, #5]
 8004b8c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8004b8e:	f107 030c 	add.w	r3, r7, #12
 8004b92:	2104      	movs	r1, #4
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff ff7d 	bl	8004a94 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8004b9a:	202b      	movs	r0, #43	@ 0x2b
 8004b9c:	f7ff ff60 	bl	8004a60 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8004ba0:	79bb      	ldrb	r3, [r7, #6]
 8004ba2:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8004ba4:	793b      	ldrb	r3, [r7, #4]
 8004ba6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8004ba8:	f107 030c 	add.w	r3, r7, #12
 8004bac:	2104      	movs	r1, #4
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff ff70 	bl	8004a94 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8004bb4:	202c      	movs	r0, #44	@ 0x2c
 8004bb6:	f7ff ff53 	bl	8004a60 <ST7735_WriteCommand>
}
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd90      	pop	{r4, r7, pc}
	...

08004bc4 <ST7735_Init>:

void ST7735_Init() {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
    ST7735_Select();
 8004bc8:	f7ff ff1e 	bl	8004a08 <ST7735_Select>
    ST7735_Reset();
 8004bcc:	f7ff ff34 	bl	8004a38 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8004bd0:	4806      	ldr	r0, [pc, #24]	@ (8004bec <ST7735_Init+0x28>)
 8004bd2:	f7ff ff79 	bl	8004ac8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8004bd6:	4806      	ldr	r0, [pc, #24]	@ (8004bf0 <ST7735_Init+0x2c>)
 8004bd8:	f7ff ff76 	bl	8004ac8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8004bdc:	4805      	ldr	r0, [pc, #20]	@ (8004bf4 <ST7735_Init+0x30>)
 8004bde:	f7ff ff73 	bl	8004ac8 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8004be2:	f7ff ff1d 	bl	8004a20 <ST7735_Unselect>
}
 8004be6:	bf00      	nop
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	08018a38 	.word	0x08018a38
 8004bf0:	08018a74 	.word	0x08018a74
 8004bf4:	08018a84 	.word	0x08018a84

08004bf8 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	b590      	push	{r4, r7, lr}
 8004bfc:	b089      	sub	sp, #36	@ 0x24
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c02:	4603      	mov	r3, r0
 8004c04:	80fb      	strh	r3, [r7, #6]
 8004c06:	460b      	mov	r3, r1
 8004c08:	80bb      	strh	r3, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	b2d8      	uxtb	r0, r3
 8004c12:	88bb      	ldrh	r3, [r7, #4]
 8004c14:	b2d9      	uxtb	r1, r3
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004c1e:	4413      	add	r3, r2
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b2dc      	uxtb	r4, r3
 8004c26:	88bb      	ldrh	r3, [r7, #4]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004c2e:	4413      	add	r3, r2
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	4622      	mov	r2, r4
 8004c38:	f7ff ff8f 	bl	8004b5a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e043      	b.n	8004cca <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8004c42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	3b20      	subs	r3, #32
 8004c48:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	4619      	mov	r1, r3
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	440b      	add	r3, r1
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	4413      	add	r3, r2
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e029      	b.n	8004cb8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00e      	beq.n	8004c92 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8004c74:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	743b      	strb	r3, [r7, #16]
 8004c7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8004c84:	f107 0310 	add.w	r3, r7, #16
 8004c88:	2102      	movs	r1, #2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff ff02 	bl	8004a94 <ST7735_WriteData>
 8004c90:	e00f      	b.n	8004cb2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8004c92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	733b      	strb	r3, [r7, #12]
 8004c9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8004ca6:	f107 030c 	add.w	r3, r7, #12
 8004caa:	2102      	movs	r1, #2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fef1 	bl	8004a94 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d3cf      	bcc.n	8004c64 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004cce:	461a      	mov	r2, r3
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d3b5      	bcc.n	8004c42 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	3724      	adds	r7, #36	@ 0x24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004ce2:	b002      	add	sp, #8
 8004ce4:	4770      	bx	lr

08004ce6 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af04      	add	r7, sp, #16
 8004cee:	603a      	str	r2, [r7, #0]
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	80fb      	strh	r3, [r7, #6]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8004cfa:	f7ff fe85 	bl	8004a08 <ST7735_Select>

    while(*str) {
 8004cfe:	e02d      	b.n	8004d5c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	7d3a      	ldrb	r2, [r7, #20]
 8004d04:	4413      	add	r3, r2
 8004d06:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d08:	dd13      	ble.n	8004d32 <ST7735_WriteString+0x4c>
            x = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8004d0e:	7d7b      	ldrb	r3, [r7, #21]
 8004d10:	461a      	mov	r2, r3
 8004d12:	88bb      	ldrh	r3, [r7, #4]
 8004d14:	4413      	add	r3, r2
 8004d16:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8004d18:	88bb      	ldrh	r3, [r7, #4]
 8004d1a:	7d7a      	ldrb	r2, [r7, #21]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	2b9f      	cmp	r3, #159	@ 0x9f
 8004d20:	dc21      	bgt.n	8004d66 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d103      	bne.n	8004d32 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	603b      	str	r3, [r7, #0]
                continue;
 8004d30:	e014      	b.n	8004d5c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781a      	ldrb	r2, [r3, #0]
 8004d36:	88b9      	ldrh	r1, [r7, #4]
 8004d38:	88f8      	ldrh	r0, [r7, #6]
 8004d3a:	8c3b      	ldrh	r3, [r7, #32]
 8004d3c:	9302      	str	r3, [sp, #8]
 8004d3e:	8bbb      	ldrh	r3, [r7, #28]
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f7ff ff56 	bl	8004bf8 <ST7735_WriteChar>
        x += font.width;
 8004d4c:	7d3b      	ldrb	r3, [r7, #20]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	4413      	add	r3, r2
 8004d54:	80fb      	strh	r3, [r7, #6]
        str++;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	603b      	str	r3, [r7, #0]
    while(*str) {
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1cd      	bne.n	8004d00 <ST7735_WriteString+0x1a>
 8004d64:	e000      	b.n	8004d68 <ST7735_WriteString+0x82>
                break;
 8004d66:	bf00      	nop
    }

    ST7735_Unselect();
 8004d68:	f7ff fe5a 	bl	8004a20 <ST7735_Unselect>
}
 8004d6c:	bf00      	nop
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d76:	b002      	add	sp, #8
 8004d78:	4770      	bx	lr
	...

08004d7c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4604      	mov	r4, r0
 8004d84:	4608      	mov	r0, r1
 8004d86:	4611      	mov	r1, r2
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	80fb      	strh	r3, [r7, #6]
 8004d8e:	4603      	mov	r3, r0
 8004d90:	80bb      	strh	r3, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	807b      	strh	r3, [r7, #2]
 8004d96:	4613      	mov	r3, r2
 8004d98:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d9e:	d857      	bhi.n	8004e50 <ST7735_FillRectangle+0xd4>
 8004da0:	88bb      	ldrh	r3, [r7, #4]
 8004da2:	2b9f      	cmp	r3, #159	@ 0x9f
 8004da4:	d854      	bhi.n	8004e50 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8004da6:	88fa      	ldrh	r2, [r7, #6]
 8004da8:	887b      	ldrh	r3, [r7, #2]
 8004daa:	4413      	add	r3, r2
 8004dac:	2b80      	cmp	r3, #128	@ 0x80
 8004dae:	dd03      	ble.n	8004db8 <ST7735_FillRectangle+0x3c>
 8004db0:	88fb      	ldrh	r3, [r7, #6]
 8004db2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8004db6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8004db8:	88ba      	ldrh	r2, [r7, #4]
 8004dba:	883b      	ldrh	r3, [r7, #0]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	2ba0      	cmp	r3, #160	@ 0xa0
 8004dc0:	dd03      	ble.n	8004dca <ST7735_FillRectangle+0x4e>
 8004dc2:	88bb      	ldrh	r3, [r7, #4]
 8004dc4:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8004dc8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8004dca:	f7ff fe1d 	bl	8004a08 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	b2d8      	uxtb	r0, r3
 8004dd2:	88bb      	ldrh	r3, [r7, #4]
 8004dd4:	b2d9      	uxtb	r1, r3
 8004dd6:	88fb      	ldrh	r3, [r7, #6]
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	887b      	ldrh	r3, [r7, #2]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	4413      	add	r3, r2
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b2dc      	uxtb	r4, r3
 8004de6:	88bb      	ldrh	r3, [r7, #4]
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	883b      	ldrh	r3, [r7, #0]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	4413      	add	r3, r2
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	4622      	mov	r2, r4
 8004df8:	f7ff feaf 	bl	8004b5a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8004dfc:	8c3b      	ldrh	r3, [r7, #32]
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	733b      	strb	r3, [r7, #12]
 8004e06:	8c3b      	ldrh	r3, [r7, #32]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	2104      	movs	r1, #4
 8004e10:	4811      	ldr	r0, [pc, #68]	@ (8004e58 <ST7735_FillRectangle+0xdc>)
 8004e12:	f001 faeb 	bl	80063ec <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8004e16:	883b      	ldrh	r3, [r7, #0]
 8004e18:	80bb      	strh	r3, [r7, #4]
 8004e1a:	e013      	b.n	8004e44 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8004e1c:	887b      	ldrh	r3, [r7, #2]
 8004e1e:	80fb      	strh	r3, [r7, #6]
 8004e20:	e00a      	b.n	8004e38 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8004e22:	f107 010c 	add.w	r1, r7, #12
 8004e26:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	480b      	ldr	r0, [pc, #44]	@ (8004e5c <ST7735_FillRectangle+0xe0>)
 8004e2e:	f005 f814 	bl	8009e5a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	80fb      	strh	r3, [r7, #6]
 8004e38:	88fb      	ldrh	r3, [r7, #6]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f1      	bne.n	8004e22 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8004e3e:	88bb      	ldrh	r3, [r7, #4]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	80bb      	strh	r3, [r7, #4]
 8004e44:	88bb      	ldrh	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e8      	bne.n	8004e1c <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8004e4a:	f7ff fde9 	bl	8004a20 <ST7735_Unselect>
 8004e4e:	e000      	b.n	8004e52 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8004e50:	bf00      	nop
}
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd90      	pop	{r4, r7, pc}
 8004e58:	40020000 	.word	0x40020000
 8004e5c:	20002508 	.word	0x20002508

08004e60 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4604      	mov	r4, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4623      	mov	r3, r4
 8004e70:	80fb      	strh	r3, [r7, #6]
 8004e72:	4603      	mov	r3, r0
 8004e74:	80bb      	strh	r3, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	807b      	strh	r3, [r7, #2]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e82:	d869      	bhi.n	8004f58 <ST7735_FillRectangleFast+0xf8>
 8004e84:	88bb      	ldrh	r3, [r7, #4]
 8004e86:	2b9f      	cmp	r3, #159	@ 0x9f
 8004e88:	d866      	bhi.n	8004f58 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8004e8a:	88fa      	ldrh	r2, [r7, #6]
 8004e8c:	887b      	ldrh	r3, [r7, #2]
 8004e8e:	4413      	add	r3, r2
 8004e90:	2b80      	cmp	r3, #128	@ 0x80
 8004e92:	dd03      	ble.n	8004e9c <ST7735_FillRectangleFast+0x3c>
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8004e9a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8004e9c:	88ba      	ldrh	r2, [r7, #4]
 8004e9e:	883b      	ldrh	r3, [r7, #0]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	2ba0      	cmp	r3, #160	@ 0xa0
 8004ea4:	dd03      	ble.n	8004eae <ST7735_FillRectangleFast+0x4e>
 8004ea6:	88bb      	ldrh	r3, [r7, #4]
 8004ea8:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8004eac:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8004eae:	f7ff fdab 	bl	8004a08 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	b2d8      	uxtb	r0, r3
 8004eb6:	88bb      	ldrh	r3, [r7, #4]
 8004eb8:	b2d9      	uxtb	r1, r3
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	887b      	ldrh	r3, [r7, #2]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b2dc      	uxtb	r4, r3
 8004eca:	88bb      	ldrh	r3, [r7, #4]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	883b      	ldrh	r3, [r7, #0]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	4622      	mov	r2, r4
 8004edc:	f7ff fe3d 	bl	8004b5a <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8004ee0:	8c3b      	ldrh	r3, [r7, #32]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	723b      	strb	r3, [r7, #8]
 8004eea:	8c3b      	ldrh	r3, [r7, #32]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8004ef0:	887b      	ldrh	r3, [r7, #2]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f00e f9d3 	bl	80132a0 <malloc>
 8004efa:	4603      	mov	r3, r0
 8004efc:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8004efe:	2300      	movs	r3, #0
 8004f00:	80fb      	strh	r3, [r7, #6]
 8004f02:	e008      	b.n	8004f16 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	893a      	ldrh	r2, [r7, #8]
 8004f0e:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8004f10:	88fb      	ldrh	r3, [r7, #6]
 8004f12:	3301      	adds	r3, #1
 8004f14:	80fb      	strh	r3, [r7, #6]
 8004f16:	88fa      	ldrh	r2, [r7, #6]
 8004f18:	887b      	ldrh	r3, [r7, #2]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d3f2      	bcc.n	8004f04 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8004f1e:	2201      	movs	r2, #1
 8004f20:	2104      	movs	r1, #4
 8004f22:	480f      	ldr	r0, [pc, #60]	@ (8004f60 <ST7735_FillRectangleFast+0x100>)
 8004f24:	f001 fa62 	bl	80063ec <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8004f28:	883b      	ldrh	r3, [r7, #0]
 8004f2a:	80bb      	strh	r3, [r7, #4]
 8004f2c:	e00b      	b.n	8004f46 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8004f2e:	887b      	ldrh	r3, [r7, #2]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	f04f 33ff 	mov.w	r3, #4294967295
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	480a      	ldr	r0, [pc, #40]	@ (8004f64 <ST7735_FillRectangleFast+0x104>)
 8004f3c:	f004 ff8d 	bl	8009e5a <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8004f40:	88bb      	ldrh	r3, [r7, #4]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	80bb      	strh	r3, [r7, #4]
 8004f46:	88bb      	ldrh	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f0      	bne.n	8004f2e <ST7735_FillRectangleFast+0xce>

    free(line);
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f00e f9af 	bl	80132b0 <free>
    ST7735_Unselect();
 8004f52:	f7ff fd65 	bl	8004a20 <ST7735_Unselect>
 8004f56:	e000      	b.n	8004f5a <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8004f58:	bf00      	nop
}
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd90      	pop	{r4, r7, pc}
 8004f60:	40020000 	.word	0x40020000
 8004f64:	20002508 	.word	0x20002508

08004f68 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	4603      	mov	r3, r0
 8004f70:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	23a0      	movs	r3, #160	@ 0xa0
 8004f78:	2280      	movs	r2, #128	@ 0x80
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f7ff fefd 	bl	8004d7c <ST7735_FillRectangle>
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af02      	add	r7, sp, #8
 8004f90:	4603      	mov	r3, r0
 8004f92:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	23a0      	movs	r3, #160	@ 0xa0
 8004f9a:	2280      	movs	r2, #128	@ 0x80
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	f7ff ff5e 	bl	8004e60 <ST7735_FillRectangleFast>
}
 8004fa4:	bf00      	nop
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004fac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004fe4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004fb0:	f7fd f9e4 	bl	800237c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004fb4:	480c      	ldr	r0, [pc, #48]	@ (8004fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004fb6:	490d      	ldr	r1, [pc, #52]	@ (8004fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8004ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fbc:	e002      	b.n	8004fc4 <LoopCopyDataInit>

08004fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fc2:	3304      	adds	r3, #4

08004fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fc8:	d3f9      	bcc.n	8004fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fca:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8004ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fd0:	e001      	b.n	8004fd6 <LoopFillZerobss>

08004fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fd4:	3204      	adds	r2, #4

08004fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fd8:	d3fb      	bcc.n	8004fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004fda:	f00f fb51 	bl	8014680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fde:	f7fc fd7f 	bl	8001ae0 <main>
  bx  lr    
 8004fe2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fec:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 8004ff0:	08019340 	.word	0x08019340
  ldr r2, =_sbss
 8004ff4:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 8004ff8:	20004c48 	.word	0x20004c48

08004ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ffc:	e7fe      	b.n	8004ffc <ADC_IRQHandler>
	...

08005000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005004:	4b0e      	ldr	r3, [pc, #56]	@ (8005040 <HAL_Init+0x40>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a0d      	ldr	r2, [pc, #52]	@ (8005040 <HAL_Init+0x40>)
 800500a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800500e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005010:	4b0b      	ldr	r3, [pc, #44]	@ (8005040 <HAL_Init+0x40>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a0a      	ldr	r2, [pc, #40]	@ (8005040 <HAL_Init+0x40>)
 8005016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800501a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800501c:	4b08      	ldr	r3, [pc, #32]	@ (8005040 <HAL_Init+0x40>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a07      	ldr	r2, [pc, #28]	@ (8005040 <HAL_Init+0x40>)
 8005022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005028:	2003      	movs	r0, #3
 800502a:	f000 fd0d 	bl	8005a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800502e:	200f      	movs	r0, #15
 8005030:	f000 f808 	bl	8005044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005034:	f7fd f838 	bl	80020a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40023c00 	.word	0x40023c00

08005044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800504c:	4b12      	ldr	r3, [pc, #72]	@ (8005098 <HAL_InitTick+0x54>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	4b12      	ldr	r3, [pc, #72]	@ (800509c <HAL_InitTick+0x58>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	4619      	mov	r1, r3
 8005056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800505a:	fbb3 f3f1 	udiv	r3, r3, r1
 800505e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fd25 	bl	8005ab2 <HAL_SYSTICK_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e00e      	b.n	8005090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b0f      	cmp	r3, #15
 8005076:	d80a      	bhi.n	800508e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005078:	2200      	movs	r2, #0
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	f04f 30ff 	mov.w	r0, #4294967295
 8005080:	f000 fced 	bl	8005a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005084:	4a06      	ldr	r2, [pc, #24]	@ (80050a0 <HAL_InitTick+0x5c>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e000      	b.n	8005090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20000000 	.word	0x20000000
 800509c:	200000d8 	.word	0x200000d8
 80050a0:	200000d4 	.word	0x200000d4

080050a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050a8:	4b06      	ldr	r3, [pc, #24]	@ (80050c4 <HAL_IncTick+0x20>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <HAL_IncTick+0x24>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4413      	add	r3, r2
 80050b4:	4a04      	ldr	r2, [pc, #16]	@ (80050c8 <HAL_IncTick+0x24>)
 80050b6:	6013      	str	r3, [r2, #0]
}
 80050b8:	bf00      	nop
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	200000d8 	.word	0x200000d8
 80050c8:	20002cd8 	.word	0x20002cd8

080050cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  return uwTick;
 80050d0:	4b03      	ldr	r3, [pc, #12]	@ (80050e0 <HAL_GetTick+0x14>)
 80050d2:	681b      	ldr	r3, [r3, #0]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	20002cd8 	.word	0x20002cd8

080050e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050ec:	f7ff ffee 	bl	80050cc <HAL_GetTick>
 80050f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d005      	beq.n	800510a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005128 <HAL_Delay+0x44>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800510a:	bf00      	nop
 800510c:	f7ff ffde 	bl	80050cc <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	429a      	cmp	r2, r3
 800511a:	d8f7      	bhi.n	800510c <HAL_Delay+0x28>
  {
  }
}
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	200000d8 	.word	0x200000d8

0800512c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e033      	b.n	80051aa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fb fff4 	bl	8001138 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005162:	f003 0310 	and.w	r3, r3, #16
 8005166:	2b00      	cmp	r3, #0
 8005168:	d118      	bne.n	800519c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005172:	f023 0302 	bic.w	r3, r3, #2
 8005176:	f043 0202 	orr.w	r2, r3, #2
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fa96 	bl	80056b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	641a      	str	r2, [r3, #64]	@ 0x40
 800519a:	e001      	b.n	80051a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_ADC_Start+0x1a>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e097      	b.n	80052fe <HAL_ADC_Start+0x14a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d018      	beq.n	8005216 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80051f4:	4b45      	ldr	r3, [pc, #276]	@ (800530c <HAL_ADC_Start+0x158>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a45      	ldr	r2, [pc, #276]	@ (8005310 <HAL_ADC_Start+0x15c>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	0c9a      	lsrs	r2, r3, #18
 8005200:	4613      	mov	r3, r2
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	4413      	add	r3, r2
 8005206:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005208:	e002      	b.n	8005210 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	3b01      	subs	r3, #1
 800520e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f9      	bne.n	800520a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b01      	cmp	r3, #1
 8005222:	d15f      	bne.n	80052e4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005228:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800524e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800525e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005262:	d106      	bne.n	8005272 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005268:	f023 0206 	bic.w	r2, r3, #6
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005270:	e002      	b.n	8005278 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005280:	4b24      	ldr	r3, [pc, #144]	@ (8005314 <HAL_ADC_Start+0x160>)
 8005282:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800528c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10f      	bne.n	80052ba <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d129      	bne.n	80052fc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80052b6:	609a      	str	r2, [r3, #8]
 80052b8:	e020      	b.n	80052fc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a16      	ldr	r2, [pc, #88]	@ (8005318 <HAL_ADC_Start+0x164>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d11b      	bne.n	80052fc <HAL_ADC_Start+0x148>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d114      	bne.n	80052fc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80052e0:	609a      	str	r2, [r3, #8]
 80052e2:	e00b      	b.n	80052fc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e8:	f043 0210 	orr.w	r2, r3, #16
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f4:	f043 0201 	orr.w	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000000 	.word	0x20000000
 8005310:	431bde83 	.word	0x431bde83
 8005314:	40012300 	.word	0x40012300
 8005318:	40012000 	.word	0x40012000

0800531c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005338:	d113      	bne.n	8005362 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005348:	d10b      	bne.n	8005362 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	f043 0220 	orr.w	r2, r3, #32
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e063      	b.n	800542a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005362:	f7ff feb3 	bl	80050cc <HAL_GetTick>
 8005366:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005368:	e021      	b.n	80053ae <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d01d      	beq.n	80053ae <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <HAL_ADC_PollForConversion+0x6c>
 8005378:	f7ff fea8 	bl	80050cc <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d212      	bcs.n	80053ae <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b02      	cmp	r3, #2
 8005394:	d00b      	beq.n	80053ae <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539a:	f043 0204 	orr.w	r2, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e03d      	b.n	800542a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d1d6      	bne.n	800536a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0212 	mvn.w	r2, #18
 80053c4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d123      	bne.n	8005428 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d11f      	bne.n	8005428 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d006      	beq.n	8005404 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005400:	2b00      	cmp	r3, #0
 8005402:	d111      	bne.n	8005428 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005408:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d105      	bne.n	8005428 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005420:	f043 0201 	orr.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005440:	4618      	mov	r0, r3
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_ADC_ConfigChannel+0x1c>
 8005464:	2302      	movs	r3, #2
 8005466:	e113      	b.n	8005690 <HAL_ADC_ConfigChannel+0x244>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b09      	cmp	r3, #9
 8005476:	d925      	bls.n	80054c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68d9      	ldr	r1, [r3, #12]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	4613      	mov	r3, r2
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	4413      	add	r3, r2
 800548c:	3b1e      	subs	r3, #30
 800548e:	2207      	movs	r2, #7
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	43da      	mvns	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	400a      	ands	r2, r1
 800549c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68d9      	ldr	r1, [r3, #12]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	4618      	mov	r0, r3
 80054b0:	4603      	mov	r3, r0
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	4403      	add	r3, r0
 80054b6:	3b1e      	subs	r3, #30
 80054b8:	409a      	lsls	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	e022      	b.n	800550a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6919      	ldr	r1, [r3, #16]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	4613      	mov	r3, r2
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	4413      	add	r3, r2
 80054d8:	2207      	movs	r2, #7
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43da      	mvns	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	400a      	ands	r2, r1
 80054e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6919      	ldr	r1, [r3, #16]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	4618      	mov	r0, r3
 80054fa:	4603      	mov	r3, r0
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4403      	add	r3, r0
 8005500:	409a      	lsls	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b06      	cmp	r3, #6
 8005510:	d824      	bhi.n	800555c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	3b05      	subs	r3, #5
 8005524:	221f      	movs	r2, #31
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43da      	mvns	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	400a      	ands	r2, r1
 8005532:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	4618      	mov	r0, r3
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	3b05      	subs	r3, #5
 800554e:	fa00 f203 	lsl.w	r2, r0, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	635a      	str	r2, [r3, #52]	@ 0x34
 800555a:	e04c      	b.n	80055f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b0c      	cmp	r3, #12
 8005562:	d824      	bhi.n	80055ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	3b23      	subs	r3, #35	@ 0x23
 8005576:	221f      	movs	r2, #31
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43da      	mvns	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	400a      	ands	r2, r1
 8005584:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	4618      	mov	r0, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	3b23      	subs	r3, #35	@ 0x23
 80055a0:	fa00 f203 	lsl.w	r2, r0, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80055ac:	e023      	b.n	80055f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	3b41      	subs	r3, #65	@ 0x41
 80055c0:	221f      	movs	r2, #31
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	43da      	mvns	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	400a      	ands	r2, r1
 80055ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	4618      	mov	r0, r3
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	3b41      	subs	r3, #65	@ 0x41
 80055ea:	fa00 f203 	lsl.w	r2, r0, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055f6:	4b29      	ldr	r3, [pc, #164]	@ (800569c <HAL_ADC_ConfigChannel+0x250>)
 80055f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a28      	ldr	r2, [pc, #160]	@ (80056a0 <HAL_ADC_ConfigChannel+0x254>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d10f      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x1d8>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b12      	cmp	r3, #18
 800560a:	d10b      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1d      	ldr	r2, [pc, #116]	@ (80056a0 <HAL_ADC_ConfigChannel+0x254>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d12b      	bne.n	8005686 <HAL_ADC_ConfigChannel+0x23a>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1c      	ldr	r2, [pc, #112]	@ (80056a4 <HAL_ADC_ConfigChannel+0x258>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d003      	beq.n	8005640 <HAL_ADC_ConfigChannel+0x1f4>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b11      	cmp	r3, #17
 800563e:	d122      	bne.n	8005686 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a11      	ldr	r2, [pc, #68]	@ (80056a4 <HAL_ADC_ConfigChannel+0x258>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d111      	bne.n	8005686 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005662:	4b11      	ldr	r3, [pc, #68]	@ (80056a8 <HAL_ADC_ConfigChannel+0x25c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a11      	ldr	r2, [pc, #68]	@ (80056ac <HAL_ADC_ConfigChannel+0x260>)
 8005668:	fba2 2303 	umull	r2, r3, r2, r3
 800566c:	0c9a      	lsrs	r2, r3, #18
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005678:	e002      	b.n	8005680 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	3b01      	subs	r3, #1
 800567e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f9      	bne.n	800567a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40012300 	.word	0x40012300
 80056a0:	40012000 	.word	0x40012000
 80056a4:	10000012 	.word	0x10000012
 80056a8:	20000000 	.word	0x20000000
 80056ac:	431bde83 	.word	0x431bde83

080056b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056b8:	4b79      	ldr	r3, [pc, #484]	@ (80058a0 <ADC_Init+0x1f0>)
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	431a      	orrs	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6859      	ldr	r1, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	021a      	lsls	r2, r3, #8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6859      	ldr	r1, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800572a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6899      	ldr	r1, [r3, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005742:	4a58      	ldr	r2, [pc, #352]	@ (80058a4 <ADC_Init+0x1f4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d022      	beq.n	800578e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005756:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6899      	ldr	r1, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6899      	ldr	r1, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	e00f      	b.n	80057ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800579c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80057ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0202 	bic.w	r2, r2, #2
 80057bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6899      	ldr	r1, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	7e1b      	ldrb	r3, [r3, #24]
 80057c8:	005a      	lsls	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01b      	beq.n	8005814 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80057fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6859      	ldr	r1, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	3b01      	subs	r3, #1
 8005808:	035a      	lsls	r2, r3, #13
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	e007      	b.n	8005824 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005822:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005832:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	3b01      	subs	r3, #1
 8005840:	051a      	lsls	r2, r3, #20
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005858:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6899      	ldr	r1, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005866:	025a      	lsls	r2, r3, #9
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800587e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6899      	ldr	r1, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	029a      	lsls	r2, r3, #10
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	609a      	str	r2, [r3, #8]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	40012300 	.word	0x40012300
 80058a4:	0f000001 	.word	0x0f000001

080058a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058b8:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <__NVIC_SetPriorityGrouping+0x44>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80058c4:	4013      	ands	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80058d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058da:	4a04      	ldr	r2, [pc, #16]	@ (80058ec <__NVIC_SetPriorityGrouping+0x44>)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	60d3      	str	r3, [r2, #12]
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	e000ed00 	.word	0xe000ed00

080058f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058f4:	4b04      	ldr	r3, [pc, #16]	@ (8005908 <__NVIC_GetPriorityGrouping+0x18>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	0a1b      	lsrs	r3, r3, #8
 80058fa:	f003 0307 	and.w	r3, r3, #7
}
 80058fe:	4618      	mov	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	e000ed00 	.word	0xe000ed00

0800590c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	4603      	mov	r3, r0
 8005914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800591a:	2b00      	cmp	r3, #0
 800591c:	db0b      	blt.n	8005936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	f003 021f 	and.w	r2, r3, #31
 8005924:	4907      	ldr	r1, [pc, #28]	@ (8005944 <__NVIC_EnableIRQ+0x38>)
 8005926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	2001      	movs	r0, #1
 800592e:	fa00 f202 	lsl.w	r2, r0, r2
 8005932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	e000e100 	.word	0xe000e100

08005948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	6039      	str	r1, [r7, #0]
 8005952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005958:	2b00      	cmp	r3, #0
 800595a:	db0a      	blt.n	8005972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	b2da      	uxtb	r2, r3
 8005960:	490c      	ldr	r1, [pc, #48]	@ (8005994 <__NVIC_SetPriority+0x4c>)
 8005962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005966:	0112      	lsls	r2, r2, #4
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	440b      	add	r3, r1
 800596c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005970:	e00a      	b.n	8005988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	b2da      	uxtb	r2, r3
 8005976:	4908      	ldr	r1, [pc, #32]	@ (8005998 <__NVIC_SetPriority+0x50>)
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	3b04      	subs	r3, #4
 8005980:	0112      	lsls	r2, r2, #4
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	440b      	add	r3, r1
 8005986:	761a      	strb	r2, [r3, #24]
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	e000e100 	.word	0xe000e100
 8005998:	e000ed00 	.word	0xe000ed00

0800599c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800599c:	b480      	push	{r7}
 800599e:	b089      	sub	sp, #36	@ 0x24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f1c3 0307 	rsb	r3, r3, #7
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	bf28      	it	cs
 80059ba:	2304      	movcs	r3, #4
 80059bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3304      	adds	r3, #4
 80059c2:	2b06      	cmp	r3, #6
 80059c4:	d902      	bls.n	80059cc <NVIC_EncodePriority+0x30>
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3b03      	subs	r3, #3
 80059ca:	e000      	b.n	80059ce <NVIC_EncodePriority+0x32>
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059d0:	f04f 32ff 	mov.w	r2, #4294967295
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	43da      	mvns	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	401a      	ands	r2, r3
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059e4:	f04f 31ff 	mov.w	r1, #4294967295
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	fa01 f303 	lsl.w	r3, r1, r3
 80059ee:	43d9      	mvns	r1, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059f4:	4313      	orrs	r3, r2
         );
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3724      	adds	r7, #36	@ 0x24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a14:	d301      	bcc.n	8005a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a16:	2301      	movs	r3, #1
 8005a18:	e00f      	b.n	8005a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005a44 <SysTick_Config+0x40>)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a22:	210f      	movs	r1, #15
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295
 8005a28:	f7ff ff8e 	bl	8005948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a2c:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <SysTick_Config+0x40>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a32:	4b04      	ldr	r3, [pc, #16]	@ (8005a44 <SysTick_Config+0x40>)
 8005a34:	2207      	movs	r2, #7
 8005a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	e000e010 	.word	0xe000e010

08005a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7ff ff29 	bl	80058a8 <__NVIC_SetPriorityGrouping>
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b086      	sub	sp, #24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	4603      	mov	r3, r0
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
 8005a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a70:	f7ff ff3e 	bl	80058f0 <__NVIC_GetPriorityGrouping>
 8005a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	6978      	ldr	r0, [r7, #20]
 8005a7c:	f7ff ff8e 	bl	800599c <NVIC_EncodePriority>
 8005a80:	4602      	mov	r2, r0
 8005a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a86:	4611      	mov	r1, r2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff ff5d 	bl	8005948 <__NVIC_SetPriority>
}
 8005a8e:	bf00      	nop
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff ff31 	bl	800590c <__NVIC_EnableIRQ>
}
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff ffa2 	bl	8005a04 <SysTick_Config>
 8005ac0:	4603      	mov	r3, r0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ad8:	f7ff faf8 	bl	80050cc <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e099      	b.n	8005c1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0201 	bic.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b08:	e00f      	b.n	8005b2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b0a:	f7ff fadf 	bl	80050cc <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b05      	cmp	r3, #5
 8005b16:	d908      	bls.n	8005b2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2203      	movs	r2, #3
 8005b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e078      	b.n	8005c1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e8      	bne.n	8005b0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4b38      	ldr	r3, [pc, #224]	@ (8005c24 <HAL_DMA_Init+0x158>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d107      	bne.n	8005b94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f023 0307 	bic.w	r3, r3, #7
 8005baa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d117      	bne.n	8005bee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00e      	beq.n	8005bee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fa0b 	bl	8005fec <DMA_CheckFifoParam>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2240      	movs	r2, #64	@ 0x40
 8005be0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005bea:	2301      	movs	r3, #1
 8005bec:	e016      	b.n	8005c1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9c2 	bl	8005f80 <DMA_CalcBaseAndBitshift>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c04:	223f      	movs	r2, #63	@ 0x3f
 8005c06:	409a      	lsls	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	f010803f 	.word	0xf010803f

08005c28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d004      	beq.n	8005c46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2280      	movs	r2, #128	@ 0x80
 8005c40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e00c      	b.n	8005c60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2205      	movs	r2, #5
 8005c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0201 	bic.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c78:	4b8e      	ldr	r3, [pc, #568]	@ (8005eb4 <HAL_DMA_IRQHandler+0x248>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a8e      	ldr	r2, [pc, #568]	@ (8005eb8 <HAL_DMA_IRQHandler+0x24c>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	0a9b      	lsrs	r3, r3, #10
 8005c84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c96:	2208      	movs	r2, #8
 8005c98:	409a      	lsls	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01a      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d013      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0204 	bic.w	r2, r2, #4
 8005cbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd0:	f043 0201 	orr.w	r2, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cdc:	2201      	movs	r2, #1
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d012      	beq.n	8005d0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	409a      	lsls	r2, r3
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d06:	f043 0202 	orr.w	r2, r3, #2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d12:	2204      	movs	r2, #4
 8005d14:	409a      	lsls	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d012      	beq.n	8005d44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00b      	beq.n	8005d44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d30:	2204      	movs	r2, #4
 8005d32:	409a      	lsls	r2, r3
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3c:	f043 0204 	orr.w	r2, r3, #4
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d48:	2210      	movs	r2, #16
 8005d4a:	409a      	lsls	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d043      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d03c      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d66:	2210      	movs	r2, #16
 8005d68:	409a      	lsls	r2, r3
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d018      	beq.n	8005dae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d108      	bne.n	8005d9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d024      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	4798      	blx	r3
 8005d9a:	e01f      	b.n	8005ddc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01b      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
 8005dac:	e016      	b.n	8005ddc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d107      	bne.n	8005dcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0208 	bic.w	r2, r2, #8
 8005dca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de0:	2220      	movs	r2, #32
 8005de2:	409a      	lsls	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4013      	ands	r3, r2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 808f 	beq.w	8005f0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 8087 	beq.w	8005f0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e02:	2220      	movs	r2, #32
 8005e04:	409a      	lsls	r2, r3
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b05      	cmp	r3, #5
 8005e14:	d136      	bne.n	8005e84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0216 	bic.w	r2, r2, #22
 8005e24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695a      	ldr	r2, [r3, #20]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <HAL_DMA_IRQHandler+0x1da>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d007      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0208 	bic.w	r2, r2, #8
 8005e54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e5a:	223f      	movs	r2, #63	@ 0x3f
 8005e5c:	409a      	lsls	r2, r3
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d07e      	beq.n	8005f78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	4798      	blx	r3
        }
        return;
 8005e82:	e079      	b.n	8005f78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01d      	beq.n	8005ece <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10d      	bne.n	8005ebc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d031      	beq.n	8005f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	4798      	blx	r3
 8005eb0:	e02c      	b.n	8005f0c <HAL_DMA_IRQHandler+0x2a0>
 8005eb2:	bf00      	nop
 8005eb4:	20000000 	.word	0x20000000
 8005eb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d023      	beq.n	8005f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	4798      	blx	r3
 8005ecc:	e01e      	b.n	8005f0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10f      	bne.n	8005efc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0210 	bic.w	r2, r2, #16
 8005eea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d032      	beq.n	8005f7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d022      	beq.n	8005f66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2205      	movs	r2, #5
 8005f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0201 	bic.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60bb      	str	r3, [r7, #8]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d307      	bcc.n	8005f54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f2      	bne.n	8005f38 <HAL_DMA_IRQHandler+0x2cc>
 8005f52:	e000      	b.n	8005f56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	4798      	blx	r3
 8005f76:	e000      	b.n	8005f7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005f78:	bf00      	nop
    }
  }
}
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	3b10      	subs	r3, #16
 8005f90:	4a14      	ldr	r2, [pc, #80]	@ (8005fe4 <DMA_CalcBaseAndBitshift+0x64>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	091b      	lsrs	r3, r3, #4
 8005f98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f9a:	4a13      	ldr	r2, [pc, #76]	@ (8005fe8 <DMA_CalcBaseAndBitshift+0x68>)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d909      	bls.n	8005fc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	1d1a      	adds	r2, r3, #4
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	659a      	str	r2, [r3, #88]	@ 0x58
 8005fc0:	e007      	b.n	8005fd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005fca:	f023 0303 	bic.w	r3, r3, #3
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	aaaaaaab 	.word	0xaaaaaaab
 8005fe8:	08018ab0 	.word	0x08018ab0

08005fec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d11f      	bne.n	8006046 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b03      	cmp	r3, #3
 800600a:	d856      	bhi.n	80060ba <DMA_CheckFifoParam+0xce>
 800600c:	a201      	add	r2, pc, #4	@ (adr r2, 8006014 <DMA_CheckFifoParam+0x28>)
 800600e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006012:	bf00      	nop
 8006014:	08006025 	.word	0x08006025
 8006018:	08006037 	.word	0x08006037
 800601c:	08006025 	.word	0x08006025
 8006020:	080060bb 	.word	0x080060bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d046      	beq.n	80060be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006034:	e043      	b.n	80060be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800603e:	d140      	bne.n	80060c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006044:	e03d      	b.n	80060c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800604e:	d121      	bne.n	8006094 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b03      	cmp	r3, #3
 8006054:	d837      	bhi.n	80060c6 <DMA_CheckFifoParam+0xda>
 8006056:	a201      	add	r2, pc, #4	@ (adr r2, 800605c <DMA_CheckFifoParam+0x70>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	0800606d 	.word	0x0800606d
 8006060:	08006073 	.word	0x08006073
 8006064:	0800606d 	.word	0x0800606d
 8006068:	08006085 	.word	0x08006085
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	73fb      	strb	r3, [r7, #15]
      break;
 8006070:	e030      	b.n	80060d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006076:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d025      	beq.n	80060ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006082:	e022      	b.n	80060ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800608c:	d11f      	bne.n	80060ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006092:	e01c      	b.n	80060ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b02      	cmp	r3, #2
 8006098:	d903      	bls.n	80060a2 <DMA_CheckFifoParam+0xb6>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b03      	cmp	r3, #3
 800609e:	d003      	beq.n	80060a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80060a0:	e018      	b.n	80060d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	73fb      	strb	r3, [r7, #15]
      break;
 80060a6:	e015      	b.n	80060d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00e      	beq.n	80060d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	73fb      	strb	r3, [r7, #15]
      break;
 80060b8:	e00b      	b.n	80060d2 <DMA_CheckFifoParam+0xe6>
      break;
 80060ba:	bf00      	nop
 80060bc:	e00a      	b.n	80060d4 <DMA_CheckFifoParam+0xe8>
      break;
 80060be:	bf00      	nop
 80060c0:	e008      	b.n	80060d4 <DMA_CheckFifoParam+0xe8>
      break;
 80060c2:	bf00      	nop
 80060c4:	e006      	b.n	80060d4 <DMA_CheckFifoParam+0xe8>
      break;
 80060c6:	bf00      	nop
 80060c8:	e004      	b.n	80060d4 <DMA_CheckFifoParam+0xe8>
      break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <DMA_CheckFifoParam+0xe8>
      break;
 80060d2:	bf00      	nop
    }
  } 
  
  return status; 
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop

080060e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b089      	sub	sp, #36	@ 0x24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060fa:	2300      	movs	r3, #0
 80060fc:	61fb      	str	r3, [r7, #28]
 80060fe:	e159      	b.n	80063b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006100:	2201      	movs	r2, #1
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	fa02 f303 	lsl.w	r3, r2, r3
 8006108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4013      	ands	r3, r2
 8006112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	429a      	cmp	r2, r3
 800611a:	f040 8148 	bne.w	80063ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	2b01      	cmp	r3, #1
 8006128:	d005      	beq.n	8006136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006132:	2b02      	cmp	r3, #2
 8006134:	d130      	bne.n	8006198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	2203      	movs	r2, #3
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	43db      	mvns	r3, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4013      	ands	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	4313      	orrs	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800616c:	2201      	movs	r2, #1
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	43db      	mvns	r3, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4013      	ands	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	f003 0201 	and.w	r2, r3, #1
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d017      	beq.n	80061d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	2203      	movs	r2, #3
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	43db      	mvns	r3, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	4013      	ands	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d123      	bne.n	8006228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	08da      	lsrs	r2, r3, #3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3208      	adds	r2, #8
 80061e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	220f      	movs	r2, #15
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	43db      	mvns	r3, r3
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	4013      	ands	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4313      	orrs	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	08da      	lsrs	r2, r3, #3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3208      	adds	r2, #8
 8006222:	69b9      	ldr	r1, [r7, #24]
 8006224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	2203      	movs	r2, #3
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	43db      	mvns	r3, r3
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	4013      	ands	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 0203 	and.w	r2, r3, #3
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	4313      	orrs	r3, r2
 8006254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 80a2 	beq.w	80063ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	4b57      	ldr	r3, [pc, #348]	@ (80063cc <HAL_GPIO_Init+0x2e8>)
 8006270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006272:	4a56      	ldr	r2, [pc, #344]	@ (80063cc <HAL_GPIO_Init+0x2e8>)
 8006274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006278:	6453      	str	r3, [r2, #68]	@ 0x44
 800627a:	4b54      	ldr	r3, [pc, #336]	@ (80063cc <HAL_GPIO_Init+0x2e8>)
 800627c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800627e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006286:	4a52      	ldr	r2, [pc, #328]	@ (80063d0 <HAL_GPIO_Init+0x2ec>)
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	089b      	lsrs	r3, r3, #2
 800628c:	3302      	adds	r3, #2
 800628e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	220f      	movs	r2, #15
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	43db      	mvns	r3, r3
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	4013      	ands	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a49      	ldr	r2, [pc, #292]	@ (80063d4 <HAL_GPIO_Init+0x2f0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d019      	beq.n	80062e6 <HAL_GPIO_Init+0x202>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a48      	ldr	r2, [pc, #288]	@ (80063d8 <HAL_GPIO_Init+0x2f4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <HAL_GPIO_Init+0x1fe>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a47      	ldr	r2, [pc, #284]	@ (80063dc <HAL_GPIO_Init+0x2f8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d00d      	beq.n	80062de <HAL_GPIO_Init+0x1fa>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a46      	ldr	r2, [pc, #280]	@ (80063e0 <HAL_GPIO_Init+0x2fc>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d007      	beq.n	80062da <HAL_GPIO_Init+0x1f6>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a45      	ldr	r2, [pc, #276]	@ (80063e4 <HAL_GPIO_Init+0x300>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d101      	bne.n	80062d6 <HAL_GPIO_Init+0x1f2>
 80062d2:	2304      	movs	r3, #4
 80062d4:	e008      	b.n	80062e8 <HAL_GPIO_Init+0x204>
 80062d6:	2307      	movs	r3, #7
 80062d8:	e006      	b.n	80062e8 <HAL_GPIO_Init+0x204>
 80062da:	2303      	movs	r3, #3
 80062dc:	e004      	b.n	80062e8 <HAL_GPIO_Init+0x204>
 80062de:	2302      	movs	r3, #2
 80062e0:	e002      	b.n	80062e8 <HAL_GPIO_Init+0x204>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <HAL_GPIO_Init+0x204>
 80062e6:	2300      	movs	r3, #0
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	f002 0203 	and.w	r2, r2, #3
 80062ee:	0092      	lsls	r2, r2, #2
 80062f0:	4093      	lsls	r3, r2
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062f8:	4935      	ldr	r1, [pc, #212]	@ (80063d0 <HAL_GPIO_Init+0x2ec>)
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	089b      	lsrs	r3, r3, #2
 80062fe:	3302      	adds	r3, #2
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006306:	4b38      	ldr	r3, [pc, #224]	@ (80063e8 <HAL_GPIO_Init+0x304>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	43db      	mvns	r3, r3
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	4013      	ands	r3, r2
 8006314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800632a:	4a2f      	ldr	r2, [pc, #188]	@ (80063e8 <HAL_GPIO_Init+0x304>)
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006330:	4b2d      	ldr	r3, [pc, #180]	@ (80063e8 <HAL_GPIO_Init+0x304>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	43db      	mvns	r3, r3
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	4013      	ands	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006354:	4a24      	ldr	r2, [pc, #144]	@ (80063e8 <HAL_GPIO_Init+0x304>)
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800635a:	4b23      	ldr	r3, [pc, #140]	@ (80063e8 <HAL_GPIO_Init+0x304>)
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	43db      	mvns	r3, r3
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	4013      	ands	r3, r2
 8006368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800637e:	4a1a      	ldr	r2, [pc, #104]	@ (80063e8 <HAL_GPIO_Init+0x304>)
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006384:	4b18      	ldr	r3, [pc, #96]	@ (80063e8 <HAL_GPIO_Init+0x304>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	43db      	mvns	r3, r3
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	4013      	ands	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063a8:	4a0f      	ldr	r2, [pc, #60]	@ (80063e8 <HAL_GPIO_Init+0x304>)
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	3301      	adds	r3, #1
 80063b2:	61fb      	str	r3, [r7, #28]
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	2b0f      	cmp	r3, #15
 80063b8:	f67f aea2 	bls.w	8006100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	3724      	adds	r7, #36	@ 0x24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40023800 	.word	0x40023800
 80063d0:	40013800 	.word	0x40013800
 80063d4:	40020000 	.word	0x40020000
 80063d8:	40020400 	.word	0x40020400
 80063dc:	40020800 	.word	0x40020800
 80063e0:	40020c00 	.word	0x40020c00
 80063e4:	40021000 	.word	0x40021000
 80063e8:	40013c00 	.word	0x40013c00

080063ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	460b      	mov	r3, r1
 80063f6:	807b      	strh	r3, [r7, #2]
 80063f8:	4613      	mov	r3, r2
 80063fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063fc:	787b      	ldrb	r3, [r7, #1]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006402:	887a      	ldrh	r2, [r7, #2]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006408:	e003      	b.n	8006412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800640a:	887b      	ldrh	r3, [r7, #2]
 800640c:	041a      	lsls	r2, r3, #16
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	619a      	str	r2, [r3, #24]
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	4603      	mov	r3, r0
 8006428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800642a:	4b08      	ldr	r3, [pc, #32]	@ (800644c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800642c:	695a      	ldr	r2, [r3, #20]
 800642e:	88fb      	ldrh	r3, [r7, #6]
 8006430:	4013      	ands	r3, r2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d006      	beq.n	8006444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006436:	4a05      	ldr	r2, [pc, #20]	@ (800644c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006438:	88fb      	ldrh	r3, [r7, #6]
 800643a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800643c:	88fb      	ldrh	r3, [r7, #6]
 800643e:	4618      	mov	r0, r3
 8006440:	f7fb fd54 	bl	8001eec <HAL_GPIO_EXTI_Callback>
  }
}
 8006444:	bf00      	nop
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	40013c00 	.word	0x40013c00

08006450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e12b      	b.n	80066ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fa ffb2 	bl	80013e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2224      	movs	r2, #36	@ 0x24
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0201 	bic.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80064b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80064b4:	f003 fc20 	bl	8009cf8 <HAL_RCC_GetPCLK1Freq>
 80064b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	4a81      	ldr	r2, [pc, #516]	@ (80066c4 <HAL_I2C_Init+0x274>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d807      	bhi.n	80064d4 <HAL_I2C_Init+0x84>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4a80      	ldr	r2, [pc, #512]	@ (80066c8 <HAL_I2C_Init+0x278>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	bf94      	ite	ls
 80064cc:	2301      	movls	r3, #1
 80064ce:	2300      	movhi	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	e006      	b.n	80064e2 <HAL_I2C_Init+0x92>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4a7d      	ldr	r2, [pc, #500]	@ (80066cc <HAL_I2C_Init+0x27c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	bf94      	ite	ls
 80064dc:	2301      	movls	r3, #1
 80064de:	2300      	movhi	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e0e7      	b.n	80066ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4a78      	ldr	r2, [pc, #480]	@ (80066d0 <HAL_I2C_Init+0x280>)
 80064ee:	fba2 2303 	umull	r2, r3, r2, r3
 80064f2:	0c9b      	lsrs	r3, r3, #18
 80064f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	4a6a      	ldr	r2, [pc, #424]	@ (80066c4 <HAL_I2C_Init+0x274>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d802      	bhi.n	8006524 <HAL_I2C_Init+0xd4>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	3301      	adds	r3, #1
 8006522:	e009      	b.n	8006538 <HAL_I2C_Init+0xe8>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800652a:	fb02 f303 	mul.w	r3, r2, r3
 800652e:	4a69      	ldr	r2, [pc, #420]	@ (80066d4 <HAL_I2C_Init+0x284>)
 8006530:	fba2 2303 	umull	r2, r3, r2, r3
 8006534:	099b      	lsrs	r3, r3, #6
 8006536:	3301      	adds	r3, #1
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	430b      	orrs	r3, r1
 800653e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800654a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	495c      	ldr	r1, [pc, #368]	@ (80066c4 <HAL_I2C_Init+0x274>)
 8006554:	428b      	cmp	r3, r1
 8006556:	d819      	bhi.n	800658c <HAL_I2C_Init+0x13c>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	1e59      	subs	r1, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	fbb1 f3f3 	udiv	r3, r1, r3
 8006566:	1c59      	adds	r1, r3, #1
 8006568:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800656c:	400b      	ands	r3, r1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <HAL_I2C_Init+0x138>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	1e59      	subs	r1, r3, #1
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006580:	3301      	adds	r3, #1
 8006582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006586:	e051      	b.n	800662c <HAL_I2C_Init+0x1dc>
 8006588:	2304      	movs	r3, #4
 800658a:	e04f      	b.n	800662c <HAL_I2C_Init+0x1dc>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d111      	bne.n	80065b8 <HAL_I2C_Init+0x168>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	1e58      	subs	r0, r3, #1
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6859      	ldr	r1, [r3, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	440b      	add	r3, r1
 80065a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065a6:	3301      	adds	r3, #1
 80065a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bf0c      	ite	eq
 80065b0:	2301      	moveq	r3, #1
 80065b2:	2300      	movne	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	e012      	b.n	80065de <HAL_I2C_Init+0x18e>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	1e58      	subs	r0, r3, #1
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6859      	ldr	r1, [r3, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	0099      	lsls	r1, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80065ce:	3301      	adds	r3, #1
 80065d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf0c      	ite	eq
 80065d8:	2301      	moveq	r3, #1
 80065da:	2300      	movne	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <HAL_I2C_Init+0x196>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e022      	b.n	800662c <HAL_I2C_Init+0x1dc>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10e      	bne.n	800660c <HAL_I2C_Init+0x1bc>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	1e58      	subs	r0, r3, #1
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6859      	ldr	r1, [r3, #4]
 80065f6:	460b      	mov	r3, r1
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	440b      	add	r3, r1
 80065fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006600:	3301      	adds	r3, #1
 8006602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800660a:	e00f      	b.n	800662c <HAL_I2C_Init+0x1dc>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	1e58      	subs	r0, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6859      	ldr	r1, [r3, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	0099      	lsls	r1, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006622:	3301      	adds	r3, #1
 8006624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	6809      	ldr	r1, [r1, #0]
 8006630:	4313      	orrs	r3, r2
 8006632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69da      	ldr	r2, [r3, #28]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	431a      	orrs	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800665a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6911      	ldr	r1, [r2, #16]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	68d2      	ldr	r2, [r2, #12]
 8006666:	4311      	orrs	r1, r2
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6812      	ldr	r2, [r2, #0]
 800666c:	430b      	orrs	r3, r1
 800666e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695a      	ldr	r2, [r3, #20]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	431a      	orrs	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0201 	orr.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	000186a0 	.word	0x000186a0
 80066c8:	001e847f 	.word	0x001e847f
 80066cc:	003d08ff 	.word	0x003d08ff
 80066d0:	431bde83 	.word	0x431bde83
 80066d4:	10624dd3 	.word	0x10624dd3

080066d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	607a      	str	r2, [r7, #4]
 80066e2:	461a      	mov	r2, r3
 80066e4:	460b      	mov	r3, r1
 80066e6:	817b      	strh	r3, [r7, #10]
 80066e8:	4613      	mov	r3, r2
 80066ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066ec:	f7fe fcee 	bl	80050cc <HAL_GetTick>
 80066f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	f040 80e0 	bne.w	80068c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	2319      	movs	r3, #25
 8006706:	2201      	movs	r2, #1
 8006708:	4970      	ldr	r1, [pc, #448]	@ (80068cc <HAL_I2C_Master_Transmit+0x1f4>)
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f001 fa3c 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006716:	2302      	movs	r3, #2
 8006718:	e0d3      	b.n	80068c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_I2C_Master_Transmit+0x50>
 8006724:	2302      	movs	r3, #2
 8006726:	e0cc      	b.n	80068c2 <HAL_I2C_Master_Transmit+0x1ea>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b01      	cmp	r3, #1
 800673c:	d007      	beq.n	800674e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0201 	orr.w	r2, r2, #1
 800674c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800675c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2221      	movs	r2, #33	@ 0x21
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2210      	movs	r2, #16
 800676a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	893a      	ldrh	r2, [r7, #8]
 800677e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4a50      	ldr	r2, [pc, #320]	@ (80068d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800678e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006790:	8979      	ldrh	r1, [r7, #10]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	6a3a      	ldr	r2, [r7, #32]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 ff28 	bl	80075ec <I2C_MasterRequestWrite>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e08d      	b.n	80068c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a6:	2300      	movs	r3, #0
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	613b      	str	r3, [r7, #16]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	613b      	str	r3, [r7, #16]
 80067ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80067bc:	e066      	b.n	800688c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	6a39      	ldr	r1, [r7, #32]
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f001 fafa 	bl	8007dbc <I2C_WaitOnTXEFlagUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00d      	beq.n	80067ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d107      	bne.n	80067e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e06b      	b.n	80068c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ee:	781a      	ldrb	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006804:	b29b      	uxth	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	b29a      	uxth	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b04      	cmp	r3, #4
 8006826:	d11b      	bne.n	8006860 <HAL_I2C_Master_Transmit+0x188>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800682c:	2b00      	cmp	r3, #0
 800682e:	d017      	beq.n	8006860 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006834:	781a      	ldrb	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800684a:	b29b      	uxth	r3, r3
 800684c:	3b01      	subs	r3, #1
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	6a39      	ldr	r1, [r7, #32]
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f001 faf1 	bl	8007e4c <I2C_WaitOnBTFFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00d      	beq.n	800688c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006874:	2b04      	cmp	r3, #4
 8006876:	d107      	bne.n	8006888 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006886:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e01a      	b.n	80068c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006890:	2b00      	cmp	r3, #0
 8006892:	d194      	bne.n	80067be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	e000      	b.n	80068c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80068c0:	2302      	movs	r3, #2
  }
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	00100002 	.word	0x00100002
 80068d0:	ffff0000 	.word	0xffff0000

080068d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08c      	sub	sp, #48	@ 0x30
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	607a      	str	r2, [r7, #4]
 80068de:	461a      	mov	r2, r3
 80068e0:	460b      	mov	r3, r1
 80068e2:	817b      	strh	r3, [r7, #10]
 80068e4:	4613      	mov	r3, r2
 80068e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068e8:	f7fe fbf0 	bl	80050cc <HAL_GetTick>
 80068ec:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	f040 8217 	bne.w	8006d2a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	2319      	movs	r3, #25
 8006902:	2201      	movs	r2, #1
 8006904:	497c      	ldr	r1, [pc, #496]	@ (8006af8 <HAL_I2C_Master_Receive+0x224>)
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f001 f93e 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006912:	2302      	movs	r3, #2
 8006914:	e20a      	b.n	8006d2c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_I2C_Master_Receive+0x50>
 8006920:	2302      	movs	r3, #2
 8006922:	e203      	b.n	8006d2c <HAL_I2C_Master_Receive+0x458>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b01      	cmp	r3, #1
 8006938:	d007      	beq.n	800694a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0201 	orr.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006958:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2222      	movs	r2, #34	@ 0x22
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2210      	movs	r2, #16
 8006966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	893a      	ldrh	r2, [r7, #8]
 800697a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4a5c      	ldr	r2, [pc, #368]	@ (8006afc <HAL_I2C_Master_Receive+0x228>)
 800698a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800698c:	8979      	ldrh	r1, [r7, #10]
 800698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 feac 	bl	80076f0 <I2C_MasterRequestRead>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e1c4      	b.n	8006d2c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d113      	bne.n	80069d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069aa:	2300      	movs	r3, #0
 80069ac:	623b      	str	r3, [r7, #32]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	623b      	str	r3, [r7, #32]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	623b      	str	r3, [r7, #32]
 80069be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e198      	b.n	8006d04 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d11b      	bne.n	8006a12 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ea:	2300      	movs	r3, #0
 80069ec:	61fb      	str	r3, [r7, #28]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	61fb      	str	r3, [r7, #28]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	61fb      	str	r3, [r7, #28]
 80069fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	e178      	b.n	8006d04 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d11b      	bne.n	8006a52 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61bb      	str	r3, [r7, #24]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	e158      	b.n	8006d04 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a62:	2300      	movs	r3, #0
 8006a64:	617b      	str	r3, [r7, #20]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a78:	e144      	b.n	8006d04 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	f200 80f1 	bhi.w	8006c66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d123      	bne.n	8006ad4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f001 fa23 	bl	8007edc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e145      	b.n	8006d2c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691a      	ldr	r2, [r3, #16]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006abc:	3b01      	subs	r3, #1
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006ad2:	e117      	b.n	8006d04 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d14e      	bne.n	8006b7a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	4906      	ldr	r1, [pc, #24]	@ (8006b00 <HAL_I2C_Master_Receive+0x22c>)
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f001 f84e 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d008      	beq.n	8006b04 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e11a      	b.n	8006d2c <HAL_I2C_Master_Receive+0x458>
 8006af6:	bf00      	nop
 8006af8:	00100002 	.word	0x00100002
 8006afc:	ffff0000 	.word	0xffff0000
 8006b00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691a      	ldr	r2, [r3, #16]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691a      	ldr	r2, [r3, #16]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b50:	b2d2      	uxtb	r2, r2
 8006b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006b78:	e0c4      	b.n	8006d04 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b80:	2200      	movs	r2, #0
 8006b82:	496c      	ldr	r1, [pc, #432]	@ (8006d34 <HAL_I2C_Master_Receive+0x460>)
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 ffff 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e0cb      	b.n	8006d2c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	2200      	movs	r2, #0
 8006bde:	4955      	ldr	r1, [pc, #340]	@ (8006d34 <HAL_I2C_Master_Receive+0x460>)
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 ffd1 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e09d      	b.n	8006d2c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691a      	ldr	r2, [r3, #16]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c64:	e04e      	b.n	8006d04 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f001 f936 	bl	8007edc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e058      	b.n	8006d2c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	691a      	ldr	r2, [r3, #16]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	b2d2      	uxtb	r2, r2
 8006c86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d124      	bne.n	8006d04 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d107      	bne.n	8006cd2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cd0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f47f aeb6 	bne.w	8006a7a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	e000      	b.n	8006d2c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006d2a:	2302      	movs	r3, #2
  }
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3728      	adds	r7, #40	@ 0x28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	00010004 	.word	0x00010004

08006d38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	4608      	mov	r0, r1
 8006d42:	4611      	mov	r1, r2
 8006d44:	461a      	mov	r2, r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	817b      	strh	r3, [r7, #10]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	813b      	strh	r3, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d52:	f7fe f9bb 	bl	80050cc <HAL_GetTick>
 8006d56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	f040 80d9 	bne.w	8006f18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	2319      	movs	r3, #25
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	496d      	ldr	r1, [pc, #436]	@ (8006f24 <HAL_I2C_Mem_Write+0x1ec>)
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 ff09 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e0cc      	b.n	8006f1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <HAL_I2C_Mem_Write+0x56>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e0c5      	b.n	8006f1a <HAL_I2C_Mem_Write+0x1e2>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d007      	beq.n	8006db4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2221      	movs	r2, #33	@ 0x21
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2240      	movs	r2, #64	@ 0x40
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a3a      	ldr	r2, [r7, #32]
 8006dde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006de4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4a4d      	ldr	r2, [pc, #308]	@ (8006f28 <HAL_I2C_Mem_Write+0x1f0>)
 8006df4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006df6:	88f8      	ldrh	r0, [r7, #6]
 8006df8:	893a      	ldrh	r2, [r7, #8]
 8006dfa:	8979      	ldrh	r1, [r7, #10]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	4603      	mov	r3, r0
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fd40 	bl	800788c <I2C_RequestMemoryWrite>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d052      	beq.n	8006eb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e081      	b.n	8006f1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 ffce 	bl	8007dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00d      	beq.n	8006e42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d107      	bne.n	8006e3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e06b      	b.n	8006f1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e46:	781a      	ldrb	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d11b      	bne.n	8006eb8 <HAL_I2C_Mem_Write+0x180>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d017      	beq.n	8006eb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8c:	781a      	ldrb	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1aa      	bne.n	8006e16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 ffc1 	bl	8007e4c <I2C_WaitOnBTFFlagUntilTimeout>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00d      	beq.n	8006eec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d107      	bne.n	8006ee8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ee6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e016      	b.n	8006f1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	e000      	b.n	8006f1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006f18:	2302      	movs	r3, #2
  }
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	00100002 	.word	0x00100002
 8006f28:	ffff0000 	.word	0xffff0000

08006f2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08c      	sub	sp, #48	@ 0x30
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	4608      	mov	r0, r1
 8006f36:	4611      	mov	r1, r2
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	817b      	strh	r3, [r7, #10]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	813b      	strh	r3, [r7, #8]
 8006f42:	4613      	mov	r3, r2
 8006f44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f46:	f7fe f8c1 	bl	80050cc <HAL_GetTick>
 8006f4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	f040 8214 	bne.w	8007382 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	2319      	movs	r3, #25
 8006f60:	2201      	movs	r2, #1
 8006f62:	497b      	ldr	r1, [pc, #492]	@ (8007150 <HAL_I2C_Mem_Read+0x224>)
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 fe0f 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006f70:	2302      	movs	r3, #2
 8006f72:	e207      	b.n	8007384 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_I2C_Mem_Read+0x56>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e200      	b.n	8007384 <HAL_I2C_Mem_Read+0x458>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d007      	beq.n	8006fa8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0201 	orr.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2222      	movs	r2, #34	@ 0x22
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2240      	movs	r2, #64	@ 0x40
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4a5b      	ldr	r2, [pc, #364]	@ (8007154 <HAL_I2C_Mem_Read+0x228>)
 8006fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006fea:	88f8      	ldrh	r0, [r7, #6]
 8006fec:	893a      	ldrh	r2, [r7, #8]
 8006fee:	8979      	ldrh	r1, [r7, #10]
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff2:	9301      	str	r3, [sp, #4]
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 fcdc 	bl	80079b8 <I2C_RequestMemoryRead>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e1bc      	b.n	8007384 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800700e:	2b00      	cmp	r3, #0
 8007010:	d113      	bne.n	800703a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007012:	2300      	movs	r3, #0
 8007014:	623b      	str	r3, [r7, #32]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	623b      	str	r3, [r7, #32]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	623b      	str	r3, [r7, #32]
 8007026:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	e190      	b.n	800735c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800703e:	2b01      	cmp	r3, #1
 8007040:	d11b      	bne.n	800707a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007052:	2300      	movs	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	61fb      	str	r3, [r7, #28]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	61fb      	str	r3, [r7, #28]
 8007066:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	e170      	b.n	800735c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800707e:	2b02      	cmp	r3, #2
 8007080:	d11b      	bne.n	80070ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007090:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070a2:	2300      	movs	r3, #0
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	61bb      	str	r3, [r7, #24]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	e150      	b.n	800735c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ba:	2300      	movs	r3, #0
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	617b      	str	r3, [r7, #20]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80070d0:	e144      	b.n	800735c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	f200 80f1 	bhi.w	80072be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d123      	bne.n	800712c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 fef7 	bl	8007edc <I2C_WaitOnRXNEFlagUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e145      	b.n	8007384 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691a      	ldr	r2, [r3, #16]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007114:	3b01      	subs	r3, #1
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007120:	b29b      	uxth	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800712a:	e117      	b.n	800735c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007130:	2b02      	cmp	r3, #2
 8007132:	d14e      	bne.n	80071d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713a:	2200      	movs	r2, #0
 800713c:	4906      	ldr	r1, [pc, #24]	@ (8007158 <HAL_I2C_Mem_Read+0x22c>)
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fd22 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d008      	beq.n	800715c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e11a      	b.n	8007384 <HAL_I2C_Mem_Read+0x458>
 800714e:	bf00      	nop
 8007150:	00100002 	.word	0x00100002
 8007154:	ffff0000 	.word	0xffff0000
 8007158:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800716a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691a      	ldr	r2, [r3, #16]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007176:	b2d2      	uxtb	r2, r2
 8007178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	691a      	ldr	r2, [r3, #16]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80071d0:	e0c4      	b.n	800735c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d8:	2200      	movs	r2, #0
 80071da:	496c      	ldr	r1, [pc, #432]	@ (800738c <HAL_I2C_Mem_Read+0x460>)
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 fcd3 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0cb      	b.n	8007384 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691a      	ldr	r2, [r3, #16]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007224:	b29b      	uxth	r3, r3
 8007226:	3b01      	subs	r3, #1
 8007228:	b29a      	uxth	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007234:	2200      	movs	r2, #0
 8007236:	4955      	ldr	r1, [pc, #340]	@ (800738c <HAL_I2C_Mem_Read+0x460>)
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 fca5 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e09d      	b.n	8007384 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007274:	3b01      	subs	r3, #1
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007280:	b29b      	uxth	r3, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007294:	b2d2      	uxtb	r2, r2
 8007296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80072bc:	e04e      	b.n	800735c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 fe0a 	bl	8007edc <I2C_WaitOnRXNEFlagUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e058      	b.n	8007384 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072dc:	b2d2      	uxtb	r2, r2
 80072de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	f003 0304 	and.w	r3, r3, #4
 800730e:	2b04      	cmp	r3, #4
 8007310:	d124      	bne.n	800735c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007316:	2b03      	cmp	r3, #3
 8007318:	d107      	bne.n	800732a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007328:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	691a      	ldr	r2, [r3, #16]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007346:	3b01      	subs	r3, #1
 8007348:	b29a      	uxth	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007360:	2b00      	cmp	r3, #0
 8007362:	f47f aeb6 	bne.w	80070d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2220      	movs	r2, #32
 800736a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	e000      	b.n	8007384 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007382:	2302      	movs	r3, #2
  }
}
 8007384:	4618      	mov	r0, r3
 8007386:	3728      	adds	r7, #40	@ 0x28
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	00010004 	.word	0x00010004

08007390 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08a      	sub	sp, #40	@ 0x28
 8007394:	af02      	add	r7, sp, #8
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	460b      	mov	r3, r1
 800739e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80073a0:	f7fd fe94 	bl	80050cc <HAL_GetTick>
 80073a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b20      	cmp	r3, #32
 80073b4:	f040 8111 	bne.w	80075da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	2319      	movs	r3, #25
 80073be:	2201      	movs	r2, #1
 80073c0:	4988      	ldr	r1, [pc, #544]	@ (80075e4 <HAL_I2C_IsDeviceReady+0x254>)
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 fbe0 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80073ce:	2302      	movs	r3, #2
 80073d0:	e104      	b.n	80075dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_I2C_IsDeviceReady+0x50>
 80073dc:	2302      	movs	r3, #2
 80073de:	e0fd      	b.n	80075dc <HAL_I2C_IsDeviceReady+0x24c>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d007      	beq.n	8007406 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f042 0201 	orr.w	r2, r2, #1
 8007404:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007414:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2224      	movs	r2, #36	@ 0x24
 800741a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4a70      	ldr	r2, [pc, #448]	@ (80075e8 <HAL_I2C_IsDeviceReady+0x258>)
 8007428:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007438:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2200      	movs	r2, #0
 8007442:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 fb9e 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00d      	beq.n	800746e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800745c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007460:	d103      	bne.n	800746a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007468:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e0b6      	b.n	80075dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800746e:	897b      	ldrh	r3, [r7, #10]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	461a      	mov	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800747c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800747e:	f7fd fe25 	bl	80050cc <HAL_GetTick>
 8007482:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b02      	cmp	r3, #2
 8007490:	bf0c      	ite	eq
 8007492:	2301      	moveq	r3, #1
 8007494:	2300      	movne	r3, #0
 8007496:	b2db      	uxtb	r3, r3
 8007498:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074a8:	bf0c      	ite	eq
 80074aa:	2301      	moveq	r3, #1
 80074ac:	2300      	movne	r3, #0
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80074b2:	e025      	b.n	8007500 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80074b4:	f7fd fe0a 	bl	80050cc <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d302      	bcc.n	80074ca <HAL_I2C_IsDeviceReady+0x13a>
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d103      	bne.n	80074d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	22a0      	movs	r2, #160	@ 0xa0
 80074ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b02      	cmp	r3, #2
 80074de:	bf0c      	ite	eq
 80074e0:	2301      	moveq	r3, #1
 80074e2:	2300      	movne	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074f6:	bf0c      	ite	eq
 80074f8:	2301      	moveq	r3, #1
 80074fa:	2300      	movne	r3, #0
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2ba0      	cmp	r3, #160	@ 0xa0
 800750a:	d005      	beq.n	8007518 <HAL_I2C_IsDeviceReady+0x188>
 800750c:	7dfb      	ldrb	r3, [r7, #23]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d102      	bne.n	8007518 <HAL_I2C_IsDeviceReady+0x188>
 8007512:	7dbb      	ldrb	r3, [r7, #22]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0cd      	beq.n	80074b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b02      	cmp	r3, #2
 800752c:	d129      	bne.n	8007582 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800753c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800753e:	2300      	movs	r3, #0
 8007540:	613b      	str	r3, [r7, #16]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	613b      	str	r3, [r7, #16]
 8007552:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	2319      	movs	r3, #25
 800755a:	2201      	movs	r2, #1
 800755c:	4921      	ldr	r1, [pc, #132]	@ (80075e4 <HAL_I2C_IsDeviceReady+0x254>)
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 fb12 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e036      	b.n	80075dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2220      	movs	r2, #32
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	e02c      	b.n	80075dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007590:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800759a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	2319      	movs	r3, #25
 80075a2:	2201      	movs	r2, #1
 80075a4:	490f      	ldr	r1, [pc, #60]	@ (80075e4 <HAL_I2C_IsDeviceReady+0x254>)
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 faee 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e012      	b.n	80075dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	3301      	adds	r3, #1
 80075ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	f4ff af32 	bcc.w	800742a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e000      	b.n	80075dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80075da:	2302      	movs	r3, #2
  }
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3720      	adds	r7, #32
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	00100002 	.word	0x00100002
 80075e8:	ffff0000 	.word	0xffff0000

080075ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af02      	add	r7, sp, #8
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	607a      	str	r2, [r7, #4]
 80075f6:	603b      	str	r3, [r7, #0]
 80075f8:	460b      	mov	r3, r1
 80075fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007600:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b08      	cmp	r3, #8
 8007606:	d006      	beq.n	8007616 <I2C_MasterRequestWrite+0x2a>
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d003      	beq.n	8007616 <I2C_MasterRequestWrite+0x2a>
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007614:	d108      	bne.n	8007628 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	e00b      	b.n	8007640 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800762c:	2b12      	cmp	r3, #18
 800762e:	d107      	bne.n	8007640 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800763e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 fa9b 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00d      	beq.n	8007674 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007666:	d103      	bne.n	8007670 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800766e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e035      	b.n	80076e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800767c:	d108      	bne.n	8007690 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800767e:	897b      	ldrh	r3, [r7, #10]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	461a      	mov	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800768c:	611a      	str	r2, [r3, #16]
 800768e:	e01b      	b.n	80076c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007690:	897b      	ldrh	r3, [r7, #10]
 8007692:	11db      	asrs	r3, r3, #7
 8007694:	b2db      	uxtb	r3, r3
 8007696:	f003 0306 	and.w	r3, r3, #6
 800769a:	b2db      	uxtb	r3, r3
 800769c:	f063 030f 	orn	r3, r3, #15
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	490e      	ldr	r1, [pc, #56]	@ (80076e8 <I2C_MasterRequestWrite+0xfc>)
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 fae4 	bl	8007c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e010      	b.n	80076e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80076be:	897b      	ldrh	r3, [r7, #10]
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	4907      	ldr	r1, [pc, #28]	@ (80076ec <I2C_MasterRequestWrite+0x100>)
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fad4 	bl	8007c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	00010008 	.word	0x00010008
 80076ec:	00010002 	.word	0x00010002

080076f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	607a      	str	r2, [r7, #4]
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	460b      	mov	r3, r1
 80076fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007704:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007714:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2b08      	cmp	r3, #8
 800771a:	d006      	beq.n	800772a <I2C_MasterRequestRead+0x3a>
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d003      	beq.n	800772a <I2C_MasterRequestRead+0x3a>
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007728:	d108      	bne.n	800773c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e00b      	b.n	8007754 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007740:	2b11      	cmp	r3, #17
 8007742:	d107      	bne.n	8007754 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007752:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 fa11 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00d      	beq.n	8007788 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800777a:	d103      	bne.n	8007784 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007782:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e079      	b.n	800787c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007790:	d108      	bne.n	80077a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007792:	897b      	ldrh	r3, [r7, #10]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	f043 0301 	orr.w	r3, r3, #1
 800779a:	b2da      	uxtb	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	611a      	str	r2, [r3, #16]
 80077a2:	e05f      	b.n	8007864 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80077a4:	897b      	ldrh	r3, [r7, #10]
 80077a6:	11db      	asrs	r3, r3, #7
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	f003 0306 	and.w	r3, r3, #6
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f063 030f 	orn	r3, r3, #15
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	4930      	ldr	r1, [pc, #192]	@ (8007884 <I2C_MasterRequestRead+0x194>)
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 fa5a 	bl	8007c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e054      	b.n	800787c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80077d2:	897b      	ldrh	r3, [r7, #10]
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	4929      	ldr	r1, [pc, #164]	@ (8007888 <I2C_MasterRequestRead+0x198>)
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 fa4a 	bl	8007c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e044      	b.n	800787c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077f2:	2300      	movs	r3, #0
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	613b      	str	r3, [r7, #16]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	613b      	str	r3, [r7, #16]
 8007806:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007816:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 f9af 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00d      	beq.n	800784c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800783a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800783e:	d103      	bne.n	8007848 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007846:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e017      	b.n	800787c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800784c:	897b      	ldrh	r3, [r7, #10]
 800784e:	11db      	asrs	r3, r3, #7
 8007850:	b2db      	uxtb	r3, r3
 8007852:	f003 0306 	and.w	r3, r3, #6
 8007856:	b2db      	uxtb	r3, r3
 8007858:	f063 030e 	orn	r3, r3, #14
 800785c:	b2da      	uxtb	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	4907      	ldr	r1, [pc, #28]	@ (8007888 <I2C_MasterRequestRead+0x198>)
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 fa06 	bl	8007c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e000      	b.n	800787c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	00010008 	.word	0x00010008
 8007888:	00010002 	.word	0x00010002

0800788c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af02      	add	r7, sp, #8
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	4608      	mov	r0, r1
 8007896:	4611      	mov	r1, r2
 8007898:	461a      	mov	r2, r3
 800789a:	4603      	mov	r3, r0
 800789c:	817b      	strh	r3, [r7, #10]
 800789e:	460b      	mov	r3, r1
 80078a0:	813b      	strh	r3, [r7, #8]
 80078a2:	4613      	mov	r3, r2
 80078a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	2200      	movs	r2, #0
 80078be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 f960 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00d      	beq.n	80078ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078dc:	d103      	bne.n	80078e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e05f      	b.n	80079aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078ea:	897b      	ldrh	r3, [r7, #10]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	461a      	mov	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80078f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	6a3a      	ldr	r2, [r7, #32]
 80078fe:	492d      	ldr	r1, [pc, #180]	@ (80079b4 <I2C_RequestMemoryWrite+0x128>)
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f9bb 	bl	8007c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e04c      	b.n	80079aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007910:	2300      	movs	r3, #0
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007928:	6a39      	ldr	r1, [r7, #32]
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fa46 	bl	8007dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00d      	beq.n	8007952 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793a:	2b04      	cmp	r3, #4
 800793c:	d107      	bne.n	800794e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800794c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e02b      	b.n	80079aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d105      	bne.n	8007964 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007958:	893b      	ldrh	r3, [r7, #8]
 800795a:	b2da      	uxtb	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	611a      	str	r2, [r3, #16]
 8007962:	e021      	b.n	80079a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007964:	893b      	ldrh	r3, [r7, #8]
 8007966:	0a1b      	lsrs	r3, r3, #8
 8007968:	b29b      	uxth	r3, r3
 800796a:	b2da      	uxtb	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007974:	6a39      	ldr	r1, [r7, #32]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 fa20 	bl	8007dbc <I2C_WaitOnTXEFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00d      	beq.n	800799e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007986:	2b04      	cmp	r3, #4
 8007988:	d107      	bne.n	800799a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007998:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e005      	b.n	80079aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800799e:	893b      	ldrh	r3, [r7, #8]
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	00010002 	.word	0x00010002

080079b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af02      	add	r7, sp, #8
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	4608      	mov	r0, r1
 80079c2:	4611      	mov	r1, r2
 80079c4:	461a      	mov	r2, r3
 80079c6:	4603      	mov	r3, r0
 80079c8:	817b      	strh	r3, [r7, #10]
 80079ca:	460b      	mov	r3, r1
 80079cc:	813b      	strh	r3, [r7, #8]
 80079ce:	4613      	mov	r3, r2
 80079d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80079e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 f8c2 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00d      	beq.n	8007a26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a18:	d103      	bne.n	8007a22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a20:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e0aa      	b.n	8007b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a26:	897b      	ldrh	r3, [r7, #10]
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007a34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a38:	6a3a      	ldr	r2, [r7, #32]
 8007a3a:	4952      	ldr	r1, [pc, #328]	@ (8007b84 <I2C_RequestMemoryRead+0x1cc>)
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f91d 	bl	8007c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e097      	b.n	8007b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	617b      	str	r3, [r7, #20]
 8007a60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a64:	6a39      	ldr	r1, [r7, #32]
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 f9a8 	bl	8007dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00d      	beq.n	8007a8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d107      	bne.n	8007a8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e076      	b.n	8007b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a8e:	88fb      	ldrh	r3, [r7, #6]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d105      	bne.n	8007aa0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a94:	893b      	ldrh	r3, [r7, #8]
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	611a      	str	r2, [r3, #16]
 8007a9e:	e021      	b.n	8007ae4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007aa0:	893b      	ldrh	r3, [r7, #8]
 8007aa2:	0a1b      	lsrs	r3, r3, #8
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab0:	6a39      	ldr	r1, [r7, #32]
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 f982 	bl	8007dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00d      	beq.n	8007ada <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d107      	bne.n	8007ad6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ad4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e050      	b.n	8007b7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ada:	893b      	ldrh	r3, [r7, #8]
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ae6:	6a39      	ldr	r1, [r7, #32]
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f967 	bl	8007dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00d      	beq.n	8007b10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d107      	bne.n	8007b0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e035      	b.n	8007b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 f82b 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00d      	beq.n	8007b54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b46:	d103      	bne.n	8007b50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e013      	b.n	8007b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007b54:	897b      	ldrh	r3, [r7, #10]
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	f043 0301 	orr.w	r3, r3, #1
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b66:	6a3a      	ldr	r2, [r7, #32]
 8007b68:	4906      	ldr	r1, [pc, #24]	@ (8007b84 <I2C_RequestMemoryRead+0x1cc>)
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 f886 	bl	8007c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e000      	b.n	8007b7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	00010002 	.word	0x00010002

08007b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	603b      	str	r3, [r7, #0]
 8007b94:	4613      	mov	r3, r2
 8007b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b98:	e048      	b.n	8007c2c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba0:	d044      	beq.n	8007c2c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba2:	f7fd fa93 	bl	80050cc <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d302      	bcc.n	8007bb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d139      	bne.n	8007c2c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	0c1b      	lsrs	r3, r3, #16
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d10d      	bne.n	8007bde <I2C_WaitOnFlagUntilTimeout+0x56>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	43da      	mvns	r2, r3
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bf0c      	ite	eq
 8007bd4:	2301      	moveq	r3, #1
 8007bd6:	2300      	movne	r3, #0
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	461a      	mov	r2, r3
 8007bdc:	e00c      	b.n	8007bf8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	43da      	mvns	r2, r3
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	4013      	ands	r3, r2
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	bf0c      	ite	eq
 8007bf0:	2301      	moveq	r3, #1
 8007bf2:	2300      	movne	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d116      	bne.n	8007c2c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c18:	f043 0220 	orr.w	r2, r3, #32
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e023      	b.n	8007c74 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	0c1b      	lsrs	r3, r3, #16
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d10d      	bne.n	8007c52 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	43da      	mvns	r2, r3
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	4013      	ands	r3, r2
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	bf0c      	ite	eq
 8007c48:	2301      	moveq	r3, #1
 8007c4a:	2300      	movne	r3, #0
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	461a      	mov	r2, r3
 8007c50:	e00c      	b.n	8007c6c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	43da      	mvns	r2, r3
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	bf0c      	ite	eq
 8007c64:	2301      	moveq	r3, #1
 8007c66:	2300      	movne	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d093      	beq.n	8007b9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c8a:	e071      	b.n	8007d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c9a:	d123      	bne.n	8007ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007caa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007cb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd0:	f043 0204 	orr.w	r2, r3, #4
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e067      	b.n	8007db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cea:	d041      	beq.n	8007d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cec:	f7fd f9ee 	bl	80050cc <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d302      	bcc.n	8007d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d136      	bne.n	8007d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	0c1b      	lsrs	r3, r3, #16
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d10c      	bne.n	8007d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	43da      	mvns	r2, r3
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	4013      	ands	r3, r2
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bf14      	ite	ne
 8007d1e:	2301      	movne	r3, #1
 8007d20:	2300      	moveq	r3, #0
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	e00b      	b.n	8007d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	43da      	mvns	r2, r3
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	4013      	ands	r3, r2
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bf14      	ite	ne
 8007d38:	2301      	movne	r3, #1
 8007d3a:	2300      	moveq	r3, #0
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d016      	beq.n	8007d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5c:	f043 0220 	orr.w	r2, r3, #32
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e021      	b.n	8007db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	0c1b      	lsrs	r3, r3, #16
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d10c      	bne.n	8007d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	43da      	mvns	r2, r3
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	4013      	ands	r3, r2
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bf14      	ite	ne
 8007d8c:	2301      	movne	r3, #1
 8007d8e:	2300      	moveq	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	e00b      	b.n	8007dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	43da      	mvns	r2, r3
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	4013      	ands	r3, r2
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	bf14      	ite	ne
 8007da6:	2301      	movne	r3, #1
 8007da8:	2300      	moveq	r3, #0
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f47f af6d 	bne.w	8007c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dc8:	e034      	b.n	8007e34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f000 f8e3 	bl	8007f96 <I2C_IsAcknowledgeFailed>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e034      	b.n	8007e44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de0:	d028      	beq.n	8007e34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007de2:	f7fd f973 	bl	80050cc <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d302      	bcc.n	8007df8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d11d      	bne.n	8007e34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e02:	2b80      	cmp	r3, #128	@ 0x80
 8007e04:	d016      	beq.n	8007e34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e20:	f043 0220 	orr.w	r2, r3, #32
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e007      	b.n	8007e44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e3e:	2b80      	cmp	r3, #128	@ 0x80
 8007e40:	d1c3      	bne.n	8007dca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e58:	e034      	b.n	8007ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 f89b 	bl	8007f96 <I2C_IsAcknowledgeFailed>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e034      	b.n	8007ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e70:	d028      	beq.n	8007ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e72:	f7fd f92b 	bl	80050cc <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d302      	bcc.n	8007e88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d11d      	bne.n	8007ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	f003 0304 	and.w	r3, r3, #4
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d016      	beq.n	8007ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb0:	f043 0220 	orr.w	r2, r3, #32
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e007      	b.n	8007ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	f003 0304 	and.w	r3, r3, #4
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d1c3      	bne.n	8007e5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ee8:	e049      	b.n	8007f7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	2b10      	cmp	r3, #16
 8007ef6:	d119      	bne.n	8007f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f06f 0210 	mvn.w	r2, #16
 8007f00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e030      	b.n	8007f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f2c:	f7fd f8ce 	bl	80050cc <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d302      	bcc.n	8007f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d11d      	bne.n	8007f7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4c:	2b40      	cmp	r3, #64	@ 0x40
 8007f4e:	d016      	beq.n	8007f7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6a:	f043 0220 	orr.w	r2, r3, #32
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e007      	b.n	8007f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f88:	2b40      	cmp	r3, #64	@ 0x40
 8007f8a:	d1ae      	bne.n	8007eea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fac:	d11b      	bne.n	8007fe6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007fb6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd2:	f043 0204 	orr.w	r2, r3, #4
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af02      	add	r7, sp, #8
 8007ffa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e101      	b.n	800820a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	d106      	bne.n	8008026 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f00a fe33 	bl	8012c8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2203      	movs	r2, #3
 800802a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008034:	d102      	bne.n	800803c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4618      	mov	r0, r3
 8008042:	f003 ff80 	bl	800bf46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	7c1a      	ldrb	r2, [r3, #16]
 800804e:	f88d 2000 	strb.w	r2, [sp]
 8008052:	3304      	adds	r3, #4
 8008054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008056:	f003 fe5f 	bl	800bd18 <USB_CoreInit>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e0ce      	b.n	800820a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2100      	movs	r1, #0
 8008072:	4618      	mov	r0, r3
 8008074:	f003 ff78 	bl	800bf68 <USB_SetCurrentMode>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e0bf      	b.n	800820a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800808a:	2300      	movs	r3, #0
 800808c:	73fb      	strb	r3, [r7, #15]
 800808e:	e04a      	b.n	8008126 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008090:	7bfa      	ldrb	r2, [r7, #15]
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	4613      	mov	r3, r2
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	3315      	adds	r3, #21
 80080a0:	2201      	movs	r2, #1
 80080a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80080a4:	7bfa      	ldrb	r2, [r7, #15]
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	4613      	mov	r3, r2
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	3314      	adds	r3, #20
 80080b4:	7bfa      	ldrb	r2, [r7, #15]
 80080b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80080b8:	7bfa      	ldrb	r2, [r7, #15]
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	b298      	uxth	r0, r3
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	4613      	mov	r3, r2
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	440b      	add	r3, r1
 80080ca:	332e      	adds	r3, #46	@ 0x2e
 80080cc:	4602      	mov	r2, r0
 80080ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80080d0:	7bfa      	ldrb	r2, [r7, #15]
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	4613      	mov	r3, r2
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	4413      	add	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	440b      	add	r3, r1
 80080de:	3318      	adds	r3, #24
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80080e4:	7bfa      	ldrb	r2, [r7, #15]
 80080e6:	6879      	ldr	r1, [r7, #4]
 80080e8:	4613      	mov	r3, r2
 80080ea:	00db      	lsls	r3, r3, #3
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	440b      	add	r3, r1
 80080f2:	331c      	adds	r3, #28
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80080f8:	7bfa      	ldrb	r2, [r7, #15]
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	4613      	mov	r3, r2
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	440b      	add	r3, r1
 8008106:	3320      	adds	r3, #32
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800810c:	7bfa      	ldrb	r2, [r7, #15]
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4613      	mov	r3, r2
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	4413      	add	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	440b      	add	r3, r1
 800811a:	3324      	adds	r3, #36	@ 0x24
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	3301      	adds	r3, #1
 8008124:	73fb      	strb	r3, [r7, #15]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	791b      	ldrb	r3, [r3, #4]
 800812a:	7bfa      	ldrb	r2, [r7, #15]
 800812c:	429a      	cmp	r2, r3
 800812e:	d3af      	bcc.n	8008090 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
 8008134:	e044      	b.n	80081c0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008136:	7bfa      	ldrb	r2, [r7, #15]
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	4613      	mov	r3, r2
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	4413      	add	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	440b      	add	r3, r1
 8008144:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008148:	2200      	movs	r2, #0
 800814a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800814c:	7bfa      	ldrb	r2, [r7, #15]
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	4613      	mov	r3, r2
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	4413      	add	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	440b      	add	r3, r1
 800815a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800815e:	7bfa      	ldrb	r2, [r7, #15]
 8008160:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008162:	7bfa      	ldrb	r2, [r7, #15]
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	4613      	mov	r3, r2
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	440b      	add	r3, r1
 8008170:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008174:	2200      	movs	r2, #0
 8008176:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008178:	7bfa      	ldrb	r2, [r7, #15]
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	4613      	mov	r3, r2
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800818e:	7bfa      	ldrb	r2, [r7, #15]
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	4613      	mov	r3, r2
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	440b      	add	r3, r1
 800819c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80081a0:	2200      	movs	r2, #0
 80081a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80081a4:	7bfa      	ldrb	r2, [r7, #15]
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4613      	mov	r3, r2
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	4413      	add	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	440b      	add	r3, r1
 80081b2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80081b6:	2200      	movs	r2, #0
 80081b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	3301      	adds	r3, #1
 80081be:	73fb      	strb	r3, [r7, #15]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	791b      	ldrb	r3, [r3, #4]
 80081c4:	7bfa      	ldrb	r2, [r7, #15]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d3b5      	bcc.n	8008136 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	7c1a      	ldrb	r2, [r3, #16]
 80081d2:	f88d 2000 	strb.w	r2, [sp]
 80081d6:	3304      	adds	r3, #4
 80081d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081da:	f003 ff11 	bl	800c000 <USB_DevInit>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e00c      	b.n	800820a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4618      	mov	r0, r3
 8008204:	f004 ff5b 	bl	800d0be <USB_DevDisconnect>

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008226:	2b01      	cmp	r3, #1
 8008228:	d101      	bne.n	800822e <HAL_PCD_Start+0x1c>
 800822a:	2302      	movs	r3, #2
 800822c:	e022      	b.n	8008274 <HAL_PCD_Start+0x62>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	d009      	beq.n	8008256 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008246:	2b01      	cmp	r3, #1
 8008248:	d105      	bne.n	8008256 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800824e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4618      	mov	r0, r3
 800825c:	f003 fe62 	bl	800bf24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4618      	mov	r0, r3
 8008266:	f004 ff09 	bl	800d07c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800827c:	b590      	push	{r4, r7, lr}
 800827e:	b08d      	sub	sp, #52	@ 0x34
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4618      	mov	r0, r3
 8008294:	f004 ffc7 	bl	800d226 <USB_GetMode>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	f040 848c 	bne.w	8008bb8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f004 ff2b 	bl	800d100 <USB_ReadInterrupts>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8482 	beq.w	8008bb6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	0a1b      	lsrs	r3, r3, #8
 80082bc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f004 ff18 	bl	800d100 <USB_ReadInterrupts>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d107      	bne.n	80082ea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	695a      	ldr	r2, [r3, #20]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f002 0202 	and.w	r2, r2, #2
 80082e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f004 ff06 	bl	800d100 <USB_ReadInterrupts>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f003 0310 	and.w	r3, r3, #16
 80082fa:	2b10      	cmp	r3, #16
 80082fc:	d161      	bne.n	80083c2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0210 	bic.w	r2, r2, #16
 800830c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	f003 020f 	and.w	r2, r3, #15
 800831a:	4613      	mov	r3, r2
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	4413      	add	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	4413      	add	r3, r2
 800832a:	3304      	adds	r3, #4
 800832c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	0c5b      	lsrs	r3, r3, #17
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	2b02      	cmp	r3, #2
 8008338:	d124      	bne.n	8008384 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008340:	4013      	ands	r3, r2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d035      	beq.n	80083b2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	091b      	lsrs	r3, r3, #4
 800834e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008354:	b29b      	uxth	r3, r3
 8008356:	461a      	mov	r2, r3
 8008358:	6a38      	ldr	r0, [r7, #32]
 800835a:	f004 fd3d 	bl	800cdd8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	68da      	ldr	r2, [r3, #12]
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	091b      	lsrs	r3, r3, #4
 8008366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800836a:	441a      	add	r2, r3
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	695a      	ldr	r2, [r3, #20]
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	091b      	lsrs	r3, r3, #4
 8008378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800837c:	441a      	add	r2, r3
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	615a      	str	r2, [r3, #20]
 8008382:	e016      	b.n	80083b2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	0c5b      	lsrs	r3, r3, #17
 8008388:	f003 030f 	and.w	r3, r3, #15
 800838c:	2b06      	cmp	r3, #6
 800838e:	d110      	bne.n	80083b2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008396:	2208      	movs	r2, #8
 8008398:	4619      	mov	r1, r3
 800839a:	6a38      	ldr	r0, [r7, #32]
 800839c:	f004 fd1c 	bl	800cdd8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	695a      	ldr	r2, [r3, #20]
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	091b      	lsrs	r3, r3, #4
 80083a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083ac:	441a      	add	r2, r3
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	699a      	ldr	r2, [r3, #24]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f042 0210 	orr.w	r2, r2, #16
 80083c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f004 fe9a 	bl	800d100 <USB_ReadInterrupts>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80083d6:	f040 80a7 	bne.w	8008528 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80083da:	2300      	movs	r3, #0
 80083dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f004 fe9f 	bl	800d126 <USB_ReadDevAllOutEpInterrupt>
 80083e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80083ea:	e099      	b.n	8008520 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80083ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 808e 	beq.w	8008514 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	4611      	mov	r1, r2
 8008402:	4618      	mov	r0, r3
 8008404:	f004 fec3 	bl	800d18e <USB_ReadDevOutEPInterrupt>
 8008408:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00c      	beq.n	800842e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008420:	461a      	mov	r2, r3
 8008422:	2301      	movs	r3, #1
 8008424:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008426:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fea3 	bl	8009174 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f003 0308 	and.w	r3, r3, #8
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00c      	beq.n	8008452 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	4413      	add	r3, r2
 8008440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008444:	461a      	mov	r2, r3
 8008446:	2308      	movs	r3, #8
 8008448:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800844a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 ff79 	bl	8009344 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f003 0310 	and.w	r3, r3, #16
 8008458:	2b00      	cmp	r3, #0
 800845a:	d008      	beq.n	800846e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800845c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008468:	461a      	mov	r2, r3
 800846a:	2310      	movs	r3, #16
 800846c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d030      	beq.n	80084da <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008480:	2b80      	cmp	r3, #128	@ 0x80
 8008482:	d109      	bne.n	8008498 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	69fa      	ldr	r2, [r7, #28]
 800848e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008492:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008496:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800849a:	4613      	mov	r3, r2
 800849c:	00db      	lsls	r3, r3, #3
 800849e:	4413      	add	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4413      	add	r3, r2
 80084aa:	3304      	adds	r3, #4
 80084ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	78db      	ldrb	r3, [r3, #3]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d108      	bne.n	80084c8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2200      	movs	r2, #0
 80084ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80084bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f00a fcde 	bl	8012e84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084d4:	461a      	mov	r2, r3
 80084d6:	2302      	movs	r3, #2
 80084d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f003 0320 	and.w	r3, r3, #32
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d008      	beq.n	80084f6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80084e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084f0:	461a      	mov	r2, r3
 80084f2:	2320      	movs	r3, #32
 80084f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d009      	beq.n	8008514 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800850c:	461a      	mov	r2, r3
 800850e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008512:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008516:	3301      	adds	r3, #1
 8008518:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800851a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851c:	085b      	lsrs	r3, r3, #1
 800851e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008522:	2b00      	cmp	r3, #0
 8008524:	f47f af62 	bne.w	80083ec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4618      	mov	r0, r3
 800852e:	f004 fde7 	bl	800d100 <USB_ReadInterrupts>
 8008532:	4603      	mov	r3, r0
 8008534:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008538:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800853c:	f040 80db 	bne.w	80086f6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4618      	mov	r0, r3
 8008546:	f004 fe08 	bl	800d15a <USB_ReadDevAllInEpInterrupt>
 800854a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008550:	e0cd      	b.n	80086ee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 80c2 	beq.w	80086e2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008564:	b2d2      	uxtb	r2, r2
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f004 fe2e 	bl	800d1ca <USB_ReadDevInEPInterrupt>
 800856e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d057      	beq.n	800862a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800857a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857c:	f003 030f 	and.w	r3, r3, #15
 8008580:	2201      	movs	r2, #1
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800858e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	43db      	mvns	r3, r3
 8008594:	69f9      	ldr	r1, [r7, #28]
 8008596:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800859a:	4013      	ands	r3, r2
 800859c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800859e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085aa:	461a      	mov	r2, r3
 80085ac:	2301      	movs	r3, #1
 80085ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	799b      	ldrb	r3, [r3, #6]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d132      	bne.n	800861e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085bc:	4613      	mov	r3, r2
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	3320      	adds	r3, #32
 80085c8:	6819      	ldr	r1, [r3, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085ce:	4613      	mov	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4403      	add	r3, r0
 80085d8:	331c      	adds	r3, #28
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4419      	add	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085e2:	4613      	mov	r3, r2
 80085e4:	00db      	lsls	r3, r3, #3
 80085e6:	4413      	add	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4403      	add	r3, r0
 80085ec:	3320      	adds	r3, #32
 80085ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80085f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d113      	bne.n	800861e <HAL_PCD_IRQHandler+0x3a2>
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085fa:	4613      	mov	r3, r2
 80085fc:	00db      	lsls	r3, r3, #3
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	440b      	add	r3, r1
 8008604:	3324      	adds	r3, #36	@ 0x24
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d108      	bne.n	800861e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6818      	ldr	r0, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008616:	461a      	mov	r2, r3
 8008618:	2101      	movs	r1, #1
 800861a:	f004 fe35 	bl	800d288 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800861e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008620:	b2db      	uxtb	r3, r3
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f00a fbb2 	bl	8012d8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f003 0308 	and.w	r3, r3, #8
 8008630:	2b00      	cmp	r3, #0
 8008632:	d008      	beq.n	8008646 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008640:	461a      	mov	r2, r3
 8008642:	2308      	movs	r3, #8
 8008644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b00      	cmp	r3, #0
 800864e:	d008      	beq.n	8008662 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800865c:	461a      	mov	r2, r3
 800865e:	2310      	movs	r3, #16
 8008660:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008668:	2b00      	cmp	r3, #0
 800866a:	d008      	beq.n	800867e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008678:	461a      	mov	r2, r3
 800867a:	2340      	movs	r3, #64	@ 0x40
 800867c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f003 0302 	and.w	r3, r3, #2
 8008684:	2b00      	cmp	r3, #0
 8008686:	d023      	beq.n	80086d0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800868a:	6a38      	ldr	r0, [r7, #32]
 800868c:	f003 fe1c 	bl	800c2c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008692:	4613      	mov	r3, r2
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	4413      	add	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	3310      	adds	r3, #16
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	4413      	add	r3, r2
 80086a0:	3304      	adds	r3, #4
 80086a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	78db      	ldrb	r3, [r3, #3]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d108      	bne.n	80086be <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2200      	movs	r2, #0
 80086b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80086b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f00a fbf5 	bl	8012ea8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80086be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ca:	461a      	mov	r2, r3
 80086cc:	2302      	movs	r3, #2
 80086ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80086da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fcbd 	bl	800905c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80086e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e4:	3301      	adds	r3, #1
 80086e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80086e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ea:	085b      	lsrs	r3, r3, #1
 80086ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80086ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f47f af2e 	bne.w	8008552 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f004 fd00 	bl	800d100 <USB_ReadInterrupts>
 8008700:	4603      	mov	r3, r0
 8008702:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008706:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800870a:	d122      	bne.n	8008752 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	69fa      	ldr	r2, [r7, #28]
 8008716:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800871a:	f023 0301 	bic.w	r3, r3, #1
 800871e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008726:	2b01      	cmp	r3, #1
 8008728:	d108      	bne.n	800873c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008732:	2100      	movs	r1, #0
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fea3 	bl	8009480 <HAL_PCDEx_LPM_Callback>
 800873a:	e002      	b.n	8008742 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f00a fb93 	bl	8012e68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	695a      	ldr	r2, [r3, #20]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4618      	mov	r0, r3
 8008758:	f004 fcd2 	bl	800d100 <USB_ReadInterrupts>
 800875c:	4603      	mov	r3, r0
 800875e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008766:	d112      	bne.n	800878e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	2b01      	cmp	r3, #1
 8008776:	d102      	bne.n	800877e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f00a fb4f 	bl	8012e1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	695a      	ldr	r2, [r3, #20]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800878c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4618      	mov	r0, r3
 8008794:	f004 fcb4 	bl	800d100 <USB_ReadInterrupts>
 8008798:	4603      	mov	r3, r0
 800879a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800879e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a2:	f040 80b7 	bne.w	8008914 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087b4:	f023 0301 	bic.w	r3, r3, #1
 80087b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2110      	movs	r1, #16
 80087c0:	4618      	mov	r0, r3
 80087c2:	f003 fd81 	bl	800c2c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087c6:	2300      	movs	r3, #0
 80087c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087ca:	e046      	b.n	800885a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80087cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087d8:	461a      	mov	r2, r3
 80087da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80087de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80087e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087f0:	0151      	lsls	r1, r2, #5
 80087f2:	69fa      	ldr	r2, [r7, #28]
 80087f4:	440a      	add	r2, r1
 80087f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80087fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800880c:	461a      	mov	r2, r3
 800880e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008812:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008824:	0151      	lsls	r1, r2, #5
 8008826:	69fa      	ldr	r2, [r7, #28]
 8008828:	440a      	add	r2, r1
 800882a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800882e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008832:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008844:	0151      	lsls	r1, r2, #5
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	440a      	add	r2, r1
 800884a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800884e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008852:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008856:	3301      	adds	r3, #1
 8008858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	791b      	ldrb	r3, [r3, #4]
 800885e:	461a      	mov	r2, r3
 8008860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008862:	4293      	cmp	r3, r2
 8008864:	d3b2      	bcc.n	80087cc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	69fa      	ldr	r2, [r7, #28]
 8008870:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008874:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008878:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	7bdb      	ldrb	r3, [r3, #15]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d016      	beq.n	80088b0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008892:	f043 030b 	orr.w	r3, r3, #11
 8008896:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088a2:	69fa      	ldr	r2, [r7, #28]
 80088a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088a8:	f043 030b 	orr.w	r3, r3, #11
 80088ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80088ae:	e015      	b.n	80088dc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	69fa      	ldr	r2, [r7, #28]
 80088ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80088c2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80088c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	69fa      	ldr	r2, [r7, #28]
 80088d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088d6:	f043 030b 	orr.w	r3, r3, #11
 80088da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	69fa      	ldr	r2, [r7, #28]
 80088e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80088ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80088fe:	461a      	mov	r2, r3
 8008900:	f004 fcc2 	bl	800d288 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	695a      	ldr	r2, [r3, #20]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4618      	mov	r0, r3
 800891a:	f004 fbf1 	bl	800d100 <USB_ReadInterrupts>
 800891e:	4603      	mov	r3, r0
 8008920:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008928:	d123      	bne.n	8008972 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4618      	mov	r0, r3
 8008930:	f004 fc87 	bl	800d242 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4618      	mov	r0, r3
 800893a:	f003 fd3e 	bl	800c3ba <USB_GetDevSpeed>
 800893e:	4603      	mov	r3, r0
 8008940:	461a      	mov	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681c      	ldr	r4, [r3, #0]
 800894a:	f001 f9c9 	bl	8009ce0 <HAL_RCC_GetHCLKFreq>
 800894e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008954:	461a      	mov	r2, r3
 8008956:	4620      	mov	r0, r4
 8008958:	f003 fa42 	bl	800bde0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f00a fa3e 	bl	8012dde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	695a      	ldr	r2, [r3, #20]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008970:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4618      	mov	r0, r3
 8008978:	f004 fbc2 	bl	800d100 <USB_ReadInterrupts>
 800897c:	4603      	mov	r3, r0
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b08      	cmp	r3, #8
 8008984:	d10a      	bne.n	800899c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f00a fa1b 	bl	8012dc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	695a      	ldr	r2, [r3, #20]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f002 0208 	and.w	r2, r2, #8
 800899a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f004 fbad 	bl	800d100 <USB_ReadInterrupts>
 80089a6:	4603      	mov	r3, r0
 80089a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089ac:	2b80      	cmp	r3, #128	@ 0x80
 80089ae:	d123      	bne.n	80089f8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80089b0:	6a3b      	ldr	r3, [r7, #32]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80089bc:	2301      	movs	r3, #1
 80089be:	627b      	str	r3, [r7, #36]	@ 0x24
 80089c0:	e014      	b.n	80089ec <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089c6:	4613      	mov	r3, r2
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	4413      	add	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	440b      	add	r3, r1
 80089d0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d105      	bne.n	80089e6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fb0a 	bl	8008ffa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	3301      	adds	r3, #1
 80089ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	791b      	ldrb	r3, [r3, #4]
 80089f0:	461a      	mov	r2, r3
 80089f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d3e4      	bcc.n	80089c2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f004 fb7f 	bl	800d100 <USB_ReadInterrupts>
 8008a02:	4603      	mov	r3, r0
 8008a04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a0c:	d13c      	bne.n	8008a88 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a0e:	2301      	movs	r3, #1
 8008a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a12:	e02b      	b.n	8008a6c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a28:	4613      	mov	r3, r2
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	3318      	adds	r3, #24
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d115      	bne.n	8008a66 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008a3a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	da12      	bge.n	8008a66 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008a40:	6879      	ldr	r1, [r7, #4]
 8008a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a44:	4613      	mov	r3, r2
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	4413      	add	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	440b      	add	r3, r1
 8008a4e:	3317      	adds	r3, #23
 8008a50:	2201      	movs	r2, #1
 8008a52:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 faca 	bl	8008ffa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a68:	3301      	adds	r3, #1
 8008a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	791b      	ldrb	r3, [r3, #4]
 8008a70:	461a      	mov	r2, r3
 8008a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d3cd      	bcc.n	8008a14 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695a      	ldr	r2, [r3, #20]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f004 fb37 	bl	800d100 <USB_ReadInterrupts>
 8008a92:	4603      	mov	r3, r0
 8008a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a9c:	d156      	bne.n	8008b4c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008aa2:	e045      	b.n	8008b30 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ab8:	4613      	mov	r3, r2
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d12e      	bne.n	8008b2a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008acc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	da2b      	bge.n	8008b2a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	0c1a      	lsrs	r2, r3, #16
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008adc:	4053      	eors	r3, r2
 8008ade:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d121      	bne.n	8008b2a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aea:	4613      	mov	r3, r2
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	440b      	add	r3, r1
 8008af4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008af8:	2201      	movs	r2, #1
 8008afa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10a      	bne.n	8008b2a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	69fa      	ldr	r2, [r7, #28]
 8008b1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008b26:	6053      	str	r3, [r2, #4]
            break;
 8008b28:	e008      	b.n	8008b3c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	791b      	ldrb	r3, [r3, #4]
 8008b34:	461a      	mov	r2, r3
 8008b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d3b3      	bcc.n	8008aa4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	695a      	ldr	r2, [r3, #20]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f004 fad5 	bl	800d100 <USB_ReadInterrupts>
 8008b56:	4603      	mov	r3, r0
 8008b58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b60:	d10a      	bne.n	8008b78 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f00a f9b2 	bl	8012ecc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	695a      	ldr	r2, [r3, #20]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f004 fabf 	bl	800d100 <USB_ReadInterrupts>
 8008b82:	4603      	mov	r3, r0
 8008b84:	f003 0304 	and.w	r3, r3, #4
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d115      	bne.n	8008bb8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	f003 0304 	and.w	r3, r3, #4
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d002      	beq.n	8008ba4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f00a f9a2 	bl	8012ee8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6859      	ldr	r1, [r3, #4]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	605a      	str	r2, [r3, #4]
 8008bb4:	e000      	b.n	8008bb8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8008bb6:	bf00      	nop
    }
  }
}
 8008bb8:	3734      	adds	r7, #52	@ 0x34
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd90      	pop	{r4, r7, pc}

08008bbe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d101      	bne.n	8008bd8 <HAL_PCD_SetAddress+0x1a>
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	e012      	b.n	8008bfe <HAL_PCD_SetAddress+0x40>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	78fa      	ldrb	r2, [r7, #3]
 8008be4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	78fa      	ldrb	r2, [r7, #3]
 8008bec:	4611      	mov	r1, r2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f004 fa1e 	bl	800d030 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	4608      	mov	r0, r1
 8008c10:	4611      	mov	r1, r2
 8008c12:	461a      	mov	r2, r3
 8008c14:	4603      	mov	r3, r0
 8008c16:	70fb      	strb	r3, [r7, #3]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	803b      	strh	r3, [r7, #0]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	da0f      	bge.n	8008c4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	f003 020f 	and.w	r2, r3, #15
 8008c32:	4613      	mov	r3, r2
 8008c34:	00db      	lsls	r3, r3, #3
 8008c36:	4413      	add	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	3310      	adds	r3, #16
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	4413      	add	r3, r2
 8008c40:	3304      	adds	r3, #4
 8008c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2201      	movs	r2, #1
 8008c48:	705a      	strb	r2, [r3, #1]
 8008c4a:	e00f      	b.n	8008c6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	f003 020f 	and.w	r2, r3, #15
 8008c52:	4613      	mov	r3, r2
 8008c54:	00db      	lsls	r3, r3, #3
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	4413      	add	r3, r2
 8008c62:	3304      	adds	r3, #4
 8008c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	f003 030f 	and.w	r3, r3, #15
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008c78:	883b      	ldrh	r3, [r7, #0]
 8008c7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	78ba      	ldrb	r2, [r7, #2]
 8008c86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	785b      	ldrb	r3, [r3, #1]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d004      	beq.n	8008c9a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008c9a:	78bb      	ldrb	r3, [r7, #2]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d102      	bne.n	8008ca6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d101      	bne.n	8008cb4 <HAL_PCD_EP_Open+0xae>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e00e      	b.n	8008cd2 <HAL_PCD_EP_Open+0xcc>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68f9      	ldr	r1, [r7, #12]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f003 fb9e 	bl	800c404 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008cd0:	7afb      	ldrb	r3, [r7, #11]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	da0f      	bge.n	8008d0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cee:	78fb      	ldrb	r3, [r7, #3]
 8008cf0:	f003 020f 	and.w	r2, r3, #15
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	3310      	adds	r3, #16
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	4413      	add	r3, r2
 8008d02:	3304      	adds	r3, #4
 8008d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	705a      	strb	r2, [r3, #1]
 8008d0c:	e00f      	b.n	8008d2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d0e:	78fb      	ldrb	r3, [r7, #3]
 8008d10:	f003 020f 	and.w	r2, r3, #15
 8008d14:	4613      	mov	r3, r2
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	4413      	add	r3, r2
 8008d24:	3304      	adds	r3, #4
 8008d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	f003 030f 	and.w	r3, r3, #15
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_PCD_EP_Close+0x6e>
 8008d44:	2302      	movs	r3, #2
 8008d46:	e00e      	b.n	8008d66 <HAL_PCD_EP_Close+0x8c>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68f9      	ldr	r1, [r7, #12]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f003 fbdc 	bl	800c514 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b086      	sub	sp, #24
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	60f8      	str	r0, [r7, #12]
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	603b      	str	r3, [r7, #0]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d7e:	7afb      	ldrb	r3, [r7, #11]
 8008d80:	f003 020f 	and.w	r2, r3, #15
 8008d84:	4613      	mov	r3, r2
 8008d86:	00db      	lsls	r3, r3, #3
 8008d88:	4413      	add	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4413      	add	r3, r2
 8008d94:	3304      	adds	r3, #4
 8008d96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	2200      	movs	r2, #0
 8008da8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2200      	movs	r2, #0
 8008dae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008db0:	7afb      	ldrb	r3, [r7, #11]
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	799b      	ldrb	r3, [r3, #6]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d102      	bne.n	8008dca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6818      	ldr	r0, [r3, #0]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	799b      	ldrb	r3, [r3, #6]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	6979      	ldr	r1, [r7, #20]
 8008dd6:	f003 fc79 	bl	800c6cc <USB_EPStartXfer>

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	460b      	mov	r3, r1
 8008dee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	f003 020f 	and.w	r2, r3, #15
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	440b      	add	r3, r1
 8008e02:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008e06:	681b      	ldr	r3, [r3, #0]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	607a      	str	r2, [r7, #4]
 8008e1e:	603b      	str	r3, [r7, #0]
 8008e20:	460b      	mov	r3, r1
 8008e22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e24:	7afb      	ldrb	r3, [r7, #11]
 8008e26:	f003 020f 	and.w	r2, r3, #15
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	4413      	add	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	3310      	adds	r3, #16
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	4413      	add	r3, r2
 8008e38:	3304      	adds	r3, #4
 8008e3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	2201      	movs	r2, #1
 8008e52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e54:	7afb      	ldrb	r3, [r7, #11]
 8008e56:	f003 030f 	and.w	r3, r3, #15
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	799b      	ldrb	r3, [r3, #6]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d102      	bne.n	8008e6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6818      	ldr	r0, [r3, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	799b      	ldrb	r3, [r3, #6]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6979      	ldr	r1, [r7, #20]
 8008e7a:	f003 fc27 	bl	800c6cc <USB_EPStartXfer>

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	f003 030f 	and.w	r3, r3, #15
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	7912      	ldrb	r2, [r2, #4]
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d901      	bls.n	8008ea6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e04f      	b.n	8008f46 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	da0f      	bge.n	8008ece <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	f003 020f 	and.w	r2, r3, #15
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	3310      	adds	r3, #16
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	705a      	strb	r2, [r3, #1]
 8008ecc:	e00d      	b.n	8008eea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008ece:	78fa      	ldrb	r2, [r7, #3]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	4413      	add	r3, r2
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2201      	movs	r2, #1
 8008eee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <HAL_PCD_EP_SetStall+0x82>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e01d      	b.n	8008f46 <HAL_PCD_EP_SetStall+0xbe>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68f9      	ldr	r1, [r7, #12]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f003 ffb5 	bl	800ce88 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	f003 030f 	and.w	r3, r3, #15
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d109      	bne.n	8008f3c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6818      	ldr	r0, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	7999      	ldrb	r1, [r3, #6]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008f36:	461a      	mov	r2, r3
 8008f38:	f004 f9a6 	bl	800d288 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	f003 030f 	and.w	r3, r3, #15
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	7912      	ldrb	r2, [r2, #4]
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d901      	bls.n	8008f6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e042      	b.n	8008ff2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008f6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	da0f      	bge.n	8008f94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f74:	78fb      	ldrb	r3, [r7, #3]
 8008f76:	f003 020f 	and.w	r2, r3, #15
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	3310      	adds	r3, #16
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	4413      	add	r3, r2
 8008f88:	3304      	adds	r3, #4
 8008f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	705a      	strb	r2, [r3, #1]
 8008f92:	e00f      	b.n	8008fb4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f94:	78fb      	ldrb	r3, [r7, #3]
 8008f96:	f003 020f 	and.w	r2, r3, #15
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	4413      	add	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	4413      	add	r3, r2
 8008faa:	3304      	adds	r3, #4
 8008fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	f003 030f 	and.w	r3, r3, #15
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d101      	bne.n	8008fd4 <HAL_PCD_EP_ClrStall+0x86>
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e00e      	b.n	8008ff2 <HAL_PCD_EP_ClrStall+0xa4>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68f9      	ldr	r1, [r7, #12]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f003 ffbe 	bl	800cf64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	460b      	mov	r3, r1
 8009004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800900a:	2b00      	cmp	r3, #0
 800900c:	da0c      	bge.n	8009028 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800900e:	78fb      	ldrb	r3, [r7, #3]
 8009010:	f003 020f 	and.w	r2, r3, #15
 8009014:	4613      	mov	r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	4413      	add	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	3310      	adds	r3, #16
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	4413      	add	r3, r2
 8009022:	3304      	adds	r3, #4
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	e00c      	b.n	8009042 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009028:	78fb      	ldrb	r3, [r7, #3]
 800902a:	f003 020f 	and.w	r2, r3, #15
 800902e:	4613      	mov	r3, r2
 8009030:	00db      	lsls	r3, r3, #3
 8009032:	4413      	add	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	4413      	add	r3, r2
 800903e:	3304      	adds	r3, #4
 8009040:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68f9      	ldr	r1, [r7, #12]
 8009048:	4618      	mov	r0, r3
 800904a:	f003 fddd 	bl	800cc08 <USB_EPStopXfer>
 800904e:	4603      	mov	r3, r0
 8009050:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009052:	7afb      	ldrb	r3, [r7, #11]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b08a      	sub	sp, #40	@ 0x28
 8009060:	af02      	add	r7, sp, #8
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	4613      	mov	r3, r2
 8009074:	00db      	lsls	r3, r3, #3
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	3310      	adds	r3, #16
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	4413      	add	r3, r2
 8009080:	3304      	adds	r3, #4
 8009082:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	695a      	ldr	r2, [r3, #20]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	429a      	cmp	r2, r3
 800908e:	d901      	bls.n	8009094 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e06b      	b.n	800916c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	691a      	ldr	r2, [r3, #16]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	69fa      	ldr	r2, [r7, #28]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d902      	bls.n	80090b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	3303      	adds	r3, #3
 80090b4:	089b      	lsrs	r3, r3, #2
 80090b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80090b8:	e02a      	b.n	8009110 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	691a      	ldr	r2, [r3, #16]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d902      	bls.n	80090d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	3303      	adds	r3, #3
 80090da:	089b      	lsrs	r3, r3, #2
 80090dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	68d9      	ldr	r1, [r3, #12]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	4603      	mov	r3, r0
 80090f2:	6978      	ldr	r0, [r7, #20]
 80090f4:	f003 fe32 	bl	800cd5c <USB_WritePacket>

    ep->xfer_buff  += len;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	68da      	ldr	r2, [r3, #12]
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	441a      	add	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	695a      	ldr	r2, [r3, #20]
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	441a      	add	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	4413      	add	r3, r2
 8009118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009120:	69ba      	ldr	r2, [r7, #24]
 8009122:	429a      	cmp	r2, r3
 8009124:	d809      	bhi.n	800913a <PCD_WriteEmptyTxFifo+0xde>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	695a      	ldr	r2, [r3, #20]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800912e:	429a      	cmp	r2, r3
 8009130:	d203      	bcs.n	800913a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1bf      	bne.n	80090ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	691a      	ldr	r2, [r3, #16]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	429a      	cmp	r2, r3
 8009144:	d811      	bhi.n	800916a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	f003 030f 	and.w	r3, r3, #15
 800914c:	2201      	movs	r2, #1
 800914e:	fa02 f303 	lsl.w	r3, r2, r3
 8009152:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800915a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	43db      	mvns	r3, r3
 8009160:	6939      	ldr	r1, [r7, #16]
 8009162:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009166:	4013      	ands	r3, r2
 8009168:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3720      	adds	r7, #32
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	333c      	adds	r3, #60	@ 0x3c
 800918c:	3304      	adds	r3, #4
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	015a      	lsls	r2, r3, #5
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	4413      	add	r3, r2
 800919a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	799b      	ldrb	r3, [r3, #6]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d17b      	bne.n	80092a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f003 0308 	and.w	r3, r3, #8
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d015      	beq.n	80091e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	4a61      	ldr	r2, [pc, #388]	@ (800933c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	f240 80b9 	bls.w	8009330 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 80b3 	beq.w	8009330 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d6:	461a      	mov	r2, r3
 80091d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091dc:	6093      	str	r3, [r2, #8]
 80091de:	e0a7      	b.n	8009330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	f003 0320 	and.w	r3, r3, #32
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d009      	beq.n	80091fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091f6:	461a      	mov	r2, r3
 80091f8:	2320      	movs	r3, #32
 80091fa:	6093      	str	r3, [r2, #8]
 80091fc:	e098      	b.n	8009330 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009204:	2b00      	cmp	r3, #0
 8009206:	f040 8093 	bne.w	8009330 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	4a4b      	ldr	r2, [pc, #300]	@ (800933c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d90f      	bls.n	8009232 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00a      	beq.n	8009232 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009228:	461a      	mov	r2, r3
 800922a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800922e:	6093      	str	r3, [r2, #8]
 8009230:	e07e      	b.n	8009330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	4613      	mov	r3, r2
 8009236:	00db      	lsls	r3, r3, #3
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	4413      	add	r3, r2
 8009244:	3304      	adds	r3, #4
 8009246:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6a1a      	ldr	r2, [r3, #32]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	0159      	lsls	r1, r3, #5
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	440b      	add	r3, r1
 8009254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800925e:	1ad2      	subs	r2, r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d114      	bne.n	8009294 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d109      	bne.n	8009286 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800927c:	461a      	mov	r2, r3
 800927e:	2101      	movs	r1, #1
 8009280:	f004 f802 	bl	800d288 <USB_EP0_OutStart>
 8009284:	e006      	b.n	8009294 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	441a      	add	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	b2db      	uxtb	r3, r3
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f009 fd5c 	bl	8012d58 <HAL_PCD_DataOutStageCallback>
 80092a0:	e046      	b.n	8009330 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	4a26      	ldr	r2, [pc, #152]	@ (8009340 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d124      	bne.n	80092f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00a      	beq.n	80092ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	015a      	lsls	r2, r3, #5
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	4413      	add	r3, r2
 80092bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092c0:	461a      	mov	r2, r3
 80092c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092c6:	6093      	str	r3, [r2, #8]
 80092c8:	e032      	b.n	8009330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f003 0320 	and.w	r3, r3, #32
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d008      	beq.n	80092e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e0:	461a      	mov	r2, r3
 80092e2:	2320      	movs	r3, #32
 80092e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f009 fd33 	bl	8012d58 <HAL_PCD_DataOutStageCallback>
 80092f2:	e01d      	b.n	8009330 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d114      	bne.n	8009324 <PCD_EP_OutXfrComplete_int+0x1b0>
 80092fa:	6879      	ldr	r1, [r7, #4]
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	4613      	mov	r3, r2
 8009300:	00db      	lsls	r3, r3, #3
 8009302:	4413      	add	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	440b      	add	r3, r1
 8009308:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d108      	bne.n	8009324 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800931c:	461a      	mov	r2, r3
 800931e:	2100      	movs	r1, #0
 8009320:	f003 ffb2 	bl	800d288 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	b2db      	uxtb	r3, r3
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f009 fd14 	bl	8012d58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3720      	adds	r7, #32
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	4f54300a 	.word	0x4f54300a
 8009340:	4f54310a 	.word	0x4f54310a

08009344 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	333c      	adds	r3, #60	@ 0x3c
 800935c:	3304      	adds	r3, #4
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4a15      	ldr	r2, [pc, #84]	@ (80093cc <PCD_EP_OutSetupPacket_int+0x88>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d90e      	bls.n	8009398 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009380:	2b00      	cmp	r3, #0
 8009382:	d009      	beq.n	8009398 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009390:	461a      	mov	r2, r3
 8009392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009396:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f009 fccb 	bl	8012d34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4a0a      	ldr	r2, [pc, #40]	@ (80093cc <PCD_EP_OutSetupPacket_int+0x88>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d90c      	bls.n	80093c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	799b      	ldrb	r3, [r3, #6]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d108      	bne.n	80093c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80093b8:	461a      	mov	r2, r3
 80093ba:	2101      	movs	r1, #1
 80093bc:	f003 ff64 	bl	800d288 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	4f54300a 	.word	0x4f54300a

080093d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	460b      	mov	r3, r1
 80093da:	70fb      	strb	r3, [r7, #3]
 80093dc:	4613      	mov	r3, r2
 80093de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d107      	bne.n	80093fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80093ee:	883b      	ldrh	r3, [r7, #0]
 80093f0:	0419      	lsls	r1, r3, #16
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	430a      	orrs	r2, r1
 80093fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80093fc:	e028      	b.n	8009450 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009404:	0c1b      	lsrs	r3, r3, #16
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	4413      	add	r3, r2
 800940a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800940c:	2300      	movs	r3, #0
 800940e:	73fb      	strb	r3, [r7, #15]
 8009410:	e00d      	b.n	800942e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	3340      	adds	r3, #64	@ 0x40
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	0c1b      	lsrs	r3, r3, #16
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	4413      	add	r3, r2
 8009426:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	3301      	adds	r3, #1
 800942c:	73fb      	strb	r3, [r7, #15]
 800942e:	7bfa      	ldrb	r2, [r7, #15]
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	3b01      	subs	r3, #1
 8009434:	429a      	cmp	r2, r3
 8009436:	d3ec      	bcc.n	8009412 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009438:	883b      	ldrh	r3, [r7, #0]
 800943a:	0418      	lsls	r0, r3, #16
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6819      	ldr	r1, [r3, #0]
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	3b01      	subs	r3, #1
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	4302      	orrs	r2, r0
 8009448:	3340      	adds	r3, #64	@ 0x40
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	440b      	add	r3, r1
 800944e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800945e:	b480      	push	{r7}
 8009460:	b083      	sub	sp, #12
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	460b      	mov	r3, r1
 8009468:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	887a      	ldrh	r2, [r7, #2]
 8009470:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e267      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d075      	beq.n	80095a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80094b6:	4b88      	ldr	r3, [pc, #544]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	f003 030c 	and.w	r3, r3, #12
 80094be:	2b04      	cmp	r3, #4
 80094c0:	d00c      	beq.n	80094dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094c2:	4b85      	ldr	r3, [pc, #532]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80094ca:	2b08      	cmp	r3, #8
 80094cc:	d112      	bne.n	80094f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094ce:	4b82      	ldr	r3, [pc, #520]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094da:	d10b      	bne.n	80094f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094dc:	4b7e      	ldr	r3, [pc, #504]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d05b      	beq.n	80095a0 <HAL_RCC_OscConfig+0x108>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d157      	bne.n	80095a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e242      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094fc:	d106      	bne.n	800950c <HAL_RCC_OscConfig+0x74>
 80094fe:	4b76      	ldr	r3, [pc, #472]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a75      	ldr	r2, [pc, #468]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 8009504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009508:	6013      	str	r3, [r2, #0]
 800950a:	e01d      	b.n	8009548 <HAL_RCC_OscConfig+0xb0>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009514:	d10c      	bne.n	8009530 <HAL_RCC_OscConfig+0x98>
 8009516:	4b70      	ldr	r3, [pc, #448]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a6f      	ldr	r2, [pc, #444]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 800951c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	4b6d      	ldr	r3, [pc, #436]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a6c      	ldr	r2, [pc, #432]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 8009528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	e00b      	b.n	8009548 <HAL_RCC_OscConfig+0xb0>
 8009530:	4b69      	ldr	r3, [pc, #420]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a68      	ldr	r2, [pc, #416]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 8009536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	4b66      	ldr	r3, [pc, #408]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a65      	ldr	r2, [pc, #404]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 8009542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d013      	beq.n	8009578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009550:	f7fb fdbc 	bl	80050cc <HAL_GetTick>
 8009554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009556:	e008      	b.n	800956a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009558:	f7fb fdb8 	bl	80050cc <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	2b64      	cmp	r3, #100	@ 0x64
 8009564:	d901      	bls.n	800956a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e207      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800956a:	4b5b      	ldr	r3, [pc, #364]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0f0      	beq.n	8009558 <HAL_RCC_OscConfig+0xc0>
 8009576:	e014      	b.n	80095a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009578:	f7fb fda8 	bl	80050cc <HAL_GetTick>
 800957c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800957e:	e008      	b.n	8009592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009580:	f7fb fda4 	bl	80050cc <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	2b64      	cmp	r3, #100	@ 0x64
 800958c:	d901      	bls.n	8009592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800958e:	2303      	movs	r3, #3
 8009590:	e1f3      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009592:	4b51      	ldr	r3, [pc, #324]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1f0      	bne.n	8009580 <HAL_RCC_OscConfig+0xe8>
 800959e:	e000      	b.n	80095a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 0302 	and.w	r3, r3, #2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d063      	beq.n	8009676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80095ae:	4b4a      	ldr	r3, [pc, #296]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f003 030c 	and.w	r3, r3, #12
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00b      	beq.n	80095d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095ba:	4b47      	ldr	r3, [pc, #284]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80095c2:	2b08      	cmp	r3, #8
 80095c4:	d11c      	bne.n	8009600 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095c6:	4b44      	ldr	r3, [pc, #272]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d116      	bne.n	8009600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095d2:	4b41      	ldr	r3, [pc, #260]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d005      	beq.n	80095ea <HAL_RCC_OscConfig+0x152>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d001      	beq.n	80095ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e1c7      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095ea:	4b3b      	ldr	r3, [pc, #236]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	00db      	lsls	r3, r3, #3
 80095f8:	4937      	ldr	r1, [pc, #220]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095fe:	e03a      	b.n	8009676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d020      	beq.n	800964a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009608:	4b34      	ldr	r3, [pc, #208]	@ (80096dc <HAL_RCC_OscConfig+0x244>)
 800960a:	2201      	movs	r2, #1
 800960c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800960e:	f7fb fd5d 	bl	80050cc <HAL_GetTick>
 8009612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009614:	e008      	b.n	8009628 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009616:	f7fb fd59 	bl	80050cc <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	2b02      	cmp	r3, #2
 8009622:	d901      	bls.n	8009628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e1a8      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009628:	4b2b      	ldr	r3, [pc, #172]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0302 	and.w	r3, r3, #2
 8009630:	2b00      	cmp	r3, #0
 8009632:	d0f0      	beq.n	8009616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009634:	4b28      	ldr	r3, [pc, #160]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	00db      	lsls	r3, r3, #3
 8009642:	4925      	ldr	r1, [pc, #148]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 8009644:	4313      	orrs	r3, r2
 8009646:	600b      	str	r3, [r1, #0]
 8009648:	e015      	b.n	8009676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800964a:	4b24      	ldr	r3, [pc, #144]	@ (80096dc <HAL_RCC_OscConfig+0x244>)
 800964c:	2200      	movs	r2, #0
 800964e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009650:	f7fb fd3c 	bl	80050cc <HAL_GetTick>
 8009654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009656:	e008      	b.n	800966a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009658:	f7fb fd38 	bl	80050cc <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b02      	cmp	r3, #2
 8009664:	d901      	bls.n	800966a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e187      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800966a:	4b1b      	ldr	r3, [pc, #108]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0302 	and.w	r3, r3, #2
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1f0      	bne.n	8009658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 0308 	and.w	r3, r3, #8
 800967e:	2b00      	cmp	r3, #0
 8009680:	d036      	beq.n	80096f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d016      	beq.n	80096b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800968a:	4b15      	ldr	r3, [pc, #84]	@ (80096e0 <HAL_RCC_OscConfig+0x248>)
 800968c:	2201      	movs	r2, #1
 800968e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009690:	f7fb fd1c 	bl	80050cc <HAL_GetTick>
 8009694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009696:	e008      	b.n	80096aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009698:	f7fb fd18 	bl	80050cc <HAL_GetTick>
 800969c:	4602      	mov	r2, r0
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d901      	bls.n	80096aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e167      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096aa:	4b0b      	ldr	r3, [pc, #44]	@ (80096d8 <HAL_RCC_OscConfig+0x240>)
 80096ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0f0      	beq.n	8009698 <HAL_RCC_OscConfig+0x200>
 80096b6:	e01b      	b.n	80096f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096b8:	4b09      	ldr	r3, [pc, #36]	@ (80096e0 <HAL_RCC_OscConfig+0x248>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096be:	f7fb fd05 	bl	80050cc <HAL_GetTick>
 80096c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096c4:	e00e      	b.n	80096e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096c6:	f7fb fd01 	bl	80050cc <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d907      	bls.n	80096e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e150      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
 80096d8:	40023800 	.word	0x40023800
 80096dc:	42470000 	.word	0x42470000
 80096e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096e4:	4b88      	ldr	r3, [pc, #544]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 80096e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096e8:	f003 0302 	and.w	r3, r3, #2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1ea      	bne.n	80096c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0304 	and.w	r3, r3, #4
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 8097 	beq.w	800982c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096fe:	2300      	movs	r3, #0
 8009700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009702:	4b81      	ldr	r3, [pc, #516]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 8009704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10f      	bne.n	800972e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800970e:	2300      	movs	r3, #0
 8009710:	60bb      	str	r3, [r7, #8]
 8009712:	4b7d      	ldr	r3, [pc, #500]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 8009714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009716:	4a7c      	ldr	r2, [pc, #496]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 8009718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800971c:	6413      	str	r3, [r2, #64]	@ 0x40
 800971e:	4b7a      	ldr	r3, [pc, #488]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 8009720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009726:	60bb      	str	r3, [r7, #8]
 8009728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800972a:	2301      	movs	r3, #1
 800972c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800972e:	4b77      	ldr	r3, [pc, #476]	@ (800990c <HAL_RCC_OscConfig+0x474>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009736:	2b00      	cmp	r3, #0
 8009738:	d118      	bne.n	800976c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800973a:	4b74      	ldr	r3, [pc, #464]	@ (800990c <HAL_RCC_OscConfig+0x474>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a73      	ldr	r2, [pc, #460]	@ (800990c <HAL_RCC_OscConfig+0x474>)
 8009740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009746:	f7fb fcc1 	bl	80050cc <HAL_GetTick>
 800974a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800974c:	e008      	b.n	8009760 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800974e:	f7fb fcbd 	bl	80050cc <HAL_GetTick>
 8009752:	4602      	mov	r2, r0
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	2b02      	cmp	r3, #2
 800975a:	d901      	bls.n	8009760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e10c      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009760:	4b6a      	ldr	r3, [pc, #424]	@ (800990c <HAL_RCC_OscConfig+0x474>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009768:	2b00      	cmp	r3, #0
 800976a:	d0f0      	beq.n	800974e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d106      	bne.n	8009782 <HAL_RCC_OscConfig+0x2ea>
 8009774:	4b64      	ldr	r3, [pc, #400]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 8009776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009778:	4a63      	ldr	r2, [pc, #396]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 800977a:	f043 0301 	orr.w	r3, r3, #1
 800977e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009780:	e01c      	b.n	80097bc <HAL_RCC_OscConfig+0x324>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	2b05      	cmp	r3, #5
 8009788:	d10c      	bne.n	80097a4 <HAL_RCC_OscConfig+0x30c>
 800978a:	4b5f      	ldr	r3, [pc, #380]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 800978c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800978e:	4a5e      	ldr	r2, [pc, #376]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 8009790:	f043 0304 	orr.w	r3, r3, #4
 8009794:	6713      	str	r3, [r2, #112]	@ 0x70
 8009796:	4b5c      	ldr	r3, [pc, #368]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 8009798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800979a:	4a5b      	ldr	r2, [pc, #364]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 800979c:	f043 0301 	orr.w	r3, r3, #1
 80097a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80097a2:	e00b      	b.n	80097bc <HAL_RCC_OscConfig+0x324>
 80097a4:	4b58      	ldr	r3, [pc, #352]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 80097a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097a8:	4a57      	ldr	r2, [pc, #348]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 80097aa:	f023 0301 	bic.w	r3, r3, #1
 80097ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80097b0:	4b55      	ldr	r3, [pc, #340]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 80097b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097b4:	4a54      	ldr	r2, [pc, #336]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 80097b6:	f023 0304 	bic.w	r3, r3, #4
 80097ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d015      	beq.n	80097f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097c4:	f7fb fc82 	bl	80050cc <HAL_GetTick>
 80097c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097ca:	e00a      	b.n	80097e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097cc:	f7fb fc7e 	bl	80050cc <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097da:	4293      	cmp	r3, r2
 80097dc:	d901      	bls.n	80097e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e0cb      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097e2:	4b49      	ldr	r3, [pc, #292]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 80097e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d0ee      	beq.n	80097cc <HAL_RCC_OscConfig+0x334>
 80097ee:	e014      	b.n	800981a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097f0:	f7fb fc6c 	bl	80050cc <HAL_GetTick>
 80097f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097f6:	e00a      	b.n	800980e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097f8:	f7fb fc68 	bl	80050cc <HAL_GetTick>
 80097fc:	4602      	mov	r2, r0
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009806:	4293      	cmp	r3, r2
 8009808:	d901      	bls.n	800980e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e0b5      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800980e:	4b3e      	ldr	r3, [pc, #248]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 8009810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1ee      	bne.n	80097f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800981a:	7dfb      	ldrb	r3, [r7, #23]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d105      	bne.n	800982c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009820:	4b39      	ldr	r3, [pc, #228]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 8009822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009824:	4a38      	ldr	r2, [pc, #224]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 8009826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800982a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	2b00      	cmp	r3, #0
 8009832:	f000 80a1 	beq.w	8009978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009836:	4b34      	ldr	r3, [pc, #208]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f003 030c 	and.w	r3, r3, #12
 800983e:	2b08      	cmp	r3, #8
 8009840:	d05c      	beq.n	80098fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d141      	bne.n	80098ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800984a:	4b31      	ldr	r3, [pc, #196]	@ (8009910 <HAL_RCC_OscConfig+0x478>)
 800984c:	2200      	movs	r2, #0
 800984e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009850:	f7fb fc3c 	bl	80050cc <HAL_GetTick>
 8009854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009856:	e008      	b.n	800986a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009858:	f7fb fc38 	bl	80050cc <HAL_GetTick>
 800985c:	4602      	mov	r2, r0
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	2b02      	cmp	r3, #2
 8009864:	d901      	bls.n	800986a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	e087      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800986a:	4b27      	ldr	r3, [pc, #156]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1f0      	bne.n	8009858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	69da      	ldr	r2, [r3, #28]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	431a      	orrs	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009884:	019b      	lsls	r3, r3, #6
 8009886:	431a      	orrs	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988c:	085b      	lsrs	r3, r3, #1
 800988e:	3b01      	subs	r3, #1
 8009890:	041b      	lsls	r3, r3, #16
 8009892:	431a      	orrs	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009898:	061b      	lsls	r3, r3, #24
 800989a:	491b      	ldr	r1, [pc, #108]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 800989c:	4313      	orrs	r3, r2
 800989e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009910 <HAL_RCC_OscConfig+0x478>)
 80098a2:	2201      	movs	r2, #1
 80098a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098a6:	f7fb fc11 	bl	80050cc <HAL_GetTick>
 80098aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098ac:	e008      	b.n	80098c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098ae:	f7fb fc0d 	bl	80050cc <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d901      	bls.n	80098c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e05c      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098c0:	4b11      	ldr	r3, [pc, #68]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d0f0      	beq.n	80098ae <HAL_RCC_OscConfig+0x416>
 80098cc:	e054      	b.n	8009978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098ce:	4b10      	ldr	r3, [pc, #64]	@ (8009910 <HAL_RCC_OscConfig+0x478>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098d4:	f7fb fbfa 	bl	80050cc <HAL_GetTick>
 80098d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098da:	e008      	b.n	80098ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098dc:	f7fb fbf6 	bl	80050cc <HAL_GetTick>
 80098e0:	4602      	mov	r2, r0
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d901      	bls.n	80098ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e045      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098ee:	4b06      	ldr	r3, [pc, #24]	@ (8009908 <HAL_RCC_OscConfig+0x470>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1f0      	bne.n	80098dc <HAL_RCC_OscConfig+0x444>
 80098fa:	e03d      	b.n	8009978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d107      	bne.n	8009914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e038      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
 8009908:	40023800 	.word	0x40023800
 800990c:	40007000 	.word	0x40007000
 8009910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009914:	4b1b      	ldr	r3, [pc, #108]	@ (8009984 <HAL_RCC_OscConfig+0x4ec>)
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	2b01      	cmp	r3, #1
 8009920:	d028      	beq.n	8009974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800992c:	429a      	cmp	r2, r3
 800992e:	d121      	bne.n	8009974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800993a:	429a      	cmp	r2, r3
 800993c:	d11a      	bne.n	8009974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009944:	4013      	ands	r3, r2
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800994a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800994c:	4293      	cmp	r3, r2
 800994e:	d111      	bne.n	8009974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800995a:	085b      	lsrs	r3, r3, #1
 800995c:	3b01      	subs	r3, #1
 800995e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009960:	429a      	cmp	r2, r3
 8009962:	d107      	bne.n	8009974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009970:	429a      	cmp	r2, r3
 8009972:	d001      	beq.n	8009978 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e000      	b.n	800997a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	40023800 	.word	0x40023800

08009988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e0cc      	b.n	8009b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800999c:	4b68      	ldr	r3, [pc, #416]	@ (8009b40 <HAL_RCC_ClockConfig+0x1b8>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0307 	and.w	r3, r3, #7
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d90c      	bls.n	80099c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099aa:	4b65      	ldr	r3, [pc, #404]	@ (8009b40 <HAL_RCC_ClockConfig+0x1b8>)
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	b2d2      	uxtb	r2, r2
 80099b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099b2:	4b63      	ldr	r3, [pc, #396]	@ (8009b40 <HAL_RCC_ClockConfig+0x1b8>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f003 0307 	and.w	r3, r3, #7
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d001      	beq.n	80099c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	e0b8      	b.n	8009b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0302 	and.w	r3, r3, #2
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d020      	beq.n	8009a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0304 	and.w	r3, r3, #4
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d005      	beq.n	80099e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80099dc:	4b59      	ldr	r3, [pc, #356]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	4a58      	ldr	r2, [pc, #352]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 80099e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80099e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f003 0308 	and.w	r3, r3, #8
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d005      	beq.n	8009a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80099f4:	4b53      	ldr	r3, [pc, #332]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	4a52      	ldr	r2, [pc, #328]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 80099fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80099fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a00:	4b50      	ldr	r3, [pc, #320]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	494d      	ldr	r1, [pc, #308]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d044      	beq.n	8009aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d107      	bne.n	8009a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a26:	4b47      	ldr	r3, [pc, #284]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d119      	bne.n	8009a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e07f      	b.n	8009b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d003      	beq.n	8009a46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d107      	bne.n	8009a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a46:	4b3f      	ldr	r3, [pc, #252]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d109      	bne.n	8009a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e06f      	b.n	8009b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a56:	4b3b      	ldr	r3, [pc, #236]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 0302 	and.w	r3, r3, #2
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e067      	b.n	8009b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a66:	4b37      	ldr	r3, [pc, #220]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	f023 0203 	bic.w	r2, r3, #3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	4934      	ldr	r1, [pc, #208]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 8009a74:	4313      	orrs	r3, r2
 8009a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009a78:	f7fb fb28 	bl	80050cc <HAL_GetTick>
 8009a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a7e:	e00a      	b.n	8009a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a80:	f7fb fb24 	bl	80050cc <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d901      	bls.n	8009a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e04f      	b.n	8009b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a96:	4b2b      	ldr	r3, [pc, #172]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 020c 	and.w	r2, r3, #12
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d1eb      	bne.n	8009a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009aa8:	4b25      	ldr	r3, [pc, #148]	@ (8009b40 <HAL_RCC_ClockConfig+0x1b8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0307 	and.w	r3, r3, #7
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d20c      	bcs.n	8009ad0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ab6:	4b22      	ldr	r3, [pc, #136]	@ (8009b40 <HAL_RCC_ClockConfig+0x1b8>)
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	b2d2      	uxtb	r2, r2
 8009abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009abe:	4b20      	ldr	r3, [pc, #128]	@ (8009b40 <HAL_RCC_ClockConfig+0x1b8>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0307 	and.w	r3, r3, #7
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d001      	beq.n	8009ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e032      	b.n	8009b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0304 	and.w	r3, r3, #4
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d008      	beq.n	8009aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009adc:	4b19      	ldr	r3, [pc, #100]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	4916      	ldr	r1, [pc, #88]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 8009aea:	4313      	orrs	r3, r2
 8009aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0308 	and.w	r3, r3, #8
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d009      	beq.n	8009b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009afa:	4b12      	ldr	r3, [pc, #72]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	490e      	ldr	r1, [pc, #56]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009b0e:	f000 f821 	bl	8009b54 <HAL_RCC_GetSysClockFreq>
 8009b12:	4602      	mov	r2, r0
 8009b14:	4b0b      	ldr	r3, [pc, #44]	@ (8009b44 <HAL_RCC_ClockConfig+0x1bc>)
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	091b      	lsrs	r3, r3, #4
 8009b1a:	f003 030f 	and.w	r3, r3, #15
 8009b1e:	490a      	ldr	r1, [pc, #40]	@ (8009b48 <HAL_RCC_ClockConfig+0x1c0>)
 8009b20:	5ccb      	ldrb	r3, [r1, r3]
 8009b22:	fa22 f303 	lsr.w	r3, r2, r3
 8009b26:	4a09      	ldr	r2, [pc, #36]	@ (8009b4c <HAL_RCC_ClockConfig+0x1c4>)
 8009b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009b2a:	4b09      	ldr	r3, [pc, #36]	@ (8009b50 <HAL_RCC_ClockConfig+0x1c8>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fb fa88 	bl	8005044 <HAL_InitTick>

  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	40023c00 	.word	0x40023c00
 8009b44:	40023800 	.word	0x40023800
 8009b48:	08018070 	.word	0x08018070
 8009b4c:	20000000 	.word	0x20000000
 8009b50:	200000d4 	.word	0x200000d4

08009b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b58:	b090      	sub	sp, #64	@ 0x40
 8009b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009b60:	2300      	movs	r3, #0
 8009b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009b64:	2300      	movs	r3, #0
 8009b66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b6c:	4b59      	ldr	r3, [pc, #356]	@ (8009cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	f003 030c 	and.w	r3, r3, #12
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	d00d      	beq.n	8009b94 <HAL_RCC_GetSysClockFreq+0x40>
 8009b78:	2b08      	cmp	r3, #8
 8009b7a:	f200 80a1 	bhi.w	8009cc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d002      	beq.n	8009b88 <HAL_RCC_GetSysClockFreq+0x34>
 8009b82:	2b04      	cmp	r3, #4
 8009b84:	d003      	beq.n	8009b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8009b86:	e09b      	b.n	8009cc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009b88:	4b53      	ldr	r3, [pc, #332]	@ (8009cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8009b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009b8c:	e09b      	b.n	8009cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009b8e:	4b53      	ldr	r3, [pc, #332]	@ (8009cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8009b90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009b92:	e098      	b.n	8009cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009b94:	4b4f      	ldr	r3, [pc, #316]	@ (8009cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8009cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d028      	beq.n	8009bfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009baa:	4b4a      	ldr	r3, [pc, #296]	@ (8009cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	099b      	lsrs	r3, r3, #6
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	623b      	str	r3, [r7, #32]
 8009bb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	4b47      	ldr	r3, [pc, #284]	@ (8009cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8009bc0:	fb03 f201 	mul.w	r2, r3, r1
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	fb00 f303 	mul.w	r3, r0, r3
 8009bca:	4413      	add	r3, r2
 8009bcc:	4a43      	ldr	r2, [pc, #268]	@ (8009cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8009bce:	fba0 1202 	umull	r1, r2, r0, r2
 8009bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bd4:	460a      	mov	r2, r1
 8009bd6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bda:	4413      	add	r3, r2
 8009bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be0:	2200      	movs	r2, #0
 8009be2:	61bb      	str	r3, [r7, #24]
 8009be4:	61fa      	str	r2, [r7, #28]
 8009be6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009bea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009bee:	f7f7 f8a3 	bl	8000d38 <__aeabi_uldivmod>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bfa:	e053      	b.n	8009ca4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009bfc:	4b35      	ldr	r3, [pc, #212]	@ (8009cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	099b      	lsrs	r3, r3, #6
 8009c02:	2200      	movs	r2, #0
 8009c04:	613b      	str	r3, [r7, #16]
 8009c06:	617a      	str	r2, [r7, #20]
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009c0e:	f04f 0b00 	mov.w	fp, #0
 8009c12:	4652      	mov	r2, sl
 8009c14:	465b      	mov	r3, fp
 8009c16:	f04f 0000 	mov.w	r0, #0
 8009c1a:	f04f 0100 	mov.w	r1, #0
 8009c1e:	0159      	lsls	r1, r3, #5
 8009c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c24:	0150      	lsls	r0, r2, #5
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	ebb2 080a 	subs.w	r8, r2, sl
 8009c2e:	eb63 090b 	sbc.w	r9, r3, fp
 8009c32:	f04f 0200 	mov.w	r2, #0
 8009c36:	f04f 0300 	mov.w	r3, #0
 8009c3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009c3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009c42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009c46:	ebb2 0408 	subs.w	r4, r2, r8
 8009c4a:	eb63 0509 	sbc.w	r5, r3, r9
 8009c4e:	f04f 0200 	mov.w	r2, #0
 8009c52:	f04f 0300 	mov.w	r3, #0
 8009c56:	00eb      	lsls	r3, r5, #3
 8009c58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c5c:	00e2      	lsls	r2, r4, #3
 8009c5e:	4614      	mov	r4, r2
 8009c60:	461d      	mov	r5, r3
 8009c62:	eb14 030a 	adds.w	r3, r4, sl
 8009c66:	603b      	str	r3, [r7, #0]
 8009c68:	eb45 030b 	adc.w	r3, r5, fp
 8009c6c:	607b      	str	r3, [r7, #4]
 8009c6e:	f04f 0200 	mov.w	r2, #0
 8009c72:	f04f 0300 	mov.w	r3, #0
 8009c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	028b      	lsls	r3, r1, #10
 8009c7e:	4621      	mov	r1, r4
 8009c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009c84:	4621      	mov	r1, r4
 8009c86:	028a      	lsls	r2, r1, #10
 8009c88:	4610      	mov	r0, r2
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c8e:	2200      	movs	r2, #0
 8009c90:	60bb      	str	r3, [r7, #8]
 8009c92:	60fa      	str	r2, [r7, #12]
 8009c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c98:	f7f7 f84e 	bl	8000d38 <__aeabi_uldivmod>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	0c1b      	lsrs	r3, r3, #16
 8009caa:	f003 0303 	and.w	r3, r3, #3
 8009cae:	3301      	adds	r3, #1
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009cb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009cbe:	e002      	b.n	8009cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009cc0:	4b05      	ldr	r3, [pc, #20]	@ (8009cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8009cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3740      	adds	r7, #64	@ 0x40
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cd2:	bf00      	nop
 8009cd4:	40023800 	.word	0x40023800
 8009cd8:	00f42400 	.word	0x00f42400
 8009cdc:	017d7840 	.word	0x017d7840

08009ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ce4:	4b03      	ldr	r3, [pc, #12]	@ (8009cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	20000000 	.word	0x20000000

08009cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009cfc:	f7ff fff0 	bl	8009ce0 <HAL_RCC_GetHCLKFreq>
 8009d00:	4602      	mov	r2, r0
 8009d02:	4b05      	ldr	r3, [pc, #20]	@ (8009d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	0a9b      	lsrs	r3, r3, #10
 8009d08:	f003 0307 	and.w	r3, r3, #7
 8009d0c:	4903      	ldr	r1, [pc, #12]	@ (8009d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d0e:	5ccb      	ldrb	r3, [r1, r3]
 8009d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	40023800 	.word	0x40023800
 8009d1c:	08018080 	.word	0x08018080

08009d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009d24:	f7ff ffdc 	bl	8009ce0 <HAL_RCC_GetHCLKFreq>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	4b05      	ldr	r3, [pc, #20]	@ (8009d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	0b5b      	lsrs	r3, r3, #13
 8009d30:	f003 0307 	and.w	r3, r3, #7
 8009d34:	4903      	ldr	r1, [pc, #12]	@ (8009d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d36:	5ccb      	ldrb	r3, [r1, r3]
 8009d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	40023800 	.word	0x40023800
 8009d44:	08018080 	.word	0x08018080

08009d48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e07b      	b.n	8009e52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d108      	bne.n	8009d74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d6a:	d009      	beq.n	8009d80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	61da      	str	r2, [r3, #28]
 8009d72:	e005      	b.n	8009d80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d106      	bne.n	8009da0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7f8 f902 	bl	8001fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2202      	movs	r2, #2
 8009da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009db6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dd2:	431a      	orrs	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	f003 0302 	and.w	r3, r3, #2
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	431a      	orrs	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009df0:	431a      	orrs	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
 8009e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e04:	ea42 0103 	orr.w	r1, r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e0c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	0c1b      	lsrs	r3, r3, #16
 8009e1e:	f003 0104 	and.w	r1, r3, #4
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e26:	f003 0210 	and.w	r2, r3, #16
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69da      	ldr	r2, [r3, #28]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009e40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b088      	sub	sp, #32
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	603b      	str	r3, [r7, #0]
 8009e66:	4613      	mov	r3, r2
 8009e68:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e6a:	f7fb f92f 	bl	80050cc <HAL_GetTick>
 8009e6e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009e70:	88fb      	ldrh	r3, [r7, #6]
 8009e72:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d001      	beq.n	8009e84 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009e80:	2302      	movs	r3, #2
 8009e82:	e12a      	b.n	800a0da <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d002      	beq.n	8009e90 <HAL_SPI_Transmit+0x36>
 8009e8a:	88fb      	ldrh	r3, [r7, #6]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d101      	bne.n	8009e94 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e122      	b.n	800a0da <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d101      	bne.n	8009ea2 <HAL_SPI_Transmit+0x48>
 8009e9e:	2302      	movs	r3, #2
 8009ea0:	e11b      	b.n	800a0da <HAL_SPI_Transmit+0x280>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2203      	movs	r2, #3
 8009eae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	88fa      	ldrh	r2, [r7, #6]
 8009ec2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	88fa      	ldrh	r2, [r7, #6]
 8009ec8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ef0:	d10f      	bne.n	8009f12 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f1c:	2b40      	cmp	r3, #64	@ 0x40
 8009f1e:	d007      	beq.n	8009f30 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f38:	d152      	bne.n	8009fe0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <HAL_SPI_Transmit+0xee>
 8009f42:	8b7b      	ldrh	r3, [r7, #26]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d145      	bne.n	8009fd4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f4c:	881a      	ldrh	r2, [r3, #0]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f58:	1c9a      	adds	r2, r3, #2
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	3b01      	subs	r3, #1
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009f6c:	e032      	b.n	8009fd4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d112      	bne.n	8009fa2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f80:	881a      	ldrh	r2, [r3, #0]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f8c:	1c9a      	adds	r2, r3, #2
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009fa0:	e018      	b.n	8009fd4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009fa2:	f7fb f893 	bl	80050cc <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d803      	bhi.n	8009fba <HAL_SPI_Transmit+0x160>
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb8:	d102      	bne.n	8009fc0 <HAL_SPI_Transmit+0x166>
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d109      	bne.n	8009fd4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e082      	b.n	800a0da <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1c7      	bne.n	8009f6e <HAL_SPI_Transmit+0x114>
 8009fde:	e053      	b.n	800a088 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <HAL_SPI_Transmit+0x194>
 8009fe8:	8b7b      	ldrh	r3, [r7, #26]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d147      	bne.n	800a07e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	330c      	adds	r3, #12
 8009ff8:	7812      	ldrb	r2, [r2, #0]
 8009ffa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a000:	1c5a      	adds	r2, r3, #1
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	3b01      	subs	r3, #1
 800a00e:	b29a      	uxth	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a014:	e033      	b.n	800a07e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f003 0302 	and.w	r3, r3, #2
 800a020:	2b02      	cmp	r3, #2
 800a022:	d113      	bne.n	800a04c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	330c      	adds	r3, #12
 800a02e:	7812      	ldrb	r2, [r2, #0]
 800a030:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a040:	b29b      	uxth	r3, r3
 800a042:	3b01      	subs	r3, #1
 800a044:	b29a      	uxth	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a04a:	e018      	b.n	800a07e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a04c:	f7fb f83e 	bl	80050cc <HAL_GetTick>
 800a050:	4602      	mov	r2, r0
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d803      	bhi.n	800a064 <HAL_SPI_Transmit+0x20a>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a062:	d102      	bne.n	800a06a <HAL_SPI_Transmit+0x210>
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d109      	bne.n	800a07e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e02d      	b.n	800a0da <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a082:	b29b      	uxth	r3, r3
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1c6      	bne.n	800a016 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a088:	69fa      	ldr	r2, [r7, #28]
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 fb79 	bl	800a784 <SPI_EndRxTxTransaction>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2220      	movs	r2, #32
 800a09c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10a      	bne.n	800a0bc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	617b      	str	r3, [r7, #20]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	617b      	str	r3, [r7, #20]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	617b      	str	r3, [r7, #20]
 800a0ba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e000      	b.n	800a0da <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
  }
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3720      	adds	r7, #32
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b08a      	sub	sp, #40	@ 0x28
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	607a      	str	r2, [r7, #4]
 800a0ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0f4:	f7fa ffea 	bl	80050cc <HAL_GetTick>
 800a0f8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a100:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a108:	887b      	ldrh	r3, [r7, #2]
 800a10a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a10c:	7ffb      	ldrb	r3, [r7, #31]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d00c      	beq.n	800a12c <HAL_SPI_TransmitReceive+0x4a>
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a118:	d106      	bne.n	800a128 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d102      	bne.n	800a128 <HAL_SPI_TransmitReceive+0x46>
 800a122:	7ffb      	ldrb	r3, [r7, #31]
 800a124:	2b04      	cmp	r3, #4
 800a126:	d001      	beq.n	800a12c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a128:	2302      	movs	r3, #2
 800a12a:	e17f      	b.n	800a42c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d005      	beq.n	800a13e <HAL_SPI_TransmitReceive+0x5c>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <HAL_SPI_TransmitReceive+0x5c>
 800a138:	887b      	ldrh	r3, [r7, #2]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d101      	bne.n	800a142 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e174      	b.n	800a42c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d101      	bne.n	800a150 <HAL_SPI_TransmitReceive+0x6e>
 800a14c:	2302      	movs	r3, #2
 800a14e:	e16d      	b.n	800a42c <HAL_SPI_TransmitReceive+0x34a>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	2b04      	cmp	r3, #4
 800a162:	d003      	beq.n	800a16c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2205      	movs	r2, #5
 800a168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	887a      	ldrh	r2, [r7, #2]
 800a17c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	887a      	ldrh	r2, [r7, #2]
 800a182:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	887a      	ldrh	r2, [r7, #2]
 800a18e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	887a      	ldrh	r2, [r7, #2]
 800a194:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1ac:	2b40      	cmp	r3, #64	@ 0x40
 800a1ae:	d007      	beq.n	800a1c0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1c8:	d17e      	bne.n	800a2c8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d002      	beq.n	800a1d8 <HAL_SPI_TransmitReceive+0xf6>
 800a1d2:	8afb      	ldrh	r3, [r7, #22]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d16c      	bne.n	800a2b2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1dc:	881a      	ldrh	r2, [r3, #0]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1e8:	1c9a      	adds	r2, r3, #2
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1fc:	e059      	b.n	800a2b2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d11b      	bne.n	800a244 <HAL_SPI_TransmitReceive+0x162>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a210:	b29b      	uxth	r3, r3
 800a212:	2b00      	cmp	r3, #0
 800a214:	d016      	beq.n	800a244 <HAL_SPI_TransmitReceive+0x162>
 800a216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d113      	bne.n	800a244 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a220:	881a      	ldrh	r2, [r3, #0]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a22c:	1c9a      	adds	r2, r3, #2
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a236:	b29b      	uxth	r3, r3
 800a238:	3b01      	subs	r3, #1
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a240:	2300      	movs	r3, #0
 800a242:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	f003 0301 	and.w	r3, r3, #1
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d119      	bne.n	800a286 <HAL_SPI_TransmitReceive+0x1a4>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a256:	b29b      	uxth	r3, r3
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d014      	beq.n	800a286 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a266:	b292      	uxth	r2, r2
 800a268:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a26e:	1c9a      	adds	r2, r3, #2
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a278:	b29b      	uxth	r3, r3
 800a27a:	3b01      	subs	r3, #1
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a282:	2301      	movs	r3, #1
 800a284:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a286:	f7fa ff21 	bl	80050cc <HAL_GetTick>
 800a28a:	4602      	mov	r2, r0
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a292:	429a      	cmp	r2, r3
 800a294:	d80d      	bhi.n	800a2b2 <HAL_SPI_TransmitReceive+0x1d0>
 800a296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29c:	d009      	beq.n	800a2b2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e0bc      	b.n	800a42c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1a0      	bne.n	800a1fe <HAL_SPI_TransmitReceive+0x11c>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d19b      	bne.n	800a1fe <HAL_SPI_TransmitReceive+0x11c>
 800a2c6:	e082      	b.n	800a3ce <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <HAL_SPI_TransmitReceive+0x1f4>
 800a2d0:	8afb      	ldrh	r3, [r7, #22]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d171      	bne.n	800a3ba <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	330c      	adds	r3, #12
 800a2e0:	7812      	ldrb	r2, [r2, #0]
 800a2e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2fc:	e05d      	b.n	800a3ba <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	f003 0302 	and.w	r3, r3, #2
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d11c      	bne.n	800a346 <HAL_SPI_TransmitReceive+0x264>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a310:	b29b      	uxth	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	d017      	beq.n	800a346 <HAL_SPI_TransmitReceive+0x264>
 800a316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d114      	bne.n	800a346 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	330c      	adds	r3, #12
 800a326:	7812      	ldrb	r2, [r2, #0]
 800a328:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a32e:	1c5a      	adds	r2, r3, #1
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a338:	b29b      	uxth	r3, r3
 800a33a:	3b01      	subs	r3, #1
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a342:	2300      	movs	r3, #0
 800a344:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f003 0301 	and.w	r3, r3, #1
 800a350:	2b01      	cmp	r3, #1
 800a352:	d119      	bne.n	800a388 <HAL_SPI_TransmitReceive+0x2a6>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a358:	b29b      	uxth	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d014      	beq.n	800a388 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68da      	ldr	r2, [r3, #12]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a368:	b2d2      	uxtb	r2, r2
 800a36a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	3b01      	subs	r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a384:	2301      	movs	r3, #1
 800a386:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a388:	f7fa fea0 	bl	80050cc <HAL_GetTick>
 800a38c:	4602      	mov	r2, r0
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a394:	429a      	cmp	r2, r3
 800a396:	d803      	bhi.n	800a3a0 <HAL_SPI_TransmitReceive+0x2be>
 800a398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a39e:	d102      	bne.n	800a3a6 <HAL_SPI_TransmitReceive+0x2c4>
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d109      	bne.n	800a3ba <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	e038      	b.n	800a42c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d19c      	bne.n	800a2fe <HAL_SPI_TransmitReceive+0x21c>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d197      	bne.n	800a2fe <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3ce:	6a3a      	ldr	r2, [r7, #32]
 800a3d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 f9d6 	bl	800a784 <SPI_EndRxTxTransaction>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d008      	beq.n	800a3f0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2220      	movs	r2, #32
 800a3e2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e01d      	b.n	800a42c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10a      	bne.n	800a40e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	613b      	str	r3, [r7, #16]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	613b      	str	r3, [r7, #16]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	613b      	str	r3, [r7, #16]
 800a40c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	e000      	b.n	800a42c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800a42a:	2300      	movs	r3, #0
  }
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3728      	adds	r7, #40	@ 0x28
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b088      	sub	sp, #32
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10e      	bne.n	800a474 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d009      	beq.n	800a474 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a466:	2b00      	cmp	r3, #0
 800a468:	d004      	beq.n	800a474 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	4798      	blx	r3
    return;
 800a472:	e0ce      	b.n	800a612 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	f003 0302 	and.w	r3, r3, #2
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d009      	beq.n	800a492 <HAL_SPI_IRQHandler+0x5e>
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a484:	2b00      	cmp	r3, #0
 800a486:	d004      	beq.n	800a492 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	4798      	blx	r3
    return;
 800a490:	e0bf      	b.n	800a612 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	f003 0320 	and.w	r3, r3, #32
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10a      	bne.n	800a4b2 <HAL_SPI_IRQHandler+0x7e>
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d105      	bne.n	800a4b2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 80b0 	beq.w	800a612 <HAL_SPI_IRQHandler+0x1de>
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	f003 0320 	and.w	r3, r3, #32
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f000 80aa 	beq.w	800a612 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d023      	beq.n	800a510 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	d011      	beq.n	800a4f8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4d8:	f043 0204 	orr.w	r2, r3, #4
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	617b      	str	r3, [r7, #20]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	617b      	str	r3, [r7, #20]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	617b      	str	r3, [r7, #20]
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	e00b      	b.n	800a510 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	613b      	str	r3, [r7, #16]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	613b      	str	r3, [r7, #16]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	613b      	str	r3, [r7, #16]
 800a50c:	693b      	ldr	r3, [r7, #16]
        return;
 800a50e:	e080      	b.n	800a612 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	f003 0320 	and.w	r3, r3, #32
 800a516:	2b00      	cmp	r3, #0
 800a518:	d014      	beq.n	800a544 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a51e:	f043 0201 	orr.w	r2, r3, #1
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a526:	2300      	movs	r3, #0
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00c      	beq.n	800a568 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a552:	f043 0208 	orr.w	r2, r3, #8
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a55a:	2300      	movs	r3, #0
 800a55c:	60bb      	str	r3, [r7, #8]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	60bb      	str	r3, [r7, #8]
 800a566:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d04f      	beq.n	800a610 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a57e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	f003 0302 	and.w	r3, r3, #2
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d104      	bne.n	800a59c <HAL_SPI_IRQHandler+0x168>
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d034      	beq.n	800a606 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f022 0203 	bic.w	r2, r2, #3
 800a5aa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d011      	beq.n	800a5d8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5b8:	4a17      	ldr	r2, [pc, #92]	@ (800a618 <HAL_SPI_IRQHandler+0x1e4>)
 800a5ba:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fb fb31 	bl	8005c28 <HAL_DMA_Abort_IT>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d005      	beq.n	800a5d8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d016      	beq.n	800a60e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5e4:	4a0c      	ldr	r2, [pc, #48]	@ (800a618 <HAL_SPI_IRQHandler+0x1e4>)
 800a5e6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fb fb1b 	bl	8005c28 <HAL_DMA_Abort_IT>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00a      	beq.n	800a60e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800a604:	e003      	b.n	800a60e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f808 	bl	800a61c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a60c:	e000      	b.n	800a610 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800a60e:	bf00      	nop
    return;
 800a610:	bf00      	nop
  }
}
 800a612:	3720      	adds	r7, #32
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	0800a64d 	.word	0x0800a64d

0800a61c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a63e:	b2db      	uxtb	r3, r3
}
 800a640:	4618      	mov	r0, r3
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a658:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f7ff ffd8 	bl	800a61c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a66c:	bf00      	nop
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	603b      	str	r3, [r7, #0]
 800a680:	4613      	mov	r3, r2
 800a682:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a684:	f7fa fd22 	bl	80050cc <HAL_GetTick>
 800a688:	4602      	mov	r2, r0
 800a68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68c:	1a9b      	subs	r3, r3, r2
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	4413      	add	r3, r2
 800a692:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a694:	f7fa fd1a 	bl	80050cc <HAL_GetTick>
 800a698:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a69a:	4b39      	ldr	r3, [pc, #228]	@ (800a780 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	015b      	lsls	r3, r3, #5
 800a6a0:	0d1b      	lsrs	r3, r3, #20
 800a6a2:	69fa      	ldr	r2, [r7, #28]
 800a6a4:	fb02 f303 	mul.w	r3, r2, r3
 800a6a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6aa:	e055      	b.n	800a758 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b2:	d051      	beq.n	800a758 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a6b4:	f7fa fd0a 	bl	80050cc <HAL_GetTick>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	69fa      	ldr	r2, [r7, #28]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d902      	bls.n	800a6ca <SPI_WaitFlagStateUntilTimeout+0x56>
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d13d      	bne.n	800a746 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a6d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a6e2:	d111      	bne.n	800a708 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6ec:	d004      	beq.n	800a6f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6f6:	d107      	bne.n	800a708 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a706:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a70c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a710:	d10f      	bne.n	800a732 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a730:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a742:	2303      	movs	r3, #3
 800a744:	e018      	b.n	800a778 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d102      	bne.n	800a752 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800a74c:	2300      	movs	r3, #0
 800a74e:	61fb      	str	r3, [r7, #28]
 800a750:	e002      	b.n	800a758 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	3b01      	subs	r3, #1
 800a756:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	689a      	ldr	r2, [r3, #8]
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	4013      	ands	r3, r2
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	429a      	cmp	r2, r3
 800a766:	bf0c      	ite	eq
 800a768:	2301      	moveq	r3, #1
 800a76a:	2300      	movne	r3, #0
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	461a      	mov	r2, r3
 800a770:	79fb      	ldrb	r3, [r7, #7]
 800a772:	429a      	cmp	r2, r3
 800a774:	d19a      	bne.n	800a6ac <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3720      	adds	r7, #32
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20000000 	.word	0x20000000

0800a784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af02      	add	r7, sp, #8
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	2201      	movs	r2, #1
 800a798:	2102      	movs	r1, #2
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f7ff ff6a 	bl	800a674 <SPI_WaitFlagStateUntilTimeout>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d007      	beq.n	800a7b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7aa:	f043 0220 	orr.w	r2, r3, #32
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e032      	b.n	800a81c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a7b6:	4b1b      	ldr	r3, [pc, #108]	@ (800a824 <SPI_EndRxTxTransaction+0xa0>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a1b      	ldr	r2, [pc, #108]	@ (800a828 <SPI_EndRxTxTransaction+0xa4>)
 800a7bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a7c0:	0d5b      	lsrs	r3, r3, #21
 800a7c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a7c6:	fb02 f303 	mul.w	r3, r2, r3
 800a7ca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a7d4:	d112      	bne.n	800a7fc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	2180      	movs	r1, #128	@ 0x80
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f7ff ff47 	bl	800a674 <SPI_WaitFlagStateUntilTimeout>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d016      	beq.n	800a81a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7f0:	f043 0220 	orr.w	r2, r3, #32
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e00f      	b.n	800a81c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00a      	beq.n	800a818 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	3b01      	subs	r3, #1
 800a806:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a812:	2b80      	cmp	r3, #128	@ 0x80
 800a814:	d0f2      	beq.n	800a7fc <SPI_EndRxTxTransaction+0x78>
 800a816:	e000      	b.n	800a81a <SPI_EndRxTxTransaction+0x96>
        break;
 800a818:	bf00      	nop
  }

  return HAL_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3718      	adds	r7, #24
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	20000000 	.word	0x20000000
 800a828:	165e9f81 	.word	0x165e9f81

0800a82c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e041      	b.n	800a8c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b00      	cmp	r3, #0
 800a848:	d106      	bne.n	800a858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7f7 fe68 	bl	8002528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2202      	movs	r2, #2
 800a85c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3304      	adds	r3, #4
 800a868:	4619      	mov	r1, r3
 800a86a:	4610      	mov	r0, r2
 800a86c:	f000 fc3c 	bl	800b0e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
	...

0800a8cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d001      	beq.n	800a8e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e044      	b.n	800a96e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68da      	ldr	r2, [r3, #12]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0201 	orr.w	r2, r2, #1
 800a8fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a1e      	ldr	r2, [pc, #120]	@ (800a97c <HAL_TIM_Base_Start_IT+0xb0>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d018      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a90e:	d013      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a1a      	ldr	r2, [pc, #104]	@ (800a980 <HAL_TIM_Base_Start_IT+0xb4>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d00e      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a19      	ldr	r2, [pc, #100]	@ (800a984 <HAL_TIM_Base_Start_IT+0xb8>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d009      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a17      	ldr	r2, [pc, #92]	@ (800a988 <HAL_TIM_Base_Start_IT+0xbc>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d004      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a16      	ldr	r2, [pc, #88]	@ (800a98c <HAL_TIM_Base_Start_IT+0xc0>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d111      	bne.n	800a95c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f003 0307 	and.w	r3, r3, #7
 800a942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b06      	cmp	r3, #6
 800a948:	d010      	beq.n	800a96c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f042 0201 	orr.w	r2, r2, #1
 800a958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95a:	e007      	b.n	800a96c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0201 	orr.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	40010000 	.word	0x40010000
 800a980:	40000400 	.word	0x40000400
 800a984:	40000800 	.word	0x40000800
 800a988:	40000c00 	.word	0x40000c00
 800a98c:	40014000 	.word	0x40014000

0800a990 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d101      	bne.n	800a9a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e041      	b.n	800aa26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f839 	bl	800aa2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	f000 fb8a 	bl	800b0e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b083      	sub	sp, #12
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
	...

0800aa44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d109      	bne.n	800aa68 <HAL_TIM_PWM_Start+0x24>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	bf14      	ite	ne
 800aa60:	2301      	movne	r3, #1
 800aa62:	2300      	moveq	r3, #0
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	e022      	b.n	800aaae <HAL_TIM_PWM_Start+0x6a>
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	2b04      	cmp	r3, #4
 800aa6c:	d109      	bne.n	800aa82 <HAL_TIM_PWM_Start+0x3e>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	bf14      	ite	ne
 800aa7a:	2301      	movne	r3, #1
 800aa7c:	2300      	moveq	r3, #0
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	e015      	b.n	800aaae <HAL_TIM_PWM_Start+0x6a>
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	2b08      	cmp	r3, #8
 800aa86:	d109      	bne.n	800aa9c <HAL_TIM_PWM_Start+0x58>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	bf14      	ite	ne
 800aa94:	2301      	movne	r3, #1
 800aa96:	2300      	moveq	r3, #0
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	e008      	b.n	800aaae <HAL_TIM_PWM_Start+0x6a>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	bf14      	ite	ne
 800aaa8:	2301      	movne	r3, #1
 800aaaa:	2300      	moveq	r3, #0
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	e068      	b.n	800ab88 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d104      	bne.n	800aac6 <HAL_TIM_PWM_Start+0x82>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2202      	movs	r2, #2
 800aac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aac4:	e013      	b.n	800aaee <HAL_TIM_PWM_Start+0xaa>
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	2b04      	cmp	r3, #4
 800aaca:	d104      	bne.n	800aad6 <HAL_TIM_PWM_Start+0x92>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2202      	movs	r2, #2
 800aad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aad4:	e00b      	b.n	800aaee <HAL_TIM_PWM_Start+0xaa>
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	2b08      	cmp	r3, #8
 800aada:	d104      	bne.n	800aae6 <HAL_TIM_PWM_Start+0xa2>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2202      	movs	r2, #2
 800aae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aae4:	e003      	b.n	800aaee <HAL_TIM_PWM_Start+0xaa>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2202      	movs	r2, #2
 800aaea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 fda2 	bl	800b640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a23      	ldr	r2, [pc, #140]	@ (800ab90 <HAL_TIM_PWM_Start+0x14c>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d107      	bne.n	800ab16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ab14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a1d      	ldr	r2, [pc, #116]	@ (800ab90 <HAL_TIM_PWM_Start+0x14c>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d018      	beq.n	800ab52 <HAL_TIM_PWM_Start+0x10e>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab28:	d013      	beq.n	800ab52 <HAL_TIM_PWM_Start+0x10e>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a19      	ldr	r2, [pc, #100]	@ (800ab94 <HAL_TIM_PWM_Start+0x150>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d00e      	beq.n	800ab52 <HAL_TIM_PWM_Start+0x10e>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a17      	ldr	r2, [pc, #92]	@ (800ab98 <HAL_TIM_PWM_Start+0x154>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d009      	beq.n	800ab52 <HAL_TIM_PWM_Start+0x10e>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a16      	ldr	r2, [pc, #88]	@ (800ab9c <HAL_TIM_PWM_Start+0x158>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d004      	beq.n	800ab52 <HAL_TIM_PWM_Start+0x10e>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a14      	ldr	r2, [pc, #80]	@ (800aba0 <HAL_TIM_PWM_Start+0x15c>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d111      	bne.n	800ab76 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f003 0307 	and.w	r3, r3, #7
 800ab5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2b06      	cmp	r3, #6
 800ab62:	d010      	beq.n	800ab86 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f042 0201 	orr.w	r2, r2, #1
 800ab72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab74:	e007      	b.n	800ab86 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f042 0201 	orr.w	r2, r2, #1
 800ab84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	40010000 	.word	0x40010000
 800ab94:	40000400 	.word	0x40000400
 800ab98:	40000800 	.word	0x40000800
 800ab9c:	40000c00 	.word	0x40000c00
 800aba0:	40014000 	.word	0x40014000

0800aba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	f003 0302 	and.w	r3, r3, #2
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d020      	beq.n	800ac08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f003 0302 	and.w	r3, r3, #2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d01b      	beq.n	800ac08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f06f 0202 	mvn.w	r2, #2
 800abd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	f003 0303 	and.w	r3, r3, #3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d003      	beq.n	800abf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fa5b 	bl	800b0aa <HAL_TIM_IC_CaptureCallback>
 800abf4:	e005      	b.n	800ac02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fa4d 	bl	800b096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fa5e 	bl	800b0be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	f003 0304 	and.w	r3, r3, #4
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d020      	beq.n	800ac54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f003 0304 	and.w	r3, r3, #4
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d01b      	beq.n	800ac54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f06f 0204 	mvn.w	r2, #4
 800ac24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2202      	movs	r2, #2
 800ac2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fa35 	bl	800b0aa <HAL_TIM_IC_CaptureCallback>
 800ac40:	e005      	b.n	800ac4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fa27 	bl	800b096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 fa38 	bl	800b0be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	f003 0308 	and.w	r3, r3, #8
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d020      	beq.n	800aca0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f003 0308 	and.w	r3, r3, #8
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d01b      	beq.n	800aca0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f06f 0208 	mvn.w	r2, #8
 800ac70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2204      	movs	r2, #4
 800ac76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	69db      	ldr	r3, [r3, #28]
 800ac7e:	f003 0303 	and.w	r3, r3, #3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d003      	beq.n	800ac8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fa0f 	bl	800b0aa <HAL_TIM_IC_CaptureCallback>
 800ac8c:	e005      	b.n	800ac9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fa01 	bl	800b096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fa12 	bl	800b0be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	f003 0310 	and.w	r3, r3, #16
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d020      	beq.n	800acec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f003 0310 	and.w	r3, r3, #16
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d01b      	beq.n	800acec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f06f 0210 	mvn.w	r2, #16
 800acbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2208      	movs	r2, #8
 800acc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	69db      	ldr	r3, [r3, #28]
 800acca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d003      	beq.n	800acda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f9e9 	bl	800b0aa <HAL_TIM_IC_CaptureCallback>
 800acd8:	e005      	b.n	800ace6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f9db 	bl	800b096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 f9ec 	bl	800b0be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	f003 0301 	and.w	r3, r3, #1
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00c      	beq.n	800ad10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f003 0301 	and.w	r3, r3, #1
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d007      	beq.n	800ad10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f06f 0201 	mvn.w	r2, #1
 800ad08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7f7 f8ca 	bl	8001ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00c      	beq.n	800ad34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d007      	beq.n	800ad34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ad2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 fd24 	bl	800b77c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00c      	beq.n	800ad58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d007      	beq.n	800ad58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ad50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f9bd 	bl	800b0d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	f003 0320 	and.w	r3, r3, #32
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00c      	beq.n	800ad7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f003 0320 	and.w	r3, r3, #32
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d007      	beq.n	800ad7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f06f 0220 	mvn.w	r2, #32
 800ad74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fcf6 	bl	800b768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad7c:	bf00      	nop
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d101      	bne.n	800ada2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ad9e:	2302      	movs	r3, #2
 800ada0:	e0ae      	b.n	800af00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2201      	movs	r2, #1
 800ada6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b0c      	cmp	r3, #12
 800adae:	f200 809f 	bhi.w	800aef0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800adb2:	a201      	add	r2, pc, #4	@ (adr r2, 800adb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800adb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb8:	0800aded 	.word	0x0800aded
 800adbc:	0800aef1 	.word	0x0800aef1
 800adc0:	0800aef1 	.word	0x0800aef1
 800adc4:	0800aef1 	.word	0x0800aef1
 800adc8:	0800ae2d 	.word	0x0800ae2d
 800adcc:	0800aef1 	.word	0x0800aef1
 800add0:	0800aef1 	.word	0x0800aef1
 800add4:	0800aef1 	.word	0x0800aef1
 800add8:	0800ae6f 	.word	0x0800ae6f
 800addc:	0800aef1 	.word	0x0800aef1
 800ade0:	0800aef1 	.word	0x0800aef1
 800ade4:	0800aef1 	.word	0x0800aef1
 800ade8:	0800aeaf 	.word	0x0800aeaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68b9      	ldr	r1, [r7, #8]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 f9fe 	bl	800b1f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	699a      	ldr	r2, [r3, #24]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f042 0208 	orr.w	r2, r2, #8
 800ae06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	699a      	ldr	r2, [r3, #24]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f022 0204 	bic.w	r2, r2, #4
 800ae16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	6999      	ldr	r1, [r3, #24]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	691a      	ldr	r2, [r3, #16]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	430a      	orrs	r2, r1
 800ae28:	619a      	str	r2, [r3, #24]
      break;
 800ae2a:	e064      	b.n	800aef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68b9      	ldr	r1, [r7, #8]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 fa44 	bl	800b2c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	699a      	ldr	r2, [r3, #24]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	699a      	ldr	r2, [r3, #24]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	6999      	ldr	r1, [r3, #24]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	021a      	lsls	r2, r3, #8
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	430a      	orrs	r2, r1
 800ae6a:	619a      	str	r2, [r3, #24]
      break;
 800ae6c:	e043      	b.n	800aef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68b9      	ldr	r1, [r7, #8]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 fa8f 	bl	800b398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	69da      	ldr	r2, [r3, #28]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f042 0208 	orr.w	r2, r2, #8
 800ae88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	69da      	ldr	r2, [r3, #28]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f022 0204 	bic.w	r2, r2, #4
 800ae98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	69d9      	ldr	r1, [r3, #28]
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	691a      	ldr	r2, [r3, #16]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	430a      	orrs	r2, r1
 800aeaa:	61da      	str	r2, [r3, #28]
      break;
 800aeac:	e023      	b.n	800aef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	68b9      	ldr	r1, [r7, #8]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 fad9 	bl	800b46c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	69da      	ldr	r2, [r3, #28]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	69da      	ldr	r2, [r3, #28]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	69d9      	ldr	r1, [r3, #28]
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	021a      	lsls	r2, r3, #8
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	430a      	orrs	r2, r1
 800aeec:	61da      	str	r2, [r3, #28]
      break;
 800aeee:	e002      	b.n	800aef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	75fb      	strb	r3, [r7, #23]
      break;
 800aef4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aefe:	7dfb      	ldrb	r3, [r7, #23]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af12:	2300      	movs	r3, #0
 800af14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d101      	bne.n	800af24 <HAL_TIM_ConfigClockSource+0x1c>
 800af20:	2302      	movs	r3, #2
 800af22:	e0b4      	b.n	800b08e <HAL_TIM_ConfigClockSource+0x186>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2202      	movs	r2, #2
 800af30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800af42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af5c:	d03e      	beq.n	800afdc <HAL_TIM_ConfigClockSource+0xd4>
 800af5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af62:	f200 8087 	bhi.w	800b074 <HAL_TIM_ConfigClockSource+0x16c>
 800af66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af6a:	f000 8086 	beq.w	800b07a <HAL_TIM_ConfigClockSource+0x172>
 800af6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af72:	d87f      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x16c>
 800af74:	2b70      	cmp	r3, #112	@ 0x70
 800af76:	d01a      	beq.n	800afae <HAL_TIM_ConfigClockSource+0xa6>
 800af78:	2b70      	cmp	r3, #112	@ 0x70
 800af7a:	d87b      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x16c>
 800af7c:	2b60      	cmp	r3, #96	@ 0x60
 800af7e:	d050      	beq.n	800b022 <HAL_TIM_ConfigClockSource+0x11a>
 800af80:	2b60      	cmp	r3, #96	@ 0x60
 800af82:	d877      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x16c>
 800af84:	2b50      	cmp	r3, #80	@ 0x50
 800af86:	d03c      	beq.n	800b002 <HAL_TIM_ConfigClockSource+0xfa>
 800af88:	2b50      	cmp	r3, #80	@ 0x50
 800af8a:	d873      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x16c>
 800af8c:	2b40      	cmp	r3, #64	@ 0x40
 800af8e:	d058      	beq.n	800b042 <HAL_TIM_ConfigClockSource+0x13a>
 800af90:	2b40      	cmp	r3, #64	@ 0x40
 800af92:	d86f      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x16c>
 800af94:	2b30      	cmp	r3, #48	@ 0x30
 800af96:	d064      	beq.n	800b062 <HAL_TIM_ConfigClockSource+0x15a>
 800af98:	2b30      	cmp	r3, #48	@ 0x30
 800af9a:	d86b      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x16c>
 800af9c:	2b20      	cmp	r3, #32
 800af9e:	d060      	beq.n	800b062 <HAL_TIM_ConfigClockSource+0x15a>
 800afa0:	2b20      	cmp	r3, #32
 800afa2:	d867      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x16c>
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d05c      	beq.n	800b062 <HAL_TIM_ConfigClockSource+0x15a>
 800afa8:	2b10      	cmp	r3, #16
 800afaa:	d05a      	beq.n	800b062 <HAL_TIM_ConfigClockSource+0x15a>
 800afac:	e062      	b.n	800b074 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800afbe:	f000 fb1f 	bl	800b600 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800afd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	609a      	str	r2, [r3, #8]
      break;
 800afda:	e04f      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800afec:	f000 fb08 	bl	800b600 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689a      	ldr	r2, [r3, #8]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800affe:	609a      	str	r2, [r3, #8]
      break;
 800b000:	e03c      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b00e:	461a      	mov	r2, r3
 800b010:	f000 fa7c 	bl	800b50c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2150      	movs	r1, #80	@ 0x50
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 fad5 	bl	800b5ca <TIM_ITRx_SetConfig>
      break;
 800b020:	e02c      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b02e:	461a      	mov	r2, r3
 800b030:	f000 fa9b 	bl	800b56a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2160      	movs	r1, #96	@ 0x60
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 fac5 	bl	800b5ca <TIM_ITRx_SetConfig>
      break;
 800b040:	e01c      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b04e:	461a      	mov	r2, r3
 800b050:	f000 fa5c 	bl	800b50c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2140      	movs	r1, #64	@ 0x40
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 fab5 	bl	800b5ca <TIM_ITRx_SetConfig>
      break;
 800b060:	e00c      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4619      	mov	r1, r3
 800b06c:	4610      	mov	r0, r2
 800b06e:	f000 faac 	bl	800b5ca <TIM_ITRx_SetConfig>
      break;
 800b072:	e003      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	73fb      	strb	r3, [r7, #15]
      break;
 800b078:	e000      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b07a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b096:	b480      	push	{r7}
 800b098:	b083      	sub	sp, #12
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b09e:	bf00      	nop
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b083      	sub	sp, #12
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0b2:	bf00      	nop
 800b0b4:	370c      	adds	r7, #12
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr

0800b0be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0be:	b480      	push	{r7}
 800b0c0:	b083      	sub	sp, #12
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b0c6:	bf00      	nop
 800b0c8:	370c      	adds	r7, #12
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr

0800b0d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b083      	sub	sp, #12
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b0da:	bf00      	nop
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
	...

0800b0e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a37      	ldr	r2, [pc, #220]	@ (800b1d8 <TIM_Base_SetConfig+0xf0>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d00f      	beq.n	800b120 <TIM_Base_SetConfig+0x38>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b106:	d00b      	beq.n	800b120 <TIM_Base_SetConfig+0x38>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4a34      	ldr	r2, [pc, #208]	@ (800b1dc <TIM_Base_SetConfig+0xf4>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d007      	beq.n	800b120 <TIM_Base_SetConfig+0x38>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a33      	ldr	r2, [pc, #204]	@ (800b1e0 <TIM_Base_SetConfig+0xf8>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d003      	beq.n	800b120 <TIM_Base_SetConfig+0x38>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a32      	ldr	r2, [pc, #200]	@ (800b1e4 <TIM_Base_SetConfig+0xfc>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d108      	bne.n	800b132 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	4313      	orrs	r3, r2
 800b130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a28      	ldr	r2, [pc, #160]	@ (800b1d8 <TIM_Base_SetConfig+0xf0>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d01b      	beq.n	800b172 <TIM_Base_SetConfig+0x8a>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b140:	d017      	beq.n	800b172 <TIM_Base_SetConfig+0x8a>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a25      	ldr	r2, [pc, #148]	@ (800b1dc <TIM_Base_SetConfig+0xf4>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d013      	beq.n	800b172 <TIM_Base_SetConfig+0x8a>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a24      	ldr	r2, [pc, #144]	@ (800b1e0 <TIM_Base_SetConfig+0xf8>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d00f      	beq.n	800b172 <TIM_Base_SetConfig+0x8a>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a23      	ldr	r2, [pc, #140]	@ (800b1e4 <TIM_Base_SetConfig+0xfc>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d00b      	beq.n	800b172 <TIM_Base_SetConfig+0x8a>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a22      	ldr	r2, [pc, #136]	@ (800b1e8 <TIM_Base_SetConfig+0x100>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d007      	beq.n	800b172 <TIM_Base_SetConfig+0x8a>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a21      	ldr	r2, [pc, #132]	@ (800b1ec <TIM_Base_SetConfig+0x104>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d003      	beq.n	800b172 <TIM_Base_SetConfig+0x8a>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a20      	ldr	r2, [pc, #128]	@ (800b1f0 <TIM_Base_SetConfig+0x108>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d108      	bne.n	800b184 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	4313      	orrs	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	689a      	ldr	r2, [r3, #8]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4a0c      	ldr	r2, [pc, #48]	@ (800b1d8 <TIM_Base_SetConfig+0xf0>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d103      	bne.n	800b1b2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	691a      	ldr	r2, [r3, #16]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f043 0204 	orr.w	r2, r3, #4
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	601a      	str	r2, [r3, #0]
}
 800b1ca:	bf00      	nop
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	40010000 	.word	0x40010000
 800b1dc:	40000400 	.word	0x40000400
 800b1e0:	40000800 	.word	0x40000800
 800b1e4:	40000c00 	.word	0x40000c00
 800b1e8:	40014000 	.word	0x40014000
 800b1ec:	40014400 	.word	0x40014400
 800b1f0:	40014800 	.word	0x40014800

0800b1f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b087      	sub	sp, #28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a1b      	ldr	r3, [r3, #32]
 800b208:	f023 0201 	bic.w	r2, r3, #1
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	699b      	ldr	r3, [r3, #24]
 800b21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f023 0303 	bic.w	r3, r3, #3
 800b22a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	4313      	orrs	r3, r2
 800b234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f023 0302 	bic.w	r3, r3, #2
 800b23c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	4313      	orrs	r3, r2
 800b246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a1c      	ldr	r2, [pc, #112]	@ (800b2bc <TIM_OC1_SetConfig+0xc8>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d10c      	bne.n	800b26a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	f023 0308 	bic.w	r3, r3, #8
 800b256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	697a      	ldr	r2, [r7, #20]
 800b25e:	4313      	orrs	r3, r2
 800b260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f023 0304 	bic.w	r3, r3, #4
 800b268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a13      	ldr	r2, [pc, #76]	@ (800b2bc <TIM_OC1_SetConfig+0xc8>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d111      	bne.n	800b296 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	4313      	orrs	r3, r2
 800b28a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	4313      	orrs	r3, r2
 800b294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	685a      	ldr	r2, [r3, #4]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	697a      	ldr	r2, [r7, #20]
 800b2ae:	621a      	str	r2, [r3, #32]
}
 800b2b0:	bf00      	nop
 800b2b2:	371c      	adds	r7, #28
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr
 800b2bc:	40010000 	.word	0x40010000

0800b2c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b087      	sub	sp, #28
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a1b      	ldr	r3, [r3, #32]
 800b2d4:	f023 0210 	bic.w	r2, r3, #16
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	699b      	ldr	r3, [r3, #24]
 800b2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	021b      	lsls	r3, r3, #8
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	4313      	orrs	r3, r2
 800b302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	f023 0320 	bic.w	r3, r3, #32
 800b30a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	011b      	lsls	r3, r3, #4
 800b312:	697a      	ldr	r2, [r7, #20]
 800b314:	4313      	orrs	r3, r2
 800b316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a1e      	ldr	r2, [pc, #120]	@ (800b394 <TIM_OC2_SetConfig+0xd4>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d10d      	bne.n	800b33c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	011b      	lsls	r3, r3, #4
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	4313      	orrs	r3, r2
 800b332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b33a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a15      	ldr	r2, [pc, #84]	@ (800b394 <TIM_OC2_SetConfig+0xd4>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d113      	bne.n	800b36c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b34a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	695b      	ldr	r3, [r3, #20]
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	4313      	orrs	r3, r2
 800b36a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	621a      	str	r2, [r3, #32]
}
 800b386:	bf00      	nop
 800b388:	371c      	adds	r7, #28
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	40010000 	.word	0x40010000

0800b398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b398:	b480      	push	{r7}
 800b39a:	b087      	sub	sp, #28
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	69db      	ldr	r3, [r3, #28]
 800b3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f023 0303 	bic.w	r3, r3, #3
 800b3ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	021b      	lsls	r3, r3, #8
 800b3e8:	697a      	ldr	r2, [r7, #20]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b468 <TIM_OC3_SetConfig+0xd0>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d10d      	bne.n	800b412 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b3fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	021b      	lsls	r3, r3, #8
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	4313      	orrs	r3, r2
 800b408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a14      	ldr	r2, [pc, #80]	@ (800b468 <TIM_OC3_SetConfig+0xd0>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d113      	bne.n	800b442 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	011b      	lsls	r3, r3, #4
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	4313      	orrs	r3, r2
 800b434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	011b      	lsls	r3, r3, #4
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	4313      	orrs	r3, r2
 800b440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	685a      	ldr	r2, [r3, #4]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	621a      	str	r2, [r3, #32]
}
 800b45c:	bf00      	nop
 800b45e:	371c      	adds	r7, #28
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr
 800b468:	40010000 	.word	0x40010000

0800b46c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b087      	sub	sp, #28
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a1b      	ldr	r3, [r3, #32]
 800b47a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a1b      	ldr	r3, [r3, #32]
 800b480:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	69db      	ldr	r3, [r3, #28]
 800b492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b49a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	021b      	lsls	r3, r3, #8
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b4b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	031b      	lsls	r3, r3, #12
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a10      	ldr	r2, [pc, #64]	@ (800b508 <TIM_OC4_SetConfig+0x9c>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d109      	bne.n	800b4e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b4d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	695b      	ldr	r3, [r3, #20]
 800b4d8:	019b      	lsls	r3, r3, #6
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	685a      	ldr	r2, [r3, #4]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	621a      	str	r2, [r3, #32]
}
 800b4fa:	bf00      	nop
 800b4fc:	371c      	adds	r7, #28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	40010000 	.word	0x40010000

0800b50c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b087      	sub	sp, #28
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6a1b      	ldr	r3, [r3, #32]
 800b51c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6a1b      	ldr	r3, [r3, #32]
 800b522:	f023 0201 	bic.w	r2, r3, #1
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	699b      	ldr	r3, [r3, #24]
 800b52e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	011b      	lsls	r3, r3, #4
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	4313      	orrs	r3, r2
 800b540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	f023 030a 	bic.w	r3, r3, #10
 800b548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	4313      	orrs	r3, r2
 800b550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	693a      	ldr	r2, [r7, #16]
 800b556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	621a      	str	r2, [r3, #32]
}
 800b55e:	bf00      	nop
 800b560:	371c      	adds	r7, #28
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr

0800b56a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b56a:	b480      	push	{r7}
 800b56c:	b087      	sub	sp, #28
 800b56e:	af00      	add	r7, sp, #0
 800b570:	60f8      	str	r0, [r7, #12]
 800b572:	60b9      	str	r1, [r7, #8]
 800b574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	6a1b      	ldr	r3, [r3, #32]
 800b580:	f023 0210 	bic.w	r2, r3, #16
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	031b      	lsls	r3, r3, #12
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b5a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	011b      	lsls	r3, r3, #4
 800b5ac:	697a      	ldr	r2, [r7, #20]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	693a      	ldr	r2, [r7, #16]
 800b5b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	621a      	str	r2, [r3, #32]
}
 800b5be:	bf00      	nop
 800b5c0:	371c      	adds	r7, #28
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b085      	sub	sp, #20
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b5e2:	683a      	ldr	r2, [r7, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	f043 0307 	orr.w	r3, r3, #7
 800b5ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	609a      	str	r2, [r3, #8]
}
 800b5f4:	bf00      	nop
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b600:	b480      	push	{r7}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
 800b60c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b61a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	021a      	lsls	r2, r3, #8
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	431a      	orrs	r2, r3
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	4313      	orrs	r3, r2
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	609a      	str	r2, [r3, #8]
}
 800b634:	bf00      	nop
 800b636:	371c      	adds	r7, #28
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b640:	b480      	push	{r7}
 800b642:	b087      	sub	sp, #28
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	f003 031f 	and.w	r3, r3, #31
 800b652:	2201      	movs	r2, #1
 800b654:	fa02 f303 	lsl.w	r3, r2, r3
 800b658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6a1a      	ldr	r2, [r3, #32]
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	43db      	mvns	r3, r3
 800b662:	401a      	ands	r2, r3
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6a1a      	ldr	r2, [r3, #32]
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	f003 031f 	and.w	r3, r3, #31
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	fa01 f303 	lsl.w	r3, r1, r3
 800b678:	431a      	orrs	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	621a      	str	r2, [r3, #32]
}
 800b67e:	bf00      	nop
 800b680:	371c      	adds	r7, #28
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
	...

0800b68c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d101      	bne.n	800b6a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	e050      	b.n	800b746 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2202      	movs	r2, #2
 800b6b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a1c      	ldr	r2, [pc, #112]	@ (800b754 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d018      	beq.n	800b71a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6f0:	d013      	beq.n	800b71a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a18      	ldr	r2, [pc, #96]	@ (800b758 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d00e      	beq.n	800b71a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a16      	ldr	r2, [pc, #88]	@ (800b75c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d009      	beq.n	800b71a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a15      	ldr	r2, [pc, #84]	@ (800b760 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d004      	beq.n	800b71a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a13      	ldr	r2, [pc, #76]	@ (800b764 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d10c      	bne.n	800b734 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	68ba      	ldr	r2, [r7, #8]
 800b728:	4313      	orrs	r3, r2
 800b72a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3714      	adds	r7, #20
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	40010000 	.word	0x40010000
 800b758:	40000400 	.word	0x40000400
 800b75c:	40000800 	.word	0x40000800
 800b760:	40000c00 	.word	0x40000c00
 800b764:	40014000 	.word	0x40014000

0800b768 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d101      	bne.n	800b7a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e042      	b.n	800b828 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d106      	bne.n	800b7bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f7f6 ff58 	bl	800266c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2224      	movs	r2, #36	@ 0x24
 800b7c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	68da      	ldr	r2, [r3, #12]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b7d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f82b 	bl	800b830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	691a      	ldr	r2, [r3, #16]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b7e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	695a      	ldr	r2, [r3, #20]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b7f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68da      	ldr	r2, [r3, #12]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2220      	movs	r2, #32
 800b814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2220      	movs	r2, #32
 800b81c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b834:	b0c0      	sub	sp, #256	@ 0x100
 800b836:	af00      	add	r7, sp, #0
 800b838:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b84c:	68d9      	ldr	r1, [r3, #12]
 800b84e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	ea40 0301 	orr.w	r3, r0, r1
 800b858:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b85a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b85e:	689a      	ldr	r2, [r3, #8]
 800b860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	431a      	orrs	r2, r3
 800b868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b86c:	695b      	ldr	r3, [r3, #20]
 800b86e:	431a      	orrs	r2, r3
 800b870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b874:	69db      	ldr	r3, [r3, #28]
 800b876:	4313      	orrs	r3, r2
 800b878:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b888:	f021 010c 	bic.w	r1, r1, #12
 800b88c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b896:	430b      	orrs	r3, r1
 800b898:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	695b      	ldr	r3, [r3, #20]
 800b8a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b8a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8aa:	6999      	ldr	r1, [r3, #24]
 800b8ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	ea40 0301 	orr.w	r3, r0, r1
 800b8b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b8b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	4b8f      	ldr	r3, [pc, #572]	@ (800bafc <UART_SetConfig+0x2cc>)
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d005      	beq.n	800b8d0 <UART_SetConfig+0xa0>
 800b8c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	4b8d      	ldr	r3, [pc, #564]	@ (800bb00 <UART_SetConfig+0x2d0>)
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d104      	bne.n	800b8da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b8d0:	f7fe fa26 	bl	8009d20 <HAL_RCC_GetPCLK2Freq>
 800b8d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b8d8:	e003      	b.n	800b8e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b8da:	f7fe fa0d 	bl	8009cf8 <HAL_RCC_GetPCLK1Freq>
 800b8de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8e6:	69db      	ldr	r3, [r3, #28]
 800b8e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8ec:	f040 810c 	bne.w	800bb08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b8fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b8fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b902:	4622      	mov	r2, r4
 800b904:	462b      	mov	r3, r5
 800b906:	1891      	adds	r1, r2, r2
 800b908:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b90a:	415b      	adcs	r3, r3
 800b90c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b90e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b912:	4621      	mov	r1, r4
 800b914:	eb12 0801 	adds.w	r8, r2, r1
 800b918:	4629      	mov	r1, r5
 800b91a:	eb43 0901 	adc.w	r9, r3, r1
 800b91e:	f04f 0200 	mov.w	r2, #0
 800b922:	f04f 0300 	mov.w	r3, #0
 800b926:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b92a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b92e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b932:	4690      	mov	r8, r2
 800b934:	4699      	mov	r9, r3
 800b936:	4623      	mov	r3, r4
 800b938:	eb18 0303 	adds.w	r3, r8, r3
 800b93c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b940:	462b      	mov	r3, r5
 800b942:	eb49 0303 	adc.w	r3, r9, r3
 800b946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b94a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b956:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b95a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b95e:	460b      	mov	r3, r1
 800b960:	18db      	adds	r3, r3, r3
 800b962:	653b      	str	r3, [r7, #80]	@ 0x50
 800b964:	4613      	mov	r3, r2
 800b966:	eb42 0303 	adc.w	r3, r2, r3
 800b96a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b96c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b970:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b974:	f7f5 f9e0 	bl	8000d38 <__aeabi_uldivmod>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4b61      	ldr	r3, [pc, #388]	@ (800bb04 <UART_SetConfig+0x2d4>)
 800b97e:	fba3 2302 	umull	r2, r3, r3, r2
 800b982:	095b      	lsrs	r3, r3, #5
 800b984:	011c      	lsls	r4, r3, #4
 800b986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b98a:	2200      	movs	r2, #0
 800b98c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b990:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b994:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b998:	4642      	mov	r2, r8
 800b99a:	464b      	mov	r3, r9
 800b99c:	1891      	adds	r1, r2, r2
 800b99e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b9a0:	415b      	adcs	r3, r3
 800b9a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b9a8:	4641      	mov	r1, r8
 800b9aa:	eb12 0a01 	adds.w	sl, r2, r1
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	eb43 0b01 	adc.w	fp, r3, r1
 800b9b4:	f04f 0200 	mov.w	r2, #0
 800b9b8:	f04f 0300 	mov.w	r3, #0
 800b9bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b9c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b9c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b9c8:	4692      	mov	sl, r2
 800b9ca:	469b      	mov	fp, r3
 800b9cc:	4643      	mov	r3, r8
 800b9ce:	eb1a 0303 	adds.w	r3, sl, r3
 800b9d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b9d6:	464b      	mov	r3, r9
 800b9d8:	eb4b 0303 	adc.w	r3, fp, r3
 800b9dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b9e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b9ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b9f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	18db      	adds	r3, r3, r3
 800b9f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	eb42 0303 	adc.w	r3, r2, r3
 800ba00:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ba06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ba0a:	f7f5 f995 	bl	8000d38 <__aeabi_uldivmod>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	4611      	mov	r1, r2
 800ba14:	4b3b      	ldr	r3, [pc, #236]	@ (800bb04 <UART_SetConfig+0x2d4>)
 800ba16:	fba3 2301 	umull	r2, r3, r3, r1
 800ba1a:	095b      	lsrs	r3, r3, #5
 800ba1c:	2264      	movs	r2, #100	@ 0x64
 800ba1e:	fb02 f303 	mul.w	r3, r2, r3
 800ba22:	1acb      	subs	r3, r1, r3
 800ba24:	00db      	lsls	r3, r3, #3
 800ba26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ba2a:	4b36      	ldr	r3, [pc, #216]	@ (800bb04 <UART_SetConfig+0x2d4>)
 800ba2c:	fba3 2302 	umull	r2, r3, r3, r2
 800ba30:	095b      	lsrs	r3, r3, #5
 800ba32:	005b      	lsls	r3, r3, #1
 800ba34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ba38:	441c      	add	r4, r3
 800ba3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ba44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ba48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ba4c:	4642      	mov	r2, r8
 800ba4e:	464b      	mov	r3, r9
 800ba50:	1891      	adds	r1, r2, r2
 800ba52:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ba54:	415b      	adcs	r3, r3
 800ba56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ba5c:	4641      	mov	r1, r8
 800ba5e:	1851      	adds	r1, r2, r1
 800ba60:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba62:	4649      	mov	r1, r9
 800ba64:	414b      	adcs	r3, r1
 800ba66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba68:	f04f 0200 	mov.w	r2, #0
 800ba6c:	f04f 0300 	mov.w	r3, #0
 800ba70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ba74:	4659      	mov	r1, fp
 800ba76:	00cb      	lsls	r3, r1, #3
 800ba78:	4651      	mov	r1, sl
 800ba7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba7e:	4651      	mov	r1, sl
 800ba80:	00ca      	lsls	r2, r1, #3
 800ba82:	4610      	mov	r0, r2
 800ba84:	4619      	mov	r1, r3
 800ba86:	4603      	mov	r3, r0
 800ba88:	4642      	mov	r2, r8
 800ba8a:	189b      	adds	r3, r3, r2
 800ba8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ba90:	464b      	mov	r3, r9
 800ba92:	460a      	mov	r2, r1
 800ba94:	eb42 0303 	adc.w	r3, r2, r3
 800ba98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800baa8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800baac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bab0:	460b      	mov	r3, r1
 800bab2:	18db      	adds	r3, r3, r3
 800bab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bab6:	4613      	mov	r3, r2
 800bab8:	eb42 0303 	adc.w	r3, r2, r3
 800babc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800babe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bac2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800bac6:	f7f5 f937 	bl	8000d38 <__aeabi_uldivmod>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	4b0d      	ldr	r3, [pc, #52]	@ (800bb04 <UART_SetConfig+0x2d4>)
 800bad0:	fba3 1302 	umull	r1, r3, r3, r2
 800bad4:	095b      	lsrs	r3, r3, #5
 800bad6:	2164      	movs	r1, #100	@ 0x64
 800bad8:	fb01 f303 	mul.w	r3, r1, r3
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	00db      	lsls	r3, r3, #3
 800bae0:	3332      	adds	r3, #50	@ 0x32
 800bae2:	4a08      	ldr	r2, [pc, #32]	@ (800bb04 <UART_SetConfig+0x2d4>)
 800bae4:	fba2 2303 	umull	r2, r3, r2, r3
 800bae8:	095b      	lsrs	r3, r3, #5
 800baea:	f003 0207 	and.w	r2, r3, #7
 800baee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4422      	add	r2, r4
 800baf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800baf8:	e106      	b.n	800bd08 <UART_SetConfig+0x4d8>
 800bafa:	bf00      	nop
 800bafc:	40011000 	.word	0x40011000
 800bb00:	40011400 	.word	0x40011400
 800bb04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bb08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bb12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bb16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bb1a:	4642      	mov	r2, r8
 800bb1c:	464b      	mov	r3, r9
 800bb1e:	1891      	adds	r1, r2, r2
 800bb20:	6239      	str	r1, [r7, #32]
 800bb22:	415b      	adcs	r3, r3
 800bb24:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb2a:	4641      	mov	r1, r8
 800bb2c:	1854      	adds	r4, r2, r1
 800bb2e:	4649      	mov	r1, r9
 800bb30:	eb43 0501 	adc.w	r5, r3, r1
 800bb34:	f04f 0200 	mov.w	r2, #0
 800bb38:	f04f 0300 	mov.w	r3, #0
 800bb3c:	00eb      	lsls	r3, r5, #3
 800bb3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb42:	00e2      	lsls	r2, r4, #3
 800bb44:	4614      	mov	r4, r2
 800bb46:	461d      	mov	r5, r3
 800bb48:	4643      	mov	r3, r8
 800bb4a:	18e3      	adds	r3, r4, r3
 800bb4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bb50:	464b      	mov	r3, r9
 800bb52:	eb45 0303 	adc.w	r3, r5, r3
 800bb56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bb5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bb6a:	f04f 0200 	mov.w	r2, #0
 800bb6e:	f04f 0300 	mov.w	r3, #0
 800bb72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bb76:	4629      	mov	r1, r5
 800bb78:	008b      	lsls	r3, r1, #2
 800bb7a:	4621      	mov	r1, r4
 800bb7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb80:	4621      	mov	r1, r4
 800bb82:	008a      	lsls	r2, r1, #2
 800bb84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bb88:	f7f5 f8d6 	bl	8000d38 <__aeabi_uldivmod>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4b60      	ldr	r3, [pc, #384]	@ (800bd14 <UART_SetConfig+0x4e4>)
 800bb92:	fba3 2302 	umull	r2, r3, r3, r2
 800bb96:	095b      	lsrs	r3, r3, #5
 800bb98:	011c      	lsls	r4, r3, #4
 800bb9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bba4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bba8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bbac:	4642      	mov	r2, r8
 800bbae:	464b      	mov	r3, r9
 800bbb0:	1891      	adds	r1, r2, r2
 800bbb2:	61b9      	str	r1, [r7, #24]
 800bbb4:	415b      	adcs	r3, r3
 800bbb6:	61fb      	str	r3, [r7, #28]
 800bbb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbbc:	4641      	mov	r1, r8
 800bbbe:	1851      	adds	r1, r2, r1
 800bbc0:	6139      	str	r1, [r7, #16]
 800bbc2:	4649      	mov	r1, r9
 800bbc4:	414b      	adcs	r3, r1
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	f04f 0200 	mov.w	r2, #0
 800bbcc:	f04f 0300 	mov.w	r3, #0
 800bbd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bbd4:	4659      	mov	r1, fp
 800bbd6:	00cb      	lsls	r3, r1, #3
 800bbd8:	4651      	mov	r1, sl
 800bbda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbde:	4651      	mov	r1, sl
 800bbe0:	00ca      	lsls	r2, r1, #3
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	4642      	mov	r2, r8
 800bbea:	189b      	adds	r3, r3, r2
 800bbec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bbf0:	464b      	mov	r3, r9
 800bbf2:	460a      	mov	r2, r1
 800bbf4:	eb42 0303 	adc.w	r3, r2, r3
 800bbf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bbfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bc06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bc08:	f04f 0200 	mov.w	r2, #0
 800bc0c:	f04f 0300 	mov.w	r3, #0
 800bc10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bc14:	4649      	mov	r1, r9
 800bc16:	008b      	lsls	r3, r1, #2
 800bc18:	4641      	mov	r1, r8
 800bc1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc1e:	4641      	mov	r1, r8
 800bc20:	008a      	lsls	r2, r1, #2
 800bc22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bc26:	f7f5 f887 	bl	8000d38 <__aeabi_uldivmod>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	4611      	mov	r1, r2
 800bc30:	4b38      	ldr	r3, [pc, #224]	@ (800bd14 <UART_SetConfig+0x4e4>)
 800bc32:	fba3 2301 	umull	r2, r3, r3, r1
 800bc36:	095b      	lsrs	r3, r3, #5
 800bc38:	2264      	movs	r2, #100	@ 0x64
 800bc3a:	fb02 f303 	mul.w	r3, r2, r3
 800bc3e:	1acb      	subs	r3, r1, r3
 800bc40:	011b      	lsls	r3, r3, #4
 800bc42:	3332      	adds	r3, #50	@ 0x32
 800bc44:	4a33      	ldr	r2, [pc, #204]	@ (800bd14 <UART_SetConfig+0x4e4>)
 800bc46:	fba2 2303 	umull	r2, r3, r2, r3
 800bc4a:	095b      	lsrs	r3, r3, #5
 800bc4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc50:	441c      	add	r4, r3
 800bc52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc56:	2200      	movs	r2, #0
 800bc58:	673b      	str	r3, [r7, #112]	@ 0x70
 800bc5a:	677a      	str	r2, [r7, #116]	@ 0x74
 800bc5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bc60:	4642      	mov	r2, r8
 800bc62:	464b      	mov	r3, r9
 800bc64:	1891      	adds	r1, r2, r2
 800bc66:	60b9      	str	r1, [r7, #8]
 800bc68:	415b      	adcs	r3, r3
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc70:	4641      	mov	r1, r8
 800bc72:	1851      	adds	r1, r2, r1
 800bc74:	6039      	str	r1, [r7, #0]
 800bc76:	4649      	mov	r1, r9
 800bc78:	414b      	adcs	r3, r1
 800bc7a:	607b      	str	r3, [r7, #4]
 800bc7c:	f04f 0200 	mov.w	r2, #0
 800bc80:	f04f 0300 	mov.w	r3, #0
 800bc84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc88:	4659      	mov	r1, fp
 800bc8a:	00cb      	lsls	r3, r1, #3
 800bc8c:	4651      	mov	r1, sl
 800bc8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc92:	4651      	mov	r1, sl
 800bc94:	00ca      	lsls	r2, r1, #3
 800bc96:	4610      	mov	r0, r2
 800bc98:	4619      	mov	r1, r3
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	4642      	mov	r2, r8
 800bc9e:	189b      	adds	r3, r3, r2
 800bca0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bca2:	464b      	mov	r3, r9
 800bca4:	460a      	mov	r2, r1
 800bca6:	eb42 0303 	adc.w	r3, r2, r3
 800bcaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bcac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	663b      	str	r3, [r7, #96]	@ 0x60
 800bcb6:	667a      	str	r2, [r7, #100]	@ 0x64
 800bcb8:	f04f 0200 	mov.w	r2, #0
 800bcbc:	f04f 0300 	mov.w	r3, #0
 800bcc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bcc4:	4649      	mov	r1, r9
 800bcc6:	008b      	lsls	r3, r1, #2
 800bcc8:	4641      	mov	r1, r8
 800bcca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bcce:	4641      	mov	r1, r8
 800bcd0:	008a      	lsls	r2, r1, #2
 800bcd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bcd6:	f7f5 f82f 	bl	8000d38 <__aeabi_uldivmod>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4b0d      	ldr	r3, [pc, #52]	@ (800bd14 <UART_SetConfig+0x4e4>)
 800bce0:	fba3 1302 	umull	r1, r3, r3, r2
 800bce4:	095b      	lsrs	r3, r3, #5
 800bce6:	2164      	movs	r1, #100	@ 0x64
 800bce8:	fb01 f303 	mul.w	r3, r1, r3
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	011b      	lsls	r3, r3, #4
 800bcf0:	3332      	adds	r3, #50	@ 0x32
 800bcf2:	4a08      	ldr	r2, [pc, #32]	@ (800bd14 <UART_SetConfig+0x4e4>)
 800bcf4:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf8:	095b      	lsrs	r3, r3, #5
 800bcfa:	f003 020f 	and.w	r2, r3, #15
 800bcfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4422      	add	r2, r4
 800bd06:	609a      	str	r2, [r3, #8]
}
 800bd08:	bf00      	nop
 800bd0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd14:	51eb851f 	.word	0x51eb851f

0800bd18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd18:	b084      	sub	sp, #16
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b084      	sub	sp, #16
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	f107 001c 	add.w	r0, r7, #28
 800bd26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd2a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d123      	bne.n	800bd7a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800bd46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bd5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d105      	bne.n	800bd6e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f001 fae8 	bl	800d344 <USB_CoreReset>
 800bd74:	4603      	mov	r3, r0
 800bd76:	73fb      	strb	r3, [r7, #15]
 800bd78:	e01b      	b.n	800bdb2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f001 fadc 	bl	800d344 <USB_CoreReset>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bd90:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d106      	bne.n	800bda6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd9c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	639a      	str	r2, [r3, #56]	@ 0x38
 800bda4:	e005      	b.n	800bdb2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdaa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bdb2:	7fbb      	ldrb	r3, [r7, #30]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d10b      	bne.n	800bdd0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	f043 0206 	orr.w	r2, r3, #6
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	f043 0220 	orr.w	r2, r3, #32
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bdd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bddc:	b004      	add	sp, #16
 800bdde:	4770      	bx	lr

0800bde0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b087      	sub	sp, #28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	4613      	mov	r3, r2
 800bdec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bdee:	79fb      	ldrb	r3, [r7, #7]
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d165      	bne.n	800bec0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	4a41      	ldr	r2, [pc, #260]	@ (800befc <USB_SetTurnaroundTime+0x11c>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d906      	bls.n	800be0a <USB_SetTurnaroundTime+0x2a>
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	4a40      	ldr	r2, [pc, #256]	@ (800bf00 <USB_SetTurnaroundTime+0x120>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d202      	bcs.n	800be0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800be04:	230f      	movs	r3, #15
 800be06:	617b      	str	r3, [r7, #20]
 800be08:	e062      	b.n	800bed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	4a3c      	ldr	r2, [pc, #240]	@ (800bf00 <USB_SetTurnaroundTime+0x120>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d306      	bcc.n	800be20 <USB_SetTurnaroundTime+0x40>
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	4a3b      	ldr	r2, [pc, #236]	@ (800bf04 <USB_SetTurnaroundTime+0x124>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d202      	bcs.n	800be20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800be1a:	230e      	movs	r3, #14
 800be1c:	617b      	str	r3, [r7, #20]
 800be1e:	e057      	b.n	800bed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	4a38      	ldr	r2, [pc, #224]	@ (800bf04 <USB_SetTurnaroundTime+0x124>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d306      	bcc.n	800be36 <USB_SetTurnaroundTime+0x56>
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	4a37      	ldr	r2, [pc, #220]	@ (800bf08 <USB_SetTurnaroundTime+0x128>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d202      	bcs.n	800be36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800be30:	230d      	movs	r3, #13
 800be32:	617b      	str	r3, [r7, #20]
 800be34:	e04c      	b.n	800bed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	4a33      	ldr	r2, [pc, #204]	@ (800bf08 <USB_SetTurnaroundTime+0x128>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d306      	bcc.n	800be4c <USB_SetTurnaroundTime+0x6c>
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	4a32      	ldr	r2, [pc, #200]	@ (800bf0c <USB_SetTurnaroundTime+0x12c>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d802      	bhi.n	800be4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800be46:	230c      	movs	r3, #12
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	e041      	b.n	800bed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	4a2f      	ldr	r2, [pc, #188]	@ (800bf0c <USB_SetTurnaroundTime+0x12c>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d906      	bls.n	800be62 <USB_SetTurnaroundTime+0x82>
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	4a2e      	ldr	r2, [pc, #184]	@ (800bf10 <USB_SetTurnaroundTime+0x130>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d802      	bhi.n	800be62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800be5c:	230b      	movs	r3, #11
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	e036      	b.n	800bed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	4a2a      	ldr	r2, [pc, #168]	@ (800bf10 <USB_SetTurnaroundTime+0x130>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d906      	bls.n	800be78 <USB_SetTurnaroundTime+0x98>
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	4a29      	ldr	r2, [pc, #164]	@ (800bf14 <USB_SetTurnaroundTime+0x134>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d802      	bhi.n	800be78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800be72:	230a      	movs	r3, #10
 800be74:	617b      	str	r3, [r7, #20]
 800be76:	e02b      	b.n	800bed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	4a26      	ldr	r2, [pc, #152]	@ (800bf14 <USB_SetTurnaroundTime+0x134>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d906      	bls.n	800be8e <USB_SetTurnaroundTime+0xae>
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	4a25      	ldr	r2, [pc, #148]	@ (800bf18 <USB_SetTurnaroundTime+0x138>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d202      	bcs.n	800be8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800be88:	2309      	movs	r3, #9
 800be8a:	617b      	str	r3, [r7, #20]
 800be8c:	e020      	b.n	800bed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	4a21      	ldr	r2, [pc, #132]	@ (800bf18 <USB_SetTurnaroundTime+0x138>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d306      	bcc.n	800bea4 <USB_SetTurnaroundTime+0xc4>
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	4a20      	ldr	r2, [pc, #128]	@ (800bf1c <USB_SetTurnaroundTime+0x13c>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d802      	bhi.n	800bea4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800be9e:	2308      	movs	r3, #8
 800bea0:	617b      	str	r3, [r7, #20]
 800bea2:	e015      	b.n	800bed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	4a1d      	ldr	r2, [pc, #116]	@ (800bf1c <USB_SetTurnaroundTime+0x13c>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d906      	bls.n	800beba <USB_SetTurnaroundTime+0xda>
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	4a1c      	ldr	r2, [pc, #112]	@ (800bf20 <USB_SetTurnaroundTime+0x140>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d202      	bcs.n	800beba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800beb4:	2307      	movs	r3, #7
 800beb6:	617b      	str	r3, [r7, #20]
 800beb8:	e00a      	b.n	800bed0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800beba:	2306      	movs	r3, #6
 800bebc:	617b      	str	r3, [r7, #20]
 800bebe:	e007      	b.n	800bed0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bec0:	79fb      	ldrb	r3, [r7, #7]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d102      	bne.n	800becc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bec6:	2309      	movs	r3, #9
 800bec8:	617b      	str	r3, [r7, #20]
 800beca:	e001      	b.n	800bed0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800becc:	2309      	movs	r3, #9
 800bece:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	68da      	ldr	r2, [r3, #12]
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	029b      	lsls	r3, r3, #10
 800bee4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800bee8:	431a      	orrs	r2, r3
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	371c      	adds	r7, #28
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr
 800befc:	00d8acbf 	.word	0x00d8acbf
 800bf00:	00e4e1c0 	.word	0x00e4e1c0
 800bf04:	00f42400 	.word	0x00f42400
 800bf08:	01067380 	.word	0x01067380
 800bf0c:	011a499f 	.word	0x011a499f
 800bf10:	01312cff 	.word	0x01312cff
 800bf14:	014ca43f 	.word	0x014ca43f
 800bf18:	016e3600 	.word	0x016e3600
 800bf1c:	01a6ab1f 	.word	0x01a6ab1f
 800bf20:	01e84800 	.word	0x01e84800

0800bf24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	f043 0201 	orr.w	r2, r3, #1
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	370c      	adds	r7, #12
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf46:	b480      	push	{r7}
 800bf48:	b083      	sub	sp, #12
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	f023 0201 	bic.w	r2, r3, #1
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	460b      	mov	r3, r1
 800bf72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bf74:	2300      	movs	r3, #0
 800bf76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf84:	78fb      	ldrb	r3, [r7, #3]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d115      	bne.n	800bfb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bf96:	200a      	movs	r0, #10
 800bf98:	f7f9 f8a4 	bl	80050e4 <HAL_Delay>
      ms += 10U;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	330a      	adds	r3, #10
 800bfa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f001 f93f 	bl	800d226 <USB_GetMode>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d01e      	beq.n	800bfec <USB_SetCurrentMode+0x84>
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2bc7      	cmp	r3, #199	@ 0xc7
 800bfb2:	d9f0      	bls.n	800bf96 <USB_SetCurrentMode+0x2e>
 800bfb4:	e01a      	b.n	800bfec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bfb6:	78fb      	ldrb	r3, [r7, #3]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d115      	bne.n	800bfe8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bfc8:	200a      	movs	r0, #10
 800bfca:	f7f9 f88b 	bl	80050e4 <HAL_Delay>
      ms += 10U;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	330a      	adds	r3, #10
 800bfd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f001 f926 	bl	800d226 <USB_GetMode>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d005      	beq.n	800bfec <USB_SetCurrentMode+0x84>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2bc7      	cmp	r3, #199	@ 0xc7
 800bfe4:	d9f0      	bls.n	800bfc8 <USB_SetCurrentMode+0x60>
 800bfe6:	e001      	b.n	800bfec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e005      	b.n	800bff8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2bc8      	cmp	r3, #200	@ 0xc8
 800bff0:	d101      	bne.n	800bff6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	e000      	b.n	800bff8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c000:	b084      	sub	sp, #16
 800c002:	b580      	push	{r7, lr}
 800c004:	b086      	sub	sp, #24
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c00e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c012:	2300      	movs	r3, #0
 800c014:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c01a:	2300      	movs	r3, #0
 800c01c:	613b      	str	r3, [r7, #16]
 800c01e:	e009      	b.n	800c034 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	3340      	adds	r3, #64	@ 0x40
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	4413      	add	r3, r2
 800c02a:	2200      	movs	r2, #0
 800c02c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	3301      	adds	r3, #1
 800c032:	613b      	str	r3, [r7, #16]
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	2b0e      	cmp	r3, #14
 800c038:	d9f2      	bls.n	800c020 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c03a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d11c      	bne.n	800c07c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c050:	f043 0302 	orr.w	r3, r3, #2
 800c054:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c05a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c066:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c072:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	639a      	str	r2, [r3, #56]	@ 0x38
 800c07a:	e00b      	b.n	800c094 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c080:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c08c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c09a:	461a      	mov	r2, r3
 800c09c:	2300      	movs	r3, #0
 800c09e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c0a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d10d      	bne.n	800c0c4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c0a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d104      	bne.n	800c0ba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f968 	bl	800c388 <USB_SetDevSpeed>
 800c0b8:	e008      	b.n	800c0cc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c0ba:	2101      	movs	r1, #1
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 f963 	bl	800c388 <USB_SetDevSpeed>
 800c0c2:	e003      	b.n	800c0cc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c0c4:	2103      	movs	r1, #3
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f95e 	bl	800c388 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0cc:	2110      	movs	r1, #16
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 f8fa 	bl	800c2c8 <USB_FlushTxFifo>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d001      	beq.n	800c0de <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f924 	bl	800c32c <USB_FlushRxFifo>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d001      	beq.n	800c0ee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c100:	461a      	mov	r2, r3
 800c102:	2300      	movs	r3, #0
 800c104:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c10c:	461a      	mov	r2, r3
 800c10e:	2300      	movs	r3, #0
 800c110:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c112:	2300      	movs	r3, #0
 800c114:	613b      	str	r3, [r7, #16]
 800c116:	e043      	b.n	800c1a0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	015a      	lsls	r2, r3, #5
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	4413      	add	r3, r2
 800c120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c12a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c12e:	d118      	bne.n	800c162 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10a      	bne.n	800c14c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	015a      	lsls	r2, r3, #5
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	4413      	add	r3, r2
 800c13e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c142:	461a      	mov	r2, r3
 800c144:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c148:	6013      	str	r3, [r2, #0]
 800c14a:	e013      	b.n	800c174 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	015a      	lsls	r2, r3, #5
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	4413      	add	r3, r2
 800c154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c158:	461a      	mov	r2, r3
 800c15a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c15e:	6013      	str	r3, [r2, #0]
 800c160:	e008      	b.n	800c174 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	015a      	lsls	r2, r3, #5
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	4413      	add	r3, r2
 800c16a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c16e:	461a      	mov	r2, r3
 800c170:	2300      	movs	r3, #0
 800c172:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	015a      	lsls	r2, r3, #5
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	4413      	add	r3, r2
 800c17c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c180:	461a      	mov	r2, r3
 800c182:	2300      	movs	r3, #0
 800c184:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	015a      	lsls	r2, r3, #5
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	4413      	add	r3, r2
 800c18e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c192:	461a      	mov	r2, r3
 800c194:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c198:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	3301      	adds	r3, #1
 800c19e:	613b      	str	r3, [r7, #16]
 800c1a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d3b5      	bcc.n	800c118 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	613b      	str	r3, [r7, #16]
 800c1b0:	e043      	b.n	800c23a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	015a      	lsls	r2, r3, #5
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c1c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c1c8:	d118      	bne.n	800c1fc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10a      	bne.n	800c1e6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	015a      	lsls	r2, r3, #5
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1dc:	461a      	mov	r2, r3
 800c1de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c1e2:	6013      	str	r3, [r2, #0]
 800c1e4:	e013      	b.n	800c20e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	015a      	lsls	r2, r3, #5
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c1f8:	6013      	str	r3, [r2, #0]
 800c1fa:	e008      	b.n	800c20e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	015a      	lsls	r2, r3, #5
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4413      	add	r3, r2
 800c204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c208:	461a      	mov	r2, r3
 800c20a:	2300      	movs	r3, #0
 800c20c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	015a      	lsls	r2, r3, #5
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	4413      	add	r3, r2
 800c216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c21a:	461a      	mov	r2, r3
 800c21c:	2300      	movs	r3, #0
 800c21e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	015a      	lsls	r2, r3, #5
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	4413      	add	r3, r2
 800c228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c22c:	461a      	mov	r2, r3
 800c22e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c232:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	3301      	adds	r3, #1
 800c238:	613b      	str	r3, [r7, #16]
 800c23a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c23e:	461a      	mov	r2, r3
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	4293      	cmp	r3, r2
 800c244:	d3b5      	bcc.n	800c1b2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c258:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c266:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c268:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d105      	bne.n	800c27c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	f043 0210 	orr.w	r2, r3, #16
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	699a      	ldr	r2, [r3, #24]
 800c280:	4b10      	ldr	r3, [pc, #64]	@ (800c2c4 <USB_DevInit+0x2c4>)
 800c282:	4313      	orrs	r3, r2
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c288:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d005      	beq.n	800c29c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	699b      	ldr	r3, [r3, #24]
 800c294:	f043 0208 	orr.w	r2, r3, #8
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c29c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d107      	bne.n	800c2b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	699b      	ldr	r3, [r3, #24]
 800c2a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c2ac:	f043 0304 	orr.w	r3, r3, #4
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c2b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3718      	adds	r7, #24
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2c0:	b004      	add	sp, #16
 800c2c2:	4770      	bx	lr
 800c2c4:	803c3800 	.word	0x803c3800

0800c2c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c2e2:	d901      	bls.n	800c2e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c2e4:	2303      	movs	r3, #3
 800c2e6:	e01b      	b.n	800c320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	daf2      	bge.n	800c2d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	019b      	lsls	r3, r3, #6
 800c2f8:	f043 0220 	orr.w	r2, r3, #32
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	3301      	adds	r3, #1
 800c304:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c30c:	d901      	bls.n	800c312 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c30e:	2303      	movs	r3, #3
 800c310:	e006      	b.n	800c320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	f003 0320 	and.w	r3, r3, #32
 800c31a:	2b20      	cmp	r3, #32
 800c31c:	d0f0      	beq.n	800c300 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c334:	2300      	movs	r3, #0
 800c336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	3301      	adds	r3, #1
 800c33c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c344:	d901      	bls.n	800c34a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c346:	2303      	movs	r3, #3
 800c348:	e018      	b.n	800c37c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	daf2      	bge.n	800c338 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c352:	2300      	movs	r3, #0
 800c354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2210      	movs	r2, #16
 800c35a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	3301      	adds	r3, #1
 800c360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c368:	d901      	bls.n	800c36e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c36a:	2303      	movs	r3, #3
 800c36c:	e006      	b.n	800c37c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	691b      	ldr	r3, [r3, #16]
 800c372:	f003 0310 	and.w	r3, r3, #16
 800c376:	2b10      	cmp	r3, #16
 800c378:	d0f0      	beq.n	800c35c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3714      	adds	r7, #20
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	460b      	mov	r3, r1
 800c392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	78fb      	ldrb	r3, [r7, #3]
 800c3a2:	68f9      	ldr	r1, [r7, #12]
 800c3a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b087      	sub	sp, #28
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	f003 0306 	and.w	r3, r3, #6
 800c3d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d102      	bne.n	800c3e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	75fb      	strb	r3, [r7, #23]
 800c3de:	e00a      	b.n	800c3f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	d002      	beq.n	800c3ec <USB_GetDevSpeed+0x32>
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2b06      	cmp	r3, #6
 800c3ea:	d102      	bne.n	800c3f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c3ec:	2302      	movs	r3, #2
 800c3ee:	75fb      	strb	r3, [r7, #23]
 800c3f0:	e001      	b.n	800c3f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c3f2:	230f      	movs	r3, #15
 800c3f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	371c      	adds	r7, #28
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	785b      	ldrb	r3, [r3, #1]
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d13a      	bne.n	800c496 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c426:	69da      	ldr	r2, [r3, #28]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	f003 030f 	and.w	r3, r3, #15
 800c430:	2101      	movs	r1, #1
 800c432:	fa01 f303 	lsl.w	r3, r1, r3
 800c436:	b29b      	uxth	r3, r3
 800c438:	68f9      	ldr	r1, [r7, #12]
 800c43a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c43e:	4313      	orrs	r3, r2
 800c440:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	015a      	lsls	r2, r3, #5
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	4413      	add	r3, r2
 800c44a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d155      	bne.n	800c504 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	015a      	lsls	r2, r3, #5
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	4413      	add	r3, r2
 800c460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	791b      	ldrb	r3, [r3, #4]
 800c472:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c474:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	059b      	lsls	r3, r3, #22
 800c47a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c47c:	4313      	orrs	r3, r2
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	0151      	lsls	r1, r2, #5
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	440a      	add	r2, r1
 800c486:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c48a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c48e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c492:	6013      	str	r3, [r2, #0]
 800c494:	e036      	b.n	800c504 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c49c:	69da      	ldr	r2, [r3, #28]
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	f003 030f 	and.w	r3, r3, #15
 800c4a6:	2101      	movs	r1, #1
 800c4a8:	fa01 f303 	lsl.w	r3, r1, r3
 800c4ac:	041b      	lsls	r3, r3, #16
 800c4ae:	68f9      	ldr	r1, [r7, #12]
 800c4b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	015a      	lsls	r2, r3, #5
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	4413      	add	r3, r2
 800c4c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d11a      	bne.n	800c504 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	015a      	lsls	r2, r3, #5
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	791b      	ldrb	r3, [r3, #4]
 800c4e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c4ea:	430b      	orrs	r3, r1
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	68ba      	ldr	r2, [r7, #8]
 800c4f0:	0151      	lsls	r1, r2, #5
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	440a      	add	r2, r1
 800c4f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c4fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c502:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3714      	adds	r7, #20
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr
	...

0800c514 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c514:	b480      	push	{r7}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	785b      	ldrb	r3, [r3, #1]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d161      	bne.n	800c5f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	015a      	lsls	r2, r3, #5
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	4413      	add	r3, r2
 800c538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c542:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c546:	d11f      	bne.n	800c588 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	015a      	lsls	r2, r3, #5
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4413      	add	r3, r2
 800c550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	0151      	lsls	r1, r2, #5
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	440a      	add	r2, r1
 800c55e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c562:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c566:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	015a      	lsls	r2, r3, #5
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	4413      	add	r3, r2
 800c570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	68ba      	ldr	r2, [r7, #8]
 800c578:	0151      	lsls	r1, r2, #5
 800c57a:	68fa      	ldr	r2, [r7, #12]
 800c57c:	440a      	add	r2, r1
 800c57e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c582:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c586:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c58e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	f003 030f 	and.w	r3, r3, #15
 800c598:	2101      	movs	r1, #1
 800c59a:	fa01 f303 	lsl.w	r3, r1, r3
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	43db      	mvns	r3, r3
 800c5a2:	68f9      	ldr	r1, [r7, #12]
 800c5a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c5a8:	4013      	ands	r3, r2
 800c5aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5b2:	69da      	ldr	r2, [r3, #28]
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	f003 030f 	and.w	r3, r3, #15
 800c5bc:	2101      	movs	r1, #1
 800c5be:	fa01 f303 	lsl.w	r3, r1, r3
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	43db      	mvns	r3, r3
 800c5c6:	68f9      	ldr	r1, [r7, #12]
 800c5c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c5cc:	4013      	ands	r3, r2
 800c5ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	015a      	lsls	r2, r3, #5
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	0159      	lsls	r1, r3, #5
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	440b      	add	r3, r1
 800c5e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	4b35      	ldr	r3, [pc, #212]	@ (800c6c4 <USB_DeactivateEndpoint+0x1b0>)
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	600b      	str	r3, [r1, #0]
 800c5f2:	e060      	b.n	800c6b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	015a      	lsls	r2, r3, #5
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c606:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c60a:	d11f      	bne.n	800c64c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	015a      	lsls	r2, r3, #5
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	4413      	add	r3, r2
 800c614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	0151      	lsls	r1, r2, #5
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	440a      	add	r2, r1
 800c622:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c626:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c62a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	015a      	lsls	r2, r3, #5
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	4413      	add	r3, r2
 800c634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	0151      	lsls	r1, r2, #5
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	440a      	add	r2, r1
 800c642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c646:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c64a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c652:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	f003 030f 	and.w	r3, r3, #15
 800c65c:	2101      	movs	r1, #1
 800c65e:	fa01 f303 	lsl.w	r3, r1, r3
 800c662:	041b      	lsls	r3, r3, #16
 800c664:	43db      	mvns	r3, r3
 800c666:	68f9      	ldr	r1, [r7, #12]
 800c668:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c66c:	4013      	ands	r3, r2
 800c66e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c676:	69da      	ldr	r2, [r3, #28]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	f003 030f 	and.w	r3, r3, #15
 800c680:	2101      	movs	r1, #1
 800c682:	fa01 f303 	lsl.w	r3, r1, r3
 800c686:	041b      	lsls	r3, r3, #16
 800c688:	43db      	mvns	r3, r3
 800c68a:	68f9      	ldr	r1, [r7, #12]
 800c68c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c690:	4013      	ands	r3, r2
 800c692:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	015a      	lsls	r2, r3, #5
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	4413      	add	r3, r2
 800c69c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	0159      	lsls	r1, r3, #5
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	440b      	add	r3, r1
 800c6aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	4b05      	ldr	r3, [pc, #20]	@ (800c6c8 <USB_DeactivateEndpoint+0x1b4>)
 800c6b2:	4013      	ands	r3, r2
 800c6b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3714      	adds	r7, #20
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	ec337800 	.word	0xec337800
 800c6c8:	eff37800 	.word	0xeff37800

0800c6cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08a      	sub	sp, #40	@ 0x28
 800c6d0:	af02      	add	r7, sp, #8
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	785b      	ldrb	r3, [r3, #1]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	f040 817f 	bne.w	800c9ec <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d132      	bne.n	800c75c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	015a      	lsls	r2, r3, #5
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c702:	691b      	ldr	r3, [r3, #16]
 800c704:	69ba      	ldr	r2, [r7, #24]
 800c706:	0151      	lsls	r1, r2, #5
 800c708:	69fa      	ldr	r2, [r7, #28]
 800c70a:	440a      	add	r2, r1
 800c70c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c710:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800c714:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800c718:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	015a      	lsls	r2, r3, #5
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	4413      	add	r3, r2
 800c722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	69ba      	ldr	r2, [r7, #24]
 800c72a:	0151      	lsls	r1, r2, #5
 800c72c:	69fa      	ldr	r2, [r7, #28]
 800c72e:	440a      	add	r2, r1
 800c730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c734:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c738:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	015a      	lsls	r2, r3, #5
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	4413      	add	r3, r2
 800c742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	69ba      	ldr	r2, [r7, #24]
 800c74a:	0151      	lsls	r1, r2, #5
 800c74c:	69fa      	ldr	r2, [r7, #28]
 800c74e:	440a      	add	r2, r1
 800c750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c754:	0cdb      	lsrs	r3, r3, #19
 800c756:	04db      	lsls	r3, r3, #19
 800c758:	6113      	str	r3, [r2, #16]
 800c75a:	e097      	b.n	800c88c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	015a      	lsls	r2, r3, #5
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	4413      	add	r3, r2
 800c764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c768:	691b      	ldr	r3, [r3, #16]
 800c76a:	69ba      	ldr	r2, [r7, #24]
 800c76c:	0151      	lsls	r1, r2, #5
 800c76e:	69fa      	ldr	r2, [r7, #28]
 800c770:	440a      	add	r2, r1
 800c772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c776:	0cdb      	lsrs	r3, r3, #19
 800c778:	04db      	lsls	r3, r3, #19
 800c77a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	015a      	lsls	r2, r3, #5
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	4413      	add	r3, r2
 800c784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	69ba      	ldr	r2, [r7, #24]
 800c78c:	0151      	lsls	r1, r2, #5
 800c78e:	69fa      	ldr	r2, [r7, #28]
 800c790:	440a      	add	r2, r1
 800c792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c796:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800c79a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800c79e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d11a      	bne.n	800c7dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	691a      	ldr	r2, [r3, #16]
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d903      	bls.n	800c7ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	689a      	ldr	r2, [r3, #8]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	015a      	lsls	r2, r3, #5
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	69ba      	ldr	r2, [r7, #24]
 800c7ca:	0151      	lsls	r1, r2, #5
 800c7cc:	69fa      	ldr	r2, [r7, #28]
 800c7ce:	440a      	add	r2, r1
 800c7d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c7d8:	6113      	str	r3, [r2, #16]
 800c7da:	e044      	b.n	800c866 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	691a      	ldr	r2, [r3, #16]
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	1e5a      	subs	r2, r3, #1
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7f0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	015a      	lsls	r2, r3, #5
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7fe:	691a      	ldr	r2, [r3, #16]
 800c800:	8afb      	ldrh	r3, [r7, #22]
 800c802:	04d9      	lsls	r1, r3, #19
 800c804:	4ba4      	ldr	r3, [pc, #656]	@ (800ca98 <USB_EPStartXfer+0x3cc>)
 800c806:	400b      	ands	r3, r1
 800c808:	69b9      	ldr	r1, [r7, #24]
 800c80a:	0148      	lsls	r0, r1, #5
 800c80c:	69f9      	ldr	r1, [r7, #28]
 800c80e:	4401      	add	r1, r0
 800c810:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c814:	4313      	orrs	r3, r2
 800c816:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	791b      	ldrb	r3, [r3, #4]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d122      	bne.n	800c866 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	015a      	lsls	r2, r3, #5
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	4413      	add	r3, r2
 800c828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	69ba      	ldr	r2, [r7, #24]
 800c830:	0151      	lsls	r1, r2, #5
 800c832:	69fa      	ldr	r2, [r7, #28]
 800c834:	440a      	add	r2, r1
 800c836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c83a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c83e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	015a      	lsls	r2, r3, #5
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	4413      	add	r3, r2
 800c848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c84c:	691a      	ldr	r2, [r3, #16]
 800c84e:	8afb      	ldrh	r3, [r7, #22]
 800c850:	075b      	lsls	r3, r3, #29
 800c852:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800c856:	69b9      	ldr	r1, [r7, #24]
 800c858:	0148      	lsls	r0, r1, #5
 800c85a:	69f9      	ldr	r1, [r7, #28]
 800c85c:	4401      	add	r1, r0
 800c85e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c862:	4313      	orrs	r3, r2
 800c864:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	015a      	lsls	r2, r3, #5
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	4413      	add	r3, r2
 800c86e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c872:	691a      	ldr	r2, [r3, #16]
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c87c:	69b9      	ldr	r1, [r7, #24]
 800c87e:	0148      	lsls	r0, r1, #5
 800c880:	69f9      	ldr	r1, [r7, #28]
 800c882:	4401      	add	r1, r0
 800c884:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c888:	4313      	orrs	r3, r2
 800c88a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c88c:	79fb      	ldrb	r3, [r7, #7]
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d14b      	bne.n	800c92a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	69db      	ldr	r3, [r3, #28]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d009      	beq.n	800c8ae <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	015a      	lsls	r2, r3, #5
 800c89e:	69fb      	ldr	r3, [r7, #28]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	69db      	ldr	r3, [r3, #28]
 800c8ac:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	791b      	ldrb	r3, [r3, #4]
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d128      	bne.n	800c908 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d110      	bne.n	800c8e8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	015a      	lsls	r2, r3, #5
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	69ba      	ldr	r2, [r7, #24]
 800c8d6:	0151      	lsls	r1, r2, #5
 800c8d8:	69fa      	ldr	r2, [r7, #28]
 800c8da:	440a      	add	r2, r1
 800c8dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c8e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c8e4:	6013      	str	r3, [r2, #0]
 800c8e6:	e00f      	b.n	800c908 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	015a      	lsls	r2, r3, #5
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	69ba      	ldr	r2, [r7, #24]
 800c8f8:	0151      	lsls	r1, r2, #5
 800c8fa:	69fa      	ldr	r2, [r7, #28]
 800c8fc:	440a      	add	r2, r1
 800c8fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c906:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	015a      	lsls	r2, r3, #5
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	4413      	add	r3, r2
 800c910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	69ba      	ldr	r2, [r7, #24]
 800c918:	0151      	lsls	r1, r2, #5
 800c91a:	69fa      	ldr	r2, [r7, #28]
 800c91c:	440a      	add	r2, r1
 800c91e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c922:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c926:	6013      	str	r3, [r2, #0]
 800c928:	e166      	b.n	800cbf8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	015a      	lsls	r2, r3, #5
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	4413      	add	r3, r2
 800c932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	69ba      	ldr	r2, [r7, #24]
 800c93a:	0151      	lsls	r1, r2, #5
 800c93c:	69fa      	ldr	r2, [r7, #28]
 800c93e:	440a      	add	r2, r1
 800c940:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c944:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c948:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	791b      	ldrb	r3, [r3, #4]
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d015      	beq.n	800c97e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	2b00      	cmp	r3, #0
 800c958:	f000 814e 	beq.w	800cbf8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	f003 030f 	and.w	r3, r3, #15
 800c96c:	2101      	movs	r1, #1
 800c96e:	fa01 f303 	lsl.w	r3, r1, r3
 800c972:	69f9      	ldr	r1, [r7, #28]
 800c974:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c978:	4313      	orrs	r3, r2
 800c97a:	634b      	str	r3, [r1, #52]	@ 0x34
 800c97c:	e13c      	b.n	800cbf8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d110      	bne.n	800c9b0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	015a      	lsls	r2, r3, #5
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	4413      	add	r3, r2
 800c996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	69ba      	ldr	r2, [r7, #24]
 800c99e:	0151      	lsls	r1, r2, #5
 800c9a0:	69fa      	ldr	r2, [r7, #28]
 800c9a2:	440a      	add	r2, r1
 800c9a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c9a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c9ac:	6013      	str	r3, [r2, #0]
 800c9ae:	e00f      	b.n	800c9d0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	015a      	lsls	r2, r3, #5
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	69ba      	ldr	r2, [r7, #24]
 800c9c0:	0151      	lsls	r1, r2, #5
 800c9c2:	69fa      	ldr	r2, [r7, #28]
 800c9c4:	440a      	add	r2, r1
 800c9c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c9ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c9ce:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	68d9      	ldr	r1, [r3, #12]
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	781a      	ldrb	r2, [r3, #0]
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	b298      	uxth	r0, r3
 800c9de:	79fb      	ldrb	r3, [r7, #7]
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f000 f9b9 	bl	800cd5c <USB_WritePacket>
 800c9ea:	e105      	b.n	800cbf8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	015a      	lsls	r2, r3, #5
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	69ba      	ldr	r2, [r7, #24]
 800c9fc:	0151      	lsls	r1, r2, #5
 800c9fe:	69fa      	ldr	r2, [r7, #28]
 800ca00:	440a      	add	r2, r1
 800ca02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca06:	0cdb      	lsrs	r3, r3, #19
 800ca08:	04db      	lsls	r3, r3, #19
 800ca0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	015a      	lsls	r2, r3, #5
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	4413      	add	r3, r2
 800ca14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	69ba      	ldr	r2, [r7, #24]
 800ca1c:	0151      	lsls	r1, r2, #5
 800ca1e:	69fa      	ldr	r2, [r7, #28]
 800ca20:	440a      	add	r2, r1
 800ca22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca26:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ca2a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ca2e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d132      	bne.n	800ca9c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d003      	beq.n	800ca46 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	689a      	ldr	r2, [r3, #8]
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	689a      	ldr	r2, [r3, #8]
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	015a      	lsls	r2, r3, #5
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	4413      	add	r3, r2
 800ca56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca5a:	691a      	ldr	r2, [r3, #16]
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	6a1b      	ldr	r3, [r3, #32]
 800ca60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca64:	69b9      	ldr	r1, [r7, #24]
 800ca66:	0148      	lsls	r0, r1, #5
 800ca68:	69f9      	ldr	r1, [r7, #28]
 800ca6a:	4401      	add	r1, r0
 800ca6c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ca70:	4313      	orrs	r3, r2
 800ca72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	015a      	lsls	r2, r3, #5
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca80:	691b      	ldr	r3, [r3, #16]
 800ca82:	69ba      	ldr	r2, [r7, #24]
 800ca84:	0151      	lsls	r1, r2, #5
 800ca86:	69fa      	ldr	r2, [r7, #28]
 800ca88:	440a      	add	r2, r1
 800ca8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ca92:	6113      	str	r3, [r2, #16]
 800ca94:	e062      	b.n	800cb5c <USB_EPStartXfer+0x490>
 800ca96:	bf00      	nop
 800ca98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	691b      	ldr	r3, [r3, #16]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d123      	bne.n	800caec <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800caa4:	69bb      	ldr	r3, [r7, #24]
 800caa6:	015a      	lsls	r2, r3, #5
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	4413      	add	r3, r2
 800caac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cab0:	691a      	ldr	r2, [r3, #16]
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800caba:	69b9      	ldr	r1, [r7, #24]
 800cabc:	0148      	lsls	r0, r1, #5
 800cabe:	69f9      	ldr	r1, [r7, #28]
 800cac0:	4401      	add	r1, r0
 800cac2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cac6:	4313      	orrs	r3, r2
 800cac8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	015a      	lsls	r2, r3, #5
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	4413      	add	r3, r2
 800cad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cad6:	691b      	ldr	r3, [r3, #16]
 800cad8:	69ba      	ldr	r2, [r7, #24]
 800cada:	0151      	lsls	r1, r2, #5
 800cadc:	69fa      	ldr	r2, [r7, #28]
 800cade:	440a      	add	r2, r1
 800cae0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cae4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cae8:	6113      	str	r3, [r2, #16]
 800caea:	e037      	b.n	800cb5c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	691a      	ldr	r2, [r3, #16]
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	4413      	add	r3, r2
 800caf6:	1e5a      	subs	r2, r3, #1
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	689b      	ldr	r3, [r3, #8]
 800cafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb00:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	689b      	ldr	r3, [r3, #8]
 800cb06:	8afa      	ldrh	r2, [r7, #22]
 800cb08:	fb03 f202 	mul.w	r2, r3, r2
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	015a      	lsls	r2, r3, #5
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	4413      	add	r3, r2
 800cb18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb1c:	691a      	ldr	r2, [r3, #16]
 800cb1e:	8afb      	ldrh	r3, [r7, #22]
 800cb20:	04d9      	lsls	r1, r3, #19
 800cb22:	4b38      	ldr	r3, [pc, #224]	@ (800cc04 <USB_EPStartXfer+0x538>)
 800cb24:	400b      	ands	r3, r1
 800cb26:	69b9      	ldr	r1, [r7, #24]
 800cb28:	0148      	lsls	r0, r1, #5
 800cb2a:	69f9      	ldr	r1, [r7, #28]
 800cb2c:	4401      	add	r1, r0
 800cb2e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cb32:	4313      	orrs	r3, r2
 800cb34:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	015a      	lsls	r2, r3, #5
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb42:	691a      	ldr	r2, [r3, #16]
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	6a1b      	ldr	r3, [r3, #32]
 800cb48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb4c:	69b9      	ldr	r1, [r7, #24]
 800cb4e:	0148      	lsls	r0, r1, #5
 800cb50:	69f9      	ldr	r1, [r7, #28]
 800cb52:	4401      	add	r1, r0
 800cb54:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800cb5c:	79fb      	ldrb	r3, [r7, #7]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d10d      	bne.n	800cb7e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d009      	beq.n	800cb7e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	68d9      	ldr	r1, [r3, #12]
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	015a      	lsls	r2, r3, #5
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	4413      	add	r3, r2
 800cb76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb7a:	460a      	mov	r2, r1
 800cb7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	791b      	ldrb	r3, [r3, #4]
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d128      	bne.n	800cbd8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d110      	bne.n	800cbb8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cb96:	69bb      	ldr	r3, [r7, #24]
 800cb98:	015a      	lsls	r2, r3, #5
 800cb9a:	69fb      	ldr	r3, [r7, #28]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	69ba      	ldr	r2, [r7, #24]
 800cba6:	0151      	lsls	r1, r2, #5
 800cba8:	69fa      	ldr	r2, [r7, #28]
 800cbaa:	440a      	add	r2, r1
 800cbac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbb0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cbb4:	6013      	str	r3, [r2, #0]
 800cbb6:	e00f      	b.n	800cbd8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	015a      	lsls	r2, r3, #5
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	69ba      	ldr	r2, [r7, #24]
 800cbc8:	0151      	lsls	r1, r2, #5
 800cbca:	69fa      	ldr	r2, [r7, #28]
 800cbcc:	440a      	add	r2, r1
 800cbce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cbd6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	015a      	lsls	r2, r3, #5
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	4413      	add	r3, r2
 800cbe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	69ba      	ldr	r2, [r7, #24]
 800cbe8:	0151      	lsls	r1, r2, #5
 800cbea:	69fa      	ldr	r2, [r7, #28]
 800cbec:	440a      	add	r2, r1
 800cbee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbf2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cbf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3720      	adds	r7, #32
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	1ff80000 	.word	0x1ff80000

0800cc08 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b087      	sub	sp, #28
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cc12:	2300      	movs	r3, #0
 800cc14:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cc16:	2300      	movs	r3, #0
 800cc18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	785b      	ldrb	r3, [r3, #1]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d14a      	bne.n	800ccbc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	015a      	lsls	r2, r3, #5
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	4413      	add	r3, r2
 800cc30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cc3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc3e:	f040 8086 	bne.w	800cd4e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	015a      	lsls	r2, r3, #5
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	7812      	ldrb	r2, [r2, #0]
 800cc56:	0151      	lsls	r1, r2, #5
 800cc58:	693a      	ldr	r2, [r7, #16]
 800cc5a:	440a      	add	r2, r1
 800cc5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc60:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cc64:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	015a      	lsls	r2, r3, #5
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	4413      	add	r3, r2
 800cc70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	7812      	ldrb	r2, [r2, #0]
 800cc7a:	0151      	lsls	r1, r2, #5
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	440a      	add	r2, r1
 800cc80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cc88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d902      	bls.n	800cca0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	75fb      	strb	r3, [r7, #23]
          break;
 800cc9e:	e056      	b.n	800cd4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	015a      	lsls	r2, r3, #5
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	4413      	add	r3, r2
 800ccaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ccb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ccb8:	d0e7      	beq.n	800cc8a <USB_EPStopXfer+0x82>
 800ccba:	e048      	b.n	800cd4e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	015a      	lsls	r2, r3, #5
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ccd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ccd4:	d13b      	bne.n	800cd4e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	015a      	lsls	r2, r3, #5
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	4413      	add	r3, r2
 800cce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	7812      	ldrb	r2, [r2, #0]
 800ccea:	0151      	lsls	r1, r2, #5
 800ccec:	693a      	ldr	r2, [r7, #16]
 800ccee:	440a      	add	r2, r1
 800ccf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ccf4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ccf8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	015a      	lsls	r2, r3, #5
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	4413      	add	r3, r2
 800cd04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	683a      	ldr	r2, [r7, #0]
 800cd0c:	7812      	ldrb	r2, [r2, #0]
 800cd0e:	0151      	lsls	r1, r2, #5
 800cd10:	693a      	ldr	r2, [r7, #16]
 800cd12:	440a      	add	r2, r1
 800cd14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cd1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	3301      	adds	r3, #1
 800cd22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d902      	bls.n	800cd34 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	75fb      	strb	r3, [r7, #23]
          break;
 800cd32:	e00c      	b.n	800cd4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	015a      	lsls	r2, r3, #5
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cd48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd4c:	d0e7      	beq.n	800cd1e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cd4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	371c      	adds	r7, #28
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b089      	sub	sp, #36	@ 0x24
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	4611      	mov	r1, r2
 800cd68:	461a      	mov	r2, r3
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	71fb      	strb	r3, [r7, #7]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cd7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d123      	bne.n	800cdca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cd82:	88bb      	ldrh	r3, [r7, #4]
 800cd84:	3303      	adds	r3, #3
 800cd86:	089b      	lsrs	r3, r3, #2
 800cd88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	61bb      	str	r3, [r7, #24]
 800cd8e:	e018      	b.n	800cdc2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cd90:	79fb      	ldrb	r3, [r7, #7]
 800cd92:	031a      	lsls	r2, r3, #12
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	4413      	add	r3, r2
 800cd98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	3301      	adds	r3, #1
 800cda8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	3301      	adds	r3, #1
 800cdae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	61bb      	str	r3, [r7, #24]
 800cdc2:	69ba      	ldr	r2, [r7, #24]
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d3e2      	bcc.n	800cd90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3724      	adds	r7, #36	@ 0x24
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b08b      	sub	sp, #44	@ 0x2c
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	4613      	mov	r3, r2
 800cde4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cdee:	88fb      	ldrh	r3, [r7, #6]
 800cdf0:	089b      	lsrs	r3, r3, #2
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cdf6:	88fb      	ldrh	r3, [r7, #6]
 800cdf8:	f003 0303 	and.w	r3, r3, #3
 800cdfc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cdfe:	2300      	movs	r3, #0
 800ce00:	623b      	str	r3, [r7, #32]
 800ce02:	e014      	b.n	800ce2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0e:	601a      	str	r2, [r3, #0]
    pDest++;
 800ce10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce12:	3301      	adds	r3, #1
 800ce14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ce16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce18:	3301      	adds	r3, #1
 800ce1a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ce1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1e:	3301      	adds	r3, #1
 800ce20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ce22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce24:	3301      	adds	r3, #1
 800ce26:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ce28:	6a3b      	ldr	r3, [r7, #32]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	623b      	str	r3, [r7, #32]
 800ce2e:	6a3a      	ldr	r2, [r7, #32]
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d3e6      	bcc.n	800ce04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ce36:	8bfb      	ldrh	r3, [r7, #30]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d01e      	beq.n	800ce7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce46:	461a      	mov	r2, r3
 800ce48:	f107 0310 	add.w	r3, r7, #16
 800ce4c:	6812      	ldr	r2, [r2, #0]
 800ce4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ce50:	693a      	ldr	r2, [r7, #16]
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	00db      	lsls	r3, r3, #3
 800ce58:	fa22 f303 	lsr.w	r3, r2, r3
 800ce5c:	b2da      	uxtb	r2, r3
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce60:	701a      	strb	r2, [r3, #0]
      i++;
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	3301      	adds	r3, #1
 800ce66:	623b      	str	r3, [r7, #32]
      pDest++;
 800ce68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ce6e:	8bfb      	ldrh	r3, [r7, #30]
 800ce70:	3b01      	subs	r3, #1
 800ce72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ce74:	8bfb      	ldrh	r3, [r7, #30]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1ea      	bne.n	800ce50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	372c      	adds	r7, #44	@ 0x2c
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b085      	sub	sp, #20
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	785b      	ldrb	r3, [r3, #1]
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d12c      	bne.n	800cefe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	015a      	lsls	r2, r3, #5
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	4413      	add	r3, r2
 800ceac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	db12      	blt.n	800cedc <USB_EPSetStall+0x54>
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00f      	beq.n	800cedc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	015a      	lsls	r2, r3, #5
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	4413      	add	r3, r2
 800cec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68ba      	ldr	r2, [r7, #8]
 800cecc:	0151      	lsls	r1, r2, #5
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	440a      	add	r2, r1
 800ced2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ced6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ceda:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	015a      	lsls	r2, r3, #5
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	4413      	add	r3, r2
 800cee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	68ba      	ldr	r2, [r7, #8]
 800ceec:	0151      	lsls	r1, r2, #5
 800ceee:	68fa      	ldr	r2, [r7, #12]
 800cef0:	440a      	add	r2, r1
 800cef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cef6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cefa:	6013      	str	r3, [r2, #0]
 800cefc:	e02b      	b.n	800cf56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	015a      	lsls	r2, r3, #5
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	4413      	add	r3, r2
 800cf06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	db12      	blt.n	800cf36 <USB_EPSetStall+0xae>
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00f      	beq.n	800cf36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	015a      	lsls	r2, r3, #5
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	68ba      	ldr	r2, [r7, #8]
 800cf26:	0151      	lsls	r1, r2, #5
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	440a      	add	r2, r1
 800cf2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cf30:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cf34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	015a      	lsls	r2, r3, #5
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	0151      	lsls	r1, r2, #5
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	440a      	add	r2, r1
 800cf4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cf50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cf54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3714      	adds	r7, #20
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	785b      	ldrb	r3, [r3, #1]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d128      	bne.n	800cfd2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	015a      	lsls	r2, r3, #5
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	4413      	add	r3, r2
 800cf88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	68ba      	ldr	r2, [r7, #8]
 800cf90:	0151      	lsls	r1, r2, #5
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	440a      	add	r2, r1
 800cf96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cf9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	791b      	ldrb	r3, [r3, #4]
 800cfa4:	2b03      	cmp	r3, #3
 800cfa6:	d003      	beq.n	800cfb0 <USB_EPClearStall+0x4c>
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	791b      	ldrb	r3, [r3, #4]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d138      	bne.n	800d022 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	015a      	lsls	r2, r3, #5
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	0151      	lsls	r1, r2, #5
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	440a      	add	r2, r1
 800cfc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cfca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cfce:	6013      	str	r3, [r2, #0]
 800cfd0:	e027      	b.n	800d022 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	015a      	lsls	r2, r3, #5
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	4413      	add	r3, r2
 800cfda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	0151      	lsls	r1, r2, #5
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	440a      	add	r2, r1
 800cfe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cfec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cff0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	791b      	ldrb	r3, [r3, #4]
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d003      	beq.n	800d002 <USB_EPClearStall+0x9e>
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	791b      	ldrb	r3, [r3, #4]
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d10f      	bne.n	800d022 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	015a      	lsls	r2, r3, #5
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	4413      	add	r3, r2
 800d00a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68ba      	ldr	r2, [r7, #8]
 800d012:	0151      	lsls	r1, r2, #5
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	440a      	add	r2, r1
 800d018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d01c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d020:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d022:	2300      	movs	r3, #0
}
 800d024:	4618      	mov	r0, r3
 800d026:	3714      	adds	r7, #20
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	460b      	mov	r3, r1
 800d03a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d04e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d052:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	78fb      	ldrb	r3, [r7, #3]
 800d05e:	011b      	lsls	r3, r3, #4
 800d060:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800d064:	68f9      	ldr	r1, [r7, #12]
 800d066:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d06a:	4313      	orrs	r3, r2
 800d06c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3714      	adds	r7, #20
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b085      	sub	sp, #20
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d096:	f023 0303 	bic.w	r3, r3, #3
 800d09a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d0aa:	f023 0302 	bic.w	r3, r3, #2
 800d0ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d0b0:	2300      	movs	r3, #0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3714      	adds	r7, #20
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b085      	sub	sp, #20
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d0d8:	f023 0303 	bic.w	r3, r3, #3
 800d0dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	68fa      	ldr	r2, [r7, #12]
 800d0e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d0ec:	f043 0302 	orr.w	r3, r3, #2
 800d0f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d0f2:	2300      	movs	r3, #0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3714      	adds	r7, #20
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	695b      	ldr	r3, [r3, #20]
 800d10c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	699b      	ldr	r3, [r3, #24]
 800d112:	68fa      	ldr	r2, [r7, #12]
 800d114:	4013      	ands	r3, r2
 800d116:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d118:	68fb      	ldr	r3, [r7, #12]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d126:	b480      	push	{r7}
 800d128:	b085      	sub	sp, #20
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d138:	699b      	ldr	r3, [r3, #24]
 800d13a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d142:	69db      	ldr	r3, [r3, #28]
 800d144:	68ba      	ldr	r2, [r7, #8]
 800d146:	4013      	ands	r3, r2
 800d148:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	0c1b      	lsrs	r3, r3, #16
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3714      	adds	r7, #20
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr

0800d15a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d15a:	b480      	push	{r7}
 800d15c:	b085      	sub	sp, #20
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d16c:	699b      	ldr	r3, [r3, #24]
 800d16e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d176:	69db      	ldr	r3, [r3, #28]
 800d178:	68ba      	ldr	r2, [r7, #8]
 800d17a:	4013      	ands	r3, r2
 800d17c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	b29b      	uxth	r3, r3
}
 800d182:	4618      	mov	r0, r3
 800d184:	3714      	adds	r7, #20
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr

0800d18e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d18e:	b480      	push	{r7}
 800d190:	b085      	sub	sp, #20
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
 800d196:	460b      	mov	r3, r1
 800d198:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d19e:	78fb      	ldrb	r3, [r7, #3]
 800d1a0:	015a      	lsls	r2, r3, #5
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	4413      	add	r3, r2
 800d1a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1aa:	689b      	ldr	r3, [r3, #8]
 800d1ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1b4:	695b      	ldr	r3, [r3, #20]
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	4013      	ands	r3, r2
 800d1ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d1bc:	68bb      	ldr	r3, [r7, #8]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3714      	adds	r7, #20
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr

0800d1ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d1ca:	b480      	push	{r7}
 800d1cc:	b087      	sub	sp, #28
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	6078      	str	r0, [r7, #4]
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1e0:	691b      	ldr	r3, [r3, #16]
 800d1e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d1ee:	78fb      	ldrb	r3, [r7, #3]
 800d1f0:	f003 030f 	and.w	r3, r3, #15
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	fa22 f303 	lsr.w	r3, r2, r3
 800d1fa:	01db      	lsls	r3, r3, #7
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	693a      	ldr	r2, [r7, #16]
 800d200:	4313      	orrs	r3, r2
 800d202:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d204:	78fb      	ldrb	r3, [r7, #3]
 800d206:	015a      	lsls	r2, r3, #5
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	4413      	add	r3, r2
 800d20c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	693a      	ldr	r2, [r7, #16]
 800d214:	4013      	ands	r3, r2
 800d216:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d218:	68bb      	ldr	r3, [r7, #8]
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	371c      	adds	r7, #28
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr

0800d226 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d226:	b480      	push	{r7}
 800d228:	b083      	sub	sp, #12
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	695b      	ldr	r3, [r3, #20]
 800d232:	f003 0301 	and.w	r3, r3, #1
}
 800d236:	4618      	mov	r0, r3
 800d238:	370c      	adds	r7, #12
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr

0800d242 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800d242:	b480      	push	{r7}
 800d244:	b085      	sub	sp, #20
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	68fa      	ldr	r2, [r7, #12]
 800d258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d25c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d260:	f023 0307 	bic.w	r3, r3, #7
 800d264:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d278:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3714      	adds	r7, #20
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d288:	b480      	push	{r7}
 800d28a:	b087      	sub	sp, #28
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	460b      	mov	r3, r1
 800d292:	607a      	str	r2, [r7, #4]
 800d294:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	333c      	adds	r3, #60	@ 0x3c
 800d29e:	3304      	adds	r3, #4
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	4a26      	ldr	r2, [pc, #152]	@ (800d340 <USB_EP0_OutStart+0xb8>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d90a      	bls.n	800d2c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d2b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d2bc:	d101      	bne.n	800d2c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	e037      	b.n	800d332 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2d4:	691b      	ldr	r3, [r3, #16]
 800d2d6:	697a      	ldr	r2, [r7, #20]
 800d2d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d2dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d2e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	697a      	ldr	r2, [r7, #20]
 800d2ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d2f0:	f043 0318 	orr.w	r3, r3, #24
 800d2f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2fc:	691b      	ldr	r3, [r3, #16]
 800d2fe:	697a      	ldr	r2, [r7, #20]
 800d300:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d304:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800d308:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d30a:	7afb      	ldrb	r3, [r7, #11]
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d10f      	bne.n	800d330 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d316:	461a      	mov	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d32a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800d32e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d330:	2300      	movs	r3, #0
}
 800d332:	4618      	mov	r0, r3
 800d334:	371c      	adds	r7, #28
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	4f54300a 	.word	0x4f54300a

0800d344 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d34c:	2300      	movs	r3, #0
 800d34e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	3301      	adds	r3, #1
 800d354:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d35c:	d901      	bls.n	800d362 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d35e:	2303      	movs	r3, #3
 800d360:	e022      	b.n	800d3a8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	691b      	ldr	r3, [r3, #16]
 800d366:	2b00      	cmp	r3, #0
 800d368:	daf2      	bge.n	800d350 <USB_CoreReset+0xc>

  count = 10U;
 800d36a:	230a      	movs	r3, #10
 800d36c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800d36e:	e002      	b.n	800d376 <USB_CoreReset+0x32>
  {
    count--;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	3b01      	subs	r3, #1
 800d374:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1f9      	bne.n	800d370 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	691b      	ldr	r3, [r3, #16]
 800d380:	f043 0201 	orr.w	r2, r3, #1
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	3301      	adds	r3, #1
 800d38c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d394:	d901      	bls.n	800d39a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800d396:	2303      	movs	r3, #3
 800d398:	e006      	b.n	800d3a8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	f003 0301 	and.w	r3, r3, #1
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d0f0      	beq.n	800d388 <USB_CoreReset+0x44>

  return HAL_OK;
 800d3a6:	2300      	movs	r3, #0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3714      	adds	r7, #20
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d3b8:	4904      	ldr	r1, [pc, #16]	@ (800d3cc <MX_FATFS_Init+0x18>)
 800d3ba:	4805      	ldr	r0, [pc, #20]	@ (800d3d0 <MX_FATFS_Init+0x1c>)
 800d3bc:	f005 f98a 	bl	80126d4 <FATFS_LinkDriver>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	4b03      	ldr	r3, [pc, #12]	@ (800d3d4 <MX_FATFS_Init+0x20>)
 800d3c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d3c8:	bf00      	nop
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	20002ce0 	.word	0x20002ce0
 800d3d0:	200000dc 	.word	0x200000dc
 800d3d4:	20002cdc 	.word	0x20002cdc

0800d3d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d3dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800d3f2:	79fb      	ldrb	r3, [r7, #7]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7f6 fb91 	bl	8003b1c <SD_disk_initialize>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3708      	adds	r7, #8
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b082      	sub	sp, #8
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	4603      	mov	r3, r0
 800d40e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800d410:	79fb      	ldrb	r3, [r7, #7]
 800d412:	4618      	mov	r0, r3
 800d414:	f7f6 fc6c 	bl	8003cf0 <SD_disk_status>
 800d418:	4603      	mov	r3, r0
 800d41a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	607a      	str	r2, [r7, #4]
 800d42e:	603b      	str	r3, [r7, #0]
 800d430:	4603      	mov	r3, r0
 800d432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800d434:	7bf8      	ldrb	r0, [r7, #15]
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	68b9      	ldr	r1, [r7, #8]
 800d43c:	f7f6 fc6e 	bl	8003d1c <SD_disk_read>
 800d440:	4603      	mov	r3, r0
 800d442:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800d444:	4618      	mov	r0, r3
 800d446:	3710      	adds	r7, #16
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	60b9      	str	r1, [r7, #8]
 800d454:	607a      	str	r2, [r7, #4]
 800d456:	603b      	str	r3, [r7, #0]
 800d458:	4603      	mov	r3, r0
 800d45a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800d45c:	7bf8      	ldrb	r0, [r7, #15]
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	68b9      	ldr	r1, [r7, #8]
 800d464:	f7f6 fcc4 	bl	8003df0 <SD_disk_write>
 800d468:	4603      	mov	r3, r0
 800d46a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	4603      	mov	r3, r0
 800d47c:	603a      	str	r2, [r7, #0]
 800d47e:	71fb      	strb	r3, [r7, #7]
 800d480:	460b      	mov	r3, r1
 800d482:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800d484:	79fb      	ldrb	r3, [r7, #7]
 800d486:	79b9      	ldrb	r1, [r7, #6]
 800d488:	683a      	ldr	r2, [r7, #0]
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7f6 fd34 	bl	8003ef8 <SD_disk_ioctl>
 800d490:	4603      	mov	r3, r0
 800d492:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800d494:	4618      	mov	r0, r3
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d4a8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d4ac:	f005 feb4 	bl	8013218 <USBD_static_malloc>
 800d4b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d109      	bne.n	800d4cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	32b0      	adds	r2, #176	@ 0xb0
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	e0d4      	b.n	800d676 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d4cc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f007 f86c 	bl	80145b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	32b0      	adds	r2, #176	@ 0xb0
 800d4e2:	68f9      	ldr	r1, [r7, #12]
 800d4e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	32b0      	adds	r2, #176	@ 0xb0
 800d4f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	7c1b      	ldrb	r3, [r3, #16]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d138      	bne.n	800d576 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d504:	4b5e      	ldr	r3, [pc, #376]	@ (800d680 <USBD_CDC_Init+0x1e4>)
 800d506:	7819      	ldrb	r1, [r3, #0]
 800d508:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d50c:	2202      	movs	r2, #2
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f005 fd5f 	bl	8012fd2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d514:	4b5a      	ldr	r3, [pc, #360]	@ (800d680 <USBD_CDC_Init+0x1e4>)
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	f003 020f 	and.w	r2, r3, #15
 800d51c:	6879      	ldr	r1, [r7, #4]
 800d51e:	4613      	mov	r3, r2
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	4413      	add	r3, r2
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	440b      	add	r3, r1
 800d528:	3323      	adds	r3, #35	@ 0x23
 800d52a:	2201      	movs	r2, #1
 800d52c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d52e:	4b55      	ldr	r3, [pc, #340]	@ (800d684 <USBD_CDC_Init+0x1e8>)
 800d530:	7819      	ldrb	r1, [r3, #0]
 800d532:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d536:	2202      	movs	r2, #2
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f005 fd4a 	bl	8012fd2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d53e:	4b51      	ldr	r3, [pc, #324]	@ (800d684 <USBD_CDC_Init+0x1e8>)
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	f003 020f 	and.w	r2, r3, #15
 800d546:	6879      	ldr	r1, [r7, #4]
 800d548:	4613      	mov	r3, r2
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	4413      	add	r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	440b      	add	r3, r1
 800d552:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d556:	2201      	movs	r2, #1
 800d558:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d55a:	4b4b      	ldr	r3, [pc, #300]	@ (800d688 <USBD_CDC_Init+0x1ec>)
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	f003 020f 	and.w	r2, r3, #15
 800d562:	6879      	ldr	r1, [r7, #4]
 800d564:	4613      	mov	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4413      	add	r3, r2
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	440b      	add	r3, r1
 800d56e:	331c      	adds	r3, #28
 800d570:	2210      	movs	r2, #16
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	e035      	b.n	800d5e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d576:	4b42      	ldr	r3, [pc, #264]	@ (800d680 <USBD_CDC_Init+0x1e4>)
 800d578:	7819      	ldrb	r1, [r3, #0]
 800d57a:	2340      	movs	r3, #64	@ 0x40
 800d57c:	2202      	movs	r2, #2
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f005 fd27 	bl	8012fd2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d584:	4b3e      	ldr	r3, [pc, #248]	@ (800d680 <USBD_CDC_Init+0x1e4>)
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	f003 020f 	and.w	r2, r3, #15
 800d58c:	6879      	ldr	r1, [r7, #4]
 800d58e:	4613      	mov	r3, r2
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	4413      	add	r3, r2
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	440b      	add	r3, r1
 800d598:	3323      	adds	r3, #35	@ 0x23
 800d59a:	2201      	movs	r2, #1
 800d59c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d59e:	4b39      	ldr	r3, [pc, #228]	@ (800d684 <USBD_CDC_Init+0x1e8>)
 800d5a0:	7819      	ldrb	r1, [r3, #0]
 800d5a2:	2340      	movs	r3, #64	@ 0x40
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f005 fd13 	bl	8012fd2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d5ac:	4b35      	ldr	r3, [pc, #212]	@ (800d684 <USBD_CDC_Init+0x1e8>)
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	f003 020f 	and.w	r2, r3, #15
 800d5b4:	6879      	ldr	r1, [r7, #4]
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	4413      	add	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	440b      	add	r3, r1
 800d5c0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d5c8:	4b2f      	ldr	r3, [pc, #188]	@ (800d688 <USBD_CDC_Init+0x1ec>)
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	f003 020f 	and.w	r2, r3, #15
 800d5d0:	6879      	ldr	r1, [r7, #4]
 800d5d2:	4613      	mov	r3, r2
 800d5d4:	009b      	lsls	r3, r3, #2
 800d5d6:	4413      	add	r3, r2
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	440b      	add	r3, r1
 800d5dc:	331c      	adds	r3, #28
 800d5de:	2210      	movs	r2, #16
 800d5e0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d5e2:	4b29      	ldr	r3, [pc, #164]	@ (800d688 <USBD_CDC_Init+0x1ec>)
 800d5e4:	7819      	ldrb	r1, [r3, #0]
 800d5e6:	2308      	movs	r3, #8
 800d5e8:	2203      	movs	r2, #3
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f005 fcf1 	bl	8012fd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d5f0:	4b25      	ldr	r3, [pc, #148]	@ (800d688 <USBD_CDC_Init+0x1ec>)
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	f003 020f 	and.w	r2, r3, #15
 800d5f8:	6879      	ldr	r1, [r7, #4]
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4413      	add	r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	440b      	add	r3, r1
 800d604:	3323      	adds	r3, #35	@ 0x23
 800d606:	2201      	movs	r2, #1
 800d608:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2200      	movs	r2, #0
 800d60e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	33b0      	adds	r3, #176	@ 0xb0
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	4413      	add	r3, r2
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2200      	movs	r2, #0
 800d62a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2200      	movs	r2, #0
 800d632:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d101      	bne.n	800d644 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d640:	2302      	movs	r3, #2
 800d642:	e018      	b.n	800d676 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	7c1b      	ldrb	r3, [r3, #16]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d10a      	bne.n	800d662 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d64c:	4b0d      	ldr	r3, [pc, #52]	@ (800d684 <USBD_CDC_Init+0x1e8>)
 800d64e:	7819      	ldrb	r1, [r3, #0]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d656:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f005 fda8 	bl	80131b0 <USBD_LL_PrepareReceive>
 800d660:	e008      	b.n	800d674 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d662:	4b08      	ldr	r3, [pc, #32]	@ (800d684 <USBD_CDC_Init+0x1e8>)
 800d664:	7819      	ldrb	r1, [r3, #0]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d66c:	2340      	movs	r3, #64	@ 0x40
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f005 fd9e 	bl	80131b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d674:	2300      	movs	r3, #0
}
 800d676:	4618      	mov	r0, r3
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	20000177 	.word	0x20000177
 800d684:	20000178 	.word	0x20000178
 800d688:	20000179 	.word	0x20000179

0800d68c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	460b      	mov	r3, r1
 800d696:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d698:	4b3a      	ldr	r3, [pc, #232]	@ (800d784 <USBD_CDC_DeInit+0xf8>)
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	4619      	mov	r1, r3
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f005 fcbd 	bl	801301e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d6a4:	4b37      	ldr	r3, [pc, #220]	@ (800d784 <USBD_CDC_DeInit+0xf8>)
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	f003 020f 	and.w	r2, r3, #15
 800d6ac:	6879      	ldr	r1, [r7, #4]
 800d6ae:	4613      	mov	r3, r2
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	4413      	add	r3, r2
 800d6b4:	009b      	lsls	r3, r3, #2
 800d6b6:	440b      	add	r3, r1
 800d6b8:	3323      	adds	r3, #35	@ 0x23
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d6be:	4b32      	ldr	r3, [pc, #200]	@ (800d788 <USBD_CDC_DeInit+0xfc>)
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f005 fcaa 	bl	801301e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d6ca:	4b2f      	ldr	r3, [pc, #188]	@ (800d788 <USBD_CDC_DeInit+0xfc>)
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	f003 020f 	and.w	r2, r3, #15
 800d6d2:	6879      	ldr	r1, [r7, #4]
 800d6d4:	4613      	mov	r3, r2
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	4413      	add	r3, r2
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	440b      	add	r3, r1
 800d6de:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d6e6:	4b29      	ldr	r3, [pc, #164]	@ (800d78c <USBD_CDC_DeInit+0x100>)
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f005 fc96 	bl	801301e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d6f2:	4b26      	ldr	r3, [pc, #152]	@ (800d78c <USBD_CDC_DeInit+0x100>)
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	f003 020f 	and.w	r2, r3, #15
 800d6fa:	6879      	ldr	r1, [r7, #4]
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	4413      	add	r3, r2
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	440b      	add	r3, r1
 800d706:	3323      	adds	r3, #35	@ 0x23
 800d708:	2200      	movs	r2, #0
 800d70a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d70c:	4b1f      	ldr	r3, [pc, #124]	@ (800d78c <USBD_CDC_DeInit+0x100>)
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	f003 020f 	and.w	r2, r3, #15
 800d714:	6879      	ldr	r1, [r7, #4]
 800d716:	4613      	mov	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4413      	add	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	440b      	add	r3, r1
 800d720:	331c      	adds	r3, #28
 800d722:	2200      	movs	r2, #0
 800d724:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	32b0      	adds	r2, #176	@ 0xb0
 800d730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d01f      	beq.n	800d778 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	33b0      	adds	r3, #176	@ 0xb0
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	4413      	add	r3, r2
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	32b0      	adds	r2, #176	@ 0xb0
 800d756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d75a:	4618      	mov	r0, r3
 800d75c:	f005 fd6a 	bl	8013234 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	32b0      	adds	r2, #176	@ 0xb0
 800d76a:	2100      	movs	r1, #0
 800d76c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d778:	2300      	movs	r3, #0
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3708      	adds	r7, #8
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	20000177 	.word	0x20000177
 800d788:	20000178 	.word	0x20000178
 800d78c:	20000179 	.word	0x20000179

0800d790 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b086      	sub	sp, #24
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	32b0      	adds	r2, #176	@ 0xb0
 800d7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d101      	bne.n	800d7c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d7bc:	2303      	movs	r3, #3
 800d7be:	e0bf      	b.n	800d940 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d050      	beq.n	800d86e <USBD_CDC_Setup+0xde>
 800d7cc:	2b20      	cmp	r3, #32
 800d7ce:	f040 80af 	bne.w	800d930 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	88db      	ldrh	r3, [r3, #6]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d03a      	beq.n	800d850 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	b25b      	sxtb	r3, r3
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	da1b      	bge.n	800d81c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	33b0      	adds	r3, #176	@ 0xb0
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4413      	add	r3, r2
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	683a      	ldr	r2, [r7, #0]
 800d7f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d7fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d7fc:	683a      	ldr	r2, [r7, #0]
 800d7fe:	88d2      	ldrh	r2, [r2, #6]
 800d800:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	88db      	ldrh	r3, [r3, #6]
 800d806:	2b07      	cmp	r3, #7
 800d808:	bf28      	it	cs
 800d80a:	2307      	movcs	r3, #7
 800d80c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	89fa      	ldrh	r2, [r7, #14]
 800d812:	4619      	mov	r1, r3
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f001 fda7 	bl	800f368 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d81a:	e090      	b.n	800d93e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	785a      	ldrb	r2, [r3, #1]
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	88db      	ldrh	r3, [r3, #6]
 800d82a:	2b3f      	cmp	r3, #63	@ 0x3f
 800d82c:	d803      	bhi.n	800d836 <USBD_CDC_Setup+0xa6>
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	88db      	ldrh	r3, [r3, #6]
 800d832:	b2da      	uxtb	r2, r3
 800d834:	e000      	b.n	800d838 <USBD_CDC_Setup+0xa8>
 800d836:	2240      	movs	r2, #64	@ 0x40
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d83e:	6939      	ldr	r1, [r7, #16]
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d846:	461a      	mov	r2, r3
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f001 fdbc 	bl	800f3c6 <USBD_CtlPrepareRx>
      break;
 800d84e:	e076      	b.n	800d93e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d856:	687a      	ldr	r2, [r7, #4]
 800d858:	33b0      	adds	r3, #176	@ 0xb0
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	4413      	add	r3, r2
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	683a      	ldr	r2, [r7, #0]
 800d864:	7850      	ldrb	r0, [r2, #1]
 800d866:	2200      	movs	r2, #0
 800d868:	6839      	ldr	r1, [r7, #0]
 800d86a:	4798      	blx	r3
      break;
 800d86c:	e067      	b.n	800d93e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	785b      	ldrb	r3, [r3, #1]
 800d872:	2b0b      	cmp	r3, #11
 800d874:	d851      	bhi.n	800d91a <USBD_CDC_Setup+0x18a>
 800d876:	a201      	add	r2, pc, #4	@ (adr r2, 800d87c <USBD_CDC_Setup+0xec>)
 800d878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d87c:	0800d8ad 	.word	0x0800d8ad
 800d880:	0800d929 	.word	0x0800d929
 800d884:	0800d91b 	.word	0x0800d91b
 800d888:	0800d91b 	.word	0x0800d91b
 800d88c:	0800d91b 	.word	0x0800d91b
 800d890:	0800d91b 	.word	0x0800d91b
 800d894:	0800d91b 	.word	0x0800d91b
 800d898:	0800d91b 	.word	0x0800d91b
 800d89c:	0800d91b 	.word	0x0800d91b
 800d8a0:	0800d91b 	.word	0x0800d91b
 800d8a4:	0800d8d7 	.word	0x0800d8d7
 800d8a8:	0800d901 	.word	0x0800d901
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	2b03      	cmp	r3, #3
 800d8b6:	d107      	bne.n	800d8c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d8b8:	f107 030a 	add.w	r3, r7, #10
 800d8bc:	2202      	movs	r2, #2
 800d8be:	4619      	mov	r1, r3
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f001 fd51 	bl	800f368 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d8c6:	e032      	b.n	800d92e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d8c8:	6839      	ldr	r1, [r7, #0]
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f001 fccf 	bl	800f26e <USBD_CtlError>
            ret = USBD_FAIL;
 800d8d0:	2303      	movs	r3, #3
 800d8d2:	75fb      	strb	r3, [r7, #23]
          break;
 800d8d4:	e02b      	b.n	800d92e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	2b03      	cmp	r3, #3
 800d8e0:	d107      	bne.n	800d8f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d8e2:	f107 030d 	add.w	r3, r7, #13
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f001 fd3c 	bl	800f368 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d8f0:	e01d      	b.n	800d92e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d8f2:	6839      	ldr	r1, [r7, #0]
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f001 fcba 	bl	800f26e <USBD_CtlError>
            ret = USBD_FAIL;
 800d8fa:	2303      	movs	r3, #3
 800d8fc:	75fb      	strb	r3, [r7, #23]
          break;
 800d8fe:	e016      	b.n	800d92e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d906:	b2db      	uxtb	r3, r3
 800d908:	2b03      	cmp	r3, #3
 800d90a:	d00f      	beq.n	800d92c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d90c:	6839      	ldr	r1, [r7, #0]
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f001 fcad 	bl	800f26e <USBD_CtlError>
            ret = USBD_FAIL;
 800d914:	2303      	movs	r3, #3
 800d916:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d918:	e008      	b.n	800d92c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d91a:	6839      	ldr	r1, [r7, #0]
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f001 fca6 	bl	800f26e <USBD_CtlError>
          ret = USBD_FAIL;
 800d922:	2303      	movs	r3, #3
 800d924:	75fb      	strb	r3, [r7, #23]
          break;
 800d926:	e002      	b.n	800d92e <USBD_CDC_Setup+0x19e>
          break;
 800d928:	bf00      	nop
 800d92a:	e008      	b.n	800d93e <USBD_CDC_Setup+0x1ae>
          break;
 800d92c:	bf00      	nop
      }
      break;
 800d92e:	e006      	b.n	800d93e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d930:	6839      	ldr	r1, [r7, #0]
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f001 fc9b 	bl	800f26e <USBD_CtlError>
      ret = USBD_FAIL;
 800d938:	2303      	movs	r3, #3
 800d93a:	75fb      	strb	r3, [r7, #23]
      break;
 800d93c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d93e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3718      	adds	r7, #24
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	460b      	mov	r3, r1
 800d952:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d95a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	32b0      	adds	r2, #176	@ 0xb0
 800d966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d101      	bne.n	800d972 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d96e:	2303      	movs	r3, #3
 800d970:	e065      	b.n	800da3e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	32b0      	adds	r2, #176	@ 0xb0
 800d97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d980:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d982:	78fb      	ldrb	r3, [r7, #3]
 800d984:	f003 020f 	and.w	r2, r3, #15
 800d988:	6879      	ldr	r1, [r7, #4]
 800d98a:	4613      	mov	r3, r2
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	4413      	add	r3, r2
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	440b      	add	r3, r1
 800d994:	3314      	adds	r3, #20
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d02f      	beq.n	800d9fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d99c:	78fb      	ldrb	r3, [r7, #3]
 800d99e:	f003 020f 	and.w	r2, r3, #15
 800d9a2:	6879      	ldr	r1, [r7, #4]
 800d9a4:	4613      	mov	r3, r2
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	4413      	add	r3, r2
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	440b      	add	r3, r1
 800d9ae:	3314      	adds	r3, #20
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	78fb      	ldrb	r3, [r7, #3]
 800d9b4:	f003 010f 	and.w	r1, r3, #15
 800d9b8:	68f8      	ldr	r0, [r7, #12]
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	00db      	lsls	r3, r3, #3
 800d9be:	440b      	add	r3, r1
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	4403      	add	r3, r0
 800d9c4:	331c      	adds	r3, #28
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	fbb2 f1f3 	udiv	r1, r2, r3
 800d9cc:	fb01 f303 	mul.w	r3, r1, r3
 800d9d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d112      	bne.n	800d9fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d9d6:	78fb      	ldrb	r3, [r7, #3]
 800d9d8:	f003 020f 	and.w	r2, r3, #15
 800d9dc:	6879      	ldr	r1, [r7, #4]
 800d9de:	4613      	mov	r3, r2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	4413      	add	r3, r2
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	440b      	add	r3, r1
 800d9e8:	3314      	adds	r3, #20
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d9ee:	78f9      	ldrb	r1, [r7, #3]
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f005 fbba 	bl	801316e <USBD_LL_Transmit>
 800d9fa:	e01f      	b.n	800da3c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	33b0      	adds	r3, #176	@ 0xb0
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	4413      	add	r3, r2
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	691b      	ldr	r3, [r3, #16]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d010      	beq.n	800da3c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	33b0      	adds	r3, #176	@ 0xb0
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	4413      	add	r3, r2
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	691b      	ldr	r3, [r3, #16]
 800da2c:	68ba      	ldr	r2, [r7, #8]
 800da2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800da32:	68ba      	ldr	r2, [r7, #8]
 800da34:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800da38:	78fa      	ldrb	r2, [r7, #3]
 800da3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800da3c:	2300      	movs	r3, #0
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}

0800da46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da46:	b580      	push	{r7, lr}
 800da48:	b084      	sub	sp, #16
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
 800da4e:	460b      	mov	r3, r1
 800da50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	32b0      	adds	r2, #176	@ 0xb0
 800da5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	32b0      	adds	r2, #176	@ 0xb0
 800da6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d101      	bne.n	800da78 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800da74:	2303      	movs	r3, #3
 800da76:	e01a      	b.n	800daae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800da78:	78fb      	ldrb	r3, [r7, #3]
 800da7a:	4619      	mov	r1, r3
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f005 fbb8 	bl	80131f2 <USBD_LL_GetRxDataSize>
 800da82:	4602      	mov	r2, r0
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	33b0      	adds	r3, #176	@ 0xb0
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	4413      	add	r3, r2
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	68fa      	ldr	r2, [r7, #12]
 800da9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800daa8:	4611      	mov	r1, r2
 800daaa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3710      	adds	r7, #16
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b084      	sub	sp, #16
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	32b0      	adds	r2, #176	@ 0xb0
 800dac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dacc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d101      	bne.n	800dad8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dad4:	2303      	movs	r3, #3
 800dad6:	e024      	b.n	800db22 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	33b0      	adds	r3, #176	@ 0xb0
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	4413      	add	r3, r2
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d019      	beq.n	800db20 <USBD_CDC_EP0_RxReady+0x6a>
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800daf2:	2bff      	cmp	r3, #255	@ 0xff
 800daf4:	d014      	beq.n	800db20 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	33b0      	adds	r3, #176	@ 0xb0
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4413      	add	r3, r2
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800db0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800db10:	68fa      	ldr	r2, [r7, #12]
 800db12:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800db16:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	22ff      	movs	r2, #255	@ 0xff
 800db1c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800db20:	2300      	movs	r3, #0
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
	...

0800db2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b086      	sub	sp, #24
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800db34:	2182      	movs	r1, #130	@ 0x82
 800db36:	4818      	ldr	r0, [pc, #96]	@ (800db98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800db38:	f000 fd62 	bl	800e600 <USBD_GetEpDesc>
 800db3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800db3e:	2101      	movs	r1, #1
 800db40:	4815      	ldr	r0, [pc, #84]	@ (800db98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800db42:	f000 fd5d 	bl	800e600 <USBD_GetEpDesc>
 800db46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800db48:	2181      	movs	r1, #129	@ 0x81
 800db4a:	4813      	ldr	r0, [pc, #76]	@ (800db98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800db4c:	f000 fd58 	bl	800e600 <USBD_GetEpDesc>
 800db50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d002      	beq.n	800db5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	2210      	movs	r2, #16
 800db5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d006      	beq.n	800db72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	2200      	movs	r2, #0
 800db68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db6c:	711a      	strb	r2, [r3, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d006      	beq.n	800db86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	2200      	movs	r2, #0
 800db7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db80:	711a      	strb	r2, [r3, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2243      	movs	r2, #67	@ 0x43
 800db8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800db8c:	4b02      	ldr	r3, [pc, #8]	@ (800db98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	20000134 	.word	0x20000134

0800db9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b086      	sub	sp, #24
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dba4:	2182      	movs	r1, #130	@ 0x82
 800dba6:	4818      	ldr	r0, [pc, #96]	@ (800dc08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dba8:	f000 fd2a 	bl	800e600 <USBD_GetEpDesc>
 800dbac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dbae:	2101      	movs	r1, #1
 800dbb0:	4815      	ldr	r0, [pc, #84]	@ (800dc08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dbb2:	f000 fd25 	bl	800e600 <USBD_GetEpDesc>
 800dbb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dbb8:	2181      	movs	r1, #129	@ 0x81
 800dbba:	4813      	ldr	r0, [pc, #76]	@ (800dc08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dbbc:	f000 fd20 	bl	800e600 <USBD_GetEpDesc>
 800dbc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d002      	beq.n	800dbce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	2210      	movs	r2, #16
 800dbcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d006      	beq.n	800dbe2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	711a      	strb	r2, [r3, #4]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f042 0202 	orr.w	r2, r2, #2
 800dbe0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d006      	beq.n	800dbf6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2200      	movs	r2, #0
 800dbec:	711a      	strb	r2, [r3, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	f042 0202 	orr.w	r2, r2, #2
 800dbf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2243      	movs	r2, #67	@ 0x43
 800dbfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dbfc:	4b02      	ldr	r3, [pc, #8]	@ (800dc08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3718      	adds	r7, #24
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	20000134 	.word	0x20000134

0800dc0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b086      	sub	sp, #24
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dc14:	2182      	movs	r1, #130	@ 0x82
 800dc16:	4818      	ldr	r0, [pc, #96]	@ (800dc78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dc18:	f000 fcf2 	bl	800e600 <USBD_GetEpDesc>
 800dc1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dc1e:	2101      	movs	r1, #1
 800dc20:	4815      	ldr	r0, [pc, #84]	@ (800dc78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dc22:	f000 fced 	bl	800e600 <USBD_GetEpDesc>
 800dc26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dc28:	2181      	movs	r1, #129	@ 0x81
 800dc2a:	4813      	ldr	r0, [pc, #76]	@ (800dc78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dc2c:	f000 fce8 	bl	800e600 <USBD_GetEpDesc>
 800dc30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d002      	beq.n	800dc3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	2210      	movs	r2, #16
 800dc3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d006      	beq.n	800dc52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc4c:	711a      	strb	r2, [r3, #4]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d006      	beq.n	800dc66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc60:	711a      	strb	r2, [r3, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2243      	movs	r2, #67	@ 0x43
 800dc6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dc6c:	4b02      	ldr	r3, [pc, #8]	@ (800dc78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3718      	adds	r7, #24
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	20000134 	.word	0x20000134

0800dc7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	220a      	movs	r2, #10
 800dc88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dc8a:	4b03      	ldr	r3, [pc, #12]	@ (800dc98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	370c      	adds	r7, #12
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr
 800dc98:	200000f0 	.word	0x200000f0

0800dc9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d101      	bne.n	800dcb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dcac:	2303      	movs	r3, #3
 800dcae:	e009      	b.n	800dcc4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	33b0      	adds	r3, #176	@ 0xb0
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	4413      	add	r3, r2
 800dcbe:	683a      	ldr	r2, [r7, #0]
 800dcc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b087      	sub	sp, #28
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	32b0      	adds	r2, #176	@ 0xb0
 800dce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d101      	bne.n	800dcf6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dcf2:	2303      	movs	r3, #3
 800dcf4:	e008      	b.n	800dd08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	68ba      	ldr	r2, [r7, #8]
 800dcfa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	371c      	adds	r7, #28
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	32b0      	adds	r2, #176	@ 0xb0
 800dd28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d101      	bne.n	800dd38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800dd34:	2303      	movs	r3, #3
 800dd36:	e004      	b.n	800dd42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	683a      	ldr	r2, [r7, #0]
 800dd3c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3714      	adds	r7, #20
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr
	...

0800dd50 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	32b0      	adds	r2, #176	@ 0xb0
 800dd62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd66:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d101      	bne.n	800dd76 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dd72:	2303      	movs	r3, #3
 800dd74:	e025      	b.n	800ddc2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d11f      	bne.n	800ddc0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	2201      	movs	r2, #1
 800dd84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800dd88:	4b10      	ldr	r3, [pc, #64]	@ (800ddcc <USBD_CDC_TransmitPacket+0x7c>)
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	f003 020f 	and.w	r2, r3, #15
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	4613      	mov	r3, r2
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	4413      	add	r3, r2
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	4403      	add	r3, r0
 800dda2:	3314      	adds	r3, #20
 800dda4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800dda6:	4b09      	ldr	r3, [pc, #36]	@ (800ddcc <USBD_CDC_TransmitPacket+0x7c>)
 800dda8:	7819      	ldrb	r1, [r3, #0]
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f005 f9d9 	bl	801316e <USBD_LL_Transmit>

    ret = USBD_OK;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ddc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	20000177 	.word	0x20000177

0800ddd0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	32b0      	adds	r2, #176	@ 0xb0
 800dde2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dde6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	32b0      	adds	r2, #176	@ 0xb0
 800ddf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d101      	bne.n	800ddfe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ddfa:	2303      	movs	r3, #3
 800ddfc:	e018      	b.n	800de30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	7c1b      	ldrb	r3, [r3, #16]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10a      	bne.n	800de1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800de06:	4b0c      	ldr	r3, [pc, #48]	@ (800de38 <USBD_CDC_ReceivePacket+0x68>)
 800de08:	7819      	ldrb	r1, [r3, #0]
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800de10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f005 f9cb 	bl	80131b0 <USBD_LL_PrepareReceive>
 800de1a:	e008      	b.n	800de2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800de1c:	4b06      	ldr	r3, [pc, #24]	@ (800de38 <USBD_CDC_ReceivePacket+0x68>)
 800de1e:	7819      	ldrb	r1, [r3, #0]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800de26:	2340      	movs	r3, #64	@ 0x40
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f005 f9c1 	bl	80131b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800de2e:	2300      	movs	r3, #0
}
 800de30:	4618      	mov	r0, r3
 800de32:	3710      	adds	r7, #16
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	20000178 	.word	0x20000178

0800de3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	4613      	mov	r3, r2
 800de48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d101      	bne.n	800de54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800de50:	2303      	movs	r3, #3
 800de52:	e01f      	b.n	800de94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2200      	movs	r2, #0
 800de58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2200      	movs	r2, #0
 800de60:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2200      	movs	r2, #0
 800de68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d003      	beq.n	800de7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	68ba      	ldr	r2, [r7, #8]
 800de76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2201      	movs	r2, #1
 800de7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	79fa      	ldrb	r2, [r7, #7]
 800de86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f005 f83b 	bl	8012f04 <USBD_LL_Init>
 800de8e:	4603      	mov	r3, r0
 800de90:	75fb      	strb	r3, [r7, #23]

  return ret;
 800de92:	7dfb      	ldrb	r3, [r7, #23]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dea6:	2300      	movs	r3, #0
 800dea8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d101      	bne.n	800deb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800deb0:	2303      	movs	r3, #3
 800deb2:	e025      	b.n	800df00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	683a      	ldr	r2, [r7, #0]
 800deb8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	32ae      	adds	r2, #174	@ 0xae
 800dec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00f      	beq.n	800def0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	32ae      	adds	r2, #174	@ 0xae
 800deda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dee0:	f107 020e 	add.w	r2, r7, #14
 800dee4:	4610      	mov	r0, r2
 800dee6:	4798      	blx	r3
 800dee8:	4602      	mov	r2, r0
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800def6:	1c5a      	adds	r2, r3, #1
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	3710      	adds	r7, #16
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f005 f843 	bl	8012f9c <USBD_LL_Start>
 800df16:	4603      	mov	r3, r0
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800df28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	370c      	adds	r7, #12
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr

0800df36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df36:	b580      	push	{r7, lr}
 800df38:	b084      	sub	sp, #16
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	6078      	str	r0, [r7, #4]
 800df3e:	460b      	mov	r3, r1
 800df40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800df42:	2300      	movs	r3, #0
 800df44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d009      	beq.n	800df64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	78fa      	ldrb	r2, [r7, #3]
 800df5a:	4611      	mov	r1, r2
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	4798      	blx	r3
 800df60:	4603      	mov	r3, r0
 800df62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800df64:	7bfb      	ldrb	r3, [r7, #15]
}
 800df66:	4618      	mov	r0, r3
 800df68:	3710      	adds	r7, #16
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df6e:	b580      	push	{r7, lr}
 800df70:	b084      	sub	sp, #16
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
 800df76:	460b      	mov	r3, r1
 800df78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800df7a:	2300      	movs	r3, #0
 800df7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	78fa      	ldrb	r2, [r7, #3]
 800df88:	4611      	mov	r1, r2
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	4798      	blx	r3
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d001      	beq.n	800df98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800df94:	2303      	movs	r3, #3
 800df96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800df98:	7bfb      	ldrb	r3, [r7, #15]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3710      	adds	r7, #16
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b084      	sub	sp, #16
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
 800dfaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dfb2:	6839      	ldr	r1, [r7, #0]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f001 f920 	bl	800f1fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800dfc8:	461a      	mov	r2, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dfd6:	f003 031f 	and.w	r3, r3, #31
 800dfda:	2b02      	cmp	r3, #2
 800dfdc:	d01a      	beq.n	800e014 <USBD_LL_SetupStage+0x72>
 800dfde:	2b02      	cmp	r3, #2
 800dfe0:	d822      	bhi.n	800e028 <USBD_LL_SetupStage+0x86>
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d002      	beq.n	800dfec <USBD_LL_SetupStage+0x4a>
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d00a      	beq.n	800e000 <USBD_LL_SetupStage+0x5e>
 800dfea:	e01d      	b.n	800e028 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dff2:	4619      	mov	r1, r3
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 fb75 	bl	800e6e4 <USBD_StdDevReq>
 800dffa:	4603      	mov	r3, r0
 800dffc:	73fb      	strb	r3, [r7, #15]
      break;
 800dffe:	e020      	b.n	800e042 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e006:	4619      	mov	r1, r3
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 fbdd 	bl	800e7c8 <USBD_StdItfReq>
 800e00e:	4603      	mov	r3, r0
 800e010:	73fb      	strb	r3, [r7, #15]
      break;
 800e012:	e016      	b.n	800e042 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e01a:	4619      	mov	r1, r3
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f000 fc3f 	bl	800e8a0 <USBD_StdEPReq>
 800e022:	4603      	mov	r3, r0
 800e024:	73fb      	strb	r3, [r7, #15]
      break;
 800e026:	e00c      	b.n	800e042 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e02e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e032:	b2db      	uxtb	r3, r3
 800e034:	4619      	mov	r1, r3
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f005 f810 	bl	801305c <USBD_LL_StallEP>
 800e03c:	4603      	mov	r3, r0
 800e03e:	73fb      	strb	r3, [r7, #15]
      break;
 800e040:	bf00      	nop
  }

  return ret;
 800e042:	7bfb      	ldrb	r3, [r7, #15]
}
 800e044:	4618      	mov	r0, r3
 800e046:	3710      	adds	r7, #16
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b086      	sub	sp, #24
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	460b      	mov	r3, r1
 800e056:	607a      	str	r2, [r7, #4]
 800e058:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e05a:	2300      	movs	r3, #0
 800e05c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800e05e:	7afb      	ldrb	r3, [r7, #11]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d177      	bne.n	800e154 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e06a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e072:	2b03      	cmp	r3, #3
 800e074:	f040 80a1 	bne.w	800e1ba <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	693a      	ldr	r2, [r7, #16]
 800e07e:	8992      	ldrh	r2, [r2, #12]
 800e080:	4293      	cmp	r3, r2
 800e082:	d91c      	bls.n	800e0be <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	693a      	ldr	r2, [r7, #16]
 800e08a:	8992      	ldrh	r2, [r2, #12]
 800e08c:	1a9a      	subs	r2, r3, r2
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	691b      	ldr	r3, [r3, #16]
 800e096:	693a      	ldr	r2, [r7, #16]
 800e098:	8992      	ldrh	r2, [r2, #12]
 800e09a:	441a      	add	r2, r3
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	6919      	ldr	r1, [r3, #16]
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	899b      	ldrh	r3, [r3, #12]
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	bf38      	it	cc
 800e0b2:	4613      	movcc	r3, r2
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f001 f9a6 	bl	800f408 <USBD_CtlContinueRx>
 800e0bc:	e07d      	b.n	800e1ba <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e0c4:	f003 031f 	and.w	r3, r3, #31
 800e0c8:	2b02      	cmp	r3, #2
 800e0ca:	d014      	beq.n	800e0f6 <USBD_LL_DataOutStage+0xaa>
 800e0cc:	2b02      	cmp	r3, #2
 800e0ce:	d81d      	bhi.n	800e10c <USBD_LL_DataOutStage+0xc0>
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d002      	beq.n	800e0da <USBD_LL_DataOutStage+0x8e>
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d003      	beq.n	800e0e0 <USBD_LL_DataOutStage+0x94>
 800e0d8:	e018      	b.n	800e10c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	75bb      	strb	r3, [r7, #22]
            break;
 800e0de:	e018      	b.n	800e112 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f000 fa6e 	bl	800e5cc <USBD_CoreFindIF>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	75bb      	strb	r3, [r7, #22]
            break;
 800e0f4:	e00d      	b.n	800e112 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	4619      	mov	r1, r3
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f000 fa70 	bl	800e5e6 <USBD_CoreFindEP>
 800e106:	4603      	mov	r3, r0
 800e108:	75bb      	strb	r3, [r7, #22]
            break;
 800e10a:	e002      	b.n	800e112 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e10c:	2300      	movs	r3, #0
 800e10e:	75bb      	strb	r3, [r7, #22]
            break;
 800e110:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e112:	7dbb      	ldrb	r3, [r7, #22]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d119      	bne.n	800e14c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	2b03      	cmp	r3, #3
 800e122:	d113      	bne.n	800e14c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e124:	7dba      	ldrb	r2, [r7, #22]
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	32ae      	adds	r2, #174	@ 0xae
 800e12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e12e:	691b      	ldr	r3, [r3, #16]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00b      	beq.n	800e14c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800e134:	7dba      	ldrb	r2, [r7, #22]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e13c:	7dba      	ldrb	r2, [r7, #22]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	32ae      	adds	r2, #174	@ 0xae
 800e142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e146:	691b      	ldr	r3, [r3, #16]
 800e148:	68f8      	ldr	r0, [r7, #12]
 800e14a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e14c:	68f8      	ldr	r0, [r7, #12]
 800e14e:	f001 f96c 	bl	800f42a <USBD_CtlSendStatus>
 800e152:	e032      	b.n	800e1ba <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e154:	7afb      	ldrb	r3, [r7, #11]
 800e156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	4619      	mov	r1, r3
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f000 fa41 	bl	800e5e6 <USBD_CoreFindEP>
 800e164:	4603      	mov	r3, r0
 800e166:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e168:	7dbb      	ldrb	r3, [r7, #22]
 800e16a:	2bff      	cmp	r3, #255	@ 0xff
 800e16c:	d025      	beq.n	800e1ba <USBD_LL_DataOutStage+0x16e>
 800e16e:	7dbb      	ldrb	r3, [r7, #22]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d122      	bne.n	800e1ba <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	2b03      	cmp	r3, #3
 800e17e:	d117      	bne.n	800e1b0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e180:	7dba      	ldrb	r2, [r7, #22]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	32ae      	adds	r2, #174	@ 0xae
 800e186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e18a:	699b      	ldr	r3, [r3, #24]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d00f      	beq.n	800e1b0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800e190:	7dba      	ldrb	r2, [r7, #22]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e198:	7dba      	ldrb	r2, [r7, #22]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	32ae      	adds	r2, #174	@ 0xae
 800e19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1a2:	699b      	ldr	r3, [r3, #24]
 800e1a4:	7afa      	ldrb	r2, [r7, #11]
 800e1a6:	4611      	mov	r1, r2
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	4798      	blx	r3
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e1b0:	7dfb      	ldrb	r3, [r7, #23]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d001      	beq.n	800e1ba <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800e1b6:	7dfb      	ldrb	r3, [r7, #23]
 800e1b8:	e000      	b.n	800e1bc <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3718      	adds	r7, #24
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b086      	sub	sp, #24
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	60f8      	str	r0, [r7, #12]
 800e1cc:	460b      	mov	r3, r1
 800e1ce:	607a      	str	r2, [r7, #4]
 800e1d0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800e1d2:	7afb      	ldrb	r3, [r7, #11]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d178      	bne.n	800e2ca <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	3314      	adds	r3, #20
 800e1dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e1e4:	2b02      	cmp	r3, #2
 800e1e6:	d163      	bne.n	800e2b0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	693a      	ldr	r2, [r7, #16]
 800e1ee:	8992      	ldrh	r2, [r2, #12]
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d91c      	bls.n	800e22e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	8992      	ldrh	r2, [r2, #12]
 800e1fc:	1a9a      	subs	r2, r3, r2
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	693a      	ldr	r2, [r7, #16]
 800e208:	8992      	ldrh	r2, [r2, #12]
 800e20a:	441a      	add	r2, r3
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	6919      	ldr	r1, [r3, #16]
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	461a      	mov	r2, r3
 800e21a:	68f8      	ldr	r0, [r7, #12]
 800e21c:	f001 f8c2 	bl	800f3a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e220:	2300      	movs	r3, #0
 800e222:	2200      	movs	r2, #0
 800e224:	2100      	movs	r1, #0
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f004 ffc2 	bl	80131b0 <USBD_LL_PrepareReceive>
 800e22c:	e040      	b.n	800e2b0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	899b      	ldrh	r3, [r3, #12]
 800e232:	461a      	mov	r2, r3
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d11c      	bne.n	800e276 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	693a      	ldr	r2, [r7, #16]
 800e242:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e244:	4293      	cmp	r3, r2
 800e246:	d316      	bcc.n	800e276 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e252:	429a      	cmp	r2, r3
 800e254:	d20f      	bcs.n	800e276 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e256:	2200      	movs	r2, #0
 800e258:	2100      	movs	r1, #0
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	f001 f8a2 	bl	800f3a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2200      	movs	r2, #0
 800e264:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e268:	2300      	movs	r3, #0
 800e26a:	2200      	movs	r2, #0
 800e26c:	2100      	movs	r1, #0
 800e26e:	68f8      	ldr	r0, [r7, #12]
 800e270:	f004 ff9e 	bl	80131b0 <USBD_LL_PrepareReceive>
 800e274:	e01c      	b.n	800e2b0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	2b03      	cmp	r3, #3
 800e280:	d10f      	bne.n	800e2a2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d009      	beq.n	800e2a2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2200      	movs	r2, #0
 800e292:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	68f8      	ldr	r0, [r7, #12]
 800e2a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2a2:	2180      	movs	r1, #128	@ 0x80
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f004 fed9 	bl	801305c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e2aa:	68f8      	ldr	r0, [r7, #12]
 800e2ac:	f001 f8d0 	bl	800f450 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d03a      	beq.n	800e330 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f7ff fe30 	bl	800df20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e2c8:	e032      	b.n	800e330 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e2ca:	7afb      	ldrb	r3, [r7, #11]
 800e2cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	f000 f986 	bl	800e5e6 <USBD_CoreFindEP>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e2de:	7dfb      	ldrb	r3, [r7, #23]
 800e2e0:	2bff      	cmp	r3, #255	@ 0xff
 800e2e2:	d025      	beq.n	800e330 <USBD_LL_DataInStage+0x16c>
 800e2e4:	7dfb      	ldrb	r3, [r7, #23]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d122      	bne.n	800e330 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	2b03      	cmp	r3, #3
 800e2f4:	d11c      	bne.n	800e330 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e2f6:	7dfa      	ldrb	r2, [r7, #23]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	32ae      	adds	r2, #174	@ 0xae
 800e2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e300:	695b      	ldr	r3, [r3, #20]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d014      	beq.n	800e330 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800e306:	7dfa      	ldrb	r2, [r7, #23]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e30e:	7dfa      	ldrb	r2, [r7, #23]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	32ae      	adds	r2, #174	@ 0xae
 800e314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e318:	695b      	ldr	r3, [r3, #20]
 800e31a:	7afa      	ldrb	r2, [r7, #11]
 800e31c:	4611      	mov	r1, r2
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	4798      	blx	r3
 800e322:	4603      	mov	r3, r0
 800e324:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e326:	7dbb      	ldrb	r3, [r7, #22]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d001      	beq.n	800e330 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800e32c:	7dbb      	ldrb	r3, [r7, #22]
 800e32e:	e000      	b.n	800e332 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	3718      	adds	r7, #24
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e33a:	b580      	push	{r7, lr}
 800e33c:	b084      	sub	sp, #16
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e342:	2300      	movs	r3, #0
 800e344:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2201      	movs	r2, #1
 800e34a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2200      	movs	r2, #0
 800e352:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2200      	movs	r2, #0
 800e35a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2200      	movs	r2, #0
 800e360:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e372:	2b00      	cmp	r3, #0
 800e374:	d014      	beq.n	800e3a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00e      	beq.n	800e3a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	687a      	ldr	r2, [r7, #4]
 800e38c:	6852      	ldr	r2, [r2, #4]
 800e38e:	b2d2      	uxtb	r2, r2
 800e390:	4611      	mov	r1, r2
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	4798      	blx	r3
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d001      	beq.n	800e3a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e39c:	2303      	movs	r3, #3
 800e39e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e3a0:	2340      	movs	r3, #64	@ 0x40
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f004 fe13 	bl	8012fd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2240      	movs	r2, #64	@ 0x40
 800e3b8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e3bc:	2340      	movs	r3, #64	@ 0x40
 800e3be:	2200      	movs	r2, #0
 800e3c0:	2180      	movs	r1, #128	@ 0x80
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f004 fe05 	bl	8012fd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2240      	movs	r2, #64	@ 0x40
 800e3d4:	841a      	strh	r2, [r3, #32]

  return ret;
 800e3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b083      	sub	sp, #12
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	78fa      	ldrb	r2, [r7, #3]
 800e3f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e3f2:	2300      	movs	r3, #0
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	370c      	adds	r7, #12
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr

0800e400 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e400:	b480      	push	{r7}
 800e402:	b083      	sub	sp, #12
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	2b04      	cmp	r3, #4
 800e412:	d006      	beq.n	800e422 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e41a:	b2da      	uxtb	r2, r3
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2204      	movs	r2, #4
 800e426:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e42a:	2300      	movs	r3, #0
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e446:	b2db      	uxtb	r3, r3
 800e448:	2b04      	cmp	r3, #4
 800e44a:	d106      	bne.n	800e45a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e452:	b2da      	uxtb	r2, r3
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b082      	sub	sp, #8
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e476:	b2db      	uxtb	r3, r3
 800e478:	2b03      	cmp	r3, #3
 800e47a:	d110      	bne.n	800e49e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e482:	2b00      	cmp	r3, #0
 800e484:	d00b      	beq.n	800e49e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e48c:	69db      	ldr	r3, [r3, #28]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d005      	beq.n	800e49e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e498:	69db      	ldr	r3, [r3, #28]
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e49e:	2300      	movs	r3, #0
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3708      	adds	r7, #8
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	32ae      	adds	r2, #174	@ 0xae
 800e4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d101      	bne.n	800e4ca <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e4c6:	2303      	movs	r3, #3
 800e4c8:	e01c      	b.n	800e504 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d115      	bne.n	800e502 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	32ae      	adds	r2, #174	@ 0xae
 800e4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4e4:	6a1b      	ldr	r3, [r3, #32]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d00b      	beq.n	800e502 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	32ae      	adds	r2, #174	@ 0xae
 800e4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4f8:	6a1b      	ldr	r3, [r3, #32]
 800e4fa:	78fa      	ldrb	r2, [r7, #3]
 800e4fc:	4611      	mov	r1, r2
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	3708      	adds	r7, #8
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	460b      	mov	r3, r1
 800e516:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	32ae      	adds	r2, #174	@ 0xae
 800e522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d101      	bne.n	800e52e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e52a:	2303      	movs	r3, #3
 800e52c:	e01c      	b.n	800e568 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e534:	b2db      	uxtb	r3, r3
 800e536:	2b03      	cmp	r3, #3
 800e538:	d115      	bne.n	800e566 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	32ae      	adds	r2, #174	@ 0xae
 800e544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00b      	beq.n	800e566 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	32ae      	adds	r2, #174	@ 0xae
 800e558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e55e:	78fa      	ldrb	r2, [r7, #3]
 800e560:	4611      	mov	r1, r2
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e566:	2300      	movs	r3, #0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e578:	2300      	movs	r3, #0
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	370c      	adds	r7, #12
 800e57e:	46bd      	mov	sp, r7
 800e580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e584:	4770      	bx	lr

0800e586 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b084      	sub	sp, #16
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e58e:	2300      	movs	r3, #0
 800e590:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2201      	movs	r2, #1
 800e596:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d00e      	beq.n	800e5c2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	6852      	ldr	r2, [r2, #4]
 800e5b0:	b2d2      	uxtb	r2, r2
 800e5b2:	4611      	mov	r1, r2
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	4798      	blx	r3
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d001      	beq.n	800e5c2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e5be:	2303      	movs	r3, #3
 800e5c0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3710      	adds	r7, #16
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e5d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	370c      	adds	r7, #12
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr

0800e5e6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e5e6:	b480      	push	{r7}
 800e5e8:	b083      	sub	sp, #12
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
 800e5ee:	460b      	mov	r3, r1
 800e5f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e5f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	370c      	adds	r7, #12
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b086      	sub	sp, #24
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	460b      	mov	r3, r1
 800e60a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e614:	2300      	movs	r3, #0
 800e616:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	885b      	ldrh	r3, [r3, #2]
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	7812      	ldrb	r2, [r2, #0]
 800e622:	4293      	cmp	r3, r2
 800e624:	d91f      	bls.n	800e666 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e62c:	e013      	b.n	800e656 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e62e:	f107 030a 	add.w	r3, r7, #10
 800e632:	4619      	mov	r1, r3
 800e634:	6978      	ldr	r0, [r7, #20]
 800e636:	f000 f81b 	bl	800e670 <USBD_GetNextDesc>
 800e63a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	785b      	ldrb	r3, [r3, #1]
 800e640:	2b05      	cmp	r3, #5
 800e642:	d108      	bne.n	800e656 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	789b      	ldrb	r3, [r3, #2]
 800e64c:	78fa      	ldrb	r2, [r7, #3]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d008      	beq.n	800e664 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e652:	2300      	movs	r3, #0
 800e654:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	885b      	ldrh	r3, [r3, #2]
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	897b      	ldrh	r3, [r7, #10]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d8e5      	bhi.n	800e62e <USBD_GetEpDesc+0x2e>
 800e662:	e000      	b.n	800e666 <USBD_GetEpDesc+0x66>
          break;
 800e664:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e666:	693b      	ldr	r3, [r7, #16]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3718      	adds	r7, #24
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e670:	b480      	push	{r7}
 800e672:	b085      	sub	sp, #20
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	881b      	ldrh	r3, [r3, #0]
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	7812      	ldrb	r2, [r2, #0]
 800e686:	4413      	add	r3, r2
 800e688:	b29a      	uxth	r2, r3
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	461a      	mov	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	4413      	add	r3, r2
 800e698:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e69a:	68fb      	ldr	r3, [r7, #12]
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3714      	adds	r7, #20
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b087      	sub	sp, #28
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e6c6:	8a3b      	ldrh	r3, [r7, #16]
 800e6c8:	021b      	lsls	r3, r3, #8
 800e6ca:	b21a      	sxth	r2, r3
 800e6cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	b21b      	sxth	r3, r3
 800e6d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e6d6:	89fb      	ldrh	r3, [r7, #14]
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	371c      	adds	r7, #28
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e6fa:	2b40      	cmp	r3, #64	@ 0x40
 800e6fc:	d005      	beq.n	800e70a <USBD_StdDevReq+0x26>
 800e6fe:	2b40      	cmp	r3, #64	@ 0x40
 800e700:	d857      	bhi.n	800e7b2 <USBD_StdDevReq+0xce>
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00f      	beq.n	800e726 <USBD_StdDevReq+0x42>
 800e706:	2b20      	cmp	r3, #32
 800e708:	d153      	bne.n	800e7b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	32ae      	adds	r2, #174	@ 0xae
 800e714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	4798      	blx	r3
 800e720:	4603      	mov	r3, r0
 800e722:	73fb      	strb	r3, [r7, #15]
      break;
 800e724:	e04a      	b.n	800e7bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	785b      	ldrb	r3, [r3, #1]
 800e72a:	2b09      	cmp	r3, #9
 800e72c:	d83b      	bhi.n	800e7a6 <USBD_StdDevReq+0xc2>
 800e72e:	a201      	add	r2, pc, #4	@ (adr r2, 800e734 <USBD_StdDevReq+0x50>)
 800e730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e734:	0800e789 	.word	0x0800e789
 800e738:	0800e79d 	.word	0x0800e79d
 800e73c:	0800e7a7 	.word	0x0800e7a7
 800e740:	0800e793 	.word	0x0800e793
 800e744:	0800e7a7 	.word	0x0800e7a7
 800e748:	0800e767 	.word	0x0800e767
 800e74c:	0800e75d 	.word	0x0800e75d
 800e750:	0800e7a7 	.word	0x0800e7a7
 800e754:	0800e77f 	.word	0x0800e77f
 800e758:	0800e771 	.word	0x0800e771
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 fa3e 	bl	800ebe0 <USBD_GetDescriptor>
          break;
 800e764:	e024      	b.n	800e7b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e766:	6839      	ldr	r1, [r7, #0]
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 fba3 	bl	800eeb4 <USBD_SetAddress>
          break;
 800e76e:	e01f      	b.n	800e7b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e770:	6839      	ldr	r1, [r7, #0]
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 fbe2 	bl	800ef3c <USBD_SetConfig>
 800e778:	4603      	mov	r3, r0
 800e77a:	73fb      	strb	r3, [r7, #15]
          break;
 800e77c:	e018      	b.n	800e7b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e77e:	6839      	ldr	r1, [r7, #0]
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 fc85 	bl	800f090 <USBD_GetConfig>
          break;
 800e786:	e013      	b.n	800e7b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e788:	6839      	ldr	r1, [r7, #0]
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 fcb6 	bl	800f0fc <USBD_GetStatus>
          break;
 800e790:	e00e      	b.n	800e7b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e792:	6839      	ldr	r1, [r7, #0]
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 fce5 	bl	800f164 <USBD_SetFeature>
          break;
 800e79a:	e009      	b.n	800e7b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e79c:	6839      	ldr	r1, [r7, #0]
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f000 fd09 	bl	800f1b6 <USBD_ClrFeature>
          break;
 800e7a4:	e004      	b.n	800e7b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e7a6:	6839      	ldr	r1, [r7, #0]
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 fd60 	bl	800f26e <USBD_CtlError>
          break;
 800e7ae:	bf00      	nop
      }
      break;
 800e7b0:	e004      	b.n	800e7bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e7b2:	6839      	ldr	r1, [r7, #0]
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f000 fd5a 	bl	800f26e <USBD_CtlError>
      break;
 800e7ba:	bf00      	nop
  }

  return ret;
 800e7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop

0800e7c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e7de:	2b40      	cmp	r3, #64	@ 0x40
 800e7e0:	d005      	beq.n	800e7ee <USBD_StdItfReq+0x26>
 800e7e2:	2b40      	cmp	r3, #64	@ 0x40
 800e7e4:	d852      	bhi.n	800e88c <USBD_StdItfReq+0xc4>
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d001      	beq.n	800e7ee <USBD_StdItfReq+0x26>
 800e7ea:	2b20      	cmp	r3, #32
 800e7ec:	d14e      	bne.n	800e88c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	2b02      	cmp	r3, #2
 800e7fa:	d840      	bhi.n	800e87e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	889b      	ldrh	r3, [r3, #4]
 800e800:	b2db      	uxtb	r3, r3
 800e802:	2b01      	cmp	r3, #1
 800e804:	d836      	bhi.n	800e874 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	889b      	ldrh	r3, [r3, #4]
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	4619      	mov	r1, r3
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f7ff fedc 	bl	800e5cc <USBD_CoreFindIF>
 800e814:	4603      	mov	r3, r0
 800e816:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e818:	7bbb      	ldrb	r3, [r7, #14]
 800e81a:	2bff      	cmp	r3, #255	@ 0xff
 800e81c:	d01d      	beq.n	800e85a <USBD_StdItfReq+0x92>
 800e81e:	7bbb      	ldrb	r3, [r7, #14]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d11a      	bne.n	800e85a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e824:	7bba      	ldrb	r2, [r7, #14]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	32ae      	adds	r2, #174	@ 0xae
 800e82a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e82e:	689b      	ldr	r3, [r3, #8]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00f      	beq.n	800e854 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e834:	7bba      	ldrb	r2, [r7, #14]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e83c:	7bba      	ldrb	r2, [r7, #14]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	32ae      	adds	r2, #174	@ 0xae
 800e842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	6839      	ldr	r1, [r7, #0]
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	4798      	blx	r3
 800e84e:	4603      	mov	r3, r0
 800e850:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e852:	e004      	b.n	800e85e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e854:	2303      	movs	r3, #3
 800e856:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e858:	e001      	b.n	800e85e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e85a:	2303      	movs	r3, #3
 800e85c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	88db      	ldrh	r3, [r3, #6]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d110      	bne.n	800e888 <USBD_StdItfReq+0xc0>
 800e866:	7bfb      	ldrb	r3, [r7, #15]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d10d      	bne.n	800e888 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 fddc 	bl	800f42a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e872:	e009      	b.n	800e888 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e874:	6839      	ldr	r1, [r7, #0]
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 fcf9 	bl	800f26e <USBD_CtlError>
          break;
 800e87c:	e004      	b.n	800e888 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e87e:	6839      	ldr	r1, [r7, #0]
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 fcf4 	bl	800f26e <USBD_CtlError>
          break;
 800e886:	e000      	b.n	800e88a <USBD_StdItfReq+0xc2>
          break;
 800e888:	bf00      	nop
      }
      break;
 800e88a:	e004      	b.n	800e896 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e88c:	6839      	ldr	r1, [r7, #0]
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 fced 	bl	800f26e <USBD_CtlError>
      break;
 800e894:	bf00      	nop
  }

  return ret;
 800e896:	7bfb      	ldrb	r3, [r7, #15]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	889b      	ldrh	r3, [r3, #4]
 800e8b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e8bc:	2b40      	cmp	r3, #64	@ 0x40
 800e8be:	d007      	beq.n	800e8d0 <USBD_StdEPReq+0x30>
 800e8c0:	2b40      	cmp	r3, #64	@ 0x40
 800e8c2:	f200 8181 	bhi.w	800ebc8 <USBD_StdEPReq+0x328>
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d02a      	beq.n	800e920 <USBD_StdEPReq+0x80>
 800e8ca:	2b20      	cmp	r3, #32
 800e8cc:	f040 817c 	bne.w	800ebc8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e8d0:	7bbb      	ldrb	r3, [r7, #14]
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7ff fe86 	bl	800e5e6 <USBD_CoreFindEP>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e8de:	7b7b      	ldrb	r3, [r7, #13]
 800e8e0:	2bff      	cmp	r3, #255	@ 0xff
 800e8e2:	f000 8176 	beq.w	800ebd2 <USBD_StdEPReq+0x332>
 800e8e6:	7b7b      	ldrb	r3, [r7, #13]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f040 8172 	bne.w	800ebd2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800e8ee:	7b7a      	ldrb	r2, [r7, #13]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e8f6:	7b7a      	ldrb	r2, [r7, #13]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	32ae      	adds	r2, #174	@ 0xae
 800e8fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	2b00      	cmp	r3, #0
 800e904:	f000 8165 	beq.w	800ebd2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e908:	7b7a      	ldrb	r2, [r7, #13]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	32ae      	adds	r2, #174	@ 0xae
 800e90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e912:	689b      	ldr	r3, [r3, #8]
 800e914:	6839      	ldr	r1, [r7, #0]
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	4798      	blx	r3
 800e91a:	4603      	mov	r3, r0
 800e91c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e91e:	e158      	b.n	800ebd2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	785b      	ldrb	r3, [r3, #1]
 800e924:	2b03      	cmp	r3, #3
 800e926:	d008      	beq.n	800e93a <USBD_StdEPReq+0x9a>
 800e928:	2b03      	cmp	r3, #3
 800e92a:	f300 8147 	bgt.w	800ebbc <USBD_StdEPReq+0x31c>
 800e92e:	2b00      	cmp	r3, #0
 800e930:	f000 809b 	beq.w	800ea6a <USBD_StdEPReq+0x1ca>
 800e934:	2b01      	cmp	r3, #1
 800e936:	d03c      	beq.n	800e9b2 <USBD_StdEPReq+0x112>
 800e938:	e140      	b.n	800ebbc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e940:	b2db      	uxtb	r3, r3
 800e942:	2b02      	cmp	r3, #2
 800e944:	d002      	beq.n	800e94c <USBD_StdEPReq+0xac>
 800e946:	2b03      	cmp	r3, #3
 800e948:	d016      	beq.n	800e978 <USBD_StdEPReq+0xd8>
 800e94a:	e02c      	b.n	800e9a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e94c:	7bbb      	ldrb	r3, [r7, #14]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d00d      	beq.n	800e96e <USBD_StdEPReq+0xce>
 800e952:	7bbb      	ldrb	r3, [r7, #14]
 800e954:	2b80      	cmp	r3, #128	@ 0x80
 800e956:	d00a      	beq.n	800e96e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e958:	7bbb      	ldrb	r3, [r7, #14]
 800e95a:	4619      	mov	r1, r3
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f004 fb7d 	bl	801305c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e962:	2180      	movs	r1, #128	@ 0x80
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f004 fb79 	bl	801305c <USBD_LL_StallEP>
 800e96a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e96c:	e020      	b.n	800e9b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e96e:	6839      	ldr	r1, [r7, #0]
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 fc7c 	bl	800f26e <USBD_CtlError>
              break;
 800e976:	e01b      	b.n	800e9b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	885b      	ldrh	r3, [r3, #2]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d10e      	bne.n	800e99e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e980:	7bbb      	ldrb	r3, [r7, #14]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00b      	beq.n	800e99e <USBD_StdEPReq+0xfe>
 800e986:	7bbb      	ldrb	r3, [r7, #14]
 800e988:	2b80      	cmp	r3, #128	@ 0x80
 800e98a:	d008      	beq.n	800e99e <USBD_StdEPReq+0xfe>
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	88db      	ldrh	r3, [r3, #6]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d104      	bne.n	800e99e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e994:	7bbb      	ldrb	r3, [r7, #14]
 800e996:	4619      	mov	r1, r3
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f004 fb5f 	bl	801305c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f000 fd43 	bl	800f42a <USBD_CtlSendStatus>

              break;
 800e9a4:	e004      	b.n	800e9b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e9a6:	6839      	ldr	r1, [r7, #0]
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 fc60 	bl	800f26e <USBD_CtlError>
              break;
 800e9ae:	bf00      	nop
          }
          break;
 800e9b0:	e109      	b.n	800ebc6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	2b02      	cmp	r3, #2
 800e9bc:	d002      	beq.n	800e9c4 <USBD_StdEPReq+0x124>
 800e9be:	2b03      	cmp	r3, #3
 800e9c0:	d016      	beq.n	800e9f0 <USBD_StdEPReq+0x150>
 800e9c2:	e04b      	b.n	800ea5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e9c4:	7bbb      	ldrb	r3, [r7, #14]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00d      	beq.n	800e9e6 <USBD_StdEPReq+0x146>
 800e9ca:	7bbb      	ldrb	r3, [r7, #14]
 800e9cc:	2b80      	cmp	r3, #128	@ 0x80
 800e9ce:	d00a      	beq.n	800e9e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e9d0:	7bbb      	ldrb	r3, [r7, #14]
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f004 fb41 	bl	801305c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9da:	2180      	movs	r1, #128	@ 0x80
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f004 fb3d 	bl	801305c <USBD_LL_StallEP>
 800e9e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e9e4:	e040      	b.n	800ea68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e9e6:	6839      	ldr	r1, [r7, #0]
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 fc40 	bl	800f26e <USBD_CtlError>
              break;
 800e9ee:	e03b      	b.n	800ea68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	885b      	ldrh	r3, [r3, #2]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d136      	bne.n	800ea66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e9f8:	7bbb      	ldrb	r3, [r7, #14]
 800e9fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d004      	beq.n	800ea0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ea02:	7bbb      	ldrb	r3, [r7, #14]
 800ea04:	4619      	mov	r1, r3
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f004 fb47 	bl	801309a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 fd0c 	bl	800f42a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ea12:	7bbb      	ldrb	r3, [r7, #14]
 800ea14:	4619      	mov	r1, r3
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f7ff fde5 	bl	800e5e6 <USBD_CoreFindEP>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea20:	7b7b      	ldrb	r3, [r7, #13]
 800ea22:	2bff      	cmp	r3, #255	@ 0xff
 800ea24:	d01f      	beq.n	800ea66 <USBD_StdEPReq+0x1c6>
 800ea26:	7b7b      	ldrb	r3, [r7, #13]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d11c      	bne.n	800ea66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ea2c:	7b7a      	ldrb	r2, [r7, #13]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ea34:	7b7a      	ldrb	r2, [r7, #13]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	32ae      	adds	r2, #174	@ 0xae
 800ea3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea3e:	689b      	ldr	r3, [r3, #8]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d010      	beq.n	800ea66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ea44:	7b7a      	ldrb	r2, [r7, #13]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	32ae      	adds	r2, #174	@ 0xae
 800ea4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea4e:	689b      	ldr	r3, [r3, #8]
 800ea50:	6839      	ldr	r1, [r7, #0]
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	4798      	blx	r3
 800ea56:	4603      	mov	r3, r0
 800ea58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ea5a:	e004      	b.n	800ea66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ea5c:	6839      	ldr	r1, [r7, #0]
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 fc05 	bl	800f26e <USBD_CtlError>
              break;
 800ea64:	e000      	b.n	800ea68 <USBD_StdEPReq+0x1c8>
              break;
 800ea66:	bf00      	nop
          }
          break;
 800ea68:	e0ad      	b.n	800ebc6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	2b02      	cmp	r3, #2
 800ea74:	d002      	beq.n	800ea7c <USBD_StdEPReq+0x1dc>
 800ea76:	2b03      	cmp	r3, #3
 800ea78:	d033      	beq.n	800eae2 <USBD_StdEPReq+0x242>
 800ea7a:	e099      	b.n	800ebb0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ea7c:	7bbb      	ldrb	r3, [r7, #14]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d007      	beq.n	800ea92 <USBD_StdEPReq+0x1f2>
 800ea82:	7bbb      	ldrb	r3, [r7, #14]
 800ea84:	2b80      	cmp	r3, #128	@ 0x80
 800ea86:	d004      	beq.n	800ea92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ea88:	6839      	ldr	r1, [r7, #0]
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 fbef 	bl	800f26e <USBD_CtlError>
                break;
 800ea90:	e093      	b.n	800ebba <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ea92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	da0b      	bge.n	800eab2 <USBD_StdEPReq+0x212>
 800ea9a:	7bbb      	ldrb	r3, [r7, #14]
 800ea9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	009b      	lsls	r3, r3, #2
 800eaa4:	4413      	add	r3, r2
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	3310      	adds	r3, #16
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	4413      	add	r3, r2
 800eaae:	3304      	adds	r3, #4
 800eab0:	e00b      	b.n	800eaca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eab2:	7bbb      	ldrb	r3, [r7, #14]
 800eab4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eab8:	4613      	mov	r3, r2
 800eaba:	009b      	lsls	r3, r3, #2
 800eabc:	4413      	add	r3, r2
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	4413      	add	r3, r2
 800eac8:	3304      	adds	r3, #4
 800eaca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	2200      	movs	r2, #0
 800ead0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	330e      	adds	r3, #14
 800ead6:	2202      	movs	r2, #2
 800ead8:	4619      	mov	r1, r3
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 fc44 	bl	800f368 <USBD_CtlSendData>
              break;
 800eae0:	e06b      	b.n	800ebba <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800eae2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	da11      	bge.n	800eb0e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800eaea:	7bbb      	ldrb	r3, [r7, #14]
 800eaec:	f003 020f 	and.w	r2, r3, #15
 800eaf0:	6879      	ldr	r1, [r7, #4]
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	009b      	lsls	r3, r3, #2
 800eaf6:	4413      	add	r3, r2
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	440b      	add	r3, r1
 800eafc:	3323      	adds	r3, #35	@ 0x23
 800eafe:	781b      	ldrb	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d117      	bne.n	800eb34 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800eb04:	6839      	ldr	r1, [r7, #0]
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 fbb1 	bl	800f26e <USBD_CtlError>
                  break;
 800eb0c:	e055      	b.n	800ebba <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eb0e:	7bbb      	ldrb	r3, [r7, #14]
 800eb10:	f003 020f 	and.w	r2, r3, #15
 800eb14:	6879      	ldr	r1, [r7, #4]
 800eb16:	4613      	mov	r3, r2
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	4413      	add	r3, r2
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	440b      	add	r3, r1
 800eb20:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d104      	bne.n	800eb34 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800eb2a:	6839      	ldr	r1, [r7, #0]
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f000 fb9e 	bl	800f26e <USBD_CtlError>
                  break;
 800eb32:	e042      	b.n	800ebba <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	da0b      	bge.n	800eb54 <USBD_StdEPReq+0x2b4>
 800eb3c:	7bbb      	ldrb	r3, [r7, #14]
 800eb3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eb42:	4613      	mov	r3, r2
 800eb44:	009b      	lsls	r3, r3, #2
 800eb46:	4413      	add	r3, r2
 800eb48:	009b      	lsls	r3, r3, #2
 800eb4a:	3310      	adds	r3, #16
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	4413      	add	r3, r2
 800eb50:	3304      	adds	r3, #4
 800eb52:	e00b      	b.n	800eb6c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eb54:	7bbb      	ldrb	r3, [r7, #14]
 800eb56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	4413      	add	r3, r2
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	4413      	add	r3, r2
 800eb6a:	3304      	adds	r3, #4
 800eb6c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800eb6e:	7bbb      	ldrb	r3, [r7, #14]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d002      	beq.n	800eb7a <USBD_StdEPReq+0x2da>
 800eb74:	7bbb      	ldrb	r3, [r7, #14]
 800eb76:	2b80      	cmp	r3, #128	@ 0x80
 800eb78:	d103      	bne.n	800eb82 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	739a      	strb	r2, [r3, #14]
 800eb80:	e00e      	b.n	800eba0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800eb82:	7bbb      	ldrb	r3, [r7, #14]
 800eb84:	4619      	mov	r1, r3
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f004 faa6 	bl	80130d8 <USBD_LL_IsStallEP>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d003      	beq.n	800eb9a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	2201      	movs	r2, #1
 800eb96:	739a      	strb	r2, [r3, #14]
 800eb98:	e002      	b.n	800eba0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	330e      	adds	r3, #14
 800eba4:	2202      	movs	r2, #2
 800eba6:	4619      	mov	r1, r3
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 fbdd 	bl	800f368 <USBD_CtlSendData>
              break;
 800ebae:	e004      	b.n	800ebba <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800ebb0:	6839      	ldr	r1, [r7, #0]
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 fb5b 	bl	800f26e <USBD_CtlError>
              break;
 800ebb8:	bf00      	nop
          }
          break;
 800ebba:	e004      	b.n	800ebc6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800ebbc:	6839      	ldr	r1, [r7, #0]
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 fb55 	bl	800f26e <USBD_CtlError>
          break;
 800ebc4:	bf00      	nop
      }
      break;
 800ebc6:	e005      	b.n	800ebd4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800ebc8:	6839      	ldr	r1, [r7, #0]
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 fb4f 	bl	800f26e <USBD_CtlError>
      break;
 800ebd0:	e000      	b.n	800ebd4 <USBD_StdEPReq+0x334>
      break;
 800ebd2:	bf00      	nop
  }

  return ret;
 800ebd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3710      	adds	r7, #16
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
	...

0800ebe0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ebea:	2300      	movs	r3, #0
 800ebec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	885b      	ldrh	r3, [r3, #2]
 800ebfa:	0a1b      	lsrs	r3, r3, #8
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	3b01      	subs	r3, #1
 800ec00:	2b06      	cmp	r3, #6
 800ec02:	f200 8128 	bhi.w	800ee56 <USBD_GetDescriptor+0x276>
 800ec06:	a201      	add	r2, pc, #4	@ (adr r2, 800ec0c <USBD_GetDescriptor+0x2c>)
 800ec08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec0c:	0800ec29 	.word	0x0800ec29
 800ec10:	0800ec41 	.word	0x0800ec41
 800ec14:	0800ec81 	.word	0x0800ec81
 800ec18:	0800ee57 	.word	0x0800ee57
 800ec1c:	0800ee57 	.word	0x0800ee57
 800ec20:	0800edf7 	.word	0x0800edf7
 800ec24:	0800ee23 	.word	0x0800ee23
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	7c12      	ldrb	r2, [r2, #16]
 800ec34:	f107 0108 	add.w	r1, r7, #8
 800ec38:	4610      	mov	r0, r2
 800ec3a:	4798      	blx	r3
 800ec3c:	60f8      	str	r0, [r7, #12]
      break;
 800ec3e:	e112      	b.n	800ee66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	7c1b      	ldrb	r3, [r3, #16]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d10d      	bne.n	800ec64 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec50:	f107 0208 	add.w	r2, r7, #8
 800ec54:	4610      	mov	r0, r2
 800ec56:	4798      	blx	r3
 800ec58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	2202      	movs	r2, #2
 800ec60:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ec62:	e100      	b.n	800ee66 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec6c:	f107 0208 	add.w	r2, r7, #8
 800ec70:	4610      	mov	r0, r2
 800ec72:	4798      	blx	r3
 800ec74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	2202      	movs	r2, #2
 800ec7c:	701a      	strb	r2, [r3, #0]
      break;
 800ec7e:	e0f2      	b.n	800ee66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	885b      	ldrh	r3, [r3, #2]
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	2b05      	cmp	r3, #5
 800ec88:	f200 80ac 	bhi.w	800ede4 <USBD_GetDescriptor+0x204>
 800ec8c:	a201      	add	r2, pc, #4	@ (adr r2, 800ec94 <USBD_GetDescriptor+0xb4>)
 800ec8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec92:	bf00      	nop
 800ec94:	0800ecad 	.word	0x0800ecad
 800ec98:	0800ece1 	.word	0x0800ece1
 800ec9c:	0800ed15 	.word	0x0800ed15
 800eca0:	0800ed49 	.word	0x0800ed49
 800eca4:	0800ed7d 	.word	0x0800ed7d
 800eca8:	0800edb1 	.word	0x0800edb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00b      	beq.n	800ecd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	687a      	ldr	r2, [r7, #4]
 800ecc2:	7c12      	ldrb	r2, [r2, #16]
 800ecc4:	f107 0108 	add.w	r1, r7, #8
 800ecc8:	4610      	mov	r0, r2
 800ecca:	4798      	blx	r3
 800eccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ecce:	e091      	b.n	800edf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ecd0:	6839      	ldr	r1, [r7, #0]
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f000 facb 	bl	800f26e <USBD_CtlError>
            err++;
 800ecd8:	7afb      	ldrb	r3, [r7, #11]
 800ecda:	3301      	adds	r3, #1
 800ecdc:	72fb      	strb	r3, [r7, #11]
          break;
 800ecde:	e089      	b.n	800edf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00b      	beq.n	800ed04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	687a      	ldr	r2, [r7, #4]
 800ecf6:	7c12      	ldrb	r2, [r2, #16]
 800ecf8:	f107 0108 	add.w	r1, r7, #8
 800ecfc:	4610      	mov	r0, r2
 800ecfe:	4798      	blx	r3
 800ed00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed02:	e077      	b.n	800edf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ed04:	6839      	ldr	r1, [r7, #0]
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 fab1 	bl	800f26e <USBD_CtlError>
            err++;
 800ed0c:	7afb      	ldrb	r3, [r7, #11]
 800ed0e:	3301      	adds	r3, #1
 800ed10:	72fb      	strb	r3, [r7, #11]
          break;
 800ed12:	e06f      	b.n	800edf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d00b      	beq.n	800ed38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	687a      	ldr	r2, [r7, #4]
 800ed2a:	7c12      	ldrb	r2, [r2, #16]
 800ed2c:	f107 0108 	add.w	r1, r7, #8
 800ed30:	4610      	mov	r0, r2
 800ed32:	4798      	blx	r3
 800ed34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed36:	e05d      	b.n	800edf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ed38:	6839      	ldr	r1, [r7, #0]
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 fa97 	bl	800f26e <USBD_CtlError>
            err++;
 800ed40:	7afb      	ldrb	r3, [r7, #11]
 800ed42:	3301      	adds	r3, #1
 800ed44:	72fb      	strb	r3, [r7, #11]
          break;
 800ed46:	e055      	b.n	800edf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed4e:	691b      	ldr	r3, [r3, #16]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d00b      	beq.n	800ed6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed5a:	691b      	ldr	r3, [r3, #16]
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	7c12      	ldrb	r2, [r2, #16]
 800ed60:	f107 0108 	add.w	r1, r7, #8
 800ed64:	4610      	mov	r0, r2
 800ed66:	4798      	blx	r3
 800ed68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed6a:	e043      	b.n	800edf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ed6c:	6839      	ldr	r1, [r7, #0]
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 fa7d 	bl	800f26e <USBD_CtlError>
            err++;
 800ed74:	7afb      	ldrb	r3, [r7, #11]
 800ed76:	3301      	adds	r3, #1
 800ed78:	72fb      	strb	r3, [r7, #11]
          break;
 800ed7a:	e03b      	b.n	800edf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed82:	695b      	ldr	r3, [r3, #20]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00b      	beq.n	800eda0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed8e:	695b      	ldr	r3, [r3, #20]
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	7c12      	ldrb	r2, [r2, #16]
 800ed94:	f107 0108 	add.w	r1, r7, #8
 800ed98:	4610      	mov	r0, r2
 800ed9a:	4798      	blx	r3
 800ed9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed9e:	e029      	b.n	800edf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eda0:	6839      	ldr	r1, [r7, #0]
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 fa63 	bl	800f26e <USBD_CtlError>
            err++;
 800eda8:	7afb      	ldrb	r3, [r7, #11]
 800edaa:	3301      	adds	r3, #1
 800edac:	72fb      	strb	r3, [r7, #11]
          break;
 800edae:	e021      	b.n	800edf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800edb6:	699b      	ldr	r3, [r3, #24]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d00b      	beq.n	800edd4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800edc2:	699b      	ldr	r3, [r3, #24]
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	7c12      	ldrb	r2, [r2, #16]
 800edc8:	f107 0108 	add.w	r1, r7, #8
 800edcc:	4610      	mov	r0, r2
 800edce:	4798      	blx	r3
 800edd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edd2:	e00f      	b.n	800edf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800edd4:	6839      	ldr	r1, [r7, #0]
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 fa49 	bl	800f26e <USBD_CtlError>
            err++;
 800eddc:	7afb      	ldrb	r3, [r7, #11]
 800edde:	3301      	adds	r3, #1
 800ede0:	72fb      	strb	r3, [r7, #11]
          break;
 800ede2:	e007      	b.n	800edf4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ede4:	6839      	ldr	r1, [r7, #0]
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 fa41 	bl	800f26e <USBD_CtlError>
          err++;
 800edec:	7afb      	ldrb	r3, [r7, #11]
 800edee:	3301      	adds	r3, #1
 800edf0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800edf2:	bf00      	nop
      }
      break;
 800edf4:	e037      	b.n	800ee66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	7c1b      	ldrb	r3, [r3, #16]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d109      	bne.n	800ee12 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee06:	f107 0208 	add.w	r2, r7, #8
 800ee0a:	4610      	mov	r0, r2
 800ee0c:	4798      	blx	r3
 800ee0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee10:	e029      	b.n	800ee66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ee12:	6839      	ldr	r1, [r7, #0]
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 fa2a 	bl	800f26e <USBD_CtlError>
        err++;
 800ee1a:	7afb      	ldrb	r3, [r7, #11]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	72fb      	strb	r3, [r7, #11]
      break;
 800ee20:	e021      	b.n	800ee66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	7c1b      	ldrb	r3, [r3, #16]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d10d      	bne.n	800ee46 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee32:	f107 0208 	add.w	r2, r7, #8
 800ee36:	4610      	mov	r0, r2
 800ee38:	4798      	blx	r3
 800ee3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	2207      	movs	r2, #7
 800ee42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee44:	e00f      	b.n	800ee66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ee46:	6839      	ldr	r1, [r7, #0]
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 fa10 	bl	800f26e <USBD_CtlError>
        err++;
 800ee4e:	7afb      	ldrb	r3, [r7, #11]
 800ee50:	3301      	adds	r3, #1
 800ee52:	72fb      	strb	r3, [r7, #11]
      break;
 800ee54:	e007      	b.n	800ee66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ee56:	6839      	ldr	r1, [r7, #0]
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f000 fa08 	bl	800f26e <USBD_CtlError>
      err++;
 800ee5e:	7afb      	ldrb	r3, [r7, #11]
 800ee60:	3301      	adds	r3, #1
 800ee62:	72fb      	strb	r3, [r7, #11]
      break;
 800ee64:	bf00      	nop
  }

  if (err != 0U)
 800ee66:	7afb      	ldrb	r3, [r7, #11]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d11e      	bne.n	800eeaa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	88db      	ldrh	r3, [r3, #6]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d016      	beq.n	800eea2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ee74:	893b      	ldrh	r3, [r7, #8]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00e      	beq.n	800ee98 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	88da      	ldrh	r2, [r3, #6]
 800ee7e:	893b      	ldrh	r3, [r7, #8]
 800ee80:	4293      	cmp	r3, r2
 800ee82:	bf28      	it	cs
 800ee84:	4613      	movcs	r3, r2
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ee8a:	893b      	ldrh	r3, [r7, #8]
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	68f9      	ldr	r1, [r7, #12]
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 fa69 	bl	800f368 <USBD_CtlSendData>
 800ee96:	e009      	b.n	800eeac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ee98:	6839      	ldr	r1, [r7, #0]
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f9e7 	bl	800f26e <USBD_CtlError>
 800eea0:	e004      	b.n	800eeac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f000 fac1 	bl	800f42a <USBD_CtlSendStatus>
 800eea8:	e000      	b.n	800eeac <USBD_GetDescriptor+0x2cc>
    return;
 800eeaa:	bf00      	nop
  }
}
 800eeac:	3710      	adds	r7, #16
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop

0800eeb4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	889b      	ldrh	r3, [r3, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d131      	bne.n	800ef2a <USBD_SetAddress+0x76>
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	88db      	ldrh	r3, [r3, #6]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d12d      	bne.n	800ef2a <USBD_SetAddress+0x76>
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	885b      	ldrh	r3, [r3, #2]
 800eed2:	2b7f      	cmp	r3, #127	@ 0x7f
 800eed4:	d829      	bhi.n	800ef2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	885b      	ldrh	r3, [r3, #2]
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eee0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	2b03      	cmp	r3, #3
 800eeec:	d104      	bne.n	800eef8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800eeee:	6839      	ldr	r1, [r7, #0]
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f000 f9bc 	bl	800f26e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eef6:	e01d      	b.n	800ef34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	7bfa      	ldrb	r2, [r7, #15]
 800eefc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ef00:	7bfb      	ldrb	r3, [r7, #15]
 800ef02:	4619      	mov	r1, r3
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f004 f913 	bl	8013130 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 fa8d 	bl	800f42a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ef10:	7bfb      	ldrb	r3, [r7, #15]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d004      	beq.n	800ef20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2202      	movs	r2, #2
 800ef1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef1e:	e009      	b.n	800ef34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2201      	movs	r2, #1
 800ef24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef28:	e004      	b.n	800ef34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ef2a:	6839      	ldr	r1, [r7, #0]
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f000 f99e 	bl	800f26e <USBD_CtlError>
  }
}
 800ef32:	bf00      	nop
 800ef34:	bf00      	nop
 800ef36:	3710      	adds	r7, #16
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef46:	2300      	movs	r3, #0
 800ef48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	885b      	ldrh	r3, [r3, #2]
 800ef4e:	b2da      	uxtb	r2, r3
 800ef50:	4b4e      	ldr	r3, [pc, #312]	@ (800f08c <USBD_SetConfig+0x150>)
 800ef52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ef54:	4b4d      	ldr	r3, [pc, #308]	@ (800f08c <USBD_SetConfig+0x150>)
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	d905      	bls.n	800ef68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ef5c:	6839      	ldr	r1, [r7, #0]
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f000 f985 	bl	800f26e <USBD_CtlError>
    return USBD_FAIL;
 800ef64:	2303      	movs	r3, #3
 800ef66:	e08c      	b.n	800f082 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	2b02      	cmp	r3, #2
 800ef72:	d002      	beq.n	800ef7a <USBD_SetConfig+0x3e>
 800ef74:	2b03      	cmp	r3, #3
 800ef76:	d029      	beq.n	800efcc <USBD_SetConfig+0x90>
 800ef78:	e075      	b.n	800f066 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ef7a:	4b44      	ldr	r3, [pc, #272]	@ (800f08c <USBD_SetConfig+0x150>)
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d020      	beq.n	800efc4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ef82:	4b42      	ldr	r3, [pc, #264]	@ (800f08c <USBD_SetConfig+0x150>)
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	461a      	mov	r2, r3
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ef8c:	4b3f      	ldr	r3, [pc, #252]	@ (800f08c <USBD_SetConfig+0x150>)
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	4619      	mov	r1, r3
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f7fe ffcf 	bl	800df36 <USBD_SetClassConfig>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ef9c:	7bfb      	ldrb	r3, [r7, #15]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d008      	beq.n	800efb4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800efa2:	6839      	ldr	r1, [r7, #0]
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f000 f962 	bl	800f26e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2202      	movs	r2, #2
 800efae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800efb2:	e065      	b.n	800f080 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 fa38 	bl	800f42a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2203      	movs	r2, #3
 800efbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800efc2:	e05d      	b.n	800f080 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 fa30 	bl	800f42a <USBD_CtlSendStatus>
      break;
 800efca:	e059      	b.n	800f080 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800efcc:	4b2f      	ldr	r3, [pc, #188]	@ (800f08c <USBD_SetConfig+0x150>)
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d112      	bne.n	800effa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2202      	movs	r2, #2
 800efd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800efdc:	4b2b      	ldr	r3, [pc, #172]	@ (800f08c <USBD_SetConfig+0x150>)
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	461a      	mov	r2, r3
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800efe6:	4b29      	ldr	r3, [pc, #164]	@ (800f08c <USBD_SetConfig+0x150>)
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	4619      	mov	r1, r3
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f7fe ffbe 	bl	800df6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 fa19 	bl	800f42a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eff8:	e042      	b.n	800f080 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800effa:	4b24      	ldr	r3, [pc, #144]	@ (800f08c <USBD_SetConfig+0x150>)
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	461a      	mov	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	429a      	cmp	r2, r3
 800f006:	d02a      	beq.n	800f05e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	4619      	mov	r1, r3
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f7fe ffac 	bl	800df6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f016:	4b1d      	ldr	r3, [pc, #116]	@ (800f08c <USBD_SetConfig+0x150>)
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	461a      	mov	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f020:	4b1a      	ldr	r3, [pc, #104]	@ (800f08c <USBD_SetConfig+0x150>)
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	4619      	mov	r1, r3
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f7fe ff85 	bl	800df36 <USBD_SetClassConfig>
 800f02c:	4603      	mov	r3, r0
 800f02e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f030:	7bfb      	ldrb	r3, [r7, #15]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00f      	beq.n	800f056 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f036:	6839      	ldr	r1, [r7, #0]
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f000 f918 	bl	800f26e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	b2db      	uxtb	r3, r3
 800f044:	4619      	mov	r1, r3
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7fe ff91 	bl	800df6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2202      	movs	r2, #2
 800f050:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f054:	e014      	b.n	800f080 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f9e7 	bl	800f42a <USBD_CtlSendStatus>
      break;
 800f05c:	e010      	b.n	800f080 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 f9e3 	bl	800f42a <USBD_CtlSendStatus>
      break;
 800f064:	e00c      	b.n	800f080 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f066:	6839      	ldr	r1, [r7, #0]
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f000 f900 	bl	800f26e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f06e:	4b07      	ldr	r3, [pc, #28]	@ (800f08c <USBD_SetConfig+0x150>)
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	4619      	mov	r1, r3
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f7fe ff7a 	bl	800df6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f07a:	2303      	movs	r3, #3
 800f07c:	73fb      	strb	r3, [r7, #15]
      break;
 800f07e:	bf00      	nop
  }

  return ret;
 800f080:	7bfb      	ldrb	r3, [r7, #15]
}
 800f082:	4618      	mov	r0, r3
 800f084:	3710      	adds	r7, #16
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	20002ce4 	.word	0x20002ce4

0800f090 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	88db      	ldrh	r3, [r3, #6]
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d004      	beq.n	800f0ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f0a2:	6839      	ldr	r1, [r7, #0]
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 f8e2 	bl	800f26e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f0aa:	e023      	b.n	800f0f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	2b02      	cmp	r3, #2
 800f0b6:	dc02      	bgt.n	800f0be <USBD_GetConfig+0x2e>
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	dc03      	bgt.n	800f0c4 <USBD_GetConfig+0x34>
 800f0bc:	e015      	b.n	800f0ea <USBD_GetConfig+0x5a>
 800f0be:	2b03      	cmp	r3, #3
 800f0c0:	d00b      	beq.n	800f0da <USBD_GetConfig+0x4a>
 800f0c2:	e012      	b.n	800f0ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	3308      	adds	r3, #8
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 f948 	bl	800f368 <USBD_CtlSendData>
        break;
 800f0d8:	e00c      	b.n	800f0f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	3304      	adds	r3, #4
 800f0de:	2201      	movs	r2, #1
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f000 f940 	bl	800f368 <USBD_CtlSendData>
        break;
 800f0e8:	e004      	b.n	800f0f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f0ea:	6839      	ldr	r1, [r7, #0]
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f000 f8be 	bl	800f26e <USBD_CtlError>
        break;
 800f0f2:	bf00      	nop
}
 800f0f4:	bf00      	nop
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	3b01      	subs	r3, #1
 800f110:	2b02      	cmp	r3, #2
 800f112:	d81e      	bhi.n	800f152 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	88db      	ldrh	r3, [r3, #6]
 800f118:	2b02      	cmp	r3, #2
 800f11a:	d004      	beq.n	800f126 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f11c:	6839      	ldr	r1, [r7, #0]
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 f8a5 	bl	800f26e <USBD_CtlError>
        break;
 800f124:	e01a      	b.n	800f15c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2201      	movs	r2, #1
 800f12a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f132:	2b00      	cmp	r3, #0
 800f134:	d005      	beq.n	800f142 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	68db      	ldr	r3, [r3, #12]
 800f13a:	f043 0202 	orr.w	r2, r3, #2
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	330c      	adds	r3, #12
 800f146:	2202      	movs	r2, #2
 800f148:	4619      	mov	r1, r3
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f000 f90c 	bl	800f368 <USBD_CtlSendData>
      break;
 800f150:	e004      	b.n	800f15c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f152:	6839      	ldr	r1, [r7, #0]
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 f88a 	bl	800f26e <USBD_CtlError>
      break;
 800f15a:	bf00      	nop
  }
}
 800f15c:	bf00      	nop
 800f15e:	3708      	adds	r7, #8
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	885b      	ldrh	r3, [r3, #2]
 800f172:	2b01      	cmp	r3, #1
 800f174:	d107      	bne.n	800f186 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2201      	movs	r2, #1
 800f17a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f000 f953 	bl	800f42a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f184:	e013      	b.n	800f1ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	885b      	ldrh	r3, [r3, #2]
 800f18a:	2b02      	cmp	r3, #2
 800f18c:	d10b      	bne.n	800f1a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	889b      	ldrh	r3, [r3, #4]
 800f192:	0a1b      	lsrs	r3, r3, #8
 800f194:	b29b      	uxth	r3, r3
 800f196:	b2da      	uxtb	r2, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 f943 	bl	800f42a <USBD_CtlSendStatus>
}
 800f1a4:	e003      	b.n	800f1ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f1a6:	6839      	ldr	r1, [r7, #0]
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f000 f860 	bl	800f26e <USBD_CtlError>
}
 800f1ae:	bf00      	nop
 800f1b0:	3708      	adds	r7, #8
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b082      	sub	sp, #8
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
 800f1be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1c6:	b2db      	uxtb	r3, r3
 800f1c8:	3b01      	subs	r3, #1
 800f1ca:	2b02      	cmp	r3, #2
 800f1cc:	d80b      	bhi.n	800f1e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	885b      	ldrh	r3, [r3, #2]
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d10c      	bne.n	800f1f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f000 f923 	bl	800f42a <USBD_CtlSendStatus>
      }
      break;
 800f1e4:	e004      	b.n	800f1f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f1e6:	6839      	ldr	r1, [r7, #0]
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f000 f840 	bl	800f26e <USBD_CtlError>
      break;
 800f1ee:	e000      	b.n	800f1f2 <USBD_ClrFeature+0x3c>
      break;
 800f1f0:	bf00      	nop
  }
}
 800f1f2:	bf00      	nop
 800f1f4:	3708      	adds	r7, #8
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b084      	sub	sp, #16
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	6078      	str	r0, [r7, #4]
 800f202:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	781a      	ldrb	r2, [r3, #0]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	3301      	adds	r3, #1
 800f214:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	781a      	ldrb	r2, [r3, #0]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	3301      	adds	r3, #1
 800f222:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f224:	68f8      	ldr	r0, [r7, #12]
 800f226:	f7ff fa3f 	bl	800e6a8 <SWAPBYTE>
 800f22a:	4603      	mov	r3, r0
 800f22c:	461a      	mov	r2, r3
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	3301      	adds	r3, #1
 800f236:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	3301      	adds	r3, #1
 800f23c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f23e:	68f8      	ldr	r0, [r7, #12]
 800f240:	f7ff fa32 	bl	800e6a8 <SWAPBYTE>
 800f244:	4603      	mov	r3, r0
 800f246:	461a      	mov	r2, r3
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	3301      	adds	r3, #1
 800f250:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	3301      	adds	r3, #1
 800f256:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f7ff fa25 	bl	800e6a8 <SWAPBYTE>
 800f25e:	4603      	mov	r3, r0
 800f260:	461a      	mov	r2, r3
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	80da      	strh	r2, [r3, #6]
}
 800f266:	bf00      	nop
 800f268:	3710      	adds	r7, #16
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}

0800f26e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f26e:	b580      	push	{r7, lr}
 800f270:	b082      	sub	sp, #8
 800f272:	af00      	add	r7, sp, #0
 800f274:	6078      	str	r0, [r7, #4]
 800f276:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f278:	2180      	movs	r1, #128	@ 0x80
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f003 feee 	bl	801305c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f280:	2100      	movs	r1, #0
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f003 feea 	bl	801305c <USBD_LL_StallEP>
}
 800f288:	bf00      	nop
 800f28a:	3708      	adds	r7, #8
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b086      	sub	sp, #24
 800f294:	af00      	add	r7, sp, #0
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f29c:	2300      	movs	r3, #0
 800f29e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d042      	beq.n	800f32c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f2aa:	6938      	ldr	r0, [r7, #16]
 800f2ac:	f000 f842 	bl	800f334 <USBD_GetLen>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	005b      	lsls	r3, r3, #1
 800f2b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2ba:	d808      	bhi.n	800f2ce <USBD_GetString+0x3e>
 800f2bc:	6938      	ldr	r0, [r7, #16]
 800f2be:	f000 f839 	bl	800f334 <USBD_GetLen>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	005b      	lsls	r3, r3, #1
 800f2ca:	b29a      	uxth	r2, r3
 800f2cc:	e001      	b.n	800f2d2 <USBD_GetString+0x42>
 800f2ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	68ba      	ldr	r2, [r7, #8]
 800f2da:	4413      	add	r3, r2
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	7812      	ldrb	r2, [r2, #0]
 800f2e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800f2e2:	7dfb      	ldrb	r3, [r7, #23]
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f2e8:	7dfb      	ldrb	r3, [r7, #23]
 800f2ea:	68ba      	ldr	r2, [r7, #8]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	2203      	movs	r2, #3
 800f2f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800f2f2:	7dfb      	ldrb	r3, [r7, #23]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f2f8:	e013      	b.n	800f322 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f2fa:	7dfb      	ldrb	r3, [r7, #23]
 800f2fc:	68ba      	ldr	r2, [r7, #8]
 800f2fe:	4413      	add	r3, r2
 800f300:	693a      	ldr	r2, [r7, #16]
 800f302:	7812      	ldrb	r2, [r2, #0]
 800f304:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	3301      	adds	r3, #1
 800f30a:	613b      	str	r3, [r7, #16]
    idx++;
 800f30c:	7dfb      	ldrb	r3, [r7, #23]
 800f30e:	3301      	adds	r3, #1
 800f310:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f312:	7dfb      	ldrb	r3, [r7, #23]
 800f314:	68ba      	ldr	r2, [r7, #8]
 800f316:	4413      	add	r3, r2
 800f318:	2200      	movs	r2, #0
 800f31a:	701a      	strb	r2, [r3, #0]
    idx++;
 800f31c:	7dfb      	ldrb	r3, [r7, #23]
 800f31e:	3301      	adds	r3, #1
 800f320:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	781b      	ldrb	r3, [r3, #0]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d1e7      	bne.n	800f2fa <USBD_GetString+0x6a>
 800f32a:	e000      	b.n	800f32e <USBD_GetString+0x9e>
    return;
 800f32c:	bf00      	nop
  }
}
 800f32e:	3718      	adds	r7, #24
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f334:	b480      	push	{r7}
 800f336:	b085      	sub	sp, #20
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f33c:	2300      	movs	r3, #0
 800f33e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f344:	e005      	b.n	800f352 <USBD_GetLen+0x1e>
  {
    len++;
 800f346:	7bfb      	ldrb	r3, [r7, #15]
 800f348:	3301      	adds	r3, #1
 800f34a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	3301      	adds	r3, #1
 800f350:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d1f5      	bne.n	800f346 <USBD_GetLen+0x12>
  }

  return len;
 800f35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3714      	adds	r7, #20
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr

0800f368 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	60f8      	str	r0, [r7, #12]
 800f370:	60b9      	str	r1, [r7, #8]
 800f372:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	2202      	movs	r2, #2
 800f378:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	687a      	ldr	r2, [r7, #4]
 800f380:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	68ba      	ldr	r2, [r7, #8]
 800f386:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	687a      	ldr	r2, [r7, #4]
 800f38c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	68ba      	ldr	r2, [r7, #8]
 800f392:	2100      	movs	r1, #0
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f003 feea 	bl	801316e <USBD_LL_Transmit>

  return USBD_OK;
 800f39a:	2300      	movs	r3, #0
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3710      	adds	r7, #16
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	68ba      	ldr	r2, [r7, #8]
 800f3b4:	2100      	movs	r1, #0
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	f003 fed9 	bl	801316e <USBD_LL_Transmit>

  return USBD_OK;
 800f3bc:	2300      	movs	r3, #0
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b084      	sub	sp, #16
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	60f8      	str	r0, [r7, #12]
 800f3ce:	60b9      	str	r1, [r7, #8]
 800f3d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2203      	movs	r2, #3
 800f3d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	687a      	ldr	r2, [r7, #4]
 800f3de:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	68ba      	ldr	r2, [r7, #8]
 800f3e6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	68ba      	ldr	r2, [r7, #8]
 800f3f6:	2100      	movs	r1, #0
 800f3f8:	68f8      	ldr	r0, [r7, #12]
 800f3fa:	f003 fed9 	bl	80131b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f3fe:	2300      	movs	r3, #0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	68ba      	ldr	r2, [r7, #8]
 800f418:	2100      	movs	r1, #0
 800f41a:	68f8      	ldr	r0, [r7, #12]
 800f41c:	f003 fec8 	bl	80131b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f420:	2300      	movs	r3, #0
}
 800f422:	4618      	mov	r0, r3
 800f424:	3710      	adds	r7, #16
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}

0800f42a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f42a:	b580      	push	{r7, lr}
 800f42c:	b082      	sub	sp, #8
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2204      	movs	r2, #4
 800f436:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f43a:	2300      	movs	r3, #0
 800f43c:	2200      	movs	r2, #0
 800f43e:	2100      	movs	r1, #0
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f003 fe94 	bl	801316e <USBD_LL_Transmit>

  return USBD_OK;
 800f446:	2300      	movs	r3, #0
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3708      	adds	r7, #8
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2205      	movs	r2, #5
 800f45c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f460:	2300      	movs	r3, #0
 800f462:	2200      	movs	r2, #0
 800f464:	2100      	movs	r1, #0
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f003 fea2 	bl	80131b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3708      	adds	r7, #8
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
	...

0800f478 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	4603      	mov	r3, r0
 800f480:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f482:	79fb      	ldrb	r3, [r7, #7]
 800f484:	4a08      	ldr	r2, [pc, #32]	@ (800f4a8 <disk_status+0x30>)
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	4413      	add	r3, r2
 800f48a:	685b      	ldr	r3, [r3, #4]
 800f48c:	685b      	ldr	r3, [r3, #4]
 800f48e:	79fa      	ldrb	r2, [r7, #7]
 800f490:	4905      	ldr	r1, [pc, #20]	@ (800f4a8 <disk_status+0x30>)
 800f492:	440a      	add	r2, r1
 800f494:	7a12      	ldrb	r2, [r2, #8]
 800f496:	4610      	mov	r0, r2
 800f498:	4798      	blx	r3
 800f49a:	4603      	mov	r3, r0
 800f49c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3710      	adds	r7, #16
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}
 800f4a8:	20002f10 	.word	0x20002f10

0800f4ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f4ba:	79fb      	ldrb	r3, [r7, #7]
 800f4bc:	4a0e      	ldr	r2, [pc, #56]	@ (800f4f8 <disk_initialize+0x4c>)
 800f4be:	5cd3      	ldrb	r3, [r2, r3]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d114      	bne.n	800f4ee <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f4c4:	79fb      	ldrb	r3, [r7, #7]
 800f4c6:	4a0c      	ldr	r2, [pc, #48]	@ (800f4f8 <disk_initialize+0x4c>)
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	4413      	add	r3, r2
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	79fa      	ldrb	r2, [r7, #7]
 800f4d2:	4909      	ldr	r1, [pc, #36]	@ (800f4f8 <disk_initialize+0x4c>)
 800f4d4:	440a      	add	r2, r1
 800f4d6:	7a12      	ldrb	r2, [r2, #8]
 800f4d8:	4610      	mov	r0, r2
 800f4da:	4798      	blx	r3
 800f4dc:	4603      	mov	r3, r0
 800f4de:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f4e0:	7bfb      	ldrb	r3, [r7, #15]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d103      	bne.n	800f4ee <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f4e6:	79fb      	ldrb	r3, [r7, #7]
 800f4e8:	4a03      	ldr	r2, [pc, #12]	@ (800f4f8 <disk_initialize+0x4c>)
 800f4ea:	2101      	movs	r1, #1
 800f4ec:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3710      	adds	r7, #16
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	20002f10 	.word	0x20002f10

0800f4fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f4fc:	b590      	push	{r4, r7, lr}
 800f4fe:	b087      	sub	sp, #28
 800f500:	af00      	add	r7, sp, #0
 800f502:	60b9      	str	r1, [r7, #8]
 800f504:	607a      	str	r2, [r7, #4]
 800f506:	603b      	str	r3, [r7, #0]
 800f508:	4603      	mov	r3, r0
 800f50a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f50c:	7bfb      	ldrb	r3, [r7, #15]
 800f50e:	4a0a      	ldr	r2, [pc, #40]	@ (800f538 <disk_read+0x3c>)
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	4413      	add	r3, r2
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	689c      	ldr	r4, [r3, #8]
 800f518:	7bfb      	ldrb	r3, [r7, #15]
 800f51a:	4a07      	ldr	r2, [pc, #28]	@ (800f538 <disk_read+0x3c>)
 800f51c:	4413      	add	r3, r2
 800f51e:	7a18      	ldrb	r0, [r3, #8]
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	68b9      	ldr	r1, [r7, #8]
 800f526:	47a0      	blx	r4
 800f528:	4603      	mov	r3, r0
 800f52a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f52c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f52e:	4618      	mov	r0, r3
 800f530:	371c      	adds	r7, #28
 800f532:	46bd      	mov	sp, r7
 800f534:	bd90      	pop	{r4, r7, pc}
 800f536:	bf00      	nop
 800f538:	20002f10 	.word	0x20002f10

0800f53c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f53c:	b590      	push	{r4, r7, lr}
 800f53e:	b087      	sub	sp, #28
 800f540:	af00      	add	r7, sp, #0
 800f542:	60b9      	str	r1, [r7, #8]
 800f544:	607a      	str	r2, [r7, #4]
 800f546:	603b      	str	r3, [r7, #0]
 800f548:	4603      	mov	r3, r0
 800f54a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f54c:	7bfb      	ldrb	r3, [r7, #15]
 800f54e:	4a0a      	ldr	r2, [pc, #40]	@ (800f578 <disk_write+0x3c>)
 800f550:	009b      	lsls	r3, r3, #2
 800f552:	4413      	add	r3, r2
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	68dc      	ldr	r4, [r3, #12]
 800f558:	7bfb      	ldrb	r3, [r7, #15]
 800f55a:	4a07      	ldr	r2, [pc, #28]	@ (800f578 <disk_write+0x3c>)
 800f55c:	4413      	add	r3, r2
 800f55e:	7a18      	ldrb	r0, [r3, #8]
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	687a      	ldr	r2, [r7, #4]
 800f564:	68b9      	ldr	r1, [r7, #8]
 800f566:	47a0      	blx	r4
 800f568:	4603      	mov	r3, r0
 800f56a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f56c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f56e:	4618      	mov	r0, r3
 800f570:	371c      	adds	r7, #28
 800f572:	46bd      	mov	sp, r7
 800f574:	bd90      	pop	{r4, r7, pc}
 800f576:	bf00      	nop
 800f578:	20002f10 	.word	0x20002f10

0800f57c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	4603      	mov	r3, r0
 800f584:	603a      	str	r2, [r7, #0]
 800f586:	71fb      	strb	r3, [r7, #7]
 800f588:	460b      	mov	r3, r1
 800f58a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f58c:	79fb      	ldrb	r3, [r7, #7]
 800f58e:	4a09      	ldr	r2, [pc, #36]	@ (800f5b4 <disk_ioctl+0x38>)
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	4413      	add	r3, r2
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	691b      	ldr	r3, [r3, #16]
 800f598:	79fa      	ldrb	r2, [r7, #7]
 800f59a:	4906      	ldr	r1, [pc, #24]	@ (800f5b4 <disk_ioctl+0x38>)
 800f59c:	440a      	add	r2, r1
 800f59e:	7a10      	ldrb	r0, [r2, #8]
 800f5a0:	79b9      	ldrb	r1, [r7, #6]
 800f5a2:	683a      	ldr	r2, [r7, #0]
 800f5a4:	4798      	blx	r3
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	73fb      	strb	r3, [r7, #15]
  return res;
 800f5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	20002f10 	.word	0x20002f10

0800f5b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b085      	sub	sp, #20
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f5c8:	89fb      	ldrh	r3, [r7, #14]
 800f5ca:	021b      	lsls	r3, r3, #8
 800f5cc:	b21a      	sxth	r2, r3
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	b21b      	sxth	r3, r3
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	b21b      	sxth	r3, r3
 800f5d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f5da:	89fb      	ldrh	r3, [r7, #14]
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3714      	adds	r7, #20
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr

0800f5e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b085      	sub	sp, #20
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	3303      	adds	r3, #3
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	021b      	lsls	r3, r3, #8
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	3202      	adds	r2, #2
 800f600:	7812      	ldrb	r2, [r2, #0]
 800f602:	4313      	orrs	r3, r2
 800f604:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	021b      	lsls	r3, r3, #8
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	3201      	adds	r2, #1
 800f60e:	7812      	ldrb	r2, [r2, #0]
 800f610:	4313      	orrs	r3, r2
 800f612:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	021b      	lsls	r3, r3, #8
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	7812      	ldrb	r2, [r2, #0]
 800f61c:	4313      	orrs	r3, r2
 800f61e:	60fb      	str	r3, [r7, #12]
	return rv;
 800f620:	68fb      	ldr	r3, [r7, #12]
}
 800f622:	4618      	mov	r0, r3
 800f624:	3714      	adds	r7, #20
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr

0800f62e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f62e:	b480      	push	{r7}
 800f630:	b083      	sub	sp, #12
 800f632:	af00      	add	r7, sp, #0
 800f634:	6078      	str	r0, [r7, #4]
 800f636:	460b      	mov	r3, r1
 800f638:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	1c5a      	adds	r2, r3, #1
 800f63e:	607a      	str	r2, [r7, #4]
 800f640:	887a      	ldrh	r2, [r7, #2]
 800f642:	b2d2      	uxtb	r2, r2
 800f644:	701a      	strb	r2, [r3, #0]
 800f646:	887b      	ldrh	r3, [r7, #2]
 800f648:	0a1b      	lsrs	r3, r3, #8
 800f64a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	1c5a      	adds	r2, r3, #1
 800f650:	607a      	str	r2, [r7, #4]
 800f652:	887a      	ldrh	r2, [r7, #2]
 800f654:	b2d2      	uxtb	r2, r2
 800f656:	701a      	strb	r2, [r3, #0]
}
 800f658:	bf00      	nop
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	1c5a      	adds	r2, r3, #1
 800f672:	607a      	str	r2, [r7, #4]
 800f674:	683a      	ldr	r2, [r7, #0]
 800f676:	b2d2      	uxtb	r2, r2
 800f678:	701a      	strb	r2, [r3, #0]
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	0a1b      	lsrs	r3, r3, #8
 800f67e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	1c5a      	adds	r2, r3, #1
 800f684:	607a      	str	r2, [r7, #4]
 800f686:	683a      	ldr	r2, [r7, #0]
 800f688:	b2d2      	uxtb	r2, r2
 800f68a:	701a      	strb	r2, [r3, #0]
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	0a1b      	lsrs	r3, r3, #8
 800f690:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	1c5a      	adds	r2, r3, #1
 800f696:	607a      	str	r2, [r7, #4]
 800f698:	683a      	ldr	r2, [r7, #0]
 800f69a:	b2d2      	uxtb	r2, r2
 800f69c:	701a      	strb	r2, [r3, #0]
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	0a1b      	lsrs	r3, r3, #8
 800f6a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	1c5a      	adds	r2, r3, #1
 800f6a8:	607a      	str	r2, [r7, #4]
 800f6aa:	683a      	ldr	r2, [r7, #0]
 800f6ac:	b2d2      	uxtb	r2, r2
 800f6ae:	701a      	strb	r2, [r3, #0]
}
 800f6b0:	bf00      	nop
 800f6b2:	370c      	adds	r7, #12
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr

0800f6bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f6bc:	b480      	push	{r7}
 800f6be:	b087      	sub	sp, #28
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d00d      	beq.n	800f6f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f6d6:	693a      	ldr	r2, [r7, #16]
 800f6d8:	1c53      	adds	r3, r2, #1
 800f6da:	613b      	str	r3, [r7, #16]
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	1c59      	adds	r1, r3, #1
 800f6e0:	6179      	str	r1, [r7, #20]
 800f6e2:	7812      	ldrb	r2, [r2, #0]
 800f6e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	3b01      	subs	r3, #1
 800f6ea:	607b      	str	r3, [r7, #4]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d1f1      	bne.n	800f6d6 <mem_cpy+0x1a>
	}
}
 800f6f2:	bf00      	nop
 800f6f4:	371c      	adds	r7, #28
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr

0800f6fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f6fe:	b480      	push	{r7}
 800f700:	b087      	sub	sp, #28
 800f702:	af00      	add	r7, sp, #0
 800f704:	60f8      	str	r0, [r7, #12]
 800f706:	60b9      	str	r1, [r7, #8]
 800f708:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	1c5a      	adds	r2, r3, #1
 800f712:	617a      	str	r2, [r7, #20]
 800f714:	68ba      	ldr	r2, [r7, #8]
 800f716:	b2d2      	uxtb	r2, r2
 800f718:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	3b01      	subs	r3, #1
 800f71e:	607b      	str	r3, [r7, #4]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d1f3      	bne.n	800f70e <mem_set+0x10>
}
 800f726:	bf00      	nop
 800f728:	bf00      	nop
 800f72a:	371c      	adds	r7, #28
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr

0800f734 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f734:	b480      	push	{r7}
 800f736:	b089      	sub	sp, #36	@ 0x24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	61fb      	str	r3, [r7, #28]
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f748:	2300      	movs	r3, #0
 800f74a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	1c5a      	adds	r2, r3, #1
 800f750:	61fa      	str	r2, [r7, #28]
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	4619      	mov	r1, r3
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	1c5a      	adds	r2, r3, #1
 800f75a:	61ba      	str	r2, [r7, #24]
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	1acb      	subs	r3, r1, r3
 800f760:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	3b01      	subs	r3, #1
 800f766:	607b      	str	r3, [r7, #4]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d002      	beq.n	800f774 <mem_cmp+0x40>
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d0eb      	beq.n	800f74c <mem_cmp+0x18>

	return r;
 800f774:	697b      	ldr	r3, [r7, #20]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3724      	adds	r7, #36	@ 0x24
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr

0800f782 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f782:	b480      	push	{r7}
 800f784:	b083      	sub	sp, #12
 800f786:	af00      	add	r7, sp, #0
 800f788:	6078      	str	r0, [r7, #4]
 800f78a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f78c:	e002      	b.n	800f794 <chk_chr+0x12>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	3301      	adds	r3, #1
 800f792:	607b      	str	r3, [r7, #4]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d005      	beq.n	800f7a8 <chk_chr+0x26>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d1f2      	bne.n	800f78e <chk_chr+0xc>
	return *str;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	781b      	ldrb	r3, [r3, #0]
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	370c      	adds	r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr

0800f7b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b085      	sub	sp, #20
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	60bb      	str	r3, [r7, #8]
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	60fb      	str	r3, [r7, #12]
 800f7ca:	e029      	b.n	800f820 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f7cc:	4a27      	ldr	r2, [pc, #156]	@ (800f86c <chk_lock+0xb4>)
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	011b      	lsls	r3, r3, #4
 800f7d2:	4413      	add	r3, r2
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d01d      	beq.n	800f816 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f7da:	4a24      	ldr	r2, [pc, #144]	@ (800f86c <chk_lock+0xb4>)
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	011b      	lsls	r3, r3, #4
 800f7e0:	4413      	add	r3, r2
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d116      	bne.n	800f81a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f7ec:	4a1f      	ldr	r2, [pc, #124]	@ (800f86c <chk_lock+0xb4>)
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	011b      	lsls	r3, r3, #4
 800f7f2:	4413      	add	r3, r2
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	681a      	ldr	r2, [r3, #0]
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d10c      	bne.n	800f81a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f800:	4a1a      	ldr	r2, [pc, #104]	@ (800f86c <chk_lock+0xb4>)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	011b      	lsls	r3, r3, #4
 800f806:	4413      	add	r3, r2
 800f808:	3308      	adds	r3, #8
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f810:	429a      	cmp	r2, r3
 800f812:	d102      	bne.n	800f81a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f814:	e007      	b.n	800f826 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f816:	2301      	movs	r3, #1
 800f818:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	3301      	adds	r3, #1
 800f81e:	60fb      	str	r3, [r7, #12]
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2b01      	cmp	r3, #1
 800f824:	d9d2      	bls.n	800f7cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2b02      	cmp	r3, #2
 800f82a:	d109      	bne.n	800f840 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d102      	bne.n	800f838 <chk_lock+0x80>
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	2b02      	cmp	r3, #2
 800f836:	d101      	bne.n	800f83c <chk_lock+0x84>
 800f838:	2300      	movs	r3, #0
 800f83a:	e010      	b.n	800f85e <chk_lock+0xa6>
 800f83c:	2312      	movs	r3, #18
 800f83e:	e00e      	b.n	800f85e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d108      	bne.n	800f858 <chk_lock+0xa0>
 800f846:	4a09      	ldr	r2, [pc, #36]	@ (800f86c <chk_lock+0xb4>)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	011b      	lsls	r3, r3, #4
 800f84c:	4413      	add	r3, r2
 800f84e:	330c      	adds	r3, #12
 800f850:	881b      	ldrh	r3, [r3, #0]
 800f852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f856:	d101      	bne.n	800f85c <chk_lock+0xa4>
 800f858:	2310      	movs	r3, #16
 800f85a:	e000      	b.n	800f85e <chk_lock+0xa6>
 800f85c:	2300      	movs	r3, #0
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3714      	adds	r7, #20
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop
 800f86c:	20002cf0 	.word	0x20002cf0

0800f870 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f870:	b480      	push	{r7}
 800f872:	b083      	sub	sp, #12
 800f874:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f876:	2300      	movs	r3, #0
 800f878:	607b      	str	r3, [r7, #4]
 800f87a:	e002      	b.n	800f882 <enq_lock+0x12>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	3301      	adds	r3, #1
 800f880:	607b      	str	r3, [r7, #4]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2b01      	cmp	r3, #1
 800f886:	d806      	bhi.n	800f896 <enq_lock+0x26>
 800f888:	4a09      	ldr	r2, [pc, #36]	@ (800f8b0 <enq_lock+0x40>)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	011b      	lsls	r3, r3, #4
 800f88e:	4413      	add	r3, r2
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d1f2      	bne.n	800f87c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2b02      	cmp	r3, #2
 800f89a:	bf14      	ite	ne
 800f89c:	2301      	movne	r3, #1
 800f89e:	2300      	moveq	r3, #0
 800f8a0:	b2db      	uxtb	r3, r3
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	370c      	adds	r7, #12
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr
 800f8ae:	bf00      	nop
 800f8b0:	20002cf0 	.word	0x20002cf0

0800f8b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b085      	sub	sp, #20
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f8be:	2300      	movs	r3, #0
 800f8c0:	60fb      	str	r3, [r7, #12]
 800f8c2:	e01f      	b.n	800f904 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f8c4:	4a41      	ldr	r2, [pc, #260]	@ (800f9cc <inc_lock+0x118>)
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	011b      	lsls	r3, r3, #4
 800f8ca:	4413      	add	r3, r2
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d113      	bne.n	800f8fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f8d6:	4a3d      	ldr	r2, [pc, #244]	@ (800f9cc <inc_lock+0x118>)
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	011b      	lsls	r3, r3, #4
 800f8dc:	4413      	add	r3, r2
 800f8de:	3304      	adds	r3, #4
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d109      	bne.n	800f8fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f8ea:	4a38      	ldr	r2, [pc, #224]	@ (800f9cc <inc_lock+0x118>)
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	011b      	lsls	r3, r3, #4
 800f8f0:	4413      	add	r3, r2
 800f8f2:	3308      	adds	r3, #8
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d006      	beq.n	800f90c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	3301      	adds	r3, #1
 800f902:	60fb      	str	r3, [r7, #12]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2b01      	cmp	r3, #1
 800f908:	d9dc      	bls.n	800f8c4 <inc_lock+0x10>
 800f90a:	e000      	b.n	800f90e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f90c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2b02      	cmp	r3, #2
 800f912:	d132      	bne.n	800f97a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f914:	2300      	movs	r3, #0
 800f916:	60fb      	str	r3, [r7, #12]
 800f918:	e002      	b.n	800f920 <inc_lock+0x6c>
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	3301      	adds	r3, #1
 800f91e:	60fb      	str	r3, [r7, #12]
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2b01      	cmp	r3, #1
 800f924:	d806      	bhi.n	800f934 <inc_lock+0x80>
 800f926:	4a29      	ldr	r2, [pc, #164]	@ (800f9cc <inc_lock+0x118>)
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	011b      	lsls	r3, r3, #4
 800f92c:	4413      	add	r3, r2
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d1f2      	bne.n	800f91a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2b02      	cmp	r3, #2
 800f938:	d101      	bne.n	800f93e <inc_lock+0x8a>
 800f93a:	2300      	movs	r3, #0
 800f93c:	e040      	b.n	800f9c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	4922      	ldr	r1, [pc, #136]	@ (800f9cc <inc_lock+0x118>)
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	011b      	lsls	r3, r3, #4
 800f948:	440b      	add	r3, r1
 800f94a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	689a      	ldr	r2, [r3, #8]
 800f950:	491e      	ldr	r1, [pc, #120]	@ (800f9cc <inc_lock+0x118>)
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	011b      	lsls	r3, r3, #4
 800f956:	440b      	add	r3, r1
 800f958:	3304      	adds	r3, #4
 800f95a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	695a      	ldr	r2, [r3, #20]
 800f960:	491a      	ldr	r1, [pc, #104]	@ (800f9cc <inc_lock+0x118>)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	011b      	lsls	r3, r3, #4
 800f966:	440b      	add	r3, r1
 800f968:	3308      	adds	r3, #8
 800f96a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f96c:	4a17      	ldr	r2, [pc, #92]	@ (800f9cc <inc_lock+0x118>)
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	011b      	lsls	r3, r3, #4
 800f972:	4413      	add	r3, r2
 800f974:	330c      	adds	r3, #12
 800f976:	2200      	movs	r2, #0
 800f978:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d009      	beq.n	800f994 <inc_lock+0xe0>
 800f980:	4a12      	ldr	r2, [pc, #72]	@ (800f9cc <inc_lock+0x118>)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	011b      	lsls	r3, r3, #4
 800f986:	4413      	add	r3, r2
 800f988:	330c      	adds	r3, #12
 800f98a:	881b      	ldrh	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d001      	beq.n	800f994 <inc_lock+0xe0>
 800f990:	2300      	movs	r3, #0
 800f992:	e015      	b.n	800f9c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d108      	bne.n	800f9ac <inc_lock+0xf8>
 800f99a:	4a0c      	ldr	r2, [pc, #48]	@ (800f9cc <inc_lock+0x118>)
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	011b      	lsls	r3, r3, #4
 800f9a0:	4413      	add	r3, r2
 800f9a2:	330c      	adds	r3, #12
 800f9a4:	881b      	ldrh	r3, [r3, #0]
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	b29a      	uxth	r2, r3
 800f9aa:	e001      	b.n	800f9b0 <inc_lock+0xfc>
 800f9ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f9b0:	4906      	ldr	r1, [pc, #24]	@ (800f9cc <inc_lock+0x118>)
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	011b      	lsls	r3, r3, #4
 800f9b6:	440b      	add	r3, r1
 800f9b8:	330c      	adds	r3, #12
 800f9ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	3301      	adds	r3, #1
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3714      	adds	r7, #20
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr
 800f9cc:	20002cf0 	.word	0x20002cf0

0800f9d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b085      	sub	sp, #20
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	3b01      	subs	r3, #1
 800f9dc:	607b      	str	r3, [r7, #4]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d825      	bhi.n	800fa30 <dec_lock+0x60>
		n = Files[i].ctr;
 800f9e4:	4a17      	ldr	r2, [pc, #92]	@ (800fa44 <dec_lock+0x74>)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	011b      	lsls	r3, r3, #4
 800f9ea:	4413      	add	r3, r2
 800f9ec:	330c      	adds	r3, #12
 800f9ee:	881b      	ldrh	r3, [r3, #0]
 800f9f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f9f2:	89fb      	ldrh	r3, [r7, #14]
 800f9f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f9f8:	d101      	bne.n	800f9fe <dec_lock+0x2e>
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f9fe:	89fb      	ldrh	r3, [r7, #14]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d002      	beq.n	800fa0a <dec_lock+0x3a>
 800fa04:	89fb      	ldrh	r3, [r7, #14]
 800fa06:	3b01      	subs	r3, #1
 800fa08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fa0a:	4a0e      	ldr	r2, [pc, #56]	@ (800fa44 <dec_lock+0x74>)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	011b      	lsls	r3, r3, #4
 800fa10:	4413      	add	r3, r2
 800fa12:	330c      	adds	r3, #12
 800fa14:	89fa      	ldrh	r2, [r7, #14]
 800fa16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fa18:	89fb      	ldrh	r3, [r7, #14]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d105      	bne.n	800fa2a <dec_lock+0x5a>
 800fa1e:	4a09      	ldr	r2, [pc, #36]	@ (800fa44 <dec_lock+0x74>)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	011b      	lsls	r3, r3, #4
 800fa24:	4413      	add	r3, r2
 800fa26:	2200      	movs	r2, #0
 800fa28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	737b      	strb	r3, [r7, #13]
 800fa2e:	e001      	b.n	800fa34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fa30:	2302      	movs	r3, #2
 800fa32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fa34:	7b7b      	ldrb	r3, [r7, #13]
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3714      	adds	r7, #20
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	20002cf0 	.word	0x20002cf0

0800fa48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b085      	sub	sp, #20
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fa50:	2300      	movs	r3, #0
 800fa52:	60fb      	str	r3, [r7, #12]
 800fa54:	e010      	b.n	800fa78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fa56:	4a0d      	ldr	r2, [pc, #52]	@ (800fa8c <clear_lock+0x44>)
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	011b      	lsls	r3, r3, #4
 800fa5c:	4413      	add	r3, r2
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d105      	bne.n	800fa72 <clear_lock+0x2a>
 800fa66:	4a09      	ldr	r2, [pc, #36]	@ (800fa8c <clear_lock+0x44>)
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	011b      	lsls	r3, r3, #4
 800fa6c:	4413      	add	r3, r2
 800fa6e:	2200      	movs	r2, #0
 800fa70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	3301      	adds	r3, #1
 800fa76:	60fb      	str	r3, [r7, #12]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2b01      	cmp	r3, #1
 800fa7c:	d9eb      	bls.n	800fa56 <clear_lock+0xe>
	}
}
 800fa7e:	bf00      	nop
 800fa80:	bf00      	nop
 800fa82:	3714      	adds	r7, #20
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr
 800fa8c:	20002cf0 	.word	0x20002cf0

0800fa90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b086      	sub	sp, #24
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	78db      	ldrb	r3, [r3, #3]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d034      	beq.n	800fb0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faa8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	7858      	ldrb	r0, [r3, #1]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800fab4:	2301      	movs	r3, #1
 800fab6:	697a      	ldr	r2, [r7, #20]
 800fab8:	f7ff fd40 	bl	800f53c <disk_write>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d002      	beq.n	800fac8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fac2:	2301      	movs	r3, #1
 800fac4:	73fb      	strb	r3, [r7, #15]
 800fac6:	e022      	b.n	800fb0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fad2:	697a      	ldr	r2, [r7, #20]
 800fad4:	1ad2      	subs	r2, r2, r3
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6a1b      	ldr	r3, [r3, #32]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d217      	bcs.n	800fb0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	789b      	ldrb	r3, [r3, #2]
 800fae2:	613b      	str	r3, [r7, #16]
 800fae4:	e010      	b.n	800fb08 <sync_window+0x78>
					wsect += fs->fsize;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6a1b      	ldr	r3, [r3, #32]
 800faea:	697a      	ldr	r2, [r7, #20]
 800faec:	4413      	add	r3, r2
 800faee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	7858      	ldrb	r0, [r3, #1]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800fafa:	2301      	movs	r3, #1
 800fafc:	697a      	ldr	r2, [r7, #20]
 800fafe:	f7ff fd1d 	bl	800f53c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	3b01      	subs	r3, #1
 800fb06:	613b      	str	r3, [r7, #16]
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	d8eb      	bhi.n	800fae6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3718      	adds	r7, #24
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fb22:	2300      	movs	r3, #0
 800fb24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb2a:	683a      	ldr	r2, [r7, #0]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d01b      	beq.n	800fb68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f7ff ffad 	bl	800fa90 <sync_window>
 800fb36:	4603      	mov	r3, r0
 800fb38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fb3a:	7bfb      	ldrb	r3, [r7, #15]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d113      	bne.n	800fb68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	7858      	ldrb	r0, [r3, #1]
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	683a      	ldr	r2, [r7, #0]
 800fb4e:	f7ff fcd5 	bl	800f4fc <disk_read>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d004      	beq.n	800fb62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fb58:	f04f 33ff 	mov.w	r3, #4294967295
 800fb5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fb5e:	2301      	movs	r3, #1
 800fb60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	683a      	ldr	r2, [r7, #0]
 800fb66:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800fb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3710      	adds	r7, #16
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}
	...

0800fb74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f7ff ff87 	bl	800fa90 <sync_window>
 800fb82:	4603      	mov	r3, r0
 800fb84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fb86:	7bfb      	ldrb	r3, [r7, #15]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d159      	bne.n	800fc40 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	2b03      	cmp	r3, #3
 800fb92:	d149      	bne.n	800fc28 <sync_fs+0xb4>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	791b      	ldrb	r3, [r3, #4]
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d145      	bne.n	800fc28 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	899b      	ldrh	r3, [r3, #12]
 800fba6:	461a      	mov	r2, r3
 800fba8:	2100      	movs	r1, #0
 800fbaa:	f7ff fda8 	bl	800f6fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	3338      	adds	r3, #56	@ 0x38
 800fbb2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fbb6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7ff fd37 	bl	800f62e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	3338      	adds	r3, #56	@ 0x38
 800fbc4:	4921      	ldr	r1, [pc, #132]	@ (800fc4c <sync_fs+0xd8>)
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7ff fd4c 	bl	800f664 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	3338      	adds	r3, #56	@ 0x38
 800fbd0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fbd4:	491e      	ldr	r1, [pc, #120]	@ (800fc50 <sync_fs+0xdc>)
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7ff fd44 	bl	800f664 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	3338      	adds	r3, #56	@ 0x38
 800fbe0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	699b      	ldr	r3, [r3, #24]
 800fbe8:	4619      	mov	r1, r3
 800fbea:	4610      	mov	r0, r2
 800fbec:	f7ff fd3a 	bl	800f664 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	3338      	adds	r3, #56	@ 0x38
 800fbf4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	695b      	ldr	r3, [r3, #20]
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	4610      	mov	r0, r2
 800fc00:	f7ff fd30 	bl	800f664 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc08:	1c5a      	adds	r2, r3, #1
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	7858      	ldrb	r0, [r3, #1]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	f7ff fc8d 	bl	800f53c <disk_write>
			fs->fsi_flag = 0;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2200      	movs	r2, #0
 800fc26:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	785b      	ldrb	r3, [r3, #1]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	2100      	movs	r1, #0
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7ff fca3 	bl	800f57c <disk_ioctl>
 800fc36:	4603      	mov	r3, r0
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d001      	beq.n	800fc40 <sync_fs+0xcc>
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fc40:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	41615252 	.word	0x41615252
 800fc50:	61417272 	.word	0x61417272

0800fc54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	3b02      	subs	r3, #2
 800fc62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	69db      	ldr	r3, [r3, #28]
 800fc68:	3b02      	subs	r3, #2
 800fc6a:	683a      	ldr	r2, [r7, #0]
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d301      	bcc.n	800fc74 <clust2sect+0x20>
 800fc70:	2300      	movs	r3, #0
 800fc72:	e008      	b.n	800fc86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	895b      	ldrh	r3, [r3, #10]
 800fc78:	461a      	mov	r2, r3
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	fb03 f202 	mul.w	r2, r3, r2
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc84:	4413      	add	r3, r2
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	370c      	adds	r7, #12
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr

0800fc92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b086      	sub	sp, #24
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
 800fc9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d904      	bls.n	800fcb2 <get_fat+0x20>
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	69db      	ldr	r3, [r3, #28]
 800fcac:	683a      	ldr	r2, [r7, #0]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d302      	bcc.n	800fcb8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	617b      	str	r3, [r7, #20]
 800fcb6:	e0ba      	b.n	800fe2e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fcb8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcbc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	2b03      	cmp	r3, #3
 800fcc4:	f000 8082 	beq.w	800fdcc <get_fat+0x13a>
 800fcc8:	2b03      	cmp	r3, #3
 800fcca:	f300 80a6 	bgt.w	800fe1a <get_fat+0x188>
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d002      	beq.n	800fcd8 <get_fat+0x46>
 800fcd2:	2b02      	cmp	r3, #2
 800fcd4:	d055      	beq.n	800fd82 <get_fat+0xf0>
 800fcd6:	e0a0      	b.n	800fe1a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	60fb      	str	r3, [r7, #12]
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	085b      	lsrs	r3, r3, #1
 800fce0:	68fa      	ldr	r2, [r7, #12]
 800fce2:	4413      	add	r3, r2
 800fce4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	899b      	ldrh	r3, [r3, #12]
 800fcee:	4619      	mov	r1, r3
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fcf6:	4413      	add	r3, r2
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	6938      	ldr	r0, [r7, #16]
 800fcfc:	f7ff ff0c 	bl	800fb18 <move_window>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f040 808c 	bne.w	800fe20 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	1c5a      	adds	r2, r3, #1
 800fd0c:	60fa      	str	r2, [r7, #12]
 800fd0e:	693a      	ldr	r2, [r7, #16]
 800fd10:	8992      	ldrh	r2, [r2, #12]
 800fd12:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd16:	fb01 f202 	mul.w	r2, r1, r2
 800fd1a:	1a9b      	subs	r3, r3, r2
 800fd1c:	693a      	ldr	r2, [r7, #16]
 800fd1e:	4413      	add	r3, r2
 800fd20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fd24:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	899b      	ldrh	r3, [r3, #12]
 800fd2e:	4619      	mov	r1, r3
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd36:	4413      	add	r3, r2
 800fd38:	4619      	mov	r1, r3
 800fd3a:	6938      	ldr	r0, [r7, #16]
 800fd3c:	f7ff feec 	bl	800fb18 <move_window>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d16e      	bne.n	800fe24 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	899b      	ldrh	r3, [r3, #12]
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd52:	fb01 f202 	mul.w	r2, r1, r2
 800fd56:	1a9b      	subs	r3, r3, r2
 800fd58:	693a      	ldr	r2, [r7, #16]
 800fd5a:	4413      	add	r3, r2
 800fd5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fd60:	021b      	lsls	r3, r3, #8
 800fd62:	68ba      	ldr	r2, [r7, #8]
 800fd64:	4313      	orrs	r3, r2
 800fd66:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	f003 0301 	and.w	r3, r3, #1
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d002      	beq.n	800fd78 <get_fat+0xe6>
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	091b      	lsrs	r3, r3, #4
 800fd76:	e002      	b.n	800fd7e <get_fat+0xec>
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fd7e:	617b      	str	r3, [r7, #20]
			break;
 800fd80:	e055      	b.n	800fe2e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	899b      	ldrh	r3, [r3, #12]
 800fd8a:	085b      	lsrs	r3, r3, #1
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	4619      	mov	r1, r3
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd96:	4413      	add	r3, r2
 800fd98:	4619      	mov	r1, r3
 800fd9a:	6938      	ldr	r0, [r7, #16]
 800fd9c:	f7ff febc 	bl	800fb18 <move_window>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d140      	bne.n	800fe28 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	005b      	lsls	r3, r3, #1
 800fdb0:	693a      	ldr	r2, [r7, #16]
 800fdb2:	8992      	ldrh	r2, [r2, #12]
 800fdb4:	fbb3 f0f2 	udiv	r0, r3, r2
 800fdb8:	fb00 f202 	mul.w	r2, r0, r2
 800fdbc:	1a9b      	subs	r3, r3, r2
 800fdbe:	440b      	add	r3, r1
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7ff fbf9 	bl	800f5b8 <ld_word>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	617b      	str	r3, [r7, #20]
			break;
 800fdca:	e030      	b.n	800fe2e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	899b      	ldrh	r3, [r3, #12]
 800fdd4:	089b      	lsrs	r3, r3, #2
 800fdd6:	b29b      	uxth	r3, r3
 800fdd8:	4619      	mov	r1, r3
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	fbb3 f3f1 	udiv	r3, r3, r1
 800fde0:	4413      	add	r3, r2
 800fde2:	4619      	mov	r1, r3
 800fde4:	6938      	ldr	r0, [r7, #16]
 800fde6:	f7ff fe97 	bl	800fb18 <move_window>
 800fdea:	4603      	mov	r3, r0
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d11d      	bne.n	800fe2c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	009b      	lsls	r3, r3, #2
 800fdfa:	693a      	ldr	r2, [r7, #16]
 800fdfc:	8992      	ldrh	r2, [r2, #12]
 800fdfe:	fbb3 f0f2 	udiv	r0, r3, r2
 800fe02:	fb00 f202 	mul.w	r2, r0, r2
 800fe06:	1a9b      	subs	r3, r3, r2
 800fe08:	440b      	add	r3, r1
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7ff fbec 	bl	800f5e8 <ld_dword>
 800fe10:	4603      	mov	r3, r0
 800fe12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fe16:	617b      	str	r3, [r7, #20]
			break;
 800fe18:	e009      	b.n	800fe2e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	617b      	str	r3, [r7, #20]
 800fe1e:	e006      	b.n	800fe2e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fe20:	bf00      	nop
 800fe22:	e004      	b.n	800fe2e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fe24:	bf00      	nop
 800fe26:	e002      	b.n	800fe2e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fe28:	bf00      	nop
 800fe2a:	e000      	b.n	800fe2e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fe2c:	bf00      	nop
		}
	}

	return val;
 800fe2e:	697b      	ldr	r3, [r7, #20]
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3718      	adds	r7, #24
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fe38:	b590      	push	{r4, r7, lr}
 800fe3a:	b089      	sub	sp, #36	@ 0x24
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fe44:	2302      	movs	r3, #2
 800fe46:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	f240 8109 	bls.w	8010062 <put_fat+0x22a>
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	69db      	ldr	r3, [r3, #28]
 800fe54:	68ba      	ldr	r2, [r7, #8]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	f080 8103 	bcs.w	8010062 <put_fat+0x22a>
		switch (fs->fs_type) {
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	2b03      	cmp	r3, #3
 800fe62:	f000 80b6 	beq.w	800ffd2 <put_fat+0x19a>
 800fe66:	2b03      	cmp	r3, #3
 800fe68:	f300 80fb 	bgt.w	8010062 <put_fat+0x22a>
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	d003      	beq.n	800fe78 <put_fat+0x40>
 800fe70:	2b02      	cmp	r3, #2
 800fe72:	f000 8083 	beq.w	800ff7c <put_fat+0x144>
 800fe76:	e0f4      	b.n	8010062 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	61bb      	str	r3, [r7, #24]
 800fe7c:	69bb      	ldr	r3, [r7, #24]
 800fe7e:	085b      	lsrs	r3, r3, #1
 800fe80:	69ba      	ldr	r2, [r7, #24]
 800fe82:	4413      	add	r3, r2
 800fe84:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	899b      	ldrh	r3, [r3, #12]
 800fe8e:	4619      	mov	r1, r3
 800fe90:	69bb      	ldr	r3, [r7, #24]
 800fe92:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe96:	4413      	add	r3, r2
 800fe98:	4619      	mov	r1, r3
 800fe9a:	68f8      	ldr	r0, [r7, #12]
 800fe9c:	f7ff fe3c 	bl	800fb18 <move_window>
 800fea0:	4603      	mov	r3, r0
 800fea2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fea4:	7ffb      	ldrb	r3, [r7, #31]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	f040 80d4 	bne.w	8010054 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	1c5a      	adds	r2, r3, #1
 800feb6:	61ba      	str	r2, [r7, #24]
 800feb8:	68fa      	ldr	r2, [r7, #12]
 800feba:	8992      	ldrh	r2, [r2, #12]
 800febc:	fbb3 f0f2 	udiv	r0, r3, r2
 800fec0:	fb00 f202 	mul.w	r2, r0, r2
 800fec4:	1a9b      	subs	r3, r3, r2
 800fec6:	440b      	add	r3, r1
 800fec8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	f003 0301 	and.w	r3, r3, #1
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d00d      	beq.n	800fef0 <put_fat+0xb8>
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	b25b      	sxtb	r3, r3
 800feda:	f003 030f 	and.w	r3, r3, #15
 800fede:	b25a      	sxtb	r2, r3
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	011b      	lsls	r3, r3, #4
 800fee6:	b25b      	sxtb	r3, r3
 800fee8:	4313      	orrs	r3, r2
 800feea:	b25b      	sxtb	r3, r3
 800feec:	b2db      	uxtb	r3, r3
 800feee:	e001      	b.n	800fef4 <put_fat+0xbc>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	697a      	ldr	r2, [r7, #20]
 800fef6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2201      	movs	r2, #1
 800fefc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	899b      	ldrh	r3, [r3, #12]
 800ff06:	4619      	mov	r1, r3
 800ff08:	69bb      	ldr	r3, [r7, #24]
 800ff0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff0e:	4413      	add	r3, r2
 800ff10:	4619      	mov	r1, r3
 800ff12:	68f8      	ldr	r0, [r7, #12]
 800ff14:	f7ff fe00 	bl	800fb18 <move_window>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff1c:	7ffb      	ldrb	r3, [r7, #31]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	f040 809a 	bne.w	8010058 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	899b      	ldrh	r3, [r3, #12]
 800ff2e:	461a      	mov	r2, r3
 800ff30:	69bb      	ldr	r3, [r7, #24]
 800ff32:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff36:	fb00 f202 	mul.w	r2, r0, r2
 800ff3a:	1a9b      	subs	r3, r3, r2
 800ff3c:	440b      	add	r3, r1
 800ff3e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	f003 0301 	and.w	r3, r3, #1
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d003      	beq.n	800ff52 <put_fat+0x11a>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	091b      	lsrs	r3, r3, #4
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	e00e      	b.n	800ff70 <put_fat+0x138>
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	b25b      	sxtb	r3, r3
 800ff58:	f023 030f 	bic.w	r3, r3, #15
 800ff5c:	b25a      	sxtb	r2, r3
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	0a1b      	lsrs	r3, r3, #8
 800ff62:	b25b      	sxtb	r3, r3
 800ff64:	f003 030f 	and.w	r3, r3, #15
 800ff68:	b25b      	sxtb	r3, r3
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	b25b      	sxtb	r3, r3
 800ff6e:	b2db      	uxtb	r3, r3
 800ff70:	697a      	ldr	r2, [r7, #20]
 800ff72:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2201      	movs	r2, #1
 800ff78:	70da      	strb	r2, [r3, #3]
			break;
 800ff7a:	e072      	b.n	8010062 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	899b      	ldrh	r3, [r3, #12]
 800ff84:	085b      	lsrs	r3, r3, #1
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	4619      	mov	r1, r3
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff90:	4413      	add	r3, r2
 800ff92:	4619      	mov	r1, r3
 800ff94:	68f8      	ldr	r0, [r7, #12]
 800ff96:	f7ff fdbf 	bl	800fb18 <move_window>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff9e:	7ffb      	ldrb	r3, [r7, #31]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d15b      	bne.n	801005c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	005b      	lsls	r3, r3, #1
 800ffae:	68fa      	ldr	r2, [r7, #12]
 800ffb0:	8992      	ldrh	r2, [r2, #12]
 800ffb2:	fbb3 f0f2 	udiv	r0, r3, r2
 800ffb6:	fb00 f202 	mul.w	r2, r0, r2
 800ffba:	1a9b      	subs	r3, r3, r2
 800ffbc:	440b      	add	r3, r1
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	b292      	uxth	r2, r2
 800ffc2:	4611      	mov	r1, r2
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7ff fb32 	bl	800f62e <st_word>
			fs->wflag = 1;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2201      	movs	r2, #1
 800ffce:	70da      	strb	r2, [r3, #3]
			break;
 800ffd0:	e047      	b.n	8010062 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	899b      	ldrh	r3, [r3, #12]
 800ffda:	089b      	lsrs	r3, r3, #2
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	4619      	mov	r1, r3
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ffe6:	4413      	add	r3, r2
 800ffe8:	4619      	mov	r1, r3
 800ffea:	68f8      	ldr	r0, [r7, #12]
 800ffec:	f7ff fd94 	bl	800fb18 <move_window>
 800fff0:	4603      	mov	r3, r0
 800fff2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fff4:	7ffb      	ldrb	r3, [r7, #31]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d132      	bne.n	8010060 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	009b      	lsls	r3, r3, #2
 801000a:	68fa      	ldr	r2, [r7, #12]
 801000c:	8992      	ldrh	r2, [r2, #12]
 801000e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010012:	fb00 f202 	mul.w	r2, r0, r2
 8010016:	1a9b      	subs	r3, r3, r2
 8010018:	440b      	add	r3, r1
 801001a:	4618      	mov	r0, r3
 801001c:	f7ff fae4 	bl	800f5e8 <ld_dword>
 8010020:	4603      	mov	r3, r0
 8010022:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010026:	4323      	orrs	r3, r4
 8010028:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	009b      	lsls	r3, r3, #2
 8010034:	68fa      	ldr	r2, [r7, #12]
 8010036:	8992      	ldrh	r2, [r2, #12]
 8010038:	fbb3 f0f2 	udiv	r0, r3, r2
 801003c:	fb00 f202 	mul.w	r2, r0, r2
 8010040:	1a9b      	subs	r3, r3, r2
 8010042:	440b      	add	r3, r1
 8010044:	6879      	ldr	r1, [r7, #4]
 8010046:	4618      	mov	r0, r3
 8010048:	f7ff fb0c 	bl	800f664 <st_dword>
			fs->wflag = 1;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2201      	movs	r2, #1
 8010050:	70da      	strb	r2, [r3, #3]
			break;
 8010052:	e006      	b.n	8010062 <put_fat+0x22a>
			if (res != FR_OK) break;
 8010054:	bf00      	nop
 8010056:	e004      	b.n	8010062 <put_fat+0x22a>
			if (res != FR_OK) break;
 8010058:	bf00      	nop
 801005a:	e002      	b.n	8010062 <put_fat+0x22a>
			if (res != FR_OK) break;
 801005c:	bf00      	nop
 801005e:	e000      	b.n	8010062 <put_fat+0x22a>
			if (res != FR_OK) break;
 8010060:	bf00      	nop
		}
	}
	return res;
 8010062:	7ffb      	ldrb	r3, [r7, #31]
}
 8010064:	4618      	mov	r0, r3
 8010066:	3724      	adds	r7, #36	@ 0x24
 8010068:	46bd      	mov	sp, r7
 801006a:	bd90      	pop	{r4, r7, pc}

0801006c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b088      	sub	sp, #32
 8010070:	af00      	add	r7, sp, #0
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	60b9      	str	r1, [r7, #8]
 8010076:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010078:	2300      	movs	r3, #0
 801007a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	2b01      	cmp	r3, #1
 8010086:	d904      	bls.n	8010092 <remove_chain+0x26>
 8010088:	69bb      	ldr	r3, [r7, #24]
 801008a:	69db      	ldr	r3, [r3, #28]
 801008c:	68ba      	ldr	r2, [r7, #8]
 801008e:	429a      	cmp	r2, r3
 8010090:	d301      	bcc.n	8010096 <remove_chain+0x2a>
 8010092:	2302      	movs	r3, #2
 8010094:	e04b      	b.n	801012e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00c      	beq.n	80100b6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801009c:	f04f 32ff 	mov.w	r2, #4294967295
 80100a0:	6879      	ldr	r1, [r7, #4]
 80100a2:	69b8      	ldr	r0, [r7, #24]
 80100a4:	f7ff fec8 	bl	800fe38 <put_fat>
 80100a8:	4603      	mov	r3, r0
 80100aa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80100ac:	7ffb      	ldrb	r3, [r7, #31]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d001      	beq.n	80100b6 <remove_chain+0x4a>
 80100b2:	7ffb      	ldrb	r3, [r7, #31]
 80100b4:	e03b      	b.n	801012e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80100b6:	68b9      	ldr	r1, [r7, #8]
 80100b8:	68f8      	ldr	r0, [r7, #12]
 80100ba:	f7ff fdea 	bl	800fc92 <get_fat>
 80100be:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d031      	beq.n	801012a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	2b01      	cmp	r3, #1
 80100ca:	d101      	bne.n	80100d0 <remove_chain+0x64>
 80100cc:	2302      	movs	r3, #2
 80100ce:	e02e      	b.n	801012e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100d6:	d101      	bne.n	80100dc <remove_chain+0x70>
 80100d8:	2301      	movs	r3, #1
 80100da:	e028      	b.n	801012e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80100dc:	2200      	movs	r2, #0
 80100de:	68b9      	ldr	r1, [r7, #8]
 80100e0:	69b8      	ldr	r0, [r7, #24]
 80100e2:	f7ff fea9 	bl	800fe38 <put_fat>
 80100e6:	4603      	mov	r3, r0
 80100e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80100ea:	7ffb      	ldrb	r3, [r7, #31]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d001      	beq.n	80100f4 <remove_chain+0x88>
 80100f0:	7ffb      	ldrb	r3, [r7, #31]
 80100f2:	e01c      	b.n	801012e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80100f4:	69bb      	ldr	r3, [r7, #24]
 80100f6:	699a      	ldr	r2, [r3, #24]
 80100f8:	69bb      	ldr	r3, [r7, #24]
 80100fa:	69db      	ldr	r3, [r3, #28]
 80100fc:	3b02      	subs	r3, #2
 80100fe:	429a      	cmp	r2, r3
 8010100:	d20b      	bcs.n	801011a <remove_chain+0xae>
			fs->free_clst++;
 8010102:	69bb      	ldr	r3, [r7, #24]
 8010104:	699b      	ldr	r3, [r3, #24]
 8010106:	1c5a      	adds	r2, r3, #1
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801010c:	69bb      	ldr	r3, [r7, #24]
 801010e:	791b      	ldrb	r3, [r3, #4]
 8010110:	f043 0301 	orr.w	r3, r3, #1
 8010114:	b2da      	uxtb	r2, r3
 8010116:	69bb      	ldr	r3, [r7, #24]
 8010118:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	69db      	ldr	r3, [r3, #28]
 8010122:	68ba      	ldr	r2, [r7, #8]
 8010124:	429a      	cmp	r2, r3
 8010126:	d3c6      	bcc.n	80100b6 <remove_chain+0x4a>
 8010128:	e000      	b.n	801012c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801012a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801012c:	2300      	movs	r3, #0
}
 801012e:	4618      	mov	r0, r3
 8010130:	3720      	adds	r7, #32
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}

08010136 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010136:	b580      	push	{r7, lr}
 8010138:	b088      	sub	sp, #32
 801013a:	af00      	add	r7, sp, #0
 801013c:	6078      	str	r0, [r7, #4]
 801013e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d10d      	bne.n	8010168 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	695b      	ldr	r3, [r3, #20]
 8010150:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010152:	69bb      	ldr	r3, [r7, #24]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d004      	beq.n	8010162 <create_chain+0x2c>
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	69db      	ldr	r3, [r3, #28]
 801015c:	69ba      	ldr	r2, [r7, #24]
 801015e:	429a      	cmp	r2, r3
 8010160:	d31b      	bcc.n	801019a <create_chain+0x64>
 8010162:	2301      	movs	r3, #1
 8010164:	61bb      	str	r3, [r7, #24]
 8010166:	e018      	b.n	801019a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010168:	6839      	ldr	r1, [r7, #0]
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f7ff fd91 	bl	800fc92 <get_fat>
 8010170:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2b01      	cmp	r3, #1
 8010176:	d801      	bhi.n	801017c <create_chain+0x46>
 8010178:	2301      	movs	r3, #1
 801017a:	e070      	b.n	801025e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010182:	d101      	bne.n	8010188 <create_chain+0x52>
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	e06a      	b.n	801025e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	69db      	ldr	r3, [r3, #28]
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	429a      	cmp	r2, r3
 8010190:	d201      	bcs.n	8010196 <create_chain+0x60>
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	e063      	b.n	801025e <create_chain+0x128>
		scl = clst;
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801019a:	69bb      	ldr	r3, [r7, #24]
 801019c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	3301      	adds	r3, #1
 80101a2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	69db      	ldr	r3, [r3, #28]
 80101a8:	69fa      	ldr	r2, [r7, #28]
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d307      	bcc.n	80101be <create_chain+0x88>
				ncl = 2;
 80101ae:	2302      	movs	r3, #2
 80101b0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80101b2:	69fa      	ldr	r2, [r7, #28]
 80101b4:	69bb      	ldr	r3, [r7, #24]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d901      	bls.n	80101be <create_chain+0x88>
 80101ba:	2300      	movs	r3, #0
 80101bc:	e04f      	b.n	801025e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80101be:	69f9      	ldr	r1, [r7, #28]
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f7ff fd66 	bl	800fc92 <get_fat>
 80101c6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00e      	beq.n	80101ec <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d003      	beq.n	80101dc <create_chain+0xa6>
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101da:	d101      	bne.n	80101e0 <create_chain+0xaa>
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	e03e      	b.n	801025e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80101e0:	69fa      	ldr	r2, [r7, #28]
 80101e2:	69bb      	ldr	r3, [r7, #24]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d1da      	bne.n	801019e <create_chain+0x68>
 80101e8:	2300      	movs	r3, #0
 80101ea:	e038      	b.n	801025e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80101ec:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80101ee:	f04f 32ff 	mov.w	r2, #4294967295
 80101f2:	69f9      	ldr	r1, [r7, #28]
 80101f4:	6938      	ldr	r0, [r7, #16]
 80101f6:	f7ff fe1f 	bl	800fe38 <put_fat>
 80101fa:	4603      	mov	r3, r0
 80101fc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80101fe:	7dfb      	ldrb	r3, [r7, #23]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d109      	bne.n	8010218 <create_chain+0xe2>
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d006      	beq.n	8010218 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801020a:	69fa      	ldr	r2, [r7, #28]
 801020c:	6839      	ldr	r1, [r7, #0]
 801020e:	6938      	ldr	r0, [r7, #16]
 8010210:	f7ff fe12 	bl	800fe38 <put_fat>
 8010214:	4603      	mov	r3, r0
 8010216:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010218:	7dfb      	ldrb	r3, [r7, #23]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d116      	bne.n	801024c <create_chain+0x116>
		fs->last_clst = ncl;
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	69fa      	ldr	r2, [r7, #28]
 8010222:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	699a      	ldr	r2, [r3, #24]
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	69db      	ldr	r3, [r3, #28]
 801022c:	3b02      	subs	r3, #2
 801022e:	429a      	cmp	r2, r3
 8010230:	d804      	bhi.n	801023c <create_chain+0x106>
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	699b      	ldr	r3, [r3, #24]
 8010236:	1e5a      	subs	r2, r3, #1
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801023c:	693b      	ldr	r3, [r7, #16]
 801023e:	791b      	ldrb	r3, [r3, #4]
 8010240:	f043 0301 	orr.w	r3, r3, #1
 8010244:	b2da      	uxtb	r2, r3
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	711a      	strb	r2, [r3, #4]
 801024a:	e007      	b.n	801025c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801024c:	7dfb      	ldrb	r3, [r7, #23]
 801024e:	2b01      	cmp	r3, #1
 8010250:	d102      	bne.n	8010258 <create_chain+0x122>
 8010252:	f04f 33ff 	mov.w	r3, #4294967295
 8010256:	e000      	b.n	801025a <create_chain+0x124>
 8010258:	2301      	movs	r3, #1
 801025a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801025c:	69fb      	ldr	r3, [r7, #28]
}
 801025e:	4618      	mov	r0, r3
 8010260:	3720      	adds	r7, #32
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}

08010266 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010266:	b480      	push	{r7}
 8010268:	b087      	sub	sp, #28
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801027a:	3304      	adds	r3, #4
 801027c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	899b      	ldrh	r3, [r3, #12]
 8010282:	461a      	mov	r2, r3
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	fbb3 f3f2 	udiv	r3, r3, r2
 801028a:	68fa      	ldr	r2, [r7, #12]
 801028c:	8952      	ldrh	r2, [r2, #10]
 801028e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010292:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	1d1a      	adds	r2, r3, #4
 8010298:	613a      	str	r2, [r7, #16]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d101      	bne.n	80102a8 <clmt_clust+0x42>
 80102a4:	2300      	movs	r3, #0
 80102a6:	e010      	b.n	80102ca <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80102a8:	697a      	ldr	r2, [r7, #20]
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d307      	bcc.n	80102c0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80102b0:	697a      	ldr	r2, [r7, #20]
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	1ad3      	subs	r3, r2, r3
 80102b6:	617b      	str	r3, [r7, #20]
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	3304      	adds	r3, #4
 80102bc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80102be:	e7e9      	b.n	8010294 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80102c0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	4413      	add	r3, r2
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	371c      	adds	r7, #28
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr

080102d6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80102d6:	b580      	push	{r7, lr}
 80102d8:	b086      	sub	sp, #24
 80102da:	af00      	add	r7, sp, #0
 80102dc:	6078      	str	r0, [r7, #4]
 80102de:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80102ec:	d204      	bcs.n	80102f8 <dir_sdi+0x22>
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	f003 031f 	and.w	r3, r3, #31
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d001      	beq.n	80102fc <dir_sdi+0x26>
		return FR_INT_ERR;
 80102f8:	2302      	movs	r3, #2
 80102fa:	e071      	b.n	80103e0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	683a      	ldr	r2, [r7, #0]
 8010300:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	689b      	ldr	r3, [r3, #8]
 8010306:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d106      	bne.n	801031c <dir_sdi+0x46>
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	2b02      	cmp	r3, #2
 8010314:	d902      	bls.n	801031c <dir_sdi+0x46>
		clst = fs->dirbase;
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801031a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d10c      	bne.n	801033c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	095b      	lsrs	r3, r3, #5
 8010326:	693a      	ldr	r2, [r7, #16]
 8010328:	8912      	ldrh	r2, [r2, #8]
 801032a:	4293      	cmp	r3, r2
 801032c:	d301      	bcc.n	8010332 <dir_sdi+0x5c>
 801032e:	2302      	movs	r3, #2
 8010330:	e056      	b.n	80103e0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	61da      	str	r2, [r3, #28]
 801033a:	e02d      	b.n	8010398 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	895b      	ldrh	r3, [r3, #10]
 8010340:	461a      	mov	r2, r3
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	899b      	ldrh	r3, [r3, #12]
 8010346:	fb02 f303 	mul.w	r3, r2, r3
 801034a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801034c:	e019      	b.n	8010382 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6979      	ldr	r1, [r7, #20]
 8010352:	4618      	mov	r0, r3
 8010354:	f7ff fc9d 	bl	800fc92 <get_fat>
 8010358:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010360:	d101      	bne.n	8010366 <dir_sdi+0x90>
 8010362:	2301      	movs	r3, #1
 8010364:	e03c      	b.n	80103e0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	2b01      	cmp	r3, #1
 801036a:	d904      	bls.n	8010376 <dir_sdi+0xa0>
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	69db      	ldr	r3, [r3, #28]
 8010370:	697a      	ldr	r2, [r7, #20]
 8010372:	429a      	cmp	r2, r3
 8010374:	d301      	bcc.n	801037a <dir_sdi+0xa4>
 8010376:	2302      	movs	r3, #2
 8010378:	e032      	b.n	80103e0 <dir_sdi+0x10a>
			ofs -= csz;
 801037a:	683a      	ldr	r2, [r7, #0]
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	1ad3      	subs	r3, r2, r3
 8010380:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010382:	683a      	ldr	r2, [r7, #0]
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	429a      	cmp	r2, r3
 8010388:	d2e1      	bcs.n	801034e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801038a:	6979      	ldr	r1, [r7, #20]
 801038c:	6938      	ldr	r0, [r7, #16]
 801038e:	f7ff fc61 	bl	800fc54 <clust2sect>
 8010392:	4602      	mov	r2, r0
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	697a      	ldr	r2, [r7, #20]
 801039c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	69db      	ldr	r3, [r3, #28]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d101      	bne.n	80103aa <dir_sdi+0xd4>
 80103a6:	2302      	movs	r3, #2
 80103a8:	e01a      	b.n	80103e0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	69da      	ldr	r2, [r3, #28]
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	899b      	ldrh	r3, [r3, #12]
 80103b2:	4619      	mov	r1, r3
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80103ba:	441a      	add	r2, r3
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	899b      	ldrh	r3, [r3, #12]
 80103ca:	461a      	mov	r2, r3
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80103d2:	fb00 f202 	mul.w	r2, r0, r2
 80103d6:	1a9b      	subs	r3, r3, r2
 80103d8:	18ca      	adds	r2, r1, r3
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80103de:	2300      	movs	r3, #0
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3718      	adds	r7, #24
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b086      	sub	sp, #24
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	695b      	ldr	r3, [r3, #20]
 80103fc:	3320      	adds	r3, #32
 80103fe:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	69db      	ldr	r3, [r3, #28]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d003      	beq.n	8010410 <dir_next+0x28>
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801040e:	d301      	bcc.n	8010414 <dir_next+0x2c>
 8010410:	2304      	movs	r3, #4
 8010412:	e0bb      	b.n	801058c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	899b      	ldrh	r3, [r3, #12]
 8010418:	461a      	mov	r2, r3
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010420:	fb01 f202 	mul.w	r2, r1, r2
 8010424:	1a9b      	subs	r3, r3, r2
 8010426:	2b00      	cmp	r3, #0
 8010428:	f040 809d 	bne.w	8010566 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	69db      	ldr	r3, [r3, #28]
 8010430:	1c5a      	adds	r2, r3, #1
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	699b      	ldr	r3, [r3, #24]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d10b      	bne.n	8010456 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	095b      	lsrs	r3, r3, #5
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	8912      	ldrh	r2, [r2, #8]
 8010446:	4293      	cmp	r3, r2
 8010448:	f0c0 808d 	bcc.w	8010566 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2200      	movs	r2, #0
 8010450:	61da      	str	r2, [r3, #28]
 8010452:	2304      	movs	r3, #4
 8010454:	e09a      	b.n	801058c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	899b      	ldrh	r3, [r3, #12]
 801045a:	461a      	mov	r2, r3
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010462:	68fa      	ldr	r2, [r7, #12]
 8010464:	8952      	ldrh	r2, [r2, #10]
 8010466:	3a01      	subs	r2, #1
 8010468:	4013      	ands	r3, r2
 801046a:	2b00      	cmp	r3, #0
 801046c:	d17b      	bne.n	8010566 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	699b      	ldr	r3, [r3, #24]
 8010474:	4619      	mov	r1, r3
 8010476:	4610      	mov	r0, r2
 8010478:	f7ff fc0b 	bl	800fc92 <get_fat>
 801047c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	2b01      	cmp	r3, #1
 8010482:	d801      	bhi.n	8010488 <dir_next+0xa0>
 8010484:	2302      	movs	r3, #2
 8010486:	e081      	b.n	801058c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801048e:	d101      	bne.n	8010494 <dir_next+0xac>
 8010490:	2301      	movs	r3, #1
 8010492:	e07b      	b.n	801058c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	69db      	ldr	r3, [r3, #28]
 8010498:	697a      	ldr	r2, [r7, #20]
 801049a:	429a      	cmp	r2, r3
 801049c:	d359      	bcc.n	8010552 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d104      	bne.n	80104ae <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	61da      	str	r2, [r3, #28]
 80104aa:	2304      	movs	r3, #4
 80104ac:	e06e      	b.n	801058c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	699b      	ldr	r3, [r3, #24]
 80104b4:	4619      	mov	r1, r3
 80104b6:	4610      	mov	r0, r2
 80104b8:	f7ff fe3d 	bl	8010136 <create_chain>
 80104bc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d101      	bne.n	80104c8 <dir_next+0xe0>
 80104c4:	2307      	movs	r3, #7
 80104c6:	e061      	b.n	801058c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	d101      	bne.n	80104d2 <dir_next+0xea>
 80104ce:	2302      	movs	r3, #2
 80104d0:	e05c      	b.n	801058c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104d8:	d101      	bne.n	80104de <dir_next+0xf6>
 80104da:	2301      	movs	r3, #1
 80104dc:	e056      	b.n	801058c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f7ff fad6 	bl	800fa90 <sync_window>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d001      	beq.n	80104ee <dir_next+0x106>
 80104ea:	2301      	movs	r3, #1
 80104ec:	e04e      	b.n	801058c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	899b      	ldrh	r3, [r3, #12]
 80104f8:	461a      	mov	r2, r3
 80104fa:	2100      	movs	r1, #0
 80104fc:	f7ff f8ff 	bl	800f6fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010500:	2300      	movs	r3, #0
 8010502:	613b      	str	r3, [r7, #16]
 8010504:	6979      	ldr	r1, [r7, #20]
 8010506:	68f8      	ldr	r0, [r7, #12]
 8010508:	f7ff fba4 	bl	800fc54 <clust2sect>
 801050c:	4602      	mov	r2, r0
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	635a      	str	r2, [r3, #52]	@ 0x34
 8010512:	e012      	b.n	801053a <dir_next+0x152>
						fs->wflag = 1;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2201      	movs	r2, #1
 8010518:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f7ff fab8 	bl	800fa90 <sync_window>
 8010520:	4603      	mov	r3, r0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d001      	beq.n	801052a <dir_next+0x142>
 8010526:	2301      	movs	r3, #1
 8010528:	e030      	b.n	801058c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	3301      	adds	r3, #1
 801052e:	613b      	str	r3, [r7, #16]
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010534:	1c5a      	adds	r2, r3, #1
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	635a      	str	r2, [r3, #52]	@ 0x34
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	895b      	ldrh	r3, [r3, #10]
 801053e:	461a      	mov	r2, r3
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	4293      	cmp	r3, r2
 8010544:	d3e6      	bcc.n	8010514 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	1ad2      	subs	r2, r2, r3
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	697a      	ldr	r2, [r7, #20]
 8010556:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010558:	6979      	ldr	r1, [r7, #20]
 801055a:	68f8      	ldr	r0, [r7, #12]
 801055c:	f7ff fb7a 	bl	800fc54 <clust2sect>
 8010560:	4602      	mov	r2, r0
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	68ba      	ldr	r2, [r7, #8]
 801056a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	899b      	ldrh	r3, [r3, #12]
 8010576:	461a      	mov	r2, r3
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	fbb3 f0f2 	udiv	r0, r3, r2
 801057e:	fb00 f202 	mul.w	r2, r0, r2
 8010582:	1a9b      	subs	r3, r3, r2
 8010584:	18ca      	adds	r2, r1, r3
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801058a:	2300      	movs	r3, #0
}
 801058c:	4618      	mov	r0, r3
 801058e:	3718      	adds	r7, #24
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b086      	sub	sp, #24
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80105a4:	2100      	movs	r1, #0
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f7ff fe95 	bl	80102d6 <dir_sdi>
 80105ac:	4603      	mov	r3, r0
 80105ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80105b0:	7dfb      	ldrb	r3, [r7, #23]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d12b      	bne.n	801060e <dir_alloc+0x7a>
		n = 0;
 80105b6:	2300      	movs	r3, #0
 80105b8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	69db      	ldr	r3, [r3, #28]
 80105be:	4619      	mov	r1, r3
 80105c0:	68f8      	ldr	r0, [r7, #12]
 80105c2:	f7ff faa9 	bl	800fb18 <move_window>
 80105c6:	4603      	mov	r3, r0
 80105c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80105ca:	7dfb      	ldrb	r3, [r7, #23]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d11d      	bne.n	801060c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6a1b      	ldr	r3, [r3, #32]
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	2be5      	cmp	r3, #229	@ 0xe5
 80105d8:	d004      	beq.n	80105e4 <dir_alloc+0x50>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6a1b      	ldr	r3, [r3, #32]
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d107      	bne.n	80105f4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	3301      	adds	r3, #1
 80105e8:	613b      	str	r3, [r7, #16]
 80105ea:	693a      	ldr	r2, [r7, #16]
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d102      	bne.n	80105f8 <dir_alloc+0x64>
 80105f2:	e00c      	b.n	801060e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80105f4:	2300      	movs	r3, #0
 80105f6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80105f8:	2101      	movs	r1, #1
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f7ff fef4 	bl	80103e8 <dir_next>
 8010600:	4603      	mov	r3, r0
 8010602:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010604:	7dfb      	ldrb	r3, [r7, #23]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d0d7      	beq.n	80105ba <dir_alloc+0x26>
 801060a:	e000      	b.n	801060e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801060c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801060e:	7dfb      	ldrb	r3, [r7, #23]
 8010610:	2b04      	cmp	r3, #4
 8010612:	d101      	bne.n	8010618 <dir_alloc+0x84>
 8010614:	2307      	movs	r3, #7
 8010616:	75fb      	strb	r3, [r7, #23]
	return res;
 8010618:	7dfb      	ldrb	r3, [r7, #23]
}
 801061a:	4618      	mov	r0, r3
 801061c:	3718      	adds	r7, #24
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010622:	b580      	push	{r7, lr}
 8010624:	b084      	sub	sp, #16
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
 801062a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	331a      	adds	r3, #26
 8010630:	4618      	mov	r0, r3
 8010632:	f7fe ffc1 	bl	800f5b8 <ld_word>
 8010636:	4603      	mov	r3, r0
 8010638:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	2b03      	cmp	r3, #3
 8010640:	d109      	bne.n	8010656 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	3314      	adds	r3, #20
 8010646:	4618      	mov	r0, r3
 8010648:	f7fe ffb6 	bl	800f5b8 <ld_word>
 801064c:	4603      	mov	r3, r0
 801064e:	041b      	lsls	r3, r3, #16
 8010650:	68fa      	ldr	r2, [r7, #12]
 8010652:	4313      	orrs	r3, r2
 8010654:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010656:	68fb      	ldr	r3, [r7, #12]
}
 8010658:	4618      	mov	r0, r3
 801065a:	3710      	adds	r7, #16
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b084      	sub	sp, #16
 8010664:	af00      	add	r7, sp, #0
 8010666:	60f8      	str	r0, [r7, #12]
 8010668:	60b9      	str	r1, [r7, #8]
 801066a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	331a      	adds	r3, #26
 8010670:	687a      	ldr	r2, [r7, #4]
 8010672:	b292      	uxth	r2, r2
 8010674:	4611      	mov	r1, r2
 8010676:	4618      	mov	r0, r3
 8010678:	f7fe ffd9 	bl	800f62e <st_word>
	if (fs->fs_type == FS_FAT32) {
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	2b03      	cmp	r3, #3
 8010682:	d109      	bne.n	8010698 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	f103 0214 	add.w	r2, r3, #20
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	0c1b      	lsrs	r3, r3, #16
 801068e:	b29b      	uxth	r3, r3
 8010690:	4619      	mov	r1, r3
 8010692:	4610      	mov	r0, r2
 8010694:	f7fe ffcb 	bl	800f62e <st_word>
	}
}
 8010698:	bf00      	nop
 801069a:	3710      	adds	r7, #16
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80106a0:	b590      	push	{r4, r7, lr}
 80106a2:	b087      	sub	sp, #28
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	331a      	adds	r3, #26
 80106ae:	4618      	mov	r0, r3
 80106b0:	f7fe ff82 	bl	800f5b8 <ld_word>
 80106b4:	4603      	mov	r3, r0
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d001      	beq.n	80106be <cmp_lfn+0x1e>
 80106ba:	2300      	movs	r3, #0
 80106bc:	e059      	b.n	8010772 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80106c6:	1e5a      	subs	r2, r3, #1
 80106c8:	4613      	mov	r3, r2
 80106ca:	005b      	lsls	r3, r3, #1
 80106cc:	4413      	add	r3, r2
 80106ce:	009b      	lsls	r3, r3, #2
 80106d0:	4413      	add	r3, r2
 80106d2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80106d4:	2301      	movs	r3, #1
 80106d6:	81fb      	strh	r3, [r7, #14]
 80106d8:	2300      	movs	r3, #0
 80106da:	613b      	str	r3, [r7, #16]
 80106dc:	e033      	b.n	8010746 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80106de:	4a27      	ldr	r2, [pc, #156]	@ (801077c <cmp_lfn+0xdc>)
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	4413      	add	r3, r2
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	461a      	mov	r2, r3
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	4413      	add	r3, r2
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7fe ff63 	bl	800f5b8 <ld_word>
 80106f2:	4603      	mov	r3, r0
 80106f4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80106f6:	89fb      	ldrh	r3, [r7, #14]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d01a      	beq.n	8010732 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	2bfe      	cmp	r3, #254	@ 0xfe
 8010700:	d812      	bhi.n	8010728 <cmp_lfn+0x88>
 8010702:	89bb      	ldrh	r3, [r7, #12]
 8010704:	4618      	mov	r0, r3
 8010706:	f002 f831 	bl	801276c <ff_wtoupper>
 801070a:	4603      	mov	r3, r0
 801070c:	461c      	mov	r4, r3
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	1c5a      	adds	r2, r3, #1
 8010712:	617a      	str	r2, [r7, #20]
 8010714:	005b      	lsls	r3, r3, #1
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	4413      	add	r3, r2
 801071a:	881b      	ldrh	r3, [r3, #0]
 801071c:	4618      	mov	r0, r3
 801071e:	f002 f825 	bl	801276c <ff_wtoupper>
 8010722:	4603      	mov	r3, r0
 8010724:	429c      	cmp	r4, r3
 8010726:	d001      	beq.n	801072c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8010728:	2300      	movs	r3, #0
 801072a:	e022      	b.n	8010772 <cmp_lfn+0xd2>
			}
			wc = uc;
 801072c:	89bb      	ldrh	r3, [r7, #12]
 801072e:	81fb      	strh	r3, [r7, #14]
 8010730:	e006      	b.n	8010740 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010732:	89bb      	ldrh	r3, [r7, #12]
 8010734:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010738:	4293      	cmp	r3, r2
 801073a:	d001      	beq.n	8010740 <cmp_lfn+0xa0>
 801073c:	2300      	movs	r3, #0
 801073e:	e018      	b.n	8010772 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	3301      	adds	r3, #1
 8010744:	613b      	str	r3, [r7, #16]
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	2b0c      	cmp	r3, #12
 801074a:	d9c8      	bls.n	80106de <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010754:	2b00      	cmp	r3, #0
 8010756:	d00b      	beq.n	8010770 <cmp_lfn+0xd0>
 8010758:	89fb      	ldrh	r3, [r7, #14]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d008      	beq.n	8010770 <cmp_lfn+0xd0>
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	005b      	lsls	r3, r3, #1
 8010762:	687a      	ldr	r2, [r7, #4]
 8010764:	4413      	add	r3, r2
 8010766:	881b      	ldrh	r3, [r3, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d001      	beq.n	8010770 <cmp_lfn+0xd0>
 801076c:	2300      	movs	r3, #0
 801076e:	e000      	b.n	8010772 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8010770:	2301      	movs	r3, #1
}
 8010772:	4618      	mov	r0, r3
 8010774:	371c      	adds	r7, #28
 8010776:	46bd      	mov	sp, r7
 8010778:	bd90      	pop	{r4, r7, pc}
 801077a:	bf00      	nop
 801077c:	08018b38 	.word	0x08018b38

08010780 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b088      	sub	sp, #32
 8010784:	af00      	add	r7, sp, #0
 8010786:	60f8      	str	r0, [r7, #12]
 8010788:	60b9      	str	r1, [r7, #8]
 801078a:	4611      	mov	r1, r2
 801078c:	461a      	mov	r2, r3
 801078e:	460b      	mov	r3, r1
 8010790:	71fb      	strb	r3, [r7, #7]
 8010792:	4613      	mov	r3, r2
 8010794:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	330d      	adds	r3, #13
 801079a:	79ba      	ldrb	r2, [r7, #6]
 801079c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	330b      	adds	r3, #11
 80107a2:	220f      	movs	r2, #15
 80107a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	330c      	adds	r3, #12
 80107aa:	2200      	movs	r2, #0
 80107ac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	331a      	adds	r3, #26
 80107b2:	2100      	movs	r1, #0
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7fe ff3a 	bl	800f62e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80107ba:	79fb      	ldrb	r3, [r7, #7]
 80107bc:	1e5a      	subs	r2, r3, #1
 80107be:	4613      	mov	r3, r2
 80107c0:	005b      	lsls	r3, r3, #1
 80107c2:	4413      	add	r3, r2
 80107c4:	009b      	lsls	r3, r3, #2
 80107c6:	4413      	add	r3, r2
 80107c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80107ca:	2300      	movs	r3, #0
 80107cc:	82fb      	strh	r3, [r7, #22]
 80107ce:	2300      	movs	r3, #0
 80107d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80107d2:	8afb      	ldrh	r3, [r7, #22]
 80107d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80107d8:	4293      	cmp	r3, r2
 80107da:	d007      	beq.n	80107ec <put_lfn+0x6c>
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	1c5a      	adds	r2, r3, #1
 80107e0:	61fa      	str	r2, [r7, #28]
 80107e2:	005b      	lsls	r3, r3, #1
 80107e4:	68fa      	ldr	r2, [r7, #12]
 80107e6:	4413      	add	r3, r2
 80107e8:	881b      	ldrh	r3, [r3, #0]
 80107ea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80107ec:	4a17      	ldr	r2, [pc, #92]	@ (801084c <put_lfn+0xcc>)
 80107ee:	69bb      	ldr	r3, [r7, #24]
 80107f0:	4413      	add	r3, r2
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	461a      	mov	r2, r3
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	4413      	add	r3, r2
 80107fa:	8afa      	ldrh	r2, [r7, #22]
 80107fc:	4611      	mov	r1, r2
 80107fe:	4618      	mov	r0, r3
 8010800:	f7fe ff15 	bl	800f62e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010804:	8afb      	ldrh	r3, [r7, #22]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d102      	bne.n	8010810 <put_lfn+0x90>
 801080a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801080e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8010810:	69bb      	ldr	r3, [r7, #24]
 8010812:	3301      	adds	r3, #1
 8010814:	61bb      	str	r3, [r7, #24]
 8010816:	69bb      	ldr	r3, [r7, #24]
 8010818:	2b0c      	cmp	r3, #12
 801081a:	d9da      	bls.n	80107d2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801081c:	8afb      	ldrh	r3, [r7, #22]
 801081e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010822:	4293      	cmp	r3, r2
 8010824:	d006      	beq.n	8010834 <put_lfn+0xb4>
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	005b      	lsls	r3, r3, #1
 801082a:	68fa      	ldr	r2, [r7, #12]
 801082c:	4413      	add	r3, r2
 801082e:	881b      	ldrh	r3, [r3, #0]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d103      	bne.n	801083c <put_lfn+0xbc>
 8010834:	79fb      	ldrb	r3, [r7, #7]
 8010836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801083a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	79fa      	ldrb	r2, [r7, #7]
 8010840:	701a      	strb	r2, [r3, #0]
}
 8010842:	bf00      	nop
 8010844:	3720      	adds	r7, #32
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
 801084a:	bf00      	nop
 801084c:	08018b38 	.word	0x08018b38

08010850 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b08c      	sub	sp, #48	@ 0x30
 8010854:	af00      	add	r7, sp, #0
 8010856:	60f8      	str	r0, [r7, #12]
 8010858:	60b9      	str	r1, [r7, #8]
 801085a:	607a      	str	r2, [r7, #4]
 801085c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801085e:	220b      	movs	r2, #11
 8010860:	68b9      	ldr	r1, [r7, #8]
 8010862:	68f8      	ldr	r0, [r7, #12]
 8010864:	f7fe ff2a 	bl	800f6bc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	2b05      	cmp	r3, #5
 801086c:	d92b      	bls.n	80108c6 <gen_numname+0x76>
		sr = seq;
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8010872:	e022      	b.n	80108ba <gen_numname+0x6a>
			wc = *lfn++;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	1c9a      	adds	r2, r3, #2
 8010878:	607a      	str	r2, [r7, #4]
 801087a:	881b      	ldrh	r3, [r3, #0]
 801087c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801087e:	2300      	movs	r3, #0
 8010880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010882:	e017      	b.n	80108b4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	005a      	lsls	r2, r3, #1
 8010888:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801088a:	f003 0301 	and.w	r3, r3, #1
 801088e:	4413      	add	r3, r2
 8010890:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8010892:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010894:	085b      	lsrs	r3, r3, #1
 8010896:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010898:	69fb      	ldr	r3, [r7, #28]
 801089a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d005      	beq.n	80108ae <gen_numname+0x5e>
 80108a2:	69fb      	ldr	r3, [r7, #28]
 80108a4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80108a8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80108ac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80108ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b0:	3301      	adds	r3, #1
 80108b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b6:	2b0f      	cmp	r3, #15
 80108b8:	d9e4      	bls.n	8010884 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	881b      	ldrh	r3, [r3, #0]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d1d8      	bne.n	8010874 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80108c2:	69fb      	ldr	r3, [r7, #28]
 80108c4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80108c6:	2307      	movs	r3, #7
 80108c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	f003 030f 	and.w	r3, r3, #15
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	3330      	adds	r3, #48	@ 0x30
 80108d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80108da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80108de:	2b39      	cmp	r3, #57	@ 0x39
 80108e0:	d904      	bls.n	80108ec <gen_numname+0x9c>
 80108e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80108e6:	3307      	adds	r3, #7
 80108e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80108ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108ee:	1e5a      	subs	r2, r3, #1
 80108f0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80108f2:	3330      	adds	r3, #48	@ 0x30
 80108f4:	443b      	add	r3, r7
 80108f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80108fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	091b      	lsrs	r3, r3, #4
 8010902:	603b      	str	r3, [r7, #0]
	} while (seq);
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d1df      	bne.n	80108ca <gen_numname+0x7a>
	ns[i] = '~';
 801090a:	f107 0214 	add.w	r2, r7, #20
 801090e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010910:	4413      	add	r3, r2
 8010912:	227e      	movs	r2, #126	@ 0x7e
 8010914:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8010916:	2300      	movs	r3, #0
 8010918:	627b      	str	r3, [r7, #36]	@ 0x24
 801091a:	e002      	b.n	8010922 <gen_numname+0xd2>
 801091c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801091e:	3301      	adds	r3, #1
 8010920:	627b      	str	r3, [r7, #36]	@ 0x24
 8010922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010926:	429a      	cmp	r2, r3
 8010928:	d205      	bcs.n	8010936 <gen_numname+0xe6>
 801092a:	68fa      	ldr	r2, [r7, #12]
 801092c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801092e:	4413      	add	r3, r2
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	2b20      	cmp	r3, #32
 8010934:	d1f2      	bne.n	801091c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010938:	2b07      	cmp	r3, #7
 801093a:	d807      	bhi.n	801094c <gen_numname+0xfc>
 801093c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801093e:	1c5a      	adds	r2, r3, #1
 8010940:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010942:	3330      	adds	r3, #48	@ 0x30
 8010944:	443b      	add	r3, r7
 8010946:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801094a:	e000      	b.n	801094e <gen_numname+0xfe>
 801094c:	2120      	movs	r1, #32
 801094e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010950:	1c5a      	adds	r2, r3, #1
 8010952:	627a      	str	r2, [r7, #36]	@ 0x24
 8010954:	68fa      	ldr	r2, [r7, #12]
 8010956:	4413      	add	r3, r2
 8010958:	460a      	mov	r2, r1
 801095a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801095c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801095e:	2b07      	cmp	r3, #7
 8010960:	d9e9      	bls.n	8010936 <gen_numname+0xe6>
}
 8010962:	bf00      	nop
 8010964:	bf00      	nop
 8010966:	3730      	adds	r7, #48	@ 0x30
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801096c:	b480      	push	{r7}
 801096e:	b085      	sub	sp, #20
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8010974:	2300      	movs	r3, #0
 8010976:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8010978:	230b      	movs	r3, #11
 801097a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801097c:	7bfb      	ldrb	r3, [r7, #15]
 801097e:	b2da      	uxtb	r2, r3
 8010980:	0852      	lsrs	r2, r2, #1
 8010982:	01db      	lsls	r3, r3, #7
 8010984:	4313      	orrs	r3, r2
 8010986:	b2da      	uxtb	r2, r3
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	1c59      	adds	r1, r3, #1
 801098c:	6079      	str	r1, [r7, #4]
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	4413      	add	r3, r2
 8010992:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	3b01      	subs	r3, #1
 8010998:	60bb      	str	r3, [r7, #8]
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d1ed      	bne.n	801097c <sum_sfn+0x10>
	return sum;
 80109a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3714      	adds	r7, #20
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr

080109ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b086      	sub	sp, #24
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80109bc:	2100      	movs	r1, #0
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f7ff fc89 	bl	80102d6 <dir_sdi>
 80109c4:	4603      	mov	r3, r0
 80109c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80109c8:	7dfb      	ldrb	r3, [r7, #23]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d001      	beq.n	80109d2 <dir_find+0x24>
 80109ce:	7dfb      	ldrb	r3, [r7, #23]
 80109d0:	e0a9      	b.n	8010b26 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80109d2:	23ff      	movs	r3, #255	@ 0xff
 80109d4:	753b      	strb	r3, [r7, #20]
 80109d6:	7d3b      	ldrb	r3, [r7, #20]
 80109d8:	757b      	strb	r3, [r7, #21]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f04f 32ff 	mov.w	r2, #4294967295
 80109e0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	69db      	ldr	r3, [r3, #28]
 80109e6:	4619      	mov	r1, r3
 80109e8:	6938      	ldr	r0, [r7, #16]
 80109ea:	f7ff f895 	bl	800fb18 <move_window>
 80109ee:	4603      	mov	r3, r0
 80109f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80109f2:	7dfb      	ldrb	r3, [r7, #23]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	f040 8090 	bne.w	8010b1a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6a1b      	ldr	r3, [r3, #32]
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010a02:	7dbb      	ldrb	r3, [r7, #22]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d102      	bne.n	8010a0e <dir_find+0x60>
 8010a08:	2304      	movs	r3, #4
 8010a0a:	75fb      	strb	r3, [r7, #23]
 8010a0c:	e08a      	b.n	8010b24 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6a1b      	ldr	r3, [r3, #32]
 8010a12:	330b      	adds	r3, #11
 8010a14:	781b      	ldrb	r3, [r3, #0]
 8010a16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010a1a:	73fb      	strb	r3, [r7, #15]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	7bfa      	ldrb	r2, [r7, #15]
 8010a20:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010a22:	7dbb      	ldrb	r3, [r7, #22]
 8010a24:	2be5      	cmp	r3, #229	@ 0xe5
 8010a26:	d007      	beq.n	8010a38 <dir_find+0x8a>
 8010a28:	7bfb      	ldrb	r3, [r7, #15]
 8010a2a:	f003 0308 	and.w	r3, r3, #8
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d009      	beq.n	8010a46 <dir_find+0x98>
 8010a32:	7bfb      	ldrb	r3, [r7, #15]
 8010a34:	2b0f      	cmp	r3, #15
 8010a36:	d006      	beq.n	8010a46 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010a38:	23ff      	movs	r3, #255	@ 0xff
 8010a3a:	757b      	strb	r3, [r7, #21]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a42:	631a      	str	r2, [r3, #48]	@ 0x30
 8010a44:	e05e      	b.n	8010b04 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010a46:	7bfb      	ldrb	r3, [r7, #15]
 8010a48:	2b0f      	cmp	r3, #15
 8010a4a:	d136      	bne.n	8010aba <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d154      	bne.n	8010b04 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010a5a:	7dbb      	ldrb	r3, [r7, #22]
 8010a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d00d      	beq.n	8010a80 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6a1b      	ldr	r3, [r3, #32]
 8010a68:	7b5b      	ldrb	r3, [r3, #13]
 8010a6a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010a6c:	7dbb      	ldrb	r3, [r7, #22]
 8010a6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a72:	75bb      	strb	r3, [r7, #22]
 8010a74:	7dbb      	ldrb	r3, [r7, #22]
 8010a76:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	695a      	ldr	r2, [r3, #20]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010a80:	7dba      	ldrb	r2, [r7, #22]
 8010a82:	7d7b      	ldrb	r3, [r7, #21]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d115      	bne.n	8010ab4 <dir_find+0x106>
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6a1b      	ldr	r3, [r3, #32]
 8010a8c:	330d      	adds	r3, #13
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	7d3a      	ldrb	r2, [r7, #20]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d10e      	bne.n	8010ab4 <dir_find+0x106>
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	691a      	ldr	r2, [r3, #16]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6a1b      	ldr	r3, [r3, #32]
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	4610      	mov	r0, r2
 8010aa2:	f7ff fdfd 	bl	80106a0 <cmp_lfn>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d003      	beq.n	8010ab4 <dir_find+0x106>
 8010aac:	7d7b      	ldrb	r3, [r7, #21]
 8010aae:	3b01      	subs	r3, #1
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	e000      	b.n	8010ab6 <dir_find+0x108>
 8010ab4:	23ff      	movs	r3, #255	@ 0xff
 8010ab6:	757b      	strb	r3, [r7, #21]
 8010ab8:	e024      	b.n	8010b04 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010aba:	7d7b      	ldrb	r3, [r7, #21]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d109      	bne.n	8010ad4 <dir_find+0x126>
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6a1b      	ldr	r3, [r3, #32]
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7ff ff51 	bl	801096c <sum_sfn>
 8010aca:	4603      	mov	r3, r0
 8010acc:	461a      	mov	r2, r3
 8010ace:	7d3b      	ldrb	r3, [r7, #20]
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d024      	beq.n	8010b1e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010ada:	f003 0301 	and.w	r3, r3, #1
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d10a      	bne.n	8010af8 <dir_find+0x14a>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	6a18      	ldr	r0, [r3, #32]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	3324      	adds	r3, #36	@ 0x24
 8010aea:	220b      	movs	r2, #11
 8010aec:	4619      	mov	r1, r3
 8010aee:	f7fe fe21 	bl	800f734 <mem_cmp>
 8010af2:	4603      	mov	r3, r0
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d014      	beq.n	8010b22 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010af8:	23ff      	movs	r3, #255	@ 0xff
 8010afa:	757b      	strb	r3, [r7, #21]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f04f 32ff 	mov.w	r2, #4294967295
 8010b02:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010b04:	2100      	movs	r1, #0
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f7ff fc6e 	bl	80103e8 <dir_next>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010b10:	7dfb      	ldrb	r3, [r7, #23]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	f43f af65 	beq.w	80109e2 <dir_find+0x34>
 8010b18:	e004      	b.n	8010b24 <dir_find+0x176>
		if (res != FR_OK) break;
 8010b1a:	bf00      	nop
 8010b1c:	e002      	b.n	8010b24 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010b1e:	bf00      	nop
 8010b20:	e000      	b.n	8010b24 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010b22:	bf00      	nop

	return res;
 8010b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3718      	adds	r7, #24
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
	...

08010b30 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b08c      	sub	sp, #48	@ 0x30
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010b44:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d001      	beq.n	8010b50 <dir_register+0x20>
 8010b4c:	2306      	movs	r3, #6
 8010b4e:	e0e0      	b.n	8010d12 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010b50:	2300      	movs	r3, #0
 8010b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b54:	e002      	b.n	8010b5c <dir_register+0x2c>
 8010b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b58:	3301      	adds	r3, #1
 8010b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	691a      	ldr	r2, [r3, #16]
 8010b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b62:	005b      	lsls	r3, r3, #1
 8010b64:	4413      	add	r3, r2
 8010b66:	881b      	ldrh	r3, [r3, #0]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d1f4      	bne.n	8010b56 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8010b72:	f107 030c 	add.w	r3, r7, #12
 8010b76:	220c      	movs	r2, #12
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fe fd9f 	bl	800f6bc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010b7e:	7dfb      	ldrb	r3, [r7, #23]
 8010b80:	f003 0301 	and.w	r3, r3, #1
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d032      	beq.n	8010bee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2240      	movs	r2, #64	@ 0x40
 8010b8c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8010b90:	2301      	movs	r3, #1
 8010b92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b94:	e016      	b.n	8010bc4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	691a      	ldr	r2, [r3, #16]
 8010ba0:	f107 010c 	add.w	r1, r7, #12
 8010ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ba6:	f7ff fe53 	bl	8010850 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f7ff feff 	bl	80109ae <dir_find>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8010bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d106      	bne.n	8010bcc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8010bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bc0:	3301      	adds	r3, #1
 8010bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bc6:	2b63      	cmp	r3, #99	@ 0x63
 8010bc8:	d9e5      	bls.n	8010b96 <dir_register+0x66>
 8010bca:	e000      	b.n	8010bce <dir_register+0x9e>
			if (res != FR_OK) break;
 8010bcc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bd0:	2b64      	cmp	r3, #100	@ 0x64
 8010bd2:	d101      	bne.n	8010bd8 <dir_register+0xa8>
 8010bd4:	2307      	movs	r3, #7
 8010bd6:	e09c      	b.n	8010d12 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010bdc:	2b04      	cmp	r3, #4
 8010bde:	d002      	beq.n	8010be6 <dir_register+0xb6>
 8010be0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010be4:	e095      	b.n	8010d12 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010be6:	7dfa      	ldrb	r2, [r7, #23]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010bee:	7dfb      	ldrb	r3, [r7, #23]
 8010bf0:	f003 0302 	and.w	r3, r3, #2
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d007      	beq.n	8010c08 <dir_register+0xd8>
 8010bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bfa:	330c      	adds	r3, #12
 8010bfc:	4a47      	ldr	r2, [pc, #284]	@ (8010d1c <dir_register+0x1ec>)
 8010bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8010c02:	089b      	lsrs	r3, r3, #2
 8010c04:	3301      	adds	r3, #1
 8010c06:	e000      	b.n	8010c0a <dir_register+0xda>
 8010c08:	2301      	movs	r3, #1
 8010c0a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010c0c:	6a39      	ldr	r1, [r7, #32]
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f7ff fcc0 	bl	8010594 <dir_alloc>
 8010c14:	4603      	mov	r3, r0
 8010c16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d148      	bne.n	8010cb4 <dir_register+0x184>
 8010c22:	6a3b      	ldr	r3, [r7, #32]
 8010c24:	3b01      	subs	r3, #1
 8010c26:	623b      	str	r3, [r7, #32]
 8010c28:	6a3b      	ldr	r3, [r7, #32]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d042      	beq.n	8010cb4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	695a      	ldr	r2, [r3, #20]
 8010c32:	6a3b      	ldr	r3, [r7, #32]
 8010c34:	015b      	lsls	r3, r3, #5
 8010c36:	1ad3      	subs	r3, r2, r3
 8010c38:	4619      	mov	r1, r3
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f7ff fb4b 	bl	80102d6 <dir_sdi>
 8010c40:	4603      	mov	r3, r0
 8010c42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010c46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d132      	bne.n	8010cb4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	3324      	adds	r3, #36	@ 0x24
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7ff fe8a 	bl	801096c <sum_sfn>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	69db      	ldr	r3, [r3, #28]
 8010c60:	4619      	mov	r1, r3
 8010c62:	69f8      	ldr	r0, [r7, #28]
 8010c64:	f7fe ff58 	bl	800fb18 <move_window>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8010c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d11d      	bne.n	8010cb2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010c76:	69fb      	ldr	r3, [r7, #28]
 8010c78:	6918      	ldr	r0, [r3, #16]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6a19      	ldr	r1, [r3, #32]
 8010c7e:	6a3b      	ldr	r3, [r7, #32]
 8010c80:	b2da      	uxtb	r2, r3
 8010c82:	7efb      	ldrb	r3, [r7, #27]
 8010c84:	f7ff fd7c 	bl	8010780 <put_lfn>
				fs->wflag = 1;
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010c8e:	2100      	movs	r1, #0
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f7ff fba9 	bl	80103e8 <dir_next>
 8010c96:	4603      	mov	r3, r0
 8010c98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8010c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d107      	bne.n	8010cb4 <dir_register+0x184>
 8010ca4:	6a3b      	ldr	r3, [r7, #32]
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	623b      	str	r3, [r7, #32]
 8010caa:	6a3b      	ldr	r3, [r7, #32]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d1d5      	bne.n	8010c5c <dir_register+0x12c>
 8010cb0:	e000      	b.n	8010cb4 <dir_register+0x184>
				if (res != FR_OK) break;
 8010cb2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d128      	bne.n	8010d0e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	69db      	ldr	r3, [r3, #28]
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	69f8      	ldr	r0, [r7, #28]
 8010cc4:	f7fe ff28 	bl	800fb18 <move_window>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010cce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d11b      	bne.n	8010d0e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6a1b      	ldr	r3, [r3, #32]
 8010cda:	2220      	movs	r2, #32
 8010cdc:	2100      	movs	r1, #0
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7fe fd0d 	bl	800f6fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6a18      	ldr	r0, [r3, #32]
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	3324      	adds	r3, #36	@ 0x24
 8010cec:	220b      	movs	r2, #11
 8010cee:	4619      	mov	r1, r3
 8010cf0:	f7fe fce4 	bl	800f6bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6a1b      	ldr	r3, [r3, #32]
 8010cfe:	330c      	adds	r3, #12
 8010d00:	f002 0218 	and.w	r2, r2, #24
 8010d04:	b2d2      	uxtb	r2, r2
 8010d06:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010d08:	69fb      	ldr	r3, [r7, #28]
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3730      	adds	r7, #48	@ 0x30
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	4ec4ec4f 	.word	0x4ec4ec4f

08010d20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b08a      	sub	sp, #40	@ 0x28
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	613b      	str	r3, [r7, #16]
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	691b      	ldr	r3, [r3, #16]
 8010d36:	60fb      	str	r3, [r7, #12]
 8010d38:	2300      	movs	r3, #0
 8010d3a:	617b      	str	r3, [r7, #20]
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010d40:	69bb      	ldr	r3, [r7, #24]
 8010d42:	1c5a      	adds	r2, r3, #1
 8010d44:	61ba      	str	r2, [r7, #24]
 8010d46:	693a      	ldr	r2, [r7, #16]
 8010d48:	4413      	add	r3, r2
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8010d4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d50:	2b1f      	cmp	r3, #31
 8010d52:	d940      	bls.n	8010dd6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010d54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d56:	2b2f      	cmp	r3, #47	@ 0x2f
 8010d58:	d006      	beq.n	8010d68 <create_name+0x48>
 8010d5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8010d5e:	d110      	bne.n	8010d82 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010d60:	e002      	b.n	8010d68 <create_name+0x48>
 8010d62:	69bb      	ldr	r3, [r7, #24]
 8010d64:	3301      	adds	r3, #1
 8010d66:	61bb      	str	r3, [r7, #24]
 8010d68:	693a      	ldr	r2, [r7, #16]
 8010d6a:	69bb      	ldr	r3, [r7, #24]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	781b      	ldrb	r3, [r3, #0]
 8010d70:	2b2f      	cmp	r3, #47	@ 0x2f
 8010d72:	d0f6      	beq.n	8010d62 <create_name+0x42>
 8010d74:	693a      	ldr	r2, [r7, #16]
 8010d76:	69bb      	ldr	r3, [r7, #24]
 8010d78:	4413      	add	r3, r2
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	2b5c      	cmp	r3, #92	@ 0x5c
 8010d7e:	d0f0      	beq.n	8010d62 <create_name+0x42>
			break;
 8010d80:	e02a      	b.n	8010dd8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	2bfe      	cmp	r3, #254	@ 0xfe
 8010d86:	d901      	bls.n	8010d8c <create_name+0x6c>
 8010d88:	2306      	movs	r3, #6
 8010d8a:	e17d      	b.n	8011088 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010d8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d8e:	b2db      	uxtb	r3, r3
 8010d90:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010d92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d94:	2101      	movs	r1, #1
 8010d96:	4618      	mov	r0, r3
 8010d98:	f001 fcac 	bl	80126f4 <ff_convert>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010da0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d101      	bne.n	8010daa <create_name+0x8a>
 8010da6:	2306      	movs	r3, #6
 8010da8:	e16e      	b.n	8011088 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010daa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010dac:	2b7f      	cmp	r3, #127	@ 0x7f
 8010dae:	d809      	bhi.n	8010dc4 <create_name+0xa4>
 8010db0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010db2:	4619      	mov	r1, r3
 8010db4:	488d      	ldr	r0, [pc, #564]	@ (8010fec <create_name+0x2cc>)
 8010db6:	f7fe fce4 	bl	800f782 <chk_chr>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d001      	beq.n	8010dc4 <create_name+0xa4>
 8010dc0:	2306      	movs	r3, #6
 8010dc2:	e161      	b.n	8011088 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	1c5a      	adds	r2, r3, #1
 8010dc8:	617a      	str	r2, [r7, #20]
 8010dca:	005b      	lsls	r3, r3, #1
 8010dcc:	68fa      	ldr	r2, [r7, #12]
 8010dce:	4413      	add	r3, r2
 8010dd0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010dd2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010dd4:	e7b4      	b.n	8010d40 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010dd6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010dd8:	693a      	ldr	r2, [r7, #16]
 8010dda:	69bb      	ldr	r3, [r7, #24]
 8010ddc:	441a      	add	r2, r3
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010de2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010de4:	2b1f      	cmp	r3, #31
 8010de6:	d801      	bhi.n	8010dec <create_name+0xcc>
 8010de8:	2304      	movs	r3, #4
 8010dea:	e000      	b.n	8010dee <create_name+0xce>
 8010dec:	2300      	movs	r3, #0
 8010dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010df2:	e011      	b.n	8010e18 <create_name+0xf8>
		w = lfn[di - 1];
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010dfa:	3b01      	subs	r3, #1
 8010dfc:	005b      	lsls	r3, r3, #1
 8010dfe:	68fa      	ldr	r2, [r7, #12]
 8010e00:	4413      	add	r3, r2
 8010e02:	881b      	ldrh	r3, [r3, #0]
 8010e04:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8010e06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e08:	2b20      	cmp	r3, #32
 8010e0a:	d002      	beq.n	8010e12 <create_name+0xf2>
 8010e0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e10:	d106      	bne.n	8010e20 <create_name+0x100>
		di--;
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	3b01      	subs	r3, #1
 8010e16:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d1ea      	bne.n	8010df4 <create_name+0xd4>
 8010e1e:	e000      	b.n	8010e22 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8010e20:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	005b      	lsls	r3, r3, #1
 8010e26:	68fa      	ldr	r2, [r7, #12]
 8010e28:	4413      	add	r3, r2
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d101      	bne.n	8010e38 <create_name+0x118>
 8010e34:	2306      	movs	r3, #6
 8010e36:	e127      	b.n	8011088 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	3324      	adds	r3, #36	@ 0x24
 8010e3c:	220b      	movs	r2, #11
 8010e3e:	2120      	movs	r1, #32
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7fe fc5c 	bl	800f6fe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010e46:	2300      	movs	r3, #0
 8010e48:	61bb      	str	r3, [r7, #24]
 8010e4a:	e002      	b.n	8010e52 <create_name+0x132>
 8010e4c:	69bb      	ldr	r3, [r7, #24]
 8010e4e:	3301      	adds	r3, #1
 8010e50:	61bb      	str	r3, [r7, #24]
 8010e52:	69bb      	ldr	r3, [r7, #24]
 8010e54:	005b      	lsls	r3, r3, #1
 8010e56:	68fa      	ldr	r2, [r7, #12]
 8010e58:	4413      	add	r3, r2
 8010e5a:	881b      	ldrh	r3, [r3, #0]
 8010e5c:	2b20      	cmp	r3, #32
 8010e5e:	d0f5      	beq.n	8010e4c <create_name+0x12c>
 8010e60:	69bb      	ldr	r3, [r7, #24]
 8010e62:	005b      	lsls	r3, r3, #1
 8010e64:	68fa      	ldr	r2, [r7, #12]
 8010e66:	4413      	add	r3, r2
 8010e68:	881b      	ldrh	r3, [r3, #0]
 8010e6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e6c:	d0ee      	beq.n	8010e4c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010e6e:	69bb      	ldr	r3, [r7, #24]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d009      	beq.n	8010e88 <create_name+0x168>
 8010e74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e78:	f043 0303 	orr.w	r3, r3, #3
 8010e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010e80:	e002      	b.n	8010e88 <create_name+0x168>
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	3b01      	subs	r3, #1
 8010e86:	617b      	str	r3, [r7, #20]
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d009      	beq.n	8010ea2 <create_name+0x182>
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010e94:	3b01      	subs	r3, #1
 8010e96:	005b      	lsls	r3, r3, #1
 8010e98:	68fa      	ldr	r2, [r7, #12]
 8010e9a:	4413      	add	r3, r2
 8010e9c:	881b      	ldrh	r3, [r3, #0]
 8010e9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ea0:	d1ef      	bne.n	8010e82 <create_name+0x162>

	i = b = 0; ni = 8;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	623b      	str	r3, [r7, #32]
 8010eac:	2308      	movs	r3, #8
 8010eae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	1c5a      	adds	r2, r3, #1
 8010eb4:	61ba      	str	r2, [r7, #24]
 8010eb6:	005b      	lsls	r3, r3, #1
 8010eb8:	68fa      	ldr	r2, [r7, #12]
 8010eba:	4413      	add	r3, r2
 8010ebc:	881b      	ldrh	r3, [r3, #0]
 8010ebe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010ec0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	f000 8090 	beq.w	8010fe8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010ec8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010eca:	2b20      	cmp	r3, #32
 8010ecc:	d006      	beq.n	8010edc <create_name+0x1bc>
 8010ece:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ed0:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ed2:	d10a      	bne.n	8010eea <create_name+0x1ca>
 8010ed4:	69ba      	ldr	r2, [r7, #24]
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d006      	beq.n	8010eea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8010edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ee0:	f043 0303 	orr.w	r3, r3, #3
 8010ee4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010ee8:	e07d      	b.n	8010fe6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010eea:	6a3a      	ldr	r2, [r7, #32]
 8010eec:	69fb      	ldr	r3, [r7, #28]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d203      	bcs.n	8010efa <create_name+0x1da>
 8010ef2:	69ba      	ldr	r2, [r7, #24]
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d123      	bne.n	8010f42 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8010efa:	69fb      	ldr	r3, [r7, #28]
 8010efc:	2b0b      	cmp	r3, #11
 8010efe:	d106      	bne.n	8010f0e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8010f00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f04:	f043 0303 	orr.w	r3, r3, #3
 8010f08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010f0c:	e075      	b.n	8010ffa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010f0e:	69ba      	ldr	r2, [r7, #24]
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d005      	beq.n	8010f22 <create_name+0x202>
 8010f16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f1a:	f043 0303 	orr.w	r3, r3, #3
 8010f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8010f22:	69ba      	ldr	r2, [r7, #24]
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d866      	bhi.n	8010ff8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	61bb      	str	r3, [r7, #24]
 8010f2e:	2308      	movs	r3, #8
 8010f30:	623b      	str	r3, [r7, #32]
 8010f32:	230b      	movs	r3, #11
 8010f34:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010f36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010f40:	e051      	b.n	8010fe6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8010f42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f44:	2b7f      	cmp	r3, #127	@ 0x7f
 8010f46:	d914      	bls.n	8010f72 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010f48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f4a:	2100      	movs	r1, #0
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f001 fbd1 	bl	80126f4 <ff_convert>
 8010f52:	4603      	mov	r3, r0
 8010f54:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010f56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d004      	beq.n	8010f66 <create_name+0x246>
 8010f5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f5e:	3b80      	subs	r3, #128	@ 0x80
 8010f60:	4a23      	ldr	r2, [pc, #140]	@ (8010ff0 <create_name+0x2d0>)
 8010f62:	5cd3      	ldrb	r3, [r2, r3]
 8010f64:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010f66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f6a:	f043 0302 	orr.w	r3, r3, #2
 8010f6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010f72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d007      	beq.n	8010f88 <create_name+0x268>
 8010f78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f7a:	4619      	mov	r1, r3
 8010f7c:	481d      	ldr	r0, [pc, #116]	@ (8010ff4 <create_name+0x2d4>)
 8010f7e:	f7fe fc00 	bl	800f782 <chk_chr>
 8010f82:	4603      	mov	r3, r0
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d008      	beq.n	8010f9a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010f88:	235f      	movs	r3, #95	@ 0x5f
 8010f8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8010f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f90:	f043 0303 	orr.w	r3, r3, #3
 8010f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010f98:	e01b      	b.n	8010fd2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010f9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f9c:	2b40      	cmp	r3, #64	@ 0x40
 8010f9e:	d909      	bls.n	8010fb4 <create_name+0x294>
 8010fa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fa2:	2b5a      	cmp	r3, #90	@ 0x5a
 8010fa4:	d806      	bhi.n	8010fb4 <create_name+0x294>
					b |= 2;
 8010fa6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010faa:	f043 0302 	orr.w	r3, r3, #2
 8010fae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010fb2:	e00e      	b.n	8010fd2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010fb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fb6:	2b60      	cmp	r3, #96	@ 0x60
 8010fb8:	d90b      	bls.n	8010fd2 <create_name+0x2b2>
 8010fba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fbc:	2b7a      	cmp	r3, #122	@ 0x7a
 8010fbe:	d808      	bhi.n	8010fd2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8010fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010fc4:	f043 0301 	orr.w	r3, r3, #1
 8010fc8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010fcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fce:	3b20      	subs	r3, #32
 8010fd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010fd2:	6a3b      	ldr	r3, [r7, #32]
 8010fd4:	1c5a      	adds	r2, r3, #1
 8010fd6:	623a      	str	r2, [r7, #32]
 8010fd8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010fda:	b2d1      	uxtb	r1, r2
 8010fdc:	687a      	ldr	r2, [r7, #4]
 8010fde:	4413      	add	r3, r2
 8010fe0:	460a      	mov	r2, r1
 8010fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8010fe6:	e763      	b.n	8010eb0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8010fe8:	bf00      	nop
 8010fea:	e006      	b.n	8010ffa <create_name+0x2da>
 8010fec:	08017fe0 	.word	0x08017fe0
 8010ff0:	08018ab8 	.word	0x08018ab8
 8010ff4:	08017fec 	.word	0x08017fec
			if (si > di) break;			/* No extension */
 8010ff8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011000:	2be5      	cmp	r3, #229	@ 0xe5
 8011002:	d103      	bne.n	801100c <create_name+0x2ec>
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2205      	movs	r2, #5
 8011008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	2b08      	cmp	r3, #8
 8011010:	d104      	bne.n	801101c <create_name+0x2fc>
 8011012:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011016:	009b      	lsls	r3, r3, #2
 8011018:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801101c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011020:	f003 030c 	and.w	r3, r3, #12
 8011024:	2b0c      	cmp	r3, #12
 8011026:	d005      	beq.n	8011034 <create_name+0x314>
 8011028:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801102c:	f003 0303 	and.w	r3, r3, #3
 8011030:	2b03      	cmp	r3, #3
 8011032:	d105      	bne.n	8011040 <create_name+0x320>
 8011034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011038:	f043 0302 	orr.w	r3, r3, #2
 801103c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8011040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011044:	f003 0302 	and.w	r3, r3, #2
 8011048:	2b00      	cmp	r3, #0
 801104a:	d117      	bne.n	801107c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801104c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011050:	f003 0303 	and.w	r3, r3, #3
 8011054:	2b01      	cmp	r3, #1
 8011056:	d105      	bne.n	8011064 <create_name+0x344>
 8011058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801105c:	f043 0310 	orr.w	r3, r3, #16
 8011060:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8011064:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011068:	f003 030c 	and.w	r3, r3, #12
 801106c:	2b04      	cmp	r3, #4
 801106e:	d105      	bne.n	801107c <create_name+0x35c>
 8011070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011074:	f043 0308 	orr.w	r3, r3, #8
 8011078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011082:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8011086:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8011088:	4618      	mov	r0, r3
 801108a:	3728      	adds	r7, #40	@ 0x28
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b086      	sub	sp, #24
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80110a4:	e002      	b.n	80110ac <follow_path+0x1c>
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	3301      	adds	r3, #1
 80110aa:	603b      	str	r3, [r7, #0]
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80110b2:	d0f8      	beq.n	80110a6 <follow_path+0x16>
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80110ba:	d0f4      	beq.n	80110a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	2200      	movs	r2, #0
 80110c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	2b1f      	cmp	r3, #31
 80110c8:	d80a      	bhi.n	80110e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2280      	movs	r2, #128	@ 0x80
 80110ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80110d2:	2100      	movs	r1, #0
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f7ff f8fe 	bl	80102d6 <dir_sdi>
 80110da:	4603      	mov	r3, r0
 80110dc:	75fb      	strb	r3, [r7, #23]
 80110de:	e048      	b.n	8011172 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80110e0:	463b      	mov	r3, r7
 80110e2:	4619      	mov	r1, r3
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f7ff fe1b 	bl	8010d20 <create_name>
 80110ea:	4603      	mov	r3, r0
 80110ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80110ee:	7dfb      	ldrb	r3, [r7, #23]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d139      	bne.n	8011168 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7ff fc5a 	bl	80109ae <dir_find>
 80110fa:	4603      	mov	r3, r0
 80110fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011104:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011106:	7dfb      	ldrb	r3, [r7, #23]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00a      	beq.n	8011122 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801110c:	7dfb      	ldrb	r3, [r7, #23]
 801110e:	2b04      	cmp	r3, #4
 8011110:	d12c      	bne.n	801116c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011112:	7afb      	ldrb	r3, [r7, #11]
 8011114:	f003 0304 	and.w	r3, r3, #4
 8011118:	2b00      	cmp	r3, #0
 801111a:	d127      	bne.n	801116c <follow_path+0xdc>
 801111c:	2305      	movs	r3, #5
 801111e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011120:	e024      	b.n	801116c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011122:	7afb      	ldrb	r3, [r7, #11]
 8011124:	f003 0304 	and.w	r3, r3, #4
 8011128:	2b00      	cmp	r3, #0
 801112a:	d121      	bne.n	8011170 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801112c:	693b      	ldr	r3, [r7, #16]
 801112e:	799b      	ldrb	r3, [r3, #6]
 8011130:	f003 0310 	and.w	r3, r3, #16
 8011134:	2b00      	cmp	r3, #0
 8011136:	d102      	bne.n	801113e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011138:	2305      	movs	r3, #5
 801113a:	75fb      	strb	r3, [r7, #23]
 801113c:	e019      	b.n	8011172 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	695b      	ldr	r3, [r3, #20]
 8011148:	68fa      	ldr	r2, [r7, #12]
 801114a:	8992      	ldrh	r2, [r2, #12]
 801114c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011150:	fb00 f202 	mul.w	r2, r0, r2
 8011154:	1a9b      	subs	r3, r3, r2
 8011156:	440b      	add	r3, r1
 8011158:	4619      	mov	r1, r3
 801115a:	68f8      	ldr	r0, [r7, #12]
 801115c:	f7ff fa61 	bl	8010622 <ld_clust>
 8011160:	4602      	mov	r2, r0
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011166:	e7bb      	b.n	80110e0 <follow_path+0x50>
			if (res != FR_OK) break;
 8011168:	bf00      	nop
 801116a:	e002      	b.n	8011172 <follow_path+0xe2>
				break;
 801116c:	bf00      	nop
 801116e:	e000      	b.n	8011172 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011170:	bf00      	nop
			}
		}
	}

	return res;
 8011172:	7dfb      	ldrb	r3, [r7, #23]
}
 8011174:	4618      	mov	r0, r3
 8011176:	3718      	adds	r7, #24
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801117c:	b480      	push	{r7}
 801117e:	b087      	sub	sp, #28
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011184:	f04f 33ff 	mov.w	r3, #4294967295
 8011188:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d031      	beq.n	80111f6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	617b      	str	r3, [r7, #20]
 8011198:	e002      	b.n	80111a0 <get_ldnumber+0x24>
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	3301      	adds	r3, #1
 801119e:	617b      	str	r3, [r7, #20]
 80111a0:	697b      	ldr	r3, [r7, #20]
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	2b1f      	cmp	r3, #31
 80111a6:	d903      	bls.n	80111b0 <get_ldnumber+0x34>
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	2b3a      	cmp	r3, #58	@ 0x3a
 80111ae:	d1f4      	bne.n	801119a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	2b3a      	cmp	r3, #58	@ 0x3a
 80111b6:	d11c      	bne.n	80111f2 <get_ldnumber+0x76>
			tp = *path;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	1c5a      	adds	r2, r3, #1
 80111c2:	60fa      	str	r2, [r7, #12]
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	3b30      	subs	r3, #48	@ 0x30
 80111c8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	2b09      	cmp	r3, #9
 80111ce:	d80e      	bhi.n	80111ee <get_ldnumber+0x72>
 80111d0:	68fa      	ldr	r2, [r7, #12]
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	429a      	cmp	r2, r3
 80111d6:	d10a      	bne.n	80111ee <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d107      	bne.n	80111ee <get_ldnumber+0x72>
					vol = (int)i;
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	3301      	adds	r3, #1
 80111e6:	617b      	str	r3, [r7, #20]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	697a      	ldr	r2, [r7, #20]
 80111ec:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80111ee:	693b      	ldr	r3, [r7, #16]
 80111f0:	e002      	b.n	80111f8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80111f2:	2300      	movs	r3, #0
 80111f4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80111f6:	693b      	ldr	r3, [r7, #16]
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	371c      	adds	r7, #28
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr

08011204 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2200      	movs	r2, #0
 8011212:	70da      	strb	r2, [r3, #3]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f04f 32ff 	mov.w	r2, #4294967295
 801121a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801121c:	6839      	ldr	r1, [r7, #0]
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f7fe fc7a 	bl	800fb18 <move_window>
 8011224:	4603      	mov	r3, r0
 8011226:	2b00      	cmp	r3, #0
 8011228:	d001      	beq.n	801122e <check_fs+0x2a>
 801122a:	2304      	movs	r3, #4
 801122c:	e038      	b.n	80112a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	3338      	adds	r3, #56	@ 0x38
 8011232:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011236:	4618      	mov	r0, r3
 8011238:	f7fe f9be 	bl	800f5b8 <ld_word>
 801123c:	4603      	mov	r3, r0
 801123e:	461a      	mov	r2, r3
 8011240:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011244:	429a      	cmp	r2, r3
 8011246:	d001      	beq.n	801124c <check_fs+0x48>
 8011248:	2303      	movs	r3, #3
 801124a:	e029      	b.n	80112a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011252:	2be9      	cmp	r3, #233	@ 0xe9
 8011254:	d009      	beq.n	801126a <check_fs+0x66>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801125c:	2beb      	cmp	r3, #235	@ 0xeb
 801125e:	d11e      	bne.n	801129e <check_fs+0x9a>
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8011266:	2b90      	cmp	r3, #144	@ 0x90
 8011268:	d119      	bne.n	801129e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	3338      	adds	r3, #56	@ 0x38
 801126e:	3336      	adds	r3, #54	@ 0x36
 8011270:	4618      	mov	r0, r3
 8011272:	f7fe f9b9 	bl	800f5e8 <ld_dword>
 8011276:	4603      	mov	r3, r0
 8011278:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801127c:	4a0a      	ldr	r2, [pc, #40]	@ (80112a8 <check_fs+0xa4>)
 801127e:	4293      	cmp	r3, r2
 8011280:	d101      	bne.n	8011286 <check_fs+0x82>
 8011282:	2300      	movs	r3, #0
 8011284:	e00c      	b.n	80112a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	3338      	adds	r3, #56	@ 0x38
 801128a:	3352      	adds	r3, #82	@ 0x52
 801128c:	4618      	mov	r0, r3
 801128e:	f7fe f9ab 	bl	800f5e8 <ld_dword>
 8011292:	4603      	mov	r3, r0
 8011294:	4a05      	ldr	r2, [pc, #20]	@ (80112ac <check_fs+0xa8>)
 8011296:	4293      	cmp	r3, r2
 8011298:	d101      	bne.n	801129e <check_fs+0x9a>
 801129a:	2300      	movs	r3, #0
 801129c:	e000      	b.n	80112a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801129e:	2302      	movs	r3, #2
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3708      	adds	r7, #8
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}
 80112a8:	00544146 	.word	0x00544146
 80112ac:	33544146 	.word	0x33544146

080112b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b096      	sub	sp, #88	@ 0x58
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	60f8      	str	r0, [r7, #12]
 80112b8:	60b9      	str	r1, [r7, #8]
 80112ba:	4613      	mov	r3, r2
 80112bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	2200      	movs	r2, #0
 80112c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80112c4:	68f8      	ldr	r0, [r7, #12]
 80112c6:	f7ff ff59 	bl	801117c <get_ldnumber>
 80112ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80112cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	da01      	bge.n	80112d6 <find_volume+0x26>
 80112d2:	230b      	movs	r3, #11
 80112d4:	e265      	b.n	80117a2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80112d6:	4a9f      	ldr	r2, [pc, #636]	@ (8011554 <find_volume+0x2a4>)
 80112d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112de:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80112e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d101      	bne.n	80112ea <find_volume+0x3a>
 80112e6:	230c      	movs	r3, #12
 80112e8:	e25b      	b.n	80117a2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80112f0:	79fb      	ldrb	r3, [r7, #7]
 80112f2:	f023 0301 	bic.w	r3, r3, #1
 80112f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80112f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d01a      	beq.n	8011336 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011302:	785b      	ldrb	r3, [r3, #1]
 8011304:	4618      	mov	r0, r3
 8011306:	f7fe f8b7 	bl	800f478 <disk_status>
 801130a:	4603      	mov	r3, r0
 801130c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011310:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011314:	f003 0301 	and.w	r3, r3, #1
 8011318:	2b00      	cmp	r3, #0
 801131a:	d10c      	bne.n	8011336 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801131c:	79fb      	ldrb	r3, [r7, #7]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d007      	beq.n	8011332 <find_volume+0x82>
 8011322:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011326:	f003 0304 	and.w	r3, r3, #4
 801132a:	2b00      	cmp	r3, #0
 801132c:	d001      	beq.n	8011332 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801132e:	230a      	movs	r3, #10
 8011330:	e237      	b.n	80117a2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8011332:	2300      	movs	r3, #0
 8011334:	e235      	b.n	80117a2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011338:	2200      	movs	r2, #0
 801133a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801133c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801133e:	b2da      	uxtb	r2, r3
 8011340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011342:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011346:	785b      	ldrb	r3, [r3, #1]
 8011348:	4618      	mov	r0, r3
 801134a:	f7fe f8af 	bl	800f4ac <disk_initialize>
 801134e:	4603      	mov	r3, r0
 8011350:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011354:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011358:	f003 0301 	and.w	r3, r3, #1
 801135c:	2b00      	cmp	r3, #0
 801135e:	d001      	beq.n	8011364 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011360:	2303      	movs	r3, #3
 8011362:	e21e      	b.n	80117a2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011364:	79fb      	ldrb	r3, [r7, #7]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d007      	beq.n	801137a <find_volume+0xca>
 801136a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801136e:	f003 0304 	and.w	r3, r3, #4
 8011372:	2b00      	cmp	r3, #0
 8011374:	d001      	beq.n	801137a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011376:	230a      	movs	r3, #10
 8011378:	e213      	b.n	80117a2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801137a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801137c:	7858      	ldrb	r0, [r3, #1]
 801137e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011380:	330c      	adds	r3, #12
 8011382:	461a      	mov	r2, r3
 8011384:	2102      	movs	r1, #2
 8011386:	f7fe f8f9 	bl	800f57c <disk_ioctl>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d001      	beq.n	8011394 <find_volume+0xe4>
 8011390:	2301      	movs	r3, #1
 8011392:	e206      	b.n	80117a2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011396:	899b      	ldrh	r3, [r3, #12]
 8011398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801139c:	d80d      	bhi.n	80113ba <find_volume+0x10a>
 801139e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113a0:	899b      	ldrh	r3, [r3, #12]
 80113a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80113a6:	d308      	bcc.n	80113ba <find_volume+0x10a>
 80113a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113aa:	899b      	ldrh	r3, [r3, #12]
 80113ac:	461a      	mov	r2, r3
 80113ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113b0:	899b      	ldrh	r3, [r3, #12]
 80113b2:	3b01      	subs	r3, #1
 80113b4:	4013      	ands	r3, r2
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d001      	beq.n	80113be <find_volume+0x10e>
 80113ba:	2301      	movs	r3, #1
 80113bc:	e1f1      	b.n	80117a2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80113be:	2300      	movs	r3, #0
 80113c0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80113c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80113c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80113c6:	f7ff ff1d 	bl	8011204 <check_fs>
 80113ca:	4603      	mov	r3, r0
 80113cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80113d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80113d4:	2b02      	cmp	r3, #2
 80113d6:	d149      	bne.n	801146c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80113d8:	2300      	movs	r3, #0
 80113da:	643b      	str	r3, [r7, #64]	@ 0x40
 80113dc:	e01e      	b.n	801141c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80113de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113e0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80113e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113e6:	011b      	lsls	r3, r3, #4
 80113e8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80113ec:	4413      	add	r3, r2
 80113ee:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80113f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113f2:	3304      	adds	r3, #4
 80113f4:	781b      	ldrb	r3, [r3, #0]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d006      	beq.n	8011408 <find_volume+0x158>
 80113fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113fc:	3308      	adds	r3, #8
 80113fe:	4618      	mov	r0, r3
 8011400:	f7fe f8f2 	bl	800f5e8 <ld_dword>
 8011404:	4602      	mov	r2, r0
 8011406:	e000      	b.n	801140a <find_volume+0x15a>
 8011408:	2200      	movs	r2, #0
 801140a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801140c:	009b      	lsls	r3, r3, #2
 801140e:	3358      	adds	r3, #88	@ 0x58
 8011410:	443b      	add	r3, r7
 8011412:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011418:	3301      	adds	r3, #1
 801141a:	643b      	str	r3, [r7, #64]	@ 0x40
 801141c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801141e:	2b03      	cmp	r3, #3
 8011420:	d9dd      	bls.n	80113de <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011422:	2300      	movs	r3, #0
 8011424:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8011426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011428:	2b00      	cmp	r3, #0
 801142a:	d002      	beq.n	8011432 <find_volume+0x182>
 801142c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801142e:	3b01      	subs	r3, #1
 8011430:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011434:	009b      	lsls	r3, r3, #2
 8011436:	3358      	adds	r3, #88	@ 0x58
 8011438:	443b      	add	r3, r7
 801143a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801143e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011442:	2b00      	cmp	r3, #0
 8011444:	d005      	beq.n	8011452 <find_volume+0x1a2>
 8011446:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011448:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801144a:	f7ff fedb 	bl	8011204 <check_fs>
 801144e:	4603      	mov	r3, r0
 8011450:	e000      	b.n	8011454 <find_volume+0x1a4>
 8011452:	2303      	movs	r3, #3
 8011454:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011458:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801145c:	2b01      	cmp	r3, #1
 801145e:	d905      	bls.n	801146c <find_volume+0x1bc>
 8011460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011462:	3301      	adds	r3, #1
 8011464:	643b      	str	r3, [r7, #64]	@ 0x40
 8011466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011468:	2b03      	cmp	r3, #3
 801146a:	d9e2      	bls.n	8011432 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801146c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011470:	2b04      	cmp	r3, #4
 8011472:	d101      	bne.n	8011478 <find_volume+0x1c8>
 8011474:	2301      	movs	r3, #1
 8011476:	e194      	b.n	80117a2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011478:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801147c:	2b01      	cmp	r3, #1
 801147e:	d901      	bls.n	8011484 <find_volume+0x1d4>
 8011480:	230d      	movs	r3, #13
 8011482:	e18e      	b.n	80117a2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011486:	3338      	adds	r3, #56	@ 0x38
 8011488:	330b      	adds	r3, #11
 801148a:	4618      	mov	r0, r3
 801148c:	f7fe f894 	bl	800f5b8 <ld_word>
 8011490:	4603      	mov	r3, r0
 8011492:	461a      	mov	r2, r3
 8011494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011496:	899b      	ldrh	r3, [r3, #12]
 8011498:	429a      	cmp	r2, r3
 801149a:	d001      	beq.n	80114a0 <find_volume+0x1f0>
 801149c:	230d      	movs	r3, #13
 801149e:	e180      	b.n	80117a2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80114a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114a2:	3338      	adds	r3, #56	@ 0x38
 80114a4:	3316      	adds	r3, #22
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7fe f886 	bl	800f5b8 <ld_word>
 80114ac:	4603      	mov	r3, r0
 80114ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80114b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d106      	bne.n	80114c4 <find_volume+0x214>
 80114b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114b8:	3338      	adds	r3, #56	@ 0x38
 80114ba:	3324      	adds	r3, #36	@ 0x24
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fe f893 	bl	800f5e8 <ld_dword>
 80114c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80114c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80114c8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80114ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114cc:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80114d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80114d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114d6:	789b      	ldrb	r3, [r3, #2]
 80114d8:	2b01      	cmp	r3, #1
 80114da:	d005      	beq.n	80114e8 <find_volume+0x238>
 80114dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114de:	789b      	ldrb	r3, [r3, #2]
 80114e0:	2b02      	cmp	r3, #2
 80114e2:	d001      	beq.n	80114e8 <find_volume+0x238>
 80114e4:	230d      	movs	r3, #13
 80114e6:	e15c      	b.n	80117a2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80114e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ea:	789b      	ldrb	r3, [r3, #2]
 80114ec:	461a      	mov	r2, r3
 80114ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114f0:	fb02 f303 	mul.w	r3, r2, r3
 80114f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80114f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80114fc:	461a      	mov	r2, r3
 80114fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011500:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011504:	895b      	ldrh	r3, [r3, #10]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d008      	beq.n	801151c <find_volume+0x26c>
 801150a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801150c:	895b      	ldrh	r3, [r3, #10]
 801150e:	461a      	mov	r2, r3
 8011510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011512:	895b      	ldrh	r3, [r3, #10]
 8011514:	3b01      	subs	r3, #1
 8011516:	4013      	ands	r3, r2
 8011518:	2b00      	cmp	r3, #0
 801151a:	d001      	beq.n	8011520 <find_volume+0x270>
 801151c:	230d      	movs	r3, #13
 801151e:	e140      	b.n	80117a2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011522:	3338      	adds	r3, #56	@ 0x38
 8011524:	3311      	adds	r3, #17
 8011526:	4618      	mov	r0, r3
 8011528:	f7fe f846 	bl	800f5b8 <ld_word>
 801152c:	4603      	mov	r3, r0
 801152e:	461a      	mov	r2, r3
 8011530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011532:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011536:	891b      	ldrh	r3, [r3, #8]
 8011538:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801153a:	8992      	ldrh	r2, [r2, #12]
 801153c:	0952      	lsrs	r2, r2, #5
 801153e:	b292      	uxth	r2, r2
 8011540:	fbb3 f1f2 	udiv	r1, r3, r2
 8011544:	fb01 f202 	mul.w	r2, r1, r2
 8011548:	1a9b      	subs	r3, r3, r2
 801154a:	b29b      	uxth	r3, r3
 801154c:	2b00      	cmp	r3, #0
 801154e:	d003      	beq.n	8011558 <find_volume+0x2a8>
 8011550:	230d      	movs	r3, #13
 8011552:	e126      	b.n	80117a2 <find_volume+0x4f2>
 8011554:	20002ce8 	.word	0x20002ce8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801155a:	3338      	adds	r3, #56	@ 0x38
 801155c:	3313      	adds	r3, #19
 801155e:	4618      	mov	r0, r3
 8011560:	f7fe f82a 	bl	800f5b8 <ld_word>
 8011564:	4603      	mov	r3, r0
 8011566:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011568:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801156a:	2b00      	cmp	r3, #0
 801156c:	d106      	bne.n	801157c <find_volume+0x2cc>
 801156e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011570:	3338      	adds	r3, #56	@ 0x38
 8011572:	3320      	adds	r3, #32
 8011574:	4618      	mov	r0, r3
 8011576:	f7fe f837 	bl	800f5e8 <ld_dword>
 801157a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801157c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801157e:	3338      	adds	r3, #56	@ 0x38
 8011580:	330e      	adds	r3, #14
 8011582:	4618      	mov	r0, r3
 8011584:	f7fe f818 	bl	800f5b8 <ld_word>
 8011588:	4603      	mov	r3, r0
 801158a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801158c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801158e:	2b00      	cmp	r3, #0
 8011590:	d101      	bne.n	8011596 <find_volume+0x2e6>
 8011592:	230d      	movs	r3, #13
 8011594:	e105      	b.n	80117a2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011596:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801159a:	4413      	add	r3, r2
 801159c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801159e:	8911      	ldrh	r1, [r2, #8]
 80115a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80115a2:	8992      	ldrh	r2, [r2, #12]
 80115a4:	0952      	lsrs	r2, r2, #5
 80115a6:	b292      	uxth	r2, r2
 80115a8:	fbb1 f2f2 	udiv	r2, r1, r2
 80115ac:	b292      	uxth	r2, r2
 80115ae:	4413      	add	r3, r2
 80115b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80115b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80115b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d201      	bcs.n	80115be <find_volume+0x30e>
 80115ba:	230d      	movs	r3, #13
 80115bc:	e0f1      	b.n	80117a2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80115be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80115c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115c2:	1ad3      	subs	r3, r2, r3
 80115c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80115c6:	8952      	ldrh	r2, [r2, #10]
 80115c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80115cc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80115ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d101      	bne.n	80115d8 <find_volume+0x328>
 80115d4:	230d      	movs	r3, #13
 80115d6:	e0e4      	b.n	80117a2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80115d8:	2303      	movs	r3, #3
 80115da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80115de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d802      	bhi.n	80115ee <find_volume+0x33e>
 80115e8:	2302      	movs	r3, #2
 80115ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80115ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80115f4:	4293      	cmp	r3, r2
 80115f6:	d802      	bhi.n	80115fe <find_volume+0x34e>
 80115f8:	2301      	movs	r3, #1
 80115fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80115fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011600:	1c9a      	adds	r2, r3, #2
 8011602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011604:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8011606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011608:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801160a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801160c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801160e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011610:	441a      	add	r2, r3
 8011612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011614:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8011616:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801161a:	441a      	add	r2, r3
 801161c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801161e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8011620:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011624:	2b03      	cmp	r3, #3
 8011626:	d11e      	bne.n	8011666 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801162a:	3338      	adds	r3, #56	@ 0x38
 801162c:	332a      	adds	r3, #42	@ 0x2a
 801162e:	4618      	mov	r0, r3
 8011630:	f7fd ffc2 	bl	800f5b8 <ld_word>
 8011634:	4603      	mov	r3, r0
 8011636:	2b00      	cmp	r3, #0
 8011638:	d001      	beq.n	801163e <find_volume+0x38e>
 801163a:	230d      	movs	r3, #13
 801163c:	e0b1      	b.n	80117a2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801163e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011640:	891b      	ldrh	r3, [r3, #8]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d001      	beq.n	801164a <find_volume+0x39a>
 8011646:	230d      	movs	r3, #13
 8011648:	e0ab      	b.n	80117a2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801164a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801164c:	3338      	adds	r3, #56	@ 0x38
 801164e:	332c      	adds	r3, #44	@ 0x2c
 8011650:	4618      	mov	r0, r3
 8011652:	f7fd ffc9 	bl	800f5e8 <ld_dword>
 8011656:	4602      	mov	r2, r0
 8011658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801165a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801165c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801165e:	69db      	ldr	r3, [r3, #28]
 8011660:	009b      	lsls	r3, r3, #2
 8011662:	647b      	str	r3, [r7, #68]	@ 0x44
 8011664:	e01f      	b.n	80116a6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011668:	891b      	ldrh	r3, [r3, #8]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d101      	bne.n	8011672 <find_volume+0x3c2>
 801166e:	230d      	movs	r3, #13
 8011670:	e097      	b.n	80117a2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011674:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011678:	441a      	add	r2, r3
 801167a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801167c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801167e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011682:	2b02      	cmp	r3, #2
 8011684:	d103      	bne.n	801168e <find_volume+0x3de>
 8011686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011688:	69db      	ldr	r3, [r3, #28]
 801168a:	005b      	lsls	r3, r3, #1
 801168c:	e00a      	b.n	80116a4 <find_volume+0x3f4>
 801168e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011690:	69da      	ldr	r2, [r3, #28]
 8011692:	4613      	mov	r3, r2
 8011694:	005b      	lsls	r3, r3, #1
 8011696:	4413      	add	r3, r2
 8011698:	085a      	lsrs	r2, r3, #1
 801169a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801169c:	69db      	ldr	r3, [r3, #28]
 801169e:	f003 0301 	and.w	r3, r3, #1
 80116a2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80116a4:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80116a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116a8:	6a1a      	ldr	r2, [r3, #32]
 80116aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ac:	899b      	ldrh	r3, [r3, #12]
 80116ae:	4619      	mov	r1, r3
 80116b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116b2:	440b      	add	r3, r1
 80116b4:	3b01      	subs	r3, #1
 80116b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80116b8:	8989      	ldrh	r1, [r1, #12]
 80116ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80116be:	429a      	cmp	r2, r3
 80116c0:	d201      	bcs.n	80116c6 <find_volume+0x416>
 80116c2:	230d      	movs	r3, #13
 80116c4:	e06d      	b.n	80117a2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80116c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116c8:	f04f 32ff 	mov.w	r2, #4294967295
 80116cc:	619a      	str	r2, [r3, #24]
 80116ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116d0:	699a      	ldr	r2, [r3, #24]
 80116d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116d4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80116d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116d8:	2280      	movs	r2, #128	@ 0x80
 80116da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80116dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80116e0:	2b03      	cmp	r3, #3
 80116e2:	d149      	bne.n	8011778 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80116e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116e6:	3338      	adds	r3, #56	@ 0x38
 80116e8:	3330      	adds	r3, #48	@ 0x30
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7fd ff64 	bl	800f5b8 <ld_word>
 80116f0:	4603      	mov	r3, r0
 80116f2:	2b01      	cmp	r3, #1
 80116f4:	d140      	bne.n	8011778 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80116f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116f8:	3301      	adds	r3, #1
 80116fa:	4619      	mov	r1, r3
 80116fc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80116fe:	f7fe fa0b 	bl	800fb18 <move_window>
 8011702:	4603      	mov	r3, r0
 8011704:	2b00      	cmp	r3, #0
 8011706:	d137      	bne.n	8011778 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8011708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801170a:	2200      	movs	r2, #0
 801170c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801170e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011710:	3338      	adds	r3, #56	@ 0x38
 8011712:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011716:	4618      	mov	r0, r3
 8011718:	f7fd ff4e 	bl	800f5b8 <ld_word>
 801171c:	4603      	mov	r3, r0
 801171e:	461a      	mov	r2, r3
 8011720:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011724:	429a      	cmp	r2, r3
 8011726:	d127      	bne.n	8011778 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801172a:	3338      	adds	r3, #56	@ 0x38
 801172c:	4618      	mov	r0, r3
 801172e:	f7fd ff5b 	bl	800f5e8 <ld_dword>
 8011732:	4603      	mov	r3, r0
 8011734:	4a1d      	ldr	r2, [pc, #116]	@ (80117ac <find_volume+0x4fc>)
 8011736:	4293      	cmp	r3, r2
 8011738:	d11e      	bne.n	8011778 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801173a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801173c:	3338      	adds	r3, #56	@ 0x38
 801173e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011742:	4618      	mov	r0, r3
 8011744:	f7fd ff50 	bl	800f5e8 <ld_dword>
 8011748:	4603      	mov	r3, r0
 801174a:	4a19      	ldr	r2, [pc, #100]	@ (80117b0 <find_volume+0x500>)
 801174c:	4293      	cmp	r3, r2
 801174e:	d113      	bne.n	8011778 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011752:	3338      	adds	r3, #56	@ 0x38
 8011754:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011758:	4618      	mov	r0, r3
 801175a:	f7fd ff45 	bl	800f5e8 <ld_dword>
 801175e:	4602      	mov	r2, r0
 8011760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011762:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011766:	3338      	adds	r3, #56	@ 0x38
 8011768:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801176c:	4618      	mov	r0, r3
 801176e:	f7fd ff3b 	bl	800f5e8 <ld_dword>
 8011772:	4602      	mov	r2, r0
 8011774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011776:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801177a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801177e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011780:	4b0c      	ldr	r3, [pc, #48]	@ (80117b4 <find_volume+0x504>)
 8011782:	881b      	ldrh	r3, [r3, #0]
 8011784:	3301      	adds	r3, #1
 8011786:	b29a      	uxth	r2, r3
 8011788:	4b0a      	ldr	r3, [pc, #40]	@ (80117b4 <find_volume+0x504>)
 801178a:	801a      	strh	r2, [r3, #0]
 801178c:	4b09      	ldr	r3, [pc, #36]	@ (80117b4 <find_volume+0x504>)
 801178e:	881a      	ldrh	r2, [r3, #0]
 8011790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011792:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011796:	4a08      	ldr	r2, [pc, #32]	@ (80117b8 <find_volume+0x508>)
 8011798:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801179a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801179c:	f7fe f954 	bl	800fa48 <clear_lock>
#endif
	return FR_OK;
 80117a0:	2300      	movs	r3, #0
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	3758      	adds	r7, #88	@ 0x58
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}
 80117aa:	bf00      	nop
 80117ac:	41615252 	.word	0x41615252
 80117b0:	61417272 	.word	0x61417272
 80117b4:	20002cec 	.word	0x20002cec
 80117b8:	20002d10 	.word	0x20002d10

080117bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b084      	sub	sp, #16
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80117c6:	2309      	movs	r3, #9
 80117c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d01c      	beq.n	801180a <validate+0x4e>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d018      	beq.n	801180a <validate+0x4e>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	781b      	ldrb	r3, [r3, #0]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d013      	beq.n	801180a <validate+0x4e>
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	889a      	ldrh	r2, [r3, #4]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	88db      	ldrh	r3, [r3, #6]
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d10c      	bne.n	801180a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	785b      	ldrb	r3, [r3, #1]
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7fd fe3e 	bl	800f478 <disk_status>
 80117fc:	4603      	mov	r3, r0
 80117fe:	f003 0301 	and.w	r3, r3, #1
 8011802:	2b00      	cmp	r3, #0
 8011804:	d101      	bne.n	801180a <validate+0x4e>
			res = FR_OK;
 8011806:	2300      	movs	r3, #0
 8011808:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801180a:	7bfb      	ldrb	r3, [r7, #15]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d102      	bne.n	8011816 <validate+0x5a>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	e000      	b.n	8011818 <validate+0x5c>
 8011816:	2300      	movs	r3, #0
 8011818:	683a      	ldr	r2, [r7, #0]
 801181a:	6013      	str	r3, [r2, #0]
	return res;
 801181c:	7bfb      	ldrb	r3, [r7, #15]
}
 801181e:	4618      	mov	r0, r3
 8011820:	3710      	adds	r7, #16
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
	...

08011828 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b088      	sub	sp, #32
 801182c:	af00      	add	r7, sp, #0
 801182e:	60f8      	str	r0, [r7, #12]
 8011830:	60b9      	str	r1, [r7, #8]
 8011832:	4613      	mov	r3, r2
 8011834:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801183a:	f107 0310 	add.w	r3, r7, #16
 801183e:	4618      	mov	r0, r3
 8011840:	f7ff fc9c 	bl	801117c <get_ldnumber>
 8011844:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011846:	69fb      	ldr	r3, [r7, #28]
 8011848:	2b00      	cmp	r3, #0
 801184a:	da01      	bge.n	8011850 <f_mount+0x28>
 801184c:	230b      	movs	r3, #11
 801184e:	e02b      	b.n	80118a8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011850:	4a17      	ldr	r2, [pc, #92]	@ (80118b0 <f_mount+0x88>)
 8011852:	69fb      	ldr	r3, [r7, #28]
 8011854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011858:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801185a:	69bb      	ldr	r3, [r7, #24]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d005      	beq.n	801186c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011860:	69b8      	ldr	r0, [r7, #24]
 8011862:	f7fe f8f1 	bl	800fa48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011866:	69bb      	ldr	r3, [r7, #24]
 8011868:	2200      	movs	r2, #0
 801186a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d002      	beq.n	8011878 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2200      	movs	r2, #0
 8011876:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011878:	68fa      	ldr	r2, [r7, #12]
 801187a:	490d      	ldr	r1, [pc, #52]	@ (80118b0 <f_mount+0x88>)
 801187c:	69fb      	ldr	r3, [r7, #28]
 801187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d002      	beq.n	801188e <f_mount+0x66>
 8011888:	79fb      	ldrb	r3, [r7, #7]
 801188a:	2b01      	cmp	r3, #1
 801188c:	d001      	beq.n	8011892 <f_mount+0x6a>
 801188e:	2300      	movs	r3, #0
 8011890:	e00a      	b.n	80118a8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011892:	f107 010c 	add.w	r1, r7, #12
 8011896:	f107 0308 	add.w	r3, r7, #8
 801189a:	2200      	movs	r2, #0
 801189c:	4618      	mov	r0, r3
 801189e:	f7ff fd07 	bl	80112b0 <find_volume>
 80118a2:	4603      	mov	r3, r0
 80118a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80118a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	3720      	adds	r7, #32
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}
 80118b0:	20002ce8 	.word	0x20002ce8

080118b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b09a      	sub	sp, #104	@ 0x68
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	60f8      	str	r0, [r7, #12]
 80118bc:	60b9      	str	r1, [r7, #8]
 80118be:	4613      	mov	r3, r2
 80118c0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d101      	bne.n	80118cc <f_open+0x18>
 80118c8:	2309      	movs	r3, #9
 80118ca:	e1b7      	b.n	8011c3c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80118cc:	79fb      	ldrb	r3, [r7, #7]
 80118ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80118d2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80118d4:	79fa      	ldrb	r2, [r7, #7]
 80118d6:	f107 0114 	add.w	r1, r7, #20
 80118da:	f107 0308 	add.w	r3, r7, #8
 80118de:	4618      	mov	r0, r3
 80118e0:	f7ff fce6 	bl	80112b0 <find_volume>
 80118e4:	4603      	mov	r3, r0
 80118e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80118ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	f040 819b 	bne.w	8011c2a <f_open+0x376>
		dj.obj.fs = fs;
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80118f8:	68ba      	ldr	r2, [r7, #8]
 80118fa:	f107 0318 	add.w	r3, r7, #24
 80118fe:	4611      	mov	r1, r2
 8011900:	4618      	mov	r0, r3
 8011902:	f7ff fbc5 	bl	8011090 <follow_path>
 8011906:	4603      	mov	r3, r0
 8011908:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801190c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011910:	2b00      	cmp	r3, #0
 8011912:	d118      	bne.n	8011946 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011914:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011918:	b25b      	sxtb	r3, r3
 801191a:	2b00      	cmp	r3, #0
 801191c:	da03      	bge.n	8011926 <f_open+0x72>
				res = FR_INVALID_NAME;
 801191e:	2306      	movs	r3, #6
 8011920:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011924:	e00f      	b.n	8011946 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011926:	79fb      	ldrb	r3, [r7, #7]
 8011928:	2b01      	cmp	r3, #1
 801192a:	bf8c      	ite	hi
 801192c:	2301      	movhi	r3, #1
 801192e:	2300      	movls	r3, #0
 8011930:	b2db      	uxtb	r3, r3
 8011932:	461a      	mov	r2, r3
 8011934:	f107 0318 	add.w	r3, r7, #24
 8011938:	4611      	mov	r1, r2
 801193a:	4618      	mov	r0, r3
 801193c:	f7fd ff3c 	bl	800f7b8 <chk_lock>
 8011940:	4603      	mov	r3, r0
 8011942:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011946:	79fb      	ldrb	r3, [r7, #7]
 8011948:	f003 031c 	and.w	r3, r3, #28
 801194c:	2b00      	cmp	r3, #0
 801194e:	d07f      	beq.n	8011a50 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8011950:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011954:	2b00      	cmp	r3, #0
 8011956:	d017      	beq.n	8011988 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011958:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801195c:	2b04      	cmp	r3, #4
 801195e:	d10e      	bne.n	801197e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011960:	f7fd ff86 	bl	800f870 <enq_lock>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d006      	beq.n	8011978 <f_open+0xc4>
 801196a:	f107 0318 	add.w	r3, r7, #24
 801196e:	4618      	mov	r0, r3
 8011970:	f7ff f8de 	bl	8010b30 <dir_register>
 8011974:	4603      	mov	r3, r0
 8011976:	e000      	b.n	801197a <f_open+0xc6>
 8011978:	2312      	movs	r3, #18
 801197a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801197e:	79fb      	ldrb	r3, [r7, #7]
 8011980:	f043 0308 	orr.w	r3, r3, #8
 8011984:	71fb      	strb	r3, [r7, #7]
 8011986:	e010      	b.n	80119aa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011988:	7fbb      	ldrb	r3, [r7, #30]
 801198a:	f003 0311 	and.w	r3, r3, #17
 801198e:	2b00      	cmp	r3, #0
 8011990:	d003      	beq.n	801199a <f_open+0xe6>
					res = FR_DENIED;
 8011992:	2307      	movs	r3, #7
 8011994:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011998:	e007      	b.n	80119aa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801199a:	79fb      	ldrb	r3, [r7, #7]
 801199c:	f003 0304 	and.w	r3, r3, #4
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d002      	beq.n	80119aa <f_open+0xf6>
 80119a4:	2308      	movs	r3, #8
 80119a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80119aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d168      	bne.n	8011a84 <f_open+0x1d0>
 80119b2:	79fb      	ldrb	r3, [r7, #7]
 80119b4:	f003 0308 	and.w	r3, r3, #8
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d063      	beq.n	8011a84 <f_open+0x1d0>
				dw = GET_FATTIME();
 80119bc:	f7fb fd0c 	bl	800d3d8 <get_fattime>
 80119c0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80119c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c4:	330e      	adds	r3, #14
 80119c6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7fd fe4b 	bl	800f664 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80119ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119d0:	3316      	adds	r3, #22
 80119d2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7fd fe45 	bl	800f664 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80119da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119dc:	330b      	adds	r3, #11
 80119de:	2220      	movs	r2, #32
 80119e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119e6:	4611      	mov	r1, r2
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7fe fe1a 	bl	8010622 <ld_clust>
 80119ee:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80119f4:	2200      	movs	r2, #0
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7fe fe32 	bl	8010660 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80119fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119fe:	331c      	adds	r3, #28
 8011a00:	2100      	movs	r1, #0
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7fd fe2e 	bl	800f664 <st_dword>
					fs->wflag = 1;
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d037      	beq.n	8011a84 <f_open+0x1d0>
						dw = fs->winsect;
 8011a14:	697b      	ldr	r3, [r7, #20]
 8011a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a18:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8011a1a:	f107 0318 	add.w	r3, r7, #24
 8011a1e:	2200      	movs	r2, #0
 8011a20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7fe fb22 	bl	801006c <remove_chain>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8011a2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d126      	bne.n	8011a84 <f_open+0x1d0>
							res = move_window(fs, dw);
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fe f86c 	bl	800fb18 <move_window>
 8011a40:	4603      	mov	r3, r0
 8011a42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a4a:	3a01      	subs	r2, #1
 8011a4c:	615a      	str	r2, [r3, #20]
 8011a4e:	e019      	b.n	8011a84 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011a50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d115      	bne.n	8011a84 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011a58:	7fbb      	ldrb	r3, [r7, #30]
 8011a5a:	f003 0310 	and.w	r3, r3, #16
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d003      	beq.n	8011a6a <f_open+0x1b6>
					res = FR_NO_FILE;
 8011a62:	2304      	movs	r3, #4
 8011a64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011a68:	e00c      	b.n	8011a84 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011a6a:	79fb      	ldrb	r3, [r7, #7]
 8011a6c:	f003 0302 	and.w	r3, r3, #2
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d007      	beq.n	8011a84 <f_open+0x1d0>
 8011a74:	7fbb      	ldrb	r3, [r7, #30]
 8011a76:	f003 0301 	and.w	r3, r3, #1
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d002      	beq.n	8011a84 <f_open+0x1d0>
						res = FR_DENIED;
 8011a7e:	2307      	movs	r3, #7
 8011a80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8011a84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d126      	bne.n	8011ada <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011a8c:	79fb      	ldrb	r3, [r7, #7]
 8011a8e:	f003 0308 	and.w	r3, r3, #8
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d003      	beq.n	8011a9e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8011a96:	79fb      	ldrb	r3, [r7, #7]
 8011a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a9c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011aa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011aac:	79fb      	ldrb	r3, [r7, #7]
 8011aae:	2b01      	cmp	r3, #1
 8011ab0:	bf8c      	ite	hi
 8011ab2:	2301      	movhi	r3, #1
 8011ab4:	2300      	movls	r3, #0
 8011ab6:	b2db      	uxtb	r3, r3
 8011ab8:	461a      	mov	r2, r3
 8011aba:	f107 0318 	add.w	r3, r7, #24
 8011abe:	4611      	mov	r1, r2
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7fd fef7 	bl	800f8b4 <inc_lock>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	691b      	ldr	r3, [r3, #16]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d102      	bne.n	8011ada <f_open+0x226>
 8011ad4:	2302      	movs	r3, #2
 8011ad6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011ada:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	f040 80a3 	bne.w	8011c2a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011ae8:	4611      	mov	r1, r2
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7fe fd99 	bl	8010622 <ld_clust>
 8011af0:	4602      	mov	r2, r0
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af8:	331c      	adds	r3, #28
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7fd fd74 	bl	800f5e8 <ld_dword>
 8011b00:	4602      	mov	r2, r0
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	2200      	movs	r2, #0
 8011b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011b0c:	697a      	ldr	r2, [r7, #20]
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	88da      	ldrh	r2, [r3, #6]
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	79fa      	ldrb	r2, [r7, #7]
 8011b1e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	2200      	movs	r2, #0
 8011b24:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	2200      	movs	r2, #0
 8011b2a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	3330      	adds	r3, #48	@ 0x30
 8011b36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011b3a:	2100      	movs	r1, #0
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f7fd fdde 	bl	800f6fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011b42:	79fb      	ldrb	r3, [r7, #7]
 8011b44:	f003 0320 	and.w	r3, r3, #32
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d06e      	beq.n	8011c2a <f_open+0x376>
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	68db      	ldr	r3, [r3, #12]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d06a      	beq.n	8011c2a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	68da      	ldr	r2, [r3, #12]
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	895b      	ldrh	r3, [r3, #10]
 8011b60:	461a      	mov	r2, r3
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	899b      	ldrh	r3, [r3, #12]
 8011b66:	fb02 f303 	mul.w	r3, r2, r3
 8011b6a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	689b      	ldr	r3, [r3, #8]
 8011b70:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	68db      	ldr	r3, [r3, #12]
 8011b76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011b78:	e016      	b.n	8011ba8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7fe f887 	bl	800fc92 <get_fat>
 8011b84:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011b86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011b88:	2b01      	cmp	r3, #1
 8011b8a:	d802      	bhi.n	8011b92 <f_open+0x2de>
 8011b8c:	2302      	movs	r3, #2
 8011b8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b98:	d102      	bne.n	8011ba0 <f_open+0x2ec>
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011ba0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ba4:	1ad3      	subs	r3, r2, r3
 8011ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011ba8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d103      	bne.n	8011bb8 <f_open+0x304>
 8011bb0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d8e0      	bhi.n	8011b7a <f_open+0x2c6>
				}
				fp->clust = clst;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011bbc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011bbe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d131      	bne.n	8011c2a <f_open+0x376>
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	899b      	ldrh	r3, [r3, #12]
 8011bca:	461a      	mov	r2, r3
 8011bcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011bce:	fbb3 f1f2 	udiv	r1, r3, r2
 8011bd2:	fb01 f202 	mul.w	r2, r1, r2
 8011bd6:	1a9b      	subs	r3, r3, r2
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d026      	beq.n	8011c2a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7fe f837 	bl	800fc54 <clust2sect>
 8011be6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d103      	bne.n	8011bf6 <f_open+0x342>
						res = FR_INT_ERR;
 8011bee:	2302      	movs	r3, #2
 8011bf0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011bf4:	e019      	b.n	8011c2a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	899b      	ldrh	r3, [r3, #12]
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011bfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8011c02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c04:	441a      	add	r2, r3
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	7858      	ldrb	r0, [r3, #1]
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	6a1a      	ldr	r2, [r3, #32]
 8011c18:	2301      	movs	r3, #1
 8011c1a:	f7fd fc6f 	bl	800f4fc <disk_read>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d002      	beq.n	8011c2a <f_open+0x376>
 8011c24:	2301      	movs	r3, #1
 8011c26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011c2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d002      	beq.n	8011c38 <f_open+0x384>
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	2200      	movs	r2, #0
 8011c36:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011c38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3768      	adds	r7, #104	@ 0x68
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b08c      	sub	sp, #48	@ 0x30
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	60f8      	str	r0, [r7, #12]
 8011c4c:	60b9      	str	r1, [r7, #8]
 8011c4e:	607a      	str	r2, [r7, #4]
 8011c50:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	f107 0210 	add.w	r2, r7, #16
 8011c62:	4611      	mov	r1, r2
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7ff fda9 	bl	80117bc <validate>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011c70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d107      	bne.n	8011c88 <f_write+0x44>
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	7d5b      	ldrb	r3, [r3, #21]
 8011c7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011c80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d002      	beq.n	8011c8e <f_write+0x4a>
 8011c88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011c8c:	e16a      	b.n	8011f64 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	7d1b      	ldrb	r3, [r3, #20]
 8011c92:	f003 0302 	and.w	r3, r3, #2
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d101      	bne.n	8011c9e <f_write+0x5a>
 8011c9a:	2307      	movs	r3, #7
 8011c9c:	e162      	b.n	8011f64 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	699a      	ldr	r2, [r3, #24]
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	441a      	add	r2, r3
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	699b      	ldr	r3, [r3, #24]
 8011caa:	429a      	cmp	r2, r3
 8011cac:	f080 814c 	bcs.w	8011f48 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	699b      	ldr	r3, [r3, #24]
 8011cb4:	43db      	mvns	r3, r3
 8011cb6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011cb8:	e146      	b.n	8011f48 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	699b      	ldr	r3, [r3, #24]
 8011cbe:	693a      	ldr	r2, [r7, #16]
 8011cc0:	8992      	ldrh	r2, [r2, #12]
 8011cc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011cc6:	fb01 f202 	mul.w	r2, r1, r2
 8011cca:	1a9b      	subs	r3, r3, r2
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	f040 80f1 	bne.w	8011eb4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	699b      	ldr	r3, [r3, #24]
 8011cd6:	693a      	ldr	r2, [r7, #16]
 8011cd8:	8992      	ldrh	r2, [r2, #12]
 8011cda:	fbb3 f3f2 	udiv	r3, r3, r2
 8011cde:	693a      	ldr	r2, [r7, #16]
 8011ce0:	8952      	ldrh	r2, [r2, #10]
 8011ce2:	3a01      	subs	r2, #1
 8011ce4:	4013      	ands	r3, r2
 8011ce6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011ce8:	69bb      	ldr	r3, [r7, #24]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d143      	bne.n	8011d76 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	699b      	ldr	r3, [r3, #24]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d10c      	bne.n	8011d10 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	689b      	ldr	r3, [r3, #8]
 8011cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d11a      	bne.n	8011d38 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	2100      	movs	r1, #0
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7fe fa15 	bl	8010136 <create_chain>
 8011d0c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011d0e:	e013      	b.n	8011d38 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d007      	beq.n	8011d28 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	699b      	ldr	r3, [r3, #24]
 8011d1c:	4619      	mov	r1, r3
 8011d1e:	68f8      	ldr	r0, [r7, #12]
 8011d20:	f7fe faa1 	bl	8010266 <clmt_clust>
 8011d24:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011d26:	e007      	b.n	8011d38 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011d28:	68fa      	ldr	r2, [r7, #12]
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	69db      	ldr	r3, [r3, #28]
 8011d2e:	4619      	mov	r1, r3
 8011d30:	4610      	mov	r0, r2
 8011d32:	f7fe fa00 	bl	8010136 <create_chain>
 8011d36:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	f000 8109 	beq.w	8011f52 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d42:	2b01      	cmp	r3, #1
 8011d44:	d104      	bne.n	8011d50 <f_write+0x10c>
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	2202      	movs	r2, #2
 8011d4a:	755a      	strb	r2, [r3, #21]
 8011d4c:	2302      	movs	r3, #2
 8011d4e:	e109      	b.n	8011f64 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d56:	d104      	bne.n	8011d62 <f_write+0x11e>
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	2201      	movs	r2, #1
 8011d5c:	755a      	strb	r2, [r3, #21]
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e100      	b.n	8011f64 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011d66:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	689b      	ldr	r3, [r3, #8]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d102      	bne.n	8011d76 <f_write+0x132>
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011d74:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	7d1b      	ldrb	r3, [r3, #20]
 8011d7a:	b25b      	sxtb	r3, r3
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	da18      	bge.n	8011db2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	7858      	ldrb	r0, [r3, #1]
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	6a1a      	ldr	r2, [r3, #32]
 8011d8e:	2301      	movs	r3, #1
 8011d90:	f7fd fbd4 	bl	800f53c <disk_write>
 8011d94:	4603      	mov	r3, r0
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d004      	beq.n	8011da4 <f_write+0x160>
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	2201      	movs	r2, #1
 8011d9e:	755a      	strb	r2, [r3, #21]
 8011da0:	2301      	movs	r3, #1
 8011da2:	e0df      	b.n	8011f64 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	7d1b      	ldrb	r3, [r3, #20]
 8011da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011dac:	b2da      	uxtb	r2, r3
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011db2:	693a      	ldr	r2, [r7, #16]
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	69db      	ldr	r3, [r3, #28]
 8011db8:	4619      	mov	r1, r3
 8011dba:	4610      	mov	r0, r2
 8011dbc:	f7fd ff4a 	bl	800fc54 <clust2sect>
 8011dc0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d104      	bne.n	8011dd2 <f_write+0x18e>
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	2202      	movs	r2, #2
 8011dcc:	755a      	strb	r2, [r3, #21]
 8011dce:	2302      	movs	r3, #2
 8011dd0:	e0c8      	b.n	8011f64 <f_write+0x320>
			sect += csect;
 8011dd2:	697a      	ldr	r2, [r7, #20]
 8011dd4:	69bb      	ldr	r3, [r7, #24]
 8011dd6:	4413      	add	r3, r2
 8011dd8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	899b      	ldrh	r3, [r3, #12]
 8011dde:	461a      	mov	r2, r3
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	fbb3 f3f2 	udiv	r3, r3, r2
 8011de6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011de8:	6a3b      	ldr	r3, [r7, #32]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d043      	beq.n	8011e76 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011dee:	69ba      	ldr	r2, [r7, #24]
 8011df0:	6a3b      	ldr	r3, [r7, #32]
 8011df2:	4413      	add	r3, r2
 8011df4:	693a      	ldr	r2, [r7, #16]
 8011df6:	8952      	ldrh	r2, [r2, #10]
 8011df8:	4293      	cmp	r3, r2
 8011dfa:	d905      	bls.n	8011e08 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	895b      	ldrh	r3, [r3, #10]
 8011e00:	461a      	mov	r2, r3
 8011e02:	69bb      	ldr	r3, [r7, #24]
 8011e04:	1ad3      	subs	r3, r2, r3
 8011e06:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	7858      	ldrb	r0, [r3, #1]
 8011e0c:	6a3b      	ldr	r3, [r7, #32]
 8011e0e:	697a      	ldr	r2, [r7, #20]
 8011e10:	69f9      	ldr	r1, [r7, #28]
 8011e12:	f7fd fb93 	bl	800f53c <disk_write>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d004      	beq.n	8011e26 <f_write+0x1e2>
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	2201      	movs	r2, #1
 8011e20:	755a      	strb	r2, [r3, #21]
 8011e22:	2301      	movs	r3, #1
 8011e24:	e09e      	b.n	8011f64 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	6a1a      	ldr	r2, [r3, #32]
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	1ad3      	subs	r3, r2, r3
 8011e2e:	6a3a      	ldr	r2, [r7, #32]
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d918      	bls.n	8011e66 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	6a1a      	ldr	r2, [r3, #32]
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	1ad3      	subs	r3, r2, r3
 8011e42:	693a      	ldr	r2, [r7, #16]
 8011e44:	8992      	ldrh	r2, [r2, #12]
 8011e46:	fb02 f303 	mul.w	r3, r2, r3
 8011e4a:	69fa      	ldr	r2, [r7, #28]
 8011e4c:	18d1      	adds	r1, r2, r3
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	899b      	ldrh	r3, [r3, #12]
 8011e52:	461a      	mov	r2, r3
 8011e54:	f7fd fc32 	bl	800f6bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	7d1b      	ldrb	r3, [r3, #20]
 8011e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011e60:	b2da      	uxtb	r2, r3
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	899b      	ldrh	r3, [r3, #12]
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	6a3b      	ldr	r3, [r7, #32]
 8011e6e:	fb02 f303 	mul.w	r3, r2, r3
 8011e72:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011e74:	e04b      	b.n	8011f0e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	6a1b      	ldr	r3, [r3, #32]
 8011e7a:	697a      	ldr	r2, [r7, #20]
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d016      	beq.n	8011eae <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	699a      	ldr	r2, [r3, #24]
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d210      	bcs.n	8011eae <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	7858      	ldrb	r0, [r3, #1]
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011e96:	2301      	movs	r3, #1
 8011e98:	697a      	ldr	r2, [r7, #20]
 8011e9a:	f7fd fb2f 	bl	800f4fc <disk_read>
 8011e9e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d004      	beq.n	8011eae <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	755a      	strb	r2, [r3, #21]
 8011eaa:	2301      	movs	r3, #1
 8011eac:	e05a      	b.n	8011f64 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	697a      	ldr	r2, [r7, #20]
 8011eb2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	899b      	ldrh	r3, [r3, #12]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	699b      	ldr	r3, [r3, #24]
 8011ebe:	693a      	ldr	r2, [r7, #16]
 8011ec0:	8992      	ldrh	r2, [r2, #12]
 8011ec2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ec6:	fb01 f202 	mul.w	r2, r1, r2
 8011eca:	1a9b      	subs	r3, r3, r2
 8011ecc:	1ac3      	subs	r3, r0, r3
 8011ece:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d901      	bls.n	8011edc <f_write+0x298>
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	699b      	ldr	r3, [r3, #24]
 8011ee6:	693a      	ldr	r2, [r7, #16]
 8011ee8:	8992      	ldrh	r2, [r2, #12]
 8011eea:	fbb3 f0f2 	udiv	r0, r3, r2
 8011eee:	fb00 f202 	mul.w	r2, r0, r2
 8011ef2:	1a9b      	subs	r3, r3, r2
 8011ef4:	440b      	add	r3, r1
 8011ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ef8:	69f9      	ldr	r1, [r7, #28]
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7fd fbde 	bl	800f6bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	7d1b      	ldrb	r3, [r3, #20]
 8011f04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011f08:	b2da      	uxtb	r2, r3
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011f0e:	69fa      	ldr	r2, [r7, #28]
 8011f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f12:	4413      	add	r3, r2
 8011f14:	61fb      	str	r3, [r7, #28]
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	699a      	ldr	r2, [r3, #24]
 8011f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f1c:	441a      	add	r2, r3
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	619a      	str	r2, [r3, #24]
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	68da      	ldr	r2, [r3, #12]
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	699b      	ldr	r3, [r3, #24]
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	bf38      	it	cc
 8011f2e:	461a      	movcc	r2, r3
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	60da      	str	r2, [r3, #12]
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	681a      	ldr	r2, [r3, #0]
 8011f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f3a:	441a      	add	r2, r3
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	601a      	str	r2, [r3, #0]
 8011f40:	687a      	ldr	r2, [r7, #4]
 8011f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f44:	1ad3      	subs	r3, r2, r3
 8011f46:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	f47f aeb5 	bne.w	8011cba <f_write+0x76>
 8011f50:	e000      	b.n	8011f54 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011f52:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	7d1b      	ldrb	r3, [r3, #20]
 8011f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f5c:	b2da      	uxtb	r2, r3
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011f62:	2300      	movs	r3, #0
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3730      	adds	r7, #48	@ 0x30
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b086      	sub	sp, #24
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f107 0208 	add.w	r2, r7, #8
 8011f7a:	4611      	mov	r1, r2
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7ff fc1d 	bl	80117bc <validate>
 8011f82:	4603      	mov	r3, r0
 8011f84:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011f86:	7dfb      	ldrb	r3, [r7, #23]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d168      	bne.n	801205e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	7d1b      	ldrb	r3, [r3, #20]
 8011f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d062      	beq.n	801205e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	7d1b      	ldrb	r3, [r3, #20]
 8011f9c:	b25b      	sxtb	r3, r3
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	da15      	bge.n	8011fce <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	7858      	ldrb	r0, [r3, #1]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	6a1a      	ldr	r2, [r3, #32]
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	f7fd fac3 	bl	800f53c <disk_write>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d001      	beq.n	8011fc0 <f_sync+0x54>
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	e04f      	b.n	8012060 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	7d1b      	ldrb	r3, [r3, #20]
 8011fc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011fc8:	b2da      	uxtb	r2, r3
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011fce:	f7fb fa03 	bl	800d3d8 <get_fattime>
 8011fd2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011fd4:	68ba      	ldr	r2, [r7, #8]
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fda:	4619      	mov	r1, r3
 8011fdc:	4610      	mov	r0, r2
 8011fde:	f7fd fd9b 	bl	800fb18 <move_window>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011fe6:	7dfb      	ldrb	r3, [r7, #23]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d138      	bne.n	801205e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ff0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	330b      	adds	r3, #11
 8011ff6:	781a      	ldrb	r2, [r3, #0]
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	330b      	adds	r3, #11
 8011ffc:	f042 0220 	orr.w	r2, r2, #32
 8012000:	b2d2      	uxtb	r2, r2
 8012002:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	6818      	ldr	r0, [r3, #0]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	461a      	mov	r2, r3
 801200e:	68f9      	ldr	r1, [r7, #12]
 8012010:	f7fe fb26 	bl	8010660 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	f103 021c 	add.w	r2, r3, #28
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	68db      	ldr	r3, [r3, #12]
 801201e:	4619      	mov	r1, r3
 8012020:	4610      	mov	r0, r2
 8012022:	f7fd fb1f 	bl	800f664 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	3316      	adds	r3, #22
 801202a:	6939      	ldr	r1, [r7, #16]
 801202c:	4618      	mov	r0, r3
 801202e:	f7fd fb19 	bl	800f664 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	3312      	adds	r3, #18
 8012036:	2100      	movs	r1, #0
 8012038:	4618      	mov	r0, r3
 801203a:	f7fd faf8 	bl	800f62e <st_word>
					fs->wflag = 1;
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	2201      	movs	r2, #1
 8012042:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	4618      	mov	r0, r3
 8012048:	f7fd fd94 	bl	800fb74 <sync_fs>
 801204c:	4603      	mov	r3, r0
 801204e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	7d1b      	ldrb	r3, [r3, #20]
 8012054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012058:	b2da      	uxtb	r2, r3
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801205e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012060:	4618      	mov	r0, r3
 8012062:	3718      	adds	r7, #24
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b084      	sub	sp, #16
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f7ff ff7b 	bl	8011f6c <f_sync>
 8012076:	4603      	mov	r3, r0
 8012078:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801207a:	7bfb      	ldrb	r3, [r7, #15]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d118      	bne.n	80120b2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f107 0208 	add.w	r2, r7, #8
 8012086:	4611      	mov	r1, r2
 8012088:	4618      	mov	r0, r3
 801208a:	f7ff fb97 	bl	80117bc <validate>
 801208e:	4603      	mov	r3, r0
 8012090:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012092:	7bfb      	ldrb	r3, [r7, #15]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d10c      	bne.n	80120b2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	691b      	ldr	r3, [r3, #16]
 801209c:	4618      	mov	r0, r3
 801209e:	f7fd fc97 	bl	800f9d0 <dec_lock>
 80120a2:	4603      	mov	r3, r0
 80120a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80120a6:	7bfb      	ldrb	r3, [r7, #15]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d102      	bne.n	80120b2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2200      	movs	r2, #0
 80120b0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80120b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	3710      	adds	r7, #16
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}

080120bc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b090      	sub	sp, #64	@ 0x40
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f107 0208 	add.w	r2, r7, #8
 80120cc:	4611      	mov	r1, r2
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7ff fb74 	bl	80117bc <validate>
 80120d4:	4603      	mov	r3, r0
 80120d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80120da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d103      	bne.n	80120ea <f_lseek+0x2e>
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	7d5b      	ldrb	r3, [r3, #21]
 80120e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80120ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d002      	beq.n	80120f8 <f_lseek+0x3c>
 80120f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80120f6:	e201      	b.n	80124fc <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	f000 80d9 	beq.w	80122b4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012108:	d15a      	bne.n	80121c0 <f_lseek+0x104>
			tbl = fp->cltbl;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801210e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012112:	1d1a      	adds	r2, r3, #4
 8012114:	627a      	str	r2, [r7, #36]	@ 0x24
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	617b      	str	r3, [r7, #20]
 801211a:	2302      	movs	r3, #2
 801211c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	689b      	ldr	r3, [r3, #8]
 8012122:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8012124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012126:	2b00      	cmp	r3, #0
 8012128:	d03a      	beq.n	80121a0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801212a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801212c:	613b      	str	r3, [r7, #16]
 801212e:	2300      	movs	r3, #0
 8012130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012134:	3302      	adds	r3, #2
 8012136:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8012138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801213a:	60fb      	str	r3, [r7, #12]
 801213c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801213e:	3301      	adds	r3, #1
 8012140:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012146:	4618      	mov	r0, r3
 8012148:	f7fd fda3 	bl	800fc92 <get_fat>
 801214c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801214e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012150:	2b01      	cmp	r3, #1
 8012152:	d804      	bhi.n	801215e <f_lseek+0xa2>
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2202      	movs	r2, #2
 8012158:	755a      	strb	r2, [r3, #21]
 801215a:	2302      	movs	r3, #2
 801215c:	e1ce      	b.n	80124fc <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801215e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012164:	d104      	bne.n	8012170 <f_lseek+0xb4>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2201      	movs	r2, #1
 801216a:	755a      	strb	r2, [r3, #21]
 801216c:	2301      	movs	r3, #1
 801216e:	e1c5      	b.n	80124fc <f_lseek+0x440>
					} while (cl == pcl + 1);
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	3301      	adds	r3, #1
 8012174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012176:	429a      	cmp	r2, r3
 8012178:	d0de      	beq.n	8012138 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801217a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	429a      	cmp	r2, r3
 8012180:	d809      	bhi.n	8012196 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012184:	1d1a      	adds	r2, r3, #4
 8012186:	627a      	str	r2, [r7, #36]	@ 0x24
 8012188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801218a:	601a      	str	r2, [r3, #0]
 801218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801218e:	1d1a      	adds	r2, r3, #4
 8012190:	627a      	str	r2, [r7, #36]	@ 0x24
 8012192:	693a      	ldr	r2, [r7, #16]
 8012194:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	69db      	ldr	r3, [r3, #28]
 801219a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801219c:	429a      	cmp	r2, r3
 801219e:	d3c4      	bcc.n	801212a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121a6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80121a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d803      	bhi.n	80121b8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80121b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b2:	2200      	movs	r2, #0
 80121b4:	601a      	str	r2, [r3, #0]
 80121b6:	e19f      	b.n	80124f8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80121b8:	2311      	movs	r3, #17
 80121ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80121be:	e19b      	b.n	80124f8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	68db      	ldr	r3, [r3, #12]
 80121c4:	683a      	ldr	r2, [r7, #0]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d902      	bls.n	80121d0 <f_lseek+0x114>
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	68db      	ldr	r3, [r3, #12]
 80121ce:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	683a      	ldr	r2, [r7, #0]
 80121d4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	f000 818d 	beq.w	80124f8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	3b01      	subs	r3, #1
 80121e2:	4619      	mov	r1, r3
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f7fe f83e 	bl	8010266 <clmt_clust>
 80121ea:	4602      	mov	r2, r0
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80121f0:	68ba      	ldr	r2, [r7, #8]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	69db      	ldr	r3, [r3, #28]
 80121f6:	4619      	mov	r1, r3
 80121f8:	4610      	mov	r0, r2
 80121fa:	f7fd fd2b 	bl	800fc54 <clust2sect>
 80121fe:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012200:	69bb      	ldr	r3, [r7, #24]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d104      	bne.n	8012210 <f_lseek+0x154>
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2202      	movs	r2, #2
 801220a:	755a      	strb	r2, [r3, #21]
 801220c:	2302      	movs	r3, #2
 801220e:	e175      	b.n	80124fc <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	3b01      	subs	r3, #1
 8012214:	68ba      	ldr	r2, [r7, #8]
 8012216:	8992      	ldrh	r2, [r2, #12]
 8012218:	fbb3 f3f2 	udiv	r3, r3, r2
 801221c:	68ba      	ldr	r2, [r7, #8]
 801221e:	8952      	ldrh	r2, [r2, #10]
 8012220:	3a01      	subs	r2, #1
 8012222:	4013      	ands	r3, r2
 8012224:	69ba      	ldr	r2, [r7, #24]
 8012226:	4413      	add	r3, r2
 8012228:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	699b      	ldr	r3, [r3, #24]
 801222e:	68ba      	ldr	r2, [r7, #8]
 8012230:	8992      	ldrh	r2, [r2, #12]
 8012232:	fbb3 f1f2 	udiv	r1, r3, r2
 8012236:	fb01 f202 	mul.w	r2, r1, r2
 801223a:	1a9b      	subs	r3, r3, r2
 801223c:	2b00      	cmp	r3, #0
 801223e:	f000 815b 	beq.w	80124f8 <f_lseek+0x43c>
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6a1b      	ldr	r3, [r3, #32]
 8012246:	69ba      	ldr	r2, [r7, #24]
 8012248:	429a      	cmp	r2, r3
 801224a:	f000 8155 	beq.w	80124f8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	7d1b      	ldrb	r3, [r3, #20]
 8012252:	b25b      	sxtb	r3, r3
 8012254:	2b00      	cmp	r3, #0
 8012256:	da18      	bge.n	801228a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	7858      	ldrb	r0, [r3, #1]
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6a1a      	ldr	r2, [r3, #32]
 8012266:	2301      	movs	r3, #1
 8012268:	f7fd f968 	bl	800f53c <disk_write>
 801226c:	4603      	mov	r3, r0
 801226e:	2b00      	cmp	r3, #0
 8012270:	d004      	beq.n	801227c <f_lseek+0x1c0>
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2201      	movs	r2, #1
 8012276:	755a      	strb	r2, [r3, #21]
 8012278:	2301      	movs	r3, #1
 801227a:	e13f      	b.n	80124fc <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	7d1b      	ldrb	r3, [r3, #20]
 8012280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012284:	b2da      	uxtb	r2, r3
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	7858      	ldrb	r0, [r3, #1]
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012294:	2301      	movs	r3, #1
 8012296:	69ba      	ldr	r2, [r7, #24]
 8012298:	f7fd f930 	bl	800f4fc <disk_read>
 801229c:	4603      	mov	r3, r0
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d004      	beq.n	80122ac <f_lseek+0x1f0>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2201      	movs	r2, #1
 80122a6:	755a      	strb	r2, [r3, #21]
 80122a8:	2301      	movs	r3, #1
 80122aa:	e127      	b.n	80124fc <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	69ba      	ldr	r2, [r7, #24]
 80122b0:	621a      	str	r2, [r3, #32]
 80122b2:	e121      	b.n	80124f8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	683a      	ldr	r2, [r7, #0]
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d908      	bls.n	80122d0 <f_lseek+0x214>
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	7d1b      	ldrb	r3, [r3, #20]
 80122c2:	f003 0302 	and.w	r3, r3, #2
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d102      	bne.n	80122d0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	68db      	ldr	r3, [r3, #12]
 80122ce:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	699b      	ldr	r3, [r3, #24]
 80122d4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80122d6:	2300      	movs	r3, #0
 80122d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80122de:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	f000 80b5 	beq.w	8012452 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	895b      	ldrh	r3, [r3, #10]
 80122ec:	461a      	mov	r2, r3
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	899b      	ldrh	r3, [r3, #12]
 80122f2:	fb02 f303 	mul.w	r3, r2, r3
 80122f6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80122f8:	6a3b      	ldr	r3, [r7, #32]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d01b      	beq.n	8012336 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	1e5a      	subs	r2, r3, #1
 8012302:	69fb      	ldr	r3, [r7, #28]
 8012304:	fbb2 f2f3 	udiv	r2, r2, r3
 8012308:	6a3b      	ldr	r3, [r7, #32]
 801230a:	1e59      	subs	r1, r3, #1
 801230c:	69fb      	ldr	r3, [r7, #28]
 801230e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012312:	429a      	cmp	r2, r3
 8012314:	d30f      	bcc.n	8012336 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012316:	6a3b      	ldr	r3, [r7, #32]
 8012318:	1e5a      	subs	r2, r3, #1
 801231a:	69fb      	ldr	r3, [r7, #28]
 801231c:	425b      	negs	r3, r3
 801231e:	401a      	ands	r2, r3
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	699b      	ldr	r3, [r3, #24]
 8012328:	683a      	ldr	r2, [r7, #0]
 801232a:	1ad3      	subs	r3, r2, r3
 801232c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	69db      	ldr	r3, [r3, #28]
 8012332:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012334:	e022      	b.n	801237c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	689b      	ldr	r3, [r3, #8]
 801233a:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801233c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801233e:	2b00      	cmp	r3, #0
 8012340:	d119      	bne.n	8012376 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2100      	movs	r1, #0
 8012346:	4618      	mov	r0, r3
 8012348:	f7fd fef5 	bl	8010136 <create_chain>
 801234c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801234e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012350:	2b01      	cmp	r3, #1
 8012352:	d104      	bne.n	801235e <f_lseek+0x2a2>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2202      	movs	r2, #2
 8012358:	755a      	strb	r2, [r3, #21]
 801235a:	2302      	movs	r3, #2
 801235c:	e0ce      	b.n	80124fc <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801235e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012364:	d104      	bne.n	8012370 <f_lseek+0x2b4>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2201      	movs	r2, #1
 801236a:	755a      	strb	r2, [r3, #21]
 801236c:	2301      	movs	r3, #1
 801236e:	e0c5      	b.n	80124fc <f_lseek+0x440>
					fp->obj.sclust = clst;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012374:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801237a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801237c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801237e:	2b00      	cmp	r3, #0
 8012380:	d067      	beq.n	8012452 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8012382:	e03a      	b.n	80123fa <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8012384:	683a      	ldr	r2, [r7, #0]
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	1ad3      	subs	r3, r2, r3
 801238a:	603b      	str	r3, [r7, #0]
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	699a      	ldr	r2, [r3, #24]
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	441a      	add	r2, r3
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	7d1b      	ldrb	r3, [r3, #20]
 801239c:	f003 0302 	and.w	r3, r3, #2
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d00b      	beq.n	80123bc <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80123a8:	4618      	mov	r0, r3
 80123aa:	f7fd fec4 	bl	8010136 <create_chain>
 80123ae:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80123b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d108      	bne.n	80123c8 <f_lseek+0x30c>
							ofs = 0; break;
 80123b6:	2300      	movs	r3, #0
 80123b8:	603b      	str	r3, [r7, #0]
 80123ba:	e022      	b.n	8012402 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7fd fc66 	bl	800fc92 <get_fat>
 80123c6:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80123c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ce:	d104      	bne.n	80123da <f_lseek+0x31e>
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2201      	movs	r2, #1
 80123d4:	755a      	strb	r2, [r3, #21]
 80123d6:	2301      	movs	r3, #1
 80123d8:	e090      	b.n	80124fc <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80123da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d904      	bls.n	80123ea <f_lseek+0x32e>
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	69db      	ldr	r3, [r3, #28]
 80123e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d304      	bcc.n	80123f4 <f_lseek+0x338>
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2202      	movs	r2, #2
 80123ee:	755a      	strb	r2, [r3, #21]
 80123f0:	2302      	movs	r3, #2
 80123f2:	e083      	b.n	80124fc <f_lseek+0x440>
					fp->clust = clst;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80123f8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80123fa:	683a      	ldr	r2, [r7, #0]
 80123fc:	69fb      	ldr	r3, [r7, #28]
 80123fe:	429a      	cmp	r2, r3
 8012400:	d8c0      	bhi.n	8012384 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	699a      	ldr	r2, [r3, #24]
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	441a      	add	r2, r3
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	899b      	ldrh	r3, [r3, #12]
 8012412:	461a      	mov	r2, r3
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	fbb3 f1f2 	udiv	r1, r3, r2
 801241a:	fb01 f202 	mul.w	r2, r1, r2
 801241e:	1a9b      	subs	r3, r3, r2
 8012420:	2b00      	cmp	r3, #0
 8012422:	d016      	beq.n	8012452 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012428:	4618      	mov	r0, r3
 801242a:	f7fd fc13 	bl	800fc54 <clust2sect>
 801242e:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012432:	2b00      	cmp	r3, #0
 8012434:	d104      	bne.n	8012440 <f_lseek+0x384>
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2202      	movs	r2, #2
 801243a:	755a      	strb	r2, [r3, #21]
 801243c:	2302      	movs	r3, #2
 801243e:	e05d      	b.n	80124fc <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	899b      	ldrh	r3, [r3, #12]
 8012444:	461a      	mov	r2, r3
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	fbb3 f3f2 	udiv	r3, r3, r2
 801244c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801244e:	4413      	add	r3, r2
 8012450:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	699a      	ldr	r2, [r3, #24]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	68db      	ldr	r3, [r3, #12]
 801245a:	429a      	cmp	r2, r3
 801245c:	d90a      	bls.n	8012474 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	699a      	ldr	r2, [r3, #24]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	7d1b      	ldrb	r3, [r3, #20]
 801246a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801246e:	b2da      	uxtb	r2, r3
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	699b      	ldr	r3, [r3, #24]
 8012478:	68ba      	ldr	r2, [r7, #8]
 801247a:	8992      	ldrh	r2, [r2, #12]
 801247c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012480:	fb01 f202 	mul.w	r2, r1, r2
 8012484:	1a9b      	subs	r3, r3, r2
 8012486:	2b00      	cmp	r3, #0
 8012488:	d036      	beq.n	80124f8 <f_lseek+0x43c>
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6a1b      	ldr	r3, [r3, #32]
 801248e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012490:	429a      	cmp	r2, r3
 8012492:	d031      	beq.n	80124f8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	7d1b      	ldrb	r3, [r3, #20]
 8012498:	b25b      	sxtb	r3, r3
 801249a:	2b00      	cmp	r3, #0
 801249c:	da18      	bge.n	80124d0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	7858      	ldrb	r0, [r3, #1]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6a1a      	ldr	r2, [r3, #32]
 80124ac:	2301      	movs	r3, #1
 80124ae:	f7fd f845 	bl	800f53c <disk_write>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d004      	beq.n	80124c2 <f_lseek+0x406>
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2201      	movs	r2, #1
 80124bc:	755a      	strb	r2, [r3, #21]
 80124be:	2301      	movs	r3, #1
 80124c0:	e01c      	b.n	80124fc <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	7d1b      	ldrb	r3, [r3, #20]
 80124c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80124ca:	b2da      	uxtb	r2, r3
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	7858      	ldrb	r0, [r3, #1]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80124da:	2301      	movs	r3, #1
 80124dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80124de:	f7fd f80d 	bl	800f4fc <disk_read>
 80124e2:	4603      	mov	r3, r0
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d004      	beq.n	80124f2 <f_lseek+0x436>
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2201      	movs	r2, #1
 80124ec:	755a      	strb	r2, [r3, #21]
 80124ee:	2301      	movs	r3, #1
 80124f0:	e004      	b.n	80124fc <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80124f6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80124f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3740      	adds	r7, #64	@ 0x40
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}

08012504 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b084      	sub	sp, #16
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	460b      	mov	r3, r1
 801250e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8012510:	78fb      	ldrb	r3, [r7, #3]
 8012512:	2b0a      	cmp	r3, #10
 8012514:	d103      	bne.n	801251e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8012516:	210d      	movs	r1, #13
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f7ff fff3 	bl	8012504 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	685b      	ldr	r3, [r3, #4]
 8012522:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2b00      	cmp	r3, #0
 8012528:	db25      	blt.n	8012576 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	1c5a      	adds	r2, r3, #1
 801252e:	60fa      	str	r2, [r7, #12]
 8012530:	687a      	ldr	r2, [r7, #4]
 8012532:	4413      	add	r3, r2
 8012534:	78fa      	ldrb	r2, [r7, #3]
 8012536:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	2b3c      	cmp	r3, #60	@ 0x3c
 801253c:	dd12      	ble.n	8012564 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6818      	ldr	r0, [r3, #0]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	f103 010c 	add.w	r1, r3, #12
 8012548:	68fa      	ldr	r2, [r7, #12]
 801254a:	f107 0308 	add.w	r3, r7, #8
 801254e:	f7ff fb79 	bl	8011c44 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	429a      	cmp	r2, r3
 8012558:	d101      	bne.n	801255e <putc_bfd+0x5a>
 801255a:	2300      	movs	r3, #0
 801255c:	e001      	b.n	8012562 <putc_bfd+0x5e>
 801255e:	f04f 33ff 	mov.w	r3, #4294967295
 8012562:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	68fa      	ldr	r2, [r7, #12]
 8012568:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	689b      	ldr	r3, [r3, #8]
 801256e:	1c5a      	adds	r2, r3, #1
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	609a      	str	r2, [r3, #8]
 8012574:	e000      	b.n	8012578 <putc_bfd+0x74>
	if (i < 0) return;
 8012576:	bf00      	nop
}
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801257e:	b580      	push	{r7, lr}
 8012580:	b084      	sub	sp, #16
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	2b00      	cmp	r3, #0
 801258c:	db16      	blt.n	80125bc <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6818      	ldr	r0, [r3, #0]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f103 010c 	add.w	r1, r3, #12
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	461a      	mov	r2, r3
 801259e:	f107 030c 	add.w	r3, r7, #12
 80125a2:	f7ff fb4f 	bl	8011c44 <f_write>
 80125a6:	4603      	mov	r3, r0
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d107      	bne.n	80125bc <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	685b      	ldr	r3, [r3, #4]
 80125b0:	68fa      	ldr	r2, [r7, #12]
 80125b2:	4293      	cmp	r3, r2
 80125b4:	d102      	bne.n	80125bc <putc_flush+0x3e>
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	689b      	ldr	r3, [r3, #8]
 80125ba:	e001      	b.n	80125c0 <putc_flush+0x42>
	return EOF;
 80125bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	3710      	adds	r7, #16
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}

080125c8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80125c8:	b480      	push	{r7}
 80125ca:	b083      	sub	sp, #12
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
 80125d0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	683a      	ldr	r2, [r7, #0]
 80125d6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2200      	movs	r2, #0
 80125dc:	605a      	str	r2, [r3, #4]
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	685a      	ldr	r2, [r3, #4]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	609a      	str	r2, [r3, #8]
}
 80125e6:	bf00      	nop
 80125e8:	370c      	adds	r7, #12
 80125ea:	46bd      	mov	sp, r7
 80125ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f0:	4770      	bx	lr

080125f2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80125f2:	b580      	push	{r7, lr}
 80125f4:	b096      	sub	sp, #88	@ 0x58
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
 80125fa:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80125fc:	f107 030c 	add.w	r3, r7, #12
 8012600:	6839      	ldr	r1, [r7, #0]
 8012602:	4618      	mov	r0, r3
 8012604:	f7ff ffe0 	bl	80125c8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8012608:	e009      	b.n	801261e <f_puts+0x2c>
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	1c5a      	adds	r2, r3, #1
 801260e:	607a      	str	r2, [r7, #4]
 8012610:	781a      	ldrb	r2, [r3, #0]
 8012612:	f107 030c 	add.w	r3, r7, #12
 8012616:	4611      	mov	r1, r2
 8012618:	4618      	mov	r0, r3
 801261a:	f7ff ff73 	bl	8012504 <putc_bfd>
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	781b      	ldrb	r3, [r3, #0]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d1f1      	bne.n	801260a <f_puts+0x18>
	return putc_flush(&pb);
 8012626:	f107 030c 	add.w	r3, r7, #12
 801262a:	4618      	mov	r0, r3
 801262c:	f7ff ffa7 	bl	801257e <putc_flush>
 8012630:	4603      	mov	r3, r0
}
 8012632:	4618      	mov	r0, r3
 8012634:	3758      	adds	r7, #88	@ 0x58
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}
	...

0801263c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801263c:	b480      	push	{r7}
 801263e:	b087      	sub	sp, #28
 8012640:	af00      	add	r7, sp, #0
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	60b9      	str	r1, [r7, #8]
 8012646:	4613      	mov	r3, r2
 8012648:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801264a:	2301      	movs	r3, #1
 801264c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801264e:	2300      	movs	r3, #0
 8012650:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012652:	4b1f      	ldr	r3, [pc, #124]	@ (80126d0 <FATFS_LinkDriverEx+0x94>)
 8012654:	7a5b      	ldrb	r3, [r3, #9]
 8012656:	b2db      	uxtb	r3, r3
 8012658:	2b00      	cmp	r3, #0
 801265a:	d131      	bne.n	80126c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801265c:	4b1c      	ldr	r3, [pc, #112]	@ (80126d0 <FATFS_LinkDriverEx+0x94>)
 801265e:	7a5b      	ldrb	r3, [r3, #9]
 8012660:	b2db      	uxtb	r3, r3
 8012662:	461a      	mov	r2, r3
 8012664:	4b1a      	ldr	r3, [pc, #104]	@ (80126d0 <FATFS_LinkDriverEx+0x94>)
 8012666:	2100      	movs	r1, #0
 8012668:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801266a:	4b19      	ldr	r3, [pc, #100]	@ (80126d0 <FATFS_LinkDriverEx+0x94>)
 801266c:	7a5b      	ldrb	r3, [r3, #9]
 801266e:	b2db      	uxtb	r3, r3
 8012670:	4a17      	ldr	r2, [pc, #92]	@ (80126d0 <FATFS_LinkDriverEx+0x94>)
 8012672:	009b      	lsls	r3, r3, #2
 8012674:	4413      	add	r3, r2
 8012676:	68fa      	ldr	r2, [r7, #12]
 8012678:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801267a:	4b15      	ldr	r3, [pc, #84]	@ (80126d0 <FATFS_LinkDriverEx+0x94>)
 801267c:	7a5b      	ldrb	r3, [r3, #9]
 801267e:	b2db      	uxtb	r3, r3
 8012680:	461a      	mov	r2, r3
 8012682:	4b13      	ldr	r3, [pc, #76]	@ (80126d0 <FATFS_LinkDriverEx+0x94>)
 8012684:	4413      	add	r3, r2
 8012686:	79fa      	ldrb	r2, [r7, #7]
 8012688:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801268a:	4b11      	ldr	r3, [pc, #68]	@ (80126d0 <FATFS_LinkDriverEx+0x94>)
 801268c:	7a5b      	ldrb	r3, [r3, #9]
 801268e:	b2db      	uxtb	r3, r3
 8012690:	1c5a      	adds	r2, r3, #1
 8012692:	b2d1      	uxtb	r1, r2
 8012694:	4a0e      	ldr	r2, [pc, #56]	@ (80126d0 <FATFS_LinkDriverEx+0x94>)
 8012696:	7251      	strb	r1, [r2, #9]
 8012698:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801269a:	7dbb      	ldrb	r3, [r7, #22]
 801269c:	3330      	adds	r3, #48	@ 0x30
 801269e:	b2da      	uxtb	r2, r3
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	3301      	adds	r3, #1
 80126a8:	223a      	movs	r2, #58	@ 0x3a
 80126aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	3302      	adds	r3, #2
 80126b0:	222f      	movs	r2, #47	@ 0x2f
 80126b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	3303      	adds	r3, #3
 80126b8:	2200      	movs	r2, #0
 80126ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80126bc:	2300      	movs	r3, #0
 80126be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80126c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	371c      	adds	r7, #28
 80126c6:	46bd      	mov	sp, r7
 80126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126cc:	4770      	bx	lr
 80126ce:	bf00      	nop
 80126d0:	20002f10 	.word	0x20002f10

080126d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b082      	sub	sp, #8
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
 80126dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80126de:	2200      	movs	r2, #0
 80126e0:	6839      	ldr	r1, [r7, #0]
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	f7ff ffaa 	bl	801263c <FATFS_LinkDriverEx>
 80126e8:	4603      	mov	r3, r0
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	3708      	adds	r7, #8
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
	...

080126f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80126f4:	b480      	push	{r7}
 80126f6:	b085      	sub	sp, #20
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	4603      	mov	r3, r0
 80126fc:	6039      	str	r1, [r7, #0]
 80126fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012700:	88fb      	ldrh	r3, [r7, #6]
 8012702:	2b7f      	cmp	r3, #127	@ 0x7f
 8012704:	d802      	bhi.n	801270c <ff_convert+0x18>
		c = chr;
 8012706:	88fb      	ldrh	r3, [r7, #6]
 8012708:	81fb      	strh	r3, [r7, #14]
 801270a:	e025      	b.n	8012758 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d00b      	beq.n	801272a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012712:	88fb      	ldrh	r3, [r7, #6]
 8012714:	2bff      	cmp	r3, #255	@ 0xff
 8012716:	d805      	bhi.n	8012724 <ff_convert+0x30>
 8012718:	88fb      	ldrh	r3, [r7, #6]
 801271a:	3b80      	subs	r3, #128	@ 0x80
 801271c:	4a12      	ldr	r2, [pc, #72]	@ (8012768 <ff_convert+0x74>)
 801271e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012722:	e000      	b.n	8012726 <ff_convert+0x32>
 8012724:	2300      	movs	r3, #0
 8012726:	81fb      	strh	r3, [r7, #14]
 8012728:	e016      	b.n	8012758 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801272a:	2300      	movs	r3, #0
 801272c:	81fb      	strh	r3, [r7, #14]
 801272e:	e009      	b.n	8012744 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012730:	89fb      	ldrh	r3, [r7, #14]
 8012732:	4a0d      	ldr	r2, [pc, #52]	@ (8012768 <ff_convert+0x74>)
 8012734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012738:	88fa      	ldrh	r2, [r7, #6]
 801273a:	429a      	cmp	r2, r3
 801273c:	d006      	beq.n	801274c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801273e:	89fb      	ldrh	r3, [r7, #14]
 8012740:	3301      	adds	r3, #1
 8012742:	81fb      	strh	r3, [r7, #14]
 8012744:	89fb      	ldrh	r3, [r7, #14]
 8012746:	2b7f      	cmp	r3, #127	@ 0x7f
 8012748:	d9f2      	bls.n	8012730 <ff_convert+0x3c>
 801274a:	e000      	b.n	801274e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801274c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801274e:	89fb      	ldrh	r3, [r7, #14]
 8012750:	3380      	adds	r3, #128	@ 0x80
 8012752:	b29b      	uxth	r3, r3
 8012754:	b2db      	uxtb	r3, r3
 8012756:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012758:	89fb      	ldrh	r3, [r7, #14]
}
 801275a:	4618      	mov	r0, r3
 801275c:	3714      	adds	r7, #20
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr
 8012766:	bf00      	nop
 8012768:	08018b48 	.word	0x08018b48

0801276c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801276c:	b480      	push	{r7}
 801276e:	b087      	sub	sp, #28
 8012770:	af00      	add	r7, sp, #0
 8012772:	4603      	mov	r3, r0
 8012774:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012776:	88fb      	ldrh	r3, [r7, #6]
 8012778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801277c:	d201      	bcs.n	8012782 <ff_wtoupper+0x16>
 801277e:	4b3e      	ldr	r3, [pc, #248]	@ (8012878 <ff_wtoupper+0x10c>)
 8012780:	e000      	b.n	8012784 <ff_wtoupper+0x18>
 8012782:	4b3e      	ldr	r3, [pc, #248]	@ (801287c <ff_wtoupper+0x110>)
 8012784:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	1c9a      	adds	r2, r3, #2
 801278a:	617a      	str	r2, [r7, #20]
 801278c:	881b      	ldrh	r3, [r3, #0]
 801278e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012790:	8a7b      	ldrh	r3, [r7, #18]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d068      	beq.n	8012868 <ff_wtoupper+0xfc>
 8012796:	88fa      	ldrh	r2, [r7, #6]
 8012798:	8a7b      	ldrh	r3, [r7, #18]
 801279a:	429a      	cmp	r2, r3
 801279c:	d364      	bcc.n	8012868 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	1c9a      	adds	r2, r3, #2
 80127a2:	617a      	str	r2, [r7, #20]
 80127a4:	881b      	ldrh	r3, [r3, #0]
 80127a6:	823b      	strh	r3, [r7, #16]
 80127a8:	8a3b      	ldrh	r3, [r7, #16]
 80127aa:	0a1b      	lsrs	r3, r3, #8
 80127ac:	81fb      	strh	r3, [r7, #14]
 80127ae:	8a3b      	ldrh	r3, [r7, #16]
 80127b0:	b2db      	uxtb	r3, r3
 80127b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80127b4:	88fa      	ldrh	r2, [r7, #6]
 80127b6:	8a79      	ldrh	r1, [r7, #18]
 80127b8:	8a3b      	ldrh	r3, [r7, #16]
 80127ba:	440b      	add	r3, r1
 80127bc:	429a      	cmp	r2, r3
 80127be:	da49      	bge.n	8012854 <ff_wtoupper+0xe8>
			switch (cmd) {
 80127c0:	89fb      	ldrh	r3, [r7, #14]
 80127c2:	2b08      	cmp	r3, #8
 80127c4:	d84f      	bhi.n	8012866 <ff_wtoupper+0xfa>
 80127c6:	a201      	add	r2, pc, #4	@ (adr r2, 80127cc <ff_wtoupper+0x60>)
 80127c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127cc:	080127f1 	.word	0x080127f1
 80127d0:	08012803 	.word	0x08012803
 80127d4:	08012819 	.word	0x08012819
 80127d8:	08012821 	.word	0x08012821
 80127dc:	08012829 	.word	0x08012829
 80127e0:	08012831 	.word	0x08012831
 80127e4:	08012839 	.word	0x08012839
 80127e8:	08012841 	.word	0x08012841
 80127ec:	08012849 	.word	0x08012849
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80127f0:	88fa      	ldrh	r2, [r7, #6]
 80127f2:	8a7b      	ldrh	r3, [r7, #18]
 80127f4:	1ad3      	subs	r3, r2, r3
 80127f6:	005b      	lsls	r3, r3, #1
 80127f8:	697a      	ldr	r2, [r7, #20]
 80127fa:	4413      	add	r3, r2
 80127fc:	881b      	ldrh	r3, [r3, #0]
 80127fe:	80fb      	strh	r3, [r7, #6]
 8012800:	e027      	b.n	8012852 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012802:	88fa      	ldrh	r2, [r7, #6]
 8012804:	8a7b      	ldrh	r3, [r7, #18]
 8012806:	1ad3      	subs	r3, r2, r3
 8012808:	b29b      	uxth	r3, r3
 801280a:	f003 0301 	and.w	r3, r3, #1
 801280e:	b29b      	uxth	r3, r3
 8012810:	88fa      	ldrh	r2, [r7, #6]
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	80fb      	strh	r3, [r7, #6]
 8012816:	e01c      	b.n	8012852 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012818:	88fb      	ldrh	r3, [r7, #6]
 801281a:	3b10      	subs	r3, #16
 801281c:	80fb      	strh	r3, [r7, #6]
 801281e:	e018      	b.n	8012852 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012820:	88fb      	ldrh	r3, [r7, #6]
 8012822:	3b20      	subs	r3, #32
 8012824:	80fb      	strh	r3, [r7, #6]
 8012826:	e014      	b.n	8012852 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012828:	88fb      	ldrh	r3, [r7, #6]
 801282a:	3b30      	subs	r3, #48	@ 0x30
 801282c:	80fb      	strh	r3, [r7, #6]
 801282e:	e010      	b.n	8012852 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012830:	88fb      	ldrh	r3, [r7, #6]
 8012832:	3b1a      	subs	r3, #26
 8012834:	80fb      	strh	r3, [r7, #6]
 8012836:	e00c      	b.n	8012852 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012838:	88fb      	ldrh	r3, [r7, #6]
 801283a:	3308      	adds	r3, #8
 801283c:	80fb      	strh	r3, [r7, #6]
 801283e:	e008      	b.n	8012852 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012840:	88fb      	ldrh	r3, [r7, #6]
 8012842:	3b50      	subs	r3, #80	@ 0x50
 8012844:	80fb      	strh	r3, [r7, #6]
 8012846:	e004      	b.n	8012852 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012848:	88fb      	ldrh	r3, [r7, #6]
 801284a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801284e:	80fb      	strh	r3, [r7, #6]
 8012850:	bf00      	nop
			}
			break;
 8012852:	e008      	b.n	8012866 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012854:	89fb      	ldrh	r3, [r7, #14]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d195      	bne.n	8012786 <ff_wtoupper+0x1a>
 801285a:	8a3b      	ldrh	r3, [r7, #16]
 801285c:	005b      	lsls	r3, r3, #1
 801285e:	697a      	ldr	r2, [r7, #20]
 8012860:	4413      	add	r3, r2
 8012862:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012864:	e78f      	b.n	8012786 <ff_wtoupper+0x1a>
			break;
 8012866:	bf00      	nop
	}

	return chr;
 8012868:	88fb      	ldrh	r3, [r7, #6]
}
 801286a:	4618      	mov	r0, r3
 801286c:	371c      	adds	r7, #28
 801286e:	46bd      	mov	sp, r7
 8012870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012874:	4770      	bx	lr
 8012876:	bf00      	nop
 8012878:	08018c48 	.word	0x08018c48
 801287c:	08018e3c 	.word	0x08018e3c

08012880 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012884:	2200      	movs	r2, #0
 8012886:	4912      	ldr	r1, [pc, #72]	@ (80128d0 <MX_USB_DEVICE_Init+0x50>)
 8012888:	4812      	ldr	r0, [pc, #72]	@ (80128d4 <MX_USB_DEVICE_Init+0x54>)
 801288a:	f7fb fad7 	bl	800de3c <USBD_Init>
 801288e:	4603      	mov	r3, r0
 8012890:	2b00      	cmp	r3, #0
 8012892:	d001      	beq.n	8012898 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012894:	f7ef fb4a 	bl	8001f2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012898:	490f      	ldr	r1, [pc, #60]	@ (80128d8 <MX_USB_DEVICE_Init+0x58>)
 801289a:	480e      	ldr	r0, [pc, #56]	@ (80128d4 <MX_USB_DEVICE_Init+0x54>)
 801289c:	f7fb fafe 	bl	800de9c <USBD_RegisterClass>
 80128a0:	4603      	mov	r3, r0
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d001      	beq.n	80128aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80128a6:	f7ef fb41 	bl	8001f2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80128aa:	490c      	ldr	r1, [pc, #48]	@ (80128dc <MX_USB_DEVICE_Init+0x5c>)
 80128ac:	4809      	ldr	r0, [pc, #36]	@ (80128d4 <MX_USB_DEVICE_Init+0x54>)
 80128ae:	f7fb f9f5 	bl	800dc9c <USBD_CDC_RegisterInterface>
 80128b2:	4603      	mov	r3, r0
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d001      	beq.n	80128bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80128b8:	f7ef fb38 	bl	8001f2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80128bc:	4805      	ldr	r0, [pc, #20]	@ (80128d4 <MX_USB_DEVICE_Init+0x54>)
 80128be:	f7fb fb23 	bl	800df08 <USBD_Start>
 80128c2:	4603      	mov	r3, r0
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d001      	beq.n	80128cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80128c8:	f7ef fb30 	bl	8001f2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80128cc:	bf00      	nop
 80128ce:	bd80      	pop	{r7, pc}
 80128d0:	20000190 	.word	0x20000190
 80128d4:	20002f1c 	.word	0x20002f1c
 80128d8:	200000fc 	.word	0x200000fc
 80128dc:	2000017c 	.word	0x2000017c

080128e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80128e4:	2200      	movs	r2, #0
 80128e6:	4905      	ldr	r1, [pc, #20]	@ (80128fc <CDC_Init_FS+0x1c>)
 80128e8:	4805      	ldr	r0, [pc, #20]	@ (8012900 <CDC_Init_FS+0x20>)
 80128ea:	f7fb f9f1 	bl	800dcd0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80128ee:	4905      	ldr	r1, [pc, #20]	@ (8012904 <CDC_Init_FS+0x24>)
 80128f0:	4803      	ldr	r0, [pc, #12]	@ (8012900 <CDC_Init_FS+0x20>)
 80128f2:	f7fb fa0f 	bl	800dd14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80128f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	200039f8 	.word	0x200039f8
 8012900:	20002f1c 	.word	0x20002f1c
 8012904:	200031f8 	.word	0x200031f8

08012908 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012908:	b480      	push	{r7}
 801290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801290c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801290e:	4618      	mov	r0, r3
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr

08012918 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
 801291e:	4603      	mov	r3, r0
 8012920:	6039      	str	r1, [r7, #0]
 8012922:	71fb      	strb	r3, [r7, #7]
 8012924:	4613      	mov	r3, r2
 8012926:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012928:	79fb      	ldrb	r3, [r7, #7]
 801292a:	2b23      	cmp	r3, #35	@ 0x23
 801292c:	d84a      	bhi.n	80129c4 <CDC_Control_FS+0xac>
 801292e:	a201      	add	r2, pc, #4	@ (adr r2, 8012934 <CDC_Control_FS+0x1c>)
 8012930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012934:	080129c5 	.word	0x080129c5
 8012938:	080129c5 	.word	0x080129c5
 801293c:	080129c5 	.word	0x080129c5
 8012940:	080129c5 	.word	0x080129c5
 8012944:	080129c5 	.word	0x080129c5
 8012948:	080129c5 	.word	0x080129c5
 801294c:	080129c5 	.word	0x080129c5
 8012950:	080129c5 	.word	0x080129c5
 8012954:	080129c5 	.word	0x080129c5
 8012958:	080129c5 	.word	0x080129c5
 801295c:	080129c5 	.word	0x080129c5
 8012960:	080129c5 	.word	0x080129c5
 8012964:	080129c5 	.word	0x080129c5
 8012968:	080129c5 	.word	0x080129c5
 801296c:	080129c5 	.word	0x080129c5
 8012970:	080129c5 	.word	0x080129c5
 8012974:	080129c5 	.word	0x080129c5
 8012978:	080129c5 	.word	0x080129c5
 801297c:	080129c5 	.word	0x080129c5
 8012980:	080129c5 	.word	0x080129c5
 8012984:	080129c5 	.word	0x080129c5
 8012988:	080129c5 	.word	0x080129c5
 801298c:	080129c5 	.word	0x080129c5
 8012990:	080129c5 	.word	0x080129c5
 8012994:	080129c5 	.word	0x080129c5
 8012998:	080129c5 	.word	0x080129c5
 801299c:	080129c5 	.word	0x080129c5
 80129a0:	080129c5 	.word	0x080129c5
 80129a4:	080129c5 	.word	0x080129c5
 80129a8:	080129c5 	.word	0x080129c5
 80129ac:	080129c5 	.word	0x080129c5
 80129b0:	080129c5 	.word	0x080129c5
 80129b4:	080129c5 	.word	0x080129c5
 80129b8:	080129c5 	.word	0x080129c5
 80129bc:	080129c5 	.word	0x080129c5
 80129c0:	080129c5 	.word	0x080129c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80129c4:	bf00      	nop
  }

  return (USBD_OK);
 80129c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	370c      	adds	r7, #12
 80129cc:	46bd      	mov	sp, r7
 80129ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d2:	4770      	bx	lr

080129d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
 80129dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80129de:	6879      	ldr	r1, [r7, #4]
 80129e0:	4805      	ldr	r0, [pc, #20]	@ (80129f8 <CDC_Receive_FS+0x24>)
 80129e2:	f7fb f997 	bl	800dd14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80129e6:	4804      	ldr	r0, [pc, #16]	@ (80129f8 <CDC_Receive_FS+0x24>)
 80129e8:	f7fb f9f2 	bl	800ddd0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80129ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	3708      	adds	r7, #8
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	bf00      	nop
 80129f8:	20002f1c 	.word	0x20002f1c

080129fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b084      	sub	sp, #16
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	460b      	mov	r3, r1
 8012a06:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8012a44 <CDC_Transmit_FS+0x48>)
 8012a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012a12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d001      	beq.n	8012a22 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012a1e:	2301      	movs	r3, #1
 8012a20:	e00b      	b.n	8012a3a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012a22:	887b      	ldrh	r3, [r7, #2]
 8012a24:	461a      	mov	r2, r3
 8012a26:	6879      	ldr	r1, [r7, #4]
 8012a28:	4806      	ldr	r0, [pc, #24]	@ (8012a44 <CDC_Transmit_FS+0x48>)
 8012a2a:	f7fb f951 	bl	800dcd0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012a2e:	4805      	ldr	r0, [pc, #20]	@ (8012a44 <CDC_Transmit_FS+0x48>)
 8012a30:	f7fb f98e 	bl	800dd50 <USBD_CDC_TransmitPacket>
 8012a34:	4603      	mov	r3, r0
 8012a36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3710      	adds	r7, #16
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}
 8012a42:	bf00      	nop
 8012a44:	20002f1c 	.word	0x20002f1c

08012a48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b087      	sub	sp, #28
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	60f8      	str	r0, [r7, #12]
 8012a50:	60b9      	str	r1, [r7, #8]
 8012a52:	4613      	mov	r3, r2
 8012a54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012a56:	2300      	movs	r3, #0
 8012a58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012a5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	371c      	adds	r7, #28
 8012a62:	46bd      	mov	sp, r7
 8012a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a68:	4770      	bx	lr
	...

08012a6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b083      	sub	sp, #12
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	4603      	mov	r3, r0
 8012a74:	6039      	str	r1, [r7, #0]
 8012a76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	2212      	movs	r2, #18
 8012a7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012a7e:	4b03      	ldr	r3, [pc, #12]	@ (8012a8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	370c      	adds	r7, #12
 8012a84:	46bd      	mov	sp, r7
 8012a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8a:	4770      	bx	lr
 8012a8c:	200001ac 	.word	0x200001ac

08012a90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a90:	b480      	push	{r7}
 8012a92:	b083      	sub	sp, #12
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	4603      	mov	r3, r0
 8012a98:	6039      	str	r1, [r7, #0]
 8012a9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	2204      	movs	r2, #4
 8012aa0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012aa2:	4b03      	ldr	r3, [pc, #12]	@ (8012ab0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	370c      	adds	r7, #12
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aae:	4770      	bx	lr
 8012ab0:	200001c0 	.word	0x200001c0

08012ab4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	4603      	mov	r3, r0
 8012abc:	6039      	str	r1, [r7, #0]
 8012abe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012ac0:	79fb      	ldrb	r3, [r7, #7]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d105      	bne.n	8012ad2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012ac6:	683a      	ldr	r2, [r7, #0]
 8012ac8:	4907      	ldr	r1, [pc, #28]	@ (8012ae8 <USBD_FS_ProductStrDescriptor+0x34>)
 8012aca:	4808      	ldr	r0, [pc, #32]	@ (8012aec <USBD_FS_ProductStrDescriptor+0x38>)
 8012acc:	f7fc fbe0 	bl	800f290 <USBD_GetString>
 8012ad0:	e004      	b.n	8012adc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012ad2:	683a      	ldr	r2, [r7, #0]
 8012ad4:	4904      	ldr	r1, [pc, #16]	@ (8012ae8 <USBD_FS_ProductStrDescriptor+0x34>)
 8012ad6:	4805      	ldr	r0, [pc, #20]	@ (8012aec <USBD_FS_ProductStrDescriptor+0x38>)
 8012ad8:	f7fc fbda 	bl	800f290 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012adc:	4b02      	ldr	r3, [pc, #8]	@ (8012ae8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	3708      	adds	r7, #8
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}
 8012ae6:	bf00      	nop
 8012ae8:	200041f8 	.word	0x200041f8
 8012aec:	08018028 	.word	0x08018028

08012af0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b082      	sub	sp, #8
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	4603      	mov	r3, r0
 8012af8:	6039      	str	r1, [r7, #0]
 8012afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012afc:	683a      	ldr	r2, [r7, #0]
 8012afe:	4904      	ldr	r1, [pc, #16]	@ (8012b10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012b00:	4804      	ldr	r0, [pc, #16]	@ (8012b14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012b02:	f7fc fbc5 	bl	800f290 <USBD_GetString>
  return USBD_StrDesc;
 8012b06:	4b02      	ldr	r3, [pc, #8]	@ (8012b10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3708      	adds	r7, #8
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}
 8012b10:	200041f8 	.word	0x200041f8
 8012b14:	08018040 	.word	0x08018040

08012b18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b082      	sub	sp, #8
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	4603      	mov	r3, r0
 8012b20:	6039      	str	r1, [r7, #0]
 8012b22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	221a      	movs	r2, #26
 8012b28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012b2a:	f000 f843 	bl	8012bb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012b2e:	4b02      	ldr	r3, [pc, #8]	@ (8012b38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3708      	adds	r7, #8
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}
 8012b38:	200001c4 	.word	0x200001c4

08012b3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b082      	sub	sp, #8
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	4603      	mov	r3, r0
 8012b44:	6039      	str	r1, [r7, #0]
 8012b46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012b48:	79fb      	ldrb	r3, [r7, #7]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d105      	bne.n	8012b5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012b4e:	683a      	ldr	r2, [r7, #0]
 8012b50:	4907      	ldr	r1, [pc, #28]	@ (8012b70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012b52:	4808      	ldr	r0, [pc, #32]	@ (8012b74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012b54:	f7fc fb9c 	bl	800f290 <USBD_GetString>
 8012b58:	e004      	b.n	8012b64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012b5a:	683a      	ldr	r2, [r7, #0]
 8012b5c:	4904      	ldr	r1, [pc, #16]	@ (8012b70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012b5e:	4805      	ldr	r0, [pc, #20]	@ (8012b74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012b60:	f7fc fb96 	bl	800f290 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012b64:	4b02      	ldr	r3, [pc, #8]	@ (8012b70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3708      	adds	r7, #8
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
 8012b6e:	bf00      	nop
 8012b70:	200041f8 	.word	0x200041f8
 8012b74:	08018054 	.word	0x08018054

08012b78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b082      	sub	sp, #8
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	4603      	mov	r3, r0
 8012b80:	6039      	str	r1, [r7, #0]
 8012b82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012b84:	79fb      	ldrb	r3, [r7, #7]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d105      	bne.n	8012b96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012b8a:	683a      	ldr	r2, [r7, #0]
 8012b8c:	4907      	ldr	r1, [pc, #28]	@ (8012bac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012b8e:	4808      	ldr	r0, [pc, #32]	@ (8012bb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012b90:	f7fc fb7e 	bl	800f290 <USBD_GetString>
 8012b94:	e004      	b.n	8012ba0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012b96:	683a      	ldr	r2, [r7, #0]
 8012b98:	4904      	ldr	r1, [pc, #16]	@ (8012bac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012b9a:	4805      	ldr	r0, [pc, #20]	@ (8012bb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012b9c:	f7fc fb78 	bl	800f290 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ba0:	4b02      	ldr	r3, [pc, #8]	@ (8012bac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3708      	adds	r7, #8
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}
 8012baa:	bf00      	nop
 8012bac:	200041f8 	.word	0x200041f8
 8012bb0:	08018060 	.word	0x08018060

08012bb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b084      	sub	sp, #16
 8012bb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012bba:	4b0f      	ldr	r3, [pc, #60]	@ (8012bf8 <Get_SerialNum+0x44>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8012bfc <Get_SerialNum+0x48>)
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8012c00 <Get_SerialNum+0x4c>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012bcc:	68fa      	ldr	r2, [r7, #12]
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	4413      	add	r3, r2
 8012bd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d009      	beq.n	8012bee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012bda:	2208      	movs	r2, #8
 8012bdc:	4909      	ldr	r1, [pc, #36]	@ (8012c04 <Get_SerialNum+0x50>)
 8012bde:	68f8      	ldr	r0, [r7, #12]
 8012be0:	f000 f814 	bl	8012c0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012be4:	2204      	movs	r2, #4
 8012be6:	4908      	ldr	r1, [pc, #32]	@ (8012c08 <Get_SerialNum+0x54>)
 8012be8:	68b8      	ldr	r0, [r7, #8]
 8012bea:	f000 f80f 	bl	8012c0c <IntToUnicode>
  }
}
 8012bee:	bf00      	nop
 8012bf0:	3710      	adds	r7, #16
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	bf00      	nop
 8012bf8:	1fff7a10 	.word	0x1fff7a10
 8012bfc:	1fff7a14 	.word	0x1fff7a14
 8012c00:	1fff7a18 	.word	0x1fff7a18
 8012c04:	200001c6 	.word	0x200001c6
 8012c08:	200001d6 	.word	0x200001d6

08012c0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b087      	sub	sp, #28
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	60f8      	str	r0, [r7, #12]
 8012c14:	60b9      	str	r1, [r7, #8]
 8012c16:	4613      	mov	r3, r2
 8012c18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012c1e:	2300      	movs	r3, #0
 8012c20:	75fb      	strb	r3, [r7, #23]
 8012c22:	e027      	b.n	8012c74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	0f1b      	lsrs	r3, r3, #28
 8012c28:	2b09      	cmp	r3, #9
 8012c2a:	d80b      	bhi.n	8012c44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	0f1b      	lsrs	r3, r3, #28
 8012c30:	b2da      	uxtb	r2, r3
 8012c32:	7dfb      	ldrb	r3, [r7, #23]
 8012c34:	005b      	lsls	r3, r3, #1
 8012c36:	4619      	mov	r1, r3
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	440b      	add	r3, r1
 8012c3c:	3230      	adds	r2, #48	@ 0x30
 8012c3e:	b2d2      	uxtb	r2, r2
 8012c40:	701a      	strb	r2, [r3, #0]
 8012c42:	e00a      	b.n	8012c5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	0f1b      	lsrs	r3, r3, #28
 8012c48:	b2da      	uxtb	r2, r3
 8012c4a:	7dfb      	ldrb	r3, [r7, #23]
 8012c4c:	005b      	lsls	r3, r3, #1
 8012c4e:	4619      	mov	r1, r3
 8012c50:	68bb      	ldr	r3, [r7, #8]
 8012c52:	440b      	add	r3, r1
 8012c54:	3237      	adds	r2, #55	@ 0x37
 8012c56:	b2d2      	uxtb	r2, r2
 8012c58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	011b      	lsls	r3, r3, #4
 8012c5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012c60:	7dfb      	ldrb	r3, [r7, #23]
 8012c62:	005b      	lsls	r3, r3, #1
 8012c64:	3301      	adds	r3, #1
 8012c66:	68ba      	ldr	r2, [r7, #8]
 8012c68:	4413      	add	r3, r2
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012c6e:	7dfb      	ldrb	r3, [r7, #23]
 8012c70:	3301      	adds	r3, #1
 8012c72:	75fb      	strb	r3, [r7, #23]
 8012c74:	7dfa      	ldrb	r2, [r7, #23]
 8012c76:	79fb      	ldrb	r3, [r7, #7]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d3d3      	bcc.n	8012c24 <IntToUnicode+0x18>
  }
}
 8012c7c:	bf00      	nop
 8012c7e:	bf00      	nop
 8012c80:	371c      	adds	r7, #28
 8012c82:	46bd      	mov	sp, r7
 8012c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c88:	4770      	bx	lr
	...

08012c8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b08a      	sub	sp, #40	@ 0x28
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012c94:	f107 0314 	add.w	r3, r7, #20
 8012c98:	2200      	movs	r2, #0
 8012c9a:	601a      	str	r2, [r3, #0]
 8012c9c:	605a      	str	r2, [r3, #4]
 8012c9e:	609a      	str	r2, [r3, #8]
 8012ca0:	60da      	str	r2, [r3, #12]
 8012ca2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012cac:	d13a      	bne.n	8012d24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012cae:	2300      	movs	r3, #0
 8012cb0:	613b      	str	r3, [r7, #16]
 8012cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8012d2c <HAL_PCD_MspInit+0xa0>)
 8012cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8012d2c <HAL_PCD_MspInit+0xa0>)
 8012cb8:	f043 0301 	orr.w	r3, r3, #1
 8012cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8012cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8012d2c <HAL_PCD_MspInit+0xa0>)
 8012cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cc2:	f003 0301 	and.w	r3, r3, #1
 8012cc6:	613b      	str	r3, [r7, #16]
 8012cc8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012cca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012cd0:	2302      	movs	r3, #2
 8012cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012cd8:	2303      	movs	r3, #3
 8012cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012cdc:	230a      	movs	r3, #10
 8012cde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ce0:	f107 0314 	add.w	r3, r7, #20
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	4812      	ldr	r0, [pc, #72]	@ (8012d30 <HAL_PCD_MspInit+0xa4>)
 8012ce8:	f7f3 f9fc 	bl	80060e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012cec:	4b0f      	ldr	r3, [pc, #60]	@ (8012d2c <HAL_PCD_MspInit+0xa0>)
 8012cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8012d2c <HAL_PCD_MspInit+0xa0>)
 8012cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cf6:	6353      	str	r3, [r2, #52]	@ 0x34
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	60fb      	str	r3, [r7, #12]
 8012cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8012d2c <HAL_PCD_MspInit+0xa0>)
 8012cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d00:	4a0a      	ldr	r2, [pc, #40]	@ (8012d2c <HAL_PCD_MspInit+0xa0>)
 8012d02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8012d06:	6453      	str	r3, [r2, #68]	@ 0x44
 8012d08:	4b08      	ldr	r3, [pc, #32]	@ (8012d2c <HAL_PCD_MspInit+0xa0>)
 8012d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012d10:	60fb      	str	r3, [r7, #12]
 8012d12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012d14:	2200      	movs	r2, #0
 8012d16:	2100      	movs	r1, #0
 8012d18:	2043      	movs	r0, #67	@ 0x43
 8012d1a:	f7f2 fea0 	bl	8005a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012d1e:	2043      	movs	r0, #67	@ 0x43
 8012d20:	f7f2 feb9 	bl	8005a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012d24:	bf00      	nop
 8012d26:	3728      	adds	r7, #40	@ 0x28
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}
 8012d2c:	40023800 	.word	0x40023800
 8012d30:	40020000 	.word	0x40020000

08012d34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b082      	sub	sp, #8
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012d48:	4619      	mov	r1, r3
 8012d4a:	4610      	mov	r0, r2
 8012d4c:	f7fb f929 	bl	800dfa2 <USBD_LL_SetupStage>
}
 8012d50:	bf00      	nop
 8012d52:	3708      	adds	r7, #8
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}

08012d58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
 8012d60:	460b      	mov	r3, r1
 8012d62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012d6a:	78fa      	ldrb	r2, [r7, #3]
 8012d6c:	6879      	ldr	r1, [r7, #4]
 8012d6e:	4613      	mov	r3, r2
 8012d70:	00db      	lsls	r3, r3, #3
 8012d72:	4413      	add	r3, r2
 8012d74:	009b      	lsls	r3, r3, #2
 8012d76:	440b      	add	r3, r1
 8012d78:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012d7c:	681a      	ldr	r2, [r3, #0]
 8012d7e:	78fb      	ldrb	r3, [r7, #3]
 8012d80:	4619      	mov	r1, r3
 8012d82:	f7fb f963 	bl	800e04c <USBD_LL_DataOutStage>
}
 8012d86:	bf00      	nop
 8012d88:	3708      	adds	r7, #8
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}

08012d8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d8e:	b580      	push	{r7, lr}
 8012d90:	b082      	sub	sp, #8
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	6078      	str	r0, [r7, #4]
 8012d96:	460b      	mov	r3, r1
 8012d98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012da0:	78fa      	ldrb	r2, [r7, #3]
 8012da2:	6879      	ldr	r1, [r7, #4]
 8012da4:	4613      	mov	r3, r2
 8012da6:	00db      	lsls	r3, r3, #3
 8012da8:	4413      	add	r3, r2
 8012daa:	009b      	lsls	r3, r3, #2
 8012dac:	440b      	add	r3, r1
 8012dae:	3320      	adds	r3, #32
 8012db0:	681a      	ldr	r2, [r3, #0]
 8012db2:	78fb      	ldrb	r3, [r7, #3]
 8012db4:	4619      	mov	r1, r3
 8012db6:	f7fb fa05 	bl	800e1c4 <USBD_LL_DataInStage>
}
 8012dba:	bf00      	nop
 8012dbc:	3708      	adds	r7, #8
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}

08012dc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012dc2:	b580      	push	{r7, lr}
 8012dc4:	b082      	sub	sp, #8
 8012dc6:	af00      	add	r7, sp, #0
 8012dc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fb fb49 	bl	800e468 <USBD_LL_SOF>
}
 8012dd6:	bf00      	nop
 8012dd8:	3708      	adds	r7, #8
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}

08012dde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012dde:	b580      	push	{r7, lr}
 8012de0:	b084      	sub	sp, #16
 8012de2:	af00      	add	r7, sp, #0
 8012de4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012de6:	2301      	movs	r3, #1
 8012de8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	79db      	ldrb	r3, [r3, #7]
 8012dee:	2b02      	cmp	r3, #2
 8012df0:	d001      	beq.n	8012df6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012df2:	f7ef f89b 	bl	8001f2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012dfc:	7bfa      	ldrb	r2, [r7, #15]
 8012dfe:	4611      	mov	r1, r2
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7fb faed 	bl	800e3e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7fb fa94 	bl	800e33a <USBD_LL_Reset>
}
 8012e12:	bf00      	nop
 8012e14:	3710      	adds	r7, #16
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}
	...

08012e1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b082      	sub	sp, #8
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7fb fae8 	bl	800e400 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	687a      	ldr	r2, [r7, #4]
 8012e3c:	6812      	ldr	r2, [r2, #0]
 8012e3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012e42:	f043 0301 	orr.w	r3, r3, #1
 8012e46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	7adb      	ldrb	r3, [r3, #11]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d005      	beq.n	8012e5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012e50:	4b04      	ldr	r3, [pc, #16]	@ (8012e64 <HAL_PCD_SuspendCallback+0x48>)
 8012e52:	691b      	ldr	r3, [r3, #16]
 8012e54:	4a03      	ldr	r2, [pc, #12]	@ (8012e64 <HAL_PCD_SuspendCallback+0x48>)
 8012e56:	f043 0306 	orr.w	r3, r3, #6
 8012e5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012e5c:	bf00      	nop
 8012e5e:	3708      	adds	r7, #8
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}
 8012e64:	e000ed00 	.word	0xe000ed00

08012e68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7fb fade 	bl	800e438 <USBD_LL_Resume>
}
 8012e7c:	bf00      	nop
 8012e7e:	3708      	adds	r7, #8
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b082      	sub	sp, #8
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
 8012e8c:	460b      	mov	r3, r1
 8012e8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e96:	78fa      	ldrb	r2, [r7, #3]
 8012e98:	4611      	mov	r1, r2
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7fb fb36 	bl	800e50c <USBD_LL_IsoOUTIncomplete>
}
 8012ea0:	bf00      	nop
 8012ea2:	3708      	adds	r7, #8
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}

08012ea8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b082      	sub	sp, #8
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012eba:	78fa      	ldrb	r2, [r7, #3]
 8012ebc:	4611      	mov	r1, r2
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7fb faf2 	bl	800e4a8 <USBD_LL_IsoINIncomplete>
}
 8012ec4:	bf00      	nop
 8012ec6:	3708      	adds	r7, #8
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}

08012ecc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b082      	sub	sp, #8
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7fb fb48 	bl	800e570 <USBD_LL_DevConnected>
}
 8012ee0:	bf00      	nop
 8012ee2:	3708      	adds	r7, #8
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}

08012ee8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7fb fb45 	bl	800e586 <USBD_LL_DevDisconnected>
}
 8012efc:	bf00      	nop
 8012efe:	3708      	adds	r7, #8
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}

08012f04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b082      	sub	sp, #8
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	781b      	ldrb	r3, [r3, #0]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d13c      	bne.n	8012f8e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012f14:	4a20      	ldr	r2, [pc, #128]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f20:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012f24:	4b1c      	ldr	r3, [pc, #112]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8012f2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8012f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f2e:	2204      	movs	r2, #4
 8012f30:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012f32:	4b19      	ldr	r3, [pc, #100]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f34:	2202      	movs	r2, #2
 8012f36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012f38:	4b17      	ldr	r3, [pc, #92]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012f3e:	4b16      	ldr	r3, [pc, #88]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f40:	2202      	movs	r2, #2
 8012f42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012f44:	4b14      	ldr	r3, [pc, #80]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f46:	2200      	movs	r2, #0
 8012f48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012f4a:	4b13      	ldr	r3, [pc, #76]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012f50:	4b11      	ldr	r3, [pc, #68]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f52:	2200      	movs	r2, #0
 8012f54:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012f56:	4b10      	ldr	r3, [pc, #64]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f58:	2200      	movs	r2, #0
 8012f5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f5e:	2200      	movs	r2, #0
 8012f60:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012f62:	480d      	ldr	r0, [pc, #52]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f64:	f7f5 f846 	bl	8007ff4 <HAL_PCD_Init>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d001      	beq.n	8012f72 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012f6e:	f7ee ffdd 	bl	8001f2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012f72:	2180      	movs	r1, #128	@ 0x80
 8012f74:	4808      	ldr	r0, [pc, #32]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f76:	f7f6 fa72 	bl	800945e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012f7a:	2240      	movs	r2, #64	@ 0x40
 8012f7c:	2100      	movs	r1, #0
 8012f7e:	4806      	ldr	r0, [pc, #24]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f80:	f7f6 fa26 	bl	80093d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012f84:	2280      	movs	r2, #128	@ 0x80
 8012f86:	2101      	movs	r1, #1
 8012f88:	4803      	ldr	r0, [pc, #12]	@ (8012f98 <USBD_LL_Init+0x94>)
 8012f8a:	f7f6 fa21 	bl	80093d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012f8e:	2300      	movs	r3, #0
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3708      	adds	r7, #8
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	200043f8 	.word	0x200043f8

08012f9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b084      	sub	sp, #16
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7f5 f92d 	bl	8008212 <HAL_PCD_Start>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fbc:	7bfb      	ldrb	r3, [r7, #15]
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f000 f942 	bl	8013248 <USBD_Get_USB_Status>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	3710      	adds	r7, #16
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}

08012fd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012fd2:	b580      	push	{r7, lr}
 8012fd4:	b084      	sub	sp, #16
 8012fd6:	af00      	add	r7, sp, #0
 8012fd8:	6078      	str	r0, [r7, #4]
 8012fda:	4608      	mov	r0, r1
 8012fdc:	4611      	mov	r1, r2
 8012fde:	461a      	mov	r2, r3
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	70fb      	strb	r3, [r7, #3]
 8012fe4:	460b      	mov	r3, r1
 8012fe6:	70bb      	strb	r3, [r7, #2]
 8012fe8:	4613      	mov	r3, r2
 8012fea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fec:	2300      	movs	r3, #0
 8012fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012ffa:	78bb      	ldrb	r3, [r7, #2]
 8012ffc:	883a      	ldrh	r2, [r7, #0]
 8012ffe:	78f9      	ldrb	r1, [r7, #3]
 8013000:	f7f5 fe01 	bl	8008c06 <HAL_PCD_EP_Open>
 8013004:	4603      	mov	r3, r0
 8013006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013008:	7bfb      	ldrb	r3, [r7, #15]
 801300a:	4618      	mov	r0, r3
 801300c:	f000 f91c 	bl	8013248 <USBD_Get_USB_Status>
 8013010:	4603      	mov	r3, r0
 8013012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013014:	7bbb      	ldrb	r3, [r7, #14]
}
 8013016:	4618      	mov	r0, r3
 8013018:	3710      	adds	r7, #16
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}

0801301e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801301e:	b580      	push	{r7, lr}
 8013020:	b084      	sub	sp, #16
 8013022:	af00      	add	r7, sp, #0
 8013024:	6078      	str	r0, [r7, #4]
 8013026:	460b      	mov	r3, r1
 8013028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801302a:	2300      	movs	r3, #0
 801302c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801302e:	2300      	movs	r3, #0
 8013030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013038:	78fa      	ldrb	r2, [r7, #3]
 801303a:	4611      	mov	r1, r2
 801303c:	4618      	mov	r0, r3
 801303e:	f7f5 fe4c 	bl	8008cda <HAL_PCD_EP_Close>
 8013042:	4603      	mov	r3, r0
 8013044:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013046:	7bfb      	ldrb	r3, [r7, #15]
 8013048:	4618      	mov	r0, r3
 801304a:	f000 f8fd 	bl	8013248 <USBD_Get_USB_Status>
 801304e:	4603      	mov	r3, r0
 8013050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013052:	7bbb      	ldrb	r3, [r7, #14]
}
 8013054:	4618      	mov	r0, r3
 8013056:	3710      	adds	r7, #16
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b084      	sub	sp, #16
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	460b      	mov	r3, r1
 8013066:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013068:	2300      	movs	r3, #0
 801306a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801306c:	2300      	movs	r3, #0
 801306e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013076:	78fa      	ldrb	r2, [r7, #3]
 8013078:	4611      	mov	r1, r2
 801307a:	4618      	mov	r0, r3
 801307c:	f7f5 ff04 	bl	8008e88 <HAL_PCD_EP_SetStall>
 8013080:	4603      	mov	r3, r0
 8013082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013084:	7bfb      	ldrb	r3, [r7, #15]
 8013086:	4618      	mov	r0, r3
 8013088:	f000 f8de 	bl	8013248 <USBD_Get_USB_Status>
 801308c:	4603      	mov	r3, r0
 801308e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013090:	7bbb      	ldrb	r3, [r7, #14]
}
 8013092:	4618      	mov	r0, r3
 8013094:	3710      	adds	r7, #16
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}

0801309a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801309a:	b580      	push	{r7, lr}
 801309c:	b084      	sub	sp, #16
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
 80130a2:	460b      	mov	r3, r1
 80130a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130a6:	2300      	movs	r3, #0
 80130a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130aa:	2300      	movs	r3, #0
 80130ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80130b4:	78fa      	ldrb	r2, [r7, #3]
 80130b6:	4611      	mov	r1, r2
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7f5 ff48 	bl	8008f4e <HAL_PCD_EP_ClrStall>
 80130be:	4603      	mov	r3, r0
 80130c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80130c2:	7bfb      	ldrb	r3, [r7, #15]
 80130c4:	4618      	mov	r0, r3
 80130c6:	f000 f8bf 	bl	8013248 <USBD_Get_USB_Status>
 80130ca:	4603      	mov	r3, r0
 80130cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80130ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3710      	adds	r7, #16
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80130d8:	b480      	push	{r7}
 80130da:	b085      	sub	sp, #20
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
 80130e0:	460b      	mov	r3, r1
 80130e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80130ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80130ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	da0b      	bge.n	801310c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80130f4:	78fb      	ldrb	r3, [r7, #3]
 80130f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80130fa:	68f9      	ldr	r1, [r7, #12]
 80130fc:	4613      	mov	r3, r2
 80130fe:	00db      	lsls	r3, r3, #3
 8013100:	4413      	add	r3, r2
 8013102:	009b      	lsls	r3, r3, #2
 8013104:	440b      	add	r3, r1
 8013106:	3316      	adds	r3, #22
 8013108:	781b      	ldrb	r3, [r3, #0]
 801310a:	e00b      	b.n	8013124 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801310c:	78fb      	ldrb	r3, [r7, #3]
 801310e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013112:	68f9      	ldr	r1, [r7, #12]
 8013114:	4613      	mov	r3, r2
 8013116:	00db      	lsls	r3, r3, #3
 8013118:	4413      	add	r3, r2
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	440b      	add	r3, r1
 801311e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8013122:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013124:	4618      	mov	r0, r3
 8013126:	3714      	adds	r7, #20
 8013128:	46bd      	mov	sp, r7
 801312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312e:	4770      	bx	lr

08013130 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b084      	sub	sp, #16
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	460b      	mov	r3, r1
 801313a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801313c:	2300      	movs	r3, #0
 801313e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013140:	2300      	movs	r3, #0
 8013142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801314a:	78fa      	ldrb	r2, [r7, #3]
 801314c:	4611      	mov	r1, r2
 801314e:	4618      	mov	r0, r3
 8013150:	f7f5 fd35 	bl	8008bbe <HAL_PCD_SetAddress>
 8013154:	4603      	mov	r3, r0
 8013156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013158:	7bfb      	ldrb	r3, [r7, #15]
 801315a:	4618      	mov	r0, r3
 801315c:	f000 f874 	bl	8013248 <USBD_Get_USB_Status>
 8013160:	4603      	mov	r3, r0
 8013162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013164:	7bbb      	ldrb	r3, [r7, #14]
}
 8013166:	4618      	mov	r0, r3
 8013168:	3710      	adds	r7, #16
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}

0801316e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801316e:	b580      	push	{r7, lr}
 8013170:	b086      	sub	sp, #24
 8013172:	af00      	add	r7, sp, #0
 8013174:	60f8      	str	r0, [r7, #12]
 8013176:	607a      	str	r2, [r7, #4]
 8013178:	603b      	str	r3, [r7, #0]
 801317a:	460b      	mov	r3, r1
 801317c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801317e:	2300      	movs	r3, #0
 8013180:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013182:	2300      	movs	r3, #0
 8013184:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801318c:	7af9      	ldrb	r1, [r7, #11]
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	687a      	ldr	r2, [r7, #4]
 8013192:	f7f5 fe3f 	bl	8008e14 <HAL_PCD_EP_Transmit>
 8013196:	4603      	mov	r3, r0
 8013198:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801319a:	7dfb      	ldrb	r3, [r7, #23]
 801319c:	4618      	mov	r0, r3
 801319e:	f000 f853 	bl	8013248 <USBD_Get_USB_Status>
 80131a2:	4603      	mov	r3, r0
 80131a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80131a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	3718      	adds	r7, #24
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b086      	sub	sp, #24
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	60f8      	str	r0, [r7, #12]
 80131b8:	607a      	str	r2, [r7, #4]
 80131ba:	603b      	str	r3, [r7, #0]
 80131bc:	460b      	mov	r3, r1
 80131be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131c0:	2300      	movs	r3, #0
 80131c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131c4:	2300      	movs	r3, #0
 80131c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80131ce:	7af9      	ldrb	r1, [r7, #11]
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	687a      	ldr	r2, [r7, #4]
 80131d4:	f7f5 fdcb 	bl	8008d6e <HAL_PCD_EP_Receive>
 80131d8:	4603      	mov	r3, r0
 80131da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131dc:	7dfb      	ldrb	r3, [r7, #23]
 80131de:	4618      	mov	r0, r3
 80131e0:	f000 f832 	bl	8013248 <USBD_Get_USB_Status>
 80131e4:	4603      	mov	r3, r0
 80131e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80131e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3718      	adds	r7, #24
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}

080131f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131f2:	b580      	push	{r7, lr}
 80131f4:	b082      	sub	sp, #8
 80131f6:	af00      	add	r7, sp, #0
 80131f8:	6078      	str	r0, [r7, #4]
 80131fa:	460b      	mov	r3, r1
 80131fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013204:	78fa      	ldrb	r2, [r7, #3]
 8013206:	4611      	mov	r1, r2
 8013208:	4618      	mov	r0, r3
 801320a:	f7f5 fdeb 	bl	8008de4 <HAL_PCD_EP_GetRxCount>
 801320e:	4603      	mov	r3, r0
}
 8013210:	4618      	mov	r0, r3
 8013212:	3708      	adds	r7, #8
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}

08013218 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013218:	b480      	push	{r7}
 801321a:	b083      	sub	sp, #12
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013220:	4b03      	ldr	r3, [pc, #12]	@ (8013230 <USBD_static_malloc+0x18>)
}
 8013222:	4618      	mov	r0, r3
 8013224:	370c      	adds	r7, #12
 8013226:	46bd      	mov	sp, r7
 8013228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322c:	4770      	bx	lr
 801322e:	bf00      	nop
 8013230:	200048dc 	.word	0x200048dc

08013234 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013234:	b480      	push	{r7}
 8013236:	b083      	sub	sp, #12
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]

}
 801323c:	bf00      	nop
 801323e:	370c      	adds	r7, #12
 8013240:	46bd      	mov	sp, r7
 8013242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013246:	4770      	bx	lr

08013248 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013248:	b480      	push	{r7}
 801324a:	b085      	sub	sp, #20
 801324c:	af00      	add	r7, sp, #0
 801324e:	4603      	mov	r3, r0
 8013250:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013252:	2300      	movs	r3, #0
 8013254:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013256:	79fb      	ldrb	r3, [r7, #7]
 8013258:	2b03      	cmp	r3, #3
 801325a:	d817      	bhi.n	801328c <USBD_Get_USB_Status+0x44>
 801325c:	a201      	add	r2, pc, #4	@ (adr r2, 8013264 <USBD_Get_USB_Status+0x1c>)
 801325e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013262:	bf00      	nop
 8013264:	08013275 	.word	0x08013275
 8013268:	0801327b 	.word	0x0801327b
 801326c:	08013281 	.word	0x08013281
 8013270:	08013287 	.word	0x08013287
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013274:	2300      	movs	r3, #0
 8013276:	73fb      	strb	r3, [r7, #15]
    break;
 8013278:	e00b      	b.n	8013292 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801327a:	2303      	movs	r3, #3
 801327c:	73fb      	strb	r3, [r7, #15]
    break;
 801327e:	e008      	b.n	8013292 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013280:	2301      	movs	r3, #1
 8013282:	73fb      	strb	r3, [r7, #15]
    break;
 8013284:	e005      	b.n	8013292 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013286:	2303      	movs	r3, #3
 8013288:	73fb      	strb	r3, [r7, #15]
    break;
 801328a:	e002      	b.n	8013292 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801328c:	2303      	movs	r3, #3
 801328e:	73fb      	strb	r3, [r7, #15]
    break;
 8013290:	bf00      	nop
  }
  return usb_status;
 8013292:	7bfb      	ldrb	r3, [r7, #15]
}
 8013294:	4618      	mov	r0, r3
 8013296:	3714      	adds	r7, #20
 8013298:	46bd      	mov	sp, r7
 801329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329e:	4770      	bx	lr

080132a0 <malloc>:
 80132a0:	4b02      	ldr	r3, [pc, #8]	@ (80132ac <malloc+0xc>)
 80132a2:	4601      	mov	r1, r0
 80132a4:	6818      	ldr	r0, [r3, #0]
 80132a6:	f000 b82d 	b.w	8013304 <_malloc_r>
 80132aa:	bf00      	nop
 80132ac:	200001ec 	.word	0x200001ec

080132b0 <free>:
 80132b0:	4b02      	ldr	r3, [pc, #8]	@ (80132bc <free+0xc>)
 80132b2:	4601      	mov	r1, r0
 80132b4:	6818      	ldr	r0, [r3, #0]
 80132b6:	f002 b85f 	b.w	8015378 <_free_r>
 80132ba:	bf00      	nop
 80132bc:	200001ec 	.word	0x200001ec

080132c0 <sbrk_aligned>:
 80132c0:	b570      	push	{r4, r5, r6, lr}
 80132c2:	4e0f      	ldr	r6, [pc, #60]	@ (8013300 <sbrk_aligned+0x40>)
 80132c4:	460c      	mov	r4, r1
 80132c6:	6831      	ldr	r1, [r6, #0]
 80132c8:	4605      	mov	r5, r0
 80132ca:	b911      	cbnz	r1, 80132d2 <sbrk_aligned+0x12>
 80132cc:	f001 f9b0 	bl	8014630 <_sbrk_r>
 80132d0:	6030      	str	r0, [r6, #0]
 80132d2:	4621      	mov	r1, r4
 80132d4:	4628      	mov	r0, r5
 80132d6:	f001 f9ab 	bl	8014630 <_sbrk_r>
 80132da:	1c43      	adds	r3, r0, #1
 80132dc:	d103      	bne.n	80132e6 <sbrk_aligned+0x26>
 80132de:	f04f 34ff 	mov.w	r4, #4294967295
 80132e2:	4620      	mov	r0, r4
 80132e4:	bd70      	pop	{r4, r5, r6, pc}
 80132e6:	1cc4      	adds	r4, r0, #3
 80132e8:	f024 0403 	bic.w	r4, r4, #3
 80132ec:	42a0      	cmp	r0, r4
 80132ee:	d0f8      	beq.n	80132e2 <sbrk_aligned+0x22>
 80132f0:	1a21      	subs	r1, r4, r0
 80132f2:	4628      	mov	r0, r5
 80132f4:	f001 f99c 	bl	8014630 <_sbrk_r>
 80132f8:	3001      	adds	r0, #1
 80132fa:	d1f2      	bne.n	80132e2 <sbrk_aligned+0x22>
 80132fc:	e7ef      	b.n	80132de <sbrk_aligned+0x1e>
 80132fe:	bf00      	nop
 8013300:	20004afc 	.word	0x20004afc

08013304 <_malloc_r>:
 8013304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013308:	1ccd      	adds	r5, r1, #3
 801330a:	f025 0503 	bic.w	r5, r5, #3
 801330e:	3508      	adds	r5, #8
 8013310:	2d0c      	cmp	r5, #12
 8013312:	bf38      	it	cc
 8013314:	250c      	movcc	r5, #12
 8013316:	2d00      	cmp	r5, #0
 8013318:	4606      	mov	r6, r0
 801331a:	db01      	blt.n	8013320 <_malloc_r+0x1c>
 801331c:	42a9      	cmp	r1, r5
 801331e:	d904      	bls.n	801332a <_malloc_r+0x26>
 8013320:	230c      	movs	r3, #12
 8013322:	6033      	str	r3, [r6, #0]
 8013324:	2000      	movs	r0, #0
 8013326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801332a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013400 <_malloc_r+0xfc>
 801332e:	f000 f869 	bl	8013404 <__malloc_lock>
 8013332:	f8d8 3000 	ldr.w	r3, [r8]
 8013336:	461c      	mov	r4, r3
 8013338:	bb44      	cbnz	r4, 801338c <_malloc_r+0x88>
 801333a:	4629      	mov	r1, r5
 801333c:	4630      	mov	r0, r6
 801333e:	f7ff ffbf 	bl	80132c0 <sbrk_aligned>
 8013342:	1c43      	adds	r3, r0, #1
 8013344:	4604      	mov	r4, r0
 8013346:	d158      	bne.n	80133fa <_malloc_r+0xf6>
 8013348:	f8d8 4000 	ldr.w	r4, [r8]
 801334c:	4627      	mov	r7, r4
 801334e:	2f00      	cmp	r7, #0
 8013350:	d143      	bne.n	80133da <_malloc_r+0xd6>
 8013352:	2c00      	cmp	r4, #0
 8013354:	d04b      	beq.n	80133ee <_malloc_r+0xea>
 8013356:	6823      	ldr	r3, [r4, #0]
 8013358:	4639      	mov	r1, r7
 801335a:	4630      	mov	r0, r6
 801335c:	eb04 0903 	add.w	r9, r4, r3
 8013360:	f001 f966 	bl	8014630 <_sbrk_r>
 8013364:	4581      	cmp	r9, r0
 8013366:	d142      	bne.n	80133ee <_malloc_r+0xea>
 8013368:	6821      	ldr	r1, [r4, #0]
 801336a:	1a6d      	subs	r5, r5, r1
 801336c:	4629      	mov	r1, r5
 801336e:	4630      	mov	r0, r6
 8013370:	f7ff ffa6 	bl	80132c0 <sbrk_aligned>
 8013374:	3001      	adds	r0, #1
 8013376:	d03a      	beq.n	80133ee <_malloc_r+0xea>
 8013378:	6823      	ldr	r3, [r4, #0]
 801337a:	442b      	add	r3, r5
 801337c:	6023      	str	r3, [r4, #0]
 801337e:	f8d8 3000 	ldr.w	r3, [r8]
 8013382:	685a      	ldr	r2, [r3, #4]
 8013384:	bb62      	cbnz	r2, 80133e0 <_malloc_r+0xdc>
 8013386:	f8c8 7000 	str.w	r7, [r8]
 801338a:	e00f      	b.n	80133ac <_malloc_r+0xa8>
 801338c:	6822      	ldr	r2, [r4, #0]
 801338e:	1b52      	subs	r2, r2, r5
 8013390:	d420      	bmi.n	80133d4 <_malloc_r+0xd0>
 8013392:	2a0b      	cmp	r2, #11
 8013394:	d917      	bls.n	80133c6 <_malloc_r+0xc2>
 8013396:	1961      	adds	r1, r4, r5
 8013398:	42a3      	cmp	r3, r4
 801339a:	6025      	str	r5, [r4, #0]
 801339c:	bf18      	it	ne
 801339e:	6059      	strne	r1, [r3, #4]
 80133a0:	6863      	ldr	r3, [r4, #4]
 80133a2:	bf08      	it	eq
 80133a4:	f8c8 1000 	streq.w	r1, [r8]
 80133a8:	5162      	str	r2, [r4, r5]
 80133aa:	604b      	str	r3, [r1, #4]
 80133ac:	4630      	mov	r0, r6
 80133ae:	f000 f82f 	bl	8013410 <__malloc_unlock>
 80133b2:	f104 000b 	add.w	r0, r4, #11
 80133b6:	1d23      	adds	r3, r4, #4
 80133b8:	f020 0007 	bic.w	r0, r0, #7
 80133bc:	1ac2      	subs	r2, r0, r3
 80133be:	bf1c      	itt	ne
 80133c0:	1a1b      	subne	r3, r3, r0
 80133c2:	50a3      	strne	r3, [r4, r2]
 80133c4:	e7af      	b.n	8013326 <_malloc_r+0x22>
 80133c6:	6862      	ldr	r2, [r4, #4]
 80133c8:	42a3      	cmp	r3, r4
 80133ca:	bf0c      	ite	eq
 80133cc:	f8c8 2000 	streq.w	r2, [r8]
 80133d0:	605a      	strne	r2, [r3, #4]
 80133d2:	e7eb      	b.n	80133ac <_malloc_r+0xa8>
 80133d4:	4623      	mov	r3, r4
 80133d6:	6864      	ldr	r4, [r4, #4]
 80133d8:	e7ae      	b.n	8013338 <_malloc_r+0x34>
 80133da:	463c      	mov	r4, r7
 80133dc:	687f      	ldr	r7, [r7, #4]
 80133de:	e7b6      	b.n	801334e <_malloc_r+0x4a>
 80133e0:	461a      	mov	r2, r3
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	42a3      	cmp	r3, r4
 80133e6:	d1fb      	bne.n	80133e0 <_malloc_r+0xdc>
 80133e8:	2300      	movs	r3, #0
 80133ea:	6053      	str	r3, [r2, #4]
 80133ec:	e7de      	b.n	80133ac <_malloc_r+0xa8>
 80133ee:	230c      	movs	r3, #12
 80133f0:	6033      	str	r3, [r6, #0]
 80133f2:	4630      	mov	r0, r6
 80133f4:	f000 f80c 	bl	8013410 <__malloc_unlock>
 80133f8:	e794      	b.n	8013324 <_malloc_r+0x20>
 80133fa:	6005      	str	r5, [r0, #0]
 80133fc:	e7d6      	b.n	80133ac <_malloc_r+0xa8>
 80133fe:	bf00      	nop
 8013400:	20004b00 	.word	0x20004b00

08013404 <__malloc_lock>:
 8013404:	4801      	ldr	r0, [pc, #4]	@ (801340c <__malloc_lock+0x8>)
 8013406:	f001 b960 	b.w	80146ca <__retarget_lock_acquire_recursive>
 801340a:	bf00      	nop
 801340c:	20004c44 	.word	0x20004c44

08013410 <__malloc_unlock>:
 8013410:	4801      	ldr	r0, [pc, #4]	@ (8013418 <__malloc_unlock+0x8>)
 8013412:	f001 b95b 	b.w	80146cc <__retarget_lock_release_recursive>
 8013416:	bf00      	nop
 8013418:	20004c44 	.word	0x20004c44

0801341c <__cvt>:
 801341c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013420:	ec57 6b10 	vmov	r6, r7, d0
 8013424:	2f00      	cmp	r7, #0
 8013426:	460c      	mov	r4, r1
 8013428:	4619      	mov	r1, r3
 801342a:	463b      	mov	r3, r7
 801342c:	bfbb      	ittet	lt
 801342e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013432:	461f      	movlt	r7, r3
 8013434:	2300      	movge	r3, #0
 8013436:	232d      	movlt	r3, #45	@ 0x2d
 8013438:	700b      	strb	r3, [r1, #0]
 801343a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801343c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013440:	4691      	mov	r9, r2
 8013442:	f023 0820 	bic.w	r8, r3, #32
 8013446:	bfbc      	itt	lt
 8013448:	4632      	movlt	r2, r6
 801344a:	4616      	movlt	r6, r2
 801344c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013450:	d005      	beq.n	801345e <__cvt+0x42>
 8013452:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013456:	d100      	bne.n	801345a <__cvt+0x3e>
 8013458:	3401      	adds	r4, #1
 801345a:	2102      	movs	r1, #2
 801345c:	e000      	b.n	8013460 <__cvt+0x44>
 801345e:	2103      	movs	r1, #3
 8013460:	ab03      	add	r3, sp, #12
 8013462:	9301      	str	r3, [sp, #4]
 8013464:	ab02      	add	r3, sp, #8
 8013466:	9300      	str	r3, [sp, #0]
 8013468:	ec47 6b10 	vmov	d0, r6, r7
 801346c:	4653      	mov	r3, sl
 801346e:	4622      	mov	r2, r4
 8013470:	f001 f9be 	bl	80147f0 <_dtoa_r>
 8013474:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013478:	4605      	mov	r5, r0
 801347a:	d119      	bne.n	80134b0 <__cvt+0x94>
 801347c:	f019 0f01 	tst.w	r9, #1
 8013480:	d00e      	beq.n	80134a0 <__cvt+0x84>
 8013482:	eb00 0904 	add.w	r9, r0, r4
 8013486:	2200      	movs	r2, #0
 8013488:	2300      	movs	r3, #0
 801348a:	4630      	mov	r0, r6
 801348c:	4639      	mov	r1, r7
 801348e:	f7ed fb23 	bl	8000ad8 <__aeabi_dcmpeq>
 8013492:	b108      	cbz	r0, 8013498 <__cvt+0x7c>
 8013494:	f8cd 900c 	str.w	r9, [sp, #12]
 8013498:	2230      	movs	r2, #48	@ 0x30
 801349a:	9b03      	ldr	r3, [sp, #12]
 801349c:	454b      	cmp	r3, r9
 801349e:	d31e      	bcc.n	80134de <__cvt+0xc2>
 80134a0:	9b03      	ldr	r3, [sp, #12]
 80134a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80134a4:	1b5b      	subs	r3, r3, r5
 80134a6:	4628      	mov	r0, r5
 80134a8:	6013      	str	r3, [r2, #0]
 80134aa:	b004      	add	sp, #16
 80134ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80134b4:	eb00 0904 	add.w	r9, r0, r4
 80134b8:	d1e5      	bne.n	8013486 <__cvt+0x6a>
 80134ba:	7803      	ldrb	r3, [r0, #0]
 80134bc:	2b30      	cmp	r3, #48	@ 0x30
 80134be:	d10a      	bne.n	80134d6 <__cvt+0xba>
 80134c0:	2200      	movs	r2, #0
 80134c2:	2300      	movs	r3, #0
 80134c4:	4630      	mov	r0, r6
 80134c6:	4639      	mov	r1, r7
 80134c8:	f7ed fb06 	bl	8000ad8 <__aeabi_dcmpeq>
 80134cc:	b918      	cbnz	r0, 80134d6 <__cvt+0xba>
 80134ce:	f1c4 0401 	rsb	r4, r4, #1
 80134d2:	f8ca 4000 	str.w	r4, [sl]
 80134d6:	f8da 3000 	ldr.w	r3, [sl]
 80134da:	4499      	add	r9, r3
 80134dc:	e7d3      	b.n	8013486 <__cvt+0x6a>
 80134de:	1c59      	adds	r1, r3, #1
 80134e0:	9103      	str	r1, [sp, #12]
 80134e2:	701a      	strb	r2, [r3, #0]
 80134e4:	e7d9      	b.n	801349a <__cvt+0x7e>

080134e6 <__exponent>:
 80134e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134e8:	2900      	cmp	r1, #0
 80134ea:	bfba      	itte	lt
 80134ec:	4249      	neglt	r1, r1
 80134ee:	232d      	movlt	r3, #45	@ 0x2d
 80134f0:	232b      	movge	r3, #43	@ 0x2b
 80134f2:	2909      	cmp	r1, #9
 80134f4:	7002      	strb	r2, [r0, #0]
 80134f6:	7043      	strb	r3, [r0, #1]
 80134f8:	dd29      	ble.n	801354e <__exponent+0x68>
 80134fa:	f10d 0307 	add.w	r3, sp, #7
 80134fe:	461d      	mov	r5, r3
 8013500:	270a      	movs	r7, #10
 8013502:	461a      	mov	r2, r3
 8013504:	fbb1 f6f7 	udiv	r6, r1, r7
 8013508:	fb07 1416 	mls	r4, r7, r6, r1
 801350c:	3430      	adds	r4, #48	@ 0x30
 801350e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013512:	460c      	mov	r4, r1
 8013514:	2c63      	cmp	r4, #99	@ 0x63
 8013516:	f103 33ff 	add.w	r3, r3, #4294967295
 801351a:	4631      	mov	r1, r6
 801351c:	dcf1      	bgt.n	8013502 <__exponent+0x1c>
 801351e:	3130      	adds	r1, #48	@ 0x30
 8013520:	1e94      	subs	r4, r2, #2
 8013522:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013526:	1c41      	adds	r1, r0, #1
 8013528:	4623      	mov	r3, r4
 801352a:	42ab      	cmp	r3, r5
 801352c:	d30a      	bcc.n	8013544 <__exponent+0x5e>
 801352e:	f10d 0309 	add.w	r3, sp, #9
 8013532:	1a9b      	subs	r3, r3, r2
 8013534:	42ac      	cmp	r4, r5
 8013536:	bf88      	it	hi
 8013538:	2300      	movhi	r3, #0
 801353a:	3302      	adds	r3, #2
 801353c:	4403      	add	r3, r0
 801353e:	1a18      	subs	r0, r3, r0
 8013540:	b003      	add	sp, #12
 8013542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013544:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013548:	f801 6f01 	strb.w	r6, [r1, #1]!
 801354c:	e7ed      	b.n	801352a <__exponent+0x44>
 801354e:	2330      	movs	r3, #48	@ 0x30
 8013550:	3130      	adds	r1, #48	@ 0x30
 8013552:	7083      	strb	r3, [r0, #2]
 8013554:	70c1      	strb	r1, [r0, #3]
 8013556:	1d03      	adds	r3, r0, #4
 8013558:	e7f1      	b.n	801353e <__exponent+0x58>
	...

0801355c <_printf_float>:
 801355c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013560:	b08d      	sub	sp, #52	@ 0x34
 8013562:	460c      	mov	r4, r1
 8013564:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013568:	4616      	mov	r6, r2
 801356a:	461f      	mov	r7, r3
 801356c:	4605      	mov	r5, r0
 801356e:	f001 f827 	bl	80145c0 <_localeconv_r>
 8013572:	6803      	ldr	r3, [r0, #0]
 8013574:	9304      	str	r3, [sp, #16]
 8013576:	4618      	mov	r0, r3
 8013578:	f7ec fe82 	bl	8000280 <strlen>
 801357c:	2300      	movs	r3, #0
 801357e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013580:	f8d8 3000 	ldr.w	r3, [r8]
 8013584:	9005      	str	r0, [sp, #20]
 8013586:	3307      	adds	r3, #7
 8013588:	f023 0307 	bic.w	r3, r3, #7
 801358c:	f103 0208 	add.w	r2, r3, #8
 8013590:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013594:	f8d4 b000 	ldr.w	fp, [r4]
 8013598:	f8c8 2000 	str.w	r2, [r8]
 801359c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80135a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80135a4:	9307      	str	r3, [sp, #28]
 80135a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80135aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80135ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135b2:	4b9c      	ldr	r3, [pc, #624]	@ (8013824 <_printf_float+0x2c8>)
 80135b4:	f04f 32ff 	mov.w	r2, #4294967295
 80135b8:	f7ed fac0 	bl	8000b3c <__aeabi_dcmpun>
 80135bc:	bb70      	cbnz	r0, 801361c <_printf_float+0xc0>
 80135be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135c2:	4b98      	ldr	r3, [pc, #608]	@ (8013824 <_printf_float+0x2c8>)
 80135c4:	f04f 32ff 	mov.w	r2, #4294967295
 80135c8:	f7ed fa9a 	bl	8000b00 <__aeabi_dcmple>
 80135cc:	bb30      	cbnz	r0, 801361c <_printf_float+0xc0>
 80135ce:	2200      	movs	r2, #0
 80135d0:	2300      	movs	r3, #0
 80135d2:	4640      	mov	r0, r8
 80135d4:	4649      	mov	r1, r9
 80135d6:	f7ed fa89 	bl	8000aec <__aeabi_dcmplt>
 80135da:	b110      	cbz	r0, 80135e2 <_printf_float+0x86>
 80135dc:	232d      	movs	r3, #45	@ 0x2d
 80135de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80135e2:	4a91      	ldr	r2, [pc, #580]	@ (8013828 <_printf_float+0x2cc>)
 80135e4:	4b91      	ldr	r3, [pc, #580]	@ (801382c <_printf_float+0x2d0>)
 80135e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80135ea:	bf94      	ite	ls
 80135ec:	4690      	movls	r8, r2
 80135ee:	4698      	movhi	r8, r3
 80135f0:	2303      	movs	r3, #3
 80135f2:	6123      	str	r3, [r4, #16]
 80135f4:	f02b 0304 	bic.w	r3, fp, #4
 80135f8:	6023      	str	r3, [r4, #0]
 80135fa:	f04f 0900 	mov.w	r9, #0
 80135fe:	9700      	str	r7, [sp, #0]
 8013600:	4633      	mov	r3, r6
 8013602:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013604:	4621      	mov	r1, r4
 8013606:	4628      	mov	r0, r5
 8013608:	f000 f9d2 	bl	80139b0 <_printf_common>
 801360c:	3001      	adds	r0, #1
 801360e:	f040 808d 	bne.w	801372c <_printf_float+0x1d0>
 8013612:	f04f 30ff 	mov.w	r0, #4294967295
 8013616:	b00d      	add	sp, #52	@ 0x34
 8013618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801361c:	4642      	mov	r2, r8
 801361e:	464b      	mov	r3, r9
 8013620:	4640      	mov	r0, r8
 8013622:	4649      	mov	r1, r9
 8013624:	f7ed fa8a 	bl	8000b3c <__aeabi_dcmpun>
 8013628:	b140      	cbz	r0, 801363c <_printf_float+0xe0>
 801362a:	464b      	mov	r3, r9
 801362c:	2b00      	cmp	r3, #0
 801362e:	bfbc      	itt	lt
 8013630:	232d      	movlt	r3, #45	@ 0x2d
 8013632:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013636:	4a7e      	ldr	r2, [pc, #504]	@ (8013830 <_printf_float+0x2d4>)
 8013638:	4b7e      	ldr	r3, [pc, #504]	@ (8013834 <_printf_float+0x2d8>)
 801363a:	e7d4      	b.n	80135e6 <_printf_float+0x8a>
 801363c:	6863      	ldr	r3, [r4, #4]
 801363e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013642:	9206      	str	r2, [sp, #24]
 8013644:	1c5a      	adds	r2, r3, #1
 8013646:	d13b      	bne.n	80136c0 <_printf_float+0x164>
 8013648:	2306      	movs	r3, #6
 801364a:	6063      	str	r3, [r4, #4]
 801364c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013650:	2300      	movs	r3, #0
 8013652:	6022      	str	r2, [r4, #0]
 8013654:	9303      	str	r3, [sp, #12]
 8013656:	ab0a      	add	r3, sp, #40	@ 0x28
 8013658:	e9cd a301 	strd	sl, r3, [sp, #4]
 801365c:	ab09      	add	r3, sp, #36	@ 0x24
 801365e:	9300      	str	r3, [sp, #0]
 8013660:	6861      	ldr	r1, [r4, #4]
 8013662:	ec49 8b10 	vmov	d0, r8, r9
 8013666:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801366a:	4628      	mov	r0, r5
 801366c:	f7ff fed6 	bl	801341c <__cvt>
 8013670:	9b06      	ldr	r3, [sp, #24]
 8013672:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013674:	2b47      	cmp	r3, #71	@ 0x47
 8013676:	4680      	mov	r8, r0
 8013678:	d129      	bne.n	80136ce <_printf_float+0x172>
 801367a:	1cc8      	adds	r0, r1, #3
 801367c:	db02      	blt.n	8013684 <_printf_float+0x128>
 801367e:	6863      	ldr	r3, [r4, #4]
 8013680:	4299      	cmp	r1, r3
 8013682:	dd41      	ble.n	8013708 <_printf_float+0x1ac>
 8013684:	f1aa 0a02 	sub.w	sl, sl, #2
 8013688:	fa5f fa8a 	uxtb.w	sl, sl
 801368c:	3901      	subs	r1, #1
 801368e:	4652      	mov	r2, sl
 8013690:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013694:	9109      	str	r1, [sp, #36]	@ 0x24
 8013696:	f7ff ff26 	bl	80134e6 <__exponent>
 801369a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801369c:	1813      	adds	r3, r2, r0
 801369e:	2a01      	cmp	r2, #1
 80136a0:	4681      	mov	r9, r0
 80136a2:	6123      	str	r3, [r4, #16]
 80136a4:	dc02      	bgt.n	80136ac <_printf_float+0x150>
 80136a6:	6822      	ldr	r2, [r4, #0]
 80136a8:	07d2      	lsls	r2, r2, #31
 80136aa:	d501      	bpl.n	80136b0 <_printf_float+0x154>
 80136ac:	3301      	adds	r3, #1
 80136ae:	6123      	str	r3, [r4, #16]
 80136b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d0a2      	beq.n	80135fe <_printf_float+0xa2>
 80136b8:	232d      	movs	r3, #45	@ 0x2d
 80136ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80136be:	e79e      	b.n	80135fe <_printf_float+0xa2>
 80136c0:	9a06      	ldr	r2, [sp, #24]
 80136c2:	2a47      	cmp	r2, #71	@ 0x47
 80136c4:	d1c2      	bne.n	801364c <_printf_float+0xf0>
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d1c0      	bne.n	801364c <_printf_float+0xf0>
 80136ca:	2301      	movs	r3, #1
 80136cc:	e7bd      	b.n	801364a <_printf_float+0xee>
 80136ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80136d2:	d9db      	bls.n	801368c <_printf_float+0x130>
 80136d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80136d8:	d118      	bne.n	801370c <_printf_float+0x1b0>
 80136da:	2900      	cmp	r1, #0
 80136dc:	6863      	ldr	r3, [r4, #4]
 80136de:	dd0b      	ble.n	80136f8 <_printf_float+0x19c>
 80136e0:	6121      	str	r1, [r4, #16]
 80136e2:	b913      	cbnz	r3, 80136ea <_printf_float+0x18e>
 80136e4:	6822      	ldr	r2, [r4, #0]
 80136e6:	07d0      	lsls	r0, r2, #31
 80136e8:	d502      	bpl.n	80136f0 <_printf_float+0x194>
 80136ea:	3301      	adds	r3, #1
 80136ec:	440b      	add	r3, r1
 80136ee:	6123      	str	r3, [r4, #16]
 80136f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80136f2:	f04f 0900 	mov.w	r9, #0
 80136f6:	e7db      	b.n	80136b0 <_printf_float+0x154>
 80136f8:	b913      	cbnz	r3, 8013700 <_printf_float+0x1a4>
 80136fa:	6822      	ldr	r2, [r4, #0]
 80136fc:	07d2      	lsls	r2, r2, #31
 80136fe:	d501      	bpl.n	8013704 <_printf_float+0x1a8>
 8013700:	3302      	adds	r3, #2
 8013702:	e7f4      	b.n	80136ee <_printf_float+0x192>
 8013704:	2301      	movs	r3, #1
 8013706:	e7f2      	b.n	80136ee <_printf_float+0x192>
 8013708:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801370c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801370e:	4299      	cmp	r1, r3
 8013710:	db05      	blt.n	801371e <_printf_float+0x1c2>
 8013712:	6823      	ldr	r3, [r4, #0]
 8013714:	6121      	str	r1, [r4, #16]
 8013716:	07d8      	lsls	r0, r3, #31
 8013718:	d5ea      	bpl.n	80136f0 <_printf_float+0x194>
 801371a:	1c4b      	adds	r3, r1, #1
 801371c:	e7e7      	b.n	80136ee <_printf_float+0x192>
 801371e:	2900      	cmp	r1, #0
 8013720:	bfd4      	ite	le
 8013722:	f1c1 0202 	rsble	r2, r1, #2
 8013726:	2201      	movgt	r2, #1
 8013728:	4413      	add	r3, r2
 801372a:	e7e0      	b.n	80136ee <_printf_float+0x192>
 801372c:	6823      	ldr	r3, [r4, #0]
 801372e:	055a      	lsls	r2, r3, #21
 8013730:	d407      	bmi.n	8013742 <_printf_float+0x1e6>
 8013732:	6923      	ldr	r3, [r4, #16]
 8013734:	4642      	mov	r2, r8
 8013736:	4631      	mov	r1, r6
 8013738:	4628      	mov	r0, r5
 801373a:	47b8      	blx	r7
 801373c:	3001      	adds	r0, #1
 801373e:	d12b      	bne.n	8013798 <_printf_float+0x23c>
 8013740:	e767      	b.n	8013612 <_printf_float+0xb6>
 8013742:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013746:	f240 80dd 	bls.w	8013904 <_printf_float+0x3a8>
 801374a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801374e:	2200      	movs	r2, #0
 8013750:	2300      	movs	r3, #0
 8013752:	f7ed f9c1 	bl	8000ad8 <__aeabi_dcmpeq>
 8013756:	2800      	cmp	r0, #0
 8013758:	d033      	beq.n	80137c2 <_printf_float+0x266>
 801375a:	4a37      	ldr	r2, [pc, #220]	@ (8013838 <_printf_float+0x2dc>)
 801375c:	2301      	movs	r3, #1
 801375e:	4631      	mov	r1, r6
 8013760:	4628      	mov	r0, r5
 8013762:	47b8      	blx	r7
 8013764:	3001      	adds	r0, #1
 8013766:	f43f af54 	beq.w	8013612 <_printf_float+0xb6>
 801376a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801376e:	4543      	cmp	r3, r8
 8013770:	db02      	blt.n	8013778 <_printf_float+0x21c>
 8013772:	6823      	ldr	r3, [r4, #0]
 8013774:	07d8      	lsls	r0, r3, #31
 8013776:	d50f      	bpl.n	8013798 <_printf_float+0x23c>
 8013778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801377c:	4631      	mov	r1, r6
 801377e:	4628      	mov	r0, r5
 8013780:	47b8      	blx	r7
 8013782:	3001      	adds	r0, #1
 8013784:	f43f af45 	beq.w	8013612 <_printf_float+0xb6>
 8013788:	f04f 0900 	mov.w	r9, #0
 801378c:	f108 38ff 	add.w	r8, r8, #4294967295
 8013790:	f104 0a1a 	add.w	sl, r4, #26
 8013794:	45c8      	cmp	r8, r9
 8013796:	dc09      	bgt.n	80137ac <_printf_float+0x250>
 8013798:	6823      	ldr	r3, [r4, #0]
 801379a:	079b      	lsls	r3, r3, #30
 801379c:	f100 8103 	bmi.w	80139a6 <_printf_float+0x44a>
 80137a0:	68e0      	ldr	r0, [r4, #12]
 80137a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137a4:	4298      	cmp	r0, r3
 80137a6:	bfb8      	it	lt
 80137a8:	4618      	movlt	r0, r3
 80137aa:	e734      	b.n	8013616 <_printf_float+0xba>
 80137ac:	2301      	movs	r3, #1
 80137ae:	4652      	mov	r2, sl
 80137b0:	4631      	mov	r1, r6
 80137b2:	4628      	mov	r0, r5
 80137b4:	47b8      	blx	r7
 80137b6:	3001      	adds	r0, #1
 80137b8:	f43f af2b 	beq.w	8013612 <_printf_float+0xb6>
 80137bc:	f109 0901 	add.w	r9, r9, #1
 80137c0:	e7e8      	b.n	8013794 <_printf_float+0x238>
 80137c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	dc39      	bgt.n	801383c <_printf_float+0x2e0>
 80137c8:	4a1b      	ldr	r2, [pc, #108]	@ (8013838 <_printf_float+0x2dc>)
 80137ca:	2301      	movs	r3, #1
 80137cc:	4631      	mov	r1, r6
 80137ce:	4628      	mov	r0, r5
 80137d0:	47b8      	blx	r7
 80137d2:	3001      	adds	r0, #1
 80137d4:	f43f af1d 	beq.w	8013612 <_printf_float+0xb6>
 80137d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80137dc:	ea59 0303 	orrs.w	r3, r9, r3
 80137e0:	d102      	bne.n	80137e8 <_printf_float+0x28c>
 80137e2:	6823      	ldr	r3, [r4, #0]
 80137e4:	07d9      	lsls	r1, r3, #31
 80137e6:	d5d7      	bpl.n	8013798 <_printf_float+0x23c>
 80137e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80137ec:	4631      	mov	r1, r6
 80137ee:	4628      	mov	r0, r5
 80137f0:	47b8      	blx	r7
 80137f2:	3001      	adds	r0, #1
 80137f4:	f43f af0d 	beq.w	8013612 <_printf_float+0xb6>
 80137f8:	f04f 0a00 	mov.w	sl, #0
 80137fc:	f104 0b1a 	add.w	fp, r4, #26
 8013800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013802:	425b      	negs	r3, r3
 8013804:	4553      	cmp	r3, sl
 8013806:	dc01      	bgt.n	801380c <_printf_float+0x2b0>
 8013808:	464b      	mov	r3, r9
 801380a:	e793      	b.n	8013734 <_printf_float+0x1d8>
 801380c:	2301      	movs	r3, #1
 801380e:	465a      	mov	r2, fp
 8013810:	4631      	mov	r1, r6
 8013812:	4628      	mov	r0, r5
 8013814:	47b8      	blx	r7
 8013816:	3001      	adds	r0, #1
 8013818:	f43f aefb 	beq.w	8013612 <_printf_float+0xb6>
 801381c:	f10a 0a01 	add.w	sl, sl, #1
 8013820:	e7ee      	b.n	8013800 <_printf_float+0x2a4>
 8013822:	bf00      	nop
 8013824:	7fefffff 	.word	0x7fefffff
 8013828:	08018ef8 	.word	0x08018ef8
 801382c:	08018efc 	.word	0x08018efc
 8013830:	08018f00 	.word	0x08018f00
 8013834:	08018f04 	.word	0x08018f04
 8013838:	08018f08 	.word	0x08018f08
 801383c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801383e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013842:	4553      	cmp	r3, sl
 8013844:	bfa8      	it	ge
 8013846:	4653      	movge	r3, sl
 8013848:	2b00      	cmp	r3, #0
 801384a:	4699      	mov	r9, r3
 801384c:	dc36      	bgt.n	80138bc <_printf_float+0x360>
 801384e:	f04f 0b00 	mov.w	fp, #0
 8013852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013856:	f104 021a 	add.w	r2, r4, #26
 801385a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801385c:	9306      	str	r3, [sp, #24]
 801385e:	eba3 0309 	sub.w	r3, r3, r9
 8013862:	455b      	cmp	r3, fp
 8013864:	dc31      	bgt.n	80138ca <_printf_float+0x36e>
 8013866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013868:	459a      	cmp	sl, r3
 801386a:	dc3a      	bgt.n	80138e2 <_printf_float+0x386>
 801386c:	6823      	ldr	r3, [r4, #0]
 801386e:	07da      	lsls	r2, r3, #31
 8013870:	d437      	bmi.n	80138e2 <_printf_float+0x386>
 8013872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013874:	ebaa 0903 	sub.w	r9, sl, r3
 8013878:	9b06      	ldr	r3, [sp, #24]
 801387a:	ebaa 0303 	sub.w	r3, sl, r3
 801387e:	4599      	cmp	r9, r3
 8013880:	bfa8      	it	ge
 8013882:	4699      	movge	r9, r3
 8013884:	f1b9 0f00 	cmp.w	r9, #0
 8013888:	dc33      	bgt.n	80138f2 <_printf_float+0x396>
 801388a:	f04f 0800 	mov.w	r8, #0
 801388e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013892:	f104 0b1a 	add.w	fp, r4, #26
 8013896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013898:	ebaa 0303 	sub.w	r3, sl, r3
 801389c:	eba3 0309 	sub.w	r3, r3, r9
 80138a0:	4543      	cmp	r3, r8
 80138a2:	f77f af79 	ble.w	8013798 <_printf_float+0x23c>
 80138a6:	2301      	movs	r3, #1
 80138a8:	465a      	mov	r2, fp
 80138aa:	4631      	mov	r1, r6
 80138ac:	4628      	mov	r0, r5
 80138ae:	47b8      	blx	r7
 80138b0:	3001      	adds	r0, #1
 80138b2:	f43f aeae 	beq.w	8013612 <_printf_float+0xb6>
 80138b6:	f108 0801 	add.w	r8, r8, #1
 80138ba:	e7ec      	b.n	8013896 <_printf_float+0x33a>
 80138bc:	4642      	mov	r2, r8
 80138be:	4631      	mov	r1, r6
 80138c0:	4628      	mov	r0, r5
 80138c2:	47b8      	blx	r7
 80138c4:	3001      	adds	r0, #1
 80138c6:	d1c2      	bne.n	801384e <_printf_float+0x2f2>
 80138c8:	e6a3      	b.n	8013612 <_printf_float+0xb6>
 80138ca:	2301      	movs	r3, #1
 80138cc:	4631      	mov	r1, r6
 80138ce:	4628      	mov	r0, r5
 80138d0:	9206      	str	r2, [sp, #24]
 80138d2:	47b8      	blx	r7
 80138d4:	3001      	adds	r0, #1
 80138d6:	f43f ae9c 	beq.w	8013612 <_printf_float+0xb6>
 80138da:	9a06      	ldr	r2, [sp, #24]
 80138dc:	f10b 0b01 	add.w	fp, fp, #1
 80138e0:	e7bb      	b.n	801385a <_printf_float+0x2fe>
 80138e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138e6:	4631      	mov	r1, r6
 80138e8:	4628      	mov	r0, r5
 80138ea:	47b8      	blx	r7
 80138ec:	3001      	adds	r0, #1
 80138ee:	d1c0      	bne.n	8013872 <_printf_float+0x316>
 80138f0:	e68f      	b.n	8013612 <_printf_float+0xb6>
 80138f2:	9a06      	ldr	r2, [sp, #24]
 80138f4:	464b      	mov	r3, r9
 80138f6:	4442      	add	r2, r8
 80138f8:	4631      	mov	r1, r6
 80138fa:	4628      	mov	r0, r5
 80138fc:	47b8      	blx	r7
 80138fe:	3001      	adds	r0, #1
 8013900:	d1c3      	bne.n	801388a <_printf_float+0x32e>
 8013902:	e686      	b.n	8013612 <_printf_float+0xb6>
 8013904:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013908:	f1ba 0f01 	cmp.w	sl, #1
 801390c:	dc01      	bgt.n	8013912 <_printf_float+0x3b6>
 801390e:	07db      	lsls	r3, r3, #31
 8013910:	d536      	bpl.n	8013980 <_printf_float+0x424>
 8013912:	2301      	movs	r3, #1
 8013914:	4642      	mov	r2, r8
 8013916:	4631      	mov	r1, r6
 8013918:	4628      	mov	r0, r5
 801391a:	47b8      	blx	r7
 801391c:	3001      	adds	r0, #1
 801391e:	f43f ae78 	beq.w	8013612 <_printf_float+0xb6>
 8013922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013926:	4631      	mov	r1, r6
 8013928:	4628      	mov	r0, r5
 801392a:	47b8      	blx	r7
 801392c:	3001      	adds	r0, #1
 801392e:	f43f ae70 	beq.w	8013612 <_printf_float+0xb6>
 8013932:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013936:	2200      	movs	r2, #0
 8013938:	2300      	movs	r3, #0
 801393a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801393e:	f7ed f8cb 	bl	8000ad8 <__aeabi_dcmpeq>
 8013942:	b9c0      	cbnz	r0, 8013976 <_printf_float+0x41a>
 8013944:	4653      	mov	r3, sl
 8013946:	f108 0201 	add.w	r2, r8, #1
 801394a:	4631      	mov	r1, r6
 801394c:	4628      	mov	r0, r5
 801394e:	47b8      	blx	r7
 8013950:	3001      	adds	r0, #1
 8013952:	d10c      	bne.n	801396e <_printf_float+0x412>
 8013954:	e65d      	b.n	8013612 <_printf_float+0xb6>
 8013956:	2301      	movs	r3, #1
 8013958:	465a      	mov	r2, fp
 801395a:	4631      	mov	r1, r6
 801395c:	4628      	mov	r0, r5
 801395e:	47b8      	blx	r7
 8013960:	3001      	adds	r0, #1
 8013962:	f43f ae56 	beq.w	8013612 <_printf_float+0xb6>
 8013966:	f108 0801 	add.w	r8, r8, #1
 801396a:	45d0      	cmp	r8, sl
 801396c:	dbf3      	blt.n	8013956 <_printf_float+0x3fa>
 801396e:	464b      	mov	r3, r9
 8013970:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013974:	e6df      	b.n	8013736 <_printf_float+0x1da>
 8013976:	f04f 0800 	mov.w	r8, #0
 801397a:	f104 0b1a 	add.w	fp, r4, #26
 801397e:	e7f4      	b.n	801396a <_printf_float+0x40e>
 8013980:	2301      	movs	r3, #1
 8013982:	4642      	mov	r2, r8
 8013984:	e7e1      	b.n	801394a <_printf_float+0x3ee>
 8013986:	2301      	movs	r3, #1
 8013988:	464a      	mov	r2, r9
 801398a:	4631      	mov	r1, r6
 801398c:	4628      	mov	r0, r5
 801398e:	47b8      	blx	r7
 8013990:	3001      	adds	r0, #1
 8013992:	f43f ae3e 	beq.w	8013612 <_printf_float+0xb6>
 8013996:	f108 0801 	add.w	r8, r8, #1
 801399a:	68e3      	ldr	r3, [r4, #12]
 801399c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801399e:	1a5b      	subs	r3, r3, r1
 80139a0:	4543      	cmp	r3, r8
 80139a2:	dcf0      	bgt.n	8013986 <_printf_float+0x42a>
 80139a4:	e6fc      	b.n	80137a0 <_printf_float+0x244>
 80139a6:	f04f 0800 	mov.w	r8, #0
 80139aa:	f104 0919 	add.w	r9, r4, #25
 80139ae:	e7f4      	b.n	801399a <_printf_float+0x43e>

080139b0 <_printf_common>:
 80139b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139b4:	4616      	mov	r6, r2
 80139b6:	4698      	mov	r8, r3
 80139b8:	688a      	ldr	r2, [r1, #8]
 80139ba:	690b      	ldr	r3, [r1, #16]
 80139bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80139c0:	4293      	cmp	r3, r2
 80139c2:	bfb8      	it	lt
 80139c4:	4613      	movlt	r3, r2
 80139c6:	6033      	str	r3, [r6, #0]
 80139c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80139cc:	4607      	mov	r7, r0
 80139ce:	460c      	mov	r4, r1
 80139d0:	b10a      	cbz	r2, 80139d6 <_printf_common+0x26>
 80139d2:	3301      	adds	r3, #1
 80139d4:	6033      	str	r3, [r6, #0]
 80139d6:	6823      	ldr	r3, [r4, #0]
 80139d8:	0699      	lsls	r1, r3, #26
 80139da:	bf42      	ittt	mi
 80139dc:	6833      	ldrmi	r3, [r6, #0]
 80139de:	3302      	addmi	r3, #2
 80139e0:	6033      	strmi	r3, [r6, #0]
 80139e2:	6825      	ldr	r5, [r4, #0]
 80139e4:	f015 0506 	ands.w	r5, r5, #6
 80139e8:	d106      	bne.n	80139f8 <_printf_common+0x48>
 80139ea:	f104 0a19 	add.w	sl, r4, #25
 80139ee:	68e3      	ldr	r3, [r4, #12]
 80139f0:	6832      	ldr	r2, [r6, #0]
 80139f2:	1a9b      	subs	r3, r3, r2
 80139f4:	42ab      	cmp	r3, r5
 80139f6:	dc26      	bgt.n	8013a46 <_printf_common+0x96>
 80139f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80139fc:	6822      	ldr	r2, [r4, #0]
 80139fe:	3b00      	subs	r3, #0
 8013a00:	bf18      	it	ne
 8013a02:	2301      	movne	r3, #1
 8013a04:	0692      	lsls	r2, r2, #26
 8013a06:	d42b      	bmi.n	8013a60 <_printf_common+0xb0>
 8013a08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013a0c:	4641      	mov	r1, r8
 8013a0e:	4638      	mov	r0, r7
 8013a10:	47c8      	blx	r9
 8013a12:	3001      	adds	r0, #1
 8013a14:	d01e      	beq.n	8013a54 <_printf_common+0xa4>
 8013a16:	6823      	ldr	r3, [r4, #0]
 8013a18:	6922      	ldr	r2, [r4, #16]
 8013a1a:	f003 0306 	and.w	r3, r3, #6
 8013a1e:	2b04      	cmp	r3, #4
 8013a20:	bf02      	ittt	eq
 8013a22:	68e5      	ldreq	r5, [r4, #12]
 8013a24:	6833      	ldreq	r3, [r6, #0]
 8013a26:	1aed      	subeq	r5, r5, r3
 8013a28:	68a3      	ldr	r3, [r4, #8]
 8013a2a:	bf0c      	ite	eq
 8013a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a30:	2500      	movne	r5, #0
 8013a32:	4293      	cmp	r3, r2
 8013a34:	bfc4      	itt	gt
 8013a36:	1a9b      	subgt	r3, r3, r2
 8013a38:	18ed      	addgt	r5, r5, r3
 8013a3a:	2600      	movs	r6, #0
 8013a3c:	341a      	adds	r4, #26
 8013a3e:	42b5      	cmp	r5, r6
 8013a40:	d11a      	bne.n	8013a78 <_printf_common+0xc8>
 8013a42:	2000      	movs	r0, #0
 8013a44:	e008      	b.n	8013a58 <_printf_common+0xa8>
 8013a46:	2301      	movs	r3, #1
 8013a48:	4652      	mov	r2, sl
 8013a4a:	4641      	mov	r1, r8
 8013a4c:	4638      	mov	r0, r7
 8013a4e:	47c8      	blx	r9
 8013a50:	3001      	adds	r0, #1
 8013a52:	d103      	bne.n	8013a5c <_printf_common+0xac>
 8013a54:	f04f 30ff 	mov.w	r0, #4294967295
 8013a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a5c:	3501      	adds	r5, #1
 8013a5e:	e7c6      	b.n	80139ee <_printf_common+0x3e>
 8013a60:	18e1      	adds	r1, r4, r3
 8013a62:	1c5a      	adds	r2, r3, #1
 8013a64:	2030      	movs	r0, #48	@ 0x30
 8013a66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013a6a:	4422      	add	r2, r4
 8013a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013a70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013a74:	3302      	adds	r3, #2
 8013a76:	e7c7      	b.n	8013a08 <_printf_common+0x58>
 8013a78:	2301      	movs	r3, #1
 8013a7a:	4622      	mov	r2, r4
 8013a7c:	4641      	mov	r1, r8
 8013a7e:	4638      	mov	r0, r7
 8013a80:	47c8      	blx	r9
 8013a82:	3001      	adds	r0, #1
 8013a84:	d0e6      	beq.n	8013a54 <_printf_common+0xa4>
 8013a86:	3601      	adds	r6, #1
 8013a88:	e7d9      	b.n	8013a3e <_printf_common+0x8e>
	...

08013a8c <_printf_i>:
 8013a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a90:	7e0f      	ldrb	r7, [r1, #24]
 8013a92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013a94:	2f78      	cmp	r7, #120	@ 0x78
 8013a96:	4691      	mov	r9, r2
 8013a98:	4680      	mov	r8, r0
 8013a9a:	460c      	mov	r4, r1
 8013a9c:	469a      	mov	sl, r3
 8013a9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013aa2:	d807      	bhi.n	8013ab4 <_printf_i+0x28>
 8013aa4:	2f62      	cmp	r7, #98	@ 0x62
 8013aa6:	d80a      	bhi.n	8013abe <_printf_i+0x32>
 8013aa8:	2f00      	cmp	r7, #0
 8013aaa:	f000 80d2 	beq.w	8013c52 <_printf_i+0x1c6>
 8013aae:	2f58      	cmp	r7, #88	@ 0x58
 8013ab0:	f000 80b9 	beq.w	8013c26 <_printf_i+0x19a>
 8013ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013ab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013abc:	e03a      	b.n	8013b34 <_printf_i+0xa8>
 8013abe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013ac2:	2b15      	cmp	r3, #21
 8013ac4:	d8f6      	bhi.n	8013ab4 <_printf_i+0x28>
 8013ac6:	a101      	add	r1, pc, #4	@ (adr r1, 8013acc <_printf_i+0x40>)
 8013ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013acc:	08013b25 	.word	0x08013b25
 8013ad0:	08013b39 	.word	0x08013b39
 8013ad4:	08013ab5 	.word	0x08013ab5
 8013ad8:	08013ab5 	.word	0x08013ab5
 8013adc:	08013ab5 	.word	0x08013ab5
 8013ae0:	08013ab5 	.word	0x08013ab5
 8013ae4:	08013b39 	.word	0x08013b39
 8013ae8:	08013ab5 	.word	0x08013ab5
 8013aec:	08013ab5 	.word	0x08013ab5
 8013af0:	08013ab5 	.word	0x08013ab5
 8013af4:	08013ab5 	.word	0x08013ab5
 8013af8:	08013c39 	.word	0x08013c39
 8013afc:	08013b63 	.word	0x08013b63
 8013b00:	08013bf3 	.word	0x08013bf3
 8013b04:	08013ab5 	.word	0x08013ab5
 8013b08:	08013ab5 	.word	0x08013ab5
 8013b0c:	08013c5b 	.word	0x08013c5b
 8013b10:	08013ab5 	.word	0x08013ab5
 8013b14:	08013b63 	.word	0x08013b63
 8013b18:	08013ab5 	.word	0x08013ab5
 8013b1c:	08013ab5 	.word	0x08013ab5
 8013b20:	08013bfb 	.word	0x08013bfb
 8013b24:	6833      	ldr	r3, [r6, #0]
 8013b26:	1d1a      	adds	r2, r3, #4
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	6032      	str	r2, [r6, #0]
 8013b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013b30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013b34:	2301      	movs	r3, #1
 8013b36:	e09d      	b.n	8013c74 <_printf_i+0x1e8>
 8013b38:	6833      	ldr	r3, [r6, #0]
 8013b3a:	6820      	ldr	r0, [r4, #0]
 8013b3c:	1d19      	adds	r1, r3, #4
 8013b3e:	6031      	str	r1, [r6, #0]
 8013b40:	0606      	lsls	r6, r0, #24
 8013b42:	d501      	bpl.n	8013b48 <_printf_i+0xbc>
 8013b44:	681d      	ldr	r5, [r3, #0]
 8013b46:	e003      	b.n	8013b50 <_printf_i+0xc4>
 8013b48:	0645      	lsls	r5, r0, #25
 8013b4a:	d5fb      	bpl.n	8013b44 <_printf_i+0xb8>
 8013b4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013b50:	2d00      	cmp	r5, #0
 8013b52:	da03      	bge.n	8013b5c <_printf_i+0xd0>
 8013b54:	232d      	movs	r3, #45	@ 0x2d
 8013b56:	426d      	negs	r5, r5
 8013b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013b5c:	4859      	ldr	r0, [pc, #356]	@ (8013cc4 <_printf_i+0x238>)
 8013b5e:	230a      	movs	r3, #10
 8013b60:	e011      	b.n	8013b86 <_printf_i+0xfa>
 8013b62:	6821      	ldr	r1, [r4, #0]
 8013b64:	6833      	ldr	r3, [r6, #0]
 8013b66:	0608      	lsls	r0, r1, #24
 8013b68:	f853 5b04 	ldr.w	r5, [r3], #4
 8013b6c:	d402      	bmi.n	8013b74 <_printf_i+0xe8>
 8013b6e:	0649      	lsls	r1, r1, #25
 8013b70:	bf48      	it	mi
 8013b72:	b2ad      	uxthmi	r5, r5
 8013b74:	2f6f      	cmp	r7, #111	@ 0x6f
 8013b76:	4853      	ldr	r0, [pc, #332]	@ (8013cc4 <_printf_i+0x238>)
 8013b78:	6033      	str	r3, [r6, #0]
 8013b7a:	bf14      	ite	ne
 8013b7c:	230a      	movne	r3, #10
 8013b7e:	2308      	moveq	r3, #8
 8013b80:	2100      	movs	r1, #0
 8013b82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013b86:	6866      	ldr	r6, [r4, #4]
 8013b88:	60a6      	str	r6, [r4, #8]
 8013b8a:	2e00      	cmp	r6, #0
 8013b8c:	bfa2      	ittt	ge
 8013b8e:	6821      	ldrge	r1, [r4, #0]
 8013b90:	f021 0104 	bicge.w	r1, r1, #4
 8013b94:	6021      	strge	r1, [r4, #0]
 8013b96:	b90d      	cbnz	r5, 8013b9c <_printf_i+0x110>
 8013b98:	2e00      	cmp	r6, #0
 8013b9a:	d04b      	beq.n	8013c34 <_printf_i+0x1a8>
 8013b9c:	4616      	mov	r6, r2
 8013b9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8013ba2:	fb03 5711 	mls	r7, r3, r1, r5
 8013ba6:	5dc7      	ldrb	r7, [r0, r7]
 8013ba8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013bac:	462f      	mov	r7, r5
 8013bae:	42bb      	cmp	r3, r7
 8013bb0:	460d      	mov	r5, r1
 8013bb2:	d9f4      	bls.n	8013b9e <_printf_i+0x112>
 8013bb4:	2b08      	cmp	r3, #8
 8013bb6:	d10b      	bne.n	8013bd0 <_printf_i+0x144>
 8013bb8:	6823      	ldr	r3, [r4, #0]
 8013bba:	07df      	lsls	r7, r3, #31
 8013bbc:	d508      	bpl.n	8013bd0 <_printf_i+0x144>
 8013bbe:	6923      	ldr	r3, [r4, #16]
 8013bc0:	6861      	ldr	r1, [r4, #4]
 8013bc2:	4299      	cmp	r1, r3
 8013bc4:	bfde      	ittt	le
 8013bc6:	2330      	movle	r3, #48	@ 0x30
 8013bc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013bcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013bd0:	1b92      	subs	r2, r2, r6
 8013bd2:	6122      	str	r2, [r4, #16]
 8013bd4:	f8cd a000 	str.w	sl, [sp]
 8013bd8:	464b      	mov	r3, r9
 8013bda:	aa03      	add	r2, sp, #12
 8013bdc:	4621      	mov	r1, r4
 8013bde:	4640      	mov	r0, r8
 8013be0:	f7ff fee6 	bl	80139b0 <_printf_common>
 8013be4:	3001      	adds	r0, #1
 8013be6:	d14a      	bne.n	8013c7e <_printf_i+0x1f2>
 8013be8:	f04f 30ff 	mov.w	r0, #4294967295
 8013bec:	b004      	add	sp, #16
 8013bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bf2:	6823      	ldr	r3, [r4, #0]
 8013bf4:	f043 0320 	orr.w	r3, r3, #32
 8013bf8:	6023      	str	r3, [r4, #0]
 8013bfa:	4833      	ldr	r0, [pc, #204]	@ (8013cc8 <_printf_i+0x23c>)
 8013bfc:	2778      	movs	r7, #120	@ 0x78
 8013bfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013c02:	6823      	ldr	r3, [r4, #0]
 8013c04:	6831      	ldr	r1, [r6, #0]
 8013c06:	061f      	lsls	r7, r3, #24
 8013c08:	f851 5b04 	ldr.w	r5, [r1], #4
 8013c0c:	d402      	bmi.n	8013c14 <_printf_i+0x188>
 8013c0e:	065f      	lsls	r7, r3, #25
 8013c10:	bf48      	it	mi
 8013c12:	b2ad      	uxthmi	r5, r5
 8013c14:	6031      	str	r1, [r6, #0]
 8013c16:	07d9      	lsls	r1, r3, #31
 8013c18:	bf44      	itt	mi
 8013c1a:	f043 0320 	orrmi.w	r3, r3, #32
 8013c1e:	6023      	strmi	r3, [r4, #0]
 8013c20:	b11d      	cbz	r5, 8013c2a <_printf_i+0x19e>
 8013c22:	2310      	movs	r3, #16
 8013c24:	e7ac      	b.n	8013b80 <_printf_i+0xf4>
 8013c26:	4827      	ldr	r0, [pc, #156]	@ (8013cc4 <_printf_i+0x238>)
 8013c28:	e7e9      	b.n	8013bfe <_printf_i+0x172>
 8013c2a:	6823      	ldr	r3, [r4, #0]
 8013c2c:	f023 0320 	bic.w	r3, r3, #32
 8013c30:	6023      	str	r3, [r4, #0]
 8013c32:	e7f6      	b.n	8013c22 <_printf_i+0x196>
 8013c34:	4616      	mov	r6, r2
 8013c36:	e7bd      	b.n	8013bb4 <_printf_i+0x128>
 8013c38:	6833      	ldr	r3, [r6, #0]
 8013c3a:	6825      	ldr	r5, [r4, #0]
 8013c3c:	6961      	ldr	r1, [r4, #20]
 8013c3e:	1d18      	adds	r0, r3, #4
 8013c40:	6030      	str	r0, [r6, #0]
 8013c42:	062e      	lsls	r6, r5, #24
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	d501      	bpl.n	8013c4c <_printf_i+0x1c0>
 8013c48:	6019      	str	r1, [r3, #0]
 8013c4a:	e002      	b.n	8013c52 <_printf_i+0x1c6>
 8013c4c:	0668      	lsls	r0, r5, #25
 8013c4e:	d5fb      	bpl.n	8013c48 <_printf_i+0x1bc>
 8013c50:	8019      	strh	r1, [r3, #0]
 8013c52:	2300      	movs	r3, #0
 8013c54:	6123      	str	r3, [r4, #16]
 8013c56:	4616      	mov	r6, r2
 8013c58:	e7bc      	b.n	8013bd4 <_printf_i+0x148>
 8013c5a:	6833      	ldr	r3, [r6, #0]
 8013c5c:	1d1a      	adds	r2, r3, #4
 8013c5e:	6032      	str	r2, [r6, #0]
 8013c60:	681e      	ldr	r6, [r3, #0]
 8013c62:	6862      	ldr	r2, [r4, #4]
 8013c64:	2100      	movs	r1, #0
 8013c66:	4630      	mov	r0, r6
 8013c68:	f7ec faba 	bl	80001e0 <memchr>
 8013c6c:	b108      	cbz	r0, 8013c72 <_printf_i+0x1e6>
 8013c6e:	1b80      	subs	r0, r0, r6
 8013c70:	6060      	str	r0, [r4, #4]
 8013c72:	6863      	ldr	r3, [r4, #4]
 8013c74:	6123      	str	r3, [r4, #16]
 8013c76:	2300      	movs	r3, #0
 8013c78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c7c:	e7aa      	b.n	8013bd4 <_printf_i+0x148>
 8013c7e:	6923      	ldr	r3, [r4, #16]
 8013c80:	4632      	mov	r2, r6
 8013c82:	4649      	mov	r1, r9
 8013c84:	4640      	mov	r0, r8
 8013c86:	47d0      	blx	sl
 8013c88:	3001      	adds	r0, #1
 8013c8a:	d0ad      	beq.n	8013be8 <_printf_i+0x15c>
 8013c8c:	6823      	ldr	r3, [r4, #0]
 8013c8e:	079b      	lsls	r3, r3, #30
 8013c90:	d413      	bmi.n	8013cba <_printf_i+0x22e>
 8013c92:	68e0      	ldr	r0, [r4, #12]
 8013c94:	9b03      	ldr	r3, [sp, #12]
 8013c96:	4298      	cmp	r0, r3
 8013c98:	bfb8      	it	lt
 8013c9a:	4618      	movlt	r0, r3
 8013c9c:	e7a6      	b.n	8013bec <_printf_i+0x160>
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	4632      	mov	r2, r6
 8013ca2:	4649      	mov	r1, r9
 8013ca4:	4640      	mov	r0, r8
 8013ca6:	47d0      	blx	sl
 8013ca8:	3001      	adds	r0, #1
 8013caa:	d09d      	beq.n	8013be8 <_printf_i+0x15c>
 8013cac:	3501      	adds	r5, #1
 8013cae:	68e3      	ldr	r3, [r4, #12]
 8013cb0:	9903      	ldr	r1, [sp, #12]
 8013cb2:	1a5b      	subs	r3, r3, r1
 8013cb4:	42ab      	cmp	r3, r5
 8013cb6:	dcf2      	bgt.n	8013c9e <_printf_i+0x212>
 8013cb8:	e7eb      	b.n	8013c92 <_printf_i+0x206>
 8013cba:	2500      	movs	r5, #0
 8013cbc:	f104 0619 	add.w	r6, r4, #25
 8013cc0:	e7f5      	b.n	8013cae <_printf_i+0x222>
 8013cc2:	bf00      	nop
 8013cc4:	08018f0a 	.word	0x08018f0a
 8013cc8:	08018f1b 	.word	0x08018f1b

08013ccc <_scanf_float>:
 8013ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd0:	b087      	sub	sp, #28
 8013cd2:	4617      	mov	r7, r2
 8013cd4:	9303      	str	r3, [sp, #12]
 8013cd6:	688b      	ldr	r3, [r1, #8]
 8013cd8:	1e5a      	subs	r2, r3, #1
 8013cda:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013cde:	bf81      	itttt	hi
 8013ce0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013ce4:	eb03 0b05 	addhi.w	fp, r3, r5
 8013ce8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013cec:	608b      	strhi	r3, [r1, #8]
 8013cee:	680b      	ldr	r3, [r1, #0]
 8013cf0:	460a      	mov	r2, r1
 8013cf2:	f04f 0500 	mov.w	r5, #0
 8013cf6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8013cfa:	f842 3b1c 	str.w	r3, [r2], #28
 8013cfe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013d02:	4680      	mov	r8, r0
 8013d04:	460c      	mov	r4, r1
 8013d06:	bf98      	it	ls
 8013d08:	f04f 0b00 	movls.w	fp, #0
 8013d0c:	9201      	str	r2, [sp, #4]
 8013d0e:	4616      	mov	r6, r2
 8013d10:	46aa      	mov	sl, r5
 8013d12:	46a9      	mov	r9, r5
 8013d14:	9502      	str	r5, [sp, #8]
 8013d16:	68a2      	ldr	r2, [r4, #8]
 8013d18:	b152      	cbz	r2, 8013d30 <_scanf_float+0x64>
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	2b4e      	cmp	r3, #78	@ 0x4e
 8013d20:	d864      	bhi.n	8013dec <_scanf_float+0x120>
 8013d22:	2b40      	cmp	r3, #64	@ 0x40
 8013d24:	d83c      	bhi.n	8013da0 <_scanf_float+0xd4>
 8013d26:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8013d2a:	b2c8      	uxtb	r0, r1
 8013d2c:	280e      	cmp	r0, #14
 8013d2e:	d93a      	bls.n	8013da6 <_scanf_float+0xda>
 8013d30:	f1b9 0f00 	cmp.w	r9, #0
 8013d34:	d003      	beq.n	8013d3e <_scanf_float+0x72>
 8013d36:	6823      	ldr	r3, [r4, #0]
 8013d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013d3c:	6023      	str	r3, [r4, #0]
 8013d3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013d42:	f1ba 0f01 	cmp.w	sl, #1
 8013d46:	f200 8117 	bhi.w	8013f78 <_scanf_float+0x2ac>
 8013d4a:	9b01      	ldr	r3, [sp, #4]
 8013d4c:	429e      	cmp	r6, r3
 8013d4e:	f200 8108 	bhi.w	8013f62 <_scanf_float+0x296>
 8013d52:	2001      	movs	r0, #1
 8013d54:	b007      	add	sp, #28
 8013d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d5a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8013d5e:	2a0d      	cmp	r2, #13
 8013d60:	d8e6      	bhi.n	8013d30 <_scanf_float+0x64>
 8013d62:	a101      	add	r1, pc, #4	@ (adr r1, 8013d68 <_scanf_float+0x9c>)
 8013d64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013d68:	08013eaf 	.word	0x08013eaf
 8013d6c:	08013d31 	.word	0x08013d31
 8013d70:	08013d31 	.word	0x08013d31
 8013d74:	08013d31 	.word	0x08013d31
 8013d78:	08013f0f 	.word	0x08013f0f
 8013d7c:	08013ee7 	.word	0x08013ee7
 8013d80:	08013d31 	.word	0x08013d31
 8013d84:	08013d31 	.word	0x08013d31
 8013d88:	08013ebd 	.word	0x08013ebd
 8013d8c:	08013d31 	.word	0x08013d31
 8013d90:	08013d31 	.word	0x08013d31
 8013d94:	08013d31 	.word	0x08013d31
 8013d98:	08013d31 	.word	0x08013d31
 8013d9c:	08013e75 	.word	0x08013e75
 8013da0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8013da4:	e7db      	b.n	8013d5e <_scanf_float+0x92>
 8013da6:	290e      	cmp	r1, #14
 8013da8:	d8c2      	bhi.n	8013d30 <_scanf_float+0x64>
 8013daa:	a001      	add	r0, pc, #4	@ (adr r0, 8013db0 <_scanf_float+0xe4>)
 8013dac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013db0:	08013e65 	.word	0x08013e65
 8013db4:	08013d31 	.word	0x08013d31
 8013db8:	08013e65 	.word	0x08013e65
 8013dbc:	08013efb 	.word	0x08013efb
 8013dc0:	08013d31 	.word	0x08013d31
 8013dc4:	08013e0d 	.word	0x08013e0d
 8013dc8:	08013e4b 	.word	0x08013e4b
 8013dcc:	08013e4b 	.word	0x08013e4b
 8013dd0:	08013e4b 	.word	0x08013e4b
 8013dd4:	08013e4b 	.word	0x08013e4b
 8013dd8:	08013e4b 	.word	0x08013e4b
 8013ddc:	08013e4b 	.word	0x08013e4b
 8013de0:	08013e4b 	.word	0x08013e4b
 8013de4:	08013e4b 	.word	0x08013e4b
 8013de8:	08013e4b 	.word	0x08013e4b
 8013dec:	2b6e      	cmp	r3, #110	@ 0x6e
 8013dee:	d809      	bhi.n	8013e04 <_scanf_float+0x138>
 8013df0:	2b60      	cmp	r3, #96	@ 0x60
 8013df2:	d8b2      	bhi.n	8013d5a <_scanf_float+0x8e>
 8013df4:	2b54      	cmp	r3, #84	@ 0x54
 8013df6:	d07b      	beq.n	8013ef0 <_scanf_float+0x224>
 8013df8:	2b59      	cmp	r3, #89	@ 0x59
 8013dfa:	d199      	bne.n	8013d30 <_scanf_float+0x64>
 8013dfc:	2d07      	cmp	r5, #7
 8013dfe:	d197      	bne.n	8013d30 <_scanf_float+0x64>
 8013e00:	2508      	movs	r5, #8
 8013e02:	e02c      	b.n	8013e5e <_scanf_float+0x192>
 8013e04:	2b74      	cmp	r3, #116	@ 0x74
 8013e06:	d073      	beq.n	8013ef0 <_scanf_float+0x224>
 8013e08:	2b79      	cmp	r3, #121	@ 0x79
 8013e0a:	e7f6      	b.n	8013dfa <_scanf_float+0x12e>
 8013e0c:	6821      	ldr	r1, [r4, #0]
 8013e0e:	05c8      	lsls	r0, r1, #23
 8013e10:	d51b      	bpl.n	8013e4a <_scanf_float+0x17e>
 8013e12:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8013e16:	6021      	str	r1, [r4, #0]
 8013e18:	f109 0901 	add.w	r9, r9, #1
 8013e1c:	f1bb 0f00 	cmp.w	fp, #0
 8013e20:	d003      	beq.n	8013e2a <_scanf_float+0x15e>
 8013e22:	3201      	adds	r2, #1
 8013e24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013e28:	60a2      	str	r2, [r4, #8]
 8013e2a:	68a3      	ldr	r3, [r4, #8]
 8013e2c:	3b01      	subs	r3, #1
 8013e2e:	60a3      	str	r3, [r4, #8]
 8013e30:	6923      	ldr	r3, [r4, #16]
 8013e32:	3301      	adds	r3, #1
 8013e34:	6123      	str	r3, [r4, #16]
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	3b01      	subs	r3, #1
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	607b      	str	r3, [r7, #4]
 8013e3e:	f340 8087 	ble.w	8013f50 <_scanf_float+0x284>
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	3301      	adds	r3, #1
 8013e46:	603b      	str	r3, [r7, #0]
 8013e48:	e765      	b.n	8013d16 <_scanf_float+0x4a>
 8013e4a:	eb1a 0105 	adds.w	r1, sl, r5
 8013e4e:	f47f af6f 	bne.w	8013d30 <_scanf_float+0x64>
 8013e52:	6822      	ldr	r2, [r4, #0]
 8013e54:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8013e58:	6022      	str	r2, [r4, #0]
 8013e5a:	460d      	mov	r5, r1
 8013e5c:	468a      	mov	sl, r1
 8013e5e:	f806 3b01 	strb.w	r3, [r6], #1
 8013e62:	e7e2      	b.n	8013e2a <_scanf_float+0x15e>
 8013e64:	6822      	ldr	r2, [r4, #0]
 8013e66:	0610      	lsls	r0, r2, #24
 8013e68:	f57f af62 	bpl.w	8013d30 <_scanf_float+0x64>
 8013e6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013e70:	6022      	str	r2, [r4, #0]
 8013e72:	e7f4      	b.n	8013e5e <_scanf_float+0x192>
 8013e74:	f1ba 0f00 	cmp.w	sl, #0
 8013e78:	d10e      	bne.n	8013e98 <_scanf_float+0x1cc>
 8013e7a:	f1b9 0f00 	cmp.w	r9, #0
 8013e7e:	d10e      	bne.n	8013e9e <_scanf_float+0x1d2>
 8013e80:	6822      	ldr	r2, [r4, #0]
 8013e82:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013e86:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013e8a:	d108      	bne.n	8013e9e <_scanf_float+0x1d2>
 8013e8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013e90:	6022      	str	r2, [r4, #0]
 8013e92:	f04f 0a01 	mov.w	sl, #1
 8013e96:	e7e2      	b.n	8013e5e <_scanf_float+0x192>
 8013e98:	f1ba 0f02 	cmp.w	sl, #2
 8013e9c:	d055      	beq.n	8013f4a <_scanf_float+0x27e>
 8013e9e:	2d01      	cmp	r5, #1
 8013ea0:	d002      	beq.n	8013ea8 <_scanf_float+0x1dc>
 8013ea2:	2d04      	cmp	r5, #4
 8013ea4:	f47f af44 	bne.w	8013d30 <_scanf_float+0x64>
 8013ea8:	3501      	adds	r5, #1
 8013eaa:	b2ed      	uxtb	r5, r5
 8013eac:	e7d7      	b.n	8013e5e <_scanf_float+0x192>
 8013eae:	f1ba 0f01 	cmp.w	sl, #1
 8013eb2:	f47f af3d 	bne.w	8013d30 <_scanf_float+0x64>
 8013eb6:	f04f 0a02 	mov.w	sl, #2
 8013eba:	e7d0      	b.n	8013e5e <_scanf_float+0x192>
 8013ebc:	b97d      	cbnz	r5, 8013ede <_scanf_float+0x212>
 8013ebe:	f1b9 0f00 	cmp.w	r9, #0
 8013ec2:	f47f af38 	bne.w	8013d36 <_scanf_float+0x6a>
 8013ec6:	6822      	ldr	r2, [r4, #0]
 8013ec8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013ecc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013ed0:	f040 8108 	bne.w	80140e4 <_scanf_float+0x418>
 8013ed4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013ed8:	6022      	str	r2, [r4, #0]
 8013eda:	2501      	movs	r5, #1
 8013edc:	e7bf      	b.n	8013e5e <_scanf_float+0x192>
 8013ede:	2d03      	cmp	r5, #3
 8013ee0:	d0e2      	beq.n	8013ea8 <_scanf_float+0x1dc>
 8013ee2:	2d05      	cmp	r5, #5
 8013ee4:	e7de      	b.n	8013ea4 <_scanf_float+0x1d8>
 8013ee6:	2d02      	cmp	r5, #2
 8013ee8:	f47f af22 	bne.w	8013d30 <_scanf_float+0x64>
 8013eec:	2503      	movs	r5, #3
 8013eee:	e7b6      	b.n	8013e5e <_scanf_float+0x192>
 8013ef0:	2d06      	cmp	r5, #6
 8013ef2:	f47f af1d 	bne.w	8013d30 <_scanf_float+0x64>
 8013ef6:	2507      	movs	r5, #7
 8013ef8:	e7b1      	b.n	8013e5e <_scanf_float+0x192>
 8013efa:	6822      	ldr	r2, [r4, #0]
 8013efc:	0591      	lsls	r1, r2, #22
 8013efe:	f57f af17 	bpl.w	8013d30 <_scanf_float+0x64>
 8013f02:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8013f06:	6022      	str	r2, [r4, #0]
 8013f08:	f8cd 9008 	str.w	r9, [sp, #8]
 8013f0c:	e7a7      	b.n	8013e5e <_scanf_float+0x192>
 8013f0e:	6822      	ldr	r2, [r4, #0]
 8013f10:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8013f14:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013f18:	d006      	beq.n	8013f28 <_scanf_float+0x25c>
 8013f1a:	0550      	lsls	r0, r2, #21
 8013f1c:	f57f af08 	bpl.w	8013d30 <_scanf_float+0x64>
 8013f20:	f1b9 0f00 	cmp.w	r9, #0
 8013f24:	f000 80de 	beq.w	80140e4 <_scanf_float+0x418>
 8013f28:	0591      	lsls	r1, r2, #22
 8013f2a:	bf58      	it	pl
 8013f2c:	9902      	ldrpl	r1, [sp, #8]
 8013f2e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013f32:	bf58      	it	pl
 8013f34:	eba9 0101 	subpl.w	r1, r9, r1
 8013f38:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8013f3c:	bf58      	it	pl
 8013f3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013f42:	6022      	str	r2, [r4, #0]
 8013f44:	f04f 0900 	mov.w	r9, #0
 8013f48:	e789      	b.n	8013e5e <_scanf_float+0x192>
 8013f4a:	f04f 0a03 	mov.w	sl, #3
 8013f4e:	e786      	b.n	8013e5e <_scanf_float+0x192>
 8013f50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013f54:	4639      	mov	r1, r7
 8013f56:	4640      	mov	r0, r8
 8013f58:	4798      	blx	r3
 8013f5a:	2800      	cmp	r0, #0
 8013f5c:	f43f aedb 	beq.w	8013d16 <_scanf_float+0x4a>
 8013f60:	e6e6      	b.n	8013d30 <_scanf_float+0x64>
 8013f62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013f66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013f6a:	463a      	mov	r2, r7
 8013f6c:	4640      	mov	r0, r8
 8013f6e:	4798      	blx	r3
 8013f70:	6923      	ldr	r3, [r4, #16]
 8013f72:	3b01      	subs	r3, #1
 8013f74:	6123      	str	r3, [r4, #16]
 8013f76:	e6e8      	b.n	8013d4a <_scanf_float+0x7e>
 8013f78:	1e6b      	subs	r3, r5, #1
 8013f7a:	2b06      	cmp	r3, #6
 8013f7c:	d824      	bhi.n	8013fc8 <_scanf_float+0x2fc>
 8013f7e:	2d02      	cmp	r5, #2
 8013f80:	d836      	bhi.n	8013ff0 <_scanf_float+0x324>
 8013f82:	9b01      	ldr	r3, [sp, #4]
 8013f84:	429e      	cmp	r6, r3
 8013f86:	f67f aee4 	bls.w	8013d52 <_scanf_float+0x86>
 8013f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013f8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013f92:	463a      	mov	r2, r7
 8013f94:	4640      	mov	r0, r8
 8013f96:	4798      	blx	r3
 8013f98:	6923      	ldr	r3, [r4, #16]
 8013f9a:	3b01      	subs	r3, #1
 8013f9c:	6123      	str	r3, [r4, #16]
 8013f9e:	e7f0      	b.n	8013f82 <_scanf_float+0x2b6>
 8013fa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013fa4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8013fa8:	463a      	mov	r2, r7
 8013faa:	4640      	mov	r0, r8
 8013fac:	4798      	blx	r3
 8013fae:	6923      	ldr	r3, [r4, #16]
 8013fb0:	3b01      	subs	r3, #1
 8013fb2:	6123      	str	r3, [r4, #16]
 8013fb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013fb8:	fa5f fa8a 	uxtb.w	sl, sl
 8013fbc:	f1ba 0f02 	cmp.w	sl, #2
 8013fc0:	d1ee      	bne.n	8013fa0 <_scanf_float+0x2d4>
 8013fc2:	3d03      	subs	r5, #3
 8013fc4:	b2ed      	uxtb	r5, r5
 8013fc6:	1b76      	subs	r6, r6, r5
 8013fc8:	6823      	ldr	r3, [r4, #0]
 8013fca:	05da      	lsls	r2, r3, #23
 8013fcc:	d530      	bpl.n	8014030 <_scanf_float+0x364>
 8013fce:	055b      	lsls	r3, r3, #21
 8013fd0:	d511      	bpl.n	8013ff6 <_scanf_float+0x32a>
 8013fd2:	9b01      	ldr	r3, [sp, #4]
 8013fd4:	429e      	cmp	r6, r3
 8013fd6:	f67f aebc 	bls.w	8013d52 <_scanf_float+0x86>
 8013fda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013fde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013fe2:	463a      	mov	r2, r7
 8013fe4:	4640      	mov	r0, r8
 8013fe6:	4798      	blx	r3
 8013fe8:	6923      	ldr	r3, [r4, #16]
 8013fea:	3b01      	subs	r3, #1
 8013fec:	6123      	str	r3, [r4, #16]
 8013fee:	e7f0      	b.n	8013fd2 <_scanf_float+0x306>
 8013ff0:	46aa      	mov	sl, r5
 8013ff2:	46b3      	mov	fp, r6
 8013ff4:	e7de      	b.n	8013fb4 <_scanf_float+0x2e8>
 8013ff6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013ffa:	6923      	ldr	r3, [r4, #16]
 8013ffc:	2965      	cmp	r1, #101	@ 0x65
 8013ffe:	f103 33ff 	add.w	r3, r3, #4294967295
 8014002:	f106 35ff 	add.w	r5, r6, #4294967295
 8014006:	6123      	str	r3, [r4, #16]
 8014008:	d00c      	beq.n	8014024 <_scanf_float+0x358>
 801400a:	2945      	cmp	r1, #69	@ 0x45
 801400c:	d00a      	beq.n	8014024 <_scanf_float+0x358>
 801400e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014012:	463a      	mov	r2, r7
 8014014:	4640      	mov	r0, r8
 8014016:	4798      	blx	r3
 8014018:	6923      	ldr	r3, [r4, #16]
 801401a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801401e:	3b01      	subs	r3, #1
 8014020:	1eb5      	subs	r5, r6, #2
 8014022:	6123      	str	r3, [r4, #16]
 8014024:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014028:	463a      	mov	r2, r7
 801402a:	4640      	mov	r0, r8
 801402c:	4798      	blx	r3
 801402e:	462e      	mov	r6, r5
 8014030:	6822      	ldr	r2, [r4, #0]
 8014032:	f012 0210 	ands.w	r2, r2, #16
 8014036:	d001      	beq.n	801403c <_scanf_float+0x370>
 8014038:	2000      	movs	r0, #0
 801403a:	e68b      	b.n	8013d54 <_scanf_float+0x88>
 801403c:	7032      	strb	r2, [r6, #0]
 801403e:	6823      	ldr	r3, [r4, #0]
 8014040:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014048:	d11c      	bne.n	8014084 <_scanf_float+0x3b8>
 801404a:	9b02      	ldr	r3, [sp, #8]
 801404c:	454b      	cmp	r3, r9
 801404e:	eba3 0209 	sub.w	r2, r3, r9
 8014052:	d123      	bne.n	801409c <_scanf_float+0x3d0>
 8014054:	9901      	ldr	r1, [sp, #4]
 8014056:	2200      	movs	r2, #0
 8014058:	4640      	mov	r0, r8
 801405a:	f002 fc8d 	bl	8016978 <_strtod_r>
 801405e:	9b03      	ldr	r3, [sp, #12]
 8014060:	6821      	ldr	r1, [r4, #0]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	f011 0f02 	tst.w	r1, #2
 8014068:	ec57 6b10 	vmov	r6, r7, d0
 801406c:	f103 0204 	add.w	r2, r3, #4
 8014070:	d01f      	beq.n	80140b2 <_scanf_float+0x3e6>
 8014072:	9903      	ldr	r1, [sp, #12]
 8014074:	600a      	str	r2, [r1, #0]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	e9c3 6700 	strd	r6, r7, [r3]
 801407c:	68e3      	ldr	r3, [r4, #12]
 801407e:	3301      	adds	r3, #1
 8014080:	60e3      	str	r3, [r4, #12]
 8014082:	e7d9      	b.n	8014038 <_scanf_float+0x36c>
 8014084:	9b04      	ldr	r3, [sp, #16]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d0e4      	beq.n	8014054 <_scanf_float+0x388>
 801408a:	9905      	ldr	r1, [sp, #20]
 801408c:	230a      	movs	r3, #10
 801408e:	3101      	adds	r1, #1
 8014090:	4640      	mov	r0, r8
 8014092:	f002 fcf1 	bl	8016a78 <_strtol_r>
 8014096:	9b04      	ldr	r3, [sp, #16]
 8014098:	9e05      	ldr	r6, [sp, #20]
 801409a:	1ac2      	subs	r2, r0, r3
 801409c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80140a0:	429e      	cmp	r6, r3
 80140a2:	bf28      	it	cs
 80140a4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80140a8:	4910      	ldr	r1, [pc, #64]	@ (80140ec <_scanf_float+0x420>)
 80140aa:	4630      	mov	r0, r6
 80140ac:	f000 f988 	bl	80143c0 <siprintf>
 80140b0:	e7d0      	b.n	8014054 <_scanf_float+0x388>
 80140b2:	f011 0f04 	tst.w	r1, #4
 80140b6:	9903      	ldr	r1, [sp, #12]
 80140b8:	600a      	str	r2, [r1, #0]
 80140ba:	d1dc      	bne.n	8014076 <_scanf_float+0x3aa>
 80140bc:	681d      	ldr	r5, [r3, #0]
 80140be:	4632      	mov	r2, r6
 80140c0:	463b      	mov	r3, r7
 80140c2:	4630      	mov	r0, r6
 80140c4:	4639      	mov	r1, r7
 80140c6:	f7ec fd39 	bl	8000b3c <__aeabi_dcmpun>
 80140ca:	b128      	cbz	r0, 80140d8 <_scanf_float+0x40c>
 80140cc:	4808      	ldr	r0, [pc, #32]	@ (80140f0 <_scanf_float+0x424>)
 80140ce:	f000 faff 	bl	80146d0 <nanf>
 80140d2:	ed85 0a00 	vstr	s0, [r5]
 80140d6:	e7d1      	b.n	801407c <_scanf_float+0x3b0>
 80140d8:	4630      	mov	r0, r6
 80140da:	4639      	mov	r1, r7
 80140dc:	f7ec fd8c 	bl	8000bf8 <__aeabi_d2f>
 80140e0:	6028      	str	r0, [r5, #0]
 80140e2:	e7cb      	b.n	801407c <_scanf_float+0x3b0>
 80140e4:	f04f 0900 	mov.w	r9, #0
 80140e8:	e629      	b.n	8013d3e <_scanf_float+0x72>
 80140ea:	bf00      	nop
 80140ec:	08018f2c 	.word	0x08018f2c
 80140f0:	080192c5 	.word	0x080192c5

080140f4 <std>:
 80140f4:	2300      	movs	r3, #0
 80140f6:	b510      	push	{r4, lr}
 80140f8:	4604      	mov	r4, r0
 80140fa:	e9c0 3300 	strd	r3, r3, [r0]
 80140fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014102:	6083      	str	r3, [r0, #8]
 8014104:	8181      	strh	r1, [r0, #12]
 8014106:	6643      	str	r3, [r0, #100]	@ 0x64
 8014108:	81c2      	strh	r2, [r0, #14]
 801410a:	6183      	str	r3, [r0, #24]
 801410c:	4619      	mov	r1, r3
 801410e:	2208      	movs	r2, #8
 8014110:	305c      	adds	r0, #92	@ 0x5c
 8014112:	f000 fa4d 	bl	80145b0 <memset>
 8014116:	4b0d      	ldr	r3, [pc, #52]	@ (801414c <std+0x58>)
 8014118:	6263      	str	r3, [r4, #36]	@ 0x24
 801411a:	4b0d      	ldr	r3, [pc, #52]	@ (8014150 <std+0x5c>)
 801411c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801411e:	4b0d      	ldr	r3, [pc, #52]	@ (8014154 <std+0x60>)
 8014120:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014122:	4b0d      	ldr	r3, [pc, #52]	@ (8014158 <std+0x64>)
 8014124:	6323      	str	r3, [r4, #48]	@ 0x30
 8014126:	4b0d      	ldr	r3, [pc, #52]	@ (801415c <std+0x68>)
 8014128:	6224      	str	r4, [r4, #32]
 801412a:	429c      	cmp	r4, r3
 801412c:	d006      	beq.n	801413c <std+0x48>
 801412e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014132:	4294      	cmp	r4, r2
 8014134:	d002      	beq.n	801413c <std+0x48>
 8014136:	33d0      	adds	r3, #208	@ 0xd0
 8014138:	429c      	cmp	r4, r3
 801413a:	d105      	bne.n	8014148 <std+0x54>
 801413c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014144:	f000 bac0 	b.w	80146c8 <__retarget_lock_init_recursive>
 8014148:	bd10      	pop	{r4, pc}
 801414a:	bf00      	nop
 801414c:	08014401 	.word	0x08014401
 8014150:	08014423 	.word	0x08014423
 8014154:	0801445b 	.word	0x0801445b
 8014158:	0801447f 	.word	0x0801447f
 801415c:	20004b04 	.word	0x20004b04

08014160 <stdio_exit_handler>:
 8014160:	4a02      	ldr	r2, [pc, #8]	@ (801416c <stdio_exit_handler+0xc>)
 8014162:	4903      	ldr	r1, [pc, #12]	@ (8014170 <stdio_exit_handler+0x10>)
 8014164:	4803      	ldr	r0, [pc, #12]	@ (8014174 <stdio_exit_handler+0x14>)
 8014166:	f000 b869 	b.w	801423c <_fwalk_sglue>
 801416a:	bf00      	nop
 801416c:	200001e0 	.word	0x200001e0
 8014170:	080170b9 	.word	0x080170b9
 8014174:	200001f0 	.word	0x200001f0

08014178 <cleanup_stdio>:
 8014178:	6841      	ldr	r1, [r0, #4]
 801417a:	4b0c      	ldr	r3, [pc, #48]	@ (80141ac <cleanup_stdio+0x34>)
 801417c:	4299      	cmp	r1, r3
 801417e:	b510      	push	{r4, lr}
 8014180:	4604      	mov	r4, r0
 8014182:	d001      	beq.n	8014188 <cleanup_stdio+0x10>
 8014184:	f002 ff98 	bl	80170b8 <_fflush_r>
 8014188:	68a1      	ldr	r1, [r4, #8]
 801418a:	4b09      	ldr	r3, [pc, #36]	@ (80141b0 <cleanup_stdio+0x38>)
 801418c:	4299      	cmp	r1, r3
 801418e:	d002      	beq.n	8014196 <cleanup_stdio+0x1e>
 8014190:	4620      	mov	r0, r4
 8014192:	f002 ff91 	bl	80170b8 <_fflush_r>
 8014196:	68e1      	ldr	r1, [r4, #12]
 8014198:	4b06      	ldr	r3, [pc, #24]	@ (80141b4 <cleanup_stdio+0x3c>)
 801419a:	4299      	cmp	r1, r3
 801419c:	d004      	beq.n	80141a8 <cleanup_stdio+0x30>
 801419e:	4620      	mov	r0, r4
 80141a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141a4:	f002 bf88 	b.w	80170b8 <_fflush_r>
 80141a8:	bd10      	pop	{r4, pc}
 80141aa:	bf00      	nop
 80141ac:	20004b04 	.word	0x20004b04
 80141b0:	20004b6c 	.word	0x20004b6c
 80141b4:	20004bd4 	.word	0x20004bd4

080141b8 <global_stdio_init.part.0>:
 80141b8:	b510      	push	{r4, lr}
 80141ba:	4b0b      	ldr	r3, [pc, #44]	@ (80141e8 <global_stdio_init.part.0+0x30>)
 80141bc:	4c0b      	ldr	r4, [pc, #44]	@ (80141ec <global_stdio_init.part.0+0x34>)
 80141be:	4a0c      	ldr	r2, [pc, #48]	@ (80141f0 <global_stdio_init.part.0+0x38>)
 80141c0:	601a      	str	r2, [r3, #0]
 80141c2:	4620      	mov	r0, r4
 80141c4:	2200      	movs	r2, #0
 80141c6:	2104      	movs	r1, #4
 80141c8:	f7ff ff94 	bl	80140f4 <std>
 80141cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80141d0:	2201      	movs	r2, #1
 80141d2:	2109      	movs	r1, #9
 80141d4:	f7ff ff8e 	bl	80140f4 <std>
 80141d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80141dc:	2202      	movs	r2, #2
 80141de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141e2:	2112      	movs	r1, #18
 80141e4:	f7ff bf86 	b.w	80140f4 <std>
 80141e8:	20004c3c 	.word	0x20004c3c
 80141ec:	20004b04 	.word	0x20004b04
 80141f0:	08014161 	.word	0x08014161

080141f4 <__sfp_lock_acquire>:
 80141f4:	4801      	ldr	r0, [pc, #4]	@ (80141fc <__sfp_lock_acquire+0x8>)
 80141f6:	f000 ba68 	b.w	80146ca <__retarget_lock_acquire_recursive>
 80141fa:	bf00      	nop
 80141fc:	20004c45 	.word	0x20004c45

08014200 <__sfp_lock_release>:
 8014200:	4801      	ldr	r0, [pc, #4]	@ (8014208 <__sfp_lock_release+0x8>)
 8014202:	f000 ba63 	b.w	80146cc <__retarget_lock_release_recursive>
 8014206:	bf00      	nop
 8014208:	20004c45 	.word	0x20004c45

0801420c <__sinit>:
 801420c:	b510      	push	{r4, lr}
 801420e:	4604      	mov	r4, r0
 8014210:	f7ff fff0 	bl	80141f4 <__sfp_lock_acquire>
 8014214:	6a23      	ldr	r3, [r4, #32]
 8014216:	b11b      	cbz	r3, 8014220 <__sinit+0x14>
 8014218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801421c:	f7ff bff0 	b.w	8014200 <__sfp_lock_release>
 8014220:	4b04      	ldr	r3, [pc, #16]	@ (8014234 <__sinit+0x28>)
 8014222:	6223      	str	r3, [r4, #32]
 8014224:	4b04      	ldr	r3, [pc, #16]	@ (8014238 <__sinit+0x2c>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d1f5      	bne.n	8014218 <__sinit+0xc>
 801422c:	f7ff ffc4 	bl	80141b8 <global_stdio_init.part.0>
 8014230:	e7f2      	b.n	8014218 <__sinit+0xc>
 8014232:	bf00      	nop
 8014234:	08014179 	.word	0x08014179
 8014238:	20004c3c 	.word	0x20004c3c

0801423c <_fwalk_sglue>:
 801423c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014240:	4607      	mov	r7, r0
 8014242:	4688      	mov	r8, r1
 8014244:	4614      	mov	r4, r2
 8014246:	2600      	movs	r6, #0
 8014248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801424c:	f1b9 0901 	subs.w	r9, r9, #1
 8014250:	d505      	bpl.n	801425e <_fwalk_sglue+0x22>
 8014252:	6824      	ldr	r4, [r4, #0]
 8014254:	2c00      	cmp	r4, #0
 8014256:	d1f7      	bne.n	8014248 <_fwalk_sglue+0xc>
 8014258:	4630      	mov	r0, r6
 801425a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801425e:	89ab      	ldrh	r3, [r5, #12]
 8014260:	2b01      	cmp	r3, #1
 8014262:	d907      	bls.n	8014274 <_fwalk_sglue+0x38>
 8014264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014268:	3301      	adds	r3, #1
 801426a:	d003      	beq.n	8014274 <_fwalk_sglue+0x38>
 801426c:	4629      	mov	r1, r5
 801426e:	4638      	mov	r0, r7
 8014270:	47c0      	blx	r8
 8014272:	4306      	orrs	r6, r0
 8014274:	3568      	adds	r5, #104	@ 0x68
 8014276:	e7e9      	b.n	801424c <_fwalk_sglue+0x10>

08014278 <iprintf>:
 8014278:	b40f      	push	{r0, r1, r2, r3}
 801427a:	b507      	push	{r0, r1, r2, lr}
 801427c:	4906      	ldr	r1, [pc, #24]	@ (8014298 <iprintf+0x20>)
 801427e:	ab04      	add	r3, sp, #16
 8014280:	6808      	ldr	r0, [r1, #0]
 8014282:	f853 2b04 	ldr.w	r2, [r3], #4
 8014286:	6881      	ldr	r1, [r0, #8]
 8014288:	9301      	str	r3, [sp, #4]
 801428a:	f002 fd79 	bl	8016d80 <_vfiprintf_r>
 801428e:	b003      	add	sp, #12
 8014290:	f85d eb04 	ldr.w	lr, [sp], #4
 8014294:	b004      	add	sp, #16
 8014296:	4770      	bx	lr
 8014298:	200001ec 	.word	0x200001ec

0801429c <_puts_r>:
 801429c:	6a03      	ldr	r3, [r0, #32]
 801429e:	b570      	push	{r4, r5, r6, lr}
 80142a0:	6884      	ldr	r4, [r0, #8]
 80142a2:	4605      	mov	r5, r0
 80142a4:	460e      	mov	r6, r1
 80142a6:	b90b      	cbnz	r3, 80142ac <_puts_r+0x10>
 80142a8:	f7ff ffb0 	bl	801420c <__sinit>
 80142ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80142ae:	07db      	lsls	r3, r3, #31
 80142b0:	d405      	bmi.n	80142be <_puts_r+0x22>
 80142b2:	89a3      	ldrh	r3, [r4, #12]
 80142b4:	0598      	lsls	r0, r3, #22
 80142b6:	d402      	bmi.n	80142be <_puts_r+0x22>
 80142b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80142ba:	f000 fa06 	bl	80146ca <__retarget_lock_acquire_recursive>
 80142be:	89a3      	ldrh	r3, [r4, #12]
 80142c0:	0719      	lsls	r1, r3, #28
 80142c2:	d502      	bpl.n	80142ca <_puts_r+0x2e>
 80142c4:	6923      	ldr	r3, [r4, #16]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d135      	bne.n	8014336 <_puts_r+0x9a>
 80142ca:	4621      	mov	r1, r4
 80142cc:	4628      	mov	r0, r5
 80142ce:	f000 f919 	bl	8014504 <__swsetup_r>
 80142d2:	b380      	cbz	r0, 8014336 <_puts_r+0x9a>
 80142d4:	f04f 35ff 	mov.w	r5, #4294967295
 80142d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80142da:	07da      	lsls	r2, r3, #31
 80142dc:	d405      	bmi.n	80142ea <_puts_r+0x4e>
 80142de:	89a3      	ldrh	r3, [r4, #12]
 80142e0:	059b      	lsls	r3, r3, #22
 80142e2:	d402      	bmi.n	80142ea <_puts_r+0x4e>
 80142e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80142e6:	f000 f9f1 	bl	80146cc <__retarget_lock_release_recursive>
 80142ea:	4628      	mov	r0, r5
 80142ec:	bd70      	pop	{r4, r5, r6, pc}
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	da04      	bge.n	80142fc <_puts_r+0x60>
 80142f2:	69a2      	ldr	r2, [r4, #24]
 80142f4:	429a      	cmp	r2, r3
 80142f6:	dc17      	bgt.n	8014328 <_puts_r+0x8c>
 80142f8:	290a      	cmp	r1, #10
 80142fa:	d015      	beq.n	8014328 <_puts_r+0x8c>
 80142fc:	6823      	ldr	r3, [r4, #0]
 80142fe:	1c5a      	adds	r2, r3, #1
 8014300:	6022      	str	r2, [r4, #0]
 8014302:	7019      	strb	r1, [r3, #0]
 8014304:	68a3      	ldr	r3, [r4, #8]
 8014306:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801430a:	3b01      	subs	r3, #1
 801430c:	60a3      	str	r3, [r4, #8]
 801430e:	2900      	cmp	r1, #0
 8014310:	d1ed      	bne.n	80142ee <_puts_r+0x52>
 8014312:	2b00      	cmp	r3, #0
 8014314:	da11      	bge.n	801433a <_puts_r+0x9e>
 8014316:	4622      	mov	r2, r4
 8014318:	210a      	movs	r1, #10
 801431a:	4628      	mov	r0, r5
 801431c:	f000 f8b3 	bl	8014486 <__swbuf_r>
 8014320:	3001      	adds	r0, #1
 8014322:	d0d7      	beq.n	80142d4 <_puts_r+0x38>
 8014324:	250a      	movs	r5, #10
 8014326:	e7d7      	b.n	80142d8 <_puts_r+0x3c>
 8014328:	4622      	mov	r2, r4
 801432a:	4628      	mov	r0, r5
 801432c:	f000 f8ab 	bl	8014486 <__swbuf_r>
 8014330:	3001      	adds	r0, #1
 8014332:	d1e7      	bne.n	8014304 <_puts_r+0x68>
 8014334:	e7ce      	b.n	80142d4 <_puts_r+0x38>
 8014336:	3e01      	subs	r6, #1
 8014338:	e7e4      	b.n	8014304 <_puts_r+0x68>
 801433a:	6823      	ldr	r3, [r4, #0]
 801433c:	1c5a      	adds	r2, r3, #1
 801433e:	6022      	str	r2, [r4, #0]
 8014340:	220a      	movs	r2, #10
 8014342:	701a      	strb	r2, [r3, #0]
 8014344:	e7ee      	b.n	8014324 <_puts_r+0x88>
	...

08014348 <puts>:
 8014348:	4b02      	ldr	r3, [pc, #8]	@ (8014354 <puts+0xc>)
 801434a:	4601      	mov	r1, r0
 801434c:	6818      	ldr	r0, [r3, #0]
 801434e:	f7ff bfa5 	b.w	801429c <_puts_r>
 8014352:	bf00      	nop
 8014354:	200001ec 	.word	0x200001ec

08014358 <sniprintf>:
 8014358:	b40c      	push	{r2, r3}
 801435a:	b530      	push	{r4, r5, lr}
 801435c:	4b17      	ldr	r3, [pc, #92]	@ (80143bc <sniprintf+0x64>)
 801435e:	1e0c      	subs	r4, r1, #0
 8014360:	681d      	ldr	r5, [r3, #0]
 8014362:	b09d      	sub	sp, #116	@ 0x74
 8014364:	da08      	bge.n	8014378 <sniprintf+0x20>
 8014366:	238b      	movs	r3, #139	@ 0x8b
 8014368:	602b      	str	r3, [r5, #0]
 801436a:	f04f 30ff 	mov.w	r0, #4294967295
 801436e:	b01d      	add	sp, #116	@ 0x74
 8014370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014374:	b002      	add	sp, #8
 8014376:	4770      	bx	lr
 8014378:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801437c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014380:	bf14      	ite	ne
 8014382:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014386:	4623      	moveq	r3, r4
 8014388:	9304      	str	r3, [sp, #16]
 801438a:	9307      	str	r3, [sp, #28]
 801438c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014390:	9002      	str	r0, [sp, #8]
 8014392:	9006      	str	r0, [sp, #24]
 8014394:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014398:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801439a:	ab21      	add	r3, sp, #132	@ 0x84
 801439c:	a902      	add	r1, sp, #8
 801439e:	4628      	mov	r0, r5
 80143a0:	9301      	str	r3, [sp, #4]
 80143a2:	f002 fbc7 	bl	8016b34 <_svfiprintf_r>
 80143a6:	1c43      	adds	r3, r0, #1
 80143a8:	bfbc      	itt	lt
 80143aa:	238b      	movlt	r3, #139	@ 0x8b
 80143ac:	602b      	strlt	r3, [r5, #0]
 80143ae:	2c00      	cmp	r4, #0
 80143b0:	d0dd      	beq.n	801436e <sniprintf+0x16>
 80143b2:	9b02      	ldr	r3, [sp, #8]
 80143b4:	2200      	movs	r2, #0
 80143b6:	701a      	strb	r2, [r3, #0]
 80143b8:	e7d9      	b.n	801436e <sniprintf+0x16>
 80143ba:	bf00      	nop
 80143bc:	200001ec 	.word	0x200001ec

080143c0 <siprintf>:
 80143c0:	b40e      	push	{r1, r2, r3}
 80143c2:	b500      	push	{lr}
 80143c4:	b09c      	sub	sp, #112	@ 0x70
 80143c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80143c8:	9002      	str	r0, [sp, #8]
 80143ca:	9006      	str	r0, [sp, #24]
 80143cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80143d0:	4809      	ldr	r0, [pc, #36]	@ (80143f8 <siprintf+0x38>)
 80143d2:	9107      	str	r1, [sp, #28]
 80143d4:	9104      	str	r1, [sp, #16]
 80143d6:	4909      	ldr	r1, [pc, #36]	@ (80143fc <siprintf+0x3c>)
 80143d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80143dc:	9105      	str	r1, [sp, #20]
 80143de:	6800      	ldr	r0, [r0, #0]
 80143e0:	9301      	str	r3, [sp, #4]
 80143e2:	a902      	add	r1, sp, #8
 80143e4:	f002 fba6 	bl	8016b34 <_svfiprintf_r>
 80143e8:	9b02      	ldr	r3, [sp, #8]
 80143ea:	2200      	movs	r2, #0
 80143ec:	701a      	strb	r2, [r3, #0]
 80143ee:	b01c      	add	sp, #112	@ 0x70
 80143f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80143f4:	b003      	add	sp, #12
 80143f6:	4770      	bx	lr
 80143f8:	200001ec 	.word	0x200001ec
 80143fc:	ffff0208 	.word	0xffff0208

08014400 <__sread>:
 8014400:	b510      	push	{r4, lr}
 8014402:	460c      	mov	r4, r1
 8014404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014408:	f000 f900 	bl	801460c <_read_r>
 801440c:	2800      	cmp	r0, #0
 801440e:	bfab      	itete	ge
 8014410:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014412:	89a3      	ldrhlt	r3, [r4, #12]
 8014414:	181b      	addge	r3, r3, r0
 8014416:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801441a:	bfac      	ite	ge
 801441c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801441e:	81a3      	strhlt	r3, [r4, #12]
 8014420:	bd10      	pop	{r4, pc}

08014422 <__swrite>:
 8014422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014426:	461f      	mov	r7, r3
 8014428:	898b      	ldrh	r3, [r1, #12]
 801442a:	05db      	lsls	r3, r3, #23
 801442c:	4605      	mov	r5, r0
 801442e:	460c      	mov	r4, r1
 8014430:	4616      	mov	r6, r2
 8014432:	d505      	bpl.n	8014440 <__swrite+0x1e>
 8014434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014438:	2302      	movs	r3, #2
 801443a:	2200      	movs	r2, #0
 801443c:	f000 f8d4 	bl	80145e8 <_lseek_r>
 8014440:	89a3      	ldrh	r3, [r4, #12]
 8014442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014446:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801444a:	81a3      	strh	r3, [r4, #12]
 801444c:	4632      	mov	r2, r6
 801444e:	463b      	mov	r3, r7
 8014450:	4628      	mov	r0, r5
 8014452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014456:	f000 b8fb 	b.w	8014650 <_write_r>

0801445a <__sseek>:
 801445a:	b510      	push	{r4, lr}
 801445c:	460c      	mov	r4, r1
 801445e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014462:	f000 f8c1 	bl	80145e8 <_lseek_r>
 8014466:	1c43      	adds	r3, r0, #1
 8014468:	89a3      	ldrh	r3, [r4, #12]
 801446a:	bf15      	itete	ne
 801446c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801446e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014472:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014476:	81a3      	strheq	r3, [r4, #12]
 8014478:	bf18      	it	ne
 801447a:	81a3      	strhne	r3, [r4, #12]
 801447c:	bd10      	pop	{r4, pc}

0801447e <__sclose>:
 801447e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014482:	f000 b8a1 	b.w	80145c8 <_close_r>

08014486 <__swbuf_r>:
 8014486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014488:	460e      	mov	r6, r1
 801448a:	4614      	mov	r4, r2
 801448c:	4605      	mov	r5, r0
 801448e:	b118      	cbz	r0, 8014498 <__swbuf_r+0x12>
 8014490:	6a03      	ldr	r3, [r0, #32]
 8014492:	b90b      	cbnz	r3, 8014498 <__swbuf_r+0x12>
 8014494:	f7ff feba 	bl	801420c <__sinit>
 8014498:	69a3      	ldr	r3, [r4, #24]
 801449a:	60a3      	str	r3, [r4, #8]
 801449c:	89a3      	ldrh	r3, [r4, #12]
 801449e:	071a      	lsls	r2, r3, #28
 80144a0:	d501      	bpl.n	80144a6 <__swbuf_r+0x20>
 80144a2:	6923      	ldr	r3, [r4, #16]
 80144a4:	b943      	cbnz	r3, 80144b8 <__swbuf_r+0x32>
 80144a6:	4621      	mov	r1, r4
 80144a8:	4628      	mov	r0, r5
 80144aa:	f000 f82b 	bl	8014504 <__swsetup_r>
 80144ae:	b118      	cbz	r0, 80144b8 <__swbuf_r+0x32>
 80144b0:	f04f 37ff 	mov.w	r7, #4294967295
 80144b4:	4638      	mov	r0, r7
 80144b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144b8:	6823      	ldr	r3, [r4, #0]
 80144ba:	6922      	ldr	r2, [r4, #16]
 80144bc:	1a98      	subs	r0, r3, r2
 80144be:	6963      	ldr	r3, [r4, #20]
 80144c0:	b2f6      	uxtb	r6, r6
 80144c2:	4283      	cmp	r3, r0
 80144c4:	4637      	mov	r7, r6
 80144c6:	dc05      	bgt.n	80144d4 <__swbuf_r+0x4e>
 80144c8:	4621      	mov	r1, r4
 80144ca:	4628      	mov	r0, r5
 80144cc:	f002 fdf4 	bl	80170b8 <_fflush_r>
 80144d0:	2800      	cmp	r0, #0
 80144d2:	d1ed      	bne.n	80144b0 <__swbuf_r+0x2a>
 80144d4:	68a3      	ldr	r3, [r4, #8]
 80144d6:	3b01      	subs	r3, #1
 80144d8:	60a3      	str	r3, [r4, #8]
 80144da:	6823      	ldr	r3, [r4, #0]
 80144dc:	1c5a      	adds	r2, r3, #1
 80144de:	6022      	str	r2, [r4, #0]
 80144e0:	701e      	strb	r6, [r3, #0]
 80144e2:	6962      	ldr	r2, [r4, #20]
 80144e4:	1c43      	adds	r3, r0, #1
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d004      	beq.n	80144f4 <__swbuf_r+0x6e>
 80144ea:	89a3      	ldrh	r3, [r4, #12]
 80144ec:	07db      	lsls	r3, r3, #31
 80144ee:	d5e1      	bpl.n	80144b4 <__swbuf_r+0x2e>
 80144f0:	2e0a      	cmp	r6, #10
 80144f2:	d1df      	bne.n	80144b4 <__swbuf_r+0x2e>
 80144f4:	4621      	mov	r1, r4
 80144f6:	4628      	mov	r0, r5
 80144f8:	f002 fdde 	bl	80170b8 <_fflush_r>
 80144fc:	2800      	cmp	r0, #0
 80144fe:	d0d9      	beq.n	80144b4 <__swbuf_r+0x2e>
 8014500:	e7d6      	b.n	80144b0 <__swbuf_r+0x2a>
	...

08014504 <__swsetup_r>:
 8014504:	b538      	push	{r3, r4, r5, lr}
 8014506:	4b29      	ldr	r3, [pc, #164]	@ (80145ac <__swsetup_r+0xa8>)
 8014508:	4605      	mov	r5, r0
 801450a:	6818      	ldr	r0, [r3, #0]
 801450c:	460c      	mov	r4, r1
 801450e:	b118      	cbz	r0, 8014518 <__swsetup_r+0x14>
 8014510:	6a03      	ldr	r3, [r0, #32]
 8014512:	b90b      	cbnz	r3, 8014518 <__swsetup_r+0x14>
 8014514:	f7ff fe7a 	bl	801420c <__sinit>
 8014518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801451c:	0719      	lsls	r1, r3, #28
 801451e:	d422      	bmi.n	8014566 <__swsetup_r+0x62>
 8014520:	06da      	lsls	r2, r3, #27
 8014522:	d407      	bmi.n	8014534 <__swsetup_r+0x30>
 8014524:	2209      	movs	r2, #9
 8014526:	602a      	str	r2, [r5, #0]
 8014528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801452c:	81a3      	strh	r3, [r4, #12]
 801452e:	f04f 30ff 	mov.w	r0, #4294967295
 8014532:	e033      	b.n	801459c <__swsetup_r+0x98>
 8014534:	0758      	lsls	r0, r3, #29
 8014536:	d512      	bpl.n	801455e <__swsetup_r+0x5a>
 8014538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801453a:	b141      	cbz	r1, 801454e <__swsetup_r+0x4a>
 801453c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014540:	4299      	cmp	r1, r3
 8014542:	d002      	beq.n	801454a <__swsetup_r+0x46>
 8014544:	4628      	mov	r0, r5
 8014546:	f000 ff17 	bl	8015378 <_free_r>
 801454a:	2300      	movs	r3, #0
 801454c:	6363      	str	r3, [r4, #52]	@ 0x34
 801454e:	89a3      	ldrh	r3, [r4, #12]
 8014550:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014554:	81a3      	strh	r3, [r4, #12]
 8014556:	2300      	movs	r3, #0
 8014558:	6063      	str	r3, [r4, #4]
 801455a:	6923      	ldr	r3, [r4, #16]
 801455c:	6023      	str	r3, [r4, #0]
 801455e:	89a3      	ldrh	r3, [r4, #12]
 8014560:	f043 0308 	orr.w	r3, r3, #8
 8014564:	81a3      	strh	r3, [r4, #12]
 8014566:	6923      	ldr	r3, [r4, #16]
 8014568:	b94b      	cbnz	r3, 801457e <__swsetup_r+0x7a>
 801456a:	89a3      	ldrh	r3, [r4, #12]
 801456c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014574:	d003      	beq.n	801457e <__swsetup_r+0x7a>
 8014576:	4621      	mov	r1, r4
 8014578:	4628      	mov	r0, r5
 801457a:	f002 fdeb 	bl	8017154 <__smakebuf_r>
 801457e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014582:	f013 0201 	ands.w	r2, r3, #1
 8014586:	d00a      	beq.n	801459e <__swsetup_r+0x9a>
 8014588:	2200      	movs	r2, #0
 801458a:	60a2      	str	r2, [r4, #8]
 801458c:	6962      	ldr	r2, [r4, #20]
 801458e:	4252      	negs	r2, r2
 8014590:	61a2      	str	r2, [r4, #24]
 8014592:	6922      	ldr	r2, [r4, #16]
 8014594:	b942      	cbnz	r2, 80145a8 <__swsetup_r+0xa4>
 8014596:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801459a:	d1c5      	bne.n	8014528 <__swsetup_r+0x24>
 801459c:	bd38      	pop	{r3, r4, r5, pc}
 801459e:	0799      	lsls	r1, r3, #30
 80145a0:	bf58      	it	pl
 80145a2:	6962      	ldrpl	r2, [r4, #20]
 80145a4:	60a2      	str	r2, [r4, #8]
 80145a6:	e7f4      	b.n	8014592 <__swsetup_r+0x8e>
 80145a8:	2000      	movs	r0, #0
 80145aa:	e7f7      	b.n	801459c <__swsetup_r+0x98>
 80145ac:	200001ec 	.word	0x200001ec

080145b0 <memset>:
 80145b0:	4402      	add	r2, r0
 80145b2:	4603      	mov	r3, r0
 80145b4:	4293      	cmp	r3, r2
 80145b6:	d100      	bne.n	80145ba <memset+0xa>
 80145b8:	4770      	bx	lr
 80145ba:	f803 1b01 	strb.w	r1, [r3], #1
 80145be:	e7f9      	b.n	80145b4 <memset+0x4>

080145c0 <_localeconv_r>:
 80145c0:	4800      	ldr	r0, [pc, #0]	@ (80145c4 <_localeconv_r+0x4>)
 80145c2:	4770      	bx	lr
 80145c4:	2000032c 	.word	0x2000032c

080145c8 <_close_r>:
 80145c8:	b538      	push	{r3, r4, r5, lr}
 80145ca:	4d06      	ldr	r5, [pc, #24]	@ (80145e4 <_close_r+0x1c>)
 80145cc:	2300      	movs	r3, #0
 80145ce:	4604      	mov	r4, r0
 80145d0:	4608      	mov	r0, r1
 80145d2:	602b      	str	r3, [r5, #0]
 80145d4:	f7ed fe68 	bl	80022a8 <_close>
 80145d8:	1c43      	adds	r3, r0, #1
 80145da:	d102      	bne.n	80145e2 <_close_r+0x1a>
 80145dc:	682b      	ldr	r3, [r5, #0]
 80145de:	b103      	cbz	r3, 80145e2 <_close_r+0x1a>
 80145e0:	6023      	str	r3, [r4, #0]
 80145e2:	bd38      	pop	{r3, r4, r5, pc}
 80145e4:	20004c40 	.word	0x20004c40

080145e8 <_lseek_r>:
 80145e8:	b538      	push	{r3, r4, r5, lr}
 80145ea:	4d07      	ldr	r5, [pc, #28]	@ (8014608 <_lseek_r+0x20>)
 80145ec:	4604      	mov	r4, r0
 80145ee:	4608      	mov	r0, r1
 80145f0:	4611      	mov	r1, r2
 80145f2:	2200      	movs	r2, #0
 80145f4:	602a      	str	r2, [r5, #0]
 80145f6:	461a      	mov	r2, r3
 80145f8:	f7ed fe7d 	bl	80022f6 <_lseek>
 80145fc:	1c43      	adds	r3, r0, #1
 80145fe:	d102      	bne.n	8014606 <_lseek_r+0x1e>
 8014600:	682b      	ldr	r3, [r5, #0]
 8014602:	b103      	cbz	r3, 8014606 <_lseek_r+0x1e>
 8014604:	6023      	str	r3, [r4, #0]
 8014606:	bd38      	pop	{r3, r4, r5, pc}
 8014608:	20004c40 	.word	0x20004c40

0801460c <_read_r>:
 801460c:	b538      	push	{r3, r4, r5, lr}
 801460e:	4d07      	ldr	r5, [pc, #28]	@ (801462c <_read_r+0x20>)
 8014610:	4604      	mov	r4, r0
 8014612:	4608      	mov	r0, r1
 8014614:	4611      	mov	r1, r2
 8014616:	2200      	movs	r2, #0
 8014618:	602a      	str	r2, [r5, #0]
 801461a:	461a      	mov	r2, r3
 801461c:	f7ed fe27 	bl	800226e <_read>
 8014620:	1c43      	adds	r3, r0, #1
 8014622:	d102      	bne.n	801462a <_read_r+0x1e>
 8014624:	682b      	ldr	r3, [r5, #0]
 8014626:	b103      	cbz	r3, 801462a <_read_r+0x1e>
 8014628:	6023      	str	r3, [r4, #0]
 801462a:	bd38      	pop	{r3, r4, r5, pc}
 801462c:	20004c40 	.word	0x20004c40

08014630 <_sbrk_r>:
 8014630:	b538      	push	{r3, r4, r5, lr}
 8014632:	4d06      	ldr	r5, [pc, #24]	@ (801464c <_sbrk_r+0x1c>)
 8014634:	2300      	movs	r3, #0
 8014636:	4604      	mov	r4, r0
 8014638:	4608      	mov	r0, r1
 801463a:	602b      	str	r3, [r5, #0]
 801463c:	f7ed fe68 	bl	8002310 <_sbrk>
 8014640:	1c43      	adds	r3, r0, #1
 8014642:	d102      	bne.n	801464a <_sbrk_r+0x1a>
 8014644:	682b      	ldr	r3, [r5, #0]
 8014646:	b103      	cbz	r3, 801464a <_sbrk_r+0x1a>
 8014648:	6023      	str	r3, [r4, #0]
 801464a:	bd38      	pop	{r3, r4, r5, pc}
 801464c:	20004c40 	.word	0x20004c40

08014650 <_write_r>:
 8014650:	b538      	push	{r3, r4, r5, lr}
 8014652:	4d07      	ldr	r5, [pc, #28]	@ (8014670 <_write_r+0x20>)
 8014654:	4604      	mov	r4, r0
 8014656:	4608      	mov	r0, r1
 8014658:	4611      	mov	r1, r2
 801465a:	2200      	movs	r2, #0
 801465c:	602a      	str	r2, [r5, #0]
 801465e:	461a      	mov	r2, r3
 8014660:	f7ef fd7a 	bl	8004158 <_write>
 8014664:	1c43      	adds	r3, r0, #1
 8014666:	d102      	bne.n	801466e <_write_r+0x1e>
 8014668:	682b      	ldr	r3, [r5, #0]
 801466a:	b103      	cbz	r3, 801466e <_write_r+0x1e>
 801466c:	6023      	str	r3, [r4, #0]
 801466e:	bd38      	pop	{r3, r4, r5, pc}
 8014670:	20004c40 	.word	0x20004c40

08014674 <__errno>:
 8014674:	4b01      	ldr	r3, [pc, #4]	@ (801467c <__errno+0x8>)
 8014676:	6818      	ldr	r0, [r3, #0]
 8014678:	4770      	bx	lr
 801467a:	bf00      	nop
 801467c:	200001ec 	.word	0x200001ec

08014680 <__libc_init_array>:
 8014680:	b570      	push	{r4, r5, r6, lr}
 8014682:	4d0d      	ldr	r5, [pc, #52]	@ (80146b8 <__libc_init_array+0x38>)
 8014684:	4c0d      	ldr	r4, [pc, #52]	@ (80146bc <__libc_init_array+0x3c>)
 8014686:	1b64      	subs	r4, r4, r5
 8014688:	10a4      	asrs	r4, r4, #2
 801468a:	2600      	movs	r6, #0
 801468c:	42a6      	cmp	r6, r4
 801468e:	d109      	bne.n	80146a4 <__libc_init_array+0x24>
 8014690:	4d0b      	ldr	r5, [pc, #44]	@ (80146c0 <__libc_init_array+0x40>)
 8014692:	4c0c      	ldr	r4, [pc, #48]	@ (80146c4 <__libc_init_array+0x44>)
 8014694:	f003 fb16 	bl	8017cc4 <_init>
 8014698:	1b64      	subs	r4, r4, r5
 801469a:	10a4      	asrs	r4, r4, #2
 801469c:	2600      	movs	r6, #0
 801469e:	42a6      	cmp	r6, r4
 80146a0:	d105      	bne.n	80146ae <__libc_init_array+0x2e>
 80146a2:	bd70      	pop	{r4, r5, r6, pc}
 80146a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80146a8:	4798      	blx	r3
 80146aa:	3601      	adds	r6, #1
 80146ac:	e7ee      	b.n	801468c <__libc_init_array+0xc>
 80146ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80146b2:	4798      	blx	r3
 80146b4:	3601      	adds	r6, #1
 80146b6:	e7f2      	b.n	801469e <__libc_init_array+0x1e>
 80146b8:	08019338 	.word	0x08019338
 80146bc:	08019338 	.word	0x08019338
 80146c0:	08019338 	.word	0x08019338
 80146c4:	0801933c 	.word	0x0801933c

080146c8 <__retarget_lock_init_recursive>:
 80146c8:	4770      	bx	lr

080146ca <__retarget_lock_acquire_recursive>:
 80146ca:	4770      	bx	lr

080146cc <__retarget_lock_release_recursive>:
 80146cc:	4770      	bx	lr
	...

080146d0 <nanf>:
 80146d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80146d8 <nanf+0x8>
 80146d4:	4770      	bx	lr
 80146d6:	bf00      	nop
 80146d8:	7fc00000 	.word	0x7fc00000

080146dc <quorem>:
 80146dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146e0:	6903      	ldr	r3, [r0, #16]
 80146e2:	690c      	ldr	r4, [r1, #16]
 80146e4:	42a3      	cmp	r3, r4
 80146e6:	4607      	mov	r7, r0
 80146e8:	db7e      	blt.n	80147e8 <quorem+0x10c>
 80146ea:	3c01      	subs	r4, #1
 80146ec:	f101 0814 	add.w	r8, r1, #20
 80146f0:	00a3      	lsls	r3, r4, #2
 80146f2:	f100 0514 	add.w	r5, r0, #20
 80146f6:	9300      	str	r3, [sp, #0]
 80146f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80146fc:	9301      	str	r3, [sp, #4]
 80146fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014706:	3301      	adds	r3, #1
 8014708:	429a      	cmp	r2, r3
 801470a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801470e:	fbb2 f6f3 	udiv	r6, r2, r3
 8014712:	d32e      	bcc.n	8014772 <quorem+0x96>
 8014714:	f04f 0a00 	mov.w	sl, #0
 8014718:	46c4      	mov	ip, r8
 801471a:	46ae      	mov	lr, r5
 801471c:	46d3      	mov	fp, sl
 801471e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014722:	b298      	uxth	r0, r3
 8014724:	fb06 a000 	mla	r0, r6, r0, sl
 8014728:	0c02      	lsrs	r2, r0, #16
 801472a:	0c1b      	lsrs	r3, r3, #16
 801472c:	fb06 2303 	mla	r3, r6, r3, r2
 8014730:	f8de 2000 	ldr.w	r2, [lr]
 8014734:	b280      	uxth	r0, r0
 8014736:	b292      	uxth	r2, r2
 8014738:	1a12      	subs	r2, r2, r0
 801473a:	445a      	add	r2, fp
 801473c:	f8de 0000 	ldr.w	r0, [lr]
 8014740:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014744:	b29b      	uxth	r3, r3
 8014746:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801474a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801474e:	b292      	uxth	r2, r2
 8014750:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014754:	45e1      	cmp	r9, ip
 8014756:	f84e 2b04 	str.w	r2, [lr], #4
 801475a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801475e:	d2de      	bcs.n	801471e <quorem+0x42>
 8014760:	9b00      	ldr	r3, [sp, #0]
 8014762:	58eb      	ldr	r3, [r5, r3]
 8014764:	b92b      	cbnz	r3, 8014772 <quorem+0x96>
 8014766:	9b01      	ldr	r3, [sp, #4]
 8014768:	3b04      	subs	r3, #4
 801476a:	429d      	cmp	r5, r3
 801476c:	461a      	mov	r2, r3
 801476e:	d32f      	bcc.n	80147d0 <quorem+0xf4>
 8014770:	613c      	str	r4, [r7, #16]
 8014772:	4638      	mov	r0, r7
 8014774:	f001 f90e 	bl	8015994 <__mcmp>
 8014778:	2800      	cmp	r0, #0
 801477a:	db25      	blt.n	80147c8 <quorem+0xec>
 801477c:	4629      	mov	r1, r5
 801477e:	2000      	movs	r0, #0
 8014780:	f858 2b04 	ldr.w	r2, [r8], #4
 8014784:	f8d1 c000 	ldr.w	ip, [r1]
 8014788:	fa1f fe82 	uxth.w	lr, r2
 801478c:	fa1f f38c 	uxth.w	r3, ip
 8014790:	eba3 030e 	sub.w	r3, r3, lr
 8014794:	4403      	add	r3, r0
 8014796:	0c12      	lsrs	r2, r2, #16
 8014798:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801479c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80147a0:	b29b      	uxth	r3, r3
 80147a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147a6:	45c1      	cmp	r9, r8
 80147a8:	f841 3b04 	str.w	r3, [r1], #4
 80147ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80147b0:	d2e6      	bcs.n	8014780 <quorem+0xa4>
 80147b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80147b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80147ba:	b922      	cbnz	r2, 80147c6 <quorem+0xea>
 80147bc:	3b04      	subs	r3, #4
 80147be:	429d      	cmp	r5, r3
 80147c0:	461a      	mov	r2, r3
 80147c2:	d30b      	bcc.n	80147dc <quorem+0x100>
 80147c4:	613c      	str	r4, [r7, #16]
 80147c6:	3601      	adds	r6, #1
 80147c8:	4630      	mov	r0, r6
 80147ca:	b003      	add	sp, #12
 80147cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147d0:	6812      	ldr	r2, [r2, #0]
 80147d2:	3b04      	subs	r3, #4
 80147d4:	2a00      	cmp	r2, #0
 80147d6:	d1cb      	bne.n	8014770 <quorem+0x94>
 80147d8:	3c01      	subs	r4, #1
 80147da:	e7c6      	b.n	801476a <quorem+0x8e>
 80147dc:	6812      	ldr	r2, [r2, #0]
 80147de:	3b04      	subs	r3, #4
 80147e0:	2a00      	cmp	r2, #0
 80147e2:	d1ef      	bne.n	80147c4 <quorem+0xe8>
 80147e4:	3c01      	subs	r4, #1
 80147e6:	e7ea      	b.n	80147be <quorem+0xe2>
 80147e8:	2000      	movs	r0, #0
 80147ea:	e7ee      	b.n	80147ca <quorem+0xee>
 80147ec:	0000      	movs	r0, r0
	...

080147f0 <_dtoa_r>:
 80147f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f4:	69c7      	ldr	r7, [r0, #28]
 80147f6:	b099      	sub	sp, #100	@ 0x64
 80147f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80147fc:	ec55 4b10 	vmov	r4, r5, d0
 8014800:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014802:	9109      	str	r1, [sp, #36]	@ 0x24
 8014804:	4683      	mov	fp, r0
 8014806:	920e      	str	r2, [sp, #56]	@ 0x38
 8014808:	9313      	str	r3, [sp, #76]	@ 0x4c
 801480a:	b97f      	cbnz	r7, 801482c <_dtoa_r+0x3c>
 801480c:	2010      	movs	r0, #16
 801480e:	f7fe fd47 	bl	80132a0 <malloc>
 8014812:	4602      	mov	r2, r0
 8014814:	f8cb 001c 	str.w	r0, [fp, #28]
 8014818:	b920      	cbnz	r0, 8014824 <_dtoa_r+0x34>
 801481a:	4ba7      	ldr	r3, [pc, #668]	@ (8014ab8 <_dtoa_r+0x2c8>)
 801481c:	21ef      	movs	r1, #239	@ 0xef
 801481e:	48a7      	ldr	r0, [pc, #668]	@ (8014abc <_dtoa_r+0x2cc>)
 8014820:	f002 fd3a 	bl	8017298 <__assert_func>
 8014824:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014828:	6007      	str	r7, [r0, #0]
 801482a:	60c7      	str	r7, [r0, #12]
 801482c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014830:	6819      	ldr	r1, [r3, #0]
 8014832:	b159      	cbz	r1, 801484c <_dtoa_r+0x5c>
 8014834:	685a      	ldr	r2, [r3, #4]
 8014836:	604a      	str	r2, [r1, #4]
 8014838:	2301      	movs	r3, #1
 801483a:	4093      	lsls	r3, r2
 801483c:	608b      	str	r3, [r1, #8]
 801483e:	4658      	mov	r0, fp
 8014840:	f000 fe24 	bl	801548c <_Bfree>
 8014844:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014848:	2200      	movs	r2, #0
 801484a:	601a      	str	r2, [r3, #0]
 801484c:	1e2b      	subs	r3, r5, #0
 801484e:	bfb9      	ittee	lt
 8014850:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014854:	9303      	strlt	r3, [sp, #12]
 8014856:	2300      	movge	r3, #0
 8014858:	6033      	strge	r3, [r6, #0]
 801485a:	9f03      	ldr	r7, [sp, #12]
 801485c:	4b98      	ldr	r3, [pc, #608]	@ (8014ac0 <_dtoa_r+0x2d0>)
 801485e:	bfbc      	itt	lt
 8014860:	2201      	movlt	r2, #1
 8014862:	6032      	strlt	r2, [r6, #0]
 8014864:	43bb      	bics	r3, r7
 8014866:	d112      	bne.n	801488e <_dtoa_r+0x9e>
 8014868:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801486a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801486e:	6013      	str	r3, [r2, #0]
 8014870:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014874:	4323      	orrs	r3, r4
 8014876:	f000 854d 	beq.w	8015314 <_dtoa_r+0xb24>
 801487a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801487c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8014ad4 <_dtoa_r+0x2e4>
 8014880:	2b00      	cmp	r3, #0
 8014882:	f000 854f 	beq.w	8015324 <_dtoa_r+0xb34>
 8014886:	f10a 0303 	add.w	r3, sl, #3
 801488a:	f000 bd49 	b.w	8015320 <_dtoa_r+0xb30>
 801488e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014892:	2200      	movs	r2, #0
 8014894:	ec51 0b17 	vmov	r0, r1, d7
 8014898:	2300      	movs	r3, #0
 801489a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801489e:	f7ec f91b 	bl	8000ad8 <__aeabi_dcmpeq>
 80148a2:	4680      	mov	r8, r0
 80148a4:	b158      	cbz	r0, 80148be <_dtoa_r+0xce>
 80148a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80148a8:	2301      	movs	r3, #1
 80148aa:	6013      	str	r3, [r2, #0]
 80148ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80148ae:	b113      	cbz	r3, 80148b6 <_dtoa_r+0xc6>
 80148b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80148b2:	4b84      	ldr	r3, [pc, #528]	@ (8014ac4 <_dtoa_r+0x2d4>)
 80148b4:	6013      	str	r3, [r2, #0]
 80148b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014ad8 <_dtoa_r+0x2e8>
 80148ba:	f000 bd33 	b.w	8015324 <_dtoa_r+0xb34>
 80148be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80148c2:	aa16      	add	r2, sp, #88	@ 0x58
 80148c4:	a917      	add	r1, sp, #92	@ 0x5c
 80148c6:	4658      	mov	r0, fp
 80148c8:	f001 f984 	bl	8015bd4 <__d2b>
 80148cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80148d0:	4681      	mov	r9, r0
 80148d2:	2e00      	cmp	r6, #0
 80148d4:	d077      	beq.n	80149c6 <_dtoa_r+0x1d6>
 80148d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80148d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80148dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80148e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80148e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80148e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80148ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80148f0:	4619      	mov	r1, r3
 80148f2:	2200      	movs	r2, #0
 80148f4:	4b74      	ldr	r3, [pc, #464]	@ (8014ac8 <_dtoa_r+0x2d8>)
 80148f6:	f7eb fccf 	bl	8000298 <__aeabi_dsub>
 80148fa:	a369      	add	r3, pc, #420	@ (adr r3, 8014aa0 <_dtoa_r+0x2b0>)
 80148fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014900:	f7eb fe82 	bl	8000608 <__aeabi_dmul>
 8014904:	a368      	add	r3, pc, #416	@ (adr r3, 8014aa8 <_dtoa_r+0x2b8>)
 8014906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490a:	f7eb fcc7 	bl	800029c <__adddf3>
 801490e:	4604      	mov	r4, r0
 8014910:	4630      	mov	r0, r6
 8014912:	460d      	mov	r5, r1
 8014914:	f7eb fe0e 	bl	8000534 <__aeabi_i2d>
 8014918:	a365      	add	r3, pc, #404	@ (adr r3, 8014ab0 <_dtoa_r+0x2c0>)
 801491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801491e:	f7eb fe73 	bl	8000608 <__aeabi_dmul>
 8014922:	4602      	mov	r2, r0
 8014924:	460b      	mov	r3, r1
 8014926:	4620      	mov	r0, r4
 8014928:	4629      	mov	r1, r5
 801492a:	f7eb fcb7 	bl	800029c <__adddf3>
 801492e:	4604      	mov	r4, r0
 8014930:	460d      	mov	r5, r1
 8014932:	f7ec f919 	bl	8000b68 <__aeabi_d2iz>
 8014936:	2200      	movs	r2, #0
 8014938:	4607      	mov	r7, r0
 801493a:	2300      	movs	r3, #0
 801493c:	4620      	mov	r0, r4
 801493e:	4629      	mov	r1, r5
 8014940:	f7ec f8d4 	bl	8000aec <__aeabi_dcmplt>
 8014944:	b140      	cbz	r0, 8014958 <_dtoa_r+0x168>
 8014946:	4638      	mov	r0, r7
 8014948:	f7eb fdf4 	bl	8000534 <__aeabi_i2d>
 801494c:	4622      	mov	r2, r4
 801494e:	462b      	mov	r3, r5
 8014950:	f7ec f8c2 	bl	8000ad8 <__aeabi_dcmpeq>
 8014954:	b900      	cbnz	r0, 8014958 <_dtoa_r+0x168>
 8014956:	3f01      	subs	r7, #1
 8014958:	2f16      	cmp	r7, #22
 801495a:	d851      	bhi.n	8014a00 <_dtoa_r+0x210>
 801495c:	4b5b      	ldr	r3, [pc, #364]	@ (8014acc <_dtoa_r+0x2dc>)
 801495e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801496a:	f7ec f8bf 	bl	8000aec <__aeabi_dcmplt>
 801496e:	2800      	cmp	r0, #0
 8014970:	d048      	beq.n	8014a04 <_dtoa_r+0x214>
 8014972:	3f01      	subs	r7, #1
 8014974:	2300      	movs	r3, #0
 8014976:	9312      	str	r3, [sp, #72]	@ 0x48
 8014978:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801497a:	1b9b      	subs	r3, r3, r6
 801497c:	1e5a      	subs	r2, r3, #1
 801497e:	bf44      	itt	mi
 8014980:	f1c3 0801 	rsbmi	r8, r3, #1
 8014984:	2300      	movmi	r3, #0
 8014986:	9208      	str	r2, [sp, #32]
 8014988:	bf54      	ite	pl
 801498a:	f04f 0800 	movpl.w	r8, #0
 801498e:	9308      	strmi	r3, [sp, #32]
 8014990:	2f00      	cmp	r7, #0
 8014992:	db39      	blt.n	8014a08 <_dtoa_r+0x218>
 8014994:	9b08      	ldr	r3, [sp, #32]
 8014996:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014998:	443b      	add	r3, r7
 801499a:	9308      	str	r3, [sp, #32]
 801499c:	2300      	movs	r3, #0
 801499e:	930a      	str	r3, [sp, #40]	@ 0x28
 80149a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149a2:	2b09      	cmp	r3, #9
 80149a4:	d864      	bhi.n	8014a70 <_dtoa_r+0x280>
 80149a6:	2b05      	cmp	r3, #5
 80149a8:	bfc4      	itt	gt
 80149aa:	3b04      	subgt	r3, #4
 80149ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80149ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149b0:	f1a3 0302 	sub.w	r3, r3, #2
 80149b4:	bfcc      	ite	gt
 80149b6:	2400      	movgt	r4, #0
 80149b8:	2401      	movle	r4, #1
 80149ba:	2b03      	cmp	r3, #3
 80149bc:	d863      	bhi.n	8014a86 <_dtoa_r+0x296>
 80149be:	e8df f003 	tbb	[pc, r3]
 80149c2:	372a      	.short	0x372a
 80149c4:	5535      	.short	0x5535
 80149c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80149ca:	441e      	add	r6, r3
 80149cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80149d0:	2b20      	cmp	r3, #32
 80149d2:	bfc1      	itttt	gt
 80149d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80149d8:	409f      	lslgt	r7, r3
 80149da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80149de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80149e2:	bfd6      	itet	le
 80149e4:	f1c3 0320 	rsble	r3, r3, #32
 80149e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80149ec:	fa04 f003 	lslle.w	r0, r4, r3
 80149f0:	f7eb fd90 	bl	8000514 <__aeabi_ui2d>
 80149f4:	2201      	movs	r2, #1
 80149f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80149fa:	3e01      	subs	r6, #1
 80149fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80149fe:	e777      	b.n	80148f0 <_dtoa_r+0x100>
 8014a00:	2301      	movs	r3, #1
 8014a02:	e7b8      	b.n	8014976 <_dtoa_r+0x186>
 8014a04:	9012      	str	r0, [sp, #72]	@ 0x48
 8014a06:	e7b7      	b.n	8014978 <_dtoa_r+0x188>
 8014a08:	427b      	negs	r3, r7
 8014a0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	eba8 0807 	sub.w	r8, r8, r7
 8014a12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014a14:	e7c4      	b.n	80149a0 <_dtoa_r+0x1b0>
 8014a16:	2300      	movs	r3, #0
 8014a18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014a1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	dc35      	bgt.n	8014a8c <_dtoa_r+0x29c>
 8014a20:	2301      	movs	r3, #1
 8014a22:	9300      	str	r3, [sp, #0]
 8014a24:	9307      	str	r3, [sp, #28]
 8014a26:	461a      	mov	r2, r3
 8014a28:	920e      	str	r2, [sp, #56]	@ 0x38
 8014a2a:	e00b      	b.n	8014a44 <_dtoa_r+0x254>
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	e7f3      	b.n	8014a18 <_dtoa_r+0x228>
 8014a30:	2300      	movs	r3, #0
 8014a32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014a34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014a36:	18fb      	adds	r3, r7, r3
 8014a38:	9300      	str	r3, [sp, #0]
 8014a3a:	3301      	adds	r3, #1
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	9307      	str	r3, [sp, #28]
 8014a40:	bfb8      	it	lt
 8014a42:	2301      	movlt	r3, #1
 8014a44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014a48:	2100      	movs	r1, #0
 8014a4a:	2204      	movs	r2, #4
 8014a4c:	f102 0514 	add.w	r5, r2, #20
 8014a50:	429d      	cmp	r5, r3
 8014a52:	d91f      	bls.n	8014a94 <_dtoa_r+0x2a4>
 8014a54:	6041      	str	r1, [r0, #4]
 8014a56:	4658      	mov	r0, fp
 8014a58:	f000 fcd8 	bl	801540c <_Balloc>
 8014a5c:	4682      	mov	sl, r0
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	d13c      	bne.n	8014adc <_dtoa_r+0x2ec>
 8014a62:	4b1b      	ldr	r3, [pc, #108]	@ (8014ad0 <_dtoa_r+0x2e0>)
 8014a64:	4602      	mov	r2, r0
 8014a66:	f240 11af 	movw	r1, #431	@ 0x1af
 8014a6a:	e6d8      	b.n	801481e <_dtoa_r+0x2e>
 8014a6c:	2301      	movs	r3, #1
 8014a6e:	e7e0      	b.n	8014a32 <_dtoa_r+0x242>
 8014a70:	2401      	movs	r4, #1
 8014a72:	2300      	movs	r3, #0
 8014a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014a78:	f04f 33ff 	mov.w	r3, #4294967295
 8014a7c:	9300      	str	r3, [sp, #0]
 8014a7e:	9307      	str	r3, [sp, #28]
 8014a80:	2200      	movs	r2, #0
 8014a82:	2312      	movs	r3, #18
 8014a84:	e7d0      	b.n	8014a28 <_dtoa_r+0x238>
 8014a86:	2301      	movs	r3, #1
 8014a88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014a8a:	e7f5      	b.n	8014a78 <_dtoa_r+0x288>
 8014a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014a8e:	9300      	str	r3, [sp, #0]
 8014a90:	9307      	str	r3, [sp, #28]
 8014a92:	e7d7      	b.n	8014a44 <_dtoa_r+0x254>
 8014a94:	3101      	adds	r1, #1
 8014a96:	0052      	lsls	r2, r2, #1
 8014a98:	e7d8      	b.n	8014a4c <_dtoa_r+0x25c>
 8014a9a:	bf00      	nop
 8014a9c:	f3af 8000 	nop.w
 8014aa0:	636f4361 	.word	0x636f4361
 8014aa4:	3fd287a7 	.word	0x3fd287a7
 8014aa8:	8b60c8b3 	.word	0x8b60c8b3
 8014aac:	3fc68a28 	.word	0x3fc68a28
 8014ab0:	509f79fb 	.word	0x509f79fb
 8014ab4:	3fd34413 	.word	0x3fd34413
 8014ab8:	08018f3e 	.word	0x08018f3e
 8014abc:	08018f55 	.word	0x08018f55
 8014ac0:	7ff00000 	.word	0x7ff00000
 8014ac4:	08018f09 	.word	0x08018f09
 8014ac8:	3ff80000 	.word	0x3ff80000
 8014acc:	08019050 	.word	0x08019050
 8014ad0:	08018fad 	.word	0x08018fad
 8014ad4:	08018f3a 	.word	0x08018f3a
 8014ad8:	08018f08 	.word	0x08018f08
 8014adc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014ae0:	6018      	str	r0, [r3, #0]
 8014ae2:	9b07      	ldr	r3, [sp, #28]
 8014ae4:	2b0e      	cmp	r3, #14
 8014ae6:	f200 80a4 	bhi.w	8014c32 <_dtoa_r+0x442>
 8014aea:	2c00      	cmp	r4, #0
 8014aec:	f000 80a1 	beq.w	8014c32 <_dtoa_r+0x442>
 8014af0:	2f00      	cmp	r7, #0
 8014af2:	dd33      	ble.n	8014b5c <_dtoa_r+0x36c>
 8014af4:	4bad      	ldr	r3, [pc, #692]	@ (8014dac <_dtoa_r+0x5bc>)
 8014af6:	f007 020f 	and.w	r2, r7, #15
 8014afa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014afe:	ed93 7b00 	vldr	d7, [r3]
 8014b02:	05f8      	lsls	r0, r7, #23
 8014b04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014b08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014b0c:	d516      	bpl.n	8014b3c <_dtoa_r+0x34c>
 8014b0e:	4ba8      	ldr	r3, [pc, #672]	@ (8014db0 <_dtoa_r+0x5c0>)
 8014b10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014b14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014b18:	f7eb fea0 	bl	800085c <__aeabi_ddiv>
 8014b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b20:	f004 040f 	and.w	r4, r4, #15
 8014b24:	2603      	movs	r6, #3
 8014b26:	4da2      	ldr	r5, [pc, #648]	@ (8014db0 <_dtoa_r+0x5c0>)
 8014b28:	b954      	cbnz	r4, 8014b40 <_dtoa_r+0x350>
 8014b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b32:	f7eb fe93 	bl	800085c <__aeabi_ddiv>
 8014b36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b3a:	e028      	b.n	8014b8e <_dtoa_r+0x39e>
 8014b3c:	2602      	movs	r6, #2
 8014b3e:	e7f2      	b.n	8014b26 <_dtoa_r+0x336>
 8014b40:	07e1      	lsls	r1, r4, #31
 8014b42:	d508      	bpl.n	8014b56 <_dtoa_r+0x366>
 8014b44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014b48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014b4c:	f7eb fd5c 	bl	8000608 <__aeabi_dmul>
 8014b50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014b54:	3601      	adds	r6, #1
 8014b56:	1064      	asrs	r4, r4, #1
 8014b58:	3508      	adds	r5, #8
 8014b5a:	e7e5      	b.n	8014b28 <_dtoa_r+0x338>
 8014b5c:	f000 80d2 	beq.w	8014d04 <_dtoa_r+0x514>
 8014b60:	427c      	negs	r4, r7
 8014b62:	4b92      	ldr	r3, [pc, #584]	@ (8014dac <_dtoa_r+0x5bc>)
 8014b64:	4d92      	ldr	r5, [pc, #584]	@ (8014db0 <_dtoa_r+0x5c0>)
 8014b66:	f004 020f 	and.w	r2, r4, #15
 8014b6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014b76:	f7eb fd47 	bl	8000608 <__aeabi_dmul>
 8014b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b7e:	1124      	asrs	r4, r4, #4
 8014b80:	2300      	movs	r3, #0
 8014b82:	2602      	movs	r6, #2
 8014b84:	2c00      	cmp	r4, #0
 8014b86:	f040 80b2 	bne.w	8014cee <_dtoa_r+0x4fe>
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d1d3      	bne.n	8014b36 <_dtoa_r+0x346>
 8014b8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014b90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	f000 80b7 	beq.w	8014d08 <_dtoa_r+0x518>
 8014b9a:	4b86      	ldr	r3, [pc, #536]	@ (8014db4 <_dtoa_r+0x5c4>)
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	4620      	mov	r0, r4
 8014ba0:	4629      	mov	r1, r5
 8014ba2:	f7eb ffa3 	bl	8000aec <__aeabi_dcmplt>
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	f000 80ae 	beq.w	8014d08 <_dtoa_r+0x518>
 8014bac:	9b07      	ldr	r3, [sp, #28]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	f000 80aa 	beq.w	8014d08 <_dtoa_r+0x518>
 8014bb4:	9b00      	ldr	r3, [sp, #0]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	dd37      	ble.n	8014c2a <_dtoa_r+0x43a>
 8014bba:	1e7b      	subs	r3, r7, #1
 8014bbc:	9304      	str	r3, [sp, #16]
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	4b7d      	ldr	r3, [pc, #500]	@ (8014db8 <_dtoa_r+0x5c8>)
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	4629      	mov	r1, r5
 8014bc6:	f7eb fd1f 	bl	8000608 <__aeabi_dmul>
 8014bca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014bce:	9c00      	ldr	r4, [sp, #0]
 8014bd0:	3601      	adds	r6, #1
 8014bd2:	4630      	mov	r0, r6
 8014bd4:	f7eb fcae 	bl	8000534 <__aeabi_i2d>
 8014bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014bdc:	f7eb fd14 	bl	8000608 <__aeabi_dmul>
 8014be0:	4b76      	ldr	r3, [pc, #472]	@ (8014dbc <_dtoa_r+0x5cc>)
 8014be2:	2200      	movs	r2, #0
 8014be4:	f7eb fb5a 	bl	800029c <__adddf3>
 8014be8:	4605      	mov	r5, r0
 8014bea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014bee:	2c00      	cmp	r4, #0
 8014bf0:	f040 808d 	bne.w	8014d0e <_dtoa_r+0x51e>
 8014bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014bf8:	4b71      	ldr	r3, [pc, #452]	@ (8014dc0 <_dtoa_r+0x5d0>)
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	f7eb fb4c 	bl	8000298 <__aeabi_dsub>
 8014c00:	4602      	mov	r2, r0
 8014c02:	460b      	mov	r3, r1
 8014c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014c08:	462a      	mov	r2, r5
 8014c0a:	4633      	mov	r3, r6
 8014c0c:	f7eb ff8c 	bl	8000b28 <__aeabi_dcmpgt>
 8014c10:	2800      	cmp	r0, #0
 8014c12:	f040 828b 	bne.w	801512c <_dtoa_r+0x93c>
 8014c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c1a:	462a      	mov	r2, r5
 8014c1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014c20:	f7eb ff64 	bl	8000aec <__aeabi_dcmplt>
 8014c24:	2800      	cmp	r0, #0
 8014c26:	f040 8128 	bne.w	8014e7a <_dtoa_r+0x68a>
 8014c2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8014c2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014c32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	f2c0 815a 	blt.w	8014eee <_dtoa_r+0x6fe>
 8014c3a:	2f0e      	cmp	r7, #14
 8014c3c:	f300 8157 	bgt.w	8014eee <_dtoa_r+0x6fe>
 8014c40:	4b5a      	ldr	r3, [pc, #360]	@ (8014dac <_dtoa_r+0x5bc>)
 8014c42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014c46:	ed93 7b00 	vldr	d7, [r3]
 8014c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	ed8d 7b00 	vstr	d7, [sp]
 8014c52:	da03      	bge.n	8014c5c <_dtoa_r+0x46c>
 8014c54:	9b07      	ldr	r3, [sp, #28]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	f340 8101 	ble.w	8014e5e <_dtoa_r+0x66e>
 8014c5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014c60:	4656      	mov	r6, sl
 8014c62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c66:	4620      	mov	r0, r4
 8014c68:	4629      	mov	r1, r5
 8014c6a:	f7eb fdf7 	bl	800085c <__aeabi_ddiv>
 8014c6e:	f7eb ff7b 	bl	8000b68 <__aeabi_d2iz>
 8014c72:	4680      	mov	r8, r0
 8014c74:	f7eb fc5e 	bl	8000534 <__aeabi_i2d>
 8014c78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c7c:	f7eb fcc4 	bl	8000608 <__aeabi_dmul>
 8014c80:	4602      	mov	r2, r0
 8014c82:	460b      	mov	r3, r1
 8014c84:	4620      	mov	r0, r4
 8014c86:	4629      	mov	r1, r5
 8014c88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8014c8c:	f7eb fb04 	bl	8000298 <__aeabi_dsub>
 8014c90:	f806 4b01 	strb.w	r4, [r6], #1
 8014c94:	9d07      	ldr	r5, [sp, #28]
 8014c96:	eba6 040a 	sub.w	r4, r6, sl
 8014c9a:	42a5      	cmp	r5, r4
 8014c9c:	4602      	mov	r2, r0
 8014c9e:	460b      	mov	r3, r1
 8014ca0:	f040 8117 	bne.w	8014ed2 <_dtoa_r+0x6e2>
 8014ca4:	f7eb fafa 	bl	800029c <__adddf3>
 8014ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014cac:	4604      	mov	r4, r0
 8014cae:	460d      	mov	r5, r1
 8014cb0:	f7eb ff3a 	bl	8000b28 <__aeabi_dcmpgt>
 8014cb4:	2800      	cmp	r0, #0
 8014cb6:	f040 80f9 	bne.w	8014eac <_dtoa_r+0x6bc>
 8014cba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	4629      	mov	r1, r5
 8014cc2:	f7eb ff09 	bl	8000ad8 <__aeabi_dcmpeq>
 8014cc6:	b118      	cbz	r0, 8014cd0 <_dtoa_r+0x4e0>
 8014cc8:	f018 0f01 	tst.w	r8, #1
 8014ccc:	f040 80ee 	bne.w	8014eac <_dtoa_r+0x6bc>
 8014cd0:	4649      	mov	r1, r9
 8014cd2:	4658      	mov	r0, fp
 8014cd4:	f000 fbda 	bl	801548c <_Bfree>
 8014cd8:	2300      	movs	r3, #0
 8014cda:	7033      	strb	r3, [r6, #0]
 8014cdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014cde:	3701      	adds	r7, #1
 8014ce0:	601f      	str	r7, [r3, #0]
 8014ce2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	f000 831d 	beq.w	8015324 <_dtoa_r+0xb34>
 8014cea:	601e      	str	r6, [r3, #0]
 8014cec:	e31a      	b.n	8015324 <_dtoa_r+0xb34>
 8014cee:	07e2      	lsls	r2, r4, #31
 8014cf0:	d505      	bpl.n	8014cfe <_dtoa_r+0x50e>
 8014cf2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014cf6:	f7eb fc87 	bl	8000608 <__aeabi_dmul>
 8014cfa:	3601      	adds	r6, #1
 8014cfc:	2301      	movs	r3, #1
 8014cfe:	1064      	asrs	r4, r4, #1
 8014d00:	3508      	adds	r5, #8
 8014d02:	e73f      	b.n	8014b84 <_dtoa_r+0x394>
 8014d04:	2602      	movs	r6, #2
 8014d06:	e742      	b.n	8014b8e <_dtoa_r+0x39e>
 8014d08:	9c07      	ldr	r4, [sp, #28]
 8014d0a:	9704      	str	r7, [sp, #16]
 8014d0c:	e761      	b.n	8014bd2 <_dtoa_r+0x3e2>
 8014d0e:	4b27      	ldr	r3, [pc, #156]	@ (8014dac <_dtoa_r+0x5bc>)
 8014d10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014d12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014d16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014d1a:	4454      	add	r4, sl
 8014d1c:	2900      	cmp	r1, #0
 8014d1e:	d053      	beq.n	8014dc8 <_dtoa_r+0x5d8>
 8014d20:	4928      	ldr	r1, [pc, #160]	@ (8014dc4 <_dtoa_r+0x5d4>)
 8014d22:	2000      	movs	r0, #0
 8014d24:	f7eb fd9a 	bl	800085c <__aeabi_ddiv>
 8014d28:	4633      	mov	r3, r6
 8014d2a:	462a      	mov	r2, r5
 8014d2c:	f7eb fab4 	bl	8000298 <__aeabi_dsub>
 8014d30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014d34:	4656      	mov	r6, sl
 8014d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d3a:	f7eb ff15 	bl	8000b68 <__aeabi_d2iz>
 8014d3e:	4605      	mov	r5, r0
 8014d40:	f7eb fbf8 	bl	8000534 <__aeabi_i2d>
 8014d44:	4602      	mov	r2, r0
 8014d46:	460b      	mov	r3, r1
 8014d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d4c:	f7eb faa4 	bl	8000298 <__aeabi_dsub>
 8014d50:	3530      	adds	r5, #48	@ 0x30
 8014d52:	4602      	mov	r2, r0
 8014d54:	460b      	mov	r3, r1
 8014d56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014d5a:	f806 5b01 	strb.w	r5, [r6], #1
 8014d5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014d62:	f7eb fec3 	bl	8000aec <__aeabi_dcmplt>
 8014d66:	2800      	cmp	r0, #0
 8014d68:	d171      	bne.n	8014e4e <_dtoa_r+0x65e>
 8014d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d6e:	4911      	ldr	r1, [pc, #68]	@ (8014db4 <_dtoa_r+0x5c4>)
 8014d70:	2000      	movs	r0, #0
 8014d72:	f7eb fa91 	bl	8000298 <__aeabi_dsub>
 8014d76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014d7a:	f7eb feb7 	bl	8000aec <__aeabi_dcmplt>
 8014d7e:	2800      	cmp	r0, #0
 8014d80:	f040 8095 	bne.w	8014eae <_dtoa_r+0x6be>
 8014d84:	42a6      	cmp	r6, r4
 8014d86:	f43f af50 	beq.w	8014c2a <_dtoa_r+0x43a>
 8014d8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8014d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8014db8 <_dtoa_r+0x5c8>)
 8014d90:	2200      	movs	r2, #0
 8014d92:	f7eb fc39 	bl	8000608 <__aeabi_dmul>
 8014d96:	4b08      	ldr	r3, [pc, #32]	@ (8014db8 <_dtoa_r+0x5c8>)
 8014d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014da2:	f7eb fc31 	bl	8000608 <__aeabi_dmul>
 8014da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014daa:	e7c4      	b.n	8014d36 <_dtoa_r+0x546>
 8014dac:	08019050 	.word	0x08019050
 8014db0:	08019028 	.word	0x08019028
 8014db4:	3ff00000 	.word	0x3ff00000
 8014db8:	40240000 	.word	0x40240000
 8014dbc:	401c0000 	.word	0x401c0000
 8014dc0:	40140000 	.word	0x40140000
 8014dc4:	3fe00000 	.word	0x3fe00000
 8014dc8:	4631      	mov	r1, r6
 8014dca:	4628      	mov	r0, r5
 8014dcc:	f7eb fc1c 	bl	8000608 <__aeabi_dmul>
 8014dd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014dd4:	9415      	str	r4, [sp, #84]	@ 0x54
 8014dd6:	4656      	mov	r6, sl
 8014dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ddc:	f7eb fec4 	bl	8000b68 <__aeabi_d2iz>
 8014de0:	4605      	mov	r5, r0
 8014de2:	f7eb fba7 	bl	8000534 <__aeabi_i2d>
 8014de6:	4602      	mov	r2, r0
 8014de8:	460b      	mov	r3, r1
 8014dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014dee:	f7eb fa53 	bl	8000298 <__aeabi_dsub>
 8014df2:	3530      	adds	r5, #48	@ 0x30
 8014df4:	f806 5b01 	strb.w	r5, [r6], #1
 8014df8:	4602      	mov	r2, r0
 8014dfa:	460b      	mov	r3, r1
 8014dfc:	42a6      	cmp	r6, r4
 8014dfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014e02:	f04f 0200 	mov.w	r2, #0
 8014e06:	d124      	bne.n	8014e52 <_dtoa_r+0x662>
 8014e08:	4bac      	ldr	r3, [pc, #688]	@ (80150bc <_dtoa_r+0x8cc>)
 8014e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8014e0e:	f7eb fa45 	bl	800029c <__adddf3>
 8014e12:	4602      	mov	r2, r0
 8014e14:	460b      	mov	r3, r1
 8014e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e1a:	f7eb fe85 	bl	8000b28 <__aeabi_dcmpgt>
 8014e1e:	2800      	cmp	r0, #0
 8014e20:	d145      	bne.n	8014eae <_dtoa_r+0x6be>
 8014e22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014e26:	49a5      	ldr	r1, [pc, #660]	@ (80150bc <_dtoa_r+0x8cc>)
 8014e28:	2000      	movs	r0, #0
 8014e2a:	f7eb fa35 	bl	8000298 <__aeabi_dsub>
 8014e2e:	4602      	mov	r2, r0
 8014e30:	460b      	mov	r3, r1
 8014e32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e36:	f7eb fe59 	bl	8000aec <__aeabi_dcmplt>
 8014e3a:	2800      	cmp	r0, #0
 8014e3c:	f43f aef5 	beq.w	8014c2a <_dtoa_r+0x43a>
 8014e40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8014e42:	1e73      	subs	r3, r6, #1
 8014e44:	9315      	str	r3, [sp, #84]	@ 0x54
 8014e46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014e4a:	2b30      	cmp	r3, #48	@ 0x30
 8014e4c:	d0f8      	beq.n	8014e40 <_dtoa_r+0x650>
 8014e4e:	9f04      	ldr	r7, [sp, #16]
 8014e50:	e73e      	b.n	8014cd0 <_dtoa_r+0x4e0>
 8014e52:	4b9b      	ldr	r3, [pc, #620]	@ (80150c0 <_dtoa_r+0x8d0>)
 8014e54:	f7eb fbd8 	bl	8000608 <__aeabi_dmul>
 8014e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e5c:	e7bc      	b.n	8014dd8 <_dtoa_r+0x5e8>
 8014e5e:	d10c      	bne.n	8014e7a <_dtoa_r+0x68a>
 8014e60:	4b98      	ldr	r3, [pc, #608]	@ (80150c4 <_dtoa_r+0x8d4>)
 8014e62:	2200      	movs	r2, #0
 8014e64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e68:	f7eb fbce 	bl	8000608 <__aeabi_dmul>
 8014e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e70:	f7eb fe50 	bl	8000b14 <__aeabi_dcmpge>
 8014e74:	2800      	cmp	r0, #0
 8014e76:	f000 8157 	beq.w	8015128 <_dtoa_r+0x938>
 8014e7a:	2400      	movs	r4, #0
 8014e7c:	4625      	mov	r5, r4
 8014e7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e80:	43db      	mvns	r3, r3
 8014e82:	9304      	str	r3, [sp, #16]
 8014e84:	4656      	mov	r6, sl
 8014e86:	2700      	movs	r7, #0
 8014e88:	4621      	mov	r1, r4
 8014e8a:	4658      	mov	r0, fp
 8014e8c:	f000 fafe 	bl	801548c <_Bfree>
 8014e90:	2d00      	cmp	r5, #0
 8014e92:	d0dc      	beq.n	8014e4e <_dtoa_r+0x65e>
 8014e94:	b12f      	cbz	r7, 8014ea2 <_dtoa_r+0x6b2>
 8014e96:	42af      	cmp	r7, r5
 8014e98:	d003      	beq.n	8014ea2 <_dtoa_r+0x6b2>
 8014e9a:	4639      	mov	r1, r7
 8014e9c:	4658      	mov	r0, fp
 8014e9e:	f000 faf5 	bl	801548c <_Bfree>
 8014ea2:	4629      	mov	r1, r5
 8014ea4:	4658      	mov	r0, fp
 8014ea6:	f000 faf1 	bl	801548c <_Bfree>
 8014eaa:	e7d0      	b.n	8014e4e <_dtoa_r+0x65e>
 8014eac:	9704      	str	r7, [sp, #16]
 8014eae:	4633      	mov	r3, r6
 8014eb0:	461e      	mov	r6, r3
 8014eb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014eb6:	2a39      	cmp	r2, #57	@ 0x39
 8014eb8:	d107      	bne.n	8014eca <_dtoa_r+0x6da>
 8014eba:	459a      	cmp	sl, r3
 8014ebc:	d1f8      	bne.n	8014eb0 <_dtoa_r+0x6c0>
 8014ebe:	9a04      	ldr	r2, [sp, #16]
 8014ec0:	3201      	adds	r2, #1
 8014ec2:	9204      	str	r2, [sp, #16]
 8014ec4:	2230      	movs	r2, #48	@ 0x30
 8014ec6:	f88a 2000 	strb.w	r2, [sl]
 8014eca:	781a      	ldrb	r2, [r3, #0]
 8014ecc:	3201      	adds	r2, #1
 8014ece:	701a      	strb	r2, [r3, #0]
 8014ed0:	e7bd      	b.n	8014e4e <_dtoa_r+0x65e>
 8014ed2:	4b7b      	ldr	r3, [pc, #492]	@ (80150c0 <_dtoa_r+0x8d0>)
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	f7eb fb97 	bl	8000608 <__aeabi_dmul>
 8014eda:	2200      	movs	r2, #0
 8014edc:	2300      	movs	r3, #0
 8014ede:	4604      	mov	r4, r0
 8014ee0:	460d      	mov	r5, r1
 8014ee2:	f7eb fdf9 	bl	8000ad8 <__aeabi_dcmpeq>
 8014ee6:	2800      	cmp	r0, #0
 8014ee8:	f43f aebb 	beq.w	8014c62 <_dtoa_r+0x472>
 8014eec:	e6f0      	b.n	8014cd0 <_dtoa_r+0x4e0>
 8014eee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014ef0:	2a00      	cmp	r2, #0
 8014ef2:	f000 80db 	beq.w	80150ac <_dtoa_r+0x8bc>
 8014ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014ef8:	2a01      	cmp	r2, #1
 8014efa:	f300 80bf 	bgt.w	801507c <_dtoa_r+0x88c>
 8014efe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014f00:	2a00      	cmp	r2, #0
 8014f02:	f000 80b7 	beq.w	8015074 <_dtoa_r+0x884>
 8014f06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8014f0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014f0c:	4646      	mov	r6, r8
 8014f0e:	9a08      	ldr	r2, [sp, #32]
 8014f10:	2101      	movs	r1, #1
 8014f12:	441a      	add	r2, r3
 8014f14:	4658      	mov	r0, fp
 8014f16:	4498      	add	r8, r3
 8014f18:	9208      	str	r2, [sp, #32]
 8014f1a:	f000 fbb5 	bl	8015688 <__i2b>
 8014f1e:	4605      	mov	r5, r0
 8014f20:	b15e      	cbz	r6, 8014f3a <_dtoa_r+0x74a>
 8014f22:	9b08      	ldr	r3, [sp, #32]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	dd08      	ble.n	8014f3a <_dtoa_r+0x74a>
 8014f28:	42b3      	cmp	r3, r6
 8014f2a:	9a08      	ldr	r2, [sp, #32]
 8014f2c:	bfa8      	it	ge
 8014f2e:	4633      	movge	r3, r6
 8014f30:	eba8 0803 	sub.w	r8, r8, r3
 8014f34:	1af6      	subs	r6, r6, r3
 8014f36:	1ad3      	subs	r3, r2, r3
 8014f38:	9308      	str	r3, [sp, #32]
 8014f3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f3c:	b1f3      	cbz	r3, 8014f7c <_dtoa_r+0x78c>
 8014f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	f000 80b7 	beq.w	80150b4 <_dtoa_r+0x8c4>
 8014f46:	b18c      	cbz	r4, 8014f6c <_dtoa_r+0x77c>
 8014f48:	4629      	mov	r1, r5
 8014f4a:	4622      	mov	r2, r4
 8014f4c:	4658      	mov	r0, fp
 8014f4e:	f000 fc5b 	bl	8015808 <__pow5mult>
 8014f52:	464a      	mov	r2, r9
 8014f54:	4601      	mov	r1, r0
 8014f56:	4605      	mov	r5, r0
 8014f58:	4658      	mov	r0, fp
 8014f5a:	f000 fbab 	bl	80156b4 <__multiply>
 8014f5e:	4649      	mov	r1, r9
 8014f60:	9004      	str	r0, [sp, #16]
 8014f62:	4658      	mov	r0, fp
 8014f64:	f000 fa92 	bl	801548c <_Bfree>
 8014f68:	9b04      	ldr	r3, [sp, #16]
 8014f6a:	4699      	mov	r9, r3
 8014f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f6e:	1b1a      	subs	r2, r3, r4
 8014f70:	d004      	beq.n	8014f7c <_dtoa_r+0x78c>
 8014f72:	4649      	mov	r1, r9
 8014f74:	4658      	mov	r0, fp
 8014f76:	f000 fc47 	bl	8015808 <__pow5mult>
 8014f7a:	4681      	mov	r9, r0
 8014f7c:	2101      	movs	r1, #1
 8014f7e:	4658      	mov	r0, fp
 8014f80:	f000 fb82 	bl	8015688 <__i2b>
 8014f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f86:	4604      	mov	r4, r0
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	f000 81cf 	beq.w	801532c <_dtoa_r+0xb3c>
 8014f8e:	461a      	mov	r2, r3
 8014f90:	4601      	mov	r1, r0
 8014f92:	4658      	mov	r0, fp
 8014f94:	f000 fc38 	bl	8015808 <__pow5mult>
 8014f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f9a:	2b01      	cmp	r3, #1
 8014f9c:	4604      	mov	r4, r0
 8014f9e:	f300 8095 	bgt.w	80150cc <_dtoa_r+0x8dc>
 8014fa2:	9b02      	ldr	r3, [sp, #8]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	f040 8087 	bne.w	80150b8 <_dtoa_r+0x8c8>
 8014faa:	9b03      	ldr	r3, [sp, #12]
 8014fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	f040 8089 	bne.w	80150c8 <_dtoa_r+0x8d8>
 8014fb6:	9b03      	ldr	r3, [sp, #12]
 8014fb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014fbc:	0d1b      	lsrs	r3, r3, #20
 8014fbe:	051b      	lsls	r3, r3, #20
 8014fc0:	b12b      	cbz	r3, 8014fce <_dtoa_r+0x7de>
 8014fc2:	9b08      	ldr	r3, [sp, #32]
 8014fc4:	3301      	adds	r3, #1
 8014fc6:	9308      	str	r3, [sp, #32]
 8014fc8:	f108 0801 	add.w	r8, r8, #1
 8014fcc:	2301      	movs	r3, #1
 8014fce:	930a      	str	r3, [sp, #40]	@ 0x28
 8014fd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	f000 81b0 	beq.w	8015338 <_dtoa_r+0xb48>
 8014fd8:	6923      	ldr	r3, [r4, #16]
 8014fda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014fde:	6918      	ldr	r0, [r3, #16]
 8014fe0:	f000 fb06 	bl	80155f0 <__hi0bits>
 8014fe4:	f1c0 0020 	rsb	r0, r0, #32
 8014fe8:	9b08      	ldr	r3, [sp, #32]
 8014fea:	4418      	add	r0, r3
 8014fec:	f010 001f 	ands.w	r0, r0, #31
 8014ff0:	d077      	beq.n	80150e2 <_dtoa_r+0x8f2>
 8014ff2:	f1c0 0320 	rsb	r3, r0, #32
 8014ff6:	2b04      	cmp	r3, #4
 8014ff8:	dd6b      	ble.n	80150d2 <_dtoa_r+0x8e2>
 8014ffa:	9b08      	ldr	r3, [sp, #32]
 8014ffc:	f1c0 001c 	rsb	r0, r0, #28
 8015000:	4403      	add	r3, r0
 8015002:	4480      	add	r8, r0
 8015004:	4406      	add	r6, r0
 8015006:	9308      	str	r3, [sp, #32]
 8015008:	f1b8 0f00 	cmp.w	r8, #0
 801500c:	dd05      	ble.n	801501a <_dtoa_r+0x82a>
 801500e:	4649      	mov	r1, r9
 8015010:	4642      	mov	r2, r8
 8015012:	4658      	mov	r0, fp
 8015014:	f000 fc52 	bl	80158bc <__lshift>
 8015018:	4681      	mov	r9, r0
 801501a:	9b08      	ldr	r3, [sp, #32]
 801501c:	2b00      	cmp	r3, #0
 801501e:	dd05      	ble.n	801502c <_dtoa_r+0x83c>
 8015020:	4621      	mov	r1, r4
 8015022:	461a      	mov	r2, r3
 8015024:	4658      	mov	r0, fp
 8015026:	f000 fc49 	bl	80158bc <__lshift>
 801502a:	4604      	mov	r4, r0
 801502c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801502e:	2b00      	cmp	r3, #0
 8015030:	d059      	beq.n	80150e6 <_dtoa_r+0x8f6>
 8015032:	4621      	mov	r1, r4
 8015034:	4648      	mov	r0, r9
 8015036:	f000 fcad 	bl	8015994 <__mcmp>
 801503a:	2800      	cmp	r0, #0
 801503c:	da53      	bge.n	80150e6 <_dtoa_r+0x8f6>
 801503e:	1e7b      	subs	r3, r7, #1
 8015040:	9304      	str	r3, [sp, #16]
 8015042:	4649      	mov	r1, r9
 8015044:	2300      	movs	r3, #0
 8015046:	220a      	movs	r2, #10
 8015048:	4658      	mov	r0, fp
 801504a:	f000 fa41 	bl	80154d0 <__multadd>
 801504e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015050:	4681      	mov	r9, r0
 8015052:	2b00      	cmp	r3, #0
 8015054:	f000 8172 	beq.w	801533c <_dtoa_r+0xb4c>
 8015058:	2300      	movs	r3, #0
 801505a:	4629      	mov	r1, r5
 801505c:	220a      	movs	r2, #10
 801505e:	4658      	mov	r0, fp
 8015060:	f000 fa36 	bl	80154d0 <__multadd>
 8015064:	9b00      	ldr	r3, [sp, #0]
 8015066:	2b00      	cmp	r3, #0
 8015068:	4605      	mov	r5, r0
 801506a:	dc67      	bgt.n	801513c <_dtoa_r+0x94c>
 801506c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801506e:	2b02      	cmp	r3, #2
 8015070:	dc41      	bgt.n	80150f6 <_dtoa_r+0x906>
 8015072:	e063      	b.n	801513c <_dtoa_r+0x94c>
 8015074:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015076:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801507a:	e746      	b.n	8014f0a <_dtoa_r+0x71a>
 801507c:	9b07      	ldr	r3, [sp, #28]
 801507e:	1e5c      	subs	r4, r3, #1
 8015080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015082:	42a3      	cmp	r3, r4
 8015084:	bfbf      	itttt	lt
 8015086:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015088:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801508a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801508c:	1ae3      	sublt	r3, r4, r3
 801508e:	bfb4      	ite	lt
 8015090:	18d2      	addlt	r2, r2, r3
 8015092:	1b1c      	subge	r4, r3, r4
 8015094:	9b07      	ldr	r3, [sp, #28]
 8015096:	bfbc      	itt	lt
 8015098:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801509a:	2400      	movlt	r4, #0
 801509c:	2b00      	cmp	r3, #0
 801509e:	bfb5      	itete	lt
 80150a0:	eba8 0603 	sublt.w	r6, r8, r3
 80150a4:	9b07      	ldrge	r3, [sp, #28]
 80150a6:	2300      	movlt	r3, #0
 80150a8:	4646      	movge	r6, r8
 80150aa:	e730      	b.n	8014f0e <_dtoa_r+0x71e>
 80150ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80150ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80150b0:	4646      	mov	r6, r8
 80150b2:	e735      	b.n	8014f20 <_dtoa_r+0x730>
 80150b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80150b6:	e75c      	b.n	8014f72 <_dtoa_r+0x782>
 80150b8:	2300      	movs	r3, #0
 80150ba:	e788      	b.n	8014fce <_dtoa_r+0x7de>
 80150bc:	3fe00000 	.word	0x3fe00000
 80150c0:	40240000 	.word	0x40240000
 80150c4:	40140000 	.word	0x40140000
 80150c8:	9b02      	ldr	r3, [sp, #8]
 80150ca:	e780      	b.n	8014fce <_dtoa_r+0x7de>
 80150cc:	2300      	movs	r3, #0
 80150ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80150d0:	e782      	b.n	8014fd8 <_dtoa_r+0x7e8>
 80150d2:	d099      	beq.n	8015008 <_dtoa_r+0x818>
 80150d4:	9a08      	ldr	r2, [sp, #32]
 80150d6:	331c      	adds	r3, #28
 80150d8:	441a      	add	r2, r3
 80150da:	4498      	add	r8, r3
 80150dc:	441e      	add	r6, r3
 80150de:	9208      	str	r2, [sp, #32]
 80150e0:	e792      	b.n	8015008 <_dtoa_r+0x818>
 80150e2:	4603      	mov	r3, r0
 80150e4:	e7f6      	b.n	80150d4 <_dtoa_r+0x8e4>
 80150e6:	9b07      	ldr	r3, [sp, #28]
 80150e8:	9704      	str	r7, [sp, #16]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	dc20      	bgt.n	8015130 <_dtoa_r+0x940>
 80150ee:	9300      	str	r3, [sp, #0]
 80150f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150f2:	2b02      	cmp	r3, #2
 80150f4:	dd1e      	ble.n	8015134 <_dtoa_r+0x944>
 80150f6:	9b00      	ldr	r3, [sp, #0]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	f47f aec0 	bne.w	8014e7e <_dtoa_r+0x68e>
 80150fe:	4621      	mov	r1, r4
 8015100:	2205      	movs	r2, #5
 8015102:	4658      	mov	r0, fp
 8015104:	f000 f9e4 	bl	80154d0 <__multadd>
 8015108:	4601      	mov	r1, r0
 801510a:	4604      	mov	r4, r0
 801510c:	4648      	mov	r0, r9
 801510e:	f000 fc41 	bl	8015994 <__mcmp>
 8015112:	2800      	cmp	r0, #0
 8015114:	f77f aeb3 	ble.w	8014e7e <_dtoa_r+0x68e>
 8015118:	4656      	mov	r6, sl
 801511a:	2331      	movs	r3, #49	@ 0x31
 801511c:	f806 3b01 	strb.w	r3, [r6], #1
 8015120:	9b04      	ldr	r3, [sp, #16]
 8015122:	3301      	adds	r3, #1
 8015124:	9304      	str	r3, [sp, #16]
 8015126:	e6ae      	b.n	8014e86 <_dtoa_r+0x696>
 8015128:	9c07      	ldr	r4, [sp, #28]
 801512a:	9704      	str	r7, [sp, #16]
 801512c:	4625      	mov	r5, r4
 801512e:	e7f3      	b.n	8015118 <_dtoa_r+0x928>
 8015130:	9b07      	ldr	r3, [sp, #28]
 8015132:	9300      	str	r3, [sp, #0]
 8015134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015136:	2b00      	cmp	r3, #0
 8015138:	f000 8104 	beq.w	8015344 <_dtoa_r+0xb54>
 801513c:	2e00      	cmp	r6, #0
 801513e:	dd05      	ble.n	801514c <_dtoa_r+0x95c>
 8015140:	4629      	mov	r1, r5
 8015142:	4632      	mov	r2, r6
 8015144:	4658      	mov	r0, fp
 8015146:	f000 fbb9 	bl	80158bc <__lshift>
 801514a:	4605      	mov	r5, r0
 801514c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801514e:	2b00      	cmp	r3, #0
 8015150:	d05a      	beq.n	8015208 <_dtoa_r+0xa18>
 8015152:	6869      	ldr	r1, [r5, #4]
 8015154:	4658      	mov	r0, fp
 8015156:	f000 f959 	bl	801540c <_Balloc>
 801515a:	4606      	mov	r6, r0
 801515c:	b928      	cbnz	r0, 801516a <_dtoa_r+0x97a>
 801515e:	4b84      	ldr	r3, [pc, #528]	@ (8015370 <_dtoa_r+0xb80>)
 8015160:	4602      	mov	r2, r0
 8015162:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015166:	f7ff bb5a 	b.w	801481e <_dtoa_r+0x2e>
 801516a:	692a      	ldr	r2, [r5, #16]
 801516c:	3202      	adds	r2, #2
 801516e:	0092      	lsls	r2, r2, #2
 8015170:	f105 010c 	add.w	r1, r5, #12
 8015174:	300c      	adds	r0, #12
 8015176:	f002 f877 	bl	8017268 <memcpy>
 801517a:	2201      	movs	r2, #1
 801517c:	4631      	mov	r1, r6
 801517e:	4658      	mov	r0, fp
 8015180:	f000 fb9c 	bl	80158bc <__lshift>
 8015184:	f10a 0301 	add.w	r3, sl, #1
 8015188:	9307      	str	r3, [sp, #28]
 801518a:	9b00      	ldr	r3, [sp, #0]
 801518c:	4453      	add	r3, sl
 801518e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015190:	9b02      	ldr	r3, [sp, #8]
 8015192:	f003 0301 	and.w	r3, r3, #1
 8015196:	462f      	mov	r7, r5
 8015198:	930a      	str	r3, [sp, #40]	@ 0x28
 801519a:	4605      	mov	r5, r0
 801519c:	9b07      	ldr	r3, [sp, #28]
 801519e:	4621      	mov	r1, r4
 80151a0:	3b01      	subs	r3, #1
 80151a2:	4648      	mov	r0, r9
 80151a4:	9300      	str	r3, [sp, #0]
 80151a6:	f7ff fa99 	bl	80146dc <quorem>
 80151aa:	4639      	mov	r1, r7
 80151ac:	9002      	str	r0, [sp, #8]
 80151ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80151b2:	4648      	mov	r0, r9
 80151b4:	f000 fbee 	bl	8015994 <__mcmp>
 80151b8:	462a      	mov	r2, r5
 80151ba:	9008      	str	r0, [sp, #32]
 80151bc:	4621      	mov	r1, r4
 80151be:	4658      	mov	r0, fp
 80151c0:	f000 fc04 	bl	80159cc <__mdiff>
 80151c4:	68c2      	ldr	r2, [r0, #12]
 80151c6:	4606      	mov	r6, r0
 80151c8:	bb02      	cbnz	r2, 801520c <_dtoa_r+0xa1c>
 80151ca:	4601      	mov	r1, r0
 80151cc:	4648      	mov	r0, r9
 80151ce:	f000 fbe1 	bl	8015994 <__mcmp>
 80151d2:	4602      	mov	r2, r0
 80151d4:	4631      	mov	r1, r6
 80151d6:	4658      	mov	r0, fp
 80151d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80151da:	f000 f957 	bl	801548c <_Bfree>
 80151de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80151e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80151e2:	9e07      	ldr	r6, [sp, #28]
 80151e4:	ea43 0102 	orr.w	r1, r3, r2
 80151e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80151ea:	4319      	orrs	r1, r3
 80151ec:	d110      	bne.n	8015210 <_dtoa_r+0xa20>
 80151ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80151f2:	d029      	beq.n	8015248 <_dtoa_r+0xa58>
 80151f4:	9b08      	ldr	r3, [sp, #32]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	dd02      	ble.n	8015200 <_dtoa_r+0xa10>
 80151fa:	9b02      	ldr	r3, [sp, #8]
 80151fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015200:	9b00      	ldr	r3, [sp, #0]
 8015202:	f883 8000 	strb.w	r8, [r3]
 8015206:	e63f      	b.n	8014e88 <_dtoa_r+0x698>
 8015208:	4628      	mov	r0, r5
 801520a:	e7bb      	b.n	8015184 <_dtoa_r+0x994>
 801520c:	2201      	movs	r2, #1
 801520e:	e7e1      	b.n	80151d4 <_dtoa_r+0x9e4>
 8015210:	9b08      	ldr	r3, [sp, #32]
 8015212:	2b00      	cmp	r3, #0
 8015214:	db04      	blt.n	8015220 <_dtoa_r+0xa30>
 8015216:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015218:	430b      	orrs	r3, r1
 801521a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801521c:	430b      	orrs	r3, r1
 801521e:	d120      	bne.n	8015262 <_dtoa_r+0xa72>
 8015220:	2a00      	cmp	r2, #0
 8015222:	dded      	ble.n	8015200 <_dtoa_r+0xa10>
 8015224:	4649      	mov	r1, r9
 8015226:	2201      	movs	r2, #1
 8015228:	4658      	mov	r0, fp
 801522a:	f000 fb47 	bl	80158bc <__lshift>
 801522e:	4621      	mov	r1, r4
 8015230:	4681      	mov	r9, r0
 8015232:	f000 fbaf 	bl	8015994 <__mcmp>
 8015236:	2800      	cmp	r0, #0
 8015238:	dc03      	bgt.n	8015242 <_dtoa_r+0xa52>
 801523a:	d1e1      	bne.n	8015200 <_dtoa_r+0xa10>
 801523c:	f018 0f01 	tst.w	r8, #1
 8015240:	d0de      	beq.n	8015200 <_dtoa_r+0xa10>
 8015242:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015246:	d1d8      	bne.n	80151fa <_dtoa_r+0xa0a>
 8015248:	9a00      	ldr	r2, [sp, #0]
 801524a:	2339      	movs	r3, #57	@ 0x39
 801524c:	7013      	strb	r3, [r2, #0]
 801524e:	4633      	mov	r3, r6
 8015250:	461e      	mov	r6, r3
 8015252:	3b01      	subs	r3, #1
 8015254:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015258:	2a39      	cmp	r2, #57	@ 0x39
 801525a:	d052      	beq.n	8015302 <_dtoa_r+0xb12>
 801525c:	3201      	adds	r2, #1
 801525e:	701a      	strb	r2, [r3, #0]
 8015260:	e612      	b.n	8014e88 <_dtoa_r+0x698>
 8015262:	2a00      	cmp	r2, #0
 8015264:	dd07      	ble.n	8015276 <_dtoa_r+0xa86>
 8015266:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801526a:	d0ed      	beq.n	8015248 <_dtoa_r+0xa58>
 801526c:	9a00      	ldr	r2, [sp, #0]
 801526e:	f108 0301 	add.w	r3, r8, #1
 8015272:	7013      	strb	r3, [r2, #0]
 8015274:	e608      	b.n	8014e88 <_dtoa_r+0x698>
 8015276:	9b07      	ldr	r3, [sp, #28]
 8015278:	9a07      	ldr	r2, [sp, #28]
 801527a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801527e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015280:	4293      	cmp	r3, r2
 8015282:	d028      	beq.n	80152d6 <_dtoa_r+0xae6>
 8015284:	4649      	mov	r1, r9
 8015286:	2300      	movs	r3, #0
 8015288:	220a      	movs	r2, #10
 801528a:	4658      	mov	r0, fp
 801528c:	f000 f920 	bl	80154d0 <__multadd>
 8015290:	42af      	cmp	r7, r5
 8015292:	4681      	mov	r9, r0
 8015294:	f04f 0300 	mov.w	r3, #0
 8015298:	f04f 020a 	mov.w	r2, #10
 801529c:	4639      	mov	r1, r7
 801529e:	4658      	mov	r0, fp
 80152a0:	d107      	bne.n	80152b2 <_dtoa_r+0xac2>
 80152a2:	f000 f915 	bl	80154d0 <__multadd>
 80152a6:	4607      	mov	r7, r0
 80152a8:	4605      	mov	r5, r0
 80152aa:	9b07      	ldr	r3, [sp, #28]
 80152ac:	3301      	adds	r3, #1
 80152ae:	9307      	str	r3, [sp, #28]
 80152b0:	e774      	b.n	801519c <_dtoa_r+0x9ac>
 80152b2:	f000 f90d 	bl	80154d0 <__multadd>
 80152b6:	4629      	mov	r1, r5
 80152b8:	4607      	mov	r7, r0
 80152ba:	2300      	movs	r3, #0
 80152bc:	220a      	movs	r2, #10
 80152be:	4658      	mov	r0, fp
 80152c0:	f000 f906 	bl	80154d0 <__multadd>
 80152c4:	4605      	mov	r5, r0
 80152c6:	e7f0      	b.n	80152aa <_dtoa_r+0xaba>
 80152c8:	9b00      	ldr	r3, [sp, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	bfcc      	ite	gt
 80152ce:	461e      	movgt	r6, r3
 80152d0:	2601      	movle	r6, #1
 80152d2:	4456      	add	r6, sl
 80152d4:	2700      	movs	r7, #0
 80152d6:	4649      	mov	r1, r9
 80152d8:	2201      	movs	r2, #1
 80152da:	4658      	mov	r0, fp
 80152dc:	f000 faee 	bl	80158bc <__lshift>
 80152e0:	4621      	mov	r1, r4
 80152e2:	4681      	mov	r9, r0
 80152e4:	f000 fb56 	bl	8015994 <__mcmp>
 80152e8:	2800      	cmp	r0, #0
 80152ea:	dcb0      	bgt.n	801524e <_dtoa_r+0xa5e>
 80152ec:	d102      	bne.n	80152f4 <_dtoa_r+0xb04>
 80152ee:	f018 0f01 	tst.w	r8, #1
 80152f2:	d1ac      	bne.n	801524e <_dtoa_r+0xa5e>
 80152f4:	4633      	mov	r3, r6
 80152f6:	461e      	mov	r6, r3
 80152f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80152fc:	2a30      	cmp	r2, #48	@ 0x30
 80152fe:	d0fa      	beq.n	80152f6 <_dtoa_r+0xb06>
 8015300:	e5c2      	b.n	8014e88 <_dtoa_r+0x698>
 8015302:	459a      	cmp	sl, r3
 8015304:	d1a4      	bne.n	8015250 <_dtoa_r+0xa60>
 8015306:	9b04      	ldr	r3, [sp, #16]
 8015308:	3301      	adds	r3, #1
 801530a:	9304      	str	r3, [sp, #16]
 801530c:	2331      	movs	r3, #49	@ 0x31
 801530e:	f88a 3000 	strb.w	r3, [sl]
 8015312:	e5b9      	b.n	8014e88 <_dtoa_r+0x698>
 8015314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015316:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8015374 <_dtoa_r+0xb84>
 801531a:	b11b      	cbz	r3, 8015324 <_dtoa_r+0xb34>
 801531c:	f10a 0308 	add.w	r3, sl, #8
 8015320:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015322:	6013      	str	r3, [r2, #0]
 8015324:	4650      	mov	r0, sl
 8015326:	b019      	add	sp, #100	@ 0x64
 8015328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801532c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801532e:	2b01      	cmp	r3, #1
 8015330:	f77f ae37 	ble.w	8014fa2 <_dtoa_r+0x7b2>
 8015334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015336:	930a      	str	r3, [sp, #40]	@ 0x28
 8015338:	2001      	movs	r0, #1
 801533a:	e655      	b.n	8014fe8 <_dtoa_r+0x7f8>
 801533c:	9b00      	ldr	r3, [sp, #0]
 801533e:	2b00      	cmp	r3, #0
 8015340:	f77f aed6 	ble.w	80150f0 <_dtoa_r+0x900>
 8015344:	4656      	mov	r6, sl
 8015346:	4621      	mov	r1, r4
 8015348:	4648      	mov	r0, r9
 801534a:	f7ff f9c7 	bl	80146dc <quorem>
 801534e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015352:	f806 8b01 	strb.w	r8, [r6], #1
 8015356:	9b00      	ldr	r3, [sp, #0]
 8015358:	eba6 020a 	sub.w	r2, r6, sl
 801535c:	4293      	cmp	r3, r2
 801535e:	ddb3      	ble.n	80152c8 <_dtoa_r+0xad8>
 8015360:	4649      	mov	r1, r9
 8015362:	2300      	movs	r3, #0
 8015364:	220a      	movs	r2, #10
 8015366:	4658      	mov	r0, fp
 8015368:	f000 f8b2 	bl	80154d0 <__multadd>
 801536c:	4681      	mov	r9, r0
 801536e:	e7ea      	b.n	8015346 <_dtoa_r+0xb56>
 8015370:	08018fad 	.word	0x08018fad
 8015374:	08018f31 	.word	0x08018f31

08015378 <_free_r>:
 8015378:	b538      	push	{r3, r4, r5, lr}
 801537a:	4605      	mov	r5, r0
 801537c:	2900      	cmp	r1, #0
 801537e:	d041      	beq.n	8015404 <_free_r+0x8c>
 8015380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015384:	1f0c      	subs	r4, r1, #4
 8015386:	2b00      	cmp	r3, #0
 8015388:	bfb8      	it	lt
 801538a:	18e4      	addlt	r4, r4, r3
 801538c:	f7fe f83a 	bl	8013404 <__malloc_lock>
 8015390:	4a1d      	ldr	r2, [pc, #116]	@ (8015408 <_free_r+0x90>)
 8015392:	6813      	ldr	r3, [r2, #0]
 8015394:	b933      	cbnz	r3, 80153a4 <_free_r+0x2c>
 8015396:	6063      	str	r3, [r4, #4]
 8015398:	6014      	str	r4, [r2, #0]
 801539a:	4628      	mov	r0, r5
 801539c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153a0:	f7fe b836 	b.w	8013410 <__malloc_unlock>
 80153a4:	42a3      	cmp	r3, r4
 80153a6:	d908      	bls.n	80153ba <_free_r+0x42>
 80153a8:	6820      	ldr	r0, [r4, #0]
 80153aa:	1821      	adds	r1, r4, r0
 80153ac:	428b      	cmp	r3, r1
 80153ae:	bf01      	itttt	eq
 80153b0:	6819      	ldreq	r1, [r3, #0]
 80153b2:	685b      	ldreq	r3, [r3, #4]
 80153b4:	1809      	addeq	r1, r1, r0
 80153b6:	6021      	streq	r1, [r4, #0]
 80153b8:	e7ed      	b.n	8015396 <_free_r+0x1e>
 80153ba:	461a      	mov	r2, r3
 80153bc:	685b      	ldr	r3, [r3, #4]
 80153be:	b10b      	cbz	r3, 80153c4 <_free_r+0x4c>
 80153c0:	42a3      	cmp	r3, r4
 80153c2:	d9fa      	bls.n	80153ba <_free_r+0x42>
 80153c4:	6811      	ldr	r1, [r2, #0]
 80153c6:	1850      	adds	r0, r2, r1
 80153c8:	42a0      	cmp	r0, r4
 80153ca:	d10b      	bne.n	80153e4 <_free_r+0x6c>
 80153cc:	6820      	ldr	r0, [r4, #0]
 80153ce:	4401      	add	r1, r0
 80153d0:	1850      	adds	r0, r2, r1
 80153d2:	4283      	cmp	r3, r0
 80153d4:	6011      	str	r1, [r2, #0]
 80153d6:	d1e0      	bne.n	801539a <_free_r+0x22>
 80153d8:	6818      	ldr	r0, [r3, #0]
 80153da:	685b      	ldr	r3, [r3, #4]
 80153dc:	6053      	str	r3, [r2, #4]
 80153de:	4408      	add	r0, r1
 80153e0:	6010      	str	r0, [r2, #0]
 80153e2:	e7da      	b.n	801539a <_free_r+0x22>
 80153e4:	d902      	bls.n	80153ec <_free_r+0x74>
 80153e6:	230c      	movs	r3, #12
 80153e8:	602b      	str	r3, [r5, #0]
 80153ea:	e7d6      	b.n	801539a <_free_r+0x22>
 80153ec:	6820      	ldr	r0, [r4, #0]
 80153ee:	1821      	adds	r1, r4, r0
 80153f0:	428b      	cmp	r3, r1
 80153f2:	bf04      	itt	eq
 80153f4:	6819      	ldreq	r1, [r3, #0]
 80153f6:	685b      	ldreq	r3, [r3, #4]
 80153f8:	6063      	str	r3, [r4, #4]
 80153fa:	bf04      	itt	eq
 80153fc:	1809      	addeq	r1, r1, r0
 80153fe:	6021      	streq	r1, [r4, #0]
 8015400:	6054      	str	r4, [r2, #4]
 8015402:	e7ca      	b.n	801539a <_free_r+0x22>
 8015404:	bd38      	pop	{r3, r4, r5, pc}
 8015406:	bf00      	nop
 8015408:	20004b00 	.word	0x20004b00

0801540c <_Balloc>:
 801540c:	b570      	push	{r4, r5, r6, lr}
 801540e:	69c6      	ldr	r6, [r0, #28]
 8015410:	4604      	mov	r4, r0
 8015412:	460d      	mov	r5, r1
 8015414:	b976      	cbnz	r6, 8015434 <_Balloc+0x28>
 8015416:	2010      	movs	r0, #16
 8015418:	f7fd ff42 	bl	80132a0 <malloc>
 801541c:	4602      	mov	r2, r0
 801541e:	61e0      	str	r0, [r4, #28]
 8015420:	b920      	cbnz	r0, 801542c <_Balloc+0x20>
 8015422:	4b18      	ldr	r3, [pc, #96]	@ (8015484 <_Balloc+0x78>)
 8015424:	4818      	ldr	r0, [pc, #96]	@ (8015488 <_Balloc+0x7c>)
 8015426:	216b      	movs	r1, #107	@ 0x6b
 8015428:	f001 ff36 	bl	8017298 <__assert_func>
 801542c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015430:	6006      	str	r6, [r0, #0]
 8015432:	60c6      	str	r6, [r0, #12]
 8015434:	69e6      	ldr	r6, [r4, #28]
 8015436:	68f3      	ldr	r3, [r6, #12]
 8015438:	b183      	cbz	r3, 801545c <_Balloc+0x50>
 801543a:	69e3      	ldr	r3, [r4, #28]
 801543c:	68db      	ldr	r3, [r3, #12]
 801543e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015442:	b9b8      	cbnz	r0, 8015474 <_Balloc+0x68>
 8015444:	2101      	movs	r1, #1
 8015446:	fa01 f605 	lsl.w	r6, r1, r5
 801544a:	1d72      	adds	r2, r6, #5
 801544c:	0092      	lsls	r2, r2, #2
 801544e:	4620      	mov	r0, r4
 8015450:	f001 ff40 	bl	80172d4 <_calloc_r>
 8015454:	b160      	cbz	r0, 8015470 <_Balloc+0x64>
 8015456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801545a:	e00e      	b.n	801547a <_Balloc+0x6e>
 801545c:	2221      	movs	r2, #33	@ 0x21
 801545e:	2104      	movs	r1, #4
 8015460:	4620      	mov	r0, r4
 8015462:	f001 ff37 	bl	80172d4 <_calloc_r>
 8015466:	69e3      	ldr	r3, [r4, #28]
 8015468:	60f0      	str	r0, [r6, #12]
 801546a:	68db      	ldr	r3, [r3, #12]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d1e4      	bne.n	801543a <_Balloc+0x2e>
 8015470:	2000      	movs	r0, #0
 8015472:	bd70      	pop	{r4, r5, r6, pc}
 8015474:	6802      	ldr	r2, [r0, #0]
 8015476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801547a:	2300      	movs	r3, #0
 801547c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015480:	e7f7      	b.n	8015472 <_Balloc+0x66>
 8015482:	bf00      	nop
 8015484:	08018f3e 	.word	0x08018f3e
 8015488:	08018fbe 	.word	0x08018fbe

0801548c <_Bfree>:
 801548c:	b570      	push	{r4, r5, r6, lr}
 801548e:	69c6      	ldr	r6, [r0, #28]
 8015490:	4605      	mov	r5, r0
 8015492:	460c      	mov	r4, r1
 8015494:	b976      	cbnz	r6, 80154b4 <_Bfree+0x28>
 8015496:	2010      	movs	r0, #16
 8015498:	f7fd ff02 	bl	80132a0 <malloc>
 801549c:	4602      	mov	r2, r0
 801549e:	61e8      	str	r0, [r5, #28]
 80154a0:	b920      	cbnz	r0, 80154ac <_Bfree+0x20>
 80154a2:	4b09      	ldr	r3, [pc, #36]	@ (80154c8 <_Bfree+0x3c>)
 80154a4:	4809      	ldr	r0, [pc, #36]	@ (80154cc <_Bfree+0x40>)
 80154a6:	218f      	movs	r1, #143	@ 0x8f
 80154a8:	f001 fef6 	bl	8017298 <__assert_func>
 80154ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80154b0:	6006      	str	r6, [r0, #0]
 80154b2:	60c6      	str	r6, [r0, #12]
 80154b4:	b13c      	cbz	r4, 80154c6 <_Bfree+0x3a>
 80154b6:	69eb      	ldr	r3, [r5, #28]
 80154b8:	6862      	ldr	r2, [r4, #4]
 80154ba:	68db      	ldr	r3, [r3, #12]
 80154bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80154c0:	6021      	str	r1, [r4, #0]
 80154c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80154c6:	bd70      	pop	{r4, r5, r6, pc}
 80154c8:	08018f3e 	.word	0x08018f3e
 80154cc:	08018fbe 	.word	0x08018fbe

080154d0 <__multadd>:
 80154d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154d4:	690d      	ldr	r5, [r1, #16]
 80154d6:	4607      	mov	r7, r0
 80154d8:	460c      	mov	r4, r1
 80154da:	461e      	mov	r6, r3
 80154dc:	f101 0c14 	add.w	ip, r1, #20
 80154e0:	2000      	movs	r0, #0
 80154e2:	f8dc 3000 	ldr.w	r3, [ip]
 80154e6:	b299      	uxth	r1, r3
 80154e8:	fb02 6101 	mla	r1, r2, r1, r6
 80154ec:	0c1e      	lsrs	r6, r3, #16
 80154ee:	0c0b      	lsrs	r3, r1, #16
 80154f0:	fb02 3306 	mla	r3, r2, r6, r3
 80154f4:	b289      	uxth	r1, r1
 80154f6:	3001      	adds	r0, #1
 80154f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80154fc:	4285      	cmp	r5, r0
 80154fe:	f84c 1b04 	str.w	r1, [ip], #4
 8015502:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015506:	dcec      	bgt.n	80154e2 <__multadd+0x12>
 8015508:	b30e      	cbz	r6, 801554e <__multadd+0x7e>
 801550a:	68a3      	ldr	r3, [r4, #8]
 801550c:	42ab      	cmp	r3, r5
 801550e:	dc19      	bgt.n	8015544 <__multadd+0x74>
 8015510:	6861      	ldr	r1, [r4, #4]
 8015512:	4638      	mov	r0, r7
 8015514:	3101      	adds	r1, #1
 8015516:	f7ff ff79 	bl	801540c <_Balloc>
 801551a:	4680      	mov	r8, r0
 801551c:	b928      	cbnz	r0, 801552a <__multadd+0x5a>
 801551e:	4602      	mov	r2, r0
 8015520:	4b0c      	ldr	r3, [pc, #48]	@ (8015554 <__multadd+0x84>)
 8015522:	480d      	ldr	r0, [pc, #52]	@ (8015558 <__multadd+0x88>)
 8015524:	21ba      	movs	r1, #186	@ 0xba
 8015526:	f001 feb7 	bl	8017298 <__assert_func>
 801552a:	6922      	ldr	r2, [r4, #16]
 801552c:	3202      	adds	r2, #2
 801552e:	f104 010c 	add.w	r1, r4, #12
 8015532:	0092      	lsls	r2, r2, #2
 8015534:	300c      	adds	r0, #12
 8015536:	f001 fe97 	bl	8017268 <memcpy>
 801553a:	4621      	mov	r1, r4
 801553c:	4638      	mov	r0, r7
 801553e:	f7ff ffa5 	bl	801548c <_Bfree>
 8015542:	4644      	mov	r4, r8
 8015544:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015548:	3501      	adds	r5, #1
 801554a:	615e      	str	r6, [r3, #20]
 801554c:	6125      	str	r5, [r4, #16]
 801554e:	4620      	mov	r0, r4
 8015550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015554:	08018fad 	.word	0x08018fad
 8015558:	08018fbe 	.word	0x08018fbe

0801555c <__s2b>:
 801555c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015560:	460c      	mov	r4, r1
 8015562:	4615      	mov	r5, r2
 8015564:	461f      	mov	r7, r3
 8015566:	2209      	movs	r2, #9
 8015568:	3308      	adds	r3, #8
 801556a:	4606      	mov	r6, r0
 801556c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015570:	2100      	movs	r1, #0
 8015572:	2201      	movs	r2, #1
 8015574:	429a      	cmp	r2, r3
 8015576:	db09      	blt.n	801558c <__s2b+0x30>
 8015578:	4630      	mov	r0, r6
 801557a:	f7ff ff47 	bl	801540c <_Balloc>
 801557e:	b940      	cbnz	r0, 8015592 <__s2b+0x36>
 8015580:	4602      	mov	r2, r0
 8015582:	4b19      	ldr	r3, [pc, #100]	@ (80155e8 <__s2b+0x8c>)
 8015584:	4819      	ldr	r0, [pc, #100]	@ (80155ec <__s2b+0x90>)
 8015586:	21d3      	movs	r1, #211	@ 0xd3
 8015588:	f001 fe86 	bl	8017298 <__assert_func>
 801558c:	0052      	lsls	r2, r2, #1
 801558e:	3101      	adds	r1, #1
 8015590:	e7f0      	b.n	8015574 <__s2b+0x18>
 8015592:	9b08      	ldr	r3, [sp, #32]
 8015594:	6143      	str	r3, [r0, #20]
 8015596:	2d09      	cmp	r5, #9
 8015598:	f04f 0301 	mov.w	r3, #1
 801559c:	6103      	str	r3, [r0, #16]
 801559e:	dd16      	ble.n	80155ce <__s2b+0x72>
 80155a0:	f104 0909 	add.w	r9, r4, #9
 80155a4:	46c8      	mov	r8, r9
 80155a6:	442c      	add	r4, r5
 80155a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80155ac:	4601      	mov	r1, r0
 80155ae:	3b30      	subs	r3, #48	@ 0x30
 80155b0:	220a      	movs	r2, #10
 80155b2:	4630      	mov	r0, r6
 80155b4:	f7ff ff8c 	bl	80154d0 <__multadd>
 80155b8:	45a0      	cmp	r8, r4
 80155ba:	d1f5      	bne.n	80155a8 <__s2b+0x4c>
 80155bc:	f1a5 0408 	sub.w	r4, r5, #8
 80155c0:	444c      	add	r4, r9
 80155c2:	1b2d      	subs	r5, r5, r4
 80155c4:	1963      	adds	r3, r4, r5
 80155c6:	42bb      	cmp	r3, r7
 80155c8:	db04      	blt.n	80155d4 <__s2b+0x78>
 80155ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155ce:	340a      	adds	r4, #10
 80155d0:	2509      	movs	r5, #9
 80155d2:	e7f6      	b.n	80155c2 <__s2b+0x66>
 80155d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80155d8:	4601      	mov	r1, r0
 80155da:	3b30      	subs	r3, #48	@ 0x30
 80155dc:	220a      	movs	r2, #10
 80155de:	4630      	mov	r0, r6
 80155e0:	f7ff ff76 	bl	80154d0 <__multadd>
 80155e4:	e7ee      	b.n	80155c4 <__s2b+0x68>
 80155e6:	bf00      	nop
 80155e8:	08018fad 	.word	0x08018fad
 80155ec:	08018fbe 	.word	0x08018fbe

080155f0 <__hi0bits>:
 80155f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80155f4:	4603      	mov	r3, r0
 80155f6:	bf36      	itet	cc
 80155f8:	0403      	lslcc	r3, r0, #16
 80155fa:	2000      	movcs	r0, #0
 80155fc:	2010      	movcc	r0, #16
 80155fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015602:	bf3c      	itt	cc
 8015604:	021b      	lslcc	r3, r3, #8
 8015606:	3008      	addcc	r0, #8
 8015608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801560c:	bf3c      	itt	cc
 801560e:	011b      	lslcc	r3, r3, #4
 8015610:	3004      	addcc	r0, #4
 8015612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015616:	bf3c      	itt	cc
 8015618:	009b      	lslcc	r3, r3, #2
 801561a:	3002      	addcc	r0, #2
 801561c:	2b00      	cmp	r3, #0
 801561e:	db05      	blt.n	801562c <__hi0bits+0x3c>
 8015620:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015624:	f100 0001 	add.w	r0, r0, #1
 8015628:	bf08      	it	eq
 801562a:	2020      	moveq	r0, #32
 801562c:	4770      	bx	lr

0801562e <__lo0bits>:
 801562e:	6803      	ldr	r3, [r0, #0]
 8015630:	4602      	mov	r2, r0
 8015632:	f013 0007 	ands.w	r0, r3, #7
 8015636:	d00b      	beq.n	8015650 <__lo0bits+0x22>
 8015638:	07d9      	lsls	r1, r3, #31
 801563a:	d421      	bmi.n	8015680 <__lo0bits+0x52>
 801563c:	0798      	lsls	r0, r3, #30
 801563e:	bf49      	itett	mi
 8015640:	085b      	lsrmi	r3, r3, #1
 8015642:	089b      	lsrpl	r3, r3, #2
 8015644:	2001      	movmi	r0, #1
 8015646:	6013      	strmi	r3, [r2, #0]
 8015648:	bf5c      	itt	pl
 801564a:	6013      	strpl	r3, [r2, #0]
 801564c:	2002      	movpl	r0, #2
 801564e:	4770      	bx	lr
 8015650:	b299      	uxth	r1, r3
 8015652:	b909      	cbnz	r1, 8015658 <__lo0bits+0x2a>
 8015654:	0c1b      	lsrs	r3, r3, #16
 8015656:	2010      	movs	r0, #16
 8015658:	b2d9      	uxtb	r1, r3
 801565a:	b909      	cbnz	r1, 8015660 <__lo0bits+0x32>
 801565c:	3008      	adds	r0, #8
 801565e:	0a1b      	lsrs	r3, r3, #8
 8015660:	0719      	lsls	r1, r3, #28
 8015662:	bf04      	itt	eq
 8015664:	091b      	lsreq	r3, r3, #4
 8015666:	3004      	addeq	r0, #4
 8015668:	0799      	lsls	r1, r3, #30
 801566a:	bf04      	itt	eq
 801566c:	089b      	lsreq	r3, r3, #2
 801566e:	3002      	addeq	r0, #2
 8015670:	07d9      	lsls	r1, r3, #31
 8015672:	d403      	bmi.n	801567c <__lo0bits+0x4e>
 8015674:	085b      	lsrs	r3, r3, #1
 8015676:	f100 0001 	add.w	r0, r0, #1
 801567a:	d003      	beq.n	8015684 <__lo0bits+0x56>
 801567c:	6013      	str	r3, [r2, #0]
 801567e:	4770      	bx	lr
 8015680:	2000      	movs	r0, #0
 8015682:	4770      	bx	lr
 8015684:	2020      	movs	r0, #32
 8015686:	4770      	bx	lr

08015688 <__i2b>:
 8015688:	b510      	push	{r4, lr}
 801568a:	460c      	mov	r4, r1
 801568c:	2101      	movs	r1, #1
 801568e:	f7ff febd 	bl	801540c <_Balloc>
 8015692:	4602      	mov	r2, r0
 8015694:	b928      	cbnz	r0, 80156a2 <__i2b+0x1a>
 8015696:	4b05      	ldr	r3, [pc, #20]	@ (80156ac <__i2b+0x24>)
 8015698:	4805      	ldr	r0, [pc, #20]	@ (80156b0 <__i2b+0x28>)
 801569a:	f240 1145 	movw	r1, #325	@ 0x145
 801569e:	f001 fdfb 	bl	8017298 <__assert_func>
 80156a2:	2301      	movs	r3, #1
 80156a4:	6144      	str	r4, [r0, #20]
 80156a6:	6103      	str	r3, [r0, #16]
 80156a8:	bd10      	pop	{r4, pc}
 80156aa:	bf00      	nop
 80156ac:	08018fad 	.word	0x08018fad
 80156b0:	08018fbe 	.word	0x08018fbe

080156b4 <__multiply>:
 80156b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156b8:	4614      	mov	r4, r2
 80156ba:	690a      	ldr	r2, [r1, #16]
 80156bc:	6923      	ldr	r3, [r4, #16]
 80156be:	429a      	cmp	r2, r3
 80156c0:	bfa8      	it	ge
 80156c2:	4623      	movge	r3, r4
 80156c4:	460f      	mov	r7, r1
 80156c6:	bfa4      	itt	ge
 80156c8:	460c      	movge	r4, r1
 80156ca:	461f      	movge	r7, r3
 80156cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80156d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80156d4:	68a3      	ldr	r3, [r4, #8]
 80156d6:	6861      	ldr	r1, [r4, #4]
 80156d8:	eb0a 0609 	add.w	r6, sl, r9
 80156dc:	42b3      	cmp	r3, r6
 80156de:	b085      	sub	sp, #20
 80156e0:	bfb8      	it	lt
 80156e2:	3101      	addlt	r1, #1
 80156e4:	f7ff fe92 	bl	801540c <_Balloc>
 80156e8:	b930      	cbnz	r0, 80156f8 <__multiply+0x44>
 80156ea:	4602      	mov	r2, r0
 80156ec:	4b44      	ldr	r3, [pc, #272]	@ (8015800 <__multiply+0x14c>)
 80156ee:	4845      	ldr	r0, [pc, #276]	@ (8015804 <__multiply+0x150>)
 80156f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80156f4:	f001 fdd0 	bl	8017298 <__assert_func>
 80156f8:	f100 0514 	add.w	r5, r0, #20
 80156fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015700:	462b      	mov	r3, r5
 8015702:	2200      	movs	r2, #0
 8015704:	4543      	cmp	r3, r8
 8015706:	d321      	bcc.n	801574c <__multiply+0x98>
 8015708:	f107 0114 	add.w	r1, r7, #20
 801570c:	f104 0214 	add.w	r2, r4, #20
 8015710:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015714:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015718:	9302      	str	r3, [sp, #8]
 801571a:	1b13      	subs	r3, r2, r4
 801571c:	3b15      	subs	r3, #21
 801571e:	f023 0303 	bic.w	r3, r3, #3
 8015722:	3304      	adds	r3, #4
 8015724:	f104 0715 	add.w	r7, r4, #21
 8015728:	42ba      	cmp	r2, r7
 801572a:	bf38      	it	cc
 801572c:	2304      	movcc	r3, #4
 801572e:	9301      	str	r3, [sp, #4]
 8015730:	9b02      	ldr	r3, [sp, #8]
 8015732:	9103      	str	r1, [sp, #12]
 8015734:	428b      	cmp	r3, r1
 8015736:	d80c      	bhi.n	8015752 <__multiply+0x9e>
 8015738:	2e00      	cmp	r6, #0
 801573a:	dd03      	ble.n	8015744 <__multiply+0x90>
 801573c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015740:	2b00      	cmp	r3, #0
 8015742:	d05b      	beq.n	80157fc <__multiply+0x148>
 8015744:	6106      	str	r6, [r0, #16]
 8015746:	b005      	add	sp, #20
 8015748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801574c:	f843 2b04 	str.w	r2, [r3], #4
 8015750:	e7d8      	b.n	8015704 <__multiply+0x50>
 8015752:	f8b1 a000 	ldrh.w	sl, [r1]
 8015756:	f1ba 0f00 	cmp.w	sl, #0
 801575a:	d024      	beq.n	80157a6 <__multiply+0xf2>
 801575c:	f104 0e14 	add.w	lr, r4, #20
 8015760:	46a9      	mov	r9, r5
 8015762:	f04f 0c00 	mov.w	ip, #0
 8015766:	f85e 7b04 	ldr.w	r7, [lr], #4
 801576a:	f8d9 3000 	ldr.w	r3, [r9]
 801576e:	fa1f fb87 	uxth.w	fp, r7
 8015772:	b29b      	uxth	r3, r3
 8015774:	fb0a 330b 	mla	r3, sl, fp, r3
 8015778:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801577c:	f8d9 7000 	ldr.w	r7, [r9]
 8015780:	4463      	add	r3, ip
 8015782:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015786:	fb0a c70b 	mla	r7, sl, fp, ip
 801578a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801578e:	b29b      	uxth	r3, r3
 8015790:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015794:	4572      	cmp	r2, lr
 8015796:	f849 3b04 	str.w	r3, [r9], #4
 801579a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801579e:	d8e2      	bhi.n	8015766 <__multiply+0xb2>
 80157a0:	9b01      	ldr	r3, [sp, #4]
 80157a2:	f845 c003 	str.w	ip, [r5, r3]
 80157a6:	9b03      	ldr	r3, [sp, #12]
 80157a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80157ac:	3104      	adds	r1, #4
 80157ae:	f1b9 0f00 	cmp.w	r9, #0
 80157b2:	d021      	beq.n	80157f8 <__multiply+0x144>
 80157b4:	682b      	ldr	r3, [r5, #0]
 80157b6:	f104 0c14 	add.w	ip, r4, #20
 80157ba:	46ae      	mov	lr, r5
 80157bc:	f04f 0a00 	mov.w	sl, #0
 80157c0:	f8bc b000 	ldrh.w	fp, [ip]
 80157c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80157c8:	fb09 770b 	mla	r7, r9, fp, r7
 80157cc:	4457      	add	r7, sl
 80157ce:	b29b      	uxth	r3, r3
 80157d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80157d4:	f84e 3b04 	str.w	r3, [lr], #4
 80157d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80157dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80157e0:	f8be 3000 	ldrh.w	r3, [lr]
 80157e4:	fb09 330a 	mla	r3, r9, sl, r3
 80157e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80157ec:	4562      	cmp	r2, ip
 80157ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80157f2:	d8e5      	bhi.n	80157c0 <__multiply+0x10c>
 80157f4:	9f01      	ldr	r7, [sp, #4]
 80157f6:	51eb      	str	r3, [r5, r7]
 80157f8:	3504      	adds	r5, #4
 80157fa:	e799      	b.n	8015730 <__multiply+0x7c>
 80157fc:	3e01      	subs	r6, #1
 80157fe:	e79b      	b.n	8015738 <__multiply+0x84>
 8015800:	08018fad 	.word	0x08018fad
 8015804:	08018fbe 	.word	0x08018fbe

08015808 <__pow5mult>:
 8015808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801580c:	4615      	mov	r5, r2
 801580e:	f012 0203 	ands.w	r2, r2, #3
 8015812:	4607      	mov	r7, r0
 8015814:	460e      	mov	r6, r1
 8015816:	d007      	beq.n	8015828 <__pow5mult+0x20>
 8015818:	4c25      	ldr	r4, [pc, #148]	@ (80158b0 <__pow5mult+0xa8>)
 801581a:	3a01      	subs	r2, #1
 801581c:	2300      	movs	r3, #0
 801581e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015822:	f7ff fe55 	bl	80154d0 <__multadd>
 8015826:	4606      	mov	r6, r0
 8015828:	10ad      	asrs	r5, r5, #2
 801582a:	d03d      	beq.n	80158a8 <__pow5mult+0xa0>
 801582c:	69fc      	ldr	r4, [r7, #28]
 801582e:	b97c      	cbnz	r4, 8015850 <__pow5mult+0x48>
 8015830:	2010      	movs	r0, #16
 8015832:	f7fd fd35 	bl	80132a0 <malloc>
 8015836:	4602      	mov	r2, r0
 8015838:	61f8      	str	r0, [r7, #28]
 801583a:	b928      	cbnz	r0, 8015848 <__pow5mult+0x40>
 801583c:	4b1d      	ldr	r3, [pc, #116]	@ (80158b4 <__pow5mult+0xac>)
 801583e:	481e      	ldr	r0, [pc, #120]	@ (80158b8 <__pow5mult+0xb0>)
 8015840:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015844:	f001 fd28 	bl	8017298 <__assert_func>
 8015848:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801584c:	6004      	str	r4, [r0, #0]
 801584e:	60c4      	str	r4, [r0, #12]
 8015850:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015854:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015858:	b94c      	cbnz	r4, 801586e <__pow5mult+0x66>
 801585a:	f240 2171 	movw	r1, #625	@ 0x271
 801585e:	4638      	mov	r0, r7
 8015860:	f7ff ff12 	bl	8015688 <__i2b>
 8015864:	2300      	movs	r3, #0
 8015866:	f8c8 0008 	str.w	r0, [r8, #8]
 801586a:	4604      	mov	r4, r0
 801586c:	6003      	str	r3, [r0, #0]
 801586e:	f04f 0900 	mov.w	r9, #0
 8015872:	07eb      	lsls	r3, r5, #31
 8015874:	d50a      	bpl.n	801588c <__pow5mult+0x84>
 8015876:	4631      	mov	r1, r6
 8015878:	4622      	mov	r2, r4
 801587a:	4638      	mov	r0, r7
 801587c:	f7ff ff1a 	bl	80156b4 <__multiply>
 8015880:	4631      	mov	r1, r6
 8015882:	4680      	mov	r8, r0
 8015884:	4638      	mov	r0, r7
 8015886:	f7ff fe01 	bl	801548c <_Bfree>
 801588a:	4646      	mov	r6, r8
 801588c:	106d      	asrs	r5, r5, #1
 801588e:	d00b      	beq.n	80158a8 <__pow5mult+0xa0>
 8015890:	6820      	ldr	r0, [r4, #0]
 8015892:	b938      	cbnz	r0, 80158a4 <__pow5mult+0x9c>
 8015894:	4622      	mov	r2, r4
 8015896:	4621      	mov	r1, r4
 8015898:	4638      	mov	r0, r7
 801589a:	f7ff ff0b 	bl	80156b4 <__multiply>
 801589e:	6020      	str	r0, [r4, #0]
 80158a0:	f8c0 9000 	str.w	r9, [r0]
 80158a4:	4604      	mov	r4, r0
 80158a6:	e7e4      	b.n	8015872 <__pow5mult+0x6a>
 80158a8:	4630      	mov	r0, r6
 80158aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158ae:	bf00      	nop
 80158b0:	08019018 	.word	0x08019018
 80158b4:	08018f3e 	.word	0x08018f3e
 80158b8:	08018fbe 	.word	0x08018fbe

080158bc <__lshift>:
 80158bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158c0:	460c      	mov	r4, r1
 80158c2:	6849      	ldr	r1, [r1, #4]
 80158c4:	6923      	ldr	r3, [r4, #16]
 80158c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80158ca:	68a3      	ldr	r3, [r4, #8]
 80158cc:	4607      	mov	r7, r0
 80158ce:	4691      	mov	r9, r2
 80158d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80158d4:	f108 0601 	add.w	r6, r8, #1
 80158d8:	42b3      	cmp	r3, r6
 80158da:	db0b      	blt.n	80158f4 <__lshift+0x38>
 80158dc:	4638      	mov	r0, r7
 80158de:	f7ff fd95 	bl	801540c <_Balloc>
 80158e2:	4605      	mov	r5, r0
 80158e4:	b948      	cbnz	r0, 80158fa <__lshift+0x3e>
 80158e6:	4602      	mov	r2, r0
 80158e8:	4b28      	ldr	r3, [pc, #160]	@ (801598c <__lshift+0xd0>)
 80158ea:	4829      	ldr	r0, [pc, #164]	@ (8015990 <__lshift+0xd4>)
 80158ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80158f0:	f001 fcd2 	bl	8017298 <__assert_func>
 80158f4:	3101      	adds	r1, #1
 80158f6:	005b      	lsls	r3, r3, #1
 80158f8:	e7ee      	b.n	80158d8 <__lshift+0x1c>
 80158fa:	2300      	movs	r3, #0
 80158fc:	f100 0114 	add.w	r1, r0, #20
 8015900:	f100 0210 	add.w	r2, r0, #16
 8015904:	4618      	mov	r0, r3
 8015906:	4553      	cmp	r3, sl
 8015908:	db33      	blt.n	8015972 <__lshift+0xb6>
 801590a:	6920      	ldr	r0, [r4, #16]
 801590c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015910:	f104 0314 	add.w	r3, r4, #20
 8015914:	f019 091f 	ands.w	r9, r9, #31
 8015918:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801591c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015920:	d02b      	beq.n	801597a <__lshift+0xbe>
 8015922:	f1c9 0e20 	rsb	lr, r9, #32
 8015926:	468a      	mov	sl, r1
 8015928:	2200      	movs	r2, #0
 801592a:	6818      	ldr	r0, [r3, #0]
 801592c:	fa00 f009 	lsl.w	r0, r0, r9
 8015930:	4310      	orrs	r0, r2
 8015932:	f84a 0b04 	str.w	r0, [sl], #4
 8015936:	f853 2b04 	ldr.w	r2, [r3], #4
 801593a:	459c      	cmp	ip, r3
 801593c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015940:	d8f3      	bhi.n	801592a <__lshift+0x6e>
 8015942:	ebac 0304 	sub.w	r3, ip, r4
 8015946:	3b15      	subs	r3, #21
 8015948:	f023 0303 	bic.w	r3, r3, #3
 801594c:	3304      	adds	r3, #4
 801594e:	f104 0015 	add.w	r0, r4, #21
 8015952:	4584      	cmp	ip, r0
 8015954:	bf38      	it	cc
 8015956:	2304      	movcc	r3, #4
 8015958:	50ca      	str	r2, [r1, r3]
 801595a:	b10a      	cbz	r2, 8015960 <__lshift+0xa4>
 801595c:	f108 0602 	add.w	r6, r8, #2
 8015960:	3e01      	subs	r6, #1
 8015962:	4638      	mov	r0, r7
 8015964:	612e      	str	r6, [r5, #16]
 8015966:	4621      	mov	r1, r4
 8015968:	f7ff fd90 	bl	801548c <_Bfree>
 801596c:	4628      	mov	r0, r5
 801596e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015972:	f842 0f04 	str.w	r0, [r2, #4]!
 8015976:	3301      	adds	r3, #1
 8015978:	e7c5      	b.n	8015906 <__lshift+0x4a>
 801597a:	3904      	subs	r1, #4
 801597c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015980:	f841 2f04 	str.w	r2, [r1, #4]!
 8015984:	459c      	cmp	ip, r3
 8015986:	d8f9      	bhi.n	801597c <__lshift+0xc0>
 8015988:	e7ea      	b.n	8015960 <__lshift+0xa4>
 801598a:	bf00      	nop
 801598c:	08018fad 	.word	0x08018fad
 8015990:	08018fbe 	.word	0x08018fbe

08015994 <__mcmp>:
 8015994:	690a      	ldr	r2, [r1, #16]
 8015996:	4603      	mov	r3, r0
 8015998:	6900      	ldr	r0, [r0, #16]
 801599a:	1a80      	subs	r0, r0, r2
 801599c:	b530      	push	{r4, r5, lr}
 801599e:	d10e      	bne.n	80159be <__mcmp+0x2a>
 80159a0:	3314      	adds	r3, #20
 80159a2:	3114      	adds	r1, #20
 80159a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80159a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80159ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80159b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80159b4:	4295      	cmp	r5, r2
 80159b6:	d003      	beq.n	80159c0 <__mcmp+0x2c>
 80159b8:	d205      	bcs.n	80159c6 <__mcmp+0x32>
 80159ba:	f04f 30ff 	mov.w	r0, #4294967295
 80159be:	bd30      	pop	{r4, r5, pc}
 80159c0:	42a3      	cmp	r3, r4
 80159c2:	d3f3      	bcc.n	80159ac <__mcmp+0x18>
 80159c4:	e7fb      	b.n	80159be <__mcmp+0x2a>
 80159c6:	2001      	movs	r0, #1
 80159c8:	e7f9      	b.n	80159be <__mcmp+0x2a>
	...

080159cc <__mdiff>:
 80159cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159d0:	4689      	mov	r9, r1
 80159d2:	4606      	mov	r6, r0
 80159d4:	4611      	mov	r1, r2
 80159d6:	4648      	mov	r0, r9
 80159d8:	4614      	mov	r4, r2
 80159da:	f7ff ffdb 	bl	8015994 <__mcmp>
 80159de:	1e05      	subs	r5, r0, #0
 80159e0:	d112      	bne.n	8015a08 <__mdiff+0x3c>
 80159e2:	4629      	mov	r1, r5
 80159e4:	4630      	mov	r0, r6
 80159e6:	f7ff fd11 	bl	801540c <_Balloc>
 80159ea:	4602      	mov	r2, r0
 80159ec:	b928      	cbnz	r0, 80159fa <__mdiff+0x2e>
 80159ee:	4b3f      	ldr	r3, [pc, #252]	@ (8015aec <__mdiff+0x120>)
 80159f0:	f240 2137 	movw	r1, #567	@ 0x237
 80159f4:	483e      	ldr	r0, [pc, #248]	@ (8015af0 <__mdiff+0x124>)
 80159f6:	f001 fc4f 	bl	8017298 <__assert_func>
 80159fa:	2301      	movs	r3, #1
 80159fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015a00:	4610      	mov	r0, r2
 8015a02:	b003      	add	sp, #12
 8015a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a08:	bfbc      	itt	lt
 8015a0a:	464b      	movlt	r3, r9
 8015a0c:	46a1      	movlt	r9, r4
 8015a0e:	4630      	mov	r0, r6
 8015a10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015a14:	bfba      	itte	lt
 8015a16:	461c      	movlt	r4, r3
 8015a18:	2501      	movlt	r5, #1
 8015a1a:	2500      	movge	r5, #0
 8015a1c:	f7ff fcf6 	bl	801540c <_Balloc>
 8015a20:	4602      	mov	r2, r0
 8015a22:	b918      	cbnz	r0, 8015a2c <__mdiff+0x60>
 8015a24:	4b31      	ldr	r3, [pc, #196]	@ (8015aec <__mdiff+0x120>)
 8015a26:	f240 2145 	movw	r1, #581	@ 0x245
 8015a2a:	e7e3      	b.n	80159f4 <__mdiff+0x28>
 8015a2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015a30:	6926      	ldr	r6, [r4, #16]
 8015a32:	60c5      	str	r5, [r0, #12]
 8015a34:	f109 0310 	add.w	r3, r9, #16
 8015a38:	f109 0514 	add.w	r5, r9, #20
 8015a3c:	f104 0e14 	add.w	lr, r4, #20
 8015a40:	f100 0b14 	add.w	fp, r0, #20
 8015a44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015a48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015a4c:	9301      	str	r3, [sp, #4]
 8015a4e:	46d9      	mov	r9, fp
 8015a50:	f04f 0c00 	mov.w	ip, #0
 8015a54:	9b01      	ldr	r3, [sp, #4]
 8015a56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015a5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015a5e:	9301      	str	r3, [sp, #4]
 8015a60:	fa1f f38a 	uxth.w	r3, sl
 8015a64:	4619      	mov	r1, r3
 8015a66:	b283      	uxth	r3, r0
 8015a68:	1acb      	subs	r3, r1, r3
 8015a6a:	0c00      	lsrs	r0, r0, #16
 8015a6c:	4463      	add	r3, ip
 8015a6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015a72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015a76:	b29b      	uxth	r3, r3
 8015a78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015a7c:	4576      	cmp	r6, lr
 8015a7e:	f849 3b04 	str.w	r3, [r9], #4
 8015a82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015a86:	d8e5      	bhi.n	8015a54 <__mdiff+0x88>
 8015a88:	1b33      	subs	r3, r6, r4
 8015a8a:	3b15      	subs	r3, #21
 8015a8c:	f023 0303 	bic.w	r3, r3, #3
 8015a90:	3415      	adds	r4, #21
 8015a92:	3304      	adds	r3, #4
 8015a94:	42a6      	cmp	r6, r4
 8015a96:	bf38      	it	cc
 8015a98:	2304      	movcc	r3, #4
 8015a9a:	441d      	add	r5, r3
 8015a9c:	445b      	add	r3, fp
 8015a9e:	461e      	mov	r6, r3
 8015aa0:	462c      	mov	r4, r5
 8015aa2:	4544      	cmp	r4, r8
 8015aa4:	d30e      	bcc.n	8015ac4 <__mdiff+0xf8>
 8015aa6:	f108 0103 	add.w	r1, r8, #3
 8015aaa:	1b49      	subs	r1, r1, r5
 8015aac:	f021 0103 	bic.w	r1, r1, #3
 8015ab0:	3d03      	subs	r5, #3
 8015ab2:	45a8      	cmp	r8, r5
 8015ab4:	bf38      	it	cc
 8015ab6:	2100      	movcc	r1, #0
 8015ab8:	440b      	add	r3, r1
 8015aba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015abe:	b191      	cbz	r1, 8015ae6 <__mdiff+0x11a>
 8015ac0:	6117      	str	r7, [r2, #16]
 8015ac2:	e79d      	b.n	8015a00 <__mdiff+0x34>
 8015ac4:	f854 1b04 	ldr.w	r1, [r4], #4
 8015ac8:	46e6      	mov	lr, ip
 8015aca:	0c08      	lsrs	r0, r1, #16
 8015acc:	fa1c fc81 	uxtah	ip, ip, r1
 8015ad0:	4471      	add	r1, lr
 8015ad2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015ad6:	b289      	uxth	r1, r1
 8015ad8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015adc:	f846 1b04 	str.w	r1, [r6], #4
 8015ae0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015ae4:	e7dd      	b.n	8015aa2 <__mdiff+0xd6>
 8015ae6:	3f01      	subs	r7, #1
 8015ae8:	e7e7      	b.n	8015aba <__mdiff+0xee>
 8015aea:	bf00      	nop
 8015aec:	08018fad 	.word	0x08018fad
 8015af0:	08018fbe 	.word	0x08018fbe

08015af4 <__ulp>:
 8015af4:	b082      	sub	sp, #8
 8015af6:	ed8d 0b00 	vstr	d0, [sp]
 8015afa:	9a01      	ldr	r2, [sp, #4]
 8015afc:	4b0f      	ldr	r3, [pc, #60]	@ (8015b3c <__ulp+0x48>)
 8015afe:	4013      	ands	r3, r2
 8015b00:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	dc08      	bgt.n	8015b1a <__ulp+0x26>
 8015b08:	425b      	negs	r3, r3
 8015b0a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8015b0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015b12:	da04      	bge.n	8015b1e <__ulp+0x2a>
 8015b14:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8015b18:	4113      	asrs	r3, r2
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	e008      	b.n	8015b30 <__ulp+0x3c>
 8015b1e:	f1a2 0314 	sub.w	r3, r2, #20
 8015b22:	2b1e      	cmp	r3, #30
 8015b24:	bfda      	itte	le
 8015b26:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8015b2a:	40da      	lsrle	r2, r3
 8015b2c:	2201      	movgt	r2, #1
 8015b2e:	2300      	movs	r3, #0
 8015b30:	4619      	mov	r1, r3
 8015b32:	4610      	mov	r0, r2
 8015b34:	ec41 0b10 	vmov	d0, r0, r1
 8015b38:	b002      	add	sp, #8
 8015b3a:	4770      	bx	lr
 8015b3c:	7ff00000 	.word	0x7ff00000

08015b40 <__b2d>:
 8015b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b44:	6906      	ldr	r6, [r0, #16]
 8015b46:	f100 0814 	add.w	r8, r0, #20
 8015b4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015b4e:	1f37      	subs	r7, r6, #4
 8015b50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015b54:	4610      	mov	r0, r2
 8015b56:	f7ff fd4b 	bl	80155f0 <__hi0bits>
 8015b5a:	f1c0 0320 	rsb	r3, r0, #32
 8015b5e:	280a      	cmp	r0, #10
 8015b60:	600b      	str	r3, [r1, #0]
 8015b62:	491b      	ldr	r1, [pc, #108]	@ (8015bd0 <__b2d+0x90>)
 8015b64:	dc15      	bgt.n	8015b92 <__b2d+0x52>
 8015b66:	f1c0 0c0b 	rsb	ip, r0, #11
 8015b6a:	fa22 f30c 	lsr.w	r3, r2, ip
 8015b6e:	45b8      	cmp	r8, r7
 8015b70:	ea43 0501 	orr.w	r5, r3, r1
 8015b74:	bf34      	ite	cc
 8015b76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015b7a:	2300      	movcs	r3, #0
 8015b7c:	3015      	adds	r0, #21
 8015b7e:	fa02 f000 	lsl.w	r0, r2, r0
 8015b82:	fa23 f30c 	lsr.w	r3, r3, ip
 8015b86:	4303      	orrs	r3, r0
 8015b88:	461c      	mov	r4, r3
 8015b8a:	ec45 4b10 	vmov	d0, r4, r5
 8015b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b92:	45b8      	cmp	r8, r7
 8015b94:	bf3a      	itte	cc
 8015b96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015b9a:	f1a6 0708 	subcc.w	r7, r6, #8
 8015b9e:	2300      	movcs	r3, #0
 8015ba0:	380b      	subs	r0, #11
 8015ba2:	d012      	beq.n	8015bca <__b2d+0x8a>
 8015ba4:	f1c0 0120 	rsb	r1, r0, #32
 8015ba8:	fa23 f401 	lsr.w	r4, r3, r1
 8015bac:	4082      	lsls	r2, r0
 8015bae:	4322      	orrs	r2, r4
 8015bb0:	4547      	cmp	r7, r8
 8015bb2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8015bb6:	bf8c      	ite	hi
 8015bb8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015bbc:	2200      	movls	r2, #0
 8015bbe:	4083      	lsls	r3, r0
 8015bc0:	40ca      	lsrs	r2, r1
 8015bc2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8015bc6:	4313      	orrs	r3, r2
 8015bc8:	e7de      	b.n	8015b88 <__b2d+0x48>
 8015bca:	ea42 0501 	orr.w	r5, r2, r1
 8015bce:	e7db      	b.n	8015b88 <__b2d+0x48>
 8015bd0:	3ff00000 	.word	0x3ff00000

08015bd4 <__d2b>:
 8015bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015bd8:	460f      	mov	r7, r1
 8015bda:	2101      	movs	r1, #1
 8015bdc:	ec59 8b10 	vmov	r8, r9, d0
 8015be0:	4616      	mov	r6, r2
 8015be2:	f7ff fc13 	bl	801540c <_Balloc>
 8015be6:	4604      	mov	r4, r0
 8015be8:	b930      	cbnz	r0, 8015bf8 <__d2b+0x24>
 8015bea:	4602      	mov	r2, r0
 8015bec:	4b23      	ldr	r3, [pc, #140]	@ (8015c7c <__d2b+0xa8>)
 8015bee:	4824      	ldr	r0, [pc, #144]	@ (8015c80 <__d2b+0xac>)
 8015bf0:	f240 310f 	movw	r1, #783	@ 0x30f
 8015bf4:	f001 fb50 	bl	8017298 <__assert_func>
 8015bf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015bfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015c00:	b10d      	cbz	r5, 8015c06 <__d2b+0x32>
 8015c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015c06:	9301      	str	r3, [sp, #4]
 8015c08:	f1b8 0300 	subs.w	r3, r8, #0
 8015c0c:	d023      	beq.n	8015c56 <__d2b+0x82>
 8015c0e:	4668      	mov	r0, sp
 8015c10:	9300      	str	r3, [sp, #0]
 8015c12:	f7ff fd0c 	bl	801562e <__lo0bits>
 8015c16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015c1a:	b1d0      	cbz	r0, 8015c52 <__d2b+0x7e>
 8015c1c:	f1c0 0320 	rsb	r3, r0, #32
 8015c20:	fa02 f303 	lsl.w	r3, r2, r3
 8015c24:	430b      	orrs	r3, r1
 8015c26:	40c2      	lsrs	r2, r0
 8015c28:	6163      	str	r3, [r4, #20]
 8015c2a:	9201      	str	r2, [sp, #4]
 8015c2c:	9b01      	ldr	r3, [sp, #4]
 8015c2e:	61a3      	str	r3, [r4, #24]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	bf0c      	ite	eq
 8015c34:	2201      	moveq	r2, #1
 8015c36:	2202      	movne	r2, #2
 8015c38:	6122      	str	r2, [r4, #16]
 8015c3a:	b1a5      	cbz	r5, 8015c66 <__d2b+0x92>
 8015c3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015c40:	4405      	add	r5, r0
 8015c42:	603d      	str	r5, [r7, #0]
 8015c44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015c48:	6030      	str	r0, [r6, #0]
 8015c4a:	4620      	mov	r0, r4
 8015c4c:	b003      	add	sp, #12
 8015c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c52:	6161      	str	r1, [r4, #20]
 8015c54:	e7ea      	b.n	8015c2c <__d2b+0x58>
 8015c56:	a801      	add	r0, sp, #4
 8015c58:	f7ff fce9 	bl	801562e <__lo0bits>
 8015c5c:	9b01      	ldr	r3, [sp, #4]
 8015c5e:	6163      	str	r3, [r4, #20]
 8015c60:	3020      	adds	r0, #32
 8015c62:	2201      	movs	r2, #1
 8015c64:	e7e8      	b.n	8015c38 <__d2b+0x64>
 8015c66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015c6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015c6e:	6038      	str	r0, [r7, #0]
 8015c70:	6918      	ldr	r0, [r3, #16]
 8015c72:	f7ff fcbd 	bl	80155f0 <__hi0bits>
 8015c76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015c7a:	e7e5      	b.n	8015c48 <__d2b+0x74>
 8015c7c:	08018fad 	.word	0x08018fad
 8015c80:	08018fbe 	.word	0x08018fbe

08015c84 <__ratio>:
 8015c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c88:	b085      	sub	sp, #20
 8015c8a:	e9cd 1000 	strd	r1, r0, [sp]
 8015c8e:	a902      	add	r1, sp, #8
 8015c90:	f7ff ff56 	bl	8015b40 <__b2d>
 8015c94:	9800      	ldr	r0, [sp, #0]
 8015c96:	a903      	add	r1, sp, #12
 8015c98:	ec55 4b10 	vmov	r4, r5, d0
 8015c9c:	f7ff ff50 	bl	8015b40 <__b2d>
 8015ca0:	9b01      	ldr	r3, [sp, #4]
 8015ca2:	6919      	ldr	r1, [r3, #16]
 8015ca4:	9b00      	ldr	r3, [sp, #0]
 8015ca6:	691b      	ldr	r3, [r3, #16]
 8015ca8:	1ac9      	subs	r1, r1, r3
 8015caa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8015cae:	1a9b      	subs	r3, r3, r2
 8015cb0:	ec5b ab10 	vmov	sl, fp, d0
 8015cb4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	bfce      	itee	gt
 8015cbc:	462a      	movgt	r2, r5
 8015cbe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015cc2:	465a      	movle	r2, fp
 8015cc4:	462f      	mov	r7, r5
 8015cc6:	46d9      	mov	r9, fp
 8015cc8:	bfcc      	ite	gt
 8015cca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015cce:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8015cd2:	464b      	mov	r3, r9
 8015cd4:	4652      	mov	r2, sl
 8015cd6:	4620      	mov	r0, r4
 8015cd8:	4639      	mov	r1, r7
 8015cda:	f7ea fdbf 	bl	800085c <__aeabi_ddiv>
 8015cde:	ec41 0b10 	vmov	d0, r0, r1
 8015ce2:	b005      	add	sp, #20
 8015ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015ce8 <__copybits>:
 8015ce8:	3901      	subs	r1, #1
 8015cea:	b570      	push	{r4, r5, r6, lr}
 8015cec:	1149      	asrs	r1, r1, #5
 8015cee:	6914      	ldr	r4, [r2, #16]
 8015cf0:	3101      	adds	r1, #1
 8015cf2:	f102 0314 	add.w	r3, r2, #20
 8015cf6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015cfa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015cfe:	1f05      	subs	r5, r0, #4
 8015d00:	42a3      	cmp	r3, r4
 8015d02:	d30c      	bcc.n	8015d1e <__copybits+0x36>
 8015d04:	1aa3      	subs	r3, r4, r2
 8015d06:	3b11      	subs	r3, #17
 8015d08:	f023 0303 	bic.w	r3, r3, #3
 8015d0c:	3211      	adds	r2, #17
 8015d0e:	42a2      	cmp	r2, r4
 8015d10:	bf88      	it	hi
 8015d12:	2300      	movhi	r3, #0
 8015d14:	4418      	add	r0, r3
 8015d16:	2300      	movs	r3, #0
 8015d18:	4288      	cmp	r0, r1
 8015d1a:	d305      	bcc.n	8015d28 <__copybits+0x40>
 8015d1c:	bd70      	pop	{r4, r5, r6, pc}
 8015d1e:	f853 6b04 	ldr.w	r6, [r3], #4
 8015d22:	f845 6f04 	str.w	r6, [r5, #4]!
 8015d26:	e7eb      	b.n	8015d00 <__copybits+0x18>
 8015d28:	f840 3b04 	str.w	r3, [r0], #4
 8015d2c:	e7f4      	b.n	8015d18 <__copybits+0x30>

08015d2e <__any_on>:
 8015d2e:	f100 0214 	add.w	r2, r0, #20
 8015d32:	6900      	ldr	r0, [r0, #16]
 8015d34:	114b      	asrs	r3, r1, #5
 8015d36:	4298      	cmp	r0, r3
 8015d38:	b510      	push	{r4, lr}
 8015d3a:	db11      	blt.n	8015d60 <__any_on+0x32>
 8015d3c:	dd0a      	ble.n	8015d54 <__any_on+0x26>
 8015d3e:	f011 011f 	ands.w	r1, r1, #31
 8015d42:	d007      	beq.n	8015d54 <__any_on+0x26>
 8015d44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015d48:	fa24 f001 	lsr.w	r0, r4, r1
 8015d4c:	fa00 f101 	lsl.w	r1, r0, r1
 8015d50:	428c      	cmp	r4, r1
 8015d52:	d10b      	bne.n	8015d6c <__any_on+0x3e>
 8015d54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015d58:	4293      	cmp	r3, r2
 8015d5a:	d803      	bhi.n	8015d64 <__any_on+0x36>
 8015d5c:	2000      	movs	r0, #0
 8015d5e:	bd10      	pop	{r4, pc}
 8015d60:	4603      	mov	r3, r0
 8015d62:	e7f7      	b.n	8015d54 <__any_on+0x26>
 8015d64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015d68:	2900      	cmp	r1, #0
 8015d6a:	d0f5      	beq.n	8015d58 <__any_on+0x2a>
 8015d6c:	2001      	movs	r0, #1
 8015d6e:	e7f6      	b.n	8015d5e <__any_on+0x30>

08015d70 <sulp>:
 8015d70:	b570      	push	{r4, r5, r6, lr}
 8015d72:	4604      	mov	r4, r0
 8015d74:	460d      	mov	r5, r1
 8015d76:	ec45 4b10 	vmov	d0, r4, r5
 8015d7a:	4616      	mov	r6, r2
 8015d7c:	f7ff feba 	bl	8015af4 <__ulp>
 8015d80:	ec51 0b10 	vmov	r0, r1, d0
 8015d84:	b17e      	cbz	r6, 8015da6 <sulp+0x36>
 8015d86:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015d8a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	dd09      	ble.n	8015da6 <sulp+0x36>
 8015d92:	051b      	lsls	r3, r3, #20
 8015d94:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8015d98:	2400      	movs	r4, #0
 8015d9a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8015d9e:	4622      	mov	r2, r4
 8015da0:	462b      	mov	r3, r5
 8015da2:	f7ea fc31 	bl	8000608 <__aeabi_dmul>
 8015da6:	ec41 0b10 	vmov	d0, r0, r1
 8015daa:	bd70      	pop	{r4, r5, r6, pc}
 8015dac:	0000      	movs	r0, r0
	...

08015db0 <_strtod_l>:
 8015db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015db4:	b09f      	sub	sp, #124	@ 0x7c
 8015db6:	460c      	mov	r4, r1
 8015db8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8015dba:	2200      	movs	r2, #0
 8015dbc:	921a      	str	r2, [sp, #104]	@ 0x68
 8015dbe:	9005      	str	r0, [sp, #20]
 8015dc0:	f04f 0a00 	mov.w	sl, #0
 8015dc4:	f04f 0b00 	mov.w	fp, #0
 8015dc8:	460a      	mov	r2, r1
 8015dca:	9219      	str	r2, [sp, #100]	@ 0x64
 8015dcc:	7811      	ldrb	r1, [r2, #0]
 8015dce:	292b      	cmp	r1, #43	@ 0x2b
 8015dd0:	d04a      	beq.n	8015e68 <_strtod_l+0xb8>
 8015dd2:	d838      	bhi.n	8015e46 <_strtod_l+0x96>
 8015dd4:	290d      	cmp	r1, #13
 8015dd6:	d832      	bhi.n	8015e3e <_strtod_l+0x8e>
 8015dd8:	2908      	cmp	r1, #8
 8015dda:	d832      	bhi.n	8015e42 <_strtod_l+0x92>
 8015ddc:	2900      	cmp	r1, #0
 8015dde:	d03b      	beq.n	8015e58 <_strtod_l+0xa8>
 8015de0:	2200      	movs	r2, #0
 8015de2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015de4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8015de6:	782a      	ldrb	r2, [r5, #0]
 8015de8:	2a30      	cmp	r2, #48	@ 0x30
 8015dea:	f040 80b3 	bne.w	8015f54 <_strtod_l+0x1a4>
 8015dee:	786a      	ldrb	r2, [r5, #1]
 8015df0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015df4:	2a58      	cmp	r2, #88	@ 0x58
 8015df6:	d16e      	bne.n	8015ed6 <_strtod_l+0x126>
 8015df8:	9302      	str	r3, [sp, #8]
 8015dfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015dfc:	9301      	str	r3, [sp, #4]
 8015dfe:	ab1a      	add	r3, sp, #104	@ 0x68
 8015e00:	9300      	str	r3, [sp, #0]
 8015e02:	4a8e      	ldr	r2, [pc, #568]	@ (801603c <_strtod_l+0x28c>)
 8015e04:	9805      	ldr	r0, [sp, #20]
 8015e06:	ab1b      	add	r3, sp, #108	@ 0x6c
 8015e08:	a919      	add	r1, sp, #100	@ 0x64
 8015e0a:	f001 fadf 	bl	80173cc <__gethex>
 8015e0e:	f010 060f 	ands.w	r6, r0, #15
 8015e12:	4604      	mov	r4, r0
 8015e14:	d005      	beq.n	8015e22 <_strtod_l+0x72>
 8015e16:	2e06      	cmp	r6, #6
 8015e18:	d128      	bne.n	8015e6c <_strtod_l+0xbc>
 8015e1a:	3501      	adds	r5, #1
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	9519      	str	r5, [sp, #100]	@ 0x64
 8015e20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015e22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	f040 858e 	bne.w	8016946 <_strtod_l+0xb96>
 8015e2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015e2c:	b1cb      	cbz	r3, 8015e62 <_strtod_l+0xb2>
 8015e2e:	4652      	mov	r2, sl
 8015e30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8015e34:	ec43 2b10 	vmov	d0, r2, r3
 8015e38:	b01f      	add	sp, #124	@ 0x7c
 8015e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e3e:	2920      	cmp	r1, #32
 8015e40:	d1ce      	bne.n	8015de0 <_strtod_l+0x30>
 8015e42:	3201      	adds	r2, #1
 8015e44:	e7c1      	b.n	8015dca <_strtod_l+0x1a>
 8015e46:	292d      	cmp	r1, #45	@ 0x2d
 8015e48:	d1ca      	bne.n	8015de0 <_strtod_l+0x30>
 8015e4a:	2101      	movs	r1, #1
 8015e4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015e4e:	1c51      	adds	r1, r2, #1
 8015e50:	9119      	str	r1, [sp, #100]	@ 0x64
 8015e52:	7852      	ldrb	r2, [r2, #1]
 8015e54:	2a00      	cmp	r2, #0
 8015e56:	d1c5      	bne.n	8015de4 <_strtod_l+0x34>
 8015e58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015e5a:	9419      	str	r4, [sp, #100]	@ 0x64
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	f040 8570 	bne.w	8016942 <_strtod_l+0xb92>
 8015e62:	4652      	mov	r2, sl
 8015e64:	465b      	mov	r3, fp
 8015e66:	e7e5      	b.n	8015e34 <_strtod_l+0x84>
 8015e68:	2100      	movs	r1, #0
 8015e6a:	e7ef      	b.n	8015e4c <_strtod_l+0x9c>
 8015e6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8015e6e:	b13a      	cbz	r2, 8015e80 <_strtod_l+0xd0>
 8015e70:	2135      	movs	r1, #53	@ 0x35
 8015e72:	a81c      	add	r0, sp, #112	@ 0x70
 8015e74:	f7ff ff38 	bl	8015ce8 <__copybits>
 8015e78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015e7a:	9805      	ldr	r0, [sp, #20]
 8015e7c:	f7ff fb06 	bl	801548c <_Bfree>
 8015e80:	3e01      	subs	r6, #1
 8015e82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015e84:	2e04      	cmp	r6, #4
 8015e86:	d806      	bhi.n	8015e96 <_strtod_l+0xe6>
 8015e88:	e8df f006 	tbb	[pc, r6]
 8015e8c:	201d0314 	.word	0x201d0314
 8015e90:	14          	.byte	0x14
 8015e91:	00          	.byte	0x00
 8015e92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8015e96:	05e1      	lsls	r1, r4, #23
 8015e98:	bf48      	it	mi
 8015e9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8015e9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015ea2:	0d1b      	lsrs	r3, r3, #20
 8015ea4:	051b      	lsls	r3, r3, #20
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d1bb      	bne.n	8015e22 <_strtod_l+0x72>
 8015eaa:	f7fe fbe3 	bl	8014674 <__errno>
 8015eae:	2322      	movs	r3, #34	@ 0x22
 8015eb0:	6003      	str	r3, [r0, #0]
 8015eb2:	e7b6      	b.n	8015e22 <_strtod_l+0x72>
 8015eb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8015eb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015ebc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015ec0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015ec4:	e7e7      	b.n	8015e96 <_strtod_l+0xe6>
 8015ec6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8016044 <_strtod_l+0x294>
 8015eca:	e7e4      	b.n	8015e96 <_strtod_l+0xe6>
 8015ecc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015ed0:	f04f 3aff 	mov.w	sl, #4294967295
 8015ed4:	e7df      	b.n	8015e96 <_strtod_l+0xe6>
 8015ed6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015ed8:	1c5a      	adds	r2, r3, #1
 8015eda:	9219      	str	r2, [sp, #100]	@ 0x64
 8015edc:	785b      	ldrb	r3, [r3, #1]
 8015ede:	2b30      	cmp	r3, #48	@ 0x30
 8015ee0:	d0f9      	beq.n	8015ed6 <_strtod_l+0x126>
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d09d      	beq.n	8015e22 <_strtod_l+0x72>
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8015eea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015eec:	930c      	str	r3, [sp, #48]	@ 0x30
 8015eee:	2300      	movs	r3, #0
 8015ef0:	9308      	str	r3, [sp, #32]
 8015ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8015ef4:	461f      	mov	r7, r3
 8015ef6:	220a      	movs	r2, #10
 8015ef8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8015efa:	7805      	ldrb	r5, [r0, #0]
 8015efc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8015f00:	b2d9      	uxtb	r1, r3
 8015f02:	2909      	cmp	r1, #9
 8015f04:	d928      	bls.n	8015f58 <_strtod_l+0x1a8>
 8015f06:	494e      	ldr	r1, [pc, #312]	@ (8016040 <_strtod_l+0x290>)
 8015f08:	2201      	movs	r2, #1
 8015f0a:	f001 f979 	bl	8017200 <strncmp>
 8015f0e:	2800      	cmp	r0, #0
 8015f10:	d032      	beq.n	8015f78 <_strtod_l+0x1c8>
 8015f12:	2000      	movs	r0, #0
 8015f14:	462a      	mov	r2, r5
 8015f16:	4681      	mov	r9, r0
 8015f18:	463d      	mov	r5, r7
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	2a65      	cmp	r2, #101	@ 0x65
 8015f1e:	d001      	beq.n	8015f24 <_strtod_l+0x174>
 8015f20:	2a45      	cmp	r2, #69	@ 0x45
 8015f22:	d114      	bne.n	8015f4e <_strtod_l+0x19e>
 8015f24:	b91d      	cbnz	r5, 8015f2e <_strtod_l+0x17e>
 8015f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f28:	4302      	orrs	r2, r0
 8015f2a:	d095      	beq.n	8015e58 <_strtod_l+0xa8>
 8015f2c:	2500      	movs	r5, #0
 8015f2e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8015f30:	1c62      	adds	r2, r4, #1
 8015f32:	9219      	str	r2, [sp, #100]	@ 0x64
 8015f34:	7862      	ldrb	r2, [r4, #1]
 8015f36:	2a2b      	cmp	r2, #43	@ 0x2b
 8015f38:	d077      	beq.n	801602a <_strtod_l+0x27a>
 8015f3a:	2a2d      	cmp	r2, #45	@ 0x2d
 8015f3c:	d07b      	beq.n	8016036 <_strtod_l+0x286>
 8015f3e:	f04f 0c00 	mov.w	ip, #0
 8015f42:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015f46:	2909      	cmp	r1, #9
 8015f48:	f240 8082 	bls.w	8016050 <_strtod_l+0x2a0>
 8015f4c:	9419      	str	r4, [sp, #100]	@ 0x64
 8015f4e:	f04f 0800 	mov.w	r8, #0
 8015f52:	e0a2      	b.n	801609a <_strtod_l+0x2ea>
 8015f54:	2300      	movs	r3, #0
 8015f56:	e7c7      	b.n	8015ee8 <_strtod_l+0x138>
 8015f58:	2f08      	cmp	r7, #8
 8015f5a:	bfd5      	itete	le
 8015f5c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8015f5e:	9908      	ldrgt	r1, [sp, #32]
 8015f60:	fb02 3301 	mlale	r3, r2, r1, r3
 8015f64:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015f68:	f100 0001 	add.w	r0, r0, #1
 8015f6c:	bfd4      	ite	le
 8015f6e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8015f70:	9308      	strgt	r3, [sp, #32]
 8015f72:	3701      	adds	r7, #1
 8015f74:	9019      	str	r0, [sp, #100]	@ 0x64
 8015f76:	e7bf      	b.n	8015ef8 <_strtod_l+0x148>
 8015f78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015f7a:	1c5a      	adds	r2, r3, #1
 8015f7c:	9219      	str	r2, [sp, #100]	@ 0x64
 8015f7e:	785a      	ldrb	r2, [r3, #1]
 8015f80:	b37f      	cbz	r7, 8015fe2 <_strtod_l+0x232>
 8015f82:	4681      	mov	r9, r0
 8015f84:	463d      	mov	r5, r7
 8015f86:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8015f8a:	2b09      	cmp	r3, #9
 8015f8c:	d912      	bls.n	8015fb4 <_strtod_l+0x204>
 8015f8e:	2301      	movs	r3, #1
 8015f90:	e7c4      	b.n	8015f1c <_strtod_l+0x16c>
 8015f92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015f94:	1c5a      	adds	r2, r3, #1
 8015f96:	9219      	str	r2, [sp, #100]	@ 0x64
 8015f98:	785a      	ldrb	r2, [r3, #1]
 8015f9a:	3001      	adds	r0, #1
 8015f9c:	2a30      	cmp	r2, #48	@ 0x30
 8015f9e:	d0f8      	beq.n	8015f92 <_strtod_l+0x1e2>
 8015fa0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015fa4:	2b08      	cmp	r3, #8
 8015fa6:	f200 84d3 	bhi.w	8016950 <_strtod_l+0xba0>
 8015faa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015fac:	930c      	str	r3, [sp, #48]	@ 0x30
 8015fae:	4681      	mov	r9, r0
 8015fb0:	2000      	movs	r0, #0
 8015fb2:	4605      	mov	r5, r0
 8015fb4:	3a30      	subs	r2, #48	@ 0x30
 8015fb6:	f100 0301 	add.w	r3, r0, #1
 8015fba:	d02a      	beq.n	8016012 <_strtod_l+0x262>
 8015fbc:	4499      	add	r9, r3
 8015fbe:	eb00 0c05 	add.w	ip, r0, r5
 8015fc2:	462b      	mov	r3, r5
 8015fc4:	210a      	movs	r1, #10
 8015fc6:	4563      	cmp	r3, ip
 8015fc8:	d10d      	bne.n	8015fe6 <_strtod_l+0x236>
 8015fca:	1c69      	adds	r1, r5, #1
 8015fcc:	4401      	add	r1, r0
 8015fce:	4428      	add	r0, r5
 8015fd0:	2808      	cmp	r0, #8
 8015fd2:	dc16      	bgt.n	8016002 <_strtod_l+0x252>
 8015fd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015fd6:	230a      	movs	r3, #10
 8015fd8:	fb03 2300 	mla	r3, r3, r0, r2
 8015fdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8015fde:	2300      	movs	r3, #0
 8015fe0:	e018      	b.n	8016014 <_strtod_l+0x264>
 8015fe2:	4638      	mov	r0, r7
 8015fe4:	e7da      	b.n	8015f9c <_strtod_l+0x1ec>
 8015fe6:	2b08      	cmp	r3, #8
 8015fe8:	f103 0301 	add.w	r3, r3, #1
 8015fec:	dc03      	bgt.n	8015ff6 <_strtod_l+0x246>
 8015fee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8015ff0:	434e      	muls	r6, r1
 8015ff2:	960a      	str	r6, [sp, #40]	@ 0x28
 8015ff4:	e7e7      	b.n	8015fc6 <_strtod_l+0x216>
 8015ff6:	2b10      	cmp	r3, #16
 8015ff8:	bfde      	ittt	le
 8015ffa:	9e08      	ldrle	r6, [sp, #32]
 8015ffc:	434e      	mulle	r6, r1
 8015ffe:	9608      	strle	r6, [sp, #32]
 8016000:	e7e1      	b.n	8015fc6 <_strtod_l+0x216>
 8016002:	280f      	cmp	r0, #15
 8016004:	dceb      	bgt.n	8015fde <_strtod_l+0x22e>
 8016006:	9808      	ldr	r0, [sp, #32]
 8016008:	230a      	movs	r3, #10
 801600a:	fb03 2300 	mla	r3, r3, r0, r2
 801600e:	9308      	str	r3, [sp, #32]
 8016010:	e7e5      	b.n	8015fde <_strtod_l+0x22e>
 8016012:	4629      	mov	r1, r5
 8016014:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016016:	1c50      	adds	r0, r2, #1
 8016018:	9019      	str	r0, [sp, #100]	@ 0x64
 801601a:	7852      	ldrb	r2, [r2, #1]
 801601c:	4618      	mov	r0, r3
 801601e:	460d      	mov	r5, r1
 8016020:	e7b1      	b.n	8015f86 <_strtod_l+0x1d6>
 8016022:	f04f 0900 	mov.w	r9, #0
 8016026:	2301      	movs	r3, #1
 8016028:	e77d      	b.n	8015f26 <_strtod_l+0x176>
 801602a:	f04f 0c00 	mov.w	ip, #0
 801602e:	1ca2      	adds	r2, r4, #2
 8016030:	9219      	str	r2, [sp, #100]	@ 0x64
 8016032:	78a2      	ldrb	r2, [r4, #2]
 8016034:	e785      	b.n	8015f42 <_strtod_l+0x192>
 8016036:	f04f 0c01 	mov.w	ip, #1
 801603a:	e7f8      	b.n	801602e <_strtod_l+0x27e>
 801603c:	08019130 	.word	0x08019130
 8016040:	08019118 	.word	0x08019118
 8016044:	7ff00000 	.word	0x7ff00000
 8016048:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801604a:	1c51      	adds	r1, r2, #1
 801604c:	9119      	str	r1, [sp, #100]	@ 0x64
 801604e:	7852      	ldrb	r2, [r2, #1]
 8016050:	2a30      	cmp	r2, #48	@ 0x30
 8016052:	d0f9      	beq.n	8016048 <_strtod_l+0x298>
 8016054:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016058:	2908      	cmp	r1, #8
 801605a:	f63f af78 	bhi.w	8015f4e <_strtod_l+0x19e>
 801605e:	3a30      	subs	r2, #48	@ 0x30
 8016060:	920e      	str	r2, [sp, #56]	@ 0x38
 8016062:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016064:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016066:	f04f 080a 	mov.w	r8, #10
 801606a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801606c:	1c56      	adds	r6, r2, #1
 801606e:	9619      	str	r6, [sp, #100]	@ 0x64
 8016070:	7852      	ldrb	r2, [r2, #1]
 8016072:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016076:	f1be 0f09 	cmp.w	lr, #9
 801607a:	d939      	bls.n	80160f0 <_strtod_l+0x340>
 801607c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801607e:	1a76      	subs	r6, r6, r1
 8016080:	2e08      	cmp	r6, #8
 8016082:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8016086:	dc03      	bgt.n	8016090 <_strtod_l+0x2e0>
 8016088:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801608a:	4588      	cmp	r8, r1
 801608c:	bfa8      	it	ge
 801608e:	4688      	movge	r8, r1
 8016090:	f1bc 0f00 	cmp.w	ip, #0
 8016094:	d001      	beq.n	801609a <_strtod_l+0x2ea>
 8016096:	f1c8 0800 	rsb	r8, r8, #0
 801609a:	2d00      	cmp	r5, #0
 801609c:	d14e      	bne.n	801613c <_strtod_l+0x38c>
 801609e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80160a0:	4308      	orrs	r0, r1
 80160a2:	f47f aebe 	bne.w	8015e22 <_strtod_l+0x72>
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	f47f aed6 	bne.w	8015e58 <_strtod_l+0xa8>
 80160ac:	2a69      	cmp	r2, #105	@ 0x69
 80160ae:	d028      	beq.n	8016102 <_strtod_l+0x352>
 80160b0:	dc25      	bgt.n	80160fe <_strtod_l+0x34e>
 80160b2:	2a49      	cmp	r2, #73	@ 0x49
 80160b4:	d025      	beq.n	8016102 <_strtod_l+0x352>
 80160b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80160b8:	f47f aece 	bne.w	8015e58 <_strtod_l+0xa8>
 80160bc:	499b      	ldr	r1, [pc, #620]	@ (801632c <_strtod_l+0x57c>)
 80160be:	a819      	add	r0, sp, #100	@ 0x64
 80160c0:	f001 fba6 	bl	8017810 <__match>
 80160c4:	2800      	cmp	r0, #0
 80160c6:	f43f aec7 	beq.w	8015e58 <_strtod_l+0xa8>
 80160ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80160cc:	781b      	ldrb	r3, [r3, #0]
 80160ce:	2b28      	cmp	r3, #40	@ 0x28
 80160d0:	d12e      	bne.n	8016130 <_strtod_l+0x380>
 80160d2:	4997      	ldr	r1, [pc, #604]	@ (8016330 <_strtod_l+0x580>)
 80160d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80160d6:	a819      	add	r0, sp, #100	@ 0x64
 80160d8:	f001 fbae 	bl	8017838 <__hexnan>
 80160dc:	2805      	cmp	r0, #5
 80160de:	d127      	bne.n	8016130 <_strtod_l+0x380>
 80160e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80160e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80160e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80160ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80160ee:	e698      	b.n	8015e22 <_strtod_l+0x72>
 80160f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80160f2:	fb08 2101 	mla	r1, r8, r1, r2
 80160f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80160fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80160fc:	e7b5      	b.n	801606a <_strtod_l+0x2ba>
 80160fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8016100:	e7da      	b.n	80160b8 <_strtod_l+0x308>
 8016102:	498c      	ldr	r1, [pc, #560]	@ (8016334 <_strtod_l+0x584>)
 8016104:	a819      	add	r0, sp, #100	@ 0x64
 8016106:	f001 fb83 	bl	8017810 <__match>
 801610a:	2800      	cmp	r0, #0
 801610c:	f43f aea4 	beq.w	8015e58 <_strtod_l+0xa8>
 8016110:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016112:	4989      	ldr	r1, [pc, #548]	@ (8016338 <_strtod_l+0x588>)
 8016114:	3b01      	subs	r3, #1
 8016116:	a819      	add	r0, sp, #100	@ 0x64
 8016118:	9319      	str	r3, [sp, #100]	@ 0x64
 801611a:	f001 fb79 	bl	8017810 <__match>
 801611e:	b910      	cbnz	r0, 8016126 <_strtod_l+0x376>
 8016120:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016122:	3301      	adds	r3, #1
 8016124:	9319      	str	r3, [sp, #100]	@ 0x64
 8016126:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8016348 <_strtod_l+0x598>
 801612a:	f04f 0a00 	mov.w	sl, #0
 801612e:	e678      	b.n	8015e22 <_strtod_l+0x72>
 8016130:	4882      	ldr	r0, [pc, #520]	@ (801633c <_strtod_l+0x58c>)
 8016132:	f001 f8a9 	bl	8017288 <nan>
 8016136:	ec5b ab10 	vmov	sl, fp, d0
 801613a:	e672      	b.n	8015e22 <_strtod_l+0x72>
 801613c:	eba8 0309 	sub.w	r3, r8, r9
 8016140:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016142:	9309      	str	r3, [sp, #36]	@ 0x24
 8016144:	2f00      	cmp	r7, #0
 8016146:	bf08      	it	eq
 8016148:	462f      	moveq	r7, r5
 801614a:	2d10      	cmp	r5, #16
 801614c:	462c      	mov	r4, r5
 801614e:	bfa8      	it	ge
 8016150:	2410      	movge	r4, #16
 8016152:	f7ea f9df 	bl	8000514 <__aeabi_ui2d>
 8016156:	2d09      	cmp	r5, #9
 8016158:	4682      	mov	sl, r0
 801615a:	468b      	mov	fp, r1
 801615c:	dc13      	bgt.n	8016186 <_strtod_l+0x3d6>
 801615e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016160:	2b00      	cmp	r3, #0
 8016162:	f43f ae5e 	beq.w	8015e22 <_strtod_l+0x72>
 8016166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016168:	dd78      	ble.n	801625c <_strtod_l+0x4ac>
 801616a:	2b16      	cmp	r3, #22
 801616c:	dc5f      	bgt.n	801622e <_strtod_l+0x47e>
 801616e:	4974      	ldr	r1, [pc, #464]	@ (8016340 <_strtod_l+0x590>)
 8016170:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016178:	4652      	mov	r2, sl
 801617a:	465b      	mov	r3, fp
 801617c:	f7ea fa44 	bl	8000608 <__aeabi_dmul>
 8016180:	4682      	mov	sl, r0
 8016182:	468b      	mov	fp, r1
 8016184:	e64d      	b.n	8015e22 <_strtod_l+0x72>
 8016186:	4b6e      	ldr	r3, [pc, #440]	@ (8016340 <_strtod_l+0x590>)
 8016188:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801618c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016190:	f7ea fa3a 	bl	8000608 <__aeabi_dmul>
 8016194:	4682      	mov	sl, r0
 8016196:	9808      	ldr	r0, [sp, #32]
 8016198:	468b      	mov	fp, r1
 801619a:	f7ea f9bb 	bl	8000514 <__aeabi_ui2d>
 801619e:	4602      	mov	r2, r0
 80161a0:	460b      	mov	r3, r1
 80161a2:	4650      	mov	r0, sl
 80161a4:	4659      	mov	r1, fp
 80161a6:	f7ea f879 	bl	800029c <__adddf3>
 80161aa:	2d0f      	cmp	r5, #15
 80161ac:	4682      	mov	sl, r0
 80161ae:	468b      	mov	fp, r1
 80161b0:	ddd5      	ble.n	801615e <_strtod_l+0x3ae>
 80161b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161b4:	1b2c      	subs	r4, r5, r4
 80161b6:	441c      	add	r4, r3
 80161b8:	2c00      	cmp	r4, #0
 80161ba:	f340 8096 	ble.w	80162ea <_strtod_l+0x53a>
 80161be:	f014 030f 	ands.w	r3, r4, #15
 80161c2:	d00a      	beq.n	80161da <_strtod_l+0x42a>
 80161c4:	495e      	ldr	r1, [pc, #376]	@ (8016340 <_strtod_l+0x590>)
 80161c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80161ca:	4652      	mov	r2, sl
 80161cc:	465b      	mov	r3, fp
 80161ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80161d2:	f7ea fa19 	bl	8000608 <__aeabi_dmul>
 80161d6:	4682      	mov	sl, r0
 80161d8:	468b      	mov	fp, r1
 80161da:	f034 040f 	bics.w	r4, r4, #15
 80161de:	d073      	beq.n	80162c8 <_strtod_l+0x518>
 80161e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80161e4:	dd48      	ble.n	8016278 <_strtod_l+0x4c8>
 80161e6:	2400      	movs	r4, #0
 80161e8:	46a0      	mov	r8, r4
 80161ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80161ec:	46a1      	mov	r9, r4
 80161ee:	9a05      	ldr	r2, [sp, #20]
 80161f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016348 <_strtod_l+0x598>
 80161f4:	2322      	movs	r3, #34	@ 0x22
 80161f6:	6013      	str	r3, [r2, #0]
 80161f8:	f04f 0a00 	mov.w	sl, #0
 80161fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80161fe:	2b00      	cmp	r3, #0
 8016200:	f43f ae0f 	beq.w	8015e22 <_strtod_l+0x72>
 8016204:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016206:	9805      	ldr	r0, [sp, #20]
 8016208:	f7ff f940 	bl	801548c <_Bfree>
 801620c:	9805      	ldr	r0, [sp, #20]
 801620e:	4649      	mov	r1, r9
 8016210:	f7ff f93c 	bl	801548c <_Bfree>
 8016214:	9805      	ldr	r0, [sp, #20]
 8016216:	4641      	mov	r1, r8
 8016218:	f7ff f938 	bl	801548c <_Bfree>
 801621c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801621e:	9805      	ldr	r0, [sp, #20]
 8016220:	f7ff f934 	bl	801548c <_Bfree>
 8016224:	9805      	ldr	r0, [sp, #20]
 8016226:	4621      	mov	r1, r4
 8016228:	f7ff f930 	bl	801548c <_Bfree>
 801622c:	e5f9      	b.n	8015e22 <_strtod_l+0x72>
 801622e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016230:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8016234:	4293      	cmp	r3, r2
 8016236:	dbbc      	blt.n	80161b2 <_strtod_l+0x402>
 8016238:	4c41      	ldr	r4, [pc, #260]	@ (8016340 <_strtod_l+0x590>)
 801623a:	f1c5 050f 	rsb	r5, r5, #15
 801623e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016242:	4652      	mov	r2, sl
 8016244:	465b      	mov	r3, fp
 8016246:	e9d1 0100 	ldrd	r0, r1, [r1]
 801624a:	f7ea f9dd 	bl	8000608 <__aeabi_dmul>
 801624e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016250:	1b5d      	subs	r5, r3, r5
 8016252:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016256:	e9d4 2300 	ldrd	r2, r3, [r4]
 801625a:	e78f      	b.n	801617c <_strtod_l+0x3cc>
 801625c:	3316      	adds	r3, #22
 801625e:	dba8      	blt.n	80161b2 <_strtod_l+0x402>
 8016260:	4b37      	ldr	r3, [pc, #220]	@ (8016340 <_strtod_l+0x590>)
 8016262:	eba9 0808 	sub.w	r8, r9, r8
 8016266:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801626a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801626e:	4650      	mov	r0, sl
 8016270:	4659      	mov	r1, fp
 8016272:	f7ea faf3 	bl	800085c <__aeabi_ddiv>
 8016276:	e783      	b.n	8016180 <_strtod_l+0x3d0>
 8016278:	4b32      	ldr	r3, [pc, #200]	@ (8016344 <_strtod_l+0x594>)
 801627a:	9308      	str	r3, [sp, #32]
 801627c:	2300      	movs	r3, #0
 801627e:	1124      	asrs	r4, r4, #4
 8016280:	4650      	mov	r0, sl
 8016282:	4659      	mov	r1, fp
 8016284:	461e      	mov	r6, r3
 8016286:	2c01      	cmp	r4, #1
 8016288:	dc21      	bgt.n	80162ce <_strtod_l+0x51e>
 801628a:	b10b      	cbz	r3, 8016290 <_strtod_l+0x4e0>
 801628c:	4682      	mov	sl, r0
 801628e:	468b      	mov	fp, r1
 8016290:	492c      	ldr	r1, [pc, #176]	@ (8016344 <_strtod_l+0x594>)
 8016292:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016296:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801629a:	4652      	mov	r2, sl
 801629c:	465b      	mov	r3, fp
 801629e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162a2:	f7ea f9b1 	bl	8000608 <__aeabi_dmul>
 80162a6:	4b28      	ldr	r3, [pc, #160]	@ (8016348 <_strtod_l+0x598>)
 80162a8:	460a      	mov	r2, r1
 80162aa:	400b      	ands	r3, r1
 80162ac:	4927      	ldr	r1, [pc, #156]	@ (801634c <_strtod_l+0x59c>)
 80162ae:	428b      	cmp	r3, r1
 80162b0:	4682      	mov	sl, r0
 80162b2:	d898      	bhi.n	80161e6 <_strtod_l+0x436>
 80162b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80162b8:	428b      	cmp	r3, r1
 80162ba:	bf86      	itte	hi
 80162bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8016350 <_strtod_l+0x5a0>
 80162c0:	f04f 3aff 	movhi.w	sl, #4294967295
 80162c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80162c8:	2300      	movs	r3, #0
 80162ca:	9308      	str	r3, [sp, #32]
 80162cc:	e07a      	b.n	80163c4 <_strtod_l+0x614>
 80162ce:	07e2      	lsls	r2, r4, #31
 80162d0:	d505      	bpl.n	80162de <_strtod_l+0x52e>
 80162d2:	9b08      	ldr	r3, [sp, #32]
 80162d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d8:	f7ea f996 	bl	8000608 <__aeabi_dmul>
 80162dc:	2301      	movs	r3, #1
 80162de:	9a08      	ldr	r2, [sp, #32]
 80162e0:	3208      	adds	r2, #8
 80162e2:	3601      	adds	r6, #1
 80162e4:	1064      	asrs	r4, r4, #1
 80162e6:	9208      	str	r2, [sp, #32]
 80162e8:	e7cd      	b.n	8016286 <_strtod_l+0x4d6>
 80162ea:	d0ed      	beq.n	80162c8 <_strtod_l+0x518>
 80162ec:	4264      	negs	r4, r4
 80162ee:	f014 020f 	ands.w	r2, r4, #15
 80162f2:	d00a      	beq.n	801630a <_strtod_l+0x55a>
 80162f4:	4b12      	ldr	r3, [pc, #72]	@ (8016340 <_strtod_l+0x590>)
 80162f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80162fa:	4650      	mov	r0, sl
 80162fc:	4659      	mov	r1, fp
 80162fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016302:	f7ea faab 	bl	800085c <__aeabi_ddiv>
 8016306:	4682      	mov	sl, r0
 8016308:	468b      	mov	fp, r1
 801630a:	1124      	asrs	r4, r4, #4
 801630c:	d0dc      	beq.n	80162c8 <_strtod_l+0x518>
 801630e:	2c1f      	cmp	r4, #31
 8016310:	dd20      	ble.n	8016354 <_strtod_l+0x5a4>
 8016312:	2400      	movs	r4, #0
 8016314:	46a0      	mov	r8, r4
 8016316:	940a      	str	r4, [sp, #40]	@ 0x28
 8016318:	46a1      	mov	r9, r4
 801631a:	9a05      	ldr	r2, [sp, #20]
 801631c:	2322      	movs	r3, #34	@ 0x22
 801631e:	f04f 0a00 	mov.w	sl, #0
 8016322:	f04f 0b00 	mov.w	fp, #0
 8016326:	6013      	str	r3, [r2, #0]
 8016328:	e768      	b.n	80161fc <_strtod_l+0x44c>
 801632a:	bf00      	nop
 801632c:	08018f05 	.word	0x08018f05
 8016330:	0801911c 	.word	0x0801911c
 8016334:	08018efd 	.word	0x08018efd
 8016338:	08018f34 	.word	0x08018f34
 801633c:	080192c5 	.word	0x080192c5
 8016340:	08019050 	.word	0x08019050
 8016344:	08019028 	.word	0x08019028
 8016348:	7ff00000 	.word	0x7ff00000
 801634c:	7ca00000 	.word	0x7ca00000
 8016350:	7fefffff 	.word	0x7fefffff
 8016354:	f014 0310 	ands.w	r3, r4, #16
 8016358:	bf18      	it	ne
 801635a:	236a      	movne	r3, #106	@ 0x6a
 801635c:	4ea9      	ldr	r6, [pc, #676]	@ (8016604 <_strtod_l+0x854>)
 801635e:	9308      	str	r3, [sp, #32]
 8016360:	4650      	mov	r0, sl
 8016362:	4659      	mov	r1, fp
 8016364:	2300      	movs	r3, #0
 8016366:	07e2      	lsls	r2, r4, #31
 8016368:	d504      	bpl.n	8016374 <_strtod_l+0x5c4>
 801636a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801636e:	f7ea f94b 	bl	8000608 <__aeabi_dmul>
 8016372:	2301      	movs	r3, #1
 8016374:	1064      	asrs	r4, r4, #1
 8016376:	f106 0608 	add.w	r6, r6, #8
 801637a:	d1f4      	bne.n	8016366 <_strtod_l+0x5b6>
 801637c:	b10b      	cbz	r3, 8016382 <_strtod_l+0x5d2>
 801637e:	4682      	mov	sl, r0
 8016380:	468b      	mov	fp, r1
 8016382:	9b08      	ldr	r3, [sp, #32]
 8016384:	b1b3      	cbz	r3, 80163b4 <_strtod_l+0x604>
 8016386:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801638a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801638e:	2b00      	cmp	r3, #0
 8016390:	4659      	mov	r1, fp
 8016392:	dd0f      	ble.n	80163b4 <_strtod_l+0x604>
 8016394:	2b1f      	cmp	r3, #31
 8016396:	dd55      	ble.n	8016444 <_strtod_l+0x694>
 8016398:	2b34      	cmp	r3, #52	@ 0x34
 801639a:	bfde      	ittt	le
 801639c:	f04f 33ff 	movle.w	r3, #4294967295
 80163a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80163a4:	4093      	lslle	r3, r2
 80163a6:	f04f 0a00 	mov.w	sl, #0
 80163aa:	bfcc      	ite	gt
 80163ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80163b0:	ea03 0b01 	andle.w	fp, r3, r1
 80163b4:	2200      	movs	r2, #0
 80163b6:	2300      	movs	r3, #0
 80163b8:	4650      	mov	r0, sl
 80163ba:	4659      	mov	r1, fp
 80163bc:	f7ea fb8c 	bl	8000ad8 <__aeabi_dcmpeq>
 80163c0:	2800      	cmp	r0, #0
 80163c2:	d1a6      	bne.n	8016312 <_strtod_l+0x562>
 80163c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80163c6:	9300      	str	r3, [sp, #0]
 80163c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80163ca:	9805      	ldr	r0, [sp, #20]
 80163cc:	462b      	mov	r3, r5
 80163ce:	463a      	mov	r2, r7
 80163d0:	f7ff f8c4 	bl	801555c <__s2b>
 80163d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80163d6:	2800      	cmp	r0, #0
 80163d8:	f43f af05 	beq.w	80161e6 <_strtod_l+0x436>
 80163dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80163de:	2a00      	cmp	r2, #0
 80163e0:	eba9 0308 	sub.w	r3, r9, r8
 80163e4:	bfa8      	it	ge
 80163e6:	2300      	movge	r3, #0
 80163e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80163ea:	2400      	movs	r4, #0
 80163ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80163f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80163f2:	46a0      	mov	r8, r4
 80163f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80163f6:	9805      	ldr	r0, [sp, #20]
 80163f8:	6859      	ldr	r1, [r3, #4]
 80163fa:	f7ff f807 	bl	801540c <_Balloc>
 80163fe:	4681      	mov	r9, r0
 8016400:	2800      	cmp	r0, #0
 8016402:	f43f aef4 	beq.w	80161ee <_strtod_l+0x43e>
 8016406:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016408:	691a      	ldr	r2, [r3, #16]
 801640a:	3202      	adds	r2, #2
 801640c:	f103 010c 	add.w	r1, r3, #12
 8016410:	0092      	lsls	r2, r2, #2
 8016412:	300c      	adds	r0, #12
 8016414:	f000 ff28 	bl	8017268 <memcpy>
 8016418:	ec4b ab10 	vmov	d0, sl, fp
 801641c:	9805      	ldr	r0, [sp, #20]
 801641e:	aa1c      	add	r2, sp, #112	@ 0x70
 8016420:	a91b      	add	r1, sp, #108	@ 0x6c
 8016422:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8016426:	f7ff fbd5 	bl	8015bd4 <__d2b>
 801642a:	901a      	str	r0, [sp, #104]	@ 0x68
 801642c:	2800      	cmp	r0, #0
 801642e:	f43f aede 	beq.w	80161ee <_strtod_l+0x43e>
 8016432:	9805      	ldr	r0, [sp, #20]
 8016434:	2101      	movs	r1, #1
 8016436:	f7ff f927 	bl	8015688 <__i2b>
 801643a:	4680      	mov	r8, r0
 801643c:	b948      	cbnz	r0, 8016452 <_strtod_l+0x6a2>
 801643e:	f04f 0800 	mov.w	r8, #0
 8016442:	e6d4      	b.n	80161ee <_strtod_l+0x43e>
 8016444:	f04f 32ff 	mov.w	r2, #4294967295
 8016448:	fa02 f303 	lsl.w	r3, r2, r3
 801644c:	ea03 0a0a 	and.w	sl, r3, sl
 8016450:	e7b0      	b.n	80163b4 <_strtod_l+0x604>
 8016452:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8016454:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016456:	2d00      	cmp	r5, #0
 8016458:	bfab      	itete	ge
 801645a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801645c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801645e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8016460:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8016462:	bfac      	ite	ge
 8016464:	18ef      	addge	r7, r5, r3
 8016466:	1b5e      	sublt	r6, r3, r5
 8016468:	9b08      	ldr	r3, [sp, #32]
 801646a:	1aed      	subs	r5, r5, r3
 801646c:	4415      	add	r5, r2
 801646e:	4b66      	ldr	r3, [pc, #408]	@ (8016608 <_strtod_l+0x858>)
 8016470:	3d01      	subs	r5, #1
 8016472:	429d      	cmp	r5, r3
 8016474:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016478:	da50      	bge.n	801651c <_strtod_l+0x76c>
 801647a:	1b5b      	subs	r3, r3, r5
 801647c:	2b1f      	cmp	r3, #31
 801647e:	eba2 0203 	sub.w	r2, r2, r3
 8016482:	f04f 0101 	mov.w	r1, #1
 8016486:	dc3d      	bgt.n	8016504 <_strtod_l+0x754>
 8016488:	fa01 f303 	lsl.w	r3, r1, r3
 801648c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801648e:	2300      	movs	r3, #0
 8016490:	9310      	str	r3, [sp, #64]	@ 0x40
 8016492:	18bd      	adds	r5, r7, r2
 8016494:	9b08      	ldr	r3, [sp, #32]
 8016496:	42af      	cmp	r7, r5
 8016498:	4416      	add	r6, r2
 801649a:	441e      	add	r6, r3
 801649c:	463b      	mov	r3, r7
 801649e:	bfa8      	it	ge
 80164a0:	462b      	movge	r3, r5
 80164a2:	42b3      	cmp	r3, r6
 80164a4:	bfa8      	it	ge
 80164a6:	4633      	movge	r3, r6
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	bfc2      	ittt	gt
 80164ac:	1aed      	subgt	r5, r5, r3
 80164ae:	1af6      	subgt	r6, r6, r3
 80164b0:	1aff      	subgt	r7, r7, r3
 80164b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	dd16      	ble.n	80164e6 <_strtod_l+0x736>
 80164b8:	4641      	mov	r1, r8
 80164ba:	9805      	ldr	r0, [sp, #20]
 80164bc:	461a      	mov	r2, r3
 80164be:	f7ff f9a3 	bl	8015808 <__pow5mult>
 80164c2:	4680      	mov	r8, r0
 80164c4:	2800      	cmp	r0, #0
 80164c6:	d0ba      	beq.n	801643e <_strtod_l+0x68e>
 80164c8:	4601      	mov	r1, r0
 80164ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80164cc:	9805      	ldr	r0, [sp, #20]
 80164ce:	f7ff f8f1 	bl	80156b4 <__multiply>
 80164d2:	900e      	str	r0, [sp, #56]	@ 0x38
 80164d4:	2800      	cmp	r0, #0
 80164d6:	f43f ae8a 	beq.w	80161ee <_strtod_l+0x43e>
 80164da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80164dc:	9805      	ldr	r0, [sp, #20]
 80164de:	f7fe ffd5 	bl	801548c <_Bfree>
 80164e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80164e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80164e6:	2d00      	cmp	r5, #0
 80164e8:	dc1d      	bgt.n	8016526 <_strtod_l+0x776>
 80164ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	dd23      	ble.n	8016538 <_strtod_l+0x788>
 80164f0:	4649      	mov	r1, r9
 80164f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80164f4:	9805      	ldr	r0, [sp, #20]
 80164f6:	f7ff f987 	bl	8015808 <__pow5mult>
 80164fa:	4681      	mov	r9, r0
 80164fc:	b9e0      	cbnz	r0, 8016538 <_strtod_l+0x788>
 80164fe:	f04f 0900 	mov.w	r9, #0
 8016502:	e674      	b.n	80161ee <_strtod_l+0x43e>
 8016504:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8016508:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801650c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8016510:	35e2      	adds	r5, #226	@ 0xe2
 8016512:	fa01 f305 	lsl.w	r3, r1, r5
 8016516:	9310      	str	r3, [sp, #64]	@ 0x40
 8016518:	9113      	str	r1, [sp, #76]	@ 0x4c
 801651a:	e7ba      	b.n	8016492 <_strtod_l+0x6e2>
 801651c:	2300      	movs	r3, #0
 801651e:	9310      	str	r3, [sp, #64]	@ 0x40
 8016520:	2301      	movs	r3, #1
 8016522:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016524:	e7b5      	b.n	8016492 <_strtod_l+0x6e2>
 8016526:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016528:	9805      	ldr	r0, [sp, #20]
 801652a:	462a      	mov	r2, r5
 801652c:	f7ff f9c6 	bl	80158bc <__lshift>
 8016530:	901a      	str	r0, [sp, #104]	@ 0x68
 8016532:	2800      	cmp	r0, #0
 8016534:	d1d9      	bne.n	80164ea <_strtod_l+0x73a>
 8016536:	e65a      	b.n	80161ee <_strtod_l+0x43e>
 8016538:	2e00      	cmp	r6, #0
 801653a:	dd07      	ble.n	801654c <_strtod_l+0x79c>
 801653c:	4649      	mov	r1, r9
 801653e:	9805      	ldr	r0, [sp, #20]
 8016540:	4632      	mov	r2, r6
 8016542:	f7ff f9bb 	bl	80158bc <__lshift>
 8016546:	4681      	mov	r9, r0
 8016548:	2800      	cmp	r0, #0
 801654a:	d0d8      	beq.n	80164fe <_strtod_l+0x74e>
 801654c:	2f00      	cmp	r7, #0
 801654e:	dd08      	ble.n	8016562 <_strtod_l+0x7b2>
 8016550:	4641      	mov	r1, r8
 8016552:	9805      	ldr	r0, [sp, #20]
 8016554:	463a      	mov	r2, r7
 8016556:	f7ff f9b1 	bl	80158bc <__lshift>
 801655a:	4680      	mov	r8, r0
 801655c:	2800      	cmp	r0, #0
 801655e:	f43f ae46 	beq.w	80161ee <_strtod_l+0x43e>
 8016562:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016564:	9805      	ldr	r0, [sp, #20]
 8016566:	464a      	mov	r2, r9
 8016568:	f7ff fa30 	bl	80159cc <__mdiff>
 801656c:	4604      	mov	r4, r0
 801656e:	2800      	cmp	r0, #0
 8016570:	f43f ae3d 	beq.w	80161ee <_strtod_l+0x43e>
 8016574:	68c3      	ldr	r3, [r0, #12]
 8016576:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016578:	2300      	movs	r3, #0
 801657a:	60c3      	str	r3, [r0, #12]
 801657c:	4641      	mov	r1, r8
 801657e:	f7ff fa09 	bl	8015994 <__mcmp>
 8016582:	2800      	cmp	r0, #0
 8016584:	da46      	bge.n	8016614 <_strtod_l+0x864>
 8016586:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016588:	ea53 030a 	orrs.w	r3, r3, sl
 801658c:	d16c      	bne.n	8016668 <_strtod_l+0x8b8>
 801658e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016592:	2b00      	cmp	r3, #0
 8016594:	d168      	bne.n	8016668 <_strtod_l+0x8b8>
 8016596:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801659a:	0d1b      	lsrs	r3, r3, #20
 801659c:	051b      	lsls	r3, r3, #20
 801659e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80165a2:	d961      	bls.n	8016668 <_strtod_l+0x8b8>
 80165a4:	6963      	ldr	r3, [r4, #20]
 80165a6:	b913      	cbnz	r3, 80165ae <_strtod_l+0x7fe>
 80165a8:	6923      	ldr	r3, [r4, #16]
 80165aa:	2b01      	cmp	r3, #1
 80165ac:	dd5c      	ble.n	8016668 <_strtod_l+0x8b8>
 80165ae:	4621      	mov	r1, r4
 80165b0:	2201      	movs	r2, #1
 80165b2:	9805      	ldr	r0, [sp, #20]
 80165b4:	f7ff f982 	bl	80158bc <__lshift>
 80165b8:	4641      	mov	r1, r8
 80165ba:	4604      	mov	r4, r0
 80165bc:	f7ff f9ea 	bl	8015994 <__mcmp>
 80165c0:	2800      	cmp	r0, #0
 80165c2:	dd51      	ble.n	8016668 <_strtod_l+0x8b8>
 80165c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80165c8:	9a08      	ldr	r2, [sp, #32]
 80165ca:	0d1b      	lsrs	r3, r3, #20
 80165cc:	051b      	lsls	r3, r3, #20
 80165ce:	2a00      	cmp	r2, #0
 80165d0:	d06b      	beq.n	80166aa <_strtod_l+0x8fa>
 80165d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80165d6:	d868      	bhi.n	80166aa <_strtod_l+0x8fa>
 80165d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80165dc:	f67f ae9d 	bls.w	801631a <_strtod_l+0x56a>
 80165e0:	4b0a      	ldr	r3, [pc, #40]	@ (801660c <_strtod_l+0x85c>)
 80165e2:	4650      	mov	r0, sl
 80165e4:	4659      	mov	r1, fp
 80165e6:	2200      	movs	r2, #0
 80165e8:	f7ea f80e 	bl	8000608 <__aeabi_dmul>
 80165ec:	4b08      	ldr	r3, [pc, #32]	@ (8016610 <_strtod_l+0x860>)
 80165ee:	400b      	ands	r3, r1
 80165f0:	4682      	mov	sl, r0
 80165f2:	468b      	mov	fp, r1
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	f47f ae05 	bne.w	8016204 <_strtod_l+0x454>
 80165fa:	9a05      	ldr	r2, [sp, #20]
 80165fc:	2322      	movs	r3, #34	@ 0x22
 80165fe:	6013      	str	r3, [r2, #0]
 8016600:	e600      	b.n	8016204 <_strtod_l+0x454>
 8016602:	bf00      	nop
 8016604:	08019148 	.word	0x08019148
 8016608:	fffffc02 	.word	0xfffffc02
 801660c:	39500000 	.word	0x39500000
 8016610:	7ff00000 	.word	0x7ff00000
 8016614:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8016618:	d165      	bne.n	80166e6 <_strtod_l+0x936>
 801661a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801661c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016620:	b35a      	cbz	r2, 801667a <_strtod_l+0x8ca>
 8016622:	4a9f      	ldr	r2, [pc, #636]	@ (80168a0 <_strtod_l+0xaf0>)
 8016624:	4293      	cmp	r3, r2
 8016626:	d12b      	bne.n	8016680 <_strtod_l+0x8d0>
 8016628:	9b08      	ldr	r3, [sp, #32]
 801662a:	4651      	mov	r1, sl
 801662c:	b303      	cbz	r3, 8016670 <_strtod_l+0x8c0>
 801662e:	4b9d      	ldr	r3, [pc, #628]	@ (80168a4 <_strtod_l+0xaf4>)
 8016630:	465a      	mov	r2, fp
 8016632:	4013      	ands	r3, r2
 8016634:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016638:	f04f 32ff 	mov.w	r2, #4294967295
 801663c:	d81b      	bhi.n	8016676 <_strtod_l+0x8c6>
 801663e:	0d1b      	lsrs	r3, r3, #20
 8016640:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016644:	fa02 f303 	lsl.w	r3, r2, r3
 8016648:	4299      	cmp	r1, r3
 801664a:	d119      	bne.n	8016680 <_strtod_l+0x8d0>
 801664c:	4b96      	ldr	r3, [pc, #600]	@ (80168a8 <_strtod_l+0xaf8>)
 801664e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016650:	429a      	cmp	r2, r3
 8016652:	d102      	bne.n	801665a <_strtod_l+0x8aa>
 8016654:	3101      	adds	r1, #1
 8016656:	f43f adca 	beq.w	80161ee <_strtod_l+0x43e>
 801665a:	4b92      	ldr	r3, [pc, #584]	@ (80168a4 <_strtod_l+0xaf4>)
 801665c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801665e:	401a      	ands	r2, r3
 8016660:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8016664:	f04f 0a00 	mov.w	sl, #0
 8016668:	9b08      	ldr	r3, [sp, #32]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d1b8      	bne.n	80165e0 <_strtod_l+0x830>
 801666e:	e5c9      	b.n	8016204 <_strtod_l+0x454>
 8016670:	f04f 33ff 	mov.w	r3, #4294967295
 8016674:	e7e8      	b.n	8016648 <_strtod_l+0x898>
 8016676:	4613      	mov	r3, r2
 8016678:	e7e6      	b.n	8016648 <_strtod_l+0x898>
 801667a:	ea53 030a 	orrs.w	r3, r3, sl
 801667e:	d0a1      	beq.n	80165c4 <_strtod_l+0x814>
 8016680:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016682:	b1db      	cbz	r3, 80166bc <_strtod_l+0x90c>
 8016684:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016686:	4213      	tst	r3, r2
 8016688:	d0ee      	beq.n	8016668 <_strtod_l+0x8b8>
 801668a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801668c:	9a08      	ldr	r2, [sp, #32]
 801668e:	4650      	mov	r0, sl
 8016690:	4659      	mov	r1, fp
 8016692:	b1bb      	cbz	r3, 80166c4 <_strtod_l+0x914>
 8016694:	f7ff fb6c 	bl	8015d70 <sulp>
 8016698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801669c:	ec53 2b10 	vmov	r2, r3, d0
 80166a0:	f7e9 fdfc 	bl	800029c <__adddf3>
 80166a4:	4682      	mov	sl, r0
 80166a6:	468b      	mov	fp, r1
 80166a8:	e7de      	b.n	8016668 <_strtod_l+0x8b8>
 80166aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80166ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80166b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80166b6:	f04f 3aff 	mov.w	sl, #4294967295
 80166ba:	e7d5      	b.n	8016668 <_strtod_l+0x8b8>
 80166bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80166be:	ea13 0f0a 	tst.w	r3, sl
 80166c2:	e7e1      	b.n	8016688 <_strtod_l+0x8d8>
 80166c4:	f7ff fb54 	bl	8015d70 <sulp>
 80166c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80166cc:	ec53 2b10 	vmov	r2, r3, d0
 80166d0:	f7e9 fde2 	bl	8000298 <__aeabi_dsub>
 80166d4:	2200      	movs	r2, #0
 80166d6:	2300      	movs	r3, #0
 80166d8:	4682      	mov	sl, r0
 80166da:	468b      	mov	fp, r1
 80166dc:	f7ea f9fc 	bl	8000ad8 <__aeabi_dcmpeq>
 80166e0:	2800      	cmp	r0, #0
 80166e2:	d0c1      	beq.n	8016668 <_strtod_l+0x8b8>
 80166e4:	e619      	b.n	801631a <_strtod_l+0x56a>
 80166e6:	4641      	mov	r1, r8
 80166e8:	4620      	mov	r0, r4
 80166ea:	f7ff facb 	bl	8015c84 <__ratio>
 80166ee:	ec57 6b10 	vmov	r6, r7, d0
 80166f2:	2200      	movs	r2, #0
 80166f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80166f8:	4630      	mov	r0, r6
 80166fa:	4639      	mov	r1, r7
 80166fc:	f7ea fa00 	bl	8000b00 <__aeabi_dcmple>
 8016700:	2800      	cmp	r0, #0
 8016702:	d06f      	beq.n	80167e4 <_strtod_l+0xa34>
 8016704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016706:	2b00      	cmp	r3, #0
 8016708:	d17a      	bne.n	8016800 <_strtod_l+0xa50>
 801670a:	f1ba 0f00 	cmp.w	sl, #0
 801670e:	d158      	bne.n	80167c2 <_strtod_l+0xa12>
 8016710:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016716:	2b00      	cmp	r3, #0
 8016718:	d15a      	bne.n	80167d0 <_strtod_l+0xa20>
 801671a:	4b64      	ldr	r3, [pc, #400]	@ (80168ac <_strtod_l+0xafc>)
 801671c:	2200      	movs	r2, #0
 801671e:	4630      	mov	r0, r6
 8016720:	4639      	mov	r1, r7
 8016722:	f7ea f9e3 	bl	8000aec <__aeabi_dcmplt>
 8016726:	2800      	cmp	r0, #0
 8016728:	d159      	bne.n	80167de <_strtod_l+0xa2e>
 801672a:	4630      	mov	r0, r6
 801672c:	4639      	mov	r1, r7
 801672e:	4b60      	ldr	r3, [pc, #384]	@ (80168b0 <_strtod_l+0xb00>)
 8016730:	2200      	movs	r2, #0
 8016732:	f7e9 ff69 	bl	8000608 <__aeabi_dmul>
 8016736:	4606      	mov	r6, r0
 8016738:	460f      	mov	r7, r1
 801673a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801673e:	9606      	str	r6, [sp, #24]
 8016740:	9307      	str	r3, [sp, #28]
 8016742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016746:	4d57      	ldr	r5, [pc, #348]	@ (80168a4 <_strtod_l+0xaf4>)
 8016748:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801674c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801674e:	401d      	ands	r5, r3
 8016750:	4b58      	ldr	r3, [pc, #352]	@ (80168b4 <_strtod_l+0xb04>)
 8016752:	429d      	cmp	r5, r3
 8016754:	f040 80b2 	bne.w	80168bc <_strtod_l+0xb0c>
 8016758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801675a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801675e:	ec4b ab10 	vmov	d0, sl, fp
 8016762:	f7ff f9c7 	bl	8015af4 <__ulp>
 8016766:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801676a:	ec51 0b10 	vmov	r0, r1, d0
 801676e:	f7e9 ff4b 	bl	8000608 <__aeabi_dmul>
 8016772:	4652      	mov	r2, sl
 8016774:	465b      	mov	r3, fp
 8016776:	f7e9 fd91 	bl	800029c <__adddf3>
 801677a:	460b      	mov	r3, r1
 801677c:	4949      	ldr	r1, [pc, #292]	@ (80168a4 <_strtod_l+0xaf4>)
 801677e:	4a4e      	ldr	r2, [pc, #312]	@ (80168b8 <_strtod_l+0xb08>)
 8016780:	4019      	ands	r1, r3
 8016782:	4291      	cmp	r1, r2
 8016784:	4682      	mov	sl, r0
 8016786:	d942      	bls.n	801680e <_strtod_l+0xa5e>
 8016788:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801678a:	4b47      	ldr	r3, [pc, #284]	@ (80168a8 <_strtod_l+0xaf8>)
 801678c:	429a      	cmp	r2, r3
 801678e:	d103      	bne.n	8016798 <_strtod_l+0x9e8>
 8016790:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016792:	3301      	adds	r3, #1
 8016794:	f43f ad2b 	beq.w	80161ee <_strtod_l+0x43e>
 8016798:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80168a8 <_strtod_l+0xaf8>
 801679c:	f04f 3aff 	mov.w	sl, #4294967295
 80167a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80167a2:	9805      	ldr	r0, [sp, #20]
 80167a4:	f7fe fe72 	bl	801548c <_Bfree>
 80167a8:	9805      	ldr	r0, [sp, #20]
 80167aa:	4649      	mov	r1, r9
 80167ac:	f7fe fe6e 	bl	801548c <_Bfree>
 80167b0:	9805      	ldr	r0, [sp, #20]
 80167b2:	4641      	mov	r1, r8
 80167b4:	f7fe fe6a 	bl	801548c <_Bfree>
 80167b8:	9805      	ldr	r0, [sp, #20]
 80167ba:	4621      	mov	r1, r4
 80167bc:	f7fe fe66 	bl	801548c <_Bfree>
 80167c0:	e618      	b.n	80163f4 <_strtod_l+0x644>
 80167c2:	f1ba 0f01 	cmp.w	sl, #1
 80167c6:	d103      	bne.n	80167d0 <_strtod_l+0xa20>
 80167c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	f43f ada5 	beq.w	801631a <_strtod_l+0x56a>
 80167d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8016880 <_strtod_l+0xad0>
 80167d4:	4f35      	ldr	r7, [pc, #212]	@ (80168ac <_strtod_l+0xafc>)
 80167d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80167da:	2600      	movs	r6, #0
 80167dc:	e7b1      	b.n	8016742 <_strtod_l+0x992>
 80167de:	4f34      	ldr	r7, [pc, #208]	@ (80168b0 <_strtod_l+0xb00>)
 80167e0:	2600      	movs	r6, #0
 80167e2:	e7aa      	b.n	801673a <_strtod_l+0x98a>
 80167e4:	4b32      	ldr	r3, [pc, #200]	@ (80168b0 <_strtod_l+0xb00>)
 80167e6:	4630      	mov	r0, r6
 80167e8:	4639      	mov	r1, r7
 80167ea:	2200      	movs	r2, #0
 80167ec:	f7e9 ff0c 	bl	8000608 <__aeabi_dmul>
 80167f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80167f2:	4606      	mov	r6, r0
 80167f4:	460f      	mov	r7, r1
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d09f      	beq.n	801673a <_strtod_l+0x98a>
 80167fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80167fe:	e7a0      	b.n	8016742 <_strtod_l+0x992>
 8016800:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8016888 <_strtod_l+0xad8>
 8016804:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016808:	ec57 6b17 	vmov	r6, r7, d7
 801680c:	e799      	b.n	8016742 <_strtod_l+0x992>
 801680e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016812:	9b08      	ldr	r3, [sp, #32]
 8016814:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8016818:	2b00      	cmp	r3, #0
 801681a:	d1c1      	bne.n	80167a0 <_strtod_l+0x9f0>
 801681c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016820:	0d1b      	lsrs	r3, r3, #20
 8016822:	051b      	lsls	r3, r3, #20
 8016824:	429d      	cmp	r5, r3
 8016826:	d1bb      	bne.n	80167a0 <_strtod_l+0x9f0>
 8016828:	4630      	mov	r0, r6
 801682a:	4639      	mov	r1, r7
 801682c:	f7ea fa9c 	bl	8000d68 <__aeabi_d2lz>
 8016830:	f7e9 febc 	bl	80005ac <__aeabi_l2d>
 8016834:	4602      	mov	r2, r0
 8016836:	460b      	mov	r3, r1
 8016838:	4630      	mov	r0, r6
 801683a:	4639      	mov	r1, r7
 801683c:	f7e9 fd2c 	bl	8000298 <__aeabi_dsub>
 8016840:	460b      	mov	r3, r1
 8016842:	4602      	mov	r2, r0
 8016844:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8016848:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801684c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801684e:	ea46 060a 	orr.w	r6, r6, sl
 8016852:	431e      	orrs	r6, r3
 8016854:	d06f      	beq.n	8016936 <_strtod_l+0xb86>
 8016856:	a30e      	add	r3, pc, #56	@ (adr r3, 8016890 <_strtod_l+0xae0>)
 8016858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801685c:	f7ea f946 	bl	8000aec <__aeabi_dcmplt>
 8016860:	2800      	cmp	r0, #0
 8016862:	f47f accf 	bne.w	8016204 <_strtod_l+0x454>
 8016866:	a30c      	add	r3, pc, #48	@ (adr r3, 8016898 <_strtod_l+0xae8>)
 8016868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801686c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016870:	f7ea f95a 	bl	8000b28 <__aeabi_dcmpgt>
 8016874:	2800      	cmp	r0, #0
 8016876:	d093      	beq.n	80167a0 <_strtod_l+0x9f0>
 8016878:	e4c4      	b.n	8016204 <_strtod_l+0x454>
 801687a:	bf00      	nop
 801687c:	f3af 8000 	nop.w
 8016880:	00000000 	.word	0x00000000
 8016884:	bff00000 	.word	0xbff00000
 8016888:	00000000 	.word	0x00000000
 801688c:	3ff00000 	.word	0x3ff00000
 8016890:	94a03595 	.word	0x94a03595
 8016894:	3fdfffff 	.word	0x3fdfffff
 8016898:	35afe535 	.word	0x35afe535
 801689c:	3fe00000 	.word	0x3fe00000
 80168a0:	000fffff 	.word	0x000fffff
 80168a4:	7ff00000 	.word	0x7ff00000
 80168a8:	7fefffff 	.word	0x7fefffff
 80168ac:	3ff00000 	.word	0x3ff00000
 80168b0:	3fe00000 	.word	0x3fe00000
 80168b4:	7fe00000 	.word	0x7fe00000
 80168b8:	7c9fffff 	.word	0x7c9fffff
 80168bc:	9b08      	ldr	r3, [sp, #32]
 80168be:	b323      	cbz	r3, 801690a <_strtod_l+0xb5a>
 80168c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80168c4:	d821      	bhi.n	801690a <_strtod_l+0xb5a>
 80168c6:	a328      	add	r3, pc, #160	@ (adr r3, 8016968 <_strtod_l+0xbb8>)
 80168c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168cc:	4630      	mov	r0, r6
 80168ce:	4639      	mov	r1, r7
 80168d0:	f7ea f916 	bl	8000b00 <__aeabi_dcmple>
 80168d4:	b1a0      	cbz	r0, 8016900 <_strtod_l+0xb50>
 80168d6:	4639      	mov	r1, r7
 80168d8:	4630      	mov	r0, r6
 80168da:	f7ea f96d 	bl	8000bb8 <__aeabi_d2uiz>
 80168de:	2801      	cmp	r0, #1
 80168e0:	bf38      	it	cc
 80168e2:	2001      	movcc	r0, #1
 80168e4:	f7e9 fe16 	bl	8000514 <__aeabi_ui2d>
 80168e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80168ea:	4606      	mov	r6, r0
 80168ec:	460f      	mov	r7, r1
 80168ee:	b9fb      	cbnz	r3, 8016930 <_strtod_l+0xb80>
 80168f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80168f4:	9014      	str	r0, [sp, #80]	@ 0x50
 80168f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80168f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80168fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016900:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016902:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8016906:	1b5b      	subs	r3, r3, r5
 8016908:	9311      	str	r3, [sp, #68]	@ 0x44
 801690a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801690e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8016912:	f7ff f8ef 	bl	8015af4 <__ulp>
 8016916:	4650      	mov	r0, sl
 8016918:	ec53 2b10 	vmov	r2, r3, d0
 801691c:	4659      	mov	r1, fp
 801691e:	f7e9 fe73 	bl	8000608 <__aeabi_dmul>
 8016922:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016926:	f7e9 fcb9 	bl	800029c <__adddf3>
 801692a:	4682      	mov	sl, r0
 801692c:	468b      	mov	fp, r1
 801692e:	e770      	b.n	8016812 <_strtod_l+0xa62>
 8016930:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8016934:	e7e0      	b.n	80168f8 <_strtod_l+0xb48>
 8016936:	a30e      	add	r3, pc, #56	@ (adr r3, 8016970 <_strtod_l+0xbc0>)
 8016938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801693c:	f7ea f8d6 	bl	8000aec <__aeabi_dcmplt>
 8016940:	e798      	b.n	8016874 <_strtod_l+0xac4>
 8016942:	2300      	movs	r3, #0
 8016944:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016946:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016948:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801694a:	6013      	str	r3, [r2, #0]
 801694c:	f7ff ba6d 	b.w	8015e2a <_strtod_l+0x7a>
 8016950:	2a65      	cmp	r2, #101	@ 0x65
 8016952:	f43f ab66 	beq.w	8016022 <_strtod_l+0x272>
 8016956:	2a45      	cmp	r2, #69	@ 0x45
 8016958:	f43f ab63 	beq.w	8016022 <_strtod_l+0x272>
 801695c:	2301      	movs	r3, #1
 801695e:	f7ff bb9e 	b.w	801609e <_strtod_l+0x2ee>
 8016962:	bf00      	nop
 8016964:	f3af 8000 	nop.w
 8016968:	ffc00000 	.word	0xffc00000
 801696c:	41dfffff 	.word	0x41dfffff
 8016970:	94a03595 	.word	0x94a03595
 8016974:	3fcfffff 	.word	0x3fcfffff

08016978 <_strtod_r>:
 8016978:	4b01      	ldr	r3, [pc, #4]	@ (8016980 <_strtod_r+0x8>)
 801697a:	f7ff ba19 	b.w	8015db0 <_strtod_l>
 801697e:	bf00      	nop
 8016980:	2000023c 	.word	0x2000023c

08016984 <_strtol_l.constprop.0>:
 8016984:	2b24      	cmp	r3, #36	@ 0x24
 8016986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801698a:	4686      	mov	lr, r0
 801698c:	4690      	mov	r8, r2
 801698e:	d801      	bhi.n	8016994 <_strtol_l.constprop.0+0x10>
 8016990:	2b01      	cmp	r3, #1
 8016992:	d106      	bne.n	80169a2 <_strtol_l.constprop.0+0x1e>
 8016994:	f7fd fe6e 	bl	8014674 <__errno>
 8016998:	2316      	movs	r3, #22
 801699a:	6003      	str	r3, [r0, #0]
 801699c:	2000      	movs	r0, #0
 801699e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169a2:	4834      	ldr	r0, [pc, #208]	@ (8016a74 <_strtol_l.constprop.0+0xf0>)
 80169a4:	460d      	mov	r5, r1
 80169a6:	462a      	mov	r2, r5
 80169a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80169ac:	5d06      	ldrb	r6, [r0, r4]
 80169ae:	f016 0608 	ands.w	r6, r6, #8
 80169b2:	d1f8      	bne.n	80169a6 <_strtol_l.constprop.0+0x22>
 80169b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80169b6:	d12d      	bne.n	8016a14 <_strtol_l.constprop.0+0x90>
 80169b8:	782c      	ldrb	r4, [r5, #0]
 80169ba:	2601      	movs	r6, #1
 80169bc:	1c95      	adds	r5, r2, #2
 80169be:	f033 0210 	bics.w	r2, r3, #16
 80169c2:	d109      	bne.n	80169d8 <_strtol_l.constprop.0+0x54>
 80169c4:	2c30      	cmp	r4, #48	@ 0x30
 80169c6:	d12a      	bne.n	8016a1e <_strtol_l.constprop.0+0x9a>
 80169c8:	782a      	ldrb	r2, [r5, #0]
 80169ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80169ce:	2a58      	cmp	r2, #88	@ 0x58
 80169d0:	d125      	bne.n	8016a1e <_strtol_l.constprop.0+0x9a>
 80169d2:	786c      	ldrb	r4, [r5, #1]
 80169d4:	2310      	movs	r3, #16
 80169d6:	3502      	adds	r5, #2
 80169d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80169dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80169e0:	2200      	movs	r2, #0
 80169e2:	fbbc f9f3 	udiv	r9, ip, r3
 80169e6:	4610      	mov	r0, r2
 80169e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80169ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80169f0:	2f09      	cmp	r7, #9
 80169f2:	d81b      	bhi.n	8016a2c <_strtol_l.constprop.0+0xa8>
 80169f4:	463c      	mov	r4, r7
 80169f6:	42a3      	cmp	r3, r4
 80169f8:	dd27      	ble.n	8016a4a <_strtol_l.constprop.0+0xc6>
 80169fa:	1c57      	adds	r7, r2, #1
 80169fc:	d007      	beq.n	8016a0e <_strtol_l.constprop.0+0x8a>
 80169fe:	4581      	cmp	r9, r0
 8016a00:	d320      	bcc.n	8016a44 <_strtol_l.constprop.0+0xc0>
 8016a02:	d101      	bne.n	8016a08 <_strtol_l.constprop.0+0x84>
 8016a04:	45a2      	cmp	sl, r4
 8016a06:	db1d      	blt.n	8016a44 <_strtol_l.constprop.0+0xc0>
 8016a08:	fb00 4003 	mla	r0, r0, r3, r4
 8016a0c:	2201      	movs	r2, #1
 8016a0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016a12:	e7eb      	b.n	80169ec <_strtol_l.constprop.0+0x68>
 8016a14:	2c2b      	cmp	r4, #43	@ 0x2b
 8016a16:	bf04      	itt	eq
 8016a18:	782c      	ldrbeq	r4, [r5, #0]
 8016a1a:	1c95      	addeq	r5, r2, #2
 8016a1c:	e7cf      	b.n	80169be <_strtol_l.constprop.0+0x3a>
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d1da      	bne.n	80169d8 <_strtol_l.constprop.0+0x54>
 8016a22:	2c30      	cmp	r4, #48	@ 0x30
 8016a24:	bf0c      	ite	eq
 8016a26:	2308      	moveq	r3, #8
 8016a28:	230a      	movne	r3, #10
 8016a2a:	e7d5      	b.n	80169d8 <_strtol_l.constprop.0+0x54>
 8016a2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016a30:	2f19      	cmp	r7, #25
 8016a32:	d801      	bhi.n	8016a38 <_strtol_l.constprop.0+0xb4>
 8016a34:	3c37      	subs	r4, #55	@ 0x37
 8016a36:	e7de      	b.n	80169f6 <_strtol_l.constprop.0+0x72>
 8016a38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016a3c:	2f19      	cmp	r7, #25
 8016a3e:	d804      	bhi.n	8016a4a <_strtol_l.constprop.0+0xc6>
 8016a40:	3c57      	subs	r4, #87	@ 0x57
 8016a42:	e7d8      	b.n	80169f6 <_strtol_l.constprop.0+0x72>
 8016a44:	f04f 32ff 	mov.w	r2, #4294967295
 8016a48:	e7e1      	b.n	8016a0e <_strtol_l.constprop.0+0x8a>
 8016a4a:	1c53      	adds	r3, r2, #1
 8016a4c:	d108      	bne.n	8016a60 <_strtol_l.constprop.0+0xdc>
 8016a4e:	2322      	movs	r3, #34	@ 0x22
 8016a50:	f8ce 3000 	str.w	r3, [lr]
 8016a54:	4660      	mov	r0, ip
 8016a56:	f1b8 0f00 	cmp.w	r8, #0
 8016a5a:	d0a0      	beq.n	801699e <_strtol_l.constprop.0+0x1a>
 8016a5c:	1e69      	subs	r1, r5, #1
 8016a5e:	e006      	b.n	8016a6e <_strtol_l.constprop.0+0xea>
 8016a60:	b106      	cbz	r6, 8016a64 <_strtol_l.constprop.0+0xe0>
 8016a62:	4240      	negs	r0, r0
 8016a64:	f1b8 0f00 	cmp.w	r8, #0
 8016a68:	d099      	beq.n	801699e <_strtol_l.constprop.0+0x1a>
 8016a6a:	2a00      	cmp	r2, #0
 8016a6c:	d1f6      	bne.n	8016a5c <_strtol_l.constprop.0+0xd8>
 8016a6e:	f8c8 1000 	str.w	r1, [r8]
 8016a72:	e794      	b.n	801699e <_strtol_l.constprop.0+0x1a>
 8016a74:	08019171 	.word	0x08019171

08016a78 <_strtol_r>:
 8016a78:	f7ff bf84 	b.w	8016984 <_strtol_l.constprop.0>

08016a7c <__ssputs_r>:
 8016a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a80:	688e      	ldr	r6, [r1, #8]
 8016a82:	461f      	mov	r7, r3
 8016a84:	42be      	cmp	r6, r7
 8016a86:	680b      	ldr	r3, [r1, #0]
 8016a88:	4682      	mov	sl, r0
 8016a8a:	460c      	mov	r4, r1
 8016a8c:	4690      	mov	r8, r2
 8016a8e:	d82d      	bhi.n	8016aec <__ssputs_r+0x70>
 8016a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016a94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016a98:	d026      	beq.n	8016ae8 <__ssputs_r+0x6c>
 8016a9a:	6965      	ldr	r5, [r4, #20]
 8016a9c:	6909      	ldr	r1, [r1, #16]
 8016a9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016aa2:	eba3 0901 	sub.w	r9, r3, r1
 8016aa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016aaa:	1c7b      	adds	r3, r7, #1
 8016aac:	444b      	add	r3, r9
 8016aae:	106d      	asrs	r5, r5, #1
 8016ab0:	429d      	cmp	r5, r3
 8016ab2:	bf38      	it	cc
 8016ab4:	461d      	movcc	r5, r3
 8016ab6:	0553      	lsls	r3, r2, #21
 8016ab8:	d527      	bpl.n	8016b0a <__ssputs_r+0x8e>
 8016aba:	4629      	mov	r1, r5
 8016abc:	f7fc fc22 	bl	8013304 <_malloc_r>
 8016ac0:	4606      	mov	r6, r0
 8016ac2:	b360      	cbz	r0, 8016b1e <__ssputs_r+0xa2>
 8016ac4:	6921      	ldr	r1, [r4, #16]
 8016ac6:	464a      	mov	r2, r9
 8016ac8:	f000 fbce 	bl	8017268 <memcpy>
 8016acc:	89a3      	ldrh	r3, [r4, #12]
 8016ace:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016ad6:	81a3      	strh	r3, [r4, #12]
 8016ad8:	6126      	str	r6, [r4, #16]
 8016ada:	6165      	str	r5, [r4, #20]
 8016adc:	444e      	add	r6, r9
 8016ade:	eba5 0509 	sub.w	r5, r5, r9
 8016ae2:	6026      	str	r6, [r4, #0]
 8016ae4:	60a5      	str	r5, [r4, #8]
 8016ae6:	463e      	mov	r6, r7
 8016ae8:	42be      	cmp	r6, r7
 8016aea:	d900      	bls.n	8016aee <__ssputs_r+0x72>
 8016aec:	463e      	mov	r6, r7
 8016aee:	6820      	ldr	r0, [r4, #0]
 8016af0:	4632      	mov	r2, r6
 8016af2:	4641      	mov	r1, r8
 8016af4:	f000 fb6a 	bl	80171cc <memmove>
 8016af8:	68a3      	ldr	r3, [r4, #8]
 8016afa:	1b9b      	subs	r3, r3, r6
 8016afc:	60a3      	str	r3, [r4, #8]
 8016afe:	6823      	ldr	r3, [r4, #0]
 8016b00:	4433      	add	r3, r6
 8016b02:	6023      	str	r3, [r4, #0]
 8016b04:	2000      	movs	r0, #0
 8016b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b0a:	462a      	mov	r2, r5
 8016b0c:	f000 ff41 	bl	8017992 <_realloc_r>
 8016b10:	4606      	mov	r6, r0
 8016b12:	2800      	cmp	r0, #0
 8016b14:	d1e0      	bne.n	8016ad8 <__ssputs_r+0x5c>
 8016b16:	6921      	ldr	r1, [r4, #16]
 8016b18:	4650      	mov	r0, sl
 8016b1a:	f7fe fc2d 	bl	8015378 <_free_r>
 8016b1e:	230c      	movs	r3, #12
 8016b20:	f8ca 3000 	str.w	r3, [sl]
 8016b24:	89a3      	ldrh	r3, [r4, #12]
 8016b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016b2a:	81a3      	strh	r3, [r4, #12]
 8016b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b30:	e7e9      	b.n	8016b06 <__ssputs_r+0x8a>
	...

08016b34 <_svfiprintf_r>:
 8016b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b38:	4698      	mov	r8, r3
 8016b3a:	898b      	ldrh	r3, [r1, #12]
 8016b3c:	061b      	lsls	r3, r3, #24
 8016b3e:	b09d      	sub	sp, #116	@ 0x74
 8016b40:	4607      	mov	r7, r0
 8016b42:	460d      	mov	r5, r1
 8016b44:	4614      	mov	r4, r2
 8016b46:	d510      	bpl.n	8016b6a <_svfiprintf_r+0x36>
 8016b48:	690b      	ldr	r3, [r1, #16]
 8016b4a:	b973      	cbnz	r3, 8016b6a <_svfiprintf_r+0x36>
 8016b4c:	2140      	movs	r1, #64	@ 0x40
 8016b4e:	f7fc fbd9 	bl	8013304 <_malloc_r>
 8016b52:	6028      	str	r0, [r5, #0]
 8016b54:	6128      	str	r0, [r5, #16]
 8016b56:	b930      	cbnz	r0, 8016b66 <_svfiprintf_r+0x32>
 8016b58:	230c      	movs	r3, #12
 8016b5a:	603b      	str	r3, [r7, #0]
 8016b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b60:	b01d      	add	sp, #116	@ 0x74
 8016b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b66:	2340      	movs	r3, #64	@ 0x40
 8016b68:	616b      	str	r3, [r5, #20]
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b6e:	2320      	movs	r3, #32
 8016b70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8016b78:	2330      	movs	r3, #48	@ 0x30
 8016b7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016d18 <_svfiprintf_r+0x1e4>
 8016b7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016b82:	f04f 0901 	mov.w	r9, #1
 8016b86:	4623      	mov	r3, r4
 8016b88:	469a      	mov	sl, r3
 8016b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b8e:	b10a      	cbz	r2, 8016b94 <_svfiprintf_r+0x60>
 8016b90:	2a25      	cmp	r2, #37	@ 0x25
 8016b92:	d1f9      	bne.n	8016b88 <_svfiprintf_r+0x54>
 8016b94:	ebba 0b04 	subs.w	fp, sl, r4
 8016b98:	d00b      	beq.n	8016bb2 <_svfiprintf_r+0x7e>
 8016b9a:	465b      	mov	r3, fp
 8016b9c:	4622      	mov	r2, r4
 8016b9e:	4629      	mov	r1, r5
 8016ba0:	4638      	mov	r0, r7
 8016ba2:	f7ff ff6b 	bl	8016a7c <__ssputs_r>
 8016ba6:	3001      	adds	r0, #1
 8016ba8:	f000 80a7 	beq.w	8016cfa <_svfiprintf_r+0x1c6>
 8016bac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016bae:	445a      	add	r2, fp
 8016bb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8016bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	f000 809f 	beq.w	8016cfa <_svfiprintf_r+0x1c6>
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8016bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016bc6:	f10a 0a01 	add.w	sl, sl, #1
 8016bca:	9304      	str	r3, [sp, #16]
 8016bcc:	9307      	str	r3, [sp, #28]
 8016bce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016bd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8016bd4:	4654      	mov	r4, sl
 8016bd6:	2205      	movs	r2, #5
 8016bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016bdc:	484e      	ldr	r0, [pc, #312]	@ (8016d18 <_svfiprintf_r+0x1e4>)
 8016bde:	f7e9 faff 	bl	80001e0 <memchr>
 8016be2:	9a04      	ldr	r2, [sp, #16]
 8016be4:	b9d8      	cbnz	r0, 8016c1e <_svfiprintf_r+0xea>
 8016be6:	06d0      	lsls	r0, r2, #27
 8016be8:	bf44      	itt	mi
 8016bea:	2320      	movmi	r3, #32
 8016bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016bf0:	0711      	lsls	r1, r2, #28
 8016bf2:	bf44      	itt	mi
 8016bf4:	232b      	movmi	r3, #43	@ 0x2b
 8016bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8016bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c00:	d015      	beq.n	8016c2e <_svfiprintf_r+0xfa>
 8016c02:	9a07      	ldr	r2, [sp, #28]
 8016c04:	4654      	mov	r4, sl
 8016c06:	2000      	movs	r0, #0
 8016c08:	f04f 0c0a 	mov.w	ip, #10
 8016c0c:	4621      	mov	r1, r4
 8016c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c12:	3b30      	subs	r3, #48	@ 0x30
 8016c14:	2b09      	cmp	r3, #9
 8016c16:	d94b      	bls.n	8016cb0 <_svfiprintf_r+0x17c>
 8016c18:	b1b0      	cbz	r0, 8016c48 <_svfiprintf_r+0x114>
 8016c1a:	9207      	str	r2, [sp, #28]
 8016c1c:	e014      	b.n	8016c48 <_svfiprintf_r+0x114>
 8016c1e:	eba0 0308 	sub.w	r3, r0, r8
 8016c22:	fa09 f303 	lsl.w	r3, r9, r3
 8016c26:	4313      	orrs	r3, r2
 8016c28:	9304      	str	r3, [sp, #16]
 8016c2a:	46a2      	mov	sl, r4
 8016c2c:	e7d2      	b.n	8016bd4 <_svfiprintf_r+0xa0>
 8016c2e:	9b03      	ldr	r3, [sp, #12]
 8016c30:	1d19      	adds	r1, r3, #4
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	9103      	str	r1, [sp, #12]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	bfbb      	ittet	lt
 8016c3a:	425b      	neglt	r3, r3
 8016c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8016c40:	9307      	strge	r3, [sp, #28]
 8016c42:	9307      	strlt	r3, [sp, #28]
 8016c44:	bfb8      	it	lt
 8016c46:	9204      	strlt	r2, [sp, #16]
 8016c48:	7823      	ldrb	r3, [r4, #0]
 8016c4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8016c4c:	d10a      	bne.n	8016c64 <_svfiprintf_r+0x130>
 8016c4e:	7863      	ldrb	r3, [r4, #1]
 8016c50:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c52:	d132      	bne.n	8016cba <_svfiprintf_r+0x186>
 8016c54:	9b03      	ldr	r3, [sp, #12]
 8016c56:	1d1a      	adds	r2, r3, #4
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	9203      	str	r2, [sp, #12]
 8016c5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016c60:	3402      	adds	r4, #2
 8016c62:	9305      	str	r3, [sp, #20]
 8016c64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016d28 <_svfiprintf_r+0x1f4>
 8016c68:	7821      	ldrb	r1, [r4, #0]
 8016c6a:	2203      	movs	r2, #3
 8016c6c:	4650      	mov	r0, sl
 8016c6e:	f7e9 fab7 	bl	80001e0 <memchr>
 8016c72:	b138      	cbz	r0, 8016c84 <_svfiprintf_r+0x150>
 8016c74:	9b04      	ldr	r3, [sp, #16]
 8016c76:	eba0 000a 	sub.w	r0, r0, sl
 8016c7a:	2240      	movs	r2, #64	@ 0x40
 8016c7c:	4082      	lsls	r2, r0
 8016c7e:	4313      	orrs	r3, r2
 8016c80:	3401      	adds	r4, #1
 8016c82:	9304      	str	r3, [sp, #16]
 8016c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c88:	4824      	ldr	r0, [pc, #144]	@ (8016d1c <_svfiprintf_r+0x1e8>)
 8016c8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016c8e:	2206      	movs	r2, #6
 8016c90:	f7e9 faa6 	bl	80001e0 <memchr>
 8016c94:	2800      	cmp	r0, #0
 8016c96:	d036      	beq.n	8016d06 <_svfiprintf_r+0x1d2>
 8016c98:	4b21      	ldr	r3, [pc, #132]	@ (8016d20 <_svfiprintf_r+0x1ec>)
 8016c9a:	bb1b      	cbnz	r3, 8016ce4 <_svfiprintf_r+0x1b0>
 8016c9c:	9b03      	ldr	r3, [sp, #12]
 8016c9e:	3307      	adds	r3, #7
 8016ca0:	f023 0307 	bic.w	r3, r3, #7
 8016ca4:	3308      	adds	r3, #8
 8016ca6:	9303      	str	r3, [sp, #12]
 8016ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016caa:	4433      	add	r3, r6
 8016cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8016cae:	e76a      	b.n	8016b86 <_svfiprintf_r+0x52>
 8016cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8016cb4:	460c      	mov	r4, r1
 8016cb6:	2001      	movs	r0, #1
 8016cb8:	e7a8      	b.n	8016c0c <_svfiprintf_r+0xd8>
 8016cba:	2300      	movs	r3, #0
 8016cbc:	3401      	adds	r4, #1
 8016cbe:	9305      	str	r3, [sp, #20]
 8016cc0:	4619      	mov	r1, r3
 8016cc2:	f04f 0c0a 	mov.w	ip, #10
 8016cc6:	4620      	mov	r0, r4
 8016cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ccc:	3a30      	subs	r2, #48	@ 0x30
 8016cce:	2a09      	cmp	r2, #9
 8016cd0:	d903      	bls.n	8016cda <_svfiprintf_r+0x1a6>
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d0c6      	beq.n	8016c64 <_svfiprintf_r+0x130>
 8016cd6:	9105      	str	r1, [sp, #20]
 8016cd8:	e7c4      	b.n	8016c64 <_svfiprintf_r+0x130>
 8016cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8016cde:	4604      	mov	r4, r0
 8016ce0:	2301      	movs	r3, #1
 8016ce2:	e7f0      	b.n	8016cc6 <_svfiprintf_r+0x192>
 8016ce4:	ab03      	add	r3, sp, #12
 8016ce6:	9300      	str	r3, [sp, #0]
 8016ce8:	462a      	mov	r2, r5
 8016cea:	4b0e      	ldr	r3, [pc, #56]	@ (8016d24 <_svfiprintf_r+0x1f0>)
 8016cec:	a904      	add	r1, sp, #16
 8016cee:	4638      	mov	r0, r7
 8016cf0:	f7fc fc34 	bl	801355c <_printf_float>
 8016cf4:	1c42      	adds	r2, r0, #1
 8016cf6:	4606      	mov	r6, r0
 8016cf8:	d1d6      	bne.n	8016ca8 <_svfiprintf_r+0x174>
 8016cfa:	89ab      	ldrh	r3, [r5, #12]
 8016cfc:	065b      	lsls	r3, r3, #25
 8016cfe:	f53f af2d 	bmi.w	8016b5c <_svfiprintf_r+0x28>
 8016d02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016d04:	e72c      	b.n	8016b60 <_svfiprintf_r+0x2c>
 8016d06:	ab03      	add	r3, sp, #12
 8016d08:	9300      	str	r3, [sp, #0]
 8016d0a:	462a      	mov	r2, r5
 8016d0c:	4b05      	ldr	r3, [pc, #20]	@ (8016d24 <_svfiprintf_r+0x1f0>)
 8016d0e:	a904      	add	r1, sp, #16
 8016d10:	4638      	mov	r0, r7
 8016d12:	f7fc febb 	bl	8013a8c <_printf_i>
 8016d16:	e7ed      	b.n	8016cf4 <_svfiprintf_r+0x1c0>
 8016d18:	08019271 	.word	0x08019271
 8016d1c:	0801927b 	.word	0x0801927b
 8016d20:	0801355d 	.word	0x0801355d
 8016d24:	08016a7d 	.word	0x08016a7d
 8016d28:	08019277 	.word	0x08019277

08016d2c <__sfputc_r>:
 8016d2c:	6893      	ldr	r3, [r2, #8]
 8016d2e:	3b01      	subs	r3, #1
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	b410      	push	{r4}
 8016d34:	6093      	str	r3, [r2, #8]
 8016d36:	da08      	bge.n	8016d4a <__sfputc_r+0x1e>
 8016d38:	6994      	ldr	r4, [r2, #24]
 8016d3a:	42a3      	cmp	r3, r4
 8016d3c:	db01      	blt.n	8016d42 <__sfputc_r+0x16>
 8016d3e:	290a      	cmp	r1, #10
 8016d40:	d103      	bne.n	8016d4a <__sfputc_r+0x1e>
 8016d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d46:	f7fd bb9e 	b.w	8014486 <__swbuf_r>
 8016d4a:	6813      	ldr	r3, [r2, #0]
 8016d4c:	1c58      	adds	r0, r3, #1
 8016d4e:	6010      	str	r0, [r2, #0]
 8016d50:	7019      	strb	r1, [r3, #0]
 8016d52:	4608      	mov	r0, r1
 8016d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d58:	4770      	bx	lr

08016d5a <__sfputs_r>:
 8016d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d5c:	4606      	mov	r6, r0
 8016d5e:	460f      	mov	r7, r1
 8016d60:	4614      	mov	r4, r2
 8016d62:	18d5      	adds	r5, r2, r3
 8016d64:	42ac      	cmp	r4, r5
 8016d66:	d101      	bne.n	8016d6c <__sfputs_r+0x12>
 8016d68:	2000      	movs	r0, #0
 8016d6a:	e007      	b.n	8016d7c <__sfputs_r+0x22>
 8016d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d70:	463a      	mov	r2, r7
 8016d72:	4630      	mov	r0, r6
 8016d74:	f7ff ffda 	bl	8016d2c <__sfputc_r>
 8016d78:	1c43      	adds	r3, r0, #1
 8016d7a:	d1f3      	bne.n	8016d64 <__sfputs_r+0xa>
 8016d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d80 <_vfiprintf_r>:
 8016d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d84:	460d      	mov	r5, r1
 8016d86:	b09d      	sub	sp, #116	@ 0x74
 8016d88:	4614      	mov	r4, r2
 8016d8a:	4698      	mov	r8, r3
 8016d8c:	4606      	mov	r6, r0
 8016d8e:	b118      	cbz	r0, 8016d98 <_vfiprintf_r+0x18>
 8016d90:	6a03      	ldr	r3, [r0, #32]
 8016d92:	b90b      	cbnz	r3, 8016d98 <_vfiprintf_r+0x18>
 8016d94:	f7fd fa3a 	bl	801420c <__sinit>
 8016d98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d9a:	07d9      	lsls	r1, r3, #31
 8016d9c:	d405      	bmi.n	8016daa <_vfiprintf_r+0x2a>
 8016d9e:	89ab      	ldrh	r3, [r5, #12]
 8016da0:	059a      	lsls	r2, r3, #22
 8016da2:	d402      	bmi.n	8016daa <_vfiprintf_r+0x2a>
 8016da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016da6:	f7fd fc90 	bl	80146ca <__retarget_lock_acquire_recursive>
 8016daa:	89ab      	ldrh	r3, [r5, #12]
 8016dac:	071b      	lsls	r3, r3, #28
 8016dae:	d501      	bpl.n	8016db4 <_vfiprintf_r+0x34>
 8016db0:	692b      	ldr	r3, [r5, #16]
 8016db2:	b99b      	cbnz	r3, 8016ddc <_vfiprintf_r+0x5c>
 8016db4:	4629      	mov	r1, r5
 8016db6:	4630      	mov	r0, r6
 8016db8:	f7fd fba4 	bl	8014504 <__swsetup_r>
 8016dbc:	b170      	cbz	r0, 8016ddc <_vfiprintf_r+0x5c>
 8016dbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016dc0:	07dc      	lsls	r4, r3, #31
 8016dc2:	d504      	bpl.n	8016dce <_vfiprintf_r+0x4e>
 8016dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8016dc8:	b01d      	add	sp, #116	@ 0x74
 8016dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dce:	89ab      	ldrh	r3, [r5, #12]
 8016dd0:	0598      	lsls	r0, r3, #22
 8016dd2:	d4f7      	bmi.n	8016dc4 <_vfiprintf_r+0x44>
 8016dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016dd6:	f7fd fc79 	bl	80146cc <__retarget_lock_release_recursive>
 8016dda:	e7f3      	b.n	8016dc4 <_vfiprintf_r+0x44>
 8016ddc:	2300      	movs	r3, #0
 8016dde:	9309      	str	r3, [sp, #36]	@ 0x24
 8016de0:	2320      	movs	r3, #32
 8016de2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016de6:	f8cd 800c 	str.w	r8, [sp, #12]
 8016dea:	2330      	movs	r3, #48	@ 0x30
 8016dec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016f9c <_vfiprintf_r+0x21c>
 8016df0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016df4:	f04f 0901 	mov.w	r9, #1
 8016df8:	4623      	mov	r3, r4
 8016dfa:	469a      	mov	sl, r3
 8016dfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e00:	b10a      	cbz	r2, 8016e06 <_vfiprintf_r+0x86>
 8016e02:	2a25      	cmp	r2, #37	@ 0x25
 8016e04:	d1f9      	bne.n	8016dfa <_vfiprintf_r+0x7a>
 8016e06:	ebba 0b04 	subs.w	fp, sl, r4
 8016e0a:	d00b      	beq.n	8016e24 <_vfiprintf_r+0xa4>
 8016e0c:	465b      	mov	r3, fp
 8016e0e:	4622      	mov	r2, r4
 8016e10:	4629      	mov	r1, r5
 8016e12:	4630      	mov	r0, r6
 8016e14:	f7ff ffa1 	bl	8016d5a <__sfputs_r>
 8016e18:	3001      	adds	r0, #1
 8016e1a:	f000 80a7 	beq.w	8016f6c <_vfiprintf_r+0x1ec>
 8016e1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e20:	445a      	add	r2, fp
 8016e22:	9209      	str	r2, [sp, #36]	@ 0x24
 8016e24:	f89a 3000 	ldrb.w	r3, [sl]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	f000 809f 	beq.w	8016f6c <_vfiprintf_r+0x1ec>
 8016e2e:	2300      	movs	r3, #0
 8016e30:	f04f 32ff 	mov.w	r2, #4294967295
 8016e34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e38:	f10a 0a01 	add.w	sl, sl, #1
 8016e3c:	9304      	str	r3, [sp, #16]
 8016e3e:	9307      	str	r3, [sp, #28]
 8016e40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016e44:	931a      	str	r3, [sp, #104]	@ 0x68
 8016e46:	4654      	mov	r4, sl
 8016e48:	2205      	movs	r2, #5
 8016e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e4e:	4853      	ldr	r0, [pc, #332]	@ (8016f9c <_vfiprintf_r+0x21c>)
 8016e50:	f7e9 f9c6 	bl	80001e0 <memchr>
 8016e54:	9a04      	ldr	r2, [sp, #16]
 8016e56:	b9d8      	cbnz	r0, 8016e90 <_vfiprintf_r+0x110>
 8016e58:	06d1      	lsls	r1, r2, #27
 8016e5a:	bf44      	itt	mi
 8016e5c:	2320      	movmi	r3, #32
 8016e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e62:	0713      	lsls	r3, r2, #28
 8016e64:	bf44      	itt	mi
 8016e66:	232b      	movmi	r3, #43	@ 0x2b
 8016e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8016e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e72:	d015      	beq.n	8016ea0 <_vfiprintf_r+0x120>
 8016e74:	9a07      	ldr	r2, [sp, #28]
 8016e76:	4654      	mov	r4, sl
 8016e78:	2000      	movs	r0, #0
 8016e7a:	f04f 0c0a 	mov.w	ip, #10
 8016e7e:	4621      	mov	r1, r4
 8016e80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e84:	3b30      	subs	r3, #48	@ 0x30
 8016e86:	2b09      	cmp	r3, #9
 8016e88:	d94b      	bls.n	8016f22 <_vfiprintf_r+0x1a2>
 8016e8a:	b1b0      	cbz	r0, 8016eba <_vfiprintf_r+0x13a>
 8016e8c:	9207      	str	r2, [sp, #28]
 8016e8e:	e014      	b.n	8016eba <_vfiprintf_r+0x13a>
 8016e90:	eba0 0308 	sub.w	r3, r0, r8
 8016e94:	fa09 f303 	lsl.w	r3, r9, r3
 8016e98:	4313      	orrs	r3, r2
 8016e9a:	9304      	str	r3, [sp, #16]
 8016e9c:	46a2      	mov	sl, r4
 8016e9e:	e7d2      	b.n	8016e46 <_vfiprintf_r+0xc6>
 8016ea0:	9b03      	ldr	r3, [sp, #12]
 8016ea2:	1d19      	adds	r1, r3, #4
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	9103      	str	r1, [sp, #12]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	bfbb      	ittet	lt
 8016eac:	425b      	neglt	r3, r3
 8016eae:	f042 0202 	orrlt.w	r2, r2, #2
 8016eb2:	9307      	strge	r3, [sp, #28]
 8016eb4:	9307      	strlt	r3, [sp, #28]
 8016eb6:	bfb8      	it	lt
 8016eb8:	9204      	strlt	r2, [sp, #16]
 8016eba:	7823      	ldrb	r3, [r4, #0]
 8016ebc:	2b2e      	cmp	r3, #46	@ 0x2e
 8016ebe:	d10a      	bne.n	8016ed6 <_vfiprintf_r+0x156>
 8016ec0:	7863      	ldrb	r3, [r4, #1]
 8016ec2:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ec4:	d132      	bne.n	8016f2c <_vfiprintf_r+0x1ac>
 8016ec6:	9b03      	ldr	r3, [sp, #12]
 8016ec8:	1d1a      	adds	r2, r3, #4
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	9203      	str	r2, [sp, #12]
 8016ece:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016ed2:	3402      	adds	r4, #2
 8016ed4:	9305      	str	r3, [sp, #20]
 8016ed6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016fac <_vfiprintf_r+0x22c>
 8016eda:	7821      	ldrb	r1, [r4, #0]
 8016edc:	2203      	movs	r2, #3
 8016ede:	4650      	mov	r0, sl
 8016ee0:	f7e9 f97e 	bl	80001e0 <memchr>
 8016ee4:	b138      	cbz	r0, 8016ef6 <_vfiprintf_r+0x176>
 8016ee6:	9b04      	ldr	r3, [sp, #16]
 8016ee8:	eba0 000a 	sub.w	r0, r0, sl
 8016eec:	2240      	movs	r2, #64	@ 0x40
 8016eee:	4082      	lsls	r2, r0
 8016ef0:	4313      	orrs	r3, r2
 8016ef2:	3401      	adds	r4, #1
 8016ef4:	9304      	str	r3, [sp, #16]
 8016ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016efa:	4829      	ldr	r0, [pc, #164]	@ (8016fa0 <_vfiprintf_r+0x220>)
 8016efc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016f00:	2206      	movs	r2, #6
 8016f02:	f7e9 f96d 	bl	80001e0 <memchr>
 8016f06:	2800      	cmp	r0, #0
 8016f08:	d03f      	beq.n	8016f8a <_vfiprintf_r+0x20a>
 8016f0a:	4b26      	ldr	r3, [pc, #152]	@ (8016fa4 <_vfiprintf_r+0x224>)
 8016f0c:	bb1b      	cbnz	r3, 8016f56 <_vfiprintf_r+0x1d6>
 8016f0e:	9b03      	ldr	r3, [sp, #12]
 8016f10:	3307      	adds	r3, #7
 8016f12:	f023 0307 	bic.w	r3, r3, #7
 8016f16:	3308      	adds	r3, #8
 8016f18:	9303      	str	r3, [sp, #12]
 8016f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f1c:	443b      	add	r3, r7
 8016f1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f20:	e76a      	b.n	8016df8 <_vfiprintf_r+0x78>
 8016f22:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f26:	460c      	mov	r4, r1
 8016f28:	2001      	movs	r0, #1
 8016f2a:	e7a8      	b.n	8016e7e <_vfiprintf_r+0xfe>
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	3401      	adds	r4, #1
 8016f30:	9305      	str	r3, [sp, #20]
 8016f32:	4619      	mov	r1, r3
 8016f34:	f04f 0c0a 	mov.w	ip, #10
 8016f38:	4620      	mov	r0, r4
 8016f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f3e:	3a30      	subs	r2, #48	@ 0x30
 8016f40:	2a09      	cmp	r2, #9
 8016f42:	d903      	bls.n	8016f4c <_vfiprintf_r+0x1cc>
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d0c6      	beq.n	8016ed6 <_vfiprintf_r+0x156>
 8016f48:	9105      	str	r1, [sp, #20]
 8016f4a:	e7c4      	b.n	8016ed6 <_vfiprintf_r+0x156>
 8016f4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f50:	4604      	mov	r4, r0
 8016f52:	2301      	movs	r3, #1
 8016f54:	e7f0      	b.n	8016f38 <_vfiprintf_r+0x1b8>
 8016f56:	ab03      	add	r3, sp, #12
 8016f58:	9300      	str	r3, [sp, #0]
 8016f5a:	462a      	mov	r2, r5
 8016f5c:	4b12      	ldr	r3, [pc, #72]	@ (8016fa8 <_vfiprintf_r+0x228>)
 8016f5e:	a904      	add	r1, sp, #16
 8016f60:	4630      	mov	r0, r6
 8016f62:	f7fc fafb 	bl	801355c <_printf_float>
 8016f66:	4607      	mov	r7, r0
 8016f68:	1c78      	adds	r0, r7, #1
 8016f6a:	d1d6      	bne.n	8016f1a <_vfiprintf_r+0x19a>
 8016f6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016f6e:	07d9      	lsls	r1, r3, #31
 8016f70:	d405      	bmi.n	8016f7e <_vfiprintf_r+0x1fe>
 8016f72:	89ab      	ldrh	r3, [r5, #12]
 8016f74:	059a      	lsls	r2, r3, #22
 8016f76:	d402      	bmi.n	8016f7e <_vfiprintf_r+0x1fe>
 8016f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016f7a:	f7fd fba7 	bl	80146cc <__retarget_lock_release_recursive>
 8016f7e:	89ab      	ldrh	r3, [r5, #12]
 8016f80:	065b      	lsls	r3, r3, #25
 8016f82:	f53f af1f 	bmi.w	8016dc4 <_vfiprintf_r+0x44>
 8016f86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016f88:	e71e      	b.n	8016dc8 <_vfiprintf_r+0x48>
 8016f8a:	ab03      	add	r3, sp, #12
 8016f8c:	9300      	str	r3, [sp, #0]
 8016f8e:	462a      	mov	r2, r5
 8016f90:	4b05      	ldr	r3, [pc, #20]	@ (8016fa8 <_vfiprintf_r+0x228>)
 8016f92:	a904      	add	r1, sp, #16
 8016f94:	4630      	mov	r0, r6
 8016f96:	f7fc fd79 	bl	8013a8c <_printf_i>
 8016f9a:	e7e4      	b.n	8016f66 <_vfiprintf_r+0x1e6>
 8016f9c:	08019271 	.word	0x08019271
 8016fa0:	0801927b 	.word	0x0801927b
 8016fa4:	0801355d 	.word	0x0801355d
 8016fa8:	08016d5b 	.word	0x08016d5b
 8016fac:	08019277 	.word	0x08019277

08016fb0 <__sflush_r>:
 8016fb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fb8:	0716      	lsls	r6, r2, #28
 8016fba:	4605      	mov	r5, r0
 8016fbc:	460c      	mov	r4, r1
 8016fbe:	d454      	bmi.n	801706a <__sflush_r+0xba>
 8016fc0:	684b      	ldr	r3, [r1, #4]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	dc02      	bgt.n	8016fcc <__sflush_r+0x1c>
 8016fc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	dd48      	ble.n	801705e <__sflush_r+0xae>
 8016fcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016fce:	2e00      	cmp	r6, #0
 8016fd0:	d045      	beq.n	801705e <__sflush_r+0xae>
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016fd8:	682f      	ldr	r7, [r5, #0]
 8016fda:	6a21      	ldr	r1, [r4, #32]
 8016fdc:	602b      	str	r3, [r5, #0]
 8016fde:	d030      	beq.n	8017042 <__sflush_r+0x92>
 8016fe0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016fe2:	89a3      	ldrh	r3, [r4, #12]
 8016fe4:	0759      	lsls	r1, r3, #29
 8016fe6:	d505      	bpl.n	8016ff4 <__sflush_r+0x44>
 8016fe8:	6863      	ldr	r3, [r4, #4]
 8016fea:	1ad2      	subs	r2, r2, r3
 8016fec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016fee:	b10b      	cbz	r3, 8016ff4 <__sflush_r+0x44>
 8016ff0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016ff2:	1ad2      	subs	r2, r2, r3
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016ff8:	6a21      	ldr	r1, [r4, #32]
 8016ffa:	4628      	mov	r0, r5
 8016ffc:	47b0      	blx	r6
 8016ffe:	1c43      	adds	r3, r0, #1
 8017000:	89a3      	ldrh	r3, [r4, #12]
 8017002:	d106      	bne.n	8017012 <__sflush_r+0x62>
 8017004:	6829      	ldr	r1, [r5, #0]
 8017006:	291d      	cmp	r1, #29
 8017008:	d82b      	bhi.n	8017062 <__sflush_r+0xb2>
 801700a:	4a2a      	ldr	r2, [pc, #168]	@ (80170b4 <__sflush_r+0x104>)
 801700c:	410a      	asrs	r2, r1
 801700e:	07d6      	lsls	r6, r2, #31
 8017010:	d427      	bmi.n	8017062 <__sflush_r+0xb2>
 8017012:	2200      	movs	r2, #0
 8017014:	6062      	str	r2, [r4, #4]
 8017016:	04d9      	lsls	r1, r3, #19
 8017018:	6922      	ldr	r2, [r4, #16]
 801701a:	6022      	str	r2, [r4, #0]
 801701c:	d504      	bpl.n	8017028 <__sflush_r+0x78>
 801701e:	1c42      	adds	r2, r0, #1
 8017020:	d101      	bne.n	8017026 <__sflush_r+0x76>
 8017022:	682b      	ldr	r3, [r5, #0]
 8017024:	b903      	cbnz	r3, 8017028 <__sflush_r+0x78>
 8017026:	6560      	str	r0, [r4, #84]	@ 0x54
 8017028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801702a:	602f      	str	r7, [r5, #0]
 801702c:	b1b9      	cbz	r1, 801705e <__sflush_r+0xae>
 801702e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017032:	4299      	cmp	r1, r3
 8017034:	d002      	beq.n	801703c <__sflush_r+0x8c>
 8017036:	4628      	mov	r0, r5
 8017038:	f7fe f99e 	bl	8015378 <_free_r>
 801703c:	2300      	movs	r3, #0
 801703e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017040:	e00d      	b.n	801705e <__sflush_r+0xae>
 8017042:	2301      	movs	r3, #1
 8017044:	4628      	mov	r0, r5
 8017046:	47b0      	blx	r6
 8017048:	4602      	mov	r2, r0
 801704a:	1c50      	adds	r0, r2, #1
 801704c:	d1c9      	bne.n	8016fe2 <__sflush_r+0x32>
 801704e:	682b      	ldr	r3, [r5, #0]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d0c6      	beq.n	8016fe2 <__sflush_r+0x32>
 8017054:	2b1d      	cmp	r3, #29
 8017056:	d001      	beq.n	801705c <__sflush_r+0xac>
 8017058:	2b16      	cmp	r3, #22
 801705a:	d11e      	bne.n	801709a <__sflush_r+0xea>
 801705c:	602f      	str	r7, [r5, #0]
 801705e:	2000      	movs	r0, #0
 8017060:	e022      	b.n	80170a8 <__sflush_r+0xf8>
 8017062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017066:	b21b      	sxth	r3, r3
 8017068:	e01b      	b.n	80170a2 <__sflush_r+0xf2>
 801706a:	690f      	ldr	r7, [r1, #16]
 801706c:	2f00      	cmp	r7, #0
 801706e:	d0f6      	beq.n	801705e <__sflush_r+0xae>
 8017070:	0793      	lsls	r3, r2, #30
 8017072:	680e      	ldr	r6, [r1, #0]
 8017074:	bf08      	it	eq
 8017076:	694b      	ldreq	r3, [r1, #20]
 8017078:	600f      	str	r7, [r1, #0]
 801707a:	bf18      	it	ne
 801707c:	2300      	movne	r3, #0
 801707e:	eba6 0807 	sub.w	r8, r6, r7
 8017082:	608b      	str	r3, [r1, #8]
 8017084:	f1b8 0f00 	cmp.w	r8, #0
 8017088:	dde9      	ble.n	801705e <__sflush_r+0xae>
 801708a:	6a21      	ldr	r1, [r4, #32]
 801708c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801708e:	4643      	mov	r3, r8
 8017090:	463a      	mov	r2, r7
 8017092:	4628      	mov	r0, r5
 8017094:	47b0      	blx	r6
 8017096:	2800      	cmp	r0, #0
 8017098:	dc08      	bgt.n	80170ac <__sflush_r+0xfc>
 801709a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801709e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80170a2:	81a3      	strh	r3, [r4, #12]
 80170a4:	f04f 30ff 	mov.w	r0, #4294967295
 80170a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170ac:	4407      	add	r7, r0
 80170ae:	eba8 0800 	sub.w	r8, r8, r0
 80170b2:	e7e7      	b.n	8017084 <__sflush_r+0xd4>
 80170b4:	dfbffffe 	.word	0xdfbffffe

080170b8 <_fflush_r>:
 80170b8:	b538      	push	{r3, r4, r5, lr}
 80170ba:	690b      	ldr	r3, [r1, #16]
 80170bc:	4605      	mov	r5, r0
 80170be:	460c      	mov	r4, r1
 80170c0:	b913      	cbnz	r3, 80170c8 <_fflush_r+0x10>
 80170c2:	2500      	movs	r5, #0
 80170c4:	4628      	mov	r0, r5
 80170c6:	bd38      	pop	{r3, r4, r5, pc}
 80170c8:	b118      	cbz	r0, 80170d2 <_fflush_r+0x1a>
 80170ca:	6a03      	ldr	r3, [r0, #32]
 80170cc:	b90b      	cbnz	r3, 80170d2 <_fflush_r+0x1a>
 80170ce:	f7fd f89d 	bl	801420c <__sinit>
 80170d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d0f3      	beq.n	80170c2 <_fflush_r+0xa>
 80170da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80170dc:	07d0      	lsls	r0, r2, #31
 80170de:	d404      	bmi.n	80170ea <_fflush_r+0x32>
 80170e0:	0599      	lsls	r1, r3, #22
 80170e2:	d402      	bmi.n	80170ea <_fflush_r+0x32>
 80170e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80170e6:	f7fd faf0 	bl	80146ca <__retarget_lock_acquire_recursive>
 80170ea:	4628      	mov	r0, r5
 80170ec:	4621      	mov	r1, r4
 80170ee:	f7ff ff5f 	bl	8016fb0 <__sflush_r>
 80170f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80170f4:	07da      	lsls	r2, r3, #31
 80170f6:	4605      	mov	r5, r0
 80170f8:	d4e4      	bmi.n	80170c4 <_fflush_r+0xc>
 80170fa:	89a3      	ldrh	r3, [r4, #12]
 80170fc:	059b      	lsls	r3, r3, #22
 80170fe:	d4e1      	bmi.n	80170c4 <_fflush_r+0xc>
 8017100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017102:	f7fd fae3 	bl	80146cc <__retarget_lock_release_recursive>
 8017106:	e7dd      	b.n	80170c4 <_fflush_r+0xc>

08017108 <__swhatbuf_r>:
 8017108:	b570      	push	{r4, r5, r6, lr}
 801710a:	460c      	mov	r4, r1
 801710c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017110:	2900      	cmp	r1, #0
 8017112:	b096      	sub	sp, #88	@ 0x58
 8017114:	4615      	mov	r5, r2
 8017116:	461e      	mov	r6, r3
 8017118:	da0d      	bge.n	8017136 <__swhatbuf_r+0x2e>
 801711a:	89a3      	ldrh	r3, [r4, #12]
 801711c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017120:	f04f 0100 	mov.w	r1, #0
 8017124:	bf14      	ite	ne
 8017126:	2340      	movne	r3, #64	@ 0x40
 8017128:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801712c:	2000      	movs	r0, #0
 801712e:	6031      	str	r1, [r6, #0]
 8017130:	602b      	str	r3, [r5, #0]
 8017132:	b016      	add	sp, #88	@ 0x58
 8017134:	bd70      	pop	{r4, r5, r6, pc}
 8017136:	466a      	mov	r2, sp
 8017138:	f000 f874 	bl	8017224 <_fstat_r>
 801713c:	2800      	cmp	r0, #0
 801713e:	dbec      	blt.n	801711a <__swhatbuf_r+0x12>
 8017140:	9901      	ldr	r1, [sp, #4]
 8017142:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017146:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801714a:	4259      	negs	r1, r3
 801714c:	4159      	adcs	r1, r3
 801714e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017152:	e7eb      	b.n	801712c <__swhatbuf_r+0x24>

08017154 <__smakebuf_r>:
 8017154:	898b      	ldrh	r3, [r1, #12]
 8017156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017158:	079d      	lsls	r5, r3, #30
 801715a:	4606      	mov	r6, r0
 801715c:	460c      	mov	r4, r1
 801715e:	d507      	bpl.n	8017170 <__smakebuf_r+0x1c>
 8017160:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017164:	6023      	str	r3, [r4, #0]
 8017166:	6123      	str	r3, [r4, #16]
 8017168:	2301      	movs	r3, #1
 801716a:	6163      	str	r3, [r4, #20]
 801716c:	b003      	add	sp, #12
 801716e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017170:	ab01      	add	r3, sp, #4
 8017172:	466a      	mov	r2, sp
 8017174:	f7ff ffc8 	bl	8017108 <__swhatbuf_r>
 8017178:	9f00      	ldr	r7, [sp, #0]
 801717a:	4605      	mov	r5, r0
 801717c:	4639      	mov	r1, r7
 801717e:	4630      	mov	r0, r6
 8017180:	f7fc f8c0 	bl	8013304 <_malloc_r>
 8017184:	b948      	cbnz	r0, 801719a <__smakebuf_r+0x46>
 8017186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801718a:	059a      	lsls	r2, r3, #22
 801718c:	d4ee      	bmi.n	801716c <__smakebuf_r+0x18>
 801718e:	f023 0303 	bic.w	r3, r3, #3
 8017192:	f043 0302 	orr.w	r3, r3, #2
 8017196:	81a3      	strh	r3, [r4, #12]
 8017198:	e7e2      	b.n	8017160 <__smakebuf_r+0xc>
 801719a:	89a3      	ldrh	r3, [r4, #12]
 801719c:	6020      	str	r0, [r4, #0]
 801719e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80171a2:	81a3      	strh	r3, [r4, #12]
 80171a4:	9b01      	ldr	r3, [sp, #4]
 80171a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80171aa:	b15b      	cbz	r3, 80171c4 <__smakebuf_r+0x70>
 80171ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80171b0:	4630      	mov	r0, r6
 80171b2:	f000 f849 	bl	8017248 <_isatty_r>
 80171b6:	b128      	cbz	r0, 80171c4 <__smakebuf_r+0x70>
 80171b8:	89a3      	ldrh	r3, [r4, #12]
 80171ba:	f023 0303 	bic.w	r3, r3, #3
 80171be:	f043 0301 	orr.w	r3, r3, #1
 80171c2:	81a3      	strh	r3, [r4, #12]
 80171c4:	89a3      	ldrh	r3, [r4, #12]
 80171c6:	431d      	orrs	r5, r3
 80171c8:	81a5      	strh	r5, [r4, #12]
 80171ca:	e7cf      	b.n	801716c <__smakebuf_r+0x18>

080171cc <memmove>:
 80171cc:	4288      	cmp	r0, r1
 80171ce:	b510      	push	{r4, lr}
 80171d0:	eb01 0402 	add.w	r4, r1, r2
 80171d4:	d902      	bls.n	80171dc <memmove+0x10>
 80171d6:	4284      	cmp	r4, r0
 80171d8:	4623      	mov	r3, r4
 80171da:	d807      	bhi.n	80171ec <memmove+0x20>
 80171dc:	1e43      	subs	r3, r0, #1
 80171de:	42a1      	cmp	r1, r4
 80171e0:	d008      	beq.n	80171f4 <memmove+0x28>
 80171e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80171ea:	e7f8      	b.n	80171de <memmove+0x12>
 80171ec:	4402      	add	r2, r0
 80171ee:	4601      	mov	r1, r0
 80171f0:	428a      	cmp	r2, r1
 80171f2:	d100      	bne.n	80171f6 <memmove+0x2a>
 80171f4:	bd10      	pop	{r4, pc}
 80171f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80171fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80171fe:	e7f7      	b.n	80171f0 <memmove+0x24>

08017200 <strncmp>:
 8017200:	b510      	push	{r4, lr}
 8017202:	b16a      	cbz	r2, 8017220 <strncmp+0x20>
 8017204:	3901      	subs	r1, #1
 8017206:	1884      	adds	r4, r0, r2
 8017208:	f810 2b01 	ldrb.w	r2, [r0], #1
 801720c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017210:	429a      	cmp	r2, r3
 8017212:	d103      	bne.n	801721c <strncmp+0x1c>
 8017214:	42a0      	cmp	r0, r4
 8017216:	d001      	beq.n	801721c <strncmp+0x1c>
 8017218:	2a00      	cmp	r2, #0
 801721a:	d1f5      	bne.n	8017208 <strncmp+0x8>
 801721c:	1ad0      	subs	r0, r2, r3
 801721e:	bd10      	pop	{r4, pc}
 8017220:	4610      	mov	r0, r2
 8017222:	e7fc      	b.n	801721e <strncmp+0x1e>

08017224 <_fstat_r>:
 8017224:	b538      	push	{r3, r4, r5, lr}
 8017226:	4d07      	ldr	r5, [pc, #28]	@ (8017244 <_fstat_r+0x20>)
 8017228:	2300      	movs	r3, #0
 801722a:	4604      	mov	r4, r0
 801722c:	4608      	mov	r0, r1
 801722e:	4611      	mov	r1, r2
 8017230:	602b      	str	r3, [r5, #0]
 8017232:	f7eb f845 	bl	80022c0 <_fstat>
 8017236:	1c43      	adds	r3, r0, #1
 8017238:	d102      	bne.n	8017240 <_fstat_r+0x1c>
 801723a:	682b      	ldr	r3, [r5, #0]
 801723c:	b103      	cbz	r3, 8017240 <_fstat_r+0x1c>
 801723e:	6023      	str	r3, [r4, #0]
 8017240:	bd38      	pop	{r3, r4, r5, pc}
 8017242:	bf00      	nop
 8017244:	20004c40 	.word	0x20004c40

08017248 <_isatty_r>:
 8017248:	b538      	push	{r3, r4, r5, lr}
 801724a:	4d06      	ldr	r5, [pc, #24]	@ (8017264 <_isatty_r+0x1c>)
 801724c:	2300      	movs	r3, #0
 801724e:	4604      	mov	r4, r0
 8017250:	4608      	mov	r0, r1
 8017252:	602b      	str	r3, [r5, #0]
 8017254:	f7eb f844 	bl	80022e0 <_isatty>
 8017258:	1c43      	adds	r3, r0, #1
 801725a:	d102      	bne.n	8017262 <_isatty_r+0x1a>
 801725c:	682b      	ldr	r3, [r5, #0]
 801725e:	b103      	cbz	r3, 8017262 <_isatty_r+0x1a>
 8017260:	6023      	str	r3, [r4, #0]
 8017262:	bd38      	pop	{r3, r4, r5, pc}
 8017264:	20004c40 	.word	0x20004c40

08017268 <memcpy>:
 8017268:	440a      	add	r2, r1
 801726a:	4291      	cmp	r1, r2
 801726c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017270:	d100      	bne.n	8017274 <memcpy+0xc>
 8017272:	4770      	bx	lr
 8017274:	b510      	push	{r4, lr}
 8017276:	f811 4b01 	ldrb.w	r4, [r1], #1
 801727a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801727e:	4291      	cmp	r1, r2
 8017280:	d1f9      	bne.n	8017276 <memcpy+0xe>
 8017282:	bd10      	pop	{r4, pc}
 8017284:	0000      	movs	r0, r0
	...

08017288 <nan>:
 8017288:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017290 <nan+0x8>
 801728c:	4770      	bx	lr
 801728e:	bf00      	nop
 8017290:	00000000 	.word	0x00000000
 8017294:	7ff80000 	.word	0x7ff80000

08017298 <__assert_func>:
 8017298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801729a:	4614      	mov	r4, r2
 801729c:	461a      	mov	r2, r3
 801729e:	4b09      	ldr	r3, [pc, #36]	@ (80172c4 <__assert_func+0x2c>)
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	4605      	mov	r5, r0
 80172a4:	68d8      	ldr	r0, [r3, #12]
 80172a6:	b954      	cbnz	r4, 80172be <__assert_func+0x26>
 80172a8:	4b07      	ldr	r3, [pc, #28]	@ (80172c8 <__assert_func+0x30>)
 80172aa:	461c      	mov	r4, r3
 80172ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80172b0:	9100      	str	r1, [sp, #0]
 80172b2:	462b      	mov	r3, r5
 80172b4:	4905      	ldr	r1, [pc, #20]	@ (80172cc <__assert_func+0x34>)
 80172b6:	f000 fba7 	bl	8017a08 <fiprintf>
 80172ba:	f000 fbb7 	bl	8017a2c <abort>
 80172be:	4b04      	ldr	r3, [pc, #16]	@ (80172d0 <__assert_func+0x38>)
 80172c0:	e7f4      	b.n	80172ac <__assert_func+0x14>
 80172c2:	bf00      	nop
 80172c4:	200001ec 	.word	0x200001ec
 80172c8:	080192c5 	.word	0x080192c5
 80172cc:	08019297 	.word	0x08019297
 80172d0:	0801928a 	.word	0x0801928a

080172d4 <_calloc_r>:
 80172d4:	b570      	push	{r4, r5, r6, lr}
 80172d6:	fba1 5402 	umull	r5, r4, r1, r2
 80172da:	b93c      	cbnz	r4, 80172ec <_calloc_r+0x18>
 80172dc:	4629      	mov	r1, r5
 80172de:	f7fc f811 	bl	8013304 <_malloc_r>
 80172e2:	4606      	mov	r6, r0
 80172e4:	b928      	cbnz	r0, 80172f2 <_calloc_r+0x1e>
 80172e6:	2600      	movs	r6, #0
 80172e8:	4630      	mov	r0, r6
 80172ea:	bd70      	pop	{r4, r5, r6, pc}
 80172ec:	220c      	movs	r2, #12
 80172ee:	6002      	str	r2, [r0, #0]
 80172f0:	e7f9      	b.n	80172e6 <_calloc_r+0x12>
 80172f2:	462a      	mov	r2, r5
 80172f4:	4621      	mov	r1, r4
 80172f6:	f7fd f95b 	bl	80145b0 <memset>
 80172fa:	e7f5      	b.n	80172e8 <_calloc_r+0x14>

080172fc <rshift>:
 80172fc:	6903      	ldr	r3, [r0, #16]
 80172fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017302:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017306:	ea4f 1261 	mov.w	r2, r1, asr #5
 801730a:	f100 0414 	add.w	r4, r0, #20
 801730e:	dd45      	ble.n	801739c <rshift+0xa0>
 8017310:	f011 011f 	ands.w	r1, r1, #31
 8017314:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017318:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801731c:	d10c      	bne.n	8017338 <rshift+0x3c>
 801731e:	f100 0710 	add.w	r7, r0, #16
 8017322:	4629      	mov	r1, r5
 8017324:	42b1      	cmp	r1, r6
 8017326:	d334      	bcc.n	8017392 <rshift+0x96>
 8017328:	1a9b      	subs	r3, r3, r2
 801732a:	009b      	lsls	r3, r3, #2
 801732c:	1eea      	subs	r2, r5, #3
 801732e:	4296      	cmp	r6, r2
 8017330:	bf38      	it	cc
 8017332:	2300      	movcc	r3, #0
 8017334:	4423      	add	r3, r4
 8017336:	e015      	b.n	8017364 <rshift+0x68>
 8017338:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801733c:	f1c1 0820 	rsb	r8, r1, #32
 8017340:	40cf      	lsrs	r7, r1
 8017342:	f105 0e04 	add.w	lr, r5, #4
 8017346:	46a1      	mov	r9, r4
 8017348:	4576      	cmp	r6, lr
 801734a:	46f4      	mov	ip, lr
 801734c:	d815      	bhi.n	801737a <rshift+0x7e>
 801734e:	1a9a      	subs	r2, r3, r2
 8017350:	0092      	lsls	r2, r2, #2
 8017352:	3a04      	subs	r2, #4
 8017354:	3501      	adds	r5, #1
 8017356:	42ae      	cmp	r6, r5
 8017358:	bf38      	it	cc
 801735a:	2200      	movcc	r2, #0
 801735c:	18a3      	adds	r3, r4, r2
 801735e:	50a7      	str	r7, [r4, r2]
 8017360:	b107      	cbz	r7, 8017364 <rshift+0x68>
 8017362:	3304      	adds	r3, #4
 8017364:	1b1a      	subs	r2, r3, r4
 8017366:	42a3      	cmp	r3, r4
 8017368:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801736c:	bf08      	it	eq
 801736e:	2300      	moveq	r3, #0
 8017370:	6102      	str	r2, [r0, #16]
 8017372:	bf08      	it	eq
 8017374:	6143      	streq	r3, [r0, #20]
 8017376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801737a:	f8dc c000 	ldr.w	ip, [ip]
 801737e:	fa0c fc08 	lsl.w	ip, ip, r8
 8017382:	ea4c 0707 	orr.w	r7, ip, r7
 8017386:	f849 7b04 	str.w	r7, [r9], #4
 801738a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801738e:	40cf      	lsrs	r7, r1
 8017390:	e7da      	b.n	8017348 <rshift+0x4c>
 8017392:	f851 cb04 	ldr.w	ip, [r1], #4
 8017396:	f847 cf04 	str.w	ip, [r7, #4]!
 801739a:	e7c3      	b.n	8017324 <rshift+0x28>
 801739c:	4623      	mov	r3, r4
 801739e:	e7e1      	b.n	8017364 <rshift+0x68>

080173a0 <__hexdig_fun>:
 80173a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80173a4:	2b09      	cmp	r3, #9
 80173a6:	d802      	bhi.n	80173ae <__hexdig_fun+0xe>
 80173a8:	3820      	subs	r0, #32
 80173aa:	b2c0      	uxtb	r0, r0
 80173ac:	4770      	bx	lr
 80173ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80173b2:	2b05      	cmp	r3, #5
 80173b4:	d801      	bhi.n	80173ba <__hexdig_fun+0x1a>
 80173b6:	3847      	subs	r0, #71	@ 0x47
 80173b8:	e7f7      	b.n	80173aa <__hexdig_fun+0xa>
 80173ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80173be:	2b05      	cmp	r3, #5
 80173c0:	d801      	bhi.n	80173c6 <__hexdig_fun+0x26>
 80173c2:	3827      	subs	r0, #39	@ 0x27
 80173c4:	e7f1      	b.n	80173aa <__hexdig_fun+0xa>
 80173c6:	2000      	movs	r0, #0
 80173c8:	4770      	bx	lr
	...

080173cc <__gethex>:
 80173cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173d0:	b085      	sub	sp, #20
 80173d2:	468a      	mov	sl, r1
 80173d4:	9302      	str	r3, [sp, #8]
 80173d6:	680b      	ldr	r3, [r1, #0]
 80173d8:	9001      	str	r0, [sp, #4]
 80173da:	4690      	mov	r8, r2
 80173dc:	1c9c      	adds	r4, r3, #2
 80173de:	46a1      	mov	r9, r4
 80173e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80173e4:	2830      	cmp	r0, #48	@ 0x30
 80173e6:	d0fa      	beq.n	80173de <__gethex+0x12>
 80173e8:	eba9 0303 	sub.w	r3, r9, r3
 80173ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80173f0:	f7ff ffd6 	bl	80173a0 <__hexdig_fun>
 80173f4:	4605      	mov	r5, r0
 80173f6:	2800      	cmp	r0, #0
 80173f8:	d168      	bne.n	80174cc <__gethex+0x100>
 80173fa:	49a0      	ldr	r1, [pc, #640]	@ (801767c <__gethex+0x2b0>)
 80173fc:	2201      	movs	r2, #1
 80173fe:	4648      	mov	r0, r9
 8017400:	f7ff fefe 	bl	8017200 <strncmp>
 8017404:	4607      	mov	r7, r0
 8017406:	2800      	cmp	r0, #0
 8017408:	d167      	bne.n	80174da <__gethex+0x10e>
 801740a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801740e:	4626      	mov	r6, r4
 8017410:	f7ff ffc6 	bl	80173a0 <__hexdig_fun>
 8017414:	2800      	cmp	r0, #0
 8017416:	d062      	beq.n	80174de <__gethex+0x112>
 8017418:	4623      	mov	r3, r4
 801741a:	7818      	ldrb	r0, [r3, #0]
 801741c:	2830      	cmp	r0, #48	@ 0x30
 801741e:	4699      	mov	r9, r3
 8017420:	f103 0301 	add.w	r3, r3, #1
 8017424:	d0f9      	beq.n	801741a <__gethex+0x4e>
 8017426:	f7ff ffbb 	bl	80173a0 <__hexdig_fun>
 801742a:	fab0 f580 	clz	r5, r0
 801742e:	096d      	lsrs	r5, r5, #5
 8017430:	f04f 0b01 	mov.w	fp, #1
 8017434:	464a      	mov	r2, r9
 8017436:	4616      	mov	r6, r2
 8017438:	3201      	adds	r2, #1
 801743a:	7830      	ldrb	r0, [r6, #0]
 801743c:	f7ff ffb0 	bl	80173a0 <__hexdig_fun>
 8017440:	2800      	cmp	r0, #0
 8017442:	d1f8      	bne.n	8017436 <__gethex+0x6a>
 8017444:	498d      	ldr	r1, [pc, #564]	@ (801767c <__gethex+0x2b0>)
 8017446:	2201      	movs	r2, #1
 8017448:	4630      	mov	r0, r6
 801744a:	f7ff fed9 	bl	8017200 <strncmp>
 801744e:	2800      	cmp	r0, #0
 8017450:	d13f      	bne.n	80174d2 <__gethex+0x106>
 8017452:	b944      	cbnz	r4, 8017466 <__gethex+0x9a>
 8017454:	1c74      	adds	r4, r6, #1
 8017456:	4622      	mov	r2, r4
 8017458:	4616      	mov	r6, r2
 801745a:	3201      	adds	r2, #1
 801745c:	7830      	ldrb	r0, [r6, #0]
 801745e:	f7ff ff9f 	bl	80173a0 <__hexdig_fun>
 8017462:	2800      	cmp	r0, #0
 8017464:	d1f8      	bne.n	8017458 <__gethex+0x8c>
 8017466:	1ba4      	subs	r4, r4, r6
 8017468:	00a7      	lsls	r7, r4, #2
 801746a:	7833      	ldrb	r3, [r6, #0]
 801746c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017470:	2b50      	cmp	r3, #80	@ 0x50
 8017472:	d13e      	bne.n	80174f2 <__gethex+0x126>
 8017474:	7873      	ldrb	r3, [r6, #1]
 8017476:	2b2b      	cmp	r3, #43	@ 0x2b
 8017478:	d033      	beq.n	80174e2 <__gethex+0x116>
 801747a:	2b2d      	cmp	r3, #45	@ 0x2d
 801747c:	d034      	beq.n	80174e8 <__gethex+0x11c>
 801747e:	1c71      	adds	r1, r6, #1
 8017480:	2400      	movs	r4, #0
 8017482:	7808      	ldrb	r0, [r1, #0]
 8017484:	f7ff ff8c 	bl	80173a0 <__hexdig_fun>
 8017488:	1e43      	subs	r3, r0, #1
 801748a:	b2db      	uxtb	r3, r3
 801748c:	2b18      	cmp	r3, #24
 801748e:	d830      	bhi.n	80174f2 <__gethex+0x126>
 8017490:	f1a0 0210 	sub.w	r2, r0, #16
 8017494:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017498:	f7ff ff82 	bl	80173a0 <__hexdig_fun>
 801749c:	f100 3cff 	add.w	ip, r0, #4294967295
 80174a0:	fa5f fc8c 	uxtb.w	ip, ip
 80174a4:	f1bc 0f18 	cmp.w	ip, #24
 80174a8:	f04f 030a 	mov.w	r3, #10
 80174ac:	d91e      	bls.n	80174ec <__gethex+0x120>
 80174ae:	b104      	cbz	r4, 80174b2 <__gethex+0xe6>
 80174b0:	4252      	negs	r2, r2
 80174b2:	4417      	add	r7, r2
 80174b4:	f8ca 1000 	str.w	r1, [sl]
 80174b8:	b1ed      	cbz	r5, 80174f6 <__gethex+0x12a>
 80174ba:	f1bb 0f00 	cmp.w	fp, #0
 80174be:	bf0c      	ite	eq
 80174c0:	2506      	moveq	r5, #6
 80174c2:	2500      	movne	r5, #0
 80174c4:	4628      	mov	r0, r5
 80174c6:	b005      	add	sp, #20
 80174c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174cc:	2500      	movs	r5, #0
 80174ce:	462c      	mov	r4, r5
 80174d0:	e7b0      	b.n	8017434 <__gethex+0x68>
 80174d2:	2c00      	cmp	r4, #0
 80174d4:	d1c7      	bne.n	8017466 <__gethex+0x9a>
 80174d6:	4627      	mov	r7, r4
 80174d8:	e7c7      	b.n	801746a <__gethex+0x9e>
 80174da:	464e      	mov	r6, r9
 80174dc:	462f      	mov	r7, r5
 80174de:	2501      	movs	r5, #1
 80174e0:	e7c3      	b.n	801746a <__gethex+0x9e>
 80174e2:	2400      	movs	r4, #0
 80174e4:	1cb1      	adds	r1, r6, #2
 80174e6:	e7cc      	b.n	8017482 <__gethex+0xb6>
 80174e8:	2401      	movs	r4, #1
 80174ea:	e7fb      	b.n	80174e4 <__gethex+0x118>
 80174ec:	fb03 0002 	mla	r0, r3, r2, r0
 80174f0:	e7ce      	b.n	8017490 <__gethex+0xc4>
 80174f2:	4631      	mov	r1, r6
 80174f4:	e7de      	b.n	80174b4 <__gethex+0xe8>
 80174f6:	eba6 0309 	sub.w	r3, r6, r9
 80174fa:	3b01      	subs	r3, #1
 80174fc:	4629      	mov	r1, r5
 80174fe:	2b07      	cmp	r3, #7
 8017500:	dc0a      	bgt.n	8017518 <__gethex+0x14c>
 8017502:	9801      	ldr	r0, [sp, #4]
 8017504:	f7fd ff82 	bl	801540c <_Balloc>
 8017508:	4604      	mov	r4, r0
 801750a:	b940      	cbnz	r0, 801751e <__gethex+0x152>
 801750c:	4b5c      	ldr	r3, [pc, #368]	@ (8017680 <__gethex+0x2b4>)
 801750e:	4602      	mov	r2, r0
 8017510:	21e4      	movs	r1, #228	@ 0xe4
 8017512:	485c      	ldr	r0, [pc, #368]	@ (8017684 <__gethex+0x2b8>)
 8017514:	f7ff fec0 	bl	8017298 <__assert_func>
 8017518:	3101      	adds	r1, #1
 801751a:	105b      	asrs	r3, r3, #1
 801751c:	e7ef      	b.n	80174fe <__gethex+0x132>
 801751e:	f100 0a14 	add.w	sl, r0, #20
 8017522:	2300      	movs	r3, #0
 8017524:	4655      	mov	r5, sl
 8017526:	469b      	mov	fp, r3
 8017528:	45b1      	cmp	r9, r6
 801752a:	d337      	bcc.n	801759c <__gethex+0x1d0>
 801752c:	f845 bb04 	str.w	fp, [r5], #4
 8017530:	eba5 050a 	sub.w	r5, r5, sl
 8017534:	10ad      	asrs	r5, r5, #2
 8017536:	6125      	str	r5, [r4, #16]
 8017538:	4658      	mov	r0, fp
 801753a:	f7fe f859 	bl	80155f0 <__hi0bits>
 801753e:	016d      	lsls	r5, r5, #5
 8017540:	f8d8 6000 	ldr.w	r6, [r8]
 8017544:	1a2d      	subs	r5, r5, r0
 8017546:	42b5      	cmp	r5, r6
 8017548:	dd54      	ble.n	80175f4 <__gethex+0x228>
 801754a:	1bad      	subs	r5, r5, r6
 801754c:	4629      	mov	r1, r5
 801754e:	4620      	mov	r0, r4
 8017550:	f7fe fbed 	bl	8015d2e <__any_on>
 8017554:	4681      	mov	r9, r0
 8017556:	b178      	cbz	r0, 8017578 <__gethex+0x1ac>
 8017558:	1e6b      	subs	r3, r5, #1
 801755a:	1159      	asrs	r1, r3, #5
 801755c:	f003 021f 	and.w	r2, r3, #31
 8017560:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017564:	f04f 0901 	mov.w	r9, #1
 8017568:	fa09 f202 	lsl.w	r2, r9, r2
 801756c:	420a      	tst	r2, r1
 801756e:	d003      	beq.n	8017578 <__gethex+0x1ac>
 8017570:	454b      	cmp	r3, r9
 8017572:	dc36      	bgt.n	80175e2 <__gethex+0x216>
 8017574:	f04f 0902 	mov.w	r9, #2
 8017578:	4629      	mov	r1, r5
 801757a:	4620      	mov	r0, r4
 801757c:	f7ff febe 	bl	80172fc <rshift>
 8017580:	442f      	add	r7, r5
 8017582:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017586:	42bb      	cmp	r3, r7
 8017588:	da42      	bge.n	8017610 <__gethex+0x244>
 801758a:	9801      	ldr	r0, [sp, #4]
 801758c:	4621      	mov	r1, r4
 801758e:	f7fd ff7d 	bl	801548c <_Bfree>
 8017592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017594:	2300      	movs	r3, #0
 8017596:	6013      	str	r3, [r2, #0]
 8017598:	25a3      	movs	r5, #163	@ 0xa3
 801759a:	e793      	b.n	80174c4 <__gethex+0xf8>
 801759c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80175a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80175a2:	d012      	beq.n	80175ca <__gethex+0x1fe>
 80175a4:	2b20      	cmp	r3, #32
 80175a6:	d104      	bne.n	80175b2 <__gethex+0x1e6>
 80175a8:	f845 bb04 	str.w	fp, [r5], #4
 80175ac:	f04f 0b00 	mov.w	fp, #0
 80175b0:	465b      	mov	r3, fp
 80175b2:	7830      	ldrb	r0, [r6, #0]
 80175b4:	9303      	str	r3, [sp, #12]
 80175b6:	f7ff fef3 	bl	80173a0 <__hexdig_fun>
 80175ba:	9b03      	ldr	r3, [sp, #12]
 80175bc:	f000 000f 	and.w	r0, r0, #15
 80175c0:	4098      	lsls	r0, r3
 80175c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80175c6:	3304      	adds	r3, #4
 80175c8:	e7ae      	b.n	8017528 <__gethex+0x15c>
 80175ca:	45b1      	cmp	r9, r6
 80175cc:	d8ea      	bhi.n	80175a4 <__gethex+0x1d8>
 80175ce:	492b      	ldr	r1, [pc, #172]	@ (801767c <__gethex+0x2b0>)
 80175d0:	9303      	str	r3, [sp, #12]
 80175d2:	2201      	movs	r2, #1
 80175d4:	4630      	mov	r0, r6
 80175d6:	f7ff fe13 	bl	8017200 <strncmp>
 80175da:	9b03      	ldr	r3, [sp, #12]
 80175dc:	2800      	cmp	r0, #0
 80175de:	d1e1      	bne.n	80175a4 <__gethex+0x1d8>
 80175e0:	e7a2      	b.n	8017528 <__gethex+0x15c>
 80175e2:	1ea9      	subs	r1, r5, #2
 80175e4:	4620      	mov	r0, r4
 80175e6:	f7fe fba2 	bl	8015d2e <__any_on>
 80175ea:	2800      	cmp	r0, #0
 80175ec:	d0c2      	beq.n	8017574 <__gethex+0x1a8>
 80175ee:	f04f 0903 	mov.w	r9, #3
 80175f2:	e7c1      	b.n	8017578 <__gethex+0x1ac>
 80175f4:	da09      	bge.n	801760a <__gethex+0x23e>
 80175f6:	1b75      	subs	r5, r6, r5
 80175f8:	4621      	mov	r1, r4
 80175fa:	9801      	ldr	r0, [sp, #4]
 80175fc:	462a      	mov	r2, r5
 80175fe:	f7fe f95d 	bl	80158bc <__lshift>
 8017602:	1b7f      	subs	r7, r7, r5
 8017604:	4604      	mov	r4, r0
 8017606:	f100 0a14 	add.w	sl, r0, #20
 801760a:	f04f 0900 	mov.w	r9, #0
 801760e:	e7b8      	b.n	8017582 <__gethex+0x1b6>
 8017610:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017614:	42bd      	cmp	r5, r7
 8017616:	dd6f      	ble.n	80176f8 <__gethex+0x32c>
 8017618:	1bed      	subs	r5, r5, r7
 801761a:	42ae      	cmp	r6, r5
 801761c:	dc34      	bgt.n	8017688 <__gethex+0x2bc>
 801761e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017622:	2b02      	cmp	r3, #2
 8017624:	d022      	beq.n	801766c <__gethex+0x2a0>
 8017626:	2b03      	cmp	r3, #3
 8017628:	d024      	beq.n	8017674 <__gethex+0x2a8>
 801762a:	2b01      	cmp	r3, #1
 801762c:	d115      	bne.n	801765a <__gethex+0x28e>
 801762e:	42ae      	cmp	r6, r5
 8017630:	d113      	bne.n	801765a <__gethex+0x28e>
 8017632:	2e01      	cmp	r6, #1
 8017634:	d10b      	bne.n	801764e <__gethex+0x282>
 8017636:	9a02      	ldr	r2, [sp, #8]
 8017638:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801763c:	6013      	str	r3, [r2, #0]
 801763e:	2301      	movs	r3, #1
 8017640:	6123      	str	r3, [r4, #16]
 8017642:	f8ca 3000 	str.w	r3, [sl]
 8017646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017648:	2562      	movs	r5, #98	@ 0x62
 801764a:	601c      	str	r4, [r3, #0]
 801764c:	e73a      	b.n	80174c4 <__gethex+0xf8>
 801764e:	1e71      	subs	r1, r6, #1
 8017650:	4620      	mov	r0, r4
 8017652:	f7fe fb6c 	bl	8015d2e <__any_on>
 8017656:	2800      	cmp	r0, #0
 8017658:	d1ed      	bne.n	8017636 <__gethex+0x26a>
 801765a:	9801      	ldr	r0, [sp, #4]
 801765c:	4621      	mov	r1, r4
 801765e:	f7fd ff15 	bl	801548c <_Bfree>
 8017662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017664:	2300      	movs	r3, #0
 8017666:	6013      	str	r3, [r2, #0]
 8017668:	2550      	movs	r5, #80	@ 0x50
 801766a:	e72b      	b.n	80174c4 <__gethex+0xf8>
 801766c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801766e:	2b00      	cmp	r3, #0
 8017670:	d1f3      	bne.n	801765a <__gethex+0x28e>
 8017672:	e7e0      	b.n	8017636 <__gethex+0x26a>
 8017674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017676:	2b00      	cmp	r3, #0
 8017678:	d1dd      	bne.n	8017636 <__gethex+0x26a>
 801767a:	e7ee      	b.n	801765a <__gethex+0x28e>
 801767c:	08019118 	.word	0x08019118
 8017680:	08018fad 	.word	0x08018fad
 8017684:	080192c6 	.word	0x080192c6
 8017688:	1e6f      	subs	r7, r5, #1
 801768a:	f1b9 0f00 	cmp.w	r9, #0
 801768e:	d130      	bne.n	80176f2 <__gethex+0x326>
 8017690:	b127      	cbz	r7, 801769c <__gethex+0x2d0>
 8017692:	4639      	mov	r1, r7
 8017694:	4620      	mov	r0, r4
 8017696:	f7fe fb4a 	bl	8015d2e <__any_on>
 801769a:	4681      	mov	r9, r0
 801769c:	117a      	asrs	r2, r7, #5
 801769e:	2301      	movs	r3, #1
 80176a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80176a4:	f007 071f 	and.w	r7, r7, #31
 80176a8:	40bb      	lsls	r3, r7
 80176aa:	4213      	tst	r3, r2
 80176ac:	4629      	mov	r1, r5
 80176ae:	4620      	mov	r0, r4
 80176b0:	bf18      	it	ne
 80176b2:	f049 0902 	orrne.w	r9, r9, #2
 80176b6:	f7ff fe21 	bl	80172fc <rshift>
 80176ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80176be:	1b76      	subs	r6, r6, r5
 80176c0:	2502      	movs	r5, #2
 80176c2:	f1b9 0f00 	cmp.w	r9, #0
 80176c6:	d047      	beq.n	8017758 <__gethex+0x38c>
 80176c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80176cc:	2b02      	cmp	r3, #2
 80176ce:	d015      	beq.n	80176fc <__gethex+0x330>
 80176d0:	2b03      	cmp	r3, #3
 80176d2:	d017      	beq.n	8017704 <__gethex+0x338>
 80176d4:	2b01      	cmp	r3, #1
 80176d6:	d109      	bne.n	80176ec <__gethex+0x320>
 80176d8:	f019 0f02 	tst.w	r9, #2
 80176dc:	d006      	beq.n	80176ec <__gethex+0x320>
 80176de:	f8da 3000 	ldr.w	r3, [sl]
 80176e2:	ea49 0903 	orr.w	r9, r9, r3
 80176e6:	f019 0f01 	tst.w	r9, #1
 80176ea:	d10e      	bne.n	801770a <__gethex+0x33e>
 80176ec:	f045 0510 	orr.w	r5, r5, #16
 80176f0:	e032      	b.n	8017758 <__gethex+0x38c>
 80176f2:	f04f 0901 	mov.w	r9, #1
 80176f6:	e7d1      	b.n	801769c <__gethex+0x2d0>
 80176f8:	2501      	movs	r5, #1
 80176fa:	e7e2      	b.n	80176c2 <__gethex+0x2f6>
 80176fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80176fe:	f1c3 0301 	rsb	r3, r3, #1
 8017702:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017706:	2b00      	cmp	r3, #0
 8017708:	d0f0      	beq.n	80176ec <__gethex+0x320>
 801770a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801770e:	f104 0314 	add.w	r3, r4, #20
 8017712:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017716:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801771a:	f04f 0c00 	mov.w	ip, #0
 801771e:	4618      	mov	r0, r3
 8017720:	f853 2b04 	ldr.w	r2, [r3], #4
 8017724:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017728:	d01b      	beq.n	8017762 <__gethex+0x396>
 801772a:	3201      	adds	r2, #1
 801772c:	6002      	str	r2, [r0, #0]
 801772e:	2d02      	cmp	r5, #2
 8017730:	f104 0314 	add.w	r3, r4, #20
 8017734:	d13c      	bne.n	80177b0 <__gethex+0x3e4>
 8017736:	f8d8 2000 	ldr.w	r2, [r8]
 801773a:	3a01      	subs	r2, #1
 801773c:	42b2      	cmp	r2, r6
 801773e:	d109      	bne.n	8017754 <__gethex+0x388>
 8017740:	1171      	asrs	r1, r6, #5
 8017742:	2201      	movs	r2, #1
 8017744:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017748:	f006 061f 	and.w	r6, r6, #31
 801774c:	fa02 f606 	lsl.w	r6, r2, r6
 8017750:	421e      	tst	r6, r3
 8017752:	d13a      	bne.n	80177ca <__gethex+0x3fe>
 8017754:	f045 0520 	orr.w	r5, r5, #32
 8017758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801775a:	601c      	str	r4, [r3, #0]
 801775c:	9b02      	ldr	r3, [sp, #8]
 801775e:	601f      	str	r7, [r3, #0]
 8017760:	e6b0      	b.n	80174c4 <__gethex+0xf8>
 8017762:	4299      	cmp	r1, r3
 8017764:	f843 cc04 	str.w	ip, [r3, #-4]
 8017768:	d8d9      	bhi.n	801771e <__gethex+0x352>
 801776a:	68a3      	ldr	r3, [r4, #8]
 801776c:	459b      	cmp	fp, r3
 801776e:	db17      	blt.n	80177a0 <__gethex+0x3d4>
 8017770:	6861      	ldr	r1, [r4, #4]
 8017772:	9801      	ldr	r0, [sp, #4]
 8017774:	3101      	adds	r1, #1
 8017776:	f7fd fe49 	bl	801540c <_Balloc>
 801777a:	4681      	mov	r9, r0
 801777c:	b918      	cbnz	r0, 8017786 <__gethex+0x3ba>
 801777e:	4b1a      	ldr	r3, [pc, #104]	@ (80177e8 <__gethex+0x41c>)
 8017780:	4602      	mov	r2, r0
 8017782:	2184      	movs	r1, #132	@ 0x84
 8017784:	e6c5      	b.n	8017512 <__gethex+0x146>
 8017786:	6922      	ldr	r2, [r4, #16]
 8017788:	3202      	adds	r2, #2
 801778a:	f104 010c 	add.w	r1, r4, #12
 801778e:	0092      	lsls	r2, r2, #2
 8017790:	300c      	adds	r0, #12
 8017792:	f7ff fd69 	bl	8017268 <memcpy>
 8017796:	4621      	mov	r1, r4
 8017798:	9801      	ldr	r0, [sp, #4]
 801779a:	f7fd fe77 	bl	801548c <_Bfree>
 801779e:	464c      	mov	r4, r9
 80177a0:	6923      	ldr	r3, [r4, #16]
 80177a2:	1c5a      	adds	r2, r3, #1
 80177a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80177a8:	6122      	str	r2, [r4, #16]
 80177aa:	2201      	movs	r2, #1
 80177ac:	615a      	str	r2, [r3, #20]
 80177ae:	e7be      	b.n	801772e <__gethex+0x362>
 80177b0:	6922      	ldr	r2, [r4, #16]
 80177b2:	455a      	cmp	r2, fp
 80177b4:	dd0b      	ble.n	80177ce <__gethex+0x402>
 80177b6:	2101      	movs	r1, #1
 80177b8:	4620      	mov	r0, r4
 80177ba:	f7ff fd9f 	bl	80172fc <rshift>
 80177be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80177c2:	3701      	adds	r7, #1
 80177c4:	42bb      	cmp	r3, r7
 80177c6:	f6ff aee0 	blt.w	801758a <__gethex+0x1be>
 80177ca:	2501      	movs	r5, #1
 80177cc:	e7c2      	b.n	8017754 <__gethex+0x388>
 80177ce:	f016 061f 	ands.w	r6, r6, #31
 80177d2:	d0fa      	beq.n	80177ca <__gethex+0x3fe>
 80177d4:	4453      	add	r3, sl
 80177d6:	f1c6 0620 	rsb	r6, r6, #32
 80177da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80177de:	f7fd ff07 	bl	80155f0 <__hi0bits>
 80177e2:	42b0      	cmp	r0, r6
 80177e4:	dbe7      	blt.n	80177b6 <__gethex+0x3ea>
 80177e6:	e7f0      	b.n	80177ca <__gethex+0x3fe>
 80177e8:	08018fad 	.word	0x08018fad

080177ec <L_shift>:
 80177ec:	f1c2 0208 	rsb	r2, r2, #8
 80177f0:	0092      	lsls	r2, r2, #2
 80177f2:	b570      	push	{r4, r5, r6, lr}
 80177f4:	f1c2 0620 	rsb	r6, r2, #32
 80177f8:	6843      	ldr	r3, [r0, #4]
 80177fa:	6804      	ldr	r4, [r0, #0]
 80177fc:	fa03 f506 	lsl.w	r5, r3, r6
 8017800:	432c      	orrs	r4, r5
 8017802:	40d3      	lsrs	r3, r2
 8017804:	6004      	str	r4, [r0, #0]
 8017806:	f840 3f04 	str.w	r3, [r0, #4]!
 801780a:	4288      	cmp	r0, r1
 801780c:	d3f4      	bcc.n	80177f8 <L_shift+0xc>
 801780e:	bd70      	pop	{r4, r5, r6, pc}

08017810 <__match>:
 8017810:	b530      	push	{r4, r5, lr}
 8017812:	6803      	ldr	r3, [r0, #0]
 8017814:	3301      	adds	r3, #1
 8017816:	f811 4b01 	ldrb.w	r4, [r1], #1
 801781a:	b914      	cbnz	r4, 8017822 <__match+0x12>
 801781c:	6003      	str	r3, [r0, #0]
 801781e:	2001      	movs	r0, #1
 8017820:	bd30      	pop	{r4, r5, pc}
 8017822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017826:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801782a:	2d19      	cmp	r5, #25
 801782c:	bf98      	it	ls
 801782e:	3220      	addls	r2, #32
 8017830:	42a2      	cmp	r2, r4
 8017832:	d0f0      	beq.n	8017816 <__match+0x6>
 8017834:	2000      	movs	r0, #0
 8017836:	e7f3      	b.n	8017820 <__match+0x10>

08017838 <__hexnan>:
 8017838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801783c:	680b      	ldr	r3, [r1, #0]
 801783e:	6801      	ldr	r1, [r0, #0]
 8017840:	115e      	asrs	r6, r3, #5
 8017842:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017846:	f013 031f 	ands.w	r3, r3, #31
 801784a:	b087      	sub	sp, #28
 801784c:	bf18      	it	ne
 801784e:	3604      	addne	r6, #4
 8017850:	2500      	movs	r5, #0
 8017852:	1f37      	subs	r7, r6, #4
 8017854:	4682      	mov	sl, r0
 8017856:	4690      	mov	r8, r2
 8017858:	9301      	str	r3, [sp, #4]
 801785a:	f846 5c04 	str.w	r5, [r6, #-4]
 801785e:	46b9      	mov	r9, r7
 8017860:	463c      	mov	r4, r7
 8017862:	9502      	str	r5, [sp, #8]
 8017864:	46ab      	mov	fp, r5
 8017866:	784a      	ldrb	r2, [r1, #1]
 8017868:	1c4b      	adds	r3, r1, #1
 801786a:	9303      	str	r3, [sp, #12]
 801786c:	b342      	cbz	r2, 80178c0 <__hexnan+0x88>
 801786e:	4610      	mov	r0, r2
 8017870:	9105      	str	r1, [sp, #20]
 8017872:	9204      	str	r2, [sp, #16]
 8017874:	f7ff fd94 	bl	80173a0 <__hexdig_fun>
 8017878:	2800      	cmp	r0, #0
 801787a:	d151      	bne.n	8017920 <__hexnan+0xe8>
 801787c:	9a04      	ldr	r2, [sp, #16]
 801787e:	9905      	ldr	r1, [sp, #20]
 8017880:	2a20      	cmp	r2, #32
 8017882:	d818      	bhi.n	80178b6 <__hexnan+0x7e>
 8017884:	9b02      	ldr	r3, [sp, #8]
 8017886:	459b      	cmp	fp, r3
 8017888:	dd13      	ble.n	80178b2 <__hexnan+0x7a>
 801788a:	454c      	cmp	r4, r9
 801788c:	d206      	bcs.n	801789c <__hexnan+0x64>
 801788e:	2d07      	cmp	r5, #7
 8017890:	dc04      	bgt.n	801789c <__hexnan+0x64>
 8017892:	462a      	mov	r2, r5
 8017894:	4649      	mov	r1, r9
 8017896:	4620      	mov	r0, r4
 8017898:	f7ff ffa8 	bl	80177ec <L_shift>
 801789c:	4544      	cmp	r4, r8
 801789e:	d952      	bls.n	8017946 <__hexnan+0x10e>
 80178a0:	2300      	movs	r3, #0
 80178a2:	f1a4 0904 	sub.w	r9, r4, #4
 80178a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80178aa:	f8cd b008 	str.w	fp, [sp, #8]
 80178ae:	464c      	mov	r4, r9
 80178b0:	461d      	mov	r5, r3
 80178b2:	9903      	ldr	r1, [sp, #12]
 80178b4:	e7d7      	b.n	8017866 <__hexnan+0x2e>
 80178b6:	2a29      	cmp	r2, #41	@ 0x29
 80178b8:	d157      	bne.n	801796a <__hexnan+0x132>
 80178ba:	3102      	adds	r1, #2
 80178bc:	f8ca 1000 	str.w	r1, [sl]
 80178c0:	f1bb 0f00 	cmp.w	fp, #0
 80178c4:	d051      	beq.n	801796a <__hexnan+0x132>
 80178c6:	454c      	cmp	r4, r9
 80178c8:	d206      	bcs.n	80178d8 <__hexnan+0xa0>
 80178ca:	2d07      	cmp	r5, #7
 80178cc:	dc04      	bgt.n	80178d8 <__hexnan+0xa0>
 80178ce:	462a      	mov	r2, r5
 80178d0:	4649      	mov	r1, r9
 80178d2:	4620      	mov	r0, r4
 80178d4:	f7ff ff8a 	bl	80177ec <L_shift>
 80178d8:	4544      	cmp	r4, r8
 80178da:	d936      	bls.n	801794a <__hexnan+0x112>
 80178dc:	f1a8 0204 	sub.w	r2, r8, #4
 80178e0:	4623      	mov	r3, r4
 80178e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80178e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80178ea:	429f      	cmp	r7, r3
 80178ec:	d2f9      	bcs.n	80178e2 <__hexnan+0xaa>
 80178ee:	1b3b      	subs	r3, r7, r4
 80178f0:	f023 0303 	bic.w	r3, r3, #3
 80178f4:	3304      	adds	r3, #4
 80178f6:	3401      	adds	r4, #1
 80178f8:	3e03      	subs	r6, #3
 80178fa:	42b4      	cmp	r4, r6
 80178fc:	bf88      	it	hi
 80178fe:	2304      	movhi	r3, #4
 8017900:	4443      	add	r3, r8
 8017902:	2200      	movs	r2, #0
 8017904:	f843 2b04 	str.w	r2, [r3], #4
 8017908:	429f      	cmp	r7, r3
 801790a:	d2fb      	bcs.n	8017904 <__hexnan+0xcc>
 801790c:	683b      	ldr	r3, [r7, #0]
 801790e:	b91b      	cbnz	r3, 8017918 <__hexnan+0xe0>
 8017910:	4547      	cmp	r7, r8
 8017912:	d128      	bne.n	8017966 <__hexnan+0x12e>
 8017914:	2301      	movs	r3, #1
 8017916:	603b      	str	r3, [r7, #0]
 8017918:	2005      	movs	r0, #5
 801791a:	b007      	add	sp, #28
 801791c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017920:	3501      	adds	r5, #1
 8017922:	2d08      	cmp	r5, #8
 8017924:	f10b 0b01 	add.w	fp, fp, #1
 8017928:	dd06      	ble.n	8017938 <__hexnan+0x100>
 801792a:	4544      	cmp	r4, r8
 801792c:	d9c1      	bls.n	80178b2 <__hexnan+0x7a>
 801792e:	2300      	movs	r3, #0
 8017930:	f844 3c04 	str.w	r3, [r4, #-4]
 8017934:	2501      	movs	r5, #1
 8017936:	3c04      	subs	r4, #4
 8017938:	6822      	ldr	r2, [r4, #0]
 801793a:	f000 000f 	and.w	r0, r0, #15
 801793e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017942:	6020      	str	r0, [r4, #0]
 8017944:	e7b5      	b.n	80178b2 <__hexnan+0x7a>
 8017946:	2508      	movs	r5, #8
 8017948:	e7b3      	b.n	80178b2 <__hexnan+0x7a>
 801794a:	9b01      	ldr	r3, [sp, #4]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d0dd      	beq.n	801790c <__hexnan+0xd4>
 8017950:	f1c3 0320 	rsb	r3, r3, #32
 8017954:	f04f 32ff 	mov.w	r2, #4294967295
 8017958:	40da      	lsrs	r2, r3
 801795a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801795e:	4013      	ands	r3, r2
 8017960:	f846 3c04 	str.w	r3, [r6, #-4]
 8017964:	e7d2      	b.n	801790c <__hexnan+0xd4>
 8017966:	3f04      	subs	r7, #4
 8017968:	e7d0      	b.n	801790c <__hexnan+0xd4>
 801796a:	2004      	movs	r0, #4
 801796c:	e7d5      	b.n	801791a <__hexnan+0xe2>

0801796e <__ascii_mbtowc>:
 801796e:	b082      	sub	sp, #8
 8017970:	b901      	cbnz	r1, 8017974 <__ascii_mbtowc+0x6>
 8017972:	a901      	add	r1, sp, #4
 8017974:	b142      	cbz	r2, 8017988 <__ascii_mbtowc+0x1a>
 8017976:	b14b      	cbz	r3, 801798c <__ascii_mbtowc+0x1e>
 8017978:	7813      	ldrb	r3, [r2, #0]
 801797a:	600b      	str	r3, [r1, #0]
 801797c:	7812      	ldrb	r2, [r2, #0]
 801797e:	1e10      	subs	r0, r2, #0
 8017980:	bf18      	it	ne
 8017982:	2001      	movne	r0, #1
 8017984:	b002      	add	sp, #8
 8017986:	4770      	bx	lr
 8017988:	4610      	mov	r0, r2
 801798a:	e7fb      	b.n	8017984 <__ascii_mbtowc+0x16>
 801798c:	f06f 0001 	mvn.w	r0, #1
 8017990:	e7f8      	b.n	8017984 <__ascii_mbtowc+0x16>

08017992 <_realloc_r>:
 8017992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017996:	4680      	mov	r8, r0
 8017998:	4615      	mov	r5, r2
 801799a:	460c      	mov	r4, r1
 801799c:	b921      	cbnz	r1, 80179a8 <_realloc_r+0x16>
 801799e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179a2:	4611      	mov	r1, r2
 80179a4:	f7fb bcae 	b.w	8013304 <_malloc_r>
 80179a8:	b92a      	cbnz	r2, 80179b6 <_realloc_r+0x24>
 80179aa:	f7fd fce5 	bl	8015378 <_free_r>
 80179ae:	2400      	movs	r4, #0
 80179b0:	4620      	mov	r0, r4
 80179b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179b6:	f000 f840 	bl	8017a3a <_malloc_usable_size_r>
 80179ba:	4285      	cmp	r5, r0
 80179bc:	4606      	mov	r6, r0
 80179be:	d802      	bhi.n	80179c6 <_realloc_r+0x34>
 80179c0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80179c4:	d8f4      	bhi.n	80179b0 <_realloc_r+0x1e>
 80179c6:	4629      	mov	r1, r5
 80179c8:	4640      	mov	r0, r8
 80179ca:	f7fb fc9b 	bl	8013304 <_malloc_r>
 80179ce:	4607      	mov	r7, r0
 80179d0:	2800      	cmp	r0, #0
 80179d2:	d0ec      	beq.n	80179ae <_realloc_r+0x1c>
 80179d4:	42b5      	cmp	r5, r6
 80179d6:	462a      	mov	r2, r5
 80179d8:	4621      	mov	r1, r4
 80179da:	bf28      	it	cs
 80179dc:	4632      	movcs	r2, r6
 80179de:	f7ff fc43 	bl	8017268 <memcpy>
 80179e2:	4621      	mov	r1, r4
 80179e4:	4640      	mov	r0, r8
 80179e6:	f7fd fcc7 	bl	8015378 <_free_r>
 80179ea:	463c      	mov	r4, r7
 80179ec:	e7e0      	b.n	80179b0 <_realloc_r+0x1e>

080179ee <__ascii_wctomb>:
 80179ee:	4603      	mov	r3, r0
 80179f0:	4608      	mov	r0, r1
 80179f2:	b141      	cbz	r1, 8017a06 <__ascii_wctomb+0x18>
 80179f4:	2aff      	cmp	r2, #255	@ 0xff
 80179f6:	d904      	bls.n	8017a02 <__ascii_wctomb+0x14>
 80179f8:	228a      	movs	r2, #138	@ 0x8a
 80179fa:	601a      	str	r2, [r3, #0]
 80179fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017a00:	4770      	bx	lr
 8017a02:	700a      	strb	r2, [r1, #0]
 8017a04:	2001      	movs	r0, #1
 8017a06:	4770      	bx	lr

08017a08 <fiprintf>:
 8017a08:	b40e      	push	{r1, r2, r3}
 8017a0a:	b503      	push	{r0, r1, lr}
 8017a0c:	4601      	mov	r1, r0
 8017a0e:	ab03      	add	r3, sp, #12
 8017a10:	4805      	ldr	r0, [pc, #20]	@ (8017a28 <fiprintf+0x20>)
 8017a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a16:	6800      	ldr	r0, [r0, #0]
 8017a18:	9301      	str	r3, [sp, #4]
 8017a1a:	f7ff f9b1 	bl	8016d80 <_vfiprintf_r>
 8017a1e:	b002      	add	sp, #8
 8017a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8017a24:	b003      	add	sp, #12
 8017a26:	4770      	bx	lr
 8017a28:	200001ec 	.word	0x200001ec

08017a2c <abort>:
 8017a2c:	b508      	push	{r3, lr}
 8017a2e:	2006      	movs	r0, #6
 8017a30:	f000 f834 	bl	8017a9c <raise>
 8017a34:	2001      	movs	r0, #1
 8017a36:	f7ea fc0f 	bl	8002258 <_exit>

08017a3a <_malloc_usable_size_r>:
 8017a3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a3e:	1f18      	subs	r0, r3, #4
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	bfbc      	itt	lt
 8017a44:	580b      	ldrlt	r3, [r1, r0]
 8017a46:	18c0      	addlt	r0, r0, r3
 8017a48:	4770      	bx	lr

08017a4a <_raise_r>:
 8017a4a:	291f      	cmp	r1, #31
 8017a4c:	b538      	push	{r3, r4, r5, lr}
 8017a4e:	4605      	mov	r5, r0
 8017a50:	460c      	mov	r4, r1
 8017a52:	d904      	bls.n	8017a5e <_raise_r+0x14>
 8017a54:	2316      	movs	r3, #22
 8017a56:	6003      	str	r3, [r0, #0]
 8017a58:	f04f 30ff 	mov.w	r0, #4294967295
 8017a5c:	bd38      	pop	{r3, r4, r5, pc}
 8017a5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017a60:	b112      	cbz	r2, 8017a68 <_raise_r+0x1e>
 8017a62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017a66:	b94b      	cbnz	r3, 8017a7c <_raise_r+0x32>
 8017a68:	4628      	mov	r0, r5
 8017a6a:	f000 f831 	bl	8017ad0 <_getpid_r>
 8017a6e:	4622      	mov	r2, r4
 8017a70:	4601      	mov	r1, r0
 8017a72:	4628      	mov	r0, r5
 8017a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a78:	f000 b818 	b.w	8017aac <_kill_r>
 8017a7c:	2b01      	cmp	r3, #1
 8017a7e:	d00a      	beq.n	8017a96 <_raise_r+0x4c>
 8017a80:	1c59      	adds	r1, r3, #1
 8017a82:	d103      	bne.n	8017a8c <_raise_r+0x42>
 8017a84:	2316      	movs	r3, #22
 8017a86:	6003      	str	r3, [r0, #0]
 8017a88:	2001      	movs	r0, #1
 8017a8a:	e7e7      	b.n	8017a5c <_raise_r+0x12>
 8017a8c:	2100      	movs	r1, #0
 8017a8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017a92:	4620      	mov	r0, r4
 8017a94:	4798      	blx	r3
 8017a96:	2000      	movs	r0, #0
 8017a98:	e7e0      	b.n	8017a5c <_raise_r+0x12>
	...

08017a9c <raise>:
 8017a9c:	4b02      	ldr	r3, [pc, #8]	@ (8017aa8 <raise+0xc>)
 8017a9e:	4601      	mov	r1, r0
 8017aa0:	6818      	ldr	r0, [r3, #0]
 8017aa2:	f7ff bfd2 	b.w	8017a4a <_raise_r>
 8017aa6:	bf00      	nop
 8017aa8:	200001ec 	.word	0x200001ec

08017aac <_kill_r>:
 8017aac:	b538      	push	{r3, r4, r5, lr}
 8017aae:	4d07      	ldr	r5, [pc, #28]	@ (8017acc <_kill_r+0x20>)
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	4604      	mov	r4, r0
 8017ab4:	4608      	mov	r0, r1
 8017ab6:	4611      	mov	r1, r2
 8017ab8:	602b      	str	r3, [r5, #0]
 8017aba:	f7ea fbbd 	bl	8002238 <_kill>
 8017abe:	1c43      	adds	r3, r0, #1
 8017ac0:	d102      	bne.n	8017ac8 <_kill_r+0x1c>
 8017ac2:	682b      	ldr	r3, [r5, #0]
 8017ac4:	b103      	cbz	r3, 8017ac8 <_kill_r+0x1c>
 8017ac6:	6023      	str	r3, [r4, #0]
 8017ac8:	bd38      	pop	{r3, r4, r5, pc}
 8017aca:	bf00      	nop
 8017acc:	20004c40 	.word	0x20004c40

08017ad0 <_getpid_r>:
 8017ad0:	f7ea bbaa 	b.w	8002228 <_getpid>

08017ad4 <fmodf>:
 8017ad4:	b508      	push	{r3, lr}
 8017ad6:	ed2d 8b02 	vpush	{d8}
 8017ada:	eef0 8a40 	vmov.f32	s17, s0
 8017ade:	eeb0 8a60 	vmov.f32	s16, s1
 8017ae2:	f000 f86d 	bl	8017bc0 <__ieee754_fmodf>
 8017ae6:	eef4 8a48 	vcmp.f32	s17, s16
 8017aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aee:	d60c      	bvs.n	8017b0a <fmodf+0x36>
 8017af0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8017b10 <fmodf+0x3c>
 8017af4:	eeb4 8a68 	vcmp.f32	s16, s17
 8017af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017afc:	d105      	bne.n	8017b0a <fmodf+0x36>
 8017afe:	f7fc fdb9 	bl	8014674 <__errno>
 8017b02:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8017b06:	2321      	movs	r3, #33	@ 0x21
 8017b08:	6003      	str	r3, [r0, #0]
 8017b0a:	ecbd 8b02 	vpop	{d8}
 8017b0e:	bd08      	pop	{r3, pc}
 8017b10:	00000000 	.word	0x00000000

08017b14 <fmaxf>:
 8017b14:	b508      	push	{r3, lr}
 8017b16:	ed2d 8b02 	vpush	{d8}
 8017b1a:	eeb0 8a40 	vmov.f32	s16, s0
 8017b1e:	eef0 8a60 	vmov.f32	s17, s1
 8017b22:	f000 f831 	bl	8017b88 <__fpclassifyf>
 8017b26:	b930      	cbnz	r0, 8017b36 <fmaxf+0x22>
 8017b28:	eeb0 8a68 	vmov.f32	s16, s17
 8017b2c:	eeb0 0a48 	vmov.f32	s0, s16
 8017b30:	ecbd 8b02 	vpop	{d8}
 8017b34:	bd08      	pop	{r3, pc}
 8017b36:	eeb0 0a68 	vmov.f32	s0, s17
 8017b3a:	f000 f825 	bl	8017b88 <__fpclassifyf>
 8017b3e:	2800      	cmp	r0, #0
 8017b40:	d0f4      	beq.n	8017b2c <fmaxf+0x18>
 8017b42:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b4a:	dded      	ble.n	8017b28 <fmaxf+0x14>
 8017b4c:	e7ee      	b.n	8017b2c <fmaxf+0x18>

08017b4e <fminf>:
 8017b4e:	b508      	push	{r3, lr}
 8017b50:	ed2d 8b02 	vpush	{d8}
 8017b54:	eeb0 8a40 	vmov.f32	s16, s0
 8017b58:	eef0 8a60 	vmov.f32	s17, s1
 8017b5c:	f000 f814 	bl	8017b88 <__fpclassifyf>
 8017b60:	b930      	cbnz	r0, 8017b70 <fminf+0x22>
 8017b62:	eeb0 8a68 	vmov.f32	s16, s17
 8017b66:	eeb0 0a48 	vmov.f32	s0, s16
 8017b6a:	ecbd 8b02 	vpop	{d8}
 8017b6e:	bd08      	pop	{r3, pc}
 8017b70:	eeb0 0a68 	vmov.f32	s0, s17
 8017b74:	f000 f808 	bl	8017b88 <__fpclassifyf>
 8017b78:	2800      	cmp	r0, #0
 8017b7a:	d0f4      	beq.n	8017b66 <fminf+0x18>
 8017b7c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b84:	d5ed      	bpl.n	8017b62 <fminf+0x14>
 8017b86:	e7ee      	b.n	8017b66 <fminf+0x18>

08017b88 <__fpclassifyf>:
 8017b88:	ee10 3a10 	vmov	r3, s0
 8017b8c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8017b90:	d00d      	beq.n	8017bae <__fpclassifyf+0x26>
 8017b92:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8017b96:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8017b9a:	d30a      	bcc.n	8017bb2 <__fpclassifyf+0x2a>
 8017b9c:	4b07      	ldr	r3, [pc, #28]	@ (8017bbc <__fpclassifyf+0x34>)
 8017b9e:	1e42      	subs	r2, r0, #1
 8017ba0:	429a      	cmp	r2, r3
 8017ba2:	d908      	bls.n	8017bb6 <__fpclassifyf+0x2e>
 8017ba4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8017ba8:	4258      	negs	r0, r3
 8017baa:	4158      	adcs	r0, r3
 8017bac:	4770      	bx	lr
 8017bae:	2002      	movs	r0, #2
 8017bb0:	4770      	bx	lr
 8017bb2:	2004      	movs	r0, #4
 8017bb4:	4770      	bx	lr
 8017bb6:	2003      	movs	r0, #3
 8017bb8:	4770      	bx	lr
 8017bba:	bf00      	nop
 8017bbc:	007ffffe 	.word	0x007ffffe

08017bc0 <__ieee754_fmodf>:
 8017bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bc2:	ee10 5a90 	vmov	r5, s1
 8017bc6:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 8017bca:	1e43      	subs	r3, r0, #1
 8017bcc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017bd0:	d206      	bcs.n	8017be0 <__ieee754_fmodf+0x20>
 8017bd2:	ee10 3a10 	vmov	r3, s0
 8017bd6:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8017bda:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8017bde:	d304      	bcc.n	8017bea <__ieee754_fmodf+0x2a>
 8017be0:	ee60 0a20 	vmul.f32	s1, s0, s1
 8017be4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8017be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bea:	4286      	cmp	r6, r0
 8017bec:	dbfc      	blt.n	8017be8 <__ieee754_fmodf+0x28>
 8017bee:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 8017bf2:	d105      	bne.n	8017c00 <__ieee754_fmodf+0x40>
 8017bf4:	4b32      	ldr	r3, [pc, #200]	@ (8017cc0 <__ieee754_fmodf+0x100>)
 8017bf6:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 8017bfa:	ed93 0a00 	vldr	s0, [r3]
 8017bfe:	e7f3      	b.n	8017be8 <__ieee754_fmodf+0x28>
 8017c00:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8017c04:	d140      	bne.n	8017c88 <__ieee754_fmodf+0xc8>
 8017c06:	0232      	lsls	r2, r6, #8
 8017c08:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 8017c0c:	2a00      	cmp	r2, #0
 8017c0e:	dc38      	bgt.n	8017c82 <__ieee754_fmodf+0xc2>
 8017c10:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 8017c14:	d13e      	bne.n	8017c94 <__ieee754_fmodf+0xd4>
 8017c16:	0207      	lsls	r7, r0, #8
 8017c18:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 8017c1c:	2f00      	cmp	r7, #0
 8017c1e:	da36      	bge.n	8017c8e <__ieee754_fmodf+0xce>
 8017c20:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 8017c24:	bfb9      	ittee	lt
 8017c26:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 8017c2a:	1a5b      	sublt	r3, r3, r1
 8017c2c:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 8017c30:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 8017c34:	bfb8      	it	lt
 8017c36:	fa06 f303 	lsllt.w	r3, r6, r3
 8017c3a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8017c3e:	bfb5      	itete	lt
 8017c40:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 8017c44:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 8017c48:	1aad      	sublt	r5, r5, r2
 8017c4a:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 8017c4e:	bfb8      	it	lt
 8017c50:	40a8      	lsllt	r0, r5
 8017c52:	1a89      	subs	r1, r1, r2
 8017c54:	1a1d      	subs	r5, r3, r0
 8017c56:	bb01      	cbnz	r1, 8017c9a <__ieee754_fmodf+0xda>
 8017c58:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 8017c5c:	bf38      	it	cc
 8017c5e:	462b      	movcc	r3, r5
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d0c7      	beq.n	8017bf4 <__ieee754_fmodf+0x34>
 8017c64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8017c68:	db1f      	blt.n	8017caa <__ieee754_fmodf+0xea>
 8017c6a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8017c6e:	db1f      	blt.n	8017cb0 <__ieee754_fmodf+0xf0>
 8017c70:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8017c74:	327f      	adds	r2, #127	@ 0x7f
 8017c76:	4323      	orrs	r3, r4
 8017c78:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8017c7c:	ee00 3a10 	vmov	s0, r3
 8017c80:	e7b2      	b.n	8017be8 <__ieee754_fmodf+0x28>
 8017c82:	3901      	subs	r1, #1
 8017c84:	0052      	lsls	r2, r2, #1
 8017c86:	e7c1      	b.n	8017c0c <__ieee754_fmodf+0x4c>
 8017c88:	15f1      	asrs	r1, r6, #23
 8017c8a:	397f      	subs	r1, #127	@ 0x7f
 8017c8c:	e7c0      	b.n	8017c10 <__ieee754_fmodf+0x50>
 8017c8e:	3a01      	subs	r2, #1
 8017c90:	007f      	lsls	r7, r7, #1
 8017c92:	e7c3      	b.n	8017c1c <__ieee754_fmodf+0x5c>
 8017c94:	15c2      	asrs	r2, r0, #23
 8017c96:	3a7f      	subs	r2, #127	@ 0x7f
 8017c98:	e7c2      	b.n	8017c20 <__ieee754_fmodf+0x60>
 8017c9a:	2d00      	cmp	r5, #0
 8017c9c:	da02      	bge.n	8017ca4 <__ieee754_fmodf+0xe4>
 8017c9e:	005b      	lsls	r3, r3, #1
 8017ca0:	3901      	subs	r1, #1
 8017ca2:	e7d7      	b.n	8017c54 <__ieee754_fmodf+0x94>
 8017ca4:	d0a6      	beq.n	8017bf4 <__ieee754_fmodf+0x34>
 8017ca6:	006b      	lsls	r3, r5, #1
 8017ca8:	e7fa      	b.n	8017ca0 <__ieee754_fmodf+0xe0>
 8017caa:	005b      	lsls	r3, r3, #1
 8017cac:	3a01      	subs	r2, #1
 8017cae:	e7d9      	b.n	8017c64 <__ieee754_fmodf+0xa4>
 8017cb0:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8017cb4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8017cb8:	3282      	adds	r2, #130	@ 0x82
 8017cba:	4113      	asrs	r3, r2
 8017cbc:	4323      	orrs	r3, r4
 8017cbe:	e7dd      	b.n	8017c7c <__ieee754_fmodf+0xbc>
 8017cc0:	08019328 	.word	0x08019328

08017cc4 <_init>:
 8017cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cc6:	bf00      	nop
 8017cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cca:	bc08      	pop	{r3}
 8017ccc:	469e      	mov	lr, r3
 8017cce:	4770      	bx	lr

08017cd0 <_fini>:
 8017cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cd2:	bf00      	nop
 8017cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cd6:	bc08      	pop	{r3}
 8017cd8:	469e      	mov	lr, r3
 8017cda:	4770      	bx	lr
