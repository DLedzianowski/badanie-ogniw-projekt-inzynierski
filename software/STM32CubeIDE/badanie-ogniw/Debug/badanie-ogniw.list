
badanie-ogniw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b1c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001598  08012cf0  08012cf0  00013cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014288  08014288  00016240  2**0
                  CONTENTS
  4 .ARM          00000008  08014288  08014288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014290  08014290  00016240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014290  08014290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014294  08014294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  08014298  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003198  20000240  080144d8  00016240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200033d8  080144d8  000163d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016240  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024773  00000000  00000000  00016270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058c9  00000000  00000000  0003a9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  000402b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017d4  00000000  00000000  000421c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ea07  00000000  00000000  0004399c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fa26  00000000  00000000  000723a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101edb  00000000  00000000  000a1dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a3ca4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096f8  00000000  00000000  001a3ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  001ad3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000240 	.word	0x20000240
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012cd4 	.word	0x08012cd4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000244 	.word	0x20000244
 800020c:	08012cd4 	.word	0x08012cd4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010d2:	7b3b      	ldrb	r3, [r7, #12]
 80010d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e2:	480c      	ldr	r0, [pc, #48]	@ (8001114 <BMP280_Read8+0x50>)
 80010e4:	f004 fc2c 	bl	8005940 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <BMP280_Read8+0x54>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f107 020c 	add.w	r2, r7, #12
 80010f0:	f107 010c 	add.w	r1, r7, #12
 80010f4:	230a      	movs	r3, #10
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2302      	movs	r3, #2
 80010fa:	f007 fa09 	bl	8008510 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001104:	4803      	ldr	r0, [pc, #12]	@ (8001114 <BMP280_Read8+0x50>)
 8001106:	f004 fc1b 	bl	8005940 <HAL_GPIO_WritePin>
	return tmp[1];
 800110a:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000
 8001118:	2000025c 	.word	0x2000025c

0800111c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800112a:	7b3b      	ldrb	r3, [r7, #12]
 800112c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001130:	b2db      	uxtb	r3, r3
 8001132:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800113a:	4810      	ldr	r0, [pc, #64]	@ (800117c <BMP280_Read16+0x60>)
 800113c:	f004 fc00 	bl	8005940 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <BMP280_Read16+0x64>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	f107 010c 	add.w	r1, r7, #12
 800114c:	230a      	movs	r3, #10
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2303      	movs	r3, #3
 8001152:	f007 f9dd 	bl	8008510 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800115c:	4807      	ldr	r0, [pc, #28]	@ (800117c <BMP280_Read16+0x60>)
 800115e:	f004 fbef 	bl	8005940 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	7bbb      	ldrb	r3, [r7, #14]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	b29b      	uxth	r3, r3
#endif
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	2000025c 	.word	0x2000025c

08001184 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffc3 	bl	800111c <BMP280_Read16>
 8001196:	4603      	mov	r3, r0
 8001198:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	b29b      	uxth	r3, r3
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 80011cc:	7b3b      	ldrb	r3, [r7, #12]
 80011ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <BMP280_Write8+0x58>)
 80011e2:	f004 fbad 	bl	8005940 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <BMP280_Write8+0x5c>)
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	f107 010c 	add.w	r1, r7, #12
 80011f2:	230a      	movs	r3, #10
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2302      	movs	r3, #2
 80011f8:	f007 f98a 	bl	8008510 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001202:	4803      	ldr	r0, [pc, #12]	@ (8001210 <BMP280_Write8+0x58>)
 8001204:	f004 fb9c 	bl	8005940 <HAL_GPIO_WritePin>
#endif
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	2000025c 	.word	0x2000025c

08001218 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af02      	add	r7, sp, #8
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8001226:	7b3b      	ldrb	r3, [r7, #12]
 8001228:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800122c:	b2db      	uxtb	r3, r3
 800122e:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001236:	480f      	ldr	r0, [pc, #60]	@ (8001274 <BMP280_Read24+0x5c>)
 8001238:	f004 fb82 	bl	8005940 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <BMP280_Read24+0x60>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	f107 010c 	add.w	r1, r7, #12
 8001248:	230a      	movs	r3, #10
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2303      	movs	r3, #3
 800124e:	f007 f95f 	bl	8008510 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001258:	4806      	ldr	r0, [pc, #24]	@ (8001274 <BMP280_Read24+0x5c>)
 800125a:	f004 fb71 	bl	8005940 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 800125e:	7b7b      	ldrb	r3, [r7, #13]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	4313      	orrs	r3, r2
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	4313      	orrs	r3, r2
#endif
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	2000025c 	.word	0x2000025c

0800127c <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4603      	mov	r3, r0
 800128c:	70fb      	strb	r3, [r7, #3]
 800128e:	460b      	mov	r3, r1
 8001290:	70bb      	strb	r3, [r7, #2]
 8001292:	4613      	mov	r3, r2
 8001294:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 8001296:	4a4f      	ldr	r2, [pc, #316]	@ (80013d4 <BMP280_Init+0x158>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a2:	484d      	ldr	r0, [pc, #308]	@ (80013d8 <BMP280_Init+0x15c>)
 80012a4:	f004 fb4c 	bl	8005940 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80012a8:	2005      	movs	r0, #5
 80012aa:	f003 fc6d 	bl	8004b88 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b4:	4848      	ldr	r0, [pc, #288]	@ (80013d8 <BMP280_Init+0x15c>)
 80012b6:	f004 fb43 	bl	8005940 <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 80012ba:	787b      	ldrb	r3, [r7, #1]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d901      	bls.n	80012c4 <BMP280_Init+0x48>
	    mode = BMP280_NORMALMODE;
 80012c0:	2303      	movs	r3, #3
 80012c2:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80012c4:	4a45      	ldr	r2, [pc, #276]	@ (80013dc <BMP280_Init+0x160>)
 80012c6:	787b      	ldrb	r3, [r7, #1]
 80012c8:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80012ca:	787b      	ldrb	r3, [r7, #1]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <BMP280_Init+0x58>
		mode = BMP280_SLEEPMODE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d901      	bls.n	80012de <BMP280_Init+0x62>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80012da:	2305      	movs	r3, #5
 80012dc:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80012de:	4a40      	ldr	r2, [pc, #256]	@ (80013e0 <BMP280_Init+0x164>)
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	d901      	bls.n	80012ee <BMP280_Init+0x72>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80012ea:	2305      	movs	r3, #5
 80012ec:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80012ee:	4a3d      	ldr	r2, [pc, #244]	@ (80013e4 <BMP280_Init+0x168>)
 80012f0:	78bb      	ldrb	r3, [r7, #2]
 80012f2:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80012f4:	bf00      	nop
 80012f6:	20d0      	movs	r0, #208	@ 0xd0
 80012f8:	f7ff fee4 	bl	80010c4 <BMP280_Read8>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b58      	cmp	r3, #88	@ 0x58
 8001300:	d1f9      	bne.n	80012f6 <BMP280_Init+0x7a>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001302:	2088      	movs	r0, #136	@ 0x88
 8001304:	f7ff ff3e 	bl	8001184 <BMP280_Read16LE>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b36      	ldr	r3, [pc, #216]	@ (80013e8 <BMP280_Init+0x16c>)
 800130e:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001310:	208a      	movs	r0, #138	@ 0x8a
 8001312:	f7ff ff37 	bl	8001184 <BMP280_Read16LE>
 8001316:	4603      	mov	r3, r0
 8001318:	b21a      	sxth	r2, r3
 800131a:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <BMP280_Init+0x170>)
 800131c:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 800131e:	208c      	movs	r0, #140	@ 0x8c
 8001320:	f7ff ff30 	bl	8001184 <BMP280_Read16LE>
 8001324:	4603      	mov	r3, r0
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <BMP280_Init+0x174>)
 800132a:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800132c:	208e      	movs	r0, #142	@ 0x8e
 800132e:	f7ff ff29 	bl	8001184 <BMP280_Read16LE>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <BMP280_Init+0x178>)
 8001338:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800133a:	2090      	movs	r0, #144	@ 0x90
 800133c:	f7ff ff22 	bl	8001184 <BMP280_Read16LE>
 8001340:	4603      	mov	r3, r0
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <BMP280_Init+0x17c>)
 8001346:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001348:	2092      	movs	r0, #146	@ 0x92
 800134a:	f7ff ff1b 	bl	8001184 <BMP280_Read16LE>
 800134e:	4603      	mov	r3, r0
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <BMP280_Init+0x180>)
 8001354:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001356:	2094      	movs	r0, #148	@ 0x94
 8001358:	f7ff ff14 	bl	8001184 <BMP280_Read16LE>
 800135c:	4603      	mov	r3, r0
 800135e:	b21a      	sxth	r2, r3
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <BMP280_Init+0x184>)
 8001362:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001364:	2096      	movs	r0, #150	@ 0x96
 8001366:	f7ff ff0d 	bl	8001184 <BMP280_Read16LE>
 800136a:	4603      	mov	r3, r0
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <BMP280_Init+0x188>)
 8001370:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001372:	2098      	movs	r0, #152	@ 0x98
 8001374:	f7ff ff06 	bl	8001184 <BMP280_Read16LE>
 8001378:	4603      	mov	r3, r0
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <BMP280_Init+0x18c>)
 800137e:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001380:	209a      	movs	r0, #154	@ 0x9a
 8001382:	f7ff feff 	bl	8001184 <BMP280_Read16LE>
 8001386:	4603      	mov	r3, r0
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b20      	ldr	r3, [pc, #128]	@ (800140c <BMP280_Init+0x190>)
 800138c:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 800138e:	209c      	movs	r0, #156	@ 0x9c
 8001390:	f7ff fef8 	bl	8001184 <BMP280_Read16LE>
 8001394:	4603      	mov	r3, r0
 8001396:	b21a      	sxth	r2, r3
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <BMP280_Init+0x194>)
 800139a:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800139c:	209e      	movs	r0, #158	@ 0x9e
 800139e:	f7ff fef1 	bl	8001184 <BMP280_Read16LE>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <BMP280_Init+0x198>)
 80013a8:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	015b      	lsls	r3, r3, #5
 80013ae:	b25a      	sxtb	r2, r3
 80013b0:	78bb      	ldrb	r3, [r7, #2]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b25a      	sxtb	r2, r3
 80013ba:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80013be:	4313      	orrs	r3, r2
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4619      	mov	r1, r3
 80013c6:	20f4      	movs	r0, #244	@ 0xf4
 80013c8:	f7ff fef6 	bl	80011b8 <BMP280_Write8>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000025c 	.word	0x2000025c
 80013d8:	40021000 	.word	0x40021000
 80013dc:	20000262 	.word	0x20000262
 80013e0:	20000260 	.word	0x20000260
 80013e4:	20000261 	.word	0x20000261
 80013e8:	20000278 	.word	0x20000278
 80013ec:	20000264 	.word	0x20000264
 80013f0:	20000266 	.word	0x20000266
 80013f4:	2000027a 	.word	0x2000027a
 80013f8:	20000268 	.word	0x20000268
 80013fc:	2000026a 	.word	0x2000026a
 8001400:	2000026c 	.word	0x2000026c
 8001404:	2000026e 	.word	0x2000026e
 8001408:	20000270 	.word	0x20000270
 800140c:	20000272 	.word	0x20000272
 8001410:	20000274 	.word	0x20000274
 8001414:	20000276 	.word	0x20000276

08001418 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800141e:	4b3d      	ldr	r3, [pc, #244]	@ (8001514 <BMP280_ReadTemperature+0xfc>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d16d      	bne.n	8001502 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001426:	20f4      	movs	r0, #244	@ 0xf4
 8001428:	f7ff fe4c 	bl	80010c4 <BMP280_Read8>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	4619      	mov	r1, r3
 8001444:	20f4      	movs	r0, #244	@ 0xf4
 8001446:	f7ff feb7 	bl	80011b8 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800144a:	20f4      	movs	r0, #244	@ 0xf4
 800144c:	f7ff fe3a 	bl	80010c4 <BMP280_Read8>
 8001450:	4603      	mov	r3, r0
 8001452:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001454:	7dbb      	ldrb	r3, [r7, #22]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d14f      	bne.n	8001502 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001462:	20f4      	movs	r0, #244	@ 0xf4
 8001464:	f7ff fe2e 	bl	80010c4 <BMP280_Read8>
 8001468:	4603      	mov	r3, r0
 800146a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800146c:	7dbb      	ldrb	r3, [r7, #22]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001474:	7dbb      	ldrb	r3, [r7, #22]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800147a:	e7f2      	b.n	8001462 <BMP280_ReadTemperature+0x4a>
				  break;
 800147c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800147e:	20fa      	movs	r0, #250	@ 0xfa
 8001480:	f7ff feca 	bl	8001218 <BMP280_Read24>
 8001484:	4603      	mov	r3, r0
 8001486:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	111b      	asrs	r3, r3, #4
 800148c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	10da      	asrs	r2, r3, #3
 8001492:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800149a:	4a20      	ldr	r2, [pc, #128]	@ (800151c <BMP280_ReadTemperature+0x104>)
 800149c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	12db      	asrs	r3, r3, #11
 80014a6:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	111b      	asrs	r3, r3, #4
 80014ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	1112      	asrs	r2, r2, #4
 80014b6:	4918      	ldr	r1, [pc, #96]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 80014b8:	8809      	ldrh	r1, [r1, #0]
 80014ba:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c0:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80014c2:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <BMP280_ReadTemperature+0x108>)
 80014c4:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014cc:	139b      	asrs	r3, r3, #14
 80014ce:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a13      	ldr	r2, [pc, #76]	@ (8001524 <BMP280_ReadTemperature+0x10c>)
 80014d8:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <BMP280_ReadTemperature+0x10c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3380      	adds	r3, #128	@ 0x80
 80014e6:	121b      	asrs	r3, r3, #8
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80014f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f8:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001528 <BMP280_ReadTemperature+0x110>
 80014fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001500:	e001      	b.n	8001506 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001502:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800152c <BMP280_ReadTemperature+0x114>
}
 8001506:	eef0 7a47 	vmov.f32	s15, s14
 800150a:	eeb0 0a67 	vmov.f32	s0, s15
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000262 	.word	0x20000262
 8001518:	20000278 	.word	0x20000278
 800151c:	20000264 	.word	0x20000264
 8001520:	20000266 	.word	0x20000266
 8001524:	2000027c 	.word	0x2000027c
 8001528:	42c80000 	.word	0x42c80000
 800152c:	c2c60000 	.word	0xc2c60000

08001530 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001534:	b0cc      	sub	sp, #304	@ 0x130
 8001536:	af00      	add	r7, sp, #0
 8001538:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 800153c:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001540:	f7ff ff6a 	bl	8001418 <BMP280_ReadTemperature>
 8001544:	eef0 7a40 	vmov.f32	s15, s0
 8001548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800154c:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8001828 <BMP280_ReadTemperatureAndPressure+0x2f8>
 800155c:	eef4 7a47 	vcmp.f32	s15, s14
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d101      	bne.n	800156a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8001566:	23ff      	movs	r3, #255	@ 0xff
 8001568:	e2bf      	b.n	8001aea <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800156a:	20f7      	movs	r0, #247	@ 0xf7
 800156c:	f7ff fe54 	bl	8001218 <BMP280_Read24>
 8001570:	4603      	mov	r3, r0
 8001572:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  adc_P >>= 4;
 8001576:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800157a:	111b      	asrs	r3, r3, #4
 800157c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001580:	4baa      	ldr	r3, [pc, #680]	@ (800182c <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	17da      	asrs	r2, r3, #31
 8001586:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800158a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800158e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001592:	460b      	mov	r3, r1
 8001594:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8001598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800159a:	4613      	mov	r3, r2
 800159c:	f143 33ff 	adc.w	r3, r3, #4294967295
 80015a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015a6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 80015aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015b2:	fb03 f102 	mul.w	r1, r3, r2
 80015b6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	18ca      	adds	r2, r1, r3
 80015c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c8:	fba3 4503 	umull	r4, r5, r3, r3
 80015cc:	1953      	adds	r3, r2, r5
 80015ce:	461d      	mov	r5, r3
 80015d0:	4b97      	ldr	r3, [pc, #604]	@ (8001830 <BMP280_ReadTemperatureAndPressure+0x300>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	17da      	asrs	r2, r3, #31
 80015da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80015de:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80015e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80015e6:	4603      	mov	r3, r0
 80015e8:	fb03 f205 	mul.w	r2, r3, r5
 80015ec:	460b      	mov	r3, r1
 80015ee:	fb04 f303 	mul.w	r3, r4, r3
 80015f2:	4413      	add	r3, r2
 80015f4:	4602      	mov	r2, r0
 80015f6:	fba4 8902 	umull	r8, r9, r4, r2
 80015fa:	444b      	add	r3, r9
 80015fc:	4699      	mov	r9, r3
 80015fe:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 8001602:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001606:	4b8b      	ldr	r3, [pc, #556]	@ (8001834 <BMP280_ReadTemperatureAndPressure+0x304>)
 8001608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160c:	b21b      	sxth	r3, r3
 800160e:	17da      	asrs	r2, r3, #31
 8001610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001614:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001618:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800161c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001620:	462a      	mov	r2, r5
 8001622:	fb02 f203 	mul.w	r2, r2, r3
 8001626:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800162a:	4621      	mov	r1, r4
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	441a      	add	r2, r3
 8001632:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001636:	4621      	mov	r1, r4
 8001638:	fba3 ab01 	umull	sl, fp, r3, r1
 800163c:	eb02 030b 	add.w	r3, r2, fp
 8001640:	469b      	mov	fp, r3
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800164e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001652:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001656:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800165a:	1814      	adds	r4, r2, r0
 800165c:	643c      	str	r4, [r7, #64]	@ 0x40
 800165e:	414b      	adcs	r3, r1
 8001660:	647b      	str	r3, [r7, #68]	@ 0x44
 8001662:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001666:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 800166a:	4b73      	ldr	r3, [pc, #460]	@ (8001838 <BMP280_ReadTemperatureAndPressure+0x308>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	b21b      	sxth	r3, r3
 8001672:	17da      	asrs	r2, r3, #31
 8001674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001678:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001688:	00d9      	lsls	r1, r3, #3
 800168a:	2000      	movs	r0, #0
 800168c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001690:	1814      	adds	r4, r2, r0
 8001692:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001694:	414b      	adcs	r3, r1
 8001696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001698:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800169c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80016a0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80016a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016a8:	fb03 f102 	mul.w	r1, r3, r2
 80016ac:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80016b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	18ca      	adds	r2, r1, r3
 80016ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016be:	fba3 1303 	umull	r1, r3, r3, r3
 80016c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016c6:	460b      	mov	r3, r1
 80016c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80016cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80016d0:	18d3      	adds	r3, r2, r3
 80016d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016d6:	4b59      	ldr	r3, [pc, #356]	@ (800183c <BMP280_ReadTemperatureAndPressure+0x30c>)
 80016d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	17da      	asrs	r2, r3, #31
 80016e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80016e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80016e8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80016ec:	462b      	mov	r3, r5
 80016ee:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80016f2:	4642      	mov	r2, r8
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	464b      	mov	r3, r9
 80016fa:	4621      	mov	r1, r4
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	4622      	mov	r2, r4
 8001704:	4641      	mov	r1, r8
 8001706:	fba2 1201 	umull	r1, r2, r2, r1
 800170a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800170e:	460a      	mov	r2, r1
 8001710:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8001714:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001718:	4413      	add	r3, r2
 800171a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800172a:	4623      	mov	r3, r4
 800172c:	0a18      	lsrs	r0, r3, #8
 800172e:	462b      	mov	r3, r5
 8001730:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001734:	462b      	mov	r3, r5
 8001736:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001738:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <BMP280_ReadTemperatureAndPressure+0x310>)
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	b21b      	sxth	r3, r3
 8001740:	17da      	asrs	r2, r3, #31
 8001742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001746:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800174a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800174e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001752:	464a      	mov	r2, r9
 8001754:	fb02 f203 	mul.w	r2, r2, r3
 8001758:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800175c:	4644      	mov	r4, r8
 800175e:	fb04 f303 	mul.w	r3, r4, r3
 8001762:	441a      	add	r2, r3
 8001764:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001768:	4644      	mov	r4, r8
 800176a:	fba3 4304 	umull	r4, r3, r3, r4
 800176e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001772:	4623      	mov	r3, r4
 8001774:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800177c:	18d3      	adds	r3, r2, r3
 800177e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800178e:	464c      	mov	r4, r9
 8001790:	0323      	lsls	r3, r4, #12
 8001792:	4644      	mov	r4, r8
 8001794:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001798:	4644      	mov	r4, r8
 800179a:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800179c:	1884      	adds	r4, r0, r2
 800179e:	633c      	str	r4, [r7, #48]	@ 0x30
 80017a0:	eb41 0303 	adc.w	r3, r1, r3
 80017a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80017a6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80017aa:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80017ae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017b2:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80017b6:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 80017ba:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80017be:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <BMP280_ReadTemperatureAndPressure+0x314>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2200      	movs	r2, #0
 80017c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80017ce:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80017d2:	462b      	mov	r3, r5
 80017d4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80017d8:	4642      	mov	r2, r8
 80017da:	fb02 f203 	mul.w	r2, r2, r3
 80017de:	464b      	mov	r3, r9
 80017e0:	4621      	mov	r1, r4
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	4622      	mov	r2, r4
 80017ea:	4641      	mov	r1, r8
 80017ec:	fba2 1201 	umull	r1, r2, r2, r1
 80017f0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80017f4:	460a      	mov	r2, r1
 80017f6:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80017fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80017fe:	4413      	add	r3, r2
 8001800:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001810:	4629      	mov	r1, r5
 8001812:	104a      	asrs	r2, r1, #1
 8001814:	4629      	mov	r1, r5
 8001816:	17cb      	asrs	r3, r1, #31
 8001818:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	  if (var1 == 0) {
 800181c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001820:	4313      	orrs	r3, r2
 8001822:	d111      	bne.n	8001848 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001824:	2300      	movs	r3, #0
 8001826:	e160      	b.n	8001aea <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001828:	c2c60000 	.word	0xc2c60000
 800182c:	2000027c 	.word	0x2000027c
 8001830:	20000270 	.word	0x20000270
 8001834:	2000026e 	.word	0x2000026e
 8001838:	2000026c 	.word	0x2000026c
 800183c:	2000026a 	.word	0x2000026a
 8001840:	20000268 	.word	0x20000268
 8001844:	2000027a 	.word	0x2000027a
	  }
	  p = 1048576 - adc_P;
 8001848:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800184c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001850:	17da      	asrs	r2, r3, #31
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001856:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800185a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 800185e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001862:	105b      	asrs	r3, r3, #1
 8001864:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001868:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800186c:	07db      	lsls	r3, r3, #31
 800186e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001872:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001876:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800187a:	4621      	mov	r1, r4
 800187c:	1a89      	subs	r1, r1, r2
 800187e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001882:	4629      	mov	r1, r5
 8001884:	eb61 0303 	sbc.w	r3, r1, r3
 8001888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800188c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001890:	4622      	mov	r2, r4
 8001892:	462b      	mov	r3, r5
 8001894:	1891      	adds	r1, r2, r2
 8001896:	6239      	str	r1, [r7, #32]
 8001898:	415b      	adcs	r3, r3
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
 800189c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018a0:	4621      	mov	r1, r4
 80018a2:	1851      	adds	r1, r2, r1
 80018a4:	61b9      	str	r1, [r7, #24]
 80018a6:	4629      	mov	r1, r5
 80018a8:	414b      	adcs	r3, r1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018b8:	4649      	mov	r1, r9
 80018ba:	018b      	lsls	r3, r1, #6
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c2:	4641      	mov	r1, r8
 80018c4:	018a      	lsls	r2, r1, #6
 80018c6:	4641      	mov	r1, r8
 80018c8:	1889      	adds	r1, r1, r2
 80018ca:	6139      	str	r1, [r7, #16]
 80018cc:	4649      	mov	r1, r9
 80018ce:	eb43 0101 	adc.w	r1, r3, r1
 80018d2:	6179      	str	r1, [r7, #20]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018e0:	4649      	mov	r1, r9
 80018e2:	008b      	lsls	r3, r1, #2
 80018e4:	4641      	mov	r1, r8
 80018e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018ea:	4641      	mov	r1, r8
 80018ec:	008a      	lsls	r2, r1, #2
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	4622      	mov	r2, r4
 80018f6:	189b      	adds	r3, r3, r2
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	460b      	mov	r3, r1
 80018fc:	462a      	mov	r2, r5
 80018fe:	eb42 0303 	adc.w	r3, r2, r3
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001910:	4649      	mov	r1, r9
 8001912:	008b      	lsls	r3, r1, #2
 8001914:	4641      	mov	r1, r8
 8001916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800191a:	4641      	mov	r1, r8
 800191c:	008a      	lsls	r2, r1, #2
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	4603      	mov	r3, r0
 8001924:	4622      	mov	r2, r4
 8001926:	189b      	adds	r3, r3, r2
 8001928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800192a:	462b      	mov	r3, r5
 800192c:	460a      	mov	r2, r1
 800192e:	eb42 0303 	adc.w	r3, r2, r3
 8001932:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001934:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001938:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800193c:	f7ff f9c4 	bl	8000cc8 <__aeabi_ldivmod>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001948:	4b6b      	ldr	r3, [pc, #428]	@ (8001af8 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	b21b      	sxth	r3, r3
 8001950:	17da      	asrs	r2, r3, #31
 8001952:	673b      	str	r3, [r7, #112]	@ 0x70
 8001954:	677a      	str	r2, [r7, #116]	@ 0x74
 8001956:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0b50      	lsrs	r0, r2, #13
 8001964:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001968:	1359      	asrs	r1, r3, #13
 800196a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800196e:	462b      	mov	r3, r5
 8001970:	fb00 f203 	mul.w	r2, r0, r3
 8001974:	4623      	mov	r3, r4
 8001976:	fb03 f301 	mul.w	r3, r3, r1
 800197a:	4413      	add	r3, r2
 800197c:	4622      	mov	r2, r4
 800197e:	fba2 1200 	umull	r1, r2, r2, r0
 8001982:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001986:	460a      	mov	r2, r1
 8001988:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800198c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001990:	4413      	add	r3, r2
 8001992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001996:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800199a:	f04f 0000 	mov.w	r0, #0
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	0b50      	lsrs	r0, r2, #13
 80019a4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a8:	1359      	asrs	r1, r3, #13
 80019aa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80019ae:	462b      	mov	r3, r5
 80019b0:	fb00 f203 	mul.w	r2, r0, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	fb03 f301 	mul.w	r3, r3, r1
 80019ba:	4413      	add	r3, r2
 80019bc:	4622      	mov	r2, r4
 80019be:	fba2 1200 	umull	r1, r2, r2, r0
 80019c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80019c6:	460a      	mov	r2, r1
 80019c8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80019cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80019d0:	4413      	add	r3, r2
 80019d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80019e2:	4621      	mov	r1, r4
 80019e4:	0e4a      	lsrs	r2, r1, #25
 80019e6:	4629      	mov	r1, r5
 80019e8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019ec:	4629      	mov	r1, r5
 80019ee:	164b      	asrs	r3, r1, #25
 80019f0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 80019f4:	4b41      	ldr	r3, [pc, #260]	@ (8001afc <BMP280_ReadTemperatureAndPressure+0x5cc>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	17da      	asrs	r2, r3, #31
 80019fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a06:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a0a:	462a      	mov	r2, r5
 8001a0c:	fb02 f203 	mul.w	r2, r2, r3
 8001a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a14:	4621      	mov	r1, r4
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001a20:	4621      	mov	r1, r4
 8001a22:	fba2 1201 	umull	r1, r2, r2, r1
 8001a26:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a30:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a34:	4413      	add	r3, r2
 8001a36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001a46:	4621      	mov	r1, r4
 8001a48:	0cca      	lsrs	r2, r1, #19
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a50:	4629      	mov	r1, r5
 8001a52:	14cb      	asrs	r3, r1, #19
 8001a54:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001a58:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001a5c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a60:	1884      	adds	r4, r0, r2
 8001a62:	663c      	str	r4, [r7, #96]	@ 0x60
 8001a64:	eb41 0303 	adc.w	r3, r1, r3
 8001a68:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a6a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a72:	4621      	mov	r1, r4
 8001a74:	1889      	adds	r1, r1, r2
 8001a76:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001a78:	4629      	mov	r1, r5
 8001a7a:	eb43 0101 	adc.w	r1, r3, r1
 8001a7e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	0a18      	lsrs	r0, r3, #8
 8001a90:	462b      	mov	r3, r5
 8001a92:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a96:	462b      	mov	r3, r5
 8001a98:	1219      	asrs	r1, r3, #8
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8001a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	17da      	asrs	r2, r3, #31
 8001aa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001aa6:	657a      	str	r2, [r7, #84]	@ 0x54
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ab4:	464c      	mov	r4, r9
 8001ab6:	0123      	lsls	r3, r4, #4
 8001ab8:	4644      	mov	r4, r8
 8001aba:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001abe:	4644      	mov	r4, r8
 8001ac0:	0122      	lsls	r2, r4, #4
 8001ac2:	1884      	adds	r4, r0, r2
 8001ac4:	603c      	str	r4, [r7, #0]
 8001ac6:	eb41 0303 	adc.w	r3, r1, r3
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ad0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  *pressure = (int32_t)p/256;
 8001ad4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da00      	bge.n	8001ade <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001adc:	33ff      	adds	r3, #255	@ 0xff
 8001ade:	121b      	asrs	r3, r3, #8
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ae6:	601a      	str	r2, [r3, #0]

	  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	20000276 	.word	0x20000276
 8001afc:	20000274 	.word	0x20000274
 8001b00:	20000272 	.word	0x20000272

08001b04 <Read16>:
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @param:		register address in hexadecimal
 * @retval:		16 bit unsigned integer that represents the register's contents.
 */
uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af04      	add	r7, sp, #16
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	2302      	movs	r3, #2
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	2180      	movs	r1, #128	@ 0x80
 8001b2c:	f004 fae0 	bl	80060f0 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8001b30:	7b3b      	ldrb	r3, [r7, #12]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	7b7b      	ldrb	r3, [r7, #13]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	b29b      	uxth	r3, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <Write16>:
				  HAL_BUSY     = 0x02U,
				  HAL_TIMEOUT  = 0x03U
				} HAL_StatusTypeDef;
 */
HAL_StatusTypeDef Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af04      	add	r7, sp, #16
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
 8001b54:	4613      	mov	r3, r2
 8001b56:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8001b58:	883b      	ldrh	r3, [r7, #0]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8001b62:	883b      	ldrh	r3, [r7, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	2302      	movs	r3, #2
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	2180      	movs	r1, #128	@ 0x80
 8001b84:	f004 f9a0 	bl	8005ec8 <HAL_I2C_Mem_Write>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <INA219_ReadBusVoltage>:
 * @brief: 		This function will read the battery voltage level being read.
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:		Returns voltage level in mili-volts
 */
uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ffb1 	bl	8001b04 <Read16>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8001ba6:	89fb      	ldrh	r3, [r7, #14]
 8001ba8:	08db      	lsrs	r3, r3, #3
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	b29b      	uxth	r3, r3

}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <INA219_ReadCurrent_raw>:
 *  @brief:	  	Gets the raw current value (16-bit signed integer, so +-32767)
 *  @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 *  @retval:	The raw current reading
 */
int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff9e 	bl	8001b04 <Read16>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001bcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <INA219_ReadPower>:
 * 			Power multiplier is initialize in the calibration function.
 * @param:	Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:	Returns power level in mili-watts
 */
uint16_t INA219_ReadPower(INA219_t *ina219)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_POWER );
 8001be0:	2103      	movs	r1, #3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ff8e 	bl	8001b04 <Read16>
 8001be8:	4603      	mov	r3, r0
 8001bea:	81fb      	strh	r3, [r7, #14]
	result = result * ina219_powerMultiplier_mW; // power is the power register times the power_LSB (power multiplier)
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <INA219_ReadPower+0x30>)
 8001bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	89fa      	ldrh	r2, [r7, #14]
 8001bf6:	fb12 f303 	smulbb	r3, r2, r3
 8001bfa:	81fb      	strh	r3, [r7, #14]
	return (result);
 8001bfc:	89fb      	ldrh	r3, [r7, #14]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000286 	.word	0x20000286

08001c0c <INA219_HealthCheck>:
 * 				the program that called the health check function what state our battery is
 * 				at and whether we have entered a "LOW" state. This way the program can take
 * 				appropriate action.
 */
enum BatteryState INA219_HealthCheck(INA219_t *ina219,float batteryPercentageThreshold,float batteryPercentage)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c18:	edc7 0a01 	vstr	s1, [r7, #4]
	switch(batteryState)
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d01b      	beq.n	8001c5c <INA219_HealthCheck+0x50>
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	dc2a      	bgt.n	8001c7e <INA219_HealthCheck+0x72>
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <INA219_HealthCheck+0x26>
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d004      	beq.n	8001c3a <INA219_HealthCheck+0x2e>
 8001c30:	e025      	b.n	8001c7e <INA219_HealthCheck+0x72>
	{
		case (Battery_START):
			/* Enter your start up functionality here */
			batteryState = Battery_OK;
 8001c32:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
			break;
 8001c38:	e025      	b.n	8001c86 <INA219_HealthCheck+0x7a>
		case (Battery_OK):
			/* Enter your battery OK state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001c3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	dd03      	ble.n	8001c54 <INA219_HealthCheck+0x48>
			{
				batteryState = Battery_OK;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001c52:	e018      	b.n	8001c86 <INA219_HealthCheck+0x7a>
				 batteryState = Battery_LOW;
 8001c54:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c56:	2202      	movs	r2, #2
 8001c58:	701a      	strb	r2, [r3, #0]
			break;
 8001c5a:	e014      	b.n	8001c86 <INA219_HealthCheck+0x7a>
		case (Battery_LOW):
			/* Enter your battery LOW state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001c5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	dd03      	ble.n	8001c76 <INA219_HealthCheck+0x6a>
			{
				batteryState = Battery_OK;
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001c74:	e007      	b.n	8001c86 <INA219_HealthCheck+0x7a>
				 batteryState = Battery_LOW;
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c78:	2202      	movs	r2, #2
 8001c7a:	701a      	strb	r2, [r3, #0]
			break;
 8001c7c:	e003      	b.n	8001c86 <INA219_HealthCheck+0x7a>
		default:
			/*
			 * If program encounters a bug or a value outside what is expected we go here.
			 * Feel free to add functionality if needed.
			*/
			batteryState = Battery_START;
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
			break;
 8001c84:	bf00      	nop
	}
	return batteryState;
 8001c86:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c88:	781b      	ldrb	r3, [r3, #0]

}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000280 	.word	0x20000280

08001c9c <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001ca4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ca8:	2100      	movs	r1, #0
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ff4c 	bl	8001b48 <Write16>
	HAL_Delay(1);
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f002 ff69 	bl	8004b88 <HAL_Delay>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2105      	movs	r1, #5
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff39 	bl	8001b48 <Write16>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001cea:	887b      	ldrh	r3, [r7, #2]
 8001cec:	461a      	mov	r2, r3
 8001cee:	2100      	movs	r1, #0
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff29 	bl	8001b48 <Write16>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001d08:	f643 139f 	movw	r3, #14751	@ 0x399f
 8001d0c:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <INA219_setCalibration_32V_2A+0x40>)
 8001d10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d14:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <INA219_setCalibration_32V_2A+0x44>)
 8001d18:	220a      	movs	r2, #10
 8001d1a:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <INA219_setCalibration_32V_2A+0x48>)
 8001d1e:	2202      	movs	r2, #2
 8001d20:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <INA219_setCalibration_32V_2A+0x40>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ffc8 	bl	8001cbe <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8001d2e:	89fb      	ldrh	r3, [r7, #14]
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffd3 	bl	8001cde <INA219_setConfig>
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000282 	.word	0x20000282
 8001d44:	20000284 	.word	0x20000284
 8001d48:	20000286 	.word	0x20000286

08001d4c <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	4613      	mov	r3, r2
 8001d58:	71fb      	strb	r3, [r7, #7]
	isFirst = false; // set global var used by INA219_GetMiliWattMinutes
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <INA219_Init+0x78>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
	ina219->ina219_i2c = i2c;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <INA219_Init+0x7c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001d72:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <INA219_Init+0x80>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	b299      	uxth	r1, r3
 8001d80:	2302      	movs	r3, #2
 8001d82:	2203      	movs	r2, #3
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f004 facd 	bl	8006324 <HAL_I2C_IsDeviceReady>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d111      	bne.n	8001db8 <INA219_Init+0x6c>
	{
		// just to initialize our state machine.
		//The numbers 0.0f and 1.0f is just to call the healthcheck function.
		//Feel free to change this if you want. This function should be called in your main function to be polled.
		batteryState = Battery_START; // go to starting position.
 8001d94:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <INA219_Init+0x84>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
		INA219_HealthCheck(ina219,0.0f,1.0f );
 8001d9a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001d9e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8001dd4 <INA219_Init+0x88>
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff ff32 	bl	8001c0c <INA219_HealthCheck>
		INA219_Reset(ina219);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff ff77 	bl	8001c9c <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f7ff ffa6 	bl	8001d00 <INA219_setCalibration_32V_2A>

		return 1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <INA219_Init+0x6e>
	}

	else
	{
		return 0;
 8001db8:	2300      	movs	r3, #0
	}
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000281 	.word	0x20000281
 8001dc8:	20000284 	.word	0x20000284
 8001dcc:	20000286 	.word	0x20000286
 8001dd0:	20000280 	.word	0x20000280
 8001dd4:	00000000 	.word	0x00000000

08001dd8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dde:	463b      	mov	r3, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dea:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001dec:	4a21      	ldr	r2, [pc, #132]	@ (8001e74 <MX_ADC1_Init+0x9c>)
 8001dee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e10:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e16:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e18:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <MX_ADC1_Init+0xa0>)
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e22:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e36:	480e      	ldr	r0, [pc, #56]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e38:	f002 feca 	bl	8004bd0 <HAL_ADC_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e42:	f001 fb0f 	bl	8003464 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e52:	463b      	mov	r3, r7
 8001e54:	4619      	mov	r1, r3
 8001e56:	4806      	ldr	r0, [pc, #24]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e58:	f003 f864 	bl	8004f24 <HAL_ADC_ConfigChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001e62:	f001 faff 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000288 	.word	0x20000288
 8001e74:	40012000 	.word	0x40012000
 8001e78:	0f000001 	.word	0x0f000001

08001e7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	@ 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a15      	ldr	r2, [pc, #84]	@ (8001ef0 <HAL_ADC_MspInit+0x74>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d123      	bne.n	8001ee6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_ADC_MspInit+0x78>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	4a14      	ldr	r2, [pc, #80]	@ (8001ef4 <HAL_ADC_MspInit+0x78>)
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eaa:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <HAL_ADC_MspInit+0x78>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <HAL_ADC_MspInit+0x78>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <HAL_ADC_MspInit+0x78>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <HAL_ADC_MspInit+0x78>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <HAL_ADC_MspInit+0x7c>)
 8001ee2:	f003 fb81 	bl	80055e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	3728      	adds	r7, #40	@ 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40012000 	.word	0x40012000
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020000 	.word	0x40020000

08001efc <SELECT>:
#define SD_CS_GPIO_Port GPIOE
#define SD_CS_Pin GPIO_PIN_11

/* SPI Chip Select */
static void SELECT(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f06:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <SELECT+0x14>)
 8001f08:	f003 fd1a 	bl	8005940 <HAL_GPIO_WritePin>
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000

08001f14 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f1e:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <DESELECT+0x14>)
 8001f20:	f003 fd0e 	bl	8005940 <HAL_GPIO_WritePin>
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000

08001f2c <SPI_TxByte>:


static void SPI_TxByte(BYTE data)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f36:	bf00      	nop
 8001f38:	4808      	ldr	r0, [pc, #32]	@ (8001f5c <SPI_TxByte+0x30>)
 8001f3a:	f006 fd0b 	bl	8008954 <HAL_SPI_GetState>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d1f9      	bne.n	8001f38 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001f44:	1df9      	adds	r1, r7, #7
 8001f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <SPI_TxByte+0x30>)
 8001f4e:	f006 f96a 	bl	8008226 <HAL_SPI_Transmit>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200029e0 	.word	0x200029e0

08001f60 <SPI_RxByte>:


static uint8_t SPI_RxByte(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001f66:	23ff      	movs	r3, #255	@ 0xff
 8001f68:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001f6e:	bf00      	nop
 8001f70:	4809      	ldr	r0, [pc, #36]	@ (8001f98 <SPI_RxByte+0x38>)
 8001f72:	f006 fcef 	bl	8008954 <HAL_SPI_GetState>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d1f9      	bne.n	8001f70 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001f7c:	1dba      	adds	r2, r7, #6
 8001f7e:	1df9      	adds	r1, r7, #7
 8001f80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2301      	movs	r3, #1
 8001f88:	4803      	ldr	r0, [pc, #12]	@ (8001f98 <SPI_RxByte+0x38>)
 8001f8a:	f006 fac1 	bl	8008510 <HAL_SPI_TransmitReceive>

  return data;
 8001f8e:	79bb      	ldrb	r3, [r7, #6]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200029e0 	.word	0x200029e0

08001f9c <SPI_RxBytePtr>:


static void SPI_RxBytePtr(uint8_t *buff)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001fa4:	f7ff ffdc 	bl	8001f60 <SPI_RxByte>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	701a      	strb	r2, [r3, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <SD_ReadyWait>:


static uint8_t SD_ReadyWait(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  uint8_t res;

   Timer2 = 50;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <SD_ReadyWait+0x34>)
 8001fc0:	2232      	movs	r2, #50	@ 0x32
 8001fc2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001fc4:	f7ff ffcc 	bl	8001f60 <SPI_RxByte>

  do
  {
     res = SPI_RxByte();
 8001fc8:	f7ff ffca 	bl	8001f60 <SPI_RxByte>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	2bff      	cmp	r3, #255	@ 0xff
 8001fd4:	d004      	beq.n	8001fe0 <SD_ReadyWait+0x28>
 8001fd6:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <SD_ReadyWait+0x34>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f3      	bne.n	8001fc8 <SD_ReadyWait+0x10>

  return res;
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20002a46 	.word	0x20002a46

08001ff0 <SD_PowerOn>:

 static void SD_PowerOn(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001ff6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001ffa:	617b      	str	r3, [r7, #20]

   DESELECT();
 8001ffc:	f7ff ff8a 	bl	8001f14 <DESELECT>

  for(int i = 0; i < 10; i++)
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	e005      	b.n	8002012 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8002006:	20ff      	movs	r0, #255	@ 0xff
 8002008:	f7ff ff90 	bl	8001f2c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	3301      	adds	r3, #1
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b09      	cmp	r3, #9
 8002016:	ddf6      	ble.n	8002006 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8002018:	f7ff ff70 	bl	8001efc <SELECT>

   cmd_arg[0] = (CMD0 | 0x40);
 800201c:	2340      	movs	r3, #64	@ 0x40
 800201e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8002030:	2395      	movs	r3, #149	@ 0x95
 8002032:	727b      	strb	r3, [r7, #9]

   for (int i = 0; i < 6; i++)
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	e009      	b.n	800204e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800203a:	1d3a      	adds	r2, r7, #4
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff72 	bl	8001f2c <SPI_TxByte>
   for (int i = 0; i < 6; i++)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3301      	adds	r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b05      	cmp	r3, #5
 8002052:	ddf2      	ble.n	800203a <SD_PowerOn+0x4a>
  }

   while ((SPI_RxByte() != 0x01) && Count)
 8002054:	e002      	b.n	800205c <SD_PowerOn+0x6c>
  {
    Count--;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3b01      	subs	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
   while ((SPI_RxByte() != 0x01) && Count)
 800205c:	f7ff ff80 	bl	8001f60 <SPI_RxByte>
 8002060:	4603      	mov	r3, r0
 8002062:	2b01      	cmp	r3, #1
 8002064:	d002      	beq.n	800206c <SD_PowerOn+0x7c>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f4      	bne.n	8002056 <SD_PowerOn+0x66>
  }

  DESELECT();
 800206c:	f7ff ff52 	bl	8001f14 <DESELECT>
  SPI_TxByte(0XFF);
 8002070:	20ff      	movs	r0, #255	@ 0xff
 8002072:	f7ff ff5b 	bl	8001f2c <SPI_TxByte>

  PowerFlag = 1;
 8002076:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <SD_PowerOn+0x94>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
}
 800207c:	bf00      	nop
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	200002d1 	.word	0x200002d1

08002088 <SD_PowerOff>:

 static void SD_PowerOff(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <SD_PowerOff+0x14>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	200002d1 	.word	0x200002d1

080020a0 <SD_CheckPower>:

 static uint8_t SD_CheckPower(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80020a4:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <SD_CheckPower+0x14>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	200002d1 	.word	0x200002d1

080020b8 <SD_RxDataBlock>:

 static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint8_t token;

   Timer1 = 10;
 80020c2:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <SD_RxDataBlock+0x68>)
 80020c4:	220a      	movs	r2, #10
 80020c6:	701a      	strb	r2, [r3, #0]

  do
  {
    token = SPI_RxByte();
 80020c8:	f7ff ff4a 	bl	8001f60 <SPI_RxByte>
 80020cc:	4603      	mov	r3, r0
 80020ce:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	2bff      	cmp	r3, #255	@ 0xff
 80020d4:	d104      	bne.n	80020e0 <SD_RxDataBlock+0x28>
 80020d6:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <SD_RxDataBlock+0x68>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f3      	bne.n	80020c8 <SD_RxDataBlock+0x10>


  if(token != 0xFE)
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	2bfe      	cmp	r3, #254	@ 0xfe
 80020e4:	d001      	beq.n	80020ea <SD_RxDataBlock+0x32>
    return FALSE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e016      	b.n	8002118 <SD_RxDataBlock+0x60>

  do
  {
    SPI_RxBytePtr(buff++);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff53 	bl	8001f9c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff4d 	bl	8001f9c <SPI_RxBytePtr>
  } while(btr -= 2);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	3b02      	subs	r3, #2
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1ed      	bne.n	80020ea <SD_RxDataBlock+0x32>

  SPI_RxByte();
 800210e:	f7ff ff27 	bl	8001f60 <SPI_RxByte>
  SPI_RxByte();
 8002112:	f7ff ff25 	bl	8001f60 <SPI_RxByte>

  return TRUE;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20002a45 	.word	0x20002a45

08002124 <SD_TxDataBlock>:


#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	737b      	strb	r3, [r7, #13]

  if (SD_ReadyWait() != 0xFF)
 8002134:	f7ff ff40 	bl	8001fb8 <SD_ReadyWait>
 8002138:	4603      	mov	r3, r0
 800213a:	2bff      	cmp	r3, #255	@ 0xff
 800213c:	d001      	beq.n	8002142 <SD_TxDataBlock+0x1e>
    return FALSE;
 800213e:	2300      	movs	r3, #0
 8002140:	e040      	b.n	80021c4 <SD_TxDataBlock+0xa0>

  SPI_TxByte(token);
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fef1 	bl	8001f2c <SPI_TxByte>

  if (token != 0xFD)
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	2bfd      	cmp	r3, #253	@ 0xfd
 800214e:	d031      	beq.n	80021b4 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	73bb      	strb	r3, [r7, #14]

    do
    {
      SPI_TxByte(*buff++);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fee5 	bl	8001f2c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fede 	bl	8001f2c <SPI_TxByte>
    } while (--wc);
 8002170:	7bbb      	ldrb	r3, [r7, #14]
 8002172:	3b01      	subs	r3, #1
 8002174:	73bb      	strb	r3, [r7, #14]
 8002176:	7bbb      	ldrb	r3, [r7, #14]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1eb      	bne.n	8002154 <SD_TxDataBlock+0x30>

    SPI_RxByte();
 800217c:	f7ff fef0 	bl	8001f60 <SPI_RxByte>
    SPI_RxByte();
 8002180:	f7ff feee 	bl	8001f60 <SPI_RxByte>

    while (i <= 64)
 8002184:	e00b      	b.n	800219e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8002186:	f7ff feeb 	bl	8001f60 <SPI_RxByte>
 800218a:	4603      	mov	r3, r0
 800218c:	73fb      	strb	r3, [r7, #15]

      if ((resp & 0x1F) == 0x05)
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2b05      	cmp	r3, #5
 8002196:	d006      	beq.n	80021a6 <SD_TxDataBlock+0x82>
        break;

      i++;
 8002198:	7b7b      	ldrb	r3, [r7, #13]
 800219a:	3301      	adds	r3, #1
 800219c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800219e:	7b7b      	ldrb	r3, [r7, #13]
 80021a0:	2b40      	cmp	r3, #64	@ 0x40
 80021a2:	d9f0      	bls.n	8002186 <SD_TxDataBlock+0x62>
 80021a4:	e000      	b.n	80021a8 <SD_TxDataBlock+0x84>
        break;
 80021a6:	bf00      	nop
    }

    while (SPI_RxByte() == 0);
 80021a8:	bf00      	nop
 80021aa:	f7ff fed9 	bl	8001f60 <SPI_RxByte>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0fa      	beq.n	80021aa <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d101      	bne.n	80021c2 <SD_TxDataBlock+0x9e>
    return TRUE;
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  if (SD_ReadyWait() != 0xFF)
 80021d8:	f7ff feee 	bl	8001fb8 <SD_ReadyWait>
 80021dc:	4603      	mov	r3, r0
 80021de:	2bff      	cmp	r3, #255	@ 0xff
 80021e0:	d001      	beq.n	80021e6 <SD_SendCmd+0x1a>
    return 0xFF;
 80021e2:	23ff      	movs	r3, #255	@ 0xff
 80021e4:	e040      	b.n	8002268 <SD_SendCmd+0x9c>

  SPI_TxByte(cmd); 			/* Command */
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fe9f 	bl	8001f2c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	0e1b      	lsrs	r3, r3, #24
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fe99 	bl	8001f2c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fe93 	bl	8001f2c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fe8d 	bl	8001f2c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fe88 	bl	8001f2c <SPI_TxByte>

  crc = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	2b40      	cmp	r3, #64	@ 0x40
 8002224:	d101      	bne.n	800222a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8002226:	2395      	movs	r3, #149	@ 0x95
 8002228:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b48      	cmp	r3, #72	@ 0x48
 800222e:	d101      	bne.n	8002234 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002230:	2387      	movs	r3, #135	@ 0x87
 8002232:	73fb      	strb	r3, [r7, #15]

  /* CRC */
  SPI_TxByte(crc);
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fe78 	bl	8001f2c <SPI_TxByte>

  if (cmd == CMD12)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b4c      	cmp	r3, #76	@ 0x4c
 8002240:	d101      	bne.n	8002246 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8002242:	f7ff fe8d 	bl	8001f60 <SPI_RxByte>

  uint8_t n = 10;
 8002246:	230a      	movs	r3, #10
 8002248:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800224a:	f7ff fe89 	bl	8001f60 <SPI_RxByte>
 800224e:	4603      	mov	r3, r0
 8002250:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002252:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002256:	2b00      	cmp	r3, #0
 8002258:	da05      	bge.n	8002266 <SD_SendCmd+0x9a>
 800225a:	7bbb      	ldrb	r3, [r7, #14]
 800225c:	3b01      	subs	r3, #1
 800225e:	73bb      	strb	r3, [r7, #14]
 8002260:	7bbb      	ldrb	r3, [r7, #14]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f1      	bne.n	800224a <SD_SendCmd+0x7e>

  return res;
 8002266:	7b7b      	ldrb	r3, [r7, #13]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <SD_disk_initialize>:


DSTATUS SD_disk_initialize(BYTE drv)
{
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  if(drv)
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8002280:	2301      	movs	r3, #1
 8002282:	e0d5      	b.n	8002430 <SD_disk_initialize+0x1c0>

  if(Stat & STA_NODISK)
 8002284:	4b6c      	ldr	r3, [pc, #432]	@ (8002438 <SD_disk_initialize+0x1c8>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <SD_disk_initialize+0x2a>
    return Stat;
 8002292:	4b69      	ldr	r3, [pc, #420]	@ (8002438 <SD_disk_initialize+0x1c8>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	e0ca      	b.n	8002430 <SD_disk_initialize+0x1c0>

  SD_PowerOn();
 800229a:	f7ff fea9 	bl	8001ff0 <SD_PowerOn>

  SELECT();
 800229e:	f7ff fe2d 	bl	8001efc <SELECT>

  type = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	73bb      	strb	r3, [r7, #14]

  if (SD_SendCmd(CMD0, 0) == 1)
 80022a6:	2100      	movs	r1, #0
 80022a8:	2040      	movs	r0, #64	@ 0x40
 80022aa:	f7ff ff8f 	bl	80021cc <SD_SendCmd>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	f040 80a5 	bne.w	8002400 <SD_disk_initialize+0x190>
  {
    Timer1 = 100;
 80022b6:	4b61      	ldr	r3, [pc, #388]	@ (800243c <SD_disk_initialize+0x1cc>)
 80022b8:	2264      	movs	r2, #100	@ 0x64
 80022ba:	701a      	strb	r2, [r3, #0]

    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80022bc:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80022c0:	2048      	movs	r0, #72	@ 0x48
 80022c2:	f7ff ff83 	bl	80021cc <SD_SendCmd>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d158      	bne.n	800237e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e00c      	b.n	80022ec <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80022d2:	7bfc      	ldrb	r4, [r7, #15]
 80022d4:	f7ff fe44 	bl	8001f60 <SPI_RxByte>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	f104 0310 	add.w	r3, r4, #16
 80022e0:	443b      	add	r3, r7
 80022e2:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	3301      	adds	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d9ef      	bls.n	80022d2 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80022f2:	7abb      	ldrb	r3, [r7, #10]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	f040 8083 	bne.w	8002400 <SD_disk_initialize+0x190>
 80022fa:	7afb      	ldrb	r3, [r7, #11]
 80022fc:	2baa      	cmp	r3, #170	@ 0xaa
 80022fe:	d17f      	bne.n	8002400 <SD_disk_initialize+0x190>
      {
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002300:	2100      	movs	r1, #0
 8002302:	2077      	movs	r0, #119	@ 0x77
 8002304:	f7ff ff62 	bl	80021cc <SD_SendCmd>
 8002308:	4603      	mov	r3, r0
 800230a:	2b01      	cmp	r3, #1
 800230c:	d807      	bhi.n	800231e <SD_disk_initialize+0xae>
 800230e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002312:	2069      	movs	r0, #105	@ 0x69
 8002314:	f7ff ff5a 	bl	80021cc <SD_SendCmd>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800231e:	4b47      	ldr	r3, [pc, #284]	@ (800243c <SD_disk_initialize+0x1cc>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1eb      	bne.n	8002300 <SD_disk_initialize+0x90>
 8002328:	e000      	b.n	800232c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800232a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800232c:	4b43      	ldr	r3, [pc, #268]	@ (800243c <SD_disk_initialize+0x1cc>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d064      	beq.n	8002400 <SD_disk_initialize+0x190>
 8002336:	2100      	movs	r1, #0
 8002338:	207a      	movs	r0, #122	@ 0x7a
 800233a:	f7ff ff47 	bl	80021cc <SD_SendCmd>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d15d      	bne.n	8002400 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e00c      	b.n	8002364 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800234a:	7bfc      	ldrb	r4, [r7, #15]
 800234c:	f7ff fe08 	bl	8001f60 <SPI_RxByte>
 8002350:	4603      	mov	r3, r0
 8002352:	461a      	mov	r2, r3
 8002354:	f104 0310 	add.w	r3, r4, #16
 8002358:	443b      	add	r3, r7
 800235a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	3301      	adds	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d9ef      	bls.n	800234a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800236a:	7a3b      	ldrb	r3, [r7, #8]
 800236c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <SD_disk_initialize+0x108>
 8002374:	2306      	movs	r3, #6
 8002376:	e000      	b.n	800237a <SD_disk_initialize+0x10a>
 8002378:	2302      	movs	r3, #2
 800237a:	73bb      	strb	r3, [r7, #14]
 800237c:	e040      	b.n	8002400 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800237e:	2100      	movs	r1, #0
 8002380:	2077      	movs	r0, #119	@ 0x77
 8002382:	f7ff ff23 	bl	80021cc <SD_SendCmd>
 8002386:	4603      	mov	r3, r0
 8002388:	2b01      	cmp	r3, #1
 800238a:	d808      	bhi.n	800239e <SD_disk_initialize+0x12e>
 800238c:	2100      	movs	r1, #0
 800238e:	2069      	movs	r0, #105	@ 0x69
 8002390:	f7ff ff1c 	bl	80021cc <SD_SendCmd>
 8002394:	4603      	mov	r3, r0
 8002396:	2b01      	cmp	r3, #1
 8002398:	d801      	bhi.n	800239e <SD_disk_initialize+0x12e>
 800239a:	2302      	movs	r3, #2
 800239c:	e000      	b.n	80023a0 <SD_disk_initialize+0x130>
 800239e:	2301      	movs	r3, #1
 80023a0:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80023a2:	7bbb      	ldrb	r3, [r7, #14]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d10e      	bne.n	80023c6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80023a8:	2100      	movs	r1, #0
 80023aa:	2077      	movs	r0, #119	@ 0x77
 80023ac:	f7ff ff0e 	bl	80021cc <SD_SendCmd>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d80e      	bhi.n	80023d4 <SD_disk_initialize+0x164>
 80023b6:	2100      	movs	r1, #0
 80023b8:	2069      	movs	r0, #105	@ 0x69
 80023ba:	f7ff ff07 	bl	80021cc <SD_SendCmd>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80023c4:	e00d      	b.n	80023e2 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80023c6:	2100      	movs	r1, #0
 80023c8:	2041      	movs	r0, #65	@ 0x41
 80023ca:	f7ff feff 	bl	80021cc <SD_SendCmd>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80023d4:	4b19      	ldr	r3, [pc, #100]	@ (800243c <SD_disk_initialize+0x1cc>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1e1      	bne.n	80023a2 <SD_disk_initialize+0x132>
 80023de:	e000      	b.n	80023e2 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80023e0:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80023e2:	4b16      	ldr	r3, [pc, #88]	@ (800243c <SD_disk_initialize+0x1cc>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <SD_disk_initialize+0x18c>
 80023ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023f0:	2050      	movs	r0, #80	@ 0x50
 80023f2:	f7ff feeb 	bl	80021cc <SD_SendCmd>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <SD_disk_initialize+0x190>
      {
        type = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8002400:	4a0f      	ldr	r2, [pc, #60]	@ (8002440 <SD_disk_initialize+0x1d0>)
 8002402:	7bbb      	ldrb	r3, [r7, #14]
 8002404:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8002406:	f7ff fd85 	bl	8001f14 <DESELECT>

  SPI_RxByte();
 800240a:	f7ff fda9 	bl	8001f60 <SPI_RxByte>

  if (type)
 800240e:	7bbb      	ldrb	r3, [r7, #14]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8002414:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <SD_disk_initialize+0x1c8>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	b2da      	uxtb	r2, r3
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <SD_disk_initialize+0x1c8>)
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e001      	b.n	800242a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002426:	f7ff fe2f 	bl	8002088 <SD_PowerOff>
  }

  return Stat;
 800242a:	4b03      	ldr	r3, [pc, #12]	@ (8002438 <SD_disk_initialize+0x1c8>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	b2db      	uxtb	r3, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bd90      	pop	{r4, r7, pc}
 8002438:	20000000 	.word	0x20000000
 800243c:	20002a45 	.word	0x20002a45
 8002440:	200002d0 	.word	0x200002d0

08002444 <SD_disk_status>:

DSTATUS SD_disk_status(BYTE drv)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <SD_disk_status+0x14>
    return STA_NOINIT;
 8002454:	2301      	movs	r3, #1
 8002456:	e002      	b.n	800245e <SD_disk_status+0x1a>

  return Stat;
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <SD_disk_status+0x28>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000000 	.word	0x20000000

08002470 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	4603      	mov	r3, r0
 800247e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <SD_disk_read+0x1c>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <SD_disk_read+0x20>
    return RES_PARERR;
 800248c:	2304      	movs	r3, #4
 800248e:	e051      	b.n	8002534 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8002490:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <SD_disk_read+0xcc>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800249e:	2303      	movs	r3, #3
 80024a0:	e048      	b.n	8002534 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80024a2:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <SD_disk_read+0xd0>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <SD_disk_read+0x44>
    sector *= 512;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	025b      	lsls	r3, r3, #9
 80024b2:	607b      	str	r3, [r7, #4]

  SELECT();
 80024b4:	f7ff fd22 	bl	8001efc <SELECT>

  if (count == 1)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d111      	bne.n	80024e2 <SD_disk_read+0x72>
  {

    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	2051      	movs	r0, #81	@ 0x51
 80024c2:	f7ff fe83 	bl	80021cc <SD_SendCmd>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d129      	bne.n	8002520 <SD_disk_read+0xb0>
 80024cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024d0:	68b8      	ldr	r0, [r7, #8]
 80024d2:	f7ff fdf1 	bl	80020b8 <SD_RxDataBlock>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d021      	beq.n	8002520 <SD_disk_read+0xb0>
      count = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	e01e      	b.n	8002520 <SD_disk_read+0xb0>
  }
  else
  {
    if (SD_SendCmd(CMD18, sector) == 0)
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	2052      	movs	r0, #82	@ 0x52
 80024e6:	f7ff fe71 	bl	80021cc <SD_SendCmd>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d117      	bne.n	8002520 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80024f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024f4:	68b8      	ldr	r0, [r7, #8]
 80024f6:	f7ff fddf 	bl	80020b8 <SD_RxDataBlock>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002506:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	3b01      	subs	r3, #1
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ed      	bne.n	80024f0 <SD_disk_read+0x80>
 8002514:	e000      	b.n	8002518 <SD_disk_read+0xa8>
          break;
 8002516:	bf00      	nop

      SD_SendCmd(CMD12, 0);
 8002518:	2100      	movs	r1, #0
 800251a:	204c      	movs	r0, #76	@ 0x4c
 800251c:	f7ff fe56 	bl	80021cc <SD_SendCmd>
    }
  }

  DESELECT();
 8002520:	f7ff fcf8 	bl	8001f14 <DESELECT>
  SPI_RxByte();
 8002524:	f7ff fd1c 	bl	8001f60 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000000 	.word	0x20000000
 8002540:	200002d0 	.word	0x200002d0

08002544 <SD_disk_write>:

#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <SD_disk_write+0x1c>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <SD_disk_write+0x20>
    return RES_PARERR;
 8002560:	2304      	movs	r3, #4
 8002562:	e06b      	b.n	800263c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8002564:	4b37      	ldr	r3, [pc, #220]	@ (8002644 <SD_disk_write+0x100>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002572:	2303      	movs	r3, #3
 8002574:	e062      	b.n	800263c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8002576:	4b33      	ldr	r3, [pc, #204]	@ (8002644 <SD_disk_write+0x100>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002584:	2302      	movs	r3, #2
 8002586:	e059      	b.n	800263c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8002588:	4b2f      	ldr	r3, [pc, #188]	@ (8002648 <SD_disk_write+0x104>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <SD_disk_write+0x56>
    sector *= 512;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	025b      	lsls	r3, r3, #9
 8002598:	607b      	str	r3, [r7, #4]

  SELECT();
 800259a:	f7ff fcaf 	bl	8001efc <SELECT>

  if (count == 1)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d110      	bne.n	80025c6 <SD_disk_write+0x82>
  {
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	2058      	movs	r0, #88	@ 0x58
 80025a8:	f7ff fe10 	bl	80021cc <SD_SendCmd>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d13a      	bne.n	8002628 <SD_disk_write+0xe4>
 80025b2:	21fe      	movs	r1, #254	@ 0xfe
 80025b4:	68b8      	ldr	r0, [r7, #8]
 80025b6:	f7ff fdb5 	bl	8002124 <SD_TxDataBlock>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d033      	beq.n	8002628 <SD_disk_write+0xe4>
      count = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	e030      	b.n	8002628 <SD_disk_write+0xe4>
  }
  else
  {
    if (CardType & 2)
 80025c6:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <SD_disk_write+0x104>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80025d2:	2100      	movs	r1, #0
 80025d4:	2077      	movs	r0, #119	@ 0x77
 80025d6:	f7ff fdf9 	bl	80021cc <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80025da:	6839      	ldr	r1, [r7, #0]
 80025dc:	2057      	movs	r0, #87	@ 0x57
 80025de:	f7ff fdf5 	bl	80021cc <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	2059      	movs	r0, #89	@ 0x59
 80025e6:	f7ff fdf1 	bl	80021cc <SD_SendCmd>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11b      	bne.n	8002628 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80025f0:	21fc      	movs	r1, #252	@ 0xfc
 80025f2:	68b8      	ldr	r0, [r7, #8]
 80025f4:	f7ff fd96 	bl	8002124 <SD_TxDataBlock>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002604:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	3b01      	subs	r3, #1
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ee      	bne.n	80025f0 <SD_disk_write+0xac>
 8002612:	e000      	b.n	8002616 <SD_disk_write+0xd2>
          break;
 8002614:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8002616:	21fd      	movs	r1, #253	@ 0xfd
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fd83 	bl	8002124 <SD_TxDataBlock>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <SD_disk_write+0xe4>
      {
        count = 1;
 8002624:	2301      	movs	r3, #1
 8002626:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8002628:	f7ff fc74 	bl	8001f14 <DESELECT>
  SPI_RxByte();
 800262c:	f7ff fc98 	bl	8001f60 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf14      	ite	ne
 8002636:	2301      	movne	r3, #1
 8002638:	2300      	moveq	r3, #0
 800263a:	b2db      	uxtb	r3, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000000 	.word	0x20000000
 8002648:	200002d0 	.word	0x200002d0

0800264c <SD_disk_ioctl>:
#endif /* _READONLY */

DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b08b      	sub	sp, #44	@ 0x2c
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	603a      	str	r2, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
 8002658:	460b      	mov	r3, r1
 800265a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002666:	2304      	movs	r3, #4
 8002668:	e119      	b.n	800289e <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8002670:	79bb      	ldrb	r3, [r7, #6]
 8002672:	2b05      	cmp	r3, #5
 8002674:	d129      	bne.n	80026ca <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d017      	beq.n	80026ae <SD_disk_ioctl+0x62>
 800267e:	2b02      	cmp	r3, #2
 8002680:	dc1f      	bgt.n	80026c2 <SD_disk_ioctl+0x76>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <SD_disk_ioctl+0x40>
 8002686:	2b01      	cmp	r3, #1
 8002688:	d00b      	beq.n	80026a2 <SD_disk_ioctl+0x56>
 800268a:	e01a      	b.n	80026c2 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800268c:	f7ff fd08 	bl	80020a0 <SD_CheckPower>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002696:	f7ff fcf7 	bl	8002088 <SD_PowerOff>
      res = RES_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80026a0:	e0fb      	b.n	800289a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 80026a2:	f7ff fca5 	bl	8001ff0 <SD_PowerOn>
      res = RES_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80026ac:	e0f5      	b.n	800289a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	1c5c      	adds	r4, r3, #1
 80026b2:	f7ff fcf5 	bl	80020a0 <SD_CheckPower>
 80026b6:	4603      	mov	r3, r0
 80026b8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80026c0:	e0eb      	b.n	800289a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 80026c2:	2304      	movs	r3, #4
 80026c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80026c8:	e0e7      	b.n	800289a <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80026ca:	4b77      	ldr	r3, [pc, #476]	@ (80028a8 <SD_disk_ioctl+0x25c>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0e0      	b.n	800289e <SD_disk_ioctl+0x252>

    SELECT();
 80026dc:	f7ff fc0e 	bl	8001efc <SELECT>

    switch (ctrl)
 80026e0:	79bb      	ldrb	r3, [r7, #6]
 80026e2:	2b0d      	cmp	r3, #13
 80026e4:	f200 80ca 	bhi.w	800287c <SD_disk_ioctl+0x230>
 80026e8:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <SD_disk_ioctl+0xa4>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	080027e7 	.word	0x080027e7
 80026f4:	08002729 	.word	0x08002729
 80026f8:	080027d7 	.word	0x080027d7
 80026fc:	0800287d 	.word	0x0800287d
 8002700:	0800287d 	.word	0x0800287d
 8002704:	0800287d 	.word	0x0800287d
 8002708:	0800287d 	.word	0x0800287d
 800270c:	0800287d 	.word	0x0800287d
 8002710:	0800287d 	.word	0x0800287d
 8002714:	0800287d 	.word	0x0800287d
 8002718:	0800287d 	.word	0x0800287d
 800271c:	080027f9 	.word	0x080027f9
 8002720:	0800281d 	.word	0x0800281d
 8002724:	08002841 	.word	0x08002841
    {
    case GET_SECTOR_COUNT:
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002728:	2100      	movs	r1, #0
 800272a:	2049      	movs	r0, #73	@ 0x49
 800272c:	f7ff fd4e 	bl	80021cc <SD_SendCmd>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 80a6 	bne.w	8002884 <SD_disk_ioctl+0x238>
 8002738:	f107 030c 	add.w	r3, r7, #12
 800273c:	2110      	movs	r1, #16
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fcba 	bl	80020b8 <SD_RxDataBlock>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 809c 	beq.w	8002884 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 800274c:	7b3b      	ldrb	r3, [r7, #12]
 800274e:	099b      	lsrs	r3, r3, #6
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d10d      	bne.n	8002772 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002756:	7d7b      	ldrb	r3, [r7, #21]
 8002758:	461a      	mov	r2, r3
 800275a:	7d3b      	ldrb	r3, [r7, #20]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	b29b      	uxth	r3, r3
 8002760:	4413      	add	r3, r2
 8002762:	b29b      	uxth	r3, r3
 8002764:	3301      	adds	r3, #1
 8002766:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002768:	8bfb      	ldrh	r3, [r7, #30]
 800276a:	029a      	lsls	r2, r3, #10
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e02d      	b.n	80027ce <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002772:	7c7b      	ldrb	r3, [r7, #17]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	b2da      	uxtb	r2, r3
 800277a:	7dbb      	ldrb	r3, [r7, #22]
 800277c:	09db      	lsrs	r3, r3, #7
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4413      	add	r3, r2
 8002782:	b2da      	uxtb	r2, r3
 8002784:	7d7b      	ldrb	r3, [r7, #21]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f003 0306 	and.w	r3, r3, #6
 800278e:	b2db      	uxtb	r3, r3
 8002790:	4413      	add	r3, r2
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3302      	adds	r3, #2
 8002796:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800279a:	7d3b      	ldrb	r3, [r7, #20]
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	7cfb      	ldrb	r3, [r7, #19]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	7cbb      	ldrb	r3, [r7, #18]
 80027ae:	029b      	lsls	r3, r3, #10
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80027c0:	8bfa      	ldrh	r2, [r7, #30]
 80027c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80027c6:	3b09      	subs	r3, #9
 80027c8:	409a      	lsls	r2, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80027d4:	e056      	b.n	8002884 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027dc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80027e4:	e055      	b.n	8002892 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF)
 80027e6:	f7ff fbe7 	bl	8001fb8 <SD_ReadyWait>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2bff      	cmp	r3, #255	@ 0xff
 80027ee:	d14b      	bne.n	8002888 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80027f6:	e047      	b.n	8002888 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80027f8:	2100      	movs	r1, #0
 80027fa:	2049      	movs	r0, #73	@ 0x49
 80027fc:	f7ff fce6 	bl	80021cc <SD_SendCmd>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d142      	bne.n	800288c <SD_disk_ioctl+0x240>
 8002806:	2110      	movs	r1, #16
 8002808:	6a38      	ldr	r0, [r7, #32]
 800280a:	f7ff fc55 	bl	80020b8 <SD_RxDataBlock>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d03b      	beq.n	800288c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800281a:	e037      	b.n	800288c <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800281c:	2100      	movs	r1, #0
 800281e:	204a      	movs	r0, #74	@ 0x4a
 8002820:	f7ff fcd4 	bl	80021cc <SD_SendCmd>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d132      	bne.n	8002890 <SD_disk_ioctl+0x244>
 800282a:	2110      	movs	r1, #16
 800282c:	6a38      	ldr	r0, [r7, #32]
 800282e:	f7ff fc43 	bl	80020b8 <SD_RxDataBlock>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d02b      	beq.n	8002890 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800283e:	e027      	b.n	8002890 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      if (SD_SendCmd(CMD58, 0) == 0)
 8002840:	2100      	movs	r1, #0
 8002842:	207a      	movs	r0, #122	@ 0x7a
 8002844:	f7ff fcc2 	bl	80021cc <SD_SendCmd>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 800284e:	2300      	movs	r3, #0
 8002850:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002854:	e00b      	b.n	800286e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8002856:	6a3c      	ldr	r4, [r7, #32]
 8002858:	1c63      	adds	r3, r4, #1
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	f7ff fb80 	bl	8001f60 <SPI_RxByte>
 8002860:	4603      	mov	r3, r0
 8002862:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002864:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002868:	3301      	adds	r3, #1
 800286a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800286e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002872:	2b03      	cmp	r3, #3
 8002874:	d9ef      	bls.n	8002856 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 800287c:	2304      	movs	r3, #4
 800287e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002882:	e006      	b.n	8002892 <SD_disk_ioctl+0x246>
      break;
 8002884:	bf00      	nop
 8002886:	e004      	b.n	8002892 <SD_disk_ioctl+0x246>
      break;
 8002888:	bf00      	nop
 800288a:	e002      	b.n	8002892 <SD_disk_ioctl+0x246>
      break;
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <SD_disk_ioctl+0x246>
      break;
 8002890:	bf00      	nop
    }

    DESELECT();
 8002892:	f7ff fb3f 	bl	8001f14 <DESELECT>
    SPI_RxByte();
 8002896:	f7ff fb63 	bl	8001f60 <SPI_RxByte>
  }

  return res;
 800289a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800289e:	4618      	mov	r0, r3
 80028a0:	372c      	adds	r7, #44	@ 0x2c
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000000 	.word	0x20000000

080028ac <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08e      	sub	sp, #56	@ 0x38
 80028b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	60da      	str	r2, [r3, #12]
 80028c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c2:	4b89      	ldr	r3, [pc, #548]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	4a88      	ldr	r2, [pc, #544]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028c8:	f043 0304 	orr.w	r3, r3, #4
 80028cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ce:	4b86      	ldr	r3, [pc, #536]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	623b      	str	r3, [r7, #32]
 80028d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028da:	4b83      	ldr	r3, [pc, #524]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	4a82      	ldr	r2, [pc, #520]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e6:	4b80      	ldr	r3, [pc, #512]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b7a      	ldr	r3, [pc, #488]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290a:	4b77      	ldr	r3, [pc, #476]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	4a76      	ldr	r2, [pc, #472]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	6313      	str	r3, [r2, #48]	@ 0x30
 8002916:	4b74      	ldr	r3, [pc, #464]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002922:	4b71      	ldr	r3, [pc, #452]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a70      	ldr	r2, [pc, #448]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002928:	f043 0320 	orr.w	r3, r3, #32
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800293a:	4b6b      	ldr	r3, [pc, #428]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002940:	f043 0310 	orr.w	r3, r3, #16
 8002944:	6313      	str	r3, [r2, #48]	@ 0x30
 8002946:	4b68      	ldr	r3, [pc, #416]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002952:	4b65      	ldr	r3, [pc, #404]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	4a64      	ldr	r2, [pc, #400]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002958:	f043 0308 	orr.w	r3, r3, #8
 800295c:	6313      	str	r3, [r2, #48]	@ 0x30
 800295e:	4b62      	ldr	r3, [pc, #392]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800296a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b5c      	ldr	r3, [pc, #368]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002982:	2200      	movs	r2, #0
 8002984:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002988:	4858      	ldr	r0, [pc, #352]	@ (8002aec <MX_GPIO_Init+0x240>)
 800298a:	f002 ffd9 	bl	8005940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_OLED_Pin|ST7735_RES_Pin_Pin|ST7735_DC_Pin_Pin, GPIO_PIN_RESET);
 800298e:	2200      	movs	r2, #0
 8002990:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002994:	4856      	ldr	r0, [pc, #344]	@ (8002af0 <MX_GPIO_Init+0x244>)
 8002996:	f002 ffd3 	bl	8005940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_BMP_Pin|CS_SDcard_Pin, GPIO_PIN_RESET);
 800299a:	2200      	movs	r2, #0
 800299c:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 80029a0:	4854      	ldr	r0, [pc, #336]	@ (8002af4 <MX_GPIO_Init+0x248>)
 80029a2:	f002 ffcd 	bl	8005940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2140      	movs	r1, #64	@ 0x40
 80029aa:	4853      	ldr	r0, [pc, #332]	@ (8002af8 <MX_GPIO_Init+0x24c>)
 80029ac:	f002 ffc8 	bl	8005940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80029b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80029c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c4:	4619      	mov	r1, r3
 80029c6:	484d      	ldr	r0, [pc, #308]	@ (8002afc <MX_GPIO_Init+0x250>)
 80029c8:	f002 fe0e 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80029cc:	2332      	movs	r3, #50	@ 0x32
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d8:	2303      	movs	r3, #3
 80029da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029dc:	230b      	movs	r3, #11
 80029de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029e4:	4619      	mov	r1, r3
 80029e6:	4845      	ldr	r0, [pc, #276]	@ (8002afc <MX_GPIO_Init+0x250>)
 80029e8:	f002 fdfe 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80029ec:	2386      	movs	r3, #134	@ 0x86
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029fc:	230b      	movs	r3, #11
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a04:	4619      	mov	r1, r3
 8002a06:	483e      	ldr	r0, [pc, #248]	@ (8002b00 <MX_GPIO_Init+0x254>)
 8002a08:	f002 fdee 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002a0c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a12:	2301      	movs	r3, #1
 8002a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a22:	4619      	mov	r1, r3
 8002a24:	4831      	ldr	r0, [pc, #196]	@ (8002aec <MX_GPIO_Init+0x240>)
 8002a26:	f002 fddf 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_OLED_Pin ST7735_RES_Pin_Pin ST7735_DC_Pin_Pin */
  GPIO_InitStruct.Pin = CS_OLED_Pin|ST7735_RES_Pin_Pin|ST7735_DC_Pin_Pin;
 8002a2a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a30:	2301      	movs	r3, #1
 8002a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a40:	4619      	mov	r1, r3
 8002a42:	482b      	ldr	r0, [pc, #172]	@ (8002af0 <MX_GPIO_Init+0x244>)
 8002a44:	f002 fdd0 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_BMP_Pin CS_SDcard_Pin */
  GPIO_InitStruct.Pin = CS_BMP_Pin|CS_SDcard_Pin;
 8002a48:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	2300      	movs	r3, #0
 8002a58:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4824      	ldr	r0, [pc, #144]	@ (8002af4 <MX_GPIO_Init+0x248>)
 8002a62:	f002 fdc1 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002a66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a74:	2303      	movs	r3, #3
 8002a76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a78:	230b      	movs	r3, #11
 8002a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a80:	4619      	mov	r1, r3
 8002a82:	481a      	ldr	r0, [pc, #104]	@ (8002aec <MX_GPIO_Init+0x240>)
 8002a84:	f002 fdb0 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002a88:	2340      	movs	r3, #64	@ 0x40
 8002a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4816      	ldr	r0, [pc, #88]	@ (8002af8 <MX_GPIO_Init+0x24c>)
 8002aa0:	f002 fda2 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002aa4:	2380      	movs	r3, #128	@ 0x80
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4810      	ldr	r0, [pc, #64]	@ (8002af8 <MX_GPIO_Init+0x24c>)
 8002ab8:	f002 fd96 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002abc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ace:	230b      	movs	r3, #11
 8002ad0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4807      	ldr	r0, [pc, #28]	@ (8002af8 <MX_GPIO_Init+0x24c>)
 8002ada:	f002 fd85 	bl	80055e8 <HAL_GPIO_Init>

}
 8002ade:	bf00      	nop
 8002ae0:	3738      	adds	r7, #56	@ 0x38
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40020400 	.word	0x40020400
 8002af0:	40021400 	.word	0x40021400
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40021800 	.word	0x40021800
 8002afc:	40020800 	.word	0x40020800
 8002b00:	40020000 	.word	0x40020000

08002b04 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002b7c <MX_I2C1_Init+0x78>)
 8002b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b10:	4a1b      	ldr	r2, [pc, #108]	@ (8002b80 <MX_I2C1_Init+0x7c>)
 8002b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b14:	4b18      	ldr	r3, [pc, #96]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b1a:	4b17      	ldr	r3, [pc, #92]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b20:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b26:	4b14      	ldr	r3, [pc, #80]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b32:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b38:	4b0f      	ldr	r3, [pc, #60]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b3e:	480e      	ldr	r0, [pc, #56]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b40:	f002 ff18 	bl	8005974 <HAL_I2C_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b4a:	f000 fc8b 	bl	8003464 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4809      	ldr	r0, [pc, #36]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b52:	f004 f821 	bl	8006b98 <HAL_I2CEx_ConfigAnalogFilter>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b5c:	f000 fc82 	bl	8003464 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b60:	2100      	movs	r1, #0
 8002b62:	4805      	ldr	r0, [pc, #20]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b64:	f004 f863 	bl	8006c2e <HAL_I2CEx_ConfigDigitalFilter>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b6e:	f000 fc79 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200002d4 	.word	0x200002d4
 8002b7c:	40005400 	.word	0x40005400
 8002b80:	00808cd2 	.word	0x00808cd2

08002b84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b0aa      	sub	sp, #168	@ 0xa8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b9c:	f107 0310 	add.w	r3, r7, #16
 8002ba0:	2284      	movs	r2, #132	@ 0x84
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f00c fe03 	bl	800f7b0 <memset>
  if(i2cHandle->Instance==I2C1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a22      	ldr	r2, [pc, #136]	@ (8002c38 <HAL_I2C_MspInit+0xb4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d13c      	bne.n	8002c2e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002bb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bb8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 fe94 	bl	80078f0 <HAL_RCCEx_PeriphCLKConfig>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002bce:	f000 fc49 	bl	8003464 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <HAL_I2C_MspInit+0xb8>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	4a19      	ldr	r2, [pc, #100]	@ (8002c3c <HAL_I2C_MspInit+0xb8>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bde:	4b17      	ldr	r3, [pc, #92]	@ (8002c3c <HAL_I2C_MspInit+0xb8>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bf2:	2312      	movs	r3, #18
 8002bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c04:	2304      	movs	r3, #4
 8002c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002c0e:	4619      	mov	r1, r3
 8002c10:	480b      	ldr	r0, [pc, #44]	@ (8002c40 <HAL_I2C_MspInit+0xbc>)
 8002c12:	f002 fce9 	bl	80055e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <HAL_I2C_MspInit+0xb8>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	4a08      	ldr	r2, [pc, #32]	@ (8002c3c <HAL_I2C_MspInit+0xb8>)
 8002c1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c22:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <HAL_I2C_MspInit+0xb8>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002c2e:	bf00      	nop
 8002c30:	37a8      	adds	r7, #168	@ 0xa8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40005400 	.word	0x40005400
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40020400 	.word	0x40020400

08002c44 <SDcardInit>:
void OLEDdisplay(struct sensors *s);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDcardInit(char* folder_name) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af04      	add	r7, sp, #16
 8002c4a:	6078      	str	r0, [r7, #4]
    FRESULT res;
    uint8_t retry_count = 5;
 8002c4c:	2305      	movs	r3, #5
 8002c4e:	73fb      	strb	r3, [r7, #15]

    while (retry_count--) {
 8002c50:	e020      	b.n	8002c94 <SDcardInit+0x50>
        res = f_mount(&fs, "", 1);
 8002c52:	2201      	movs	r2, #1
 8002c54:	4939      	ldr	r1, [pc, #228]	@ (8002d3c <SDcardInit+0xf8>)
 8002c56:	483a      	ldr	r0, [pc, #232]	@ (8002d40 <SDcardInit+0xfc>)
 8002c58:	f00a fbfe 	bl	800d458 <f_mount>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	73bb      	strb	r3, [r7, #14]
        if (res == FR_OK) {
 8002c60:	7bbb      	ldrb	r3, [r7, #14]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01c      	beq.n	8002ca0 <SDcardInit+0x5c>
            break;
        }
        printf("Error mounting filesystem! (%d). Retrying...\r\n", res);
 8002c66:	7bbb      	ldrb	r3, [r7, #14]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4836      	ldr	r0, [pc, #216]	@ (8002d44 <SDcardInit+0x100>)
 8002c6c:	f00c fc04 	bl	800f478 <iprintf>
     	  ST7735_WriteString(10, 140, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002c70:	4b35      	ldr	r3, [pc, #212]	@ (8002d48 <SDcardInit+0x104>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	9202      	str	r2, [sp, #8]
 8002c76:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002c7a:	9201      	str	r2, [sp, #4]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	9200      	str	r2, [sp, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a32      	ldr	r2, [pc, #200]	@ (8002d4c <SDcardInit+0x108>)
 8002c84:	218c      	movs	r1, #140	@ 0x8c
 8002c86:	200a      	movs	r0, #10
 8002c88:	f001 fa5f 	bl	800414a <ST7735_WriteString>
        HAL_Delay(RETRY_DELAY_MS);
 8002c8c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c90:	f001 ff7a 	bl	8004b88 <HAL_Delay>
    while (retry_count--) {
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	1e5a      	subs	r2, r3, #1
 8002c98:	73fa      	strb	r2, [r7, #15]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1d9      	bne.n	8002c52 <SDcardInit+0xe>
 8002c9e:	e000      	b.n	8002ca2 <SDcardInit+0x5e>
            break;
 8002ca0:	bf00      	nop
    }

    retry_count = 5;
 8002ca2:	2305      	movs	r3, #5
 8002ca4:	73fb      	strb	r3, [r7, #15]
    while (retry_count--) {
 8002ca6:	e020      	b.n	8002cea <SDcardInit+0xa6>
        res = f_open(&fil, "test.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8002ca8:	2212      	movs	r2, #18
 8002caa:	4929      	ldr	r1, [pc, #164]	@ (8002d50 <SDcardInit+0x10c>)
 8002cac:	4829      	ldr	r0, [pc, #164]	@ (8002d54 <SDcardInit+0x110>)
 8002cae:	f00a fc19 	bl	800d4e4 <f_open>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	73bb      	strb	r3, [r7, #14]
        if (res == FR_OK) {
 8002cb6:	7bbb      	ldrb	r3, [r7, #14]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01c      	beq.n	8002cf6 <SDcardInit+0xb2>
            break;
        }
        printf("Error opening SDcard file! (%d). Retrying...\r\n", res);
 8002cbc:	7bbb      	ldrb	r3, [r7, #14]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4825      	ldr	r0, [pc, #148]	@ (8002d58 <SDcardInit+0x114>)
 8002cc2:	f00c fbd9 	bl	800f478 <iprintf>
     	  ST7735_WriteString(10, 140, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002cc6:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <SDcardInit+0x104>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	9202      	str	r2, [sp, #8]
 8002ccc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002cd0:	9201      	str	r2, [sp, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	9200      	str	r2, [sp, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d4c <SDcardInit+0x108>)
 8002cda:	218c      	movs	r1, #140	@ 0x8c
 8002cdc:	200a      	movs	r0, #10
 8002cde:	f001 fa34 	bl	800414a <ST7735_WriteString>
        HAL_Delay(RETRY_DELAY_MS);
 8002ce2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ce6:	f001 ff4f 	bl	8004b88 <HAL_Delay>
    while (retry_count--) {
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	1e5a      	subs	r2, r3, #1
 8002cee:	73fa      	strb	r2, [r7, #15]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1d9      	bne.n	8002ca8 <SDcardInit+0x64>
 8002cf4:	e000      	b.n	8002cf8 <SDcardInit+0xb4>
            break;
 8002cf6:	bf00      	nop
    }

    res = f_lseek(&fil, f_size(&fil));
 8002cf8:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <SDcardInit+0x110>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4815      	ldr	r0, [pc, #84]	@ (8002d54 <SDcardInit+0x110>)
 8002d00:	f00a fff4 	bl	800dcec <f_lseek>
 8002d04:	4603      	mov	r3, r0
 8002d06:	73bb      	strb	r3, [r7, #14]
    if (res != FR_OK) {
 8002d08:	7bbb      	ldrb	r3, [r7, #14]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <SDcardInit+0xdc>
        printf("Error seeking to end of file! (%d)\r\n", res);
 8002d0e:	7bbb      	ldrb	r3, [r7, #14]
 8002d10:	4619      	mov	r1, r3
 8002d12:	4812      	ldr	r0, [pc, #72]	@ (8002d5c <SDcardInit+0x118>)
 8002d14:	f00c fbb0 	bl	800f478 <iprintf>
        f_close(&fil);
 8002d18:	480e      	ldr	r0, [pc, #56]	@ (8002d54 <SDcardInit+0x110>)
 8002d1a:	f00a ffbd 	bl	800dc98 <f_close>
        return;
 8002d1e:	e00a      	b.n	8002d36 <SDcardInit+0xf2>
    }

    f_puts("\n--- Nowy pomiar ---\n", &fil);
 8002d20:	490c      	ldr	r1, [pc, #48]	@ (8002d54 <SDcardInit+0x110>)
 8002d22:	480f      	ldr	r0, [pc, #60]	@ (8002d60 <SDcardInit+0x11c>)
 8002d24:	f00b fa7d 	bl	800e222 <f_puts>
    f_puts("TVOC_ppb,CO2_eq_ppm,Ethanol_signal,H2_signal,Temperatura,Cisnienie,Napiecie_mV,Prad_mA,Moc_mW\n", &fil);
 8002d28:	490a      	ldr	r1, [pc, #40]	@ (8002d54 <SDcardInit+0x110>)
 8002d2a:	480e      	ldr	r0, [pc, #56]	@ (8002d64 <SDcardInit+0x120>)
 8002d2c:	f00b fa79 	bl	800e222 <f_puts>

    f_sync(&fil);
 8002d30:	4808      	ldr	r0, [pc, #32]	@ (8002d54 <SDcardInit+0x110>)
 8002d32:	f00a ff33 	bl	800db9c <f_sync>

}
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	08012cf0 	.word	0x08012cf0
 8002d40:	2000034c 	.word	0x2000034c
 8002d44:	08012cf4 	.word	0x08012cf4
 8002d48:	20000004 	.word	0x20000004
 8002d4c:	08012d24 	.word	0x08012d24
 8002d50:	08012d34 	.word	0x08012d34
 8002d54:	20001384 	.word	0x20001384
 8002d58:	08012d40 	.word	0x08012d40
 8002d5c:	08012d70 	.word	0x08012d70
 8002d60:	08012d98 	.word	0x08012d98
 8002d64:	08012db0 	.word	0x08012db0

08002d68 <SDcardWriteData>:

void SDcardWriteData(struct sensors *s) {
 8002d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d6c:	b0c1      	sub	sp, #260	@ 0x104
 8002d6e:	af0c      	add	r7, sp, #48	@ 0x30
 8002d70:	6078      	str	r0, [r7, #4]
	// ERROR SDcard -> OLED
	if (f_lseek(&fil, f_size(&fil)) != FR_OK) {
 8002d72:	4b41      	ldr	r3, [pc, #260]	@ (8002e78 <SDcardWriteData+0x110>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4619      	mov	r1, r3
 8002d78:	483f      	ldr	r0, [pc, #252]	@ (8002e78 <SDcardWriteData+0x110>)
 8002d7a:	f00a ffb7 	bl	800dcec <f_lseek>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d011      	beq.n	8002da8 <SDcardWriteData+0x40>
  	 printf("Error seeking in file!\r\n");
 8002d84:	483d      	ldr	r0, [pc, #244]	@ (8002e7c <SDcardWriteData+0x114>)
 8002d86:	f00c fbdf 	bl	800f548 <puts>
  	 ST7735_WriteString(10, 140, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e80 <SDcardWriteData+0x118>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	9202      	str	r2, [sp, #8]
 8002d90:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002d94:	9201      	str	r2, [sp, #4]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	9200      	str	r2, [sp, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a39      	ldr	r2, [pc, #228]	@ (8002e84 <SDcardWriteData+0x11c>)
 8002d9e:	218c      	movs	r1, #140	@ 0x8c
 8002da0:	200a      	movs	r0, #10
 8002da2:	f001 f9d2 	bl	800414a <ST7735_WriteString>
 8002da6:	e063      	b.n	8002e70 <SDcardWriteData+0x108>
  	 return;
	}

	char buffer[200];
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	891b      	ldrh	r3, [r3, #8]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002dac:	469a      	mov	sl, r3
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	895b      	ldrh	r3, [r3, #10]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002db2:	461e      	mov	r6, r3
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	899b      	ldrh	r3, [r3, #12]
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002e88 <SDcardWriteData+0x120>
 8002dc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002dc8:	ee16 0a90 	vmov	r0, s13
 8002dcc:	f7fd fbdc 	bl	8000588 <__aeabi_f2d>
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	460d      	mov	r5, r1
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	89db      	ldrh	r3, [r3, #14]
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002de0:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002e88 <SDcardWriteData+0x120>
 8002de4:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002de8:	ee16 0a90 	vmov	r0, s13
 8002dec:	f7fd fbcc 	bl	8000588 <__aeabi_f2d>
 8002df0:	4680      	mov	r8, r0
 8002df2:	4689      	mov	r9, r1
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fd fbc5 	bl	8000588 <__aeabi_f2d>
 8002dfe:	4683      	mov	fp, r0
 8002e00:	468c      	mov	ip, r1
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	6849      	ldr	r1, [r1, #4]
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	8a00      	ldrh	r0, [r0, #16]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002e0a:	6038      	str	r0, [r7, #0]
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002e12:	4602      	mov	r2, r0
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	8a80      	ldrh	r0, [r0, #20]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f107 0008 	add.w	r0, r7, #8
 8002e1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002e20:	920a      	str	r2, [sp, #40]	@ 0x28
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e26:	9108      	str	r1, [sp, #32]
 8002e28:	e9cd bc06 	strd	fp, ip, [sp, #24]
 8002e2c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002e30:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002e34:	9600      	str	r6, [sp, #0]
 8002e36:	4653      	mov	r3, sl
 8002e38:	4a14      	ldr	r2, [pc, #80]	@ (8002e8c <SDcardWriteData+0x124>)
 8002e3a:	21c8      	movs	r1, #200	@ 0xc8
 8002e3c:	f00c fb8c 	bl	800f558 <sniprintf>

	if (f_puts(buffer, &fil) < 0) {
 8002e40:	f107 0308 	add.w	r3, r7, #8
 8002e44:	490c      	ldr	r1, [pc, #48]	@ (8002e78 <SDcardWriteData+0x110>)
 8002e46:	4618      	mov	r0, r3
 8002e48:	f00b f9eb 	bl	800e222 <f_puts>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da02      	bge.n	8002e58 <SDcardWriteData+0xf0>
  	 printf("Error writing to file!\r\n");
 8002e52:	480f      	ldr	r0, [pc, #60]	@ (8002e90 <SDcardWriteData+0x128>)
 8002e54:	f00c fb78 	bl	800f548 <puts>
	}

	if (f_sync(&fil) != FR_OK) {
 8002e58:	4807      	ldr	r0, [pc, #28]	@ (8002e78 <SDcardWriteData+0x110>)
 8002e5a:	f00a fe9f 	bl	800db9c <f_sync>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <SDcardWriteData+0x102>
		printf("Error syncing file!\r\n");
 8002e64:	480b      	ldr	r0, [pc, #44]	@ (8002e94 <SDcardWriteData+0x12c>)
 8002e66:	f00c fb6f 	bl	800f548 <puts>
	}
	f_sync(&fil);
 8002e6a:	4803      	ldr	r0, [pc, #12]	@ (8002e78 <SDcardWriteData+0x110>)
 8002e6c:	f00a fe96 	bl	800db9c <f_sync>
}
 8002e70:	37d4      	adds	r7, #212	@ 0xd4
 8002e72:	46bd      	mov	sp, r7
 8002e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e78:	20001384 	.word	0x20001384
 8002e7c:	08012e10 	.word	0x08012e10
 8002e80:	20000004 	.word	0x20000004
 8002e84:	08012d24 	.word	0x08012d24
 8002e88:	44000000 	.word	0x44000000
 8002e8c:	08012e28 	.word	0x08012e28
 8002e90:	08012e4c 	.word	0x08012e4c
 8002e94:	08012e64 	.word	0x08012e64

08002e98 <OLEDdisplay>:
    if (f_close(&fil) != FR_OK) {
        printf("Error closing file!\r\n");
    }
}

void OLEDdisplay(struct sensors *s) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b0a4      	sub	sp, #144	@ 0x90
 8002e9c:	af04      	add	r7, sp, #16
 8002e9e:	6078      	str	r0, [r7, #4]
    char buffer[100];
    int tempInt = (int)(s->BMP280temperature * 100);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80030e0 <OLEDdisplay+0x248>
 8002eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb2:	ee17 3a90 	vmov	r3, s15
 8002eb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int tempFrac = tempInt % 100;
 8002eb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eba:	4a8a      	ldr	r2, [pc, #552]	@ (80030e4 <OLEDdisplay+0x24c>)
 8002ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ec0:	1151      	asrs	r1, r2, #5
 8002ec2:	17da      	asrs	r2, r3, #31
 8002ec4:	1a8a      	subs	r2, r1, r2
 8002ec6:	2164      	movs	r1, #100	@ 0x64
 8002ec8:	fb01 f202 	mul.w	r2, r1, r2
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Temperatura
    snprintf(buffer, sizeof(buffer), "Temp: %d.%02d C", tempInt / 100, tempFrac);
 8002ed0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ed2:	4a84      	ldr	r2, [pc, #528]	@ (80030e4 <OLEDdisplay+0x24c>)
 8002ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ed8:	1152      	asrs	r2, r2, #5
 8002eda:	17db      	asrs	r3, r3, #31
 8002edc:	1ad2      	subs	r2, r2, r3
 8002ede:	f107 000c 	add.w	r0, r7, #12
 8002ee2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	4a7f      	ldr	r2, [pc, #508]	@ (80030e8 <OLEDdisplay+0x250>)
 8002eea:	2164      	movs	r1, #100	@ 0x64
 8002eec:	f00c fb34 	bl	800f558 <sniprintf>
    ST7735_WriteString(5,  5, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002ef0:	4b7e      	ldr	r3, [pc, #504]	@ (80030ec <OLEDdisplay+0x254>)
 8002ef2:	f107 010c 	add.w	r1, r7, #12
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	9202      	str	r2, [sp, #8]
 8002efa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002efe:	9201      	str	r2, [sp, #4]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	9200      	str	r2, [sp, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	460a      	mov	r2, r1
 8002f08:	2105      	movs	r1, #5
 8002f0a:	2005      	movs	r0, #5
 8002f0c:	f001 f91d 	bl	800414a <ST7735_WriteString>

    // Ciśnienie
    snprintf(buffer, sizeof(buffer), "Prs:  %ld Pa", s->BMP280pressure);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f107 000c 	add.w	r0, r7, #12
 8002f18:	4a75      	ldr	r2, [pc, #468]	@ (80030f0 <OLEDdisplay+0x258>)
 8002f1a:	2164      	movs	r1, #100	@ 0x64
 8002f1c:	f00c fb1c 	bl	800f558 <sniprintf>
    ST7735_WriteString(5,  20, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f20:	4b72      	ldr	r3, [pc, #456]	@ (80030ec <OLEDdisplay+0x254>)
 8002f22:	f107 010c 	add.w	r1, r7, #12
 8002f26:	2200      	movs	r2, #0
 8002f28:	9202      	str	r2, [sp, #8]
 8002f2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f2e:	9201      	str	r2, [sp, #4]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	9200      	str	r2, [sp, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	460a      	mov	r2, r1
 8002f38:	2114      	movs	r1, #20
 8002f3a:	2005      	movs	r0, #5
 8002f3c:	f001 f905 	bl	800414a <ST7735_WriteString>

    // TVOC
    snprintf(buffer, sizeof(buffer), "TVOC: %4u ppb", s->tvoc_ppb);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	891b      	ldrh	r3, [r3, #8]
 8002f44:	f107 000c 	add.w	r0, r7, #12
 8002f48:	4a6a      	ldr	r2, [pc, #424]	@ (80030f4 <OLEDdisplay+0x25c>)
 8002f4a:	2164      	movs	r1, #100	@ 0x64
 8002f4c:	f00c fb04 	bl	800f558 <sniprintf>
    ST7735_WriteString(5,  35, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f50:	4b66      	ldr	r3, [pc, #408]	@ (80030ec <OLEDdisplay+0x254>)
 8002f52:	f107 010c 	add.w	r1, r7, #12
 8002f56:	2200      	movs	r2, #0
 8002f58:	9202      	str	r2, [sp, #8]
 8002f5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f5e:	9201      	str	r2, [sp, #4]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	9200      	str	r2, [sp, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	460a      	mov	r2, r1
 8002f68:	2123      	movs	r1, #35	@ 0x23
 8002f6a:	2005      	movs	r0, #5
 8002f6c:	f001 f8ed 	bl	800414a <ST7735_WriteString>

    // CO2eq
    snprintf(buffer, sizeof(buffer), "CO2:  %4u ppm", s->co2_eq_ppm);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	895b      	ldrh	r3, [r3, #10]
 8002f74:	f107 000c 	add.w	r0, r7, #12
 8002f78:	4a5f      	ldr	r2, [pc, #380]	@ (80030f8 <OLEDdisplay+0x260>)
 8002f7a:	2164      	movs	r1, #100	@ 0x64
 8002f7c:	f00c faec 	bl	800f558 <sniprintf>
    ST7735_WriteString(5,  50, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f80:	4b5a      	ldr	r3, [pc, #360]	@ (80030ec <OLEDdisplay+0x254>)
 8002f82:	f107 010c 	add.w	r1, r7, #12
 8002f86:	2200      	movs	r2, #0
 8002f88:	9202      	str	r2, [sp, #8]
 8002f8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f8e:	9201      	str	r2, [sp, #4]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	9200      	str	r2, [sp, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	460a      	mov	r2, r1
 8002f98:	2132      	movs	r1, #50	@ 0x32
 8002f9a:	2005      	movs	r0, #5
 8002f9c:	f001 f8d5 	bl	800414a <ST7735_WriteString>

    // Etanol/512.0
    float ethanol = s->scaled_ethanol_signal / 512.0f;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	899b      	ldrh	r3, [r3, #12]
 8002fa4:	ee07 3a90 	vmov	s15, r3
 8002fa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fac:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80030fc <OLEDdisplay+0x264>
 8002fb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fb4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    snprintf(buffer, sizeof(buffer), "EtOH: %.2f", ethanol);
 8002fb8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002fba:	f7fd fae5 	bl	8000588 <__aeabi_f2d>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	f107 000c 	add.w	r0, r7, #12
 8002fc6:	e9cd 2300 	strd	r2, r3, [sp]
 8002fca:	4a4d      	ldr	r2, [pc, #308]	@ (8003100 <OLEDdisplay+0x268>)
 8002fcc:	2164      	movs	r1, #100	@ 0x64
 8002fce:	f00c fac3 	bl	800f558 <sniprintf>
    ST7735_WriteString(5,  65, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002fd2:	4b46      	ldr	r3, [pc, #280]	@ (80030ec <OLEDdisplay+0x254>)
 8002fd4:	f107 010c 	add.w	r1, r7, #12
 8002fd8:	2200      	movs	r2, #0
 8002fda:	9202      	str	r2, [sp, #8]
 8002fdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fe0:	9201      	str	r2, [sp, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	9200      	str	r2, [sp, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	460a      	mov	r2, r1
 8002fea:	2141      	movs	r1, #65	@ 0x41
 8002fec:	2005      	movs	r0, #5
 8002fee:	f001 f8ac 	bl	800414a <ST7735_WriteString>

    // H2/512.0
    float h2 = s->scaled_h2_signal / 512.0f;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	89db      	ldrh	r3, [r3, #14]
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ffe:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80030fc <OLEDdisplay+0x264>
 8003002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003006:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    snprintf(buffer, sizeof(buffer), "H2:   %.2f", h2);
 800300a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800300c:	f7fd fabc 	bl	8000588 <__aeabi_f2d>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	f107 000c 	add.w	r0, r7, #12
 8003018:	e9cd 2300 	strd	r2, r3, [sp]
 800301c:	4a39      	ldr	r2, [pc, #228]	@ (8003104 <OLEDdisplay+0x26c>)
 800301e:	2164      	movs	r1, #100	@ 0x64
 8003020:	f00c fa9a 	bl	800f558 <sniprintf>
    ST7735_WriteString(5,  80, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003024:	4b31      	ldr	r3, [pc, #196]	@ (80030ec <OLEDdisplay+0x254>)
 8003026:	f107 010c 	add.w	r1, r7, #12
 800302a:	2200      	movs	r2, #0
 800302c:	9202      	str	r2, [sp, #8]
 800302e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003032:	9201      	str	r2, [sp, #4]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	9200      	str	r2, [sp, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	460a      	mov	r2, r1
 800303c:	2150      	movs	r1, #80	@ 0x50
 800303e:	2005      	movs	r0, #5
 8003040:	f001 f883 	bl	800414a <ST7735_WriteString>

    // INA219_Current
    snprintf(buffer, sizeof(buffer), "Current:  %4d mA", s->INA219_Current);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800304a:	f107 000c 	add.w	r0, r7, #12
 800304e:	4a2e      	ldr	r2, [pc, #184]	@ (8003108 <OLEDdisplay+0x270>)
 8003050:	2164      	movs	r1, #100	@ 0x64
 8003052:	f00c fa81 	bl	800f558 <sniprintf>
    ST7735_WriteString(5,  95, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003056:	4b25      	ldr	r3, [pc, #148]	@ (80030ec <OLEDdisplay+0x254>)
 8003058:	f107 010c 	add.w	r1, r7, #12
 800305c:	2200      	movs	r2, #0
 800305e:	9202      	str	r2, [sp, #8]
 8003060:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003064:	9201      	str	r2, [sp, #4]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	9200      	str	r2, [sp, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	460a      	mov	r2, r1
 800306e:	215f      	movs	r1, #95	@ 0x5f
 8003070:	2005      	movs	r0, #5
 8003072:	f001 f86a 	bl	800414a <ST7735_WriteString>

    // INA219_Voltage
    snprintf(buffer, sizeof(buffer), "Voltage:  %4u mV", s->INA219_Voltage);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8a1b      	ldrh	r3, [r3, #16]
 800307a:	f107 000c 	add.w	r0, r7, #12
 800307e:	4a23      	ldr	r2, [pc, #140]	@ (800310c <OLEDdisplay+0x274>)
 8003080:	2164      	movs	r1, #100	@ 0x64
 8003082:	f00c fa69 	bl	800f558 <sniprintf>
    ST7735_WriteString(5,  110, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003086:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <OLEDdisplay+0x254>)
 8003088:	f107 010c 	add.w	r1, r7, #12
 800308c:	2200      	movs	r2, #0
 800308e:	9202      	str	r2, [sp, #8]
 8003090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003094:	9201      	str	r2, [sp, #4]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	9200      	str	r2, [sp, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	460a      	mov	r2, r1
 800309e:	216e      	movs	r1, #110	@ 0x6e
 80030a0:	2005      	movs	r0, #5
 80030a2:	f001 f852 	bl	800414a <ST7735_WriteString>

    // INA219_Power
    snprintf(buffer, sizeof(buffer), "Power:  %4u mW", s->INA219_Power);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8a9b      	ldrh	r3, [r3, #20]
 80030aa:	f107 000c 	add.w	r0, r7, #12
 80030ae:	4a18      	ldr	r2, [pc, #96]	@ (8003110 <OLEDdisplay+0x278>)
 80030b0:	2164      	movs	r1, #100	@ 0x64
 80030b2:	f00c fa51 	bl	800f558 <sniprintf>
    ST7735_WriteString(5,  125, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <OLEDdisplay+0x254>)
 80030b8:	f107 010c 	add.w	r1, r7, #12
 80030bc:	2200      	movs	r2, #0
 80030be:	9202      	str	r2, [sp, #8]
 80030c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030c4:	9201      	str	r2, [sp, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	9200      	str	r2, [sp, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	460a      	mov	r2, r1
 80030ce:	217d      	movs	r1, #125	@ 0x7d
 80030d0:	2005      	movs	r0, #5
 80030d2:	f001 f83a 	bl	800414a <ST7735_WriteString>

}
 80030d6:	bf00      	nop
 80030d8:	3780      	adds	r7, #128	@ 0x80
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	42c80000 	.word	0x42c80000
 80030e4:	51eb851f 	.word	0x51eb851f
 80030e8:	08012e94 	.word	0x08012e94
 80030ec:	20000004 	.word	0x20000004
 80030f0:	08012ea4 	.word	0x08012ea4
 80030f4:	08012eb4 	.word	0x08012eb4
 80030f8:	08012ec4 	.word	0x08012ec4
 80030fc:	44000000 	.word	0x44000000
 8003100:	08012ed4 	.word	0x08012ed4
 8003104:	08012ee0 	.word	0x08012ee0
 8003108:	08012eec 	.word	0x08012eec
 800310c:	08012f00 	.word	0x08012f00
 8003110:	08012f14 	.word	0x08012f14

08003114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003118:	b08d      	sub	sp, #52	@ 0x34
 800311a:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800311c:	f001 fcd7 	bl	8004ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003120:	f000 f916 	bl	8003350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003124:	f7ff fbc2 	bl	80028ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8003128:	f7ff fcec 	bl	8002b04 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800312c:	f001 fb6e 	bl	800480c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003130:	f001 fbfc 	bl	800492c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8003134:	f000 fdf6 	bl	8003d24 <MX_SPI1_Init>
  MX_FATFS_Init();
 8003138:	f007 ff48 	bl	800afcc <MX_FATFS_Init>
  MX_TIM7_Init();
 800313c:	f001 fabc 	bl	80046b8 <MX_TIM7_Init>
  MX_ADC1_Init();
 8003140:	f7fe fe4a 	bl	8001dd8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8003144:	f001 fa40 	bl	80045c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8003148:	486a      	ldr	r0, [pc, #424]	@ (80032f4 <main+0x1e0>)
 800314a:	f005 fdf1 	bl	8008d30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800314e:	2100      	movs	r1, #0
 8003150:	4869      	ldr	r0, [pc, #420]	@ (80032f8 <main+0x1e4>)
 8003152:	f005 fec7 	bl	8008ee4 <HAL_TIM_PWM_Start>
  // OLED
  ST7735_Init();
 8003156:	f000 ff67 	bl	8004028 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 800315a:	2000      	movs	r0, #0
 800315c:	f001 f8b4 	bl	80042c8 <ST7735_FillScreen>

  // BMP
  BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8003160:	2301      	movs	r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	2101      	movs	r1, #1
 8003166:	4865      	ldr	r0, [pc, #404]	@ (80032fc <main+0x1e8>)
 8003168:	f7fe f888 	bl	800127c <BMP280_Init>
  // SGP
	if (sgp_probe() != STATUS_OK) {
 800316c:	f000 fd12 	bl	8003b94 <sgp_probe>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <main+0x68>
		printf("SGP sensor error\r\n");
 8003176:	4862      	ldr	r0, [pc, #392]	@ (8003300 <main+0x1ec>)
 8003178:	f00c f9e6 	bl	800f548 <puts>
	}
	// INA
	INA219_Init(&myina219, &hi2c1, INA219_ADDRESS);
 800317c:	2240      	movs	r2, #64	@ 0x40
 800317e:	4961      	ldr	r1, [pc, #388]	@ (8003304 <main+0x1f0>)
 8003180:	4861      	ldr	r0, [pc, #388]	@ (8003308 <main+0x1f4>)
 8003182:	f7fe fde3 	bl	8001d4c <INA219_Init>
	//INA219_setCalibration_32V_2A(&myina219);

	// SD
	SDcardInit("test.txt");
 8003186:	4861      	ldr	r0, [pc, #388]	@ (800330c <main+0x1f8>)
 8003188:	f7ff fd5c 	bl	8002c44 <SDcardInit>
	isProgramStarted = 1;
 800318c:	4b60      	ldr	r3, [pc, #384]	@ (8003310 <main+0x1fc>)
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	// stele probkowanie
  	if (_interruptFlag == 1){
 8003192:	4b60      	ldr	r3, [pc, #384]	@ (8003314 <main+0x200>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d1fb      	bne.n	8003192 <main+0x7e>

    	// ADC
    	HAL_ADC_Start(&hadc1);
 800319a:	485f      	ldr	r0, [pc, #380]	@ (8003318 <main+0x204>)
 800319c:	f001 fd5c 	bl	8004c58 <HAL_ADC_Start>
    	HAL_ADC_PollForConversion(&hadc1, 1);
 80031a0:	2101      	movs	r1, #1
 80031a2:	485d      	ldr	r0, [pc, #372]	@ (8003318 <main+0x204>)
 80031a4:	f001 fe26 	bl	8004df4 <HAL_ADC_PollForConversion>
    	adcPosition = HAL_ADC_GetValue(&hadc1) ;
 80031a8:	485b      	ldr	r0, [pc, #364]	@ (8003318 <main+0x204>)
 80031aa:	f001 feae 	bl	8004f0a <HAL_ADC_GetValue>
 80031ae:	4603      	mov	r3, r0
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	4b5a      	ldr	r3, [pc, #360]	@ (800331c <main+0x208>)
 80031b4:	801a      	strh	r2, [r3, #0]
    	printf("ADC: %.2f%%\r\n", (adcPosition / 4095.0f)*100);
 80031b6:	4b59      	ldr	r3, [pc, #356]	@ (800331c <main+0x208>)
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031c2:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8003320 <main+0x20c>
 80031c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031ca:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8003324 <main+0x210>
 80031ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031d2:	ee17 0a90 	vmov	r0, s15
 80031d6:	f7fd f9d7 	bl	8000588 <__aeabi_f2d>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4852      	ldr	r0, [pc, #328]	@ (8003328 <main+0x214>)
 80031e0:	f00c f94a 	bl	800f478 <iprintf>

    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (adcPosition / 4095.0f)*1000);
 80031e4:	4b4d      	ldr	r3, [pc, #308]	@ (800331c <main+0x208>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031f0:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8003320 <main+0x20c>
 80031f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031f8:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 800332c <main+0x218>
 80031fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003200:	4b3d      	ldr	r3, [pc, #244]	@ (80032f8 <main+0x1e4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003208:	ee17 2a90 	vmov	r2, s15
 800320c:	635a      	str	r2, [r3, #52]	@ 0x34


  		// BMP
			BMP280_ReadTemperatureAndPressure(&s.BMP280temperature, &s.BMP280pressure);
 800320e:	4948      	ldr	r1, [pc, #288]	@ (8003330 <main+0x21c>)
 8003210:	4848      	ldr	r0, [pc, #288]	@ (8003334 <main+0x220>)
 8003212:	f7fe f98d 	bl	8001530 <BMP280_ReadTemperatureAndPressure>

			// SGP
			sgp_measure_iaq_blocking_read(&s.tvoc_ppb, &s.co2_eq_ppm);
 8003216:	4948      	ldr	r1, [pc, #288]	@ (8003338 <main+0x224>)
 8003218:	4848      	ldr	r0, [pc, #288]	@ (800333c <main+0x228>)
 800321a:	f000 fc73 	bl	8003b04 <sgp_measure_iaq_blocking_read>
			sgp_measure_signals_blocking_read(&s.scaled_ethanol_signal, &s.scaled_h2_signal);
 800321e:	4948      	ldr	r1, [pc, #288]	@ (8003340 <main+0x22c>)
 8003220:	4848      	ldr	r0, [pc, #288]	@ (8003344 <main+0x230>)
 8003222:	f000 fc8d 	bl	8003b40 <sgp_measure_signals_blocking_read>
			//sgp_set_absolute_humidity()

			// INA219
			s.INA219_Current = INA219_ReadCurrent_raw(&myina219);
 8003226:	4838      	ldr	r0, [pc, #224]	@ (8003308 <main+0x1f4>)
 8003228:	f7fe fcc6 	bl	8001bb8 <INA219_ReadCurrent_raw>
 800322c:	4603      	mov	r3, r0
 800322e:	461a      	mov	r2, r3
 8003230:	4b40      	ldr	r3, [pc, #256]	@ (8003334 <main+0x220>)
 8003232:	825a      	strh	r2, [r3, #18]
			s.INA219_Voltage = INA219_ReadBusVoltage(&myina219);
 8003234:	4834      	ldr	r0, [pc, #208]	@ (8003308 <main+0x1f4>)
 8003236:	f7fe fcac 	bl	8001b92 <INA219_ReadBusVoltage>
 800323a:	4603      	mov	r3, r0
 800323c:	461a      	mov	r2, r3
 800323e:	4b3d      	ldr	r3, [pc, #244]	@ (8003334 <main+0x220>)
 8003240:	821a      	strh	r2, [r3, #16]
			s.INA219_Power = INA219_ReadPower(&myina219);
 8003242:	4831      	ldr	r0, [pc, #196]	@ (8003308 <main+0x1f4>)
 8003244:	f7fe fcc8 	bl	8001bd8 <INA219_ReadPower>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	4b39      	ldr	r3, [pc, #228]	@ (8003334 <main+0x220>)
 800324e:	829a      	strh	r2, [r3, #20]


			// SD
			SDcardWriteData(&s);
 8003250:	4838      	ldr	r0, [pc, #224]	@ (8003334 <main+0x220>)
 8003252:	f7ff fd89 	bl	8002d68 <SDcardWriteData>

			// OLED
			OLEDdisplay(&s);
 8003256:	4837      	ldr	r0, [pc, #220]	@ (8003334 <main+0x220>)
 8003258:	f7ff fe1e 	bl	8002e98 <OLEDdisplay>

			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature, s.BMP280pressure, s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 800325c:	4b35      	ldr	r3, [pc, #212]	@ (8003334 <main+0x220>)
 800325e:	891b      	ldrh	r3, [r3, #8]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8003260:	469a      	mov	sl, r3
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature, s.BMP280pressure, s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8003262:	4b34      	ldr	r3, [pc, #208]	@ (8003334 <main+0x220>)
 8003264:	895b      	ldrh	r3, [r3, #10]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 8003266:	469b      	mov	fp, r3
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature, s.BMP280pressure, s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8003268:	4b32      	ldr	r3, [pc, #200]	@ (8003334 <main+0x220>)
 800326a:	899b      	ldrh	r3, [r3, #12]
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003274:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8003348 <main+0x234>
 8003278:	eec7 6a87 	vdiv.f32	s13, s15, s14
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 800327c:	ee16 0a90 	vmov	r0, s13
 8003280:	f7fd f982 	bl	8000588 <__aeabi_f2d>
 8003284:	4604      	mov	r4, r0
 8003286:	460d      	mov	r5, r1
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature, s.BMP280pressure, s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 8003288:	4b2a      	ldr	r3, [pc, #168]	@ (8003334 <main+0x220>)
 800328a:	89db      	ldrh	r3, [r3, #14]
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003294:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003348 <main+0x234>
 8003298:	eec7 6a87 	vdiv.f32	s13, s15, s14
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 800329c:	ee16 0a90 	vmov	r0, s13
 80032a0:	f7fd f972 	bl	8000588 <__aeabi_f2d>
 80032a4:	4680      	mov	r8, r0
 80032a6:	4689      	mov	r9, r1
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature, s.BMP280pressure, s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 80032a8:	4b22      	ldr	r3, [pc, #136]	@ (8003334 <main+0x220>)
 80032aa:	681b      	ldr	r3, [r3, #0]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd f96b 	bl	8000588 <__aeabi_f2d>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	491f      	ldr	r1, [pc, #124]	@ (8003334 <main+0x220>)
 80032b8:	6849      	ldr	r1, [r1, #4]
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature, s.BMP280pressure, s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 80032ba:	481e      	ldr	r0, [pc, #120]	@ (8003334 <main+0x220>)
 80032bc:	8a00      	ldrh	r0, [r0, #16]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 80032be:	4606      	mov	r6, r0
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature, s.BMP280pressure, s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 80032c0:	481c      	ldr	r0, [pc, #112]	@ (8003334 <main+0x220>)
 80032c2:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 80032c6:	6078      	str	r0, [r7, #4]
					s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature, s.BMP280pressure, s.INA219_Voltage, s.INA219_Current, s.INA219_Power);
 80032c8:	481a      	ldr	r0, [pc, #104]	@ (8003334 <main+0x220>)
 80032ca:	8a80      	ldrh	r0, [r0, #20]
			printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
 80032cc:	9009      	str	r0, [sp, #36]	@ 0x24
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	9008      	str	r0, [sp, #32]
 80032d2:	9607      	str	r6, [sp, #28]
 80032d4:	9106      	str	r1, [sp, #24]
 80032d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80032da:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80032de:	e9cd 4500 	strd	r4, r5, [sp]
 80032e2:	465a      	mov	r2, fp
 80032e4:	4651      	mov	r1, sl
 80032e6:	4819      	ldr	r0, [pc, #100]	@ (800334c <main+0x238>)
 80032e8:	f00c f8c6 	bl	800f478 <iprintf>

			_interruptFlag = 0;
 80032ec:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <main+0x200>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
  	if (_interruptFlag == 1){
 80032f2:	e74e      	b.n	8003192 <main+0x7e>
 80032f4:	20002a98 	.word	0x20002a98
 80032f8:	20002a4c 	.word	0x20002a4c
 80032fc:	200029e0 	.word	0x200029e0
 8003300:	08012f24 	.word	0x08012f24
 8003304:	200002d4 	.word	0x200002d4
 8003308:	20000344 	.word	0x20000344
 800330c:	08012d34 	.word	0x08012d34
 8003310:	20000328 	.word	0x20000328
 8003314:	20000329 	.word	0x20000329
 8003318:	20000288 	.word	0x20000288
 800331c:	2000032a 	.word	0x2000032a
 8003320:	457ff000 	.word	0x457ff000
 8003324:	42c80000 	.word	0x42c80000
 8003328:	08012f38 	.word	0x08012f38
 800332c:	447a0000 	.word	0x447a0000
 8003330:	20000330 	.word	0x20000330
 8003334:	2000032c 	.word	0x2000032c
 8003338:	20000336 	.word	0x20000336
 800333c:	20000334 	.word	0x20000334
 8003340:	2000033a 	.word	0x2000033a
 8003344:	20000338 	.word	0x20000338
 8003348:	44000000 	.word	0x44000000
 800334c:	08012f48 	.word	0x08012f48

08003350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b094      	sub	sp, #80	@ 0x50
 8003354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003356:	f107 0320 	add.w	r3, r7, #32
 800335a:	2230      	movs	r2, #48	@ 0x30
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f00c fa26 	bl	800f7b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003374:	f003 fde2 	bl	8006f3c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003378:	4b27      	ldr	r3, [pc, #156]	@ (8003418 <SystemClock_Config+0xc8>)
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	4a26      	ldr	r2, [pc, #152]	@ (8003418 <SystemClock_Config+0xc8>)
 800337e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003382:	6413      	str	r3, [r2, #64]	@ 0x40
 8003384:	4b24      	ldr	r3, [pc, #144]	@ (8003418 <SystemClock_Config+0xc8>)
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003390:	4b22      	ldr	r3, [pc, #136]	@ (800341c <SystemClock_Config+0xcc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003398:	4a20      	ldr	r2, [pc, #128]	@ (800341c <SystemClock_Config+0xcc>)
 800339a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b1e      	ldr	r3, [pc, #120]	@ (800341c <SystemClock_Config+0xcc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80033a8:	607b      	str	r3, [r7, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033ac:	2301      	movs	r3, #1
 80033ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033b6:	2302      	movs	r3, #2
 80033b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80033c0:	2304      	movs	r3, #4
 80033c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80033c4:	2348      	movs	r3, #72	@ 0x48
 80033c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033c8:	2302      	movs	r3, #2
 80033ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80033cc:	2303      	movs	r3, #3
 80033ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033d0:	f107 0320 	add.w	r3, r7, #32
 80033d4:	4618      	mov	r0, r3
 80033d6:	f003 fdc1 	bl	8006f5c <HAL_RCC_OscConfig>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80033e0:	f000 f840 	bl	8003464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033e4:	230f      	movs	r3, #15
 80033e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033e8:	2302      	movs	r3, #2
 80033ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033fa:	f107 030c 	add.w	r3, r7, #12
 80033fe:	2102      	movs	r1, #2
 8003400:	4618      	mov	r0, r3
 8003402:	f004 f84f 	bl	80074a4 <HAL_RCC_ClockConfig>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800340c:	f000 f82a 	bl	8003464 <Error_Handler>
  }
}
 8003410:	bf00      	nop
 8003412:	3750      	adds	r7, #80	@ 0x50
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	40007000 	.word	0x40007000

08003420 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if (htim == &htim7 && isProgramStarted == 1){
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d10d      	bne.n	800344c <HAL_TIM_PeriodElapsedCallback+0x2c>
 8003430:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d109      	bne.n	800344c <HAL_TIM_PeriodElapsedCallback+0x2c>
  	if (_interruptFlag == 1){
 8003438:	4b08      	ldr	r3, [pc, #32]	@ (800345c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d102      	bne.n	8003446 <HAL_TIM_PeriodElapsedCallback+0x26>
  		printf("Flaga _interruptFlag jest juz 1");
 8003440:	4807      	ldr	r0, [pc, #28]	@ (8003460 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003442:	f00c f819 	bl	800f478 <iprintf>
  	}
  	_interruptFlag = 1;
 8003446:	4b05      	ldr	r3, [pc, #20]	@ (800345c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
  }
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20002a98 	.word	0x20002a98
 8003458:	20000328 	.word	0x20000328
 800345c:	20000329 	.word	0x20000329
 8003460:	08012f70 	.word	0x08012f70

08003464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003468:	b672      	cpsid	i
}
 800346a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <Error_Handler+0x8>

08003470 <__io_putchar>:
 */

#include "usart.h"

int __io_putchar(int ch)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 8003478:	1d39      	adds	r1, r7, #4
 800347a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800347e:	2201      	movs	r2, #1
 8003480:	4803      	ldr	r0, [pc, #12]	@ (8003490 <__io_putchar+0x20>)
 8003482:	f006 fdfb 	bl	800a07c <HAL_UART_Transmit>
	return ch;
 8003486:	687b      	ldr	r3, [r7, #4]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20002ae4 	.word	0x20002ae4

08003494 <sensirion_common_generate_crc>:
 */

#include "sensirion_common.h"

u8 sensirion_common_generate_crc(u8 *data, u16 count)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
    u16 current_byte;
    u8 crc = CRC8_INIT;
 80034a0:	23ff      	movs	r3, #255	@ 0xff
 80034a2:	737b      	strb	r3, [r7, #13]
    u8 crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80034a4:	2300      	movs	r3, #0
 80034a6:	81fb      	strh	r3, [r7, #14]
 80034a8:	e021      	b.n	80034ee <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 80034aa:	89fb      	ldrh	r3, [r7, #14]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	7b7b      	ldrb	r3, [r7, #13]
 80034b4:	4053      	eors	r3, r2
 80034b6:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80034b8:	2308      	movs	r3, #8
 80034ba:	733b      	strb	r3, [r7, #12]
 80034bc:	e011      	b.n	80034e2 <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 80034be:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da07      	bge.n	80034d6 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80034c6:	7b7b      	ldrb	r3, [r7, #13]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	b25b      	sxtb	r3, r3
 80034cc:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 80034d0:	b25b      	sxtb	r3, r3
 80034d2:	737b      	strb	r3, [r7, #13]
 80034d4:	e002      	b.n	80034dc <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 80034d6:	7b7b      	ldrb	r3, [r7, #13]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80034dc:	7b3b      	ldrb	r3, [r7, #12]
 80034de:	3b01      	subs	r3, #1
 80034e0:	733b      	strb	r3, [r7, #12]
 80034e2:	7b3b      	ldrb	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ea      	bne.n	80034be <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80034e8:	89fb      	ldrh	r3, [r7, #14]
 80034ea:	3301      	adds	r3, #1
 80034ec:	81fb      	strh	r3, [r7, #14]
 80034ee:	89fa      	ldrh	r2, [r7, #14]
 80034f0:	887b      	ldrh	r3, [r7, #2]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d3d9      	bcc.n	80034aa <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80034f6:	7b7b      	ldrb	r3, [r7, #13]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <sensirion_common_check_crc>:

s8 sensirion_common_check_crc(u8 *data, u16 count, u8 checksum)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
 8003510:	4613      	mov	r3, r2
 8003512:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8003514:	887b      	ldrh	r3, [r7, #2]
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ffbb 	bl	8003494 <sensirion_common_generate_crc>
 800351e:	4603      	mov	r3, r0
 8003520:	461a      	mov	r2, r3
 8003522:	787b      	ldrb	r3, [r7, #1]
 8003524:	4293      	cmp	r3, r2
 8003526:	d002      	beq.n	800352e <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8003528:	f04f 33ff 	mov.w	r3, #4294967295
 800352c:	e000      	b.n	8003530 <sensirion_common_check_crc+0x2c>
    return STATUS_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <sensirion_i2c_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af02      	add	r7, sp, #8
 800353e:	4603      	mov	r3, r0
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	71fb      	strb	r3, [r7, #7]
 8003544:	4613      	mov	r3, r2
 8003546:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Receive(&hi2c1, address<<1, data, count, 100);
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	b29b      	uxth	r3, r3
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	b299      	uxth	r1, r3
 8003550:	88bb      	ldrh	r3, [r7, #4]
 8003552:	2264      	movs	r2, #100	@ 0x64
 8003554:	9200      	str	r2, [sp, #0]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	4804      	ldr	r0, [pc, #16]	@ (800356c <sensirion_i2c_read+0x34>)
 800355a:	f002 fbbf 	bl	8005cdc <HAL_I2C_Master_Receive>
 800355e:	4603      	mov	r3, r0
 8003560:	b25b      	sxtb	r3, r3
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	200002d4 	.word	0x200002d4

08003570 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, uint8_t* data, uint16_t count)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af02      	add	r7, sp, #8
 8003576:	4603      	mov	r3, r0
 8003578:	6039      	str	r1, [r7, #0]
 800357a:	71fb      	strb	r3, [r7, #7]
 800357c:	4613      	mov	r3, r2
 800357e:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Transmit(&hi2c1, address<<1, data, count, 100);  // data is the start pointer of our array
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	b29b      	uxth	r3, r3
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	b299      	uxth	r1, r3
 8003588:	88bb      	ldrh	r3, [r7, #4]
 800358a:	2264      	movs	r2, #100	@ 0x64
 800358c:	9200      	str	r2, [sp, #0]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4804      	ldr	r0, [pc, #16]	@ (80035a4 <sensirion_i2c_write+0x34>)
 8003592:	f002 fa8b 	bl	8005aac <HAL_I2C_Master_Transmit>
 8003596:	4603      	mov	r3, r0
 8003598:	b25b      	sxtb	r3, r3
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200002d4 	.word	0x200002d4

080035a8 <sensirion_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	if(useconds >= 1000)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035b6:	d308      	bcc.n	80035ca <sensirion_sleep_usec+0x22>
	{
		HAL_Delay(useconds / (uint32_t)1000);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a07      	ldr	r2, [pc, #28]	@ (80035d8 <sensirion_sleep_usec+0x30>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 fae0 	bl	8004b88 <HAL_Delay>
	}
	else
	{
		HAL_Delay(1);
	}
}
 80035c8:	e002      	b.n	80035d0 <sensirion_sleep_usec+0x28>
		HAL_Delay(1);
 80035ca:	2001      	movs	r0, #1
 80035cc:	f001 fadc 	bl	8004b88 <HAL_Delay>
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	10624dd3 	.word	0x10624dd3

080035dc <sgp_i2c_read_words>:
 *              The buffer may also have been modified on STATUS_FAIL return.
 * @data_words: Number of data words to read (without CRC bytes)
 *
 * Return:      STATUS_OK on success, STATUS_FAIL otherwise
 */
static s16 sgp_i2c_read_words(u16 *data, u16 data_words) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80035e8:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80035ec:	6018      	str	r0, [r3, #0]
 80035ee:	460a      	mov	r2, r1
 80035f0:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80035f4:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 80035f8:	801a      	strh	r2, [r3, #0]
    s16 ret;
    u16 i, j;
    u16 size = data_words * (SGP_WORD_LEN + CRC8_LEN);
 80035fa:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80035fe:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	0052      	lsls	r2, r2, #1
 8003608:	4413      	add	r3, r2
 800360a:	f8a7 3412 	strh.w	r3, [r7, #1042]	@ 0x412
    u16 word_buf[SGP_MAX_PROFILE_RET_LEN / sizeof(u16)];
    u8 * const buf8 = (u8 *)word_buf;
 800360e:	f107 0308 	add.w	r3, r7, #8
 8003612:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c

    ret = sensirion_i2c_read(SGP_I2C_ADDRESS, buf8, size);
 8003616:	2058      	movs	r0, #88	@ 0x58
 8003618:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	@ 0x412
 800361c:	461a      	mov	r2, r3
 800361e:	f8d7 140c 	ldr.w	r1, [r7, #1036]	@ 0x40c
 8003622:	f7ff ff89 	bl	8003538 <sensirion_i2c_read>
 8003626:	4603      	mov	r3, r0
 8003628:	f8a7 340a 	strh.w	r3, [r7, #1034]	@ 0x40a

    if (ret != 0)
 800362c:	f9b7 340a 	ldrsh.w	r3, [r7, #1034]	@ 0x40a
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <sgp_i2c_read_words+0x5e>
        return STATUS_FAIL;
 8003634:	f04f 33ff 	mov.w	r3, #4294967295
 8003638:	e04e      	b.n	80036d8 <sgp_i2c_read_words+0xfc>

    /* check the CRC for each word */
    for (i = 0, j = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	f8a7 3416 	strh.w	r3, [r7, #1046]	@ 0x416
 8003640:	2300      	movs	r3, #0
 8003642:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
 8003646:	e040      	b.n	80036ca <sgp_i2c_read_words+0xee>
         i < size;
         i += SGP_WORD_LEN + CRC8_LEN, j += SGP_WORD_LEN) {

        if (sensirion_common_check_crc(&buf8[i], SGP_WORD_LEN,
 8003648:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 800364c:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8003650:	18d0      	adds	r0, r2, r3
                                       buf8[i + SGP_WORD_LEN]) == STATUS_FAIL) {
 8003652:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 8003656:	3302      	adds	r3, #2
 8003658:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 800365c:	4413      	add	r3, r2
        if (sensirion_common_check_crc(&buf8[i], SGP_WORD_LEN,
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	2102      	movs	r1, #2
 8003664:	f7ff ff4e 	bl	8003504 <sensirion_common_check_crc>
 8003668:	4603      	mov	r3, r0
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d102      	bne.n	8003676 <sgp_i2c_read_words+0x9a>
            return STATUS_FAIL;
 8003670:	f04f 33ff 	mov.w	r3, #4294967295
 8003674:	e030      	b.n	80036d8 <sgp_i2c_read_words+0xfc>
        }
        ((u8 *)data)[j]     = buf8[i];
 8003676:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 800367a:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 800367e:	441a      	add	r2, r3
 8003680:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 8003684:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 8003688:	f2a1 4114 	subw	r1, r1, #1044	@ 0x414
 800368c:	6809      	ldr	r1, [r1, #0]
 800368e:	440b      	add	r3, r1
 8003690:	7812      	ldrb	r2, [r2, #0]
 8003692:	701a      	strb	r2, [r3, #0]
        ((u8 *)data)[j + 1] = buf8[i + 1];
 8003694:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 8003698:	3301      	adds	r3, #1
 800369a:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 800369e:	441a      	add	r2, r3
 80036a0:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 80036a4:	3301      	adds	r3, #1
 80036a6:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 80036aa:	f2a1 4114 	subw	r1, r1, #1044	@ 0x414
 80036ae:	6809      	ldr	r1, [r1, #0]
 80036b0:	440b      	add	r3, r1
 80036b2:	7812      	ldrb	r2, [r2, #0]
 80036b4:	701a      	strb	r2, [r3, #0]
         i += SGP_WORD_LEN + CRC8_LEN, j += SGP_WORD_LEN) {
 80036b6:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 80036ba:	3303      	adds	r3, #3
 80036bc:	f8a7 3416 	strh.w	r3, [r7, #1046]	@ 0x416
 80036c0:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 80036c4:	3302      	adds	r3, #2
 80036c6:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
         i < size;
 80036ca:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	@ 0x416
 80036ce:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	@ 0x412
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d3b8      	bcc.n	8003648 <sgp_i2c_read_words+0x6c>
    }

    return STATUS_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <sgp_i2c_write>:
 * sgp_i2c_write() - writes to the SGP sensor
 * @command:     Command
 *
 * Return:      STATUS_OK on success.
 */
static s16 sgp_i2c_write(const sgp_command *command) {
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
    s8 ret;

    ret = sensirion_i2c_write(SGP_I2C_ADDRESS, command->buf, SGP_COMMAND_LEN);
 80036ea:	2058      	movs	r0, #88	@ 0x58
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	4619      	mov	r1, r3
 80036f2:	f7ff ff3d 	bl	8003570 <sensirion_i2c_write>
 80036f6:	4603      	mov	r3, r0
 80036f8:	73fb      	strb	r3, [r7, #15]
    if (ret != 0)
 80036fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <sgp_i2c_write+0x26>
        return STATUS_FAIL;
 8003702:	f04f 33ff 	mov.w	r3, #4294967295
 8003706:	e000      	b.n	800370a <sgp_i2c_write+0x28>

    return STATUS_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <unpack_signals>:

/**
 * unpack_signals() - unpack signals which are stored in client_data.word_buf
 * @profile:    The profile
 */
static void unpack_signals(const struct sgp_profile *profile) {
 8003714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003718:	b089      	sub	sp, #36	@ 0x24
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	466b      	mov	r3, sp
 8003720:	461e      	mov	r6, r3
    s16 i, j;
    const struct sgp_signal *signal;
    u16 data_words = profile->number_of_signals;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	891b      	ldrh	r3, [r3, #8]
 8003726:	837b      	strh	r3, [r7, #26]
    u16 word_buf[data_words];
 8003728:	8b79      	ldrh	r1, [r7, #26]
 800372a:	460b      	mov	r3, r1
 800372c:	3b01      	subs	r3, #1
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	b28b      	uxth	r3, r1
 8003732:	2200      	movs	r2, #0
 8003734:	4698      	mov	r8, r3
 8003736:	4691      	mov	r9, r2
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003744:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8003748:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800374c:	b28b      	uxth	r3, r1
 800374e:	2200      	movs	r2, #0
 8003750:	461c      	mov	r4, r3
 8003752:	4615      	mov	r5, r2
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	012b      	lsls	r3, r5, #4
 800375e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003762:	0122      	lsls	r2, r4, #4
 8003764:	460b      	mov	r3, r1
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	3307      	adds	r3, #7
 800376a:	08db      	lsrs	r3, r3, #3
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	ebad 0d03 	sub.w	sp, sp, r3
 8003772:	466b      	mov	r3, sp
 8003774:	3301      	adds	r3, #1
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	613b      	str	r3, [r7, #16]
    u16 value;

    /* copy buffer */
    for (i = 0; i < data_words; i++)
 800377c:	2300      	movs	r3, #0
 800377e:	83fb      	strh	r3, [r7, #30]
 8003780:	e011      	b.n	80037a6 <unpack_signals+0x92>
        word_buf[i] = client_data.word_buf[i];
 8003782:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003786:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800378a:	4936      	ldr	r1, [pc, #216]	@ (8003864 <unpack_signals+0x150>)
 800378c:	330c      	adds	r3, #12
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	440b      	add	r3, r1
 8003792:	8899      	ldrh	r1, [r3, #4]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < data_words; i++)
 800379a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	83fb      	strh	r3, [r7, #30]
 80037a6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80037aa:	8b7b      	ldrh	r3, [r7, #26]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	dbe8      	blt.n	8003782 <unpack_signals+0x6e>

    /* signals are in reverse order in the data buffer */
    for (i = profile->number_of_signals - 1, j = 0; i >= 0; i -= 1, j += 1) {
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	891b      	ldrh	r3, [r3, #8]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	83fb      	strh	r3, [r7, #30]
 80037ba:	2300      	movs	r3, #0
 80037bc:	83bb      	strh	r3, [r7, #28]
 80037be:	e046      	b.n	800384e <unpack_signals+0x13a>
        signal = profile->signals[profile->number_of_signals - i - 1];
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	891b      	ldrh	r3, [r3, #8]
 80037c8:	4619      	mov	r1, r3
 80037ca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80037ce:	1acb      	subs	r3, r1, r3
 80037d0:	4619      	mov	r1, r3
 80037d2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80037d6:	440b      	add	r3, r1
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]
        value = be16_to_cpu(word_buf[i]);
 80037e0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	b21a      	sxth	r2, r3
 80037ee:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	b21b      	sxth	r3, r3
 80037fe:	4313      	orrs	r3, r2
 8003800:	b21b      	sxth	r3, r3
 8003802:	817b      	strh	r3, [r7, #10]

        if (signal->conversion_function != NULL)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d010      	beq.n	800382e <unpack_signals+0x11a>
            client_data.word_buf[j] = signal->conversion_function(value);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8003814:	897a      	ldrh	r2, [r7, #10]
 8003816:	4610      	mov	r0, r2
 8003818:	4798      	blx	r3
 800381a:	4603      	mov	r3, r0
 800381c:	4619      	mov	r1, r3
 800381e:	4a11      	ldr	r2, [pc, #68]	@ (8003864 <unpack_signals+0x150>)
 8003820:	f104 030c 	add.w	r3, r4, #12
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	460a      	mov	r2, r1
 800382a:	809a      	strh	r2, [r3, #4]
 800382c:	e007      	b.n	800383e <unpack_signals+0x12a>
        else
            client_data.word_buf[j] = value;
 800382e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003832:	4a0c      	ldr	r2, [pc, #48]	@ (8003864 <unpack_signals+0x150>)
 8003834:	330c      	adds	r3, #12
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	897a      	ldrh	r2, [r7, #10]
 800383c:	809a      	strh	r2, [r3, #4]
    for (i = profile->number_of_signals - 1, j = 0; i >= 0; i -= 1, j += 1) {
 800383e:	8bfb      	ldrh	r3, [r7, #30]
 8003840:	3b01      	subs	r3, #1
 8003842:	b29b      	uxth	r3, r3
 8003844:	83fb      	strh	r3, [r7, #30]
 8003846:	8bbb      	ldrh	r3, [r7, #28]
 8003848:	3301      	adds	r3, #1
 800384a:	b29b      	uxth	r3, r3
 800384c:	83bb      	strh	r3, [r7, #28]
 800384e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003852:	2b00      	cmp	r3, #0
 8003854:	dab4      	bge.n	80037c0 <unpack_signals+0xac>
 8003856:	46b5      	mov	sp, r6
    }
}
 8003858:	bf00      	nop
 800385a:	3724      	adds	r7, #36	@ 0x24
 800385c:	46bd      	mov	sp, r7
 800385e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003862:	bf00      	nop
 8003864:	200023b8 	.word	0x200023b8

08003868 <read_measurement>:
/**
 * read_measurement() - reads the result of a profile measurement
 *
 * Return:  Length of the written data to the buffer. Negative if it fails.
 */
static s16 read_measurement(const struct sgp_profile *profile) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

    s16 ret;

    switch (client_data.current_state) {
 8003870:	4b10      	ldr	r3, [pc, #64]	@ (80038b4 <read_measurement+0x4c>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d116      	bne.n	80038a6 <read_measurement+0x3e>

        case MEASURING_PROFILE_STATE:
            ret = sgp_i2c_read_words(client_data.word_buf,
                                     profile->number_of_signals);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	891b      	ldrh	r3, [r3, #8]
            ret = sgp_i2c_read_words(client_data.word_buf,
 800387c:	4619      	mov	r1, r3
 800387e:	480e      	ldr	r0, [pc, #56]	@ (80038b8 <read_measurement+0x50>)
 8003880:	f7ff feac 	bl	80035dc <sgp_i2c_read_words>
 8003884:	4603      	mov	r3, r0
 8003886:	81fb      	strh	r3, [r7, #14]

            if (ret)
 8003888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <read_measurement+0x2e>
                /* Measurement in progress */
                return STATUS_FAIL;
 8003890:	f04f 33ff 	mov.w	r3, #4294967295
 8003894:	e009      	b.n	80038aa <read_measurement+0x42>

            unpack_signals(profile);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ff3c 	bl	8003714 <unpack_signals>
            client_data.current_state = WAIT_STATE;
 800389c:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <read_measurement+0x4c>)
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]

            return STATUS_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e001      	b.n	80038aa <read_measurement+0x42>

        default:
            /* No command issued */
            return STATUS_FAIL;
 80038a6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	200023b8 	.word	0x200023b8
 80038b8:	200023d4 	.word	0x200023d4

080038bc <sgp_i2c_read_words_from_cmd>:
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_i2c_read_words_from_cmd(const sgp_command *cmd,
                                       u32 duration_us,
                                       u16 *data_words,
                                       u16 num_words) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	807b      	strh	r3, [r7, #2]

    if (sgp_i2c_write(cmd) == STATUS_FAIL)
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff ff09 	bl	80036e2 <sgp_i2c_write>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	d102      	bne.n	80038de <sgp_i2c_read_words_from_cmd+0x22>
        return STATUS_FAIL;
 80038d8:	f04f 33ff 	mov.w	r3, #4294967295
 80038dc:	e008      	b.n	80038f0 <sgp_i2c_read_words_from_cmd+0x34>

    /* the chip needs some time to write the data into the RAM */
    sensirion_sleep_usec(duration_us);
 80038de:	68b8      	ldr	r0, [r7, #8]
 80038e0:	f7ff fe62 	bl	80035a8 <sensirion_sleep_usec>
    return sgp_i2c_read_words(data_words, num_words);
 80038e4:	887b      	ldrh	r3, [r7, #2]
 80038e6:	4619      	mov	r1, r3
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fe77 	bl	80035dc <sgp_i2c_read_words>
 80038ee:	4603      	mov	r3, r0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <sgp_run_profile>:
 * sgp_run_profile() - run a profile and read write its return to client_data
 * @profile     A pointer to the profile
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_run_profile(const struct sgp_profile *profile) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
    u32 duration_us = profile->duration_us + 5;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3305      	adds	r3, #5
 8003906:	60fb      	str	r3, [r7, #12]

    if (sgp_i2c_write(&profile->command) == STATUS_FAIL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	330c      	adds	r3, #12
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fee8 	bl	80036e2 <sgp_i2c_write>
 8003912:	4603      	mov	r3, r0
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003918:	d102      	bne.n	8003920 <sgp_run_profile+0x28>
        return STATUS_FAIL;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
 800391e:	e00f      	b.n	8003940 <sgp_run_profile+0x48>

    sensirion_sleep_usec(duration_us);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f7ff fe41 	bl	80035a8 <sensirion_sleep_usec>

    if (profile->number_of_signals > 0) {
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	891b      	ldrh	r3, [r3, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <sgp_run_profile+0x46>
        client_data.current_state = MEASURING_PROFILE_STATE;
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <sgp_run_profile+0x50>)
 8003930:	2201      	movs	r2, #1
 8003932:	701a      	strb	r2, [r3, #0]
        return read_measurement(profile);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff ff97 	bl	8003868 <read_measurement>
 800393a:	4603      	mov	r3, r0
 800393c:	e000      	b.n	8003940 <sgp_run_profile+0x48>
    }

    return STATUS_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200023b8 	.word	0x200023b8

0800394c <sgp_get_profile_by_number>:
 * sgp_get_profile_by_number() - get a profile by its identifier number
 * @number      The number that identifies the profile
 *
 * Return:      A pointer to the profile or NULL if the profile does not exists
 */
static const struct sgp_profile *sgp_get_profile_by_number(u16 number) {
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	80fb      	strh	r3, [r7, #6]
    u8 i;
    const struct sgp_profile *profile = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < client_data.otp_features->number_of_profiles; i++) {
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	e010      	b.n	8003982 <sgp_get_profile_by_number+0x36>
        profile = client_data.otp_features->profiles[i];
 8003960:	4b14      	ldr	r3, [pc, #80]	@ (80039b4 <sgp_get_profile_by_number+0x68>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60bb      	str	r3, [r7, #8]
        if (number == profile->number)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	7a9b      	ldrb	r3, [r3, #10]
 8003974:	461a      	mov	r2, r3
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	4293      	cmp	r3, r2
 800397a:	d00a      	beq.n	8003992 <sgp_get_profile_by_number+0x46>
    for (i = 0; i < client_data.otp_features->number_of_profiles; i++) {
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	3301      	adds	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	b29a      	uxth	r2, r3
 8003986:	4b0b      	ldr	r3, [pc, #44]	@ (80039b4 <sgp_get_profile_by_number+0x68>)
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	889b      	ldrh	r3, [r3, #4]
 800398c:	429a      	cmp	r2, r3
 800398e:	d3e7      	bcc.n	8003960 <sgp_get_profile_by_number+0x14>
 8003990:	e000      	b.n	8003994 <sgp_get_profile_by_number+0x48>
            break;
 8003992:	bf00      	nop
    }

    if (i == client_data.otp_features->number_of_profiles) {
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	b29a      	uxth	r2, r3
 8003998:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <sgp_get_profile_by_number+0x68>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	889b      	ldrh	r3, [r3, #4]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d101      	bne.n	80039a6 <sgp_get_profile_by_number+0x5a>
        return NULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e000      	b.n	80039a8 <sgp_get_profile_by_number+0x5c>
    }

    return profile;
 80039a6:	68bb      	ldr	r3, [r7, #8]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	200023b8 	.word	0x200023b8

080039b8 <sgp_run_profile_by_number>:
 * sgp_run_profile_by_number() - run a profile by its identifier number
 * @number:     The number that identifies the profile
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_run_profile_by_number(u16 number) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	80fb      	strh	r3, [r7, #6]
    const struct sgp_profile *profile;

    profile = sgp_get_profile_by_number(number);
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff ffc1 	bl	800394c <sgp_get_profile_by_number>
 80039ca:	60f8      	str	r0, [r7, #12]
    if (profile == NULL)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d102      	bne.n	80039d8 <sgp_run_profile_by_number+0x20>
        return STATUS_FAIL;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
 80039d6:	e00a      	b.n	80039ee <sgp_run_profile_by_number+0x36>

    if (sgp_run_profile(profile) == STATUS_FAIL)
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff ff8d 	bl	80038f8 <sgp_run_profile>
 80039de:	4603      	mov	r3, r0
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d102      	bne.n	80039ec <sgp_run_profile_by_number+0x34>
        return STATUS_FAIL;
 80039e6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ea:	e000      	b.n	80039ee <sgp_run_profile_by_number+0x36>

    return STATUS_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <sgp_detect_featureset_version>:
 *
 * @featureset:  Pointer to the featureset bits
 *
 * Return:    STATUS_OK on success
 */
static s16 sgp_detect_featureset_version(u16 *featureset) {
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
    s16 i, j;
    s16 ret = STATUS_FAIL;
 8003a00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a04:	827b      	strh	r3, [r7, #18]
    u16 feature_set_version = be16_to_cpu(*featureset);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	b21a      	sxth	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	b21b      	sxth	r3, r3
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	b21b      	sxth	r3, r3
 8003a1c:	823b      	strh	r3, [r7, #16]
    const struct sgp_otp_featureset *sgp_featureset;

    client_data.info.feature_set_version = feature_set_version;
 8003a1e:	4a36      	ldr	r2, [pc, #216]	@ (8003af8 <sgp_detect_featureset_version+0x100>)
 8003a20:	8a3b      	ldrh	r3, [r7, #16]
 8003a22:	8213      	strh	r3, [r2, #16]
    client_data.otp_features = &sgp_features_unknown;
 8003a24:	4b34      	ldr	r3, [pc, #208]	@ (8003af8 <sgp_detect_featureset_version+0x100>)
 8003a26:	4a35      	ldr	r2, [pc, #212]	@ (8003afc <sgp_detect_featureset_version+0x104>)
 8003a28:	619a      	str	r2, [r3, #24]
    for (i = 0; i < sgp_supported_featuresets.number_of_supported_featuresets; ++i) {
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	82fb      	strh	r3, [r7, #22]
 8003a2e:	e054      	b.n	8003ada <sgp_detect_featureset_version+0xe2>
        sgp_featureset = sgp_supported_featuresets.featuresets[i];
 8003a30:	4b33      	ldr	r3, [pc, #204]	@ (8003b00 <sgp_detect_featureset_version+0x108>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < sgp_featureset->number_of_supported_featureset_versions; ++j) {
 8003a40:	2300      	movs	r3, #0
 8003a42:	82bb      	strh	r3, [r7, #20]
 8003a44:	e03f      	b.n	8003ac6 <sgp_detect_featureset_version+0xce>
            if (SGP_FS_COMPAT(feature_set_version,
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4413      	add	r3, r2
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	dd0f      	ble.n	8003a7c <sgp_detect_featureset_version+0x84>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	4413      	add	r3, r2
 8003a68:	881a      	ldrh	r2, [r3, #0]
 8003a6a:	8a3b      	ldrh	r3, [r7, #16]
 8003a6c:	4053      	eors	r3, r2
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	f24f 13e0 	movw	r3, #61920	@ 0xf1e0
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01a      	beq.n	8003ab2 <sgp_detect_featureset_version+0xba>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d115      	bne.n	8003abe <sgp_detect_featureset_version+0xc6>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	881a      	ldrh	r2, [r3, #0]
 8003aa0:	8a3b      	ldrh	r3, [r7, #16]
 8003aa2:	4053      	eors	r3, r2
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f24f 13ff 	movw	r3, #61951	@ 0xf1ff
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <sgp_detect_featureset_version+0xc6>
                              sgp_featureset->supported_featureset_versions[j])) {
                client_data.otp_features = sgp_featureset;
 8003ab2:	4a11      	ldr	r2, [pc, #68]	@ (8003af8 <sgp_detect_featureset_version+0x100>)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6193      	str	r3, [r2, #24]
                ret = STATUS_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	827b      	strh	r3, [r7, #18]
                break;
 8003abc:	e009      	b.n	8003ad2 <sgp_detect_featureset_version+0xda>
        for (j = 0; j < sgp_featureset->number_of_supported_featureset_versions; ++j) {
 8003abe:	8abb      	ldrh	r3, [r7, #20]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	82bb      	strh	r3, [r7, #20]
 8003ac6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	8992      	ldrh	r2, [r2, #12]
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	dbb9      	blt.n	8003a46 <sgp_detect_featureset_version+0x4e>
    for (i = 0; i < sgp_supported_featuresets.number_of_supported_featuresets; ++i) {
 8003ad2:	8afb      	ldrh	r3, [r7, #22]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	82fb      	strh	r3, [r7, #22]
 8003ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003ade:	4a08      	ldr	r2, [pc, #32]	@ (8003b00 <sgp_detect_featureset_version+0x108>)
 8003ae0:	8892      	ldrh	r2, [r2, #4]
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	dba4      	blt.n	8003a30 <sgp_detect_featureset_version+0x38>
            }
        }
    }
    return ret;
 8003ae6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	200023b8 	.word	0x200023b8
 8003afc:	0801374c 	.word	0x0801374c
 8003b00:	08013980 	.word	0x08013980

08003b04 <sgp_measure_iaq_blocking_read>:
 *
 * The profile is executed synchronously.
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
s16 sgp_measure_iaq_blocking_read(u16 *tvoc_ppb, u16 *co2_eq_ppm) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
    if (sgp_run_profile_by_number(PROFILE_NUMBER_IAQ_MEASURE) == STATUS_FAIL)
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f7ff ff52 	bl	80039b8 <sgp_run_profile_by_number>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d102      	bne.n	8003b22 <sgp_measure_iaq_blocking_read+0x1e>
        return STATUS_FAIL;
 8003b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b20:	e008      	b.n	8003b34 <sgp_measure_iaq_blocking_read+0x30>

    *tvoc_ppb = client_data.word_buf[0];
 8003b22:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <sgp_measure_iaq_blocking_read+0x38>)
 8003b24:	8b9a      	ldrh	r2, [r3, #28]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = client_data.word_buf[1];
 8003b2a:	4b04      	ldr	r3, [pc, #16]	@ (8003b3c <sgp_measure_iaq_blocking_read+0x38>)
 8003b2c:	8bda      	ldrh	r2, [r3, #30]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	801a      	strh	r2, [r3, #0]

    return STATUS_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200023b8 	.word	0x200023b8

08003b40 <sgp_measure_signals_blocking_read>:
 *                    value by 512 to get the real signal.
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
s16 sgp_measure_signals_blocking_read(u16 *scaled_ethanol_signal,
                                      u16 *scaled_h2_signal) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]

    if (sgp_run_profile_by_number(PROFILE_NUMBER_MEASURE_SIGNALS) == STATUS_FAIL)
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b7c <sgp_measure_signals_blocking_read+0x3c>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff ff32 	bl	80039b8 <sgp_run_profile_by_number>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d102      	bne.n	8003b62 <sgp_measure_signals_blocking_read+0x22>
        return STATUS_FAIL;
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b60:	e008      	b.n	8003b74 <sgp_measure_signals_blocking_read+0x34>

    *scaled_ethanol_signal = client_data.word_buf[0];
 8003b62:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <sgp_measure_signals_blocking_read+0x40>)
 8003b64:	8b9a      	ldrh	r2, [r3, #28]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	801a      	strh	r2, [r3, #0]
    *scaled_h2_signal = client_data.word_buf[1];
 8003b6a:	4b05      	ldr	r3, [pc, #20]	@ (8003b80 <sgp_measure_signals_blocking_read+0x40>)
 8003b6c:	8bda      	ldrh	r2, [r3, #30]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	801a      	strh	r2, [r3, #0]

    return STATUS_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	0801375c 	.word	0x0801375c
 8003b80:	200023b8 	.word	0x200023b8

08003b84 <sgp_iaq_init>:
/**
 * sgp_iaq_init() - reset the SGP's internal IAQ baselines
 *
 * Return:  STATUS_OK on success.
 */
s16 sgp_iaq_init() {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
    return sgp_run_profile_by_number(PROFILE_NUMBER_IAQ_INIT);
 8003b88:	2000      	movs	r0, #0
 8003b8a:	f7ff ff15 	bl	80039b8 <sgp_run_profile_by_number>
 8003b8e:	4603      	mov	r3, r0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <sgp_probe>:
 *
 * This call aleady initializes the IAQ baselines (sgp_iaq_init())
 *
 * Return:  STATUS_OK on success.
 */
s16 sgp_probe() {
 8003b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
    s16 err;
    const u64 *serial_buf = (const u64 *)client_data.word_buf;
 8003b9c:	4b5d      	ldr	r3, [pc, #372]	@ (8003d14 <sgp_probe+0x180>)
 8003b9e:	607b      	str	r3, [r7, #4]

    client_data.current_state = WAIT_STATE;
 8003ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8003d18 <sgp_probe+0x184>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	701a      	strb	r2, [r3, #0]

    /* try to read the serial ID */
    err = sgp_i2c_read_words_from_cmd(&sgp_cmd_get_serial_id,
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8003d14 <sgp_probe+0x180>)
 8003baa:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003bae:	485b      	ldr	r0, [pc, #364]	@ (8003d1c <sgp_probe+0x188>)
 8003bb0:	f7ff fe84 	bl	80038bc <sgp_i2c_read_words_from_cmd>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	807b      	strh	r3, [r7, #2]
                                      SGP_CMD_GET_SERIAL_ID_DURATION_US,
                                      client_data.word_buf,
                                      SGP_CMD_GET_SERIAL_ID_WORDS);
    if (err == STATUS_FAIL)
 8003bb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d102      	bne.n	8003bc8 <sgp_probe+0x34>
        return err;
 8003bc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bc6:	e09f      	b.n	8003d08 <sgp_probe+0x174>

    client_data.info.serial_id = be64_to_cpu(*serial_buf) >> 16;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bce:	b293      	uxth	r3, r2
 8003bd0:	0219      	lsls	r1, r3, #8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	b293      	uxth	r3, r2
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	430b      	orrs	r3, r1
 8003be0:	041e      	lsls	r6, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	0c02      	lsrs	r2, r0, #16
 8003bf2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003bf6:	0c0b      	lsrs	r3, r1, #16
 8003bf8:	b293      	uxth	r3, r2
 8003bfa:	ea4f 2c03 	mov.w	ip, r3, lsl #8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	0c02      	lsrs	r2, r0, #16
 8003c0e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003c12:	0c0b      	lsrs	r3, r1, #16
 8003c14:	b293      	uxth	r3, r2
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	ea4c 0303 	orr.w	r3, ip, r3
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	4333      	orrs	r3, r6
 8003c22:	2200      	movs	r2, #0
 8003c24:	469a      	mov	sl, r3
 8003c26:	4693      	mov	fp, r2
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	4653      	mov	r3, sl
 8003c32:	2200      	movs	r2, #0
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8003c3a:	f04f 0000 	mov.w	r0, #0
 8003c3e:	f04f 0100 	mov.w	r1, #0
 8003c42:	4658      	mov	r0, fp
 8003c44:	2100      	movs	r1, #0
 8003c46:	b281      	uxth	r1, r0
 8003c48:	020e      	lsls	r6, r1, #8
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8003c50:	f04f 0000 	mov.w	r0, #0
 8003c54:	f04f 0100 	mov.w	r1, #0
 8003c58:	4658      	mov	r0, fp
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	b281      	uxth	r1, r0
 8003c5e:	0a09      	lsrs	r1, r1, #8
 8003c60:	b289      	uxth	r1, r1
 8003c62:	4331      	orrs	r1, r6
 8003c64:	040e      	lsls	r6, r1, #16
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8003c6c:	f04f 0000 	mov.w	r0, #0
 8003c70:	f04f 0100 	mov.w	r1, #0
 8003c74:	ea4f 401b 	mov.w	r0, fp, lsr #16
 8003c78:	2100      	movs	r1, #0
 8003c7a:	b281      	uxth	r1, r0
 8003c7c:	ea4f 2c01 	mov.w	ip, r1, lsl #8
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8003c86:	f04f 0000 	mov.w	r0, #0
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	ea4f 401b 	mov.w	r0, fp, lsr #16
 8003c92:	2100      	movs	r1, #0
 8003c94:	b281      	uxth	r1, r0
 8003c96:	0a09      	lsrs	r1, r1, #8
 8003c98:	b289      	uxth	r1, r1
 8003c9a:	ea4c 0101 	orr.w	r1, ip, r1
 8003c9e:	b289      	uxth	r1, r1
 8003ca0:	4331      	orrs	r1, r6
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	4688      	mov	r8, r1
 8003ca6:	4681      	mov	r9, r0
 8003ca8:	ea42 0408 	orr.w	r4, r2, r8
 8003cac:	ea43 0509 	orr.w	r5, r3, r9
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	0c22      	lsrs	r2, r4, #16
 8003cba:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8003cbe:	0c2b      	lsrs	r3, r5, #16
 8003cc0:	4915      	ldr	r1, [pc, #84]	@ (8003d18 <sgp_probe+0x184>)
 8003cc2:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* read the featureset version */
    err = sgp_i2c_read_words_from_cmd(&sgp_cmd_get_featureset,
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	4a12      	ldr	r2, [pc, #72]	@ (8003d14 <sgp_probe+0x180>)
 8003cca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003cce:	4814      	ldr	r0, [pc, #80]	@ (8003d20 <sgp_probe+0x18c>)
 8003cd0:	f7ff fdf4 	bl	80038bc <sgp_i2c_read_words_from_cmd>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	807b      	strh	r3, [r7, #2]
                                      SGP_CMD_GET_FEATURESET_DURATION_US,
                                      client_data.word_buf,
                                      SGP_CMD_GET_FEATURESET_WORDS);
    if (err == STATUS_FAIL)
 8003cd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d102      	bne.n	8003ce8 <sgp_probe+0x154>
        return STATUS_FAIL;
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce6:	e00f      	b.n	8003d08 <sgp_probe+0x174>

    err = sgp_detect_featureset_version(client_data.word_buf);
 8003ce8:	480a      	ldr	r0, [pc, #40]	@ (8003d14 <sgp_probe+0x180>)
 8003cea:	f7ff fe85 	bl	80039f8 <sgp_detect_featureset_version>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	807b      	strh	r3, [r7, #2]
    if (err == STATUS_FAIL)
 8003cf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d102      	bne.n	8003d02 <sgp_probe+0x16e>
        return STATUS_FAIL;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	e002      	b.n	8003d08 <sgp_probe+0x174>

    return sgp_iaq_init();
 8003d02:	f7ff ff3f 	bl	8003b84 <sgp_iaq_init>
 8003d06:	4603      	mov	r3, r0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d12:	bf00      	nop
 8003d14:	200023d4 	.word	0x200023d4
 8003d18:	200023b8 	.word	0x200023b8
 8003d1c:	08013744 	.word	0x08013744
 8003d20:	08013748 	.word	0x08013748

08003d24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003d28:	4b1b      	ldr	r3, [pc, #108]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003d9c <MX_SPI1_Init+0x78>)
 8003d2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d36:	4b18      	ldr	r3, [pc, #96]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d3c:	4b16      	ldr	r3, [pc, #88]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d3e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003d42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d44:	4b14      	ldr	r3, [pc, #80]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d4a:	4b13      	ldr	r3, [pc, #76]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d50:	4b11      	ldr	r3, [pc, #68]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003d58:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d5a:	2230      	movs	r2, #48	@ 0x30
 8003d5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d64:	4b0c      	ldr	r3, [pc, #48]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003d70:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d72:	2207      	movs	r2, #7
 8003d74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003d76:	4b08      	ldr	r3, [pc, #32]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d7e:	2208      	movs	r2, #8
 8003d80:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d82:	4805      	ldr	r0, [pc, #20]	@ (8003d98 <MX_SPI1_Init+0x74>)
 8003d84:	f004 f9a4 	bl	80080d0 <HAL_SPI_Init>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003d8e:	f7ff fb69 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200029e0 	.word	0x200029e0
 8003d9c:	40013000 	.word	0x40013000

08003da0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08a      	sub	sp, #40	@ 0x28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da8:	f107 0314 	add.w	r3, r7, #20
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a25      	ldr	r2, [pc, #148]	@ (8003e54 <HAL_SPI_MspInit+0xb4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d143      	bne.n	8003e4a <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dc2:	4b25      	ldr	r3, [pc, #148]	@ (8003e58 <HAL_SPI_MspInit+0xb8>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc6:	4a24      	ldr	r2, [pc, #144]	@ (8003e58 <HAL_SPI_MspInit+0xb8>)
 8003dc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dce:	4b22      	ldr	r3, [pc, #136]	@ (8003e58 <HAL_SPI_MspInit+0xb8>)
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dda:	4b1f      	ldr	r3, [pc, #124]	@ (8003e58 <HAL_SPI_MspInit+0xb8>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	4a1e      	ldr	r2, [pc, #120]	@ (8003e58 <HAL_SPI_MspInit+0xb8>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003de6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e58 <HAL_SPI_MspInit+0xb8>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003df2:	4b19      	ldr	r3, [pc, #100]	@ (8003e58 <HAL_SPI_MspInit+0xb8>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	4a18      	ldr	r2, [pc, #96]	@ (8003e58 <HAL_SPI_MspInit+0xb8>)
 8003df8:	f043 0302 	orr.w	r3, r3, #2
 8003dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dfe:	4b16      	ldr	r3, [pc, #88]	@ (8003e58 <HAL_SPI_MspInit+0xb8>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e0a:	2360      	movs	r3, #96	@ 0x60
 8003e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e16:	2303      	movs	r3, #3
 8003e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e1a:	2305      	movs	r3, #5
 8003e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1e:	f107 0314 	add.w	r3, r7, #20
 8003e22:	4619      	mov	r1, r3
 8003e24:	480d      	ldr	r0, [pc, #52]	@ (8003e5c <HAL_SPI_MspInit+0xbc>)
 8003e26:	f001 fbdf 	bl	80055e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003e2a:	2320      	movs	r3, #32
 8003e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e36:	2303      	movs	r3, #3
 8003e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e3a:	2305      	movs	r3, #5
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e3e:	f107 0314 	add.w	r3, r7, #20
 8003e42:	4619      	mov	r1, r3
 8003e44:	4806      	ldr	r0, [pc, #24]	@ (8003e60 <HAL_SPI_MspInit+0xc0>)
 8003e46:	f001 fbcf 	bl	80055e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	3728      	adds	r7, #40	@ 0x28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40013000 	.word	0x40013000
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40020000 	.word	0x40020000
 8003e60:	40020400 	.word	0x40020400

08003e64 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e6e:	4802      	ldr	r0, [pc, #8]	@ (8003e78 <ST7735_Select+0x14>)
 8003e70:	f001 fd66 	bl	8005940 <HAL_GPIO_WritePin>
}
 8003e74:	bf00      	nop
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40021400 	.word	0x40021400

08003e7c <ST7735_Unselect>:

void ST7735_Unselect() {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8003e80:	2201      	movs	r2, #1
 8003e82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e86:	4802      	ldr	r0, [pc, #8]	@ (8003e90 <ST7735_Unselect+0x14>)
 8003e88:	f001 fd5a 	bl	8005940 <HAL_GPIO_WritePin>
}
 8003e8c:	bf00      	nop
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021400 	.word	0x40021400

08003e94 <ST7735_Reset>:

static void ST7735_Reset() {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e9e:	4807      	ldr	r0, [pc, #28]	@ (8003ebc <ST7735_Reset+0x28>)
 8003ea0:	f001 fd4e 	bl	8005940 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003ea4:	2005      	movs	r0, #5
 8003ea6:	f000 fe6f 	bl	8004b88 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003eb0:	4802      	ldr	r0, [pc, #8]	@ (8003ebc <ST7735_Reset+0x28>)
 8003eb2:	f001 fd45 	bl	8005940 <HAL_GPIO_WritePin>
}
 8003eb6:	bf00      	nop
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40021400 	.word	0x40021400

08003ec0 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ed0:	4806      	ldr	r0, [pc, #24]	@ (8003eec <ST7735_WriteCommand+0x2c>)
 8003ed2:	f001 fd35 	bl	8005940 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003ed6:	1df9      	adds	r1, r7, #7
 8003ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8003edc:	2201      	movs	r2, #1
 8003ede:	4804      	ldr	r0, [pc, #16]	@ (8003ef0 <ST7735_WriteCommand+0x30>)
 8003ee0:	f004 f9a1 	bl	8008226 <HAL_SPI_Transmit>
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021400 	.word	0x40021400
 8003ef0:	200029e0 	.word	0x200029e0

08003ef4 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003efe:	2201      	movs	r2, #1
 8003f00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f04:	4807      	ldr	r0, [pc, #28]	@ (8003f24 <ST7735_WriteData+0x30>)
 8003f06:	f001 fd1b 	bl	8005940 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4804      	ldr	r0, [pc, #16]	@ (8003f28 <ST7735_WriteData+0x34>)
 8003f16:	f004 f986 	bl	8008226 <HAL_SPI_Transmit>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40021400 	.word	0x40021400
 8003f28:	200029e0 	.word	0x200029e0

08003f2c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8003f3e:	e034      	b.n	8003faa <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	607a      	str	r2, [r7, #4]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8003f4a:	7afb      	ldrb	r3, [r7, #11]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ffb7 	bl	8003ec0 <ST7735_WriteCommand>

        numArgs = *addr++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003f5c:	7abb      	ldrb	r3, [r7, #10]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f64:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8003f66:	7abb      	ldrb	r3, [r7, #10]
 8003f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f6c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8003f6e:	7abb      	ldrb	r3, [r7, #10]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003f74:	7abb      	ldrb	r3, [r7, #10]
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ffbb 	bl	8003ef4 <ST7735_WriteData>
            addr += numArgs;
 8003f7e:	7abb      	ldrb	r3, [r7, #10]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4413      	add	r3, r2
 8003f84:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8003f86:	89bb      	ldrh	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	607a      	str	r2, [r7, #4]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8003f96:	89bb      	ldrh	r3, [r7, #12]
 8003f98:	2bff      	cmp	r3, #255	@ 0xff
 8003f9a:	d102      	bne.n	8003fa2 <ST7735_ExecuteCommandList+0x76>
 8003f9c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003fa0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8003fa2:	89bb      	ldrh	r3, [r7, #12]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fdef 	bl	8004b88 <HAL_Delay>
    while(numCommands--) {
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	1e5a      	subs	r2, r3, #1
 8003fae:	73fa      	strb	r2, [r7, #15]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1c5      	bne.n	8003f40 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8003fbe:	b590      	push	{r4, r7, lr}
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	4604      	mov	r4, r0
 8003fc6:	4608      	mov	r0, r1
 8003fc8:	4611      	mov	r1, r2
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4623      	mov	r3, r4
 8003fce:	71fb      	strb	r3, [r7, #7]
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	71bb      	strb	r3, [r7, #6]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	717b      	strb	r3, [r7, #5]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003fdc:	202a      	movs	r0, #42	@ 0x2a
 8003fde:	f7ff ff6f 	bl	8003ec0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	733b      	strb	r3, [r7, #12]
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	737b      	strb	r3, [r7, #13]
 8003fea:	2300      	movs	r3, #0
 8003fec:	73bb      	strb	r3, [r7, #14]
 8003fee:	797b      	ldrb	r3, [r7, #5]
 8003ff0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003ff2:	f107 030c 	add.w	r3, r7, #12
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff ff7b 	bl	8003ef4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003ffe:	202b      	movs	r0, #43	@ 0x2b
 8004000:	f7ff ff5e 	bl	8003ec0 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8004004:	79bb      	ldrb	r3, [r7, #6]
 8004006:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8004008:	793b      	ldrb	r3, [r7, #4]
 800400a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800400c:	f107 030c 	add.w	r3, r7, #12
 8004010:	2104      	movs	r1, #4
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff ff6e 	bl	8003ef4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8004018:	202c      	movs	r0, #44	@ 0x2c
 800401a:	f7ff ff51 	bl	8003ec0 <ST7735_WriteCommand>
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bd90      	pop	{r4, r7, pc}
	...

08004028 <ST7735_Init>:

void ST7735_Init() {
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
    ST7735_Select();
 800402c:	f7ff ff1a 	bl	8003e64 <ST7735_Select>
    ST7735_Reset();
 8004030:	f7ff ff30 	bl	8003e94 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8004034:	4806      	ldr	r0, [pc, #24]	@ (8004050 <ST7735_Init+0x28>)
 8004036:	f7ff ff79 	bl	8003f2c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800403a:	4806      	ldr	r0, [pc, #24]	@ (8004054 <ST7735_Init+0x2c>)
 800403c:	f7ff ff76 	bl	8003f2c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8004040:	4805      	ldr	r0, [pc, #20]	@ (8004058 <ST7735_Init+0x30>)
 8004042:	f7ff ff73 	bl	8003f2c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8004046:	f7ff ff19 	bl	8003e7c <ST7735_Unselect>
}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	08013988 	.word	0x08013988
 8004054:	080139c4 	.word	0x080139c4
 8004058:	080139d4 	.word	0x080139d4

0800405c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800405c:	b082      	sub	sp, #8
 800405e:	b590      	push	{r4, r7, lr}
 8004060:	b089      	sub	sp, #36	@ 0x24
 8004062:	af00      	add	r7, sp, #0
 8004064:	637b      	str	r3, [r7, #52]	@ 0x34
 8004066:	4603      	mov	r3, r0
 8004068:	80fb      	strh	r3, [r7, #6]
 800406a:	460b      	mov	r3, r1
 800406c:	80bb      	strh	r3, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	b2d8      	uxtb	r0, r3
 8004076:	88bb      	ldrh	r3, [r7, #4]
 8004078:	b2d9      	uxtb	r1, r3
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004082:	4413      	add	r3, r2
 8004084:	b2db      	uxtb	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b2dc      	uxtb	r4, r3
 800408a:	88bb      	ldrh	r3, [r7, #4]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004092:	4413      	add	r3, r2
 8004094:	b2db      	uxtb	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b2db      	uxtb	r3, r3
 800409a:	4622      	mov	r2, r4
 800409c:	f7ff ff8f 	bl	8003fbe <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	e043      	b.n	800412e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80040a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	3b20      	subs	r3, #32
 80040ac:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	4619      	mov	r1, r3
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	440b      	add	r3, r1
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	4413      	add	r3, r2
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	e029      	b.n	800411c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00e      	beq.n	80040f6 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80040d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	b29b      	uxth	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	743b      	strb	r3, [r7, #16]
 80040e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80040e8:	f107 0310 	add.w	r3, r7, #16
 80040ec:	2102      	movs	r1, #2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff ff00 	bl	8003ef4 <ST7735_WriteData>
 80040f4:	e00f      	b.n	8004116 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80040f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80040fa:	0a1b      	lsrs	r3, r3, #8
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	733b      	strb	r3, [r7, #12]
 8004102:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004106:	b2db      	uxtb	r3, r3
 8004108:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800410a:	f107 030c 	add.w	r3, r7, #12
 800410e:	2102      	movs	r1, #2
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff feef 	bl	8003ef4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	3301      	adds	r3, #1
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004120:	461a      	mov	r2, r3
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	4293      	cmp	r3, r2
 8004126:	d3cf      	bcc.n	80040c8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	3301      	adds	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004132:	461a      	mov	r2, r3
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	4293      	cmp	r3, r2
 8004138:	d3b5      	bcc.n	80040a6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	3724      	adds	r7, #36	@ 0x24
 8004140:	46bd      	mov	sp, r7
 8004142:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004146:	b002      	add	sp, #8
 8004148:	4770      	bx	lr

0800414a <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800414a:	b082      	sub	sp, #8
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af04      	add	r7, sp, #16
 8004152:	603a      	str	r2, [r7, #0]
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	4603      	mov	r3, r0
 8004158:	80fb      	strh	r3, [r7, #6]
 800415a:	460b      	mov	r3, r1
 800415c:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800415e:	f7ff fe81 	bl	8003e64 <ST7735_Select>

    while(*str) {
 8004162:	e02d      	b.n	80041c0 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	7d3a      	ldrb	r2, [r7, #20]
 8004168:	4413      	add	r3, r2
 800416a:	2b7f      	cmp	r3, #127	@ 0x7f
 800416c:	dd13      	ble.n	8004196 <ST7735_WriteString+0x4c>
            x = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8004172:	7d7b      	ldrb	r3, [r7, #21]
 8004174:	461a      	mov	r2, r3
 8004176:	88bb      	ldrh	r3, [r7, #4]
 8004178:	4413      	add	r3, r2
 800417a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 800417c:	88bb      	ldrh	r3, [r7, #4]
 800417e:	7d7a      	ldrb	r2, [r7, #21]
 8004180:	4413      	add	r3, r2
 8004182:	2b9f      	cmp	r3, #159	@ 0x9f
 8004184:	dc21      	bgt.n	80041ca <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b20      	cmp	r3, #32
 800418c:	d103      	bne.n	8004196 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	3301      	adds	r3, #1
 8004192:	603b      	str	r3, [r7, #0]
                continue;
 8004194:	e014      	b.n	80041c0 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	88b9      	ldrh	r1, [r7, #4]
 800419c:	88f8      	ldrh	r0, [r7, #6]
 800419e:	8c3b      	ldrh	r3, [r7, #32]
 80041a0:	9302      	str	r3, [sp, #8]
 80041a2:	8bbb      	ldrh	r3, [r7, #28]
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f7ff ff56 	bl	800405c <ST7735_WriteChar>
        x += font.width;
 80041b0:	7d3b      	ldrb	r3, [r7, #20]
 80041b2:	461a      	mov	r2, r3
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	4413      	add	r3, r2
 80041b8:	80fb      	strh	r3, [r7, #6]
        str++;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	3301      	adds	r3, #1
 80041be:	603b      	str	r3, [r7, #0]
    while(*str) {
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1cd      	bne.n	8004164 <ST7735_WriteString+0x1a>
 80041c8:	e000      	b.n	80041cc <ST7735_WriteString+0x82>
                break;
 80041ca:	bf00      	nop
    }

    ST7735_Unselect();
 80041cc:	f7ff fe56 	bl	8003e7c <ST7735_Unselect>
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041da:	b002      	add	sp, #8
 80041dc:	4770      	bx	lr
	...

080041e0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80041e0:	b590      	push	{r4, r7, lr}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4604      	mov	r4, r0
 80041e8:	4608      	mov	r0, r1
 80041ea:	4611      	mov	r1, r2
 80041ec:	461a      	mov	r2, r3
 80041ee:	4623      	mov	r3, r4
 80041f0:	80fb      	strh	r3, [r7, #6]
 80041f2:	4603      	mov	r3, r0
 80041f4:	80bb      	strh	r3, [r7, #4]
 80041f6:	460b      	mov	r3, r1
 80041f8:	807b      	strh	r3, [r7, #2]
 80041fa:	4613      	mov	r3, r2
 80041fc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	2b7f      	cmp	r3, #127	@ 0x7f
 8004202:	d858      	bhi.n	80042b6 <ST7735_FillRectangle+0xd6>
 8004204:	88bb      	ldrh	r3, [r7, #4]
 8004206:	2b9f      	cmp	r3, #159	@ 0x9f
 8004208:	d855      	bhi.n	80042b6 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800420a:	88fa      	ldrh	r2, [r7, #6]
 800420c:	887b      	ldrh	r3, [r7, #2]
 800420e:	4413      	add	r3, r2
 8004210:	2b80      	cmp	r3, #128	@ 0x80
 8004212:	dd03      	ble.n	800421c <ST7735_FillRectangle+0x3c>
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800421a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800421c:	88ba      	ldrh	r2, [r7, #4]
 800421e:	883b      	ldrh	r3, [r7, #0]
 8004220:	4413      	add	r3, r2
 8004222:	2ba0      	cmp	r3, #160	@ 0xa0
 8004224:	dd03      	ble.n	800422e <ST7735_FillRectangle+0x4e>
 8004226:	88bb      	ldrh	r3, [r7, #4]
 8004228:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800422c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800422e:	f7ff fe19 	bl	8003e64 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	b2d8      	uxtb	r0, r3
 8004236:	88bb      	ldrh	r3, [r7, #4]
 8004238:	b2d9      	uxtb	r1, r3
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	887b      	ldrh	r3, [r7, #2]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	4413      	add	r3, r2
 8004244:	b2db      	uxtb	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b2dc      	uxtb	r4, r3
 800424a:	88bb      	ldrh	r3, [r7, #4]
 800424c:	b2da      	uxtb	r2, r3
 800424e:	883b      	ldrh	r3, [r7, #0]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	4413      	add	r3, r2
 8004254:	b2db      	uxtb	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	4622      	mov	r2, r4
 800425c:	f7ff feaf 	bl	8003fbe <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8004260:	8c3b      	ldrh	r3, [r7, #32]
 8004262:	0a1b      	lsrs	r3, r3, #8
 8004264:	b29b      	uxth	r3, r3
 8004266:	b2db      	uxtb	r3, r3
 8004268:	733b      	strb	r3, [r7, #12]
 800426a:	8c3b      	ldrh	r3, [r7, #32]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8004270:	2201      	movs	r2, #1
 8004272:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004276:	4812      	ldr	r0, [pc, #72]	@ (80042c0 <ST7735_FillRectangle+0xe0>)
 8004278:	f001 fb62 	bl	8005940 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800427c:	883b      	ldrh	r3, [r7, #0]
 800427e:	80bb      	strh	r3, [r7, #4]
 8004280:	e013      	b.n	80042aa <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8004282:	887b      	ldrh	r3, [r7, #2]
 8004284:	80fb      	strh	r3, [r7, #6]
 8004286:	e00a      	b.n	800429e <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8004288:	f107 010c 	add.w	r1, r7, #12
 800428c:	f04f 33ff 	mov.w	r3, #4294967295
 8004290:	2202      	movs	r2, #2
 8004292:	480c      	ldr	r0, [pc, #48]	@ (80042c4 <ST7735_FillRectangle+0xe4>)
 8004294:	f003 ffc7 	bl	8008226 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	3b01      	subs	r3, #1
 800429c:	80fb      	strh	r3, [r7, #6]
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f1      	bne.n	8004288 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 80042a4:	88bb      	ldrh	r3, [r7, #4]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	80bb      	strh	r3, [r7, #4]
 80042aa:	88bb      	ldrh	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e8      	bne.n	8004282 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 80042b0:	f7ff fde4 	bl	8003e7c <ST7735_Unselect>
 80042b4:	e000      	b.n	80042b8 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80042b6:	bf00      	nop
}
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd90      	pop	{r4, r7, pc}
 80042be:	bf00      	nop
 80042c0:	40021400 	.word	0x40021400
 80042c4:	200029e0 	.word	0x200029e0

080042c8 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	4603      	mov	r3, r0
 80042d0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	23a0      	movs	r3, #160	@ 0xa0
 80042d8:	2280      	movs	r2, #128	@ 0x80
 80042da:	2100      	movs	r1, #0
 80042dc:	2000      	movs	r0, #0
 80042de:	f7ff ff7f 	bl	80041e0 <ST7735_FillRectangle>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004330 <HAL_MspInit+0x44>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004330 <HAL_MspInit+0x44>)
 80042f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80042fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004330 <HAL_MspInit+0x44>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800430a:	4b09      	ldr	r3, [pc, #36]	@ (8004330 <HAL_MspInit+0x44>)
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	4a08      	ldr	r2, [pc, #32]	@ (8004330 <HAL_MspInit+0x44>)
 8004310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004314:	6453      	str	r3, [r2, #68]	@ 0x44
 8004316:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <HAL_MspInit+0x44>)
 8004318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40023800 	.word	0x40023800

08004334 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004338:	4b0e      	ldr	r3, [pc, #56]	@ (8004374 <SDTimer_Handler+0x40>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d006      	beq.n	8004350 <SDTimer_Handler+0x1c>
    Timer1--;
 8004342:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <SDTimer_Handler+0x40>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	4b09      	ldr	r3, [pc, #36]	@ (8004374 <SDTimer_Handler+0x40>)
 800434e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8004350:	4b09      	ldr	r3, [pc, #36]	@ (8004378 <SDTimer_Handler+0x44>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d006      	beq.n	8004368 <SDTimer_Handler+0x34>
    Timer2--;
 800435a:	4b07      	ldr	r3, [pc, #28]	@ (8004378 <SDTimer_Handler+0x44>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b2da      	uxtb	r2, r3
 8004364:	4b04      	ldr	r3, [pc, #16]	@ (8004378 <SDTimer_Handler+0x44>)
 8004366:	701a      	strb	r2, [r3, #0]
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20002a45 	.word	0x20002a45
 8004378:	20002a46 	.word	0x20002a46

0800437c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <NMI_Handler+0x4>

08004384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <HardFault_Handler+0x4>

0800438c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004390:	bf00      	nop
 8004392:	e7fd      	b.n	8004390 <MemManage_Handler+0x4>

08004394 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <BusFault_Handler+0x4>

0800439c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043a0:	bf00      	nop
 80043a2:	e7fd      	b.n	80043a0 <UsageFault_Handler+0x4>

080043a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043b2:	b480      	push	{r7}
 80043b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80043d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004400 <SysTick_Handler+0x30>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	3301      	adds	r3, #1
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	4b08      	ldr	r3, [pc, #32]	@ (8004400 <SysTick_Handler+0x30>)
 80043e0:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80043e2:	4b07      	ldr	r3, [pc, #28]	@ (8004400 <SysTick_Handler+0x30>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b09      	cmp	r3, #9
 80043ea:	d904      	bls.n	80043f6 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 80043ec:	4b04      	ldr	r3, [pc, #16]	@ (8004400 <SysTick_Handler+0x30>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80043f2:	f7ff ff9f 	bl	8004334 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043f6:	f000 fba7 	bl	8004b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20002a44 	.word	0x20002a44

08004404 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004408:	4802      	ldr	r0, [pc, #8]	@ (8004414 <TIM7_IRQHandler+0x10>)
 800440a:	f004 fe65 	bl	80090d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800440e:	bf00      	nop
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20002a98 	.word	0x20002a98

08004418 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return 1;
 800441c:	2301      	movs	r3, #1
}
 800441e:	4618      	mov	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <_kill>:

int _kill(int pid, int sig)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004432:	f00b fa1f 	bl	800f874 <__errno>
 8004436:	4603      	mov	r3, r0
 8004438:	2216      	movs	r2, #22
 800443a:	601a      	str	r2, [r3, #0]
  return -1;
 800443c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <_exit>:

void _exit (int status)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004450:	f04f 31ff 	mov.w	r1, #4294967295
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff ffe7 	bl	8004428 <_kill>
  while (1) {}    /* Make sure we hang here */
 800445a:	bf00      	nop
 800445c:	e7fd      	b.n	800445a <_exit+0x12>

0800445e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b086      	sub	sp, #24
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	e00a      	b.n	8004486 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004470:	f3af 8000 	nop.w
 8004474:	4601      	mov	r1, r0
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	60ba      	str	r2, [r7, #8]
 800447c:	b2ca      	uxtb	r2, r1
 800447e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	3301      	adds	r3, #1
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	429a      	cmp	r2, r3
 800448c:	dbf0      	blt.n	8004470 <_read+0x12>
  }

  return len;
 800448e:	687b      	ldr	r3, [r7, #4]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	e009      	b.n	80044be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	60ba      	str	r2, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe ffdc 	bl	8003470 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	3301      	adds	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	dbf1      	blt.n	80044aa <_write+0x12>
  }
  return len;
 80044c6:	687b      	ldr	r3, [r7, #4]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <_close>:

int _close(int file)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044f8:	605a      	str	r2, [r3, #4]
  return 0;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <_isatty>:

int _isatty(int file)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004510:	2301      	movs	r3, #1
}
 8004512:	4618      	mov	r0, r3
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004540:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <_sbrk+0x5c>)
 8004542:	4b15      	ldr	r3, [pc, #84]	@ (8004598 <_sbrk+0x60>)
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800454c:	4b13      	ldr	r3, [pc, #76]	@ (800459c <_sbrk+0x64>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d102      	bne.n	800455a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004554:	4b11      	ldr	r3, [pc, #68]	@ (800459c <_sbrk+0x64>)
 8004556:	4a12      	ldr	r2, [pc, #72]	@ (80045a0 <_sbrk+0x68>)
 8004558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800455a:	4b10      	ldr	r3, [pc, #64]	@ (800459c <_sbrk+0x64>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	429a      	cmp	r2, r3
 8004566:	d207      	bcs.n	8004578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004568:	f00b f984 	bl	800f874 <__errno>
 800456c:	4603      	mov	r3, r0
 800456e:	220c      	movs	r2, #12
 8004570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004572:	f04f 33ff 	mov.w	r3, #4294967295
 8004576:	e009      	b.n	800458c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004578:	4b08      	ldr	r3, [pc, #32]	@ (800459c <_sbrk+0x64>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800457e:	4b07      	ldr	r3, [pc, #28]	@ (800459c <_sbrk+0x64>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	4a05      	ldr	r2, [pc, #20]	@ (800459c <_sbrk+0x64>)
 8004588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800458a:	68fb      	ldr	r3, [r7, #12]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20050000 	.word	0x20050000
 8004598:	00000400 	.word	0x00000400
 800459c:	20002a48 	.word	0x20002a48
 80045a0:	200033d8 	.word	0x200033d8

080045a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045a8:	4b06      	ldr	r3, [pc, #24]	@ (80045c4 <SystemInit+0x20>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ae:	4a05      	ldr	r2, [pc, #20]	@ (80045c4 <SystemInit+0x20>)
 80045b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045b8:	bf00      	nop
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	e000ed00 	.word	0xe000ed00

080045c8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08e      	sub	sp, #56	@ 0x38
 80045cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	609a      	str	r2, [r3, #8]
 80045da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045dc:	f107 031c 	add.w	r3, r7, #28
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045e8:	463b      	mov	r3, r7
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	605a      	str	r2, [r3, #4]
 80045f0:	609a      	str	r2, [r3, #8]
 80045f2:	60da      	str	r2, [r3, #12]
 80045f4:	611a      	str	r2, [r3, #16]
 80045f6:	615a      	str	r2, [r3, #20]
 80045f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80045fa:	4b2d      	ldr	r3, [pc, #180]	@ (80046b0 <MX_TIM3_Init+0xe8>)
 80045fc:	4a2d      	ldr	r2, [pc, #180]	@ (80046b4 <MX_TIM3_Init+0xec>)
 80045fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8004600:	4b2b      	ldr	r3, [pc, #172]	@ (80046b0 <MX_TIM3_Init+0xe8>)
 8004602:	2247      	movs	r2, #71	@ 0x47
 8004604:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004606:	4b2a      	ldr	r3, [pc, #168]	@ (80046b0 <MX_TIM3_Init+0xe8>)
 8004608:	2200      	movs	r2, #0
 800460a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800460c:	4b28      	ldr	r3, [pc, #160]	@ (80046b0 <MX_TIM3_Init+0xe8>)
 800460e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004612:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004614:	4b26      	ldr	r3, [pc, #152]	@ (80046b0 <MX_TIM3_Init+0xe8>)
 8004616:	2200      	movs	r2, #0
 8004618:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800461a:	4b25      	ldr	r3, [pc, #148]	@ (80046b0 <MX_TIM3_Init+0xe8>)
 800461c:	2200      	movs	r2, #0
 800461e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004620:	4823      	ldr	r0, [pc, #140]	@ (80046b0 <MX_TIM3_Init+0xe8>)
 8004622:	f004 fb2d 	bl	8008c80 <HAL_TIM_Base_Init>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800462c:	f7fe ff1a 	bl	8003464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004634:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004636:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800463a:	4619      	mov	r1, r3
 800463c:	481c      	ldr	r0, [pc, #112]	@ (80046b0 <MX_TIM3_Init+0xe8>)
 800463e:	f004 ff67 	bl	8009510 <HAL_TIM_ConfigClockSource>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004648:	f7fe ff0c 	bl	8003464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800464c:	4818      	ldr	r0, [pc, #96]	@ (80046b0 <MX_TIM3_Init+0xe8>)
 800464e:	f004 fbe7 	bl	8008e20 <HAL_TIM_PWM_Init>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004658:	f7fe ff04 	bl	8003464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800465c:	2300      	movs	r3, #0
 800465e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004660:	2300      	movs	r3, #0
 8004662:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004664:	f107 031c 	add.w	r3, r7, #28
 8004668:	4619      	mov	r1, r3
 800466a:	4811      	ldr	r0, [pc, #68]	@ (80046b0 <MX_TIM3_Init+0xe8>)
 800466c:	f005 fc0c 	bl	8009e88 <HAL_TIMEx_MasterConfigSynchronization>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004676:	f7fe fef5 	bl	8003464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800467a:	2360      	movs	r3, #96	@ 0x60
 800467c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800467e:	2300      	movs	r3, #0
 8004680:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800468a:	463b      	mov	r3, r7
 800468c:	2200      	movs	r2, #0
 800468e:	4619      	mov	r1, r3
 8004690:	4807      	ldr	r0, [pc, #28]	@ (80046b0 <MX_TIM3_Init+0xe8>)
 8004692:	f004 fe29 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800469c:	f7fe fee2 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80046a0:	4803      	ldr	r0, [pc, #12]	@ (80046b0 <MX_TIM3_Init+0xe8>)
 80046a2:	f000 f87b 	bl	800479c <HAL_TIM_MspPostInit>

}
 80046a6:	bf00      	nop
 80046a8:	3738      	adds	r7, #56	@ 0x38
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20002a4c 	.word	0x20002a4c
 80046b4:	40000400 	.word	0x40000400

080046b8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046be:	1d3b      	adds	r3, r7, #4
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	605a      	str	r2, [r3, #4]
 80046c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80046c8:	4b15      	ldr	r3, [pc, #84]	@ (8004720 <MX_TIM7_Init+0x68>)
 80046ca:	4a16      	ldr	r2, [pc, #88]	@ (8004724 <MX_TIM7_Init+0x6c>)
 80046cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 80046ce:	4b14      	ldr	r3, [pc, #80]	@ (8004720 <MX_TIM7_Init+0x68>)
 80046d0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80046d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046d6:	4b12      	ldr	r3, [pc, #72]	@ (8004720 <MX_TIM7_Init+0x68>)
 80046d8:	2200      	movs	r2, #0
 80046da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80046dc:	4b10      	ldr	r3, [pc, #64]	@ (8004720 <MX_TIM7_Init+0x68>)
 80046de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80046e2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004720 <MX_TIM7_Init+0x68>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80046ea:	480d      	ldr	r0, [pc, #52]	@ (8004720 <MX_TIM7_Init+0x68>)
 80046ec:	f004 fac8 	bl	8008c80 <HAL_TIM_Base_Init>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80046f6:	f7fe feb5 	bl	8003464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004702:	1d3b      	adds	r3, r7, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4806      	ldr	r0, [pc, #24]	@ (8004720 <MX_TIM7_Init+0x68>)
 8004708:	f005 fbbe 	bl	8009e88 <HAL_TIMEx_MasterConfigSynchronization>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004712:	f7fe fea7 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004716:	bf00      	nop
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20002a98 	.word	0x20002a98
 8004724:	40001400 	.word	0x40001400

08004728 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a16      	ldr	r2, [pc, #88]	@ (8004790 <HAL_TIM_Base_MspInit+0x68>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d10c      	bne.n	8004754 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800473a:	4b16      	ldr	r3, [pc, #88]	@ (8004794 <HAL_TIM_Base_MspInit+0x6c>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	4a15      	ldr	r2, [pc, #84]	@ (8004794 <HAL_TIM_Base_MspInit+0x6c>)
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	6413      	str	r3, [r2, #64]	@ 0x40
 8004746:	4b13      	ldr	r3, [pc, #76]	@ (8004794 <HAL_TIM_Base_MspInit+0x6c>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004752:	e018      	b.n	8004786 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a0f      	ldr	r2, [pc, #60]	@ (8004798 <HAL_TIM_Base_MspInit+0x70>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d113      	bne.n	8004786 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800475e:	4b0d      	ldr	r3, [pc, #52]	@ (8004794 <HAL_TIM_Base_MspInit+0x6c>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	4a0c      	ldr	r2, [pc, #48]	@ (8004794 <HAL_TIM_Base_MspInit+0x6c>)
 8004764:	f043 0320 	orr.w	r3, r3, #32
 8004768:	6413      	str	r3, [r2, #64]	@ 0x40
 800476a:	4b0a      	ldr	r3, [pc, #40]	@ (8004794 <HAL_TIM_Base_MspInit+0x6c>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004776:	2200      	movs	r2, #0
 8004778:	2100      	movs	r1, #0
 800477a:	2037      	movs	r0, #55	@ 0x37
 800477c:	f000 fefd 	bl	800557a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004780:	2037      	movs	r0, #55	@ 0x37
 8004782:	f000 ff16 	bl	80055b2 <HAL_NVIC_EnableIRQ>
}
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40000400 	.word	0x40000400
 8004794:	40023800 	.word	0x40023800
 8004798:	40001400 	.word	0x40001400

0800479c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a4:	f107 030c 	add.w	r3, r7, #12
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	605a      	str	r2, [r3, #4]
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	60da      	str	r2, [r3, #12]
 80047b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a11      	ldr	r2, [pc, #68]	@ (8004800 <HAL_TIM_MspPostInit+0x64>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d11b      	bne.n	80047f6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047be:	4b11      	ldr	r3, [pc, #68]	@ (8004804 <HAL_TIM_MspPostInit+0x68>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c2:	4a10      	ldr	r2, [pc, #64]	@ (8004804 <HAL_TIM_MspPostInit+0x68>)
 80047c4:	f043 0304 	orr.w	r3, r3, #4
 80047c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004804 <HAL_TIM_MspPostInit+0x68>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047d6:	2340      	movs	r3, #64	@ 0x40
 80047d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047da:	2302      	movs	r3, #2
 80047dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047e6:	2302      	movs	r3, #2
 80047e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047ea:	f107 030c 	add.w	r3, r7, #12
 80047ee:	4619      	mov	r1, r3
 80047f0:	4805      	ldr	r0, [pc, #20]	@ (8004808 <HAL_TIM_MspPostInit+0x6c>)
 80047f2:	f000 fef9 	bl	80055e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80047f6:	bf00      	nop
 80047f8:	3720      	adds	r7, #32
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40000400 	.word	0x40000400
 8004804:	40023800 	.word	0x40023800
 8004808:	40020800 	.word	0x40020800

0800480c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004810:	4b14      	ldr	r3, [pc, #80]	@ (8004864 <MX_USART3_UART_Init+0x58>)
 8004812:	4a15      	ldr	r2, [pc, #84]	@ (8004868 <MX_USART3_UART_Init+0x5c>)
 8004814:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004816:	4b13      	ldr	r3, [pc, #76]	@ (8004864 <MX_USART3_UART_Init+0x58>)
 8004818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800481c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800481e:	4b11      	ldr	r3, [pc, #68]	@ (8004864 <MX_USART3_UART_Init+0x58>)
 8004820:	2200      	movs	r2, #0
 8004822:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004824:	4b0f      	ldr	r3, [pc, #60]	@ (8004864 <MX_USART3_UART_Init+0x58>)
 8004826:	2200      	movs	r2, #0
 8004828:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800482a:	4b0e      	ldr	r3, [pc, #56]	@ (8004864 <MX_USART3_UART_Init+0x58>)
 800482c:	2200      	movs	r2, #0
 800482e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004830:	4b0c      	ldr	r3, [pc, #48]	@ (8004864 <MX_USART3_UART_Init+0x58>)
 8004832:	220c      	movs	r2, #12
 8004834:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004836:	4b0b      	ldr	r3, [pc, #44]	@ (8004864 <MX_USART3_UART_Init+0x58>)
 8004838:	2200      	movs	r2, #0
 800483a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800483c:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <MX_USART3_UART_Init+0x58>)
 800483e:	2200      	movs	r2, #0
 8004840:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004842:	4b08      	ldr	r3, [pc, #32]	@ (8004864 <MX_USART3_UART_Init+0x58>)
 8004844:	2200      	movs	r2, #0
 8004846:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004848:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <MX_USART3_UART_Init+0x58>)
 800484a:	2200      	movs	r2, #0
 800484c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800484e:	4805      	ldr	r0, [pc, #20]	@ (8004864 <MX_USART3_UART_Init+0x58>)
 8004850:	f005 fbc6 	bl	8009fe0 <HAL_UART_Init>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800485a:	f7fe fe03 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20002ae4 	.word	0x20002ae4
 8004868:	40004800 	.word	0x40004800

0800486c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b0aa      	sub	sp, #168	@ 0xa8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004874:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	605a      	str	r2, [r3, #4]
 800487e:	609a      	str	r2, [r3, #8]
 8004880:	60da      	str	r2, [r3, #12]
 8004882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004884:	f107 0310 	add.w	r3, r7, #16
 8004888:	2284      	movs	r2, #132	@ 0x84
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f00a ff8f 	bl	800f7b0 <memset>
  if(uartHandle->Instance==USART3)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a22      	ldr	r2, [pc, #136]	@ (8004920 <HAL_UART_MspInit+0xb4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d13c      	bne.n	8004916 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800489c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80048a2:	2300      	movs	r3, #0
 80048a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048a6:	f107 0310 	add.w	r3, r7, #16
 80048aa:	4618      	mov	r0, r3
 80048ac:	f003 f820 	bl	80078f0 <HAL_RCCEx_PeriphCLKConfig>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80048b6:	f7fe fdd5 	bl	8003464 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80048ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004924 <HAL_UART_MspInit+0xb8>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	4a19      	ldr	r2, [pc, #100]	@ (8004924 <HAL_UART_MspInit+0xb8>)
 80048c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80048c6:	4b17      	ldr	r3, [pc, #92]	@ (8004924 <HAL_UART_MspInit+0xb8>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048d2:	4b14      	ldr	r3, [pc, #80]	@ (8004924 <HAL_UART_MspInit+0xb8>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d6:	4a13      	ldr	r2, [pc, #76]	@ (8004924 <HAL_UART_MspInit+0xb8>)
 80048d8:	f043 0308 	orr.w	r3, r3, #8
 80048dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80048de:	4b11      	ldr	r3, [pc, #68]	@ (8004924 <HAL_UART_MspInit+0xb8>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	60bb      	str	r3, [r7, #8]
 80048e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80048ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80048ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f2:	2302      	movs	r3, #2
 80048f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048fe:	2303      	movs	r3, #3
 8004900:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004904:	2307      	movs	r3, #7
 8004906:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800490a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800490e:	4619      	mov	r1, r3
 8004910:	4805      	ldr	r0, [pc, #20]	@ (8004928 <HAL_UART_MspInit+0xbc>)
 8004912:	f000 fe69 	bl	80055e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004916:	bf00      	nop
 8004918:	37a8      	adds	r7, #168	@ 0xa8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40004800 	.word	0x40004800
 8004924:	40023800 	.word	0x40023800
 8004928:	40020c00 	.word	0x40020c00

0800492c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004930:	4b14      	ldr	r3, [pc, #80]	@ (8004984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004932:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004936:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004938:	4b12      	ldr	r3, [pc, #72]	@ (8004984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800493a:	2206      	movs	r2, #6
 800493c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800493e:	4b11      	ldr	r3, [pc, #68]	@ (8004984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004940:	2202      	movs	r2, #2
 8004942:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004944:	4b0f      	ldr	r3, [pc, #60]	@ (8004984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004946:	2200      	movs	r2, #0
 8004948:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800494a:	4b0e      	ldr	r3, [pc, #56]	@ (8004984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800494c:	2202      	movs	r2, #2
 800494e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8004950:	4b0c      	ldr	r3, [pc, #48]	@ (8004984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004952:	2201      	movs	r2, #1
 8004954:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004956:	4b0b      	ldr	r3, [pc, #44]	@ (8004984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004958:	2200      	movs	r2, #0
 800495a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800495c:	4b09      	ldr	r3, [pc, #36]	@ (8004984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800495e:	2200      	movs	r2, #0
 8004960:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004962:	4b08      	ldr	r3, [pc, #32]	@ (8004984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004964:	2201      	movs	r2, #1
 8004966:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004968:	4b06      	ldr	r3, [pc, #24]	@ (8004984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800496a:	2200      	movs	r2, #0
 800496c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800496e:	4805      	ldr	r0, [pc, #20]	@ (8004984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004970:	f002 f9a9 	bl	8006cc6 <HAL_PCD_Init>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800497a:	f7fe fd73 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20002b6c 	.word	0x20002b6c

08004988 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b0ac      	sub	sp, #176	@ 0xb0
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004990:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	609a      	str	r2, [r3, #8]
 800499c:	60da      	str	r2, [r3, #12]
 800499e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049a0:	f107 0318 	add.w	r3, r7, #24
 80049a4:	2284      	movs	r2, #132	@ 0x84
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f00a ff01 	bl	800f7b0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049b6:	d159      	bne.n	8004a6c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80049b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80049bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80049be:	2300      	movs	r3, #0
 80049c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049c4:	f107 0318 	add.w	r3, r7, #24
 80049c8:	4618      	mov	r0, r3
 80049ca:	f002 ff91 	bl	80078f0 <HAL_RCCEx_PeriphCLKConfig>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80049d4:	f7fe fd46 	bl	8003464 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049d8:	4b26      	ldr	r3, [pc, #152]	@ (8004a74 <HAL_PCD_MspInit+0xec>)
 80049da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049dc:	4a25      	ldr	r2, [pc, #148]	@ (8004a74 <HAL_PCD_MspInit+0xec>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80049e4:	4b23      	ldr	r3, [pc, #140]	@ (8004a74 <HAL_PCD_MspInit+0xec>)
 80049e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80049f0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80049f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f8:	2302      	movs	r3, #2
 80049fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a04:	2303      	movs	r3, #3
 8004a06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004a0a:	230a      	movs	r3, #10
 8004a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004a14:	4619      	mov	r1, r3
 8004a16:	4818      	ldr	r0, [pc, #96]	@ (8004a78 <HAL_PCD_MspInit+0xf0>)
 8004a18:	f000 fde6 	bl	80055e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004a1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a24:	2300      	movs	r3, #0
 8004a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004a30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004a34:	4619      	mov	r1, r3
 8004a36:	4810      	ldr	r0, [pc, #64]	@ (8004a78 <HAL_PCD_MspInit+0xf0>)
 8004a38:	f000 fdd6 	bl	80055e8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a74 <HAL_PCD_MspInit+0xec>)
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a40:	4a0c      	ldr	r2, [pc, #48]	@ (8004a74 <HAL_PCD_MspInit+0xec>)
 8004a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a46:	6353      	str	r3, [r2, #52]	@ 0x34
 8004a48:	4b0a      	ldr	r3, [pc, #40]	@ (8004a74 <HAL_PCD_MspInit+0xec>)
 8004a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4b07      	ldr	r3, [pc, #28]	@ (8004a74 <HAL_PCD_MspInit+0xec>)
 8004a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a58:	4a06      	ldr	r2, [pc, #24]	@ (8004a74 <HAL_PCD_MspInit+0xec>)
 8004a5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a60:	4b04      	ldr	r3, [pc, #16]	@ (8004a74 <HAL_PCD_MspInit+0xec>)
 8004a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	37b0      	adds	r7, #176	@ 0xb0
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40023800 	.word	0x40023800
 8004a78:	40020000 	.word	0x40020000

08004a7c <Reset_Handler>:
 8004a7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ab4 <LoopFillZerobss+0xe>
 8004a80:	f7ff fd90 	bl	80045a4 <SystemInit>
 8004a84:	480c      	ldr	r0, [pc, #48]	@ (8004ab8 <LoopFillZerobss+0x12>)
 8004a86:	490d      	ldr	r1, [pc, #52]	@ (8004abc <LoopFillZerobss+0x16>)
 8004a88:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac0 <LoopFillZerobss+0x1a>)
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e002      	b.n	8004a94 <LoopCopyDataInit>

08004a8e <CopyDataInit>:
 8004a8e:	58d4      	ldr	r4, [r2, r3]
 8004a90:	50c4      	str	r4, [r0, r3]
 8004a92:	3304      	adds	r3, #4

08004a94 <LoopCopyDataInit>:
 8004a94:	18c4      	adds	r4, r0, r3
 8004a96:	428c      	cmp	r4, r1
 8004a98:	d3f9      	bcc.n	8004a8e <CopyDataInit>
 8004a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac4 <LoopFillZerobss+0x1e>)
 8004a9c:	4c0a      	ldr	r4, [pc, #40]	@ (8004ac8 <LoopFillZerobss+0x22>)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e001      	b.n	8004aa6 <LoopFillZerobss>

08004aa2 <FillZerobss>:
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	3204      	adds	r2, #4

08004aa6 <LoopFillZerobss>:
 8004aa6:	42a2      	cmp	r2, r4
 8004aa8:	d3fb      	bcc.n	8004aa2 <FillZerobss>
 8004aaa:	f00a fee9 	bl	800f880 <__libc_init_array>
 8004aae:	f7fe fb31 	bl	8003114 <main>
 8004ab2:	4770      	bx	lr
 8004ab4:	20050000 	.word	0x20050000
 8004ab8:	20000000 	.word	0x20000000
 8004abc:	20000240 	.word	0x20000240
 8004ac0:	08014298 	.word	0x08014298
 8004ac4:	20000240 	.word	0x20000240
 8004ac8:	200033d8 	.word	0x200033d8

08004acc <ADC_IRQHandler>:
 8004acc:	e7fe      	b.n	8004acc <ADC_IRQHandler>

08004ace <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ad2:	2003      	movs	r0, #3
 8004ad4:	f000 fd46 	bl	8005564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f000 f805 	bl	8004ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ade:	f7ff fc05 	bl	80042ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004af0:	4b12      	ldr	r3, [pc, #72]	@ (8004b3c <HAL_InitTick+0x54>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <HAL_InitTick+0x58>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	4619      	mov	r1, r3
 8004afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fd61 	bl	80055ce <HAL_SYSTICK_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e00e      	b.n	8004b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b0f      	cmp	r3, #15
 8004b1a:	d80a      	bhi.n	8004b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	f000 fd29 	bl	800557a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b28:	4a06      	ldr	r2, [pc, #24]	@ (8004b44 <HAL_InitTick+0x5c>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e000      	b.n	8004b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000058 	.word	0x20000058
 8004b40:	20000060 	.word	0x20000060
 8004b44:	2000005c 	.word	0x2000005c

08004b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <HAL_IncTick+0x20>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <HAL_IncTick+0x24>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4413      	add	r3, r2
 8004b58:	4a04      	ldr	r2, [pc, #16]	@ (8004b6c <HAL_IncTick+0x24>)
 8004b5a:	6013      	str	r3, [r2, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000060 	.word	0x20000060
 8004b6c:	2000304c 	.word	0x2000304c

08004b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return uwTick;
 8004b74:	4b03      	ldr	r3, [pc, #12]	@ (8004b84 <HAL_GetTick+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	2000304c 	.word	0x2000304c

08004b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b90:	f7ff ffee 	bl	8004b70 <HAL_GetTick>
 8004b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d005      	beq.n	8004bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bcc <HAL_Delay+0x44>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bae:	bf00      	nop
 8004bb0:	f7ff ffde 	bl	8004b70 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d8f7      	bhi.n	8004bb0 <HAL_Delay+0x28>
  {
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000060 	.word	0x20000060

08004bd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e031      	b.n	8004c4a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d109      	bne.n	8004c02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fd f944 	bl	8001e7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d116      	bne.n	8004c3c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c12:	4b10      	ldr	r3, [pc, #64]	@ (8004c54 <HAL_ADC_Init+0x84>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	f043 0202 	orr.w	r2, r3, #2
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fad6 	bl	80051d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	f043 0201 	orr.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c3a:	e001      	b.n	8004c40 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	ffffeefd 	.word	0xffffeefd

08004c58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_ADC_Start+0x1a>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e0ad      	b.n	8004dce <HAL_ADC_Start+0x176>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d018      	beq.n	8004cba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004c98:	4b50      	ldr	r3, [pc, #320]	@ (8004ddc <HAL_ADC_Start+0x184>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a50      	ldr	r2, [pc, #320]	@ (8004de0 <HAL_ADC_Start+0x188>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	0c9a      	lsrs	r2, r3, #18
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	4413      	add	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004cac:	e002      	b.n	8004cb4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f9      	bne.n	8004cae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d175      	bne.n	8004db4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ccc:	4b45      	ldr	r3, [pc, #276]	@ (8004de4 <HAL_ADC_Start+0x18c>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004cee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d02:	d106      	bne.n	8004d12 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d08:	f023 0206 	bic.w	r2, r3, #6
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004d10:	e002      	b.n	8004d18 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004d28:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004de8 <HAL_ADC_Start+0x190>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10f      	bne.n	8004d56 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d143      	bne.n	8004dcc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	e03a      	b.n	8004dcc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a24      	ldr	r2, [pc, #144]	@ (8004dec <HAL_ADC_Start+0x194>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10e      	bne.n	8004d7e <HAL_ADC_Start+0x126>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d107      	bne.n	8004d7e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004d7c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004de8 <HAL_ADC_Start+0x190>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d120      	bne.n	8004dcc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a18      	ldr	r2, [pc, #96]	@ (8004df0 <HAL_ADC_Start+0x198>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d11b      	bne.n	8004dcc <HAL_ADC_Start+0x174>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d114      	bne.n	8004dcc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004db0:	609a      	str	r2, [r3, #8]
 8004db2:	e00b      	b.n	8004dcc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db8:	f043 0210 	orr.w	r2, r3, #16
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc4:	f043 0201 	orr.w	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20000058 	.word	0x20000058
 8004de0:	431bde83 	.word	0x431bde83
 8004de4:	fffff8fe 	.word	0xfffff8fe
 8004de8:	40012300 	.word	0x40012300
 8004dec:	40012000 	.word	0x40012000
 8004df0:	40012200 	.word	0x40012200

08004df4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e10:	d113      	bne.n	8004e3a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e20:	d10b      	bne.n	8004e3a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e063      	b.n	8004f02 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004e3a:	f7ff fe99 	bl	8004b70 <HAL_GetTick>
 8004e3e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e40:	e021      	b.n	8004e86 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d01d      	beq.n	8004e86 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <HAL_ADC_PollForConversion+0x6c>
 8004e50:	f7ff fe8e 	bl	8004b70 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d212      	bcs.n	8004e86 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d00b      	beq.n	8004e86 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	f043 0204 	orr.w	r2, r3, #4
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e03d      	b.n	8004f02 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d1d6      	bne.n	8004e42 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0212 	mvn.w	r2, #18
 8004e9c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d123      	bne.n	8004f00 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d11f      	bne.n	8004f00 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d006      	beq.n	8004edc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d111      	bne.n	8004f00 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	f043 0201 	orr.w	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_ADC_ConfigChannel+0x1c>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e136      	b.n	80051ae <HAL_ADC_ConfigChannel+0x28a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b09      	cmp	r3, #9
 8004f4e:	d93a      	bls.n	8004fc6 <HAL_ADC_ConfigChannel+0xa2>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f58:	d035      	beq.n	8004fc6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68d9      	ldr	r1, [r3, #12]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	4613      	mov	r3, r2
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3b1e      	subs	r3, #30
 8004f70:	2207      	movs	r2, #7
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	43da      	mvns	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	400a      	ands	r2, r1
 8004f7e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a8d      	ldr	r2, [pc, #564]	@ (80051bc <HAL_ADC_ConfigChannel+0x298>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d10a      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68d9      	ldr	r1, [r3, #12]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	061a      	lsls	r2, r3, #24
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f9e:	e035      	b.n	800500c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68d9      	ldr	r1, [r3, #12]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4403      	add	r3, r0
 8004fb8:	3b1e      	subs	r3, #30
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fc4:	e022      	b.n	800500c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6919      	ldr	r1, [r3, #16]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	4413      	add	r3, r2
 8004fda:	2207      	movs	r2, #7
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	43da      	mvns	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	400a      	ands	r2, r1
 8004fe8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6919      	ldr	r1, [r3, #16]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	4403      	add	r3, r0
 8005002:	409a      	lsls	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b06      	cmp	r3, #6
 8005012:	d824      	bhi.n	800505e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	3b05      	subs	r3, #5
 8005026:	221f      	movs	r2, #31
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43da      	mvns	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	400a      	ands	r2, r1
 8005034:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	4618      	mov	r0, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	3b05      	subs	r3, #5
 8005050:	fa00 f203 	lsl.w	r2, r0, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	635a      	str	r2, [r3, #52]	@ 0x34
 800505c:	e04c      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b0c      	cmp	r3, #12
 8005064:	d824      	bhi.n	80050b0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	3b23      	subs	r3, #35	@ 0x23
 8005078:	221f      	movs	r2, #31
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43da      	mvns	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	400a      	ands	r2, r1
 8005086:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	4618      	mov	r0, r3
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	3b23      	subs	r3, #35	@ 0x23
 80050a2:	fa00 f203 	lsl.w	r2, r0, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80050ae:	e023      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	3b41      	subs	r3, #65	@ 0x41
 80050c2:	221f      	movs	r2, #31
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	43da      	mvns	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	400a      	ands	r2, r1
 80050d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	4618      	mov	r0, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	3b41      	subs	r3, #65	@ 0x41
 80050ec:	fa00 f203 	lsl.w	r2, r0, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a30      	ldr	r2, [pc, #192]	@ (80051c0 <HAL_ADC_ConfigChannel+0x29c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10a      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x1f4>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800510a:	d105      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800510c:	4b2d      	ldr	r3, [pc, #180]	@ (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4a2c      	ldr	r2, [pc, #176]	@ (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005112:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005116:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a28      	ldr	r2, [pc, #160]	@ (80051c0 <HAL_ADC_ConfigChannel+0x29c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d10f      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x21e>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b12      	cmp	r3, #18
 8005128:	d10b      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800512a:	4b26      	ldr	r3, [pc, #152]	@ (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4a25      	ldr	r2, [pc, #148]	@ (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005130:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005134:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005136:	4b23      	ldr	r3, [pc, #140]	@ (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4a22      	ldr	r2, [pc, #136]	@ (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800513c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005140:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1e      	ldr	r2, [pc, #120]	@ (80051c0 <HAL_ADC_ConfigChannel+0x29c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d12b      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x280>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1a      	ldr	r2, [pc, #104]	@ (80051bc <HAL_ADC_ConfigChannel+0x298>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <HAL_ADC_ConfigChannel+0x23a>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b11      	cmp	r3, #17
 800515c:	d122      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800515e:	4b19      	ldr	r3, [pc, #100]	@ (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4a18      	ldr	r2, [pc, #96]	@ (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005164:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005168:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800516a:	4b16      	ldr	r3, [pc, #88]	@ (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4a15      	ldr	r2, [pc, #84]	@ (80051c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005170:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005174:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a10      	ldr	r2, [pc, #64]	@ (80051bc <HAL_ADC_ConfigChannel+0x298>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d111      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005180:	4b11      	ldr	r3, [pc, #68]	@ (80051c8 <HAL_ADC_ConfigChannel+0x2a4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a11      	ldr	r2, [pc, #68]	@ (80051cc <HAL_ADC_ConfigChannel+0x2a8>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	0c9a      	lsrs	r2, r3, #18
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005196:	e002      	b.n	800519e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3b01      	subs	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1f9      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	10000012 	.word	0x10000012
 80051c0:	40012000 	.word	0x40012000
 80051c4:	40012300 	.word	0x40012300
 80051c8:	20000058 	.word	0x20000058
 80051cc:	431bde83 	.word	0x431bde83

080051d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80051d8:	4b78      	ldr	r3, [pc, #480]	@ (80053bc <ADC_Init+0x1ec>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4a77      	ldr	r2, [pc, #476]	@ (80053bc <ADC_Init+0x1ec>)
 80051de:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80051e2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80051e4:	4b75      	ldr	r3, [pc, #468]	@ (80053bc <ADC_Init+0x1ec>)
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	4973      	ldr	r1, [pc, #460]	@ (80053bc <ADC_Init+0x1ec>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005200:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6859      	ldr	r1, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	021a      	lsls	r2, r3, #8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005224:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6859      	ldr	r1, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005246:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6899      	ldr	r1, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525e:	4a58      	ldr	r2, [pc, #352]	@ (80053c0 <ADC_Init+0x1f0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d022      	beq.n	80052aa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005272:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6899      	ldr	r1, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005294:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6899      	ldr	r1, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	609a      	str	r2, [r3, #8]
 80052a8:	e00f      	b.n	80052ca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80052c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0202 	bic.w	r2, r2, #2
 80052d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6899      	ldr	r1, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	005a      	lsls	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01b      	beq.n	8005330 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005306:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005316:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005322:	3b01      	subs	r3, #1
 8005324:	035a      	lsls	r2, r3, #13
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	e007      	b.n	8005340 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800533e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800534e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	3b01      	subs	r3, #1
 800535c:	051a      	lsls	r2, r3, #20
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005374:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6899      	ldr	r1, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005382:	025a      	lsls	r2, r3, #9
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800539a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6899      	ldr	r1, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	029a      	lsls	r2, r3, #10
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	609a      	str	r2, [r3, #8]
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	40012300 	.word	0x40012300
 80053c0:	0f000001 	.word	0x0f000001

080053c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <__NVIC_SetPriorityGrouping+0x40>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80053e0:	4013      	ands	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80053ec:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <__NVIC_SetPriorityGrouping+0x44>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053f2:	4a04      	ldr	r2, [pc, #16]	@ (8005404 <__NVIC_SetPriorityGrouping+0x40>)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	60d3      	str	r3, [r2, #12]
}
 80053f8:	bf00      	nop
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	e000ed00 	.word	0xe000ed00
 8005408:	05fa0000 	.word	0x05fa0000

0800540c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005410:	4b04      	ldr	r3, [pc, #16]	@ (8005424 <__NVIC_GetPriorityGrouping+0x18>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	0a1b      	lsrs	r3, r3, #8
 8005416:	f003 0307 	and.w	r3, r3, #7
}
 800541a:	4618      	mov	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	e000ed00 	.word	0xe000ed00

08005428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005436:	2b00      	cmp	r3, #0
 8005438:	db0b      	blt.n	8005452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	f003 021f 	and.w	r2, r3, #31
 8005440:	4907      	ldr	r1, [pc, #28]	@ (8005460 <__NVIC_EnableIRQ+0x38>)
 8005442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	2001      	movs	r0, #1
 800544a:	fa00 f202 	lsl.w	r2, r0, r2
 800544e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	e000e100 	.word	0xe000e100

08005464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	6039      	str	r1, [r7, #0]
 800546e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005474:	2b00      	cmp	r3, #0
 8005476:	db0a      	blt.n	800548e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	b2da      	uxtb	r2, r3
 800547c:	490c      	ldr	r1, [pc, #48]	@ (80054b0 <__NVIC_SetPriority+0x4c>)
 800547e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005482:	0112      	lsls	r2, r2, #4
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	440b      	add	r3, r1
 8005488:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800548c:	e00a      	b.n	80054a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	b2da      	uxtb	r2, r3
 8005492:	4908      	ldr	r1, [pc, #32]	@ (80054b4 <__NVIC_SetPriority+0x50>)
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	3b04      	subs	r3, #4
 800549c:	0112      	lsls	r2, r2, #4
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	440b      	add	r3, r1
 80054a2:	761a      	strb	r2, [r3, #24]
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	e000e100 	.word	0xe000e100
 80054b4:	e000ed00 	.word	0xe000ed00

080054b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b089      	sub	sp, #36	@ 0x24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f1c3 0307 	rsb	r3, r3, #7
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	bf28      	it	cs
 80054d6:	2304      	movcs	r3, #4
 80054d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	3304      	adds	r3, #4
 80054de:	2b06      	cmp	r3, #6
 80054e0:	d902      	bls.n	80054e8 <NVIC_EncodePriority+0x30>
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	3b03      	subs	r3, #3
 80054e6:	e000      	b.n	80054ea <NVIC_EncodePriority+0x32>
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054ec:	f04f 32ff 	mov.w	r2, #4294967295
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	43da      	mvns	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	401a      	ands	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005500:	f04f 31ff 	mov.w	r1, #4294967295
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	fa01 f303 	lsl.w	r3, r1, r3
 800550a:	43d9      	mvns	r1, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005510:	4313      	orrs	r3, r2
         );
}
 8005512:	4618      	mov	r0, r3
 8005514:	3724      	adds	r7, #36	@ 0x24
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3b01      	subs	r3, #1
 800552c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005530:	d301      	bcc.n	8005536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005532:	2301      	movs	r3, #1
 8005534:	e00f      	b.n	8005556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005536:	4a0a      	ldr	r2, [pc, #40]	@ (8005560 <SysTick_Config+0x40>)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3b01      	subs	r3, #1
 800553c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800553e:	210f      	movs	r1, #15
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	f7ff ff8e 	bl	8005464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005548:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <SysTick_Config+0x40>)
 800554a:	2200      	movs	r2, #0
 800554c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800554e:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <SysTick_Config+0x40>)
 8005550:	2207      	movs	r2, #7
 8005552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	e000e010 	.word	0xe000e010

08005564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff ff29 	bl	80053c4 <__NVIC_SetPriorityGrouping>
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800557a:	b580      	push	{r7, lr}
 800557c:	b086      	sub	sp, #24
 800557e:	af00      	add	r7, sp, #0
 8005580:	4603      	mov	r3, r0
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800558c:	f7ff ff3e 	bl	800540c <__NVIC_GetPriorityGrouping>
 8005590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	6978      	ldr	r0, [r7, #20]
 8005598:	f7ff ff8e 	bl	80054b8 <NVIC_EncodePriority>
 800559c:	4602      	mov	r2, r0
 800559e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055a2:	4611      	mov	r1, r2
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff ff5d 	bl	8005464 <__NVIC_SetPriority>
}
 80055aa:	bf00      	nop
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	4603      	mov	r3, r0
 80055ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff ff31 	bl	8005428 <__NVIC_EnableIRQ>
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff ffa2 	bl	8005520 <SysTick_Config>
 80055dc:	4603      	mov	r3, r0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b089      	sub	sp, #36	@ 0x24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80055f2:	2300      	movs	r3, #0
 80055f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80055fa:	2300      	movs	r3, #0
 80055fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	e175      	b.n	80058f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005608:	2201      	movs	r2, #1
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4013      	ands	r3, r2
 800561a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	429a      	cmp	r2, r3
 8005622:	f040 8164 	bne.w	80058ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b01      	cmp	r3, #1
 8005630:	d005      	beq.n	800563e <HAL_GPIO_Init+0x56>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d130      	bne.n	80056a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	2203      	movs	r2, #3
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43db      	mvns	r3, r3
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	4013      	ands	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	4313      	orrs	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005674:	2201      	movs	r2, #1
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	43db      	mvns	r3, r3
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4013      	ands	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	091b      	lsrs	r3, r3, #4
 800568a:	f003 0201 	and.w	r2, r3, #1
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	4313      	orrs	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 0303 	and.w	r3, r3, #3
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d017      	beq.n	80056dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	2203      	movs	r2, #3
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	43db      	mvns	r3, r3
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4013      	ands	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d123      	bne.n	8005730 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	08da      	lsrs	r2, r3, #3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3208      	adds	r2, #8
 80056f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	220f      	movs	r2, #15
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4013      	ands	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4313      	orrs	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	08da      	lsrs	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3208      	adds	r2, #8
 800572a:	69b9      	ldr	r1, [r7, #24]
 800572c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	2203      	movs	r2, #3
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	43db      	mvns	r3, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4013      	ands	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 0203 	and.w	r2, r3, #3
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4313      	orrs	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 80be 	beq.w	80058ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005772:	4b66      	ldr	r3, [pc, #408]	@ (800590c <HAL_GPIO_Init+0x324>)
 8005774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005776:	4a65      	ldr	r2, [pc, #404]	@ (800590c <HAL_GPIO_Init+0x324>)
 8005778:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800577c:	6453      	str	r3, [r2, #68]	@ 0x44
 800577e:	4b63      	ldr	r3, [pc, #396]	@ (800590c <HAL_GPIO_Init+0x324>)
 8005780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800578a:	4a61      	ldr	r2, [pc, #388]	@ (8005910 <HAL_GPIO_Init+0x328>)
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	089b      	lsrs	r3, r3, #2
 8005790:	3302      	adds	r3, #2
 8005792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005796:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	220f      	movs	r2, #15
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	43db      	mvns	r3, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4013      	ands	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a58      	ldr	r2, [pc, #352]	@ (8005914 <HAL_GPIO_Init+0x32c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d037      	beq.n	8005826 <HAL_GPIO_Init+0x23e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a57      	ldr	r2, [pc, #348]	@ (8005918 <HAL_GPIO_Init+0x330>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d031      	beq.n	8005822 <HAL_GPIO_Init+0x23a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a56      	ldr	r2, [pc, #344]	@ (800591c <HAL_GPIO_Init+0x334>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d02b      	beq.n	800581e <HAL_GPIO_Init+0x236>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a55      	ldr	r2, [pc, #340]	@ (8005920 <HAL_GPIO_Init+0x338>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d025      	beq.n	800581a <HAL_GPIO_Init+0x232>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a54      	ldr	r2, [pc, #336]	@ (8005924 <HAL_GPIO_Init+0x33c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d01f      	beq.n	8005816 <HAL_GPIO_Init+0x22e>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a53      	ldr	r2, [pc, #332]	@ (8005928 <HAL_GPIO_Init+0x340>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d019      	beq.n	8005812 <HAL_GPIO_Init+0x22a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a52      	ldr	r2, [pc, #328]	@ (800592c <HAL_GPIO_Init+0x344>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <HAL_GPIO_Init+0x226>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a51      	ldr	r2, [pc, #324]	@ (8005930 <HAL_GPIO_Init+0x348>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00d      	beq.n	800580a <HAL_GPIO_Init+0x222>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a50      	ldr	r2, [pc, #320]	@ (8005934 <HAL_GPIO_Init+0x34c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d007      	beq.n	8005806 <HAL_GPIO_Init+0x21e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a4f      	ldr	r2, [pc, #316]	@ (8005938 <HAL_GPIO_Init+0x350>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d101      	bne.n	8005802 <HAL_GPIO_Init+0x21a>
 80057fe:	2309      	movs	r3, #9
 8005800:	e012      	b.n	8005828 <HAL_GPIO_Init+0x240>
 8005802:	230a      	movs	r3, #10
 8005804:	e010      	b.n	8005828 <HAL_GPIO_Init+0x240>
 8005806:	2308      	movs	r3, #8
 8005808:	e00e      	b.n	8005828 <HAL_GPIO_Init+0x240>
 800580a:	2307      	movs	r3, #7
 800580c:	e00c      	b.n	8005828 <HAL_GPIO_Init+0x240>
 800580e:	2306      	movs	r3, #6
 8005810:	e00a      	b.n	8005828 <HAL_GPIO_Init+0x240>
 8005812:	2305      	movs	r3, #5
 8005814:	e008      	b.n	8005828 <HAL_GPIO_Init+0x240>
 8005816:	2304      	movs	r3, #4
 8005818:	e006      	b.n	8005828 <HAL_GPIO_Init+0x240>
 800581a:	2303      	movs	r3, #3
 800581c:	e004      	b.n	8005828 <HAL_GPIO_Init+0x240>
 800581e:	2302      	movs	r3, #2
 8005820:	e002      	b.n	8005828 <HAL_GPIO_Init+0x240>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_GPIO_Init+0x240>
 8005826:	2300      	movs	r3, #0
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	f002 0203 	and.w	r2, r2, #3
 800582e:	0092      	lsls	r2, r2, #2
 8005830:	4093      	lsls	r3, r2
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	4313      	orrs	r3, r2
 8005836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005838:	4935      	ldr	r1, [pc, #212]	@ (8005910 <HAL_GPIO_Init+0x328>)
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	089b      	lsrs	r3, r3, #2
 800583e:	3302      	adds	r3, #2
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005846:	4b3d      	ldr	r3, [pc, #244]	@ (800593c <HAL_GPIO_Init+0x354>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	43db      	mvns	r3, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4013      	ands	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800586a:	4a34      	ldr	r2, [pc, #208]	@ (800593c <HAL_GPIO_Init+0x354>)
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005870:	4b32      	ldr	r3, [pc, #200]	@ (800593c <HAL_GPIO_Init+0x354>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	43db      	mvns	r3, r3
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4013      	ands	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005894:	4a29      	ldr	r2, [pc, #164]	@ (800593c <HAL_GPIO_Init+0x354>)
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800589a:	4b28      	ldr	r3, [pc, #160]	@ (800593c <HAL_GPIO_Init+0x354>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	43db      	mvns	r3, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4013      	ands	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058be:	4a1f      	ldr	r2, [pc, #124]	@ (800593c <HAL_GPIO_Init+0x354>)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058c4:	4b1d      	ldr	r3, [pc, #116]	@ (800593c <HAL_GPIO_Init+0x354>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4013      	ands	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058e8:	4a14      	ldr	r2, [pc, #80]	@ (800593c <HAL_GPIO_Init+0x354>)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	3301      	adds	r3, #1
 80058f2:	61fb      	str	r3, [r7, #28]
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b0f      	cmp	r3, #15
 80058f8:	f67f ae86 	bls.w	8005608 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	3724      	adds	r7, #36	@ 0x24
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40023800 	.word	0x40023800
 8005910:	40013800 	.word	0x40013800
 8005914:	40020000 	.word	0x40020000
 8005918:	40020400 	.word	0x40020400
 800591c:	40020800 	.word	0x40020800
 8005920:	40020c00 	.word	0x40020c00
 8005924:	40021000 	.word	0x40021000
 8005928:	40021400 	.word	0x40021400
 800592c:	40021800 	.word	0x40021800
 8005930:	40021c00 	.word	0x40021c00
 8005934:	40022000 	.word	0x40022000
 8005938:	40022400 	.word	0x40022400
 800593c:	40013c00 	.word	0x40013c00

08005940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	807b      	strh	r3, [r7, #2]
 800594c:	4613      	mov	r3, r2
 800594e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005950:	787b      	ldrb	r3, [r7, #1]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005956:	887a      	ldrh	r2, [r7, #2]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800595c:	e003      	b.n	8005966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800595e:	887b      	ldrh	r3, [r7, #2]
 8005960:	041a      	lsls	r2, r3, #16
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	619a      	str	r2, [r3, #24]
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e08b      	b.n	8005a9e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fd f8f2 	bl	8002b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2224      	movs	r2, #36	@ 0x24
 80059a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0201 	bic.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80059c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d107      	bne.n	80059ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059ea:	609a      	str	r2, [r3, #8]
 80059ec:	e006      	b.n	80059fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80059fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d108      	bne.n	8005a16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a12:	605a      	str	r2, [r3, #4]
 8005a14:	e007      	b.n	8005a26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6859      	ldr	r1, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa8 <HAL_I2C_Init+0x134>)
 8005a32:	430b      	orrs	r3, r1
 8005a34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69d9      	ldr	r1, [r3, #28]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1a      	ldr	r2, [r3, #32]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	02008000 	.word	0x02008000

08005aac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	460b      	mov	r3, r1
 8005aba:	817b      	strh	r3, [r7, #10]
 8005abc:	4613      	mov	r3, r2
 8005abe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	f040 80fd 	bne.w	8005cc8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_I2C_Master_Transmit+0x30>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e0f6      	b.n	8005cca <HAL_I2C_Master_Transmit+0x21e>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ae4:	f7ff f844 	bl	8004b70 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	2319      	movs	r3, #25
 8005af0:	2201      	movs	r2, #1
 8005af2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fdcc 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e0e1      	b.n	8005cca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2221      	movs	r2, #33	@ 0x21
 8005b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2210      	movs	r2, #16
 8005b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	893a      	ldrh	r2, [r7, #8]
 8005b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2bff      	cmp	r3, #255	@ 0xff
 8005b36:	d906      	bls.n	8005b46 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	22ff      	movs	r2, #255	@ 0xff
 8005b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005b3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e007      	b.n	8005b56 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005b50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b54:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d024      	beq.n	8005ba8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	3301      	adds	r3, #1
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	8979      	ldrh	r1, [r7, #10]
 8005b9a:	4b4e      	ldr	r3, [pc, #312]	@ (8005cd4 <HAL_I2C_Master_Transmit+0x228>)
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 ffc7 	bl	8006b34 <I2C_TransferConfig>
 8005ba6:	e066      	b.n	8005c76 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	8979      	ldrh	r1, [r7, #10]
 8005bb0:	4b48      	ldr	r3, [pc, #288]	@ (8005cd4 <HAL_I2C_Master_Transmit+0x228>)
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 ffbc 	bl	8006b34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005bbc:	e05b      	b.n	8005c76 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	6a39      	ldr	r1, [r7, #32]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fdbf 	bl	8006746 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e07b      	b.n	8005cca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd6:	781a      	ldrb	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d034      	beq.n	8005c76 <HAL_I2C_Master_Transmit+0x1ca>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d130      	bne.n	8005c76 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2180      	movs	r1, #128	@ 0x80
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fd38 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e04d      	b.n	8005cca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2bff      	cmp	r3, #255	@ 0xff
 8005c36:	d90e      	bls.n	8005c56 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	22ff      	movs	r2, #255	@ 0xff
 8005c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	8979      	ldrh	r1, [r7, #10]
 8005c46:	2300      	movs	r3, #0
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 ff70 	bl	8006b34 <I2C_TransferConfig>
 8005c54:	e00f      	b.n	8005c76 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	8979      	ldrh	r1, [r7, #10]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 ff5f 	bl	8006b34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d19e      	bne.n	8005bbe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	6a39      	ldr	r1, [r7, #32]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 fda5 	bl	80067d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e01a      	b.n	8005cca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6859      	ldr	r1, [r3, #4]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd8 <HAL_I2C_Master_Transmit+0x22c>)
 8005ca8:	400b      	ands	r3, r1
 8005caa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	e000      	b.n	8005cca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005cc8:	2302      	movs	r3, #2
  }
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	80002000 	.word	0x80002000
 8005cd8:	fe00e800 	.word	0xfe00e800

08005cdc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	460b      	mov	r3, r1
 8005cea:	817b      	strh	r3, [r7, #10]
 8005cec:	4613      	mov	r3, r2
 8005cee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	f040 80db 	bne.w	8005eb4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_I2C_Master_Receive+0x30>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e0d4      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x1da>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d14:	f7fe ff2c 	bl	8004b70 <HAL_GetTick>
 8005d18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	2319      	movs	r3, #25
 8005d20:	2201      	movs	r2, #1
 8005d22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fcb4 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e0bf      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2222      	movs	r2, #34	@ 0x22
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2210      	movs	r2, #16
 8005d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	893a      	ldrh	r2, [r7, #8]
 8005d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2bff      	cmp	r3, #255	@ 0xff
 8005d66:	d90e      	bls.n	8005d86 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	8979      	ldrh	r1, [r7, #10]
 8005d76:	4b52      	ldr	r3, [pc, #328]	@ (8005ec0 <HAL_I2C_Master_Receive+0x1e4>)
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fed8 	bl	8006b34 <I2C_TransferConfig>
 8005d84:	e06d      	b.n	8005e62 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	8979      	ldrh	r1, [r7, #10]
 8005d98:	4b49      	ldr	r3, [pc, #292]	@ (8005ec0 <HAL_I2C_Master_Receive+0x1e4>)
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fec7 	bl	8006b34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005da6:	e05c      	b.n	8005e62 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	6a39      	ldr	r1, [r7, #32]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 fd55 	bl	800685c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e07c      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d034      	beq.n	8005e62 <HAL_I2C_Master_Receive+0x186>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d130      	bne.n	8005e62 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	2200      	movs	r2, #0
 8005e08:	2180      	movs	r1, #128	@ 0x80
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 fc42 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e04d      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2bff      	cmp	r3, #255	@ 0xff
 8005e22:	d90e      	bls.n	8005e42 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	22ff      	movs	r2, #255	@ 0xff
 8005e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	8979      	ldrh	r1, [r7, #10]
 8005e32:	2300      	movs	r3, #0
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 fe7a 	bl	8006b34 <I2C_TransferConfig>
 8005e40:	e00f      	b.n	8005e62 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	8979      	ldrh	r1, [r7, #10]
 8005e54:	2300      	movs	r3, #0
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 fe69 	bl	8006b34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d19d      	bne.n	8005da8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	6a39      	ldr	r1, [r7, #32]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 fcaf 	bl	80067d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e01a      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2220      	movs	r2, #32
 8005e86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6859      	ldr	r1, [r3, #4]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec4 <HAL_I2C_Master_Receive+0x1e8>)
 8005e94:	400b      	ands	r3, r1
 8005e96:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e000      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005eb4:	2302      	movs	r3, #2
  }
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	80002400 	.word	0x80002400
 8005ec4:	fe00e800 	.word	0xfe00e800

08005ec8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	817b      	strh	r3, [r7, #10]
 8005eda:	460b      	mov	r3, r1
 8005edc:	813b      	strh	r3, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	f040 80f9 	bne.w	80060e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <HAL_I2C_Mem_Write+0x34>
 8005ef6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d105      	bne.n	8005f08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f02:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0ed      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_I2C_Mem_Write+0x4e>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e0e6      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f1e:	f7fe fe27 	bl	8004b70 <HAL_GetTick>
 8005f22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	2319      	movs	r3, #25
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 fbaf 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e0d1      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2221      	movs	r2, #33	@ 0x21
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2240      	movs	r2, #64	@ 0x40
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a3a      	ldr	r2, [r7, #32]
 8005f5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f68:	88f8      	ldrh	r0, [r7, #6]
 8005f6a:	893a      	ldrh	r2, [r7, #8]
 8005f6c:	8979      	ldrh	r1, [r7, #10]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	9301      	str	r3, [sp, #4]
 8005f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	4603      	mov	r3, r0
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fabf 	bl	80064fc <I2C_RequestMemoryWrite>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0a9      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2bff      	cmp	r3, #255	@ 0xff
 8005f98:	d90e      	bls.n	8005fb8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	22ff      	movs	r2, #255	@ 0xff
 8005f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	8979      	ldrh	r1, [r7, #10]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fdbf 	bl	8006b34 <I2C_TransferConfig>
 8005fb6:	e00f      	b.n	8005fd8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	8979      	ldrh	r1, [r7, #10]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 fdae 	bl	8006b34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 fbb2 	bl	8006746 <I2C_WaitOnTXISFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e07b      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d034      	beq.n	8006090 <HAL_I2C_Mem_Write+0x1c8>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602a:	2b00      	cmp	r3, #0
 800602c:	d130      	bne.n	8006090 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006034:	2200      	movs	r2, #0
 8006036:	2180      	movs	r1, #128	@ 0x80
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 fb2b 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e04d      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604c:	b29b      	uxth	r3, r3
 800604e:	2bff      	cmp	r3, #255	@ 0xff
 8006050:	d90e      	bls.n	8006070 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	22ff      	movs	r2, #255	@ 0xff
 8006056:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800605c:	b2da      	uxtb	r2, r3
 800605e:	8979      	ldrh	r1, [r7, #10]
 8006060:	2300      	movs	r3, #0
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 fd63 	bl	8006b34 <I2C_TransferConfig>
 800606e:	e00f      	b.n	8006090 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607e:	b2da      	uxtb	r2, r3
 8006080:	8979      	ldrh	r1, [r7, #10]
 8006082:	2300      	movs	r3, #0
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fd52 	bl	8006b34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d19e      	bne.n	8005fd8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 fb98 	bl	80067d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e01a      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2220      	movs	r2, #32
 80060b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6859      	ldr	r1, [r3, #4]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4b0a      	ldr	r3, [pc, #40]	@ (80060ec <HAL_I2C_Mem_Write+0x224>)
 80060c2:	400b      	ands	r3, r1
 80060c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	e000      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80060e2:	2302      	movs	r3, #2
  }
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	fe00e800 	.word	0xfe00e800

080060f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	4608      	mov	r0, r1
 80060fa:	4611      	mov	r1, r2
 80060fc:	461a      	mov	r2, r3
 80060fe:	4603      	mov	r3, r0
 8006100:	817b      	strh	r3, [r7, #10]
 8006102:	460b      	mov	r3, r1
 8006104:	813b      	strh	r3, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b20      	cmp	r3, #32
 8006114:	f040 80fd 	bne.w	8006312 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_I2C_Mem_Read+0x34>
 800611e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800612a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e0f1      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_I2C_Mem_Read+0x4e>
 800613a:	2302      	movs	r3, #2
 800613c:	e0ea      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006146:	f7fe fd13 	bl	8004b70 <HAL_GetTick>
 800614a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	2319      	movs	r3, #25
 8006152:	2201      	movs	r2, #1
 8006154:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 fa9b 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0d5      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2222      	movs	r2, #34	@ 0x22
 800616c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2240      	movs	r2, #64	@ 0x40
 8006174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a3a      	ldr	r2, [r7, #32]
 8006182:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006188:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006190:	88f8      	ldrh	r0, [r7, #6]
 8006192:	893a      	ldrh	r2, [r7, #8]
 8006194:	8979      	ldrh	r1, [r7, #10]
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	4603      	mov	r3, r0
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f9ff 	bl	80065a4 <I2C_RequestMemoryRead>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e0ad      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2bff      	cmp	r3, #255	@ 0xff
 80061c0:	d90e      	bls.n	80061e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	8979      	ldrh	r1, [r7, #10]
 80061d0:	4b52      	ldr	r3, [pc, #328]	@ (800631c <HAL_I2C_Mem_Read+0x22c>)
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 fcab 	bl	8006b34 <I2C_TransferConfig>
 80061de:	e00f      	b.n	8006200 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	8979      	ldrh	r1, [r7, #10]
 80061f2:	4b4a      	ldr	r3, [pc, #296]	@ (800631c <HAL_I2C_Mem_Read+0x22c>)
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fc9a 	bl	8006b34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006206:	2200      	movs	r2, #0
 8006208:	2104      	movs	r1, #4
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fa42 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e07c      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d034      	beq.n	80062c0 <HAL_I2C_Mem_Read+0x1d0>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800625a:	2b00      	cmp	r3, #0
 800625c:	d130      	bne.n	80062c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006264:	2200      	movs	r2, #0
 8006266:	2180      	movs	r1, #128	@ 0x80
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fa13 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e04d      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	2bff      	cmp	r3, #255	@ 0xff
 8006280:	d90e      	bls.n	80062a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628c:	b2da      	uxtb	r2, r3
 800628e:	8979      	ldrh	r1, [r7, #10]
 8006290:	2300      	movs	r3, #0
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fc4b 	bl	8006b34 <I2C_TransferConfig>
 800629e:	e00f      	b.n	80062c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	8979      	ldrh	r1, [r7, #10]
 80062b2:	2300      	movs	r3, #0
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fc3a 	bl	8006b34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d19a      	bne.n	8006200 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 fa80 	bl	80067d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e01a      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2220      	movs	r2, #32
 80062e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6859      	ldr	r1, [r3, #4]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006320 <HAL_I2C_Mem_Read+0x230>)
 80062f2:	400b      	ands	r3, r1
 80062f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	e000      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006312:	2302      	movs	r3, #2
  }
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	80002400 	.word	0x80002400
 8006320:	fe00e800 	.word	0xfe00e800

08006324 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08a      	sub	sp, #40	@ 0x28
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	607a      	str	r2, [r7, #4]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	460b      	mov	r3, r1
 8006332:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006334:	2300      	movs	r3, #0
 8006336:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b20      	cmp	r3, #32
 8006342:	f040 80d2 	bne.w	80064ea <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006354:	d101      	bne.n	800635a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006356:	2302      	movs	r3, #2
 8006358:	e0c8      	b.n	80064ec <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_I2C_IsDeviceReady+0x44>
 8006364:	2302      	movs	r3, #2
 8006366:	e0c1      	b.n	80064ec <HAL_I2C_IsDeviceReady+0x1c8>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2224      	movs	r2, #36	@ 0x24
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d105      	bne.n	8006392 <HAL_I2C_IsDeviceReady+0x6e>
 8006386:	897b      	ldrh	r3, [r7, #10]
 8006388:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800638c:	4b59      	ldr	r3, [pc, #356]	@ (80064f4 <HAL_I2C_IsDeviceReady+0x1d0>)
 800638e:	4313      	orrs	r3, r2
 8006390:	e004      	b.n	800639c <HAL_I2C_IsDeviceReady+0x78>
 8006392:	897b      	ldrh	r3, [r7, #10]
 8006394:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006398:	4b57      	ldr	r3, [pc, #348]	@ (80064f8 <HAL_I2C_IsDeviceReady+0x1d4>)
 800639a:	4313      	orrs	r3, r2
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80063a2:	f7fe fbe5 	bl	8004b70 <HAL_GetTick>
 80063a6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f003 0320 	and.w	r3, r3, #32
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	bf0c      	ite	eq
 80063b6:	2301      	moveq	r3, #1
 80063b8:	2300      	movne	r3, #0
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	2b10      	cmp	r3, #16
 80063ca:	bf0c      	ite	eq
 80063cc:	2301      	moveq	r3, #1
 80063ce:	2300      	movne	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80063d4:	e034      	b.n	8006440 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d01a      	beq.n	8006414 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80063de:	f7fe fbc7 	bl	8004b70 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d302      	bcc.n	80063f4 <HAL_I2C_IsDeviceReady+0xd0>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10f      	bne.n	8006414 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006400:	f043 0220 	orr.w	r2, r3, #32
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e06b      	b.n	80064ec <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b20      	cmp	r3, #32
 8006420:	bf0c      	ite	eq
 8006422:	2301      	moveq	r3, #1
 8006424:	2300      	movne	r3, #0
 8006426:	b2db      	uxtb	r3, r3
 8006428:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	f003 0310 	and.w	r3, r3, #16
 8006434:	2b10      	cmp	r3, #16
 8006436:	bf0c      	ite	eq
 8006438:	2301      	moveq	r3, #1
 800643a:	2300      	movne	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006440:	7ffb      	ldrb	r3, [r7, #31]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <HAL_I2C_IsDeviceReady+0x128>
 8006446:	7fbb      	ldrb	r3, [r7, #30]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0c4      	beq.n	80063d6 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b10      	cmp	r3, #16
 8006458:	d01a      	beq.n	8006490 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2200      	movs	r2, #0
 8006462:	2120      	movs	r1, #32
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f915 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e03b      	b.n	80064ec <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2220      	movs	r2, #32
 800647a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	e02d      	b.n	80064ec <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2200      	movs	r2, #0
 8006498:	2120      	movs	r1, #32
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f8fa 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e020      	b.n	80064ec <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2210      	movs	r2, #16
 80064b0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2220      	movs	r2, #32
 80064b8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	3301      	adds	r3, #1
 80064be:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	f63f af5a 	bhi.w	800637e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d6:	f043 0220 	orr.w	r2, r3, #32
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e000      	b.n	80064ec <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 80064ea:	2302      	movs	r3, #2
  }
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3720      	adds	r7, #32
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	02002000 	.word	0x02002000
 80064f8:	02002800 	.word	0x02002800

080064fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	4608      	mov	r0, r1
 8006506:	4611      	mov	r1, r2
 8006508:	461a      	mov	r2, r3
 800650a:	4603      	mov	r3, r0
 800650c:	817b      	strh	r3, [r7, #10]
 800650e:	460b      	mov	r3, r1
 8006510:	813b      	strh	r3, [r7, #8]
 8006512:	4613      	mov	r3, r2
 8006514:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006516:	88fb      	ldrh	r3, [r7, #6]
 8006518:	b2da      	uxtb	r2, r3
 800651a:	8979      	ldrh	r1, [r7, #10]
 800651c:	4b20      	ldr	r3, [pc, #128]	@ (80065a0 <I2C_RequestMemoryWrite+0xa4>)
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fb05 	bl	8006b34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	69b9      	ldr	r1, [r7, #24]
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 f909 	bl	8006746 <I2C_WaitOnTXISFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e02c      	b.n	8006598 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800653e:	88fb      	ldrh	r3, [r7, #6]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d105      	bne.n	8006550 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006544:	893b      	ldrh	r3, [r7, #8]
 8006546:	b2da      	uxtb	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	629a      	str	r2, [r3, #40]	@ 0x28
 800654e:	e015      	b.n	800657c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006550:	893b      	ldrh	r3, [r7, #8]
 8006552:	0a1b      	lsrs	r3, r3, #8
 8006554:	b29b      	uxth	r3, r3
 8006556:	b2da      	uxtb	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	69b9      	ldr	r1, [r7, #24]
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 f8ef 	bl	8006746 <I2C_WaitOnTXISFlagUntilTimeout>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e012      	b.n	8006598 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006572:	893b      	ldrh	r3, [r7, #8]
 8006574:	b2da      	uxtb	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	2200      	movs	r2, #0
 8006584:	2180      	movs	r1, #128	@ 0x80
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 f884 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	80002000 	.word	0x80002000

080065a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	4608      	mov	r0, r1
 80065ae:	4611      	mov	r1, r2
 80065b0:	461a      	mov	r2, r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	817b      	strh	r3, [r7, #10]
 80065b6:	460b      	mov	r3, r1
 80065b8:	813b      	strh	r3, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	8979      	ldrh	r1, [r7, #10]
 80065c4:	4b20      	ldr	r3, [pc, #128]	@ (8006648 <I2C_RequestMemoryRead+0xa4>)
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	2300      	movs	r3, #0
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fab2 	bl	8006b34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065d0:	69fa      	ldr	r2, [r7, #28]
 80065d2:	69b9      	ldr	r1, [r7, #24]
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f8b6 	bl	8006746 <I2C_WaitOnTXISFlagUntilTimeout>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e02c      	b.n	800663e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065e4:	88fb      	ldrh	r3, [r7, #6]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d105      	bne.n	80065f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065ea:	893b      	ldrh	r3, [r7, #8]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80065f4:	e015      	b.n	8006622 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80065f6:	893b      	ldrh	r3, [r7, #8]
 80065f8:	0a1b      	lsrs	r3, r3, #8
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	69b9      	ldr	r1, [r7, #24]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 f89c 	bl	8006746 <I2C_WaitOnTXISFlagUntilTimeout>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e012      	b.n	800663e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006618:	893b      	ldrh	r3, [r7, #8]
 800661a:	b2da      	uxtb	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	2200      	movs	r2, #0
 800662a:	2140      	movs	r1, #64	@ 0x40
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f831 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e000      	b.n	800663e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	80002000 	.word	0x80002000

0800664c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b02      	cmp	r3, #2
 8006660:	d103      	bne.n	800666a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2200      	movs	r2, #0
 8006668:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b01      	cmp	r3, #1
 8006676:	d007      	beq.n	8006688 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	619a      	str	r2, [r3, #24]
  }
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066a4:	e03b      	b.n	800671e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 f962 	bl	8006974 <I2C_IsErrorOccurred>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e041      	b.n	800673e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d02d      	beq.n	800671e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c2:	f7fe fa55 	bl	8004b70 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d302      	bcc.n	80066d8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d122      	bne.n	800671e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4013      	ands	r3, r2
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	bf0c      	ite	eq
 80066e8:	2301      	moveq	r3, #1
 80066ea:	2300      	movne	r3, #0
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d113      	bne.n	800671e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e00f      	b.n	800673e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	699a      	ldr	r2, [r3, #24]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4013      	ands	r3, r2
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	429a      	cmp	r2, r3
 800672c:	bf0c      	ite	eq
 800672e:	2301      	moveq	r3, #1
 8006730:	2300      	movne	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	429a      	cmp	r2, r3
 800673a:	d0b4      	beq.n	80066a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006752:	e033      	b.n	80067bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f90b 	bl	8006974 <I2C_IsErrorOccurred>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e031      	b.n	80067cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676e:	d025      	beq.n	80067bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006770:	f7fe f9fe 	bl	8004b70 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	429a      	cmp	r2, r3
 800677e:	d302      	bcc.n	8006786 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d11a      	bne.n	80067bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b02      	cmp	r3, #2
 8006792:	d013      	beq.n	80067bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006798:	f043 0220 	orr.w	r2, r3, #32
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e007      	b.n	80067cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d1c4      	bne.n	8006754 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067e0:	e02f      	b.n	8006842 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f8c4 	bl	8006974 <I2C_IsErrorOccurred>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e02d      	b.n	8006852 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f6:	f7fe f9bb 	bl	8004b70 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	429a      	cmp	r2, r3
 8006804:	d302      	bcc.n	800680c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d11a      	bne.n	8006842 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b20      	cmp	r3, #32
 8006818:	d013      	beq.n	8006842 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800681e:	f043 0220 	orr.w	r2, r3, #32
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e007      	b.n	8006852 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b20      	cmp	r3, #32
 800684e:	d1c8      	bne.n	80067e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800686c:	e071      	b.n	8006952 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 f87e 	bl	8006974 <I2C_IsErrorOccurred>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b20      	cmp	r3, #32
 800688e:	d13b      	bne.n	8006908 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d138      	bne.n	8006908 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d105      	bne.n	80068b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	2b10      	cmp	r3, #16
 80068bc:	d121      	bne.n	8006902 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2210      	movs	r2, #16
 80068c4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2204      	movs	r2, #4
 80068ca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2220      	movs	r2, #32
 80068d2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6859      	ldr	r1, [r3, #4]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	4b24      	ldr	r3, [pc, #144]	@ (8006970 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80068e0:	400b      	ands	r3, r1
 80068e2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	75fb      	strb	r3, [r7, #23]
 8006900:	e002      	b.n	8006908 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006908:	f7fe f932 	bl	8004b70 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	d302      	bcc.n	800691e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d119      	bne.n	8006952 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800691e:	7dfb      	ldrb	r3, [r7, #23]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d116      	bne.n	8006952 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	2b04      	cmp	r3, #4
 8006930:	d00f      	beq.n	8006952 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006936:	f043 0220 	orr.w	r2, r3, #32
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b04      	cmp	r3, #4
 800695e:	d002      	beq.n	8006966 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d083      	beq.n	800686e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	fe00e800 	.word	0xfe00e800

08006974 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	@ 0x28
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b00      	cmp	r3, #0
 800699e:	d068      	beq.n	8006a72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2210      	movs	r2, #16
 80069a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069a8:	e049      	b.n	8006a3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b0:	d045      	beq.n	8006a3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069b2:	f7fe f8dd 	bl	8004b70 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d302      	bcc.n	80069c8 <I2C_IsErrorOccurred+0x54>
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d13a      	bne.n	8006a3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ea:	d121      	bne.n	8006a30 <I2C_IsErrorOccurred+0xbc>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069f2:	d01d      	beq.n	8006a30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069f4:	7cfb      	ldrb	r3, [r7, #19]
 80069f6:	2b20      	cmp	r3, #32
 80069f8:	d01a      	beq.n	8006a30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a0a:	f7fe f8b1 	bl	8004b70 <HAL_GetTick>
 8006a0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a10:	e00e      	b.n	8006a30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a12:	f7fe f8ad 	bl	8004b70 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b19      	cmp	r3, #25
 8006a1e:	d907      	bls.n	8006a30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	f043 0320 	orr.w	r3, r3, #32
 8006a26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006a2e:	e006      	b.n	8006a3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d1e9      	bne.n	8006a12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d003      	beq.n	8006a54 <I2C_IsErrorOccurred+0xe0>
 8006a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0aa      	beq.n	80069aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2220      	movs	r2, #32
 8006a62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	f043 0304 	orr.w	r3, r3, #4
 8006a6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00b      	beq.n	8006a9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00b      	beq.n	8006abe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	f043 0308 	orr.w	r3, r3, #8
 8006aac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006ab6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00b      	beq.n	8006ae0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	f043 0302 	orr.w	r3, r3, #2
 8006ace:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ad8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01c      	beq.n	8006b22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f7ff fdaf 	bl	800664c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6859      	ldr	r1, [r3, #4]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	4b0d      	ldr	r3, [pc, #52]	@ (8006b30 <I2C_IsErrorOccurred+0x1bc>)
 8006afa:	400b      	ands	r3, r1
 8006afc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006b22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3728      	adds	r7, #40	@ 0x28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	fe00e800 	.word	0xfe00e800

08006b34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	607b      	str	r3, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	817b      	strh	r3, [r7, #10]
 8006b42:	4613      	mov	r3, r2
 8006b44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b46:	897b      	ldrh	r3, [r7, #10]
 8006b48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b4c:	7a7b      	ldrb	r3, [r7, #9]
 8006b4e:	041b      	lsls	r3, r3, #16
 8006b50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	0d5b      	lsrs	r3, r3, #21
 8006b6e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006b72:	4b08      	ldr	r3, [pc, #32]	@ (8006b94 <I2C_TransferConfig+0x60>)
 8006b74:	430b      	orrs	r3, r1
 8006b76:	43db      	mvns	r3, r3
 8006b78:	ea02 0103 	and.w	r1, r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b86:	bf00      	nop
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	03ff63ff 	.word	0x03ff63ff

08006b98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d138      	bne.n	8006c20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d101      	bne.n	8006bbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e032      	b.n	8006c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2224      	movs	r2, #36	@ 0x24
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0201 	bic.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6819      	ldr	r1, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e000      	b.n	8006c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c20:	2302      	movs	r3, #2
  }
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	d139      	bne.n	8006cb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d101      	bne.n	8006c52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	e033      	b.n	8006cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2224      	movs	r2, #36	@ 0x24
 8006c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0201 	orr.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e000      	b.n	8006cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006cb8:	2302      	movs	r3, #2
  }
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b086      	sub	sp, #24
 8006cca:	af02      	add	r7, sp, #8
 8006ccc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e108      	b.n	8006eea <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fd fe48 	bl	8004988 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2203      	movs	r2, #3
 8006cfc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d06:	d102      	bne.n	8006d0e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f003 fec4 	bl	800aaa0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7c1a      	ldrb	r2, [r3, #16]
 8006d20:	f88d 2000 	strb.w	r2, [sp]
 8006d24:	3304      	adds	r3, #4
 8006d26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d28:	f003 fe60 	bl	800a9ec <USB_CoreInit>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e0d5      	b.n	8006eea <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2100      	movs	r1, #0
 8006d44:	4618      	mov	r0, r3
 8006d46:	f003 febc 	bl	800aac2 <USB_SetCurrentMode>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e0c6      	b.n	8006eea <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	73fb      	strb	r3, [r7, #15]
 8006d60:	e04a      	b.n	8006df8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d62:	7bfa      	ldrb	r2, [r7, #15]
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	3315      	adds	r3, #21
 8006d72:	2201      	movs	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d76:	7bfa      	ldrb	r2, [r7, #15]
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	3314      	adds	r3, #20
 8006d86:	7bfa      	ldrb	r2, [r7, #15]
 8006d88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d8a:	7bfa      	ldrb	r2, [r7, #15]
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	b298      	uxth	r0, r3
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	4613      	mov	r3, r2
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	332e      	adds	r3, #46	@ 0x2e
 8006d9e:	4602      	mov	r2, r0
 8006da0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006da2:	7bfa      	ldrb	r2, [r7, #15]
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	4613      	mov	r3, r2
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	3318      	adds	r3, #24
 8006db2:	2200      	movs	r2, #0
 8006db4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006db6:	7bfa      	ldrb	r2, [r7, #15]
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	331c      	adds	r3, #28
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006dca:	7bfa      	ldrb	r2, [r7, #15]
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	3320      	adds	r3, #32
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006dde:	7bfa      	ldrb	r2, [r7, #15]
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	3324      	adds	r3, #36	@ 0x24
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	3301      	adds	r3, #1
 8006df6:	73fb      	strb	r3, [r7, #15]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	791b      	ldrb	r3, [r3, #4]
 8006dfc:	7bfa      	ldrb	r2, [r7, #15]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d3af      	bcc.n	8006d62 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
 8006e06:	e044      	b.n	8006e92 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e08:	7bfa      	ldrb	r2, [r7, #15]
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e1e:	7bfa      	ldrb	r2, [r7, #15]
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006e30:	7bfa      	ldrb	r2, [r7, #15]
 8006e32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e34:	7bfa      	ldrb	r2, [r7, #15]
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e4a:	7bfa      	ldrb	r2, [r7, #15]
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e60:	7bfa      	ldrb	r2, [r7, #15]
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	4613      	mov	r3, r2
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e76:	7bfa      	ldrb	r2, [r7, #15]
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	440b      	add	r3, r1
 8006e84:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	73fb      	strb	r3, [r7, #15]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	791b      	ldrb	r3, [r3, #4]
 8006e96:	7bfa      	ldrb	r2, [r7, #15]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d3b5      	bcc.n	8006e08 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	7c1a      	ldrb	r2, [r3, #16]
 8006ea4:	f88d 2000 	strb.w	r2, [sp]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006eac:	f003 fe56 	bl	800ab5c <USB_DevInit>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e013      	b.n	8006eea <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	7b1b      	ldrb	r3, [r3, #12]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d102      	bne.n	8006ede <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f80b 	bl	8006ef4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f004 f811 	bl	800af0a <USB_DevDisconnect>

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f22:	4b05      	ldr	r3, [pc, #20]	@ (8006f38 <HAL_PCDEx_ActivateLPM+0x44>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	10000003 	.word	0x10000003

08006f3c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f40:	4b05      	ldr	r3, [pc, #20]	@ (8006f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a04      	ldr	r2, [pc, #16]	@ (8006f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f4a:	6013      	str	r3, [r2, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40007000 	.word	0x40007000

08006f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f64:	2300      	movs	r3, #0
 8006f66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e291      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 8087 	beq.w	800708e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f80:	4b96      	ldr	r3, [pc, #600]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 030c 	and.w	r3, r3, #12
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d00c      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f8c:	4b93      	ldr	r3, [pc, #588]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 030c 	and.w	r3, r3, #12
 8006f94:	2b08      	cmp	r3, #8
 8006f96:	d112      	bne.n	8006fbe <HAL_RCC_OscConfig+0x62>
 8006f98:	4b90      	ldr	r3, [pc, #576]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fa4:	d10b      	bne.n	8006fbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fa6:	4b8d      	ldr	r3, [pc, #564]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d06c      	beq.n	800708c <HAL_RCC_OscConfig+0x130>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d168      	bne.n	800708c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e26b      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc6:	d106      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x7a>
 8006fc8:	4b84      	ldr	r3, [pc, #528]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a83      	ldr	r2, [pc, #524]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8006fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	e02e      	b.n	8007034 <HAL_RCC_OscConfig+0xd8>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10c      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x9c>
 8006fde:	4b7f      	ldr	r3, [pc, #508]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8006fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	4b7c      	ldr	r3, [pc, #496]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a7b      	ldr	r2, [pc, #492]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8006ff0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	e01d      	b.n	8007034 <HAL_RCC_OscConfig+0xd8>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007000:	d10c      	bne.n	800701c <HAL_RCC_OscConfig+0xc0>
 8007002:	4b76      	ldr	r3, [pc, #472]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a75      	ldr	r2, [pc, #468]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8007008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	4b73      	ldr	r3, [pc, #460]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a72      	ldr	r2, [pc, #456]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8007014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	e00b      	b.n	8007034 <HAL_RCC_OscConfig+0xd8>
 800701c:	4b6f      	ldr	r3, [pc, #444]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a6e      	ldr	r2, [pc, #440]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8007022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	4b6c      	ldr	r3, [pc, #432]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a6b      	ldr	r2, [pc, #428]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 800702e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d013      	beq.n	8007064 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703c:	f7fd fd98 	bl	8004b70 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007042:	e008      	b.n	8007056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007044:	f7fd fd94 	bl	8004b70 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b64      	cmp	r3, #100	@ 0x64
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e21f      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007056:	4b61      	ldr	r3, [pc, #388]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0f0      	beq.n	8007044 <HAL_RCC_OscConfig+0xe8>
 8007062:	e014      	b.n	800708e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007064:	f7fd fd84 	bl	8004b70 <HAL_GetTick>
 8007068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800706a:	e008      	b.n	800707e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800706c:	f7fd fd80 	bl	8004b70 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b64      	cmp	r3, #100	@ 0x64
 8007078:	d901      	bls.n	800707e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e20b      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800707e:	4b57      	ldr	r3, [pc, #348]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f0      	bne.n	800706c <HAL_RCC_OscConfig+0x110>
 800708a:	e000      	b.n	800708e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800708c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d069      	beq.n	800716e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800709a:	4b50      	ldr	r3, [pc, #320]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 030c 	and.w	r3, r3, #12
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00b      	beq.n	80070be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070a6:	4b4d      	ldr	r3, [pc, #308]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 030c 	and.w	r3, r3, #12
 80070ae:	2b08      	cmp	r3, #8
 80070b0:	d11c      	bne.n	80070ec <HAL_RCC_OscConfig+0x190>
 80070b2:	4b4a      	ldr	r3, [pc, #296]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d116      	bne.n	80070ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070be:	4b47      	ldr	r3, [pc, #284]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d005      	beq.n	80070d6 <HAL_RCC_OscConfig+0x17a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d001      	beq.n	80070d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e1df      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d6:	4b41      	ldr	r3, [pc, #260]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	493d      	ldr	r1, [pc, #244]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070ea:	e040      	b.n	800716e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d023      	beq.n	800713c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070f4:	4b39      	ldr	r3, [pc, #228]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a38      	ldr	r2, [pc, #224]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 80070fa:	f043 0301 	orr.w	r3, r3, #1
 80070fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007100:	f7fd fd36 	bl	8004b70 <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007106:	e008      	b.n	800711a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007108:	f7fd fd32 	bl	8004b70 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e1bd      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800711a:	4b30      	ldr	r3, [pc, #192]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f0      	beq.n	8007108 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007126:	4b2d      	ldr	r3, [pc, #180]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	4929      	ldr	r1, [pc, #164]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8007136:	4313      	orrs	r3, r2
 8007138:	600b      	str	r3, [r1, #0]
 800713a:	e018      	b.n	800716e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800713c:	4b27      	ldr	r3, [pc, #156]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a26      	ldr	r2, [pc, #152]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8007142:	f023 0301 	bic.w	r3, r3, #1
 8007146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007148:	f7fd fd12 	bl	8004b70 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007150:	f7fd fd0e 	bl	8004b70 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e199      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007162:	4b1e      	ldr	r3, [pc, #120]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0308 	and.w	r3, r3, #8
 8007176:	2b00      	cmp	r3, #0
 8007178:	d038      	beq.n	80071ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d019      	beq.n	80071b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007182:	4b16      	ldr	r3, [pc, #88]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8007184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007186:	4a15      	ldr	r2, [pc, #84]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 8007188:	f043 0301 	orr.w	r3, r3, #1
 800718c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800718e:	f7fd fcef 	bl	8004b70 <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007196:	f7fd fceb 	bl	8004b70 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e176      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071a8:	4b0c      	ldr	r3, [pc, #48]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 80071aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0f0      	beq.n	8007196 <HAL_RCC_OscConfig+0x23a>
 80071b4:	e01a      	b.n	80071ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071b6:	4b09      	ldr	r3, [pc, #36]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 80071b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ba:	4a08      	ldr	r2, [pc, #32]	@ (80071dc <HAL_RCC_OscConfig+0x280>)
 80071bc:	f023 0301 	bic.w	r3, r3, #1
 80071c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c2:	f7fd fcd5 	bl	8004b70 <HAL_GetTick>
 80071c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071c8:	e00a      	b.n	80071e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071ca:	f7fd fcd1 	bl	8004b70 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d903      	bls.n	80071e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e15c      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
 80071dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071e0:	4b91      	ldr	r3, [pc, #580]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80071e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071e4:	f003 0302 	and.w	r3, r3, #2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1ee      	bne.n	80071ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 80a4 	beq.w	8007342 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071fa:	4b8b      	ldr	r3, [pc, #556]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80071fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10d      	bne.n	8007222 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007206:	4b88      	ldr	r3, [pc, #544]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 8007208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720a:	4a87      	ldr	r2, [pc, #540]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 800720c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007210:	6413      	str	r3, [r2, #64]	@ 0x40
 8007212:	4b85      	ldr	r3, [pc, #532]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 8007214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800721a:	60bb      	str	r3, [r7, #8]
 800721c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800721e:	2301      	movs	r3, #1
 8007220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007222:	4b82      	ldr	r3, [pc, #520]	@ (800742c <HAL_RCC_OscConfig+0x4d0>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800722a:	2b00      	cmp	r3, #0
 800722c:	d118      	bne.n	8007260 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800722e:	4b7f      	ldr	r3, [pc, #508]	@ (800742c <HAL_RCC_OscConfig+0x4d0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a7e      	ldr	r2, [pc, #504]	@ (800742c <HAL_RCC_OscConfig+0x4d0>)
 8007234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800723a:	f7fd fc99 	bl	8004b70 <HAL_GetTick>
 800723e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007240:	e008      	b.n	8007254 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007242:	f7fd fc95 	bl	8004b70 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b64      	cmp	r3, #100	@ 0x64
 800724e:	d901      	bls.n	8007254 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e120      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007254:	4b75      	ldr	r3, [pc, #468]	@ (800742c <HAL_RCC_OscConfig+0x4d0>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0f0      	beq.n	8007242 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d106      	bne.n	8007276 <HAL_RCC_OscConfig+0x31a>
 8007268:	4b6f      	ldr	r3, [pc, #444]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 800726a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800726c:	4a6e      	ldr	r2, [pc, #440]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 800726e:	f043 0301 	orr.w	r3, r3, #1
 8007272:	6713      	str	r3, [r2, #112]	@ 0x70
 8007274:	e02d      	b.n	80072d2 <HAL_RCC_OscConfig+0x376>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10c      	bne.n	8007298 <HAL_RCC_OscConfig+0x33c>
 800727e:	4b6a      	ldr	r3, [pc, #424]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 8007280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007282:	4a69      	ldr	r2, [pc, #420]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 8007284:	f023 0301 	bic.w	r3, r3, #1
 8007288:	6713      	str	r3, [r2, #112]	@ 0x70
 800728a:	4b67      	ldr	r3, [pc, #412]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 800728c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728e:	4a66      	ldr	r2, [pc, #408]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 8007290:	f023 0304 	bic.w	r3, r3, #4
 8007294:	6713      	str	r3, [r2, #112]	@ 0x70
 8007296:	e01c      	b.n	80072d2 <HAL_RCC_OscConfig+0x376>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b05      	cmp	r3, #5
 800729e:	d10c      	bne.n	80072ba <HAL_RCC_OscConfig+0x35e>
 80072a0:	4b61      	ldr	r3, [pc, #388]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80072a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a4:	4a60      	ldr	r2, [pc, #384]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80072a6:	f043 0304 	orr.w	r3, r3, #4
 80072aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80072ac:	4b5e      	ldr	r3, [pc, #376]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80072ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b0:	4a5d      	ldr	r2, [pc, #372]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80072b2:	f043 0301 	orr.w	r3, r3, #1
 80072b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80072b8:	e00b      	b.n	80072d2 <HAL_RCC_OscConfig+0x376>
 80072ba:	4b5b      	ldr	r3, [pc, #364]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072be:	4a5a      	ldr	r2, [pc, #360]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80072c0:	f023 0301 	bic.w	r3, r3, #1
 80072c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80072c6:	4b58      	ldr	r3, [pc, #352]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80072c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ca:	4a57      	ldr	r2, [pc, #348]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80072cc:	f023 0304 	bic.w	r3, r3, #4
 80072d0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d015      	beq.n	8007306 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072da:	f7fd fc49 	bl	8004b70 <HAL_GetTick>
 80072de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e0:	e00a      	b.n	80072f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072e2:	f7fd fc45 	bl	8004b70 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e0ce      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072f8:	4b4b      	ldr	r3, [pc, #300]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80072fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0ee      	beq.n	80072e2 <HAL_RCC_OscConfig+0x386>
 8007304:	e014      	b.n	8007330 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007306:	f7fd fc33 	bl	8004b70 <HAL_GetTick>
 800730a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800730c:	e00a      	b.n	8007324 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800730e:	f7fd fc2f 	bl	8004b70 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800731c:	4293      	cmp	r3, r2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e0b8      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007324:	4b40      	ldr	r3, [pc, #256]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 8007326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1ee      	bne.n	800730e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d105      	bne.n	8007342 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007336:	4b3c      	ldr	r3, [pc, #240]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 8007338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733a:	4a3b      	ldr	r2, [pc, #236]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 800733c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007340:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 80a4 	beq.w	8007494 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800734c:	4b36      	ldr	r3, [pc, #216]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 030c 	and.w	r3, r3, #12
 8007354:	2b08      	cmp	r3, #8
 8007356:	d06b      	beq.n	8007430 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d149      	bne.n	80073f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007360:	4b31      	ldr	r3, [pc, #196]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a30      	ldr	r2, [pc, #192]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 8007366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800736a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736c:	f7fd fc00 	bl	8004b70 <HAL_GetTick>
 8007370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007372:	e008      	b.n	8007386 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007374:	f7fd fbfc 	bl	8004b70 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b02      	cmp	r3, #2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e087      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007386:	4b28      	ldr	r3, [pc, #160]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1f0      	bne.n	8007374 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69da      	ldr	r2, [r3, #28]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a0:	019b      	lsls	r3, r3, #6
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a8:	085b      	lsrs	r3, r3, #1
 80073aa:	3b01      	subs	r3, #1
 80073ac:	041b      	lsls	r3, r3, #16
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b4:	061b      	lsls	r3, r3, #24
 80073b6:	4313      	orrs	r3, r2
 80073b8:	4a1b      	ldr	r2, [pc, #108]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80073ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80073be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073c0:	4b19      	ldr	r3, [pc, #100]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a18      	ldr	r2, [pc, #96]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80073c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073cc:	f7fd fbd0 	bl	8004b70 <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073d4:	f7fd fbcc 	bl	8004b70 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e057      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073e6:	4b10      	ldr	r3, [pc, #64]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0f0      	beq.n	80073d4 <HAL_RCC_OscConfig+0x478>
 80073f2:	e04f      	b.n	8007494 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a0b      	ldr	r2, [pc, #44]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 80073fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007400:	f7fd fbb6 	bl	8004b70 <HAL_GetTick>
 8007404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007406:	e008      	b.n	800741a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007408:	f7fd fbb2 	bl	8004b70 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e03d      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800741a:	4b03      	ldr	r3, [pc, #12]	@ (8007428 <HAL_RCC_OscConfig+0x4cc>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1f0      	bne.n	8007408 <HAL_RCC_OscConfig+0x4ac>
 8007426:	e035      	b.n	8007494 <HAL_RCC_OscConfig+0x538>
 8007428:	40023800 	.word	0x40023800
 800742c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007430:	4b1b      	ldr	r3, [pc, #108]	@ (80074a0 <HAL_RCC_OscConfig+0x544>)
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d028      	beq.n	8007490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007448:	429a      	cmp	r2, r3
 800744a:	d121      	bne.n	8007490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007456:	429a      	cmp	r2, r3
 8007458:	d11a      	bne.n	8007490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007460:	4013      	ands	r3, r2
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007466:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007468:	4293      	cmp	r3, r2
 800746a:	d111      	bne.n	8007490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	3b01      	subs	r3, #1
 800747a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800747c:	429a      	cmp	r2, r3
 800747e:	d107      	bne.n	8007490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800748c:	429a      	cmp	r2, r3
 800748e:	d001      	beq.n	8007494 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e000      	b.n	8007496 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	40023800 	.word	0x40023800

080074a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e0d0      	b.n	800765e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074bc:	4b6a      	ldr	r3, [pc, #424]	@ (8007668 <HAL_RCC_ClockConfig+0x1c4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d910      	bls.n	80074ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ca:	4b67      	ldr	r3, [pc, #412]	@ (8007668 <HAL_RCC_ClockConfig+0x1c4>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f023 020f 	bic.w	r2, r3, #15
 80074d2:	4965      	ldr	r1, [pc, #404]	@ (8007668 <HAL_RCC_ClockConfig+0x1c4>)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074da:	4b63      	ldr	r3, [pc, #396]	@ (8007668 <HAL_RCC_ClockConfig+0x1c4>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d001      	beq.n	80074ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e0b8      	b.n	800765e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d020      	beq.n	800753a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007504:	4b59      	ldr	r3, [pc, #356]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	4a58      	ldr	r2, [pc, #352]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 800750a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800750e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800751c:	4b53      	ldr	r3, [pc, #332]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4a52      	ldr	r2, [pc, #328]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 8007522:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007526:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007528:	4b50      	ldr	r3, [pc, #320]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	494d      	ldr	r1, [pc, #308]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 8007536:	4313      	orrs	r3, r2
 8007538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d040      	beq.n	80075c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d107      	bne.n	800755e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800754e:	4b47      	ldr	r3, [pc, #284]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d115      	bne.n	8007586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e07f      	b.n	800765e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b02      	cmp	r3, #2
 8007564:	d107      	bne.n	8007576 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007566:	4b41      	ldr	r3, [pc, #260]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d109      	bne.n	8007586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e073      	b.n	800765e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007576:	4b3d      	ldr	r3, [pc, #244]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e06b      	b.n	800765e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007586:	4b39      	ldr	r3, [pc, #228]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f023 0203 	bic.w	r2, r3, #3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	4936      	ldr	r1, [pc, #216]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 8007594:	4313      	orrs	r3, r2
 8007596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007598:	f7fd faea 	bl	8004b70 <HAL_GetTick>
 800759c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800759e:	e00a      	b.n	80075b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075a0:	f7fd fae6 	bl	8004b70 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d901      	bls.n	80075b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e053      	b.n	800765e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075b6:	4b2d      	ldr	r3, [pc, #180]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 020c 	and.w	r2, r3, #12
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d1eb      	bne.n	80075a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075c8:	4b27      	ldr	r3, [pc, #156]	@ (8007668 <HAL_RCC_ClockConfig+0x1c4>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d210      	bcs.n	80075f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075d6:	4b24      	ldr	r3, [pc, #144]	@ (8007668 <HAL_RCC_ClockConfig+0x1c4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f023 020f 	bic.w	r2, r3, #15
 80075de:	4922      	ldr	r1, [pc, #136]	@ (8007668 <HAL_RCC_ClockConfig+0x1c4>)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075e6:	4b20      	ldr	r3, [pc, #128]	@ (8007668 <HAL_RCC_ClockConfig+0x1c4>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d001      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e032      	b.n	800765e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d008      	beq.n	8007616 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007604:	4b19      	ldr	r3, [pc, #100]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	4916      	ldr	r1, [pc, #88]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 8007612:	4313      	orrs	r3, r2
 8007614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007622:	4b12      	ldr	r3, [pc, #72]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	490e      	ldr	r1, [pc, #56]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 8007632:	4313      	orrs	r3, r2
 8007634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007636:	f000 f821 	bl	800767c <HAL_RCC_GetSysClockFreq>
 800763a:	4602      	mov	r2, r0
 800763c:	4b0b      	ldr	r3, [pc, #44]	@ (800766c <HAL_RCC_ClockConfig+0x1c8>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	091b      	lsrs	r3, r3, #4
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	490a      	ldr	r1, [pc, #40]	@ (8007670 <HAL_RCC_ClockConfig+0x1cc>)
 8007648:	5ccb      	ldrb	r3, [r1, r3]
 800764a:	fa22 f303 	lsr.w	r3, r2, r3
 800764e:	4a09      	ldr	r2, [pc, #36]	@ (8007674 <HAL_RCC_ClockConfig+0x1d0>)
 8007650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007652:	4b09      	ldr	r3, [pc, #36]	@ (8007678 <HAL_RCC_ClockConfig+0x1d4>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f7fd fa46 	bl	8004ae8 <HAL_InitTick>

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40023c00 	.word	0x40023c00
 800766c:	40023800 	.word	0x40023800
 8007670:	08013a00 	.word	0x08013a00
 8007674:	20000058 	.word	0x20000058
 8007678:	2000005c 	.word	0x2000005c

0800767c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800767c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007680:	b094      	sub	sp, #80	@ 0x50
 8007682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007684:	2300      	movs	r3, #0
 8007686:	647b      	str	r3, [r7, #68]	@ 0x44
 8007688:	2300      	movs	r3, #0
 800768a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800768c:	2300      	movs	r3, #0
 800768e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007694:	4b79      	ldr	r3, [pc, #484]	@ (800787c <HAL_RCC_GetSysClockFreq+0x200>)
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f003 030c 	and.w	r3, r3, #12
 800769c:	2b08      	cmp	r3, #8
 800769e:	d00d      	beq.n	80076bc <HAL_RCC_GetSysClockFreq+0x40>
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	f200 80e1 	bhi.w	8007868 <HAL_RCC_GetSysClockFreq+0x1ec>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <HAL_RCC_GetSysClockFreq+0x34>
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d003      	beq.n	80076b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80076ae:	e0db      	b.n	8007868 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076b0:	4b73      	ldr	r3, [pc, #460]	@ (8007880 <HAL_RCC_GetSysClockFreq+0x204>)
 80076b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076b4:	e0db      	b.n	800786e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076b6:	4b73      	ldr	r3, [pc, #460]	@ (8007884 <HAL_RCC_GetSysClockFreq+0x208>)
 80076b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076ba:	e0d8      	b.n	800786e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076bc:	4b6f      	ldr	r3, [pc, #444]	@ (800787c <HAL_RCC_GetSysClockFreq+0x200>)
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80076c6:	4b6d      	ldr	r3, [pc, #436]	@ (800787c <HAL_RCC_GetSysClockFreq+0x200>)
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d063      	beq.n	800779a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076d2:	4b6a      	ldr	r3, [pc, #424]	@ (800787c <HAL_RCC_GetSysClockFreq+0x200>)
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	099b      	lsrs	r3, r3, #6
 80076d8:	2200      	movs	r2, #0
 80076da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80076de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80076e6:	2300      	movs	r3, #0
 80076e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80076ee:	4622      	mov	r2, r4
 80076f0:	462b      	mov	r3, r5
 80076f2:	f04f 0000 	mov.w	r0, #0
 80076f6:	f04f 0100 	mov.w	r1, #0
 80076fa:	0159      	lsls	r1, r3, #5
 80076fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007700:	0150      	lsls	r0, r2, #5
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4621      	mov	r1, r4
 8007708:	1a51      	subs	r1, r2, r1
 800770a:	6139      	str	r1, [r7, #16]
 800770c:	4629      	mov	r1, r5
 800770e:	eb63 0301 	sbc.w	r3, r3, r1
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	f04f 0200 	mov.w	r2, #0
 8007718:	f04f 0300 	mov.w	r3, #0
 800771c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007720:	4659      	mov	r1, fp
 8007722:	018b      	lsls	r3, r1, #6
 8007724:	4651      	mov	r1, sl
 8007726:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800772a:	4651      	mov	r1, sl
 800772c:	018a      	lsls	r2, r1, #6
 800772e:	4651      	mov	r1, sl
 8007730:	ebb2 0801 	subs.w	r8, r2, r1
 8007734:	4659      	mov	r1, fp
 8007736:	eb63 0901 	sbc.w	r9, r3, r1
 800773a:	f04f 0200 	mov.w	r2, #0
 800773e:	f04f 0300 	mov.w	r3, #0
 8007742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800774a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800774e:	4690      	mov	r8, r2
 8007750:	4699      	mov	r9, r3
 8007752:	4623      	mov	r3, r4
 8007754:	eb18 0303 	adds.w	r3, r8, r3
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	462b      	mov	r3, r5
 800775c:	eb49 0303 	adc.w	r3, r9, r3
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800776e:	4629      	mov	r1, r5
 8007770:	024b      	lsls	r3, r1, #9
 8007772:	4621      	mov	r1, r4
 8007774:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007778:	4621      	mov	r1, r4
 800777a:	024a      	lsls	r2, r1, #9
 800777c:	4610      	mov	r0, r2
 800777e:	4619      	mov	r1, r3
 8007780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007782:	2200      	movs	r2, #0
 8007784:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007786:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007788:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800778c:	f7f9 faec 	bl	8000d68 <__aeabi_uldivmod>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	4613      	mov	r3, r2
 8007796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007798:	e058      	b.n	800784c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800779a:	4b38      	ldr	r3, [pc, #224]	@ (800787c <HAL_RCC_GetSysClockFreq+0x200>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	099b      	lsrs	r3, r3, #6
 80077a0:	2200      	movs	r2, #0
 80077a2:	4618      	mov	r0, r3
 80077a4:	4611      	mov	r1, r2
 80077a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077aa:	623b      	str	r3, [r7, #32]
 80077ac:	2300      	movs	r3, #0
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80077b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80077b4:	4642      	mov	r2, r8
 80077b6:	464b      	mov	r3, r9
 80077b8:	f04f 0000 	mov.w	r0, #0
 80077bc:	f04f 0100 	mov.w	r1, #0
 80077c0:	0159      	lsls	r1, r3, #5
 80077c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077c6:	0150      	lsls	r0, r2, #5
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4641      	mov	r1, r8
 80077ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80077d2:	4649      	mov	r1, r9
 80077d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80077e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80077e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80077ec:	ebb2 040a 	subs.w	r4, r2, sl
 80077f0:	eb63 050b 	sbc.w	r5, r3, fp
 80077f4:	f04f 0200 	mov.w	r2, #0
 80077f8:	f04f 0300 	mov.w	r3, #0
 80077fc:	00eb      	lsls	r3, r5, #3
 80077fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007802:	00e2      	lsls	r2, r4, #3
 8007804:	4614      	mov	r4, r2
 8007806:	461d      	mov	r5, r3
 8007808:	4643      	mov	r3, r8
 800780a:	18e3      	adds	r3, r4, r3
 800780c:	603b      	str	r3, [r7, #0]
 800780e:	464b      	mov	r3, r9
 8007810:	eb45 0303 	adc.w	r3, r5, r3
 8007814:	607b      	str	r3, [r7, #4]
 8007816:	f04f 0200 	mov.w	r2, #0
 800781a:	f04f 0300 	mov.w	r3, #0
 800781e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007822:	4629      	mov	r1, r5
 8007824:	028b      	lsls	r3, r1, #10
 8007826:	4621      	mov	r1, r4
 8007828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800782c:	4621      	mov	r1, r4
 800782e:	028a      	lsls	r2, r1, #10
 8007830:	4610      	mov	r0, r2
 8007832:	4619      	mov	r1, r3
 8007834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007836:	2200      	movs	r2, #0
 8007838:	61bb      	str	r3, [r7, #24]
 800783a:	61fa      	str	r2, [r7, #28]
 800783c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007840:	f7f9 fa92 	bl	8000d68 <__aeabi_uldivmod>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4613      	mov	r3, r2
 800784a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800784c:	4b0b      	ldr	r3, [pc, #44]	@ (800787c <HAL_RCC_GetSysClockFreq+0x200>)
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	0c1b      	lsrs	r3, r3, #16
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	3301      	adds	r3, #1
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800785c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800785e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007860:	fbb2 f3f3 	udiv	r3, r2, r3
 8007864:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007866:	e002      	b.n	800786e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007868:	4b05      	ldr	r3, [pc, #20]	@ (8007880 <HAL_RCC_GetSysClockFreq+0x204>)
 800786a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800786c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800786e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007870:	4618      	mov	r0, r3
 8007872:	3750      	adds	r7, #80	@ 0x50
 8007874:	46bd      	mov	sp, r7
 8007876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800787a:	bf00      	nop
 800787c:	40023800 	.word	0x40023800
 8007880:	00f42400 	.word	0x00f42400
 8007884:	007a1200 	.word	0x007a1200

08007888 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800788c:	4b03      	ldr	r3, [pc, #12]	@ (800789c <HAL_RCC_GetHCLKFreq+0x14>)
 800788e:	681b      	ldr	r3, [r3, #0]
}
 8007890:	4618      	mov	r0, r3
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	20000058 	.word	0x20000058

080078a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078a4:	f7ff fff0 	bl	8007888 <HAL_RCC_GetHCLKFreq>
 80078a8:	4602      	mov	r2, r0
 80078aa:	4b05      	ldr	r3, [pc, #20]	@ (80078c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	0a9b      	lsrs	r3, r3, #10
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	4903      	ldr	r1, [pc, #12]	@ (80078c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078b6:	5ccb      	ldrb	r3, [r1, r3]
 80078b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078bc:	4618      	mov	r0, r3
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	40023800 	.word	0x40023800
 80078c4:	08013a10 	.word	0x08013a10

080078c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80078cc:	f7ff ffdc 	bl	8007888 <HAL_RCC_GetHCLKFreq>
 80078d0:	4602      	mov	r2, r0
 80078d2:	4b05      	ldr	r3, [pc, #20]	@ (80078e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	0b5b      	lsrs	r3, r3, #13
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	4903      	ldr	r1, [pc, #12]	@ (80078ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80078de:	5ccb      	ldrb	r3, [r1, r3]
 80078e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	40023800 	.word	0x40023800
 80078ec:	08013a10 	.word	0x08013a10

080078f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80078fc:	2300      	movs	r3, #0
 80078fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007908:	2300      	movs	r3, #0
 800790a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d012      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007918:	4b69      	ldr	r3, [pc, #420]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	4a68      	ldr	r2, [pc, #416]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800791e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007922:	6093      	str	r3, [r2, #8]
 8007924:	4b66      	ldr	r3, [pc, #408]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800792c:	4964      	ldr	r1, [pc, #400]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800792e:	4313      	orrs	r3, r2
 8007930:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800793a:	2301      	movs	r3, #1
 800793c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d017      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800794a:	4b5d      	ldr	r3, [pc, #372]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800794c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007950:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007958:	4959      	ldr	r1, [pc, #356]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800795a:	4313      	orrs	r3, r2
 800795c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007964:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007968:	d101      	bne.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800796a:	2301      	movs	r3, #1
 800796c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007976:	2301      	movs	r3, #1
 8007978:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d017      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007986:	4b4e      	ldr	r3, [pc, #312]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800798c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007994:	494a      	ldr	r1, [pc, #296]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007996:	4313      	orrs	r3, r2
 8007998:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079a4:	d101      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80079a6:	2301      	movs	r3, #1
 80079a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80079b2:	2301      	movs	r3, #1
 80079b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80079c2:	2301      	movs	r3, #1
 80079c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 808b 	beq.w	8007aea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079d4:	4b3a      	ldr	r3, [pc, #232]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d8:	4a39      	ldr	r2, [pc, #228]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079de:	6413      	str	r3, [r2, #64]	@ 0x40
 80079e0:	4b37      	ldr	r3, [pc, #220]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079e8:	60bb      	str	r3, [r7, #8]
 80079ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079ec:	4b35      	ldr	r3, [pc, #212]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a34      	ldr	r2, [pc, #208]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f8:	f7fd f8ba 	bl	8004b70 <HAL_GetTick>
 80079fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079fe:	e008      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a00:	f7fd f8b6 	bl	8004b70 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b64      	cmp	r3, #100	@ 0x64
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e357      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a12:	4b2c      	ldr	r3, [pc, #176]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0f0      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a1e:	4b28      	ldr	r3, [pc, #160]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d035      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d02e      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a3c:	4b20      	ldr	r3, [pc, #128]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a46:	4b1e      	ldr	r3, [pc, #120]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a50:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a52:	4b1b      	ldr	r3, [pc, #108]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a56:	4a1a      	ldr	r2, [pc, #104]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a5c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007a5e:	4a18      	ldr	r2, [pc, #96]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a64:	4b16      	ldr	r3, [pc, #88]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d114      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a70:	f7fd f87e 	bl	8004b70 <HAL_GetTick>
 8007a74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a76:	e00a      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a78:	f7fd f87a 	bl	8004b70 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e319      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0ee      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aa6:	d111      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007aa8:	4b05      	ldr	r3, [pc, #20]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007ab4:	4b04      	ldr	r3, [pc, #16]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ab6:	400b      	ands	r3, r1
 8007ab8:	4901      	ldr	r1, [pc, #4]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	608b      	str	r3, [r1, #8]
 8007abe:	e00b      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007ac0:	40023800 	.word	0x40023800
 8007ac4:	40007000 	.word	0x40007000
 8007ac8:	0ffffcff 	.word	0x0ffffcff
 8007acc:	4baa      	ldr	r3, [pc, #680]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	4aa9      	ldr	r2, [pc, #676]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ad2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007ad6:	6093      	str	r3, [r2, #8]
 8007ad8:	4ba7      	ldr	r3, [pc, #668]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ada:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ae4:	49a4      	ldr	r1, [pc, #656]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0310 	and.w	r3, r3, #16
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d010      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007af6:	4ba0      	ldr	r3, [pc, #640]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007afc:	4a9e      	ldr	r2, [pc, #632]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007afe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007b06:	4b9c      	ldr	r3, [pc, #624]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b08:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b10:	4999      	ldr	r1, [pc, #612]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b24:	4b94      	ldr	r3, [pc, #592]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b2a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b32:	4991      	ldr	r1, [pc, #580]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b46:	4b8c      	ldr	r3, [pc, #560]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b54:	4988      	ldr	r1, [pc, #544]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b68:	4b83      	ldr	r3, [pc, #524]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b76:	4980      	ldr	r1, [pc, #512]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b8a:	4b7b      	ldr	r3, [pc, #492]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b98:	4977      	ldr	r1, [pc, #476]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007bac:	4b72      	ldr	r3, [pc, #456]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb2:	f023 0203 	bic.w	r2, r3, #3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bba:	496f      	ldr	r1, [pc, #444]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bce:	4b6a      	ldr	r3, [pc, #424]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd4:	f023 020c 	bic.w	r2, r3, #12
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bdc:	4966      	ldr	r1, [pc, #408]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00a      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bf0:	4b61      	ldr	r3, [pc, #388]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bfe:	495e      	ldr	r1, [pc, #376]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c12:	4b59      	ldr	r3, [pc, #356]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c18:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c20:	4955      	ldr	r1, [pc, #340]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c34:	4b50      	ldr	r3, [pc, #320]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c42:	494d      	ldr	r1, [pc, #308]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c56:	4b48      	ldr	r3, [pc, #288]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c64:	4944      	ldr	r1, [pc, #272]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00a      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c78:	4b3f      	ldr	r3, [pc, #252]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c7e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c86:	493c      	ldr	r1, [pc, #240]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c9a:	4b37      	ldr	r3, [pc, #220]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ca0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ca8:	4933      	ldr	r1, [pc, #204]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00a      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cc2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cca:	492b      	ldr	r1, [pc, #172]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d011      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007cde:	4b26      	ldr	r3, [pc, #152]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ce4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cec:	4922      	ldr	r1, [pc, #136]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cfc:	d101      	bne.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0308 	and.w	r3, r3, #8
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d1e:	4b16      	ldr	r3, [pc, #88]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d24:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d2c:	4912      	ldr	r1, [pc, #72]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d40:	4b0d      	ldr	r3, [pc, #52]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d46:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d50:	4909      	ldr	r1, [pc, #36]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d006      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 80d9 	beq.w	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d6c:	4b02      	ldr	r3, [pc, #8]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a01      	ldr	r2, [pc, #4]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d76:	e001      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007d78:	40023800 	.word	0x40023800
 8007d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d7e:	f7fc fef7 	bl	8004b70 <HAL_GetTick>
 8007d82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d84:	e008      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d86:	f7fc fef3 	bl	8004b70 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b64      	cmp	r3, #100	@ 0x64
 8007d92:	d901      	bls.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e194      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d98:	4b6c      	ldr	r3, [pc, #432]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1f0      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d021      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d11d      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007db8:	4b64      	ldr	r3, [pc, #400]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dbe:	0c1b      	lsrs	r3, r3, #16
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007dc6:	4b61      	ldr	r3, [pc, #388]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dcc:	0e1b      	lsrs	r3, r3, #24
 8007dce:	f003 030f 	and.w	r3, r3, #15
 8007dd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	019a      	lsls	r2, r3, #6
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	041b      	lsls	r3, r3, #16
 8007dde:	431a      	orrs	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	061b      	lsls	r3, r3, #24
 8007de4:	431a      	orrs	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	071b      	lsls	r3, r3, #28
 8007dec:	4957      	ldr	r1, [pc, #348]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d004      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e08:	d00a      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d02e      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e1e:	d129      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e20:	4b4a      	ldr	r3, [pc, #296]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e26:	0c1b      	lsrs	r3, r3, #16
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e2e:	4b47      	ldr	r3, [pc, #284]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e34:	0f1b      	lsrs	r3, r3, #28
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	019a      	lsls	r2, r3, #6
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	041b      	lsls	r3, r3, #16
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	061b      	lsls	r3, r3, #24
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	071b      	lsls	r3, r3, #28
 8007e54:	493d      	ldr	r1, [pc, #244]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e62:	f023 021f 	bic.w	r2, r3, #31
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	4937      	ldr	r1, [pc, #220]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01d      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e80:	4b32      	ldr	r3, [pc, #200]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e86:	0e1b      	lsrs	r3, r3, #24
 8007e88:	f003 030f 	and.w	r3, r3, #15
 8007e8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e94:	0f1b      	lsrs	r3, r3, #28
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	019a      	lsls	r2, r3, #6
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	041b      	lsls	r3, r3, #16
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	061b      	lsls	r3, r3, #24
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	071b      	lsls	r3, r3, #28
 8007eb4:	4925      	ldr	r1, [pc, #148]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d011      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	019a      	lsls	r2, r3, #6
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	041b      	lsls	r3, r3, #16
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	061b      	lsls	r3, r3, #24
 8007edc:	431a      	orrs	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	071b      	lsls	r3, r3, #28
 8007ee4:	4919      	ldr	r1, [pc, #100]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007eec:	4b17      	ldr	r3, [pc, #92]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a16      	ldr	r2, [pc, #88]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ef2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ef8:	f7fc fe3a 	bl	8004b70 <HAL_GetTick>
 8007efc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007efe:	e008      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f00:	f7fc fe36 	bl	8004b70 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b64      	cmp	r3, #100	@ 0x64
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e0d7      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f12:	4b0e      	ldr	r3, [pc, #56]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0f0      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	f040 80cd 	bne.w	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007f26:	4b09      	ldr	r3, [pc, #36]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a08      	ldr	r2, [pc, #32]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f32:	f7fc fe1d 	bl	8004b70 <HAL_GetTick>
 8007f36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f38:	e00a      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f3a:	f7fc fe19 	bl	8004b70 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b64      	cmp	r3, #100	@ 0x64
 8007f46:	d903      	bls.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e0ba      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007f4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f50:	4b5e      	ldr	r3, [pc, #376]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f5c:	d0ed      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d009      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d02e      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d12a      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f86:	4b51      	ldr	r3, [pc, #324]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f8c:	0c1b      	lsrs	r3, r3, #16
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f94:	4b4d      	ldr	r3, [pc, #308]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f9a:	0f1b      	lsrs	r3, r3, #28
 8007f9c:	f003 0307 	and.w	r3, r3, #7
 8007fa0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	019a      	lsls	r2, r3, #6
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	041b      	lsls	r3, r3, #16
 8007fac:	431a      	orrs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	061b      	lsls	r3, r3, #24
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	071b      	lsls	r3, r3, #28
 8007fba:	4944      	ldr	r1, [pc, #272]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007fc2:	4b42      	ldr	r3, [pc, #264]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fc8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	021b      	lsls	r3, r3, #8
 8007fd4:	493d      	ldr	r1, [pc, #244]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d022      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ff0:	d11d      	bne.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ff2:	4b36      	ldr	r3, [pc, #216]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ff8:	0e1b      	lsrs	r3, r3, #24
 8007ffa:	f003 030f 	and.w	r3, r3, #15
 8007ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008000:	4b32      	ldr	r3, [pc, #200]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008006:	0f1b      	lsrs	r3, r3, #28
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	019a      	lsls	r2, r3, #6
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a1b      	ldr	r3, [r3, #32]
 8008018:	041b      	lsls	r3, r3, #16
 800801a:	431a      	orrs	r2, r3
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	061b      	lsls	r3, r3, #24
 8008020:	431a      	orrs	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	071b      	lsls	r3, r3, #28
 8008026:	4929      	ldr	r1, [pc, #164]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008028:	4313      	orrs	r3, r2
 800802a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	2b00      	cmp	r3, #0
 8008038:	d028      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800803a:	4b24      	ldr	r3, [pc, #144]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800803c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008040:	0e1b      	lsrs	r3, r3, #24
 8008042:	f003 030f 	and.w	r3, r3, #15
 8008046:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008048:	4b20      	ldr	r3, [pc, #128]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800804a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800804e:	0c1b      	lsrs	r3, r3, #16
 8008050:	f003 0303 	and.w	r3, r3, #3
 8008054:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	019a      	lsls	r2, r3, #6
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	041b      	lsls	r3, r3, #16
 8008060:	431a      	orrs	r2, r3
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	061b      	lsls	r3, r3, #24
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	071b      	lsls	r3, r3, #28
 800806e:	4917      	ldr	r1, [pc, #92]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008070:	4313      	orrs	r3, r2
 8008072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008076:	4b15      	ldr	r3, [pc, #84]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800807c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008084:	4911      	ldr	r1, [pc, #68]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008086:	4313      	orrs	r3, r2
 8008088:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800808c:	4b0f      	ldr	r3, [pc, #60]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a0e      	ldr	r2, [pc, #56]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008098:	f7fc fd6a 	bl	8004b70 <HAL_GetTick>
 800809c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800809e:	e008      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080a0:	f7fc fd66 	bl	8004b70 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	2b64      	cmp	r3, #100	@ 0x64
 80080ac:	d901      	bls.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e007      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080b2:	4b06      	ldr	r3, [pc, #24]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080be:	d1ef      	bne.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3720      	adds	r7, #32
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	40023800 	.word	0x40023800

080080d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e09d      	b.n	800821e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d108      	bne.n	80080fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080f2:	d009      	beq.n	8008108 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	61da      	str	r2, [r3, #28]
 80080fa:	e005      	b.n	8008108 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7fb fe3c 	bl	8003da0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800813e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008148:	d902      	bls.n	8008150 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	e002      	b.n	8008156 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008154:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800815e:	d007      	beq.n	8008170 <HAL_SPI_Init+0xa0>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008168:	d002      	beq.n	8008170 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008180:	431a      	orrs	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	431a      	orrs	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800819e:	431a      	orrs	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081a8:	431a      	orrs	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081b2:	ea42 0103 	orr.w	r1, r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	f003 0204 	and.w	r2, r3, #4
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d4:	f003 0310 	and.w	r3, r3, #16
 80081d8:	431a      	orrs	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081de:	f003 0308 	and.w	r3, r3, #8
 80081e2:	431a      	orrs	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80081ec:	ea42 0103 	orr.w	r1, r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69da      	ldr	r2, [r3, #28]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800820c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b088      	sub	sp, #32
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	603b      	str	r3, [r7, #0]
 8008232:	4613      	mov	r3, r2
 8008234:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <HAL_SPI_Transmit+0x22>
 8008244:	2302      	movs	r3, #2
 8008246:	e15f      	b.n	8008508 <HAL_SPI_Transmit+0x2e2>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008250:	f7fc fc8e 	bl	8004b70 <HAL_GetTick>
 8008254:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008256:	88fb      	ldrh	r3, [r7, #6]
 8008258:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b01      	cmp	r3, #1
 8008264:	d002      	beq.n	800826c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008266:	2302      	movs	r3, #2
 8008268:	77fb      	strb	r3, [r7, #31]
    goto error;
 800826a:	e148      	b.n	80084fe <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <HAL_SPI_Transmit+0x52>
 8008272:	88fb      	ldrh	r3, [r7, #6]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d102      	bne.n	800827e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800827c:	e13f      	b.n	80084fe <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2203      	movs	r2, #3
 8008282:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	88fa      	ldrh	r2, [r7, #6]
 8008296:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	88fa      	ldrh	r2, [r7, #6]
 800829c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082c8:	d10f      	bne.n	80082ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f4:	2b40      	cmp	r3, #64	@ 0x40
 80082f6:	d007      	beq.n	8008308 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008306:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008310:	d94f      	bls.n	80083b2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <HAL_SPI_Transmit+0xfa>
 800831a:	8afb      	ldrh	r3, [r7, #22]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d142      	bne.n	80083a6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008324:	881a      	ldrh	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008330:	1c9a      	adds	r2, r3, #2
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800833a:	b29b      	uxth	r3, r3
 800833c:	3b01      	subs	r3, #1
 800833e:	b29a      	uxth	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008344:	e02f      	b.n	80083a6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f003 0302 	and.w	r3, r3, #2
 8008350:	2b02      	cmp	r3, #2
 8008352:	d112      	bne.n	800837a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008358:	881a      	ldrh	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008364:	1c9a      	adds	r2, r3, #2
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800836e:	b29b      	uxth	r3, r3
 8008370:	3b01      	subs	r3, #1
 8008372:	b29a      	uxth	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008378:	e015      	b.n	80083a6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800837a:	f7fc fbf9 	bl	8004b70 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	429a      	cmp	r2, r3
 8008388:	d803      	bhi.n	8008392 <HAL_SPI_Transmit+0x16c>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008390:	d102      	bne.n	8008398 <HAL_SPI_Transmit+0x172>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d106      	bne.n	80083a6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80083a4:	e0ab      	b.n	80084fe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1ca      	bne.n	8008346 <HAL_SPI_Transmit+0x120>
 80083b0:	e080      	b.n	80084b4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <HAL_SPI_Transmit+0x19a>
 80083ba:	8afb      	ldrh	r3, [r7, #22]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d174      	bne.n	80084aa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d912      	bls.n	80083f0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ce:	881a      	ldrh	r2, [r3, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083da:	1c9a      	adds	r2, r3, #2
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	3b02      	subs	r3, #2
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80083ee:	e05c      	b.n	80084aa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	330c      	adds	r3, #12
 80083fa:	7812      	ldrb	r2, [r2, #0]
 80083fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800840c:	b29b      	uxth	r3, r3
 800840e:	3b01      	subs	r3, #1
 8008410:	b29a      	uxth	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008416:	e048      	b.n	80084aa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f003 0302 	and.w	r3, r3, #2
 8008422:	2b02      	cmp	r3, #2
 8008424:	d12b      	bne.n	800847e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800842a:	b29b      	uxth	r3, r3
 800842c:	2b01      	cmp	r3, #1
 800842e:	d912      	bls.n	8008456 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008434:	881a      	ldrh	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008440:	1c9a      	adds	r2, r3, #2
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800844a:	b29b      	uxth	r3, r3
 800844c:	3b02      	subs	r3, #2
 800844e:	b29a      	uxth	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008454:	e029      	b.n	80084aa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	330c      	adds	r3, #12
 8008460:	7812      	ldrb	r2, [r2, #0]
 8008462:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008472:	b29b      	uxth	r3, r3
 8008474:	3b01      	subs	r3, #1
 8008476:	b29a      	uxth	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800847c:	e015      	b.n	80084aa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800847e:	f7fc fb77 	bl	8004b70 <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	429a      	cmp	r2, r3
 800848c:	d803      	bhi.n	8008496 <HAL_SPI_Transmit+0x270>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008494:	d102      	bne.n	800849c <HAL_SPI_Transmit+0x276>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d106      	bne.n	80084aa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80084a8:	e029      	b.n	80084fe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1b1      	bne.n	8008418 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fb77 	bl	8008bac <SPI_EndRxTxTransaction>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2220      	movs	r2, #32
 80084c8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10a      	bne.n	80084e8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084d2:	2300      	movs	r3, #0
 80084d4:	613b      	str	r3, [r7, #16]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	613b      	str	r3, [r7, #16]
 80084e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	77fb      	strb	r3, [r7, #31]
 80084f4:	e003      	b.n	80084fe <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008506:	7ffb      	ldrb	r3, [r7, #31]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3720      	adds	r7, #32
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08a      	sub	sp, #40	@ 0x28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800851e:	2301      	movs	r3, #1
 8008520:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800852e:	2b01      	cmp	r3, #1
 8008530:	d101      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x26>
 8008532:	2302      	movs	r3, #2
 8008534:	e20a      	b.n	800894c <HAL_SPI_TransmitReceive+0x43c>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800853e:	f7fc fb17 	bl	8004b70 <HAL_GetTick>
 8008542:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800854a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008552:	887b      	ldrh	r3, [r7, #2]
 8008554:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008556:	887b      	ldrh	r3, [r7, #2]
 8008558:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800855a:	7efb      	ldrb	r3, [r7, #27]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d00e      	beq.n	800857e <HAL_SPI_TransmitReceive+0x6e>
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008566:	d106      	bne.n	8008576 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d102      	bne.n	8008576 <HAL_SPI_TransmitReceive+0x66>
 8008570:	7efb      	ldrb	r3, [r7, #27]
 8008572:	2b04      	cmp	r3, #4
 8008574:	d003      	beq.n	800857e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008576:	2302      	movs	r3, #2
 8008578:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800857c:	e1e0      	b.n	8008940 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <HAL_SPI_TransmitReceive+0x80>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <HAL_SPI_TransmitReceive+0x80>
 800858a:	887b      	ldrh	r3, [r7, #2]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d103      	bne.n	8008598 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008596:	e1d3      	b.n	8008940 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b04      	cmp	r3, #4
 80085a2:	d003      	beq.n	80085ac <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2205      	movs	r2, #5
 80085a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	887a      	ldrh	r2, [r7, #2]
 80085bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	887a      	ldrh	r2, [r7, #2]
 80085c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	887a      	ldrh	r2, [r7, #2]
 80085d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	887a      	ldrh	r2, [r7, #2]
 80085d8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80085ee:	d802      	bhi.n	80085f6 <HAL_SPI_TransmitReceive+0xe6>
 80085f0:	8a3b      	ldrh	r3, [r7, #16]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d908      	bls.n	8008608 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008604:	605a      	str	r2, [r3, #4]
 8008606:	e007      	b.n	8008618 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008616:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008622:	2b40      	cmp	r3, #64	@ 0x40
 8008624:	d007      	beq.n	8008636 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008634:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800863e:	f240 8081 	bls.w	8008744 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <HAL_SPI_TransmitReceive+0x140>
 800864a:	8a7b      	ldrh	r3, [r7, #18]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d16d      	bne.n	800872c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008654:	881a      	ldrh	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008660:	1c9a      	adds	r2, r3, #2
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800866a:	b29b      	uxth	r3, r3
 800866c:	3b01      	subs	r3, #1
 800866e:	b29a      	uxth	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008674:	e05a      	b.n	800872c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b02      	cmp	r3, #2
 8008682:	d11b      	bne.n	80086bc <HAL_SPI_TransmitReceive+0x1ac>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008688:	b29b      	uxth	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d016      	beq.n	80086bc <HAL_SPI_TransmitReceive+0x1ac>
 800868e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008690:	2b01      	cmp	r3, #1
 8008692:	d113      	bne.n	80086bc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008698:	881a      	ldrh	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a4:	1c9a      	adds	r2, r3, #2
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d11c      	bne.n	8008704 <HAL_SPI_TransmitReceive+0x1f4>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d016      	beq.n	8008704 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e0:	b292      	uxth	r2, r2
 80086e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e8:	1c9a      	adds	r2, r3, #2
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	3b01      	subs	r3, #1
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008700:	2301      	movs	r3, #1
 8008702:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008704:	f7fc fa34 	bl	8004b70 <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008710:	429a      	cmp	r2, r3
 8008712:	d80b      	bhi.n	800872c <HAL_SPI_TransmitReceive+0x21c>
 8008714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871a:	d007      	beq.n	800872c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800872a:	e109      	b.n	8008940 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008730:	b29b      	uxth	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d19f      	bne.n	8008676 <HAL_SPI_TransmitReceive+0x166>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800873c:	b29b      	uxth	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d199      	bne.n	8008676 <HAL_SPI_TransmitReceive+0x166>
 8008742:	e0e3      	b.n	800890c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <HAL_SPI_TransmitReceive+0x244>
 800874c:	8a7b      	ldrh	r3, [r7, #18]
 800874e:	2b01      	cmp	r3, #1
 8008750:	f040 80cf 	bne.w	80088f2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b01      	cmp	r3, #1
 800875c:	d912      	bls.n	8008784 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008762:	881a      	ldrh	r2, [r3, #0]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876e:	1c9a      	adds	r2, r3, #2
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008778:	b29b      	uxth	r3, r3
 800877a:	3b02      	subs	r3, #2
 800877c:	b29a      	uxth	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008782:	e0b6      	b.n	80088f2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	330c      	adds	r3, #12
 800878e:	7812      	ldrb	r2, [r2, #0]
 8008790:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	3b01      	subs	r3, #1
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087aa:	e0a2      	b.n	80088f2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d134      	bne.n	8008824 <HAL_SPI_TransmitReceive+0x314>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087be:	b29b      	uxth	r3, r3
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d02f      	beq.n	8008824 <HAL_SPI_TransmitReceive+0x314>
 80087c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d12c      	bne.n	8008824 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d912      	bls.n	80087fa <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d8:	881a      	ldrh	r2, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e4:	1c9a      	adds	r2, r3, #2
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	3b02      	subs	r3, #2
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80087f8:	e012      	b.n	8008820 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	330c      	adds	r3, #12
 8008804:	7812      	ldrb	r2, [r2, #0]
 8008806:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880c:	1c5a      	adds	r2, r3, #1
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008816:	b29b      	uxth	r3, r3
 8008818:	3b01      	subs	r3, #1
 800881a:	b29a      	uxth	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008820:	2300      	movs	r3, #0
 8008822:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b01      	cmp	r3, #1
 8008830:	d148      	bne.n	80088c4 <HAL_SPI_TransmitReceive+0x3b4>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008838:	b29b      	uxth	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d042      	beq.n	80088c4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008844:	b29b      	uxth	r3, r3
 8008846:	2b01      	cmp	r3, #1
 8008848:	d923      	bls.n	8008892 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68da      	ldr	r2, [r3, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008854:	b292      	uxth	r2, r2
 8008856:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800885c:	1c9a      	adds	r2, r3, #2
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008868:	b29b      	uxth	r3, r3
 800886a:	3b02      	subs	r3, #2
 800886c:	b29a      	uxth	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800887a:	b29b      	uxth	r3, r3
 800887c:	2b01      	cmp	r3, #1
 800887e:	d81f      	bhi.n	80088c0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800888e:	605a      	str	r2, [r3, #4]
 8008890:	e016      	b.n	80088c0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f103 020c 	add.w	r2, r3, #12
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889e:	7812      	ldrb	r2, [r2, #0]
 80088a0:	b2d2      	uxtb	r2, r2
 80088a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	3b01      	subs	r3, #1
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088c0:	2301      	movs	r3, #1
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80088c4:	f7fc f954 	bl	8004b70 <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d803      	bhi.n	80088dc <HAL_SPI_TransmitReceive+0x3cc>
 80088d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088da:	d102      	bne.n	80088e2 <HAL_SPI_TransmitReceive+0x3d2>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d107      	bne.n	80088f2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80088f0:	e026      	b.n	8008940 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f47f af57 	bne.w	80087ac <HAL_SPI_TransmitReceive+0x29c>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008904:	b29b      	uxth	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	f47f af50 	bne.w	80087ac <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800890c:	69fa      	ldr	r2, [r7, #28]
 800890e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 f94b 	bl	8008bac <SPI_EndRxTxTransaction>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d005      	beq.n	8008928 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2220      	movs	r2, #32
 8008926:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800892c:	2b00      	cmp	r3, #0
 800892e:	d003      	beq.n	8008938 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008936:	e003      	b.n	8008940 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008948:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800894c:	4618      	mov	r0, r3
 800894e:	3728      	adds	r7, #40	@ 0x28
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008962:	b2db      	uxtb	r3, r3
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	603b      	str	r3, [r7, #0]
 800897c:	4613      	mov	r3, r2
 800897e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008980:	f7fc f8f6 	bl	8004b70 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008988:	1a9b      	subs	r3, r3, r2
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	4413      	add	r3, r2
 800898e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008990:	f7fc f8ee 	bl	8004b70 <HAL_GetTick>
 8008994:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008996:	4b39      	ldr	r3, [pc, #228]	@ (8008a7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	015b      	lsls	r3, r3, #5
 800899c:	0d1b      	lsrs	r3, r3, #20
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	fb02 f303 	mul.w	r3, r2, r3
 80089a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089a6:	e054      	b.n	8008a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ae:	d050      	beq.n	8008a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089b0:	f7fc f8de 	bl	8004b70 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	69fa      	ldr	r2, [r7, #28]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d902      	bls.n	80089c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d13d      	bne.n	8008a42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80089d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089de:	d111      	bne.n	8008a04 <SPI_WaitFlagStateUntilTimeout+0x94>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089e8:	d004      	beq.n	80089f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089f2:	d107      	bne.n	8008a04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a0c:	d10f      	bne.n	8008a2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e017      	b.n	8008a72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689a      	ldr	r2, [r3, #8]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	bf0c      	ite	eq
 8008a62:	2301      	moveq	r3, #1
 8008a64:	2300      	movne	r3, #0
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	79fb      	ldrb	r3, [r7, #7]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d19b      	bne.n	80089a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3720      	adds	r7, #32
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000058 	.word	0x20000058

08008a80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08a      	sub	sp, #40	@ 0x28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
 8008a8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a92:	f7fc f86d 	bl	8004b70 <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008aa2:	f7fc f865 	bl	8004b70 <HAL_GetTick>
 8008aa6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	330c      	adds	r3, #12
 8008aae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008ab0:	4b3d      	ldr	r3, [pc, #244]	@ (8008ba8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	00da      	lsls	r2, r3, #3
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	0d1b      	lsrs	r3, r3, #20
 8008ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ac2:	fb02 f303 	mul.w	r3, r2, r3
 8008ac6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008ac8:	e060      	b.n	8008b8c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008ad0:	d107      	bne.n	8008ae2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d104      	bne.n	8008ae2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae8:	d050      	beq.n	8008b8c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008aea:	f7fc f841 	bl	8004b70 <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d902      	bls.n	8008b00 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d13d      	bne.n	8008b7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008b0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b18:	d111      	bne.n	8008b3e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b22:	d004      	beq.n	8008b2e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b2c:	d107      	bne.n	8008b3e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b46:	d10f      	bne.n	8008b68 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e010      	b.n	8008b9e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689a      	ldr	r2, [r3, #8]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	4013      	ands	r3, r2
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d196      	bne.n	8008aca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3728      	adds	r7, #40	@ 0x28
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000058 	.word	0x20000058

08008bac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af02      	add	r7, sp, #8
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7ff ff5b 	bl	8008a80 <SPI_WaitFifoStateUntilTimeout>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d007      	beq.n	8008be0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bd4:	f043 0220 	orr.w	r2, r3, #32
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e046      	b.n	8008c6e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008be0:	4b25      	ldr	r3, [pc, #148]	@ (8008c78 <SPI_EndRxTxTransaction+0xcc>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a25      	ldr	r2, [pc, #148]	@ (8008c7c <SPI_EndRxTxTransaction+0xd0>)
 8008be6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bea:	0d5b      	lsrs	r3, r3, #21
 8008bec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008bf0:	fb02 f303 	mul.w	r3, r2, r3
 8008bf4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008bfe:	d112      	bne.n	8008c26 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2200      	movs	r2, #0
 8008c08:	2180      	movs	r1, #128	@ 0x80
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f7ff feb0 	bl	8008970 <SPI_WaitFlagStateUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d016      	beq.n	8008c44 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c1a:	f043 0220 	orr.w	r2, r3, #32
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e023      	b.n	8008c6e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00a      	beq.n	8008c42 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c3c:	2b80      	cmp	r3, #128	@ 0x80
 8008c3e:	d0f2      	beq.n	8008c26 <SPI_EndRxTxTransaction+0x7a>
 8008c40:	e000      	b.n	8008c44 <SPI_EndRxTxTransaction+0x98>
        break;
 8008c42:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f7ff ff15 	bl	8008a80 <SPI_WaitFifoStateUntilTimeout>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d007      	beq.n	8008c6c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c60:	f043 0220 	orr.w	r2, r3, #32
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e000      	b.n	8008c6e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	20000058 	.word	0x20000058
 8008c7c:	165e9f81 	.word	0x165e9f81

08008c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e049      	b.n	8008d26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d106      	bne.n	8008cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7fb fd3e 	bl	8004728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3304      	adds	r3, #4
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	f000 fd18 	bl	80096f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
	...

08008d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d001      	beq.n	8008d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e054      	b.n	8008df2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68da      	ldr	r2, [r3, #12]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0201 	orr.w	r2, r2, #1
 8008d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a26      	ldr	r2, [pc, #152]	@ (8008e00 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d022      	beq.n	8008db0 <HAL_TIM_Base_Start_IT+0x80>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d72:	d01d      	beq.n	8008db0 <HAL_TIM_Base_Start_IT+0x80>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a22      	ldr	r2, [pc, #136]	@ (8008e04 <HAL_TIM_Base_Start_IT+0xd4>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d018      	beq.n	8008db0 <HAL_TIM_Base_Start_IT+0x80>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a21      	ldr	r2, [pc, #132]	@ (8008e08 <HAL_TIM_Base_Start_IT+0xd8>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d013      	beq.n	8008db0 <HAL_TIM_Base_Start_IT+0x80>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8008e0c <HAL_TIM_Base_Start_IT+0xdc>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d00e      	beq.n	8008db0 <HAL_TIM_Base_Start_IT+0x80>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a1e      	ldr	r2, [pc, #120]	@ (8008e10 <HAL_TIM_Base_Start_IT+0xe0>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d009      	beq.n	8008db0 <HAL_TIM_Base_Start_IT+0x80>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a1c      	ldr	r2, [pc, #112]	@ (8008e14 <HAL_TIM_Base_Start_IT+0xe4>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d004      	beq.n	8008db0 <HAL_TIM_Base_Start_IT+0x80>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a1b      	ldr	r2, [pc, #108]	@ (8008e18 <HAL_TIM_Base_Start_IT+0xe8>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d115      	bne.n	8008ddc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	4b19      	ldr	r3, [pc, #100]	@ (8008e1c <HAL_TIM_Base_Start_IT+0xec>)
 8008db8:	4013      	ands	r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2b06      	cmp	r3, #6
 8008dc0:	d015      	beq.n	8008dee <HAL_TIM_Base_Start_IT+0xbe>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dc8:	d011      	beq.n	8008dee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f042 0201 	orr.w	r2, r2, #1
 8008dd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dda:	e008      	b.n	8008dee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f042 0201 	orr.w	r2, r2, #1
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	e000      	b.n	8008df0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	40010000 	.word	0x40010000
 8008e04:	40000400 	.word	0x40000400
 8008e08:	40000800 	.word	0x40000800
 8008e0c:	40000c00 	.word	0x40000c00
 8008e10:	40010400 	.word	0x40010400
 8008e14:	40014000 	.word	0x40014000
 8008e18:	40001800 	.word	0x40001800
 8008e1c:	00010007 	.word	0x00010007

08008e20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e049      	b.n	8008ec6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d106      	bne.n	8008e4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f841 	bl	8008ece <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4610      	mov	r0, r2
 8008e60:	f000 fc48 	bl	80096f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ed6:	bf00      	nop
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
	...

08008ee4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d109      	bne.n	8008f08 <HAL_TIM_PWM_Start+0x24>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	bf14      	ite	ne
 8008f00:	2301      	movne	r3, #1
 8008f02:	2300      	moveq	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	e03c      	b.n	8008f82 <HAL_TIM_PWM_Start+0x9e>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2b04      	cmp	r3, #4
 8008f0c:	d109      	bne.n	8008f22 <HAL_TIM_PWM_Start+0x3e>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	bf14      	ite	ne
 8008f1a:	2301      	movne	r3, #1
 8008f1c:	2300      	moveq	r3, #0
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	e02f      	b.n	8008f82 <HAL_TIM_PWM_Start+0x9e>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2b08      	cmp	r3, #8
 8008f26:	d109      	bne.n	8008f3c <HAL_TIM_PWM_Start+0x58>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	bf14      	ite	ne
 8008f34:	2301      	movne	r3, #1
 8008f36:	2300      	moveq	r3, #0
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	e022      	b.n	8008f82 <HAL_TIM_PWM_Start+0x9e>
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b0c      	cmp	r3, #12
 8008f40:	d109      	bne.n	8008f56 <HAL_TIM_PWM_Start+0x72>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	bf14      	ite	ne
 8008f4e:	2301      	movne	r3, #1
 8008f50:	2300      	moveq	r3, #0
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	e015      	b.n	8008f82 <HAL_TIM_PWM_Start+0x9e>
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2b10      	cmp	r3, #16
 8008f5a:	d109      	bne.n	8008f70 <HAL_TIM_PWM_Start+0x8c>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	bf14      	ite	ne
 8008f68:	2301      	movne	r3, #1
 8008f6a:	2300      	moveq	r3, #0
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	e008      	b.n	8008f82 <HAL_TIM_PWM_Start+0x9e>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	bf14      	ite	ne
 8008f7c:	2301      	movne	r3, #1
 8008f7e:	2300      	moveq	r3, #0
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e092      	b.n	80090b0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d104      	bne.n	8008f9a <HAL_TIM_PWM_Start+0xb6>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2202      	movs	r2, #2
 8008f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f98:	e023      	b.n	8008fe2 <HAL_TIM_PWM_Start+0xfe>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d104      	bne.n	8008faa <HAL_TIM_PWM_Start+0xc6>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fa8:	e01b      	b.n	8008fe2 <HAL_TIM_PWM_Start+0xfe>
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b08      	cmp	r3, #8
 8008fae:	d104      	bne.n	8008fba <HAL_TIM_PWM_Start+0xd6>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fb8:	e013      	b.n	8008fe2 <HAL_TIM_PWM_Start+0xfe>
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	2b0c      	cmp	r3, #12
 8008fbe:	d104      	bne.n	8008fca <HAL_TIM_PWM_Start+0xe6>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008fc8:	e00b      	b.n	8008fe2 <HAL_TIM_PWM_Start+0xfe>
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	2b10      	cmp	r3, #16
 8008fce:	d104      	bne.n	8008fda <HAL_TIM_PWM_Start+0xf6>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fd8:	e003      	b.n	8008fe2 <HAL_TIM_PWM_Start+0xfe>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2202      	movs	r2, #2
 8008fde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 ff26 	bl	8009e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a30      	ldr	r2, [pc, #192]	@ (80090b8 <HAL_TIM_PWM_Start+0x1d4>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d004      	beq.n	8009004 <HAL_TIM_PWM_Start+0x120>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80090bc <HAL_TIM_PWM_Start+0x1d8>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d101      	bne.n	8009008 <HAL_TIM_PWM_Start+0x124>
 8009004:	2301      	movs	r3, #1
 8009006:	e000      	b.n	800900a <HAL_TIM_PWM_Start+0x126>
 8009008:	2300      	movs	r3, #0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d007      	beq.n	800901e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800901c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a25      	ldr	r2, [pc, #148]	@ (80090b8 <HAL_TIM_PWM_Start+0x1d4>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d022      	beq.n	800906e <HAL_TIM_PWM_Start+0x18a>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009030:	d01d      	beq.n	800906e <HAL_TIM_PWM_Start+0x18a>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a22      	ldr	r2, [pc, #136]	@ (80090c0 <HAL_TIM_PWM_Start+0x1dc>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d018      	beq.n	800906e <HAL_TIM_PWM_Start+0x18a>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a20      	ldr	r2, [pc, #128]	@ (80090c4 <HAL_TIM_PWM_Start+0x1e0>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d013      	beq.n	800906e <HAL_TIM_PWM_Start+0x18a>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a1f      	ldr	r2, [pc, #124]	@ (80090c8 <HAL_TIM_PWM_Start+0x1e4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d00e      	beq.n	800906e <HAL_TIM_PWM_Start+0x18a>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a19      	ldr	r2, [pc, #100]	@ (80090bc <HAL_TIM_PWM_Start+0x1d8>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d009      	beq.n	800906e <HAL_TIM_PWM_Start+0x18a>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a1b      	ldr	r2, [pc, #108]	@ (80090cc <HAL_TIM_PWM_Start+0x1e8>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d004      	beq.n	800906e <HAL_TIM_PWM_Start+0x18a>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a19      	ldr	r2, [pc, #100]	@ (80090d0 <HAL_TIM_PWM_Start+0x1ec>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d115      	bne.n	800909a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	4b17      	ldr	r3, [pc, #92]	@ (80090d4 <HAL_TIM_PWM_Start+0x1f0>)
 8009076:	4013      	ands	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b06      	cmp	r3, #6
 800907e:	d015      	beq.n	80090ac <HAL_TIM_PWM_Start+0x1c8>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009086:	d011      	beq.n	80090ac <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f042 0201 	orr.w	r2, r2, #1
 8009096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009098:	e008      	b.n	80090ac <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f042 0201 	orr.w	r2, r2, #1
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	e000      	b.n	80090ae <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	40010000 	.word	0x40010000
 80090bc:	40010400 	.word	0x40010400
 80090c0:	40000400 	.word	0x40000400
 80090c4:	40000800 	.word	0x40000800
 80090c8:	40000c00 	.word	0x40000c00
 80090cc:	40014000 	.word	0x40014000
 80090d0:	40001800 	.word	0x40001800
 80090d4:	00010007 	.word	0x00010007

080090d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f003 0302 	and.w	r3, r3, #2
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d020      	beq.n	800913c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01b      	beq.n	800913c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f06f 0202 	mvn.w	r2, #2
 800910c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	f003 0303 	and.w	r3, r3, #3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fac8 	bl	80096b8 <HAL_TIM_IC_CaptureCallback>
 8009128:	e005      	b.n	8009136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 faba 	bl	80096a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 facb 	bl	80096cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b00      	cmp	r3, #0
 8009144:	d020      	beq.n	8009188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01b      	beq.n	8009188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f06f 0204 	mvn.w	r2, #4
 8009158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2202      	movs	r2, #2
 800915e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 faa2 	bl	80096b8 <HAL_TIM_IC_CaptureCallback>
 8009174:	e005      	b.n	8009182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fa94 	bl	80096a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 faa5 	bl	80096cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f003 0308 	and.w	r3, r3, #8
 800918e:	2b00      	cmp	r3, #0
 8009190:	d020      	beq.n	80091d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f003 0308 	and.w	r3, r3, #8
 8009198:	2b00      	cmp	r3, #0
 800919a:	d01b      	beq.n	80091d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f06f 0208 	mvn.w	r2, #8
 80091a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2204      	movs	r2, #4
 80091aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa7c 	bl	80096b8 <HAL_TIM_IC_CaptureCallback>
 80091c0:	e005      	b.n	80091ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fa6e 	bl	80096a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fa7f 	bl	80096cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f003 0310 	and.w	r3, r3, #16
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d020      	beq.n	8009220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f003 0310 	and.w	r3, r3, #16
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d01b      	beq.n	8009220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f06f 0210 	mvn.w	r2, #16
 80091f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2208      	movs	r2, #8
 80091f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	69db      	ldr	r3, [r3, #28]
 80091fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fa56 	bl	80096b8 <HAL_TIM_IC_CaptureCallback>
 800920c:	e005      	b.n	800921a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fa48 	bl	80096a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fa59 	bl	80096cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00c      	beq.n	8009244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d007      	beq.n	8009244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f06f 0201 	mvn.w	r2, #1
 800923c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7fa f8ee 	bl	8003420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00c      	beq.n	8009272 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800925e:	2b00      	cmp	r3, #0
 8009260:	d007      	beq.n	8009272 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800926a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fea3 	bl	8009fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00c      	beq.n	8009296 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009282:	2b00      	cmp	r3, #0
 8009284:	d007      	beq.n	8009296 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800928e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fe9b 	bl	8009fcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00c      	beq.n	80092ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d007      	beq.n	80092ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80092b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fa13 	bl	80096e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	f003 0320 	and.w	r3, r3, #32
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00c      	beq.n	80092de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f003 0320 	and.w	r3, r3, #32
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d007      	beq.n	80092de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f06f 0220 	mvn.w	r2, #32
 80092d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fe63 	bl	8009fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092de:	bf00      	nop
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d101      	bne.n	8009306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009302:	2302      	movs	r3, #2
 8009304:	e0ff      	b.n	8009506 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b14      	cmp	r3, #20
 8009312:	f200 80f0 	bhi.w	80094f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009316:	a201      	add	r2, pc, #4	@ (adr r2, 800931c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	08009371 	.word	0x08009371
 8009320:	080094f7 	.word	0x080094f7
 8009324:	080094f7 	.word	0x080094f7
 8009328:	080094f7 	.word	0x080094f7
 800932c:	080093b1 	.word	0x080093b1
 8009330:	080094f7 	.word	0x080094f7
 8009334:	080094f7 	.word	0x080094f7
 8009338:	080094f7 	.word	0x080094f7
 800933c:	080093f3 	.word	0x080093f3
 8009340:	080094f7 	.word	0x080094f7
 8009344:	080094f7 	.word	0x080094f7
 8009348:	080094f7 	.word	0x080094f7
 800934c:	08009433 	.word	0x08009433
 8009350:	080094f7 	.word	0x080094f7
 8009354:	080094f7 	.word	0x080094f7
 8009358:	080094f7 	.word	0x080094f7
 800935c:	08009475 	.word	0x08009475
 8009360:	080094f7 	.word	0x080094f7
 8009364:	080094f7 	.word	0x080094f7
 8009368:	080094f7 	.word	0x080094f7
 800936c:	080094b5 	.word	0x080094b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68b9      	ldr	r1, [r7, #8]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fa68 	bl	800984c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	699a      	ldr	r2, [r3, #24]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f042 0208 	orr.w	r2, r2, #8
 800938a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	699a      	ldr	r2, [r3, #24]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f022 0204 	bic.w	r2, r2, #4
 800939a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6999      	ldr	r1, [r3, #24]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	691a      	ldr	r2, [r3, #16]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	619a      	str	r2, [r3, #24]
      break;
 80093ae:	e0a5      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68b9      	ldr	r1, [r7, #8]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 faba 	bl	8009930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699a      	ldr	r2, [r3, #24]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699a      	ldr	r2, [r3, #24]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6999      	ldr	r1, [r3, #24]
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	021a      	lsls	r2, r3, #8
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	430a      	orrs	r2, r1
 80093ee:	619a      	str	r2, [r3, #24]
      break;
 80093f0:	e084      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68b9      	ldr	r1, [r7, #8]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 fb11 	bl	8009a20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	69da      	ldr	r2, [r3, #28]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f042 0208 	orr.w	r2, r2, #8
 800940c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	69da      	ldr	r2, [r3, #28]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f022 0204 	bic.w	r2, r2, #4
 800941c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	69d9      	ldr	r1, [r3, #28]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	430a      	orrs	r2, r1
 800942e:	61da      	str	r2, [r3, #28]
      break;
 8009430:	e064      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fb67 	bl	8009b0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	69da      	ldr	r2, [r3, #28]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800944c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69da      	ldr	r2, [r3, #28]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800945c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69d9      	ldr	r1, [r3, #28]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	021a      	lsls	r2, r3, #8
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	61da      	str	r2, [r3, #28]
      break;
 8009472:	e043      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68b9      	ldr	r1, [r7, #8]
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fb9e 	bl	8009bbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 0208 	orr.w	r2, r2, #8
 800948e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 0204 	bic.w	r2, r2, #4
 800949e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	691a      	ldr	r2, [r3, #16]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80094b2:	e023      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68b9      	ldr	r1, [r7, #8]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 fbd0 	bl	8009c60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	021a      	lsls	r2, r3, #8
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	430a      	orrs	r2, r1
 80094f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80094f4:	e002      	b.n	80094fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	75fb      	strb	r3, [r7, #23]
      break;
 80094fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009504:	7dfb      	ldrb	r3, [r7, #23]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop

08009510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009524:	2b01      	cmp	r3, #1
 8009526:	d101      	bne.n	800952c <HAL_TIM_ConfigClockSource+0x1c>
 8009528:	2302      	movs	r3, #2
 800952a:	e0b4      	b.n	8009696 <HAL_TIM_ConfigClockSource+0x186>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2202      	movs	r2, #2
 8009538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	4b56      	ldr	r3, [pc, #344]	@ (80096a0 <HAL_TIM_ConfigClockSource+0x190>)
 8009548:	4013      	ands	r3, r2
 800954a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009564:	d03e      	beq.n	80095e4 <HAL_TIM_ConfigClockSource+0xd4>
 8009566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800956a:	f200 8087 	bhi.w	800967c <HAL_TIM_ConfigClockSource+0x16c>
 800956e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009572:	f000 8086 	beq.w	8009682 <HAL_TIM_ConfigClockSource+0x172>
 8009576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800957a:	d87f      	bhi.n	800967c <HAL_TIM_ConfigClockSource+0x16c>
 800957c:	2b70      	cmp	r3, #112	@ 0x70
 800957e:	d01a      	beq.n	80095b6 <HAL_TIM_ConfigClockSource+0xa6>
 8009580:	2b70      	cmp	r3, #112	@ 0x70
 8009582:	d87b      	bhi.n	800967c <HAL_TIM_ConfigClockSource+0x16c>
 8009584:	2b60      	cmp	r3, #96	@ 0x60
 8009586:	d050      	beq.n	800962a <HAL_TIM_ConfigClockSource+0x11a>
 8009588:	2b60      	cmp	r3, #96	@ 0x60
 800958a:	d877      	bhi.n	800967c <HAL_TIM_ConfigClockSource+0x16c>
 800958c:	2b50      	cmp	r3, #80	@ 0x50
 800958e:	d03c      	beq.n	800960a <HAL_TIM_ConfigClockSource+0xfa>
 8009590:	2b50      	cmp	r3, #80	@ 0x50
 8009592:	d873      	bhi.n	800967c <HAL_TIM_ConfigClockSource+0x16c>
 8009594:	2b40      	cmp	r3, #64	@ 0x40
 8009596:	d058      	beq.n	800964a <HAL_TIM_ConfigClockSource+0x13a>
 8009598:	2b40      	cmp	r3, #64	@ 0x40
 800959a:	d86f      	bhi.n	800967c <HAL_TIM_ConfigClockSource+0x16c>
 800959c:	2b30      	cmp	r3, #48	@ 0x30
 800959e:	d064      	beq.n	800966a <HAL_TIM_ConfigClockSource+0x15a>
 80095a0:	2b30      	cmp	r3, #48	@ 0x30
 80095a2:	d86b      	bhi.n	800967c <HAL_TIM_ConfigClockSource+0x16c>
 80095a4:	2b20      	cmp	r3, #32
 80095a6:	d060      	beq.n	800966a <HAL_TIM_ConfigClockSource+0x15a>
 80095a8:	2b20      	cmp	r3, #32
 80095aa:	d867      	bhi.n	800967c <HAL_TIM_ConfigClockSource+0x16c>
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d05c      	beq.n	800966a <HAL_TIM_ConfigClockSource+0x15a>
 80095b0:	2b10      	cmp	r3, #16
 80095b2:	d05a      	beq.n	800966a <HAL_TIM_ConfigClockSource+0x15a>
 80095b4:	e062      	b.n	800967c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80095c6:	f000 fc19 	bl	8009dfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80095d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	609a      	str	r2, [r3, #8]
      break;
 80095e2:	e04f      	b.n	8009684 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80095f4:	f000 fc02 	bl	8009dfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009606:	609a      	str	r2, [r3, #8]
      break;
 8009608:	e03c      	b.n	8009684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009616:	461a      	mov	r2, r3
 8009618:	f000 fb76 	bl	8009d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2150      	movs	r1, #80	@ 0x50
 8009622:	4618      	mov	r0, r3
 8009624:	f000 fbcf 	bl	8009dc6 <TIM_ITRx_SetConfig>
      break;
 8009628:	e02c      	b.n	8009684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009636:	461a      	mov	r2, r3
 8009638:	f000 fb95 	bl	8009d66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2160      	movs	r1, #96	@ 0x60
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fbbf 	bl	8009dc6 <TIM_ITRx_SetConfig>
      break;
 8009648:	e01c      	b.n	8009684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009656:	461a      	mov	r2, r3
 8009658:	f000 fb56 	bl	8009d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2140      	movs	r1, #64	@ 0x40
 8009662:	4618      	mov	r0, r3
 8009664:	f000 fbaf 	bl	8009dc6 <TIM_ITRx_SetConfig>
      break;
 8009668:	e00c      	b.n	8009684 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4619      	mov	r1, r3
 8009674:	4610      	mov	r0, r2
 8009676:	f000 fba6 	bl	8009dc6 <TIM_ITRx_SetConfig>
      break;
 800967a:	e003      	b.n	8009684 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	73fb      	strb	r3, [r7, #15]
      break;
 8009680:	e000      	b.n	8009684 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009694:	7bfb      	ldrb	r3, [r7, #15]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	fffeff88 	.word	0xfffeff88

080096a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a46      	ldr	r2, [pc, #280]	@ (8009820 <TIM_Base_SetConfig+0x12c>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d013      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009712:	d00f      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a43      	ldr	r2, [pc, #268]	@ (8009824 <TIM_Base_SetConfig+0x130>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d00b      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a42      	ldr	r2, [pc, #264]	@ (8009828 <TIM_Base_SetConfig+0x134>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d007      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a41      	ldr	r2, [pc, #260]	@ (800982c <TIM_Base_SetConfig+0x138>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d003      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a40      	ldr	r2, [pc, #256]	@ (8009830 <TIM_Base_SetConfig+0x13c>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d108      	bne.n	8009746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800973a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a35      	ldr	r2, [pc, #212]	@ (8009820 <TIM_Base_SetConfig+0x12c>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d02b      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009754:	d027      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a32      	ldr	r2, [pc, #200]	@ (8009824 <TIM_Base_SetConfig+0x130>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d023      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a31      	ldr	r2, [pc, #196]	@ (8009828 <TIM_Base_SetConfig+0x134>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d01f      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a30      	ldr	r2, [pc, #192]	@ (800982c <TIM_Base_SetConfig+0x138>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d01b      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a2f      	ldr	r2, [pc, #188]	@ (8009830 <TIM_Base_SetConfig+0x13c>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d017      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a2e      	ldr	r2, [pc, #184]	@ (8009834 <TIM_Base_SetConfig+0x140>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d013      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a2d      	ldr	r2, [pc, #180]	@ (8009838 <TIM_Base_SetConfig+0x144>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d00f      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a2c      	ldr	r2, [pc, #176]	@ (800983c <TIM_Base_SetConfig+0x148>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d00b      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a2b      	ldr	r2, [pc, #172]	@ (8009840 <TIM_Base_SetConfig+0x14c>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d007      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a2a      	ldr	r2, [pc, #168]	@ (8009844 <TIM_Base_SetConfig+0x150>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d003      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a29      	ldr	r2, [pc, #164]	@ (8009848 <TIM_Base_SetConfig+0x154>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d108      	bne.n	80097b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	689a      	ldr	r2, [r3, #8]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a10      	ldr	r2, [pc, #64]	@ (8009820 <TIM_Base_SetConfig+0x12c>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d003      	beq.n	80097ec <TIM_Base_SetConfig+0xf8>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a12      	ldr	r2, [pc, #72]	@ (8009830 <TIM_Base_SetConfig+0x13c>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d103      	bne.n	80097f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	691a      	ldr	r2, [r3, #16]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b01      	cmp	r3, #1
 8009804:	d105      	bne.n	8009812 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	f023 0201 	bic.w	r2, r3, #1
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	611a      	str	r2, [r3, #16]
  }
}
 8009812:	bf00      	nop
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	40010000 	.word	0x40010000
 8009824:	40000400 	.word	0x40000400
 8009828:	40000800 	.word	0x40000800
 800982c:	40000c00 	.word	0x40000c00
 8009830:	40010400 	.word	0x40010400
 8009834:	40014000 	.word	0x40014000
 8009838:	40014400 	.word	0x40014400
 800983c:	40014800 	.word	0x40014800
 8009840:	40001800 	.word	0x40001800
 8009844:	40001c00 	.word	0x40001c00
 8009848:	40002000 	.word	0x40002000

0800984c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	f023 0201 	bic.w	r2, r3, #1
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	4b2b      	ldr	r3, [pc, #172]	@ (8009924 <TIM_OC1_SetConfig+0xd8>)
 8009878:	4013      	ands	r3, r2
 800987a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f023 0303 	bic.w	r3, r3, #3
 8009882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	4313      	orrs	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f023 0302 	bic.w	r3, r3, #2
 8009894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	4313      	orrs	r3, r2
 800989e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a21      	ldr	r2, [pc, #132]	@ (8009928 <TIM_OC1_SetConfig+0xdc>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d003      	beq.n	80098b0 <TIM_OC1_SetConfig+0x64>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a20      	ldr	r2, [pc, #128]	@ (800992c <TIM_OC1_SetConfig+0xe0>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d10c      	bne.n	80098ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f023 0308 	bic.w	r3, r3, #8
 80098b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	4313      	orrs	r3, r2
 80098c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f023 0304 	bic.w	r3, r3, #4
 80098c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a16      	ldr	r2, [pc, #88]	@ (8009928 <TIM_OC1_SetConfig+0xdc>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d003      	beq.n	80098da <TIM_OC1_SetConfig+0x8e>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a15      	ldr	r2, [pc, #84]	@ (800992c <TIM_OC1_SetConfig+0xe0>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d111      	bne.n	80098fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80098e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	685a      	ldr	r2, [r3, #4]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	621a      	str	r2, [r3, #32]
}
 8009918:	bf00      	nop
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	fffeff8f 	.word	0xfffeff8f
 8009928:	40010000 	.word	0x40010000
 800992c:	40010400 	.word	0x40010400

08009930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009930:	b480      	push	{r7}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a1b      	ldr	r3, [r3, #32]
 8009944:	f023 0210 	bic.w	r2, r3, #16
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	4b2e      	ldr	r3, [pc, #184]	@ (8009a14 <TIM_OC2_SetConfig+0xe4>)
 800995c:	4013      	ands	r3, r2
 800995e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	021b      	lsls	r3, r3, #8
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4313      	orrs	r3, r2
 8009972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f023 0320 	bic.w	r3, r3, #32
 800997a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	011b      	lsls	r3, r3, #4
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	4313      	orrs	r3, r2
 8009986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a23      	ldr	r2, [pc, #140]	@ (8009a18 <TIM_OC2_SetConfig+0xe8>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d003      	beq.n	8009998 <TIM_OC2_SetConfig+0x68>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a22      	ldr	r2, [pc, #136]	@ (8009a1c <TIM_OC2_SetConfig+0xec>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d10d      	bne.n	80099b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800999e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	011b      	lsls	r3, r3, #4
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a18      	ldr	r2, [pc, #96]	@ (8009a18 <TIM_OC2_SetConfig+0xe8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d003      	beq.n	80099c4 <TIM_OC2_SetConfig+0x94>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a17      	ldr	r2, [pc, #92]	@ (8009a1c <TIM_OC2_SetConfig+0xec>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d113      	bne.n	80099ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80099ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80099d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	4313      	orrs	r3, r2
 80099de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	621a      	str	r2, [r3, #32]
}
 8009a06:	bf00      	nop
 8009a08:	371c      	adds	r7, #28
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	feff8fff 	.word	0xfeff8fff
 8009a18:	40010000 	.word	0x40010000
 8009a1c:	40010400 	.word	0x40010400

08009a20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b087      	sub	sp, #28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a1b      	ldr	r3, [r3, #32]
 8009a34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8009b00 <TIM_OC3_SetConfig+0xe0>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f023 0303 	bic.w	r3, r3, #3
 8009a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	021b      	lsls	r3, r3, #8
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a22      	ldr	r2, [pc, #136]	@ (8009b04 <TIM_OC3_SetConfig+0xe4>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d003      	beq.n	8009a86 <TIM_OC3_SetConfig+0x66>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a21      	ldr	r2, [pc, #132]	@ (8009b08 <TIM_OC3_SetConfig+0xe8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d10d      	bne.n	8009aa2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	021b      	lsls	r3, r3, #8
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a17      	ldr	r2, [pc, #92]	@ (8009b04 <TIM_OC3_SetConfig+0xe4>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d003      	beq.n	8009ab2 <TIM_OC3_SetConfig+0x92>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a16      	ldr	r2, [pc, #88]	@ (8009b08 <TIM_OC3_SetConfig+0xe8>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d113      	bne.n	8009ada <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	011b      	lsls	r3, r3, #4
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	011b      	lsls	r3, r3, #4
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	621a      	str	r2, [r3, #32]
}
 8009af4:	bf00      	nop
 8009af6:	371c      	adds	r7, #28
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	fffeff8f 	.word	0xfffeff8f
 8009b04:	40010000 	.word	0x40010000
 8009b08:	40010400 	.word	0x40010400

08009b0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b087      	sub	sp, #28
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a1b      	ldr	r3, [r3, #32]
 8009b20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	4b1e      	ldr	r3, [pc, #120]	@ (8009bb0 <TIM_OC4_SetConfig+0xa4>)
 8009b38:	4013      	ands	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	021b      	lsls	r3, r3, #8
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	031b      	lsls	r3, r3, #12
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a13      	ldr	r2, [pc, #76]	@ (8009bb4 <TIM_OC4_SetConfig+0xa8>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d003      	beq.n	8009b74 <TIM_OC4_SetConfig+0x68>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a12      	ldr	r2, [pc, #72]	@ (8009bb8 <TIM_OC4_SetConfig+0xac>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d109      	bne.n	8009b88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	019b      	lsls	r3, r3, #6
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	693a      	ldr	r2, [r7, #16]
 8009ba0:	621a      	str	r2, [r3, #32]
}
 8009ba2:	bf00      	nop
 8009ba4:	371c      	adds	r7, #28
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	feff8fff 	.word	0xfeff8fff
 8009bb4:	40010000 	.word	0x40010000
 8009bb8:	40010400 	.word	0x40010400

08009bbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a1b      	ldr	r3, [r3, #32]
 8009bd0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	4b1b      	ldr	r3, [pc, #108]	@ (8009c54 <TIM_OC5_SetConfig+0x98>)
 8009be8:	4013      	ands	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009bfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	041b      	lsls	r3, r3, #16
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a12      	ldr	r2, [pc, #72]	@ (8009c58 <TIM_OC5_SetConfig+0x9c>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d003      	beq.n	8009c1a <TIM_OC5_SetConfig+0x5e>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a11      	ldr	r2, [pc, #68]	@ (8009c5c <TIM_OC5_SetConfig+0xa0>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d109      	bne.n	8009c2e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	021b      	lsls	r3, r3, #8
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	621a      	str	r2, [r3, #32]
}
 8009c48:	bf00      	nop
 8009c4a:	371c      	adds	r7, #28
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	fffeff8f 	.word	0xfffeff8f
 8009c58:	40010000 	.word	0x40010000
 8009c5c:	40010400 	.word	0x40010400

08009c60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8009cfc <TIM_OC6_SetConfig+0x9c>)
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	021b      	lsls	r3, r3, #8
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	051b      	lsls	r3, r3, #20
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a13      	ldr	r2, [pc, #76]	@ (8009d00 <TIM_OC6_SetConfig+0xa0>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d003      	beq.n	8009cc0 <TIM_OC6_SetConfig+0x60>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a12      	ldr	r2, [pc, #72]	@ (8009d04 <TIM_OC6_SetConfig+0xa4>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d109      	bne.n	8009cd4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	029b      	lsls	r3, r3, #10
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	621a      	str	r2, [r3, #32]
}
 8009cee:	bf00      	nop
 8009cf0:	371c      	adds	r7, #28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	feff8fff 	.word	0xfeff8fff
 8009d00:	40010000 	.word	0x40010000
 8009d04:	40010400 	.word	0x40010400

08009d08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b087      	sub	sp, #28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6a1b      	ldr	r3, [r3, #32]
 8009d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	f023 0201 	bic.w	r2, r3, #1
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	011b      	lsls	r3, r3, #4
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f023 030a 	bic.w	r3, r3, #10
 8009d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	621a      	str	r2, [r3, #32]
}
 8009d5a:	bf00      	nop
 8009d5c:	371c      	adds	r7, #28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b087      	sub	sp, #28
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	60f8      	str	r0, [r7, #12]
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	f023 0210 	bic.w	r2, r3, #16
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	031b      	lsls	r3, r3, #12
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009da2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	011b      	lsls	r3, r3, #4
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	621a      	str	r2, [r3, #32]
}
 8009dba:	bf00      	nop
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b085      	sub	sp, #20
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
 8009dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	f043 0307 	orr.w	r3, r3, #7
 8009de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	609a      	str	r2, [r3, #8]
}
 8009df0:	bf00      	nop
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	021a      	lsls	r2, r3, #8
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	609a      	str	r2, [r3, #8]
}
 8009e30:	bf00      	nop
 8009e32:	371c      	adds	r7, #28
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	f003 031f 	and.w	r3, r3, #31
 8009e4e:	2201      	movs	r2, #1
 8009e50:	fa02 f303 	lsl.w	r3, r2, r3
 8009e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6a1a      	ldr	r2, [r3, #32]
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	43db      	mvns	r3, r3
 8009e5e:	401a      	ands	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6a1a      	ldr	r2, [r3, #32]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	f003 031f 	and.w	r3, r3, #31
 8009e6e:	6879      	ldr	r1, [r7, #4]
 8009e70:	fa01 f303 	lsl.w	r3, r1, r3
 8009e74:	431a      	orrs	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	621a      	str	r2, [r3, #32]
}
 8009e7a:	bf00      	nop
 8009e7c:	371c      	adds	r7, #28
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
	...

08009e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d101      	bne.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	e06d      	b.n	8009f7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2202      	movs	r2, #2
 8009eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a30      	ldr	r2, [pc, #192]	@ (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d004      	beq.n	8009ed4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a2f      	ldr	r2, [pc, #188]	@ (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d108      	bne.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009eda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a20      	ldr	r2, [pc, #128]	@ (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d022      	beq.n	8009f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f12:	d01d      	beq.n	8009f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a1d      	ldr	r2, [pc, #116]	@ (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d018      	beq.n	8009f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a1c      	ldr	r2, [pc, #112]	@ (8009f94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d013      	beq.n	8009f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8009f98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d00e      	beq.n	8009f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a15      	ldr	r2, [pc, #84]	@ (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d009      	beq.n	8009f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a16      	ldr	r2, [pc, #88]	@ (8009f9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d004      	beq.n	8009f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a15      	ldr	r2, [pc, #84]	@ (8009fa0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d10c      	bne.n	8009f6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	40010000 	.word	0x40010000
 8009f8c:	40010400 	.word	0x40010400
 8009f90:	40000400 	.word	0x40000400
 8009f94:	40000800 	.word	0x40000800
 8009f98:	40000c00 	.word	0x40000c00
 8009f9c:	40014000 	.word	0x40014000
 8009fa0:	40001800 	.word	0x40001800

08009fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e040      	b.n	800a074 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d106      	bne.n	800a008 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f7fa fc32 	bl	800486c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2224      	movs	r2, #36	@ 0x24
 800a00c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 0201 	bic.w	r2, r2, #1
 800a01c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a022:	2b00      	cmp	r3, #0
 800a024:	d002      	beq.n	800a02c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fb16 	bl	800a658 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f8af 	bl	800a190 <UART_SetConfig>
 800a032:	4603      	mov	r3, r0
 800a034:	2b01      	cmp	r3, #1
 800a036:	d101      	bne.n	800a03c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e01b      	b.n	800a074 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a04a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	689a      	ldr	r2, [r3, #8]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a05a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f042 0201 	orr.w	r2, r2, #1
 800a06a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fb95 	bl	800a79c <UART_CheckIdleState>
 800a072:	4603      	mov	r3, r0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08a      	sub	sp, #40	@ 0x28
 800a080:	af02      	add	r7, sp, #8
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	4613      	mov	r3, r2
 800a08a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a090:	2b20      	cmp	r3, #32
 800a092:	d177      	bne.n	800a184 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d002      	beq.n	800a0a0 <HAL_UART_Transmit+0x24>
 800a09a:	88fb      	ldrh	r3, [r7, #6]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e070      	b.n	800a186 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2221      	movs	r2, #33	@ 0x21
 800a0b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0b2:	f7fa fd5d 	bl	8004b70 <HAL_GetTick>
 800a0b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	88fa      	ldrh	r2, [r7, #6]
 800a0bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	88fa      	ldrh	r2, [r7, #6]
 800a0c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0d0:	d108      	bne.n	800a0e4 <HAL_UART_Transmit+0x68>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d104      	bne.n	800a0e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	61bb      	str	r3, [r7, #24]
 800a0e2:	e003      	b.n	800a0ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a0ec:	e02f      	b.n	800a14e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2180      	movs	r1, #128	@ 0x80
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 fba6 	bl	800a84a <UART_WaitOnFlagUntilTimeout>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d004      	beq.n	800a10e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2220      	movs	r2, #32
 800a108:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e03b      	b.n	800a186 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10b      	bne.n	800a12c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	461a      	mov	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a122:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	3302      	adds	r3, #2
 800a128:	61bb      	str	r3, [r7, #24]
 800a12a:	e007      	b.n	800a13c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	781a      	ldrb	r2, [r3, #0]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	3301      	adds	r3, #1
 800a13a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a142:	b29b      	uxth	r3, r3
 800a144:	3b01      	subs	r3, #1
 800a146:	b29a      	uxth	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a154:	b29b      	uxth	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1c9      	bne.n	800a0ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	2200      	movs	r2, #0
 800a162:	2140      	movs	r1, #64	@ 0x40
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f000 fb70 	bl	800a84a <UART_WaitOnFlagUntilTimeout>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d004      	beq.n	800a17a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2220      	movs	r2, #32
 800a174:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e005      	b.n	800a186 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2220      	movs	r2, #32
 800a17e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	e000      	b.n	800a186 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a184:	2302      	movs	r3, #2
  }
}
 800a186:	4618      	mov	r0, r3
 800a188:	3720      	adds	r7, #32
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
	...

0800a190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b088      	sub	sp, #32
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	689a      	ldr	r2, [r3, #8]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	431a      	orrs	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	69db      	ldr	r3, [r3, #28]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	4ba6      	ldr	r3, [pc, #664]	@ (800a454 <UART_SetConfig+0x2c4>)
 800a1bc:	4013      	ands	r3, r2
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	6812      	ldr	r2, [r2, #0]
 800a1c2:	6979      	ldr	r1, [r7, #20]
 800a1c4:	430b      	orrs	r3, r1
 800a1c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68da      	ldr	r2, [r3, #12]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a1b      	ldr	r3, [r3, #32]
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	430a      	orrs	r2, r1
 800a200:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a94      	ldr	r2, [pc, #592]	@ (800a458 <UART_SetConfig+0x2c8>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d120      	bne.n	800a24e <UART_SetConfig+0xbe>
 800a20c:	4b93      	ldr	r3, [pc, #588]	@ (800a45c <UART_SetConfig+0x2cc>)
 800a20e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a212:	f003 0303 	and.w	r3, r3, #3
 800a216:	2b03      	cmp	r3, #3
 800a218:	d816      	bhi.n	800a248 <UART_SetConfig+0xb8>
 800a21a:	a201      	add	r2, pc, #4	@ (adr r2, 800a220 <UART_SetConfig+0x90>)
 800a21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a220:	0800a231 	.word	0x0800a231
 800a224:	0800a23d 	.word	0x0800a23d
 800a228:	0800a237 	.word	0x0800a237
 800a22c:	0800a243 	.word	0x0800a243
 800a230:	2301      	movs	r3, #1
 800a232:	77fb      	strb	r3, [r7, #31]
 800a234:	e150      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a236:	2302      	movs	r3, #2
 800a238:	77fb      	strb	r3, [r7, #31]
 800a23a:	e14d      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a23c:	2304      	movs	r3, #4
 800a23e:	77fb      	strb	r3, [r7, #31]
 800a240:	e14a      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a242:	2308      	movs	r3, #8
 800a244:	77fb      	strb	r3, [r7, #31]
 800a246:	e147      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a248:	2310      	movs	r3, #16
 800a24a:	77fb      	strb	r3, [r7, #31]
 800a24c:	e144      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a83      	ldr	r2, [pc, #524]	@ (800a460 <UART_SetConfig+0x2d0>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d132      	bne.n	800a2be <UART_SetConfig+0x12e>
 800a258:	4b80      	ldr	r3, [pc, #512]	@ (800a45c <UART_SetConfig+0x2cc>)
 800a25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a25e:	f003 030c 	and.w	r3, r3, #12
 800a262:	2b0c      	cmp	r3, #12
 800a264:	d828      	bhi.n	800a2b8 <UART_SetConfig+0x128>
 800a266:	a201      	add	r2, pc, #4	@ (adr r2, 800a26c <UART_SetConfig+0xdc>)
 800a268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26c:	0800a2a1 	.word	0x0800a2a1
 800a270:	0800a2b9 	.word	0x0800a2b9
 800a274:	0800a2b9 	.word	0x0800a2b9
 800a278:	0800a2b9 	.word	0x0800a2b9
 800a27c:	0800a2ad 	.word	0x0800a2ad
 800a280:	0800a2b9 	.word	0x0800a2b9
 800a284:	0800a2b9 	.word	0x0800a2b9
 800a288:	0800a2b9 	.word	0x0800a2b9
 800a28c:	0800a2a7 	.word	0x0800a2a7
 800a290:	0800a2b9 	.word	0x0800a2b9
 800a294:	0800a2b9 	.word	0x0800a2b9
 800a298:	0800a2b9 	.word	0x0800a2b9
 800a29c:	0800a2b3 	.word	0x0800a2b3
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	77fb      	strb	r3, [r7, #31]
 800a2a4:	e118      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	77fb      	strb	r3, [r7, #31]
 800a2aa:	e115      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a2ac:	2304      	movs	r3, #4
 800a2ae:	77fb      	strb	r3, [r7, #31]
 800a2b0:	e112      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a2b2:	2308      	movs	r3, #8
 800a2b4:	77fb      	strb	r3, [r7, #31]
 800a2b6:	e10f      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a2b8:	2310      	movs	r3, #16
 800a2ba:	77fb      	strb	r3, [r7, #31]
 800a2bc:	e10c      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a68      	ldr	r2, [pc, #416]	@ (800a464 <UART_SetConfig+0x2d4>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d120      	bne.n	800a30a <UART_SetConfig+0x17a>
 800a2c8:	4b64      	ldr	r3, [pc, #400]	@ (800a45c <UART_SetConfig+0x2cc>)
 800a2ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a2d2:	2b30      	cmp	r3, #48	@ 0x30
 800a2d4:	d013      	beq.n	800a2fe <UART_SetConfig+0x16e>
 800a2d6:	2b30      	cmp	r3, #48	@ 0x30
 800a2d8:	d814      	bhi.n	800a304 <UART_SetConfig+0x174>
 800a2da:	2b20      	cmp	r3, #32
 800a2dc:	d009      	beq.n	800a2f2 <UART_SetConfig+0x162>
 800a2de:	2b20      	cmp	r3, #32
 800a2e0:	d810      	bhi.n	800a304 <UART_SetConfig+0x174>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d002      	beq.n	800a2ec <UART_SetConfig+0x15c>
 800a2e6:	2b10      	cmp	r3, #16
 800a2e8:	d006      	beq.n	800a2f8 <UART_SetConfig+0x168>
 800a2ea:	e00b      	b.n	800a304 <UART_SetConfig+0x174>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	77fb      	strb	r3, [r7, #31]
 800a2f0:	e0f2      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	77fb      	strb	r3, [r7, #31]
 800a2f6:	e0ef      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a2f8:	2304      	movs	r3, #4
 800a2fa:	77fb      	strb	r3, [r7, #31]
 800a2fc:	e0ec      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a2fe:	2308      	movs	r3, #8
 800a300:	77fb      	strb	r3, [r7, #31]
 800a302:	e0e9      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a304:	2310      	movs	r3, #16
 800a306:	77fb      	strb	r3, [r7, #31]
 800a308:	e0e6      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a56      	ldr	r2, [pc, #344]	@ (800a468 <UART_SetConfig+0x2d8>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d120      	bne.n	800a356 <UART_SetConfig+0x1c6>
 800a314:	4b51      	ldr	r3, [pc, #324]	@ (800a45c <UART_SetConfig+0x2cc>)
 800a316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a31a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a31e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a320:	d013      	beq.n	800a34a <UART_SetConfig+0x1ba>
 800a322:	2bc0      	cmp	r3, #192	@ 0xc0
 800a324:	d814      	bhi.n	800a350 <UART_SetConfig+0x1c0>
 800a326:	2b80      	cmp	r3, #128	@ 0x80
 800a328:	d009      	beq.n	800a33e <UART_SetConfig+0x1ae>
 800a32a:	2b80      	cmp	r3, #128	@ 0x80
 800a32c:	d810      	bhi.n	800a350 <UART_SetConfig+0x1c0>
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d002      	beq.n	800a338 <UART_SetConfig+0x1a8>
 800a332:	2b40      	cmp	r3, #64	@ 0x40
 800a334:	d006      	beq.n	800a344 <UART_SetConfig+0x1b4>
 800a336:	e00b      	b.n	800a350 <UART_SetConfig+0x1c0>
 800a338:	2300      	movs	r3, #0
 800a33a:	77fb      	strb	r3, [r7, #31]
 800a33c:	e0cc      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a33e:	2302      	movs	r3, #2
 800a340:	77fb      	strb	r3, [r7, #31]
 800a342:	e0c9      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a344:	2304      	movs	r3, #4
 800a346:	77fb      	strb	r3, [r7, #31]
 800a348:	e0c6      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a34a:	2308      	movs	r3, #8
 800a34c:	77fb      	strb	r3, [r7, #31]
 800a34e:	e0c3      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a350:	2310      	movs	r3, #16
 800a352:	77fb      	strb	r3, [r7, #31]
 800a354:	e0c0      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a44      	ldr	r2, [pc, #272]	@ (800a46c <UART_SetConfig+0x2dc>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d125      	bne.n	800a3ac <UART_SetConfig+0x21c>
 800a360:	4b3e      	ldr	r3, [pc, #248]	@ (800a45c <UART_SetConfig+0x2cc>)
 800a362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a36a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a36e:	d017      	beq.n	800a3a0 <UART_SetConfig+0x210>
 800a370:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a374:	d817      	bhi.n	800a3a6 <UART_SetConfig+0x216>
 800a376:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a37a:	d00b      	beq.n	800a394 <UART_SetConfig+0x204>
 800a37c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a380:	d811      	bhi.n	800a3a6 <UART_SetConfig+0x216>
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <UART_SetConfig+0x1fe>
 800a386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a38a:	d006      	beq.n	800a39a <UART_SetConfig+0x20a>
 800a38c:	e00b      	b.n	800a3a6 <UART_SetConfig+0x216>
 800a38e:	2300      	movs	r3, #0
 800a390:	77fb      	strb	r3, [r7, #31]
 800a392:	e0a1      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a394:	2302      	movs	r3, #2
 800a396:	77fb      	strb	r3, [r7, #31]
 800a398:	e09e      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a39a:	2304      	movs	r3, #4
 800a39c:	77fb      	strb	r3, [r7, #31]
 800a39e:	e09b      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a3a0:	2308      	movs	r3, #8
 800a3a2:	77fb      	strb	r3, [r7, #31]
 800a3a4:	e098      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a3a6:	2310      	movs	r3, #16
 800a3a8:	77fb      	strb	r3, [r7, #31]
 800a3aa:	e095      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a2f      	ldr	r2, [pc, #188]	@ (800a470 <UART_SetConfig+0x2e0>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d125      	bne.n	800a402 <UART_SetConfig+0x272>
 800a3b6:	4b29      	ldr	r3, [pc, #164]	@ (800a45c <UART_SetConfig+0x2cc>)
 800a3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a3c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3c4:	d017      	beq.n	800a3f6 <UART_SetConfig+0x266>
 800a3c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3ca:	d817      	bhi.n	800a3fc <UART_SetConfig+0x26c>
 800a3cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3d0:	d00b      	beq.n	800a3ea <UART_SetConfig+0x25a>
 800a3d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3d6:	d811      	bhi.n	800a3fc <UART_SetConfig+0x26c>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d003      	beq.n	800a3e4 <UART_SetConfig+0x254>
 800a3dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3e0:	d006      	beq.n	800a3f0 <UART_SetConfig+0x260>
 800a3e2:	e00b      	b.n	800a3fc <UART_SetConfig+0x26c>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	77fb      	strb	r3, [r7, #31]
 800a3e8:	e076      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	77fb      	strb	r3, [r7, #31]
 800a3ee:	e073      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a3f0:	2304      	movs	r3, #4
 800a3f2:	77fb      	strb	r3, [r7, #31]
 800a3f4:	e070      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a3f6:	2308      	movs	r3, #8
 800a3f8:	77fb      	strb	r3, [r7, #31]
 800a3fa:	e06d      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a3fc:	2310      	movs	r3, #16
 800a3fe:	77fb      	strb	r3, [r7, #31]
 800a400:	e06a      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a1b      	ldr	r2, [pc, #108]	@ (800a474 <UART_SetConfig+0x2e4>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d138      	bne.n	800a47e <UART_SetConfig+0x2ee>
 800a40c:	4b13      	ldr	r3, [pc, #76]	@ (800a45c <UART_SetConfig+0x2cc>)
 800a40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a412:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a416:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a41a:	d017      	beq.n	800a44c <UART_SetConfig+0x2bc>
 800a41c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a420:	d82a      	bhi.n	800a478 <UART_SetConfig+0x2e8>
 800a422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a426:	d00b      	beq.n	800a440 <UART_SetConfig+0x2b0>
 800a428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a42c:	d824      	bhi.n	800a478 <UART_SetConfig+0x2e8>
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d003      	beq.n	800a43a <UART_SetConfig+0x2aa>
 800a432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a436:	d006      	beq.n	800a446 <UART_SetConfig+0x2b6>
 800a438:	e01e      	b.n	800a478 <UART_SetConfig+0x2e8>
 800a43a:	2300      	movs	r3, #0
 800a43c:	77fb      	strb	r3, [r7, #31]
 800a43e:	e04b      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a440:	2302      	movs	r3, #2
 800a442:	77fb      	strb	r3, [r7, #31]
 800a444:	e048      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a446:	2304      	movs	r3, #4
 800a448:	77fb      	strb	r3, [r7, #31]
 800a44a:	e045      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a44c:	2308      	movs	r3, #8
 800a44e:	77fb      	strb	r3, [r7, #31]
 800a450:	e042      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a452:	bf00      	nop
 800a454:	efff69f3 	.word	0xefff69f3
 800a458:	40011000 	.word	0x40011000
 800a45c:	40023800 	.word	0x40023800
 800a460:	40004400 	.word	0x40004400
 800a464:	40004800 	.word	0x40004800
 800a468:	40004c00 	.word	0x40004c00
 800a46c:	40005000 	.word	0x40005000
 800a470:	40011400 	.word	0x40011400
 800a474:	40007800 	.word	0x40007800
 800a478:	2310      	movs	r3, #16
 800a47a:	77fb      	strb	r3, [r7, #31]
 800a47c:	e02c      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a72      	ldr	r2, [pc, #456]	@ (800a64c <UART_SetConfig+0x4bc>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d125      	bne.n	800a4d4 <UART_SetConfig+0x344>
 800a488:	4b71      	ldr	r3, [pc, #452]	@ (800a650 <UART_SetConfig+0x4c0>)
 800a48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a48e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a492:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a496:	d017      	beq.n	800a4c8 <UART_SetConfig+0x338>
 800a498:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a49c:	d817      	bhi.n	800a4ce <UART_SetConfig+0x33e>
 800a49e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4a2:	d00b      	beq.n	800a4bc <UART_SetConfig+0x32c>
 800a4a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4a8:	d811      	bhi.n	800a4ce <UART_SetConfig+0x33e>
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d003      	beq.n	800a4b6 <UART_SetConfig+0x326>
 800a4ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4b2:	d006      	beq.n	800a4c2 <UART_SetConfig+0x332>
 800a4b4:	e00b      	b.n	800a4ce <UART_SetConfig+0x33e>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	77fb      	strb	r3, [r7, #31]
 800a4ba:	e00d      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a4bc:	2302      	movs	r3, #2
 800a4be:	77fb      	strb	r3, [r7, #31]
 800a4c0:	e00a      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a4c2:	2304      	movs	r3, #4
 800a4c4:	77fb      	strb	r3, [r7, #31]
 800a4c6:	e007      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a4c8:	2308      	movs	r3, #8
 800a4ca:	77fb      	strb	r3, [r7, #31]
 800a4cc:	e004      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a4ce:	2310      	movs	r3, #16
 800a4d0:	77fb      	strb	r3, [r7, #31]
 800a4d2:	e001      	b.n	800a4d8 <UART_SetConfig+0x348>
 800a4d4:	2310      	movs	r3, #16
 800a4d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	69db      	ldr	r3, [r3, #28]
 800a4dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4e0:	d15b      	bne.n	800a59a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a4e2:	7ffb      	ldrb	r3, [r7, #31]
 800a4e4:	2b08      	cmp	r3, #8
 800a4e6:	d828      	bhi.n	800a53a <UART_SetConfig+0x3aa>
 800a4e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a4f0 <UART_SetConfig+0x360>)
 800a4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ee:	bf00      	nop
 800a4f0:	0800a515 	.word	0x0800a515
 800a4f4:	0800a51d 	.word	0x0800a51d
 800a4f8:	0800a525 	.word	0x0800a525
 800a4fc:	0800a53b 	.word	0x0800a53b
 800a500:	0800a52b 	.word	0x0800a52b
 800a504:	0800a53b 	.word	0x0800a53b
 800a508:	0800a53b 	.word	0x0800a53b
 800a50c:	0800a53b 	.word	0x0800a53b
 800a510:	0800a533 	.word	0x0800a533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a514:	f7fd f9c4 	bl	80078a0 <HAL_RCC_GetPCLK1Freq>
 800a518:	61b8      	str	r0, [r7, #24]
        break;
 800a51a:	e013      	b.n	800a544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a51c:	f7fd f9d4 	bl	80078c8 <HAL_RCC_GetPCLK2Freq>
 800a520:	61b8      	str	r0, [r7, #24]
        break;
 800a522:	e00f      	b.n	800a544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a524:	4b4b      	ldr	r3, [pc, #300]	@ (800a654 <UART_SetConfig+0x4c4>)
 800a526:	61bb      	str	r3, [r7, #24]
        break;
 800a528:	e00c      	b.n	800a544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a52a:	f7fd f8a7 	bl	800767c <HAL_RCC_GetSysClockFreq>
 800a52e:	61b8      	str	r0, [r7, #24]
        break;
 800a530:	e008      	b.n	800a544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a536:	61bb      	str	r3, [r7, #24]
        break;
 800a538:	e004      	b.n	800a544 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	77bb      	strb	r3, [r7, #30]
        break;
 800a542:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d074      	beq.n	800a634 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	005a      	lsls	r2, r3, #1
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	085b      	lsrs	r3, r3, #1
 800a554:	441a      	add	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a55e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	2b0f      	cmp	r3, #15
 800a564:	d916      	bls.n	800a594 <UART_SetConfig+0x404>
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a56c:	d212      	bcs.n	800a594 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	b29b      	uxth	r3, r3
 800a572:	f023 030f 	bic.w	r3, r3, #15
 800a576:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	085b      	lsrs	r3, r3, #1
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	f003 0307 	and.w	r3, r3, #7
 800a582:	b29a      	uxth	r2, r3
 800a584:	89fb      	ldrh	r3, [r7, #14]
 800a586:	4313      	orrs	r3, r2
 800a588:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	89fa      	ldrh	r2, [r7, #14]
 800a590:	60da      	str	r2, [r3, #12]
 800a592:	e04f      	b.n	800a634 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	77bb      	strb	r3, [r7, #30]
 800a598:	e04c      	b.n	800a634 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a59a:	7ffb      	ldrb	r3, [r7, #31]
 800a59c:	2b08      	cmp	r3, #8
 800a59e:	d828      	bhi.n	800a5f2 <UART_SetConfig+0x462>
 800a5a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a8 <UART_SetConfig+0x418>)
 800a5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a6:	bf00      	nop
 800a5a8:	0800a5cd 	.word	0x0800a5cd
 800a5ac:	0800a5d5 	.word	0x0800a5d5
 800a5b0:	0800a5dd 	.word	0x0800a5dd
 800a5b4:	0800a5f3 	.word	0x0800a5f3
 800a5b8:	0800a5e3 	.word	0x0800a5e3
 800a5bc:	0800a5f3 	.word	0x0800a5f3
 800a5c0:	0800a5f3 	.word	0x0800a5f3
 800a5c4:	0800a5f3 	.word	0x0800a5f3
 800a5c8:	0800a5eb 	.word	0x0800a5eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5cc:	f7fd f968 	bl	80078a0 <HAL_RCC_GetPCLK1Freq>
 800a5d0:	61b8      	str	r0, [r7, #24]
        break;
 800a5d2:	e013      	b.n	800a5fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5d4:	f7fd f978 	bl	80078c8 <HAL_RCC_GetPCLK2Freq>
 800a5d8:	61b8      	str	r0, [r7, #24]
        break;
 800a5da:	e00f      	b.n	800a5fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5dc:	4b1d      	ldr	r3, [pc, #116]	@ (800a654 <UART_SetConfig+0x4c4>)
 800a5de:	61bb      	str	r3, [r7, #24]
        break;
 800a5e0:	e00c      	b.n	800a5fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5e2:	f7fd f84b 	bl	800767c <HAL_RCC_GetSysClockFreq>
 800a5e6:	61b8      	str	r0, [r7, #24]
        break;
 800a5e8:	e008      	b.n	800a5fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5ee:	61bb      	str	r3, [r7, #24]
        break;
 800a5f0:	e004      	b.n	800a5fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	77bb      	strb	r3, [r7, #30]
        break;
 800a5fa:	bf00      	nop
    }

    if (pclk != 0U)
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d018      	beq.n	800a634 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	085a      	lsrs	r2, r3, #1
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	441a      	add	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	fbb2 f3f3 	udiv	r3, r2, r3
 800a614:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	2b0f      	cmp	r3, #15
 800a61a:	d909      	bls.n	800a630 <UART_SetConfig+0x4a0>
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a622:	d205      	bcs.n	800a630 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	b29a      	uxth	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	60da      	str	r2, [r3, #12]
 800a62e:	e001      	b.n	800a634 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a640:	7fbb      	ldrb	r3, [r7, #30]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3720      	adds	r7, #32
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	40007c00 	.word	0x40007c00
 800a650:	40023800 	.word	0x40023800
 800a654:	00f42400 	.word	0x00f42400

0800a658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a664:	f003 0308 	and.w	r3, r3, #8
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00a      	beq.n	800a682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	430a      	orrs	r2, r1
 800a680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a686:	f003 0301 	and.w	r3, r3, #1
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00a      	beq.n	800a6a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	430a      	orrs	r2, r1
 800a6a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00a      	beq.n	800a6c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ca:	f003 0304 	and.w	r3, r3, #4
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00a      	beq.n	800a6e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	430a      	orrs	r2, r1
 800a6e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ec:	f003 0310 	and.w	r3, r3, #16
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00a      	beq.n	800a70a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a70e:	f003 0320 	and.w	r3, r3, #32
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00a      	beq.n	800a72c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	430a      	orrs	r2, r1
 800a72a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a734:	2b00      	cmp	r3, #0
 800a736:	d01a      	beq.n	800a76e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a756:	d10a      	bne.n	800a76e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	430a      	orrs	r2, r1
 800a76c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00a      	beq.n	800a790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	430a      	orrs	r2, r1
 800a78e:	605a      	str	r2, [r3, #4]
  }
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b08c      	sub	sp, #48	@ 0x30
 800a7a0:	af02      	add	r7, sp, #8
 800a7a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7ac:	f7fa f9e0 	bl	8004b70 <HAL_GetTick>
 800a7b0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0308 	and.w	r3, r3, #8
 800a7bc:	2b08      	cmp	r3, #8
 800a7be:	d12e      	bne.n	800a81e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f83b 	bl	800a84a <UART_WaitOnFlagUntilTimeout>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d021      	beq.n	800a81e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	e853 3f00 	ldrex	r3, [r3]
 800a7e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7ee:	623b      	str	r3, [r7, #32]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	61fb      	str	r3, [r7, #28]
 800a7fa:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fc:	69b9      	ldr	r1, [r7, #24]
 800a7fe:	69fa      	ldr	r2, [r7, #28]
 800a800:	e841 2300 	strex	r3, r2, [r1]
 800a804:	617b      	str	r3, [r7, #20]
   return(result);
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1e6      	bne.n	800a7da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2220      	movs	r2, #32
 800a810:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e011      	b.n	800a842 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2220      	movs	r2, #32
 800a822:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2220      	movs	r2, #32
 800a828:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3728      	adds	r7, #40	@ 0x28
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	60f8      	str	r0, [r7, #12]
 800a852:	60b9      	str	r1, [r7, #8]
 800a854:	603b      	str	r3, [r7, #0]
 800a856:	4613      	mov	r3, r2
 800a858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a85a:	e04f      	b.n	800a8fc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a862:	d04b      	beq.n	800a8fc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a864:	f7fa f984 	bl	8004b70 <HAL_GetTick>
 800a868:	4602      	mov	r2, r0
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	69ba      	ldr	r2, [r7, #24]
 800a870:	429a      	cmp	r2, r3
 800a872:	d302      	bcc.n	800a87a <UART_WaitOnFlagUntilTimeout+0x30>
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e04e      	b.n	800a91c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0304 	and.w	r3, r3, #4
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d037      	beq.n	800a8fc <UART_WaitOnFlagUntilTimeout+0xb2>
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2b80      	cmp	r3, #128	@ 0x80
 800a890:	d034      	beq.n	800a8fc <UART_WaitOnFlagUntilTimeout+0xb2>
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	2b40      	cmp	r3, #64	@ 0x40
 800a896:	d031      	beq.n	800a8fc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	f003 0308 	and.w	r3, r3, #8
 800a8a2:	2b08      	cmp	r3, #8
 800a8a4:	d110      	bne.n	800a8c8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2208      	movs	r2, #8
 800a8ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f000 f838 	bl	800a924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2208      	movs	r2, #8
 800a8b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e029      	b.n	800a91c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	69db      	ldr	r3, [r3, #28]
 800a8ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8d6:	d111      	bne.n	800a8fc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f000 f81e 	bl	800a924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e00f      	b.n	800a91c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	69da      	ldr	r2, [r3, #28]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	4013      	ands	r3, r2
 800a906:	68ba      	ldr	r2, [r7, #8]
 800a908:	429a      	cmp	r2, r3
 800a90a:	bf0c      	ite	eq
 800a90c:	2301      	moveq	r3, #1
 800a90e:	2300      	movne	r3, #0
 800a910:	b2db      	uxtb	r3, r3
 800a912:	461a      	mov	r2, r3
 800a914:	79fb      	ldrb	r3, [r7, #7]
 800a916:	429a      	cmp	r2, r3
 800a918:	d0a0      	beq.n	800a85c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a924:	b480      	push	{r7}
 800a926:	b095      	sub	sp, #84	@ 0x54
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a934:	e853 3f00 	ldrex	r3, [r3]
 800a938:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a940:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	461a      	mov	r2, r3
 800a948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a94a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a94c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a950:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a952:	e841 2300 	strex	r3, r2, [r1]
 800a956:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1e6      	bne.n	800a92c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3308      	adds	r3, #8
 800a964:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a966:	6a3b      	ldr	r3, [r7, #32]
 800a968:	e853 3f00 	ldrex	r3, [r3]
 800a96c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	f023 0301 	bic.w	r3, r3, #1
 800a974:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	3308      	adds	r3, #8
 800a97c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a97e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a980:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a982:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a986:	e841 2300 	strex	r3, r2, [r1]
 800a98a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1e5      	bne.n	800a95e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a996:	2b01      	cmp	r3, #1
 800a998:	d118      	bne.n	800a9cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	e853 3f00 	ldrex	r3, [r3]
 800a9a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	f023 0310 	bic.w	r3, r3, #16
 800a9ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9b8:	61bb      	str	r3, [r7, #24]
 800a9ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9bc:	6979      	ldr	r1, [r7, #20]
 800a9be:	69ba      	ldr	r2, [r7, #24]
 800a9c0:	e841 2300 	strex	r3, r2, [r1]
 800a9c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1e6      	bne.n	800a99a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a9e0:	bf00      	nop
 800a9e2:	3754      	adds	r7, #84	@ 0x54
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	f107 001c 	add.w	r0, r7, #28
 800a9fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d121      	bne.n	800aa4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	68da      	ldr	r2, [r3, #12]
 800aa16:	4b21      	ldr	r3, [pc, #132]	@ (800aa9c <USB_CoreInit+0xb0>)
 800aa18:	4013      	ands	r3, r2
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aa2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d105      	bne.n	800aa3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa92 	bl	800af68 <USB_CoreReset>
 800aa44:	4603      	mov	r3, r0
 800aa46:	73fb      	strb	r3, [r7, #15]
 800aa48:	e010      	b.n	800aa6c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fa86 	bl	800af68 <USB_CoreReset>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800aa6c:	7fbb      	ldrb	r3, [r7, #30]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d10b      	bne.n	800aa8a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	f043 0206 	orr.w	r2, r3, #6
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	f043 0220 	orr.w	r2, r3, #32
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa96:	b004      	add	sp, #16
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	ffbdffbf 	.word	0xffbdffbf

0800aaa0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	f023 0201 	bic.w	r2, r3, #1
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	460b      	mov	r3, r1
 800aacc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aace:	2300      	movs	r3, #0
 800aad0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aade:	78fb      	ldrb	r3, [r7, #3]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d115      	bne.n	800ab10 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aaf0:	200a      	movs	r0, #10
 800aaf2:	f7fa f849 	bl	8004b88 <HAL_Delay>
      ms += 10U;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	330a      	adds	r3, #10
 800aafa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fa25 	bl	800af4c <USB_GetMode>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d01e      	beq.n	800ab46 <USB_SetCurrentMode+0x84>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab0c:	d9f0      	bls.n	800aaf0 <USB_SetCurrentMode+0x2e>
 800ab0e:	e01a      	b.n	800ab46 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d115      	bne.n	800ab42 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab22:	200a      	movs	r0, #10
 800ab24:	f7fa f830 	bl	8004b88 <HAL_Delay>
      ms += 10U;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	330a      	adds	r3, #10
 800ab2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fa0c 	bl	800af4c <USB_GetMode>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d005      	beq.n	800ab46 <USB_SetCurrentMode+0x84>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab3e:	d9f0      	bls.n	800ab22 <USB_SetCurrentMode+0x60>
 800ab40:	e001      	b.n	800ab46 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e005      	b.n	800ab52 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2bc8      	cmp	r3, #200	@ 0xc8
 800ab4a:	d101      	bne.n	800ab50 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e000      	b.n	800ab52 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
	...

0800ab5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab5c:	b084      	sub	sp, #16
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b086      	sub	sp, #24
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ab6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ab76:	2300      	movs	r3, #0
 800ab78:	613b      	str	r3, [r7, #16]
 800ab7a:	e009      	b.n	800ab90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	3340      	adds	r3, #64	@ 0x40
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	2200      	movs	r2, #0
 800ab88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	613b      	str	r3, [r7, #16]
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	2b0e      	cmp	r3, #14
 800ab94:	d9f2      	bls.n	800ab7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ab96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d11c      	bne.n	800abd8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abac:	f043 0302 	orr.w	r3, r3, #2
 800abb0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	e005      	b.n	800abe4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abdc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800abea:	461a      	mov	r2, r3
 800abec:	2300      	movs	r3, #0
 800abee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800abf0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d10d      	bne.n	800ac14 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800abf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d104      	bne.n	800ac0a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ac00:	2100      	movs	r1, #0
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f968 	bl	800aed8 <USB_SetDevSpeed>
 800ac08:	e008      	b.n	800ac1c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ac0a:	2101      	movs	r1, #1
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 f963 	bl	800aed8 <USB_SetDevSpeed>
 800ac12:	e003      	b.n	800ac1c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ac14:	2103      	movs	r1, #3
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f95e 	bl	800aed8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac1c:	2110      	movs	r1, #16
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f8fa 	bl	800ae18 <USB_FlushTxFifo>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d001      	beq.n	800ac2e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f924 	bl	800ae7c <USB_FlushRxFifo>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac44:	461a      	mov	r2, r3
 800ac46:	2300      	movs	r3, #0
 800ac48:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac50:	461a      	mov	r2, r3
 800ac52:	2300      	movs	r3, #0
 800ac54:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	2300      	movs	r3, #0
 800ac60:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac62:	2300      	movs	r3, #0
 800ac64:	613b      	str	r3, [r7, #16]
 800ac66:	e043      	b.n	800acf0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	015a      	lsls	r2, r3, #5
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	4413      	add	r3, r2
 800ac70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac7e:	d118      	bne.n	800acb2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10a      	bne.n	800ac9c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	015a      	lsls	r2, r3, #5
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac92:	461a      	mov	r2, r3
 800ac94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ac98:	6013      	str	r3, [r2, #0]
 800ac9a:	e013      	b.n	800acc4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	015a      	lsls	r2, r3, #5
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	4413      	add	r3, r2
 800aca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aca8:	461a      	mov	r2, r3
 800acaa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	e008      	b.n	800acc4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	015a      	lsls	r2, r3, #5
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	4413      	add	r3, r2
 800acba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acbe:	461a      	mov	r2, r3
 800acc0:	2300      	movs	r3, #0
 800acc2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	4413      	add	r3, r2
 800accc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acd0:	461a      	mov	r2, r3
 800acd2:	2300      	movs	r3, #0
 800acd4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	015a      	lsls	r2, r3, #5
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	4413      	add	r3, r2
 800acde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ace2:	461a      	mov	r2, r3
 800ace4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ace8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	3301      	adds	r3, #1
 800acee:	613b      	str	r3, [r7, #16]
 800acf0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800acf4:	461a      	mov	r2, r3
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d3b5      	bcc.n	800ac68 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acfc:	2300      	movs	r3, #0
 800acfe:	613b      	str	r3, [r7, #16]
 800ad00:	e043      	b.n	800ad8a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	015a      	lsls	r2, r3, #5
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad18:	d118      	bne.n	800ad4c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10a      	bne.n	800ad36 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ad32:	6013      	str	r3, [r2, #0]
 800ad34:	e013      	b.n	800ad5e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	015a      	lsls	r2, r3, #5
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad42:	461a      	mov	r2, r3
 800ad44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	e008      	b.n	800ad5e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	015a      	lsls	r2, r3, #5
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad58:	461a      	mov	r2, r3
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	015a      	lsls	r2, r3, #5
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	4413      	add	r3, r2
 800ad66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ad82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	3301      	adds	r3, #1
 800ad88:	613b      	str	r3, [r7, #16]
 800ad8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ad8e:	461a      	mov	r2, r3
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d3b5      	bcc.n	800ad02 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ada4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ada8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800adb6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800adb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d105      	bne.n	800adcc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	f043 0210 	orr.w	r2, r3, #16
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	699a      	ldr	r2, [r3, #24]
 800add0:	4b0f      	ldr	r3, [pc, #60]	@ (800ae10 <USB_DevInit+0x2b4>)
 800add2:	4313      	orrs	r3, r2
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800add8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800addc:	2b00      	cmp	r3, #0
 800adde:	d005      	beq.n	800adec <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	f043 0208 	orr.w	r2, r3, #8
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800adec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d105      	bne.n	800ae00 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	699a      	ldr	r2, [r3, #24]
 800adf8:	4b06      	ldr	r3, [pc, #24]	@ (800ae14 <USB_DevInit+0x2b8>)
 800adfa:	4313      	orrs	r3, r2
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ae00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3718      	adds	r7, #24
 800ae06:	46bd      	mov	sp, r7
 800ae08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae0c:	b004      	add	sp, #16
 800ae0e:	4770      	bx	lr
 800ae10:	803c3800 	.word	0x803c3800
 800ae14:	40000004 	.word	0x40000004

0800ae18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae22:	2300      	movs	r3, #0
 800ae24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae32:	d901      	bls.n	800ae38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e01b      	b.n	800ae70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	daf2      	bge.n	800ae26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ae40:	2300      	movs	r3, #0
 800ae42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	019b      	lsls	r3, r3, #6
 800ae48:	f043 0220 	orr.w	r2, r3, #32
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3301      	adds	r3, #1
 800ae54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae5c:	d901      	bls.n	800ae62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	e006      	b.n	800ae70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	f003 0320 	and.w	r3, r3, #32
 800ae6a:	2b20      	cmp	r3, #32
 800ae6c:	d0f0      	beq.n	800ae50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae84:	2300      	movs	r3, #0
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae94:	d901      	bls.n	800ae9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e018      	b.n	800aecc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	daf2      	bge.n	800ae88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aea2:	2300      	movs	r3, #0
 800aea4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2210      	movs	r2, #16
 800aeaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aeb8:	d901      	bls.n	800aebe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aeba:	2303      	movs	r3, #3
 800aebc:	e006      	b.n	800aecc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	f003 0310 	and.w	r3, r3, #16
 800aec6:	2b10      	cmp	r3, #16
 800aec8:	d0f0      	beq.n	800aeac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3714      	adds	r7, #20
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	78fb      	ldrb	r3, [r7, #3]
 800aef2:	68f9      	ldr	r1, [r7, #12]
 800aef4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aef8:	4313      	orrs	r3, r2
 800aefa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b085      	sub	sp, #20
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800af24:	f023 0303 	bic.w	r3, r3, #3
 800af28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800af38:	f043 0302 	orr.w	r3, r3, #2
 800af3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	695b      	ldr	r3, [r3, #20]
 800af58:	f003 0301 	and.w	r3, r3, #1
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af70:	2300      	movs	r3, #0
 800af72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	3301      	adds	r3, #1
 800af78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af80:	d901      	bls.n	800af86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af82:	2303      	movs	r3, #3
 800af84:	e01b      	b.n	800afbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	daf2      	bge.n	800af74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800af8e:	2300      	movs	r3, #0
 800af90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	f043 0201 	orr.w	r2, r3, #1
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	3301      	adds	r3, #1
 800afa2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800afaa:	d901      	bls.n	800afb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800afac:	2303      	movs	r3, #3
 800afae:	e006      	b.n	800afbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d0f0      	beq.n	800af9e <USB_CoreReset+0x36>

  return HAL_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
	...

0800afcc <MX_FATFS_Init>:
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
 800afd0:	4904      	ldr	r1, [pc, #16]	@ (800afe4 <MX_FATFS_Init+0x18>)
 800afd2:	4805      	ldr	r0, [pc, #20]	@ (800afe8 <MX_FATFS_Init+0x1c>)
 800afd4:	f003 f996 	bl	800e304 <FATFS_LinkDriver>
 800afd8:	4603      	mov	r3, r0
 800afda:	461a      	mov	r2, r3
 800afdc:	4b03      	ldr	r3, [pc, #12]	@ (800afec <MX_FATFS_Init+0x20>)
 800afde:	701a      	strb	r2, [r3, #0]
 800afe0:	bf00      	nop
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	20003054 	.word	0x20003054
 800afe8:	20000064 	.word	0x20000064
 800afec:	20003050 	.word	0x20003050

0800aff0 <get_fattime>:
 800aff0:	b480      	push	{r7}
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	2300      	movs	r3, #0
 800aff6:	4618      	mov	r0, r3
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <USER_initialize>:
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	71fb      	strb	r3, [r7, #7]
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7f7 f92f 	bl	8002270 <SD_disk_initialize>
 800b012:	4603      	mov	r3, r0
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USER_status>:
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	4603      	mov	r3, r0
 800b024:	71fb      	strb	r3, [r7, #7]
 800b026:	79fb      	ldrb	r3, [r7, #7]
 800b028:	4618      	mov	r0, r3
 800b02a:	f7f7 fa0b 	bl	8002444 <SD_disk_status>
 800b02e:	4603      	mov	r3, r0
 800b030:	4618      	mov	r0, r3
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USER_read>:
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60b9      	str	r1, [r7, #8]
 800b040:	607a      	str	r2, [r7, #4]
 800b042:	603b      	str	r3, [r7, #0]
 800b044:	4603      	mov	r3, r0
 800b046:	73fb      	strb	r3, [r7, #15]
 800b048:	7bf8      	ldrb	r0, [r7, #15]
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	68b9      	ldr	r1, [r7, #8]
 800b050:	f7f7 fa0e 	bl	8002470 <SD_disk_read>
 800b054:	4603      	mov	r3, r0
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <USER_write>:
 800b05e:	b580      	push	{r7, lr}
 800b060:	b084      	sub	sp, #16
 800b062:	af00      	add	r7, sp, #0
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	603b      	str	r3, [r7, #0]
 800b06a:	4603      	mov	r3, r0
 800b06c:	73fb      	strb	r3, [r7, #15]
 800b06e:	7bf8      	ldrb	r0, [r7, #15]
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	68b9      	ldr	r1, [r7, #8]
 800b076:	f7f7 fa65 	bl	8002544 <SD_disk_write>
 800b07a:	4603      	mov	r3, r0
 800b07c:	4618      	mov	r0, r3
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <USER_ioctl>:
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	4603      	mov	r3, r0
 800b08c:	603a      	str	r2, [r7, #0]
 800b08e:	71fb      	strb	r3, [r7, #7]
 800b090:	460b      	mov	r3, r1
 800b092:	71bb      	strb	r3, [r7, #6]
 800b094:	79b9      	ldrb	r1, [r7, #6]
 800b096:	79fb      	ldrb	r3, [r7, #7]
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7f7 fad6 	bl	800264c <SD_disk_ioctl>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
	...

0800b0ac <disk_status>:
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	71fb      	strb	r3, [r7, #7]
 800b0b6:	79fb      	ldrb	r3, [r7, #7]
 800b0b8:	4a08      	ldr	r2, [pc, #32]	@ (800b0dc <disk_status+0x30>)
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	79fa      	ldrb	r2, [r7, #7]
 800b0c4:	4905      	ldr	r1, [pc, #20]	@ (800b0dc <disk_status+0x30>)
 800b0c6:	440a      	add	r2, r1
 800b0c8:	7a12      	ldrb	r2, [r2, #8]
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	4798      	blx	r3
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	73fb      	strb	r3, [r7, #15]
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	20003280 	.word	0x20003280

0800b0e0 <disk_initialize>:
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	71fb      	strb	r3, [r7, #7]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	73fb      	strb	r3, [r7, #15]
 800b0ee:	79fb      	ldrb	r3, [r7, #7]
 800b0f0:	4a0d      	ldr	r2, [pc, #52]	@ (800b128 <disk_initialize+0x48>)
 800b0f2:	5cd3      	ldrb	r3, [r2, r3]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d111      	bne.n	800b11c <disk_initialize+0x3c>
 800b0f8:	79fb      	ldrb	r3, [r7, #7]
 800b0fa:	4a0b      	ldr	r2, [pc, #44]	@ (800b128 <disk_initialize+0x48>)
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	54d1      	strb	r1, [r2, r3]
 800b100:	79fb      	ldrb	r3, [r7, #7]
 800b102:	4a09      	ldr	r2, [pc, #36]	@ (800b128 <disk_initialize+0x48>)
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	79fa      	ldrb	r2, [r7, #7]
 800b10e:	4906      	ldr	r1, [pc, #24]	@ (800b128 <disk_initialize+0x48>)
 800b110:	440a      	add	r2, r1
 800b112:	7a12      	ldrb	r2, [r2, #8]
 800b114:	4610      	mov	r0, r2
 800b116:	4798      	blx	r3
 800b118:	4603      	mov	r3, r0
 800b11a:	73fb      	strb	r3, [r7, #15]
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	20003280 	.word	0x20003280

0800b12c <disk_read>:
 800b12c:	b590      	push	{r4, r7, lr}
 800b12e:	b087      	sub	sp, #28
 800b130:	af00      	add	r7, sp, #0
 800b132:	60b9      	str	r1, [r7, #8]
 800b134:	607a      	str	r2, [r7, #4]
 800b136:	603b      	str	r3, [r7, #0]
 800b138:	4603      	mov	r3, r0
 800b13a:	73fb      	strb	r3, [r7, #15]
 800b13c:	7bfb      	ldrb	r3, [r7, #15]
 800b13e:	4a0a      	ldr	r2, [pc, #40]	@ (800b168 <disk_read+0x3c>)
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4413      	add	r3, r2
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	689c      	ldr	r4, [r3, #8]
 800b148:	7bfb      	ldrb	r3, [r7, #15]
 800b14a:	4a07      	ldr	r2, [pc, #28]	@ (800b168 <disk_read+0x3c>)
 800b14c:	4413      	add	r3, r2
 800b14e:	7a18      	ldrb	r0, [r3, #8]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	68b9      	ldr	r1, [r7, #8]
 800b156:	47a0      	blx	r4
 800b158:	4603      	mov	r3, r0
 800b15a:	75fb      	strb	r3, [r7, #23]
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
 800b15e:	4618      	mov	r0, r3
 800b160:	371c      	adds	r7, #28
 800b162:	46bd      	mov	sp, r7
 800b164:	bd90      	pop	{r4, r7, pc}
 800b166:	bf00      	nop
 800b168:	20003280 	.word	0x20003280

0800b16c <disk_write>:
 800b16c:	b590      	push	{r4, r7, lr}
 800b16e:	b087      	sub	sp, #28
 800b170:	af00      	add	r7, sp, #0
 800b172:	60b9      	str	r1, [r7, #8]
 800b174:	607a      	str	r2, [r7, #4]
 800b176:	603b      	str	r3, [r7, #0]
 800b178:	4603      	mov	r3, r0
 800b17a:	73fb      	strb	r3, [r7, #15]
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
 800b17e:	4a0a      	ldr	r2, [pc, #40]	@ (800b1a8 <disk_write+0x3c>)
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4413      	add	r3, r2
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	68dc      	ldr	r4, [r3, #12]
 800b188:	7bfb      	ldrb	r3, [r7, #15]
 800b18a:	4a07      	ldr	r2, [pc, #28]	@ (800b1a8 <disk_write+0x3c>)
 800b18c:	4413      	add	r3, r2
 800b18e:	7a18      	ldrb	r0, [r3, #8]
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	68b9      	ldr	r1, [r7, #8]
 800b196:	47a0      	blx	r4
 800b198:	4603      	mov	r3, r0
 800b19a:	75fb      	strb	r3, [r7, #23]
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	371c      	adds	r7, #28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd90      	pop	{r4, r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	20003280 	.word	0x20003280

0800b1ac <disk_ioctl>:
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	603a      	str	r2, [r7, #0]
 800b1b6:	71fb      	strb	r3, [r7, #7]
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	71bb      	strb	r3, [r7, #6]
 800b1bc:	79fb      	ldrb	r3, [r7, #7]
 800b1be:	4a09      	ldr	r2, [pc, #36]	@ (800b1e4 <disk_ioctl+0x38>)
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4413      	add	r3, r2
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	79fa      	ldrb	r2, [r7, #7]
 800b1ca:	4906      	ldr	r1, [pc, #24]	@ (800b1e4 <disk_ioctl+0x38>)
 800b1cc:	440a      	add	r2, r1
 800b1ce:	7a10      	ldrb	r0, [r2, #8]
 800b1d0:	79b9      	ldrb	r1, [r7, #6]
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	4798      	blx	r3
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	73fb      	strb	r3, [r7, #15]
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	20003280 	.word	0x20003280

0800b1e8 <ld_word>:
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	81fb      	strh	r3, [r7, #14]
 800b1f8:	89fb      	ldrh	r3, [r7, #14]
 800b1fa:	021b      	lsls	r3, r3, #8
 800b1fc:	b21a      	sxth	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	b21b      	sxth	r3, r3
 800b204:	4313      	orrs	r3, r2
 800b206:	b21b      	sxth	r3, r3
 800b208:	81fb      	strh	r3, [r7, #14]
 800b20a:	89fb      	ldrh	r3, [r7, #14]
 800b20c:	4618      	mov	r0, r3
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <ld_dword>:
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	3303      	adds	r3, #3
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	60fb      	str	r3, [r7, #12]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	021b      	lsls	r3, r3, #8
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	3202      	adds	r2, #2
 800b230:	7812      	ldrb	r2, [r2, #0]
 800b232:	4313      	orrs	r3, r2
 800b234:	60fb      	str	r3, [r7, #12]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	021b      	lsls	r3, r3, #8
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	3201      	adds	r2, #1
 800b23e:	7812      	ldrb	r2, [r2, #0]
 800b240:	4313      	orrs	r3, r2
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	021b      	lsls	r3, r3, #8
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	7812      	ldrb	r2, [r2, #0]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	60fb      	str	r3, [r7, #12]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	4618      	mov	r0, r3
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <st_word>:
 800b25e:	b480      	push	{r7}
 800b260:	b083      	sub	sp, #12
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
 800b266:	460b      	mov	r3, r1
 800b268:	807b      	strh	r3, [r7, #2]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	1c5a      	adds	r2, r3, #1
 800b26e:	607a      	str	r2, [r7, #4]
 800b270:	887a      	ldrh	r2, [r7, #2]
 800b272:	b2d2      	uxtb	r2, r2
 800b274:	701a      	strb	r2, [r3, #0]
 800b276:	887b      	ldrh	r3, [r7, #2]
 800b278:	0a1b      	lsrs	r3, r3, #8
 800b27a:	807b      	strh	r3, [r7, #2]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	1c5a      	adds	r2, r3, #1
 800b280:	607a      	str	r2, [r7, #4]
 800b282:	887a      	ldrh	r2, [r7, #2]
 800b284:	b2d2      	uxtb	r2, r2
 800b286:	701a      	strb	r2, [r3, #0]
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <st_dword>:
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	1c5a      	adds	r2, r3, #1
 800b2a2:	607a      	str	r2, [r7, #4]
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	b2d2      	uxtb	r2, r2
 800b2a8:	701a      	strb	r2, [r3, #0]
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	0a1b      	lsrs	r3, r3, #8
 800b2ae:	603b      	str	r3, [r7, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	1c5a      	adds	r2, r3, #1
 800b2b4:	607a      	str	r2, [r7, #4]
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	b2d2      	uxtb	r2, r2
 800b2ba:	701a      	strb	r2, [r3, #0]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	0a1b      	lsrs	r3, r3, #8
 800b2c0:	603b      	str	r3, [r7, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	1c5a      	adds	r2, r3, #1
 800b2c6:	607a      	str	r2, [r7, #4]
 800b2c8:	683a      	ldr	r2, [r7, #0]
 800b2ca:	b2d2      	uxtb	r2, r2
 800b2cc:	701a      	strb	r2, [r3, #0]
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	0a1b      	lsrs	r3, r3, #8
 800b2d2:	603b      	str	r3, [r7, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	1c5a      	adds	r2, r3, #1
 800b2d8:	607a      	str	r2, [r7, #4]
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	b2d2      	uxtb	r2, r2
 800b2de:	701a      	strb	r2, [r3, #0]
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <mem_cpy>:
 800b2ec:	b480      	push	{r7}
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	617b      	str	r3, [r7, #20]
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	613b      	str	r3, [r7, #16]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00d      	beq.n	800b322 <mem_cpy+0x36>
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	1c53      	adds	r3, r2, #1
 800b30a:	613b      	str	r3, [r7, #16]
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	1c59      	adds	r1, r3, #1
 800b310:	6179      	str	r1, [r7, #20]
 800b312:	7812      	ldrb	r2, [r2, #0]
 800b314:	701a      	strb	r2, [r3, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	3b01      	subs	r3, #1
 800b31a:	607b      	str	r3, [r7, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1f1      	bne.n	800b306 <mem_cpy+0x1a>
 800b322:	bf00      	nop
 800b324:	371c      	adds	r7, #28
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <mem_set>:
 800b32e:	b480      	push	{r7}
 800b330:	b087      	sub	sp, #28
 800b332:	af00      	add	r7, sp, #0
 800b334:	60f8      	str	r0, [r7, #12]
 800b336:	60b9      	str	r1, [r7, #8]
 800b338:	607a      	str	r2, [r7, #4]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	617b      	str	r3, [r7, #20]
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	1c5a      	adds	r2, r3, #1
 800b342:	617a      	str	r2, [r7, #20]
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	b2d2      	uxtb	r2, r2
 800b348:	701a      	strb	r2, [r3, #0]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	3b01      	subs	r3, #1
 800b34e:	607b      	str	r3, [r7, #4]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1f3      	bne.n	800b33e <mem_set+0x10>
 800b356:	bf00      	nop
 800b358:	bf00      	nop
 800b35a:	371c      	adds	r7, #28
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <mem_cmp>:
 800b364:	b480      	push	{r7}
 800b366:	b089      	sub	sp, #36	@ 0x24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	61fb      	str	r3, [r7, #28]
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	61bb      	str	r3, [r7, #24]
 800b378:	2300      	movs	r3, #0
 800b37a:	617b      	str	r3, [r7, #20]
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	1c5a      	adds	r2, r3, #1
 800b380:	61fa      	str	r2, [r7, #28]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	4619      	mov	r1, r3
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	1c5a      	adds	r2, r3, #1
 800b38a:	61ba      	str	r2, [r7, #24]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	1acb      	subs	r3, r1, r3
 800b390:	617b      	str	r3, [r7, #20]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3b01      	subs	r3, #1
 800b396:	607b      	str	r3, [r7, #4]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d002      	beq.n	800b3a4 <mem_cmp+0x40>
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d0eb      	beq.n	800b37c <mem_cmp+0x18>
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3724      	adds	r7, #36	@ 0x24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <chk_chr>:
 800b3b2:	b480      	push	{r7}
 800b3b4:	b083      	sub	sp, #12
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	6039      	str	r1, [r7, #0]
 800b3bc:	e002      	b.n	800b3c4 <chk_chr+0x12>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	607b      	str	r3, [r7, #4]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d005      	beq.n	800b3d8 <chk_chr+0x26>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d1f2      	bne.n	800b3be <chk_chr+0xc>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <chk_lock>:
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60bb      	str	r3, [r7, #8]
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	60fb      	str	r3, [r7, #12]
 800b3fa:	e029      	b.n	800b450 <chk_lock+0x68>
 800b3fc:	4a27      	ldr	r2, [pc, #156]	@ (800b49c <chk_lock+0xb4>)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	011b      	lsls	r3, r3, #4
 800b402:	4413      	add	r3, r2
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d01d      	beq.n	800b446 <chk_lock+0x5e>
 800b40a:	4a24      	ldr	r2, [pc, #144]	@ (800b49c <chk_lock+0xb4>)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	011b      	lsls	r3, r3, #4
 800b410:	4413      	add	r3, r2
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d116      	bne.n	800b44a <chk_lock+0x62>
 800b41c:	4a1f      	ldr	r2, [pc, #124]	@ (800b49c <chk_lock+0xb4>)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	011b      	lsls	r3, r3, #4
 800b422:	4413      	add	r3, r2
 800b424:	3304      	adds	r3, #4
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d10c      	bne.n	800b44a <chk_lock+0x62>
 800b430:	4a1a      	ldr	r2, [pc, #104]	@ (800b49c <chk_lock+0xb4>)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	011b      	lsls	r3, r3, #4
 800b436:	4413      	add	r3, r2
 800b438:	3308      	adds	r3, #8
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	429a      	cmp	r2, r3
 800b442:	d102      	bne.n	800b44a <chk_lock+0x62>
 800b444:	e007      	b.n	800b456 <chk_lock+0x6e>
 800b446:	2301      	movs	r3, #1
 800b448:	60bb      	str	r3, [r7, #8]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3301      	adds	r3, #1
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d9d2      	bls.n	800b3fc <chk_lock+0x14>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2b02      	cmp	r3, #2
 800b45a:	d109      	bne.n	800b470 <chk_lock+0x88>
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d102      	bne.n	800b468 <chk_lock+0x80>
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b02      	cmp	r3, #2
 800b466:	d101      	bne.n	800b46c <chk_lock+0x84>
 800b468:	2300      	movs	r3, #0
 800b46a:	e010      	b.n	800b48e <chk_lock+0xa6>
 800b46c:	2312      	movs	r3, #18
 800b46e:	e00e      	b.n	800b48e <chk_lock+0xa6>
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d108      	bne.n	800b488 <chk_lock+0xa0>
 800b476:	4a09      	ldr	r2, [pc, #36]	@ (800b49c <chk_lock+0xb4>)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	011b      	lsls	r3, r3, #4
 800b47c:	4413      	add	r3, r2
 800b47e:	330c      	adds	r3, #12
 800b480:	881b      	ldrh	r3, [r3, #0]
 800b482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b486:	d101      	bne.n	800b48c <chk_lock+0xa4>
 800b488:	2310      	movs	r3, #16
 800b48a:	e000      	b.n	800b48e <chk_lock+0xa6>
 800b48c:	2300      	movs	r3, #0
 800b48e:	4618      	mov	r0, r3
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	20003060 	.word	0x20003060

0800b4a0 <enq_lock>:
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	607b      	str	r3, [r7, #4]
 800b4aa:	e002      	b.n	800b4b2 <enq_lock+0x12>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	607b      	str	r3, [r7, #4]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d806      	bhi.n	800b4c6 <enq_lock+0x26>
 800b4b8:	4a09      	ldr	r2, [pc, #36]	@ (800b4e0 <enq_lock+0x40>)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	011b      	lsls	r3, r3, #4
 800b4be:	4413      	add	r3, r2
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1f2      	bne.n	800b4ac <enq_lock+0xc>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	bf14      	ite	ne
 800b4cc:	2301      	movne	r3, #1
 800b4ce:	2300      	moveq	r3, #0
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	370c      	adds	r7, #12
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	20003060 	.word	0x20003060

0800b4e4 <inc_lock>:
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60fb      	str	r3, [r7, #12]
 800b4f2:	e01f      	b.n	800b534 <inc_lock+0x50>
 800b4f4:	4a41      	ldr	r2, [pc, #260]	@ (800b5fc <inc_lock+0x118>)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	011b      	lsls	r3, r3, #4
 800b4fa:	4413      	add	r3, r2
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	429a      	cmp	r2, r3
 800b504:	d113      	bne.n	800b52e <inc_lock+0x4a>
 800b506:	4a3d      	ldr	r2, [pc, #244]	@ (800b5fc <inc_lock+0x118>)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	011b      	lsls	r3, r3, #4
 800b50c:	4413      	add	r3, r2
 800b50e:	3304      	adds	r3, #4
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	429a      	cmp	r2, r3
 800b518:	d109      	bne.n	800b52e <inc_lock+0x4a>
 800b51a:	4a38      	ldr	r2, [pc, #224]	@ (800b5fc <inc_lock+0x118>)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	011b      	lsls	r3, r3, #4
 800b520:	4413      	add	r3, r2
 800b522:	3308      	adds	r3, #8
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d006      	beq.n	800b53c <inc_lock+0x58>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	3301      	adds	r3, #1
 800b532:	60fb      	str	r3, [r7, #12]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d9dc      	bls.n	800b4f4 <inc_lock+0x10>
 800b53a:	e000      	b.n	800b53e <inc_lock+0x5a>
 800b53c:	bf00      	nop
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2b02      	cmp	r3, #2
 800b542:	d132      	bne.n	800b5aa <inc_lock+0xc6>
 800b544:	2300      	movs	r3, #0
 800b546:	60fb      	str	r3, [r7, #12]
 800b548:	e002      	b.n	800b550 <inc_lock+0x6c>
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	3301      	adds	r3, #1
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d806      	bhi.n	800b564 <inc_lock+0x80>
 800b556:	4a29      	ldr	r2, [pc, #164]	@ (800b5fc <inc_lock+0x118>)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	011b      	lsls	r3, r3, #4
 800b55c:	4413      	add	r3, r2
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1f2      	bne.n	800b54a <inc_lock+0x66>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b02      	cmp	r3, #2
 800b568:	d101      	bne.n	800b56e <inc_lock+0x8a>
 800b56a:	2300      	movs	r3, #0
 800b56c:	e040      	b.n	800b5f0 <inc_lock+0x10c>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	4922      	ldr	r1, [pc, #136]	@ (800b5fc <inc_lock+0x118>)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	011b      	lsls	r3, r3, #4
 800b578:	440b      	add	r3, r1
 800b57a:	601a      	str	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	689a      	ldr	r2, [r3, #8]
 800b580:	491e      	ldr	r1, [pc, #120]	@ (800b5fc <inc_lock+0x118>)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	011b      	lsls	r3, r3, #4
 800b586:	440b      	add	r3, r1
 800b588:	3304      	adds	r3, #4
 800b58a:	601a      	str	r2, [r3, #0]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	695a      	ldr	r2, [r3, #20]
 800b590:	491a      	ldr	r1, [pc, #104]	@ (800b5fc <inc_lock+0x118>)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	011b      	lsls	r3, r3, #4
 800b596:	440b      	add	r3, r1
 800b598:	3308      	adds	r3, #8
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	4a17      	ldr	r2, [pc, #92]	@ (800b5fc <inc_lock+0x118>)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	011b      	lsls	r3, r3, #4
 800b5a2:	4413      	add	r3, r2
 800b5a4:	330c      	adds	r3, #12
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	801a      	strh	r2, [r3, #0]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d009      	beq.n	800b5c4 <inc_lock+0xe0>
 800b5b0:	4a12      	ldr	r2, [pc, #72]	@ (800b5fc <inc_lock+0x118>)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	011b      	lsls	r3, r3, #4
 800b5b6:	4413      	add	r3, r2
 800b5b8:	330c      	adds	r3, #12
 800b5ba:	881b      	ldrh	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d001      	beq.n	800b5c4 <inc_lock+0xe0>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	e015      	b.n	800b5f0 <inc_lock+0x10c>
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d108      	bne.n	800b5dc <inc_lock+0xf8>
 800b5ca:	4a0c      	ldr	r2, [pc, #48]	@ (800b5fc <inc_lock+0x118>)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	011b      	lsls	r3, r3, #4
 800b5d0:	4413      	add	r3, r2
 800b5d2:	330c      	adds	r3, #12
 800b5d4:	881b      	ldrh	r3, [r3, #0]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	b29a      	uxth	r2, r3
 800b5da:	e001      	b.n	800b5e0 <inc_lock+0xfc>
 800b5dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b5e0:	4906      	ldr	r1, [pc, #24]	@ (800b5fc <inc_lock+0x118>)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	011b      	lsls	r3, r3, #4
 800b5e6:	440b      	add	r3, r1
 800b5e8:	330c      	adds	r3, #12
 800b5ea:	801a      	strh	r2, [r3, #0]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr
 800b5fc:	20003060 	.word	0x20003060

0800b600 <dec_lock>:
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3b01      	subs	r3, #1
 800b60c:	607b      	str	r3, [r7, #4]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d825      	bhi.n	800b660 <dec_lock+0x60>
 800b614:	4a17      	ldr	r2, [pc, #92]	@ (800b674 <dec_lock+0x74>)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	011b      	lsls	r3, r3, #4
 800b61a:	4413      	add	r3, r2
 800b61c:	330c      	adds	r3, #12
 800b61e:	881b      	ldrh	r3, [r3, #0]
 800b620:	81fb      	strh	r3, [r7, #14]
 800b622:	89fb      	ldrh	r3, [r7, #14]
 800b624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b628:	d101      	bne.n	800b62e <dec_lock+0x2e>
 800b62a:	2300      	movs	r3, #0
 800b62c:	81fb      	strh	r3, [r7, #14]
 800b62e:	89fb      	ldrh	r3, [r7, #14]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <dec_lock+0x3a>
 800b634:	89fb      	ldrh	r3, [r7, #14]
 800b636:	3b01      	subs	r3, #1
 800b638:	81fb      	strh	r3, [r7, #14]
 800b63a:	4a0e      	ldr	r2, [pc, #56]	@ (800b674 <dec_lock+0x74>)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	011b      	lsls	r3, r3, #4
 800b640:	4413      	add	r3, r2
 800b642:	330c      	adds	r3, #12
 800b644:	89fa      	ldrh	r2, [r7, #14]
 800b646:	801a      	strh	r2, [r3, #0]
 800b648:	89fb      	ldrh	r3, [r7, #14]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d105      	bne.n	800b65a <dec_lock+0x5a>
 800b64e:	4a09      	ldr	r2, [pc, #36]	@ (800b674 <dec_lock+0x74>)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	011b      	lsls	r3, r3, #4
 800b654:	4413      	add	r3, r2
 800b656:	2200      	movs	r2, #0
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	2300      	movs	r3, #0
 800b65c:	737b      	strb	r3, [r7, #13]
 800b65e:	e001      	b.n	800b664 <dec_lock+0x64>
 800b660:	2302      	movs	r3, #2
 800b662:	737b      	strb	r3, [r7, #13]
 800b664:	7b7b      	ldrb	r3, [r7, #13]
 800b666:	4618      	mov	r0, r3
 800b668:	3714      	adds	r7, #20
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	20003060 	.word	0x20003060

0800b678 <clear_lock>:
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	2300      	movs	r3, #0
 800b682:	60fb      	str	r3, [r7, #12]
 800b684:	e010      	b.n	800b6a8 <clear_lock+0x30>
 800b686:	4a0d      	ldr	r2, [pc, #52]	@ (800b6bc <clear_lock+0x44>)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	011b      	lsls	r3, r3, #4
 800b68c:	4413      	add	r3, r2
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	429a      	cmp	r2, r3
 800b694:	d105      	bne.n	800b6a2 <clear_lock+0x2a>
 800b696:	4a09      	ldr	r2, [pc, #36]	@ (800b6bc <clear_lock+0x44>)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	011b      	lsls	r3, r3, #4
 800b69c:	4413      	add	r3, r2
 800b69e:	2200      	movs	r2, #0
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	60fb      	str	r3, [r7, #12]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d9eb      	bls.n	800b686 <clear_lock+0xe>
 800b6ae:	bf00      	nop
 800b6b0:	bf00      	nop
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	20003060 	.word	0x20003060

0800b6c0 <sync_window>:
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	73fb      	strb	r3, [r7, #15]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	78db      	ldrb	r3, [r3, #3]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d034      	beq.n	800b73e <sync_window+0x7e>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6d8:	617b      	str	r3, [r7, #20]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	7858      	ldrb	r0, [r3, #1]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	f7ff fd40 	bl	800b16c <disk_write>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d002      	beq.n	800b6f8 <sync_window+0x38>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	73fb      	strb	r3, [r7, #15]
 800b6f6:	e022      	b.n	800b73e <sync_window+0x7e>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	70da      	strb	r2, [r3, #3]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	1ad2      	subs	r2, r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a1b      	ldr	r3, [r3, #32]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d217      	bcs.n	800b73e <sync_window+0x7e>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	789b      	ldrb	r3, [r3, #2]
 800b712:	613b      	str	r3, [r7, #16]
 800b714:	e010      	b.n	800b738 <sync_window+0x78>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	4413      	add	r3, r2
 800b71e:	617b      	str	r3, [r7, #20]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	7858      	ldrb	r0, [r3, #1]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b72a:	2301      	movs	r3, #1
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	f7ff fd1d 	bl	800b16c <disk_write>
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	3b01      	subs	r3, #1
 800b736:	613b      	str	r3, [r7, #16]
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d8eb      	bhi.n	800b716 <sync_window+0x56>
 800b73e:	7bfb      	ldrb	r3, [r7, #15]
 800b740:	4618      	mov	r0, r3
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <move_window>:
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
 800b752:	2300      	movs	r3, #0
 800b754:	73fb      	strb	r3, [r7, #15]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d01b      	beq.n	800b798 <move_window+0x50>
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7ff ffad 	bl	800b6c0 <sync_window>
 800b766:	4603      	mov	r3, r0
 800b768:	73fb      	strb	r3, [r7, #15]
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d113      	bne.n	800b798 <move_window+0x50>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	7858      	ldrb	r0, [r3, #1]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b77a:	2301      	movs	r3, #1
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	f7ff fcd5 	bl	800b12c <disk_read>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d004      	beq.n	800b792 <move_window+0x4a>
 800b788:	f04f 33ff 	mov.w	r3, #4294967295
 800b78c:	603b      	str	r3, [r7, #0]
 800b78e:	2301      	movs	r3, #1
 800b790:	73fb      	strb	r3, [r7, #15]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	635a      	str	r2, [r3, #52]	@ 0x34
 800b798:	7bfb      	ldrb	r3, [r7, #15]
 800b79a:	4618      	mov	r0, r3
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
	...

0800b7a4 <sync_fs>:
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f7ff ff87 	bl	800b6c0 <sync_window>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	73fb      	strb	r3, [r7, #15]
 800b7b6:	7bfb      	ldrb	r3, [r7, #15]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d159      	bne.n	800b870 <sync_fs+0xcc>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	2b03      	cmp	r3, #3
 800b7c2:	d149      	bne.n	800b858 <sync_fs+0xb4>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	791b      	ldrb	r3, [r3, #4]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d145      	bne.n	800b858 <sync_fs+0xb4>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	899b      	ldrh	r3, [r3, #12]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	2100      	movs	r1, #0
 800b7da:	f7ff fda8 	bl	800b32e <mem_set>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3338      	adds	r3, #56	@ 0x38
 800b7e2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b7e6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7ff fd37 	bl	800b25e <st_word>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	3338      	adds	r3, #56	@ 0x38
 800b7f4:	4921      	ldr	r1, [pc, #132]	@ (800b87c <sync_fs+0xd8>)
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff fd4c 	bl	800b294 <st_dword>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	3338      	adds	r3, #56	@ 0x38
 800b800:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b804:	491e      	ldr	r1, [pc, #120]	@ (800b880 <sync_fs+0xdc>)
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff fd44 	bl	800b294 <st_dword>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3338      	adds	r3, #56	@ 0x38
 800b810:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	4619      	mov	r1, r3
 800b81a:	4610      	mov	r0, r2
 800b81c:	f7ff fd3a 	bl	800b294 <st_dword>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	3338      	adds	r3, #56	@ 0x38
 800b824:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	4619      	mov	r1, r3
 800b82e:	4610      	mov	r0, r2
 800b830:	f7ff fd30 	bl	800b294 <st_dword>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b838:	1c5a      	adds	r2, r3, #1
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	635a      	str	r2, [r3, #52]	@ 0x34
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	7858      	ldrb	r0, [r3, #1]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b84c:	2301      	movs	r3, #1
 800b84e:	f7ff fc8d 	bl	800b16c <disk_write>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	711a      	strb	r2, [r3, #4]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	785b      	ldrb	r3, [r3, #1]
 800b85c:	2200      	movs	r2, #0
 800b85e:	2100      	movs	r1, #0
 800b860:	4618      	mov	r0, r3
 800b862:	f7ff fca3 	bl	800b1ac <disk_ioctl>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <sync_fs+0xcc>
 800b86c:	2301      	movs	r3, #1
 800b86e:	73fb      	strb	r3, [r7, #15]
 800b870:	7bfb      	ldrb	r3, [r7, #15]
 800b872:	4618      	mov	r0, r3
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	41615252 	.word	0x41615252
 800b880:	61417272 	.word	0x61417272

0800b884 <clust2sect>:
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	3b02      	subs	r3, #2
 800b892:	603b      	str	r3, [r7, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	69db      	ldr	r3, [r3, #28]
 800b898:	3b02      	subs	r3, #2
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d301      	bcc.n	800b8a4 <clust2sect+0x20>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	e008      	b.n	800b8b6 <clust2sect+0x32>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	895b      	ldrh	r3, [r3, #10]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	fb03 f202 	mul.w	r2, r3, r2
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8b4:	4413      	add	r3, r2
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr

0800b8c2 <get_fat>:
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b086      	sub	sp, #24
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	6039      	str	r1, [r7, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	613b      	str	r3, [r7, #16]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d904      	bls.n	800b8e2 <get_fat+0x20>
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	69db      	ldr	r3, [r3, #28]
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d302      	bcc.n	800b8e8 <get_fat+0x26>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	617b      	str	r3, [r7, #20]
 800b8e6:	e0ba      	b.n	800ba5e <get_fat+0x19c>
 800b8e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ec:	617b      	str	r3, [r7, #20]
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	f000 8082 	beq.w	800b9fc <get_fat+0x13a>
 800b8f8:	2b03      	cmp	r3, #3
 800b8fa:	f300 80a6 	bgt.w	800ba4a <get_fat+0x188>
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d002      	beq.n	800b908 <get_fat+0x46>
 800b902:	2b02      	cmp	r3, #2
 800b904:	d055      	beq.n	800b9b2 <get_fat+0xf0>
 800b906:	e0a0      	b.n	800ba4a <get_fat+0x188>
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	60fb      	str	r3, [r7, #12]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	085b      	lsrs	r3, r3, #1
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	4413      	add	r3, r2
 800b914:	60fb      	str	r3, [r7, #12]
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	899b      	ldrh	r3, [r3, #12]
 800b91e:	4619      	mov	r1, r3
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	fbb3 f3f1 	udiv	r3, r3, r1
 800b926:	4413      	add	r3, r2
 800b928:	4619      	mov	r1, r3
 800b92a:	6938      	ldr	r0, [r7, #16]
 800b92c:	f7ff ff0c 	bl	800b748 <move_window>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	f040 808c 	bne.w	800ba50 <get_fat+0x18e>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	1c5a      	adds	r2, r3, #1
 800b93c:	60fa      	str	r2, [r7, #12]
 800b93e:	693a      	ldr	r2, [r7, #16]
 800b940:	8992      	ldrh	r2, [r2, #12]
 800b942:	fbb3 f1f2 	udiv	r1, r3, r2
 800b946:	fb01 f202 	mul.w	r2, r1, r2
 800b94a:	1a9b      	subs	r3, r3, r2
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	4413      	add	r3, r2
 800b950:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b954:	60bb      	str	r3, [r7, #8]
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	899b      	ldrh	r3, [r3, #12]
 800b95e:	4619      	mov	r1, r3
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	fbb3 f3f1 	udiv	r3, r3, r1
 800b966:	4413      	add	r3, r2
 800b968:	4619      	mov	r1, r3
 800b96a:	6938      	ldr	r0, [r7, #16]
 800b96c:	f7ff feec 	bl	800b748 <move_window>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d16e      	bne.n	800ba54 <get_fat+0x192>
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	899b      	ldrh	r3, [r3, #12]
 800b97a:	461a      	mov	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b982:	fb01 f202 	mul.w	r2, r1, r2
 800b986:	1a9b      	subs	r3, r3, r2
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	4413      	add	r3, r2
 800b98c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b990:	021b      	lsls	r3, r3, #8
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	4313      	orrs	r3, r2
 800b996:	60bb      	str	r3, [r7, #8]
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	f003 0301 	and.w	r3, r3, #1
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d002      	beq.n	800b9a8 <get_fat+0xe6>
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	091b      	lsrs	r3, r3, #4
 800b9a6:	e002      	b.n	800b9ae <get_fat+0xec>
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9ae:	617b      	str	r3, [r7, #20]
 800b9b0:	e055      	b.n	800ba5e <get_fat+0x19c>
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	899b      	ldrh	r3, [r3, #12]
 800b9ba:	085b      	lsrs	r3, r3, #1
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	4619      	mov	r1, r3
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b9c6:	4413      	add	r3, r2
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6938      	ldr	r0, [r7, #16]
 800b9cc:	f7ff febc 	bl	800b748 <move_window>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d140      	bne.n	800ba58 <get_fat+0x196>
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	005b      	lsls	r3, r3, #1
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	8992      	ldrh	r2, [r2, #12]
 800b9e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9e8:	fb00 f202 	mul.w	r2, r0, r2
 800b9ec:	1a9b      	subs	r3, r3, r2
 800b9ee:	440b      	add	r3, r1
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7ff fbf9 	bl	800b1e8 <ld_word>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	617b      	str	r3, [r7, #20]
 800b9fa:	e030      	b.n	800ba5e <get_fat+0x19c>
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	899b      	ldrh	r3, [r3, #12]
 800ba04:	089b      	lsrs	r3, r3, #2
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	4619      	mov	r1, r3
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba10:	4413      	add	r3, r2
 800ba12:	4619      	mov	r1, r3
 800ba14:	6938      	ldr	r0, [r7, #16]
 800ba16:	f7ff fe97 	bl	800b748 <move_window>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d11d      	bne.n	800ba5c <get_fat+0x19a>
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	693a      	ldr	r2, [r7, #16]
 800ba2c:	8992      	ldrh	r2, [r2, #12]
 800ba2e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba32:	fb00 f202 	mul.w	r2, r0, r2
 800ba36:	1a9b      	subs	r3, r3, r2
 800ba38:	440b      	add	r3, r1
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff fbec 	bl	800b218 <ld_dword>
 800ba40:	4603      	mov	r3, r0
 800ba42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ba46:	617b      	str	r3, [r7, #20]
 800ba48:	e009      	b.n	800ba5e <get_fat+0x19c>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	617b      	str	r3, [r7, #20]
 800ba4e:	e006      	b.n	800ba5e <get_fat+0x19c>
 800ba50:	bf00      	nop
 800ba52:	e004      	b.n	800ba5e <get_fat+0x19c>
 800ba54:	bf00      	nop
 800ba56:	e002      	b.n	800ba5e <get_fat+0x19c>
 800ba58:	bf00      	nop
 800ba5a:	e000      	b.n	800ba5e <get_fat+0x19c>
 800ba5c:	bf00      	nop
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <put_fat>:
 800ba68:	b590      	push	{r4, r7, lr}
 800ba6a:	b089      	sub	sp, #36	@ 0x24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
 800ba74:	2302      	movs	r3, #2
 800ba76:	77fb      	strb	r3, [r7, #31]
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	f240 8109 	bls.w	800bc92 <put_fat+0x22a>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	69db      	ldr	r3, [r3, #28]
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	f080 8103 	bcs.w	800bc92 <put_fat+0x22a>
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	f000 80b6 	beq.w	800bc02 <put_fat+0x19a>
 800ba96:	2b03      	cmp	r3, #3
 800ba98:	f300 80fb 	bgt.w	800bc92 <put_fat+0x22a>
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d003      	beq.n	800baa8 <put_fat+0x40>
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	f000 8083 	beq.w	800bbac <put_fat+0x144>
 800baa6:	e0f4      	b.n	800bc92 <put_fat+0x22a>
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	61bb      	str	r3, [r7, #24]
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	085b      	lsrs	r3, r3, #1
 800bab0:	69ba      	ldr	r2, [r7, #24]
 800bab2:	4413      	add	r3, r2
 800bab4:	61bb      	str	r3, [r7, #24]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	899b      	ldrh	r3, [r3, #12]
 800babe:	4619      	mov	r1, r3
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	fbb3 f3f1 	udiv	r3, r3, r1
 800bac6:	4413      	add	r3, r2
 800bac8:	4619      	mov	r1, r3
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f7ff fe3c 	bl	800b748 <move_window>
 800bad0:	4603      	mov	r3, r0
 800bad2:	77fb      	strb	r3, [r7, #31]
 800bad4:	7ffb      	ldrb	r3, [r7, #31]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f040 80d4 	bne.w	800bc84 <put_fat+0x21c>
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	1c5a      	adds	r2, r3, #1
 800bae6:	61ba      	str	r2, [r7, #24]
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	8992      	ldrh	r2, [r2, #12]
 800baec:	fbb3 f0f2 	udiv	r0, r3, r2
 800baf0:	fb00 f202 	mul.w	r2, r0, r2
 800baf4:	1a9b      	subs	r3, r3, r2
 800baf6:	440b      	add	r3, r1
 800baf8:	617b      	str	r3, [r7, #20]
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00d      	beq.n	800bb20 <put_fat+0xb8>
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	b25b      	sxtb	r3, r3
 800bb0a:	f003 030f 	and.w	r3, r3, #15
 800bb0e:	b25a      	sxtb	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	011b      	lsls	r3, r3, #4
 800bb16:	b25b      	sxtb	r3, r3
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	b25b      	sxtb	r3, r3
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	e001      	b.n	800bb24 <put_fat+0xbc>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	697a      	ldr	r2, [r7, #20]
 800bb26:	7013      	strb	r3, [r2, #0]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	70da      	strb	r2, [r3, #3]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	899b      	ldrh	r3, [r3, #12]
 800bb36:	4619      	mov	r1, r3
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb3e:	4413      	add	r3, r2
 800bb40:	4619      	mov	r1, r3
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f7ff fe00 	bl	800b748 <move_window>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	77fb      	strb	r3, [r7, #31]
 800bb4c:	7ffb      	ldrb	r3, [r7, #31]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	f040 809a 	bne.w	800bc88 <put_fat+0x220>
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	899b      	ldrh	r3, [r3, #12]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb66:	fb00 f202 	mul.w	r2, r0, r2
 800bb6a:	1a9b      	subs	r3, r3, r2
 800bb6c:	440b      	add	r3, r1
 800bb6e:	617b      	str	r3, [r7, #20]
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d003      	beq.n	800bb82 <put_fat+0x11a>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	091b      	lsrs	r3, r3, #4
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	e00e      	b.n	800bba0 <put_fat+0x138>
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	b25b      	sxtb	r3, r3
 800bb88:	f023 030f 	bic.w	r3, r3, #15
 800bb8c:	b25a      	sxtb	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	0a1b      	lsrs	r3, r3, #8
 800bb92:	b25b      	sxtb	r3, r3
 800bb94:	f003 030f 	and.w	r3, r3, #15
 800bb98:	b25b      	sxtb	r3, r3
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	b25b      	sxtb	r3, r3
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	7013      	strb	r3, [r2, #0]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2201      	movs	r2, #1
 800bba8:	70da      	strb	r2, [r3, #3]
 800bbaa:	e072      	b.n	800bc92 <put_fat+0x22a>
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	899b      	ldrh	r3, [r3, #12]
 800bbb4:	085b      	lsrs	r3, r3, #1
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	4619      	mov	r1, r3
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbc0:	4413      	add	r3, r2
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f7ff fdbf 	bl	800b748 <move_window>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	77fb      	strb	r3, [r7, #31]
 800bbce:	7ffb      	ldrb	r3, [r7, #31]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d15b      	bne.n	800bc8c <put_fat+0x224>
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	005b      	lsls	r3, r3, #1
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	8992      	ldrh	r2, [r2, #12]
 800bbe2:	fbb3 f0f2 	udiv	r0, r3, r2
 800bbe6:	fb00 f202 	mul.w	r2, r0, r2
 800bbea:	1a9b      	subs	r3, r3, r2
 800bbec:	440b      	add	r3, r1
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	b292      	uxth	r2, r2
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7ff fb32 	bl	800b25e <st_word>
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	70da      	strb	r2, [r3, #3]
 800bc00:	e047      	b.n	800bc92 <put_fat+0x22a>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	899b      	ldrh	r3, [r3, #12]
 800bc0a:	089b      	lsrs	r3, r3, #2
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	4619      	mov	r1, r3
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc16:	4413      	add	r3, r2
 800bc18:	4619      	mov	r1, r3
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f7ff fd94 	bl	800b748 <move_window>
 800bc20:	4603      	mov	r3, r0
 800bc22:	77fb      	strb	r3, [r7, #31]
 800bc24:	7ffb      	ldrb	r3, [r7, #31]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d132      	bne.n	800bc90 <put_fat+0x228>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	8992      	ldrh	r2, [r2, #12]
 800bc3e:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc42:	fb00 f202 	mul.w	r2, r0, r2
 800bc46:	1a9b      	subs	r3, r3, r2
 800bc48:	440b      	add	r3, r1
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7ff fae4 	bl	800b218 <ld_dword>
 800bc50:	4603      	mov	r3, r0
 800bc52:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bc56:	4323      	orrs	r3, r4
 800bc58:	607b      	str	r3, [r7, #4]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	8992      	ldrh	r2, [r2, #12]
 800bc68:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc6c:	fb00 f202 	mul.w	r2, r0, r2
 800bc70:	1a9b      	subs	r3, r3, r2
 800bc72:	440b      	add	r3, r1
 800bc74:	6879      	ldr	r1, [r7, #4]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7ff fb0c 	bl	800b294 <st_dword>
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	70da      	strb	r2, [r3, #3]
 800bc82:	e006      	b.n	800bc92 <put_fat+0x22a>
 800bc84:	bf00      	nop
 800bc86:	e004      	b.n	800bc92 <put_fat+0x22a>
 800bc88:	bf00      	nop
 800bc8a:	e002      	b.n	800bc92 <put_fat+0x22a>
 800bc8c:	bf00      	nop
 800bc8e:	e000      	b.n	800bc92 <put_fat+0x22a>
 800bc90:	bf00      	nop
 800bc92:	7ffb      	ldrb	r3, [r7, #31]
 800bc94:	4618      	mov	r0, r3
 800bc96:	3724      	adds	r7, #36	@ 0x24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd90      	pop	{r4, r7, pc}

0800bc9c <remove_chain>:
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b088      	sub	sp, #32
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
 800bca8:	2300      	movs	r3, #0
 800bcaa:	77fb      	strb	r3, [r7, #31]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	61bb      	str	r3, [r7, #24]
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d904      	bls.n	800bcc2 <remove_chain+0x26>
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	69db      	ldr	r3, [r3, #28]
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d301      	bcc.n	800bcc6 <remove_chain+0x2a>
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	e04b      	b.n	800bd5e <remove_chain+0xc2>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00c      	beq.n	800bce6 <remove_chain+0x4a>
 800bccc:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd0:	6879      	ldr	r1, [r7, #4]
 800bcd2:	69b8      	ldr	r0, [r7, #24]
 800bcd4:	f7ff fec8 	bl	800ba68 <put_fat>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	77fb      	strb	r3, [r7, #31]
 800bcdc:	7ffb      	ldrb	r3, [r7, #31]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d001      	beq.n	800bce6 <remove_chain+0x4a>
 800bce2:	7ffb      	ldrb	r3, [r7, #31]
 800bce4:	e03b      	b.n	800bd5e <remove_chain+0xc2>
 800bce6:	68b9      	ldr	r1, [r7, #8]
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	f7ff fdea 	bl	800b8c2 <get_fat>
 800bcee:	6178      	str	r0, [r7, #20]
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d031      	beq.n	800bd5a <remove_chain+0xbe>
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d101      	bne.n	800bd00 <remove_chain+0x64>
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	e02e      	b.n	800bd5e <remove_chain+0xc2>
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd06:	d101      	bne.n	800bd0c <remove_chain+0x70>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e028      	b.n	800bd5e <remove_chain+0xc2>
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	68b9      	ldr	r1, [r7, #8]
 800bd10:	69b8      	ldr	r0, [r7, #24]
 800bd12:	f7ff fea9 	bl	800ba68 <put_fat>
 800bd16:	4603      	mov	r3, r0
 800bd18:	77fb      	strb	r3, [r7, #31]
 800bd1a:	7ffb      	ldrb	r3, [r7, #31]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d001      	beq.n	800bd24 <remove_chain+0x88>
 800bd20:	7ffb      	ldrb	r3, [r7, #31]
 800bd22:	e01c      	b.n	800bd5e <remove_chain+0xc2>
 800bd24:	69bb      	ldr	r3, [r7, #24]
 800bd26:	699a      	ldr	r2, [r3, #24]
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	3b02      	subs	r3, #2
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d20b      	bcs.n	800bd4a <remove_chain+0xae>
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	699b      	ldr	r3, [r3, #24]
 800bd36:	1c5a      	adds	r2, r3, #1
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	619a      	str	r2, [r3, #24]
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	791b      	ldrb	r3, [r3, #4]
 800bd40:	f043 0301 	orr.w	r3, r3, #1
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	711a      	strb	r2, [r3, #4]
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	60bb      	str	r3, [r7, #8]
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	69db      	ldr	r3, [r3, #28]
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d3c6      	bcc.n	800bce6 <remove_chain+0x4a>
 800bd58:	e000      	b.n	800bd5c <remove_chain+0xc0>
 800bd5a:	bf00      	nop
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3720      	adds	r7, #32
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <create_chain>:
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b088      	sub	sp, #32
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	6039      	str	r1, [r7, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	613b      	str	r3, [r7, #16]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d10d      	bne.n	800bd98 <create_chain+0x32>
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	695b      	ldr	r3, [r3, #20]
 800bd80:	61bb      	str	r3, [r7, #24]
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d004      	beq.n	800bd92 <create_chain+0x2c>
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	69db      	ldr	r3, [r3, #28]
 800bd8c:	69ba      	ldr	r2, [r7, #24]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d31b      	bcc.n	800bdca <create_chain+0x64>
 800bd92:	2301      	movs	r3, #1
 800bd94:	61bb      	str	r3, [r7, #24]
 800bd96:	e018      	b.n	800bdca <create_chain+0x64>
 800bd98:	6839      	ldr	r1, [r7, #0]
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7ff fd91 	bl	800b8c2 <get_fat>
 800bda0:	60f8      	str	r0, [r7, #12]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d801      	bhi.n	800bdac <create_chain+0x46>
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e070      	b.n	800be8e <create_chain+0x128>
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb2:	d101      	bne.n	800bdb8 <create_chain+0x52>
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	e06a      	b.n	800be8e <create_chain+0x128>
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	69db      	ldr	r3, [r3, #28]
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d201      	bcs.n	800bdc6 <create_chain+0x60>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	e063      	b.n	800be8e <create_chain+0x128>
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	61bb      	str	r3, [r7, #24]
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	61fb      	str	r3, [r7, #28]
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	61fb      	str	r3, [r7, #28]
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	69db      	ldr	r3, [r3, #28]
 800bdd8:	69fa      	ldr	r2, [r7, #28]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d307      	bcc.n	800bdee <create_chain+0x88>
 800bdde:	2302      	movs	r3, #2
 800bde0:	61fb      	str	r3, [r7, #28]
 800bde2:	69fa      	ldr	r2, [r7, #28]
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d901      	bls.n	800bdee <create_chain+0x88>
 800bdea:	2300      	movs	r3, #0
 800bdec:	e04f      	b.n	800be8e <create_chain+0x128>
 800bdee:	69f9      	ldr	r1, [r7, #28]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f7ff fd66 	bl	800b8c2 <get_fat>
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00e      	beq.n	800be1c <create_chain+0xb6>
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d003      	beq.n	800be0c <create_chain+0xa6>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be0a:	d101      	bne.n	800be10 <create_chain+0xaa>
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	e03e      	b.n	800be8e <create_chain+0x128>
 800be10:	69fa      	ldr	r2, [r7, #28]
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	429a      	cmp	r2, r3
 800be16:	d1da      	bne.n	800bdce <create_chain+0x68>
 800be18:	2300      	movs	r3, #0
 800be1a:	e038      	b.n	800be8e <create_chain+0x128>
 800be1c:	bf00      	nop
 800be1e:	f04f 32ff 	mov.w	r2, #4294967295
 800be22:	69f9      	ldr	r1, [r7, #28]
 800be24:	6938      	ldr	r0, [r7, #16]
 800be26:	f7ff fe1f 	bl	800ba68 <put_fat>
 800be2a:	4603      	mov	r3, r0
 800be2c:	75fb      	strb	r3, [r7, #23]
 800be2e:	7dfb      	ldrb	r3, [r7, #23]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d109      	bne.n	800be48 <create_chain+0xe2>
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d006      	beq.n	800be48 <create_chain+0xe2>
 800be3a:	69fa      	ldr	r2, [r7, #28]
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6938      	ldr	r0, [r7, #16]
 800be40:	f7ff fe12 	bl	800ba68 <put_fat>
 800be44:	4603      	mov	r3, r0
 800be46:	75fb      	strb	r3, [r7, #23]
 800be48:	7dfb      	ldrb	r3, [r7, #23]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d116      	bne.n	800be7c <create_chain+0x116>
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	69fa      	ldr	r2, [r7, #28]
 800be52:	615a      	str	r2, [r3, #20]
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	699a      	ldr	r2, [r3, #24]
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	69db      	ldr	r3, [r3, #28]
 800be5c:	3b02      	subs	r3, #2
 800be5e:	429a      	cmp	r2, r3
 800be60:	d804      	bhi.n	800be6c <create_chain+0x106>
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	1e5a      	subs	r2, r3, #1
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	619a      	str	r2, [r3, #24]
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	791b      	ldrb	r3, [r3, #4]
 800be70:	f043 0301 	orr.w	r3, r3, #1
 800be74:	b2da      	uxtb	r2, r3
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	711a      	strb	r2, [r3, #4]
 800be7a:	e007      	b.n	800be8c <create_chain+0x126>
 800be7c:	7dfb      	ldrb	r3, [r7, #23]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d102      	bne.n	800be88 <create_chain+0x122>
 800be82:	f04f 33ff 	mov.w	r3, #4294967295
 800be86:	e000      	b.n	800be8a <create_chain+0x124>
 800be88:	2301      	movs	r3, #1
 800be8a:	61fb      	str	r3, [r7, #28]
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	4618      	mov	r0, r3
 800be90:	3720      	adds	r7, #32
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <clmt_clust>:
 800be96:	b480      	push	{r7}
 800be98:	b087      	sub	sp, #28
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
 800be9e:	6039      	str	r1, [r7, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	60fb      	str	r3, [r7, #12]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beaa:	3304      	adds	r3, #4
 800beac:	613b      	str	r3, [r7, #16]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	899b      	ldrh	r3, [r3, #12]
 800beb2:	461a      	mov	r2, r3
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	8952      	ldrh	r2, [r2, #10]
 800bebe:	fbb3 f3f2 	udiv	r3, r3, r2
 800bec2:	617b      	str	r3, [r7, #20]
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	1d1a      	adds	r2, r3, #4
 800bec8:	613a      	str	r2, [r7, #16]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	60bb      	str	r3, [r7, #8]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d101      	bne.n	800bed8 <clmt_clust+0x42>
 800bed4:	2300      	movs	r3, #0
 800bed6:	e010      	b.n	800befa <clmt_clust+0x64>
 800bed8:	697a      	ldr	r2, [r7, #20]
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d307      	bcc.n	800bef0 <clmt_clust+0x5a>
 800bee0:	697a      	ldr	r2, [r7, #20]
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	1ad3      	subs	r3, r2, r3
 800bee6:	617b      	str	r3, [r7, #20]
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	3304      	adds	r3, #4
 800beec:	613b      	str	r3, [r7, #16]
 800beee:	e7e9      	b.n	800bec4 <clmt_clust+0x2e>
 800bef0:	bf00      	nop
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	4413      	add	r3, r2
 800befa:	4618      	mov	r0, r3
 800befc:	371c      	adds	r7, #28
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <dir_sdi>:
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b086      	sub	sp, #24
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
 800bf0e:	6039      	str	r1, [r7, #0]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	613b      	str	r3, [r7, #16]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf1c:	d204      	bcs.n	800bf28 <dir_sdi+0x22>
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	f003 031f 	and.w	r3, r3, #31
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <dir_sdi+0x26>
 800bf28:	2302      	movs	r3, #2
 800bf2a:	e071      	b.n	800c010 <dir_sdi+0x10a>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	683a      	ldr	r2, [r7, #0]
 800bf30:	615a      	str	r2, [r3, #20]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	617b      	str	r3, [r7, #20]
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d106      	bne.n	800bf4c <dir_sdi+0x46>
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d902      	bls.n	800bf4c <dir_sdi+0x46>
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf4a:	617b      	str	r3, [r7, #20]
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10c      	bne.n	800bf6c <dir_sdi+0x66>
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	095b      	lsrs	r3, r3, #5
 800bf56:	693a      	ldr	r2, [r7, #16]
 800bf58:	8912      	ldrh	r2, [r2, #8]
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d301      	bcc.n	800bf62 <dir_sdi+0x5c>
 800bf5e:	2302      	movs	r3, #2
 800bf60:	e056      	b.n	800c010 <dir_sdi+0x10a>
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	61da      	str	r2, [r3, #28]
 800bf6a:	e02d      	b.n	800bfc8 <dir_sdi+0xc2>
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	895b      	ldrh	r3, [r3, #10]
 800bf70:	461a      	mov	r2, r3
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	899b      	ldrh	r3, [r3, #12]
 800bf76:	fb02 f303 	mul.w	r3, r2, r3
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	e019      	b.n	800bfb2 <dir_sdi+0xac>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6979      	ldr	r1, [r7, #20]
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7ff fc9d 	bl	800b8c2 <get_fat>
 800bf88:	6178      	str	r0, [r7, #20]
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf90:	d101      	bne.n	800bf96 <dir_sdi+0x90>
 800bf92:	2301      	movs	r3, #1
 800bf94:	e03c      	b.n	800c010 <dir_sdi+0x10a>
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d904      	bls.n	800bfa6 <dir_sdi+0xa0>
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	69db      	ldr	r3, [r3, #28]
 800bfa0:	697a      	ldr	r2, [r7, #20]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d301      	bcc.n	800bfaa <dir_sdi+0xa4>
 800bfa6:	2302      	movs	r3, #2
 800bfa8:	e032      	b.n	800c010 <dir_sdi+0x10a>
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	603b      	str	r3, [r7, #0]
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d2e1      	bcs.n	800bf7e <dir_sdi+0x78>
 800bfba:	6979      	ldr	r1, [r7, #20]
 800bfbc:	6938      	ldr	r0, [r7, #16]
 800bfbe:	f7ff fc61 	bl	800b884 <clust2sect>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	61da      	str	r2, [r3, #28]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	697a      	ldr	r2, [r7, #20]
 800bfcc:	619a      	str	r2, [r3, #24]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	69db      	ldr	r3, [r3, #28]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d101      	bne.n	800bfda <dir_sdi+0xd4>
 800bfd6:	2302      	movs	r3, #2
 800bfd8:	e01a      	b.n	800c010 <dir_sdi+0x10a>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	69da      	ldr	r2, [r3, #28]
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	899b      	ldrh	r3, [r3, #12]
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bfea:	441a      	add	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	61da      	str	r2, [r3, #28]
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	899b      	ldrh	r3, [r3, #12]
 800bffa:	461a      	mov	r2, r3
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	fbb3 f0f2 	udiv	r0, r3, r2
 800c002:	fb00 f202 	mul.w	r2, r0, r2
 800c006:	1a9b      	subs	r3, r3, r2
 800c008:	18ca      	adds	r2, r1, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	621a      	str	r2, [r3, #32]
 800c00e:	2300      	movs	r3, #0
 800c010:	4618      	mov	r0, r3
 800c012:	3718      	adds	r7, #24
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <dir_next>:
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	60fb      	str	r3, [r7, #12]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	695b      	ldr	r3, [r3, #20]
 800c02c:	3320      	adds	r3, #32
 800c02e:	60bb      	str	r3, [r7, #8]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	69db      	ldr	r3, [r3, #28]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d003      	beq.n	800c040 <dir_next+0x28>
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c03e:	d301      	bcc.n	800c044 <dir_next+0x2c>
 800c040:	2304      	movs	r3, #4
 800c042:	e0bb      	b.n	800c1bc <dir_next+0x1a4>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	899b      	ldrh	r3, [r3, #12]
 800c048:	461a      	mov	r2, r3
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c050:	fb01 f202 	mul.w	r2, r1, r2
 800c054:	1a9b      	subs	r3, r3, r2
 800c056:	2b00      	cmp	r3, #0
 800c058:	f040 809d 	bne.w	800c196 <dir_next+0x17e>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	69db      	ldr	r3, [r3, #28]
 800c060:	1c5a      	adds	r2, r3, #1
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	61da      	str	r2, [r3, #28]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	699b      	ldr	r3, [r3, #24]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d10b      	bne.n	800c086 <dir_next+0x6e>
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	095b      	lsrs	r3, r3, #5
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	8912      	ldrh	r2, [r2, #8]
 800c076:	4293      	cmp	r3, r2
 800c078:	f0c0 808d 	bcc.w	800c196 <dir_next+0x17e>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	61da      	str	r2, [r3, #28]
 800c082:	2304      	movs	r3, #4
 800c084:	e09a      	b.n	800c1bc <dir_next+0x1a4>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	899b      	ldrh	r3, [r3, #12]
 800c08a:	461a      	mov	r2, r3
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	8952      	ldrh	r2, [r2, #10]
 800c096:	3a01      	subs	r2, #1
 800c098:	4013      	ands	r3, r2
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d17b      	bne.n	800c196 <dir_next+0x17e>
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	4610      	mov	r0, r2
 800c0a8:	f7ff fc0b 	bl	800b8c2 <get_fat>
 800c0ac:	6178      	str	r0, [r7, #20]
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d801      	bhi.n	800c0b8 <dir_next+0xa0>
 800c0b4:	2302      	movs	r3, #2
 800c0b6:	e081      	b.n	800c1bc <dir_next+0x1a4>
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0be:	d101      	bne.n	800c0c4 <dir_next+0xac>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e07b      	b.n	800c1bc <dir_next+0x1a4>
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	69db      	ldr	r3, [r3, #28]
 800c0c8:	697a      	ldr	r2, [r7, #20]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d359      	bcc.n	800c182 <dir_next+0x16a>
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d104      	bne.n	800c0de <dir_next+0xc6>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	61da      	str	r2, [r3, #28]
 800c0da:	2304      	movs	r3, #4
 800c0dc:	e06e      	b.n	800c1bc <dir_next+0x1a4>
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	699b      	ldr	r3, [r3, #24]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	f7ff fe3d 	bl	800bd66 <create_chain>
 800c0ec:	6178      	str	r0, [r7, #20]
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d101      	bne.n	800c0f8 <dir_next+0xe0>
 800c0f4:	2307      	movs	r3, #7
 800c0f6:	e061      	b.n	800c1bc <dir_next+0x1a4>
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d101      	bne.n	800c102 <dir_next+0xea>
 800c0fe:	2302      	movs	r3, #2
 800c100:	e05c      	b.n	800c1bc <dir_next+0x1a4>
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c108:	d101      	bne.n	800c10e <dir_next+0xf6>
 800c10a:	2301      	movs	r3, #1
 800c10c:	e056      	b.n	800c1bc <dir_next+0x1a4>
 800c10e:	68f8      	ldr	r0, [r7, #12]
 800c110:	f7ff fad6 	bl	800b6c0 <sync_window>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d001      	beq.n	800c11e <dir_next+0x106>
 800c11a:	2301      	movs	r3, #1
 800c11c:	e04e      	b.n	800c1bc <dir_next+0x1a4>
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	899b      	ldrh	r3, [r3, #12]
 800c128:	461a      	mov	r2, r3
 800c12a:	2100      	movs	r1, #0
 800c12c:	f7ff f8ff 	bl	800b32e <mem_set>
 800c130:	2300      	movs	r3, #0
 800c132:	613b      	str	r3, [r7, #16]
 800c134:	6979      	ldr	r1, [r7, #20]
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f7ff fba4 	bl	800b884 <clust2sect>
 800c13c:	4602      	mov	r2, r0
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	635a      	str	r2, [r3, #52]	@ 0x34
 800c142:	e012      	b.n	800c16a <dir_next+0x152>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2201      	movs	r2, #1
 800c148:	70da      	strb	r2, [r3, #3]
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f7ff fab8 	bl	800b6c0 <sync_window>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d001      	beq.n	800c15a <dir_next+0x142>
 800c156:	2301      	movs	r3, #1
 800c158:	e030      	b.n	800c1bc <dir_next+0x1a4>
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	3301      	adds	r3, #1
 800c15e:	613b      	str	r3, [r7, #16]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c164:	1c5a      	adds	r2, r3, #1
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	635a      	str	r2, [r3, #52]	@ 0x34
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	895b      	ldrh	r3, [r3, #10]
 800c16e:	461a      	mov	r2, r3
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	4293      	cmp	r3, r2
 800c174:	d3e6      	bcc.n	800c144 <dir_next+0x12c>
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	1ad2      	subs	r2, r2, r3
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	635a      	str	r2, [r3, #52]	@ 0x34
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	697a      	ldr	r2, [r7, #20]
 800c186:	619a      	str	r2, [r3, #24]
 800c188:	6979      	ldr	r1, [r7, #20]
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	f7ff fb7a 	bl	800b884 <clust2sect>
 800c190:	4602      	mov	r2, r0
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	61da      	str	r2, [r3, #28]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	615a      	str	r2, [r3, #20]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	899b      	ldrh	r3, [r3, #12]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800c1ae:	fb00 f202 	mul.w	r2, r0, r2
 800c1b2:	1a9b      	subs	r3, r3, r2
 800c1b4:	18ca      	adds	r2, r1, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	621a      	str	r2, [r3, #32]
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3718      	adds	r7, #24
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <dir_alloc>:
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b086      	sub	sp, #24
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	60fb      	str	r3, [r7, #12]
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7ff fe95 	bl	800bf06 <dir_sdi>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	75fb      	strb	r3, [r7, #23]
 800c1e0:	7dfb      	ldrb	r3, [r7, #23]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d12b      	bne.n	800c23e <dir_alloc+0x7a>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	613b      	str	r3, [r7, #16]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	69db      	ldr	r3, [r3, #28]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f7ff faa9 	bl	800b748 <move_window>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	75fb      	strb	r3, [r7, #23]
 800c1fa:	7dfb      	ldrb	r3, [r7, #23]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d11d      	bne.n	800c23c <dir_alloc+0x78>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6a1b      	ldr	r3, [r3, #32]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	2be5      	cmp	r3, #229	@ 0xe5
 800c208:	d004      	beq.n	800c214 <dir_alloc+0x50>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a1b      	ldr	r3, [r3, #32]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d107      	bne.n	800c224 <dir_alloc+0x60>
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	3301      	adds	r3, #1
 800c218:	613b      	str	r3, [r7, #16]
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d102      	bne.n	800c228 <dir_alloc+0x64>
 800c222:	e00c      	b.n	800c23e <dir_alloc+0x7a>
 800c224:	2300      	movs	r3, #0
 800c226:	613b      	str	r3, [r7, #16]
 800c228:	2101      	movs	r1, #1
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7ff fef4 	bl	800c018 <dir_next>
 800c230:	4603      	mov	r3, r0
 800c232:	75fb      	strb	r3, [r7, #23]
 800c234:	7dfb      	ldrb	r3, [r7, #23]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d0d7      	beq.n	800c1ea <dir_alloc+0x26>
 800c23a:	e000      	b.n	800c23e <dir_alloc+0x7a>
 800c23c:	bf00      	nop
 800c23e:	7dfb      	ldrb	r3, [r7, #23]
 800c240:	2b04      	cmp	r3, #4
 800c242:	d101      	bne.n	800c248 <dir_alloc+0x84>
 800c244:	2307      	movs	r3, #7
 800c246:	75fb      	strb	r3, [r7, #23]
 800c248:	7dfb      	ldrb	r3, [r7, #23]
 800c24a:	4618      	mov	r0, r3
 800c24c:	3718      	adds	r7, #24
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <ld_clust>:
 800c252:	b580      	push	{r7, lr}
 800c254:	b084      	sub	sp, #16
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	6039      	str	r1, [r7, #0]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	331a      	adds	r3, #26
 800c260:	4618      	mov	r0, r3
 800c262:	f7fe ffc1 	bl	800b1e8 <ld_word>
 800c266:	4603      	mov	r3, r0
 800c268:	60fb      	str	r3, [r7, #12]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	2b03      	cmp	r3, #3
 800c270:	d109      	bne.n	800c286 <ld_clust+0x34>
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	3314      	adds	r3, #20
 800c276:	4618      	mov	r0, r3
 800c278:	f7fe ffb6 	bl	800b1e8 <ld_word>
 800c27c:	4603      	mov	r3, r0
 800c27e:	041b      	lsls	r3, r3, #16
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	4313      	orrs	r3, r2
 800c284:	60fb      	str	r3, [r7, #12]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	4618      	mov	r0, r3
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <st_clust>:
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	331a      	adds	r3, #26
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	b292      	uxth	r2, r2
 800c2a4:	4611      	mov	r1, r2
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fe ffd9 	bl	800b25e <st_word>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	2b03      	cmp	r3, #3
 800c2b2:	d109      	bne.n	800c2c8 <st_clust+0x38>
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	f103 0214 	add.w	r2, r3, #20
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	0c1b      	lsrs	r3, r3, #16
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	4610      	mov	r0, r2
 800c2c4:	f7fe ffcb 	bl	800b25e <st_word>
 800c2c8:	bf00      	nop
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <cmp_lfn>:
 800c2d0:	b590      	push	{r4, r7, lr}
 800c2d2:	b087      	sub	sp, #28
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	331a      	adds	r3, #26
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fe ff82 	bl	800b1e8 <ld_word>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d001      	beq.n	800c2ee <cmp_lfn+0x1e>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e059      	b.n	800c3a2 <cmp_lfn+0xd2>
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c2f6:	1e5a      	subs	r2, r3, #1
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	005b      	lsls	r3, r3, #1
 800c2fc:	4413      	add	r3, r2
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	4413      	add	r3, r2
 800c302:	617b      	str	r3, [r7, #20]
 800c304:	2301      	movs	r3, #1
 800c306:	81fb      	strh	r3, [r7, #14]
 800c308:	2300      	movs	r3, #0
 800c30a:	613b      	str	r3, [r7, #16]
 800c30c:	e033      	b.n	800c376 <cmp_lfn+0xa6>
 800c30e:	4a27      	ldr	r2, [pc, #156]	@ (800c3ac <cmp_lfn+0xdc>)
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	4413      	add	r3, r2
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	461a      	mov	r2, r3
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	4413      	add	r3, r2
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7fe ff63 	bl	800b1e8 <ld_word>
 800c322:	4603      	mov	r3, r0
 800c324:	81bb      	strh	r3, [r7, #12]
 800c326:	89fb      	ldrh	r3, [r7, #14]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d01a      	beq.n	800c362 <cmp_lfn+0x92>
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	2bfe      	cmp	r3, #254	@ 0xfe
 800c330:	d812      	bhi.n	800c358 <cmp_lfn+0x88>
 800c332:	89bb      	ldrh	r3, [r7, #12]
 800c334:	4618      	mov	r0, r3
 800c336:	f002 f831 	bl	800e39c <ff_wtoupper>
 800c33a:	4603      	mov	r3, r0
 800c33c:	461c      	mov	r4, r3
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	1c5a      	adds	r2, r3, #1
 800c342:	617a      	str	r2, [r7, #20]
 800c344:	005b      	lsls	r3, r3, #1
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	4413      	add	r3, r2
 800c34a:	881b      	ldrh	r3, [r3, #0]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f002 f825 	bl	800e39c <ff_wtoupper>
 800c352:	4603      	mov	r3, r0
 800c354:	429c      	cmp	r4, r3
 800c356:	d001      	beq.n	800c35c <cmp_lfn+0x8c>
 800c358:	2300      	movs	r3, #0
 800c35a:	e022      	b.n	800c3a2 <cmp_lfn+0xd2>
 800c35c:	89bb      	ldrh	r3, [r7, #12]
 800c35e:	81fb      	strh	r3, [r7, #14]
 800c360:	e006      	b.n	800c370 <cmp_lfn+0xa0>
 800c362:	89bb      	ldrh	r3, [r7, #12]
 800c364:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c368:	4293      	cmp	r3, r2
 800c36a:	d001      	beq.n	800c370 <cmp_lfn+0xa0>
 800c36c:	2300      	movs	r3, #0
 800c36e:	e018      	b.n	800c3a2 <cmp_lfn+0xd2>
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	3301      	adds	r3, #1
 800c374:	613b      	str	r3, [r7, #16]
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	2b0c      	cmp	r3, #12
 800c37a:	d9c8      	bls.n	800c30e <cmp_lfn+0x3e>
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00b      	beq.n	800c3a0 <cmp_lfn+0xd0>
 800c388:	89fb      	ldrh	r3, [r7, #14]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d008      	beq.n	800c3a0 <cmp_lfn+0xd0>
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	005b      	lsls	r3, r3, #1
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	4413      	add	r3, r2
 800c396:	881b      	ldrh	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d001      	beq.n	800c3a0 <cmp_lfn+0xd0>
 800c39c:	2300      	movs	r3, #0
 800c39e:	e000      	b.n	800c3a2 <cmp_lfn+0xd2>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	371c      	adds	r7, #28
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd90      	pop	{r4, r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	08013a98 	.word	0x08013a98

0800c3b0 <put_lfn>:
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b088      	sub	sp, #32
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	4611      	mov	r1, r2
 800c3bc:	461a      	mov	r2, r3
 800c3be:	460b      	mov	r3, r1
 800c3c0:	71fb      	strb	r3, [r7, #7]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	71bb      	strb	r3, [r7, #6]
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	330d      	adds	r3, #13
 800c3ca:	79ba      	ldrb	r2, [r7, #6]
 800c3cc:	701a      	strb	r2, [r3, #0]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	330b      	adds	r3, #11
 800c3d2:	220f      	movs	r2, #15
 800c3d4:	701a      	strb	r2, [r3, #0]
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	330c      	adds	r3, #12
 800c3da:	2200      	movs	r2, #0
 800c3dc:	701a      	strb	r2, [r3, #0]
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	331a      	adds	r3, #26
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fe ff3a 	bl	800b25e <st_word>
 800c3ea:	79fb      	ldrb	r3, [r7, #7]
 800c3ec:	1e5a      	subs	r2, r3, #1
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	005b      	lsls	r3, r3, #1
 800c3f2:	4413      	add	r3, r2
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	4413      	add	r3, r2
 800c3f8:	61fb      	str	r3, [r7, #28]
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	82fb      	strh	r3, [r7, #22]
 800c3fe:	2300      	movs	r3, #0
 800c400:	61bb      	str	r3, [r7, #24]
 800c402:	8afb      	ldrh	r3, [r7, #22]
 800c404:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c408:	4293      	cmp	r3, r2
 800c40a:	d007      	beq.n	800c41c <put_lfn+0x6c>
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	1c5a      	adds	r2, r3, #1
 800c410:	61fa      	str	r2, [r7, #28]
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	4413      	add	r3, r2
 800c418:	881b      	ldrh	r3, [r3, #0]
 800c41a:	82fb      	strh	r3, [r7, #22]
 800c41c:	4a17      	ldr	r2, [pc, #92]	@ (800c47c <put_lfn+0xcc>)
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	4413      	add	r3, r2
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	461a      	mov	r2, r3
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	4413      	add	r3, r2
 800c42a:	8afa      	ldrh	r2, [r7, #22]
 800c42c:	4611      	mov	r1, r2
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fe ff15 	bl	800b25e <st_word>
 800c434:	8afb      	ldrh	r3, [r7, #22]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d102      	bne.n	800c440 <put_lfn+0x90>
 800c43a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c43e:	82fb      	strh	r3, [r7, #22]
 800c440:	69bb      	ldr	r3, [r7, #24]
 800c442:	3301      	adds	r3, #1
 800c444:	61bb      	str	r3, [r7, #24]
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	2b0c      	cmp	r3, #12
 800c44a:	d9da      	bls.n	800c402 <put_lfn+0x52>
 800c44c:	8afb      	ldrh	r3, [r7, #22]
 800c44e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c452:	4293      	cmp	r3, r2
 800c454:	d006      	beq.n	800c464 <put_lfn+0xb4>
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	005b      	lsls	r3, r3, #1
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	4413      	add	r3, r2
 800c45e:	881b      	ldrh	r3, [r3, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d103      	bne.n	800c46c <put_lfn+0xbc>
 800c464:	79fb      	ldrb	r3, [r7, #7]
 800c466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c46a:	71fb      	strb	r3, [r7, #7]
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	79fa      	ldrb	r2, [r7, #7]
 800c470:	701a      	strb	r2, [r3, #0]
 800c472:	bf00      	nop
 800c474:	3720      	adds	r7, #32
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	08013a98 	.word	0x08013a98

0800c480 <gen_numname>:
 800c480:	b580      	push	{r7, lr}
 800c482:	b08c      	sub	sp, #48	@ 0x30
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
 800c48c:	603b      	str	r3, [r7, #0]
 800c48e:	220b      	movs	r2, #11
 800c490:	68b9      	ldr	r1, [r7, #8]
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f7fe ff2a 	bl	800b2ec <mem_cpy>
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	2b05      	cmp	r3, #5
 800c49c:	d929      	bls.n	800c4f2 <gen_numname+0x72>
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	61fb      	str	r3, [r7, #28]
 800c4a2:	e020      	b.n	800c4e6 <gen_numname+0x66>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	1c9a      	adds	r2, r3, #2
 800c4a8:	607a      	str	r2, [r7, #4]
 800c4aa:	881b      	ldrh	r3, [r3, #0]
 800c4ac:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4b2:	e015      	b.n	800c4e0 <gen_numname+0x60>
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	005a      	lsls	r2, r3, #1
 800c4b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	4413      	add	r3, r2
 800c4c0:	61fb      	str	r3, [r7, #28]
 800c4c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c4c4:	085b      	lsrs	r3, r3, #1
 800c4c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d003      	beq.n	800c4da <gen_numname+0x5a>
 800c4d2:	69fa      	ldr	r2, [r7, #28]
 800c4d4:	4b30      	ldr	r3, [pc, #192]	@ (800c598 <gen_numname+0x118>)
 800c4d6:	4053      	eors	r3, r2
 800c4d8:	61fb      	str	r3, [r7, #28]
 800c4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4dc:	3301      	adds	r3, #1
 800c4de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4e2:	2b0f      	cmp	r3, #15
 800c4e4:	d9e6      	bls.n	800c4b4 <gen_numname+0x34>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1da      	bne.n	800c4a4 <gen_numname+0x24>
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	603b      	str	r3, [r7, #0]
 800c4f2:	2307      	movs	r3, #7
 800c4f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	f003 030f 	and.w	r3, r3, #15
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	3330      	adds	r3, #48	@ 0x30
 800c502:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c506:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c50a:	2b39      	cmp	r3, #57	@ 0x39
 800c50c:	d904      	bls.n	800c518 <gen_numname+0x98>
 800c50e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c512:	3307      	adds	r3, #7
 800c514:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51a:	1e5a      	subs	r2, r3, #1
 800c51c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c51e:	3330      	adds	r3, #48	@ 0x30
 800c520:	443b      	add	r3, r7
 800c522:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c526:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	091b      	lsrs	r3, r3, #4
 800c52e:	603b      	str	r3, [r7, #0]
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1df      	bne.n	800c4f6 <gen_numname+0x76>
 800c536:	f107 0214 	add.w	r2, r7, #20
 800c53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c53c:	4413      	add	r3, r2
 800c53e:	227e      	movs	r2, #126	@ 0x7e
 800c540:	701a      	strb	r2, [r3, #0]
 800c542:	2300      	movs	r3, #0
 800c544:	627b      	str	r3, [r7, #36]	@ 0x24
 800c546:	e002      	b.n	800c54e <gen_numname+0xce>
 800c548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54a:	3301      	adds	r3, #1
 800c54c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c54e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c552:	429a      	cmp	r2, r3
 800c554:	d205      	bcs.n	800c562 <gen_numname+0xe2>
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55a:	4413      	add	r3, r2
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	2b20      	cmp	r3, #32
 800c560:	d1f2      	bne.n	800c548 <gen_numname+0xc8>
 800c562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c564:	2b07      	cmp	r3, #7
 800c566:	d807      	bhi.n	800c578 <gen_numname+0xf8>
 800c568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c56a:	1c5a      	adds	r2, r3, #1
 800c56c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c56e:	3330      	adds	r3, #48	@ 0x30
 800c570:	443b      	add	r3, r7
 800c572:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c576:	e000      	b.n	800c57a <gen_numname+0xfa>
 800c578:	2120      	movs	r1, #32
 800c57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57c:	1c5a      	adds	r2, r3, #1
 800c57e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	4413      	add	r3, r2
 800c584:	460a      	mov	r2, r1
 800c586:	701a      	strb	r2, [r3, #0]
 800c588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58a:	2b07      	cmp	r3, #7
 800c58c:	d9e9      	bls.n	800c562 <gen_numname+0xe2>
 800c58e:	bf00      	nop
 800c590:	bf00      	nop
 800c592:	3730      	adds	r7, #48	@ 0x30
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	00011021 	.word	0x00011021

0800c59c <sum_sfn>:
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	73fb      	strb	r3, [r7, #15]
 800c5a8:	230b      	movs	r3, #11
 800c5aa:	60bb      	str	r3, [r7, #8]
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
 800c5ae:	b2da      	uxtb	r2, r3
 800c5b0:	0852      	lsrs	r2, r2, #1
 800c5b2:	01db      	lsls	r3, r3, #7
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	1c59      	adds	r1, r3, #1
 800c5bc:	6079      	str	r1, [r7, #4]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	73fb      	strb	r3, [r7, #15]
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	60bb      	str	r3, [r7, #8]
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1ed      	bne.n	800c5ac <sum_sfn+0x10>
 800c5d0:	7bfb      	ldrb	r3, [r7, #15]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3714      	adds	r7, #20
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr

0800c5de <dir_find>:
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b086      	sub	sp, #24
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	613b      	str	r3, [r7, #16]
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7ff fc89 	bl	800bf06 <dir_sdi>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	75fb      	strb	r3, [r7, #23]
 800c5f8:	7dfb      	ldrb	r3, [r7, #23]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d001      	beq.n	800c602 <dir_find+0x24>
 800c5fe:	7dfb      	ldrb	r3, [r7, #23]
 800c600:	e0a9      	b.n	800c756 <dir_find+0x178>
 800c602:	23ff      	movs	r3, #255	@ 0xff
 800c604:	753b      	strb	r3, [r7, #20]
 800c606:	7d3b      	ldrb	r3, [r7, #20]
 800c608:	757b      	strb	r3, [r7, #21]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f04f 32ff 	mov.w	r2, #4294967295
 800c610:	631a      	str	r2, [r3, #48]	@ 0x30
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	69db      	ldr	r3, [r3, #28]
 800c616:	4619      	mov	r1, r3
 800c618:	6938      	ldr	r0, [r7, #16]
 800c61a:	f7ff f895 	bl	800b748 <move_window>
 800c61e:	4603      	mov	r3, r0
 800c620:	75fb      	strb	r3, [r7, #23]
 800c622:	7dfb      	ldrb	r3, [r7, #23]
 800c624:	2b00      	cmp	r3, #0
 800c626:	f040 8090 	bne.w	800c74a <dir_find+0x16c>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6a1b      	ldr	r3, [r3, #32]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	75bb      	strb	r3, [r7, #22]
 800c632:	7dbb      	ldrb	r3, [r7, #22]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d102      	bne.n	800c63e <dir_find+0x60>
 800c638:	2304      	movs	r3, #4
 800c63a:	75fb      	strb	r3, [r7, #23]
 800c63c:	e08a      	b.n	800c754 <dir_find+0x176>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a1b      	ldr	r3, [r3, #32]
 800c642:	330b      	adds	r3, #11
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c64a:	73fb      	strb	r3, [r7, #15]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	7bfa      	ldrb	r2, [r7, #15]
 800c650:	719a      	strb	r2, [r3, #6]
 800c652:	7dbb      	ldrb	r3, [r7, #22]
 800c654:	2be5      	cmp	r3, #229	@ 0xe5
 800c656:	d007      	beq.n	800c668 <dir_find+0x8a>
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	f003 0308 	and.w	r3, r3, #8
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d009      	beq.n	800c676 <dir_find+0x98>
 800c662:	7bfb      	ldrb	r3, [r7, #15]
 800c664:	2b0f      	cmp	r3, #15
 800c666:	d006      	beq.n	800c676 <dir_find+0x98>
 800c668:	23ff      	movs	r3, #255	@ 0xff
 800c66a:	757b      	strb	r3, [r7, #21]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f04f 32ff 	mov.w	r2, #4294967295
 800c672:	631a      	str	r2, [r3, #48]	@ 0x30
 800c674:	e05e      	b.n	800c734 <dir_find+0x156>
 800c676:	7bfb      	ldrb	r3, [r7, #15]
 800c678:	2b0f      	cmp	r3, #15
 800c67a:	d136      	bne.n	800c6ea <dir_find+0x10c>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c686:	2b00      	cmp	r3, #0
 800c688:	d154      	bne.n	800c734 <dir_find+0x156>
 800c68a:	7dbb      	ldrb	r3, [r7, #22]
 800c68c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00d      	beq.n	800c6b0 <dir_find+0xd2>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6a1b      	ldr	r3, [r3, #32]
 800c698:	7b5b      	ldrb	r3, [r3, #13]
 800c69a:	753b      	strb	r3, [r7, #20]
 800c69c:	7dbb      	ldrb	r3, [r7, #22]
 800c69e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6a2:	75bb      	strb	r3, [r7, #22]
 800c6a4:	7dbb      	ldrb	r3, [r7, #22]
 800c6a6:	757b      	strb	r3, [r7, #21]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	695a      	ldr	r2, [r3, #20]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	631a      	str	r2, [r3, #48]	@ 0x30
 800c6b0:	7dba      	ldrb	r2, [r7, #22]
 800c6b2:	7d7b      	ldrb	r3, [r7, #21]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d115      	bne.n	800c6e4 <dir_find+0x106>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6a1b      	ldr	r3, [r3, #32]
 800c6bc:	330d      	adds	r3, #13
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	7d3a      	ldrb	r2, [r7, #20]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d10e      	bne.n	800c6e4 <dir_find+0x106>
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	691a      	ldr	r2, [r3, #16]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a1b      	ldr	r3, [r3, #32]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	4610      	mov	r0, r2
 800c6d2:	f7ff fdfd 	bl	800c2d0 <cmp_lfn>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <dir_find+0x106>
 800c6dc:	7d7b      	ldrb	r3, [r7, #21]
 800c6de:	3b01      	subs	r3, #1
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	e000      	b.n	800c6e6 <dir_find+0x108>
 800c6e4:	23ff      	movs	r3, #255	@ 0xff
 800c6e6:	757b      	strb	r3, [r7, #21]
 800c6e8:	e024      	b.n	800c734 <dir_find+0x156>
 800c6ea:	7d7b      	ldrb	r3, [r7, #21]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d109      	bne.n	800c704 <dir_find+0x126>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6a1b      	ldr	r3, [r3, #32]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7ff ff51 	bl	800c59c <sum_sfn>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	7d3b      	ldrb	r3, [r7, #20]
 800c700:	4293      	cmp	r3, r2
 800c702:	d024      	beq.n	800c74e <dir_find+0x170>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c70a:	f003 0301 	and.w	r3, r3, #1
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d10a      	bne.n	800c728 <dir_find+0x14a>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6a18      	ldr	r0, [r3, #32]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	3324      	adds	r3, #36	@ 0x24
 800c71a:	220b      	movs	r2, #11
 800c71c:	4619      	mov	r1, r3
 800c71e:	f7fe fe21 	bl	800b364 <mem_cmp>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d014      	beq.n	800c752 <dir_find+0x174>
 800c728:	23ff      	movs	r3, #255	@ 0xff
 800c72a:	757b      	strb	r3, [r7, #21]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f04f 32ff 	mov.w	r2, #4294967295
 800c732:	631a      	str	r2, [r3, #48]	@ 0x30
 800c734:	2100      	movs	r1, #0
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7ff fc6e 	bl	800c018 <dir_next>
 800c73c:	4603      	mov	r3, r0
 800c73e:	75fb      	strb	r3, [r7, #23]
 800c740:	7dfb      	ldrb	r3, [r7, #23]
 800c742:	2b00      	cmp	r3, #0
 800c744:	f43f af65 	beq.w	800c612 <dir_find+0x34>
 800c748:	e004      	b.n	800c754 <dir_find+0x176>
 800c74a:	bf00      	nop
 800c74c:	e002      	b.n	800c754 <dir_find+0x176>
 800c74e:	bf00      	nop
 800c750:	e000      	b.n	800c754 <dir_find+0x176>
 800c752:	bf00      	nop
 800c754:	7dfb      	ldrb	r3, [r7, #23]
 800c756:	4618      	mov	r0, r3
 800c758:	3718      	adds	r7, #24
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
	...

0800c760 <dir_register>:
 800c760:	b580      	push	{r7, lr}
 800c762:	b08c      	sub	sp, #48	@ 0x30
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	61fb      	str	r3, [r7, #28]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c774:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d001      	beq.n	800c780 <dir_register+0x20>
 800c77c:	2306      	movs	r3, #6
 800c77e:	e0e0      	b.n	800c942 <dir_register+0x1e2>
 800c780:	2300      	movs	r3, #0
 800c782:	627b      	str	r3, [r7, #36]	@ 0x24
 800c784:	e002      	b.n	800c78c <dir_register+0x2c>
 800c786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c788:	3301      	adds	r3, #1
 800c78a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	691a      	ldr	r2, [r3, #16]
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	005b      	lsls	r3, r3, #1
 800c794:	4413      	add	r3, r2
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1f4      	bne.n	800c786 <dir_register+0x26>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800c7a2:	f107 030c 	add.w	r3, r7, #12
 800c7a6:	220c      	movs	r2, #12
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fe fd9f 	bl	800b2ec <mem_cpy>
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d032      	beq.n	800c81e <dir_register+0xbe>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2240      	movs	r2, #64	@ 0x40
 800c7bc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7c4:	e016      	b.n	800c7f4 <dir_register+0x94>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	691a      	ldr	r2, [r3, #16]
 800c7d0:	f107 010c 	add.w	r1, r7, #12
 800c7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7d6:	f7ff fe53 	bl	800c480 <gen_numname>
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7ff feff 	bl	800c5de <dir_find>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c7e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d106      	bne.n	800c7fc <dir_register+0x9c>
 800c7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f6:	2b63      	cmp	r3, #99	@ 0x63
 800c7f8:	d9e5      	bls.n	800c7c6 <dir_register+0x66>
 800c7fa:	e000      	b.n	800c7fe <dir_register+0x9e>
 800c7fc:	bf00      	nop
 800c7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c800:	2b64      	cmp	r3, #100	@ 0x64
 800c802:	d101      	bne.n	800c808 <dir_register+0xa8>
 800c804:	2307      	movs	r3, #7
 800c806:	e09c      	b.n	800c942 <dir_register+0x1e2>
 800c808:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c80c:	2b04      	cmp	r3, #4
 800c80e:	d002      	beq.n	800c816 <dir_register+0xb6>
 800c810:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c814:	e095      	b.n	800c942 <dir_register+0x1e2>
 800c816:	7dfa      	ldrb	r2, [r7, #23]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 800c81e:	7dfb      	ldrb	r3, [r7, #23]
 800c820:	f003 0302 	and.w	r3, r3, #2
 800c824:	2b00      	cmp	r3, #0
 800c826:	d007      	beq.n	800c838 <dir_register+0xd8>
 800c828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82a:	330c      	adds	r3, #12
 800c82c:	4a47      	ldr	r2, [pc, #284]	@ (800c94c <dir_register+0x1ec>)
 800c82e:	fba2 2303 	umull	r2, r3, r2, r3
 800c832:	089b      	lsrs	r3, r3, #2
 800c834:	3301      	adds	r3, #1
 800c836:	e000      	b.n	800c83a <dir_register+0xda>
 800c838:	2301      	movs	r3, #1
 800c83a:	623b      	str	r3, [r7, #32]
 800c83c:	6a39      	ldr	r1, [r7, #32]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7ff fcc0 	bl	800c1c4 <dir_alloc>
 800c844:	4603      	mov	r3, r0
 800c846:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c84a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d148      	bne.n	800c8e4 <dir_register+0x184>
 800c852:	6a3b      	ldr	r3, [r7, #32]
 800c854:	3b01      	subs	r3, #1
 800c856:	623b      	str	r3, [r7, #32]
 800c858:	6a3b      	ldr	r3, [r7, #32]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d042      	beq.n	800c8e4 <dir_register+0x184>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	695a      	ldr	r2, [r3, #20]
 800c862:	6a3b      	ldr	r3, [r7, #32]
 800c864:	015b      	lsls	r3, r3, #5
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	4619      	mov	r1, r3
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7ff fb4b 	bl	800bf06 <dir_sdi>
 800c870:	4603      	mov	r3, r0
 800c872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c876:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d132      	bne.n	800c8e4 <dir_register+0x184>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	3324      	adds	r3, #36	@ 0x24
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff fe8a 	bl	800c59c <sum_sfn>
 800c888:	4603      	mov	r3, r0
 800c88a:	76fb      	strb	r3, [r7, #27]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	69db      	ldr	r3, [r3, #28]
 800c890:	4619      	mov	r1, r3
 800c892:	69f8      	ldr	r0, [r7, #28]
 800c894:	f7fe ff58 	bl	800b748 <move_window>
 800c898:	4603      	mov	r3, r0
 800c89a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c89e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d11d      	bne.n	800c8e2 <dir_register+0x182>
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	6918      	ldr	r0, [r3, #16]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a19      	ldr	r1, [r3, #32]
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	b2da      	uxtb	r2, r3
 800c8b2:	7efb      	ldrb	r3, [r7, #27]
 800c8b4:	f7ff fd7c 	bl	800c3b0 <put_lfn>
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	70da      	strb	r2, [r3, #3]
 800c8be:	2100      	movs	r1, #0
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7ff fba9 	bl	800c018 <dir_next>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c8cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d107      	bne.n	800c8e4 <dir_register+0x184>
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	623b      	str	r3, [r7, #32]
 800c8da:	6a3b      	ldr	r3, [r7, #32]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d1d5      	bne.n	800c88c <dir_register+0x12c>
 800c8e0:	e000      	b.n	800c8e4 <dir_register+0x184>
 800c8e2:	bf00      	nop
 800c8e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d128      	bne.n	800c93e <dir_register+0x1de>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	69db      	ldr	r3, [r3, #28]
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	69f8      	ldr	r0, [r7, #28]
 800c8f4:	f7fe ff28 	bl	800b748 <move_window>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c8fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c902:	2b00      	cmp	r3, #0
 800c904:	d11b      	bne.n	800c93e <dir_register+0x1de>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6a1b      	ldr	r3, [r3, #32]
 800c90a:	2220      	movs	r2, #32
 800c90c:	2100      	movs	r1, #0
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fe fd0d 	bl	800b32e <mem_set>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6a18      	ldr	r0, [r3, #32]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	3324      	adds	r3, #36	@ 0x24
 800c91c:	220b      	movs	r2, #11
 800c91e:	4619      	mov	r1, r3
 800c920:	f7fe fce4 	bl	800b2ec <mem_cpy>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a1b      	ldr	r3, [r3, #32]
 800c92e:	330c      	adds	r3, #12
 800c930:	f002 0218 	and.w	r2, r2, #24
 800c934:	b2d2      	uxtb	r2, r2
 800c936:	701a      	strb	r2, [r3, #0]
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	2201      	movs	r2, #1
 800c93c:	70da      	strb	r2, [r3, #3]
 800c93e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c942:	4618      	mov	r0, r3
 800c944:	3730      	adds	r7, #48	@ 0x30
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	4ec4ec4f 	.word	0x4ec4ec4f

0800c950 <create_name>:
 800c950:	b580      	push	{r7, lr}
 800c952:	b08a      	sub	sp, #40	@ 0x28
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	613b      	str	r3, [r7, #16]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	60fb      	str	r3, [r7, #12]
 800c968:	2300      	movs	r3, #0
 800c96a:	617b      	str	r3, [r7, #20]
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	61bb      	str	r3, [r7, #24]
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	1c5a      	adds	r2, r3, #1
 800c974:	61ba      	str	r2, [r7, #24]
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	4413      	add	r3, r2
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c97e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c980:	2b1f      	cmp	r3, #31
 800c982:	d940      	bls.n	800ca06 <create_name+0xb6>
 800c984:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c986:	2b2f      	cmp	r3, #47	@ 0x2f
 800c988:	d006      	beq.n	800c998 <create_name+0x48>
 800c98a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c98c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c98e:	d110      	bne.n	800c9b2 <create_name+0x62>
 800c990:	e002      	b.n	800c998 <create_name+0x48>
 800c992:	69bb      	ldr	r3, [r7, #24]
 800c994:	3301      	adds	r3, #1
 800c996:	61bb      	str	r3, [r7, #24]
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	4413      	add	r3, r2
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	2b2f      	cmp	r3, #47	@ 0x2f
 800c9a2:	d0f6      	beq.n	800c992 <create_name+0x42>
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	2b5c      	cmp	r3, #92	@ 0x5c
 800c9ae:	d0f0      	beq.n	800c992 <create_name+0x42>
 800c9b0:	e02a      	b.n	800ca08 <create_name+0xb8>
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	2bfe      	cmp	r3, #254	@ 0xfe
 800c9b6:	d901      	bls.n	800c9bc <create_name+0x6c>
 800c9b8:	2306      	movs	r3, #6
 800c9ba:	e17d      	b.n	800ccb8 <create_name+0x368>
 800c9bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c9c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f001 fcac 	bl	800e324 <ff_convert>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c9d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d101      	bne.n	800c9da <create_name+0x8a>
 800c9d6:	2306      	movs	r3, #6
 800c9d8:	e16e      	b.n	800ccb8 <create_name+0x368>
 800c9da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9dc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9de:	d809      	bhi.n	800c9f4 <create_name+0xa4>
 800c9e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	488d      	ldr	r0, [pc, #564]	@ (800cc1c <create_name+0x2cc>)
 800c9e6:	f7fe fce4 	bl	800b3b2 <chk_chr>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d001      	beq.n	800c9f4 <create_name+0xa4>
 800c9f0:	2306      	movs	r3, #6
 800c9f2:	e161      	b.n	800ccb8 <create_name+0x368>
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	1c5a      	adds	r2, r3, #1
 800c9f8:	617a      	str	r2, [r7, #20]
 800c9fa:	005b      	lsls	r3, r3, #1
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	4413      	add	r3, r2
 800ca00:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ca02:	801a      	strh	r2, [r3, #0]
 800ca04:	e7b4      	b.n	800c970 <create_name+0x20>
 800ca06:	bf00      	nop
 800ca08:	693a      	ldr	r2, [r7, #16]
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	441a      	add	r2, r3
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	601a      	str	r2, [r3, #0]
 800ca12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca14:	2b1f      	cmp	r3, #31
 800ca16:	d801      	bhi.n	800ca1c <create_name+0xcc>
 800ca18:	2304      	movs	r3, #4
 800ca1a:	e000      	b.n	800ca1e <create_name+0xce>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca22:	e011      	b.n	800ca48 <create_name+0xf8>
 800ca24:	697a      	ldr	r2, [r7, #20]
 800ca26:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ca2a:	4413      	add	r3, r2
 800ca2c:	005b      	lsls	r3, r3, #1
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	4413      	add	r3, r2
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ca36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca38:	2b20      	cmp	r3, #32
 800ca3a:	d002      	beq.n	800ca42 <create_name+0xf2>
 800ca3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca40:	d106      	bne.n	800ca50 <create_name+0x100>
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	3b01      	subs	r3, #1
 800ca46:	617b      	str	r3, [r7, #20]
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1ea      	bne.n	800ca24 <create_name+0xd4>
 800ca4e:	e000      	b.n	800ca52 <create_name+0x102>
 800ca50:	bf00      	nop
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	005b      	lsls	r3, r3, #1
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	4413      	add	r3, r2
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	801a      	strh	r2, [r3, #0]
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d101      	bne.n	800ca68 <create_name+0x118>
 800ca64:	2306      	movs	r3, #6
 800ca66:	e127      	b.n	800ccb8 <create_name+0x368>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	3324      	adds	r3, #36	@ 0x24
 800ca6c:	220b      	movs	r2, #11
 800ca6e:	2120      	movs	r1, #32
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fe fc5c 	bl	800b32e <mem_set>
 800ca76:	2300      	movs	r3, #0
 800ca78:	61bb      	str	r3, [r7, #24]
 800ca7a:	e002      	b.n	800ca82 <create_name+0x132>
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	61bb      	str	r3, [r7, #24]
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	005b      	lsls	r3, r3, #1
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	4413      	add	r3, r2
 800ca8a:	881b      	ldrh	r3, [r3, #0]
 800ca8c:	2b20      	cmp	r3, #32
 800ca8e:	d0f5      	beq.n	800ca7c <create_name+0x12c>
 800ca90:	69bb      	ldr	r3, [r7, #24]
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	4413      	add	r3, r2
 800ca98:	881b      	ldrh	r3, [r3, #0]
 800ca9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca9c:	d0ee      	beq.n	800ca7c <create_name+0x12c>
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d009      	beq.n	800cab8 <create_name+0x168>
 800caa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caa8:	f043 0303 	orr.w	r3, r3, #3
 800caac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cab0:	e002      	b.n	800cab8 <create_name+0x168>
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	3b01      	subs	r3, #1
 800cab6:	617b      	str	r3, [r7, #20]
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d009      	beq.n	800cad2 <create_name+0x182>
 800cabe:	697a      	ldr	r2, [r7, #20]
 800cac0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800cac4:	4413      	add	r3, r2
 800cac6:	005b      	lsls	r3, r3, #1
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	4413      	add	r3, r2
 800cacc:	881b      	ldrh	r3, [r3, #0]
 800cace:	2b2e      	cmp	r3, #46	@ 0x2e
 800cad0:	d1ef      	bne.n	800cab2 <create_name+0x162>
 800cad2:	2300      	movs	r3, #0
 800cad4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cad8:	2300      	movs	r3, #0
 800cada:	623b      	str	r3, [r7, #32]
 800cadc:	2308      	movs	r3, #8
 800cade:	61fb      	str	r3, [r7, #28]
 800cae0:	69bb      	ldr	r3, [r7, #24]
 800cae2:	1c5a      	adds	r2, r3, #1
 800cae4:	61ba      	str	r2, [r7, #24]
 800cae6:	005b      	lsls	r3, r3, #1
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	4413      	add	r3, r2
 800caec:	881b      	ldrh	r3, [r3, #0]
 800caee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800caf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	f000 8090 	beq.w	800cc18 <create_name+0x2c8>
 800caf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cafa:	2b20      	cmp	r3, #32
 800cafc:	d006      	beq.n	800cb0c <create_name+0x1bc>
 800cafe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb00:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb02:	d10a      	bne.n	800cb1a <create_name+0x1ca>
 800cb04:	69ba      	ldr	r2, [r7, #24]
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d006      	beq.n	800cb1a <create_name+0x1ca>
 800cb0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb10:	f043 0303 	orr.w	r3, r3, #3
 800cb14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cb18:	e07d      	b.n	800cc16 <create_name+0x2c6>
 800cb1a:	6a3a      	ldr	r2, [r7, #32]
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d203      	bcs.n	800cb2a <create_name+0x1da>
 800cb22:	69ba      	ldr	r2, [r7, #24]
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d123      	bne.n	800cb72 <create_name+0x222>
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	2b0b      	cmp	r3, #11
 800cb2e:	d106      	bne.n	800cb3e <create_name+0x1ee>
 800cb30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb34:	f043 0303 	orr.w	r3, r3, #3
 800cb38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cb3c:	e075      	b.n	800cc2a <create_name+0x2da>
 800cb3e:	69ba      	ldr	r2, [r7, #24]
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d005      	beq.n	800cb52 <create_name+0x202>
 800cb46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb4a:	f043 0303 	orr.w	r3, r3, #3
 800cb4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cb52:	69ba      	ldr	r2, [r7, #24]
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d866      	bhi.n	800cc28 <create_name+0x2d8>
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	61bb      	str	r3, [r7, #24]
 800cb5e:	2308      	movs	r3, #8
 800cb60:	623b      	str	r3, [r7, #32]
 800cb62:	230b      	movs	r3, #11
 800cb64:	61fb      	str	r3, [r7, #28]
 800cb66:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cb70:	e051      	b.n	800cc16 <create_name+0x2c6>
 800cb72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb74:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb76:	d914      	bls.n	800cba2 <create_name+0x252>
 800cb78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f001 fbd1 	bl	800e324 <ff_convert>
 800cb82:	4603      	mov	r3, r0
 800cb84:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cb86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d004      	beq.n	800cb96 <create_name+0x246>
 800cb8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb8e:	3b80      	subs	r3, #128	@ 0x80
 800cb90:	4a23      	ldr	r2, [pc, #140]	@ (800cc20 <create_name+0x2d0>)
 800cb92:	5cd3      	ldrb	r3, [r2, r3]
 800cb94:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cb96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb9a:	f043 0302 	orr.w	r3, r3, #2
 800cb9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cba2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d007      	beq.n	800cbb8 <create_name+0x268>
 800cba8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cbaa:	4619      	mov	r1, r3
 800cbac:	481d      	ldr	r0, [pc, #116]	@ (800cc24 <create_name+0x2d4>)
 800cbae:	f7fe fc00 	bl	800b3b2 <chk_chr>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d008      	beq.n	800cbca <create_name+0x27a>
 800cbb8:	235f      	movs	r3, #95	@ 0x5f
 800cbba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cbbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbc0:	f043 0303 	orr.w	r3, r3, #3
 800cbc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cbc8:	e01b      	b.n	800cc02 <create_name+0x2b2>
 800cbca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cbcc:	2b40      	cmp	r3, #64	@ 0x40
 800cbce:	d909      	bls.n	800cbe4 <create_name+0x294>
 800cbd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cbd2:	2b5a      	cmp	r3, #90	@ 0x5a
 800cbd4:	d806      	bhi.n	800cbe4 <create_name+0x294>
 800cbd6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbda:	f043 0302 	orr.w	r3, r3, #2
 800cbde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cbe2:	e00e      	b.n	800cc02 <create_name+0x2b2>
 800cbe4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cbe6:	2b60      	cmp	r3, #96	@ 0x60
 800cbe8:	d90b      	bls.n	800cc02 <create_name+0x2b2>
 800cbea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cbec:	2b7a      	cmp	r3, #122	@ 0x7a
 800cbee:	d808      	bhi.n	800cc02 <create_name+0x2b2>
 800cbf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbf4:	f043 0301 	orr.w	r3, r3, #1
 800cbf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cbfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cbfe:	3b20      	subs	r3, #32
 800cc00:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cc02:	6a3b      	ldr	r3, [r7, #32]
 800cc04:	1c5a      	adds	r2, r3, #1
 800cc06:	623a      	str	r2, [r7, #32]
 800cc08:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cc0a:	b2d1      	uxtb	r1, r2
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	4413      	add	r3, r2
 800cc10:	460a      	mov	r2, r1
 800cc12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800cc16:	e763      	b.n	800cae0 <create_name+0x190>
 800cc18:	bf00      	nop
 800cc1a:	e006      	b.n	800cc2a <create_name+0x2da>
 800cc1c:	08012f90 	.word	0x08012f90
 800cc20:	08013a18 	.word	0x08013a18
 800cc24:	08012f9c 	.word	0x08012f9c
 800cc28:	bf00      	nop
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cc30:	2be5      	cmp	r3, #229	@ 0xe5
 800cc32:	d103      	bne.n	800cc3c <create_name+0x2ec>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2205      	movs	r2, #5
 800cc38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	2b08      	cmp	r3, #8
 800cc40:	d104      	bne.n	800cc4c <create_name+0x2fc>
 800cc42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cc4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc50:	f003 030c 	and.w	r3, r3, #12
 800cc54:	2b0c      	cmp	r3, #12
 800cc56:	d005      	beq.n	800cc64 <create_name+0x314>
 800cc58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc5c:	f003 0303 	and.w	r3, r3, #3
 800cc60:	2b03      	cmp	r3, #3
 800cc62:	d105      	bne.n	800cc70 <create_name+0x320>
 800cc64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc68:	f043 0302 	orr.w	r3, r3, #2
 800cc6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc74:	f003 0302 	and.w	r3, r3, #2
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d117      	bne.n	800ccac <create_name+0x35c>
 800cc7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc80:	f003 0303 	and.w	r3, r3, #3
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d105      	bne.n	800cc94 <create_name+0x344>
 800cc88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc8c:	f043 0310 	orr.w	r3, r3, #16
 800cc90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc98:	f003 030c 	and.w	r3, r3, #12
 800cc9c:	2b04      	cmp	r3, #4
 800cc9e:	d105      	bne.n	800ccac <create_name+0x35c>
 800cca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cca4:	f043 0308 	orr.w	r3, r3, #8
 800cca8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ccb2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3728      	adds	r7, #40	@ 0x28
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <follow_path>:
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	613b      	str	r3, [r7, #16]
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	60fb      	str	r3, [r7, #12]
 800ccd4:	e002      	b.n	800ccdc <follow_path+0x1c>
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	603b      	str	r3, [r7, #0]
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	2b2f      	cmp	r3, #47	@ 0x2f
 800cce2:	d0f8      	beq.n	800ccd6 <follow_path+0x16>
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	2b5c      	cmp	r3, #92	@ 0x5c
 800ccea:	d0f4      	beq.n	800ccd6 <follow_path+0x16>
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	609a      	str	r2, [r3, #8]
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	2b1f      	cmp	r3, #31
 800ccf8:	d80a      	bhi.n	800cd10 <follow_path+0x50>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2280      	movs	r2, #128	@ 0x80
 800ccfe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 800cd02:	2100      	movs	r1, #0
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7ff f8fe 	bl	800bf06 <dir_sdi>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	75fb      	strb	r3, [r7, #23]
 800cd0e:	e048      	b.n	800cda2 <follow_path+0xe2>
 800cd10:	463b      	mov	r3, r7
 800cd12:	4619      	mov	r1, r3
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7ff fe1b 	bl	800c950 <create_name>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	75fb      	strb	r3, [r7, #23]
 800cd1e:	7dfb      	ldrb	r3, [r7, #23]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d139      	bne.n	800cd98 <follow_path+0xd8>
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f7ff fc5a 	bl	800c5de <dir_find>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	75fb      	strb	r3, [r7, #23]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cd34:	72fb      	strb	r3, [r7, #11]
 800cd36:	7dfb      	ldrb	r3, [r7, #23]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00a      	beq.n	800cd52 <follow_path+0x92>
 800cd3c:	7dfb      	ldrb	r3, [r7, #23]
 800cd3e:	2b04      	cmp	r3, #4
 800cd40:	d12c      	bne.n	800cd9c <follow_path+0xdc>
 800cd42:	7afb      	ldrb	r3, [r7, #11]
 800cd44:	f003 0304 	and.w	r3, r3, #4
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d127      	bne.n	800cd9c <follow_path+0xdc>
 800cd4c:	2305      	movs	r3, #5
 800cd4e:	75fb      	strb	r3, [r7, #23]
 800cd50:	e024      	b.n	800cd9c <follow_path+0xdc>
 800cd52:	7afb      	ldrb	r3, [r7, #11]
 800cd54:	f003 0304 	and.w	r3, r3, #4
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d121      	bne.n	800cda0 <follow_path+0xe0>
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	799b      	ldrb	r3, [r3, #6]
 800cd60:	f003 0310 	and.w	r3, r3, #16
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d102      	bne.n	800cd6e <follow_path+0xae>
 800cd68:	2305      	movs	r3, #5
 800cd6a:	75fb      	strb	r3, [r7, #23]
 800cd6c:	e019      	b.n	800cda2 <follow_path+0xe2>
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	695b      	ldr	r3, [r3, #20]
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	8992      	ldrh	r2, [r2, #12]
 800cd7c:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd80:	fb00 f202 	mul.w	r2, r0, r2
 800cd84:	1a9b      	subs	r3, r3, r2
 800cd86:	440b      	add	r3, r1
 800cd88:	4619      	mov	r1, r3
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f7ff fa61 	bl	800c252 <ld_clust>
 800cd90:	4602      	mov	r2, r0
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	609a      	str	r2, [r3, #8]
 800cd96:	e7bb      	b.n	800cd10 <follow_path+0x50>
 800cd98:	bf00      	nop
 800cd9a:	e002      	b.n	800cda2 <follow_path+0xe2>
 800cd9c:	bf00      	nop
 800cd9e:	e000      	b.n	800cda2 <follow_path+0xe2>
 800cda0:	bf00      	nop
 800cda2:	7dfb      	ldrb	r3, [r7, #23]
 800cda4:	4618      	mov	r0, r3
 800cda6:	3718      	adds	r7, #24
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <get_ldnumber>:
 800cdac:	b480      	push	{r7}
 800cdae:	b087      	sub	sp, #28
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb8:	613b      	str	r3, [r7, #16]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d031      	beq.n	800ce26 <get_ldnumber+0x7a>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	617b      	str	r3, [r7, #20]
 800cdc8:	e002      	b.n	800cdd0 <get_ldnumber+0x24>
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	617b      	str	r3, [r7, #20]
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b1f      	cmp	r3, #31
 800cdd6:	d903      	bls.n	800cde0 <get_ldnumber+0x34>
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	2b3a      	cmp	r3, #58	@ 0x3a
 800cdde:	d1f4      	bne.n	800cdca <get_ldnumber+0x1e>
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	2b3a      	cmp	r3, #58	@ 0x3a
 800cde6:	d11c      	bne.n	800ce22 <get_ldnumber+0x76>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	60fb      	str	r3, [r7, #12]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	1c5a      	adds	r2, r3, #1
 800cdf2:	60fa      	str	r2, [r7, #12]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	3b30      	subs	r3, #48	@ 0x30
 800cdf8:	60bb      	str	r3, [r7, #8]
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	2b09      	cmp	r3, #9
 800cdfe:	d80e      	bhi.n	800ce1e <get_ldnumber+0x72>
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d10a      	bne.n	800ce1e <get_ldnumber+0x72>
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d107      	bne.n	800ce1e <get_ldnumber+0x72>
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	613b      	str	r3, [r7, #16]
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	3301      	adds	r3, #1
 800ce16:	617b      	str	r3, [r7, #20]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	601a      	str	r2, [r3, #0]
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	e002      	b.n	800ce28 <get_ldnumber+0x7c>
 800ce22:	2300      	movs	r3, #0
 800ce24:	613b      	str	r3, [r7, #16]
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	371c      	adds	r7, #28
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <check_fs>:
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	70da      	strb	r2, [r3, #3]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f04f 32ff 	mov.w	r2, #4294967295
 800ce4a:	635a      	str	r2, [r3, #52]	@ 0x34
 800ce4c:	6839      	ldr	r1, [r7, #0]
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f7fe fc7a 	bl	800b748 <move_window>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d001      	beq.n	800ce5e <check_fs+0x2a>
 800ce5a:	2304      	movs	r3, #4
 800ce5c:	e038      	b.n	800ced0 <check_fs+0x9c>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	3338      	adds	r3, #56	@ 0x38
 800ce62:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fe f9be 	bl	800b1e8 <ld_word>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	461a      	mov	r2, r3
 800ce70:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d001      	beq.n	800ce7c <check_fs+0x48>
 800ce78:	2303      	movs	r3, #3
 800ce7a:	e029      	b.n	800ced0 <check_fs+0x9c>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ce82:	2be9      	cmp	r3, #233	@ 0xe9
 800ce84:	d009      	beq.n	800ce9a <check_fs+0x66>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ce8c:	2beb      	cmp	r3, #235	@ 0xeb
 800ce8e:	d11e      	bne.n	800cece <check_fs+0x9a>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ce96:	2b90      	cmp	r3, #144	@ 0x90
 800ce98:	d119      	bne.n	800cece <check_fs+0x9a>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	3338      	adds	r3, #56	@ 0x38
 800ce9e:	3336      	adds	r3, #54	@ 0x36
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7fe f9b9 	bl	800b218 <ld_dword>
 800cea6:	4603      	mov	r3, r0
 800cea8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ceac:	4a0a      	ldr	r2, [pc, #40]	@ (800ced8 <check_fs+0xa4>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d101      	bne.n	800ceb6 <check_fs+0x82>
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	e00c      	b.n	800ced0 <check_fs+0x9c>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	3338      	adds	r3, #56	@ 0x38
 800ceba:	3352      	adds	r3, #82	@ 0x52
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7fe f9ab 	bl	800b218 <ld_dword>
 800cec2:	4603      	mov	r3, r0
 800cec4:	4a05      	ldr	r2, [pc, #20]	@ (800cedc <check_fs+0xa8>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d101      	bne.n	800cece <check_fs+0x9a>
 800ceca:	2300      	movs	r3, #0
 800cecc:	e000      	b.n	800ced0 <check_fs+0x9c>
 800cece:	2302      	movs	r3, #2
 800ced0:	4618      	mov	r0, r3
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	00544146 	.word	0x00544146
 800cedc:	33544146 	.word	0x33544146

0800cee0 <find_volume>:
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b096      	sub	sp, #88	@ 0x58
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	4613      	mov	r3, r2
 800ceec:	71fb      	strb	r3, [r7, #7]
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	2200      	movs	r2, #0
 800cef2:	601a      	str	r2, [r3, #0]
 800cef4:	68f8      	ldr	r0, [r7, #12]
 800cef6:	f7ff ff59 	bl	800cdac <get_ldnumber>
 800cefa:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800cefc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	da01      	bge.n	800cf06 <find_volume+0x26>
 800cf02:	230b      	movs	r3, #11
 800cf04:	e265      	b.n	800d3d2 <find_volume+0x4f2>
 800cf06:	4a9f      	ldr	r2, [pc, #636]	@ (800d184 <find_volume+0x2a4>)
 800cf08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d101      	bne.n	800cf1a <find_volume+0x3a>
 800cf16:	230c      	movs	r3, #12
 800cf18:	e25b      	b.n	800d3d2 <find_volume+0x4f2>
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	79fb      	ldrb	r3, [r7, #7]
 800cf22:	f023 0301 	bic.w	r3, r3, #1
 800cf26:	71fb      	strb	r3, [r7, #7]
 800cf28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d01a      	beq.n	800cf66 <find_volume+0x86>
 800cf30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf32:	785b      	ldrb	r3, [r3, #1]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fe f8b9 	bl	800b0ac <disk_status>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cf40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf44:	f003 0301 	and.w	r3, r3, #1
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d10c      	bne.n	800cf66 <find_volume+0x86>
 800cf4c:	79fb      	ldrb	r3, [r7, #7]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d007      	beq.n	800cf62 <find_volume+0x82>
 800cf52:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf56:	f003 0304 	and.w	r3, r3, #4
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d001      	beq.n	800cf62 <find_volume+0x82>
 800cf5e:	230a      	movs	r3, #10
 800cf60:	e237      	b.n	800d3d2 <find_volume+0x4f2>
 800cf62:	2300      	movs	r3, #0
 800cf64:	e235      	b.n	800d3d2 <find_volume+0x4f2>
 800cf66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf68:	2200      	movs	r2, #0
 800cf6a:	701a      	strb	r2, [r3, #0]
 800cf6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf6e:	b2da      	uxtb	r2, r3
 800cf70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf72:	705a      	strb	r2, [r3, #1]
 800cf74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf76:	785b      	ldrb	r3, [r3, #1]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7fe f8b1 	bl	800b0e0 <disk_initialize>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cf84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf88:	f003 0301 	and.w	r3, r3, #1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <find_volume+0xb4>
 800cf90:	2303      	movs	r3, #3
 800cf92:	e21e      	b.n	800d3d2 <find_volume+0x4f2>
 800cf94:	79fb      	ldrb	r3, [r7, #7]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d007      	beq.n	800cfaa <find_volume+0xca>
 800cf9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf9e:	f003 0304 	and.w	r3, r3, #4
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d001      	beq.n	800cfaa <find_volume+0xca>
 800cfa6:	230a      	movs	r3, #10
 800cfa8:	e213      	b.n	800d3d2 <find_volume+0x4f2>
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfac:	7858      	ldrb	r0, [r3, #1]
 800cfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb0:	330c      	adds	r3, #12
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	2102      	movs	r1, #2
 800cfb6:	f7fe f8f9 	bl	800b1ac <disk_ioctl>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d001      	beq.n	800cfc4 <find_volume+0xe4>
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e206      	b.n	800d3d2 <find_volume+0x4f2>
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc6:	899b      	ldrh	r3, [r3, #12]
 800cfc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfcc:	d80d      	bhi.n	800cfea <find_volume+0x10a>
 800cfce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfd0:	899b      	ldrh	r3, [r3, #12]
 800cfd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfd6:	d308      	bcc.n	800cfea <find_volume+0x10a>
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfda:	899b      	ldrh	r3, [r3, #12]
 800cfdc:	461a      	mov	r2, r3
 800cfde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfe0:	899b      	ldrh	r3, [r3, #12]
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	4013      	ands	r3, r2
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d001      	beq.n	800cfee <find_volume+0x10e>
 800cfea:	2301      	movs	r3, #1
 800cfec:	e1f1      	b.n	800d3d2 <find_volume+0x4f2>
 800cfee:	2300      	movs	r3, #0
 800cff0:	653b      	str	r3, [r7, #80]	@ 0x50
 800cff2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cff4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cff6:	f7ff ff1d 	bl	800ce34 <check_fs>
 800cffa:	4603      	mov	r3, r0
 800cffc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800d000:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d004:	2b02      	cmp	r3, #2
 800d006:	d149      	bne.n	800d09c <find_volume+0x1bc>
 800d008:	2300      	movs	r3, #0
 800d00a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d00c:	e01e      	b.n	800d04c <find_volume+0x16c>
 800d00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d010:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d016:	011b      	lsls	r3, r3, #4
 800d018:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d01c:	4413      	add	r3, r2
 800d01e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d022:	3304      	adds	r3, #4
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d006      	beq.n	800d038 <find_volume+0x158>
 800d02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02c:	3308      	adds	r3, #8
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe f8f2 	bl	800b218 <ld_dword>
 800d034:	4602      	mov	r2, r0
 800d036:	e000      	b.n	800d03a <find_volume+0x15a>
 800d038:	2200      	movs	r2, #0
 800d03a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	3358      	adds	r3, #88	@ 0x58
 800d040:	443b      	add	r3, r7
 800d042:	f843 2c44 	str.w	r2, [r3, #-68]
 800d046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d048:	3301      	adds	r3, #1
 800d04a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d04c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d04e:	2b03      	cmp	r3, #3
 800d050:	d9dd      	bls.n	800d00e <find_volume+0x12e>
 800d052:	2300      	movs	r3, #0
 800d054:	643b      	str	r3, [r7, #64]	@ 0x40
 800d056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d002      	beq.n	800d062 <find_volume+0x182>
 800d05c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d05e:	3b01      	subs	r3, #1
 800d060:	643b      	str	r3, [r7, #64]	@ 0x40
 800d062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	3358      	adds	r3, #88	@ 0x58
 800d068:	443b      	add	r3, r7
 800d06a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d06e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d072:	2b00      	cmp	r3, #0
 800d074:	d005      	beq.n	800d082 <find_volume+0x1a2>
 800d076:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d078:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d07a:	f7ff fedb 	bl	800ce34 <check_fs>
 800d07e:	4603      	mov	r3, r0
 800d080:	e000      	b.n	800d084 <find_volume+0x1a4>
 800d082:	2303      	movs	r3, #3
 800d084:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800d088:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d905      	bls.n	800d09c <find_volume+0x1bc>
 800d090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d092:	3301      	adds	r3, #1
 800d094:	643b      	str	r3, [r7, #64]	@ 0x40
 800d096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d098:	2b03      	cmp	r3, #3
 800d09a:	d9e2      	bls.n	800d062 <find_volume+0x182>
 800d09c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d0a0:	2b04      	cmp	r3, #4
 800d0a2:	d101      	bne.n	800d0a8 <find_volume+0x1c8>
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e194      	b.n	800d3d2 <find_volume+0x4f2>
 800d0a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d901      	bls.n	800d0b4 <find_volume+0x1d4>
 800d0b0:	230d      	movs	r3, #13
 800d0b2:	e18e      	b.n	800d3d2 <find_volume+0x4f2>
 800d0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b6:	3338      	adds	r3, #56	@ 0x38
 800d0b8:	330b      	adds	r3, #11
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe f894 	bl	800b1e8 <ld_word>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c6:	899b      	ldrh	r3, [r3, #12]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d001      	beq.n	800d0d0 <find_volume+0x1f0>
 800d0cc:	230d      	movs	r3, #13
 800d0ce:	e180      	b.n	800d3d2 <find_volume+0x4f2>
 800d0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d2:	3338      	adds	r3, #56	@ 0x38
 800d0d4:	3316      	adds	r3, #22
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7fe f886 	bl	800b1e8 <ld_word>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d0e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d106      	bne.n	800d0f4 <find_volume+0x214>
 800d0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e8:	3338      	adds	r3, #56	@ 0x38
 800d0ea:	3324      	adds	r3, #36	@ 0x24
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f7fe f893 	bl	800b218 <ld_dword>
 800d0f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d0f8:	621a      	str	r2, [r3, #32]
 800d0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0fc:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800d100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d102:	709a      	strb	r2, [r3, #2]
 800d104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d106:	789b      	ldrb	r3, [r3, #2]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d005      	beq.n	800d118 <find_volume+0x238>
 800d10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10e:	789b      	ldrb	r3, [r3, #2]
 800d110:	2b02      	cmp	r3, #2
 800d112:	d001      	beq.n	800d118 <find_volume+0x238>
 800d114:	230d      	movs	r3, #13
 800d116:	e15c      	b.n	800d3d2 <find_volume+0x4f2>
 800d118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11a:	789b      	ldrb	r3, [r3, #2]
 800d11c:	461a      	mov	r2, r3
 800d11e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d120:	fb02 f303 	mul.w	r3, r2, r3
 800d124:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d128:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d12c:	461a      	mov	r2, r3
 800d12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d130:	815a      	strh	r2, [r3, #10]
 800d132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d134:	895b      	ldrh	r3, [r3, #10]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d008      	beq.n	800d14c <find_volume+0x26c>
 800d13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13c:	895b      	ldrh	r3, [r3, #10]
 800d13e:	461a      	mov	r2, r3
 800d140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d142:	895b      	ldrh	r3, [r3, #10]
 800d144:	3b01      	subs	r3, #1
 800d146:	4013      	ands	r3, r2
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d001      	beq.n	800d150 <find_volume+0x270>
 800d14c:	230d      	movs	r3, #13
 800d14e:	e140      	b.n	800d3d2 <find_volume+0x4f2>
 800d150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d152:	3338      	adds	r3, #56	@ 0x38
 800d154:	3311      	adds	r3, #17
 800d156:	4618      	mov	r0, r3
 800d158:	f7fe f846 	bl	800b1e8 <ld_word>
 800d15c:	4603      	mov	r3, r0
 800d15e:	461a      	mov	r2, r3
 800d160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d162:	811a      	strh	r2, [r3, #8]
 800d164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d166:	891b      	ldrh	r3, [r3, #8]
 800d168:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d16a:	8992      	ldrh	r2, [r2, #12]
 800d16c:	0952      	lsrs	r2, r2, #5
 800d16e:	b292      	uxth	r2, r2
 800d170:	fbb3 f1f2 	udiv	r1, r3, r2
 800d174:	fb01 f202 	mul.w	r2, r1, r2
 800d178:	1a9b      	subs	r3, r3, r2
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d003      	beq.n	800d188 <find_volume+0x2a8>
 800d180:	230d      	movs	r3, #13
 800d182:	e126      	b.n	800d3d2 <find_volume+0x4f2>
 800d184:	20003058 	.word	0x20003058
 800d188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d18a:	3338      	adds	r3, #56	@ 0x38
 800d18c:	3313      	adds	r3, #19
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fe f82a 	bl	800b1e8 <ld_word>
 800d194:	4603      	mov	r3, r0
 800d196:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d106      	bne.n	800d1ac <find_volume+0x2cc>
 800d19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a0:	3338      	adds	r3, #56	@ 0x38
 800d1a2:	3320      	adds	r3, #32
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fe f837 	bl	800b218 <ld_dword>
 800d1aa:	64b8      	str	r0, [r7, #72]	@ 0x48
 800d1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ae:	3338      	adds	r3, #56	@ 0x38
 800d1b0:	330e      	adds	r3, #14
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fe f818 	bl	800b1e8 <ld_word>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d1bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d101      	bne.n	800d1c6 <find_volume+0x2e6>
 800d1c2:	230d      	movs	r3, #13
 800d1c4:	e105      	b.n	800d3d2 <find_volume+0x4f2>
 800d1c6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d1c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1ca:	4413      	add	r3, r2
 800d1cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d1ce:	8911      	ldrh	r1, [r2, #8]
 800d1d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d1d2:	8992      	ldrh	r2, [r2, #12]
 800d1d4:	0952      	lsrs	r2, r2, #5
 800d1d6:	b292      	uxth	r2, r2
 800d1d8:	fbb1 f2f2 	udiv	r2, r1, r2
 800d1dc:	b292      	uxth	r2, r2
 800d1de:	4413      	add	r3, r2
 800d1e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d201      	bcs.n	800d1ee <find_volume+0x30e>
 800d1ea:	230d      	movs	r3, #13
 800d1ec:	e0f1      	b.n	800d3d2 <find_volume+0x4f2>
 800d1ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d1f6:	8952      	ldrh	r2, [r2, #10]
 800d1f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d200:	2b00      	cmp	r3, #0
 800d202:	d101      	bne.n	800d208 <find_volume+0x328>
 800d204:	230d      	movs	r3, #13
 800d206:	e0e4      	b.n	800d3d2 <find_volume+0x4f2>
 800d208:	2303      	movs	r3, #3
 800d20a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800d20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d210:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d214:	4293      	cmp	r3, r2
 800d216:	d802      	bhi.n	800d21e <find_volume+0x33e>
 800d218:	2302      	movs	r3, #2
 800d21a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800d21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d220:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d224:	4293      	cmp	r3, r2
 800d226:	d802      	bhi.n	800d22e <find_volume+0x34e>
 800d228:	2301      	movs	r3, #1
 800d22a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800d22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d230:	1c9a      	adds	r2, r3, #2
 800d232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d234:	61da      	str	r2, [r3, #28]
 800d236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d238:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d23a:	625a      	str	r2, [r3, #36]	@ 0x24
 800d23c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d23e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d240:	441a      	add	r2, r3
 800d242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d244:	629a      	str	r2, [r3, #40]	@ 0x28
 800d246:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d24a:	441a      	add	r2, r3
 800d24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d24e:	631a      	str	r2, [r3, #48]	@ 0x30
 800d250:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d254:	2b03      	cmp	r3, #3
 800d256:	d11e      	bne.n	800d296 <find_volume+0x3b6>
 800d258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d25a:	3338      	adds	r3, #56	@ 0x38
 800d25c:	332a      	adds	r3, #42	@ 0x2a
 800d25e:	4618      	mov	r0, r3
 800d260:	f7fd ffc2 	bl	800b1e8 <ld_word>
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d001      	beq.n	800d26e <find_volume+0x38e>
 800d26a:	230d      	movs	r3, #13
 800d26c:	e0b1      	b.n	800d3d2 <find_volume+0x4f2>
 800d26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d270:	891b      	ldrh	r3, [r3, #8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d001      	beq.n	800d27a <find_volume+0x39a>
 800d276:	230d      	movs	r3, #13
 800d278:	e0ab      	b.n	800d3d2 <find_volume+0x4f2>
 800d27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d27c:	3338      	adds	r3, #56	@ 0x38
 800d27e:	332c      	adds	r3, #44	@ 0x2c
 800d280:	4618      	mov	r0, r3
 800d282:	f7fd ffc9 	bl	800b218 <ld_dword>
 800d286:	4602      	mov	r2, r0
 800d288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d28a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d28e:	69db      	ldr	r3, [r3, #28]
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	647b      	str	r3, [r7, #68]	@ 0x44
 800d294:	e01f      	b.n	800d2d6 <find_volume+0x3f6>
 800d296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d298:	891b      	ldrh	r3, [r3, #8]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d101      	bne.n	800d2a2 <find_volume+0x3c2>
 800d29e:	230d      	movs	r3, #13
 800d2a0:	e097      	b.n	800d3d2 <find_volume+0x4f2>
 800d2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d2a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2a8:	441a      	add	r2, r3
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d2ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d103      	bne.n	800d2be <find_volume+0x3de>
 800d2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b8:	69db      	ldr	r3, [r3, #28]
 800d2ba:	005b      	lsls	r3, r3, #1
 800d2bc:	e00a      	b.n	800d2d4 <find_volume+0x3f4>
 800d2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c0:	69da      	ldr	r2, [r3, #28]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	005b      	lsls	r3, r3, #1
 800d2c6:	4413      	add	r3, r2
 800d2c8:	085a      	lsrs	r2, r3, #1
 800d2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	f003 0301 	and.w	r3, r3, #1
 800d2d2:	4413      	add	r3, r2
 800d2d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d8:	6a1a      	ldr	r2, [r3, #32]
 800d2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2dc:	899b      	ldrh	r3, [r3, #12]
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2e2:	440b      	add	r3, r1
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d2e8:	8989      	ldrh	r1, [r1, #12]
 800d2ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d201      	bcs.n	800d2f6 <find_volume+0x416>
 800d2f2:	230d      	movs	r3, #13
 800d2f4:	e06d      	b.n	800d3d2 <find_volume+0x4f2>
 800d2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2fc:	619a      	str	r2, [r3, #24]
 800d2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d300:	699a      	ldr	r2, [r3, #24]
 800d302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d304:	615a      	str	r2, [r3, #20]
 800d306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d308:	2280      	movs	r2, #128	@ 0x80
 800d30a:	711a      	strb	r2, [r3, #4]
 800d30c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d310:	2b03      	cmp	r3, #3
 800d312:	d149      	bne.n	800d3a8 <find_volume+0x4c8>
 800d314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d316:	3338      	adds	r3, #56	@ 0x38
 800d318:	3330      	adds	r3, #48	@ 0x30
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fd ff64 	bl	800b1e8 <ld_word>
 800d320:	4603      	mov	r3, r0
 800d322:	2b01      	cmp	r3, #1
 800d324:	d140      	bne.n	800d3a8 <find_volume+0x4c8>
 800d326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d328:	3301      	adds	r3, #1
 800d32a:	4619      	mov	r1, r3
 800d32c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d32e:	f7fe fa0b 	bl	800b748 <move_window>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d137      	bne.n	800d3a8 <find_volume+0x4c8>
 800d338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d33a:	2200      	movs	r2, #0
 800d33c:	711a      	strb	r2, [r3, #4]
 800d33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d340:	3338      	adds	r3, #56	@ 0x38
 800d342:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d346:	4618      	mov	r0, r3
 800d348:	f7fd ff4e 	bl	800b1e8 <ld_word>
 800d34c:	4603      	mov	r3, r0
 800d34e:	461a      	mov	r2, r3
 800d350:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d354:	429a      	cmp	r2, r3
 800d356:	d127      	bne.n	800d3a8 <find_volume+0x4c8>
 800d358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d35a:	3338      	adds	r3, #56	@ 0x38
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fd ff5b 	bl	800b218 <ld_dword>
 800d362:	4603      	mov	r3, r0
 800d364:	4a1d      	ldr	r2, [pc, #116]	@ (800d3dc <find_volume+0x4fc>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d11e      	bne.n	800d3a8 <find_volume+0x4c8>
 800d36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d36c:	3338      	adds	r3, #56	@ 0x38
 800d36e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d372:	4618      	mov	r0, r3
 800d374:	f7fd ff50 	bl	800b218 <ld_dword>
 800d378:	4603      	mov	r3, r0
 800d37a:	4a19      	ldr	r2, [pc, #100]	@ (800d3e0 <find_volume+0x500>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d113      	bne.n	800d3a8 <find_volume+0x4c8>
 800d380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d382:	3338      	adds	r3, #56	@ 0x38
 800d384:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fd ff45 	bl	800b218 <ld_dword>
 800d38e:	4602      	mov	r2, r0
 800d390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d392:	619a      	str	r2, [r3, #24]
 800d394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d396:	3338      	adds	r3, #56	@ 0x38
 800d398:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7fd ff3b 	bl	800b218 <ld_dword>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a6:	615a      	str	r2, [r3, #20]
 800d3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3aa:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d3ae:	701a      	strb	r2, [r3, #0]
 800d3b0:	4b0c      	ldr	r3, [pc, #48]	@ (800d3e4 <find_volume+0x504>)
 800d3b2:	881b      	ldrh	r3, [r3, #0]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d3e4 <find_volume+0x504>)
 800d3ba:	801a      	strh	r2, [r3, #0]
 800d3bc:	4b09      	ldr	r3, [pc, #36]	@ (800d3e4 <find_volume+0x504>)
 800d3be:	881a      	ldrh	r2, [r3, #0]
 800d3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c2:	80da      	strh	r2, [r3, #6]
 800d3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c6:	4a08      	ldr	r2, [pc, #32]	@ (800d3e8 <find_volume+0x508>)
 800d3c8:	611a      	str	r2, [r3, #16]
 800d3ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d3cc:	f7fe f954 	bl	800b678 <clear_lock>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3758      	adds	r7, #88	@ 0x58
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	41615252 	.word	0x41615252
 800d3e0:	61417272 	.word	0x61417272
 800d3e4:	2000305c 	.word	0x2000305c
 800d3e8:	20003080 	.word	0x20003080

0800d3ec <validate>:
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
 800d3f6:	2309      	movs	r3, #9
 800d3f8:	73fb      	strb	r3, [r7, #15]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d01c      	beq.n	800d43a <validate+0x4e>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d018      	beq.n	800d43a <validate+0x4e>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d013      	beq.n	800d43a <validate+0x4e>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	889a      	ldrh	r2, [r3, #4]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	88db      	ldrh	r3, [r3, #6]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d10c      	bne.n	800d43a <validate+0x4e>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	785b      	ldrb	r3, [r3, #1]
 800d426:	4618      	mov	r0, r3
 800d428:	f7fd fe40 	bl	800b0ac <disk_status>
 800d42c:	4603      	mov	r3, r0
 800d42e:	f003 0301 	and.w	r3, r3, #1
 800d432:	2b00      	cmp	r3, #0
 800d434:	d101      	bne.n	800d43a <validate+0x4e>
 800d436:	2300      	movs	r3, #0
 800d438:	73fb      	strb	r3, [r7, #15]
 800d43a:	7bfb      	ldrb	r3, [r7, #15]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d102      	bne.n	800d446 <validate+0x5a>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	e000      	b.n	800d448 <validate+0x5c>
 800d446:	2300      	movs	r3, #0
 800d448:	683a      	ldr	r2, [r7, #0]
 800d44a:	6013      	str	r3, [r2, #0]
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
 800d44e:	4618      	mov	r0, r3
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
	...

0800d458 <f_mount>:
 800d458:	b580      	push	{r7, lr}
 800d45a:	b088      	sub	sp, #32
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	4613      	mov	r3, r2
 800d464:	71fb      	strb	r3, [r7, #7]
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	613b      	str	r3, [r7, #16]
 800d46a:	f107 0310 	add.w	r3, r7, #16
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff fc9c 	bl	800cdac <get_ldnumber>
 800d474:	61f8      	str	r0, [r7, #28]
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	da01      	bge.n	800d480 <f_mount+0x28>
 800d47c:	230b      	movs	r3, #11
 800d47e:	e02b      	b.n	800d4d8 <f_mount+0x80>
 800d480:	4a17      	ldr	r2, [pc, #92]	@ (800d4e0 <f_mount+0x88>)
 800d482:	69fb      	ldr	r3, [r7, #28]
 800d484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d488:	61bb      	str	r3, [r7, #24]
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d005      	beq.n	800d49c <f_mount+0x44>
 800d490:	69b8      	ldr	r0, [r7, #24]
 800d492:	f7fe f8f1 	bl	800b678 <clear_lock>
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	2200      	movs	r2, #0
 800d49a:	701a      	strb	r2, [r3, #0]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d002      	beq.n	800d4a8 <f_mount+0x50>
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	701a      	strb	r2, [r3, #0]
 800d4a8:	68fa      	ldr	r2, [r7, #12]
 800d4aa:	490d      	ldr	r1, [pc, #52]	@ (800d4e0 <f_mount+0x88>)
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d002      	beq.n	800d4be <f_mount+0x66>
 800d4b8:	79fb      	ldrb	r3, [r7, #7]
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d001      	beq.n	800d4c2 <f_mount+0x6a>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e00a      	b.n	800d4d8 <f_mount+0x80>
 800d4c2:	f107 010c 	add.w	r1, r7, #12
 800d4c6:	f107 0308 	add.w	r3, r7, #8
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fd07 	bl	800cee0 <find_volume>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	75fb      	strb	r3, [r7, #23]
 800d4d6:	7dfb      	ldrb	r3, [r7, #23]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3720      	adds	r7, #32
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	20003058 	.word	0x20003058

0800d4e4 <f_open>:
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b09a      	sub	sp, #104	@ 0x68
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	71fb      	strb	r3, [r7, #7]
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d101      	bne.n	800d4fc <f_open+0x18>
 800d4f8:	2309      	movs	r3, #9
 800d4fa:	e1b7      	b.n	800d86c <f_open+0x388>
 800d4fc:	79fb      	ldrb	r3, [r7, #7]
 800d4fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d502:	71fb      	strb	r3, [r7, #7]
 800d504:	79fa      	ldrb	r2, [r7, #7]
 800d506:	f107 0114 	add.w	r1, r7, #20
 800d50a:	f107 0308 	add.w	r3, r7, #8
 800d50e:	4618      	mov	r0, r3
 800d510:	f7ff fce6 	bl	800cee0 <find_volume>
 800d514:	4603      	mov	r3, r0
 800d516:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d51a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f040 819b 	bne.w	800d85a <f_open+0x376>
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	61bb      	str	r3, [r7, #24]
 800d528:	68ba      	ldr	r2, [r7, #8]
 800d52a:	f107 0318 	add.w	r3, r7, #24
 800d52e:	4611      	mov	r1, r2
 800d530:	4618      	mov	r0, r3
 800d532:	f7ff fbc5 	bl	800ccc0 <follow_path>
 800d536:	4603      	mov	r3, r0
 800d538:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d53c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d540:	2b00      	cmp	r3, #0
 800d542:	d118      	bne.n	800d576 <f_open+0x92>
 800d544:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d548:	b25b      	sxtb	r3, r3
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	da03      	bge.n	800d556 <f_open+0x72>
 800d54e:	2306      	movs	r3, #6
 800d550:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d554:	e00f      	b.n	800d576 <f_open+0x92>
 800d556:	79fb      	ldrb	r3, [r7, #7]
 800d558:	2b01      	cmp	r3, #1
 800d55a:	bf8c      	ite	hi
 800d55c:	2301      	movhi	r3, #1
 800d55e:	2300      	movls	r3, #0
 800d560:	b2db      	uxtb	r3, r3
 800d562:	461a      	mov	r2, r3
 800d564:	f107 0318 	add.w	r3, r7, #24
 800d568:	4611      	mov	r1, r2
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7fd ff3c 	bl	800b3e8 <chk_lock>
 800d570:	4603      	mov	r3, r0
 800d572:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d576:	79fb      	ldrb	r3, [r7, #7]
 800d578:	f003 031c 	and.w	r3, r3, #28
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d07f      	beq.n	800d680 <f_open+0x19c>
 800d580:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d584:	2b00      	cmp	r3, #0
 800d586:	d017      	beq.n	800d5b8 <f_open+0xd4>
 800d588:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d58c:	2b04      	cmp	r3, #4
 800d58e:	d10e      	bne.n	800d5ae <f_open+0xca>
 800d590:	f7fd ff86 	bl	800b4a0 <enq_lock>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d006      	beq.n	800d5a8 <f_open+0xc4>
 800d59a:	f107 0318 	add.w	r3, r7, #24
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7ff f8de 	bl	800c760 <dir_register>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	e000      	b.n	800d5aa <f_open+0xc6>
 800d5a8:	2312      	movs	r3, #18
 800d5aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d5ae:	79fb      	ldrb	r3, [r7, #7]
 800d5b0:	f043 0308 	orr.w	r3, r3, #8
 800d5b4:	71fb      	strb	r3, [r7, #7]
 800d5b6:	e010      	b.n	800d5da <f_open+0xf6>
 800d5b8:	7fbb      	ldrb	r3, [r7, #30]
 800d5ba:	f003 0311 	and.w	r3, r3, #17
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d003      	beq.n	800d5ca <f_open+0xe6>
 800d5c2:	2307      	movs	r3, #7
 800d5c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d5c8:	e007      	b.n	800d5da <f_open+0xf6>
 800d5ca:	79fb      	ldrb	r3, [r7, #7]
 800d5cc:	f003 0304 	and.w	r3, r3, #4
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d002      	beq.n	800d5da <f_open+0xf6>
 800d5d4:	2308      	movs	r3, #8
 800d5d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d5da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d168      	bne.n	800d6b4 <f_open+0x1d0>
 800d5e2:	79fb      	ldrb	r3, [r7, #7]
 800d5e4:	f003 0308 	and.w	r3, r3, #8
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d063      	beq.n	800d6b4 <f_open+0x1d0>
 800d5ec:	f7fd fd00 	bl	800aff0 <get_fattime>
 800d5f0:	65b8      	str	r0, [r7, #88]	@ 0x58
 800d5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f4:	330e      	adds	r3, #14
 800d5f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7fd fe4b 	bl	800b294 <st_dword>
 800d5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d600:	3316      	adds	r3, #22
 800d602:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d604:	4618      	mov	r0, r3
 800d606:	f7fd fe45 	bl	800b294 <st_dword>
 800d60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60c:	330b      	adds	r3, #11
 800d60e:	2220      	movs	r2, #32
 800d610:	701a      	strb	r2, [r3, #0]
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d616:	4611      	mov	r1, r2
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fe fe1a 	bl	800c252 <ld_clust>
 800d61e:	6578      	str	r0, [r7, #84]	@ 0x54
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d624:	2200      	movs	r2, #0
 800d626:	4618      	mov	r0, r3
 800d628:	f7fe fe32 	bl	800c290 <st_clust>
 800d62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d62e:	331c      	adds	r3, #28
 800d630:	2100      	movs	r1, #0
 800d632:	4618      	mov	r0, r3
 800d634:	f7fd fe2e 	bl	800b294 <st_dword>
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	2201      	movs	r2, #1
 800d63c:	70da      	strb	r2, [r3, #3]
 800d63e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d640:	2b00      	cmp	r3, #0
 800d642:	d037      	beq.n	800d6b4 <f_open+0x1d0>
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d648:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d64a:	f107 0318 	add.w	r3, r7, #24
 800d64e:	2200      	movs	r2, #0
 800d650:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d652:	4618      	mov	r0, r3
 800d654:	f7fe fb22 	bl	800bc9c <remove_chain>
 800d658:	4603      	mov	r3, r0
 800d65a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d65e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d662:	2b00      	cmp	r3, #0
 800d664:	d126      	bne.n	800d6b4 <f_open+0x1d0>
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fe f86c 	bl	800b748 <move_window>
 800d670:	4603      	mov	r3, r0
 800d672:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d67a:	3a01      	subs	r2, #1
 800d67c:	615a      	str	r2, [r3, #20]
 800d67e:	e019      	b.n	800d6b4 <f_open+0x1d0>
 800d680:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d684:	2b00      	cmp	r3, #0
 800d686:	d115      	bne.n	800d6b4 <f_open+0x1d0>
 800d688:	7fbb      	ldrb	r3, [r7, #30]
 800d68a:	f003 0310 	and.w	r3, r3, #16
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d003      	beq.n	800d69a <f_open+0x1b6>
 800d692:	2304      	movs	r3, #4
 800d694:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d698:	e00c      	b.n	800d6b4 <f_open+0x1d0>
 800d69a:	79fb      	ldrb	r3, [r7, #7]
 800d69c:	f003 0302 	and.w	r3, r3, #2
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d007      	beq.n	800d6b4 <f_open+0x1d0>
 800d6a4:	7fbb      	ldrb	r3, [r7, #30]
 800d6a6:	f003 0301 	and.w	r3, r3, #1
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d002      	beq.n	800d6b4 <f_open+0x1d0>
 800d6ae:	2307      	movs	r3, #7
 800d6b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d6b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d126      	bne.n	800d70a <f_open+0x226>
 800d6bc:	79fb      	ldrb	r3, [r7, #7]
 800d6be:	f003 0308 	and.w	r3, r3, #8
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d003      	beq.n	800d6ce <f_open+0x1ea>
 800d6c6:	79fb      	ldrb	r3, [r7, #7]
 800d6c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6cc:	71fb      	strb	r3, [r7, #7]
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	625a      	str	r2, [r3, #36]	@ 0x24
 800d6d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	629a      	str	r2, [r3, #40]	@ 0x28
 800d6dc:	79fb      	ldrb	r3, [r7, #7]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	bf8c      	ite	hi
 800d6e2:	2301      	movhi	r3, #1
 800d6e4:	2300      	movls	r3, #0
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	f107 0318 	add.w	r3, r7, #24
 800d6ee:	4611      	mov	r1, r2
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fd fef7 	bl	800b4e4 <inc_lock>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	611a      	str	r2, [r3, #16]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d102      	bne.n	800d70a <f_open+0x226>
 800d704:	2302      	movs	r3, #2
 800d706:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d70a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f040 80a3 	bne.w	800d85a <f_open+0x376>
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d718:	4611      	mov	r1, r2
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7fe fd99 	bl	800c252 <ld_clust>
 800d720:	4602      	mov	r2, r0
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	609a      	str	r2, [r3, #8]
 800d726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d728:	331c      	adds	r3, #28
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fd fd74 	bl	800b218 <ld_dword>
 800d730:	4602      	mov	r2, r0
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	60da      	str	r2, [r3, #12]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2200      	movs	r2, #0
 800d73a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d73c:	697a      	ldr	r2, [r7, #20]
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	601a      	str	r2, [r3, #0]
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	88da      	ldrh	r2, [r3, #6]
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	809a      	strh	r2, [r3, #4]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	79fa      	ldrb	r2, [r7, #7]
 800d74e:	751a      	strb	r2, [r3, #20]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2200      	movs	r2, #0
 800d754:	755a      	strb	r2, [r3, #21]
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2200      	movs	r2, #0
 800d75a:	621a      	str	r2, [r3, #32]
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2200      	movs	r2, #0
 800d760:	619a      	str	r2, [r3, #24]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	3330      	adds	r3, #48	@ 0x30
 800d766:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d76a:	2100      	movs	r1, #0
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fd fdde 	bl	800b32e <mem_set>
 800d772:	79fb      	ldrb	r3, [r7, #7]
 800d774:	f003 0320 	and.w	r3, r3, #32
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d06e      	beq.n	800d85a <f_open+0x376>
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d06a      	beq.n	800d85a <f_open+0x376>
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	68da      	ldr	r2, [r3, #12]
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	619a      	str	r2, [r3, #24]
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	895b      	ldrh	r3, [r3, #10]
 800d790:	461a      	mov	r2, r3
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	899b      	ldrh	r3, [r3, #12]
 800d796:	fb02 f303 	mul.w	r3, r2, r3
 800d79a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	689b      	ldr	r3, [r3, #8]
 800d7a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d7a8:	e016      	b.n	800d7d8 <f_open+0x2f4>
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fe f887 	bl	800b8c2 <get_fat>
 800d7b4:	6638      	str	r0, [r7, #96]	@ 0x60
 800d7b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d802      	bhi.n	800d7c2 <f_open+0x2de>
 800d7bc:	2302      	movs	r3, #2
 800d7be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d7c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7c8:	d102      	bne.n	800d7d0 <f_open+0x2ec>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d7d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d7d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7d4:	1ad3      	subs	r3, r2, r3
 800d7d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d7d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d103      	bne.n	800d7e8 <f_open+0x304>
 800d7e0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d7e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d8e0      	bhi.n	800d7aa <f_open+0x2c6>
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d7ec:	61da      	str	r2, [r3, #28]
 800d7ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d131      	bne.n	800d85a <f_open+0x376>
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	899b      	ldrh	r3, [r3, #12]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d7fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800d802:	fb01 f202 	mul.w	r2, r1, r2
 800d806:	1a9b      	subs	r3, r3, r2
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d026      	beq.n	800d85a <f_open+0x376>
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d810:	4618      	mov	r0, r3
 800d812:	f7fe f837 	bl	800b884 <clust2sect>
 800d816:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d103      	bne.n	800d826 <f_open+0x342>
 800d81e:	2302      	movs	r3, #2
 800d820:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d824:	e019      	b.n	800d85a <f_open+0x376>
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	899b      	ldrh	r3, [r3, #12]
 800d82a:	461a      	mov	r2, r3
 800d82c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d82e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d834:	441a      	add	r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	621a      	str	r2, [r3, #32]
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	7858      	ldrb	r0, [r3, #1]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6a1a      	ldr	r2, [r3, #32]
 800d848:	2301      	movs	r3, #1
 800d84a:	f7fd fc6f 	bl	800b12c <disk_read>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <f_open+0x376>
 800d854:	2301      	movs	r3, #1
 800d856:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d85a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d002      	beq.n	800d868 <f_open+0x384>
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2200      	movs	r2, #0
 800d866:	601a      	str	r2, [r3, #0]
 800d868:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d86c:	4618      	mov	r0, r3
 800d86e:	3768      	adds	r7, #104	@ 0x68
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <f_write>:
 800d874:	b580      	push	{r7, lr}
 800d876:	b08c      	sub	sp, #48	@ 0x30
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
 800d880:	603b      	str	r3, [r7, #0]
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	61fb      	str	r3, [r7, #28]
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	2200      	movs	r2, #0
 800d88a:	601a      	str	r2, [r3, #0]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f107 0210 	add.w	r2, r7, #16
 800d892:	4611      	mov	r1, r2
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff fda9 	bl	800d3ec <validate>
 800d89a:	4603      	mov	r3, r0
 800d89c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d8a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d107      	bne.n	800d8b8 <f_write+0x44>
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	7d5b      	ldrb	r3, [r3, #21]
 800d8ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d8b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <f_write+0x4a>
 800d8b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8bc:	e16a      	b.n	800db94 <f_write+0x320>
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	7d1b      	ldrb	r3, [r3, #20]
 800d8c2:	f003 0302 	and.w	r3, r3, #2
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d101      	bne.n	800d8ce <f_write+0x5a>
 800d8ca:	2307      	movs	r3, #7
 800d8cc:	e162      	b.n	800db94 <f_write+0x320>
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	699a      	ldr	r2, [r3, #24]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	441a      	add	r2, r3
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	699b      	ldr	r3, [r3, #24]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	f080 814c 	bcs.w	800db78 <f_write+0x304>
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	699b      	ldr	r3, [r3, #24]
 800d8e4:	43db      	mvns	r3, r3
 800d8e6:	607b      	str	r3, [r7, #4]
 800d8e8:	e146      	b.n	800db78 <f_write+0x304>
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	699b      	ldr	r3, [r3, #24]
 800d8ee:	693a      	ldr	r2, [r7, #16]
 800d8f0:	8992      	ldrh	r2, [r2, #12]
 800d8f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8f6:	fb01 f202 	mul.w	r2, r1, r2
 800d8fa:	1a9b      	subs	r3, r3, r2
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f040 80f1 	bne.w	800dae4 <f_write+0x270>
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	699b      	ldr	r3, [r3, #24]
 800d906:	693a      	ldr	r2, [r7, #16]
 800d908:	8992      	ldrh	r2, [r2, #12]
 800d90a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d90e:	693a      	ldr	r2, [r7, #16]
 800d910:	8952      	ldrh	r2, [r2, #10]
 800d912:	3a01      	subs	r2, #1
 800d914:	4013      	ands	r3, r2
 800d916:	61bb      	str	r3, [r7, #24]
 800d918:	69bb      	ldr	r3, [r7, #24]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d143      	bne.n	800d9a6 <f_write+0x132>
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	699b      	ldr	r3, [r3, #24]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d10c      	bne.n	800d940 <f_write+0xcc>
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d11a      	bne.n	800d968 <f_write+0xf4>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2100      	movs	r1, #0
 800d936:	4618      	mov	r0, r3
 800d938:	f7fe fa15 	bl	800bd66 <create_chain>
 800d93c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d93e:	e013      	b.n	800d968 <f_write+0xf4>
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d007      	beq.n	800d958 <f_write+0xe4>
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	699b      	ldr	r3, [r3, #24]
 800d94c:	4619      	mov	r1, r3
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f7fe faa1 	bl	800be96 <clmt_clust>
 800d954:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d956:	e007      	b.n	800d968 <f_write+0xf4>
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	69db      	ldr	r3, [r3, #28]
 800d95e:	4619      	mov	r1, r3
 800d960:	4610      	mov	r0, r2
 800d962:	f7fe fa00 	bl	800bd66 <create_chain>
 800d966:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	f000 8109 	beq.w	800db82 <f_write+0x30e>
 800d970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d972:	2b01      	cmp	r3, #1
 800d974:	d104      	bne.n	800d980 <f_write+0x10c>
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2202      	movs	r2, #2
 800d97a:	755a      	strb	r2, [r3, #21]
 800d97c:	2302      	movs	r3, #2
 800d97e:	e109      	b.n	800db94 <f_write+0x320>
 800d980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d986:	d104      	bne.n	800d992 <f_write+0x11e>
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2201      	movs	r2, #1
 800d98c:	755a      	strb	r2, [r3, #21]
 800d98e:	2301      	movs	r3, #1
 800d990:	e100      	b.n	800db94 <f_write+0x320>
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d996:	61da      	str	r2, [r3, #28]
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d102      	bne.n	800d9a6 <f_write+0x132>
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9a4:	609a      	str	r2, [r3, #8]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	7d1b      	ldrb	r3, [r3, #20]
 800d9aa:	b25b      	sxtb	r3, r3
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	da18      	bge.n	800d9e2 <f_write+0x16e>
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	7858      	ldrb	r0, [r3, #1]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6a1a      	ldr	r2, [r3, #32]
 800d9be:	2301      	movs	r3, #1
 800d9c0:	f7fd fbd4 	bl	800b16c <disk_write>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d004      	beq.n	800d9d4 <f_write+0x160>
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	755a      	strb	r2, [r3, #21]
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e0df      	b.n	800db94 <f_write+0x320>
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	7d1b      	ldrb	r3, [r3, #20]
 800d9d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	751a      	strb	r2, [r3, #20]
 800d9e2:	693a      	ldr	r2, [r7, #16]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	69db      	ldr	r3, [r3, #28]
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f7fd ff4a 	bl	800b884 <clust2sect>
 800d9f0:	6178      	str	r0, [r7, #20]
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d104      	bne.n	800da02 <f_write+0x18e>
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2202      	movs	r2, #2
 800d9fc:	755a      	strb	r2, [r3, #21]
 800d9fe:	2302      	movs	r3, #2
 800da00:	e0c8      	b.n	800db94 <f_write+0x320>
 800da02:	697a      	ldr	r2, [r7, #20]
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	4413      	add	r3, r2
 800da08:	617b      	str	r3, [r7, #20]
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	899b      	ldrh	r3, [r3, #12]
 800da0e:	461a      	mov	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	fbb3 f3f2 	udiv	r3, r3, r2
 800da16:	623b      	str	r3, [r7, #32]
 800da18:	6a3b      	ldr	r3, [r7, #32]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d043      	beq.n	800daa6 <f_write+0x232>
 800da1e:	69ba      	ldr	r2, [r7, #24]
 800da20:	6a3b      	ldr	r3, [r7, #32]
 800da22:	4413      	add	r3, r2
 800da24:	693a      	ldr	r2, [r7, #16]
 800da26:	8952      	ldrh	r2, [r2, #10]
 800da28:	4293      	cmp	r3, r2
 800da2a:	d905      	bls.n	800da38 <f_write+0x1c4>
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	895b      	ldrh	r3, [r3, #10]
 800da30:	461a      	mov	r2, r3
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	1ad3      	subs	r3, r2, r3
 800da36:	623b      	str	r3, [r7, #32]
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	7858      	ldrb	r0, [r3, #1]
 800da3c:	6a3b      	ldr	r3, [r7, #32]
 800da3e:	697a      	ldr	r2, [r7, #20]
 800da40:	69f9      	ldr	r1, [r7, #28]
 800da42:	f7fd fb93 	bl	800b16c <disk_write>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d004      	beq.n	800da56 <f_write+0x1e2>
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2201      	movs	r2, #1
 800da50:	755a      	strb	r2, [r3, #21]
 800da52:	2301      	movs	r3, #1
 800da54:	e09e      	b.n	800db94 <f_write+0x320>
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6a1a      	ldr	r2, [r3, #32]
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	1ad3      	subs	r3, r2, r3
 800da5e:	6a3a      	ldr	r2, [r7, #32]
 800da60:	429a      	cmp	r2, r3
 800da62:	d918      	bls.n	800da96 <f_write+0x222>
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6a1a      	ldr	r2, [r3, #32]
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	693a      	ldr	r2, [r7, #16]
 800da74:	8992      	ldrh	r2, [r2, #12]
 800da76:	fb02 f303 	mul.w	r3, r2, r3
 800da7a:	69fa      	ldr	r2, [r7, #28]
 800da7c:	18d1      	adds	r1, r2, r3
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	899b      	ldrh	r3, [r3, #12]
 800da82:	461a      	mov	r2, r3
 800da84:	f7fd fc32 	bl	800b2ec <mem_cpy>
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	7d1b      	ldrb	r3, [r3, #20]
 800da8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da90:	b2da      	uxtb	r2, r3
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	751a      	strb	r2, [r3, #20]
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	899b      	ldrh	r3, [r3, #12]
 800da9a:	461a      	mov	r2, r3
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	fb02 f303 	mul.w	r3, r2, r3
 800daa2:	627b      	str	r3, [r7, #36]	@ 0x24
 800daa4:	e04b      	b.n	800db3e <f_write+0x2ca>
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6a1b      	ldr	r3, [r3, #32]
 800daaa:	697a      	ldr	r2, [r7, #20]
 800daac:	429a      	cmp	r2, r3
 800daae:	d016      	beq.n	800dade <f_write+0x26a>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	699a      	ldr	r2, [r3, #24]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d210      	bcs.n	800dade <f_write+0x26a>
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	7858      	ldrb	r0, [r3, #1]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dac6:	2301      	movs	r3, #1
 800dac8:	697a      	ldr	r2, [r7, #20]
 800daca:	f7fd fb2f 	bl	800b12c <disk_read>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d004      	beq.n	800dade <f_write+0x26a>
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2201      	movs	r2, #1
 800dad8:	755a      	strb	r2, [r3, #21]
 800dada:	2301      	movs	r3, #1
 800dadc:	e05a      	b.n	800db94 <f_write+0x320>
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	697a      	ldr	r2, [r7, #20]
 800dae2:	621a      	str	r2, [r3, #32]
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	899b      	ldrh	r3, [r3, #12]
 800dae8:	4618      	mov	r0, r3
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	699b      	ldr	r3, [r3, #24]
 800daee:	693a      	ldr	r2, [r7, #16]
 800daf0:	8992      	ldrh	r2, [r2, #12]
 800daf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800daf6:	fb01 f202 	mul.w	r2, r1, r2
 800dafa:	1a9b      	subs	r3, r3, r2
 800dafc:	1ac3      	subs	r3, r0, r3
 800dafe:	627b      	str	r3, [r7, #36]	@ 0x24
 800db00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	429a      	cmp	r2, r3
 800db06:	d901      	bls.n	800db0c <f_write+0x298>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	699b      	ldr	r3, [r3, #24]
 800db16:	693a      	ldr	r2, [r7, #16]
 800db18:	8992      	ldrh	r2, [r2, #12]
 800db1a:	fbb3 f0f2 	udiv	r0, r3, r2
 800db1e:	fb00 f202 	mul.w	r2, r0, r2
 800db22:	1a9b      	subs	r3, r3, r2
 800db24:	440b      	add	r3, r1
 800db26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db28:	69f9      	ldr	r1, [r7, #28]
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7fd fbde 	bl	800b2ec <mem_cpy>
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	7d1b      	ldrb	r3, [r3, #20]
 800db34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	751a      	strb	r2, [r3, #20]
 800db3e:	69fa      	ldr	r2, [r7, #28]
 800db40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db42:	4413      	add	r3, r2
 800db44:	61fb      	str	r3, [r7, #28]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	699a      	ldr	r2, [r3, #24]
 800db4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db4c:	441a      	add	r2, r3
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	619a      	str	r2, [r3, #24]
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	68da      	ldr	r2, [r3, #12]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	699b      	ldr	r3, [r3, #24]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	bf38      	it	cc
 800db5e:	461a      	movcc	r2, r3
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	60da      	str	r2, [r3, #12]
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db6a:	441a      	add	r2, r3
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	601a      	str	r2, [r3, #0]
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db74:	1ad3      	subs	r3, r2, r3
 800db76:	607b      	str	r3, [r7, #4]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	f47f aeb5 	bne.w	800d8ea <f_write+0x76>
 800db80:	e000      	b.n	800db84 <f_write+0x310>
 800db82:	bf00      	nop
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	7d1b      	ldrb	r3, [r3, #20]
 800db88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db8c:	b2da      	uxtb	r2, r3
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	751a      	strb	r2, [r3, #20]
 800db92:	2300      	movs	r3, #0
 800db94:	4618      	mov	r0, r3
 800db96:	3730      	adds	r7, #48	@ 0x30
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <f_sync>:
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b086      	sub	sp, #24
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f107 0208 	add.w	r2, r7, #8
 800dbaa:	4611      	mov	r1, r2
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7ff fc1d 	bl	800d3ec <validate>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	75fb      	strb	r3, [r7, #23]
 800dbb6:	7dfb      	ldrb	r3, [r7, #23]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d168      	bne.n	800dc8e <f_sync+0xf2>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	7d1b      	ldrb	r3, [r3, #20]
 800dbc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d062      	beq.n	800dc8e <f_sync+0xf2>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	7d1b      	ldrb	r3, [r3, #20]
 800dbcc:	b25b      	sxtb	r3, r3
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	da15      	bge.n	800dbfe <f_sync+0x62>
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	7858      	ldrb	r0, [r3, #1]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6a1a      	ldr	r2, [r3, #32]
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	f7fd fac3 	bl	800b16c <disk_write>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d001      	beq.n	800dbf0 <f_sync+0x54>
 800dbec:	2301      	movs	r3, #1
 800dbee:	e04f      	b.n	800dc90 <f_sync+0xf4>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	7d1b      	ldrb	r3, [r3, #20]
 800dbf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	751a      	strb	r2, [r3, #20]
 800dbfe:	f7fd f9f7 	bl	800aff0 <get_fattime>
 800dc02:	6138      	str	r0, [r7, #16]
 800dc04:	68ba      	ldr	r2, [r7, #8]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	4610      	mov	r0, r2
 800dc0e:	f7fd fd9b 	bl	800b748 <move_window>
 800dc12:	4603      	mov	r3, r0
 800dc14:	75fb      	strb	r3, [r7, #23]
 800dc16:	7dfb      	ldrb	r3, [r7, #23]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d138      	bne.n	800dc8e <f_sync+0xf2>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc20:	60fb      	str	r3, [r7, #12]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	330b      	adds	r3, #11
 800dc26:	781a      	ldrb	r2, [r3, #0]
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	330b      	adds	r3, #11
 800dc2c:	f042 0220 	orr.w	r2, r2, #32
 800dc30:	b2d2      	uxtb	r2, r2
 800dc32:	701a      	strb	r2, [r3, #0]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6818      	ldr	r0, [r3, #0]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	68f9      	ldr	r1, [r7, #12]
 800dc40:	f7fe fb26 	bl	800c290 <st_clust>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f103 021c 	add.w	r2, r3, #28
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	4619      	mov	r1, r3
 800dc50:	4610      	mov	r0, r2
 800dc52:	f7fd fb1f 	bl	800b294 <st_dword>
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	3316      	adds	r3, #22
 800dc5a:	6939      	ldr	r1, [r7, #16]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7fd fb19 	bl	800b294 <st_dword>
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	3312      	adds	r3, #18
 800dc66:	2100      	movs	r1, #0
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fd faf8 	bl	800b25e <st_word>
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	2201      	movs	r2, #1
 800dc72:	70da      	strb	r2, [r3, #3]
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fd fd94 	bl	800b7a4 <sync_fs>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	75fb      	strb	r3, [r7, #23]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	7d1b      	ldrb	r3, [r3, #20]
 800dc84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc88:	b2da      	uxtb	r2, r3
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	751a      	strb	r2, [r3, #20]
 800dc8e:	7dfb      	ldrb	r3, [r7, #23]
 800dc90:	4618      	mov	r0, r3
 800dc92:	3718      	adds	r7, #24
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <f_close>:
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f7ff ff7b 	bl	800db9c <f_sync>
 800dca6:	4603      	mov	r3, r0
 800dca8:	73fb      	strb	r3, [r7, #15]
 800dcaa:	7bfb      	ldrb	r3, [r7, #15]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d118      	bne.n	800dce2 <f_close+0x4a>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f107 0208 	add.w	r2, r7, #8
 800dcb6:	4611      	mov	r1, r2
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7ff fb97 	bl	800d3ec <validate>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	73fb      	strb	r3, [r7, #15]
 800dcc2:	7bfb      	ldrb	r3, [r7, #15]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d10c      	bne.n	800dce2 <f_close+0x4a>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	691b      	ldr	r3, [r3, #16]
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7fd fc97 	bl	800b600 <dec_lock>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	73fb      	strb	r3, [r7, #15]
 800dcd6:	7bfb      	ldrb	r3, [r7, #15]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d102      	bne.n	800dce2 <f_close+0x4a>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	601a      	str	r2, [r3, #0]
 800dce2:	7bfb      	ldrb	r3, [r7, #15]
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <f_lseek>:
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b090      	sub	sp, #64	@ 0x40
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f107 0208 	add.w	r2, r7, #8
 800dcfc:	4611      	mov	r1, r2
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7ff fb74 	bl	800d3ec <validate>
 800dd04:	4603      	mov	r3, r0
 800dd06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800dd0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d103      	bne.n	800dd1a <f_lseek+0x2e>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	7d5b      	ldrb	r3, [r3, #21]
 800dd16:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800dd1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d002      	beq.n	800dd28 <f_lseek+0x3c>
 800dd22:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dd26:	e201      	b.n	800e12c <f_lseek+0x440>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f000 80d9 	beq.w	800dee4 <f_lseek+0x1f8>
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd38:	d15a      	bne.n	800ddf0 <f_lseek+0x104>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd42:	1d1a      	adds	r2, r3, #4
 800dd44:	627a      	str	r2, [r7, #36]	@ 0x24
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	617b      	str	r3, [r7, #20]
 800dd4a:	2302      	movs	r3, #2
 800dd4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d03a      	beq.n	800ddd0 <f_lseek+0xe4>
 800dd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd5c:	613b      	str	r3, [r7, #16]
 800dd5e:	2300      	movs	r3, #0
 800dd60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd64:	3302      	adds	r3, #2
 800dd66:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd6a:	60fb      	str	r3, [r7, #12]
 800dd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd6e:	3301      	adds	r3, #1
 800dd70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7fd fda3 	bl	800b8c2 <get_fat>
 800dd7c:	6338      	str	r0, [r7, #48]	@ 0x30
 800dd7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d804      	bhi.n	800dd8e <f_lseek+0xa2>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2202      	movs	r2, #2
 800dd88:	755a      	strb	r2, [r3, #21]
 800dd8a:	2302      	movs	r3, #2
 800dd8c:	e1ce      	b.n	800e12c <f_lseek+0x440>
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd94:	d104      	bne.n	800dda0 <f_lseek+0xb4>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2201      	movs	r2, #1
 800dd9a:	755a      	strb	r2, [r3, #21]
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	e1c5      	b.n	800e12c <f_lseek+0x440>
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	3301      	adds	r3, #1
 800dda4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d0de      	beq.n	800dd68 <f_lseek+0x7c>
 800ddaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d809      	bhi.n	800ddc6 <f_lseek+0xda>
 800ddb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb4:	1d1a      	adds	r2, r3, #4
 800ddb6:	627a      	str	r2, [r7, #36]	@ 0x24
 800ddb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddba:	601a      	str	r2, [r3, #0]
 800ddbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddbe:	1d1a      	adds	r2, r3, #4
 800ddc0:	627a      	str	r2, [r7, #36]	@ 0x24
 800ddc2:	693a      	ldr	r2, [r7, #16]
 800ddc4:	601a      	str	r2, [r3, #0]
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	69db      	ldr	r3, [r3, #28]
 800ddca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d3c4      	bcc.n	800dd5a <f_lseek+0x6e>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ddd6:	601a      	str	r2, [r3, #0]
 800ddd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d803      	bhi.n	800dde8 <f_lseek+0xfc>
 800dde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde2:	2200      	movs	r2, #0
 800dde4:	601a      	str	r2, [r3, #0]
 800dde6:	e19f      	b.n	800e128 <f_lseek+0x43c>
 800dde8:	2311      	movs	r3, #17
 800ddea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ddee:	e19b      	b.n	800e128 <f_lseek+0x43c>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	683a      	ldr	r2, [r7, #0]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d902      	bls.n	800de00 <f_lseek+0x114>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	68db      	ldr	r3, [r3, #12]
 800ddfe:	603b      	str	r3, [r7, #0]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	619a      	str	r2, [r3, #24]
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f000 818d 	beq.w	800e128 <f_lseek+0x43c>
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	3b01      	subs	r3, #1
 800de12:	4619      	mov	r1, r3
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7fe f83e 	bl	800be96 <clmt_clust>
 800de1a:	4602      	mov	r2, r0
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	61da      	str	r2, [r3, #28]
 800de20:	68ba      	ldr	r2, [r7, #8]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	69db      	ldr	r3, [r3, #28]
 800de26:	4619      	mov	r1, r3
 800de28:	4610      	mov	r0, r2
 800de2a:	f7fd fd2b 	bl	800b884 <clust2sect>
 800de2e:	61b8      	str	r0, [r7, #24]
 800de30:	69bb      	ldr	r3, [r7, #24]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d104      	bne.n	800de40 <f_lseek+0x154>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2202      	movs	r2, #2
 800de3a:	755a      	strb	r2, [r3, #21]
 800de3c:	2302      	movs	r3, #2
 800de3e:	e175      	b.n	800e12c <f_lseek+0x440>
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	3b01      	subs	r3, #1
 800de44:	68ba      	ldr	r2, [r7, #8]
 800de46:	8992      	ldrh	r2, [r2, #12]
 800de48:	fbb3 f3f2 	udiv	r3, r3, r2
 800de4c:	68ba      	ldr	r2, [r7, #8]
 800de4e:	8952      	ldrh	r2, [r2, #10]
 800de50:	3a01      	subs	r2, #1
 800de52:	4013      	ands	r3, r2
 800de54:	69ba      	ldr	r2, [r7, #24]
 800de56:	4413      	add	r3, r2
 800de58:	61bb      	str	r3, [r7, #24]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	699b      	ldr	r3, [r3, #24]
 800de5e:	68ba      	ldr	r2, [r7, #8]
 800de60:	8992      	ldrh	r2, [r2, #12]
 800de62:	fbb3 f1f2 	udiv	r1, r3, r2
 800de66:	fb01 f202 	mul.w	r2, r1, r2
 800de6a:	1a9b      	subs	r3, r3, r2
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f000 815b 	beq.w	800e128 <f_lseek+0x43c>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a1b      	ldr	r3, [r3, #32]
 800de76:	69ba      	ldr	r2, [r7, #24]
 800de78:	429a      	cmp	r2, r3
 800de7a:	f000 8155 	beq.w	800e128 <f_lseek+0x43c>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	7d1b      	ldrb	r3, [r3, #20]
 800de82:	b25b      	sxtb	r3, r3
 800de84:	2b00      	cmp	r3, #0
 800de86:	da18      	bge.n	800deba <f_lseek+0x1ce>
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	7858      	ldrb	r0, [r3, #1]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a1a      	ldr	r2, [r3, #32]
 800de96:	2301      	movs	r3, #1
 800de98:	f7fd f968 	bl	800b16c <disk_write>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d004      	beq.n	800deac <f_lseek+0x1c0>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2201      	movs	r2, #1
 800dea6:	755a      	strb	r2, [r3, #21]
 800dea8:	2301      	movs	r3, #1
 800deaa:	e13f      	b.n	800e12c <f_lseek+0x440>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	7d1b      	ldrb	r3, [r3, #20]
 800deb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	751a      	strb	r2, [r3, #20]
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	7858      	ldrb	r0, [r3, #1]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dec4:	2301      	movs	r3, #1
 800dec6:	69ba      	ldr	r2, [r7, #24]
 800dec8:	f7fd f930 	bl	800b12c <disk_read>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d004      	beq.n	800dedc <f_lseek+0x1f0>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2201      	movs	r2, #1
 800ded6:	755a      	strb	r2, [r3, #21]
 800ded8:	2301      	movs	r3, #1
 800deda:	e127      	b.n	800e12c <f_lseek+0x440>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	69ba      	ldr	r2, [r7, #24]
 800dee0:	621a      	str	r2, [r3, #32]
 800dee2:	e121      	b.n	800e128 <f_lseek+0x43c>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	683a      	ldr	r2, [r7, #0]
 800deea:	429a      	cmp	r2, r3
 800deec:	d908      	bls.n	800df00 <f_lseek+0x214>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	7d1b      	ldrb	r3, [r3, #20]
 800def2:	f003 0302 	and.w	r3, r3, #2
 800def6:	2b00      	cmp	r3, #0
 800def8:	d102      	bne.n	800df00 <f_lseek+0x214>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	603b      	str	r3, [r7, #0]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	699b      	ldr	r3, [r3, #24]
 800df04:	623b      	str	r3, [r7, #32]
 800df06:	2300      	movs	r3, #0
 800df08:	637b      	str	r3, [r7, #52]	@ 0x34
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df0e:	619a      	str	r2, [r3, #24]
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	f000 80b5 	beq.w	800e082 <f_lseek+0x396>
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	895b      	ldrh	r3, [r3, #10]
 800df1c:	461a      	mov	r2, r3
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	899b      	ldrh	r3, [r3, #12]
 800df22:	fb02 f303 	mul.w	r3, r2, r3
 800df26:	61fb      	str	r3, [r7, #28]
 800df28:	6a3b      	ldr	r3, [r7, #32]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d01b      	beq.n	800df66 <f_lseek+0x27a>
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	1e5a      	subs	r2, r3, #1
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	fbb2 f2f3 	udiv	r2, r2, r3
 800df38:	6a3b      	ldr	r3, [r7, #32]
 800df3a:	1e59      	subs	r1, r3, #1
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	fbb1 f3f3 	udiv	r3, r1, r3
 800df42:	429a      	cmp	r2, r3
 800df44:	d30f      	bcc.n	800df66 <f_lseek+0x27a>
 800df46:	6a3b      	ldr	r3, [r7, #32]
 800df48:	1e5a      	subs	r2, r3, #1
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	425b      	negs	r3, r3
 800df4e:	401a      	ands	r2, r3
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	619a      	str	r2, [r3, #24]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	699b      	ldr	r3, [r3, #24]
 800df58:	683a      	ldr	r2, [r7, #0]
 800df5a:	1ad3      	subs	r3, r2, r3
 800df5c:	603b      	str	r3, [r7, #0]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	69db      	ldr	r3, [r3, #28]
 800df62:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df64:	e022      	b.n	800dfac <f_lseek+0x2c0>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d119      	bne.n	800dfa6 <f_lseek+0x2ba>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2100      	movs	r1, #0
 800df76:	4618      	mov	r0, r3
 800df78:	f7fd fef5 	bl	800bd66 <create_chain>
 800df7c:	63b8      	str	r0, [r7, #56]	@ 0x38
 800df7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df80:	2b01      	cmp	r3, #1
 800df82:	d104      	bne.n	800df8e <f_lseek+0x2a2>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2202      	movs	r2, #2
 800df88:	755a      	strb	r2, [r3, #21]
 800df8a:	2302      	movs	r3, #2
 800df8c:	e0ce      	b.n	800e12c <f_lseek+0x440>
 800df8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df94:	d104      	bne.n	800dfa0 <f_lseek+0x2b4>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2201      	movs	r2, #1
 800df9a:	755a      	strb	r2, [r3, #21]
 800df9c:	2301      	movs	r3, #1
 800df9e:	e0c5      	b.n	800e12c <f_lseek+0x440>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dfa4:	609a      	str	r2, [r3, #8]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dfaa:	61da      	str	r2, [r3, #28]
 800dfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d067      	beq.n	800e082 <f_lseek+0x396>
 800dfb2:	e03a      	b.n	800e02a <f_lseek+0x33e>
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	603b      	str	r3, [r7, #0]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	699a      	ldr	r2, [r3, #24]
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	441a      	add	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	619a      	str	r2, [r3, #24]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	7d1b      	ldrb	r3, [r3, #20]
 800dfcc:	f003 0302 	and.w	r3, r3, #2
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00b      	beq.n	800dfec <f_lseek+0x300>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fd fec4 	bl	800bd66 <create_chain>
 800dfde:	63b8      	str	r0, [r7, #56]	@ 0x38
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d108      	bne.n	800dff8 <f_lseek+0x30c>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	603b      	str	r3, [r7, #0]
 800dfea:	e022      	b.n	800e032 <f_lseek+0x346>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7fd fc66 	bl	800b8c2 <get_fat>
 800dff6:	63b8      	str	r0, [r7, #56]	@ 0x38
 800dff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dffe:	d104      	bne.n	800e00a <f_lseek+0x31e>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2201      	movs	r2, #1
 800e004:	755a      	strb	r2, [r3, #21]
 800e006:	2301      	movs	r3, #1
 800e008:	e090      	b.n	800e12c <f_lseek+0x440>
 800e00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e00c:	2b01      	cmp	r3, #1
 800e00e:	d904      	bls.n	800e01a <f_lseek+0x32e>
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	69db      	ldr	r3, [r3, #28]
 800e014:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e016:	429a      	cmp	r2, r3
 800e018:	d304      	bcc.n	800e024 <f_lseek+0x338>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2202      	movs	r2, #2
 800e01e:	755a      	strb	r2, [r3, #21]
 800e020:	2302      	movs	r3, #2
 800e022:	e083      	b.n	800e12c <f_lseek+0x440>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e028:	61da      	str	r2, [r3, #28]
 800e02a:	683a      	ldr	r2, [r7, #0]
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d8c0      	bhi.n	800dfb4 <f_lseek+0x2c8>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	699a      	ldr	r2, [r3, #24]
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	441a      	add	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	619a      	str	r2, [r3, #24]
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	899b      	ldrh	r3, [r3, #12]
 800e042:	461a      	mov	r2, r3
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	fbb3 f1f2 	udiv	r1, r3, r2
 800e04a:	fb01 f202 	mul.w	r2, r1, r2
 800e04e:	1a9b      	subs	r3, r3, r2
 800e050:	2b00      	cmp	r3, #0
 800e052:	d016      	beq.n	800e082 <f_lseek+0x396>
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fd fc13 	bl	800b884 <clust2sect>
 800e05e:	6378      	str	r0, [r7, #52]	@ 0x34
 800e060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e062:	2b00      	cmp	r3, #0
 800e064:	d104      	bne.n	800e070 <f_lseek+0x384>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2202      	movs	r2, #2
 800e06a:	755a      	strb	r2, [r3, #21]
 800e06c:	2302      	movs	r3, #2
 800e06e:	e05d      	b.n	800e12c <f_lseek+0x440>
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	899b      	ldrh	r3, [r3, #12]
 800e074:	461a      	mov	r2, r3
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	fbb3 f3f2 	udiv	r3, r3, r2
 800e07c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e07e:	4413      	add	r3, r2
 800e080:	637b      	str	r3, [r7, #52]	@ 0x34
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	699a      	ldr	r2, [r3, #24]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d90a      	bls.n	800e0a4 <f_lseek+0x3b8>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	699a      	ldr	r2, [r3, #24]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	60da      	str	r2, [r3, #12]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	7d1b      	ldrb	r3, [r3, #20]
 800e09a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	751a      	strb	r2, [r3, #20]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	699b      	ldr	r3, [r3, #24]
 800e0a8:	68ba      	ldr	r2, [r7, #8]
 800e0aa:	8992      	ldrh	r2, [r2, #12]
 800e0ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0b0:	fb01 f202 	mul.w	r2, r1, r2
 800e0b4:	1a9b      	subs	r3, r3, r2
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d036      	beq.n	800e128 <f_lseek+0x43c>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a1b      	ldr	r3, [r3, #32]
 800e0be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d031      	beq.n	800e128 <f_lseek+0x43c>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	7d1b      	ldrb	r3, [r3, #20]
 800e0c8:	b25b      	sxtb	r3, r3
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	da18      	bge.n	800e100 <f_lseek+0x414>
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	7858      	ldrb	r0, [r3, #1]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a1a      	ldr	r2, [r3, #32]
 800e0dc:	2301      	movs	r3, #1
 800e0de:	f7fd f845 	bl	800b16c <disk_write>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d004      	beq.n	800e0f2 <f_lseek+0x406>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	755a      	strb	r2, [r3, #21]
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e01c      	b.n	800e12c <f_lseek+0x440>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	7d1b      	ldrb	r3, [r3, #20]
 800e0f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0fa:	b2da      	uxtb	r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	751a      	strb	r2, [r3, #20]
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	7858      	ldrb	r0, [r3, #1]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e10a:	2301      	movs	r3, #1
 800e10c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e10e:	f7fd f80d 	bl	800b12c <disk_read>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d004      	beq.n	800e122 <f_lseek+0x436>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2201      	movs	r2, #1
 800e11c:	755a      	strb	r2, [r3, #21]
 800e11e:	2301      	movs	r3, #1
 800e120:	e004      	b.n	800e12c <f_lseek+0x440>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e126:	621a      	str	r2, [r3, #32]
 800e128:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e12c:	4618      	mov	r0, r3
 800e12e:	3740      	adds	r7, #64	@ 0x40
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <putc_bfd>:
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	460b      	mov	r3, r1
 800e13e:	70fb      	strb	r3, [r7, #3]
 800e140:	78fb      	ldrb	r3, [r7, #3]
 800e142:	2b0a      	cmp	r3, #10
 800e144:	d103      	bne.n	800e14e <putc_bfd+0x1a>
 800e146:	210d      	movs	r1, #13
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7ff fff3 	bl	800e134 <putc_bfd>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	60fb      	str	r3, [r7, #12]
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2b00      	cmp	r3, #0
 800e158:	db25      	blt.n	800e1a6 <putc_bfd+0x72>
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	1c5a      	adds	r2, r3, #1
 800e15e:	60fa      	str	r2, [r7, #12]
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	4413      	add	r3, r2
 800e164:	78fa      	ldrb	r2, [r7, #3]
 800e166:	731a      	strb	r2, [r3, #12]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2b3c      	cmp	r3, #60	@ 0x3c
 800e16c:	dd12      	ble.n	800e194 <putc_bfd+0x60>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6818      	ldr	r0, [r3, #0]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f103 010c 	add.w	r1, r3, #12
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	f107 0308 	add.w	r3, r7, #8
 800e17e:	f7ff fb79 	bl	800d874 <f_write>
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	429a      	cmp	r2, r3
 800e188:	d101      	bne.n	800e18e <putc_bfd+0x5a>
 800e18a:	2300      	movs	r3, #0
 800e18c:	e001      	b.n	800e192 <putc_bfd+0x5e>
 800e18e:	f04f 33ff 	mov.w	r3, #4294967295
 800e192:	60fb      	str	r3, [r7, #12]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	68fa      	ldr	r2, [r7, #12]
 800e198:	605a      	str	r2, [r3, #4]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	1c5a      	adds	r2, r3, #1
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	609a      	str	r2, [r3, #8]
 800e1a4:	e000      	b.n	800e1a8 <putc_bfd+0x74>
 800e1a6:	bf00      	nop
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}

0800e1ae <putc_flush>:
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b084      	sub	sp, #16
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	db16      	blt.n	800e1ec <putc_flush+0x3e>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6818      	ldr	r0, [r3, #0]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f103 010c 	add.w	r1, r3, #12
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	f107 030c 	add.w	r3, r7, #12
 800e1d2:	f7ff fb4f 	bl	800d874 <f_write>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d107      	bne.n	800e1ec <putc_flush+0x3e>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d102      	bne.n	800e1ec <putc_flush+0x3e>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	e001      	b.n	800e1f0 <putc_flush+0x42>
 800e1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <putc_init>:
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	6039      	str	r1, [r7, #0]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	683a      	ldr	r2, [r7, #0]
 800e206:	601a      	str	r2, [r3, #0]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	605a      	str	r2, [r3, #4]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	685a      	ldr	r2, [r3, #4]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	609a      	str	r2, [r3, #8]
 800e216:	bf00      	nop
 800e218:	370c      	adds	r7, #12
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr

0800e222 <f_puts>:
 800e222:	b580      	push	{r7, lr}
 800e224:	b096      	sub	sp, #88	@ 0x58
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
 800e22a:	6039      	str	r1, [r7, #0]
 800e22c:	f107 030c 	add.w	r3, r7, #12
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	4618      	mov	r0, r3
 800e234:	f7ff ffe0 	bl	800e1f8 <putc_init>
 800e238:	e009      	b.n	800e24e <f_puts+0x2c>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	1c5a      	adds	r2, r3, #1
 800e23e:	607a      	str	r2, [r7, #4]
 800e240:	781a      	ldrb	r2, [r3, #0]
 800e242:	f107 030c 	add.w	r3, r7, #12
 800e246:	4611      	mov	r1, r2
 800e248:	4618      	mov	r0, r3
 800e24a:	f7ff ff73 	bl	800e134 <putc_bfd>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d1f1      	bne.n	800e23a <f_puts+0x18>
 800e256:	f107 030c 	add.w	r3, r7, #12
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7ff ffa7 	bl	800e1ae <putc_flush>
 800e260:	4603      	mov	r3, r0
 800e262:	4618      	mov	r0, r3
 800e264:	3758      	adds	r7, #88	@ 0x58
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
	...

0800e26c <FATFS_LinkDriverEx>:
 800e26c:	b480      	push	{r7}
 800e26e:	b087      	sub	sp, #28
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	4613      	mov	r3, r2
 800e278:	71fb      	strb	r3, [r7, #7]
 800e27a:	2301      	movs	r3, #1
 800e27c:	75fb      	strb	r3, [r7, #23]
 800e27e:	2300      	movs	r3, #0
 800e280:	75bb      	strb	r3, [r7, #22]
 800e282:	4b1f      	ldr	r3, [pc, #124]	@ (800e300 <FATFS_LinkDriverEx+0x94>)
 800e284:	7a5b      	ldrb	r3, [r3, #9]
 800e286:	b2db      	uxtb	r3, r3
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d131      	bne.n	800e2f0 <FATFS_LinkDriverEx+0x84>
 800e28c:	4b1c      	ldr	r3, [pc, #112]	@ (800e300 <FATFS_LinkDriverEx+0x94>)
 800e28e:	7a5b      	ldrb	r3, [r3, #9]
 800e290:	b2db      	uxtb	r3, r3
 800e292:	461a      	mov	r2, r3
 800e294:	4b1a      	ldr	r3, [pc, #104]	@ (800e300 <FATFS_LinkDriverEx+0x94>)
 800e296:	2100      	movs	r1, #0
 800e298:	5499      	strb	r1, [r3, r2]
 800e29a:	4b19      	ldr	r3, [pc, #100]	@ (800e300 <FATFS_LinkDriverEx+0x94>)
 800e29c:	7a5b      	ldrb	r3, [r3, #9]
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	4a17      	ldr	r2, [pc, #92]	@ (800e300 <FATFS_LinkDriverEx+0x94>)
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	4413      	add	r3, r2
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	605a      	str	r2, [r3, #4]
 800e2aa:	4b15      	ldr	r3, [pc, #84]	@ (800e300 <FATFS_LinkDriverEx+0x94>)
 800e2ac:	7a5b      	ldrb	r3, [r3, #9]
 800e2ae:	b2db      	uxtb	r3, r3
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	4b13      	ldr	r3, [pc, #76]	@ (800e300 <FATFS_LinkDriverEx+0x94>)
 800e2b4:	4413      	add	r3, r2
 800e2b6:	79fa      	ldrb	r2, [r7, #7]
 800e2b8:	721a      	strb	r2, [r3, #8]
 800e2ba:	4b11      	ldr	r3, [pc, #68]	@ (800e300 <FATFS_LinkDriverEx+0x94>)
 800e2bc:	7a5b      	ldrb	r3, [r3, #9]
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	1c5a      	adds	r2, r3, #1
 800e2c2:	b2d1      	uxtb	r1, r2
 800e2c4:	4a0e      	ldr	r2, [pc, #56]	@ (800e300 <FATFS_LinkDriverEx+0x94>)
 800e2c6:	7251      	strb	r1, [r2, #9]
 800e2c8:	75bb      	strb	r3, [r7, #22]
 800e2ca:	7dbb      	ldrb	r3, [r7, #22]
 800e2cc:	3330      	adds	r3, #48	@ 0x30
 800e2ce:	b2da      	uxtb	r2, r3
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	701a      	strb	r2, [r3, #0]
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	223a      	movs	r2, #58	@ 0x3a
 800e2da:	701a      	strb	r2, [r3, #0]
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	3302      	adds	r3, #2
 800e2e0:	222f      	movs	r2, #47	@ 0x2f
 800e2e2:	701a      	strb	r2, [r3, #0]
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	3303      	adds	r3, #3
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	701a      	strb	r2, [r3, #0]
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	75fb      	strb	r3, [r7, #23]
 800e2f0:	7dfb      	ldrb	r3, [r7, #23]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	371c      	adds	r7, #28
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	20003280 	.word	0x20003280

0800e304 <FATFS_LinkDriver>:
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
 800e30e:	2200      	movs	r2, #0
 800e310:	6839      	ldr	r1, [r7, #0]
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f7ff ffaa 	bl	800e26c <FATFS_LinkDriverEx>
 800e318:	4603      	mov	r3, r0
 800e31a:	4618      	mov	r0, r3
 800e31c:	3708      	adds	r7, #8
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
	...

0800e324 <ff_convert>:
 800e324:	b480      	push	{r7}
 800e326:	b085      	sub	sp, #20
 800e328:	af00      	add	r7, sp, #0
 800e32a:	4603      	mov	r3, r0
 800e32c:	6039      	str	r1, [r7, #0]
 800e32e:	80fb      	strh	r3, [r7, #6]
 800e330:	88fb      	ldrh	r3, [r7, #6]
 800e332:	2b7f      	cmp	r3, #127	@ 0x7f
 800e334:	d802      	bhi.n	800e33c <ff_convert+0x18>
 800e336:	88fb      	ldrh	r3, [r7, #6]
 800e338:	81fb      	strh	r3, [r7, #14]
 800e33a:	e025      	b.n	800e388 <ff_convert+0x64>
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00b      	beq.n	800e35a <ff_convert+0x36>
 800e342:	88fb      	ldrh	r3, [r7, #6]
 800e344:	2bff      	cmp	r3, #255	@ 0xff
 800e346:	d805      	bhi.n	800e354 <ff_convert+0x30>
 800e348:	88fb      	ldrh	r3, [r7, #6]
 800e34a:	3b80      	subs	r3, #128	@ 0x80
 800e34c:	4a12      	ldr	r2, [pc, #72]	@ (800e398 <ff_convert+0x74>)
 800e34e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e352:	e000      	b.n	800e356 <ff_convert+0x32>
 800e354:	2300      	movs	r3, #0
 800e356:	81fb      	strh	r3, [r7, #14]
 800e358:	e016      	b.n	800e388 <ff_convert+0x64>
 800e35a:	2300      	movs	r3, #0
 800e35c:	81fb      	strh	r3, [r7, #14]
 800e35e:	e009      	b.n	800e374 <ff_convert+0x50>
 800e360:	89fb      	ldrh	r3, [r7, #14]
 800e362:	4a0d      	ldr	r2, [pc, #52]	@ (800e398 <ff_convert+0x74>)
 800e364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e368:	88fa      	ldrh	r2, [r7, #6]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d006      	beq.n	800e37c <ff_convert+0x58>
 800e36e:	89fb      	ldrh	r3, [r7, #14]
 800e370:	3301      	adds	r3, #1
 800e372:	81fb      	strh	r3, [r7, #14]
 800e374:	89fb      	ldrh	r3, [r7, #14]
 800e376:	2b7f      	cmp	r3, #127	@ 0x7f
 800e378:	d9f2      	bls.n	800e360 <ff_convert+0x3c>
 800e37a:	e000      	b.n	800e37e <ff_convert+0x5a>
 800e37c:	bf00      	nop
 800e37e:	89fb      	ldrh	r3, [r7, #14]
 800e380:	3380      	adds	r3, #128	@ 0x80
 800e382:	b29b      	uxth	r3, r3
 800e384:	b2db      	uxtb	r3, r3
 800e386:	81fb      	strh	r3, [r7, #14]
 800e388:	89fb      	ldrh	r3, [r7, #14]
 800e38a:	4618      	mov	r0, r3
 800e38c:	3714      	adds	r7, #20
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	08013aa8 	.word	0x08013aa8

0800e39c <ff_wtoupper>:
 800e39c:	b480      	push	{r7}
 800e39e:	b087      	sub	sp, #28
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	80fb      	strh	r3, [r7, #6]
 800e3a6:	88fb      	ldrh	r3, [r7, #6]
 800e3a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3ac:	d201      	bcs.n	800e3b2 <ff_wtoupper+0x16>
 800e3ae:	4b3e      	ldr	r3, [pc, #248]	@ (800e4a8 <ff_wtoupper+0x10c>)
 800e3b0:	e000      	b.n	800e3b4 <ff_wtoupper+0x18>
 800e3b2:	4b3e      	ldr	r3, [pc, #248]	@ (800e4ac <ff_wtoupper+0x110>)
 800e3b4:	617b      	str	r3, [r7, #20]
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	1c9a      	adds	r2, r3, #2
 800e3ba:	617a      	str	r2, [r7, #20]
 800e3bc:	881b      	ldrh	r3, [r3, #0]
 800e3be:	827b      	strh	r3, [r7, #18]
 800e3c0:	8a7b      	ldrh	r3, [r7, #18]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d068      	beq.n	800e498 <ff_wtoupper+0xfc>
 800e3c6:	88fa      	ldrh	r2, [r7, #6]
 800e3c8:	8a7b      	ldrh	r3, [r7, #18]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d364      	bcc.n	800e498 <ff_wtoupper+0xfc>
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	1c9a      	adds	r2, r3, #2
 800e3d2:	617a      	str	r2, [r7, #20]
 800e3d4:	881b      	ldrh	r3, [r3, #0]
 800e3d6:	823b      	strh	r3, [r7, #16]
 800e3d8:	8a3b      	ldrh	r3, [r7, #16]
 800e3da:	0a1b      	lsrs	r3, r3, #8
 800e3dc:	81fb      	strh	r3, [r7, #14]
 800e3de:	8a3b      	ldrh	r3, [r7, #16]
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	823b      	strh	r3, [r7, #16]
 800e3e4:	88fa      	ldrh	r2, [r7, #6]
 800e3e6:	8a79      	ldrh	r1, [r7, #18]
 800e3e8:	8a3b      	ldrh	r3, [r7, #16]
 800e3ea:	440b      	add	r3, r1
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	da49      	bge.n	800e484 <ff_wtoupper+0xe8>
 800e3f0:	89fb      	ldrh	r3, [r7, #14]
 800e3f2:	2b08      	cmp	r3, #8
 800e3f4:	d84f      	bhi.n	800e496 <ff_wtoupper+0xfa>
 800e3f6:	a201      	add	r2, pc, #4	@ (adr r2, 800e3fc <ff_wtoupper+0x60>)
 800e3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3fc:	0800e421 	.word	0x0800e421
 800e400:	0800e433 	.word	0x0800e433
 800e404:	0800e449 	.word	0x0800e449
 800e408:	0800e451 	.word	0x0800e451
 800e40c:	0800e459 	.word	0x0800e459
 800e410:	0800e461 	.word	0x0800e461
 800e414:	0800e469 	.word	0x0800e469
 800e418:	0800e471 	.word	0x0800e471
 800e41c:	0800e479 	.word	0x0800e479
 800e420:	88fa      	ldrh	r2, [r7, #6]
 800e422:	8a7b      	ldrh	r3, [r7, #18]
 800e424:	1ad3      	subs	r3, r2, r3
 800e426:	005b      	lsls	r3, r3, #1
 800e428:	697a      	ldr	r2, [r7, #20]
 800e42a:	4413      	add	r3, r2
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	80fb      	strh	r3, [r7, #6]
 800e430:	e027      	b.n	800e482 <ff_wtoupper+0xe6>
 800e432:	88fa      	ldrh	r2, [r7, #6]
 800e434:	8a7b      	ldrh	r3, [r7, #18]
 800e436:	1ad3      	subs	r3, r2, r3
 800e438:	b29b      	uxth	r3, r3
 800e43a:	f003 0301 	and.w	r3, r3, #1
 800e43e:	b29b      	uxth	r3, r3
 800e440:	88fa      	ldrh	r2, [r7, #6]
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	80fb      	strh	r3, [r7, #6]
 800e446:	e01c      	b.n	800e482 <ff_wtoupper+0xe6>
 800e448:	88fb      	ldrh	r3, [r7, #6]
 800e44a:	3b10      	subs	r3, #16
 800e44c:	80fb      	strh	r3, [r7, #6]
 800e44e:	e018      	b.n	800e482 <ff_wtoupper+0xe6>
 800e450:	88fb      	ldrh	r3, [r7, #6]
 800e452:	3b20      	subs	r3, #32
 800e454:	80fb      	strh	r3, [r7, #6]
 800e456:	e014      	b.n	800e482 <ff_wtoupper+0xe6>
 800e458:	88fb      	ldrh	r3, [r7, #6]
 800e45a:	3b30      	subs	r3, #48	@ 0x30
 800e45c:	80fb      	strh	r3, [r7, #6]
 800e45e:	e010      	b.n	800e482 <ff_wtoupper+0xe6>
 800e460:	88fb      	ldrh	r3, [r7, #6]
 800e462:	3b1a      	subs	r3, #26
 800e464:	80fb      	strh	r3, [r7, #6]
 800e466:	e00c      	b.n	800e482 <ff_wtoupper+0xe6>
 800e468:	88fb      	ldrh	r3, [r7, #6]
 800e46a:	3308      	adds	r3, #8
 800e46c:	80fb      	strh	r3, [r7, #6]
 800e46e:	e008      	b.n	800e482 <ff_wtoupper+0xe6>
 800e470:	88fb      	ldrh	r3, [r7, #6]
 800e472:	3b50      	subs	r3, #80	@ 0x50
 800e474:	80fb      	strh	r3, [r7, #6]
 800e476:	e004      	b.n	800e482 <ff_wtoupper+0xe6>
 800e478:	88fb      	ldrh	r3, [r7, #6]
 800e47a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800e47e:	80fb      	strh	r3, [r7, #6]
 800e480:	bf00      	nop
 800e482:	e008      	b.n	800e496 <ff_wtoupper+0xfa>
 800e484:	89fb      	ldrh	r3, [r7, #14]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d195      	bne.n	800e3b6 <ff_wtoupper+0x1a>
 800e48a:	8a3b      	ldrh	r3, [r7, #16]
 800e48c:	005b      	lsls	r3, r3, #1
 800e48e:	697a      	ldr	r2, [r7, #20]
 800e490:	4413      	add	r3, r2
 800e492:	617b      	str	r3, [r7, #20]
 800e494:	e78f      	b.n	800e3b6 <ff_wtoupper+0x1a>
 800e496:	bf00      	nop
 800e498:	88fb      	ldrh	r3, [r7, #6]
 800e49a:	4618      	mov	r0, r3
 800e49c:	371c      	adds	r7, #28
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr
 800e4a6:	bf00      	nop
 800e4a8:	08013ba8 	.word	0x08013ba8
 800e4ac:	08013d9c 	.word	0x08013d9c

0800e4b0 <malloc>:
 800e4b0:	4b02      	ldr	r3, [pc, #8]	@ (800e4bc <malloc+0xc>)
 800e4b2:	4601      	mov	r1, r0
 800e4b4:	6818      	ldr	r0, [r3, #0]
 800e4b6:	f000 b825 	b.w	800e504 <_malloc_r>
 800e4ba:	bf00      	nop
 800e4bc:	20000084 	.word	0x20000084

0800e4c0 <sbrk_aligned>:
 800e4c0:	b570      	push	{r4, r5, r6, lr}
 800e4c2:	4e0f      	ldr	r6, [pc, #60]	@ (800e500 <sbrk_aligned+0x40>)
 800e4c4:	460c      	mov	r4, r1
 800e4c6:	6831      	ldr	r1, [r6, #0]
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	b911      	cbnz	r1, 800e4d2 <sbrk_aligned+0x12>
 800e4cc:	f001 f9b0 	bl	800f830 <_sbrk_r>
 800e4d0:	6030      	str	r0, [r6, #0]
 800e4d2:	4621      	mov	r1, r4
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	f001 f9ab 	bl	800f830 <_sbrk_r>
 800e4da:	1c43      	adds	r3, r0, #1
 800e4dc:	d103      	bne.n	800e4e6 <sbrk_aligned+0x26>
 800e4de:	f04f 34ff 	mov.w	r4, #4294967295
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	bd70      	pop	{r4, r5, r6, pc}
 800e4e6:	1cc4      	adds	r4, r0, #3
 800e4e8:	f024 0403 	bic.w	r4, r4, #3
 800e4ec:	42a0      	cmp	r0, r4
 800e4ee:	d0f8      	beq.n	800e4e2 <sbrk_aligned+0x22>
 800e4f0:	1a21      	subs	r1, r4, r0
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	f001 f99c 	bl	800f830 <_sbrk_r>
 800e4f8:	3001      	adds	r0, #1
 800e4fa:	d1f2      	bne.n	800e4e2 <sbrk_aligned+0x22>
 800e4fc:	e7ef      	b.n	800e4de <sbrk_aligned+0x1e>
 800e4fe:	bf00      	nop
 800e500:	2000328c 	.word	0x2000328c

0800e504 <_malloc_r>:
 800e504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e508:	1ccd      	adds	r5, r1, #3
 800e50a:	f025 0503 	bic.w	r5, r5, #3
 800e50e:	3508      	adds	r5, #8
 800e510:	2d0c      	cmp	r5, #12
 800e512:	bf38      	it	cc
 800e514:	250c      	movcc	r5, #12
 800e516:	2d00      	cmp	r5, #0
 800e518:	4606      	mov	r6, r0
 800e51a:	db01      	blt.n	800e520 <_malloc_r+0x1c>
 800e51c:	42a9      	cmp	r1, r5
 800e51e:	d904      	bls.n	800e52a <_malloc_r+0x26>
 800e520:	230c      	movs	r3, #12
 800e522:	6033      	str	r3, [r6, #0]
 800e524:	2000      	movs	r0, #0
 800e526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e52a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e600 <_malloc_r+0xfc>
 800e52e:	f000 f869 	bl	800e604 <__malloc_lock>
 800e532:	f8d8 3000 	ldr.w	r3, [r8]
 800e536:	461c      	mov	r4, r3
 800e538:	bb44      	cbnz	r4, 800e58c <_malloc_r+0x88>
 800e53a:	4629      	mov	r1, r5
 800e53c:	4630      	mov	r0, r6
 800e53e:	f7ff ffbf 	bl	800e4c0 <sbrk_aligned>
 800e542:	1c43      	adds	r3, r0, #1
 800e544:	4604      	mov	r4, r0
 800e546:	d158      	bne.n	800e5fa <_malloc_r+0xf6>
 800e548:	f8d8 4000 	ldr.w	r4, [r8]
 800e54c:	4627      	mov	r7, r4
 800e54e:	2f00      	cmp	r7, #0
 800e550:	d143      	bne.n	800e5da <_malloc_r+0xd6>
 800e552:	2c00      	cmp	r4, #0
 800e554:	d04b      	beq.n	800e5ee <_malloc_r+0xea>
 800e556:	6823      	ldr	r3, [r4, #0]
 800e558:	4639      	mov	r1, r7
 800e55a:	4630      	mov	r0, r6
 800e55c:	eb04 0903 	add.w	r9, r4, r3
 800e560:	f001 f966 	bl	800f830 <_sbrk_r>
 800e564:	4581      	cmp	r9, r0
 800e566:	d142      	bne.n	800e5ee <_malloc_r+0xea>
 800e568:	6821      	ldr	r1, [r4, #0]
 800e56a:	1a6d      	subs	r5, r5, r1
 800e56c:	4629      	mov	r1, r5
 800e56e:	4630      	mov	r0, r6
 800e570:	f7ff ffa6 	bl	800e4c0 <sbrk_aligned>
 800e574:	3001      	adds	r0, #1
 800e576:	d03a      	beq.n	800e5ee <_malloc_r+0xea>
 800e578:	6823      	ldr	r3, [r4, #0]
 800e57a:	442b      	add	r3, r5
 800e57c:	6023      	str	r3, [r4, #0]
 800e57e:	f8d8 3000 	ldr.w	r3, [r8]
 800e582:	685a      	ldr	r2, [r3, #4]
 800e584:	bb62      	cbnz	r2, 800e5e0 <_malloc_r+0xdc>
 800e586:	f8c8 7000 	str.w	r7, [r8]
 800e58a:	e00f      	b.n	800e5ac <_malloc_r+0xa8>
 800e58c:	6822      	ldr	r2, [r4, #0]
 800e58e:	1b52      	subs	r2, r2, r5
 800e590:	d420      	bmi.n	800e5d4 <_malloc_r+0xd0>
 800e592:	2a0b      	cmp	r2, #11
 800e594:	d917      	bls.n	800e5c6 <_malloc_r+0xc2>
 800e596:	1961      	adds	r1, r4, r5
 800e598:	42a3      	cmp	r3, r4
 800e59a:	6025      	str	r5, [r4, #0]
 800e59c:	bf18      	it	ne
 800e59e:	6059      	strne	r1, [r3, #4]
 800e5a0:	6863      	ldr	r3, [r4, #4]
 800e5a2:	bf08      	it	eq
 800e5a4:	f8c8 1000 	streq.w	r1, [r8]
 800e5a8:	5162      	str	r2, [r4, r5]
 800e5aa:	604b      	str	r3, [r1, #4]
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	f000 f82f 	bl	800e610 <__malloc_unlock>
 800e5b2:	f104 000b 	add.w	r0, r4, #11
 800e5b6:	1d23      	adds	r3, r4, #4
 800e5b8:	f020 0007 	bic.w	r0, r0, #7
 800e5bc:	1ac2      	subs	r2, r0, r3
 800e5be:	bf1c      	itt	ne
 800e5c0:	1a1b      	subne	r3, r3, r0
 800e5c2:	50a3      	strne	r3, [r4, r2]
 800e5c4:	e7af      	b.n	800e526 <_malloc_r+0x22>
 800e5c6:	6862      	ldr	r2, [r4, #4]
 800e5c8:	42a3      	cmp	r3, r4
 800e5ca:	bf0c      	ite	eq
 800e5cc:	f8c8 2000 	streq.w	r2, [r8]
 800e5d0:	605a      	strne	r2, [r3, #4]
 800e5d2:	e7eb      	b.n	800e5ac <_malloc_r+0xa8>
 800e5d4:	4623      	mov	r3, r4
 800e5d6:	6864      	ldr	r4, [r4, #4]
 800e5d8:	e7ae      	b.n	800e538 <_malloc_r+0x34>
 800e5da:	463c      	mov	r4, r7
 800e5dc:	687f      	ldr	r7, [r7, #4]
 800e5de:	e7b6      	b.n	800e54e <_malloc_r+0x4a>
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	42a3      	cmp	r3, r4
 800e5e6:	d1fb      	bne.n	800e5e0 <_malloc_r+0xdc>
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	6053      	str	r3, [r2, #4]
 800e5ec:	e7de      	b.n	800e5ac <_malloc_r+0xa8>
 800e5ee:	230c      	movs	r3, #12
 800e5f0:	6033      	str	r3, [r6, #0]
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	f000 f80c 	bl	800e610 <__malloc_unlock>
 800e5f8:	e794      	b.n	800e524 <_malloc_r+0x20>
 800e5fa:	6005      	str	r5, [r0, #0]
 800e5fc:	e7d6      	b.n	800e5ac <_malloc_r+0xa8>
 800e5fe:	bf00      	nop
 800e600:	20003290 	.word	0x20003290

0800e604 <__malloc_lock>:
 800e604:	4801      	ldr	r0, [pc, #4]	@ (800e60c <__malloc_lock+0x8>)
 800e606:	f001 b960 	b.w	800f8ca <__retarget_lock_acquire_recursive>
 800e60a:	bf00      	nop
 800e60c:	200033d4 	.word	0x200033d4

0800e610 <__malloc_unlock>:
 800e610:	4801      	ldr	r0, [pc, #4]	@ (800e618 <__malloc_unlock+0x8>)
 800e612:	f001 b95b 	b.w	800f8cc <__retarget_lock_release_recursive>
 800e616:	bf00      	nop
 800e618:	200033d4 	.word	0x200033d4

0800e61c <__cvt>:
 800e61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e620:	ec57 6b10 	vmov	r6, r7, d0
 800e624:	2f00      	cmp	r7, #0
 800e626:	460c      	mov	r4, r1
 800e628:	4619      	mov	r1, r3
 800e62a:	463b      	mov	r3, r7
 800e62c:	bfbb      	ittet	lt
 800e62e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e632:	461f      	movlt	r7, r3
 800e634:	2300      	movge	r3, #0
 800e636:	232d      	movlt	r3, #45	@ 0x2d
 800e638:	700b      	strb	r3, [r1, #0]
 800e63a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e63c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e640:	4691      	mov	r9, r2
 800e642:	f023 0820 	bic.w	r8, r3, #32
 800e646:	bfbc      	itt	lt
 800e648:	4632      	movlt	r2, r6
 800e64a:	4616      	movlt	r6, r2
 800e64c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e650:	d005      	beq.n	800e65e <__cvt+0x42>
 800e652:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e656:	d100      	bne.n	800e65a <__cvt+0x3e>
 800e658:	3401      	adds	r4, #1
 800e65a:	2102      	movs	r1, #2
 800e65c:	e000      	b.n	800e660 <__cvt+0x44>
 800e65e:	2103      	movs	r1, #3
 800e660:	ab03      	add	r3, sp, #12
 800e662:	9301      	str	r3, [sp, #4]
 800e664:	ab02      	add	r3, sp, #8
 800e666:	9300      	str	r3, [sp, #0]
 800e668:	ec47 6b10 	vmov	d0, r6, r7
 800e66c:	4653      	mov	r3, sl
 800e66e:	4622      	mov	r2, r4
 800e670:	f001 f9be 	bl	800f9f0 <_dtoa_r>
 800e674:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e678:	4605      	mov	r5, r0
 800e67a:	d119      	bne.n	800e6b0 <__cvt+0x94>
 800e67c:	f019 0f01 	tst.w	r9, #1
 800e680:	d00e      	beq.n	800e6a0 <__cvt+0x84>
 800e682:	eb00 0904 	add.w	r9, r0, r4
 800e686:	2200      	movs	r2, #0
 800e688:	2300      	movs	r3, #0
 800e68a:	4630      	mov	r0, r6
 800e68c:	4639      	mov	r1, r7
 800e68e:	f7f2 fa3b 	bl	8000b08 <__aeabi_dcmpeq>
 800e692:	b108      	cbz	r0, 800e698 <__cvt+0x7c>
 800e694:	f8cd 900c 	str.w	r9, [sp, #12]
 800e698:	2230      	movs	r2, #48	@ 0x30
 800e69a:	9b03      	ldr	r3, [sp, #12]
 800e69c:	454b      	cmp	r3, r9
 800e69e:	d31e      	bcc.n	800e6de <__cvt+0xc2>
 800e6a0:	9b03      	ldr	r3, [sp, #12]
 800e6a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6a4:	1b5b      	subs	r3, r3, r5
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	6013      	str	r3, [r2, #0]
 800e6aa:	b004      	add	sp, #16
 800e6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e6b4:	eb00 0904 	add.w	r9, r0, r4
 800e6b8:	d1e5      	bne.n	800e686 <__cvt+0x6a>
 800e6ba:	7803      	ldrb	r3, [r0, #0]
 800e6bc:	2b30      	cmp	r3, #48	@ 0x30
 800e6be:	d10a      	bne.n	800e6d6 <__cvt+0xba>
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	4639      	mov	r1, r7
 800e6c8:	f7f2 fa1e 	bl	8000b08 <__aeabi_dcmpeq>
 800e6cc:	b918      	cbnz	r0, 800e6d6 <__cvt+0xba>
 800e6ce:	f1c4 0401 	rsb	r4, r4, #1
 800e6d2:	f8ca 4000 	str.w	r4, [sl]
 800e6d6:	f8da 3000 	ldr.w	r3, [sl]
 800e6da:	4499      	add	r9, r3
 800e6dc:	e7d3      	b.n	800e686 <__cvt+0x6a>
 800e6de:	1c59      	adds	r1, r3, #1
 800e6e0:	9103      	str	r1, [sp, #12]
 800e6e2:	701a      	strb	r2, [r3, #0]
 800e6e4:	e7d9      	b.n	800e69a <__cvt+0x7e>

0800e6e6 <__exponent>:
 800e6e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6e8:	2900      	cmp	r1, #0
 800e6ea:	bfba      	itte	lt
 800e6ec:	4249      	neglt	r1, r1
 800e6ee:	232d      	movlt	r3, #45	@ 0x2d
 800e6f0:	232b      	movge	r3, #43	@ 0x2b
 800e6f2:	2909      	cmp	r1, #9
 800e6f4:	7002      	strb	r2, [r0, #0]
 800e6f6:	7043      	strb	r3, [r0, #1]
 800e6f8:	dd29      	ble.n	800e74e <__exponent+0x68>
 800e6fa:	f10d 0307 	add.w	r3, sp, #7
 800e6fe:	461d      	mov	r5, r3
 800e700:	270a      	movs	r7, #10
 800e702:	461a      	mov	r2, r3
 800e704:	fbb1 f6f7 	udiv	r6, r1, r7
 800e708:	fb07 1416 	mls	r4, r7, r6, r1
 800e70c:	3430      	adds	r4, #48	@ 0x30
 800e70e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e712:	460c      	mov	r4, r1
 800e714:	2c63      	cmp	r4, #99	@ 0x63
 800e716:	f103 33ff 	add.w	r3, r3, #4294967295
 800e71a:	4631      	mov	r1, r6
 800e71c:	dcf1      	bgt.n	800e702 <__exponent+0x1c>
 800e71e:	3130      	adds	r1, #48	@ 0x30
 800e720:	1e94      	subs	r4, r2, #2
 800e722:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e726:	1c41      	adds	r1, r0, #1
 800e728:	4623      	mov	r3, r4
 800e72a:	42ab      	cmp	r3, r5
 800e72c:	d30a      	bcc.n	800e744 <__exponent+0x5e>
 800e72e:	f10d 0309 	add.w	r3, sp, #9
 800e732:	1a9b      	subs	r3, r3, r2
 800e734:	42ac      	cmp	r4, r5
 800e736:	bf88      	it	hi
 800e738:	2300      	movhi	r3, #0
 800e73a:	3302      	adds	r3, #2
 800e73c:	4403      	add	r3, r0
 800e73e:	1a18      	subs	r0, r3, r0
 800e740:	b003      	add	sp, #12
 800e742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e744:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e748:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e74c:	e7ed      	b.n	800e72a <__exponent+0x44>
 800e74e:	2330      	movs	r3, #48	@ 0x30
 800e750:	3130      	adds	r1, #48	@ 0x30
 800e752:	7083      	strb	r3, [r0, #2]
 800e754:	70c1      	strb	r1, [r0, #3]
 800e756:	1d03      	adds	r3, r0, #4
 800e758:	e7f1      	b.n	800e73e <__exponent+0x58>
	...

0800e75c <_printf_float>:
 800e75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e760:	b08d      	sub	sp, #52	@ 0x34
 800e762:	460c      	mov	r4, r1
 800e764:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e768:	4616      	mov	r6, r2
 800e76a:	461f      	mov	r7, r3
 800e76c:	4605      	mov	r5, r0
 800e76e:	f001 f827 	bl	800f7c0 <_localeconv_r>
 800e772:	6803      	ldr	r3, [r0, #0]
 800e774:	9304      	str	r3, [sp, #16]
 800e776:	4618      	mov	r0, r3
 800e778:	f7f1 fd9a 	bl	80002b0 <strlen>
 800e77c:	2300      	movs	r3, #0
 800e77e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e780:	f8d8 3000 	ldr.w	r3, [r8]
 800e784:	9005      	str	r0, [sp, #20]
 800e786:	3307      	adds	r3, #7
 800e788:	f023 0307 	bic.w	r3, r3, #7
 800e78c:	f103 0208 	add.w	r2, r3, #8
 800e790:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e794:	f8d4 b000 	ldr.w	fp, [r4]
 800e798:	f8c8 2000 	str.w	r2, [r8]
 800e79c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e7a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e7a4:	9307      	str	r3, [sp, #28]
 800e7a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800e7aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e7ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7b2:	4b9c      	ldr	r3, [pc, #624]	@ (800ea24 <_printf_float+0x2c8>)
 800e7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7b8:	f7f2 f9d8 	bl	8000b6c <__aeabi_dcmpun>
 800e7bc:	bb70      	cbnz	r0, 800e81c <_printf_float+0xc0>
 800e7be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7c2:	4b98      	ldr	r3, [pc, #608]	@ (800ea24 <_printf_float+0x2c8>)
 800e7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7c8:	f7f2 f9b2 	bl	8000b30 <__aeabi_dcmple>
 800e7cc:	bb30      	cbnz	r0, 800e81c <_printf_float+0xc0>
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	4649      	mov	r1, r9
 800e7d6:	f7f2 f9a1 	bl	8000b1c <__aeabi_dcmplt>
 800e7da:	b110      	cbz	r0, 800e7e2 <_printf_float+0x86>
 800e7dc:	232d      	movs	r3, #45	@ 0x2d
 800e7de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7e2:	4a91      	ldr	r2, [pc, #580]	@ (800ea28 <_printf_float+0x2cc>)
 800e7e4:	4b91      	ldr	r3, [pc, #580]	@ (800ea2c <_printf_float+0x2d0>)
 800e7e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e7ea:	bf94      	ite	ls
 800e7ec:	4690      	movls	r8, r2
 800e7ee:	4698      	movhi	r8, r3
 800e7f0:	2303      	movs	r3, #3
 800e7f2:	6123      	str	r3, [r4, #16]
 800e7f4:	f02b 0304 	bic.w	r3, fp, #4
 800e7f8:	6023      	str	r3, [r4, #0]
 800e7fa:	f04f 0900 	mov.w	r9, #0
 800e7fe:	9700      	str	r7, [sp, #0]
 800e800:	4633      	mov	r3, r6
 800e802:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e804:	4621      	mov	r1, r4
 800e806:	4628      	mov	r0, r5
 800e808:	f000 f9d2 	bl	800ebb0 <_printf_common>
 800e80c:	3001      	adds	r0, #1
 800e80e:	f040 808d 	bne.w	800e92c <_printf_float+0x1d0>
 800e812:	f04f 30ff 	mov.w	r0, #4294967295
 800e816:	b00d      	add	sp, #52	@ 0x34
 800e818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e81c:	4642      	mov	r2, r8
 800e81e:	464b      	mov	r3, r9
 800e820:	4640      	mov	r0, r8
 800e822:	4649      	mov	r1, r9
 800e824:	f7f2 f9a2 	bl	8000b6c <__aeabi_dcmpun>
 800e828:	b140      	cbz	r0, 800e83c <_printf_float+0xe0>
 800e82a:	464b      	mov	r3, r9
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	bfbc      	itt	lt
 800e830:	232d      	movlt	r3, #45	@ 0x2d
 800e832:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e836:	4a7e      	ldr	r2, [pc, #504]	@ (800ea30 <_printf_float+0x2d4>)
 800e838:	4b7e      	ldr	r3, [pc, #504]	@ (800ea34 <_printf_float+0x2d8>)
 800e83a:	e7d4      	b.n	800e7e6 <_printf_float+0x8a>
 800e83c:	6863      	ldr	r3, [r4, #4]
 800e83e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e842:	9206      	str	r2, [sp, #24]
 800e844:	1c5a      	adds	r2, r3, #1
 800e846:	d13b      	bne.n	800e8c0 <_printf_float+0x164>
 800e848:	2306      	movs	r3, #6
 800e84a:	6063      	str	r3, [r4, #4]
 800e84c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e850:	2300      	movs	r3, #0
 800e852:	6022      	str	r2, [r4, #0]
 800e854:	9303      	str	r3, [sp, #12]
 800e856:	ab0a      	add	r3, sp, #40	@ 0x28
 800e858:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e85c:	ab09      	add	r3, sp, #36	@ 0x24
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	6861      	ldr	r1, [r4, #4]
 800e862:	ec49 8b10 	vmov	d0, r8, r9
 800e866:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e86a:	4628      	mov	r0, r5
 800e86c:	f7ff fed6 	bl	800e61c <__cvt>
 800e870:	9b06      	ldr	r3, [sp, #24]
 800e872:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e874:	2b47      	cmp	r3, #71	@ 0x47
 800e876:	4680      	mov	r8, r0
 800e878:	d129      	bne.n	800e8ce <_printf_float+0x172>
 800e87a:	1cc8      	adds	r0, r1, #3
 800e87c:	db02      	blt.n	800e884 <_printf_float+0x128>
 800e87e:	6863      	ldr	r3, [r4, #4]
 800e880:	4299      	cmp	r1, r3
 800e882:	dd41      	ble.n	800e908 <_printf_float+0x1ac>
 800e884:	f1aa 0a02 	sub.w	sl, sl, #2
 800e888:	fa5f fa8a 	uxtb.w	sl, sl
 800e88c:	3901      	subs	r1, #1
 800e88e:	4652      	mov	r2, sl
 800e890:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e894:	9109      	str	r1, [sp, #36]	@ 0x24
 800e896:	f7ff ff26 	bl	800e6e6 <__exponent>
 800e89a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e89c:	1813      	adds	r3, r2, r0
 800e89e:	2a01      	cmp	r2, #1
 800e8a0:	4681      	mov	r9, r0
 800e8a2:	6123      	str	r3, [r4, #16]
 800e8a4:	dc02      	bgt.n	800e8ac <_printf_float+0x150>
 800e8a6:	6822      	ldr	r2, [r4, #0]
 800e8a8:	07d2      	lsls	r2, r2, #31
 800e8aa:	d501      	bpl.n	800e8b0 <_printf_float+0x154>
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	6123      	str	r3, [r4, #16]
 800e8b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d0a2      	beq.n	800e7fe <_printf_float+0xa2>
 800e8b8:	232d      	movs	r3, #45	@ 0x2d
 800e8ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8be:	e79e      	b.n	800e7fe <_printf_float+0xa2>
 800e8c0:	9a06      	ldr	r2, [sp, #24]
 800e8c2:	2a47      	cmp	r2, #71	@ 0x47
 800e8c4:	d1c2      	bne.n	800e84c <_printf_float+0xf0>
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d1c0      	bne.n	800e84c <_printf_float+0xf0>
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	e7bd      	b.n	800e84a <_printf_float+0xee>
 800e8ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e8d2:	d9db      	bls.n	800e88c <_printf_float+0x130>
 800e8d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e8d8:	d118      	bne.n	800e90c <_printf_float+0x1b0>
 800e8da:	2900      	cmp	r1, #0
 800e8dc:	6863      	ldr	r3, [r4, #4]
 800e8de:	dd0b      	ble.n	800e8f8 <_printf_float+0x19c>
 800e8e0:	6121      	str	r1, [r4, #16]
 800e8e2:	b913      	cbnz	r3, 800e8ea <_printf_float+0x18e>
 800e8e4:	6822      	ldr	r2, [r4, #0]
 800e8e6:	07d0      	lsls	r0, r2, #31
 800e8e8:	d502      	bpl.n	800e8f0 <_printf_float+0x194>
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	440b      	add	r3, r1
 800e8ee:	6123      	str	r3, [r4, #16]
 800e8f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e8f2:	f04f 0900 	mov.w	r9, #0
 800e8f6:	e7db      	b.n	800e8b0 <_printf_float+0x154>
 800e8f8:	b913      	cbnz	r3, 800e900 <_printf_float+0x1a4>
 800e8fa:	6822      	ldr	r2, [r4, #0]
 800e8fc:	07d2      	lsls	r2, r2, #31
 800e8fe:	d501      	bpl.n	800e904 <_printf_float+0x1a8>
 800e900:	3302      	adds	r3, #2
 800e902:	e7f4      	b.n	800e8ee <_printf_float+0x192>
 800e904:	2301      	movs	r3, #1
 800e906:	e7f2      	b.n	800e8ee <_printf_float+0x192>
 800e908:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e90c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e90e:	4299      	cmp	r1, r3
 800e910:	db05      	blt.n	800e91e <_printf_float+0x1c2>
 800e912:	6823      	ldr	r3, [r4, #0]
 800e914:	6121      	str	r1, [r4, #16]
 800e916:	07d8      	lsls	r0, r3, #31
 800e918:	d5ea      	bpl.n	800e8f0 <_printf_float+0x194>
 800e91a:	1c4b      	adds	r3, r1, #1
 800e91c:	e7e7      	b.n	800e8ee <_printf_float+0x192>
 800e91e:	2900      	cmp	r1, #0
 800e920:	bfd4      	ite	le
 800e922:	f1c1 0202 	rsble	r2, r1, #2
 800e926:	2201      	movgt	r2, #1
 800e928:	4413      	add	r3, r2
 800e92a:	e7e0      	b.n	800e8ee <_printf_float+0x192>
 800e92c:	6823      	ldr	r3, [r4, #0]
 800e92e:	055a      	lsls	r2, r3, #21
 800e930:	d407      	bmi.n	800e942 <_printf_float+0x1e6>
 800e932:	6923      	ldr	r3, [r4, #16]
 800e934:	4642      	mov	r2, r8
 800e936:	4631      	mov	r1, r6
 800e938:	4628      	mov	r0, r5
 800e93a:	47b8      	blx	r7
 800e93c:	3001      	adds	r0, #1
 800e93e:	d12b      	bne.n	800e998 <_printf_float+0x23c>
 800e940:	e767      	b.n	800e812 <_printf_float+0xb6>
 800e942:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e946:	f240 80dd 	bls.w	800eb04 <_printf_float+0x3a8>
 800e94a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e94e:	2200      	movs	r2, #0
 800e950:	2300      	movs	r3, #0
 800e952:	f7f2 f8d9 	bl	8000b08 <__aeabi_dcmpeq>
 800e956:	2800      	cmp	r0, #0
 800e958:	d033      	beq.n	800e9c2 <_printf_float+0x266>
 800e95a:	4a37      	ldr	r2, [pc, #220]	@ (800ea38 <_printf_float+0x2dc>)
 800e95c:	2301      	movs	r3, #1
 800e95e:	4631      	mov	r1, r6
 800e960:	4628      	mov	r0, r5
 800e962:	47b8      	blx	r7
 800e964:	3001      	adds	r0, #1
 800e966:	f43f af54 	beq.w	800e812 <_printf_float+0xb6>
 800e96a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e96e:	4543      	cmp	r3, r8
 800e970:	db02      	blt.n	800e978 <_printf_float+0x21c>
 800e972:	6823      	ldr	r3, [r4, #0]
 800e974:	07d8      	lsls	r0, r3, #31
 800e976:	d50f      	bpl.n	800e998 <_printf_float+0x23c>
 800e978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e97c:	4631      	mov	r1, r6
 800e97e:	4628      	mov	r0, r5
 800e980:	47b8      	blx	r7
 800e982:	3001      	adds	r0, #1
 800e984:	f43f af45 	beq.w	800e812 <_printf_float+0xb6>
 800e988:	f04f 0900 	mov.w	r9, #0
 800e98c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e990:	f104 0a1a 	add.w	sl, r4, #26
 800e994:	45c8      	cmp	r8, r9
 800e996:	dc09      	bgt.n	800e9ac <_printf_float+0x250>
 800e998:	6823      	ldr	r3, [r4, #0]
 800e99a:	079b      	lsls	r3, r3, #30
 800e99c:	f100 8103 	bmi.w	800eba6 <_printf_float+0x44a>
 800e9a0:	68e0      	ldr	r0, [r4, #12]
 800e9a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9a4:	4298      	cmp	r0, r3
 800e9a6:	bfb8      	it	lt
 800e9a8:	4618      	movlt	r0, r3
 800e9aa:	e734      	b.n	800e816 <_printf_float+0xba>
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	4652      	mov	r2, sl
 800e9b0:	4631      	mov	r1, r6
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	47b8      	blx	r7
 800e9b6:	3001      	adds	r0, #1
 800e9b8:	f43f af2b 	beq.w	800e812 <_printf_float+0xb6>
 800e9bc:	f109 0901 	add.w	r9, r9, #1
 800e9c0:	e7e8      	b.n	800e994 <_printf_float+0x238>
 800e9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	dc39      	bgt.n	800ea3c <_printf_float+0x2e0>
 800e9c8:	4a1b      	ldr	r2, [pc, #108]	@ (800ea38 <_printf_float+0x2dc>)
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	4631      	mov	r1, r6
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	47b8      	blx	r7
 800e9d2:	3001      	adds	r0, #1
 800e9d4:	f43f af1d 	beq.w	800e812 <_printf_float+0xb6>
 800e9d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e9dc:	ea59 0303 	orrs.w	r3, r9, r3
 800e9e0:	d102      	bne.n	800e9e8 <_printf_float+0x28c>
 800e9e2:	6823      	ldr	r3, [r4, #0]
 800e9e4:	07d9      	lsls	r1, r3, #31
 800e9e6:	d5d7      	bpl.n	800e998 <_printf_float+0x23c>
 800e9e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	47b8      	blx	r7
 800e9f2:	3001      	adds	r0, #1
 800e9f4:	f43f af0d 	beq.w	800e812 <_printf_float+0xb6>
 800e9f8:	f04f 0a00 	mov.w	sl, #0
 800e9fc:	f104 0b1a 	add.w	fp, r4, #26
 800ea00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea02:	425b      	negs	r3, r3
 800ea04:	4553      	cmp	r3, sl
 800ea06:	dc01      	bgt.n	800ea0c <_printf_float+0x2b0>
 800ea08:	464b      	mov	r3, r9
 800ea0a:	e793      	b.n	800e934 <_printf_float+0x1d8>
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	465a      	mov	r2, fp
 800ea10:	4631      	mov	r1, r6
 800ea12:	4628      	mov	r0, r5
 800ea14:	47b8      	blx	r7
 800ea16:	3001      	adds	r0, #1
 800ea18:	f43f aefb 	beq.w	800e812 <_printf_float+0xb6>
 800ea1c:	f10a 0a01 	add.w	sl, sl, #1
 800ea20:	e7ee      	b.n	800ea00 <_printf_float+0x2a4>
 800ea22:	bf00      	nop
 800ea24:	7fefffff 	.word	0x7fefffff
 800ea28:	08013e58 	.word	0x08013e58
 800ea2c:	08013e5c 	.word	0x08013e5c
 800ea30:	08013e60 	.word	0x08013e60
 800ea34:	08013e64 	.word	0x08013e64
 800ea38:	08013e68 	.word	0x08013e68
 800ea3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ea3e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ea42:	4553      	cmp	r3, sl
 800ea44:	bfa8      	it	ge
 800ea46:	4653      	movge	r3, sl
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	4699      	mov	r9, r3
 800ea4c:	dc36      	bgt.n	800eabc <_printf_float+0x360>
 800ea4e:	f04f 0b00 	mov.w	fp, #0
 800ea52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea56:	f104 021a 	add.w	r2, r4, #26
 800ea5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ea5c:	9306      	str	r3, [sp, #24]
 800ea5e:	eba3 0309 	sub.w	r3, r3, r9
 800ea62:	455b      	cmp	r3, fp
 800ea64:	dc31      	bgt.n	800eaca <_printf_float+0x36e>
 800ea66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea68:	459a      	cmp	sl, r3
 800ea6a:	dc3a      	bgt.n	800eae2 <_printf_float+0x386>
 800ea6c:	6823      	ldr	r3, [r4, #0]
 800ea6e:	07da      	lsls	r2, r3, #31
 800ea70:	d437      	bmi.n	800eae2 <_printf_float+0x386>
 800ea72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea74:	ebaa 0903 	sub.w	r9, sl, r3
 800ea78:	9b06      	ldr	r3, [sp, #24]
 800ea7a:	ebaa 0303 	sub.w	r3, sl, r3
 800ea7e:	4599      	cmp	r9, r3
 800ea80:	bfa8      	it	ge
 800ea82:	4699      	movge	r9, r3
 800ea84:	f1b9 0f00 	cmp.w	r9, #0
 800ea88:	dc33      	bgt.n	800eaf2 <_printf_float+0x396>
 800ea8a:	f04f 0800 	mov.w	r8, #0
 800ea8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea92:	f104 0b1a 	add.w	fp, r4, #26
 800ea96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea98:	ebaa 0303 	sub.w	r3, sl, r3
 800ea9c:	eba3 0309 	sub.w	r3, r3, r9
 800eaa0:	4543      	cmp	r3, r8
 800eaa2:	f77f af79 	ble.w	800e998 <_printf_float+0x23c>
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	465a      	mov	r2, fp
 800eaaa:	4631      	mov	r1, r6
 800eaac:	4628      	mov	r0, r5
 800eaae:	47b8      	blx	r7
 800eab0:	3001      	adds	r0, #1
 800eab2:	f43f aeae 	beq.w	800e812 <_printf_float+0xb6>
 800eab6:	f108 0801 	add.w	r8, r8, #1
 800eaba:	e7ec      	b.n	800ea96 <_printf_float+0x33a>
 800eabc:	4642      	mov	r2, r8
 800eabe:	4631      	mov	r1, r6
 800eac0:	4628      	mov	r0, r5
 800eac2:	47b8      	blx	r7
 800eac4:	3001      	adds	r0, #1
 800eac6:	d1c2      	bne.n	800ea4e <_printf_float+0x2f2>
 800eac8:	e6a3      	b.n	800e812 <_printf_float+0xb6>
 800eaca:	2301      	movs	r3, #1
 800eacc:	4631      	mov	r1, r6
 800eace:	4628      	mov	r0, r5
 800ead0:	9206      	str	r2, [sp, #24]
 800ead2:	47b8      	blx	r7
 800ead4:	3001      	adds	r0, #1
 800ead6:	f43f ae9c 	beq.w	800e812 <_printf_float+0xb6>
 800eada:	9a06      	ldr	r2, [sp, #24]
 800eadc:	f10b 0b01 	add.w	fp, fp, #1
 800eae0:	e7bb      	b.n	800ea5a <_printf_float+0x2fe>
 800eae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eae6:	4631      	mov	r1, r6
 800eae8:	4628      	mov	r0, r5
 800eaea:	47b8      	blx	r7
 800eaec:	3001      	adds	r0, #1
 800eaee:	d1c0      	bne.n	800ea72 <_printf_float+0x316>
 800eaf0:	e68f      	b.n	800e812 <_printf_float+0xb6>
 800eaf2:	9a06      	ldr	r2, [sp, #24]
 800eaf4:	464b      	mov	r3, r9
 800eaf6:	4442      	add	r2, r8
 800eaf8:	4631      	mov	r1, r6
 800eafa:	4628      	mov	r0, r5
 800eafc:	47b8      	blx	r7
 800eafe:	3001      	adds	r0, #1
 800eb00:	d1c3      	bne.n	800ea8a <_printf_float+0x32e>
 800eb02:	e686      	b.n	800e812 <_printf_float+0xb6>
 800eb04:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb08:	f1ba 0f01 	cmp.w	sl, #1
 800eb0c:	dc01      	bgt.n	800eb12 <_printf_float+0x3b6>
 800eb0e:	07db      	lsls	r3, r3, #31
 800eb10:	d536      	bpl.n	800eb80 <_printf_float+0x424>
 800eb12:	2301      	movs	r3, #1
 800eb14:	4642      	mov	r2, r8
 800eb16:	4631      	mov	r1, r6
 800eb18:	4628      	mov	r0, r5
 800eb1a:	47b8      	blx	r7
 800eb1c:	3001      	adds	r0, #1
 800eb1e:	f43f ae78 	beq.w	800e812 <_printf_float+0xb6>
 800eb22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb26:	4631      	mov	r1, r6
 800eb28:	4628      	mov	r0, r5
 800eb2a:	47b8      	blx	r7
 800eb2c:	3001      	adds	r0, #1
 800eb2e:	f43f ae70 	beq.w	800e812 <_printf_float+0xb6>
 800eb32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eb36:	2200      	movs	r2, #0
 800eb38:	2300      	movs	r3, #0
 800eb3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb3e:	f7f1 ffe3 	bl	8000b08 <__aeabi_dcmpeq>
 800eb42:	b9c0      	cbnz	r0, 800eb76 <_printf_float+0x41a>
 800eb44:	4653      	mov	r3, sl
 800eb46:	f108 0201 	add.w	r2, r8, #1
 800eb4a:	4631      	mov	r1, r6
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	47b8      	blx	r7
 800eb50:	3001      	adds	r0, #1
 800eb52:	d10c      	bne.n	800eb6e <_printf_float+0x412>
 800eb54:	e65d      	b.n	800e812 <_printf_float+0xb6>
 800eb56:	2301      	movs	r3, #1
 800eb58:	465a      	mov	r2, fp
 800eb5a:	4631      	mov	r1, r6
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	47b8      	blx	r7
 800eb60:	3001      	adds	r0, #1
 800eb62:	f43f ae56 	beq.w	800e812 <_printf_float+0xb6>
 800eb66:	f108 0801 	add.w	r8, r8, #1
 800eb6a:	45d0      	cmp	r8, sl
 800eb6c:	dbf3      	blt.n	800eb56 <_printf_float+0x3fa>
 800eb6e:	464b      	mov	r3, r9
 800eb70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eb74:	e6df      	b.n	800e936 <_printf_float+0x1da>
 800eb76:	f04f 0800 	mov.w	r8, #0
 800eb7a:	f104 0b1a 	add.w	fp, r4, #26
 800eb7e:	e7f4      	b.n	800eb6a <_printf_float+0x40e>
 800eb80:	2301      	movs	r3, #1
 800eb82:	4642      	mov	r2, r8
 800eb84:	e7e1      	b.n	800eb4a <_printf_float+0x3ee>
 800eb86:	2301      	movs	r3, #1
 800eb88:	464a      	mov	r2, r9
 800eb8a:	4631      	mov	r1, r6
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	47b8      	blx	r7
 800eb90:	3001      	adds	r0, #1
 800eb92:	f43f ae3e 	beq.w	800e812 <_printf_float+0xb6>
 800eb96:	f108 0801 	add.w	r8, r8, #1
 800eb9a:	68e3      	ldr	r3, [r4, #12]
 800eb9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eb9e:	1a5b      	subs	r3, r3, r1
 800eba0:	4543      	cmp	r3, r8
 800eba2:	dcf0      	bgt.n	800eb86 <_printf_float+0x42a>
 800eba4:	e6fc      	b.n	800e9a0 <_printf_float+0x244>
 800eba6:	f04f 0800 	mov.w	r8, #0
 800ebaa:	f104 0919 	add.w	r9, r4, #25
 800ebae:	e7f4      	b.n	800eb9a <_printf_float+0x43e>

0800ebb0 <_printf_common>:
 800ebb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebb4:	4616      	mov	r6, r2
 800ebb6:	4698      	mov	r8, r3
 800ebb8:	688a      	ldr	r2, [r1, #8]
 800ebba:	690b      	ldr	r3, [r1, #16]
 800ebbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	bfb8      	it	lt
 800ebc4:	4613      	movlt	r3, r2
 800ebc6:	6033      	str	r3, [r6, #0]
 800ebc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ebcc:	4607      	mov	r7, r0
 800ebce:	460c      	mov	r4, r1
 800ebd0:	b10a      	cbz	r2, 800ebd6 <_printf_common+0x26>
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	6033      	str	r3, [r6, #0]
 800ebd6:	6823      	ldr	r3, [r4, #0]
 800ebd8:	0699      	lsls	r1, r3, #26
 800ebda:	bf42      	ittt	mi
 800ebdc:	6833      	ldrmi	r3, [r6, #0]
 800ebde:	3302      	addmi	r3, #2
 800ebe0:	6033      	strmi	r3, [r6, #0]
 800ebe2:	6825      	ldr	r5, [r4, #0]
 800ebe4:	f015 0506 	ands.w	r5, r5, #6
 800ebe8:	d106      	bne.n	800ebf8 <_printf_common+0x48>
 800ebea:	f104 0a19 	add.w	sl, r4, #25
 800ebee:	68e3      	ldr	r3, [r4, #12]
 800ebf0:	6832      	ldr	r2, [r6, #0]
 800ebf2:	1a9b      	subs	r3, r3, r2
 800ebf4:	42ab      	cmp	r3, r5
 800ebf6:	dc26      	bgt.n	800ec46 <_printf_common+0x96>
 800ebf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ebfc:	6822      	ldr	r2, [r4, #0]
 800ebfe:	3b00      	subs	r3, #0
 800ec00:	bf18      	it	ne
 800ec02:	2301      	movne	r3, #1
 800ec04:	0692      	lsls	r2, r2, #26
 800ec06:	d42b      	bmi.n	800ec60 <_printf_common+0xb0>
 800ec08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec0c:	4641      	mov	r1, r8
 800ec0e:	4638      	mov	r0, r7
 800ec10:	47c8      	blx	r9
 800ec12:	3001      	adds	r0, #1
 800ec14:	d01e      	beq.n	800ec54 <_printf_common+0xa4>
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	6922      	ldr	r2, [r4, #16]
 800ec1a:	f003 0306 	and.w	r3, r3, #6
 800ec1e:	2b04      	cmp	r3, #4
 800ec20:	bf02      	ittt	eq
 800ec22:	68e5      	ldreq	r5, [r4, #12]
 800ec24:	6833      	ldreq	r3, [r6, #0]
 800ec26:	1aed      	subeq	r5, r5, r3
 800ec28:	68a3      	ldr	r3, [r4, #8]
 800ec2a:	bf0c      	ite	eq
 800ec2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec30:	2500      	movne	r5, #0
 800ec32:	4293      	cmp	r3, r2
 800ec34:	bfc4      	itt	gt
 800ec36:	1a9b      	subgt	r3, r3, r2
 800ec38:	18ed      	addgt	r5, r5, r3
 800ec3a:	2600      	movs	r6, #0
 800ec3c:	341a      	adds	r4, #26
 800ec3e:	42b5      	cmp	r5, r6
 800ec40:	d11a      	bne.n	800ec78 <_printf_common+0xc8>
 800ec42:	2000      	movs	r0, #0
 800ec44:	e008      	b.n	800ec58 <_printf_common+0xa8>
 800ec46:	2301      	movs	r3, #1
 800ec48:	4652      	mov	r2, sl
 800ec4a:	4641      	mov	r1, r8
 800ec4c:	4638      	mov	r0, r7
 800ec4e:	47c8      	blx	r9
 800ec50:	3001      	adds	r0, #1
 800ec52:	d103      	bne.n	800ec5c <_printf_common+0xac>
 800ec54:	f04f 30ff 	mov.w	r0, #4294967295
 800ec58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec5c:	3501      	adds	r5, #1
 800ec5e:	e7c6      	b.n	800ebee <_printf_common+0x3e>
 800ec60:	18e1      	adds	r1, r4, r3
 800ec62:	1c5a      	adds	r2, r3, #1
 800ec64:	2030      	movs	r0, #48	@ 0x30
 800ec66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ec6a:	4422      	add	r2, r4
 800ec6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ec70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ec74:	3302      	adds	r3, #2
 800ec76:	e7c7      	b.n	800ec08 <_printf_common+0x58>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	4622      	mov	r2, r4
 800ec7c:	4641      	mov	r1, r8
 800ec7e:	4638      	mov	r0, r7
 800ec80:	47c8      	blx	r9
 800ec82:	3001      	adds	r0, #1
 800ec84:	d0e6      	beq.n	800ec54 <_printf_common+0xa4>
 800ec86:	3601      	adds	r6, #1
 800ec88:	e7d9      	b.n	800ec3e <_printf_common+0x8e>
	...

0800ec8c <_printf_i>:
 800ec8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec90:	7e0f      	ldrb	r7, [r1, #24]
 800ec92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec94:	2f78      	cmp	r7, #120	@ 0x78
 800ec96:	4691      	mov	r9, r2
 800ec98:	4680      	mov	r8, r0
 800ec9a:	460c      	mov	r4, r1
 800ec9c:	469a      	mov	sl, r3
 800ec9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eca2:	d807      	bhi.n	800ecb4 <_printf_i+0x28>
 800eca4:	2f62      	cmp	r7, #98	@ 0x62
 800eca6:	d80a      	bhi.n	800ecbe <_printf_i+0x32>
 800eca8:	2f00      	cmp	r7, #0
 800ecaa:	f000 80d2 	beq.w	800ee52 <_printf_i+0x1c6>
 800ecae:	2f58      	cmp	r7, #88	@ 0x58
 800ecb0:	f000 80b9 	beq.w	800ee26 <_printf_i+0x19a>
 800ecb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ecb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ecbc:	e03a      	b.n	800ed34 <_printf_i+0xa8>
 800ecbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ecc2:	2b15      	cmp	r3, #21
 800ecc4:	d8f6      	bhi.n	800ecb4 <_printf_i+0x28>
 800ecc6:	a101      	add	r1, pc, #4	@ (adr r1, 800eccc <_printf_i+0x40>)
 800ecc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eccc:	0800ed25 	.word	0x0800ed25
 800ecd0:	0800ed39 	.word	0x0800ed39
 800ecd4:	0800ecb5 	.word	0x0800ecb5
 800ecd8:	0800ecb5 	.word	0x0800ecb5
 800ecdc:	0800ecb5 	.word	0x0800ecb5
 800ece0:	0800ecb5 	.word	0x0800ecb5
 800ece4:	0800ed39 	.word	0x0800ed39
 800ece8:	0800ecb5 	.word	0x0800ecb5
 800ecec:	0800ecb5 	.word	0x0800ecb5
 800ecf0:	0800ecb5 	.word	0x0800ecb5
 800ecf4:	0800ecb5 	.word	0x0800ecb5
 800ecf8:	0800ee39 	.word	0x0800ee39
 800ecfc:	0800ed63 	.word	0x0800ed63
 800ed00:	0800edf3 	.word	0x0800edf3
 800ed04:	0800ecb5 	.word	0x0800ecb5
 800ed08:	0800ecb5 	.word	0x0800ecb5
 800ed0c:	0800ee5b 	.word	0x0800ee5b
 800ed10:	0800ecb5 	.word	0x0800ecb5
 800ed14:	0800ed63 	.word	0x0800ed63
 800ed18:	0800ecb5 	.word	0x0800ecb5
 800ed1c:	0800ecb5 	.word	0x0800ecb5
 800ed20:	0800edfb 	.word	0x0800edfb
 800ed24:	6833      	ldr	r3, [r6, #0]
 800ed26:	1d1a      	adds	r2, r3, #4
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	6032      	str	r2, [r6, #0]
 800ed2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ed34:	2301      	movs	r3, #1
 800ed36:	e09d      	b.n	800ee74 <_printf_i+0x1e8>
 800ed38:	6833      	ldr	r3, [r6, #0]
 800ed3a:	6820      	ldr	r0, [r4, #0]
 800ed3c:	1d19      	adds	r1, r3, #4
 800ed3e:	6031      	str	r1, [r6, #0]
 800ed40:	0606      	lsls	r6, r0, #24
 800ed42:	d501      	bpl.n	800ed48 <_printf_i+0xbc>
 800ed44:	681d      	ldr	r5, [r3, #0]
 800ed46:	e003      	b.n	800ed50 <_printf_i+0xc4>
 800ed48:	0645      	lsls	r5, r0, #25
 800ed4a:	d5fb      	bpl.n	800ed44 <_printf_i+0xb8>
 800ed4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ed50:	2d00      	cmp	r5, #0
 800ed52:	da03      	bge.n	800ed5c <_printf_i+0xd0>
 800ed54:	232d      	movs	r3, #45	@ 0x2d
 800ed56:	426d      	negs	r5, r5
 800ed58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed5c:	4859      	ldr	r0, [pc, #356]	@ (800eec4 <_printf_i+0x238>)
 800ed5e:	230a      	movs	r3, #10
 800ed60:	e011      	b.n	800ed86 <_printf_i+0xfa>
 800ed62:	6821      	ldr	r1, [r4, #0]
 800ed64:	6833      	ldr	r3, [r6, #0]
 800ed66:	0608      	lsls	r0, r1, #24
 800ed68:	f853 5b04 	ldr.w	r5, [r3], #4
 800ed6c:	d402      	bmi.n	800ed74 <_printf_i+0xe8>
 800ed6e:	0649      	lsls	r1, r1, #25
 800ed70:	bf48      	it	mi
 800ed72:	b2ad      	uxthmi	r5, r5
 800ed74:	2f6f      	cmp	r7, #111	@ 0x6f
 800ed76:	4853      	ldr	r0, [pc, #332]	@ (800eec4 <_printf_i+0x238>)
 800ed78:	6033      	str	r3, [r6, #0]
 800ed7a:	bf14      	ite	ne
 800ed7c:	230a      	movne	r3, #10
 800ed7e:	2308      	moveq	r3, #8
 800ed80:	2100      	movs	r1, #0
 800ed82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ed86:	6866      	ldr	r6, [r4, #4]
 800ed88:	60a6      	str	r6, [r4, #8]
 800ed8a:	2e00      	cmp	r6, #0
 800ed8c:	bfa2      	ittt	ge
 800ed8e:	6821      	ldrge	r1, [r4, #0]
 800ed90:	f021 0104 	bicge.w	r1, r1, #4
 800ed94:	6021      	strge	r1, [r4, #0]
 800ed96:	b90d      	cbnz	r5, 800ed9c <_printf_i+0x110>
 800ed98:	2e00      	cmp	r6, #0
 800ed9a:	d04b      	beq.n	800ee34 <_printf_i+0x1a8>
 800ed9c:	4616      	mov	r6, r2
 800ed9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800eda2:	fb03 5711 	mls	r7, r3, r1, r5
 800eda6:	5dc7      	ldrb	r7, [r0, r7]
 800eda8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800edac:	462f      	mov	r7, r5
 800edae:	42bb      	cmp	r3, r7
 800edb0:	460d      	mov	r5, r1
 800edb2:	d9f4      	bls.n	800ed9e <_printf_i+0x112>
 800edb4:	2b08      	cmp	r3, #8
 800edb6:	d10b      	bne.n	800edd0 <_printf_i+0x144>
 800edb8:	6823      	ldr	r3, [r4, #0]
 800edba:	07df      	lsls	r7, r3, #31
 800edbc:	d508      	bpl.n	800edd0 <_printf_i+0x144>
 800edbe:	6923      	ldr	r3, [r4, #16]
 800edc0:	6861      	ldr	r1, [r4, #4]
 800edc2:	4299      	cmp	r1, r3
 800edc4:	bfde      	ittt	le
 800edc6:	2330      	movle	r3, #48	@ 0x30
 800edc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800edcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800edd0:	1b92      	subs	r2, r2, r6
 800edd2:	6122      	str	r2, [r4, #16]
 800edd4:	f8cd a000 	str.w	sl, [sp]
 800edd8:	464b      	mov	r3, r9
 800edda:	aa03      	add	r2, sp, #12
 800eddc:	4621      	mov	r1, r4
 800edde:	4640      	mov	r0, r8
 800ede0:	f7ff fee6 	bl	800ebb0 <_printf_common>
 800ede4:	3001      	adds	r0, #1
 800ede6:	d14a      	bne.n	800ee7e <_printf_i+0x1f2>
 800ede8:	f04f 30ff 	mov.w	r0, #4294967295
 800edec:	b004      	add	sp, #16
 800edee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edf2:	6823      	ldr	r3, [r4, #0]
 800edf4:	f043 0320 	orr.w	r3, r3, #32
 800edf8:	6023      	str	r3, [r4, #0]
 800edfa:	4833      	ldr	r0, [pc, #204]	@ (800eec8 <_printf_i+0x23c>)
 800edfc:	2778      	movs	r7, #120	@ 0x78
 800edfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee02:	6823      	ldr	r3, [r4, #0]
 800ee04:	6831      	ldr	r1, [r6, #0]
 800ee06:	061f      	lsls	r7, r3, #24
 800ee08:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee0c:	d402      	bmi.n	800ee14 <_printf_i+0x188>
 800ee0e:	065f      	lsls	r7, r3, #25
 800ee10:	bf48      	it	mi
 800ee12:	b2ad      	uxthmi	r5, r5
 800ee14:	6031      	str	r1, [r6, #0]
 800ee16:	07d9      	lsls	r1, r3, #31
 800ee18:	bf44      	itt	mi
 800ee1a:	f043 0320 	orrmi.w	r3, r3, #32
 800ee1e:	6023      	strmi	r3, [r4, #0]
 800ee20:	b11d      	cbz	r5, 800ee2a <_printf_i+0x19e>
 800ee22:	2310      	movs	r3, #16
 800ee24:	e7ac      	b.n	800ed80 <_printf_i+0xf4>
 800ee26:	4827      	ldr	r0, [pc, #156]	@ (800eec4 <_printf_i+0x238>)
 800ee28:	e7e9      	b.n	800edfe <_printf_i+0x172>
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	f023 0320 	bic.w	r3, r3, #32
 800ee30:	6023      	str	r3, [r4, #0]
 800ee32:	e7f6      	b.n	800ee22 <_printf_i+0x196>
 800ee34:	4616      	mov	r6, r2
 800ee36:	e7bd      	b.n	800edb4 <_printf_i+0x128>
 800ee38:	6833      	ldr	r3, [r6, #0]
 800ee3a:	6825      	ldr	r5, [r4, #0]
 800ee3c:	6961      	ldr	r1, [r4, #20]
 800ee3e:	1d18      	adds	r0, r3, #4
 800ee40:	6030      	str	r0, [r6, #0]
 800ee42:	062e      	lsls	r6, r5, #24
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	d501      	bpl.n	800ee4c <_printf_i+0x1c0>
 800ee48:	6019      	str	r1, [r3, #0]
 800ee4a:	e002      	b.n	800ee52 <_printf_i+0x1c6>
 800ee4c:	0668      	lsls	r0, r5, #25
 800ee4e:	d5fb      	bpl.n	800ee48 <_printf_i+0x1bc>
 800ee50:	8019      	strh	r1, [r3, #0]
 800ee52:	2300      	movs	r3, #0
 800ee54:	6123      	str	r3, [r4, #16]
 800ee56:	4616      	mov	r6, r2
 800ee58:	e7bc      	b.n	800edd4 <_printf_i+0x148>
 800ee5a:	6833      	ldr	r3, [r6, #0]
 800ee5c:	1d1a      	adds	r2, r3, #4
 800ee5e:	6032      	str	r2, [r6, #0]
 800ee60:	681e      	ldr	r6, [r3, #0]
 800ee62:	6862      	ldr	r2, [r4, #4]
 800ee64:	2100      	movs	r1, #0
 800ee66:	4630      	mov	r0, r6
 800ee68:	f7f1 f9d2 	bl	8000210 <memchr>
 800ee6c:	b108      	cbz	r0, 800ee72 <_printf_i+0x1e6>
 800ee6e:	1b80      	subs	r0, r0, r6
 800ee70:	6060      	str	r0, [r4, #4]
 800ee72:	6863      	ldr	r3, [r4, #4]
 800ee74:	6123      	str	r3, [r4, #16]
 800ee76:	2300      	movs	r3, #0
 800ee78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee7c:	e7aa      	b.n	800edd4 <_printf_i+0x148>
 800ee7e:	6923      	ldr	r3, [r4, #16]
 800ee80:	4632      	mov	r2, r6
 800ee82:	4649      	mov	r1, r9
 800ee84:	4640      	mov	r0, r8
 800ee86:	47d0      	blx	sl
 800ee88:	3001      	adds	r0, #1
 800ee8a:	d0ad      	beq.n	800ede8 <_printf_i+0x15c>
 800ee8c:	6823      	ldr	r3, [r4, #0]
 800ee8e:	079b      	lsls	r3, r3, #30
 800ee90:	d413      	bmi.n	800eeba <_printf_i+0x22e>
 800ee92:	68e0      	ldr	r0, [r4, #12]
 800ee94:	9b03      	ldr	r3, [sp, #12]
 800ee96:	4298      	cmp	r0, r3
 800ee98:	bfb8      	it	lt
 800ee9a:	4618      	movlt	r0, r3
 800ee9c:	e7a6      	b.n	800edec <_printf_i+0x160>
 800ee9e:	2301      	movs	r3, #1
 800eea0:	4632      	mov	r2, r6
 800eea2:	4649      	mov	r1, r9
 800eea4:	4640      	mov	r0, r8
 800eea6:	47d0      	blx	sl
 800eea8:	3001      	adds	r0, #1
 800eeaa:	d09d      	beq.n	800ede8 <_printf_i+0x15c>
 800eeac:	3501      	adds	r5, #1
 800eeae:	68e3      	ldr	r3, [r4, #12]
 800eeb0:	9903      	ldr	r1, [sp, #12]
 800eeb2:	1a5b      	subs	r3, r3, r1
 800eeb4:	42ab      	cmp	r3, r5
 800eeb6:	dcf2      	bgt.n	800ee9e <_printf_i+0x212>
 800eeb8:	e7eb      	b.n	800ee92 <_printf_i+0x206>
 800eeba:	2500      	movs	r5, #0
 800eebc:	f104 0619 	add.w	r6, r4, #25
 800eec0:	e7f5      	b.n	800eeae <_printf_i+0x222>
 800eec2:	bf00      	nop
 800eec4:	08013e6a 	.word	0x08013e6a
 800eec8:	08013e7b 	.word	0x08013e7b

0800eecc <_scanf_float>:
 800eecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed0:	b087      	sub	sp, #28
 800eed2:	4617      	mov	r7, r2
 800eed4:	9303      	str	r3, [sp, #12]
 800eed6:	688b      	ldr	r3, [r1, #8]
 800eed8:	1e5a      	subs	r2, r3, #1
 800eeda:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800eede:	bf81      	itttt	hi
 800eee0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800eee4:	eb03 0b05 	addhi.w	fp, r3, r5
 800eee8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800eeec:	608b      	strhi	r3, [r1, #8]
 800eeee:	680b      	ldr	r3, [r1, #0]
 800eef0:	460a      	mov	r2, r1
 800eef2:	f04f 0500 	mov.w	r5, #0
 800eef6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800eefa:	f842 3b1c 	str.w	r3, [r2], #28
 800eefe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ef02:	4680      	mov	r8, r0
 800ef04:	460c      	mov	r4, r1
 800ef06:	bf98      	it	ls
 800ef08:	f04f 0b00 	movls.w	fp, #0
 800ef0c:	9201      	str	r2, [sp, #4]
 800ef0e:	4616      	mov	r6, r2
 800ef10:	46aa      	mov	sl, r5
 800ef12:	46a9      	mov	r9, r5
 800ef14:	9502      	str	r5, [sp, #8]
 800ef16:	68a2      	ldr	r2, [r4, #8]
 800ef18:	b152      	cbz	r2, 800ef30 <_scanf_float+0x64>
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	2b4e      	cmp	r3, #78	@ 0x4e
 800ef20:	d864      	bhi.n	800efec <_scanf_float+0x120>
 800ef22:	2b40      	cmp	r3, #64	@ 0x40
 800ef24:	d83c      	bhi.n	800efa0 <_scanf_float+0xd4>
 800ef26:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ef2a:	b2c8      	uxtb	r0, r1
 800ef2c:	280e      	cmp	r0, #14
 800ef2e:	d93a      	bls.n	800efa6 <_scanf_float+0xda>
 800ef30:	f1b9 0f00 	cmp.w	r9, #0
 800ef34:	d003      	beq.n	800ef3e <_scanf_float+0x72>
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef3c:	6023      	str	r3, [r4, #0]
 800ef3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef42:	f1ba 0f01 	cmp.w	sl, #1
 800ef46:	f200 8117 	bhi.w	800f178 <_scanf_float+0x2ac>
 800ef4a:	9b01      	ldr	r3, [sp, #4]
 800ef4c:	429e      	cmp	r6, r3
 800ef4e:	f200 8108 	bhi.w	800f162 <_scanf_float+0x296>
 800ef52:	2001      	movs	r0, #1
 800ef54:	b007      	add	sp, #28
 800ef56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef5a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ef5e:	2a0d      	cmp	r2, #13
 800ef60:	d8e6      	bhi.n	800ef30 <_scanf_float+0x64>
 800ef62:	a101      	add	r1, pc, #4	@ (adr r1, 800ef68 <_scanf_float+0x9c>)
 800ef64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ef68:	0800f0af 	.word	0x0800f0af
 800ef6c:	0800ef31 	.word	0x0800ef31
 800ef70:	0800ef31 	.word	0x0800ef31
 800ef74:	0800ef31 	.word	0x0800ef31
 800ef78:	0800f10f 	.word	0x0800f10f
 800ef7c:	0800f0e7 	.word	0x0800f0e7
 800ef80:	0800ef31 	.word	0x0800ef31
 800ef84:	0800ef31 	.word	0x0800ef31
 800ef88:	0800f0bd 	.word	0x0800f0bd
 800ef8c:	0800ef31 	.word	0x0800ef31
 800ef90:	0800ef31 	.word	0x0800ef31
 800ef94:	0800ef31 	.word	0x0800ef31
 800ef98:	0800ef31 	.word	0x0800ef31
 800ef9c:	0800f075 	.word	0x0800f075
 800efa0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800efa4:	e7db      	b.n	800ef5e <_scanf_float+0x92>
 800efa6:	290e      	cmp	r1, #14
 800efa8:	d8c2      	bhi.n	800ef30 <_scanf_float+0x64>
 800efaa:	a001      	add	r0, pc, #4	@ (adr r0, 800efb0 <_scanf_float+0xe4>)
 800efac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800efb0:	0800f065 	.word	0x0800f065
 800efb4:	0800ef31 	.word	0x0800ef31
 800efb8:	0800f065 	.word	0x0800f065
 800efbc:	0800f0fb 	.word	0x0800f0fb
 800efc0:	0800ef31 	.word	0x0800ef31
 800efc4:	0800f00d 	.word	0x0800f00d
 800efc8:	0800f04b 	.word	0x0800f04b
 800efcc:	0800f04b 	.word	0x0800f04b
 800efd0:	0800f04b 	.word	0x0800f04b
 800efd4:	0800f04b 	.word	0x0800f04b
 800efd8:	0800f04b 	.word	0x0800f04b
 800efdc:	0800f04b 	.word	0x0800f04b
 800efe0:	0800f04b 	.word	0x0800f04b
 800efe4:	0800f04b 	.word	0x0800f04b
 800efe8:	0800f04b 	.word	0x0800f04b
 800efec:	2b6e      	cmp	r3, #110	@ 0x6e
 800efee:	d809      	bhi.n	800f004 <_scanf_float+0x138>
 800eff0:	2b60      	cmp	r3, #96	@ 0x60
 800eff2:	d8b2      	bhi.n	800ef5a <_scanf_float+0x8e>
 800eff4:	2b54      	cmp	r3, #84	@ 0x54
 800eff6:	d07b      	beq.n	800f0f0 <_scanf_float+0x224>
 800eff8:	2b59      	cmp	r3, #89	@ 0x59
 800effa:	d199      	bne.n	800ef30 <_scanf_float+0x64>
 800effc:	2d07      	cmp	r5, #7
 800effe:	d197      	bne.n	800ef30 <_scanf_float+0x64>
 800f000:	2508      	movs	r5, #8
 800f002:	e02c      	b.n	800f05e <_scanf_float+0x192>
 800f004:	2b74      	cmp	r3, #116	@ 0x74
 800f006:	d073      	beq.n	800f0f0 <_scanf_float+0x224>
 800f008:	2b79      	cmp	r3, #121	@ 0x79
 800f00a:	e7f6      	b.n	800effa <_scanf_float+0x12e>
 800f00c:	6821      	ldr	r1, [r4, #0]
 800f00e:	05c8      	lsls	r0, r1, #23
 800f010:	d51b      	bpl.n	800f04a <_scanf_float+0x17e>
 800f012:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f016:	6021      	str	r1, [r4, #0]
 800f018:	f109 0901 	add.w	r9, r9, #1
 800f01c:	f1bb 0f00 	cmp.w	fp, #0
 800f020:	d003      	beq.n	800f02a <_scanf_float+0x15e>
 800f022:	3201      	adds	r2, #1
 800f024:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f028:	60a2      	str	r2, [r4, #8]
 800f02a:	68a3      	ldr	r3, [r4, #8]
 800f02c:	3b01      	subs	r3, #1
 800f02e:	60a3      	str	r3, [r4, #8]
 800f030:	6923      	ldr	r3, [r4, #16]
 800f032:	3301      	adds	r3, #1
 800f034:	6123      	str	r3, [r4, #16]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	3b01      	subs	r3, #1
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	607b      	str	r3, [r7, #4]
 800f03e:	f340 8087 	ble.w	800f150 <_scanf_float+0x284>
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	3301      	adds	r3, #1
 800f046:	603b      	str	r3, [r7, #0]
 800f048:	e765      	b.n	800ef16 <_scanf_float+0x4a>
 800f04a:	eb1a 0105 	adds.w	r1, sl, r5
 800f04e:	f47f af6f 	bne.w	800ef30 <_scanf_float+0x64>
 800f052:	6822      	ldr	r2, [r4, #0]
 800f054:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f058:	6022      	str	r2, [r4, #0]
 800f05a:	460d      	mov	r5, r1
 800f05c:	468a      	mov	sl, r1
 800f05e:	f806 3b01 	strb.w	r3, [r6], #1
 800f062:	e7e2      	b.n	800f02a <_scanf_float+0x15e>
 800f064:	6822      	ldr	r2, [r4, #0]
 800f066:	0610      	lsls	r0, r2, #24
 800f068:	f57f af62 	bpl.w	800ef30 <_scanf_float+0x64>
 800f06c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f070:	6022      	str	r2, [r4, #0]
 800f072:	e7f4      	b.n	800f05e <_scanf_float+0x192>
 800f074:	f1ba 0f00 	cmp.w	sl, #0
 800f078:	d10e      	bne.n	800f098 <_scanf_float+0x1cc>
 800f07a:	f1b9 0f00 	cmp.w	r9, #0
 800f07e:	d10e      	bne.n	800f09e <_scanf_float+0x1d2>
 800f080:	6822      	ldr	r2, [r4, #0]
 800f082:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f086:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f08a:	d108      	bne.n	800f09e <_scanf_float+0x1d2>
 800f08c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f090:	6022      	str	r2, [r4, #0]
 800f092:	f04f 0a01 	mov.w	sl, #1
 800f096:	e7e2      	b.n	800f05e <_scanf_float+0x192>
 800f098:	f1ba 0f02 	cmp.w	sl, #2
 800f09c:	d055      	beq.n	800f14a <_scanf_float+0x27e>
 800f09e:	2d01      	cmp	r5, #1
 800f0a0:	d002      	beq.n	800f0a8 <_scanf_float+0x1dc>
 800f0a2:	2d04      	cmp	r5, #4
 800f0a4:	f47f af44 	bne.w	800ef30 <_scanf_float+0x64>
 800f0a8:	3501      	adds	r5, #1
 800f0aa:	b2ed      	uxtb	r5, r5
 800f0ac:	e7d7      	b.n	800f05e <_scanf_float+0x192>
 800f0ae:	f1ba 0f01 	cmp.w	sl, #1
 800f0b2:	f47f af3d 	bne.w	800ef30 <_scanf_float+0x64>
 800f0b6:	f04f 0a02 	mov.w	sl, #2
 800f0ba:	e7d0      	b.n	800f05e <_scanf_float+0x192>
 800f0bc:	b97d      	cbnz	r5, 800f0de <_scanf_float+0x212>
 800f0be:	f1b9 0f00 	cmp.w	r9, #0
 800f0c2:	f47f af38 	bne.w	800ef36 <_scanf_float+0x6a>
 800f0c6:	6822      	ldr	r2, [r4, #0]
 800f0c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f0cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f0d0:	f040 8108 	bne.w	800f2e4 <_scanf_float+0x418>
 800f0d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f0d8:	6022      	str	r2, [r4, #0]
 800f0da:	2501      	movs	r5, #1
 800f0dc:	e7bf      	b.n	800f05e <_scanf_float+0x192>
 800f0de:	2d03      	cmp	r5, #3
 800f0e0:	d0e2      	beq.n	800f0a8 <_scanf_float+0x1dc>
 800f0e2:	2d05      	cmp	r5, #5
 800f0e4:	e7de      	b.n	800f0a4 <_scanf_float+0x1d8>
 800f0e6:	2d02      	cmp	r5, #2
 800f0e8:	f47f af22 	bne.w	800ef30 <_scanf_float+0x64>
 800f0ec:	2503      	movs	r5, #3
 800f0ee:	e7b6      	b.n	800f05e <_scanf_float+0x192>
 800f0f0:	2d06      	cmp	r5, #6
 800f0f2:	f47f af1d 	bne.w	800ef30 <_scanf_float+0x64>
 800f0f6:	2507      	movs	r5, #7
 800f0f8:	e7b1      	b.n	800f05e <_scanf_float+0x192>
 800f0fa:	6822      	ldr	r2, [r4, #0]
 800f0fc:	0591      	lsls	r1, r2, #22
 800f0fe:	f57f af17 	bpl.w	800ef30 <_scanf_float+0x64>
 800f102:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f106:	6022      	str	r2, [r4, #0]
 800f108:	f8cd 9008 	str.w	r9, [sp, #8]
 800f10c:	e7a7      	b.n	800f05e <_scanf_float+0x192>
 800f10e:	6822      	ldr	r2, [r4, #0]
 800f110:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f114:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f118:	d006      	beq.n	800f128 <_scanf_float+0x25c>
 800f11a:	0550      	lsls	r0, r2, #21
 800f11c:	f57f af08 	bpl.w	800ef30 <_scanf_float+0x64>
 800f120:	f1b9 0f00 	cmp.w	r9, #0
 800f124:	f000 80de 	beq.w	800f2e4 <_scanf_float+0x418>
 800f128:	0591      	lsls	r1, r2, #22
 800f12a:	bf58      	it	pl
 800f12c:	9902      	ldrpl	r1, [sp, #8]
 800f12e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f132:	bf58      	it	pl
 800f134:	eba9 0101 	subpl.w	r1, r9, r1
 800f138:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f13c:	bf58      	it	pl
 800f13e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f142:	6022      	str	r2, [r4, #0]
 800f144:	f04f 0900 	mov.w	r9, #0
 800f148:	e789      	b.n	800f05e <_scanf_float+0x192>
 800f14a:	f04f 0a03 	mov.w	sl, #3
 800f14e:	e786      	b.n	800f05e <_scanf_float+0x192>
 800f150:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f154:	4639      	mov	r1, r7
 800f156:	4640      	mov	r0, r8
 800f158:	4798      	blx	r3
 800f15a:	2800      	cmp	r0, #0
 800f15c:	f43f aedb 	beq.w	800ef16 <_scanf_float+0x4a>
 800f160:	e6e6      	b.n	800ef30 <_scanf_float+0x64>
 800f162:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f166:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f16a:	463a      	mov	r2, r7
 800f16c:	4640      	mov	r0, r8
 800f16e:	4798      	blx	r3
 800f170:	6923      	ldr	r3, [r4, #16]
 800f172:	3b01      	subs	r3, #1
 800f174:	6123      	str	r3, [r4, #16]
 800f176:	e6e8      	b.n	800ef4a <_scanf_float+0x7e>
 800f178:	1e6b      	subs	r3, r5, #1
 800f17a:	2b06      	cmp	r3, #6
 800f17c:	d824      	bhi.n	800f1c8 <_scanf_float+0x2fc>
 800f17e:	2d02      	cmp	r5, #2
 800f180:	d836      	bhi.n	800f1f0 <_scanf_float+0x324>
 800f182:	9b01      	ldr	r3, [sp, #4]
 800f184:	429e      	cmp	r6, r3
 800f186:	f67f aee4 	bls.w	800ef52 <_scanf_float+0x86>
 800f18a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f18e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f192:	463a      	mov	r2, r7
 800f194:	4640      	mov	r0, r8
 800f196:	4798      	blx	r3
 800f198:	6923      	ldr	r3, [r4, #16]
 800f19a:	3b01      	subs	r3, #1
 800f19c:	6123      	str	r3, [r4, #16]
 800f19e:	e7f0      	b.n	800f182 <_scanf_float+0x2b6>
 800f1a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f1a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f1a8:	463a      	mov	r2, r7
 800f1aa:	4640      	mov	r0, r8
 800f1ac:	4798      	blx	r3
 800f1ae:	6923      	ldr	r3, [r4, #16]
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	6123      	str	r3, [r4, #16]
 800f1b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1b8:	fa5f fa8a 	uxtb.w	sl, sl
 800f1bc:	f1ba 0f02 	cmp.w	sl, #2
 800f1c0:	d1ee      	bne.n	800f1a0 <_scanf_float+0x2d4>
 800f1c2:	3d03      	subs	r5, #3
 800f1c4:	b2ed      	uxtb	r5, r5
 800f1c6:	1b76      	subs	r6, r6, r5
 800f1c8:	6823      	ldr	r3, [r4, #0]
 800f1ca:	05da      	lsls	r2, r3, #23
 800f1cc:	d530      	bpl.n	800f230 <_scanf_float+0x364>
 800f1ce:	055b      	lsls	r3, r3, #21
 800f1d0:	d511      	bpl.n	800f1f6 <_scanf_float+0x32a>
 800f1d2:	9b01      	ldr	r3, [sp, #4]
 800f1d4:	429e      	cmp	r6, r3
 800f1d6:	f67f aebc 	bls.w	800ef52 <_scanf_float+0x86>
 800f1da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f1de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f1e2:	463a      	mov	r2, r7
 800f1e4:	4640      	mov	r0, r8
 800f1e6:	4798      	blx	r3
 800f1e8:	6923      	ldr	r3, [r4, #16]
 800f1ea:	3b01      	subs	r3, #1
 800f1ec:	6123      	str	r3, [r4, #16]
 800f1ee:	e7f0      	b.n	800f1d2 <_scanf_float+0x306>
 800f1f0:	46aa      	mov	sl, r5
 800f1f2:	46b3      	mov	fp, r6
 800f1f4:	e7de      	b.n	800f1b4 <_scanf_float+0x2e8>
 800f1f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f1fa:	6923      	ldr	r3, [r4, #16]
 800f1fc:	2965      	cmp	r1, #101	@ 0x65
 800f1fe:	f103 33ff 	add.w	r3, r3, #4294967295
 800f202:	f106 35ff 	add.w	r5, r6, #4294967295
 800f206:	6123      	str	r3, [r4, #16]
 800f208:	d00c      	beq.n	800f224 <_scanf_float+0x358>
 800f20a:	2945      	cmp	r1, #69	@ 0x45
 800f20c:	d00a      	beq.n	800f224 <_scanf_float+0x358>
 800f20e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f212:	463a      	mov	r2, r7
 800f214:	4640      	mov	r0, r8
 800f216:	4798      	blx	r3
 800f218:	6923      	ldr	r3, [r4, #16]
 800f21a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f21e:	3b01      	subs	r3, #1
 800f220:	1eb5      	subs	r5, r6, #2
 800f222:	6123      	str	r3, [r4, #16]
 800f224:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f228:	463a      	mov	r2, r7
 800f22a:	4640      	mov	r0, r8
 800f22c:	4798      	blx	r3
 800f22e:	462e      	mov	r6, r5
 800f230:	6822      	ldr	r2, [r4, #0]
 800f232:	f012 0210 	ands.w	r2, r2, #16
 800f236:	d001      	beq.n	800f23c <_scanf_float+0x370>
 800f238:	2000      	movs	r0, #0
 800f23a:	e68b      	b.n	800ef54 <_scanf_float+0x88>
 800f23c:	7032      	strb	r2, [r6, #0]
 800f23e:	6823      	ldr	r3, [r4, #0]
 800f240:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f248:	d11c      	bne.n	800f284 <_scanf_float+0x3b8>
 800f24a:	9b02      	ldr	r3, [sp, #8]
 800f24c:	454b      	cmp	r3, r9
 800f24e:	eba3 0209 	sub.w	r2, r3, r9
 800f252:	d123      	bne.n	800f29c <_scanf_float+0x3d0>
 800f254:	9901      	ldr	r1, [sp, #4]
 800f256:	2200      	movs	r2, #0
 800f258:	4640      	mov	r0, r8
 800f25a:	f002 fc8d 	bl	8011b78 <_strtod_r>
 800f25e:	9b03      	ldr	r3, [sp, #12]
 800f260:	6821      	ldr	r1, [r4, #0]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f011 0f02 	tst.w	r1, #2
 800f268:	ec57 6b10 	vmov	r6, r7, d0
 800f26c:	f103 0204 	add.w	r2, r3, #4
 800f270:	d01f      	beq.n	800f2b2 <_scanf_float+0x3e6>
 800f272:	9903      	ldr	r1, [sp, #12]
 800f274:	600a      	str	r2, [r1, #0]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	e9c3 6700 	strd	r6, r7, [r3]
 800f27c:	68e3      	ldr	r3, [r4, #12]
 800f27e:	3301      	adds	r3, #1
 800f280:	60e3      	str	r3, [r4, #12]
 800f282:	e7d9      	b.n	800f238 <_scanf_float+0x36c>
 800f284:	9b04      	ldr	r3, [sp, #16]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d0e4      	beq.n	800f254 <_scanf_float+0x388>
 800f28a:	9905      	ldr	r1, [sp, #20]
 800f28c:	230a      	movs	r3, #10
 800f28e:	3101      	adds	r1, #1
 800f290:	4640      	mov	r0, r8
 800f292:	f002 fcf1 	bl	8011c78 <_strtol_r>
 800f296:	9b04      	ldr	r3, [sp, #16]
 800f298:	9e05      	ldr	r6, [sp, #20]
 800f29a:	1ac2      	subs	r2, r0, r3
 800f29c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f2a0:	429e      	cmp	r6, r3
 800f2a2:	bf28      	it	cs
 800f2a4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f2a8:	4910      	ldr	r1, [pc, #64]	@ (800f2ec <_scanf_float+0x420>)
 800f2aa:	4630      	mov	r0, r6
 800f2ac:	f000 f988 	bl	800f5c0 <siprintf>
 800f2b0:	e7d0      	b.n	800f254 <_scanf_float+0x388>
 800f2b2:	f011 0f04 	tst.w	r1, #4
 800f2b6:	9903      	ldr	r1, [sp, #12]
 800f2b8:	600a      	str	r2, [r1, #0]
 800f2ba:	d1dc      	bne.n	800f276 <_scanf_float+0x3aa>
 800f2bc:	681d      	ldr	r5, [r3, #0]
 800f2be:	4632      	mov	r2, r6
 800f2c0:	463b      	mov	r3, r7
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	4639      	mov	r1, r7
 800f2c6:	f7f1 fc51 	bl	8000b6c <__aeabi_dcmpun>
 800f2ca:	b128      	cbz	r0, 800f2d8 <_scanf_float+0x40c>
 800f2cc:	4808      	ldr	r0, [pc, #32]	@ (800f2f0 <_scanf_float+0x424>)
 800f2ce:	f000 faff 	bl	800f8d0 <nanf>
 800f2d2:	ed85 0a00 	vstr	s0, [r5]
 800f2d6:	e7d1      	b.n	800f27c <_scanf_float+0x3b0>
 800f2d8:	4630      	mov	r0, r6
 800f2da:	4639      	mov	r1, r7
 800f2dc:	f7f1 fca4 	bl	8000c28 <__aeabi_d2f>
 800f2e0:	6028      	str	r0, [r5, #0]
 800f2e2:	e7cb      	b.n	800f27c <_scanf_float+0x3b0>
 800f2e4:	f04f 0900 	mov.w	r9, #0
 800f2e8:	e629      	b.n	800ef3e <_scanf_float+0x72>
 800f2ea:	bf00      	nop
 800f2ec:	08013e8c 	.word	0x08013e8c
 800f2f0:	08014225 	.word	0x08014225

0800f2f4 <std>:
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	b510      	push	{r4, lr}
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	e9c0 3300 	strd	r3, r3, [r0]
 800f2fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f302:	6083      	str	r3, [r0, #8]
 800f304:	8181      	strh	r1, [r0, #12]
 800f306:	6643      	str	r3, [r0, #100]	@ 0x64
 800f308:	81c2      	strh	r2, [r0, #14]
 800f30a:	6183      	str	r3, [r0, #24]
 800f30c:	4619      	mov	r1, r3
 800f30e:	2208      	movs	r2, #8
 800f310:	305c      	adds	r0, #92	@ 0x5c
 800f312:	f000 fa4d 	bl	800f7b0 <memset>
 800f316:	4b0d      	ldr	r3, [pc, #52]	@ (800f34c <std+0x58>)
 800f318:	6263      	str	r3, [r4, #36]	@ 0x24
 800f31a:	4b0d      	ldr	r3, [pc, #52]	@ (800f350 <std+0x5c>)
 800f31c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f31e:	4b0d      	ldr	r3, [pc, #52]	@ (800f354 <std+0x60>)
 800f320:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f322:	4b0d      	ldr	r3, [pc, #52]	@ (800f358 <std+0x64>)
 800f324:	6323      	str	r3, [r4, #48]	@ 0x30
 800f326:	4b0d      	ldr	r3, [pc, #52]	@ (800f35c <std+0x68>)
 800f328:	6224      	str	r4, [r4, #32]
 800f32a:	429c      	cmp	r4, r3
 800f32c:	d006      	beq.n	800f33c <std+0x48>
 800f32e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f332:	4294      	cmp	r4, r2
 800f334:	d002      	beq.n	800f33c <std+0x48>
 800f336:	33d0      	adds	r3, #208	@ 0xd0
 800f338:	429c      	cmp	r4, r3
 800f33a:	d105      	bne.n	800f348 <std+0x54>
 800f33c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f344:	f000 bac0 	b.w	800f8c8 <__retarget_lock_init_recursive>
 800f348:	bd10      	pop	{r4, pc}
 800f34a:	bf00      	nop
 800f34c:	0800f601 	.word	0x0800f601
 800f350:	0800f623 	.word	0x0800f623
 800f354:	0800f65b 	.word	0x0800f65b
 800f358:	0800f67f 	.word	0x0800f67f
 800f35c:	20003294 	.word	0x20003294

0800f360 <stdio_exit_handler>:
 800f360:	4a02      	ldr	r2, [pc, #8]	@ (800f36c <stdio_exit_handler+0xc>)
 800f362:	4903      	ldr	r1, [pc, #12]	@ (800f370 <stdio_exit_handler+0x10>)
 800f364:	4803      	ldr	r0, [pc, #12]	@ (800f374 <stdio_exit_handler+0x14>)
 800f366:	f000 b869 	b.w	800f43c <_fwalk_sglue>
 800f36a:	bf00      	nop
 800f36c:	20000078 	.word	0x20000078
 800f370:	080122b9 	.word	0x080122b9
 800f374:	20000088 	.word	0x20000088

0800f378 <cleanup_stdio>:
 800f378:	6841      	ldr	r1, [r0, #4]
 800f37a:	4b0c      	ldr	r3, [pc, #48]	@ (800f3ac <cleanup_stdio+0x34>)
 800f37c:	4299      	cmp	r1, r3
 800f37e:	b510      	push	{r4, lr}
 800f380:	4604      	mov	r4, r0
 800f382:	d001      	beq.n	800f388 <cleanup_stdio+0x10>
 800f384:	f002 ff98 	bl	80122b8 <_fflush_r>
 800f388:	68a1      	ldr	r1, [r4, #8]
 800f38a:	4b09      	ldr	r3, [pc, #36]	@ (800f3b0 <cleanup_stdio+0x38>)
 800f38c:	4299      	cmp	r1, r3
 800f38e:	d002      	beq.n	800f396 <cleanup_stdio+0x1e>
 800f390:	4620      	mov	r0, r4
 800f392:	f002 ff91 	bl	80122b8 <_fflush_r>
 800f396:	68e1      	ldr	r1, [r4, #12]
 800f398:	4b06      	ldr	r3, [pc, #24]	@ (800f3b4 <cleanup_stdio+0x3c>)
 800f39a:	4299      	cmp	r1, r3
 800f39c:	d004      	beq.n	800f3a8 <cleanup_stdio+0x30>
 800f39e:	4620      	mov	r0, r4
 800f3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3a4:	f002 bf88 	b.w	80122b8 <_fflush_r>
 800f3a8:	bd10      	pop	{r4, pc}
 800f3aa:	bf00      	nop
 800f3ac:	20003294 	.word	0x20003294
 800f3b0:	200032fc 	.word	0x200032fc
 800f3b4:	20003364 	.word	0x20003364

0800f3b8 <global_stdio_init.part.0>:
 800f3b8:	b510      	push	{r4, lr}
 800f3ba:	4b0b      	ldr	r3, [pc, #44]	@ (800f3e8 <global_stdio_init.part.0+0x30>)
 800f3bc:	4c0b      	ldr	r4, [pc, #44]	@ (800f3ec <global_stdio_init.part.0+0x34>)
 800f3be:	4a0c      	ldr	r2, [pc, #48]	@ (800f3f0 <global_stdio_init.part.0+0x38>)
 800f3c0:	601a      	str	r2, [r3, #0]
 800f3c2:	4620      	mov	r0, r4
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	2104      	movs	r1, #4
 800f3c8:	f7ff ff94 	bl	800f2f4 <std>
 800f3cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	2109      	movs	r1, #9
 800f3d4:	f7ff ff8e 	bl	800f2f4 <std>
 800f3d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f3dc:	2202      	movs	r2, #2
 800f3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3e2:	2112      	movs	r1, #18
 800f3e4:	f7ff bf86 	b.w	800f2f4 <std>
 800f3e8:	200033cc 	.word	0x200033cc
 800f3ec:	20003294 	.word	0x20003294
 800f3f0:	0800f361 	.word	0x0800f361

0800f3f4 <__sfp_lock_acquire>:
 800f3f4:	4801      	ldr	r0, [pc, #4]	@ (800f3fc <__sfp_lock_acquire+0x8>)
 800f3f6:	f000 ba68 	b.w	800f8ca <__retarget_lock_acquire_recursive>
 800f3fa:	bf00      	nop
 800f3fc:	200033d5 	.word	0x200033d5

0800f400 <__sfp_lock_release>:
 800f400:	4801      	ldr	r0, [pc, #4]	@ (800f408 <__sfp_lock_release+0x8>)
 800f402:	f000 ba63 	b.w	800f8cc <__retarget_lock_release_recursive>
 800f406:	bf00      	nop
 800f408:	200033d5 	.word	0x200033d5

0800f40c <__sinit>:
 800f40c:	b510      	push	{r4, lr}
 800f40e:	4604      	mov	r4, r0
 800f410:	f7ff fff0 	bl	800f3f4 <__sfp_lock_acquire>
 800f414:	6a23      	ldr	r3, [r4, #32]
 800f416:	b11b      	cbz	r3, 800f420 <__sinit+0x14>
 800f418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f41c:	f7ff bff0 	b.w	800f400 <__sfp_lock_release>
 800f420:	4b04      	ldr	r3, [pc, #16]	@ (800f434 <__sinit+0x28>)
 800f422:	6223      	str	r3, [r4, #32]
 800f424:	4b04      	ldr	r3, [pc, #16]	@ (800f438 <__sinit+0x2c>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d1f5      	bne.n	800f418 <__sinit+0xc>
 800f42c:	f7ff ffc4 	bl	800f3b8 <global_stdio_init.part.0>
 800f430:	e7f2      	b.n	800f418 <__sinit+0xc>
 800f432:	bf00      	nop
 800f434:	0800f379 	.word	0x0800f379
 800f438:	200033cc 	.word	0x200033cc

0800f43c <_fwalk_sglue>:
 800f43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f440:	4607      	mov	r7, r0
 800f442:	4688      	mov	r8, r1
 800f444:	4614      	mov	r4, r2
 800f446:	2600      	movs	r6, #0
 800f448:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f44c:	f1b9 0901 	subs.w	r9, r9, #1
 800f450:	d505      	bpl.n	800f45e <_fwalk_sglue+0x22>
 800f452:	6824      	ldr	r4, [r4, #0]
 800f454:	2c00      	cmp	r4, #0
 800f456:	d1f7      	bne.n	800f448 <_fwalk_sglue+0xc>
 800f458:	4630      	mov	r0, r6
 800f45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f45e:	89ab      	ldrh	r3, [r5, #12]
 800f460:	2b01      	cmp	r3, #1
 800f462:	d907      	bls.n	800f474 <_fwalk_sglue+0x38>
 800f464:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f468:	3301      	adds	r3, #1
 800f46a:	d003      	beq.n	800f474 <_fwalk_sglue+0x38>
 800f46c:	4629      	mov	r1, r5
 800f46e:	4638      	mov	r0, r7
 800f470:	47c0      	blx	r8
 800f472:	4306      	orrs	r6, r0
 800f474:	3568      	adds	r5, #104	@ 0x68
 800f476:	e7e9      	b.n	800f44c <_fwalk_sglue+0x10>

0800f478 <iprintf>:
 800f478:	b40f      	push	{r0, r1, r2, r3}
 800f47a:	b507      	push	{r0, r1, r2, lr}
 800f47c:	4906      	ldr	r1, [pc, #24]	@ (800f498 <iprintf+0x20>)
 800f47e:	ab04      	add	r3, sp, #16
 800f480:	6808      	ldr	r0, [r1, #0]
 800f482:	f853 2b04 	ldr.w	r2, [r3], #4
 800f486:	6881      	ldr	r1, [r0, #8]
 800f488:	9301      	str	r3, [sp, #4]
 800f48a:	f002 fd79 	bl	8011f80 <_vfiprintf_r>
 800f48e:	b003      	add	sp, #12
 800f490:	f85d eb04 	ldr.w	lr, [sp], #4
 800f494:	b004      	add	sp, #16
 800f496:	4770      	bx	lr
 800f498:	20000084 	.word	0x20000084

0800f49c <_puts_r>:
 800f49c:	6a03      	ldr	r3, [r0, #32]
 800f49e:	b570      	push	{r4, r5, r6, lr}
 800f4a0:	6884      	ldr	r4, [r0, #8]
 800f4a2:	4605      	mov	r5, r0
 800f4a4:	460e      	mov	r6, r1
 800f4a6:	b90b      	cbnz	r3, 800f4ac <_puts_r+0x10>
 800f4a8:	f7ff ffb0 	bl	800f40c <__sinit>
 800f4ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4ae:	07db      	lsls	r3, r3, #31
 800f4b0:	d405      	bmi.n	800f4be <_puts_r+0x22>
 800f4b2:	89a3      	ldrh	r3, [r4, #12]
 800f4b4:	0598      	lsls	r0, r3, #22
 800f4b6:	d402      	bmi.n	800f4be <_puts_r+0x22>
 800f4b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4ba:	f000 fa06 	bl	800f8ca <__retarget_lock_acquire_recursive>
 800f4be:	89a3      	ldrh	r3, [r4, #12]
 800f4c0:	0719      	lsls	r1, r3, #28
 800f4c2:	d502      	bpl.n	800f4ca <_puts_r+0x2e>
 800f4c4:	6923      	ldr	r3, [r4, #16]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d135      	bne.n	800f536 <_puts_r+0x9a>
 800f4ca:	4621      	mov	r1, r4
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	f000 f919 	bl	800f704 <__swsetup_r>
 800f4d2:	b380      	cbz	r0, 800f536 <_puts_r+0x9a>
 800f4d4:	f04f 35ff 	mov.w	r5, #4294967295
 800f4d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4da:	07da      	lsls	r2, r3, #31
 800f4dc:	d405      	bmi.n	800f4ea <_puts_r+0x4e>
 800f4de:	89a3      	ldrh	r3, [r4, #12]
 800f4e0:	059b      	lsls	r3, r3, #22
 800f4e2:	d402      	bmi.n	800f4ea <_puts_r+0x4e>
 800f4e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4e6:	f000 f9f1 	bl	800f8cc <__retarget_lock_release_recursive>
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	bd70      	pop	{r4, r5, r6, pc}
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	da04      	bge.n	800f4fc <_puts_r+0x60>
 800f4f2:	69a2      	ldr	r2, [r4, #24]
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	dc17      	bgt.n	800f528 <_puts_r+0x8c>
 800f4f8:	290a      	cmp	r1, #10
 800f4fa:	d015      	beq.n	800f528 <_puts_r+0x8c>
 800f4fc:	6823      	ldr	r3, [r4, #0]
 800f4fe:	1c5a      	adds	r2, r3, #1
 800f500:	6022      	str	r2, [r4, #0]
 800f502:	7019      	strb	r1, [r3, #0]
 800f504:	68a3      	ldr	r3, [r4, #8]
 800f506:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f50a:	3b01      	subs	r3, #1
 800f50c:	60a3      	str	r3, [r4, #8]
 800f50e:	2900      	cmp	r1, #0
 800f510:	d1ed      	bne.n	800f4ee <_puts_r+0x52>
 800f512:	2b00      	cmp	r3, #0
 800f514:	da11      	bge.n	800f53a <_puts_r+0x9e>
 800f516:	4622      	mov	r2, r4
 800f518:	210a      	movs	r1, #10
 800f51a:	4628      	mov	r0, r5
 800f51c:	f000 f8b3 	bl	800f686 <__swbuf_r>
 800f520:	3001      	adds	r0, #1
 800f522:	d0d7      	beq.n	800f4d4 <_puts_r+0x38>
 800f524:	250a      	movs	r5, #10
 800f526:	e7d7      	b.n	800f4d8 <_puts_r+0x3c>
 800f528:	4622      	mov	r2, r4
 800f52a:	4628      	mov	r0, r5
 800f52c:	f000 f8ab 	bl	800f686 <__swbuf_r>
 800f530:	3001      	adds	r0, #1
 800f532:	d1e7      	bne.n	800f504 <_puts_r+0x68>
 800f534:	e7ce      	b.n	800f4d4 <_puts_r+0x38>
 800f536:	3e01      	subs	r6, #1
 800f538:	e7e4      	b.n	800f504 <_puts_r+0x68>
 800f53a:	6823      	ldr	r3, [r4, #0]
 800f53c:	1c5a      	adds	r2, r3, #1
 800f53e:	6022      	str	r2, [r4, #0]
 800f540:	220a      	movs	r2, #10
 800f542:	701a      	strb	r2, [r3, #0]
 800f544:	e7ee      	b.n	800f524 <_puts_r+0x88>
	...

0800f548 <puts>:
 800f548:	4b02      	ldr	r3, [pc, #8]	@ (800f554 <puts+0xc>)
 800f54a:	4601      	mov	r1, r0
 800f54c:	6818      	ldr	r0, [r3, #0]
 800f54e:	f7ff bfa5 	b.w	800f49c <_puts_r>
 800f552:	bf00      	nop
 800f554:	20000084 	.word	0x20000084

0800f558 <sniprintf>:
 800f558:	b40c      	push	{r2, r3}
 800f55a:	b530      	push	{r4, r5, lr}
 800f55c:	4b17      	ldr	r3, [pc, #92]	@ (800f5bc <sniprintf+0x64>)
 800f55e:	1e0c      	subs	r4, r1, #0
 800f560:	681d      	ldr	r5, [r3, #0]
 800f562:	b09d      	sub	sp, #116	@ 0x74
 800f564:	da08      	bge.n	800f578 <sniprintf+0x20>
 800f566:	238b      	movs	r3, #139	@ 0x8b
 800f568:	602b      	str	r3, [r5, #0]
 800f56a:	f04f 30ff 	mov.w	r0, #4294967295
 800f56e:	b01d      	add	sp, #116	@ 0x74
 800f570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f574:	b002      	add	sp, #8
 800f576:	4770      	bx	lr
 800f578:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f57c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f580:	bf14      	ite	ne
 800f582:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f586:	4623      	moveq	r3, r4
 800f588:	9304      	str	r3, [sp, #16]
 800f58a:	9307      	str	r3, [sp, #28]
 800f58c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f590:	9002      	str	r0, [sp, #8]
 800f592:	9006      	str	r0, [sp, #24]
 800f594:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f598:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f59a:	ab21      	add	r3, sp, #132	@ 0x84
 800f59c:	a902      	add	r1, sp, #8
 800f59e:	4628      	mov	r0, r5
 800f5a0:	9301      	str	r3, [sp, #4]
 800f5a2:	f002 fbc7 	bl	8011d34 <_svfiprintf_r>
 800f5a6:	1c43      	adds	r3, r0, #1
 800f5a8:	bfbc      	itt	lt
 800f5aa:	238b      	movlt	r3, #139	@ 0x8b
 800f5ac:	602b      	strlt	r3, [r5, #0]
 800f5ae:	2c00      	cmp	r4, #0
 800f5b0:	d0dd      	beq.n	800f56e <sniprintf+0x16>
 800f5b2:	9b02      	ldr	r3, [sp, #8]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	701a      	strb	r2, [r3, #0]
 800f5b8:	e7d9      	b.n	800f56e <sniprintf+0x16>
 800f5ba:	bf00      	nop
 800f5bc:	20000084 	.word	0x20000084

0800f5c0 <siprintf>:
 800f5c0:	b40e      	push	{r1, r2, r3}
 800f5c2:	b500      	push	{lr}
 800f5c4:	b09c      	sub	sp, #112	@ 0x70
 800f5c6:	ab1d      	add	r3, sp, #116	@ 0x74
 800f5c8:	9002      	str	r0, [sp, #8]
 800f5ca:	9006      	str	r0, [sp, #24]
 800f5cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f5d0:	4809      	ldr	r0, [pc, #36]	@ (800f5f8 <siprintf+0x38>)
 800f5d2:	9107      	str	r1, [sp, #28]
 800f5d4:	9104      	str	r1, [sp, #16]
 800f5d6:	4909      	ldr	r1, [pc, #36]	@ (800f5fc <siprintf+0x3c>)
 800f5d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5dc:	9105      	str	r1, [sp, #20]
 800f5de:	6800      	ldr	r0, [r0, #0]
 800f5e0:	9301      	str	r3, [sp, #4]
 800f5e2:	a902      	add	r1, sp, #8
 800f5e4:	f002 fba6 	bl	8011d34 <_svfiprintf_r>
 800f5e8:	9b02      	ldr	r3, [sp, #8]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	701a      	strb	r2, [r3, #0]
 800f5ee:	b01c      	add	sp, #112	@ 0x70
 800f5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5f4:	b003      	add	sp, #12
 800f5f6:	4770      	bx	lr
 800f5f8:	20000084 	.word	0x20000084
 800f5fc:	ffff0208 	.word	0xffff0208

0800f600 <__sread>:
 800f600:	b510      	push	{r4, lr}
 800f602:	460c      	mov	r4, r1
 800f604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f608:	f000 f900 	bl	800f80c <_read_r>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	bfab      	itete	ge
 800f610:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f612:	89a3      	ldrhlt	r3, [r4, #12]
 800f614:	181b      	addge	r3, r3, r0
 800f616:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f61a:	bfac      	ite	ge
 800f61c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f61e:	81a3      	strhlt	r3, [r4, #12]
 800f620:	bd10      	pop	{r4, pc}

0800f622 <__swrite>:
 800f622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f626:	461f      	mov	r7, r3
 800f628:	898b      	ldrh	r3, [r1, #12]
 800f62a:	05db      	lsls	r3, r3, #23
 800f62c:	4605      	mov	r5, r0
 800f62e:	460c      	mov	r4, r1
 800f630:	4616      	mov	r6, r2
 800f632:	d505      	bpl.n	800f640 <__swrite+0x1e>
 800f634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f638:	2302      	movs	r3, #2
 800f63a:	2200      	movs	r2, #0
 800f63c:	f000 f8d4 	bl	800f7e8 <_lseek_r>
 800f640:	89a3      	ldrh	r3, [r4, #12]
 800f642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f646:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f64a:	81a3      	strh	r3, [r4, #12]
 800f64c:	4632      	mov	r2, r6
 800f64e:	463b      	mov	r3, r7
 800f650:	4628      	mov	r0, r5
 800f652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f656:	f000 b8fb 	b.w	800f850 <_write_r>

0800f65a <__sseek>:
 800f65a:	b510      	push	{r4, lr}
 800f65c:	460c      	mov	r4, r1
 800f65e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f662:	f000 f8c1 	bl	800f7e8 <_lseek_r>
 800f666:	1c43      	adds	r3, r0, #1
 800f668:	89a3      	ldrh	r3, [r4, #12]
 800f66a:	bf15      	itete	ne
 800f66c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f66e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f672:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f676:	81a3      	strheq	r3, [r4, #12]
 800f678:	bf18      	it	ne
 800f67a:	81a3      	strhne	r3, [r4, #12]
 800f67c:	bd10      	pop	{r4, pc}

0800f67e <__sclose>:
 800f67e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f682:	f000 b8a1 	b.w	800f7c8 <_close_r>

0800f686 <__swbuf_r>:
 800f686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f688:	460e      	mov	r6, r1
 800f68a:	4614      	mov	r4, r2
 800f68c:	4605      	mov	r5, r0
 800f68e:	b118      	cbz	r0, 800f698 <__swbuf_r+0x12>
 800f690:	6a03      	ldr	r3, [r0, #32]
 800f692:	b90b      	cbnz	r3, 800f698 <__swbuf_r+0x12>
 800f694:	f7ff feba 	bl	800f40c <__sinit>
 800f698:	69a3      	ldr	r3, [r4, #24]
 800f69a:	60a3      	str	r3, [r4, #8]
 800f69c:	89a3      	ldrh	r3, [r4, #12]
 800f69e:	071a      	lsls	r2, r3, #28
 800f6a0:	d501      	bpl.n	800f6a6 <__swbuf_r+0x20>
 800f6a2:	6923      	ldr	r3, [r4, #16]
 800f6a4:	b943      	cbnz	r3, 800f6b8 <__swbuf_r+0x32>
 800f6a6:	4621      	mov	r1, r4
 800f6a8:	4628      	mov	r0, r5
 800f6aa:	f000 f82b 	bl	800f704 <__swsetup_r>
 800f6ae:	b118      	cbz	r0, 800f6b8 <__swbuf_r+0x32>
 800f6b0:	f04f 37ff 	mov.w	r7, #4294967295
 800f6b4:	4638      	mov	r0, r7
 800f6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6b8:	6823      	ldr	r3, [r4, #0]
 800f6ba:	6922      	ldr	r2, [r4, #16]
 800f6bc:	1a98      	subs	r0, r3, r2
 800f6be:	6963      	ldr	r3, [r4, #20]
 800f6c0:	b2f6      	uxtb	r6, r6
 800f6c2:	4283      	cmp	r3, r0
 800f6c4:	4637      	mov	r7, r6
 800f6c6:	dc05      	bgt.n	800f6d4 <__swbuf_r+0x4e>
 800f6c8:	4621      	mov	r1, r4
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	f002 fdf4 	bl	80122b8 <_fflush_r>
 800f6d0:	2800      	cmp	r0, #0
 800f6d2:	d1ed      	bne.n	800f6b0 <__swbuf_r+0x2a>
 800f6d4:	68a3      	ldr	r3, [r4, #8]
 800f6d6:	3b01      	subs	r3, #1
 800f6d8:	60a3      	str	r3, [r4, #8]
 800f6da:	6823      	ldr	r3, [r4, #0]
 800f6dc:	1c5a      	adds	r2, r3, #1
 800f6de:	6022      	str	r2, [r4, #0]
 800f6e0:	701e      	strb	r6, [r3, #0]
 800f6e2:	6962      	ldr	r2, [r4, #20]
 800f6e4:	1c43      	adds	r3, r0, #1
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d004      	beq.n	800f6f4 <__swbuf_r+0x6e>
 800f6ea:	89a3      	ldrh	r3, [r4, #12]
 800f6ec:	07db      	lsls	r3, r3, #31
 800f6ee:	d5e1      	bpl.n	800f6b4 <__swbuf_r+0x2e>
 800f6f0:	2e0a      	cmp	r6, #10
 800f6f2:	d1df      	bne.n	800f6b4 <__swbuf_r+0x2e>
 800f6f4:	4621      	mov	r1, r4
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	f002 fdde 	bl	80122b8 <_fflush_r>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	d0d9      	beq.n	800f6b4 <__swbuf_r+0x2e>
 800f700:	e7d6      	b.n	800f6b0 <__swbuf_r+0x2a>
	...

0800f704 <__swsetup_r>:
 800f704:	b538      	push	{r3, r4, r5, lr}
 800f706:	4b29      	ldr	r3, [pc, #164]	@ (800f7ac <__swsetup_r+0xa8>)
 800f708:	4605      	mov	r5, r0
 800f70a:	6818      	ldr	r0, [r3, #0]
 800f70c:	460c      	mov	r4, r1
 800f70e:	b118      	cbz	r0, 800f718 <__swsetup_r+0x14>
 800f710:	6a03      	ldr	r3, [r0, #32]
 800f712:	b90b      	cbnz	r3, 800f718 <__swsetup_r+0x14>
 800f714:	f7ff fe7a 	bl	800f40c <__sinit>
 800f718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f71c:	0719      	lsls	r1, r3, #28
 800f71e:	d422      	bmi.n	800f766 <__swsetup_r+0x62>
 800f720:	06da      	lsls	r2, r3, #27
 800f722:	d407      	bmi.n	800f734 <__swsetup_r+0x30>
 800f724:	2209      	movs	r2, #9
 800f726:	602a      	str	r2, [r5, #0]
 800f728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f72c:	81a3      	strh	r3, [r4, #12]
 800f72e:	f04f 30ff 	mov.w	r0, #4294967295
 800f732:	e033      	b.n	800f79c <__swsetup_r+0x98>
 800f734:	0758      	lsls	r0, r3, #29
 800f736:	d512      	bpl.n	800f75e <__swsetup_r+0x5a>
 800f738:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f73a:	b141      	cbz	r1, 800f74e <__swsetup_r+0x4a>
 800f73c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f740:	4299      	cmp	r1, r3
 800f742:	d002      	beq.n	800f74a <__swsetup_r+0x46>
 800f744:	4628      	mov	r0, r5
 800f746:	f000 ff17 	bl	8010578 <_free_r>
 800f74a:	2300      	movs	r3, #0
 800f74c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f74e:	89a3      	ldrh	r3, [r4, #12]
 800f750:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f754:	81a3      	strh	r3, [r4, #12]
 800f756:	2300      	movs	r3, #0
 800f758:	6063      	str	r3, [r4, #4]
 800f75a:	6923      	ldr	r3, [r4, #16]
 800f75c:	6023      	str	r3, [r4, #0]
 800f75e:	89a3      	ldrh	r3, [r4, #12]
 800f760:	f043 0308 	orr.w	r3, r3, #8
 800f764:	81a3      	strh	r3, [r4, #12]
 800f766:	6923      	ldr	r3, [r4, #16]
 800f768:	b94b      	cbnz	r3, 800f77e <__swsetup_r+0x7a>
 800f76a:	89a3      	ldrh	r3, [r4, #12]
 800f76c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f774:	d003      	beq.n	800f77e <__swsetup_r+0x7a>
 800f776:	4621      	mov	r1, r4
 800f778:	4628      	mov	r0, r5
 800f77a:	f002 fdeb 	bl	8012354 <__smakebuf_r>
 800f77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f782:	f013 0201 	ands.w	r2, r3, #1
 800f786:	d00a      	beq.n	800f79e <__swsetup_r+0x9a>
 800f788:	2200      	movs	r2, #0
 800f78a:	60a2      	str	r2, [r4, #8]
 800f78c:	6962      	ldr	r2, [r4, #20]
 800f78e:	4252      	negs	r2, r2
 800f790:	61a2      	str	r2, [r4, #24]
 800f792:	6922      	ldr	r2, [r4, #16]
 800f794:	b942      	cbnz	r2, 800f7a8 <__swsetup_r+0xa4>
 800f796:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f79a:	d1c5      	bne.n	800f728 <__swsetup_r+0x24>
 800f79c:	bd38      	pop	{r3, r4, r5, pc}
 800f79e:	0799      	lsls	r1, r3, #30
 800f7a0:	bf58      	it	pl
 800f7a2:	6962      	ldrpl	r2, [r4, #20]
 800f7a4:	60a2      	str	r2, [r4, #8]
 800f7a6:	e7f4      	b.n	800f792 <__swsetup_r+0x8e>
 800f7a8:	2000      	movs	r0, #0
 800f7aa:	e7f7      	b.n	800f79c <__swsetup_r+0x98>
 800f7ac:	20000084 	.word	0x20000084

0800f7b0 <memset>:
 800f7b0:	4402      	add	r2, r0
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d100      	bne.n	800f7ba <memset+0xa>
 800f7b8:	4770      	bx	lr
 800f7ba:	f803 1b01 	strb.w	r1, [r3], #1
 800f7be:	e7f9      	b.n	800f7b4 <memset+0x4>

0800f7c0 <_localeconv_r>:
 800f7c0:	4800      	ldr	r0, [pc, #0]	@ (800f7c4 <_localeconv_r+0x4>)
 800f7c2:	4770      	bx	lr
 800f7c4:	200001c4 	.word	0x200001c4

0800f7c8 <_close_r>:
 800f7c8:	b538      	push	{r3, r4, r5, lr}
 800f7ca:	4d06      	ldr	r5, [pc, #24]	@ (800f7e4 <_close_r+0x1c>)
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	4608      	mov	r0, r1
 800f7d2:	602b      	str	r3, [r5, #0]
 800f7d4:	f7f4 fe7c 	bl	80044d0 <_close>
 800f7d8:	1c43      	adds	r3, r0, #1
 800f7da:	d102      	bne.n	800f7e2 <_close_r+0x1a>
 800f7dc:	682b      	ldr	r3, [r5, #0]
 800f7de:	b103      	cbz	r3, 800f7e2 <_close_r+0x1a>
 800f7e0:	6023      	str	r3, [r4, #0]
 800f7e2:	bd38      	pop	{r3, r4, r5, pc}
 800f7e4:	200033d0 	.word	0x200033d0

0800f7e8 <_lseek_r>:
 800f7e8:	b538      	push	{r3, r4, r5, lr}
 800f7ea:	4d07      	ldr	r5, [pc, #28]	@ (800f808 <_lseek_r+0x20>)
 800f7ec:	4604      	mov	r4, r0
 800f7ee:	4608      	mov	r0, r1
 800f7f0:	4611      	mov	r1, r2
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	602a      	str	r2, [r5, #0]
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	f7f4 fe91 	bl	800451e <_lseek>
 800f7fc:	1c43      	adds	r3, r0, #1
 800f7fe:	d102      	bne.n	800f806 <_lseek_r+0x1e>
 800f800:	682b      	ldr	r3, [r5, #0]
 800f802:	b103      	cbz	r3, 800f806 <_lseek_r+0x1e>
 800f804:	6023      	str	r3, [r4, #0]
 800f806:	bd38      	pop	{r3, r4, r5, pc}
 800f808:	200033d0 	.word	0x200033d0

0800f80c <_read_r>:
 800f80c:	b538      	push	{r3, r4, r5, lr}
 800f80e:	4d07      	ldr	r5, [pc, #28]	@ (800f82c <_read_r+0x20>)
 800f810:	4604      	mov	r4, r0
 800f812:	4608      	mov	r0, r1
 800f814:	4611      	mov	r1, r2
 800f816:	2200      	movs	r2, #0
 800f818:	602a      	str	r2, [r5, #0]
 800f81a:	461a      	mov	r2, r3
 800f81c:	f7f4 fe1f 	bl	800445e <_read>
 800f820:	1c43      	adds	r3, r0, #1
 800f822:	d102      	bne.n	800f82a <_read_r+0x1e>
 800f824:	682b      	ldr	r3, [r5, #0]
 800f826:	b103      	cbz	r3, 800f82a <_read_r+0x1e>
 800f828:	6023      	str	r3, [r4, #0]
 800f82a:	bd38      	pop	{r3, r4, r5, pc}
 800f82c:	200033d0 	.word	0x200033d0

0800f830 <_sbrk_r>:
 800f830:	b538      	push	{r3, r4, r5, lr}
 800f832:	4d06      	ldr	r5, [pc, #24]	@ (800f84c <_sbrk_r+0x1c>)
 800f834:	2300      	movs	r3, #0
 800f836:	4604      	mov	r4, r0
 800f838:	4608      	mov	r0, r1
 800f83a:	602b      	str	r3, [r5, #0]
 800f83c:	f7f4 fe7c 	bl	8004538 <_sbrk>
 800f840:	1c43      	adds	r3, r0, #1
 800f842:	d102      	bne.n	800f84a <_sbrk_r+0x1a>
 800f844:	682b      	ldr	r3, [r5, #0]
 800f846:	b103      	cbz	r3, 800f84a <_sbrk_r+0x1a>
 800f848:	6023      	str	r3, [r4, #0]
 800f84a:	bd38      	pop	{r3, r4, r5, pc}
 800f84c:	200033d0 	.word	0x200033d0

0800f850 <_write_r>:
 800f850:	b538      	push	{r3, r4, r5, lr}
 800f852:	4d07      	ldr	r5, [pc, #28]	@ (800f870 <_write_r+0x20>)
 800f854:	4604      	mov	r4, r0
 800f856:	4608      	mov	r0, r1
 800f858:	4611      	mov	r1, r2
 800f85a:	2200      	movs	r2, #0
 800f85c:	602a      	str	r2, [r5, #0]
 800f85e:	461a      	mov	r2, r3
 800f860:	f7f4 fe1a 	bl	8004498 <_write>
 800f864:	1c43      	adds	r3, r0, #1
 800f866:	d102      	bne.n	800f86e <_write_r+0x1e>
 800f868:	682b      	ldr	r3, [r5, #0]
 800f86a:	b103      	cbz	r3, 800f86e <_write_r+0x1e>
 800f86c:	6023      	str	r3, [r4, #0]
 800f86e:	bd38      	pop	{r3, r4, r5, pc}
 800f870:	200033d0 	.word	0x200033d0

0800f874 <__errno>:
 800f874:	4b01      	ldr	r3, [pc, #4]	@ (800f87c <__errno+0x8>)
 800f876:	6818      	ldr	r0, [r3, #0]
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop
 800f87c:	20000084 	.word	0x20000084

0800f880 <__libc_init_array>:
 800f880:	b570      	push	{r4, r5, r6, lr}
 800f882:	4d0d      	ldr	r5, [pc, #52]	@ (800f8b8 <__libc_init_array+0x38>)
 800f884:	4c0d      	ldr	r4, [pc, #52]	@ (800f8bc <__libc_init_array+0x3c>)
 800f886:	1b64      	subs	r4, r4, r5
 800f888:	10a4      	asrs	r4, r4, #2
 800f88a:	2600      	movs	r6, #0
 800f88c:	42a6      	cmp	r6, r4
 800f88e:	d109      	bne.n	800f8a4 <__libc_init_array+0x24>
 800f890:	4d0b      	ldr	r5, [pc, #44]	@ (800f8c0 <__libc_init_array+0x40>)
 800f892:	4c0c      	ldr	r4, [pc, #48]	@ (800f8c4 <__libc_init_array+0x44>)
 800f894:	f003 fa1e 	bl	8012cd4 <_init>
 800f898:	1b64      	subs	r4, r4, r5
 800f89a:	10a4      	asrs	r4, r4, #2
 800f89c:	2600      	movs	r6, #0
 800f89e:	42a6      	cmp	r6, r4
 800f8a0:	d105      	bne.n	800f8ae <__libc_init_array+0x2e>
 800f8a2:	bd70      	pop	{r4, r5, r6, pc}
 800f8a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8a8:	4798      	blx	r3
 800f8aa:	3601      	adds	r6, #1
 800f8ac:	e7ee      	b.n	800f88c <__libc_init_array+0xc>
 800f8ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8b2:	4798      	blx	r3
 800f8b4:	3601      	adds	r6, #1
 800f8b6:	e7f2      	b.n	800f89e <__libc_init_array+0x1e>
 800f8b8:	08014290 	.word	0x08014290
 800f8bc:	08014290 	.word	0x08014290
 800f8c0:	08014290 	.word	0x08014290
 800f8c4:	08014294 	.word	0x08014294

0800f8c8 <__retarget_lock_init_recursive>:
 800f8c8:	4770      	bx	lr

0800f8ca <__retarget_lock_acquire_recursive>:
 800f8ca:	4770      	bx	lr

0800f8cc <__retarget_lock_release_recursive>:
 800f8cc:	4770      	bx	lr
	...

0800f8d0 <nanf>:
 800f8d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f8d8 <nanf+0x8>
 800f8d4:	4770      	bx	lr
 800f8d6:	bf00      	nop
 800f8d8:	7fc00000 	.word	0x7fc00000

0800f8dc <quorem>:
 800f8dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e0:	6903      	ldr	r3, [r0, #16]
 800f8e2:	690c      	ldr	r4, [r1, #16]
 800f8e4:	42a3      	cmp	r3, r4
 800f8e6:	4607      	mov	r7, r0
 800f8e8:	db7e      	blt.n	800f9e8 <quorem+0x10c>
 800f8ea:	3c01      	subs	r4, #1
 800f8ec:	f101 0814 	add.w	r8, r1, #20
 800f8f0:	00a3      	lsls	r3, r4, #2
 800f8f2:	f100 0514 	add.w	r5, r0, #20
 800f8f6:	9300      	str	r3, [sp, #0]
 800f8f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8fc:	9301      	str	r3, [sp, #4]
 800f8fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f902:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f906:	3301      	adds	r3, #1
 800f908:	429a      	cmp	r2, r3
 800f90a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f90e:	fbb2 f6f3 	udiv	r6, r2, r3
 800f912:	d32e      	bcc.n	800f972 <quorem+0x96>
 800f914:	f04f 0a00 	mov.w	sl, #0
 800f918:	46c4      	mov	ip, r8
 800f91a:	46ae      	mov	lr, r5
 800f91c:	46d3      	mov	fp, sl
 800f91e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f922:	b298      	uxth	r0, r3
 800f924:	fb06 a000 	mla	r0, r6, r0, sl
 800f928:	0c02      	lsrs	r2, r0, #16
 800f92a:	0c1b      	lsrs	r3, r3, #16
 800f92c:	fb06 2303 	mla	r3, r6, r3, r2
 800f930:	f8de 2000 	ldr.w	r2, [lr]
 800f934:	b280      	uxth	r0, r0
 800f936:	b292      	uxth	r2, r2
 800f938:	1a12      	subs	r2, r2, r0
 800f93a:	445a      	add	r2, fp
 800f93c:	f8de 0000 	ldr.w	r0, [lr]
 800f940:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f944:	b29b      	uxth	r3, r3
 800f946:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f94a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f94e:	b292      	uxth	r2, r2
 800f950:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f954:	45e1      	cmp	r9, ip
 800f956:	f84e 2b04 	str.w	r2, [lr], #4
 800f95a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f95e:	d2de      	bcs.n	800f91e <quorem+0x42>
 800f960:	9b00      	ldr	r3, [sp, #0]
 800f962:	58eb      	ldr	r3, [r5, r3]
 800f964:	b92b      	cbnz	r3, 800f972 <quorem+0x96>
 800f966:	9b01      	ldr	r3, [sp, #4]
 800f968:	3b04      	subs	r3, #4
 800f96a:	429d      	cmp	r5, r3
 800f96c:	461a      	mov	r2, r3
 800f96e:	d32f      	bcc.n	800f9d0 <quorem+0xf4>
 800f970:	613c      	str	r4, [r7, #16]
 800f972:	4638      	mov	r0, r7
 800f974:	f001 f90e 	bl	8010b94 <__mcmp>
 800f978:	2800      	cmp	r0, #0
 800f97a:	db25      	blt.n	800f9c8 <quorem+0xec>
 800f97c:	4629      	mov	r1, r5
 800f97e:	2000      	movs	r0, #0
 800f980:	f858 2b04 	ldr.w	r2, [r8], #4
 800f984:	f8d1 c000 	ldr.w	ip, [r1]
 800f988:	fa1f fe82 	uxth.w	lr, r2
 800f98c:	fa1f f38c 	uxth.w	r3, ip
 800f990:	eba3 030e 	sub.w	r3, r3, lr
 800f994:	4403      	add	r3, r0
 800f996:	0c12      	lsrs	r2, r2, #16
 800f998:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f99c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9a6:	45c1      	cmp	r9, r8
 800f9a8:	f841 3b04 	str.w	r3, [r1], #4
 800f9ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f9b0:	d2e6      	bcs.n	800f980 <quorem+0xa4>
 800f9b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9ba:	b922      	cbnz	r2, 800f9c6 <quorem+0xea>
 800f9bc:	3b04      	subs	r3, #4
 800f9be:	429d      	cmp	r5, r3
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	d30b      	bcc.n	800f9dc <quorem+0x100>
 800f9c4:	613c      	str	r4, [r7, #16]
 800f9c6:	3601      	adds	r6, #1
 800f9c8:	4630      	mov	r0, r6
 800f9ca:	b003      	add	sp, #12
 800f9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d0:	6812      	ldr	r2, [r2, #0]
 800f9d2:	3b04      	subs	r3, #4
 800f9d4:	2a00      	cmp	r2, #0
 800f9d6:	d1cb      	bne.n	800f970 <quorem+0x94>
 800f9d8:	3c01      	subs	r4, #1
 800f9da:	e7c6      	b.n	800f96a <quorem+0x8e>
 800f9dc:	6812      	ldr	r2, [r2, #0]
 800f9de:	3b04      	subs	r3, #4
 800f9e0:	2a00      	cmp	r2, #0
 800f9e2:	d1ef      	bne.n	800f9c4 <quorem+0xe8>
 800f9e4:	3c01      	subs	r4, #1
 800f9e6:	e7ea      	b.n	800f9be <quorem+0xe2>
 800f9e8:	2000      	movs	r0, #0
 800f9ea:	e7ee      	b.n	800f9ca <quorem+0xee>
 800f9ec:	0000      	movs	r0, r0
	...

0800f9f0 <_dtoa_r>:
 800f9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f4:	69c7      	ldr	r7, [r0, #28]
 800f9f6:	b099      	sub	sp, #100	@ 0x64
 800f9f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f9fc:	ec55 4b10 	vmov	r4, r5, d0
 800fa00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fa02:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa04:	4683      	mov	fp, r0
 800fa06:	920e      	str	r2, [sp, #56]	@ 0x38
 800fa08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fa0a:	b97f      	cbnz	r7, 800fa2c <_dtoa_r+0x3c>
 800fa0c:	2010      	movs	r0, #16
 800fa0e:	f7fe fd4f 	bl	800e4b0 <malloc>
 800fa12:	4602      	mov	r2, r0
 800fa14:	f8cb 001c 	str.w	r0, [fp, #28]
 800fa18:	b920      	cbnz	r0, 800fa24 <_dtoa_r+0x34>
 800fa1a:	4ba7      	ldr	r3, [pc, #668]	@ (800fcb8 <_dtoa_r+0x2c8>)
 800fa1c:	21ef      	movs	r1, #239	@ 0xef
 800fa1e:	48a7      	ldr	r0, [pc, #668]	@ (800fcbc <_dtoa_r+0x2cc>)
 800fa20:	f002 fd3a 	bl	8012498 <__assert_func>
 800fa24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fa28:	6007      	str	r7, [r0, #0]
 800fa2a:	60c7      	str	r7, [r0, #12]
 800fa2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa30:	6819      	ldr	r1, [r3, #0]
 800fa32:	b159      	cbz	r1, 800fa4c <_dtoa_r+0x5c>
 800fa34:	685a      	ldr	r2, [r3, #4]
 800fa36:	604a      	str	r2, [r1, #4]
 800fa38:	2301      	movs	r3, #1
 800fa3a:	4093      	lsls	r3, r2
 800fa3c:	608b      	str	r3, [r1, #8]
 800fa3e:	4658      	mov	r0, fp
 800fa40:	f000 fe24 	bl	801068c <_Bfree>
 800fa44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	601a      	str	r2, [r3, #0]
 800fa4c:	1e2b      	subs	r3, r5, #0
 800fa4e:	bfb9      	ittee	lt
 800fa50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fa54:	9303      	strlt	r3, [sp, #12]
 800fa56:	2300      	movge	r3, #0
 800fa58:	6033      	strge	r3, [r6, #0]
 800fa5a:	9f03      	ldr	r7, [sp, #12]
 800fa5c:	4b98      	ldr	r3, [pc, #608]	@ (800fcc0 <_dtoa_r+0x2d0>)
 800fa5e:	bfbc      	itt	lt
 800fa60:	2201      	movlt	r2, #1
 800fa62:	6032      	strlt	r2, [r6, #0]
 800fa64:	43bb      	bics	r3, r7
 800fa66:	d112      	bne.n	800fa8e <_dtoa_r+0x9e>
 800fa68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fa6e:	6013      	str	r3, [r2, #0]
 800fa70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fa74:	4323      	orrs	r3, r4
 800fa76:	f000 854d 	beq.w	8010514 <_dtoa_r+0xb24>
 800fa7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fcd4 <_dtoa_r+0x2e4>
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	f000 854f 	beq.w	8010524 <_dtoa_r+0xb34>
 800fa86:	f10a 0303 	add.w	r3, sl, #3
 800fa8a:	f000 bd49 	b.w	8010520 <_dtoa_r+0xb30>
 800fa8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa92:	2200      	movs	r2, #0
 800fa94:	ec51 0b17 	vmov	r0, r1, d7
 800fa98:	2300      	movs	r3, #0
 800fa9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fa9e:	f7f1 f833 	bl	8000b08 <__aeabi_dcmpeq>
 800faa2:	4680      	mov	r8, r0
 800faa4:	b158      	cbz	r0, 800fabe <_dtoa_r+0xce>
 800faa6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800faa8:	2301      	movs	r3, #1
 800faaa:	6013      	str	r3, [r2, #0]
 800faac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800faae:	b113      	cbz	r3, 800fab6 <_dtoa_r+0xc6>
 800fab0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fab2:	4b84      	ldr	r3, [pc, #528]	@ (800fcc4 <_dtoa_r+0x2d4>)
 800fab4:	6013      	str	r3, [r2, #0]
 800fab6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fcd8 <_dtoa_r+0x2e8>
 800faba:	f000 bd33 	b.w	8010524 <_dtoa_r+0xb34>
 800fabe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fac2:	aa16      	add	r2, sp, #88	@ 0x58
 800fac4:	a917      	add	r1, sp, #92	@ 0x5c
 800fac6:	4658      	mov	r0, fp
 800fac8:	f001 f984 	bl	8010dd4 <__d2b>
 800facc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fad0:	4681      	mov	r9, r0
 800fad2:	2e00      	cmp	r6, #0
 800fad4:	d077      	beq.n	800fbc6 <_dtoa_r+0x1d6>
 800fad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fad8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fadc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fae4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fae8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800faec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800faf0:	4619      	mov	r1, r3
 800faf2:	2200      	movs	r2, #0
 800faf4:	4b74      	ldr	r3, [pc, #464]	@ (800fcc8 <_dtoa_r+0x2d8>)
 800faf6:	f7f0 fbe7 	bl	80002c8 <__aeabi_dsub>
 800fafa:	a369      	add	r3, pc, #420	@ (adr r3, 800fca0 <_dtoa_r+0x2b0>)
 800fafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb00:	f7f0 fd9a 	bl	8000638 <__aeabi_dmul>
 800fb04:	a368      	add	r3, pc, #416	@ (adr r3, 800fca8 <_dtoa_r+0x2b8>)
 800fb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0a:	f7f0 fbdf 	bl	80002cc <__adddf3>
 800fb0e:	4604      	mov	r4, r0
 800fb10:	4630      	mov	r0, r6
 800fb12:	460d      	mov	r5, r1
 800fb14:	f7f0 fd26 	bl	8000564 <__aeabi_i2d>
 800fb18:	a365      	add	r3, pc, #404	@ (adr r3, 800fcb0 <_dtoa_r+0x2c0>)
 800fb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1e:	f7f0 fd8b 	bl	8000638 <__aeabi_dmul>
 800fb22:	4602      	mov	r2, r0
 800fb24:	460b      	mov	r3, r1
 800fb26:	4620      	mov	r0, r4
 800fb28:	4629      	mov	r1, r5
 800fb2a:	f7f0 fbcf 	bl	80002cc <__adddf3>
 800fb2e:	4604      	mov	r4, r0
 800fb30:	460d      	mov	r5, r1
 800fb32:	f7f1 f831 	bl	8000b98 <__aeabi_d2iz>
 800fb36:	2200      	movs	r2, #0
 800fb38:	4607      	mov	r7, r0
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	4629      	mov	r1, r5
 800fb40:	f7f0 ffec 	bl	8000b1c <__aeabi_dcmplt>
 800fb44:	b140      	cbz	r0, 800fb58 <_dtoa_r+0x168>
 800fb46:	4638      	mov	r0, r7
 800fb48:	f7f0 fd0c 	bl	8000564 <__aeabi_i2d>
 800fb4c:	4622      	mov	r2, r4
 800fb4e:	462b      	mov	r3, r5
 800fb50:	f7f0 ffda 	bl	8000b08 <__aeabi_dcmpeq>
 800fb54:	b900      	cbnz	r0, 800fb58 <_dtoa_r+0x168>
 800fb56:	3f01      	subs	r7, #1
 800fb58:	2f16      	cmp	r7, #22
 800fb5a:	d851      	bhi.n	800fc00 <_dtoa_r+0x210>
 800fb5c:	4b5b      	ldr	r3, [pc, #364]	@ (800fccc <_dtoa_r+0x2dc>)
 800fb5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb6a:	f7f0 ffd7 	bl	8000b1c <__aeabi_dcmplt>
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	d048      	beq.n	800fc04 <_dtoa_r+0x214>
 800fb72:	3f01      	subs	r7, #1
 800fb74:	2300      	movs	r3, #0
 800fb76:	9312      	str	r3, [sp, #72]	@ 0x48
 800fb78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fb7a:	1b9b      	subs	r3, r3, r6
 800fb7c:	1e5a      	subs	r2, r3, #1
 800fb7e:	bf44      	itt	mi
 800fb80:	f1c3 0801 	rsbmi	r8, r3, #1
 800fb84:	2300      	movmi	r3, #0
 800fb86:	9208      	str	r2, [sp, #32]
 800fb88:	bf54      	ite	pl
 800fb8a:	f04f 0800 	movpl.w	r8, #0
 800fb8e:	9308      	strmi	r3, [sp, #32]
 800fb90:	2f00      	cmp	r7, #0
 800fb92:	db39      	blt.n	800fc08 <_dtoa_r+0x218>
 800fb94:	9b08      	ldr	r3, [sp, #32]
 800fb96:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fb98:	443b      	add	r3, r7
 800fb9a:	9308      	str	r3, [sp, #32]
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fba2:	2b09      	cmp	r3, #9
 800fba4:	d864      	bhi.n	800fc70 <_dtoa_r+0x280>
 800fba6:	2b05      	cmp	r3, #5
 800fba8:	bfc4      	itt	gt
 800fbaa:	3b04      	subgt	r3, #4
 800fbac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbb0:	f1a3 0302 	sub.w	r3, r3, #2
 800fbb4:	bfcc      	ite	gt
 800fbb6:	2400      	movgt	r4, #0
 800fbb8:	2401      	movle	r4, #1
 800fbba:	2b03      	cmp	r3, #3
 800fbbc:	d863      	bhi.n	800fc86 <_dtoa_r+0x296>
 800fbbe:	e8df f003 	tbb	[pc, r3]
 800fbc2:	372a      	.short	0x372a
 800fbc4:	5535      	.short	0x5535
 800fbc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fbca:	441e      	add	r6, r3
 800fbcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fbd0:	2b20      	cmp	r3, #32
 800fbd2:	bfc1      	itttt	gt
 800fbd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fbd8:	409f      	lslgt	r7, r3
 800fbda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fbde:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fbe2:	bfd6      	itet	le
 800fbe4:	f1c3 0320 	rsble	r3, r3, #32
 800fbe8:	ea47 0003 	orrgt.w	r0, r7, r3
 800fbec:	fa04 f003 	lslle.w	r0, r4, r3
 800fbf0:	f7f0 fca8 	bl	8000544 <__aeabi_ui2d>
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fbfa:	3e01      	subs	r6, #1
 800fbfc:	9214      	str	r2, [sp, #80]	@ 0x50
 800fbfe:	e777      	b.n	800faf0 <_dtoa_r+0x100>
 800fc00:	2301      	movs	r3, #1
 800fc02:	e7b8      	b.n	800fb76 <_dtoa_r+0x186>
 800fc04:	9012      	str	r0, [sp, #72]	@ 0x48
 800fc06:	e7b7      	b.n	800fb78 <_dtoa_r+0x188>
 800fc08:	427b      	negs	r3, r7
 800fc0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	eba8 0807 	sub.w	r8, r8, r7
 800fc12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fc14:	e7c4      	b.n	800fba0 <_dtoa_r+0x1b0>
 800fc16:	2300      	movs	r3, #0
 800fc18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	dc35      	bgt.n	800fc8c <_dtoa_r+0x29c>
 800fc20:	2301      	movs	r3, #1
 800fc22:	9300      	str	r3, [sp, #0]
 800fc24:	9307      	str	r3, [sp, #28]
 800fc26:	461a      	mov	r2, r3
 800fc28:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc2a:	e00b      	b.n	800fc44 <_dtoa_r+0x254>
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	e7f3      	b.n	800fc18 <_dtoa_r+0x228>
 800fc30:	2300      	movs	r3, #0
 800fc32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc36:	18fb      	adds	r3, r7, r3
 800fc38:	9300      	str	r3, [sp, #0]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	9307      	str	r3, [sp, #28]
 800fc40:	bfb8      	it	lt
 800fc42:	2301      	movlt	r3, #1
 800fc44:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fc48:	2100      	movs	r1, #0
 800fc4a:	2204      	movs	r2, #4
 800fc4c:	f102 0514 	add.w	r5, r2, #20
 800fc50:	429d      	cmp	r5, r3
 800fc52:	d91f      	bls.n	800fc94 <_dtoa_r+0x2a4>
 800fc54:	6041      	str	r1, [r0, #4]
 800fc56:	4658      	mov	r0, fp
 800fc58:	f000 fcd8 	bl	801060c <_Balloc>
 800fc5c:	4682      	mov	sl, r0
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	d13c      	bne.n	800fcdc <_dtoa_r+0x2ec>
 800fc62:	4b1b      	ldr	r3, [pc, #108]	@ (800fcd0 <_dtoa_r+0x2e0>)
 800fc64:	4602      	mov	r2, r0
 800fc66:	f240 11af 	movw	r1, #431	@ 0x1af
 800fc6a:	e6d8      	b.n	800fa1e <_dtoa_r+0x2e>
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	e7e0      	b.n	800fc32 <_dtoa_r+0x242>
 800fc70:	2401      	movs	r4, #1
 800fc72:	2300      	movs	r3, #0
 800fc74:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc76:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fc78:	f04f 33ff 	mov.w	r3, #4294967295
 800fc7c:	9300      	str	r3, [sp, #0]
 800fc7e:	9307      	str	r3, [sp, #28]
 800fc80:	2200      	movs	r2, #0
 800fc82:	2312      	movs	r3, #18
 800fc84:	e7d0      	b.n	800fc28 <_dtoa_r+0x238>
 800fc86:	2301      	movs	r3, #1
 800fc88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc8a:	e7f5      	b.n	800fc78 <_dtoa_r+0x288>
 800fc8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc8e:	9300      	str	r3, [sp, #0]
 800fc90:	9307      	str	r3, [sp, #28]
 800fc92:	e7d7      	b.n	800fc44 <_dtoa_r+0x254>
 800fc94:	3101      	adds	r1, #1
 800fc96:	0052      	lsls	r2, r2, #1
 800fc98:	e7d8      	b.n	800fc4c <_dtoa_r+0x25c>
 800fc9a:	bf00      	nop
 800fc9c:	f3af 8000 	nop.w
 800fca0:	636f4361 	.word	0x636f4361
 800fca4:	3fd287a7 	.word	0x3fd287a7
 800fca8:	8b60c8b3 	.word	0x8b60c8b3
 800fcac:	3fc68a28 	.word	0x3fc68a28
 800fcb0:	509f79fb 	.word	0x509f79fb
 800fcb4:	3fd34413 	.word	0x3fd34413
 800fcb8:	08013e9e 	.word	0x08013e9e
 800fcbc:	08013eb5 	.word	0x08013eb5
 800fcc0:	7ff00000 	.word	0x7ff00000
 800fcc4:	08013e69 	.word	0x08013e69
 800fcc8:	3ff80000 	.word	0x3ff80000
 800fccc:	08013fb0 	.word	0x08013fb0
 800fcd0:	08013f0d 	.word	0x08013f0d
 800fcd4:	08013e9a 	.word	0x08013e9a
 800fcd8:	08013e68 	.word	0x08013e68
 800fcdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fce0:	6018      	str	r0, [r3, #0]
 800fce2:	9b07      	ldr	r3, [sp, #28]
 800fce4:	2b0e      	cmp	r3, #14
 800fce6:	f200 80a4 	bhi.w	800fe32 <_dtoa_r+0x442>
 800fcea:	2c00      	cmp	r4, #0
 800fcec:	f000 80a1 	beq.w	800fe32 <_dtoa_r+0x442>
 800fcf0:	2f00      	cmp	r7, #0
 800fcf2:	dd33      	ble.n	800fd5c <_dtoa_r+0x36c>
 800fcf4:	4bad      	ldr	r3, [pc, #692]	@ (800ffac <_dtoa_r+0x5bc>)
 800fcf6:	f007 020f 	and.w	r2, r7, #15
 800fcfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcfe:	ed93 7b00 	vldr	d7, [r3]
 800fd02:	05f8      	lsls	r0, r7, #23
 800fd04:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fd08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fd0c:	d516      	bpl.n	800fd3c <_dtoa_r+0x34c>
 800fd0e:	4ba8      	ldr	r3, [pc, #672]	@ (800ffb0 <_dtoa_r+0x5c0>)
 800fd10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd18:	f7f0 fdb8 	bl	800088c <__aeabi_ddiv>
 800fd1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd20:	f004 040f 	and.w	r4, r4, #15
 800fd24:	2603      	movs	r6, #3
 800fd26:	4da2      	ldr	r5, [pc, #648]	@ (800ffb0 <_dtoa_r+0x5c0>)
 800fd28:	b954      	cbnz	r4, 800fd40 <_dtoa_r+0x350>
 800fd2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd32:	f7f0 fdab 	bl	800088c <__aeabi_ddiv>
 800fd36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd3a:	e028      	b.n	800fd8e <_dtoa_r+0x39e>
 800fd3c:	2602      	movs	r6, #2
 800fd3e:	e7f2      	b.n	800fd26 <_dtoa_r+0x336>
 800fd40:	07e1      	lsls	r1, r4, #31
 800fd42:	d508      	bpl.n	800fd56 <_dtoa_r+0x366>
 800fd44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd4c:	f7f0 fc74 	bl	8000638 <__aeabi_dmul>
 800fd50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd54:	3601      	adds	r6, #1
 800fd56:	1064      	asrs	r4, r4, #1
 800fd58:	3508      	adds	r5, #8
 800fd5a:	e7e5      	b.n	800fd28 <_dtoa_r+0x338>
 800fd5c:	f000 80d2 	beq.w	800ff04 <_dtoa_r+0x514>
 800fd60:	427c      	negs	r4, r7
 800fd62:	4b92      	ldr	r3, [pc, #584]	@ (800ffac <_dtoa_r+0x5bc>)
 800fd64:	4d92      	ldr	r5, [pc, #584]	@ (800ffb0 <_dtoa_r+0x5c0>)
 800fd66:	f004 020f 	and.w	r2, r4, #15
 800fd6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd76:	f7f0 fc5f 	bl	8000638 <__aeabi_dmul>
 800fd7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd7e:	1124      	asrs	r4, r4, #4
 800fd80:	2300      	movs	r3, #0
 800fd82:	2602      	movs	r6, #2
 800fd84:	2c00      	cmp	r4, #0
 800fd86:	f040 80b2 	bne.w	800feee <_dtoa_r+0x4fe>
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d1d3      	bne.n	800fd36 <_dtoa_r+0x346>
 800fd8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fd90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	f000 80b7 	beq.w	800ff08 <_dtoa_r+0x518>
 800fd9a:	4b86      	ldr	r3, [pc, #536]	@ (800ffb4 <_dtoa_r+0x5c4>)
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	4620      	mov	r0, r4
 800fda0:	4629      	mov	r1, r5
 800fda2:	f7f0 febb 	bl	8000b1c <__aeabi_dcmplt>
 800fda6:	2800      	cmp	r0, #0
 800fda8:	f000 80ae 	beq.w	800ff08 <_dtoa_r+0x518>
 800fdac:	9b07      	ldr	r3, [sp, #28]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	f000 80aa 	beq.w	800ff08 <_dtoa_r+0x518>
 800fdb4:	9b00      	ldr	r3, [sp, #0]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	dd37      	ble.n	800fe2a <_dtoa_r+0x43a>
 800fdba:	1e7b      	subs	r3, r7, #1
 800fdbc:	9304      	str	r3, [sp, #16]
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	4b7d      	ldr	r3, [pc, #500]	@ (800ffb8 <_dtoa_r+0x5c8>)
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	4629      	mov	r1, r5
 800fdc6:	f7f0 fc37 	bl	8000638 <__aeabi_dmul>
 800fdca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdce:	9c00      	ldr	r4, [sp, #0]
 800fdd0:	3601      	adds	r6, #1
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	f7f0 fbc6 	bl	8000564 <__aeabi_i2d>
 800fdd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fddc:	f7f0 fc2c 	bl	8000638 <__aeabi_dmul>
 800fde0:	4b76      	ldr	r3, [pc, #472]	@ (800ffbc <_dtoa_r+0x5cc>)
 800fde2:	2200      	movs	r2, #0
 800fde4:	f7f0 fa72 	bl	80002cc <__adddf3>
 800fde8:	4605      	mov	r5, r0
 800fdea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fdee:	2c00      	cmp	r4, #0
 800fdf0:	f040 808d 	bne.w	800ff0e <_dtoa_r+0x51e>
 800fdf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdf8:	4b71      	ldr	r3, [pc, #452]	@ (800ffc0 <_dtoa_r+0x5d0>)
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f7f0 fa64 	bl	80002c8 <__aeabi_dsub>
 800fe00:	4602      	mov	r2, r0
 800fe02:	460b      	mov	r3, r1
 800fe04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fe08:	462a      	mov	r2, r5
 800fe0a:	4633      	mov	r3, r6
 800fe0c:	f7f0 fea4 	bl	8000b58 <__aeabi_dcmpgt>
 800fe10:	2800      	cmp	r0, #0
 800fe12:	f040 828b 	bne.w	801032c <_dtoa_r+0x93c>
 800fe16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe1a:	462a      	mov	r2, r5
 800fe1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fe20:	f7f0 fe7c 	bl	8000b1c <__aeabi_dcmplt>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	f040 8128 	bne.w	801007a <_dtoa_r+0x68a>
 800fe2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fe2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fe32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f2c0 815a 	blt.w	80100ee <_dtoa_r+0x6fe>
 800fe3a:	2f0e      	cmp	r7, #14
 800fe3c:	f300 8157 	bgt.w	80100ee <_dtoa_r+0x6fe>
 800fe40:	4b5a      	ldr	r3, [pc, #360]	@ (800ffac <_dtoa_r+0x5bc>)
 800fe42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe46:	ed93 7b00 	vldr	d7, [r3]
 800fe4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	ed8d 7b00 	vstr	d7, [sp]
 800fe52:	da03      	bge.n	800fe5c <_dtoa_r+0x46c>
 800fe54:	9b07      	ldr	r3, [sp, #28]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	f340 8101 	ble.w	801005e <_dtoa_r+0x66e>
 800fe5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fe60:	4656      	mov	r6, sl
 800fe62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe66:	4620      	mov	r0, r4
 800fe68:	4629      	mov	r1, r5
 800fe6a:	f7f0 fd0f 	bl	800088c <__aeabi_ddiv>
 800fe6e:	f7f0 fe93 	bl	8000b98 <__aeabi_d2iz>
 800fe72:	4680      	mov	r8, r0
 800fe74:	f7f0 fb76 	bl	8000564 <__aeabi_i2d>
 800fe78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe7c:	f7f0 fbdc 	bl	8000638 <__aeabi_dmul>
 800fe80:	4602      	mov	r2, r0
 800fe82:	460b      	mov	r3, r1
 800fe84:	4620      	mov	r0, r4
 800fe86:	4629      	mov	r1, r5
 800fe88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fe8c:	f7f0 fa1c 	bl	80002c8 <__aeabi_dsub>
 800fe90:	f806 4b01 	strb.w	r4, [r6], #1
 800fe94:	9d07      	ldr	r5, [sp, #28]
 800fe96:	eba6 040a 	sub.w	r4, r6, sl
 800fe9a:	42a5      	cmp	r5, r4
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	460b      	mov	r3, r1
 800fea0:	f040 8117 	bne.w	80100d2 <_dtoa_r+0x6e2>
 800fea4:	f7f0 fa12 	bl	80002cc <__adddf3>
 800fea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800feac:	4604      	mov	r4, r0
 800feae:	460d      	mov	r5, r1
 800feb0:	f7f0 fe52 	bl	8000b58 <__aeabi_dcmpgt>
 800feb4:	2800      	cmp	r0, #0
 800feb6:	f040 80f9 	bne.w	80100ac <_dtoa_r+0x6bc>
 800feba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800febe:	4620      	mov	r0, r4
 800fec0:	4629      	mov	r1, r5
 800fec2:	f7f0 fe21 	bl	8000b08 <__aeabi_dcmpeq>
 800fec6:	b118      	cbz	r0, 800fed0 <_dtoa_r+0x4e0>
 800fec8:	f018 0f01 	tst.w	r8, #1
 800fecc:	f040 80ee 	bne.w	80100ac <_dtoa_r+0x6bc>
 800fed0:	4649      	mov	r1, r9
 800fed2:	4658      	mov	r0, fp
 800fed4:	f000 fbda 	bl	801068c <_Bfree>
 800fed8:	2300      	movs	r3, #0
 800feda:	7033      	strb	r3, [r6, #0]
 800fedc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fede:	3701      	adds	r7, #1
 800fee0:	601f      	str	r7, [r3, #0]
 800fee2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	f000 831d 	beq.w	8010524 <_dtoa_r+0xb34>
 800feea:	601e      	str	r6, [r3, #0]
 800feec:	e31a      	b.n	8010524 <_dtoa_r+0xb34>
 800feee:	07e2      	lsls	r2, r4, #31
 800fef0:	d505      	bpl.n	800fefe <_dtoa_r+0x50e>
 800fef2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fef6:	f7f0 fb9f 	bl	8000638 <__aeabi_dmul>
 800fefa:	3601      	adds	r6, #1
 800fefc:	2301      	movs	r3, #1
 800fefe:	1064      	asrs	r4, r4, #1
 800ff00:	3508      	adds	r5, #8
 800ff02:	e73f      	b.n	800fd84 <_dtoa_r+0x394>
 800ff04:	2602      	movs	r6, #2
 800ff06:	e742      	b.n	800fd8e <_dtoa_r+0x39e>
 800ff08:	9c07      	ldr	r4, [sp, #28]
 800ff0a:	9704      	str	r7, [sp, #16]
 800ff0c:	e761      	b.n	800fdd2 <_dtoa_r+0x3e2>
 800ff0e:	4b27      	ldr	r3, [pc, #156]	@ (800ffac <_dtoa_r+0x5bc>)
 800ff10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ff12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ff16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ff1a:	4454      	add	r4, sl
 800ff1c:	2900      	cmp	r1, #0
 800ff1e:	d053      	beq.n	800ffc8 <_dtoa_r+0x5d8>
 800ff20:	4928      	ldr	r1, [pc, #160]	@ (800ffc4 <_dtoa_r+0x5d4>)
 800ff22:	2000      	movs	r0, #0
 800ff24:	f7f0 fcb2 	bl	800088c <__aeabi_ddiv>
 800ff28:	4633      	mov	r3, r6
 800ff2a:	462a      	mov	r2, r5
 800ff2c:	f7f0 f9cc 	bl	80002c8 <__aeabi_dsub>
 800ff30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff34:	4656      	mov	r6, sl
 800ff36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff3a:	f7f0 fe2d 	bl	8000b98 <__aeabi_d2iz>
 800ff3e:	4605      	mov	r5, r0
 800ff40:	f7f0 fb10 	bl	8000564 <__aeabi_i2d>
 800ff44:	4602      	mov	r2, r0
 800ff46:	460b      	mov	r3, r1
 800ff48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff4c:	f7f0 f9bc 	bl	80002c8 <__aeabi_dsub>
 800ff50:	3530      	adds	r5, #48	@ 0x30
 800ff52:	4602      	mov	r2, r0
 800ff54:	460b      	mov	r3, r1
 800ff56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff5a:	f806 5b01 	strb.w	r5, [r6], #1
 800ff5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ff62:	f7f0 fddb 	bl	8000b1c <__aeabi_dcmplt>
 800ff66:	2800      	cmp	r0, #0
 800ff68:	d171      	bne.n	801004e <_dtoa_r+0x65e>
 800ff6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff6e:	4911      	ldr	r1, [pc, #68]	@ (800ffb4 <_dtoa_r+0x5c4>)
 800ff70:	2000      	movs	r0, #0
 800ff72:	f7f0 f9a9 	bl	80002c8 <__aeabi_dsub>
 800ff76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ff7a:	f7f0 fdcf 	bl	8000b1c <__aeabi_dcmplt>
 800ff7e:	2800      	cmp	r0, #0
 800ff80:	f040 8095 	bne.w	80100ae <_dtoa_r+0x6be>
 800ff84:	42a6      	cmp	r6, r4
 800ff86:	f43f af50 	beq.w	800fe2a <_dtoa_r+0x43a>
 800ff8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ff8e:	4b0a      	ldr	r3, [pc, #40]	@ (800ffb8 <_dtoa_r+0x5c8>)
 800ff90:	2200      	movs	r2, #0
 800ff92:	f7f0 fb51 	bl	8000638 <__aeabi_dmul>
 800ff96:	4b08      	ldr	r3, [pc, #32]	@ (800ffb8 <_dtoa_r+0x5c8>)
 800ff98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffa2:	f7f0 fb49 	bl	8000638 <__aeabi_dmul>
 800ffa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffaa:	e7c4      	b.n	800ff36 <_dtoa_r+0x546>
 800ffac:	08013fb0 	.word	0x08013fb0
 800ffb0:	08013f88 	.word	0x08013f88
 800ffb4:	3ff00000 	.word	0x3ff00000
 800ffb8:	40240000 	.word	0x40240000
 800ffbc:	401c0000 	.word	0x401c0000
 800ffc0:	40140000 	.word	0x40140000
 800ffc4:	3fe00000 	.word	0x3fe00000
 800ffc8:	4631      	mov	r1, r6
 800ffca:	4628      	mov	r0, r5
 800ffcc:	f7f0 fb34 	bl	8000638 <__aeabi_dmul>
 800ffd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ffd4:	9415      	str	r4, [sp, #84]	@ 0x54
 800ffd6:	4656      	mov	r6, sl
 800ffd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffdc:	f7f0 fddc 	bl	8000b98 <__aeabi_d2iz>
 800ffe0:	4605      	mov	r5, r0
 800ffe2:	f7f0 fabf 	bl	8000564 <__aeabi_i2d>
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	460b      	mov	r3, r1
 800ffea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffee:	f7f0 f96b 	bl	80002c8 <__aeabi_dsub>
 800fff2:	3530      	adds	r5, #48	@ 0x30
 800fff4:	f806 5b01 	strb.w	r5, [r6], #1
 800fff8:	4602      	mov	r2, r0
 800fffa:	460b      	mov	r3, r1
 800fffc:	42a6      	cmp	r6, r4
 800fffe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010002:	f04f 0200 	mov.w	r2, #0
 8010006:	d124      	bne.n	8010052 <_dtoa_r+0x662>
 8010008:	4bac      	ldr	r3, [pc, #688]	@ (80102bc <_dtoa_r+0x8cc>)
 801000a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801000e:	f7f0 f95d 	bl	80002cc <__adddf3>
 8010012:	4602      	mov	r2, r0
 8010014:	460b      	mov	r3, r1
 8010016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801001a:	f7f0 fd9d 	bl	8000b58 <__aeabi_dcmpgt>
 801001e:	2800      	cmp	r0, #0
 8010020:	d145      	bne.n	80100ae <_dtoa_r+0x6be>
 8010022:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010026:	49a5      	ldr	r1, [pc, #660]	@ (80102bc <_dtoa_r+0x8cc>)
 8010028:	2000      	movs	r0, #0
 801002a:	f7f0 f94d 	bl	80002c8 <__aeabi_dsub>
 801002e:	4602      	mov	r2, r0
 8010030:	460b      	mov	r3, r1
 8010032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010036:	f7f0 fd71 	bl	8000b1c <__aeabi_dcmplt>
 801003a:	2800      	cmp	r0, #0
 801003c:	f43f aef5 	beq.w	800fe2a <_dtoa_r+0x43a>
 8010040:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010042:	1e73      	subs	r3, r6, #1
 8010044:	9315      	str	r3, [sp, #84]	@ 0x54
 8010046:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801004a:	2b30      	cmp	r3, #48	@ 0x30
 801004c:	d0f8      	beq.n	8010040 <_dtoa_r+0x650>
 801004e:	9f04      	ldr	r7, [sp, #16]
 8010050:	e73e      	b.n	800fed0 <_dtoa_r+0x4e0>
 8010052:	4b9b      	ldr	r3, [pc, #620]	@ (80102c0 <_dtoa_r+0x8d0>)
 8010054:	f7f0 faf0 	bl	8000638 <__aeabi_dmul>
 8010058:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801005c:	e7bc      	b.n	800ffd8 <_dtoa_r+0x5e8>
 801005e:	d10c      	bne.n	801007a <_dtoa_r+0x68a>
 8010060:	4b98      	ldr	r3, [pc, #608]	@ (80102c4 <_dtoa_r+0x8d4>)
 8010062:	2200      	movs	r2, #0
 8010064:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010068:	f7f0 fae6 	bl	8000638 <__aeabi_dmul>
 801006c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010070:	f7f0 fd68 	bl	8000b44 <__aeabi_dcmpge>
 8010074:	2800      	cmp	r0, #0
 8010076:	f000 8157 	beq.w	8010328 <_dtoa_r+0x938>
 801007a:	2400      	movs	r4, #0
 801007c:	4625      	mov	r5, r4
 801007e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010080:	43db      	mvns	r3, r3
 8010082:	9304      	str	r3, [sp, #16]
 8010084:	4656      	mov	r6, sl
 8010086:	2700      	movs	r7, #0
 8010088:	4621      	mov	r1, r4
 801008a:	4658      	mov	r0, fp
 801008c:	f000 fafe 	bl	801068c <_Bfree>
 8010090:	2d00      	cmp	r5, #0
 8010092:	d0dc      	beq.n	801004e <_dtoa_r+0x65e>
 8010094:	b12f      	cbz	r7, 80100a2 <_dtoa_r+0x6b2>
 8010096:	42af      	cmp	r7, r5
 8010098:	d003      	beq.n	80100a2 <_dtoa_r+0x6b2>
 801009a:	4639      	mov	r1, r7
 801009c:	4658      	mov	r0, fp
 801009e:	f000 faf5 	bl	801068c <_Bfree>
 80100a2:	4629      	mov	r1, r5
 80100a4:	4658      	mov	r0, fp
 80100a6:	f000 faf1 	bl	801068c <_Bfree>
 80100aa:	e7d0      	b.n	801004e <_dtoa_r+0x65e>
 80100ac:	9704      	str	r7, [sp, #16]
 80100ae:	4633      	mov	r3, r6
 80100b0:	461e      	mov	r6, r3
 80100b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100b6:	2a39      	cmp	r2, #57	@ 0x39
 80100b8:	d107      	bne.n	80100ca <_dtoa_r+0x6da>
 80100ba:	459a      	cmp	sl, r3
 80100bc:	d1f8      	bne.n	80100b0 <_dtoa_r+0x6c0>
 80100be:	9a04      	ldr	r2, [sp, #16]
 80100c0:	3201      	adds	r2, #1
 80100c2:	9204      	str	r2, [sp, #16]
 80100c4:	2230      	movs	r2, #48	@ 0x30
 80100c6:	f88a 2000 	strb.w	r2, [sl]
 80100ca:	781a      	ldrb	r2, [r3, #0]
 80100cc:	3201      	adds	r2, #1
 80100ce:	701a      	strb	r2, [r3, #0]
 80100d0:	e7bd      	b.n	801004e <_dtoa_r+0x65e>
 80100d2:	4b7b      	ldr	r3, [pc, #492]	@ (80102c0 <_dtoa_r+0x8d0>)
 80100d4:	2200      	movs	r2, #0
 80100d6:	f7f0 faaf 	bl	8000638 <__aeabi_dmul>
 80100da:	2200      	movs	r2, #0
 80100dc:	2300      	movs	r3, #0
 80100de:	4604      	mov	r4, r0
 80100e0:	460d      	mov	r5, r1
 80100e2:	f7f0 fd11 	bl	8000b08 <__aeabi_dcmpeq>
 80100e6:	2800      	cmp	r0, #0
 80100e8:	f43f aebb 	beq.w	800fe62 <_dtoa_r+0x472>
 80100ec:	e6f0      	b.n	800fed0 <_dtoa_r+0x4e0>
 80100ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80100f0:	2a00      	cmp	r2, #0
 80100f2:	f000 80db 	beq.w	80102ac <_dtoa_r+0x8bc>
 80100f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100f8:	2a01      	cmp	r2, #1
 80100fa:	f300 80bf 	bgt.w	801027c <_dtoa_r+0x88c>
 80100fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010100:	2a00      	cmp	r2, #0
 8010102:	f000 80b7 	beq.w	8010274 <_dtoa_r+0x884>
 8010106:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801010a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801010c:	4646      	mov	r6, r8
 801010e:	9a08      	ldr	r2, [sp, #32]
 8010110:	2101      	movs	r1, #1
 8010112:	441a      	add	r2, r3
 8010114:	4658      	mov	r0, fp
 8010116:	4498      	add	r8, r3
 8010118:	9208      	str	r2, [sp, #32]
 801011a:	f000 fbb5 	bl	8010888 <__i2b>
 801011e:	4605      	mov	r5, r0
 8010120:	b15e      	cbz	r6, 801013a <_dtoa_r+0x74a>
 8010122:	9b08      	ldr	r3, [sp, #32]
 8010124:	2b00      	cmp	r3, #0
 8010126:	dd08      	ble.n	801013a <_dtoa_r+0x74a>
 8010128:	42b3      	cmp	r3, r6
 801012a:	9a08      	ldr	r2, [sp, #32]
 801012c:	bfa8      	it	ge
 801012e:	4633      	movge	r3, r6
 8010130:	eba8 0803 	sub.w	r8, r8, r3
 8010134:	1af6      	subs	r6, r6, r3
 8010136:	1ad3      	subs	r3, r2, r3
 8010138:	9308      	str	r3, [sp, #32]
 801013a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801013c:	b1f3      	cbz	r3, 801017c <_dtoa_r+0x78c>
 801013e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010140:	2b00      	cmp	r3, #0
 8010142:	f000 80b7 	beq.w	80102b4 <_dtoa_r+0x8c4>
 8010146:	b18c      	cbz	r4, 801016c <_dtoa_r+0x77c>
 8010148:	4629      	mov	r1, r5
 801014a:	4622      	mov	r2, r4
 801014c:	4658      	mov	r0, fp
 801014e:	f000 fc5b 	bl	8010a08 <__pow5mult>
 8010152:	464a      	mov	r2, r9
 8010154:	4601      	mov	r1, r0
 8010156:	4605      	mov	r5, r0
 8010158:	4658      	mov	r0, fp
 801015a:	f000 fbab 	bl	80108b4 <__multiply>
 801015e:	4649      	mov	r1, r9
 8010160:	9004      	str	r0, [sp, #16]
 8010162:	4658      	mov	r0, fp
 8010164:	f000 fa92 	bl	801068c <_Bfree>
 8010168:	9b04      	ldr	r3, [sp, #16]
 801016a:	4699      	mov	r9, r3
 801016c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801016e:	1b1a      	subs	r2, r3, r4
 8010170:	d004      	beq.n	801017c <_dtoa_r+0x78c>
 8010172:	4649      	mov	r1, r9
 8010174:	4658      	mov	r0, fp
 8010176:	f000 fc47 	bl	8010a08 <__pow5mult>
 801017a:	4681      	mov	r9, r0
 801017c:	2101      	movs	r1, #1
 801017e:	4658      	mov	r0, fp
 8010180:	f000 fb82 	bl	8010888 <__i2b>
 8010184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010186:	4604      	mov	r4, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	f000 81cf 	beq.w	801052c <_dtoa_r+0xb3c>
 801018e:	461a      	mov	r2, r3
 8010190:	4601      	mov	r1, r0
 8010192:	4658      	mov	r0, fp
 8010194:	f000 fc38 	bl	8010a08 <__pow5mult>
 8010198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801019a:	2b01      	cmp	r3, #1
 801019c:	4604      	mov	r4, r0
 801019e:	f300 8095 	bgt.w	80102cc <_dtoa_r+0x8dc>
 80101a2:	9b02      	ldr	r3, [sp, #8]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	f040 8087 	bne.w	80102b8 <_dtoa_r+0x8c8>
 80101aa:	9b03      	ldr	r3, [sp, #12]
 80101ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f040 8089 	bne.w	80102c8 <_dtoa_r+0x8d8>
 80101b6:	9b03      	ldr	r3, [sp, #12]
 80101b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80101bc:	0d1b      	lsrs	r3, r3, #20
 80101be:	051b      	lsls	r3, r3, #20
 80101c0:	b12b      	cbz	r3, 80101ce <_dtoa_r+0x7de>
 80101c2:	9b08      	ldr	r3, [sp, #32]
 80101c4:	3301      	adds	r3, #1
 80101c6:	9308      	str	r3, [sp, #32]
 80101c8:	f108 0801 	add.w	r8, r8, #1
 80101cc:	2301      	movs	r3, #1
 80101ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80101d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	f000 81b0 	beq.w	8010538 <_dtoa_r+0xb48>
 80101d8:	6923      	ldr	r3, [r4, #16]
 80101da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80101de:	6918      	ldr	r0, [r3, #16]
 80101e0:	f000 fb06 	bl	80107f0 <__hi0bits>
 80101e4:	f1c0 0020 	rsb	r0, r0, #32
 80101e8:	9b08      	ldr	r3, [sp, #32]
 80101ea:	4418      	add	r0, r3
 80101ec:	f010 001f 	ands.w	r0, r0, #31
 80101f0:	d077      	beq.n	80102e2 <_dtoa_r+0x8f2>
 80101f2:	f1c0 0320 	rsb	r3, r0, #32
 80101f6:	2b04      	cmp	r3, #4
 80101f8:	dd6b      	ble.n	80102d2 <_dtoa_r+0x8e2>
 80101fa:	9b08      	ldr	r3, [sp, #32]
 80101fc:	f1c0 001c 	rsb	r0, r0, #28
 8010200:	4403      	add	r3, r0
 8010202:	4480      	add	r8, r0
 8010204:	4406      	add	r6, r0
 8010206:	9308      	str	r3, [sp, #32]
 8010208:	f1b8 0f00 	cmp.w	r8, #0
 801020c:	dd05      	ble.n	801021a <_dtoa_r+0x82a>
 801020e:	4649      	mov	r1, r9
 8010210:	4642      	mov	r2, r8
 8010212:	4658      	mov	r0, fp
 8010214:	f000 fc52 	bl	8010abc <__lshift>
 8010218:	4681      	mov	r9, r0
 801021a:	9b08      	ldr	r3, [sp, #32]
 801021c:	2b00      	cmp	r3, #0
 801021e:	dd05      	ble.n	801022c <_dtoa_r+0x83c>
 8010220:	4621      	mov	r1, r4
 8010222:	461a      	mov	r2, r3
 8010224:	4658      	mov	r0, fp
 8010226:	f000 fc49 	bl	8010abc <__lshift>
 801022a:	4604      	mov	r4, r0
 801022c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801022e:	2b00      	cmp	r3, #0
 8010230:	d059      	beq.n	80102e6 <_dtoa_r+0x8f6>
 8010232:	4621      	mov	r1, r4
 8010234:	4648      	mov	r0, r9
 8010236:	f000 fcad 	bl	8010b94 <__mcmp>
 801023a:	2800      	cmp	r0, #0
 801023c:	da53      	bge.n	80102e6 <_dtoa_r+0x8f6>
 801023e:	1e7b      	subs	r3, r7, #1
 8010240:	9304      	str	r3, [sp, #16]
 8010242:	4649      	mov	r1, r9
 8010244:	2300      	movs	r3, #0
 8010246:	220a      	movs	r2, #10
 8010248:	4658      	mov	r0, fp
 801024a:	f000 fa41 	bl	80106d0 <__multadd>
 801024e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010250:	4681      	mov	r9, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	f000 8172 	beq.w	801053c <_dtoa_r+0xb4c>
 8010258:	2300      	movs	r3, #0
 801025a:	4629      	mov	r1, r5
 801025c:	220a      	movs	r2, #10
 801025e:	4658      	mov	r0, fp
 8010260:	f000 fa36 	bl	80106d0 <__multadd>
 8010264:	9b00      	ldr	r3, [sp, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	4605      	mov	r5, r0
 801026a:	dc67      	bgt.n	801033c <_dtoa_r+0x94c>
 801026c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801026e:	2b02      	cmp	r3, #2
 8010270:	dc41      	bgt.n	80102f6 <_dtoa_r+0x906>
 8010272:	e063      	b.n	801033c <_dtoa_r+0x94c>
 8010274:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010276:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801027a:	e746      	b.n	801010a <_dtoa_r+0x71a>
 801027c:	9b07      	ldr	r3, [sp, #28]
 801027e:	1e5c      	subs	r4, r3, #1
 8010280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010282:	42a3      	cmp	r3, r4
 8010284:	bfbf      	itttt	lt
 8010286:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010288:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801028a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801028c:	1ae3      	sublt	r3, r4, r3
 801028e:	bfb4      	ite	lt
 8010290:	18d2      	addlt	r2, r2, r3
 8010292:	1b1c      	subge	r4, r3, r4
 8010294:	9b07      	ldr	r3, [sp, #28]
 8010296:	bfbc      	itt	lt
 8010298:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801029a:	2400      	movlt	r4, #0
 801029c:	2b00      	cmp	r3, #0
 801029e:	bfb5      	itete	lt
 80102a0:	eba8 0603 	sublt.w	r6, r8, r3
 80102a4:	9b07      	ldrge	r3, [sp, #28]
 80102a6:	2300      	movlt	r3, #0
 80102a8:	4646      	movge	r6, r8
 80102aa:	e730      	b.n	801010e <_dtoa_r+0x71e>
 80102ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80102ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80102b0:	4646      	mov	r6, r8
 80102b2:	e735      	b.n	8010120 <_dtoa_r+0x730>
 80102b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80102b6:	e75c      	b.n	8010172 <_dtoa_r+0x782>
 80102b8:	2300      	movs	r3, #0
 80102ba:	e788      	b.n	80101ce <_dtoa_r+0x7de>
 80102bc:	3fe00000 	.word	0x3fe00000
 80102c0:	40240000 	.word	0x40240000
 80102c4:	40140000 	.word	0x40140000
 80102c8:	9b02      	ldr	r3, [sp, #8]
 80102ca:	e780      	b.n	80101ce <_dtoa_r+0x7de>
 80102cc:	2300      	movs	r3, #0
 80102ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80102d0:	e782      	b.n	80101d8 <_dtoa_r+0x7e8>
 80102d2:	d099      	beq.n	8010208 <_dtoa_r+0x818>
 80102d4:	9a08      	ldr	r2, [sp, #32]
 80102d6:	331c      	adds	r3, #28
 80102d8:	441a      	add	r2, r3
 80102da:	4498      	add	r8, r3
 80102dc:	441e      	add	r6, r3
 80102de:	9208      	str	r2, [sp, #32]
 80102e0:	e792      	b.n	8010208 <_dtoa_r+0x818>
 80102e2:	4603      	mov	r3, r0
 80102e4:	e7f6      	b.n	80102d4 <_dtoa_r+0x8e4>
 80102e6:	9b07      	ldr	r3, [sp, #28]
 80102e8:	9704      	str	r7, [sp, #16]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	dc20      	bgt.n	8010330 <_dtoa_r+0x940>
 80102ee:	9300      	str	r3, [sp, #0]
 80102f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102f2:	2b02      	cmp	r3, #2
 80102f4:	dd1e      	ble.n	8010334 <_dtoa_r+0x944>
 80102f6:	9b00      	ldr	r3, [sp, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f47f aec0 	bne.w	801007e <_dtoa_r+0x68e>
 80102fe:	4621      	mov	r1, r4
 8010300:	2205      	movs	r2, #5
 8010302:	4658      	mov	r0, fp
 8010304:	f000 f9e4 	bl	80106d0 <__multadd>
 8010308:	4601      	mov	r1, r0
 801030a:	4604      	mov	r4, r0
 801030c:	4648      	mov	r0, r9
 801030e:	f000 fc41 	bl	8010b94 <__mcmp>
 8010312:	2800      	cmp	r0, #0
 8010314:	f77f aeb3 	ble.w	801007e <_dtoa_r+0x68e>
 8010318:	4656      	mov	r6, sl
 801031a:	2331      	movs	r3, #49	@ 0x31
 801031c:	f806 3b01 	strb.w	r3, [r6], #1
 8010320:	9b04      	ldr	r3, [sp, #16]
 8010322:	3301      	adds	r3, #1
 8010324:	9304      	str	r3, [sp, #16]
 8010326:	e6ae      	b.n	8010086 <_dtoa_r+0x696>
 8010328:	9c07      	ldr	r4, [sp, #28]
 801032a:	9704      	str	r7, [sp, #16]
 801032c:	4625      	mov	r5, r4
 801032e:	e7f3      	b.n	8010318 <_dtoa_r+0x928>
 8010330:	9b07      	ldr	r3, [sp, #28]
 8010332:	9300      	str	r3, [sp, #0]
 8010334:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010336:	2b00      	cmp	r3, #0
 8010338:	f000 8104 	beq.w	8010544 <_dtoa_r+0xb54>
 801033c:	2e00      	cmp	r6, #0
 801033e:	dd05      	ble.n	801034c <_dtoa_r+0x95c>
 8010340:	4629      	mov	r1, r5
 8010342:	4632      	mov	r2, r6
 8010344:	4658      	mov	r0, fp
 8010346:	f000 fbb9 	bl	8010abc <__lshift>
 801034a:	4605      	mov	r5, r0
 801034c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801034e:	2b00      	cmp	r3, #0
 8010350:	d05a      	beq.n	8010408 <_dtoa_r+0xa18>
 8010352:	6869      	ldr	r1, [r5, #4]
 8010354:	4658      	mov	r0, fp
 8010356:	f000 f959 	bl	801060c <_Balloc>
 801035a:	4606      	mov	r6, r0
 801035c:	b928      	cbnz	r0, 801036a <_dtoa_r+0x97a>
 801035e:	4b84      	ldr	r3, [pc, #528]	@ (8010570 <_dtoa_r+0xb80>)
 8010360:	4602      	mov	r2, r0
 8010362:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010366:	f7ff bb5a 	b.w	800fa1e <_dtoa_r+0x2e>
 801036a:	692a      	ldr	r2, [r5, #16]
 801036c:	3202      	adds	r2, #2
 801036e:	0092      	lsls	r2, r2, #2
 8010370:	f105 010c 	add.w	r1, r5, #12
 8010374:	300c      	adds	r0, #12
 8010376:	f002 f877 	bl	8012468 <memcpy>
 801037a:	2201      	movs	r2, #1
 801037c:	4631      	mov	r1, r6
 801037e:	4658      	mov	r0, fp
 8010380:	f000 fb9c 	bl	8010abc <__lshift>
 8010384:	f10a 0301 	add.w	r3, sl, #1
 8010388:	9307      	str	r3, [sp, #28]
 801038a:	9b00      	ldr	r3, [sp, #0]
 801038c:	4453      	add	r3, sl
 801038e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010390:	9b02      	ldr	r3, [sp, #8]
 8010392:	f003 0301 	and.w	r3, r3, #1
 8010396:	462f      	mov	r7, r5
 8010398:	930a      	str	r3, [sp, #40]	@ 0x28
 801039a:	4605      	mov	r5, r0
 801039c:	9b07      	ldr	r3, [sp, #28]
 801039e:	4621      	mov	r1, r4
 80103a0:	3b01      	subs	r3, #1
 80103a2:	4648      	mov	r0, r9
 80103a4:	9300      	str	r3, [sp, #0]
 80103a6:	f7ff fa99 	bl	800f8dc <quorem>
 80103aa:	4639      	mov	r1, r7
 80103ac:	9002      	str	r0, [sp, #8]
 80103ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80103b2:	4648      	mov	r0, r9
 80103b4:	f000 fbee 	bl	8010b94 <__mcmp>
 80103b8:	462a      	mov	r2, r5
 80103ba:	9008      	str	r0, [sp, #32]
 80103bc:	4621      	mov	r1, r4
 80103be:	4658      	mov	r0, fp
 80103c0:	f000 fc04 	bl	8010bcc <__mdiff>
 80103c4:	68c2      	ldr	r2, [r0, #12]
 80103c6:	4606      	mov	r6, r0
 80103c8:	bb02      	cbnz	r2, 801040c <_dtoa_r+0xa1c>
 80103ca:	4601      	mov	r1, r0
 80103cc:	4648      	mov	r0, r9
 80103ce:	f000 fbe1 	bl	8010b94 <__mcmp>
 80103d2:	4602      	mov	r2, r0
 80103d4:	4631      	mov	r1, r6
 80103d6:	4658      	mov	r0, fp
 80103d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80103da:	f000 f957 	bl	801068c <_Bfree>
 80103de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103e2:	9e07      	ldr	r6, [sp, #28]
 80103e4:	ea43 0102 	orr.w	r1, r3, r2
 80103e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103ea:	4319      	orrs	r1, r3
 80103ec:	d110      	bne.n	8010410 <_dtoa_r+0xa20>
 80103ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80103f2:	d029      	beq.n	8010448 <_dtoa_r+0xa58>
 80103f4:	9b08      	ldr	r3, [sp, #32]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	dd02      	ble.n	8010400 <_dtoa_r+0xa10>
 80103fa:	9b02      	ldr	r3, [sp, #8]
 80103fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010400:	9b00      	ldr	r3, [sp, #0]
 8010402:	f883 8000 	strb.w	r8, [r3]
 8010406:	e63f      	b.n	8010088 <_dtoa_r+0x698>
 8010408:	4628      	mov	r0, r5
 801040a:	e7bb      	b.n	8010384 <_dtoa_r+0x994>
 801040c:	2201      	movs	r2, #1
 801040e:	e7e1      	b.n	80103d4 <_dtoa_r+0x9e4>
 8010410:	9b08      	ldr	r3, [sp, #32]
 8010412:	2b00      	cmp	r3, #0
 8010414:	db04      	blt.n	8010420 <_dtoa_r+0xa30>
 8010416:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010418:	430b      	orrs	r3, r1
 801041a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801041c:	430b      	orrs	r3, r1
 801041e:	d120      	bne.n	8010462 <_dtoa_r+0xa72>
 8010420:	2a00      	cmp	r2, #0
 8010422:	dded      	ble.n	8010400 <_dtoa_r+0xa10>
 8010424:	4649      	mov	r1, r9
 8010426:	2201      	movs	r2, #1
 8010428:	4658      	mov	r0, fp
 801042a:	f000 fb47 	bl	8010abc <__lshift>
 801042e:	4621      	mov	r1, r4
 8010430:	4681      	mov	r9, r0
 8010432:	f000 fbaf 	bl	8010b94 <__mcmp>
 8010436:	2800      	cmp	r0, #0
 8010438:	dc03      	bgt.n	8010442 <_dtoa_r+0xa52>
 801043a:	d1e1      	bne.n	8010400 <_dtoa_r+0xa10>
 801043c:	f018 0f01 	tst.w	r8, #1
 8010440:	d0de      	beq.n	8010400 <_dtoa_r+0xa10>
 8010442:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010446:	d1d8      	bne.n	80103fa <_dtoa_r+0xa0a>
 8010448:	9a00      	ldr	r2, [sp, #0]
 801044a:	2339      	movs	r3, #57	@ 0x39
 801044c:	7013      	strb	r3, [r2, #0]
 801044e:	4633      	mov	r3, r6
 8010450:	461e      	mov	r6, r3
 8010452:	3b01      	subs	r3, #1
 8010454:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010458:	2a39      	cmp	r2, #57	@ 0x39
 801045a:	d052      	beq.n	8010502 <_dtoa_r+0xb12>
 801045c:	3201      	adds	r2, #1
 801045e:	701a      	strb	r2, [r3, #0]
 8010460:	e612      	b.n	8010088 <_dtoa_r+0x698>
 8010462:	2a00      	cmp	r2, #0
 8010464:	dd07      	ble.n	8010476 <_dtoa_r+0xa86>
 8010466:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801046a:	d0ed      	beq.n	8010448 <_dtoa_r+0xa58>
 801046c:	9a00      	ldr	r2, [sp, #0]
 801046e:	f108 0301 	add.w	r3, r8, #1
 8010472:	7013      	strb	r3, [r2, #0]
 8010474:	e608      	b.n	8010088 <_dtoa_r+0x698>
 8010476:	9b07      	ldr	r3, [sp, #28]
 8010478:	9a07      	ldr	r2, [sp, #28]
 801047a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801047e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010480:	4293      	cmp	r3, r2
 8010482:	d028      	beq.n	80104d6 <_dtoa_r+0xae6>
 8010484:	4649      	mov	r1, r9
 8010486:	2300      	movs	r3, #0
 8010488:	220a      	movs	r2, #10
 801048a:	4658      	mov	r0, fp
 801048c:	f000 f920 	bl	80106d0 <__multadd>
 8010490:	42af      	cmp	r7, r5
 8010492:	4681      	mov	r9, r0
 8010494:	f04f 0300 	mov.w	r3, #0
 8010498:	f04f 020a 	mov.w	r2, #10
 801049c:	4639      	mov	r1, r7
 801049e:	4658      	mov	r0, fp
 80104a0:	d107      	bne.n	80104b2 <_dtoa_r+0xac2>
 80104a2:	f000 f915 	bl	80106d0 <__multadd>
 80104a6:	4607      	mov	r7, r0
 80104a8:	4605      	mov	r5, r0
 80104aa:	9b07      	ldr	r3, [sp, #28]
 80104ac:	3301      	adds	r3, #1
 80104ae:	9307      	str	r3, [sp, #28]
 80104b0:	e774      	b.n	801039c <_dtoa_r+0x9ac>
 80104b2:	f000 f90d 	bl	80106d0 <__multadd>
 80104b6:	4629      	mov	r1, r5
 80104b8:	4607      	mov	r7, r0
 80104ba:	2300      	movs	r3, #0
 80104bc:	220a      	movs	r2, #10
 80104be:	4658      	mov	r0, fp
 80104c0:	f000 f906 	bl	80106d0 <__multadd>
 80104c4:	4605      	mov	r5, r0
 80104c6:	e7f0      	b.n	80104aa <_dtoa_r+0xaba>
 80104c8:	9b00      	ldr	r3, [sp, #0]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	bfcc      	ite	gt
 80104ce:	461e      	movgt	r6, r3
 80104d0:	2601      	movle	r6, #1
 80104d2:	4456      	add	r6, sl
 80104d4:	2700      	movs	r7, #0
 80104d6:	4649      	mov	r1, r9
 80104d8:	2201      	movs	r2, #1
 80104da:	4658      	mov	r0, fp
 80104dc:	f000 faee 	bl	8010abc <__lshift>
 80104e0:	4621      	mov	r1, r4
 80104e2:	4681      	mov	r9, r0
 80104e4:	f000 fb56 	bl	8010b94 <__mcmp>
 80104e8:	2800      	cmp	r0, #0
 80104ea:	dcb0      	bgt.n	801044e <_dtoa_r+0xa5e>
 80104ec:	d102      	bne.n	80104f4 <_dtoa_r+0xb04>
 80104ee:	f018 0f01 	tst.w	r8, #1
 80104f2:	d1ac      	bne.n	801044e <_dtoa_r+0xa5e>
 80104f4:	4633      	mov	r3, r6
 80104f6:	461e      	mov	r6, r3
 80104f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104fc:	2a30      	cmp	r2, #48	@ 0x30
 80104fe:	d0fa      	beq.n	80104f6 <_dtoa_r+0xb06>
 8010500:	e5c2      	b.n	8010088 <_dtoa_r+0x698>
 8010502:	459a      	cmp	sl, r3
 8010504:	d1a4      	bne.n	8010450 <_dtoa_r+0xa60>
 8010506:	9b04      	ldr	r3, [sp, #16]
 8010508:	3301      	adds	r3, #1
 801050a:	9304      	str	r3, [sp, #16]
 801050c:	2331      	movs	r3, #49	@ 0x31
 801050e:	f88a 3000 	strb.w	r3, [sl]
 8010512:	e5b9      	b.n	8010088 <_dtoa_r+0x698>
 8010514:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010516:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010574 <_dtoa_r+0xb84>
 801051a:	b11b      	cbz	r3, 8010524 <_dtoa_r+0xb34>
 801051c:	f10a 0308 	add.w	r3, sl, #8
 8010520:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010522:	6013      	str	r3, [r2, #0]
 8010524:	4650      	mov	r0, sl
 8010526:	b019      	add	sp, #100	@ 0x64
 8010528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801052c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801052e:	2b01      	cmp	r3, #1
 8010530:	f77f ae37 	ble.w	80101a2 <_dtoa_r+0x7b2>
 8010534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010536:	930a      	str	r3, [sp, #40]	@ 0x28
 8010538:	2001      	movs	r0, #1
 801053a:	e655      	b.n	80101e8 <_dtoa_r+0x7f8>
 801053c:	9b00      	ldr	r3, [sp, #0]
 801053e:	2b00      	cmp	r3, #0
 8010540:	f77f aed6 	ble.w	80102f0 <_dtoa_r+0x900>
 8010544:	4656      	mov	r6, sl
 8010546:	4621      	mov	r1, r4
 8010548:	4648      	mov	r0, r9
 801054a:	f7ff f9c7 	bl	800f8dc <quorem>
 801054e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010552:	f806 8b01 	strb.w	r8, [r6], #1
 8010556:	9b00      	ldr	r3, [sp, #0]
 8010558:	eba6 020a 	sub.w	r2, r6, sl
 801055c:	4293      	cmp	r3, r2
 801055e:	ddb3      	ble.n	80104c8 <_dtoa_r+0xad8>
 8010560:	4649      	mov	r1, r9
 8010562:	2300      	movs	r3, #0
 8010564:	220a      	movs	r2, #10
 8010566:	4658      	mov	r0, fp
 8010568:	f000 f8b2 	bl	80106d0 <__multadd>
 801056c:	4681      	mov	r9, r0
 801056e:	e7ea      	b.n	8010546 <_dtoa_r+0xb56>
 8010570:	08013f0d 	.word	0x08013f0d
 8010574:	08013e91 	.word	0x08013e91

08010578 <_free_r>:
 8010578:	b538      	push	{r3, r4, r5, lr}
 801057a:	4605      	mov	r5, r0
 801057c:	2900      	cmp	r1, #0
 801057e:	d041      	beq.n	8010604 <_free_r+0x8c>
 8010580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010584:	1f0c      	subs	r4, r1, #4
 8010586:	2b00      	cmp	r3, #0
 8010588:	bfb8      	it	lt
 801058a:	18e4      	addlt	r4, r4, r3
 801058c:	f7fe f83a 	bl	800e604 <__malloc_lock>
 8010590:	4a1d      	ldr	r2, [pc, #116]	@ (8010608 <_free_r+0x90>)
 8010592:	6813      	ldr	r3, [r2, #0]
 8010594:	b933      	cbnz	r3, 80105a4 <_free_r+0x2c>
 8010596:	6063      	str	r3, [r4, #4]
 8010598:	6014      	str	r4, [r2, #0]
 801059a:	4628      	mov	r0, r5
 801059c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105a0:	f7fe b836 	b.w	800e610 <__malloc_unlock>
 80105a4:	42a3      	cmp	r3, r4
 80105a6:	d908      	bls.n	80105ba <_free_r+0x42>
 80105a8:	6820      	ldr	r0, [r4, #0]
 80105aa:	1821      	adds	r1, r4, r0
 80105ac:	428b      	cmp	r3, r1
 80105ae:	bf01      	itttt	eq
 80105b0:	6819      	ldreq	r1, [r3, #0]
 80105b2:	685b      	ldreq	r3, [r3, #4]
 80105b4:	1809      	addeq	r1, r1, r0
 80105b6:	6021      	streq	r1, [r4, #0]
 80105b8:	e7ed      	b.n	8010596 <_free_r+0x1e>
 80105ba:	461a      	mov	r2, r3
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	b10b      	cbz	r3, 80105c4 <_free_r+0x4c>
 80105c0:	42a3      	cmp	r3, r4
 80105c2:	d9fa      	bls.n	80105ba <_free_r+0x42>
 80105c4:	6811      	ldr	r1, [r2, #0]
 80105c6:	1850      	adds	r0, r2, r1
 80105c8:	42a0      	cmp	r0, r4
 80105ca:	d10b      	bne.n	80105e4 <_free_r+0x6c>
 80105cc:	6820      	ldr	r0, [r4, #0]
 80105ce:	4401      	add	r1, r0
 80105d0:	1850      	adds	r0, r2, r1
 80105d2:	4283      	cmp	r3, r0
 80105d4:	6011      	str	r1, [r2, #0]
 80105d6:	d1e0      	bne.n	801059a <_free_r+0x22>
 80105d8:	6818      	ldr	r0, [r3, #0]
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	6053      	str	r3, [r2, #4]
 80105de:	4408      	add	r0, r1
 80105e0:	6010      	str	r0, [r2, #0]
 80105e2:	e7da      	b.n	801059a <_free_r+0x22>
 80105e4:	d902      	bls.n	80105ec <_free_r+0x74>
 80105e6:	230c      	movs	r3, #12
 80105e8:	602b      	str	r3, [r5, #0]
 80105ea:	e7d6      	b.n	801059a <_free_r+0x22>
 80105ec:	6820      	ldr	r0, [r4, #0]
 80105ee:	1821      	adds	r1, r4, r0
 80105f0:	428b      	cmp	r3, r1
 80105f2:	bf04      	itt	eq
 80105f4:	6819      	ldreq	r1, [r3, #0]
 80105f6:	685b      	ldreq	r3, [r3, #4]
 80105f8:	6063      	str	r3, [r4, #4]
 80105fa:	bf04      	itt	eq
 80105fc:	1809      	addeq	r1, r1, r0
 80105fe:	6021      	streq	r1, [r4, #0]
 8010600:	6054      	str	r4, [r2, #4]
 8010602:	e7ca      	b.n	801059a <_free_r+0x22>
 8010604:	bd38      	pop	{r3, r4, r5, pc}
 8010606:	bf00      	nop
 8010608:	20003290 	.word	0x20003290

0801060c <_Balloc>:
 801060c:	b570      	push	{r4, r5, r6, lr}
 801060e:	69c6      	ldr	r6, [r0, #28]
 8010610:	4604      	mov	r4, r0
 8010612:	460d      	mov	r5, r1
 8010614:	b976      	cbnz	r6, 8010634 <_Balloc+0x28>
 8010616:	2010      	movs	r0, #16
 8010618:	f7fd ff4a 	bl	800e4b0 <malloc>
 801061c:	4602      	mov	r2, r0
 801061e:	61e0      	str	r0, [r4, #28]
 8010620:	b920      	cbnz	r0, 801062c <_Balloc+0x20>
 8010622:	4b18      	ldr	r3, [pc, #96]	@ (8010684 <_Balloc+0x78>)
 8010624:	4818      	ldr	r0, [pc, #96]	@ (8010688 <_Balloc+0x7c>)
 8010626:	216b      	movs	r1, #107	@ 0x6b
 8010628:	f001 ff36 	bl	8012498 <__assert_func>
 801062c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010630:	6006      	str	r6, [r0, #0]
 8010632:	60c6      	str	r6, [r0, #12]
 8010634:	69e6      	ldr	r6, [r4, #28]
 8010636:	68f3      	ldr	r3, [r6, #12]
 8010638:	b183      	cbz	r3, 801065c <_Balloc+0x50>
 801063a:	69e3      	ldr	r3, [r4, #28]
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010642:	b9b8      	cbnz	r0, 8010674 <_Balloc+0x68>
 8010644:	2101      	movs	r1, #1
 8010646:	fa01 f605 	lsl.w	r6, r1, r5
 801064a:	1d72      	adds	r2, r6, #5
 801064c:	0092      	lsls	r2, r2, #2
 801064e:	4620      	mov	r0, r4
 8010650:	f001 ff40 	bl	80124d4 <_calloc_r>
 8010654:	b160      	cbz	r0, 8010670 <_Balloc+0x64>
 8010656:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801065a:	e00e      	b.n	801067a <_Balloc+0x6e>
 801065c:	2221      	movs	r2, #33	@ 0x21
 801065e:	2104      	movs	r1, #4
 8010660:	4620      	mov	r0, r4
 8010662:	f001 ff37 	bl	80124d4 <_calloc_r>
 8010666:	69e3      	ldr	r3, [r4, #28]
 8010668:	60f0      	str	r0, [r6, #12]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d1e4      	bne.n	801063a <_Balloc+0x2e>
 8010670:	2000      	movs	r0, #0
 8010672:	bd70      	pop	{r4, r5, r6, pc}
 8010674:	6802      	ldr	r2, [r0, #0]
 8010676:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801067a:	2300      	movs	r3, #0
 801067c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010680:	e7f7      	b.n	8010672 <_Balloc+0x66>
 8010682:	bf00      	nop
 8010684:	08013e9e 	.word	0x08013e9e
 8010688:	08013f1e 	.word	0x08013f1e

0801068c <_Bfree>:
 801068c:	b570      	push	{r4, r5, r6, lr}
 801068e:	69c6      	ldr	r6, [r0, #28]
 8010690:	4605      	mov	r5, r0
 8010692:	460c      	mov	r4, r1
 8010694:	b976      	cbnz	r6, 80106b4 <_Bfree+0x28>
 8010696:	2010      	movs	r0, #16
 8010698:	f7fd ff0a 	bl	800e4b0 <malloc>
 801069c:	4602      	mov	r2, r0
 801069e:	61e8      	str	r0, [r5, #28]
 80106a0:	b920      	cbnz	r0, 80106ac <_Bfree+0x20>
 80106a2:	4b09      	ldr	r3, [pc, #36]	@ (80106c8 <_Bfree+0x3c>)
 80106a4:	4809      	ldr	r0, [pc, #36]	@ (80106cc <_Bfree+0x40>)
 80106a6:	218f      	movs	r1, #143	@ 0x8f
 80106a8:	f001 fef6 	bl	8012498 <__assert_func>
 80106ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106b0:	6006      	str	r6, [r0, #0]
 80106b2:	60c6      	str	r6, [r0, #12]
 80106b4:	b13c      	cbz	r4, 80106c6 <_Bfree+0x3a>
 80106b6:	69eb      	ldr	r3, [r5, #28]
 80106b8:	6862      	ldr	r2, [r4, #4]
 80106ba:	68db      	ldr	r3, [r3, #12]
 80106bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80106c0:	6021      	str	r1, [r4, #0]
 80106c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80106c6:	bd70      	pop	{r4, r5, r6, pc}
 80106c8:	08013e9e 	.word	0x08013e9e
 80106cc:	08013f1e 	.word	0x08013f1e

080106d0 <__multadd>:
 80106d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d4:	690d      	ldr	r5, [r1, #16]
 80106d6:	4607      	mov	r7, r0
 80106d8:	460c      	mov	r4, r1
 80106da:	461e      	mov	r6, r3
 80106dc:	f101 0c14 	add.w	ip, r1, #20
 80106e0:	2000      	movs	r0, #0
 80106e2:	f8dc 3000 	ldr.w	r3, [ip]
 80106e6:	b299      	uxth	r1, r3
 80106e8:	fb02 6101 	mla	r1, r2, r1, r6
 80106ec:	0c1e      	lsrs	r6, r3, #16
 80106ee:	0c0b      	lsrs	r3, r1, #16
 80106f0:	fb02 3306 	mla	r3, r2, r6, r3
 80106f4:	b289      	uxth	r1, r1
 80106f6:	3001      	adds	r0, #1
 80106f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80106fc:	4285      	cmp	r5, r0
 80106fe:	f84c 1b04 	str.w	r1, [ip], #4
 8010702:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010706:	dcec      	bgt.n	80106e2 <__multadd+0x12>
 8010708:	b30e      	cbz	r6, 801074e <__multadd+0x7e>
 801070a:	68a3      	ldr	r3, [r4, #8]
 801070c:	42ab      	cmp	r3, r5
 801070e:	dc19      	bgt.n	8010744 <__multadd+0x74>
 8010710:	6861      	ldr	r1, [r4, #4]
 8010712:	4638      	mov	r0, r7
 8010714:	3101      	adds	r1, #1
 8010716:	f7ff ff79 	bl	801060c <_Balloc>
 801071a:	4680      	mov	r8, r0
 801071c:	b928      	cbnz	r0, 801072a <__multadd+0x5a>
 801071e:	4602      	mov	r2, r0
 8010720:	4b0c      	ldr	r3, [pc, #48]	@ (8010754 <__multadd+0x84>)
 8010722:	480d      	ldr	r0, [pc, #52]	@ (8010758 <__multadd+0x88>)
 8010724:	21ba      	movs	r1, #186	@ 0xba
 8010726:	f001 feb7 	bl	8012498 <__assert_func>
 801072a:	6922      	ldr	r2, [r4, #16]
 801072c:	3202      	adds	r2, #2
 801072e:	f104 010c 	add.w	r1, r4, #12
 8010732:	0092      	lsls	r2, r2, #2
 8010734:	300c      	adds	r0, #12
 8010736:	f001 fe97 	bl	8012468 <memcpy>
 801073a:	4621      	mov	r1, r4
 801073c:	4638      	mov	r0, r7
 801073e:	f7ff ffa5 	bl	801068c <_Bfree>
 8010742:	4644      	mov	r4, r8
 8010744:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010748:	3501      	adds	r5, #1
 801074a:	615e      	str	r6, [r3, #20]
 801074c:	6125      	str	r5, [r4, #16]
 801074e:	4620      	mov	r0, r4
 8010750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010754:	08013f0d 	.word	0x08013f0d
 8010758:	08013f1e 	.word	0x08013f1e

0801075c <__s2b>:
 801075c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010760:	460c      	mov	r4, r1
 8010762:	4615      	mov	r5, r2
 8010764:	461f      	mov	r7, r3
 8010766:	2209      	movs	r2, #9
 8010768:	3308      	adds	r3, #8
 801076a:	4606      	mov	r6, r0
 801076c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010770:	2100      	movs	r1, #0
 8010772:	2201      	movs	r2, #1
 8010774:	429a      	cmp	r2, r3
 8010776:	db09      	blt.n	801078c <__s2b+0x30>
 8010778:	4630      	mov	r0, r6
 801077a:	f7ff ff47 	bl	801060c <_Balloc>
 801077e:	b940      	cbnz	r0, 8010792 <__s2b+0x36>
 8010780:	4602      	mov	r2, r0
 8010782:	4b19      	ldr	r3, [pc, #100]	@ (80107e8 <__s2b+0x8c>)
 8010784:	4819      	ldr	r0, [pc, #100]	@ (80107ec <__s2b+0x90>)
 8010786:	21d3      	movs	r1, #211	@ 0xd3
 8010788:	f001 fe86 	bl	8012498 <__assert_func>
 801078c:	0052      	lsls	r2, r2, #1
 801078e:	3101      	adds	r1, #1
 8010790:	e7f0      	b.n	8010774 <__s2b+0x18>
 8010792:	9b08      	ldr	r3, [sp, #32]
 8010794:	6143      	str	r3, [r0, #20]
 8010796:	2d09      	cmp	r5, #9
 8010798:	f04f 0301 	mov.w	r3, #1
 801079c:	6103      	str	r3, [r0, #16]
 801079e:	dd16      	ble.n	80107ce <__s2b+0x72>
 80107a0:	f104 0909 	add.w	r9, r4, #9
 80107a4:	46c8      	mov	r8, r9
 80107a6:	442c      	add	r4, r5
 80107a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80107ac:	4601      	mov	r1, r0
 80107ae:	3b30      	subs	r3, #48	@ 0x30
 80107b0:	220a      	movs	r2, #10
 80107b2:	4630      	mov	r0, r6
 80107b4:	f7ff ff8c 	bl	80106d0 <__multadd>
 80107b8:	45a0      	cmp	r8, r4
 80107ba:	d1f5      	bne.n	80107a8 <__s2b+0x4c>
 80107bc:	f1a5 0408 	sub.w	r4, r5, #8
 80107c0:	444c      	add	r4, r9
 80107c2:	1b2d      	subs	r5, r5, r4
 80107c4:	1963      	adds	r3, r4, r5
 80107c6:	42bb      	cmp	r3, r7
 80107c8:	db04      	blt.n	80107d4 <__s2b+0x78>
 80107ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107ce:	340a      	adds	r4, #10
 80107d0:	2509      	movs	r5, #9
 80107d2:	e7f6      	b.n	80107c2 <__s2b+0x66>
 80107d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80107d8:	4601      	mov	r1, r0
 80107da:	3b30      	subs	r3, #48	@ 0x30
 80107dc:	220a      	movs	r2, #10
 80107de:	4630      	mov	r0, r6
 80107e0:	f7ff ff76 	bl	80106d0 <__multadd>
 80107e4:	e7ee      	b.n	80107c4 <__s2b+0x68>
 80107e6:	bf00      	nop
 80107e8:	08013f0d 	.word	0x08013f0d
 80107ec:	08013f1e 	.word	0x08013f1e

080107f0 <__hi0bits>:
 80107f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80107f4:	4603      	mov	r3, r0
 80107f6:	bf36      	itet	cc
 80107f8:	0403      	lslcc	r3, r0, #16
 80107fa:	2000      	movcs	r0, #0
 80107fc:	2010      	movcc	r0, #16
 80107fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010802:	bf3c      	itt	cc
 8010804:	021b      	lslcc	r3, r3, #8
 8010806:	3008      	addcc	r0, #8
 8010808:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801080c:	bf3c      	itt	cc
 801080e:	011b      	lslcc	r3, r3, #4
 8010810:	3004      	addcc	r0, #4
 8010812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010816:	bf3c      	itt	cc
 8010818:	009b      	lslcc	r3, r3, #2
 801081a:	3002      	addcc	r0, #2
 801081c:	2b00      	cmp	r3, #0
 801081e:	db05      	blt.n	801082c <__hi0bits+0x3c>
 8010820:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010824:	f100 0001 	add.w	r0, r0, #1
 8010828:	bf08      	it	eq
 801082a:	2020      	moveq	r0, #32
 801082c:	4770      	bx	lr

0801082e <__lo0bits>:
 801082e:	6803      	ldr	r3, [r0, #0]
 8010830:	4602      	mov	r2, r0
 8010832:	f013 0007 	ands.w	r0, r3, #7
 8010836:	d00b      	beq.n	8010850 <__lo0bits+0x22>
 8010838:	07d9      	lsls	r1, r3, #31
 801083a:	d421      	bmi.n	8010880 <__lo0bits+0x52>
 801083c:	0798      	lsls	r0, r3, #30
 801083e:	bf49      	itett	mi
 8010840:	085b      	lsrmi	r3, r3, #1
 8010842:	089b      	lsrpl	r3, r3, #2
 8010844:	2001      	movmi	r0, #1
 8010846:	6013      	strmi	r3, [r2, #0]
 8010848:	bf5c      	itt	pl
 801084a:	6013      	strpl	r3, [r2, #0]
 801084c:	2002      	movpl	r0, #2
 801084e:	4770      	bx	lr
 8010850:	b299      	uxth	r1, r3
 8010852:	b909      	cbnz	r1, 8010858 <__lo0bits+0x2a>
 8010854:	0c1b      	lsrs	r3, r3, #16
 8010856:	2010      	movs	r0, #16
 8010858:	b2d9      	uxtb	r1, r3
 801085a:	b909      	cbnz	r1, 8010860 <__lo0bits+0x32>
 801085c:	3008      	adds	r0, #8
 801085e:	0a1b      	lsrs	r3, r3, #8
 8010860:	0719      	lsls	r1, r3, #28
 8010862:	bf04      	itt	eq
 8010864:	091b      	lsreq	r3, r3, #4
 8010866:	3004      	addeq	r0, #4
 8010868:	0799      	lsls	r1, r3, #30
 801086a:	bf04      	itt	eq
 801086c:	089b      	lsreq	r3, r3, #2
 801086e:	3002      	addeq	r0, #2
 8010870:	07d9      	lsls	r1, r3, #31
 8010872:	d403      	bmi.n	801087c <__lo0bits+0x4e>
 8010874:	085b      	lsrs	r3, r3, #1
 8010876:	f100 0001 	add.w	r0, r0, #1
 801087a:	d003      	beq.n	8010884 <__lo0bits+0x56>
 801087c:	6013      	str	r3, [r2, #0]
 801087e:	4770      	bx	lr
 8010880:	2000      	movs	r0, #0
 8010882:	4770      	bx	lr
 8010884:	2020      	movs	r0, #32
 8010886:	4770      	bx	lr

08010888 <__i2b>:
 8010888:	b510      	push	{r4, lr}
 801088a:	460c      	mov	r4, r1
 801088c:	2101      	movs	r1, #1
 801088e:	f7ff febd 	bl	801060c <_Balloc>
 8010892:	4602      	mov	r2, r0
 8010894:	b928      	cbnz	r0, 80108a2 <__i2b+0x1a>
 8010896:	4b05      	ldr	r3, [pc, #20]	@ (80108ac <__i2b+0x24>)
 8010898:	4805      	ldr	r0, [pc, #20]	@ (80108b0 <__i2b+0x28>)
 801089a:	f240 1145 	movw	r1, #325	@ 0x145
 801089e:	f001 fdfb 	bl	8012498 <__assert_func>
 80108a2:	2301      	movs	r3, #1
 80108a4:	6144      	str	r4, [r0, #20]
 80108a6:	6103      	str	r3, [r0, #16]
 80108a8:	bd10      	pop	{r4, pc}
 80108aa:	bf00      	nop
 80108ac:	08013f0d 	.word	0x08013f0d
 80108b0:	08013f1e 	.word	0x08013f1e

080108b4 <__multiply>:
 80108b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b8:	4614      	mov	r4, r2
 80108ba:	690a      	ldr	r2, [r1, #16]
 80108bc:	6923      	ldr	r3, [r4, #16]
 80108be:	429a      	cmp	r2, r3
 80108c0:	bfa8      	it	ge
 80108c2:	4623      	movge	r3, r4
 80108c4:	460f      	mov	r7, r1
 80108c6:	bfa4      	itt	ge
 80108c8:	460c      	movge	r4, r1
 80108ca:	461f      	movge	r7, r3
 80108cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80108d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80108d4:	68a3      	ldr	r3, [r4, #8]
 80108d6:	6861      	ldr	r1, [r4, #4]
 80108d8:	eb0a 0609 	add.w	r6, sl, r9
 80108dc:	42b3      	cmp	r3, r6
 80108de:	b085      	sub	sp, #20
 80108e0:	bfb8      	it	lt
 80108e2:	3101      	addlt	r1, #1
 80108e4:	f7ff fe92 	bl	801060c <_Balloc>
 80108e8:	b930      	cbnz	r0, 80108f8 <__multiply+0x44>
 80108ea:	4602      	mov	r2, r0
 80108ec:	4b44      	ldr	r3, [pc, #272]	@ (8010a00 <__multiply+0x14c>)
 80108ee:	4845      	ldr	r0, [pc, #276]	@ (8010a04 <__multiply+0x150>)
 80108f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80108f4:	f001 fdd0 	bl	8012498 <__assert_func>
 80108f8:	f100 0514 	add.w	r5, r0, #20
 80108fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010900:	462b      	mov	r3, r5
 8010902:	2200      	movs	r2, #0
 8010904:	4543      	cmp	r3, r8
 8010906:	d321      	bcc.n	801094c <__multiply+0x98>
 8010908:	f107 0114 	add.w	r1, r7, #20
 801090c:	f104 0214 	add.w	r2, r4, #20
 8010910:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010914:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010918:	9302      	str	r3, [sp, #8]
 801091a:	1b13      	subs	r3, r2, r4
 801091c:	3b15      	subs	r3, #21
 801091e:	f023 0303 	bic.w	r3, r3, #3
 8010922:	3304      	adds	r3, #4
 8010924:	f104 0715 	add.w	r7, r4, #21
 8010928:	42ba      	cmp	r2, r7
 801092a:	bf38      	it	cc
 801092c:	2304      	movcc	r3, #4
 801092e:	9301      	str	r3, [sp, #4]
 8010930:	9b02      	ldr	r3, [sp, #8]
 8010932:	9103      	str	r1, [sp, #12]
 8010934:	428b      	cmp	r3, r1
 8010936:	d80c      	bhi.n	8010952 <__multiply+0x9e>
 8010938:	2e00      	cmp	r6, #0
 801093a:	dd03      	ble.n	8010944 <__multiply+0x90>
 801093c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010940:	2b00      	cmp	r3, #0
 8010942:	d05b      	beq.n	80109fc <__multiply+0x148>
 8010944:	6106      	str	r6, [r0, #16]
 8010946:	b005      	add	sp, #20
 8010948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801094c:	f843 2b04 	str.w	r2, [r3], #4
 8010950:	e7d8      	b.n	8010904 <__multiply+0x50>
 8010952:	f8b1 a000 	ldrh.w	sl, [r1]
 8010956:	f1ba 0f00 	cmp.w	sl, #0
 801095a:	d024      	beq.n	80109a6 <__multiply+0xf2>
 801095c:	f104 0e14 	add.w	lr, r4, #20
 8010960:	46a9      	mov	r9, r5
 8010962:	f04f 0c00 	mov.w	ip, #0
 8010966:	f85e 7b04 	ldr.w	r7, [lr], #4
 801096a:	f8d9 3000 	ldr.w	r3, [r9]
 801096e:	fa1f fb87 	uxth.w	fp, r7
 8010972:	b29b      	uxth	r3, r3
 8010974:	fb0a 330b 	mla	r3, sl, fp, r3
 8010978:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801097c:	f8d9 7000 	ldr.w	r7, [r9]
 8010980:	4463      	add	r3, ip
 8010982:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010986:	fb0a c70b 	mla	r7, sl, fp, ip
 801098a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801098e:	b29b      	uxth	r3, r3
 8010990:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010994:	4572      	cmp	r2, lr
 8010996:	f849 3b04 	str.w	r3, [r9], #4
 801099a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801099e:	d8e2      	bhi.n	8010966 <__multiply+0xb2>
 80109a0:	9b01      	ldr	r3, [sp, #4]
 80109a2:	f845 c003 	str.w	ip, [r5, r3]
 80109a6:	9b03      	ldr	r3, [sp, #12]
 80109a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80109ac:	3104      	adds	r1, #4
 80109ae:	f1b9 0f00 	cmp.w	r9, #0
 80109b2:	d021      	beq.n	80109f8 <__multiply+0x144>
 80109b4:	682b      	ldr	r3, [r5, #0]
 80109b6:	f104 0c14 	add.w	ip, r4, #20
 80109ba:	46ae      	mov	lr, r5
 80109bc:	f04f 0a00 	mov.w	sl, #0
 80109c0:	f8bc b000 	ldrh.w	fp, [ip]
 80109c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80109c8:	fb09 770b 	mla	r7, r9, fp, r7
 80109cc:	4457      	add	r7, sl
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80109d4:	f84e 3b04 	str.w	r3, [lr], #4
 80109d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80109dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80109e0:	f8be 3000 	ldrh.w	r3, [lr]
 80109e4:	fb09 330a 	mla	r3, r9, sl, r3
 80109e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80109ec:	4562      	cmp	r2, ip
 80109ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80109f2:	d8e5      	bhi.n	80109c0 <__multiply+0x10c>
 80109f4:	9f01      	ldr	r7, [sp, #4]
 80109f6:	51eb      	str	r3, [r5, r7]
 80109f8:	3504      	adds	r5, #4
 80109fa:	e799      	b.n	8010930 <__multiply+0x7c>
 80109fc:	3e01      	subs	r6, #1
 80109fe:	e79b      	b.n	8010938 <__multiply+0x84>
 8010a00:	08013f0d 	.word	0x08013f0d
 8010a04:	08013f1e 	.word	0x08013f1e

08010a08 <__pow5mult>:
 8010a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a0c:	4615      	mov	r5, r2
 8010a0e:	f012 0203 	ands.w	r2, r2, #3
 8010a12:	4607      	mov	r7, r0
 8010a14:	460e      	mov	r6, r1
 8010a16:	d007      	beq.n	8010a28 <__pow5mult+0x20>
 8010a18:	4c25      	ldr	r4, [pc, #148]	@ (8010ab0 <__pow5mult+0xa8>)
 8010a1a:	3a01      	subs	r2, #1
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a22:	f7ff fe55 	bl	80106d0 <__multadd>
 8010a26:	4606      	mov	r6, r0
 8010a28:	10ad      	asrs	r5, r5, #2
 8010a2a:	d03d      	beq.n	8010aa8 <__pow5mult+0xa0>
 8010a2c:	69fc      	ldr	r4, [r7, #28]
 8010a2e:	b97c      	cbnz	r4, 8010a50 <__pow5mult+0x48>
 8010a30:	2010      	movs	r0, #16
 8010a32:	f7fd fd3d 	bl	800e4b0 <malloc>
 8010a36:	4602      	mov	r2, r0
 8010a38:	61f8      	str	r0, [r7, #28]
 8010a3a:	b928      	cbnz	r0, 8010a48 <__pow5mult+0x40>
 8010a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8010ab4 <__pow5mult+0xac>)
 8010a3e:	481e      	ldr	r0, [pc, #120]	@ (8010ab8 <__pow5mult+0xb0>)
 8010a40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010a44:	f001 fd28 	bl	8012498 <__assert_func>
 8010a48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a4c:	6004      	str	r4, [r0, #0]
 8010a4e:	60c4      	str	r4, [r0, #12]
 8010a50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010a54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a58:	b94c      	cbnz	r4, 8010a6e <__pow5mult+0x66>
 8010a5a:	f240 2171 	movw	r1, #625	@ 0x271
 8010a5e:	4638      	mov	r0, r7
 8010a60:	f7ff ff12 	bl	8010888 <__i2b>
 8010a64:	2300      	movs	r3, #0
 8010a66:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a6a:	4604      	mov	r4, r0
 8010a6c:	6003      	str	r3, [r0, #0]
 8010a6e:	f04f 0900 	mov.w	r9, #0
 8010a72:	07eb      	lsls	r3, r5, #31
 8010a74:	d50a      	bpl.n	8010a8c <__pow5mult+0x84>
 8010a76:	4631      	mov	r1, r6
 8010a78:	4622      	mov	r2, r4
 8010a7a:	4638      	mov	r0, r7
 8010a7c:	f7ff ff1a 	bl	80108b4 <__multiply>
 8010a80:	4631      	mov	r1, r6
 8010a82:	4680      	mov	r8, r0
 8010a84:	4638      	mov	r0, r7
 8010a86:	f7ff fe01 	bl	801068c <_Bfree>
 8010a8a:	4646      	mov	r6, r8
 8010a8c:	106d      	asrs	r5, r5, #1
 8010a8e:	d00b      	beq.n	8010aa8 <__pow5mult+0xa0>
 8010a90:	6820      	ldr	r0, [r4, #0]
 8010a92:	b938      	cbnz	r0, 8010aa4 <__pow5mult+0x9c>
 8010a94:	4622      	mov	r2, r4
 8010a96:	4621      	mov	r1, r4
 8010a98:	4638      	mov	r0, r7
 8010a9a:	f7ff ff0b 	bl	80108b4 <__multiply>
 8010a9e:	6020      	str	r0, [r4, #0]
 8010aa0:	f8c0 9000 	str.w	r9, [r0]
 8010aa4:	4604      	mov	r4, r0
 8010aa6:	e7e4      	b.n	8010a72 <__pow5mult+0x6a>
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aae:	bf00      	nop
 8010ab0:	08013f78 	.word	0x08013f78
 8010ab4:	08013e9e 	.word	0x08013e9e
 8010ab8:	08013f1e 	.word	0x08013f1e

08010abc <__lshift>:
 8010abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ac0:	460c      	mov	r4, r1
 8010ac2:	6849      	ldr	r1, [r1, #4]
 8010ac4:	6923      	ldr	r3, [r4, #16]
 8010ac6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010aca:	68a3      	ldr	r3, [r4, #8]
 8010acc:	4607      	mov	r7, r0
 8010ace:	4691      	mov	r9, r2
 8010ad0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ad4:	f108 0601 	add.w	r6, r8, #1
 8010ad8:	42b3      	cmp	r3, r6
 8010ada:	db0b      	blt.n	8010af4 <__lshift+0x38>
 8010adc:	4638      	mov	r0, r7
 8010ade:	f7ff fd95 	bl	801060c <_Balloc>
 8010ae2:	4605      	mov	r5, r0
 8010ae4:	b948      	cbnz	r0, 8010afa <__lshift+0x3e>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	4b28      	ldr	r3, [pc, #160]	@ (8010b8c <__lshift+0xd0>)
 8010aea:	4829      	ldr	r0, [pc, #164]	@ (8010b90 <__lshift+0xd4>)
 8010aec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010af0:	f001 fcd2 	bl	8012498 <__assert_func>
 8010af4:	3101      	adds	r1, #1
 8010af6:	005b      	lsls	r3, r3, #1
 8010af8:	e7ee      	b.n	8010ad8 <__lshift+0x1c>
 8010afa:	2300      	movs	r3, #0
 8010afc:	f100 0114 	add.w	r1, r0, #20
 8010b00:	f100 0210 	add.w	r2, r0, #16
 8010b04:	4618      	mov	r0, r3
 8010b06:	4553      	cmp	r3, sl
 8010b08:	db33      	blt.n	8010b72 <__lshift+0xb6>
 8010b0a:	6920      	ldr	r0, [r4, #16]
 8010b0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b10:	f104 0314 	add.w	r3, r4, #20
 8010b14:	f019 091f 	ands.w	r9, r9, #31
 8010b18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010b20:	d02b      	beq.n	8010b7a <__lshift+0xbe>
 8010b22:	f1c9 0e20 	rsb	lr, r9, #32
 8010b26:	468a      	mov	sl, r1
 8010b28:	2200      	movs	r2, #0
 8010b2a:	6818      	ldr	r0, [r3, #0]
 8010b2c:	fa00 f009 	lsl.w	r0, r0, r9
 8010b30:	4310      	orrs	r0, r2
 8010b32:	f84a 0b04 	str.w	r0, [sl], #4
 8010b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b3a:	459c      	cmp	ip, r3
 8010b3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010b40:	d8f3      	bhi.n	8010b2a <__lshift+0x6e>
 8010b42:	ebac 0304 	sub.w	r3, ip, r4
 8010b46:	3b15      	subs	r3, #21
 8010b48:	f023 0303 	bic.w	r3, r3, #3
 8010b4c:	3304      	adds	r3, #4
 8010b4e:	f104 0015 	add.w	r0, r4, #21
 8010b52:	4584      	cmp	ip, r0
 8010b54:	bf38      	it	cc
 8010b56:	2304      	movcc	r3, #4
 8010b58:	50ca      	str	r2, [r1, r3]
 8010b5a:	b10a      	cbz	r2, 8010b60 <__lshift+0xa4>
 8010b5c:	f108 0602 	add.w	r6, r8, #2
 8010b60:	3e01      	subs	r6, #1
 8010b62:	4638      	mov	r0, r7
 8010b64:	612e      	str	r6, [r5, #16]
 8010b66:	4621      	mov	r1, r4
 8010b68:	f7ff fd90 	bl	801068c <_Bfree>
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b72:	f842 0f04 	str.w	r0, [r2, #4]!
 8010b76:	3301      	adds	r3, #1
 8010b78:	e7c5      	b.n	8010b06 <__lshift+0x4a>
 8010b7a:	3904      	subs	r1, #4
 8010b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b80:	f841 2f04 	str.w	r2, [r1, #4]!
 8010b84:	459c      	cmp	ip, r3
 8010b86:	d8f9      	bhi.n	8010b7c <__lshift+0xc0>
 8010b88:	e7ea      	b.n	8010b60 <__lshift+0xa4>
 8010b8a:	bf00      	nop
 8010b8c:	08013f0d 	.word	0x08013f0d
 8010b90:	08013f1e 	.word	0x08013f1e

08010b94 <__mcmp>:
 8010b94:	690a      	ldr	r2, [r1, #16]
 8010b96:	4603      	mov	r3, r0
 8010b98:	6900      	ldr	r0, [r0, #16]
 8010b9a:	1a80      	subs	r0, r0, r2
 8010b9c:	b530      	push	{r4, r5, lr}
 8010b9e:	d10e      	bne.n	8010bbe <__mcmp+0x2a>
 8010ba0:	3314      	adds	r3, #20
 8010ba2:	3114      	adds	r1, #20
 8010ba4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010ba8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010bac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010bb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010bb4:	4295      	cmp	r5, r2
 8010bb6:	d003      	beq.n	8010bc0 <__mcmp+0x2c>
 8010bb8:	d205      	bcs.n	8010bc6 <__mcmp+0x32>
 8010bba:	f04f 30ff 	mov.w	r0, #4294967295
 8010bbe:	bd30      	pop	{r4, r5, pc}
 8010bc0:	42a3      	cmp	r3, r4
 8010bc2:	d3f3      	bcc.n	8010bac <__mcmp+0x18>
 8010bc4:	e7fb      	b.n	8010bbe <__mcmp+0x2a>
 8010bc6:	2001      	movs	r0, #1
 8010bc8:	e7f9      	b.n	8010bbe <__mcmp+0x2a>
	...

08010bcc <__mdiff>:
 8010bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd0:	4689      	mov	r9, r1
 8010bd2:	4606      	mov	r6, r0
 8010bd4:	4611      	mov	r1, r2
 8010bd6:	4648      	mov	r0, r9
 8010bd8:	4614      	mov	r4, r2
 8010bda:	f7ff ffdb 	bl	8010b94 <__mcmp>
 8010bde:	1e05      	subs	r5, r0, #0
 8010be0:	d112      	bne.n	8010c08 <__mdiff+0x3c>
 8010be2:	4629      	mov	r1, r5
 8010be4:	4630      	mov	r0, r6
 8010be6:	f7ff fd11 	bl	801060c <_Balloc>
 8010bea:	4602      	mov	r2, r0
 8010bec:	b928      	cbnz	r0, 8010bfa <__mdiff+0x2e>
 8010bee:	4b3f      	ldr	r3, [pc, #252]	@ (8010cec <__mdiff+0x120>)
 8010bf0:	f240 2137 	movw	r1, #567	@ 0x237
 8010bf4:	483e      	ldr	r0, [pc, #248]	@ (8010cf0 <__mdiff+0x124>)
 8010bf6:	f001 fc4f 	bl	8012498 <__assert_func>
 8010bfa:	2301      	movs	r3, #1
 8010bfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c00:	4610      	mov	r0, r2
 8010c02:	b003      	add	sp, #12
 8010c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c08:	bfbc      	itt	lt
 8010c0a:	464b      	movlt	r3, r9
 8010c0c:	46a1      	movlt	r9, r4
 8010c0e:	4630      	mov	r0, r6
 8010c10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010c14:	bfba      	itte	lt
 8010c16:	461c      	movlt	r4, r3
 8010c18:	2501      	movlt	r5, #1
 8010c1a:	2500      	movge	r5, #0
 8010c1c:	f7ff fcf6 	bl	801060c <_Balloc>
 8010c20:	4602      	mov	r2, r0
 8010c22:	b918      	cbnz	r0, 8010c2c <__mdiff+0x60>
 8010c24:	4b31      	ldr	r3, [pc, #196]	@ (8010cec <__mdiff+0x120>)
 8010c26:	f240 2145 	movw	r1, #581	@ 0x245
 8010c2a:	e7e3      	b.n	8010bf4 <__mdiff+0x28>
 8010c2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010c30:	6926      	ldr	r6, [r4, #16]
 8010c32:	60c5      	str	r5, [r0, #12]
 8010c34:	f109 0310 	add.w	r3, r9, #16
 8010c38:	f109 0514 	add.w	r5, r9, #20
 8010c3c:	f104 0e14 	add.w	lr, r4, #20
 8010c40:	f100 0b14 	add.w	fp, r0, #20
 8010c44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010c48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010c4c:	9301      	str	r3, [sp, #4]
 8010c4e:	46d9      	mov	r9, fp
 8010c50:	f04f 0c00 	mov.w	ip, #0
 8010c54:	9b01      	ldr	r3, [sp, #4]
 8010c56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010c5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010c5e:	9301      	str	r3, [sp, #4]
 8010c60:	fa1f f38a 	uxth.w	r3, sl
 8010c64:	4619      	mov	r1, r3
 8010c66:	b283      	uxth	r3, r0
 8010c68:	1acb      	subs	r3, r1, r3
 8010c6a:	0c00      	lsrs	r0, r0, #16
 8010c6c:	4463      	add	r3, ip
 8010c6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010c72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010c76:	b29b      	uxth	r3, r3
 8010c78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010c7c:	4576      	cmp	r6, lr
 8010c7e:	f849 3b04 	str.w	r3, [r9], #4
 8010c82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010c86:	d8e5      	bhi.n	8010c54 <__mdiff+0x88>
 8010c88:	1b33      	subs	r3, r6, r4
 8010c8a:	3b15      	subs	r3, #21
 8010c8c:	f023 0303 	bic.w	r3, r3, #3
 8010c90:	3415      	adds	r4, #21
 8010c92:	3304      	adds	r3, #4
 8010c94:	42a6      	cmp	r6, r4
 8010c96:	bf38      	it	cc
 8010c98:	2304      	movcc	r3, #4
 8010c9a:	441d      	add	r5, r3
 8010c9c:	445b      	add	r3, fp
 8010c9e:	461e      	mov	r6, r3
 8010ca0:	462c      	mov	r4, r5
 8010ca2:	4544      	cmp	r4, r8
 8010ca4:	d30e      	bcc.n	8010cc4 <__mdiff+0xf8>
 8010ca6:	f108 0103 	add.w	r1, r8, #3
 8010caa:	1b49      	subs	r1, r1, r5
 8010cac:	f021 0103 	bic.w	r1, r1, #3
 8010cb0:	3d03      	subs	r5, #3
 8010cb2:	45a8      	cmp	r8, r5
 8010cb4:	bf38      	it	cc
 8010cb6:	2100      	movcc	r1, #0
 8010cb8:	440b      	add	r3, r1
 8010cba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010cbe:	b191      	cbz	r1, 8010ce6 <__mdiff+0x11a>
 8010cc0:	6117      	str	r7, [r2, #16]
 8010cc2:	e79d      	b.n	8010c00 <__mdiff+0x34>
 8010cc4:	f854 1b04 	ldr.w	r1, [r4], #4
 8010cc8:	46e6      	mov	lr, ip
 8010cca:	0c08      	lsrs	r0, r1, #16
 8010ccc:	fa1c fc81 	uxtah	ip, ip, r1
 8010cd0:	4471      	add	r1, lr
 8010cd2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010cd6:	b289      	uxth	r1, r1
 8010cd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010cdc:	f846 1b04 	str.w	r1, [r6], #4
 8010ce0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010ce4:	e7dd      	b.n	8010ca2 <__mdiff+0xd6>
 8010ce6:	3f01      	subs	r7, #1
 8010ce8:	e7e7      	b.n	8010cba <__mdiff+0xee>
 8010cea:	bf00      	nop
 8010cec:	08013f0d 	.word	0x08013f0d
 8010cf0:	08013f1e 	.word	0x08013f1e

08010cf4 <__ulp>:
 8010cf4:	b082      	sub	sp, #8
 8010cf6:	ed8d 0b00 	vstr	d0, [sp]
 8010cfa:	9a01      	ldr	r2, [sp, #4]
 8010cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8010d3c <__ulp+0x48>)
 8010cfe:	4013      	ands	r3, r2
 8010d00:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	dc08      	bgt.n	8010d1a <__ulp+0x26>
 8010d08:	425b      	negs	r3, r3
 8010d0a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010d0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010d12:	da04      	bge.n	8010d1e <__ulp+0x2a>
 8010d14:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010d18:	4113      	asrs	r3, r2
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	e008      	b.n	8010d30 <__ulp+0x3c>
 8010d1e:	f1a2 0314 	sub.w	r3, r2, #20
 8010d22:	2b1e      	cmp	r3, #30
 8010d24:	bfda      	itte	le
 8010d26:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010d2a:	40da      	lsrle	r2, r3
 8010d2c:	2201      	movgt	r2, #1
 8010d2e:	2300      	movs	r3, #0
 8010d30:	4619      	mov	r1, r3
 8010d32:	4610      	mov	r0, r2
 8010d34:	ec41 0b10 	vmov	d0, r0, r1
 8010d38:	b002      	add	sp, #8
 8010d3a:	4770      	bx	lr
 8010d3c:	7ff00000 	.word	0x7ff00000

08010d40 <__b2d>:
 8010d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d44:	6906      	ldr	r6, [r0, #16]
 8010d46:	f100 0814 	add.w	r8, r0, #20
 8010d4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010d4e:	1f37      	subs	r7, r6, #4
 8010d50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010d54:	4610      	mov	r0, r2
 8010d56:	f7ff fd4b 	bl	80107f0 <__hi0bits>
 8010d5a:	f1c0 0320 	rsb	r3, r0, #32
 8010d5e:	280a      	cmp	r0, #10
 8010d60:	600b      	str	r3, [r1, #0]
 8010d62:	491b      	ldr	r1, [pc, #108]	@ (8010dd0 <__b2d+0x90>)
 8010d64:	dc15      	bgt.n	8010d92 <__b2d+0x52>
 8010d66:	f1c0 0c0b 	rsb	ip, r0, #11
 8010d6a:	fa22 f30c 	lsr.w	r3, r2, ip
 8010d6e:	45b8      	cmp	r8, r7
 8010d70:	ea43 0501 	orr.w	r5, r3, r1
 8010d74:	bf34      	ite	cc
 8010d76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010d7a:	2300      	movcs	r3, #0
 8010d7c:	3015      	adds	r0, #21
 8010d7e:	fa02 f000 	lsl.w	r0, r2, r0
 8010d82:	fa23 f30c 	lsr.w	r3, r3, ip
 8010d86:	4303      	orrs	r3, r0
 8010d88:	461c      	mov	r4, r3
 8010d8a:	ec45 4b10 	vmov	d0, r4, r5
 8010d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d92:	45b8      	cmp	r8, r7
 8010d94:	bf3a      	itte	cc
 8010d96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010d9a:	f1a6 0708 	subcc.w	r7, r6, #8
 8010d9e:	2300      	movcs	r3, #0
 8010da0:	380b      	subs	r0, #11
 8010da2:	d012      	beq.n	8010dca <__b2d+0x8a>
 8010da4:	f1c0 0120 	rsb	r1, r0, #32
 8010da8:	fa23 f401 	lsr.w	r4, r3, r1
 8010dac:	4082      	lsls	r2, r0
 8010dae:	4322      	orrs	r2, r4
 8010db0:	4547      	cmp	r7, r8
 8010db2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010db6:	bf8c      	ite	hi
 8010db8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010dbc:	2200      	movls	r2, #0
 8010dbe:	4083      	lsls	r3, r0
 8010dc0:	40ca      	lsrs	r2, r1
 8010dc2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010dc6:	4313      	orrs	r3, r2
 8010dc8:	e7de      	b.n	8010d88 <__b2d+0x48>
 8010dca:	ea42 0501 	orr.w	r5, r2, r1
 8010dce:	e7db      	b.n	8010d88 <__b2d+0x48>
 8010dd0:	3ff00000 	.word	0x3ff00000

08010dd4 <__d2b>:
 8010dd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010dd8:	460f      	mov	r7, r1
 8010dda:	2101      	movs	r1, #1
 8010ddc:	ec59 8b10 	vmov	r8, r9, d0
 8010de0:	4616      	mov	r6, r2
 8010de2:	f7ff fc13 	bl	801060c <_Balloc>
 8010de6:	4604      	mov	r4, r0
 8010de8:	b930      	cbnz	r0, 8010df8 <__d2b+0x24>
 8010dea:	4602      	mov	r2, r0
 8010dec:	4b23      	ldr	r3, [pc, #140]	@ (8010e7c <__d2b+0xa8>)
 8010dee:	4824      	ldr	r0, [pc, #144]	@ (8010e80 <__d2b+0xac>)
 8010df0:	f240 310f 	movw	r1, #783	@ 0x30f
 8010df4:	f001 fb50 	bl	8012498 <__assert_func>
 8010df8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010dfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e00:	b10d      	cbz	r5, 8010e06 <__d2b+0x32>
 8010e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010e06:	9301      	str	r3, [sp, #4]
 8010e08:	f1b8 0300 	subs.w	r3, r8, #0
 8010e0c:	d023      	beq.n	8010e56 <__d2b+0x82>
 8010e0e:	4668      	mov	r0, sp
 8010e10:	9300      	str	r3, [sp, #0]
 8010e12:	f7ff fd0c 	bl	801082e <__lo0bits>
 8010e16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010e1a:	b1d0      	cbz	r0, 8010e52 <__d2b+0x7e>
 8010e1c:	f1c0 0320 	rsb	r3, r0, #32
 8010e20:	fa02 f303 	lsl.w	r3, r2, r3
 8010e24:	430b      	orrs	r3, r1
 8010e26:	40c2      	lsrs	r2, r0
 8010e28:	6163      	str	r3, [r4, #20]
 8010e2a:	9201      	str	r2, [sp, #4]
 8010e2c:	9b01      	ldr	r3, [sp, #4]
 8010e2e:	61a3      	str	r3, [r4, #24]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	bf0c      	ite	eq
 8010e34:	2201      	moveq	r2, #1
 8010e36:	2202      	movne	r2, #2
 8010e38:	6122      	str	r2, [r4, #16]
 8010e3a:	b1a5      	cbz	r5, 8010e66 <__d2b+0x92>
 8010e3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010e40:	4405      	add	r5, r0
 8010e42:	603d      	str	r5, [r7, #0]
 8010e44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010e48:	6030      	str	r0, [r6, #0]
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	b003      	add	sp, #12
 8010e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e52:	6161      	str	r1, [r4, #20]
 8010e54:	e7ea      	b.n	8010e2c <__d2b+0x58>
 8010e56:	a801      	add	r0, sp, #4
 8010e58:	f7ff fce9 	bl	801082e <__lo0bits>
 8010e5c:	9b01      	ldr	r3, [sp, #4]
 8010e5e:	6163      	str	r3, [r4, #20]
 8010e60:	3020      	adds	r0, #32
 8010e62:	2201      	movs	r2, #1
 8010e64:	e7e8      	b.n	8010e38 <__d2b+0x64>
 8010e66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010e6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010e6e:	6038      	str	r0, [r7, #0]
 8010e70:	6918      	ldr	r0, [r3, #16]
 8010e72:	f7ff fcbd 	bl	80107f0 <__hi0bits>
 8010e76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010e7a:	e7e5      	b.n	8010e48 <__d2b+0x74>
 8010e7c:	08013f0d 	.word	0x08013f0d
 8010e80:	08013f1e 	.word	0x08013f1e

08010e84 <__ratio>:
 8010e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e88:	b085      	sub	sp, #20
 8010e8a:	e9cd 1000 	strd	r1, r0, [sp]
 8010e8e:	a902      	add	r1, sp, #8
 8010e90:	f7ff ff56 	bl	8010d40 <__b2d>
 8010e94:	9800      	ldr	r0, [sp, #0]
 8010e96:	a903      	add	r1, sp, #12
 8010e98:	ec55 4b10 	vmov	r4, r5, d0
 8010e9c:	f7ff ff50 	bl	8010d40 <__b2d>
 8010ea0:	9b01      	ldr	r3, [sp, #4]
 8010ea2:	6919      	ldr	r1, [r3, #16]
 8010ea4:	9b00      	ldr	r3, [sp, #0]
 8010ea6:	691b      	ldr	r3, [r3, #16]
 8010ea8:	1ac9      	subs	r1, r1, r3
 8010eaa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010eae:	1a9b      	subs	r3, r3, r2
 8010eb0:	ec5b ab10 	vmov	sl, fp, d0
 8010eb4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	bfce      	itee	gt
 8010ebc:	462a      	movgt	r2, r5
 8010ebe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010ec2:	465a      	movle	r2, fp
 8010ec4:	462f      	mov	r7, r5
 8010ec6:	46d9      	mov	r9, fp
 8010ec8:	bfcc      	ite	gt
 8010eca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010ece:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010ed2:	464b      	mov	r3, r9
 8010ed4:	4652      	mov	r2, sl
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	4639      	mov	r1, r7
 8010eda:	f7ef fcd7 	bl	800088c <__aeabi_ddiv>
 8010ede:	ec41 0b10 	vmov	d0, r0, r1
 8010ee2:	b005      	add	sp, #20
 8010ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ee8 <__copybits>:
 8010ee8:	3901      	subs	r1, #1
 8010eea:	b570      	push	{r4, r5, r6, lr}
 8010eec:	1149      	asrs	r1, r1, #5
 8010eee:	6914      	ldr	r4, [r2, #16]
 8010ef0:	3101      	adds	r1, #1
 8010ef2:	f102 0314 	add.w	r3, r2, #20
 8010ef6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010efa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010efe:	1f05      	subs	r5, r0, #4
 8010f00:	42a3      	cmp	r3, r4
 8010f02:	d30c      	bcc.n	8010f1e <__copybits+0x36>
 8010f04:	1aa3      	subs	r3, r4, r2
 8010f06:	3b11      	subs	r3, #17
 8010f08:	f023 0303 	bic.w	r3, r3, #3
 8010f0c:	3211      	adds	r2, #17
 8010f0e:	42a2      	cmp	r2, r4
 8010f10:	bf88      	it	hi
 8010f12:	2300      	movhi	r3, #0
 8010f14:	4418      	add	r0, r3
 8010f16:	2300      	movs	r3, #0
 8010f18:	4288      	cmp	r0, r1
 8010f1a:	d305      	bcc.n	8010f28 <__copybits+0x40>
 8010f1c:	bd70      	pop	{r4, r5, r6, pc}
 8010f1e:	f853 6b04 	ldr.w	r6, [r3], #4
 8010f22:	f845 6f04 	str.w	r6, [r5, #4]!
 8010f26:	e7eb      	b.n	8010f00 <__copybits+0x18>
 8010f28:	f840 3b04 	str.w	r3, [r0], #4
 8010f2c:	e7f4      	b.n	8010f18 <__copybits+0x30>

08010f2e <__any_on>:
 8010f2e:	f100 0214 	add.w	r2, r0, #20
 8010f32:	6900      	ldr	r0, [r0, #16]
 8010f34:	114b      	asrs	r3, r1, #5
 8010f36:	4298      	cmp	r0, r3
 8010f38:	b510      	push	{r4, lr}
 8010f3a:	db11      	blt.n	8010f60 <__any_on+0x32>
 8010f3c:	dd0a      	ble.n	8010f54 <__any_on+0x26>
 8010f3e:	f011 011f 	ands.w	r1, r1, #31
 8010f42:	d007      	beq.n	8010f54 <__any_on+0x26>
 8010f44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010f48:	fa24 f001 	lsr.w	r0, r4, r1
 8010f4c:	fa00 f101 	lsl.w	r1, r0, r1
 8010f50:	428c      	cmp	r4, r1
 8010f52:	d10b      	bne.n	8010f6c <__any_on+0x3e>
 8010f54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	d803      	bhi.n	8010f64 <__any_on+0x36>
 8010f5c:	2000      	movs	r0, #0
 8010f5e:	bd10      	pop	{r4, pc}
 8010f60:	4603      	mov	r3, r0
 8010f62:	e7f7      	b.n	8010f54 <__any_on+0x26>
 8010f64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010f68:	2900      	cmp	r1, #0
 8010f6a:	d0f5      	beq.n	8010f58 <__any_on+0x2a>
 8010f6c:	2001      	movs	r0, #1
 8010f6e:	e7f6      	b.n	8010f5e <__any_on+0x30>

08010f70 <sulp>:
 8010f70:	b570      	push	{r4, r5, r6, lr}
 8010f72:	4604      	mov	r4, r0
 8010f74:	460d      	mov	r5, r1
 8010f76:	ec45 4b10 	vmov	d0, r4, r5
 8010f7a:	4616      	mov	r6, r2
 8010f7c:	f7ff feba 	bl	8010cf4 <__ulp>
 8010f80:	ec51 0b10 	vmov	r0, r1, d0
 8010f84:	b17e      	cbz	r6, 8010fa6 <sulp+0x36>
 8010f86:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010f8a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	dd09      	ble.n	8010fa6 <sulp+0x36>
 8010f92:	051b      	lsls	r3, r3, #20
 8010f94:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010f98:	2400      	movs	r4, #0
 8010f9a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010f9e:	4622      	mov	r2, r4
 8010fa0:	462b      	mov	r3, r5
 8010fa2:	f7ef fb49 	bl	8000638 <__aeabi_dmul>
 8010fa6:	ec41 0b10 	vmov	d0, r0, r1
 8010faa:	bd70      	pop	{r4, r5, r6, pc}
 8010fac:	0000      	movs	r0, r0
	...

08010fb0 <_strtod_l>:
 8010fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb4:	b09f      	sub	sp, #124	@ 0x7c
 8010fb6:	460c      	mov	r4, r1
 8010fb8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010fba:	2200      	movs	r2, #0
 8010fbc:	921a      	str	r2, [sp, #104]	@ 0x68
 8010fbe:	9005      	str	r0, [sp, #20]
 8010fc0:	f04f 0a00 	mov.w	sl, #0
 8010fc4:	f04f 0b00 	mov.w	fp, #0
 8010fc8:	460a      	mov	r2, r1
 8010fca:	9219      	str	r2, [sp, #100]	@ 0x64
 8010fcc:	7811      	ldrb	r1, [r2, #0]
 8010fce:	292b      	cmp	r1, #43	@ 0x2b
 8010fd0:	d04a      	beq.n	8011068 <_strtod_l+0xb8>
 8010fd2:	d838      	bhi.n	8011046 <_strtod_l+0x96>
 8010fd4:	290d      	cmp	r1, #13
 8010fd6:	d832      	bhi.n	801103e <_strtod_l+0x8e>
 8010fd8:	2908      	cmp	r1, #8
 8010fda:	d832      	bhi.n	8011042 <_strtod_l+0x92>
 8010fdc:	2900      	cmp	r1, #0
 8010fde:	d03b      	beq.n	8011058 <_strtod_l+0xa8>
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010fe4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010fe6:	782a      	ldrb	r2, [r5, #0]
 8010fe8:	2a30      	cmp	r2, #48	@ 0x30
 8010fea:	f040 80b3 	bne.w	8011154 <_strtod_l+0x1a4>
 8010fee:	786a      	ldrb	r2, [r5, #1]
 8010ff0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010ff4:	2a58      	cmp	r2, #88	@ 0x58
 8010ff6:	d16e      	bne.n	80110d6 <_strtod_l+0x126>
 8010ff8:	9302      	str	r3, [sp, #8]
 8010ffa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ffc:	9301      	str	r3, [sp, #4]
 8010ffe:	ab1a      	add	r3, sp, #104	@ 0x68
 8011000:	9300      	str	r3, [sp, #0]
 8011002:	4a8e      	ldr	r2, [pc, #568]	@ (801123c <_strtod_l+0x28c>)
 8011004:	9805      	ldr	r0, [sp, #20]
 8011006:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011008:	a919      	add	r1, sp, #100	@ 0x64
 801100a:	f001 fadf 	bl	80125cc <__gethex>
 801100e:	f010 060f 	ands.w	r6, r0, #15
 8011012:	4604      	mov	r4, r0
 8011014:	d005      	beq.n	8011022 <_strtod_l+0x72>
 8011016:	2e06      	cmp	r6, #6
 8011018:	d128      	bne.n	801106c <_strtod_l+0xbc>
 801101a:	3501      	adds	r5, #1
 801101c:	2300      	movs	r3, #0
 801101e:	9519      	str	r5, [sp, #100]	@ 0x64
 8011020:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011022:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011024:	2b00      	cmp	r3, #0
 8011026:	f040 858e 	bne.w	8011b46 <_strtod_l+0xb96>
 801102a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801102c:	b1cb      	cbz	r3, 8011062 <_strtod_l+0xb2>
 801102e:	4652      	mov	r2, sl
 8011030:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011034:	ec43 2b10 	vmov	d0, r2, r3
 8011038:	b01f      	add	sp, #124	@ 0x7c
 801103a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801103e:	2920      	cmp	r1, #32
 8011040:	d1ce      	bne.n	8010fe0 <_strtod_l+0x30>
 8011042:	3201      	adds	r2, #1
 8011044:	e7c1      	b.n	8010fca <_strtod_l+0x1a>
 8011046:	292d      	cmp	r1, #45	@ 0x2d
 8011048:	d1ca      	bne.n	8010fe0 <_strtod_l+0x30>
 801104a:	2101      	movs	r1, #1
 801104c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801104e:	1c51      	adds	r1, r2, #1
 8011050:	9119      	str	r1, [sp, #100]	@ 0x64
 8011052:	7852      	ldrb	r2, [r2, #1]
 8011054:	2a00      	cmp	r2, #0
 8011056:	d1c5      	bne.n	8010fe4 <_strtod_l+0x34>
 8011058:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801105a:	9419      	str	r4, [sp, #100]	@ 0x64
 801105c:	2b00      	cmp	r3, #0
 801105e:	f040 8570 	bne.w	8011b42 <_strtod_l+0xb92>
 8011062:	4652      	mov	r2, sl
 8011064:	465b      	mov	r3, fp
 8011066:	e7e5      	b.n	8011034 <_strtod_l+0x84>
 8011068:	2100      	movs	r1, #0
 801106a:	e7ef      	b.n	801104c <_strtod_l+0x9c>
 801106c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801106e:	b13a      	cbz	r2, 8011080 <_strtod_l+0xd0>
 8011070:	2135      	movs	r1, #53	@ 0x35
 8011072:	a81c      	add	r0, sp, #112	@ 0x70
 8011074:	f7ff ff38 	bl	8010ee8 <__copybits>
 8011078:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801107a:	9805      	ldr	r0, [sp, #20]
 801107c:	f7ff fb06 	bl	801068c <_Bfree>
 8011080:	3e01      	subs	r6, #1
 8011082:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011084:	2e04      	cmp	r6, #4
 8011086:	d806      	bhi.n	8011096 <_strtod_l+0xe6>
 8011088:	e8df f006 	tbb	[pc, r6]
 801108c:	201d0314 	.word	0x201d0314
 8011090:	14          	.byte	0x14
 8011091:	00          	.byte	0x00
 8011092:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011096:	05e1      	lsls	r1, r4, #23
 8011098:	bf48      	it	mi
 801109a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801109e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80110a2:	0d1b      	lsrs	r3, r3, #20
 80110a4:	051b      	lsls	r3, r3, #20
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d1bb      	bne.n	8011022 <_strtod_l+0x72>
 80110aa:	f7fe fbe3 	bl	800f874 <__errno>
 80110ae:	2322      	movs	r3, #34	@ 0x22
 80110b0:	6003      	str	r3, [r0, #0]
 80110b2:	e7b6      	b.n	8011022 <_strtod_l+0x72>
 80110b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80110b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80110bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80110c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80110c4:	e7e7      	b.n	8011096 <_strtod_l+0xe6>
 80110c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8011244 <_strtod_l+0x294>
 80110ca:	e7e4      	b.n	8011096 <_strtod_l+0xe6>
 80110cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80110d0:	f04f 3aff 	mov.w	sl, #4294967295
 80110d4:	e7df      	b.n	8011096 <_strtod_l+0xe6>
 80110d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110d8:	1c5a      	adds	r2, r3, #1
 80110da:	9219      	str	r2, [sp, #100]	@ 0x64
 80110dc:	785b      	ldrb	r3, [r3, #1]
 80110de:	2b30      	cmp	r3, #48	@ 0x30
 80110e0:	d0f9      	beq.n	80110d6 <_strtod_l+0x126>
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d09d      	beq.n	8011022 <_strtod_l+0x72>
 80110e6:	2301      	movs	r3, #1
 80110e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80110ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80110ee:	2300      	movs	r3, #0
 80110f0:	9308      	str	r3, [sp, #32]
 80110f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80110f4:	461f      	mov	r7, r3
 80110f6:	220a      	movs	r2, #10
 80110f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80110fa:	7805      	ldrb	r5, [r0, #0]
 80110fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011100:	b2d9      	uxtb	r1, r3
 8011102:	2909      	cmp	r1, #9
 8011104:	d928      	bls.n	8011158 <_strtod_l+0x1a8>
 8011106:	494e      	ldr	r1, [pc, #312]	@ (8011240 <_strtod_l+0x290>)
 8011108:	2201      	movs	r2, #1
 801110a:	f001 f979 	bl	8012400 <strncmp>
 801110e:	2800      	cmp	r0, #0
 8011110:	d032      	beq.n	8011178 <_strtod_l+0x1c8>
 8011112:	2000      	movs	r0, #0
 8011114:	462a      	mov	r2, r5
 8011116:	4681      	mov	r9, r0
 8011118:	463d      	mov	r5, r7
 801111a:	4603      	mov	r3, r0
 801111c:	2a65      	cmp	r2, #101	@ 0x65
 801111e:	d001      	beq.n	8011124 <_strtod_l+0x174>
 8011120:	2a45      	cmp	r2, #69	@ 0x45
 8011122:	d114      	bne.n	801114e <_strtod_l+0x19e>
 8011124:	b91d      	cbnz	r5, 801112e <_strtod_l+0x17e>
 8011126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011128:	4302      	orrs	r2, r0
 801112a:	d095      	beq.n	8011058 <_strtod_l+0xa8>
 801112c:	2500      	movs	r5, #0
 801112e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011130:	1c62      	adds	r2, r4, #1
 8011132:	9219      	str	r2, [sp, #100]	@ 0x64
 8011134:	7862      	ldrb	r2, [r4, #1]
 8011136:	2a2b      	cmp	r2, #43	@ 0x2b
 8011138:	d077      	beq.n	801122a <_strtod_l+0x27a>
 801113a:	2a2d      	cmp	r2, #45	@ 0x2d
 801113c:	d07b      	beq.n	8011236 <_strtod_l+0x286>
 801113e:	f04f 0c00 	mov.w	ip, #0
 8011142:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011146:	2909      	cmp	r1, #9
 8011148:	f240 8082 	bls.w	8011250 <_strtod_l+0x2a0>
 801114c:	9419      	str	r4, [sp, #100]	@ 0x64
 801114e:	f04f 0800 	mov.w	r8, #0
 8011152:	e0a2      	b.n	801129a <_strtod_l+0x2ea>
 8011154:	2300      	movs	r3, #0
 8011156:	e7c7      	b.n	80110e8 <_strtod_l+0x138>
 8011158:	2f08      	cmp	r7, #8
 801115a:	bfd5      	itete	le
 801115c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801115e:	9908      	ldrgt	r1, [sp, #32]
 8011160:	fb02 3301 	mlale	r3, r2, r1, r3
 8011164:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011168:	f100 0001 	add.w	r0, r0, #1
 801116c:	bfd4      	ite	le
 801116e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011170:	9308      	strgt	r3, [sp, #32]
 8011172:	3701      	adds	r7, #1
 8011174:	9019      	str	r0, [sp, #100]	@ 0x64
 8011176:	e7bf      	b.n	80110f8 <_strtod_l+0x148>
 8011178:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801117a:	1c5a      	adds	r2, r3, #1
 801117c:	9219      	str	r2, [sp, #100]	@ 0x64
 801117e:	785a      	ldrb	r2, [r3, #1]
 8011180:	b37f      	cbz	r7, 80111e2 <_strtod_l+0x232>
 8011182:	4681      	mov	r9, r0
 8011184:	463d      	mov	r5, r7
 8011186:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801118a:	2b09      	cmp	r3, #9
 801118c:	d912      	bls.n	80111b4 <_strtod_l+0x204>
 801118e:	2301      	movs	r3, #1
 8011190:	e7c4      	b.n	801111c <_strtod_l+0x16c>
 8011192:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011194:	1c5a      	adds	r2, r3, #1
 8011196:	9219      	str	r2, [sp, #100]	@ 0x64
 8011198:	785a      	ldrb	r2, [r3, #1]
 801119a:	3001      	adds	r0, #1
 801119c:	2a30      	cmp	r2, #48	@ 0x30
 801119e:	d0f8      	beq.n	8011192 <_strtod_l+0x1e2>
 80111a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80111a4:	2b08      	cmp	r3, #8
 80111a6:	f200 84d3 	bhi.w	8011b50 <_strtod_l+0xba0>
 80111aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80111ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80111ae:	4681      	mov	r9, r0
 80111b0:	2000      	movs	r0, #0
 80111b2:	4605      	mov	r5, r0
 80111b4:	3a30      	subs	r2, #48	@ 0x30
 80111b6:	f100 0301 	add.w	r3, r0, #1
 80111ba:	d02a      	beq.n	8011212 <_strtod_l+0x262>
 80111bc:	4499      	add	r9, r3
 80111be:	eb00 0c05 	add.w	ip, r0, r5
 80111c2:	462b      	mov	r3, r5
 80111c4:	210a      	movs	r1, #10
 80111c6:	4563      	cmp	r3, ip
 80111c8:	d10d      	bne.n	80111e6 <_strtod_l+0x236>
 80111ca:	1c69      	adds	r1, r5, #1
 80111cc:	4401      	add	r1, r0
 80111ce:	4428      	add	r0, r5
 80111d0:	2808      	cmp	r0, #8
 80111d2:	dc16      	bgt.n	8011202 <_strtod_l+0x252>
 80111d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80111d6:	230a      	movs	r3, #10
 80111d8:	fb03 2300 	mla	r3, r3, r0, r2
 80111dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80111de:	2300      	movs	r3, #0
 80111e0:	e018      	b.n	8011214 <_strtod_l+0x264>
 80111e2:	4638      	mov	r0, r7
 80111e4:	e7da      	b.n	801119c <_strtod_l+0x1ec>
 80111e6:	2b08      	cmp	r3, #8
 80111e8:	f103 0301 	add.w	r3, r3, #1
 80111ec:	dc03      	bgt.n	80111f6 <_strtod_l+0x246>
 80111ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80111f0:	434e      	muls	r6, r1
 80111f2:	960a      	str	r6, [sp, #40]	@ 0x28
 80111f4:	e7e7      	b.n	80111c6 <_strtod_l+0x216>
 80111f6:	2b10      	cmp	r3, #16
 80111f8:	bfde      	ittt	le
 80111fa:	9e08      	ldrle	r6, [sp, #32]
 80111fc:	434e      	mulle	r6, r1
 80111fe:	9608      	strle	r6, [sp, #32]
 8011200:	e7e1      	b.n	80111c6 <_strtod_l+0x216>
 8011202:	280f      	cmp	r0, #15
 8011204:	dceb      	bgt.n	80111de <_strtod_l+0x22e>
 8011206:	9808      	ldr	r0, [sp, #32]
 8011208:	230a      	movs	r3, #10
 801120a:	fb03 2300 	mla	r3, r3, r0, r2
 801120e:	9308      	str	r3, [sp, #32]
 8011210:	e7e5      	b.n	80111de <_strtod_l+0x22e>
 8011212:	4629      	mov	r1, r5
 8011214:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011216:	1c50      	adds	r0, r2, #1
 8011218:	9019      	str	r0, [sp, #100]	@ 0x64
 801121a:	7852      	ldrb	r2, [r2, #1]
 801121c:	4618      	mov	r0, r3
 801121e:	460d      	mov	r5, r1
 8011220:	e7b1      	b.n	8011186 <_strtod_l+0x1d6>
 8011222:	f04f 0900 	mov.w	r9, #0
 8011226:	2301      	movs	r3, #1
 8011228:	e77d      	b.n	8011126 <_strtod_l+0x176>
 801122a:	f04f 0c00 	mov.w	ip, #0
 801122e:	1ca2      	adds	r2, r4, #2
 8011230:	9219      	str	r2, [sp, #100]	@ 0x64
 8011232:	78a2      	ldrb	r2, [r4, #2]
 8011234:	e785      	b.n	8011142 <_strtod_l+0x192>
 8011236:	f04f 0c01 	mov.w	ip, #1
 801123a:	e7f8      	b.n	801122e <_strtod_l+0x27e>
 801123c:	08014090 	.word	0x08014090
 8011240:	08014078 	.word	0x08014078
 8011244:	7ff00000 	.word	0x7ff00000
 8011248:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801124a:	1c51      	adds	r1, r2, #1
 801124c:	9119      	str	r1, [sp, #100]	@ 0x64
 801124e:	7852      	ldrb	r2, [r2, #1]
 8011250:	2a30      	cmp	r2, #48	@ 0x30
 8011252:	d0f9      	beq.n	8011248 <_strtod_l+0x298>
 8011254:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011258:	2908      	cmp	r1, #8
 801125a:	f63f af78 	bhi.w	801114e <_strtod_l+0x19e>
 801125e:	3a30      	subs	r2, #48	@ 0x30
 8011260:	920e      	str	r2, [sp, #56]	@ 0x38
 8011262:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011264:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011266:	f04f 080a 	mov.w	r8, #10
 801126a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801126c:	1c56      	adds	r6, r2, #1
 801126e:	9619      	str	r6, [sp, #100]	@ 0x64
 8011270:	7852      	ldrb	r2, [r2, #1]
 8011272:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011276:	f1be 0f09 	cmp.w	lr, #9
 801127a:	d939      	bls.n	80112f0 <_strtod_l+0x340>
 801127c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801127e:	1a76      	subs	r6, r6, r1
 8011280:	2e08      	cmp	r6, #8
 8011282:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011286:	dc03      	bgt.n	8011290 <_strtod_l+0x2e0>
 8011288:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801128a:	4588      	cmp	r8, r1
 801128c:	bfa8      	it	ge
 801128e:	4688      	movge	r8, r1
 8011290:	f1bc 0f00 	cmp.w	ip, #0
 8011294:	d001      	beq.n	801129a <_strtod_l+0x2ea>
 8011296:	f1c8 0800 	rsb	r8, r8, #0
 801129a:	2d00      	cmp	r5, #0
 801129c:	d14e      	bne.n	801133c <_strtod_l+0x38c>
 801129e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80112a0:	4308      	orrs	r0, r1
 80112a2:	f47f aebe 	bne.w	8011022 <_strtod_l+0x72>
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	f47f aed6 	bne.w	8011058 <_strtod_l+0xa8>
 80112ac:	2a69      	cmp	r2, #105	@ 0x69
 80112ae:	d028      	beq.n	8011302 <_strtod_l+0x352>
 80112b0:	dc25      	bgt.n	80112fe <_strtod_l+0x34e>
 80112b2:	2a49      	cmp	r2, #73	@ 0x49
 80112b4:	d025      	beq.n	8011302 <_strtod_l+0x352>
 80112b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80112b8:	f47f aece 	bne.w	8011058 <_strtod_l+0xa8>
 80112bc:	499b      	ldr	r1, [pc, #620]	@ (801152c <_strtod_l+0x57c>)
 80112be:	a819      	add	r0, sp, #100	@ 0x64
 80112c0:	f001 fba6 	bl	8012a10 <__match>
 80112c4:	2800      	cmp	r0, #0
 80112c6:	f43f aec7 	beq.w	8011058 <_strtod_l+0xa8>
 80112ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	2b28      	cmp	r3, #40	@ 0x28
 80112d0:	d12e      	bne.n	8011330 <_strtod_l+0x380>
 80112d2:	4997      	ldr	r1, [pc, #604]	@ (8011530 <_strtod_l+0x580>)
 80112d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80112d6:	a819      	add	r0, sp, #100	@ 0x64
 80112d8:	f001 fbae 	bl	8012a38 <__hexnan>
 80112dc:	2805      	cmp	r0, #5
 80112de:	d127      	bne.n	8011330 <_strtod_l+0x380>
 80112e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80112e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80112e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80112ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80112ee:	e698      	b.n	8011022 <_strtod_l+0x72>
 80112f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80112f2:	fb08 2101 	mla	r1, r8, r1, r2
 80112f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80112fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80112fc:	e7b5      	b.n	801126a <_strtod_l+0x2ba>
 80112fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8011300:	e7da      	b.n	80112b8 <_strtod_l+0x308>
 8011302:	498c      	ldr	r1, [pc, #560]	@ (8011534 <_strtod_l+0x584>)
 8011304:	a819      	add	r0, sp, #100	@ 0x64
 8011306:	f001 fb83 	bl	8012a10 <__match>
 801130a:	2800      	cmp	r0, #0
 801130c:	f43f aea4 	beq.w	8011058 <_strtod_l+0xa8>
 8011310:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011312:	4989      	ldr	r1, [pc, #548]	@ (8011538 <_strtod_l+0x588>)
 8011314:	3b01      	subs	r3, #1
 8011316:	a819      	add	r0, sp, #100	@ 0x64
 8011318:	9319      	str	r3, [sp, #100]	@ 0x64
 801131a:	f001 fb79 	bl	8012a10 <__match>
 801131e:	b910      	cbnz	r0, 8011326 <_strtod_l+0x376>
 8011320:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011322:	3301      	adds	r3, #1
 8011324:	9319      	str	r3, [sp, #100]	@ 0x64
 8011326:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011548 <_strtod_l+0x598>
 801132a:	f04f 0a00 	mov.w	sl, #0
 801132e:	e678      	b.n	8011022 <_strtod_l+0x72>
 8011330:	4882      	ldr	r0, [pc, #520]	@ (801153c <_strtod_l+0x58c>)
 8011332:	f001 f8a9 	bl	8012488 <nan>
 8011336:	ec5b ab10 	vmov	sl, fp, d0
 801133a:	e672      	b.n	8011022 <_strtod_l+0x72>
 801133c:	eba8 0309 	sub.w	r3, r8, r9
 8011340:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011342:	9309      	str	r3, [sp, #36]	@ 0x24
 8011344:	2f00      	cmp	r7, #0
 8011346:	bf08      	it	eq
 8011348:	462f      	moveq	r7, r5
 801134a:	2d10      	cmp	r5, #16
 801134c:	462c      	mov	r4, r5
 801134e:	bfa8      	it	ge
 8011350:	2410      	movge	r4, #16
 8011352:	f7ef f8f7 	bl	8000544 <__aeabi_ui2d>
 8011356:	2d09      	cmp	r5, #9
 8011358:	4682      	mov	sl, r0
 801135a:	468b      	mov	fp, r1
 801135c:	dc13      	bgt.n	8011386 <_strtod_l+0x3d6>
 801135e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011360:	2b00      	cmp	r3, #0
 8011362:	f43f ae5e 	beq.w	8011022 <_strtod_l+0x72>
 8011366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011368:	dd78      	ble.n	801145c <_strtod_l+0x4ac>
 801136a:	2b16      	cmp	r3, #22
 801136c:	dc5f      	bgt.n	801142e <_strtod_l+0x47e>
 801136e:	4974      	ldr	r1, [pc, #464]	@ (8011540 <_strtod_l+0x590>)
 8011370:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011378:	4652      	mov	r2, sl
 801137a:	465b      	mov	r3, fp
 801137c:	f7ef f95c 	bl	8000638 <__aeabi_dmul>
 8011380:	4682      	mov	sl, r0
 8011382:	468b      	mov	fp, r1
 8011384:	e64d      	b.n	8011022 <_strtod_l+0x72>
 8011386:	4b6e      	ldr	r3, [pc, #440]	@ (8011540 <_strtod_l+0x590>)
 8011388:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801138c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011390:	f7ef f952 	bl	8000638 <__aeabi_dmul>
 8011394:	4682      	mov	sl, r0
 8011396:	9808      	ldr	r0, [sp, #32]
 8011398:	468b      	mov	fp, r1
 801139a:	f7ef f8d3 	bl	8000544 <__aeabi_ui2d>
 801139e:	4602      	mov	r2, r0
 80113a0:	460b      	mov	r3, r1
 80113a2:	4650      	mov	r0, sl
 80113a4:	4659      	mov	r1, fp
 80113a6:	f7ee ff91 	bl	80002cc <__adddf3>
 80113aa:	2d0f      	cmp	r5, #15
 80113ac:	4682      	mov	sl, r0
 80113ae:	468b      	mov	fp, r1
 80113b0:	ddd5      	ble.n	801135e <_strtod_l+0x3ae>
 80113b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113b4:	1b2c      	subs	r4, r5, r4
 80113b6:	441c      	add	r4, r3
 80113b8:	2c00      	cmp	r4, #0
 80113ba:	f340 8096 	ble.w	80114ea <_strtod_l+0x53a>
 80113be:	f014 030f 	ands.w	r3, r4, #15
 80113c2:	d00a      	beq.n	80113da <_strtod_l+0x42a>
 80113c4:	495e      	ldr	r1, [pc, #376]	@ (8011540 <_strtod_l+0x590>)
 80113c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80113ca:	4652      	mov	r2, sl
 80113cc:	465b      	mov	r3, fp
 80113ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113d2:	f7ef f931 	bl	8000638 <__aeabi_dmul>
 80113d6:	4682      	mov	sl, r0
 80113d8:	468b      	mov	fp, r1
 80113da:	f034 040f 	bics.w	r4, r4, #15
 80113de:	d073      	beq.n	80114c8 <_strtod_l+0x518>
 80113e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80113e4:	dd48      	ble.n	8011478 <_strtod_l+0x4c8>
 80113e6:	2400      	movs	r4, #0
 80113e8:	46a0      	mov	r8, r4
 80113ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80113ec:	46a1      	mov	r9, r4
 80113ee:	9a05      	ldr	r2, [sp, #20]
 80113f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011548 <_strtod_l+0x598>
 80113f4:	2322      	movs	r3, #34	@ 0x22
 80113f6:	6013      	str	r3, [r2, #0]
 80113f8:	f04f 0a00 	mov.w	sl, #0
 80113fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113fe:	2b00      	cmp	r3, #0
 8011400:	f43f ae0f 	beq.w	8011022 <_strtod_l+0x72>
 8011404:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011406:	9805      	ldr	r0, [sp, #20]
 8011408:	f7ff f940 	bl	801068c <_Bfree>
 801140c:	9805      	ldr	r0, [sp, #20]
 801140e:	4649      	mov	r1, r9
 8011410:	f7ff f93c 	bl	801068c <_Bfree>
 8011414:	9805      	ldr	r0, [sp, #20]
 8011416:	4641      	mov	r1, r8
 8011418:	f7ff f938 	bl	801068c <_Bfree>
 801141c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801141e:	9805      	ldr	r0, [sp, #20]
 8011420:	f7ff f934 	bl	801068c <_Bfree>
 8011424:	9805      	ldr	r0, [sp, #20]
 8011426:	4621      	mov	r1, r4
 8011428:	f7ff f930 	bl	801068c <_Bfree>
 801142c:	e5f9      	b.n	8011022 <_strtod_l+0x72>
 801142e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011430:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011434:	4293      	cmp	r3, r2
 8011436:	dbbc      	blt.n	80113b2 <_strtod_l+0x402>
 8011438:	4c41      	ldr	r4, [pc, #260]	@ (8011540 <_strtod_l+0x590>)
 801143a:	f1c5 050f 	rsb	r5, r5, #15
 801143e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011442:	4652      	mov	r2, sl
 8011444:	465b      	mov	r3, fp
 8011446:	e9d1 0100 	ldrd	r0, r1, [r1]
 801144a:	f7ef f8f5 	bl	8000638 <__aeabi_dmul>
 801144e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011450:	1b5d      	subs	r5, r3, r5
 8011452:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011456:	e9d4 2300 	ldrd	r2, r3, [r4]
 801145a:	e78f      	b.n	801137c <_strtod_l+0x3cc>
 801145c:	3316      	adds	r3, #22
 801145e:	dba8      	blt.n	80113b2 <_strtod_l+0x402>
 8011460:	4b37      	ldr	r3, [pc, #220]	@ (8011540 <_strtod_l+0x590>)
 8011462:	eba9 0808 	sub.w	r8, r9, r8
 8011466:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801146a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801146e:	4650      	mov	r0, sl
 8011470:	4659      	mov	r1, fp
 8011472:	f7ef fa0b 	bl	800088c <__aeabi_ddiv>
 8011476:	e783      	b.n	8011380 <_strtod_l+0x3d0>
 8011478:	4b32      	ldr	r3, [pc, #200]	@ (8011544 <_strtod_l+0x594>)
 801147a:	9308      	str	r3, [sp, #32]
 801147c:	2300      	movs	r3, #0
 801147e:	1124      	asrs	r4, r4, #4
 8011480:	4650      	mov	r0, sl
 8011482:	4659      	mov	r1, fp
 8011484:	461e      	mov	r6, r3
 8011486:	2c01      	cmp	r4, #1
 8011488:	dc21      	bgt.n	80114ce <_strtod_l+0x51e>
 801148a:	b10b      	cbz	r3, 8011490 <_strtod_l+0x4e0>
 801148c:	4682      	mov	sl, r0
 801148e:	468b      	mov	fp, r1
 8011490:	492c      	ldr	r1, [pc, #176]	@ (8011544 <_strtod_l+0x594>)
 8011492:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011496:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801149a:	4652      	mov	r2, sl
 801149c:	465b      	mov	r3, fp
 801149e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114a2:	f7ef f8c9 	bl	8000638 <__aeabi_dmul>
 80114a6:	4b28      	ldr	r3, [pc, #160]	@ (8011548 <_strtod_l+0x598>)
 80114a8:	460a      	mov	r2, r1
 80114aa:	400b      	ands	r3, r1
 80114ac:	4927      	ldr	r1, [pc, #156]	@ (801154c <_strtod_l+0x59c>)
 80114ae:	428b      	cmp	r3, r1
 80114b0:	4682      	mov	sl, r0
 80114b2:	d898      	bhi.n	80113e6 <_strtod_l+0x436>
 80114b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80114b8:	428b      	cmp	r3, r1
 80114ba:	bf86      	itte	hi
 80114bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011550 <_strtod_l+0x5a0>
 80114c0:	f04f 3aff 	movhi.w	sl, #4294967295
 80114c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80114c8:	2300      	movs	r3, #0
 80114ca:	9308      	str	r3, [sp, #32]
 80114cc:	e07a      	b.n	80115c4 <_strtod_l+0x614>
 80114ce:	07e2      	lsls	r2, r4, #31
 80114d0:	d505      	bpl.n	80114de <_strtod_l+0x52e>
 80114d2:	9b08      	ldr	r3, [sp, #32]
 80114d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d8:	f7ef f8ae 	bl	8000638 <__aeabi_dmul>
 80114dc:	2301      	movs	r3, #1
 80114de:	9a08      	ldr	r2, [sp, #32]
 80114e0:	3208      	adds	r2, #8
 80114e2:	3601      	adds	r6, #1
 80114e4:	1064      	asrs	r4, r4, #1
 80114e6:	9208      	str	r2, [sp, #32]
 80114e8:	e7cd      	b.n	8011486 <_strtod_l+0x4d6>
 80114ea:	d0ed      	beq.n	80114c8 <_strtod_l+0x518>
 80114ec:	4264      	negs	r4, r4
 80114ee:	f014 020f 	ands.w	r2, r4, #15
 80114f2:	d00a      	beq.n	801150a <_strtod_l+0x55a>
 80114f4:	4b12      	ldr	r3, [pc, #72]	@ (8011540 <_strtod_l+0x590>)
 80114f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80114fa:	4650      	mov	r0, sl
 80114fc:	4659      	mov	r1, fp
 80114fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011502:	f7ef f9c3 	bl	800088c <__aeabi_ddiv>
 8011506:	4682      	mov	sl, r0
 8011508:	468b      	mov	fp, r1
 801150a:	1124      	asrs	r4, r4, #4
 801150c:	d0dc      	beq.n	80114c8 <_strtod_l+0x518>
 801150e:	2c1f      	cmp	r4, #31
 8011510:	dd20      	ble.n	8011554 <_strtod_l+0x5a4>
 8011512:	2400      	movs	r4, #0
 8011514:	46a0      	mov	r8, r4
 8011516:	940a      	str	r4, [sp, #40]	@ 0x28
 8011518:	46a1      	mov	r9, r4
 801151a:	9a05      	ldr	r2, [sp, #20]
 801151c:	2322      	movs	r3, #34	@ 0x22
 801151e:	f04f 0a00 	mov.w	sl, #0
 8011522:	f04f 0b00 	mov.w	fp, #0
 8011526:	6013      	str	r3, [r2, #0]
 8011528:	e768      	b.n	80113fc <_strtod_l+0x44c>
 801152a:	bf00      	nop
 801152c:	08013e65 	.word	0x08013e65
 8011530:	0801407c 	.word	0x0801407c
 8011534:	08013e5d 	.word	0x08013e5d
 8011538:	08013e94 	.word	0x08013e94
 801153c:	08014225 	.word	0x08014225
 8011540:	08013fb0 	.word	0x08013fb0
 8011544:	08013f88 	.word	0x08013f88
 8011548:	7ff00000 	.word	0x7ff00000
 801154c:	7ca00000 	.word	0x7ca00000
 8011550:	7fefffff 	.word	0x7fefffff
 8011554:	f014 0310 	ands.w	r3, r4, #16
 8011558:	bf18      	it	ne
 801155a:	236a      	movne	r3, #106	@ 0x6a
 801155c:	4ea9      	ldr	r6, [pc, #676]	@ (8011804 <_strtod_l+0x854>)
 801155e:	9308      	str	r3, [sp, #32]
 8011560:	4650      	mov	r0, sl
 8011562:	4659      	mov	r1, fp
 8011564:	2300      	movs	r3, #0
 8011566:	07e2      	lsls	r2, r4, #31
 8011568:	d504      	bpl.n	8011574 <_strtod_l+0x5c4>
 801156a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801156e:	f7ef f863 	bl	8000638 <__aeabi_dmul>
 8011572:	2301      	movs	r3, #1
 8011574:	1064      	asrs	r4, r4, #1
 8011576:	f106 0608 	add.w	r6, r6, #8
 801157a:	d1f4      	bne.n	8011566 <_strtod_l+0x5b6>
 801157c:	b10b      	cbz	r3, 8011582 <_strtod_l+0x5d2>
 801157e:	4682      	mov	sl, r0
 8011580:	468b      	mov	fp, r1
 8011582:	9b08      	ldr	r3, [sp, #32]
 8011584:	b1b3      	cbz	r3, 80115b4 <_strtod_l+0x604>
 8011586:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801158a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801158e:	2b00      	cmp	r3, #0
 8011590:	4659      	mov	r1, fp
 8011592:	dd0f      	ble.n	80115b4 <_strtod_l+0x604>
 8011594:	2b1f      	cmp	r3, #31
 8011596:	dd55      	ble.n	8011644 <_strtod_l+0x694>
 8011598:	2b34      	cmp	r3, #52	@ 0x34
 801159a:	bfde      	ittt	le
 801159c:	f04f 33ff 	movle.w	r3, #4294967295
 80115a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80115a4:	4093      	lslle	r3, r2
 80115a6:	f04f 0a00 	mov.w	sl, #0
 80115aa:	bfcc      	ite	gt
 80115ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80115b0:	ea03 0b01 	andle.w	fp, r3, r1
 80115b4:	2200      	movs	r2, #0
 80115b6:	2300      	movs	r3, #0
 80115b8:	4650      	mov	r0, sl
 80115ba:	4659      	mov	r1, fp
 80115bc:	f7ef faa4 	bl	8000b08 <__aeabi_dcmpeq>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d1a6      	bne.n	8011512 <_strtod_l+0x562>
 80115c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80115ca:	9805      	ldr	r0, [sp, #20]
 80115cc:	462b      	mov	r3, r5
 80115ce:	463a      	mov	r2, r7
 80115d0:	f7ff f8c4 	bl	801075c <__s2b>
 80115d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80115d6:	2800      	cmp	r0, #0
 80115d8:	f43f af05 	beq.w	80113e6 <_strtod_l+0x436>
 80115dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115de:	2a00      	cmp	r2, #0
 80115e0:	eba9 0308 	sub.w	r3, r9, r8
 80115e4:	bfa8      	it	ge
 80115e6:	2300      	movge	r3, #0
 80115e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80115ea:	2400      	movs	r4, #0
 80115ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80115f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80115f2:	46a0      	mov	r8, r4
 80115f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115f6:	9805      	ldr	r0, [sp, #20]
 80115f8:	6859      	ldr	r1, [r3, #4]
 80115fa:	f7ff f807 	bl	801060c <_Balloc>
 80115fe:	4681      	mov	r9, r0
 8011600:	2800      	cmp	r0, #0
 8011602:	f43f aef4 	beq.w	80113ee <_strtod_l+0x43e>
 8011606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011608:	691a      	ldr	r2, [r3, #16]
 801160a:	3202      	adds	r2, #2
 801160c:	f103 010c 	add.w	r1, r3, #12
 8011610:	0092      	lsls	r2, r2, #2
 8011612:	300c      	adds	r0, #12
 8011614:	f000 ff28 	bl	8012468 <memcpy>
 8011618:	ec4b ab10 	vmov	d0, sl, fp
 801161c:	9805      	ldr	r0, [sp, #20]
 801161e:	aa1c      	add	r2, sp, #112	@ 0x70
 8011620:	a91b      	add	r1, sp, #108	@ 0x6c
 8011622:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011626:	f7ff fbd5 	bl	8010dd4 <__d2b>
 801162a:	901a      	str	r0, [sp, #104]	@ 0x68
 801162c:	2800      	cmp	r0, #0
 801162e:	f43f aede 	beq.w	80113ee <_strtod_l+0x43e>
 8011632:	9805      	ldr	r0, [sp, #20]
 8011634:	2101      	movs	r1, #1
 8011636:	f7ff f927 	bl	8010888 <__i2b>
 801163a:	4680      	mov	r8, r0
 801163c:	b948      	cbnz	r0, 8011652 <_strtod_l+0x6a2>
 801163e:	f04f 0800 	mov.w	r8, #0
 8011642:	e6d4      	b.n	80113ee <_strtod_l+0x43e>
 8011644:	f04f 32ff 	mov.w	r2, #4294967295
 8011648:	fa02 f303 	lsl.w	r3, r2, r3
 801164c:	ea03 0a0a 	and.w	sl, r3, sl
 8011650:	e7b0      	b.n	80115b4 <_strtod_l+0x604>
 8011652:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011654:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011656:	2d00      	cmp	r5, #0
 8011658:	bfab      	itete	ge
 801165a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801165c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801165e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011660:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011662:	bfac      	ite	ge
 8011664:	18ef      	addge	r7, r5, r3
 8011666:	1b5e      	sublt	r6, r3, r5
 8011668:	9b08      	ldr	r3, [sp, #32]
 801166a:	1aed      	subs	r5, r5, r3
 801166c:	4415      	add	r5, r2
 801166e:	4b66      	ldr	r3, [pc, #408]	@ (8011808 <_strtod_l+0x858>)
 8011670:	3d01      	subs	r5, #1
 8011672:	429d      	cmp	r5, r3
 8011674:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011678:	da50      	bge.n	801171c <_strtod_l+0x76c>
 801167a:	1b5b      	subs	r3, r3, r5
 801167c:	2b1f      	cmp	r3, #31
 801167e:	eba2 0203 	sub.w	r2, r2, r3
 8011682:	f04f 0101 	mov.w	r1, #1
 8011686:	dc3d      	bgt.n	8011704 <_strtod_l+0x754>
 8011688:	fa01 f303 	lsl.w	r3, r1, r3
 801168c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801168e:	2300      	movs	r3, #0
 8011690:	9310      	str	r3, [sp, #64]	@ 0x40
 8011692:	18bd      	adds	r5, r7, r2
 8011694:	9b08      	ldr	r3, [sp, #32]
 8011696:	42af      	cmp	r7, r5
 8011698:	4416      	add	r6, r2
 801169a:	441e      	add	r6, r3
 801169c:	463b      	mov	r3, r7
 801169e:	bfa8      	it	ge
 80116a0:	462b      	movge	r3, r5
 80116a2:	42b3      	cmp	r3, r6
 80116a4:	bfa8      	it	ge
 80116a6:	4633      	movge	r3, r6
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	bfc2      	ittt	gt
 80116ac:	1aed      	subgt	r5, r5, r3
 80116ae:	1af6      	subgt	r6, r6, r3
 80116b0:	1aff      	subgt	r7, r7, r3
 80116b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	dd16      	ble.n	80116e6 <_strtod_l+0x736>
 80116b8:	4641      	mov	r1, r8
 80116ba:	9805      	ldr	r0, [sp, #20]
 80116bc:	461a      	mov	r2, r3
 80116be:	f7ff f9a3 	bl	8010a08 <__pow5mult>
 80116c2:	4680      	mov	r8, r0
 80116c4:	2800      	cmp	r0, #0
 80116c6:	d0ba      	beq.n	801163e <_strtod_l+0x68e>
 80116c8:	4601      	mov	r1, r0
 80116ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80116cc:	9805      	ldr	r0, [sp, #20]
 80116ce:	f7ff f8f1 	bl	80108b4 <__multiply>
 80116d2:	900e      	str	r0, [sp, #56]	@ 0x38
 80116d4:	2800      	cmp	r0, #0
 80116d6:	f43f ae8a 	beq.w	80113ee <_strtod_l+0x43e>
 80116da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80116dc:	9805      	ldr	r0, [sp, #20]
 80116de:	f7fe ffd5 	bl	801068c <_Bfree>
 80116e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80116e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80116e6:	2d00      	cmp	r5, #0
 80116e8:	dc1d      	bgt.n	8011726 <_strtod_l+0x776>
 80116ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	dd23      	ble.n	8011738 <_strtod_l+0x788>
 80116f0:	4649      	mov	r1, r9
 80116f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80116f4:	9805      	ldr	r0, [sp, #20]
 80116f6:	f7ff f987 	bl	8010a08 <__pow5mult>
 80116fa:	4681      	mov	r9, r0
 80116fc:	b9e0      	cbnz	r0, 8011738 <_strtod_l+0x788>
 80116fe:	f04f 0900 	mov.w	r9, #0
 8011702:	e674      	b.n	80113ee <_strtod_l+0x43e>
 8011704:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011708:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801170c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011710:	35e2      	adds	r5, #226	@ 0xe2
 8011712:	fa01 f305 	lsl.w	r3, r1, r5
 8011716:	9310      	str	r3, [sp, #64]	@ 0x40
 8011718:	9113      	str	r1, [sp, #76]	@ 0x4c
 801171a:	e7ba      	b.n	8011692 <_strtod_l+0x6e2>
 801171c:	2300      	movs	r3, #0
 801171e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011720:	2301      	movs	r3, #1
 8011722:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011724:	e7b5      	b.n	8011692 <_strtod_l+0x6e2>
 8011726:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011728:	9805      	ldr	r0, [sp, #20]
 801172a:	462a      	mov	r2, r5
 801172c:	f7ff f9c6 	bl	8010abc <__lshift>
 8011730:	901a      	str	r0, [sp, #104]	@ 0x68
 8011732:	2800      	cmp	r0, #0
 8011734:	d1d9      	bne.n	80116ea <_strtod_l+0x73a>
 8011736:	e65a      	b.n	80113ee <_strtod_l+0x43e>
 8011738:	2e00      	cmp	r6, #0
 801173a:	dd07      	ble.n	801174c <_strtod_l+0x79c>
 801173c:	4649      	mov	r1, r9
 801173e:	9805      	ldr	r0, [sp, #20]
 8011740:	4632      	mov	r2, r6
 8011742:	f7ff f9bb 	bl	8010abc <__lshift>
 8011746:	4681      	mov	r9, r0
 8011748:	2800      	cmp	r0, #0
 801174a:	d0d8      	beq.n	80116fe <_strtod_l+0x74e>
 801174c:	2f00      	cmp	r7, #0
 801174e:	dd08      	ble.n	8011762 <_strtod_l+0x7b2>
 8011750:	4641      	mov	r1, r8
 8011752:	9805      	ldr	r0, [sp, #20]
 8011754:	463a      	mov	r2, r7
 8011756:	f7ff f9b1 	bl	8010abc <__lshift>
 801175a:	4680      	mov	r8, r0
 801175c:	2800      	cmp	r0, #0
 801175e:	f43f ae46 	beq.w	80113ee <_strtod_l+0x43e>
 8011762:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011764:	9805      	ldr	r0, [sp, #20]
 8011766:	464a      	mov	r2, r9
 8011768:	f7ff fa30 	bl	8010bcc <__mdiff>
 801176c:	4604      	mov	r4, r0
 801176e:	2800      	cmp	r0, #0
 8011770:	f43f ae3d 	beq.w	80113ee <_strtod_l+0x43e>
 8011774:	68c3      	ldr	r3, [r0, #12]
 8011776:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011778:	2300      	movs	r3, #0
 801177a:	60c3      	str	r3, [r0, #12]
 801177c:	4641      	mov	r1, r8
 801177e:	f7ff fa09 	bl	8010b94 <__mcmp>
 8011782:	2800      	cmp	r0, #0
 8011784:	da46      	bge.n	8011814 <_strtod_l+0x864>
 8011786:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011788:	ea53 030a 	orrs.w	r3, r3, sl
 801178c:	d16c      	bne.n	8011868 <_strtod_l+0x8b8>
 801178e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011792:	2b00      	cmp	r3, #0
 8011794:	d168      	bne.n	8011868 <_strtod_l+0x8b8>
 8011796:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801179a:	0d1b      	lsrs	r3, r3, #20
 801179c:	051b      	lsls	r3, r3, #20
 801179e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80117a2:	d961      	bls.n	8011868 <_strtod_l+0x8b8>
 80117a4:	6963      	ldr	r3, [r4, #20]
 80117a6:	b913      	cbnz	r3, 80117ae <_strtod_l+0x7fe>
 80117a8:	6923      	ldr	r3, [r4, #16]
 80117aa:	2b01      	cmp	r3, #1
 80117ac:	dd5c      	ble.n	8011868 <_strtod_l+0x8b8>
 80117ae:	4621      	mov	r1, r4
 80117b0:	2201      	movs	r2, #1
 80117b2:	9805      	ldr	r0, [sp, #20]
 80117b4:	f7ff f982 	bl	8010abc <__lshift>
 80117b8:	4641      	mov	r1, r8
 80117ba:	4604      	mov	r4, r0
 80117bc:	f7ff f9ea 	bl	8010b94 <__mcmp>
 80117c0:	2800      	cmp	r0, #0
 80117c2:	dd51      	ble.n	8011868 <_strtod_l+0x8b8>
 80117c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80117c8:	9a08      	ldr	r2, [sp, #32]
 80117ca:	0d1b      	lsrs	r3, r3, #20
 80117cc:	051b      	lsls	r3, r3, #20
 80117ce:	2a00      	cmp	r2, #0
 80117d0:	d06b      	beq.n	80118aa <_strtod_l+0x8fa>
 80117d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80117d6:	d868      	bhi.n	80118aa <_strtod_l+0x8fa>
 80117d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80117dc:	f67f ae9d 	bls.w	801151a <_strtod_l+0x56a>
 80117e0:	4b0a      	ldr	r3, [pc, #40]	@ (801180c <_strtod_l+0x85c>)
 80117e2:	4650      	mov	r0, sl
 80117e4:	4659      	mov	r1, fp
 80117e6:	2200      	movs	r2, #0
 80117e8:	f7ee ff26 	bl	8000638 <__aeabi_dmul>
 80117ec:	4b08      	ldr	r3, [pc, #32]	@ (8011810 <_strtod_l+0x860>)
 80117ee:	400b      	ands	r3, r1
 80117f0:	4682      	mov	sl, r0
 80117f2:	468b      	mov	fp, r1
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	f47f ae05 	bne.w	8011404 <_strtod_l+0x454>
 80117fa:	9a05      	ldr	r2, [sp, #20]
 80117fc:	2322      	movs	r3, #34	@ 0x22
 80117fe:	6013      	str	r3, [r2, #0]
 8011800:	e600      	b.n	8011404 <_strtod_l+0x454>
 8011802:	bf00      	nop
 8011804:	080140a8 	.word	0x080140a8
 8011808:	fffffc02 	.word	0xfffffc02
 801180c:	39500000 	.word	0x39500000
 8011810:	7ff00000 	.word	0x7ff00000
 8011814:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011818:	d165      	bne.n	80118e6 <_strtod_l+0x936>
 801181a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801181c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011820:	b35a      	cbz	r2, 801187a <_strtod_l+0x8ca>
 8011822:	4a9f      	ldr	r2, [pc, #636]	@ (8011aa0 <_strtod_l+0xaf0>)
 8011824:	4293      	cmp	r3, r2
 8011826:	d12b      	bne.n	8011880 <_strtod_l+0x8d0>
 8011828:	9b08      	ldr	r3, [sp, #32]
 801182a:	4651      	mov	r1, sl
 801182c:	b303      	cbz	r3, 8011870 <_strtod_l+0x8c0>
 801182e:	4b9d      	ldr	r3, [pc, #628]	@ (8011aa4 <_strtod_l+0xaf4>)
 8011830:	465a      	mov	r2, fp
 8011832:	4013      	ands	r3, r2
 8011834:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011838:	f04f 32ff 	mov.w	r2, #4294967295
 801183c:	d81b      	bhi.n	8011876 <_strtod_l+0x8c6>
 801183e:	0d1b      	lsrs	r3, r3, #20
 8011840:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011844:	fa02 f303 	lsl.w	r3, r2, r3
 8011848:	4299      	cmp	r1, r3
 801184a:	d119      	bne.n	8011880 <_strtod_l+0x8d0>
 801184c:	4b96      	ldr	r3, [pc, #600]	@ (8011aa8 <_strtod_l+0xaf8>)
 801184e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011850:	429a      	cmp	r2, r3
 8011852:	d102      	bne.n	801185a <_strtod_l+0x8aa>
 8011854:	3101      	adds	r1, #1
 8011856:	f43f adca 	beq.w	80113ee <_strtod_l+0x43e>
 801185a:	4b92      	ldr	r3, [pc, #584]	@ (8011aa4 <_strtod_l+0xaf4>)
 801185c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801185e:	401a      	ands	r2, r3
 8011860:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011864:	f04f 0a00 	mov.w	sl, #0
 8011868:	9b08      	ldr	r3, [sp, #32]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d1b8      	bne.n	80117e0 <_strtod_l+0x830>
 801186e:	e5c9      	b.n	8011404 <_strtod_l+0x454>
 8011870:	f04f 33ff 	mov.w	r3, #4294967295
 8011874:	e7e8      	b.n	8011848 <_strtod_l+0x898>
 8011876:	4613      	mov	r3, r2
 8011878:	e7e6      	b.n	8011848 <_strtod_l+0x898>
 801187a:	ea53 030a 	orrs.w	r3, r3, sl
 801187e:	d0a1      	beq.n	80117c4 <_strtod_l+0x814>
 8011880:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011882:	b1db      	cbz	r3, 80118bc <_strtod_l+0x90c>
 8011884:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011886:	4213      	tst	r3, r2
 8011888:	d0ee      	beq.n	8011868 <_strtod_l+0x8b8>
 801188a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801188c:	9a08      	ldr	r2, [sp, #32]
 801188e:	4650      	mov	r0, sl
 8011890:	4659      	mov	r1, fp
 8011892:	b1bb      	cbz	r3, 80118c4 <_strtod_l+0x914>
 8011894:	f7ff fb6c 	bl	8010f70 <sulp>
 8011898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801189c:	ec53 2b10 	vmov	r2, r3, d0
 80118a0:	f7ee fd14 	bl	80002cc <__adddf3>
 80118a4:	4682      	mov	sl, r0
 80118a6:	468b      	mov	fp, r1
 80118a8:	e7de      	b.n	8011868 <_strtod_l+0x8b8>
 80118aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80118ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80118b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80118b6:	f04f 3aff 	mov.w	sl, #4294967295
 80118ba:	e7d5      	b.n	8011868 <_strtod_l+0x8b8>
 80118bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80118be:	ea13 0f0a 	tst.w	r3, sl
 80118c2:	e7e1      	b.n	8011888 <_strtod_l+0x8d8>
 80118c4:	f7ff fb54 	bl	8010f70 <sulp>
 80118c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80118cc:	ec53 2b10 	vmov	r2, r3, d0
 80118d0:	f7ee fcfa 	bl	80002c8 <__aeabi_dsub>
 80118d4:	2200      	movs	r2, #0
 80118d6:	2300      	movs	r3, #0
 80118d8:	4682      	mov	sl, r0
 80118da:	468b      	mov	fp, r1
 80118dc:	f7ef f914 	bl	8000b08 <__aeabi_dcmpeq>
 80118e0:	2800      	cmp	r0, #0
 80118e2:	d0c1      	beq.n	8011868 <_strtod_l+0x8b8>
 80118e4:	e619      	b.n	801151a <_strtod_l+0x56a>
 80118e6:	4641      	mov	r1, r8
 80118e8:	4620      	mov	r0, r4
 80118ea:	f7ff facb 	bl	8010e84 <__ratio>
 80118ee:	ec57 6b10 	vmov	r6, r7, d0
 80118f2:	2200      	movs	r2, #0
 80118f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80118f8:	4630      	mov	r0, r6
 80118fa:	4639      	mov	r1, r7
 80118fc:	f7ef f918 	bl	8000b30 <__aeabi_dcmple>
 8011900:	2800      	cmp	r0, #0
 8011902:	d06f      	beq.n	80119e4 <_strtod_l+0xa34>
 8011904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011906:	2b00      	cmp	r3, #0
 8011908:	d17a      	bne.n	8011a00 <_strtod_l+0xa50>
 801190a:	f1ba 0f00 	cmp.w	sl, #0
 801190e:	d158      	bne.n	80119c2 <_strtod_l+0xa12>
 8011910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011912:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011916:	2b00      	cmp	r3, #0
 8011918:	d15a      	bne.n	80119d0 <_strtod_l+0xa20>
 801191a:	4b64      	ldr	r3, [pc, #400]	@ (8011aac <_strtod_l+0xafc>)
 801191c:	2200      	movs	r2, #0
 801191e:	4630      	mov	r0, r6
 8011920:	4639      	mov	r1, r7
 8011922:	f7ef f8fb 	bl	8000b1c <__aeabi_dcmplt>
 8011926:	2800      	cmp	r0, #0
 8011928:	d159      	bne.n	80119de <_strtod_l+0xa2e>
 801192a:	4630      	mov	r0, r6
 801192c:	4639      	mov	r1, r7
 801192e:	4b60      	ldr	r3, [pc, #384]	@ (8011ab0 <_strtod_l+0xb00>)
 8011930:	2200      	movs	r2, #0
 8011932:	f7ee fe81 	bl	8000638 <__aeabi_dmul>
 8011936:	4606      	mov	r6, r0
 8011938:	460f      	mov	r7, r1
 801193a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801193e:	9606      	str	r6, [sp, #24]
 8011940:	9307      	str	r3, [sp, #28]
 8011942:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011946:	4d57      	ldr	r5, [pc, #348]	@ (8011aa4 <_strtod_l+0xaf4>)
 8011948:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801194c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801194e:	401d      	ands	r5, r3
 8011950:	4b58      	ldr	r3, [pc, #352]	@ (8011ab4 <_strtod_l+0xb04>)
 8011952:	429d      	cmp	r5, r3
 8011954:	f040 80b2 	bne.w	8011abc <_strtod_l+0xb0c>
 8011958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801195a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801195e:	ec4b ab10 	vmov	d0, sl, fp
 8011962:	f7ff f9c7 	bl	8010cf4 <__ulp>
 8011966:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801196a:	ec51 0b10 	vmov	r0, r1, d0
 801196e:	f7ee fe63 	bl	8000638 <__aeabi_dmul>
 8011972:	4652      	mov	r2, sl
 8011974:	465b      	mov	r3, fp
 8011976:	f7ee fca9 	bl	80002cc <__adddf3>
 801197a:	460b      	mov	r3, r1
 801197c:	4949      	ldr	r1, [pc, #292]	@ (8011aa4 <_strtod_l+0xaf4>)
 801197e:	4a4e      	ldr	r2, [pc, #312]	@ (8011ab8 <_strtod_l+0xb08>)
 8011980:	4019      	ands	r1, r3
 8011982:	4291      	cmp	r1, r2
 8011984:	4682      	mov	sl, r0
 8011986:	d942      	bls.n	8011a0e <_strtod_l+0xa5e>
 8011988:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801198a:	4b47      	ldr	r3, [pc, #284]	@ (8011aa8 <_strtod_l+0xaf8>)
 801198c:	429a      	cmp	r2, r3
 801198e:	d103      	bne.n	8011998 <_strtod_l+0x9e8>
 8011990:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011992:	3301      	adds	r3, #1
 8011994:	f43f ad2b 	beq.w	80113ee <_strtod_l+0x43e>
 8011998:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011aa8 <_strtod_l+0xaf8>
 801199c:	f04f 3aff 	mov.w	sl, #4294967295
 80119a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80119a2:	9805      	ldr	r0, [sp, #20]
 80119a4:	f7fe fe72 	bl	801068c <_Bfree>
 80119a8:	9805      	ldr	r0, [sp, #20]
 80119aa:	4649      	mov	r1, r9
 80119ac:	f7fe fe6e 	bl	801068c <_Bfree>
 80119b0:	9805      	ldr	r0, [sp, #20]
 80119b2:	4641      	mov	r1, r8
 80119b4:	f7fe fe6a 	bl	801068c <_Bfree>
 80119b8:	9805      	ldr	r0, [sp, #20]
 80119ba:	4621      	mov	r1, r4
 80119bc:	f7fe fe66 	bl	801068c <_Bfree>
 80119c0:	e618      	b.n	80115f4 <_strtod_l+0x644>
 80119c2:	f1ba 0f01 	cmp.w	sl, #1
 80119c6:	d103      	bne.n	80119d0 <_strtod_l+0xa20>
 80119c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	f43f ada5 	beq.w	801151a <_strtod_l+0x56a>
 80119d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011a80 <_strtod_l+0xad0>
 80119d4:	4f35      	ldr	r7, [pc, #212]	@ (8011aac <_strtod_l+0xafc>)
 80119d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80119da:	2600      	movs	r6, #0
 80119dc:	e7b1      	b.n	8011942 <_strtod_l+0x992>
 80119de:	4f34      	ldr	r7, [pc, #208]	@ (8011ab0 <_strtod_l+0xb00>)
 80119e0:	2600      	movs	r6, #0
 80119e2:	e7aa      	b.n	801193a <_strtod_l+0x98a>
 80119e4:	4b32      	ldr	r3, [pc, #200]	@ (8011ab0 <_strtod_l+0xb00>)
 80119e6:	4630      	mov	r0, r6
 80119e8:	4639      	mov	r1, r7
 80119ea:	2200      	movs	r2, #0
 80119ec:	f7ee fe24 	bl	8000638 <__aeabi_dmul>
 80119f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119f2:	4606      	mov	r6, r0
 80119f4:	460f      	mov	r7, r1
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d09f      	beq.n	801193a <_strtod_l+0x98a>
 80119fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80119fe:	e7a0      	b.n	8011942 <_strtod_l+0x992>
 8011a00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011a88 <_strtod_l+0xad8>
 8011a04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011a08:	ec57 6b17 	vmov	r6, r7, d7
 8011a0c:	e799      	b.n	8011942 <_strtod_l+0x992>
 8011a0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011a12:	9b08      	ldr	r3, [sp, #32]
 8011a14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d1c1      	bne.n	80119a0 <_strtod_l+0x9f0>
 8011a1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a20:	0d1b      	lsrs	r3, r3, #20
 8011a22:	051b      	lsls	r3, r3, #20
 8011a24:	429d      	cmp	r5, r3
 8011a26:	d1bb      	bne.n	80119a0 <_strtod_l+0x9f0>
 8011a28:	4630      	mov	r0, r6
 8011a2a:	4639      	mov	r1, r7
 8011a2c:	f7ef f9b4 	bl	8000d98 <__aeabi_d2lz>
 8011a30:	f7ee fdd4 	bl	80005dc <__aeabi_l2d>
 8011a34:	4602      	mov	r2, r0
 8011a36:	460b      	mov	r3, r1
 8011a38:	4630      	mov	r0, r6
 8011a3a:	4639      	mov	r1, r7
 8011a3c:	f7ee fc44 	bl	80002c8 <__aeabi_dsub>
 8011a40:	460b      	mov	r3, r1
 8011a42:	4602      	mov	r2, r0
 8011a44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011a48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a4e:	ea46 060a 	orr.w	r6, r6, sl
 8011a52:	431e      	orrs	r6, r3
 8011a54:	d06f      	beq.n	8011b36 <_strtod_l+0xb86>
 8011a56:	a30e      	add	r3, pc, #56	@ (adr r3, 8011a90 <_strtod_l+0xae0>)
 8011a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a5c:	f7ef f85e 	bl	8000b1c <__aeabi_dcmplt>
 8011a60:	2800      	cmp	r0, #0
 8011a62:	f47f accf 	bne.w	8011404 <_strtod_l+0x454>
 8011a66:	a30c      	add	r3, pc, #48	@ (adr r3, 8011a98 <_strtod_l+0xae8>)
 8011a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011a70:	f7ef f872 	bl	8000b58 <__aeabi_dcmpgt>
 8011a74:	2800      	cmp	r0, #0
 8011a76:	d093      	beq.n	80119a0 <_strtod_l+0x9f0>
 8011a78:	e4c4      	b.n	8011404 <_strtod_l+0x454>
 8011a7a:	bf00      	nop
 8011a7c:	f3af 8000 	nop.w
 8011a80:	00000000 	.word	0x00000000
 8011a84:	bff00000 	.word	0xbff00000
 8011a88:	00000000 	.word	0x00000000
 8011a8c:	3ff00000 	.word	0x3ff00000
 8011a90:	94a03595 	.word	0x94a03595
 8011a94:	3fdfffff 	.word	0x3fdfffff
 8011a98:	35afe535 	.word	0x35afe535
 8011a9c:	3fe00000 	.word	0x3fe00000
 8011aa0:	000fffff 	.word	0x000fffff
 8011aa4:	7ff00000 	.word	0x7ff00000
 8011aa8:	7fefffff 	.word	0x7fefffff
 8011aac:	3ff00000 	.word	0x3ff00000
 8011ab0:	3fe00000 	.word	0x3fe00000
 8011ab4:	7fe00000 	.word	0x7fe00000
 8011ab8:	7c9fffff 	.word	0x7c9fffff
 8011abc:	9b08      	ldr	r3, [sp, #32]
 8011abe:	b323      	cbz	r3, 8011b0a <_strtod_l+0xb5a>
 8011ac0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011ac4:	d821      	bhi.n	8011b0a <_strtod_l+0xb5a>
 8011ac6:	a328      	add	r3, pc, #160	@ (adr r3, 8011b68 <_strtod_l+0xbb8>)
 8011ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011acc:	4630      	mov	r0, r6
 8011ace:	4639      	mov	r1, r7
 8011ad0:	f7ef f82e 	bl	8000b30 <__aeabi_dcmple>
 8011ad4:	b1a0      	cbz	r0, 8011b00 <_strtod_l+0xb50>
 8011ad6:	4639      	mov	r1, r7
 8011ad8:	4630      	mov	r0, r6
 8011ada:	f7ef f885 	bl	8000be8 <__aeabi_d2uiz>
 8011ade:	2801      	cmp	r0, #1
 8011ae0:	bf38      	it	cc
 8011ae2:	2001      	movcc	r0, #1
 8011ae4:	f7ee fd2e 	bl	8000544 <__aeabi_ui2d>
 8011ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011aea:	4606      	mov	r6, r0
 8011aec:	460f      	mov	r7, r1
 8011aee:	b9fb      	cbnz	r3, 8011b30 <_strtod_l+0xb80>
 8011af0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011af4:	9014      	str	r0, [sp, #80]	@ 0x50
 8011af6:	9315      	str	r3, [sp, #84]	@ 0x54
 8011af8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011afc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011b00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011b02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011b06:	1b5b      	subs	r3, r3, r5
 8011b08:	9311      	str	r3, [sp, #68]	@ 0x44
 8011b0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011b0e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011b12:	f7ff f8ef 	bl	8010cf4 <__ulp>
 8011b16:	4650      	mov	r0, sl
 8011b18:	ec53 2b10 	vmov	r2, r3, d0
 8011b1c:	4659      	mov	r1, fp
 8011b1e:	f7ee fd8b 	bl	8000638 <__aeabi_dmul>
 8011b22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011b26:	f7ee fbd1 	bl	80002cc <__adddf3>
 8011b2a:	4682      	mov	sl, r0
 8011b2c:	468b      	mov	fp, r1
 8011b2e:	e770      	b.n	8011a12 <_strtod_l+0xa62>
 8011b30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011b34:	e7e0      	b.n	8011af8 <_strtod_l+0xb48>
 8011b36:	a30e      	add	r3, pc, #56	@ (adr r3, 8011b70 <_strtod_l+0xbc0>)
 8011b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b3c:	f7ee ffee 	bl	8000b1c <__aeabi_dcmplt>
 8011b40:	e798      	b.n	8011a74 <_strtod_l+0xac4>
 8011b42:	2300      	movs	r3, #0
 8011b44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011b48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b4a:	6013      	str	r3, [r2, #0]
 8011b4c:	f7ff ba6d 	b.w	801102a <_strtod_l+0x7a>
 8011b50:	2a65      	cmp	r2, #101	@ 0x65
 8011b52:	f43f ab66 	beq.w	8011222 <_strtod_l+0x272>
 8011b56:	2a45      	cmp	r2, #69	@ 0x45
 8011b58:	f43f ab63 	beq.w	8011222 <_strtod_l+0x272>
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	f7ff bb9e 	b.w	801129e <_strtod_l+0x2ee>
 8011b62:	bf00      	nop
 8011b64:	f3af 8000 	nop.w
 8011b68:	ffc00000 	.word	0xffc00000
 8011b6c:	41dfffff 	.word	0x41dfffff
 8011b70:	94a03595 	.word	0x94a03595
 8011b74:	3fcfffff 	.word	0x3fcfffff

08011b78 <_strtod_r>:
 8011b78:	4b01      	ldr	r3, [pc, #4]	@ (8011b80 <_strtod_r+0x8>)
 8011b7a:	f7ff ba19 	b.w	8010fb0 <_strtod_l>
 8011b7e:	bf00      	nop
 8011b80:	200000d4 	.word	0x200000d4

08011b84 <_strtol_l.constprop.0>:
 8011b84:	2b24      	cmp	r3, #36	@ 0x24
 8011b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b8a:	4686      	mov	lr, r0
 8011b8c:	4690      	mov	r8, r2
 8011b8e:	d801      	bhi.n	8011b94 <_strtol_l.constprop.0+0x10>
 8011b90:	2b01      	cmp	r3, #1
 8011b92:	d106      	bne.n	8011ba2 <_strtol_l.constprop.0+0x1e>
 8011b94:	f7fd fe6e 	bl	800f874 <__errno>
 8011b98:	2316      	movs	r3, #22
 8011b9a:	6003      	str	r3, [r0, #0]
 8011b9c:	2000      	movs	r0, #0
 8011b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ba2:	4834      	ldr	r0, [pc, #208]	@ (8011c74 <_strtol_l.constprop.0+0xf0>)
 8011ba4:	460d      	mov	r5, r1
 8011ba6:	462a      	mov	r2, r5
 8011ba8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011bac:	5d06      	ldrb	r6, [r0, r4]
 8011bae:	f016 0608 	ands.w	r6, r6, #8
 8011bb2:	d1f8      	bne.n	8011ba6 <_strtol_l.constprop.0+0x22>
 8011bb4:	2c2d      	cmp	r4, #45	@ 0x2d
 8011bb6:	d12d      	bne.n	8011c14 <_strtol_l.constprop.0+0x90>
 8011bb8:	782c      	ldrb	r4, [r5, #0]
 8011bba:	2601      	movs	r6, #1
 8011bbc:	1c95      	adds	r5, r2, #2
 8011bbe:	f033 0210 	bics.w	r2, r3, #16
 8011bc2:	d109      	bne.n	8011bd8 <_strtol_l.constprop.0+0x54>
 8011bc4:	2c30      	cmp	r4, #48	@ 0x30
 8011bc6:	d12a      	bne.n	8011c1e <_strtol_l.constprop.0+0x9a>
 8011bc8:	782a      	ldrb	r2, [r5, #0]
 8011bca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011bce:	2a58      	cmp	r2, #88	@ 0x58
 8011bd0:	d125      	bne.n	8011c1e <_strtol_l.constprop.0+0x9a>
 8011bd2:	786c      	ldrb	r4, [r5, #1]
 8011bd4:	2310      	movs	r3, #16
 8011bd6:	3502      	adds	r5, #2
 8011bd8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011bdc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011be0:	2200      	movs	r2, #0
 8011be2:	fbbc f9f3 	udiv	r9, ip, r3
 8011be6:	4610      	mov	r0, r2
 8011be8:	fb03 ca19 	mls	sl, r3, r9, ip
 8011bec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011bf0:	2f09      	cmp	r7, #9
 8011bf2:	d81b      	bhi.n	8011c2c <_strtol_l.constprop.0+0xa8>
 8011bf4:	463c      	mov	r4, r7
 8011bf6:	42a3      	cmp	r3, r4
 8011bf8:	dd27      	ble.n	8011c4a <_strtol_l.constprop.0+0xc6>
 8011bfa:	1c57      	adds	r7, r2, #1
 8011bfc:	d007      	beq.n	8011c0e <_strtol_l.constprop.0+0x8a>
 8011bfe:	4581      	cmp	r9, r0
 8011c00:	d320      	bcc.n	8011c44 <_strtol_l.constprop.0+0xc0>
 8011c02:	d101      	bne.n	8011c08 <_strtol_l.constprop.0+0x84>
 8011c04:	45a2      	cmp	sl, r4
 8011c06:	db1d      	blt.n	8011c44 <_strtol_l.constprop.0+0xc0>
 8011c08:	fb00 4003 	mla	r0, r0, r3, r4
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c12:	e7eb      	b.n	8011bec <_strtol_l.constprop.0+0x68>
 8011c14:	2c2b      	cmp	r4, #43	@ 0x2b
 8011c16:	bf04      	itt	eq
 8011c18:	782c      	ldrbeq	r4, [r5, #0]
 8011c1a:	1c95      	addeq	r5, r2, #2
 8011c1c:	e7cf      	b.n	8011bbe <_strtol_l.constprop.0+0x3a>
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d1da      	bne.n	8011bd8 <_strtol_l.constprop.0+0x54>
 8011c22:	2c30      	cmp	r4, #48	@ 0x30
 8011c24:	bf0c      	ite	eq
 8011c26:	2308      	moveq	r3, #8
 8011c28:	230a      	movne	r3, #10
 8011c2a:	e7d5      	b.n	8011bd8 <_strtol_l.constprop.0+0x54>
 8011c2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011c30:	2f19      	cmp	r7, #25
 8011c32:	d801      	bhi.n	8011c38 <_strtol_l.constprop.0+0xb4>
 8011c34:	3c37      	subs	r4, #55	@ 0x37
 8011c36:	e7de      	b.n	8011bf6 <_strtol_l.constprop.0+0x72>
 8011c38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011c3c:	2f19      	cmp	r7, #25
 8011c3e:	d804      	bhi.n	8011c4a <_strtol_l.constprop.0+0xc6>
 8011c40:	3c57      	subs	r4, #87	@ 0x57
 8011c42:	e7d8      	b.n	8011bf6 <_strtol_l.constprop.0+0x72>
 8011c44:	f04f 32ff 	mov.w	r2, #4294967295
 8011c48:	e7e1      	b.n	8011c0e <_strtol_l.constprop.0+0x8a>
 8011c4a:	1c53      	adds	r3, r2, #1
 8011c4c:	d108      	bne.n	8011c60 <_strtol_l.constprop.0+0xdc>
 8011c4e:	2322      	movs	r3, #34	@ 0x22
 8011c50:	f8ce 3000 	str.w	r3, [lr]
 8011c54:	4660      	mov	r0, ip
 8011c56:	f1b8 0f00 	cmp.w	r8, #0
 8011c5a:	d0a0      	beq.n	8011b9e <_strtol_l.constprop.0+0x1a>
 8011c5c:	1e69      	subs	r1, r5, #1
 8011c5e:	e006      	b.n	8011c6e <_strtol_l.constprop.0+0xea>
 8011c60:	b106      	cbz	r6, 8011c64 <_strtol_l.constprop.0+0xe0>
 8011c62:	4240      	negs	r0, r0
 8011c64:	f1b8 0f00 	cmp.w	r8, #0
 8011c68:	d099      	beq.n	8011b9e <_strtol_l.constprop.0+0x1a>
 8011c6a:	2a00      	cmp	r2, #0
 8011c6c:	d1f6      	bne.n	8011c5c <_strtol_l.constprop.0+0xd8>
 8011c6e:	f8c8 1000 	str.w	r1, [r8]
 8011c72:	e794      	b.n	8011b9e <_strtol_l.constprop.0+0x1a>
 8011c74:	080140d1 	.word	0x080140d1

08011c78 <_strtol_r>:
 8011c78:	f7ff bf84 	b.w	8011b84 <_strtol_l.constprop.0>

08011c7c <__ssputs_r>:
 8011c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c80:	688e      	ldr	r6, [r1, #8]
 8011c82:	461f      	mov	r7, r3
 8011c84:	42be      	cmp	r6, r7
 8011c86:	680b      	ldr	r3, [r1, #0]
 8011c88:	4682      	mov	sl, r0
 8011c8a:	460c      	mov	r4, r1
 8011c8c:	4690      	mov	r8, r2
 8011c8e:	d82d      	bhi.n	8011cec <__ssputs_r+0x70>
 8011c90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011c98:	d026      	beq.n	8011ce8 <__ssputs_r+0x6c>
 8011c9a:	6965      	ldr	r5, [r4, #20]
 8011c9c:	6909      	ldr	r1, [r1, #16]
 8011c9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ca2:	eba3 0901 	sub.w	r9, r3, r1
 8011ca6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011caa:	1c7b      	adds	r3, r7, #1
 8011cac:	444b      	add	r3, r9
 8011cae:	106d      	asrs	r5, r5, #1
 8011cb0:	429d      	cmp	r5, r3
 8011cb2:	bf38      	it	cc
 8011cb4:	461d      	movcc	r5, r3
 8011cb6:	0553      	lsls	r3, r2, #21
 8011cb8:	d527      	bpl.n	8011d0a <__ssputs_r+0x8e>
 8011cba:	4629      	mov	r1, r5
 8011cbc:	f7fc fc22 	bl	800e504 <_malloc_r>
 8011cc0:	4606      	mov	r6, r0
 8011cc2:	b360      	cbz	r0, 8011d1e <__ssputs_r+0xa2>
 8011cc4:	6921      	ldr	r1, [r4, #16]
 8011cc6:	464a      	mov	r2, r9
 8011cc8:	f000 fbce 	bl	8012468 <memcpy>
 8011ccc:	89a3      	ldrh	r3, [r4, #12]
 8011cce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cd6:	81a3      	strh	r3, [r4, #12]
 8011cd8:	6126      	str	r6, [r4, #16]
 8011cda:	6165      	str	r5, [r4, #20]
 8011cdc:	444e      	add	r6, r9
 8011cde:	eba5 0509 	sub.w	r5, r5, r9
 8011ce2:	6026      	str	r6, [r4, #0]
 8011ce4:	60a5      	str	r5, [r4, #8]
 8011ce6:	463e      	mov	r6, r7
 8011ce8:	42be      	cmp	r6, r7
 8011cea:	d900      	bls.n	8011cee <__ssputs_r+0x72>
 8011cec:	463e      	mov	r6, r7
 8011cee:	6820      	ldr	r0, [r4, #0]
 8011cf0:	4632      	mov	r2, r6
 8011cf2:	4641      	mov	r1, r8
 8011cf4:	f000 fb6a 	bl	80123cc <memmove>
 8011cf8:	68a3      	ldr	r3, [r4, #8]
 8011cfa:	1b9b      	subs	r3, r3, r6
 8011cfc:	60a3      	str	r3, [r4, #8]
 8011cfe:	6823      	ldr	r3, [r4, #0]
 8011d00:	4433      	add	r3, r6
 8011d02:	6023      	str	r3, [r4, #0]
 8011d04:	2000      	movs	r0, #0
 8011d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d0a:	462a      	mov	r2, r5
 8011d0c:	f000 ff41 	bl	8012b92 <_realloc_r>
 8011d10:	4606      	mov	r6, r0
 8011d12:	2800      	cmp	r0, #0
 8011d14:	d1e0      	bne.n	8011cd8 <__ssputs_r+0x5c>
 8011d16:	6921      	ldr	r1, [r4, #16]
 8011d18:	4650      	mov	r0, sl
 8011d1a:	f7fe fc2d 	bl	8010578 <_free_r>
 8011d1e:	230c      	movs	r3, #12
 8011d20:	f8ca 3000 	str.w	r3, [sl]
 8011d24:	89a3      	ldrh	r3, [r4, #12]
 8011d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d2a:	81a3      	strh	r3, [r4, #12]
 8011d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d30:	e7e9      	b.n	8011d06 <__ssputs_r+0x8a>
	...

08011d34 <_svfiprintf_r>:
 8011d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d38:	4698      	mov	r8, r3
 8011d3a:	898b      	ldrh	r3, [r1, #12]
 8011d3c:	061b      	lsls	r3, r3, #24
 8011d3e:	b09d      	sub	sp, #116	@ 0x74
 8011d40:	4607      	mov	r7, r0
 8011d42:	460d      	mov	r5, r1
 8011d44:	4614      	mov	r4, r2
 8011d46:	d510      	bpl.n	8011d6a <_svfiprintf_r+0x36>
 8011d48:	690b      	ldr	r3, [r1, #16]
 8011d4a:	b973      	cbnz	r3, 8011d6a <_svfiprintf_r+0x36>
 8011d4c:	2140      	movs	r1, #64	@ 0x40
 8011d4e:	f7fc fbd9 	bl	800e504 <_malloc_r>
 8011d52:	6028      	str	r0, [r5, #0]
 8011d54:	6128      	str	r0, [r5, #16]
 8011d56:	b930      	cbnz	r0, 8011d66 <_svfiprintf_r+0x32>
 8011d58:	230c      	movs	r3, #12
 8011d5a:	603b      	str	r3, [r7, #0]
 8011d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d60:	b01d      	add	sp, #116	@ 0x74
 8011d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d66:	2340      	movs	r3, #64	@ 0x40
 8011d68:	616b      	str	r3, [r5, #20]
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d6e:	2320      	movs	r3, #32
 8011d70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d78:	2330      	movs	r3, #48	@ 0x30
 8011d7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011f18 <_svfiprintf_r+0x1e4>
 8011d7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d82:	f04f 0901 	mov.w	r9, #1
 8011d86:	4623      	mov	r3, r4
 8011d88:	469a      	mov	sl, r3
 8011d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d8e:	b10a      	cbz	r2, 8011d94 <_svfiprintf_r+0x60>
 8011d90:	2a25      	cmp	r2, #37	@ 0x25
 8011d92:	d1f9      	bne.n	8011d88 <_svfiprintf_r+0x54>
 8011d94:	ebba 0b04 	subs.w	fp, sl, r4
 8011d98:	d00b      	beq.n	8011db2 <_svfiprintf_r+0x7e>
 8011d9a:	465b      	mov	r3, fp
 8011d9c:	4622      	mov	r2, r4
 8011d9e:	4629      	mov	r1, r5
 8011da0:	4638      	mov	r0, r7
 8011da2:	f7ff ff6b 	bl	8011c7c <__ssputs_r>
 8011da6:	3001      	adds	r0, #1
 8011da8:	f000 80a7 	beq.w	8011efa <_svfiprintf_r+0x1c6>
 8011dac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011dae:	445a      	add	r2, fp
 8011db0:	9209      	str	r2, [sp, #36]	@ 0x24
 8011db2:	f89a 3000 	ldrb.w	r3, [sl]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	f000 809f 	beq.w	8011efa <_svfiprintf_r+0x1c6>
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8011dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dc6:	f10a 0a01 	add.w	sl, sl, #1
 8011dca:	9304      	str	r3, [sp, #16]
 8011dcc:	9307      	str	r3, [sp, #28]
 8011dce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011dd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8011dd4:	4654      	mov	r4, sl
 8011dd6:	2205      	movs	r2, #5
 8011dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ddc:	484e      	ldr	r0, [pc, #312]	@ (8011f18 <_svfiprintf_r+0x1e4>)
 8011dde:	f7ee fa17 	bl	8000210 <memchr>
 8011de2:	9a04      	ldr	r2, [sp, #16]
 8011de4:	b9d8      	cbnz	r0, 8011e1e <_svfiprintf_r+0xea>
 8011de6:	06d0      	lsls	r0, r2, #27
 8011de8:	bf44      	itt	mi
 8011dea:	2320      	movmi	r3, #32
 8011dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011df0:	0711      	lsls	r1, r2, #28
 8011df2:	bf44      	itt	mi
 8011df4:	232b      	movmi	r3, #43	@ 0x2b
 8011df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8011dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e00:	d015      	beq.n	8011e2e <_svfiprintf_r+0xfa>
 8011e02:	9a07      	ldr	r2, [sp, #28]
 8011e04:	4654      	mov	r4, sl
 8011e06:	2000      	movs	r0, #0
 8011e08:	f04f 0c0a 	mov.w	ip, #10
 8011e0c:	4621      	mov	r1, r4
 8011e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e12:	3b30      	subs	r3, #48	@ 0x30
 8011e14:	2b09      	cmp	r3, #9
 8011e16:	d94b      	bls.n	8011eb0 <_svfiprintf_r+0x17c>
 8011e18:	b1b0      	cbz	r0, 8011e48 <_svfiprintf_r+0x114>
 8011e1a:	9207      	str	r2, [sp, #28]
 8011e1c:	e014      	b.n	8011e48 <_svfiprintf_r+0x114>
 8011e1e:	eba0 0308 	sub.w	r3, r0, r8
 8011e22:	fa09 f303 	lsl.w	r3, r9, r3
 8011e26:	4313      	orrs	r3, r2
 8011e28:	9304      	str	r3, [sp, #16]
 8011e2a:	46a2      	mov	sl, r4
 8011e2c:	e7d2      	b.n	8011dd4 <_svfiprintf_r+0xa0>
 8011e2e:	9b03      	ldr	r3, [sp, #12]
 8011e30:	1d19      	adds	r1, r3, #4
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	9103      	str	r1, [sp, #12]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	bfbb      	ittet	lt
 8011e3a:	425b      	neglt	r3, r3
 8011e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8011e40:	9307      	strge	r3, [sp, #28]
 8011e42:	9307      	strlt	r3, [sp, #28]
 8011e44:	bfb8      	it	lt
 8011e46:	9204      	strlt	r2, [sp, #16]
 8011e48:	7823      	ldrb	r3, [r4, #0]
 8011e4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e4c:	d10a      	bne.n	8011e64 <_svfiprintf_r+0x130>
 8011e4e:	7863      	ldrb	r3, [r4, #1]
 8011e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e52:	d132      	bne.n	8011eba <_svfiprintf_r+0x186>
 8011e54:	9b03      	ldr	r3, [sp, #12]
 8011e56:	1d1a      	adds	r2, r3, #4
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	9203      	str	r2, [sp, #12]
 8011e5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e60:	3402      	adds	r4, #2
 8011e62:	9305      	str	r3, [sp, #20]
 8011e64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011f28 <_svfiprintf_r+0x1f4>
 8011e68:	7821      	ldrb	r1, [r4, #0]
 8011e6a:	2203      	movs	r2, #3
 8011e6c:	4650      	mov	r0, sl
 8011e6e:	f7ee f9cf 	bl	8000210 <memchr>
 8011e72:	b138      	cbz	r0, 8011e84 <_svfiprintf_r+0x150>
 8011e74:	9b04      	ldr	r3, [sp, #16]
 8011e76:	eba0 000a 	sub.w	r0, r0, sl
 8011e7a:	2240      	movs	r2, #64	@ 0x40
 8011e7c:	4082      	lsls	r2, r0
 8011e7e:	4313      	orrs	r3, r2
 8011e80:	3401      	adds	r4, #1
 8011e82:	9304      	str	r3, [sp, #16]
 8011e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e88:	4824      	ldr	r0, [pc, #144]	@ (8011f1c <_svfiprintf_r+0x1e8>)
 8011e8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e8e:	2206      	movs	r2, #6
 8011e90:	f7ee f9be 	bl	8000210 <memchr>
 8011e94:	2800      	cmp	r0, #0
 8011e96:	d036      	beq.n	8011f06 <_svfiprintf_r+0x1d2>
 8011e98:	4b21      	ldr	r3, [pc, #132]	@ (8011f20 <_svfiprintf_r+0x1ec>)
 8011e9a:	bb1b      	cbnz	r3, 8011ee4 <_svfiprintf_r+0x1b0>
 8011e9c:	9b03      	ldr	r3, [sp, #12]
 8011e9e:	3307      	adds	r3, #7
 8011ea0:	f023 0307 	bic.w	r3, r3, #7
 8011ea4:	3308      	adds	r3, #8
 8011ea6:	9303      	str	r3, [sp, #12]
 8011ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011eaa:	4433      	add	r3, r6
 8011eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8011eae:	e76a      	b.n	8011d86 <_svfiprintf_r+0x52>
 8011eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8011eb4:	460c      	mov	r4, r1
 8011eb6:	2001      	movs	r0, #1
 8011eb8:	e7a8      	b.n	8011e0c <_svfiprintf_r+0xd8>
 8011eba:	2300      	movs	r3, #0
 8011ebc:	3401      	adds	r4, #1
 8011ebe:	9305      	str	r3, [sp, #20]
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	f04f 0c0a 	mov.w	ip, #10
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ecc:	3a30      	subs	r2, #48	@ 0x30
 8011ece:	2a09      	cmp	r2, #9
 8011ed0:	d903      	bls.n	8011eda <_svfiprintf_r+0x1a6>
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d0c6      	beq.n	8011e64 <_svfiprintf_r+0x130>
 8011ed6:	9105      	str	r1, [sp, #20]
 8011ed8:	e7c4      	b.n	8011e64 <_svfiprintf_r+0x130>
 8011eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ede:	4604      	mov	r4, r0
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	e7f0      	b.n	8011ec6 <_svfiprintf_r+0x192>
 8011ee4:	ab03      	add	r3, sp, #12
 8011ee6:	9300      	str	r3, [sp, #0]
 8011ee8:	462a      	mov	r2, r5
 8011eea:	4b0e      	ldr	r3, [pc, #56]	@ (8011f24 <_svfiprintf_r+0x1f0>)
 8011eec:	a904      	add	r1, sp, #16
 8011eee:	4638      	mov	r0, r7
 8011ef0:	f7fc fc34 	bl	800e75c <_printf_float>
 8011ef4:	1c42      	adds	r2, r0, #1
 8011ef6:	4606      	mov	r6, r0
 8011ef8:	d1d6      	bne.n	8011ea8 <_svfiprintf_r+0x174>
 8011efa:	89ab      	ldrh	r3, [r5, #12]
 8011efc:	065b      	lsls	r3, r3, #25
 8011efe:	f53f af2d 	bmi.w	8011d5c <_svfiprintf_r+0x28>
 8011f02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f04:	e72c      	b.n	8011d60 <_svfiprintf_r+0x2c>
 8011f06:	ab03      	add	r3, sp, #12
 8011f08:	9300      	str	r3, [sp, #0]
 8011f0a:	462a      	mov	r2, r5
 8011f0c:	4b05      	ldr	r3, [pc, #20]	@ (8011f24 <_svfiprintf_r+0x1f0>)
 8011f0e:	a904      	add	r1, sp, #16
 8011f10:	4638      	mov	r0, r7
 8011f12:	f7fc febb 	bl	800ec8c <_printf_i>
 8011f16:	e7ed      	b.n	8011ef4 <_svfiprintf_r+0x1c0>
 8011f18:	080141d1 	.word	0x080141d1
 8011f1c:	080141db 	.word	0x080141db
 8011f20:	0800e75d 	.word	0x0800e75d
 8011f24:	08011c7d 	.word	0x08011c7d
 8011f28:	080141d7 	.word	0x080141d7

08011f2c <__sfputc_r>:
 8011f2c:	6893      	ldr	r3, [r2, #8]
 8011f2e:	3b01      	subs	r3, #1
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	b410      	push	{r4}
 8011f34:	6093      	str	r3, [r2, #8]
 8011f36:	da08      	bge.n	8011f4a <__sfputc_r+0x1e>
 8011f38:	6994      	ldr	r4, [r2, #24]
 8011f3a:	42a3      	cmp	r3, r4
 8011f3c:	db01      	blt.n	8011f42 <__sfputc_r+0x16>
 8011f3e:	290a      	cmp	r1, #10
 8011f40:	d103      	bne.n	8011f4a <__sfputc_r+0x1e>
 8011f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f46:	f7fd bb9e 	b.w	800f686 <__swbuf_r>
 8011f4a:	6813      	ldr	r3, [r2, #0]
 8011f4c:	1c58      	adds	r0, r3, #1
 8011f4e:	6010      	str	r0, [r2, #0]
 8011f50:	7019      	strb	r1, [r3, #0]
 8011f52:	4608      	mov	r0, r1
 8011f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f58:	4770      	bx	lr

08011f5a <__sfputs_r>:
 8011f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f5c:	4606      	mov	r6, r0
 8011f5e:	460f      	mov	r7, r1
 8011f60:	4614      	mov	r4, r2
 8011f62:	18d5      	adds	r5, r2, r3
 8011f64:	42ac      	cmp	r4, r5
 8011f66:	d101      	bne.n	8011f6c <__sfputs_r+0x12>
 8011f68:	2000      	movs	r0, #0
 8011f6a:	e007      	b.n	8011f7c <__sfputs_r+0x22>
 8011f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f70:	463a      	mov	r2, r7
 8011f72:	4630      	mov	r0, r6
 8011f74:	f7ff ffda 	bl	8011f2c <__sfputc_r>
 8011f78:	1c43      	adds	r3, r0, #1
 8011f7a:	d1f3      	bne.n	8011f64 <__sfputs_r+0xa>
 8011f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f80 <_vfiprintf_r>:
 8011f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f84:	460d      	mov	r5, r1
 8011f86:	b09d      	sub	sp, #116	@ 0x74
 8011f88:	4614      	mov	r4, r2
 8011f8a:	4698      	mov	r8, r3
 8011f8c:	4606      	mov	r6, r0
 8011f8e:	b118      	cbz	r0, 8011f98 <_vfiprintf_r+0x18>
 8011f90:	6a03      	ldr	r3, [r0, #32]
 8011f92:	b90b      	cbnz	r3, 8011f98 <_vfiprintf_r+0x18>
 8011f94:	f7fd fa3a 	bl	800f40c <__sinit>
 8011f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f9a:	07d9      	lsls	r1, r3, #31
 8011f9c:	d405      	bmi.n	8011faa <_vfiprintf_r+0x2a>
 8011f9e:	89ab      	ldrh	r3, [r5, #12]
 8011fa0:	059a      	lsls	r2, r3, #22
 8011fa2:	d402      	bmi.n	8011faa <_vfiprintf_r+0x2a>
 8011fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011fa6:	f7fd fc90 	bl	800f8ca <__retarget_lock_acquire_recursive>
 8011faa:	89ab      	ldrh	r3, [r5, #12]
 8011fac:	071b      	lsls	r3, r3, #28
 8011fae:	d501      	bpl.n	8011fb4 <_vfiprintf_r+0x34>
 8011fb0:	692b      	ldr	r3, [r5, #16]
 8011fb2:	b99b      	cbnz	r3, 8011fdc <_vfiprintf_r+0x5c>
 8011fb4:	4629      	mov	r1, r5
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	f7fd fba4 	bl	800f704 <__swsetup_r>
 8011fbc:	b170      	cbz	r0, 8011fdc <_vfiprintf_r+0x5c>
 8011fbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011fc0:	07dc      	lsls	r4, r3, #31
 8011fc2:	d504      	bpl.n	8011fce <_vfiprintf_r+0x4e>
 8011fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc8:	b01d      	add	sp, #116	@ 0x74
 8011fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fce:	89ab      	ldrh	r3, [r5, #12]
 8011fd0:	0598      	lsls	r0, r3, #22
 8011fd2:	d4f7      	bmi.n	8011fc4 <_vfiprintf_r+0x44>
 8011fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011fd6:	f7fd fc79 	bl	800f8cc <__retarget_lock_release_recursive>
 8011fda:	e7f3      	b.n	8011fc4 <_vfiprintf_r+0x44>
 8011fdc:	2300      	movs	r3, #0
 8011fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fe0:	2320      	movs	r3, #32
 8011fe2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011fe6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fea:	2330      	movs	r3, #48	@ 0x30
 8011fec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801219c <_vfiprintf_r+0x21c>
 8011ff0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ff4:	f04f 0901 	mov.w	r9, #1
 8011ff8:	4623      	mov	r3, r4
 8011ffa:	469a      	mov	sl, r3
 8011ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012000:	b10a      	cbz	r2, 8012006 <_vfiprintf_r+0x86>
 8012002:	2a25      	cmp	r2, #37	@ 0x25
 8012004:	d1f9      	bne.n	8011ffa <_vfiprintf_r+0x7a>
 8012006:	ebba 0b04 	subs.w	fp, sl, r4
 801200a:	d00b      	beq.n	8012024 <_vfiprintf_r+0xa4>
 801200c:	465b      	mov	r3, fp
 801200e:	4622      	mov	r2, r4
 8012010:	4629      	mov	r1, r5
 8012012:	4630      	mov	r0, r6
 8012014:	f7ff ffa1 	bl	8011f5a <__sfputs_r>
 8012018:	3001      	adds	r0, #1
 801201a:	f000 80a7 	beq.w	801216c <_vfiprintf_r+0x1ec>
 801201e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012020:	445a      	add	r2, fp
 8012022:	9209      	str	r2, [sp, #36]	@ 0x24
 8012024:	f89a 3000 	ldrb.w	r3, [sl]
 8012028:	2b00      	cmp	r3, #0
 801202a:	f000 809f 	beq.w	801216c <_vfiprintf_r+0x1ec>
 801202e:	2300      	movs	r3, #0
 8012030:	f04f 32ff 	mov.w	r2, #4294967295
 8012034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012038:	f10a 0a01 	add.w	sl, sl, #1
 801203c:	9304      	str	r3, [sp, #16]
 801203e:	9307      	str	r3, [sp, #28]
 8012040:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012044:	931a      	str	r3, [sp, #104]	@ 0x68
 8012046:	4654      	mov	r4, sl
 8012048:	2205      	movs	r2, #5
 801204a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801204e:	4853      	ldr	r0, [pc, #332]	@ (801219c <_vfiprintf_r+0x21c>)
 8012050:	f7ee f8de 	bl	8000210 <memchr>
 8012054:	9a04      	ldr	r2, [sp, #16]
 8012056:	b9d8      	cbnz	r0, 8012090 <_vfiprintf_r+0x110>
 8012058:	06d1      	lsls	r1, r2, #27
 801205a:	bf44      	itt	mi
 801205c:	2320      	movmi	r3, #32
 801205e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012062:	0713      	lsls	r3, r2, #28
 8012064:	bf44      	itt	mi
 8012066:	232b      	movmi	r3, #43	@ 0x2b
 8012068:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801206c:	f89a 3000 	ldrb.w	r3, [sl]
 8012070:	2b2a      	cmp	r3, #42	@ 0x2a
 8012072:	d015      	beq.n	80120a0 <_vfiprintf_r+0x120>
 8012074:	9a07      	ldr	r2, [sp, #28]
 8012076:	4654      	mov	r4, sl
 8012078:	2000      	movs	r0, #0
 801207a:	f04f 0c0a 	mov.w	ip, #10
 801207e:	4621      	mov	r1, r4
 8012080:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012084:	3b30      	subs	r3, #48	@ 0x30
 8012086:	2b09      	cmp	r3, #9
 8012088:	d94b      	bls.n	8012122 <_vfiprintf_r+0x1a2>
 801208a:	b1b0      	cbz	r0, 80120ba <_vfiprintf_r+0x13a>
 801208c:	9207      	str	r2, [sp, #28]
 801208e:	e014      	b.n	80120ba <_vfiprintf_r+0x13a>
 8012090:	eba0 0308 	sub.w	r3, r0, r8
 8012094:	fa09 f303 	lsl.w	r3, r9, r3
 8012098:	4313      	orrs	r3, r2
 801209a:	9304      	str	r3, [sp, #16]
 801209c:	46a2      	mov	sl, r4
 801209e:	e7d2      	b.n	8012046 <_vfiprintf_r+0xc6>
 80120a0:	9b03      	ldr	r3, [sp, #12]
 80120a2:	1d19      	adds	r1, r3, #4
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	9103      	str	r1, [sp, #12]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	bfbb      	ittet	lt
 80120ac:	425b      	neglt	r3, r3
 80120ae:	f042 0202 	orrlt.w	r2, r2, #2
 80120b2:	9307      	strge	r3, [sp, #28]
 80120b4:	9307      	strlt	r3, [sp, #28]
 80120b6:	bfb8      	it	lt
 80120b8:	9204      	strlt	r2, [sp, #16]
 80120ba:	7823      	ldrb	r3, [r4, #0]
 80120bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80120be:	d10a      	bne.n	80120d6 <_vfiprintf_r+0x156>
 80120c0:	7863      	ldrb	r3, [r4, #1]
 80120c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80120c4:	d132      	bne.n	801212c <_vfiprintf_r+0x1ac>
 80120c6:	9b03      	ldr	r3, [sp, #12]
 80120c8:	1d1a      	adds	r2, r3, #4
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	9203      	str	r2, [sp, #12]
 80120ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80120d2:	3402      	adds	r4, #2
 80120d4:	9305      	str	r3, [sp, #20]
 80120d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80121ac <_vfiprintf_r+0x22c>
 80120da:	7821      	ldrb	r1, [r4, #0]
 80120dc:	2203      	movs	r2, #3
 80120de:	4650      	mov	r0, sl
 80120e0:	f7ee f896 	bl	8000210 <memchr>
 80120e4:	b138      	cbz	r0, 80120f6 <_vfiprintf_r+0x176>
 80120e6:	9b04      	ldr	r3, [sp, #16]
 80120e8:	eba0 000a 	sub.w	r0, r0, sl
 80120ec:	2240      	movs	r2, #64	@ 0x40
 80120ee:	4082      	lsls	r2, r0
 80120f0:	4313      	orrs	r3, r2
 80120f2:	3401      	adds	r4, #1
 80120f4:	9304      	str	r3, [sp, #16]
 80120f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120fa:	4829      	ldr	r0, [pc, #164]	@ (80121a0 <_vfiprintf_r+0x220>)
 80120fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012100:	2206      	movs	r2, #6
 8012102:	f7ee f885 	bl	8000210 <memchr>
 8012106:	2800      	cmp	r0, #0
 8012108:	d03f      	beq.n	801218a <_vfiprintf_r+0x20a>
 801210a:	4b26      	ldr	r3, [pc, #152]	@ (80121a4 <_vfiprintf_r+0x224>)
 801210c:	bb1b      	cbnz	r3, 8012156 <_vfiprintf_r+0x1d6>
 801210e:	9b03      	ldr	r3, [sp, #12]
 8012110:	3307      	adds	r3, #7
 8012112:	f023 0307 	bic.w	r3, r3, #7
 8012116:	3308      	adds	r3, #8
 8012118:	9303      	str	r3, [sp, #12]
 801211a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801211c:	443b      	add	r3, r7
 801211e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012120:	e76a      	b.n	8011ff8 <_vfiprintf_r+0x78>
 8012122:	fb0c 3202 	mla	r2, ip, r2, r3
 8012126:	460c      	mov	r4, r1
 8012128:	2001      	movs	r0, #1
 801212a:	e7a8      	b.n	801207e <_vfiprintf_r+0xfe>
 801212c:	2300      	movs	r3, #0
 801212e:	3401      	adds	r4, #1
 8012130:	9305      	str	r3, [sp, #20]
 8012132:	4619      	mov	r1, r3
 8012134:	f04f 0c0a 	mov.w	ip, #10
 8012138:	4620      	mov	r0, r4
 801213a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801213e:	3a30      	subs	r2, #48	@ 0x30
 8012140:	2a09      	cmp	r2, #9
 8012142:	d903      	bls.n	801214c <_vfiprintf_r+0x1cc>
 8012144:	2b00      	cmp	r3, #0
 8012146:	d0c6      	beq.n	80120d6 <_vfiprintf_r+0x156>
 8012148:	9105      	str	r1, [sp, #20]
 801214a:	e7c4      	b.n	80120d6 <_vfiprintf_r+0x156>
 801214c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012150:	4604      	mov	r4, r0
 8012152:	2301      	movs	r3, #1
 8012154:	e7f0      	b.n	8012138 <_vfiprintf_r+0x1b8>
 8012156:	ab03      	add	r3, sp, #12
 8012158:	9300      	str	r3, [sp, #0]
 801215a:	462a      	mov	r2, r5
 801215c:	4b12      	ldr	r3, [pc, #72]	@ (80121a8 <_vfiprintf_r+0x228>)
 801215e:	a904      	add	r1, sp, #16
 8012160:	4630      	mov	r0, r6
 8012162:	f7fc fafb 	bl	800e75c <_printf_float>
 8012166:	4607      	mov	r7, r0
 8012168:	1c78      	adds	r0, r7, #1
 801216a:	d1d6      	bne.n	801211a <_vfiprintf_r+0x19a>
 801216c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801216e:	07d9      	lsls	r1, r3, #31
 8012170:	d405      	bmi.n	801217e <_vfiprintf_r+0x1fe>
 8012172:	89ab      	ldrh	r3, [r5, #12]
 8012174:	059a      	lsls	r2, r3, #22
 8012176:	d402      	bmi.n	801217e <_vfiprintf_r+0x1fe>
 8012178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801217a:	f7fd fba7 	bl	800f8cc <__retarget_lock_release_recursive>
 801217e:	89ab      	ldrh	r3, [r5, #12]
 8012180:	065b      	lsls	r3, r3, #25
 8012182:	f53f af1f 	bmi.w	8011fc4 <_vfiprintf_r+0x44>
 8012186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012188:	e71e      	b.n	8011fc8 <_vfiprintf_r+0x48>
 801218a:	ab03      	add	r3, sp, #12
 801218c:	9300      	str	r3, [sp, #0]
 801218e:	462a      	mov	r2, r5
 8012190:	4b05      	ldr	r3, [pc, #20]	@ (80121a8 <_vfiprintf_r+0x228>)
 8012192:	a904      	add	r1, sp, #16
 8012194:	4630      	mov	r0, r6
 8012196:	f7fc fd79 	bl	800ec8c <_printf_i>
 801219a:	e7e4      	b.n	8012166 <_vfiprintf_r+0x1e6>
 801219c:	080141d1 	.word	0x080141d1
 80121a0:	080141db 	.word	0x080141db
 80121a4:	0800e75d 	.word	0x0800e75d
 80121a8:	08011f5b 	.word	0x08011f5b
 80121ac:	080141d7 	.word	0x080141d7

080121b0 <__sflush_r>:
 80121b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80121b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121b8:	0716      	lsls	r6, r2, #28
 80121ba:	4605      	mov	r5, r0
 80121bc:	460c      	mov	r4, r1
 80121be:	d454      	bmi.n	801226a <__sflush_r+0xba>
 80121c0:	684b      	ldr	r3, [r1, #4]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	dc02      	bgt.n	80121cc <__sflush_r+0x1c>
 80121c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	dd48      	ble.n	801225e <__sflush_r+0xae>
 80121cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80121ce:	2e00      	cmp	r6, #0
 80121d0:	d045      	beq.n	801225e <__sflush_r+0xae>
 80121d2:	2300      	movs	r3, #0
 80121d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80121d8:	682f      	ldr	r7, [r5, #0]
 80121da:	6a21      	ldr	r1, [r4, #32]
 80121dc:	602b      	str	r3, [r5, #0]
 80121de:	d030      	beq.n	8012242 <__sflush_r+0x92>
 80121e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80121e2:	89a3      	ldrh	r3, [r4, #12]
 80121e4:	0759      	lsls	r1, r3, #29
 80121e6:	d505      	bpl.n	80121f4 <__sflush_r+0x44>
 80121e8:	6863      	ldr	r3, [r4, #4]
 80121ea:	1ad2      	subs	r2, r2, r3
 80121ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80121ee:	b10b      	cbz	r3, 80121f4 <__sflush_r+0x44>
 80121f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80121f2:	1ad2      	subs	r2, r2, r3
 80121f4:	2300      	movs	r3, #0
 80121f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80121f8:	6a21      	ldr	r1, [r4, #32]
 80121fa:	4628      	mov	r0, r5
 80121fc:	47b0      	blx	r6
 80121fe:	1c43      	adds	r3, r0, #1
 8012200:	89a3      	ldrh	r3, [r4, #12]
 8012202:	d106      	bne.n	8012212 <__sflush_r+0x62>
 8012204:	6829      	ldr	r1, [r5, #0]
 8012206:	291d      	cmp	r1, #29
 8012208:	d82b      	bhi.n	8012262 <__sflush_r+0xb2>
 801220a:	4a2a      	ldr	r2, [pc, #168]	@ (80122b4 <__sflush_r+0x104>)
 801220c:	410a      	asrs	r2, r1
 801220e:	07d6      	lsls	r6, r2, #31
 8012210:	d427      	bmi.n	8012262 <__sflush_r+0xb2>
 8012212:	2200      	movs	r2, #0
 8012214:	6062      	str	r2, [r4, #4]
 8012216:	04d9      	lsls	r1, r3, #19
 8012218:	6922      	ldr	r2, [r4, #16]
 801221a:	6022      	str	r2, [r4, #0]
 801221c:	d504      	bpl.n	8012228 <__sflush_r+0x78>
 801221e:	1c42      	adds	r2, r0, #1
 8012220:	d101      	bne.n	8012226 <__sflush_r+0x76>
 8012222:	682b      	ldr	r3, [r5, #0]
 8012224:	b903      	cbnz	r3, 8012228 <__sflush_r+0x78>
 8012226:	6560      	str	r0, [r4, #84]	@ 0x54
 8012228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801222a:	602f      	str	r7, [r5, #0]
 801222c:	b1b9      	cbz	r1, 801225e <__sflush_r+0xae>
 801222e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012232:	4299      	cmp	r1, r3
 8012234:	d002      	beq.n	801223c <__sflush_r+0x8c>
 8012236:	4628      	mov	r0, r5
 8012238:	f7fe f99e 	bl	8010578 <_free_r>
 801223c:	2300      	movs	r3, #0
 801223e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012240:	e00d      	b.n	801225e <__sflush_r+0xae>
 8012242:	2301      	movs	r3, #1
 8012244:	4628      	mov	r0, r5
 8012246:	47b0      	blx	r6
 8012248:	4602      	mov	r2, r0
 801224a:	1c50      	adds	r0, r2, #1
 801224c:	d1c9      	bne.n	80121e2 <__sflush_r+0x32>
 801224e:	682b      	ldr	r3, [r5, #0]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d0c6      	beq.n	80121e2 <__sflush_r+0x32>
 8012254:	2b1d      	cmp	r3, #29
 8012256:	d001      	beq.n	801225c <__sflush_r+0xac>
 8012258:	2b16      	cmp	r3, #22
 801225a:	d11e      	bne.n	801229a <__sflush_r+0xea>
 801225c:	602f      	str	r7, [r5, #0]
 801225e:	2000      	movs	r0, #0
 8012260:	e022      	b.n	80122a8 <__sflush_r+0xf8>
 8012262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012266:	b21b      	sxth	r3, r3
 8012268:	e01b      	b.n	80122a2 <__sflush_r+0xf2>
 801226a:	690f      	ldr	r7, [r1, #16]
 801226c:	2f00      	cmp	r7, #0
 801226e:	d0f6      	beq.n	801225e <__sflush_r+0xae>
 8012270:	0793      	lsls	r3, r2, #30
 8012272:	680e      	ldr	r6, [r1, #0]
 8012274:	bf08      	it	eq
 8012276:	694b      	ldreq	r3, [r1, #20]
 8012278:	600f      	str	r7, [r1, #0]
 801227a:	bf18      	it	ne
 801227c:	2300      	movne	r3, #0
 801227e:	eba6 0807 	sub.w	r8, r6, r7
 8012282:	608b      	str	r3, [r1, #8]
 8012284:	f1b8 0f00 	cmp.w	r8, #0
 8012288:	dde9      	ble.n	801225e <__sflush_r+0xae>
 801228a:	6a21      	ldr	r1, [r4, #32]
 801228c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801228e:	4643      	mov	r3, r8
 8012290:	463a      	mov	r2, r7
 8012292:	4628      	mov	r0, r5
 8012294:	47b0      	blx	r6
 8012296:	2800      	cmp	r0, #0
 8012298:	dc08      	bgt.n	80122ac <__sflush_r+0xfc>
 801229a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801229e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122a2:	81a3      	strh	r3, [r4, #12]
 80122a4:	f04f 30ff 	mov.w	r0, #4294967295
 80122a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122ac:	4407      	add	r7, r0
 80122ae:	eba8 0800 	sub.w	r8, r8, r0
 80122b2:	e7e7      	b.n	8012284 <__sflush_r+0xd4>
 80122b4:	dfbffffe 	.word	0xdfbffffe

080122b8 <_fflush_r>:
 80122b8:	b538      	push	{r3, r4, r5, lr}
 80122ba:	690b      	ldr	r3, [r1, #16]
 80122bc:	4605      	mov	r5, r0
 80122be:	460c      	mov	r4, r1
 80122c0:	b913      	cbnz	r3, 80122c8 <_fflush_r+0x10>
 80122c2:	2500      	movs	r5, #0
 80122c4:	4628      	mov	r0, r5
 80122c6:	bd38      	pop	{r3, r4, r5, pc}
 80122c8:	b118      	cbz	r0, 80122d2 <_fflush_r+0x1a>
 80122ca:	6a03      	ldr	r3, [r0, #32]
 80122cc:	b90b      	cbnz	r3, 80122d2 <_fflush_r+0x1a>
 80122ce:	f7fd f89d 	bl	800f40c <__sinit>
 80122d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d0f3      	beq.n	80122c2 <_fflush_r+0xa>
 80122da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80122dc:	07d0      	lsls	r0, r2, #31
 80122de:	d404      	bmi.n	80122ea <_fflush_r+0x32>
 80122e0:	0599      	lsls	r1, r3, #22
 80122e2:	d402      	bmi.n	80122ea <_fflush_r+0x32>
 80122e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122e6:	f7fd faf0 	bl	800f8ca <__retarget_lock_acquire_recursive>
 80122ea:	4628      	mov	r0, r5
 80122ec:	4621      	mov	r1, r4
 80122ee:	f7ff ff5f 	bl	80121b0 <__sflush_r>
 80122f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80122f4:	07da      	lsls	r2, r3, #31
 80122f6:	4605      	mov	r5, r0
 80122f8:	d4e4      	bmi.n	80122c4 <_fflush_r+0xc>
 80122fa:	89a3      	ldrh	r3, [r4, #12]
 80122fc:	059b      	lsls	r3, r3, #22
 80122fe:	d4e1      	bmi.n	80122c4 <_fflush_r+0xc>
 8012300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012302:	f7fd fae3 	bl	800f8cc <__retarget_lock_release_recursive>
 8012306:	e7dd      	b.n	80122c4 <_fflush_r+0xc>

08012308 <__swhatbuf_r>:
 8012308:	b570      	push	{r4, r5, r6, lr}
 801230a:	460c      	mov	r4, r1
 801230c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012310:	2900      	cmp	r1, #0
 8012312:	b096      	sub	sp, #88	@ 0x58
 8012314:	4615      	mov	r5, r2
 8012316:	461e      	mov	r6, r3
 8012318:	da0d      	bge.n	8012336 <__swhatbuf_r+0x2e>
 801231a:	89a3      	ldrh	r3, [r4, #12]
 801231c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012320:	f04f 0100 	mov.w	r1, #0
 8012324:	bf14      	ite	ne
 8012326:	2340      	movne	r3, #64	@ 0x40
 8012328:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801232c:	2000      	movs	r0, #0
 801232e:	6031      	str	r1, [r6, #0]
 8012330:	602b      	str	r3, [r5, #0]
 8012332:	b016      	add	sp, #88	@ 0x58
 8012334:	bd70      	pop	{r4, r5, r6, pc}
 8012336:	466a      	mov	r2, sp
 8012338:	f000 f874 	bl	8012424 <_fstat_r>
 801233c:	2800      	cmp	r0, #0
 801233e:	dbec      	blt.n	801231a <__swhatbuf_r+0x12>
 8012340:	9901      	ldr	r1, [sp, #4]
 8012342:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012346:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801234a:	4259      	negs	r1, r3
 801234c:	4159      	adcs	r1, r3
 801234e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012352:	e7eb      	b.n	801232c <__swhatbuf_r+0x24>

08012354 <__smakebuf_r>:
 8012354:	898b      	ldrh	r3, [r1, #12]
 8012356:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012358:	079d      	lsls	r5, r3, #30
 801235a:	4606      	mov	r6, r0
 801235c:	460c      	mov	r4, r1
 801235e:	d507      	bpl.n	8012370 <__smakebuf_r+0x1c>
 8012360:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012364:	6023      	str	r3, [r4, #0]
 8012366:	6123      	str	r3, [r4, #16]
 8012368:	2301      	movs	r3, #1
 801236a:	6163      	str	r3, [r4, #20]
 801236c:	b003      	add	sp, #12
 801236e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012370:	ab01      	add	r3, sp, #4
 8012372:	466a      	mov	r2, sp
 8012374:	f7ff ffc8 	bl	8012308 <__swhatbuf_r>
 8012378:	9f00      	ldr	r7, [sp, #0]
 801237a:	4605      	mov	r5, r0
 801237c:	4639      	mov	r1, r7
 801237e:	4630      	mov	r0, r6
 8012380:	f7fc f8c0 	bl	800e504 <_malloc_r>
 8012384:	b948      	cbnz	r0, 801239a <__smakebuf_r+0x46>
 8012386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801238a:	059a      	lsls	r2, r3, #22
 801238c:	d4ee      	bmi.n	801236c <__smakebuf_r+0x18>
 801238e:	f023 0303 	bic.w	r3, r3, #3
 8012392:	f043 0302 	orr.w	r3, r3, #2
 8012396:	81a3      	strh	r3, [r4, #12]
 8012398:	e7e2      	b.n	8012360 <__smakebuf_r+0xc>
 801239a:	89a3      	ldrh	r3, [r4, #12]
 801239c:	6020      	str	r0, [r4, #0]
 801239e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123a2:	81a3      	strh	r3, [r4, #12]
 80123a4:	9b01      	ldr	r3, [sp, #4]
 80123a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80123aa:	b15b      	cbz	r3, 80123c4 <__smakebuf_r+0x70>
 80123ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123b0:	4630      	mov	r0, r6
 80123b2:	f000 f849 	bl	8012448 <_isatty_r>
 80123b6:	b128      	cbz	r0, 80123c4 <__smakebuf_r+0x70>
 80123b8:	89a3      	ldrh	r3, [r4, #12]
 80123ba:	f023 0303 	bic.w	r3, r3, #3
 80123be:	f043 0301 	orr.w	r3, r3, #1
 80123c2:	81a3      	strh	r3, [r4, #12]
 80123c4:	89a3      	ldrh	r3, [r4, #12]
 80123c6:	431d      	orrs	r5, r3
 80123c8:	81a5      	strh	r5, [r4, #12]
 80123ca:	e7cf      	b.n	801236c <__smakebuf_r+0x18>

080123cc <memmove>:
 80123cc:	4288      	cmp	r0, r1
 80123ce:	b510      	push	{r4, lr}
 80123d0:	eb01 0402 	add.w	r4, r1, r2
 80123d4:	d902      	bls.n	80123dc <memmove+0x10>
 80123d6:	4284      	cmp	r4, r0
 80123d8:	4623      	mov	r3, r4
 80123da:	d807      	bhi.n	80123ec <memmove+0x20>
 80123dc:	1e43      	subs	r3, r0, #1
 80123de:	42a1      	cmp	r1, r4
 80123e0:	d008      	beq.n	80123f4 <memmove+0x28>
 80123e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80123e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80123ea:	e7f8      	b.n	80123de <memmove+0x12>
 80123ec:	4402      	add	r2, r0
 80123ee:	4601      	mov	r1, r0
 80123f0:	428a      	cmp	r2, r1
 80123f2:	d100      	bne.n	80123f6 <memmove+0x2a>
 80123f4:	bd10      	pop	{r4, pc}
 80123f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80123fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80123fe:	e7f7      	b.n	80123f0 <memmove+0x24>

08012400 <strncmp>:
 8012400:	b510      	push	{r4, lr}
 8012402:	b16a      	cbz	r2, 8012420 <strncmp+0x20>
 8012404:	3901      	subs	r1, #1
 8012406:	1884      	adds	r4, r0, r2
 8012408:	f810 2b01 	ldrb.w	r2, [r0], #1
 801240c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012410:	429a      	cmp	r2, r3
 8012412:	d103      	bne.n	801241c <strncmp+0x1c>
 8012414:	42a0      	cmp	r0, r4
 8012416:	d001      	beq.n	801241c <strncmp+0x1c>
 8012418:	2a00      	cmp	r2, #0
 801241a:	d1f5      	bne.n	8012408 <strncmp+0x8>
 801241c:	1ad0      	subs	r0, r2, r3
 801241e:	bd10      	pop	{r4, pc}
 8012420:	4610      	mov	r0, r2
 8012422:	e7fc      	b.n	801241e <strncmp+0x1e>

08012424 <_fstat_r>:
 8012424:	b538      	push	{r3, r4, r5, lr}
 8012426:	4d07      	ldr	r5, [pc, #28]	@ (8012444 <_fstat_r+0x20>)
 8012428:	2300      	movs	r3, #0
 801242a:	4604      	mov	r4, r0
 801242c:	4608      	mov	r0, r1
 801242e:	4611      	mov	r1, r2
 8012430:	602b      	str	r3, [r5, #0]
 8012432:	f7f2 f859 	bl	80044e8 <_fstat>
 8012436:	1c43      	adds	r3, r0, #1
 8012438:	d102      	bne.n	8012440 <_fstat_r+0x1c>
 801243a:	682b      	ldr	r3, [r5, #0]
 801243c:	b103      	cbz	r3, 8012440 <_fstat_r+0x1c>
 801243e:	6023      	str	r3, [r4, #0]
 8012440:	bd38      	pop	{r3, r4, r5, pc}
 8012442:	bf00      	nop
 8012444:	200033d0 	.word	0x200033d0

08012448 <_isatty_r>:
 8012448:	b538      	push	{r3, r4, r5, lr}
 801244a:	4d06      	ldr	r5, [pc, #24]	@ (8012464 <_isatty_r+0x1c>)
 801244c:	2300      	movs	r3, #0
 801244e:	4604      	mov	r4, r0
 8012450:	4608      	mov	r0, r1
 8012452:	602b      	str	r3, [r5, #0]
 8012454:	f7f2 f858 	bl	8004508 <_isatty>
 8012458:	1c43      	adds	r3, r0, #1
 801245a:	d102      	bne.n	8012462 <_isatty_r+0x1a>
 801245c:	682b      	ldr	r3, [r5, #0]
 801245e:	b103      	cbz	r3, 8012462 <_isatty_r+0x1a>
 8012460:	6023      	str	r3, [r4, #0]
 8012462:	bd38      	pop	{r3, r4, r5, pc}
 8012464:	200033d0 	.word	0x200033d0

08012468 <memcpy>:
 8012468:	440a      	add	r2, r1
 801246a:	4291      	cmp	r1, r2
 801246c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012470:	d100      	bne.n	8012474 <memcpy+0xc>
 8012472:	4770      	bx	lr
 8012474:	b510      	push	{r4, lr}
 8012476:	f811 4b01 	ldrb.w	r4, [r1], #1
 801247a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801247e:	4291      	cmp	r1, r2
 8012480:	d1f9      	bne.n	8012476 <memcpy+0xe>
 8012482:	bd10      	pop	{r4, pc}
 8012484:	0000      	movs	r0, r0
	...

08012488 <nan>:
 8012488:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012490 <nan+0x8>
 801248c:	4770      	bx	lr
 801248e:	bf00      	nop
 8012490:	00000000 	.word	0x00000000
 8012494:	7ff80000 	.word	0x7ff80000

08012498 <__assert_func>:
 8012498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801249a:	4614      	mov	r4, r2
 801249c:	461a      	mov	r2, r3
 801249e:	4b09      	ldr	r3, [pc, #36]	@ (80124c4 <__assert_func+0x2c>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	4605      	mov	r5, r0
 80124a4:	68d8      	ldr	r0, [r3, #12]
 80124a6:	b954      	cbnz	r4, 80124be <__assert_func+0x26>
 80124a8:	4b07      	ldr	r3, [pc, #28]	@ (80124c8 <__assert_func+0x30>)
 80124aa:	461c      	mov	r4, r3
 80124ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80124b0:	9100      	str	r1, [sp, #0]
 80124b2:	462b      	mov	r3, r5
 80124b4:	4905      	ldr	r1, [pc, #20]	@ (80124cc <__assert_func+0x34>)
 80124b6:	f000 fba7 	bl	8012c08 <fiprintf>
 80124ba:	f000 fbb7 	bl	8012c2c <abort>
 80124be:	4b04      	ldr	r3, [pc, #16]	@ (80124d0 <__assert_func+0x38>)
 80124c0:	e7f4      	b.n	80124ac <__assert_func+0x14>
 80124c2:	bf00      	nop
 80124c4:	20000084 	.word	0x20000084
 80124c8:	08014225 	.word	0x08014225
 80124cc:	080141f7 	.word	0x080141f7
 80124d0:	080141ea 	.word	0x080141ea

080124d4 <_calloc_r>:
 80124d4:	b570      	push	{r4, r5, r6, lr}
 80124d6:	fba1 5402 	umull	r5, r4, r1, r2
 80124da:	b93c      	cbnz	r4, 80124ec <_calloc_r+0x18>
 80124dc:	4629      	mov	r1, r5
 80124de:	f7fc f811 	bl	800e504 <_malloc_r>
 80124e2:	4606      	mov	r6, r0
 80124e4:	b928      	cbnz	r0, 80124f2 <_calloc_r+0x1e>
 80124e6:	2600      	movs	r6, #0
 80124e8:	4630      	mov	r0, r6
 80124ea:	bd70      	pop	{r4, r5, r6, pc}
 80124ec:	220c      	movs	r2, #12
 80124ee:	6002      	str	r2, [r0, #0]
 80124f0:	e7f9      	b.n	80124e6 <_calloc_r+0x12>
 80124f2:	462a      	mov	r2, r5
 80124f4:	4621      	mov	r1, r4
 80124f6:	f7fd f95b 	bl	800f7b0 <memset>
 80124fa:	e7f5      	b.n	80124e8 <_calloc_r+0x14>

080124fc <rshift>:
 80124fc:	6903      	ldr	r3, [r0, #16]
 80124fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012502:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012506:	ea4f 1261 	mov.w	r2, r1, asr #5
 801250a:	f100 0414 	add.w	r4, r0, #20
 801250e:	dd45      	ble.n	801259c <rshift+0xa0>
 8012510:	f011 011f 	ands.w	r1, r1, #31
 8012514:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012518:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801251c:	d10c      	bne.n	8012538 <rshift+0x3c>
 801251e:	f100 0710 	add.w	r7, r0, #16
 8012522:	4629      	mov	r1, r5
 8012524:	42b1      	cmp	r1, r6
 8012526:	d334      	bcc.n	8012592 <rshift+0x96>
 8012528:	1a9b      	subs	r3, r3, r2
 801252a:	009b      	lsls	r3, r3, #2
 801252c:	1eea      	subs	r2, r5, #3
 801252e:	4296      	cmp	r6, r2
 8012530:	bf38      	it	cc
 8012532:	2300      	movcc	r3, #0
 8012534:	4423      	add	r3, r4
 8012536:	e015      	b.n	8012564 <rshift+0x68>
 8012538:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801253c:	f1c1 0820 	rsb	r8, r1, #32
 8012540:	40cf      	lsrs	r7, r1
 8012542:	f105 0e04 	add.w	lr, r5, #4
 8012546:	46a1      	mov	r9, r4
 8012548:	4576      	cmp	r6, lr
 801254a:	46f4      	mov	ip, lr
 801254c:	d815      	bhi.n	801257a <rshift+0x7e>
 801254e:	1a9a      	subs	r2, r3, r2
 8012550:	0092      	lsls	r2, r2, #2
 8012552:	3a04      	subs	r2, #4
 8012554:	3501      	adds	r5, #1
 8012556:	42ae      	cmp	r6, r5
 8012558:	bf38      	it	cc
 801255a:	2200      	movcc	r2, #0
 801255c:	18a3      	adds	r3, r4, r2
 801255e:	50a7      	str	r7, [r4, r2]
 8012560:	b107      	cbz	r7, 8012564 <rshift+0x68>
 8012562:	3304      	adds	r3, #4
 8012564:	1b1a      	subs	r2, r3, r4
 8012566:	42a3      	cmp	r3, r4
 8012568:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801256c:	bf08      	it	eq
 801256e:	2300      	moveq	r3, #0
 8012570:	6102      	str	r2, [r0, #16]
 8012572:	bf08      	it	eq
 8012574:	6143      	streq	r3, [r0, #20]
 8012576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801257a:	f8dc c000 	ldr.w	ip, [ip]
 801257e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012582:	ea4c 0707 	orr.w	r7, ip, r7
 8012586:	f849 7b04 	str.w	r7, [r9], #4
 801258a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801258e:	40cf      	lsrs	r7, r1
 8012590:	e7da      	b.n	8012548 <rshift+0x4c>
 8012592:	f851 cb04 	ldr.w	ip, [r1], #4
 8012596:	f847 cf04 	str.w	ip, [r7, #4]!
 801259a:	e7c3      	b.n	8012524 <rshift+0x28>
 801259c:	4623      	mov	r3, r4
 801259e:	e7e1      	b.n	8012564 <rshift+0x68>

080125a0 <__hexdig_fun>:
 80125a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80125a4:	2b09      	cmp	r3, #9
 80125a6:	d802      	bhi.n	80125ae <__hexdig_fun+0xe>
 80125a8:	3820      	subs	r0, #32
 80125aa:	b2c0      	uxtb	r0, r0
 80125ac:	4770      	bx	lr
 80125ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80125b2:	2b05      	cmp	r3, #5
 80125b4:	d801      	bhi.n	80125ba <__hexdig_fun+0x1a>
 80125b6:	3847      	subs	r0, #71	@ 0x47
 80125b8:	e7f7      	b.n	80125aa <__hexdig_fun+0xa>
 80125ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80125be:	2b05      	cmp	r3, #5
 80125c0:	d801      	bhi.n	80125c6 <__hexdig_fun+0x26>
 80125c2:	3827      	subs	r0, #39	@ 0x27
 80125c4:	e7f1      	b.n	80125aa <__hexdig_fun+0xa>
 80125c6:	2000      	movs	r0, #0
 80125c8:	4770      	bx	lr
	...

080125cc <__gethex>:
 80125cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125d0:	b085      	sub	sp, #20
 80125d2:	468a      	mov	sl, r1
 80125d4:	9302      	str	r3, [sp, #8]
 80125d6:	680b      	ldr	r3, [r1, #0]
 80125d8:	9001      	str	r0, [sp, #4]
 80125da:	4690      	mov	r8, r2
 80125dc:	1c9c      	adds	r4, r3, #2
 80125de:	46a1      	mov	r9, r4
 80125e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80125e4:	2830      	cmp	r0, #48	@ 0x30
 80125e6:	d0fa      	beq.n	80125de <__gethex+0x12>
 80125e8:	eba9 0303 	sub.w	r3, r9, r3
 80125ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80125f0:	f7ff ffd6 	bl	80125a0 <__hexdig_fun>
 80125f4:	4605      	mov	r5, r0
 80125f6:	2800      	cmp	r0, #0
 80125f8:	d168      	bne.n	80126cc <__gethex+0x100>
 80125fa:	49a0      	ldr	r1, [pc, #640]	@ (801287c <__gethex+0x2b0>)
 80125fc:	2201      	movs	r2, #1
 80125fe:	4648      	mov	r0, r9
 8012600:	f7ff fefe 	bl	8012400 <strncmp>
 8012604:	4607      	mov	r7, r0
 8012606:	2800      	cmp	r0, #0
 8012608:	d167      	bne.n	80126da <__gethex+0x10e>
 801260a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801260e:	4626      	mov	r6, r4
 8012610:	f7ff ffc6 	bl	80125a0 <__hexdig_fun>
 8012614:	2800      	cmp	r0, #0
 8012616:	d062      	beq.n	80126de <__gethex+0x112>
 8012618:	4623      	mov	r3, r4
 801261a:	7818      	ldrb	r0, [r3, #0]
 801261c:	2830      	cmp	r0, #48	@ 0x30
 801261e:	4699      	mov	r9, r3
 8012620:	f103 0301 	add.w	r3, r3, #1
 8012624:	d0f9      	beq.n	801261a <__gethex+0x4e>
 8012626:	f7ff ffbb 	bl	80125a0 <__hexdig_fun>
 801262a:	fab0 f580 	clz	r5, r0
 801262e:	096d      	lsrs	r5, r5, #5
 8012630:	f04f 0b01 	mov.w	fp, #1
 8012634:	464a      	mov	r2, r9
 8012636:	4616      	mov	r6, r2
 8012638:	3201      	adds	r2, #1
 801263a:	7830      	ldrb	r0, [r6, #0]
 801263c:	f7ff ffb0 	bl	80125a0 <__hexdig_fun>
 8012640:	2800      	cmp	r0, #0
 8012642:	d1f8      	bne.n	8012636 <__gethex+0x6a>
 8012644:	498d      	ldr	r1, [pc, #564]	@ (801287c <__gethex+0x2b0>)
 8012646:	2201      	movs	r2, #1
 8012648:	4630      	mov	r0, r6
 801264a:	f7ff fed9 	bl	8012400 <strncmp>
 801264e:	2800      	cmp	r0, #0
 8012650:	d13f      	bne.n	80126d2 <__gethex+0x106>
 8012652:	b944      	cbnz	r4, 8012666 <__gethex+0x9a>
 8012654:	1c74      	adds	r4, r6, #1
 8012656:	4622      	mov	r2, r4
 8012658:	4616      	mov	r6, r2
 801265a:	3201      	adds	r2, #1
 801265c:	7830      	ldrb	r0, [r6, #0]
 801265e:	f7ff ff9f 	bl	80125a0 <__hexdig_fun>
 8012662:	2800      	cmp	r0, #0
 8012664:	d1f8      	bne.n	8012658 <__gethex+0x8c>
 8012666:	1ba4      	subs	r4, r4, r6
 8012668:	00a7      	lsls	r7, r4, #2
 801266a:	7833      	ldrb	r3, [r6, #0]
 801266c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012670:	2b50      	cmp	r3, #80	@ 0x50
 8012672:	d13e      	bne.n	80126f2 <__gethex+0x126>
 8012674:	7873      	ldrb	r3, [r6, #1]
 8012676:	2b2b      	cmp	r3, #43	@ 0x2b
 8012678:	d033      	beq.n	80126e2 <__gethex+0x116>
 801267a:	2b2d      	cmp	r3, #45	@ 0x2d
 801267c:	d034      	beq.n	80126e8 <__gethex+0x11c>
 801267e:	1c71      	adds	r1, r6, #1
 8012680:	2400      	movs	r4, #0
 8012682:	7808      	ldrb	r0, [r1, #0]
 8012684:	f7ff ff8c 	bl	80125a0 <__hexdig_fun>
 8012688:	1e43      	subs	r3, r0, #1
 801268a:	b2db      	uxtb	r3, r3
 801268c:	2b18      	cmp	r3, #24
 801268e:	d830      	bhi.n	80126f2 <__gethex+0x126>
 8012690:	f1a0 0210 	sub.w	r2, r0, #16
 8012694:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012698:	f7ff ff82 	bl	80125a0 <__hexdig_fun>
 801269c:	f100 3cff 	add.w	ip, r0, #4294967295
 80126a0:	fa5f fc8c 	uxtb.w	ip, ip
 80126a4:	f1bc 0f18 	cmp.w	ip, #24
 80126a8:	f04f 030a 	mov.w	r3, #10
 80126ac:	d91e      	bls.n	80126ec <__gethex+0x120>
 80126ae:	b104      	cbz	r4, 80126b2 <__gethex+0xe6>
 80126b0:	4252      	negs	r2, r2
 80126b2:	4417      	add	r7, r2
 80126b4:	f8ca 1000 	str.w	r1, [sl]
 80126b8:	b1ed      	cbz	r5, 80126f6 <__gethex+0x12a>
 80126ba:	f1bb 0f00 	cmp.w	fp, #0
 80126be:	bf0c      	ite	eq
 80126c0:	2506      	moveq	r5, #6
 80126c2:	2500      	movne	r5, #0
 80126c4:	4628      	mov	r0, r5
 80126c6:	b005      	add	sp, #20
 80126c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126cc:	2500      	movs	r5, #0
 80126ce:	462c      	mov	r4, r5
 80126d0:	e7b0      	b.n	8012634 <__gethex+0x68>
 80126d2:	2c00      	cmp	r4, #0
 80126d4:	d1c7      	bne.n	8012666 <__gethex+0x9a>
 80126d6:	4627      	mov	r7, r4
 80126d8:	e7c7      	b.n	801266a <__gethex+0x9e>
 80126da:	464e      	mov	r6, r9
 80126dc:	462f      	mov	r7, r5
 80126de:	2501      	movs	r5, #1
 80126e0:	e7c3      	b.n	801266a <__gethex+0x9e>
 80126e2:	2400      	movs	r4, #0
 80126e4:	1cb1      	adds	r1, r6, #2
 80126e6:	e7cc      	b.n	8012682 <__gethex+0xb6>
 80126e8:	2401      	movs	r4, #1
 80126ea:	e7fb      	b.n	80126e4 <__gethex+0x118>
 80126ec:	fb03 0002 	mla	r0, r3, r2, r0
 80126f0:	e7ce      	b.n	8012690 <__gethex+0xc4>
 80126f2:	4631      	mov	r1, r6
 80126f4:	e7de      	b.n	80126b4 <__gethex+0xe8>
 80126f6:	eba6 0309 	sub.w	r3, r6, r9
 80126fa:	3b01      	subs	r3, #1
 80126fc:	4629      	mov	r1, r5
 80126fe:	2b07      	cmp	r3, #7
 8012700:	dc0a      	bgt.n	8012718 <__gethex+0x14c>
 8012702:	9801      	ldr	r0, [sp, #4]
 8012704:	f7fd ff82 	bl	801060c <_Balloc>
 8012708:	4604      	mov	r4, r0
 801270a:	b940      	cbnz	r0, 801271e <__gethex+0x152>
 801270c:	4b5c      	ldr	r3, [pc, #368]	@ (8012880 <__gethex+0x2b4>)
 801270e:	4602      	mov	r2, r0
 8012710:	21e4      	movs	r1, #228	@ 0xe4
 8012712:	485c      	ldr	r0, [pc, #368]	@ (8012884 <__gethex+0x2b8>)
 8012714:	f7ff fec0 	bl	8012498 <__assert_func>
 8012718:	3101      	adds	r1, #1
 801271a:	105b      	asrs	r3, r3, #1
 801271c:	e7ef      	b.n	80126fe <__gethex+0x132>
 801271e:	f100 0a14 	add.w	sl, r0, #20
 8012722:	2300      	movs	r3, #0
 8012724:	4655      	mov	r5, sl
 8012726:	469b      	mov	fp, r3
 8012728:	45b1      	cmp	r9, r6
 801272a:	d337      	bcc.n	801279c <__gethex+0x1d0>
 801272c:	f845 bb04 	str.w	fp, [r5], #4
 8012730:	eba5 050a 	sub.w	r5, r5, sl
 8012734:	10ad      	asrs	r5, r5, #2
 8012736:	6125      	str	r5, [r4, #16]
 8012738:	4658      	mov	r0, fp
 801273a:	f7fe f859 	bl	80107f0 <__hi0bits>
 801273e:	016d      	lsls	r5, r5, #5
 8012740:	f8d8 6000 	ldr.w	r6, [r8]
 8012744:	1a2d      	subs	r5, r5, r0
 8012746:	42b5      	cmp	r5, r6
 8012748:	dd54      	ble.n	80127f4 <__gethex+0x228>
 801274a:	1bad      	subs	r5, r5, r6
 801274c:	4629      	mov	r1, r5
 801274e:	4620      	mov	r0, r4
 8012750:	f7fe fbed 	bl	8010f2e <__any_on>
 8012754:	4681      	mov	r9, r0
 8012756:	b178      	cbz	r0, 8012778 <__gethex+0x1ac>
 8012758:	1e6b      	subs	r3, r5, #1
 801275a:	1159      	asrs	r1, r3, #5
 801275c:	f003 021f 	and.w	r2, r3, #31
 8012760:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012764:	f04f 0901 	mov.w	r9, #1
 8012768:	fa09 f202 	lsl.w	r2, r9, r2
 801276c:	420a      	tst	r2, r1
 801276e:	d003      	beq.n	8012778 <__gethex+0x1ac>
 8012770:	454b      	cmp	r3, r9
 8012772:	dc36      	bgt.n	80127e2 <__gethex+0x216>
 8012774:	f04f 0902 	mov.w	r9, #2
 8012778:	4629      	mov	r1, r5
 801277a:	4620      	mov	r0, r4
 801277c:	f7ff febe 	bl	80124fc <rshift>
 8012780:	442f      	add	r7, r5
 8012782:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012786:	42bb      	cmp	r3, r7
 8012788:	da42      	bge.n	8012810 <__gethex+0x244>
 801278a:	9801      	ldr	r0, [sp, #4]
 801278c:	4621      	mov	r1, r4
 801278e:	f7fd ff7d 	bl	801068c <_Bfree>
 8012792:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012794:	2300      	movs	r3, #0
 8012796:	6013      	str	r3, [r2, #0]
 8012798:	25a3      	movs	r5, #163	@ 0xa3
 801279a:	e793      	b.n	80126c4 <__gethex+0xf8>
 801279c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80127a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80127a2:	d012      	beq.n	80127ca <__gethex+0x1fe>
 80127a4:	2b20      	cmp	r3, #32
 80127a6:	d104      	bne.n	80127b2 <__gethex+0x1e6>
 80127a8:	f845 bb04 	str.w	fp, [r5], #4
 80127ac:	f04f 0b00 	mov.w	fp, #0
 80127b0:	465b      	mov	r3, fp
 80127b2:	7830      	ldrb	r0, [r6, #0]
 80127b4:	9303      	str	r3, [sp, #12]
 80127b6:	f7ff fef3 	bl	80125a0 <__hexdig_fun>
 80127ba:	9b03      	ldr	r3, [sp, #12]
 80127bc:	f000 000f 	and.w	r0, r0, #15
 80127c0:	4098      	lsls	r0, r3
 80127c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80127c6:	3304      	adds	r3, #4
 80127c8:	e7ae      	b.n	8012728 <__gethex+0x15c>
 80127ca:	45b1      	cmp	r9, r6
 80127cc:	d8ea      	bhi.n	80127a4 <__gethex+0x1d8>
 80127ce:	492b      	ldr	r1, [pc, #172]	@ (801287c <__gethex+0x2b0>)
 80127d0:	9303      	str	r3, [sp, #12]
 80127d2:	2201      	movs	r2, #1
 80127d4:	4630      	mov	r0, r6
 80127d6:	f7ff fe13 	bl	8012400 <strncmp>
 80127da:	9b03      	ldr	r3, [sp, #12]
 80127dc:	2800      	cmp	r0, #0
 80127de:	d1e1      	bne.n	80127a4 <__gethex+0x1d8>
 80127e0:	e7a2      	b.n	8012728 <__gethex+0x15c>
 80127e2:	1ea9      	subs	r1, r5, #2
 80127e4:	4620      	mov	r0, r4
 80127e6:	f7fe fba2 	bl	8010f2e <__any_on>
 80127ea:	2800      	cmp	r0, #0
 80127ec:	d0c2      	beq.n	8012774 <__gethex+0x1a8>
 80127ee:	f04f 0903 	mov.w	r9, #3
 80127f2:	e7c1      	b.n	8012778 <__gethex+0x1ac>
 80127f4:	da09      	bge.n	801280a <__gethex+0x23e>
 80127f6:	1b75      	subs	r5, r6, r5
 80127f8:	4621      	mov	r1, r4
 80127fa:	9801      	ldr	r0, [sp, #4]
 80127fc:	462a      	mov	r2, r5
 80127fe:	f7fe f95d 	bl	8010abc <__lshift>
 8012802:	1b7f      	subs	r7, r7, r5
 8012804:	4604      	mov	r4, r0
 8012806:	f100 0a14 	add.w	sl, r0, #20
 801280a:	f04f 0900 	mov.w	r9, #0
 801280e:	e7b8      	b.n	8012782 <__gethex+0x1b6>
 8012810:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012814:	42bd      	cmp	r5, r7
 8012816:	dd6f      	ble.n	80128f8 <__gethex+0x32c>
 8012818:	1bed      	subs	r5, r5, r7
 801281a:	42ae      	cmp	r6, r5
 801281c:	dc34      	bgt.n	8012888 <__gethex+0x2bc>
 801281e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012822:	2b02      	cmp	r3, #2
 8012824:	d022      	beq.n	801286c <__gethex+0x2a0>
 8012826:	2b03      	cmp	r3, #3
 8012828:	d024      	beq.n	8012874 <__gethex+0x2a8>
 801282a:	2b01      	cmp	r3, #1
 801282c:	d115      	bne.n	801285a <__gethex+0x28e>
 801282e:	42ae      	cmp	r6, r5
 8012830:	d113      	bne.n	801285a <__gethex+0x28e>
 8012832:	2e01      	cmp	r6, #1
 8012834:	d10b      	bne.n	801284e <__gethex+0x282>
 8012836:	9a02      	ldr	r2, [sp, #8]
 8012838:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801283c:	6013      	str	r3, [r2, #0]
 801283e:	2301      	movs	r3, #1
 8012840:	6123      	str	r3, [r4, #16]
 8012842:	f8ca 3000 	str.w	r3, [sl]
 8012846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012848:	2562      	movs	r5, #98	@ 0x62
 801284a:	601c      	str	r4, [r3, #0]
 801284c:	e73a      	b.n	80126c4 <__gethex+0xf8>
 801284e:	1e71      	subs	r1, r6, #1
 8012850:	4620      	mov	r0, r4
 8012852:	f7fe fb6c 	bl	8010f2e <__any_on>
 8012856:	2800      	cmp	r0, #0
 8012858:	d1ed      	bne.n	8012836 <__gethex+0x26a>
 801285a:	9801      	ldr	r0, [sp, #4]
 801285c:	4621      	mov	r1, r4
 801285e:	f7fd ff15 	bl	801068c <_Bfree>
 8012862:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012864:	2300      	movs	r3, #0
 8012866:	6013      	str	r3, [r2, #0]
 8012868:	2550      	movs	r5, #80	@ 0x50
 801286a:	e72b      	b.n	80126c4 <__gethex+0xf8>
 801286c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801286e:	2b00      	cmp	r3, #0
 8012870:	d1f3      	bne.n	801285a <__gethex+0x28e>
 8012872:	e7e0      	b.n	8012836 <__gethex+0x26a>
 8012874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012876:	2b00      	cmp	r3, #0
 8012878:	d1dd      	bne.n	8012836 <__gethex+0x26a>
 801287a:	e7ee      	b.n	801285a <__gethex+0x28e>
 801287c:	08014078 	.word	0x08014078
 8012880:	08013f0d 	.word	0x08013f0d
 8012884:	08014226 	.word	0x08014226
 8012888:	1e6f      	subs	r7, r5, #1
 801288a:	f1b9 0f00 	cmp.w	r9, #0
 801288e:	d130      	bne.n	80128f2 <__gethex+0x326>
 8012890:	b127      	cbz	r7, 801289c <__gethex+0x2d0>
 8012892:	4639      	mov	r1, r7
 8012894:	4620      	mov	r0, r4
 8012896:	f7fe fb4a 	bl	8010f2e <__any_on>
 801289a:	4681      	mov	r9, r0
 801289c:	117a      	asrs	r2, r7, #5
 801289e:	2301      	movs	r3, #1
 80128a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80128a4:	f007 071f 	and.w	r7, r7, #31
 80128a8:	40bb      	lsls	r3, r7
 80128aa:	4213      	tst	r3, r2
 80128ac:	4629      	mov	r1, r5
 80128ae:	4620      	mov	r0, r4
 80128b0:	bf18      	it	ne
 80128b2:	f049 0902 	orrne.w	r9, r9, #2
 80128b6:	f7ff fe21 	bl	80124fc <rshift>
 80128ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80128be:	1b76      	subs	r6, r6, r5
 80128c0:	2502      	movs	r5, #2
 80128c2:	f1b9 0f00 	cmp.w	r9, #0
 80128c6:	d047      	beq.n	8012958 <__gethex+0x38c>
 80128c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80128cc:	2b02      	cmp	r3, #2
 80128ce:	d015      	beq.n	80128fc <__gethex+0x330>
 80128d0:	2b03      	cmp	r3, #3
 80128d2:	d017      	beq.n	8012904 <__gethex+0x338>
 80128d4:	2b01      	cmp	r3, #1
 80128d6:	d109      	bne.n	80128ec <__gethex+0x320>
 80128d8:	f019 0f02 	tst.w	r9, #2
 80128dc:	d006      	beq.n	80128ec <__gethex+0x320>
 80128de:	f8da 3000 	ldr.w	r3, [sl]
 80128e2:	ea49 0903 	orr.w	r9, r9, r3
 80128e6:	f019 0f01 	tst.w	r9, #1
 80128ea:	d10e      	bne.n	801290a <__gethex+0x33e>
 80128ec:	f045 0510 	orr.w	r5, r5, #16
 80128f0:	e032      	b.n	8012958 <__gethex+0x38c>
 80128f2:	f04f 0901 	mov.w	r9, #1
 80128f6:	e7d1      	b.n	801289c <__gethex+0x2d0>
 80128f8:	2501      	movs	r5, #1
 80128fa:	e7e2      	b.n	80128c2 <__gethex+0x2f6>
 80128fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128fe:	f1c3 0301 	rsb	r3, r3, #1
 8012902:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012906:	2b00      	cmp	r3, #0
 8012908:	d0f0      	beq.n	80128ec <__gethex+0x320>
 801290a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801290e:	f104 0314 	add.w	r3, r4, #20
 8012912:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012916:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801291a:	f04f 0c00 	mov.w	ip, #0
 801291e:	4618      	mov	r0, r3
 8012920:	f853 2b04 	ldr.w	r2, [r3], #4
 8012924:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012928:	d01b      	beq.n	8012962 <__gethex+0x396>
 801292a:	3201      	adds	r2, #1
 801292c:	6002      	str	r2, [r0, #0]
 801292e:	2d02      	cmp	r5, #2
 8012930:	f104 0314 	add.w	r3, r4, #20
 8012934:	d13c      	bne.n	80129b0 <__gethex+0x3e4>
 8012936:	f8d8 2000 	ldr.w	r2, [r8]
 801293a:	3a01      	subs	r2, #1
 801293c:	42b2      	cmp	r2, r6
 801293e:	d109      	bne.n	8012954 <__gethex+0x388>
 8012940:	1171      	asrs	r1, r6, #5
 8012942:	2201      	movs	r2, #1
 8012944:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012948:	f006 061f 	and.w	r6, r6, #31
 801294c:	fa02 f606 	lsl.w	r6, r2, r6
 8012950:	421e      	tst	r6, r3
 8012952:	d13a      	bne.n	80129ca <__gethex+0x3fe>
 8012954:	f045 0520 	orr.w	r5, r5, #32
 8012958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801295a:	601c      	str	r4, [r3, #0]
 801295c:	9b02      	ldr	r3, [sp, #8]
 801295e:	601f      	str	r7, [r3, #0]
 8012960:	e6b0      	b.n	80126c4 <__gethex+0xf8>
 8012962:	4299      	cmp	r1, r3
 8012964:	f843 cc04 	str.w	ip, [r3, #-4]
 8012968:	d8d9      	bhi.n	801291e <__gethex+0x352>
 801296a:	68a3      	ldr	r3, [r4, #8]
 801296c:	459b      	cmp	fp, r3
 801296e:	db17      	blt.n	80129a0 <__gethex+0x3d4>
 8012970:	6861      	ldr	r1, [r4, #4]
 8012972:	9801      	ldr	r0, [sp, #4]
 8012974:	3101      	adds	r1, #1
 8012976:	f7fd fe49 	bl	801060c <_Balloc>
 801297a:	4681      	mov	r9, r0
 801297c:	b918      	cbnz	r0, 8012986 <__gethex+0x3ba>
 801297e:	4b1a      	ldr	r3, [pc, #104]	@ (80129e8 <__gethex+0x41c>)
 8012980:	4602      	mov	r2, r0
 8012982:	2184      	movs	r1, #132	@ 0x84
 8012984:	e6c5      	b.n	8012712 <__gethex+0x146>
 8012986:	6922      	ldr	r2, [r4, #16]
 8012988:	3202      	adds	r2, #2
 801298a:	f104 010c 	add.w	r1, r4, #12
 801298e:	0092      	lsls	r2, r2, #2
 8012990:	300c      	adds	r0, #12
 8012992:	f7ff fd69 	bl	8012468 <memcpy>
 8012996:	4621      	mov	r1, r4
 8012998:	9801      	ldr	r0, [sp, #4]
 801299a:	f7fd fe77 	bl	801068c <_Bfree>
 801299e:	464c      	mov	r4, r9
 80129a0:	6923      	ldr	r3, [r4, #16]
 80129a2:	1c5a      	adds	r2, r3, #1
 80129a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80129a8:	6122      	str	r2, [r4, #16]
 80129aa:	2201      	movs	r2, #1
 80129ac:	615a      	str	r2, [r3, #20]
 80129ae:	e7be      	b.n	801292e <__gethex+0x362>
 80129b0:	6922      	ldr	r2, [r4, #16]
 80129b2:	455a      	cmp	r2, fp
 80129b4:	dd0b      	ble.n	80129ce <__gethex+0x402>
 80129b6:	2101      	movs	r1, #1
 80129b8:	4620      	mov	r0, r4
 80129ba:	f7ff fd9f 	bl	80124fc <rshift>
 80129be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129c2:	3701      	adds	r7, #1
 80129c4:	42bb      	cmp	r3, r7
 80129c6:	f6ff aee0 	blt.w	801278a <__gethex+0x1be>
 80129ca:	2501      	movs	r5, #1
 80129cc:	e7c2      	b.n	8012954 <__gethex+0x388>
 80129ce:	f016 061f 	ands.w	r6, r6, #31
 80129d2:	d0fa      	beq.n	80129ca <__gethex+0x3fe>
 80129d4:	4453      	add	r3, sl
 80129d6:	f1c6 0620 	rsb	r6, r6, #32
 80129da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80129de:	f7fd ff07 	bl	80107f0 <__hi0bits>
 80129e2:	42b0      	cmp	r0, r6
 80129e4:	dbe7      	blt.n	80129b6 <__gethex+0x3ea>
 80129e6:	e7f0      	b.n	80129ca <__gethex+0x3fe>
 80129e8:	08013f0d 	.word	0x08013f0d

080129ec <L_shift>:
 80129ec:	f1c2 0208 	rsb	r2, r2, #8
 80129f0:	0092      	lsls	r2, r2, #2
 80129f2:	b570      	push	{r4, r5, r6, lr}
 80129f4:	f1c2 0620 	rsb	r6, r2, #32
 80129f8:	6843      	ldr	r3, [r0, #4]
 80129fa:	6804      	ldr	r4, [r0, #0]
 80129fc:	fa03 f506 	lsl.w	r5, r3, r6
 8012a00:	432c      	orrs	r4, r5
 8012a02:	40d3      	lsrs	r3, r2
 8012a04:	6004      	str	r4, [r0, #0]
 8012a06:	f840 3f04 	str.w	r3, [r0, #4]!
 8012a0a:	4288      	cmp	r0, r1
 8012a0c:	d3f4      	bcc.n	80129f8 <L_shift+0xc>
 8012a0e:	bd70      	pop	{r4, r5, r6, pc}

08012a10 <__match>:
 8012a10:	b530      	push	{r4, r5, lr}
 8012a12:	6803      	ldr	r3, [r0, #0]
 8012a14:	3301      	adds	r3, #1
 8012a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a1a:	b914      	cbnz	r4, 8012a22 <__match+0x12>
 8012a1c:	6003      	str	r3, [r0, #0]
 8012a1e:	2001      	movs	r0, #1
 8012a20:	bd30      	pop	{r4, r5, pc}
 8012a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012a2a:	2d19      	cmp	r5, #25
 8012a2c:	bf98      	it	ls
 8012a2e:	3220      	addls	r2, #32
 8012a30:	42a2      	cmp	r2, r4
 8012a32:	d0f0      	beq.n	8012a16 <__match+0x6>
 8012a34:	2000      	movs	r0, #0
 8012a36:	e7f3      	b.n	8012a20 <__match+0x10>

08012a38 <__hexnan>:
 8012a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a3c:	680b      	ldr	r3, [r1, #0]
 8012a3e:	6801      	ldr	r1, [r0, #0]
 8012a40:	115e      	asrs	r6, r3, #5
 8012a42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012a46:	f013 031f 	ands.w	r3, r3, #31
 8012a4a:	b087      	sub	sp, #28
 8012a4c:	bf18      	it	ne
 8012a4e:	3604      	addne	r6, #4
 8012a50:	2500      	movs	r5, #0
 8012a52:	1f37      	subs	r7, r6, #4
 8012a54:	4682      	mov	sl, r0
 8012a56:	4690      	mov	r8, r2
 8012a58:	9301      	str	r3, [sp, #4]
 8012a5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8012a5e:	46b9      	mov	r9, r7
 8012a60:	463c      	mov	r4, r7
 8012a62:	9502      	str	r5, [sp, #8]
 8012a64:	46ab      	mov	fp, r5
 8012a66:	784a      	ldrb	r2, [r1, #1]
 8012a68:	1c4b      	adds	r3, r1, #1
 8012a6a:	9303      	str	r3, [sp, #12]
 8012a6c:	b342      	cbz	r2, 8012ac0 <__hexnan+0x88>
 8012a6e:	4610      	mov	r0, r2
 8012a70:	9105      	str	r1, [sp, #20]
 8012a72:	9204      	str	r2, [sp, #16]
 8012a74:	f7ff fd94 	bl	80125a0 <__hexdig_fun>
 8012a78:	2800      	cmp	r0, #0
 8012a7a:	d151      	bne.n	8012b20 <__hexnan+0xe8>
 8012a7c:	9a04      	ldr	r2, [sp, #16]
 8012a7e:	9905      	ldr	r1, [sp, #20]
 8012a80:	2a20      	cmp	r2, #32
 8012a82:	d818      	bhi.n	8012ab6 <__hexnan+0x7e>
 8012a84:	9b02      	ldr	r3, [sp, #8]
 8012a86:	459b      	cmp	fp, r3
 8012a88:	dd13      	ble.n	8012ab2 <__hexnan+0x7a>
 8012a8a:	454c      	cmp	r4, r9
 8012a8c:	d206      	bcs.n	8012a9c <__hexnan+0x64>
 8012a8e:	2d07      	cmp	r5, #7
 8012a90:	dc04      	bgt.n	8012a9c <__hexnan+0x64>
 8012a92:	462a      	mov	r2, r5
 8012a94:	4649      	mov	r1, r9
 8012a96:	4620      	mov	r0, r4
 8012a98:	f7ff ffa8 	bl	80129ec <L_shift>
 8012a9c:	4544      	cmp	r4, r8
 8012a9e:	d952      	bls.n	8012b46 <__hexnan+0x10e>
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	f1a4 0904 	sub.w	r9, r4, #4
 8012aa6:	f844 3c04 	str.w	r3, [r4, #-4]
 8012aaa:	f8cd b008 	str.w	fp, [sp, #8]
 8012aae:	464c      	mov	r4, r9
 8012ab0:	461d      	mov	r5, r3
 8012ab2:	9903      	ldr	r1, [sp, #12]
 8012ab4:	e7d7      	b.n	8012a66 <__hexnan+0x2e>
 8012ab6:	2a29      	cmp	r2, #41	@ 0x29
 8012ab8:	d157      	bne.n	8012b6a <__hexnan+0x132>
 8012aba:	3102      	adds	r1, #2
 8012abc:	f8ca 1000 	str.w	r1, [sl]
 8012ac0:	f1bb 0f00 	cmp.w	fp, #0
 8012ac4:	d051      	beq.n	8012b6a <__hexnan+0x132>
 8012ac6:	454c      	cmp	r4, r9
 8012ac8:	d206      	bcs.n	8012ad8 <__hexnan+0xa0>
 8012aca:	2d07      	cmp	r5, #7
 8012acc:	dc04      	bgt.n	8012ad8 <__hexnan+0xa0>
 8012ace:	462a      	mov	r2, r5
 8012ad0:	4649      	mov	r1, r9
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	f7ff ff8a 	bl	80129ec <L_shift>
 8012ad8:	4544      	cmp	r4, r8
 8012ada:	d936      	bls.n	8012b4a <__hexnan+0x112>
 8012adc:	f1a8 0204 	sub.w	r2, r8, #4
 8012ae0:	4623      	mov	r3, r4
 8012ae2:	f853 1b04 	ldr.w	r1, [r3], #4
 8012ae6:	f842 1f04 	str.w	r1, [r2, #4]!
 8012aea:	429f      	cmp	r7, r3
 8012aec:	d2f9      	bcs.n	8012ae2 <__hexnan+0xaa>
 8012aee:	1b3b      	subs	r3, r7, r4
 8012af0:	f023 0303 	bic.w	r3, r3, #3
 8012af4:	3304      	adds	r3, #4
 8012af6:	3401      	adds	r4, #1
 8012af8:	3e03      	subs	r6, #3
 8012afa:	42b4      	cmp	r4, r6
 8012afc:	bf88      	it	hi
 8012afe:	2304      	movhi	r3, #4
 8012b00:	4443      	add	r3, r8
 8012b02:	2200      	movs	r2, #0
 8012b04:	f843 2b04 	str.w	r2, [r3], #4
 8012b08:	429f      	cmp	r7, r3
 8012b0a:	d2fb      	bcs.n	8012b04 <__hexnan+0xcc>
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	b91b      	cbnz	r3, 8012b18 <__hexnan+0xe0>
 8012b10:	4547      	cmp	r7, r8
 8012b12:	d128      	bne.n	8012b66 <__hexnan+0x12e>
 8012b14:	2301      	movs	r3, #1
 8012b16:	603b      	str	r3, [r7, #0]
 8012b18:	2005      	movs	r0, #5
 8012b1a:	b007      	add	sp, #28
 8012b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b20:	3501      	adds	r5, #1
 8012b22:	2d08      	cmp	r5, #8
 8012b24:	f10b 0b01 	add.w	fp, fp, #1
 8012b28:	dd06      	ble.n	8012b38 <__hexnan+0x100>
 8012b2a:	4544      	cmp	r4, r8
 8012b2c:	d9c1      	bls.n	8012ab2 <__hexnan+0x7a>
 8012b2e:	2300      	movs	r3, #0
 8012b30:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b34:	2501      	movs	r5, #1
 8012b36:	3c04      	subs	r4, #4
 8012b38:	6822      	ldr	r2, [r4, #0]
 8012b3a:	f000 000f 	and.w	r0, r0, #15
 8012b3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012b42:	6020      	str	r0, [r4, #0]
 8012b44:	e7b5      	b.n	8012ab2 <__hexnan+0x7a>
 8012b46:	2508      	movs	r5, #8
 8012b48:	e7b3      	b.n	8012ab2 <__hexnan+0x7a>
 8012b4a:	9b01      	ldr	r3, [sp, #4]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d0dd      	beq.n	8012b0c <__hexnan+0xd4>
 8012b50:	f1c3 0320 	rsb	r3, r3, #32
 8012b54:	f04f 32ff 	mov.w	r2, #4294967295
 8012b58:	40da      	lsrs	r2, r3
 8012b5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012b5e:	4013      	ands	r3, r2
 8012b60:	f846 3c04 	str.w	r3, [r6, #-4]
 8012b64:	e7d2      	b.n	8012b0c <__hexnan+0xd4>
 8012b66:	3f04      	subs	r7, #4
 8012b68:	e7d0      	b.n	8012b0c <__hexnan+0xd4>
 8012b6a:	2004      	movs	r0, #4
 8012b6c:	e7d5      	b.n	8012b1a <__hexnan+0xe2>

08012b6e <__ascii_mbtowc>:
 8012b6e:	b082      	sub	sp, #8
 8012b70:	b901      	cbnz	r1, 8012b74 <__ascii_mbtowc+0x6>
 8012b72:	a901      	add	r1, sp, #4
 8012b74:	b142      	cbz	r2, 8012b88 <__ascii_mbtowc+0x1a>
 8012b76:	b14b      	cbz	r3, 8012b8c <__ascii_mbtowc+0x1e>
 8012b78:	7813      	ldrb	r3, [r2, #0]
 8012b7a:	600b      	str	r3, [r1, #0]
 8012b7c:	7812      	ldrb	r2, [r2, #0]
 8012b7e:	1e10      	subs	r0, r2, #0
 8012b80:	bf18      	it	ne
 8012b82:	2001      	movne	r0, #1
 8012b84:	b002      	add	sp, #8
 8012b86:	4770      	bx	lr
 8012b88:	4610      	mov	r0, r2
 8012b8a:	e7fb      	b.n	8012b84 <__ascii_mbtowc+0x16>
 8012b8c:	f06f 0001 	mvn.w	r0, #1
 8012b90:	e7f8      	b.n	8012b84 <__ascii_mbtowc+0x16>

08012b92 <_realloc_r>:
 8012b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b96:	4680      	mov	r8, r0
 8012b98:	4615      	mov	r5, r2
 8012b9a:	460c      	mov	r4, r1
 8012b9c:	b921      	cbnz	r1, 8012ba8 <_realloc_r+0x16>
 8012b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba2:	4611      	mov	r1, r2
 8012ba4:	f7fb bcae 	b.w	800e504 <_malloc_r>
 8012ba8:	b92a      	cbnz	r2, 8012bb6 <_realloc_r+0x24>
 8012baa:	f7fd fce5 	bl	8010578 <_free_r>
 8012bae:	2400      	movs	r4, #0
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb6:	f000 f840 	bl	8012c3a <_malloc_usable_size_r>
 8012bba:	4285      	cmp	r5, r0
 8012bbc:	4606      	mov	r6, r0
 8012bbe:	d802      	bhi.n	8012bc6 <_realloc_r+0x34>
 8012bc0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012bc4:	d8f4      	bhi.n	8012bb0 <_realloc_r+0x1e>
 8012bc6:	4629      	mov	r1, r5
 8012bc8:	4640      	mov	r0, r8
 8012bca:	f7fb fc9b 	bl	800e504 <_malloc_r>
 8012bce:	4607      	mov	r7, r0
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	d0ec      	beq.n	8012bae <_realloc_r+0x1c>
 8012bd4:	42b5      	cmp	r5, r6
 8012bd6:	462a      	mov	r2, r5
 8012bd8:	4621      	mov	r1, r4
 8012bda:	bf28      	it	cs
 8012bdc:	4632      	movcs	r2, r6
 8012bde:	f7ff fc43 	bl	8012468 <memcpy>
 8012be2:	4621      	mov	r1, r4
 8012be4:	4640      	mov	r0, r8
 8012be6:	f7fd fcc7 	bl	8010578 <_free_r>
 8012bea:	463c      	mov	r4, r7
 8012bec:	e7e0      	b.n	8012bb0 <_realloc_r+0x1e>

08012bee <__ascii_wctomb>:
 8012bee:	4603      	mov	r3, r0
 8012bf0:	4608      	mov	r0, r1
 8012bf2:	b141      	cbz	r1, 8012c06 <__ascii_wctomb+0x18>
 8012bf4:	2aff      	cmp	r2, #255	@ 0xff
 8012bf6:	d904      	bls.n	8012c02 <__ascii_wctomb+0x14>
 8012bf8:	228a      	movs	r2, #138	@ 0x8a
 8012bfa:	601a      	str	r2, [r3, #0]
 8012bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8012c00:	4770      	bx	lr
 8012c02:	700a      	strb	r2, [r1, #0]
 8012c04:	2001      	movs	r0, #1
 8012c06:	4770      	bx	lr

08012c08 <fiprintf>:
 8012c08:	b40e      	push	{r1, r2, r3}
 8012c0a:	b503      	push	{r0, r1, lr}
 8012c0c:	4601      	mov	r1, r0
 8012c0e:	ab03      	add	r3, sp, #12
 8012c10:	4805      	ldr	r0, [pc, #20]	@ (8012c28 <fiprintf+0x20>)
 8012c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c16:	6800      	ldr	r0, [r0, #0]
 8012c18:	9301      	str	r3, [sp, #4]
 8012c1a:	f7ff f9b1 	bl	8011f80 <_vfiprintf_r>
 8012c1e:	b002      	add	sp, #8
 8012c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c24:	b003      	add	sp, #12
 8012c26:	4770      	bx	lr
 8012c28:	20000084 	.word	0x20000084

08012c2c <abort>:
 8012c2c:	b508      	push	{r3, lr}
 8012c2e:	2006      	movs	r0, #6
 8012c30:	f000 f834 	bl	8012c9c <raise>
 8012c34:	2001      	movs	r0, #1
 8012c36:	f7f1 fc07 	bl	8004448 <_exit>

08012c3a <_malloc_usable_size_r>:
 8012c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c3e:	1f18      	subs	r0, r3, #4
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	bfbc      	itt	lt
 8012c44:	580b      	ldrlt	r3, [r1, r0]
 8012c46:	18c0      	addlt	r0, r0, r3
 8012c48:	4770      	bx	lr

08012c4a <_raise_r>:
 8012c4a:	291f      	cmp	r1, #31
 8012c4c:	b538      	push	{r3, r4, r5, lr}
 8012c4e:	4605      	mov	r5, r0
 8012c50:	460c      	mov	r4, r1
 8012c52:	d904      	bls.n	8012c5e <_raise_r+0x14>
 8012c54:	2316      	movs	r3, #22
 8012c56:	6003      	str	r3, [r0, #0]
 8012c58:	f04f 30ff 	mov.w	r0, #4294967295
 8012c5c:	bd38      	pop	{r3, r4, r5, pc}
 8012c5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012c60:	b112      	cbz	r2, 8012c68 <_raise_r+0x1e>
 8012c62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c66:	b94b      	cbnz	r3, 8012c7c <_raise_r+0x32>
 8012c68:	4628      	mov	r0, r5
 8012c6a:	f000 f831 	bl	8012cd0 <_getpid_r>
 8012c6e:	4622      	mov	r2, r4
 8012c70:	4601      	mov	r1, r0
 8012c72:	4628      	mov	r0, r5
 8012c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c78:	f000 b818 	b.w	8012cac <_kill_r>
 8012c7c:	2b01      	cmp	r3, #1
 8012c7e:	d00a      	beq.n	8012c96 <_raise_r+0x4c>
 8012c80:	1c59      	adds	r1, r3, #1
 8012c82:	d103      	bne.n	8012c8c <_raise_r+0x42>
 8012c84:	2316      	movs	r3, #22
 8012c86:	6003      	str	r3, [r0, #0]
 8012c88:	2001      	movs	r0, #1
 8012c8a:	e7e7      	b.n	8012c5c <_raise_r+0x12>
 8012c8c:	2100      	movs	r1, #0
 8012c8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012c92:	4620      	mov	r0, r4
 8012c94:	4798      	blx	r3
 8012c96:	2000      	movs	r0, #0
 8012c98:	e7e0      	b.n	8012c5c <_raise_r+0x12>
	...

08012c9c <raise>:
 8012c9c:	4b02      	ldr	r3, [pc, #8]	@ (8012ca8 <raise+0xc>)
 8012c9e:	4601      	mov	r1, r0
 8012ca0:	6818      	ldr	r0, [r3, #0]
 8012ca2:	f7ff bfd2 	b.w	8012c4a <_raise_r>
 8012ca6:	bf00      	nop
 8012ca8:	20000084 	.word	0x20000084

08012cac <_kill_r>:
 8012cac:	b538      	push	{r3, r4, r5, lr}
 8012cae:	4d07      	ldr	r5, [pc, #28]	@ (8012ccc <_kill_r+0x20>)
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	4604      	mov	r4, r0
 8012cb4:	4608      	mov	r0, r1
 8012cb6:	4611      	mov	r1, r2
 8012cb8:	602b      	str	r3, [r5, #0]
 8012cba:	f7f1 fbb5 	bl	8004428 <_kill>
 8012cbe:	1c43      	adds	r3, r0, #1
 8012cc0:	d102      	bne.n	8012cc8 <_kill_r+0x1c>
 8012cc2:	682b      	ldr	r3, [r5, #0]
 8012cc4:	b103      	cbz	r3, 8012cc8 <_kill_r+0x1c>
 8012cc6:	6023      	str	r3, [r4, #0]
 8012cc8:	bd38      	pop	{r3, r4, r5, pc}
 8012cca:	bf00      	nop
 8012ccc:	200033d0 	.word	0x200033d0

08012cd0 <_getpid_r>:
 8012cd0:	f7f1 bba2 	b.w	8004418 <_getpid>

08012cd4 <_init>:
 8012cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cd6:	bf00      	nop
 8012cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cda:	bc08      	pop	{r3}
 8012cdc:	469e      	mov	lr, r3
 8012cde:	4770      	bx	lr

08012ce0 <_fini>:
 8012ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ce2:	bf00      	nop
 8012ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ce6:	bc08      	pop	{r3}
 8012ce8:	469e      	mov	lr, r3
 8012cea:	4770      	bx	lr
