
badanie-ogniw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a84  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001570  08012c58  08012c58  00013c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141c8  080141c8  00016240  2**0
                  CONTENTS
  4 .ARM          00000008  080141c8  080141c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141d0  080141d0  00016240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141d0  080141d0  000151d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080141d4  080141d4  000151d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  080141d8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003198  20000240  08014418  00016240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200033d8  08014418  000163d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016240  2**0
                  CONTENTS, READONLY
 12 .debug_info   000247ba  00000000  00000000  00016270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058ee  00000000  00000000  0003aa2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  00040318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017d4  00000000  00000000  00042230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ea07  00000000  00000000  00043a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003298e  00000000  00000000  0007240b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101e6f  00000000  00000000  000a4d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a6c08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096e8  00000000  00000000  001a6c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  001b0334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000240 	.word	0x20000240
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012c3c 	.word	0x08012c3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000244 	.word	0x20000244
 800020c:	08012c3c 	.word	0x08012c3c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010d2:	7b3b      	ldrb	r3, [r7, #12]
 80010d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e2:	480c      	ldr	r0, [pc, #48]	@ (8001114 <BMP280_Read8+0x50>)
 80010e4:	f004 fbe0 	bl	80058a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <BMP280_Read8+0x54>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f107 020c 	add.w	r2, r7, #12
 80010f0:	f107 010c 	add.w	r1, r7, #12
 80010f4:	230a      	movs	r3, #10
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2302      	movs	r3, #2
 80010fa:	f007 f9bd 	bl	8008478 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001104:	4803      	ldr	r0, [pc, #12]	@ (8001114 <BMP280_Read8+0x50>)
 8001106:	f004 fbcf 	bl	80058a8 <HAL_GPIO_WritePin>
	return tmp[1];
 800110a:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000
 8001118:	2000025c 	.word	0x2000025c

0800111c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800112a:	7b3b      	ldrb	r3, [r7, #12]
 800112c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001130:	b2db      	uxtb	r3, r3
 8001132:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800113a:	4810      	ldr	r0, [pc, #64]	@ (800117c <BMP280_Read16+0x60>)
 800113c:	f004 fbb4 	bl	80058a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <BMP280_Read16+0x64>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	f107 010c 	add.w	r1, r7, #12
 800114c:	230a      	movs	r3, #10
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2303      	movs	r3, #3
 8001152:	f007 f991 	bl	8008478 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800115c:	4807      	ldr	r0, [pc, #28]	@ (800117c <BMP280_Read16+0x60>)
 800115e:	f004 fba3 	bl	80058a8 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	7bbb      	ldrb	r3, [r7, #14]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	b29b      	uxth	r3, r3
#endif
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	2000025c 	.word	0x2000025c

08001184 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffc3 	bl	800111c <BMP280_Read16>
 8001196:	4603      	mov	r3, r0
 8001198:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	b29b      	uxth	r3, r3
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 80011cc:	7b3b      	ldrb	r3, [r7, #12]
 80011ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <BMP280_Write8+0x58>)
 80011e2:	f004 fb61 	bl	80058a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <BMP280_Write8+0x5c>)
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	f107 010c 	add.w	r1, r7, #12
 80011f2:	230a      	movs	r3, #10
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2302      	movs	r3, #2
 80011f8:	f007 f93e 	bl	8008478 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001202:	4803      	ldr	r0, [pc, #12]	@ (8001210 <BMP280_Write8+0x58>)
 8001204:	f004 fb50 	bl	80058a8 <HAL_GPIO_WritePin>
#endif
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	2000025c 	.word	0x2000025c

08001218 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af02      	add	r7, sp, #8
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8001226:	7b3b      	ldrb	r3, [r7, #12]
 8001228:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800122c:	b2db      	uxtb	r3, r3
 800122e:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001236:	480f      	ldr	r0, [pc, #60]	@ (8001274 <BMP280_Read24+0x5c>)
 8001238:	f004 fb36 	bl	80058a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <BMP280_Read24+0x60>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	f107 010c 	add.w	r1, r7, #12
 8001248:	230a      	movs	r3, #10
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2303      	movs	r3, #3
 800124e:	f007 f913 	bl	8008478 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001258:	4806      	ldr	r0, [pc, #24]	@ (8001274 <BMP280_Read24+0x5c>)
 800125a:	f004 fb25 	bl	80058a8 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 800125e:	7b7b      	ldrb	r3, [r7, #13]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	4313      	orrs	r3, r2
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	4313      	orrs	r3, r2
#endif
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	2000025c 	.word	0x2000025c

0800127c <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4603      	mov	r3, r0
 800128c:	70fb      	strb	r3, [r7, #3]
 800128e:	460b      	mov	r3, r1
 8001290:	70bb      	strb	r3, [r7, #2]
 8001292:	4613      	mov	r3, r2
 8001294:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 8001296:	4a4f      	ldr	r2, [pc, #316]	@ (80013d4 <BMP280_Init+0x158>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a2:	484d      	ldr	r0, [pc, #308]	@ (80013d8 <BMP280_Init+0x15c>)
 80012a4:	f004 fb00 	bl	80058a8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80012a8:	2005      	movs	r0, #5
 80012aa:	f003 fc21 	bl	8004af0 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b4:	4848      	ldr	r0, [pc, #288]	@ (80013d8 <BMP280_Init+0x15c>)
 80012b6:	f004 faf7 	bl	80058a8 <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 80012ba:	787b      	ldrb	r3, [r7, #1]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d901      	bls.n	80012c4 <BMP280_Init+0x48>
	    mode = BMP280_NORMALMODE;
 80012c0:	2303      	movs	r3, #3
 80012c2:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80012c4:	4a45      	ldr	r2, [pc, #276]	@ (80013dc <BMP280_Init+0x160>)
 80012c6:	787b      	ldrb	r3, [r7, #1]
 80012c8:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80012ca:	787b      	ldrb	r3, [r7, #1]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <BMP280_Init+0x58>
		mode = BMP280_SLEEPMODE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d901      	bls.n	80012de <BMP280_Init+0x62>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80012da:	2305      	movs	r3, #5
 80012dc:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80012de:	4a40      	ldr	r2, [pc, #256]	@ (80013e0 <BMP280_Init+0x164>)
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	d901      	bls.n	80012ee <BMP280_Init+0x72>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80012ea:	2305      	movs	r3, #5
 80012ec:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80012ee:	4a3d      	ldr	r2, [pc, #244]	@ (80013e4 <BMP280_Init+0x168>)
 80012f0:	78bb      	ldrb	r3, [r7, #2]
 80012f2:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80012f4:	bf00      	nop
 80012f6:	20d0      	movs	r0, #208	@ 0xd0
 80012f8:	f7ff fee4 	bl	80010c4 <BMP280_Read8>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b58      	cmp	r3, #88	@ 0x58
 8001300:	d1f9      	bne.n	80012f6 <BMP280_Init+0x7a>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001302:	2088      	movs	r0, #136	@ 0x88
 8001304:	f7ff ff3e 	bl	8001184 <BMP280_Read16LE>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b36      	ldr	r3, [pc, #216]	@ (80013e8 <BMP280_Init+0x16c>)
 800130e:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001310:	208a      	movs	r0, #138	@ 0x8a
 8001312:	f7ff ff37 	bl	8001184 <BMP280_Read16LE>
 8001316:	4603      	mov	r3, r0
 8001318:	b21a      	sxth	r2, r3
 800131a:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <BMP280_Init+0x170>)
 800131c:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 800131e:	208c      	movs	r0, #140	@ 0x8c
 8001320:	f7ff ff30 	bl	8001184 <BMP280_Read16LE>
 8001324:	4603      	mov	r3, r0
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <BMP280_Init+0x174>)
 800132a:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800132c:	208e      	movs	r0, #142	@ 0x8e
 800132e:	f7ff ff29 	bl	8001184 <BMP280_Read16LE>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <BMP280_Init+0x178>)
 8001338:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800133a:	2090      	movs	r0, #144	@ 0x90
 800133c:	f7ff ff22 	bl	8001184 <BMP280_Read16LE>
 8001340:	4603      	mov	r3, r0
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <BMP280_Init+0x17c>)
 8001346:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001348:	2092      	movs	r0, #146	@ 0x92
 800134a:	f7ff ff1b 	bl	8001184 <BMP280_Read16LE>
 800134e:	4603      	mov	r3, r0
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <BMP280_Init+0x180>)
 8001354:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001356:	2094      	movs	r0, #148	@ 0x94
 8001358:	f7ff ff14 	bl	8001184 <BMP280_Read16LE>
 800135c:	4603      	mov	r3, r0
 800135e:	b21a      	sxth	r2, r3
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <BMP280_Init+0x184>)
 8001362:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001364:	2096      	movs	r0, #150	@ 0x96
 8001366:	f7ff ff0d 	bl	8001184 <BMP280_Read16LE>
 800136a:	4603      	mov	r3, r0
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <BMP280_Init+0x188>)
 8001370:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001372:	2098      	movs	r0, #152	@ 0x98
 8001374:	f7ff ff06 	bl	8001184 <BMP280_Read16LE>
 8001378:	4603      	mov	r3, r0
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <BMP280_Init+0x18c>)
 800137e:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001380:	209a      	movs	r0, #154	@ 0x9a
 8001382:	f7ff feff 	bl	8001184 <BMP280_Read16LE>
 8001386:	4603      	mov	r3, r0
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b20      	ldr	r3, [pc, #128]	@ (800140c <BMP280_Init+0x190>)
 800138c:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 800138e:	209c      	movs	r0, #156	@ 0x9c
 8001390:	f7ff fef8 	bl	8001184 <BMP280_Read16LE>
 8001394:	4603      	mov	r3, r0
 8001396:	b21a      	sxth	r2, r3
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <BMP280_Init+0x194>)
 800139a:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800139c:	209e      	movs	r0, #158	@ 0x9e
 800139e:	f7ff fef1 	bl	8001184 <BMP280_Read16LE>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <BMP280_Init+0x198>)
 80013a8:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	015b      	lsls	r3, r3, #5
 80013ae:	b25a      	sxtb	r2, r3
 80013b0:	78bb      	ldrb	r3, [r7, #2]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b25a      	sxtb	r2, r3
 80013ba:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80013be:	4313      	orrs	r3, r2
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4619      	mov	r1, r3
 80013c6:	20f4      	movs	r0, #244	@ 0xf4
 80013c8:	f7ff fef6 	bl	80011b8 <BMP280_Write8>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000025c 	.word	0x2000025c
 80013d8:	40021000 	.word	0x40021000
 80013dc:	20000262 	.word	0x20000262
 80013e0:	20000260 	.word	0x20000260
 80013e4:	20000261 	.word	0x20000261
 80013e8:	20000278 	.word	0x20000278
 80013ec:	20000264 	.word	0x20000264
 80013f0:	20000266 	.word	0x20000266
 80013f4:	2000027a 	.word	0x2000027a
 80013f8:	20000268 	.word	0x20000268
 80013fc:	2000026a 	.word	0x2000026a
 8001400:	2000026c 	.word	0x2000026c
 8001404:	2000026e 	.word	0x2000026e
 8001408:	20000270 	.word	0x20000270
 800140c:	20000272 	.word	0x20000272
 8001410:	20000274 	.word	0x20000274
 8001414:	20000276 	.word	0x20000276

08001418 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800141e:	4b3d      	ldr	r3, [pc, #244]	@ (8001514 <BMP280_ReadTemperature+0xfc>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d16d      	bne.n	8001502 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001426:	20f4      	movs	r0, #244	@ 0xf4
 8001428:	f7ff fe4c 	bl	80010c4 <BMP280_Read8>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	4619      	mov	r1, r3
 8001444:	20f4      	movs	r0, #244	@ 0xf4
 8001446:	f7ff feb7 	bl	80011b8 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800144a:	20f4      	movs	r0, #244	@ 0xf4
 800144c:	f7ff fe3a 	bl	80010c4 <BMP280_Read8>
 8001450:	4603      	mov	r3, r0
 8001452:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001454:	7dbb      	ldrb	r3, [r7, #22]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d14f      	bne.n	8001502 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001462:	20f4      	movs	r0, #244	@ 0xf4
 8001464:	f7ff fe2e 	bl	80010c4 <BMP280_Read8>
 8001468:	4603      	mov	r3, r0
 800146a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800146c:	7dbb      	ldrb	r3, [r7, #22]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001474:	7dbb      	ldrb	r3, [r7, #22]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800147a:	e7f2      	b.n	8001462 <BMP280_ReadTemperature+0x4a>
				  break;
 800147c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800147e:	20fa      	movs	r0, #250	@ 0xfa
 8001480:	f7ff feca 	bl	8001218 <BMP280_Read24>
 8001484:	4603      	mov	r3, r0
 8001486:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	111b      	asrs	r3, r3, #4
 800148c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	10da      	asrs	r2, r3, #3
 8001492:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800149a:	4a20      	ldr	r2, [pc, #128]	@ (800151c <BMP280_ReadTemperature+0x104>)
 800149c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	12db      	asrs	r3, r3, #11
 80014a6:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	111b      	asrs	r3, r3, #4
 80014ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	1112      	asrs	r2, r2, #4
 80014b6:	4918      	ldr	r1, [pc, #96]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 80014b8:	8809      	ldrh	r1, [r1, #0]
 80014ba:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c0:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80014c2:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <BMP280_ReadTemperature+0x108>)
 80014c4:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014cc:	139b      	asrs	r3, r3, #14
 80014ce:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a13      	ldr	r2, [pc, #76]	@ (8001524 <BMP280_ReadTemperature+0x10c>)
 80014d8:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <BMP280_ReadTemperature+0x10c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3380      	adds	r3, #128	@ 0x80
 80014e6:	121b      	asrs	r3, r3, #8
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80014f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f8:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001528 <BMP280_ReadTemperature+0x110>
 80014fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001500:	e001      	b.n	8001506 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001502:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800152c <BMP280_ReadTemperature+0x114>
}
 8001506:	eef0 7a47 	vmov.f32	s15, s14
 800150a:	eeb0 0a67 	vmov.f32	s0, s15
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000262 	.word	0x20000262
 8001518:	20000278 	.word	0x20000278
 800151c:	20000264 	.word	0x20000264
 8001520:	20000266 	.word	0x20000266
 8001524:	2000027c 	.word	0x2000027c
 8001528:	42c80000 	.word	0x42c80000
 800152c:	c2c60000 	.word	0xc2c60000

08001530 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001534:	b0cc      	sub	sp, #304	@ 0x130
 8001536:	af00      	add	r7, sp, #0
 8001538:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 800153c:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001540:	f7ff ff6a 	bl	8001418 <BMP280_ReadTemperature>
 8001544:	eef0 7a40 	vmov.f32	s15, s0
 8001548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800154c:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8001828 <BMP280_ReadTemperatureAndPressure+0x2f8>
 800155c:	eef4 7a47 	vcmp.f32	s15, s14
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d101      	bne.n	800156a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8001566:	23ff      	movs	r3, #255	@ 0xff
 8001568:	e2bf      	b.n	8001aea <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800156a:	20f7      	movs	r0, #247	@ 0xf7
 800156c:	f7ff fe54 	bl	8001218 <BMP280_Read24>
 8001570:	4603      	mov	r3, r0
 8001572:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  adc_P >>= 4;
 8001576:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800157a:	111b      	asrs	r3, r3, #4
 800157c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001580:	4baa      	ldr	r3, [pc, #680]	@ (800182c <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	17da      	asrs	r2, r3, #31
 8001586:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800158a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800158e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001592:	460b      	mov	r3, r1
 8001594:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8001598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800159a:	4613      	mov	r3, r2
 800159c:	f143 33ff 	adc.w	r3, r3, #4294967295
 80015a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015a6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 80015aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015b2:	fb03 f102 	mul.w	r1, r3, r2
 80015b6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	18ca      	adds	r2, r1, r3
 80015c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c8:	fba3 4503 	umull	r4, r5, r3, r3
 80015cc:	1953      	adds	r3, r2, r5
 80015ce:	461d      	mov	r5, r3
 80015d0:	4b97      	ldr	r3, [pc, #604]	@ (8001830 <BMP280_ReadTemperatureAndPressure+0x300>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	17da      	asrs	r2, r3, #31
 80015da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80015de:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80015e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80015e6:	4603      	mov	r3, r0
 80015e8:	fb03 f205 	mul.w	r2, r3, r5
 80015ec:	460b      	mov	r3, r1
 80015ee:	fb04 f303 	mul.w	r3, r4, r3
 80015f2:	4413      	add	r3, r2
 80015f4:	4602      	mov	r2, r0
 80015f6:	fba4 8902 	umull	r8, r9, r4, r2
 80015fa:	444b      	add	r3, r9
 80015fc:	4699      	mov	r9, r3
 80015fe:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 8001602:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001606:	4b8b      	ldr	r3, [pc, #556]	@ (8001834 <BMP280_ReadTemperatureAndPressure+0x304>)
 8001608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160c:	b21b      	sxth	r3, r3
 800160e:	17da      	asrs	r2, r3, #31
 8001610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001614:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001618:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800161c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001620:	462a      	mov	r2, r5
 8001622:	fb02 f203 	mul.w	r2, r2, r3
 8001626:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800162a:	4621      	mov	r1, r4
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	441a      	add	r2, r3
 8001632:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001636:	4621      	mov	r1, r4
 8001638:	fba3 ab01 	umull	sl, fp, r3, r1
 800163c:	eb02 030b 	add.w	r3, r2, fp
 8001640:	469b      	mov	fp, r3
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800164e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001652:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001656:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800165a:	1814      	adds	r4, r2, r0
 800165c:	643c      	str	r4, [r7, #64]	@ 0x40
 800165e:	414b      	adcs	r3, r1
 8001660:	647b      	str	r3, [r7, #68]	@ 0x44
 8001662:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001666:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 800166a:	4b73      	ldr	r3, [pc, #460]	@ (8001838 <BMP280_ReadTemperatureAndPressure+0x308>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	b21b      	sxth	r3, r3
 8001672:	17da      	asrs	r2, r3, #31
 8001674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001678:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001688:	00d9      	lsls	r1, r3, #3
 800168a:	2000      	movs	r0, #0
 800168c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001690:	1814      	adds	r4, r2, r0
 8001692:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001694:	414b      	adcs	r3, r1
 8001696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001698:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800169c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80016a0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80016a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016a8:	fb03 f102 	mul.w	r1, r3, r2
 80016ac:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80016b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	18ca      	adds	r2, r1, r3
 80016ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016be:	fba3 1303 	umull	r1, r3, r3, r3
 80016c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016c6:	460b      	mov	r3, r1
 80016c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80016cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80016d0:	18d3      	adds	r3, r2, r3
 80016d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016d6:	4b59      	ldr	r3, [pc, #356]	@ (800183c <BMP280_ReadTemperatureAndPressure+0x30c>)
 80016d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	17da      	asrs	r2, r3, #31
 80016e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80016e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80016e8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80016ec:	462b      	mov	r3, r5
 80016ee:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80016f2:	4642      	mov	r2, r8
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	464b      	mov	r3, r9
 80016fa:	4621      	mov	r1, r4
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	4622      	mov	r2, r4
 8001704:	4641      	mov	r1, r8
 8001706:	fba2 1201 	umull	r1, r2, r2, r1
 800170a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800170e:	460a      	mov	r2, r1
 8001710:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8001714:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001718:	4413      	add	r3, r2
 800171a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800172a:	4623      	mov	r3, r4
 800172c:	0a18      	lsrs	r0, r3, #8
 800172e:	462b      	mov	r3, r5
 8001730:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001734:	462b      	mov	r3, r5
 8001736:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001738:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <BMP280_ReadTemperatureAndPressure+0x310>)
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	b21b      	sxth	r3, r3
 8001740:	17da      	asrs	r2, r3, #31
 8001742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001746:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800174a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800174e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001752:	464a      	mov	r2, r9
 8001754:	fb02 f203 	mul.w	r2, r2, r3
 8001758:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800175c:	4644      	mov	r4, r8
 800175e:	fb04 f303 	mul.w	r3, r4, r3
 8001762:	441a      	add	r2, r3
 8001764:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001768:	4644      	mov	r4, r8
 800176a:	fba3 4304 	umull	r4, r3, r3, r4
 800176e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001772:	4623      	mov	r3, r4
 8001774:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800177c:	18d3      	adds	r3, r2, r3
 800177e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800178e:	464c      	mov	r4, r9
 8001790:	0323      	lsls	r3, r4, #12
 8001792:	4644      	mov	r4, r8
 8001794:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001798:	4644      	mov	r4, r8
 800179a:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800179c:	1884      	adds	r4, r0, r2
 800179e:	633c      	str	r4, [r7, #48]	@ 0x30
 80017a0:	eb41 0303 	adc.w	r3, r1, r3
 80017a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80017a6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80017aa:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80017ae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017b2:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80017b6:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 80017ba:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80017be:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <BMP280_ReadTemperatureAndPressure+0x314>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2200      	movs	r2, #0
 80017c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80017ce:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80017d2:	462b      	mov	r3, r5
 80017d4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80017d8:	4642      	mov	r2, r8
 80017da:	fb02 f203 	mul.w	r2, r2, r3
 80017de:	464b      	mov	r3, r9
 80017e0:	4621      	mov	r1, r4
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	4622      	mov	r2, r4
 80017ea:	4641      	mov	r1, r8
 80017ec:	fba2 1201 	umull	r1, r2, r2, r1
 80017f0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80017f4:	460a      	mov	r2, r1
 80017f6:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80017fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80017fe:	4413      	add	r3, r2
 8001800:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001810:	4629      	mov	r1, r5
 8001812:	104a      	asrs	r2, r1, #1
 8001814:	4629      	mov	r1, r5
 8001816:	17cb      	asrs	r3, r1, #31
 8001818:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	  if (var1 == 0) {
 800181c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001820:	4313      	orrs	r3, r2
 8001822:	d111      	bne.n	8001848 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001824:	2300      	movs	r3, #0
 8001826:	e160      	b.n	8001aea <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001828:	c2c60000 	.word	0xc2c60000
 800182c:	2000027c 	.word	0x2000027c
 8001830:	20000270 	.word	0x20000270
 8001834:	2000026e 	.word	0x2000026e
 8001838:	2000026c 	.word	0x2000026c
 800183c:	2000026a 	.word	0x2000026a
 8001840:	20000268 	.word	0x20000268
 8001844:	2000027a 	.word	0x2000027a
	  }
	  p = 1048576 - adc_P;
 8001848:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800184c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001850:	17da      	asrs	r2, r3, #31
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001856:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800185a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 800185e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001862:	105b      	asrs	r3, r3, #1
 8001864:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001868:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800186c:	07db      	lsls	r3, r3, #31
 800186e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001872:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001876:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800187a:	4621      	mov	r1, r4
 800187c:	1a89      	subs	r1, r1, r2
 800187e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001882:	4629      	mov	r1, r5
 8001884:	eb61 0303 	sbc.w	r3, r1, r3
 8001888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800188c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001890:	4622      	mov	r2, r4
 8001892:	462b      	mov	r3, r5
 8001894:	1891      	adds	r1, r2, r2
 8001896:	6239      	str	r1, [r7, #32]
 8001898:	415b      	adcs	r3, r3
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
 800189c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018a0:	4621      	mov	r1, r4
 80018a2:	1851      	adds	r1, r2, r1
 80018a4:	61b9      	str	r1, [r7, #24]
 80018a6:	4629      	mov	r1, r5
 80018a8:	414b      	adcs	r3, r1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018b8:	4649      	mov	r1, r9
 80018ba:	018b      	lsls	r3, r1, #6
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c2:	4641      	mov	r1, r8
 80018c4:	018a      	lsls	r2, r1, #6
 80018c6:	4641      	mov	r1, r8
 80018c8:	1889      	adds	r1, r1, r2
 80018ca:	6139      	str	r1, [r7, #16]
 80018cc:	4649      	mov	r1, r9
 80018ce:	eb43 0101 	adc.w	r1, r3, r1
 80018d2:	6179      	str	r1, [r7, #20]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018e0:	4649      	mov	r1, r9
 80018e2:	008b      	lsls	r3, r1, #2
 80018e4:	4641      	mov	r1, r8
 80018e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018ea:	4641      	mov	r1, r8
 80018ec:	008a      	lsls	r2, r1, #2
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	4622      	mov	r2, r4
 80018f6:	189b      	adds	r3, r3, r2
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	460b      	mov	r3, r1
 80018fc:	462a      	mov	r2, r5
 80018fe:	eb42 0303 	adc.w	r3, r2, r3
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001910:	4649      	mov	r1, r9
 8001912:	008b      	lsls	r3, r1, #2
 8001914:	4641      	mov	r1, r8
 8001916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800191a:	4641      	mov	r1, r8
 800191c:	008a      	lsls	r2, r1, #2
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	4603      	mov	r3, r0
 8001924:	4622      	mov	r2, r4
 8001926:	189b      	adds	r3, r3, r2
 8001928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800192a:	462b      	mov	r3, r5
 800192c:	460a      	mov	r2, r1
 800192e:	eb42 0303 	adc.w	r3, r2, r3
 8001932:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001934:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001938:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800193c:	f7ff f9c4 	bl	8000cc8 <__aeabi_ldivmod>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001948:	4b6b      	ldr	r3, [pc, #428]	@ (8001af8 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	b21b      	sxth	r3, r3
 8001950:	17da      	asrs	r2, r3, #31
 8001952:	673b      	str	r3, [r7, #112]	@ 0x70
 8001954:	677a      	str	r2, [r7, #116]	@ 0x74
 8001956:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0b50      	lsrs	r0, r2, #13
 8001964:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001968:	1359      	asrs	r1, r3, #13
 800196a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800196e:	462b      	mov	r3, r5
 8001970:	fb00 f203 	mul.w	r2, r0, r3
 8001974:	4623      	mov	r3, r4
 8001976:	fb03 f301 	mul.w	r3, r3, r1
 800197a:	4413      	add	r3, r2
 800197c:	4622      	mov	r2, r4
 800197e:	fba2 1200 	umull	r1, r2, r2, r0
 8001982:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001986:	460a      	mov	r2, r1
 8001988:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800198c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001990:	4413      	add	r3, r2
 8001992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001996:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800199a:	f04f 0000 	mov.w	r0, #0
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	0b50      	lsrs	r0, r2, #13
 80019a4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a8:	1359      	asrs	r1, r3, #13
 80019aa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80019ae:	462b      	mov	r3, r5
 80019b0:	fb00 f203 	mul.w	r2, r0, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	fb03 f301 	mul.w	r3, r3, r1
 80019ba:	4413      	add	r3, r2
 80019bc:	4622      	mov	r2, r4
 80019be:	fba2 1200 	umull	r1, r2, r2, r0
 80019c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80019c6:	460a      	mov	r2, r1
 80019c8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80019cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80019d0:	4413      	add	r3, r2
 80019d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80019e2:	4621      	mov	r1, r4
 80019e4:	0e4a      	lsrs	r2, r1, #25
 80019e6:	4629      	mov	r1, r5
 80019e8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019ec:	4629      	mov	r1, r5
 80019ee:	164b      	asrs	r3, r1, #25
 80019f0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 80019f4:	4b41      	ldr	r3, [pc, #260]	@ (8001afc <BMP280_ReadTemperatureAndPressure+0x5cc>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	17da      	asrs	r2, r3, #31
 80019fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a06:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a0a:	462a      	mov	r2, r5
 8001a0c:	fb02 f203 	mul.w	r2, r2, r3
 8001a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a14:	4621      	mov	r1, r4
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001a20:	4621      	mov	r1, r4
 8001a22:	fba2 1201 	umull	r1, r2, r2, r1
 8001a26:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a30:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a34:	4413      	add	r3, r2
 8001a36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001a46:	4621      	mov	r1, r4
 8001a48:	0cca      	lsrs	r2, r1, #19
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a50:	4629      	mov	r1, r5
 8001a52:	14cb      	asrs	r3, r1, #19
 8001a54:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001a58:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001a5c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a60:	1884      	adds	r4, r0, r2
 8001a62:	663c      	str	r4, [r7, #96]	@ 0x60
 8001a64:	eb41 0303 	adc.w	r3, r1, r3
 8001a68:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a6a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a72:	4621      	mov	r1, r4
 8001a74:	1889      	adds	r1, r1, r2
 8001a76:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001a78:	4629      	mov	r1, r5
 8001a7a:	eb43 0101 	adc.w	r1, r3, r1
 8001a7e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	0a18      	lsrs	r0, r3, #8
 8001a90:	462b      	mov	r3, r5
 8001a92:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a96:	462b      	mov	r3, r5
 8001a98:	1219      	asrs	r1, r3, #8
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8001a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	17da      	asrs	r2, r3, #31
 8001aa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001aa6:	657a      	str	r2, [r7, #84]	@ 0x54
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ab4:	464c      	mov	r4, r9
 8001ab6:	0123      	lsls	r3, r4, #4
 8001ab8:	4644      	mov	r4, r8
 8001aba:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001abe:	4644      	mov	r4, r8
 8001ac0:	0122      	lsls	r2, r4, #4
 8001ac2:	1884      	adds	r4, r0, r2
 8001ac4:	603c      	str	r4, [r7, #0]
 8001ac6:	eb41 0303 	adc.w	r3, r1, r3
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ad0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  *pressure = (int32_t)p/256;
 8001ad4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da00      	bge.n	8001ade <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001adc:	33ff      	adds	r3, #255	@ 0xff
 8001ade:	121b      	asrs	r3, r3, #8
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ae6:	601a      	str	r2, [r3, #0]

	  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	20000276 	.word	0x20000276
 8001afc:	20000274 	.word	0x20000274
 8001b00:	20000272 	.word	0x20000272

08001b04 <Read16>:
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @param:		register address in hexadecimal
 * @retval:		16 bit unsigned integer that represents the register's contents.
 */
uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af04      	add	r7, sp, #16
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	2302      	movs	r3, #2
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	2180      	movs	r1, #128	@ 0x80
 8001b2c:	f004 fa94 	bl	8006058 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8001b30:	7b3b      	ldrb	r3, [r7, #12]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	7b7b      	ldrb	r3, [r7, #13]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	b29b      	uxth	r3, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <Write16>:
				  HAL_BUSY     = 0x02U,
				  HAL_TIMEOUT  = 0x03U
				} HAL_StatusTypeDef;
 */
HAL_StatusTypeDef Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af04      	add	r7, sp, #16
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
 8001b54:	4613      	mov	r3, r2
 8001b56:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8001b58:	883b      	ldrh	r3, [r7, #0]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8001b62:	883b      	ldrh	r3, [r7, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	2302      	movs	r3, #2
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	2180      	movs	r1, #128	@ 0x80
 8001b84:	f004 f954 	bl	8005e30 <HAL_I2C_Mem_Write>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <INA219_ReadBusVoltage>:
 * @brief: 		This function will read the battery voltage level being read.
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:		Returns voltage level in mili-volts
 */
uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ffb1 	bl	8001b04 <Read16>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8001ba6:	89fb      	ldrh	r3, [r7, #14]
 8001ba8:	08db      	lsrs	r3, r3, #3
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	b29b      	uxth	r3, r3

}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <INA219_ReadCurrent_raw>:
 *  @brief:	  	Gets the raw current value (16-bit signed integer, so +-32767)
 *  @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 *  @retval:	The raw current reading
 */
int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff9e 	bl	8001b04 <Read16>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001bcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <INA219_ReadPower>:
 * 			Power multiplier is initialize in the calibration function.
 * @param:	Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:	Returns power level in mili-watts
 */
uint16_t INA219_ReadPower(INA219_t *ina219)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_POWER );
 8001be0:	2103      	movs	r1, #3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ff8e 	bl	8001b04 <Read16>
 8001be8:	4603      	mov	r3, r0
 8001bea:	81fb      	strh	r3, [r7, #14]
	result = result * ina219_powerMultiplier_mW; // power is the power register times the power_LSB (power multiplier)
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <INA219_ReadPower+0x30>)
 8001bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	89fa      	ldrh	r2, [r7, #14]
 8001bf6:	fb12 f303 	smulbb	r3, r2, r3
 8001bfa:	81fb      	strh	r3, [r7, #14]
	return (result);
 8001bfc:	89fb      	ldrh	r3, [r7, #14]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000286 	.word	0x20000286

08001c0c <INA219_HealthCheck>:
 * 				the program that called the health check function what state our battery is
 * 				at and whether we have entered a "LOW" state. This way the program can take
 * 				appropriate action.
 */
enum BatteryState INA219_HealthCheck(INA219_t *ina219,float batteryPercentageThreshold,float batteryPercentage)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c18:	edc7 0a01 	vstr	s1, [r7, #4]
	switch(batteryState)
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d01b      	beq.n	8001c5c <INA219_HealthCheck+0x50>
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	dc2a      	bgt.n	8001c7e <INA219_HealthCheck+0x72>
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <INA219_HealthCheck+0x26>
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d004      	beq.n	8001c3a <INA219_HealthCheck+0x2e>
 8001c30:	e025      	b.n	8001c7e <INA219_HealthCheck+0x72>
	{
		case (Battery_START):
			/* Enter your start up functionality here */
			batteryState = Battery_OK;
 8001c32:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
			break;
 8001c38:	e025      	b.n	8001c86 <INA219_HealthCheck+0x7a>
		case (Battery_OK):
			/* Enter your battery OK state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001c3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	dd03      	ble.n	8001c54 <INA219_HealthCheck+0x48>
			{
				batteryState = Battery_OK;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001c52:	e018      	b.n	8001c86 <INA219_HealthCheck+0x7a>
				 batteryState = Battery_LOW;
 8001c54:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c56:	2202      	movs	r2, #2
 8001c58:	701a      	strb	r2, [r3, #0]
			break;
 8001c5a:	e014      	b.n	8001c86 <INA219_HealthCheck+0x7a>
		case (Battery_LOW):
			/* Enter your battery LOW state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001c5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	dd03      	ble.n	8001c76 <INA219_HealthCheck+0x6a>
			{
				batteryState = Battery_OK;
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001c74:	e007      	b.n	8001c86 <INA219_HealthCheck+0x7a>
				 batteryState = Battery_LOW;
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c78:	2202      	movs	r2, #2
 8001c7a:	701a      	strb	r2, [r3, #0]
			break;
 8001c7c:	e003      	b.n	8001c86 <INA219_HealthCheck+0x7a>
		default:
			/*
			 * If program encounters a bug or a value outside what is expected we go here.
			 * Feel free to add functionality if needed.
			*/
			batteryState = Battery_START;
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
			break;
 8001c84:	bf00      	nop
	}
	return batteryState;
 8001c86:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c88:	781b      	ldrb	r3, [r3, #0]

}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000280 	.word	0x20000280

08001c9c <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001ca4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ca8:	2100      	movs	r1, #0
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ff4c 	bl	8001b48 <Write16>
	HAL_Delay(1);
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f002 ff1d 	bl	8004af0 <HAL_Delay>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2105      	movs	r1, #5
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff39 	bl	8001b48 <Write16>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001cea:	887b      	ldrh	r3, [r7, #2]
 8001cec:	461a      	mov	r2, r3
 8001cee:	2100      	movs	r1, #0
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff29 	bl	8001b48 <Write16>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001d08:	f643 139f 	movw	r3, #14751	@ 0x399f
 8001d0c:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <INA219_setCalibration_32V_2A+0x40>)
 8001d10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d14:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <INA219_setCalibration_32V_2A+0x44>)
 8001d18:	220a      	movs	r2, #10
 8001d1a:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <INA219_setCalibration_32V_2A+0x48>)
 8001d1e:	2202      	movs	r2, #2
 8001d20:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <INA219_setCalibration_32V_2A+0x40>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ffc8 	bl	8001cbe <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8001d2e:	89fb      	ldrh	r3, [r7, #14]
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffd3 	bl	8001cde <INA219_setConfig>
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000282 	.word	0x20000282
 8001d44:	20000284 	.word	0x20000284
 8001d48:	20000286 	.word	0x20000286

08001d4c <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	4613      	mov	r3, r2
 8001d58:	71fb      	strb	r3, [r7, #7]
	isFirst = false; // set global var used by INA219_GetMiliWattMinutes
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <INA219_Init+0x78>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
	ina219->ina219_i2c = i2c;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <INA219_Init+0x7c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001d72:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <INA219_Init+0x80>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	b299      	uxth	r1, r3
 8001d80:	2302      	movs	r3, #2
 8001d82:	2203      	movs	r2, #3
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f004 fa81 	bl	800628c <HAL_I2C_IsDeviceReady>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d111      	bne.n	8001db8 <INA219_Init+0x6c>
	{
		// just to initialize our state machine.
		//The numbers 0.0f and 1.0f is just to call the healthcheck function.
		//Feel free to change this if you want. This function should be called in your main function to be polled.
		batteryState = Battery_START; // go to starting position.
 8001d94:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <INA219_Init+0x84>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
		INA219_HealthCheck(ina219,0.0f,1.0f );
 8001d9a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001d9e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8001dd4 <INA219_Init+0x88>
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff ff32 	bl	8001c0c <INA219_HealthCheck>
		INA219_Reset(ina219);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff ff77 	bl	8001c9c <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f7ff ffa6 	bl	8001d00 <INA219_setCalibration_32V_2A>

		return 1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <INA219_Init+0x6e>
	}

	else
	{
		return 0;
 8001db8:	2300      	movs	r3, #0
	}
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000281 	.word	0x20000281
 8001dc8:	20000284 	.word	0x20000284
 8001dcc:	20000286 	.word	0x20000286
 8001dd0:	20000280 	.word	0x20000280
 8001dd4:	00000000 	.word	0x00000000

08001dd8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dde:	463b      	mov	r3, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dea:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001dec:	4a21      	ldr	r2, [pc, #132]	@ (8001e74 <MX_ADC1_Init+0x9c>)
 8001dee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e10:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e16:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e18:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <MX_ADC1_Init+0xa0>)
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e22:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e36:	480e      	ldr	r0, [pc, #56]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e38:	f002 fe7e 	bl	8004b38 <HAL_ADC_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e42:	f001 fac1 	bl	80033c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e52:	463b      	mov	r3, r7
 8001e54:	4619      	mov	r1, r3
 8001e56:	4806      	ldr	r0, [pc, #24]	@ (8001e70 <MX_ADC1_Init+0x98>)
 8001e58:	f003 f818 	bl	8004e8c <HAL_ADC_ConfigChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001e62:	f001 fab1 	bl	80033c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000288 	.word	0x20000288
 8001e74:	40012000 	.word	0x40012000
 8001e78:	0f000001 	.word	0x0f000001

08001e7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	@ 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a15      	ldr	r2, [pc, #84]	@ (8001ef0 <HAL_ADC_MspInit+0x74>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d123      	bne.n	8001ee6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_ADC_MspInit+0x78>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	4a14      	ldr	r2, [pc, #80]	@ (8001ef4 <HAL_ADC_MspInit+0x78>)
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eaa:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <HAL_ADC_MspInit+0x78>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <HAL_ADC_MspInit+0x78>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <HAL_ADC_MspInit+0x78>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <HAL_ADC_MspInit+0x78>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <HAL_ADC_MspInit+0x7c>)
 8001ee2:	f003 fb35 	bl	8005550 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	3728      	adds	r7, #40	@ 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40012000 	.word	0x40012000
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020000 	.word	0x40020000

08001efc <SELECT>:
#define SD_CS_GPIO_Port GPIOE
#define SD_CS_Pin GPIO_PIN_11

/* SPI Chip Select */
static void SELECT(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f06:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <SELECT+0x14>)
 8001f08:	f003 fcce 	bl	80058a8 <HAL_GPIO_WritePin>
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000

08001f14 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f1e:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <DESELECT+0x14>)
 8001f20:	f003 fcc2 	bl	80058a8 <HAL_GPIO_WritePin>
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000

08001f2c <SPI_TxByte>:


static void SPI_TxByte(BYTE data)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f36:	bf00      	nop
 8001f38:	4808      	ldr	r0, [pc, #32]	@ (8001f5c <SPI_TxByte+0x30>)
 8001f3a:	f006 fcbf 	bl	80088bc <HAL_SPI_GetState>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d1f9      	bne.n	8001f38 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001f44:	1df9      	adds	r1, r7, #7
 8001f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <SPI_TxByte+0x30>)
 8001f4e:	f006 f91e 	bl	800818e <HAL_SPI_Transmit>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200029e0 	.word	0x200029e0

08001f60 <SPI_RxByte>:


static uint8_t SPI_RxByte(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001f66:	23ff      	movs	r3, #255	@ 0xff
 8001f68:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001f6e:	bf00      	nop
 8001f70:	4809      	ldr	r0, [pc, #36]	@ (8001f98 <SPI_RxByte+0x38>)
 8001f72:	f006 fca3 	bl	80088bc <HAL_SPI_GetState>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d1f9      	bne.n	8001f70 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001f7c:	1dba      	adds	r2, r7, #6
 8001f7e:	1df9      	adds	r1, r7, #7
 8001f80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2301      	movs	r3, #1
 8001f88:	4803      	ldr	r0, [pc, #12]	@ (8001f98 <SPI_RxByte+0x38>)
 8001f8a:	f006 fa75 	bl	8008478 <HAL_SPI_TransmitReceive>

  return data;
 8001f8e:	79bb      	ldrb	r3, [r7, #6]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200029e0 	.word	0x200029e0

08001f9c <SPI_RxBytePtr>:


static void SPI_RxBytePtr(uint8_t *buff)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001fa4:	f7ff ffdc 	bl	8001f60 <SPI_RxByte>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	701a      	strb	r2, [r3, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <SD_ReadyWait>:


static uint8_t SD_ReadyWait(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  uint8_t res;

   Timer2 = 50;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <SD_ReadyWait+0x34>)
 8001fc0:	2232      	movs	r2, #50	@ 0x32
 8001fc2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001fc4:	f7ff ffcc 	bl	8001f60 <SPI_RxByte>

  do
  {
     res = SPI_RxByte();
 8001fc8:	f7ff ffca 	bl	8001f60 <SPI_RxByte>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	2bff      	cmp	r3, #255	@ 0xff
 8001fd4:	d004      	beq.n	8001fe0 <SD_ReadyWait+0x28>
 8001fd6:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <SD_ReadyWait+0x34>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f3      	bne.n	8001fc8 <SD_ReadyWait+0x10>

  return res;
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20002a46 	.word	0x20002a46

08001ff0 <SD_PowerOn>:

 static void SD_PowerOn(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001ff6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001ffa:	617b      	str	r3, [r7, #20]

   DESELECT();
 8001ffc:	f7ff ff8a 	bl	8001f14 <DESELECT>

  for(int i = 0; i < 10; i++)
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	e005      	b.n	8002012 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8002006:	20ff      	movs	r0, #255	@ 0xff
 8002008:	f7ff ff90 	bl	8001f2c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	3301      	adds	r3, #1
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b09      	cmp	r3, #9
 8002016:	ddf6      	ble.n	8002006 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8002018:	f7ff ff70 	bl	8001efc <SELECT>

   cmd_arg[0] = (CMD0 | 0x40);
 800201c:	2340      	movs	r3, #64	@ 0x40
 800201e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8002030:	2395      	movs	r3, #149	@ 0x95
 8002032:	727b      	strb	r3, [r7, #9]

   for (int i = 0; i < 6; i++)
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	e009      	b.n	800204e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800203a:	1d3a      	adds	r2, r7, #4
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff72 	bl	8001f2c <SPI_TxByte>
   for (int i = 0; i < 6; i++)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3301      	adds	r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b05      	cmp	r3, #5
 8002052:	ddf2      	ble.n	800203a <SD_PowerOn+0x4a>
  }

   while ((SPI_RxByte() != 0x01) && Count)
 8002054:	e002      	b.n	800205c <SD_PowerOn+0x6c>
  {
    Count--;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3b01      	subs	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
   while ((SPI_RxByte() != 0x01) && Count)
 800205c:	f7ff ff80 	bl	8001f60 <SPI_RxByte>
 8002060:	4603      	mov	r3, r0
 8002062:	2b01      	cmp	r3, #1
 8002064:	d002      	beq.n	800206c <SD_PowerOn+0x7c>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f4      	bne.n	8002056 <SD_PowerOn+0x66>
  }

  DESELECT();
 800206c:	f7ff ff52 	bl	8001f14 <DESELECT>
  SPI_TxByte(0XFF);
 8002070:	20ff      	movs	r0, #255	@ 0xff
 8002072:	f7ff ff5b 	bl	8001f2c <SPI_TxByte>

  PowerFlag = 1;
 8002076:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <SD_PowerOn+0x94>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
}
 800207c:	bf00      	nop
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	200002d1 	.word	0x200002d1

08002088 <SD_PowerOff>:

 static void SD_PowerOff(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <SD_PowerOff+0x14>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	200002d1 	.word	0x200002d1

080020a0 <SD_CheckPower>:

 static uint8_t SD_CheckPower(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80020a4:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <SD_CheckPower+0x14>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	200002d1 	.word	0x200002d1

080020b8 <SD_RxDataBlock>:

 static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint8_t token;

   Timer1 = 10;
 80020c2:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <SD_RxDataBlock+0x68>)
 80020c4:	220a      	movs	r2, #10
 80020c6:	701a      	strb	r2, [r3, #0]

  do
  {
    token = SPI_RxByte();
 80020c8:	f7ff ff4a 	bl	8001f60 <SPI_RxByte>
 80020cc:	4603      	mov	r3, r0
 80020ce:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	2bff      	cmp	r3, #255	@ 0xff
 80020d4:	d104      	bne.n	80020e0 <SD_RxDataBlock+0x28>
 80020d6:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <SD_RxDataBlock+0x68>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f3      	bne.n	80020c8 <SD_RxDataBlock+0x10>


  if(token != 0xFE)
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	2bfe      	cmp	r3, #254	@ 0xfe
 80020e4:	d001      	beq.n	80020ea <SD_RxDataBlock+0x32>
    return FALSE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e016      	b.n	8002118 <SD_RxDataBlock+0x60>

  do
  {
    SPI_RxBytePtr(buff++);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff53 	bl	8001f9c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff4d 	bl	8001f9c <SPI_RxBytePtr>
  } while(btr -= 2);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	3b02      	subs	r3, #2
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1ed      	bne.n	80020ea <SD_RxDataBlock+0x32>

  SPI_RxByte();
 800210e:	f7ff ff27 	bl	8001f60 <SPI_RxByte>
  SPI_RxByte();
 8002112:	f7ff ff25 	bl	8001f60 <SPI_RxByte>

  return TRUE;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20002a45 	.word	0x20002a45

08002124 <SD_TxDataBlock>:


#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	737b      	strb	r3, [r7, #13]

  if (SD_ReadyWait() != 0xFF)
 8002134:	f7ff ff40 	bl	8001fb8 <SD_ReadyWait>
 8002138:	4603      	mov	r3, r0
 800213a:	2bff      	cmp	r3, #255	@ 0xff
 800213c:	d001      	beq.n	8002142 <SD_TxDataBlock+0x1e>
    return FALSE;
 800213e:	2300      	movs	r3, #0
 8002140:	e040      	b.n	80021c4 <SD_TxDataBlock+0xa0>

  SPI_TxByte(token);
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fef1 	bl	8001f2c <SPI_TxByte>

  if (token != 0xFD)
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	2bfd      	cmp	r3, #253	@ 0xfd
 800214e:	d031      	beq.n	80021b4 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	73bb      	strb	r3, [r7, #14]

    do
    {
      SPI_TxByte(*buff++);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fee5 	bl	8001f2c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fede 	bl	8001f2c <SPI_TxByte>
    } while (--wc);
 8002170:	7bbb      	ldrb	r3, [r7, #14]
 8002172:	3b01      	subs	r3, #1
 8002174:	73bb      	strb	r3, [r7, #14]
 8002176:	7bbb      	ldrb	r3, [r7, #14]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1eb      	bne.n	8002154 <SD_TxDataBlock+0x30>

    SPI_RxByte();
 800217c:	f7ff fef0 	bl	8001f60 <SPI_RxByte>
    SPI_RxByte();
 8002180:	f7ff feee 	bl	8001f60 <SPI_RxByte>

    while (i <= 64)
 8002184:	e00b      	b.n	800219e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8002186:	f7ff feeb 	bl	8001f60 <SPI_RxByte>
 800218a:	4603      	mov	r3, r0
 800218c:	73fb      	strb	r3, [r7, #15]

      if ((resp & 0x1F) == 0x05)
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2b05      	cmp	r3, #5
 8002196:	d006      	beq.n	80021a6 <SD_TxDataBlock+0x82>
        break;

      i++;
 8002198:	7b7b      	ldrb	r3, [r7, #13]
 800219a:	3301      	adds	r3, #1
 800219c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800219e:	7b7b      	ldrb	r3, [r7, #13]
 80021a0:	2b40      	cmp	r3, #64	@ 0x40
 80021a2:	d9f0      	bls.n	8002186 <SD_TxDataBlock+0x62>
 80021a4:	e000      	b.n	80021a8 <SD_TxDataBlock+0x84>
        break;
 80021a6:	bf00      	nop
    }

    while (SPI_RxByte() == 0);
 80021a8:	bf00      	nop
 80021aa:	f7ff fed9 	bl	8001f60 <SPI_RxByte>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0fa      	beq.n	80021aa <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d101      	bne.n	80021c2 <SD_TxDataBlock+0x9e>
    return TRUE;
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  if (SD_ReadyWait() != 0xFF)
 80021d8:	f7ff feee 	bl	8001fb8 <SD_ReadyWait>
 80021dc:	4603      	mov	r3, r0
 80021de:	2bff      	cmp	r3, #255	@ 0xff
 80021e0:	d001      	beq.n	80021e6 <SD_SendCmd+0x1a>
    return 0xFF;
 80021e2:	23ff      	movs	r3, #255	@ 0xff
 80021e4:	e040      	b.n	8002268 <SD_SendCmd+0x9c>

  SPI_TxByte(cmd); 			/* Command */
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fe9f 	bl	8001f2c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	0e1b      	lsrs	r3, r3, #24
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fe99 	bl	8001f2c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fe93 	bl	8001f2c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fe8d 	bl	8001f2c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fe88 	bl	8001f2c <SPI_TxByte>

  crc = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	2b40      	cmp	r3, #64	@ 0x40
 8002224:	d101      	bne.n	800222a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8002226:	2395      	movs	r3, #149	@ 0x95
 8002228:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b48      	cmp	r3, #72	@ 0x48
 800222e:	d101      	bne.n	8002234 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002230:	2387      	movs	r3, #135	@ 0x87
 8002232:	73fb      	strb	r3, [r7, #15]

  /* CRC */
  SPI_TxByte(crc);
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fe78 	bl	8001f2c <SPI_TxByte>

  if (cmd == CMD12)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b4c      	cmp	r3, #76	@ 0x4c
 8002240:	d101      	bne.n	8002246 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8002242:	f7ff fe8d 	bl	8001f60 <SPI_RxByte>

  uint8_t n = 10;
 8002246:	230a      	movs	r3, #10
 8002248:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800224a:	f7ff fe89 	bl	8001f60 <SPI_RxByte>
 800224e:	4603      	mov	r3, r0
 8002250:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002252:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002256:	2b00      	cmp	r3, #0
 8002258:	da05      	bge.n	8002266 <SD_SendCmd+0x9a>
 800225a:	7bbb      	ldrb	r3, [r7, #14]
 800225c:	3b01      	subs	r3, #1
 800225e:	73bb      	strb	r3, [r7, #14]
 8002260:	7bbb      	ldrb	r3, [r7, #14]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f1      	bne.n	800224a <SD_SendCmd+0x7e>

  return res;
 8002266:	7b7b      	ldrb	r3, [r7, #13]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <SD_disk_initialize>:


DSTATUS SD_disk_initialize(BYTE drv)
{
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  if(drv)
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8002280:	2301      	movs	r3, #1
 8002282:	e0d5      	b.n	8002430 <SD_disk_initialize+0x1c0>

  if(Stat & STA_NODISK)
 8002284:	4b6c      	ldr	r3, [pc, #432]	@ (8002438 <SD_disk_initialize+0x1c8>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <SD_disk_initialize+0x2a>
    return Stat;
 8002292:	4b69      	ldr	r3, [pc, #420]	@ (8002438 <SD_disk_initialize+0x1c8>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	e0ca      	b.n	8002430 <SD_disk_initialize+0x1c0>

  SD_PowerOn();
 800229a:	f7ff fea9 	bl	8001ff0 <SD_PowerOn>

  SELECT();
 800229e:	f7ff fe2d 	bl	8001efc <SELECT>

  type = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	73bb      	strb	r3, [r7, #14]

  if (SD_SendCmd(CMD0, 0) == 1)
 80022a6:	2100      	movs	r1, #0
 80022a8:	2040      	movs	r0, #64	@ 0x40
 80022aa:	f7ff ff8f 	bl	80021cc <SD_SendCmd>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	f040 80a5 	bne.w	8002400 <SD_disk_initialize+0x190>
  {
    Timer1 = 100;
 80022b6:	4b61      	ldr	r3, [pc, #388]	@ (800243c <SD_disk_initialize+0x1cc>)
 80022b8:	2264      	movs	r2, #100	@ 0x64
 80022ba:	701a      	strb	r2, [r3, #0]

    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80022bc:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80022c0:	2048      	movs	r0, #72	@ 0x48
 80022c2:	f7ff ff83 	bl	80021cc <SD_SendCmd>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d158      	bne.n	800237e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e00c      	b.n	80022ec <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80022d2:	7bfc      	ldrb	r4, [r7, #15]
 80022d4:	f7ff fe44 	bl	8001f60 <SPI_RxByte>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	f104 0310 	add.w	r3, r4, #16
 80022e0:	443b      	add	r3, r7
 80022e2:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	3301      	adds	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d9ef      	bls.n	80022d2 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80022f2:	7abb      	ldrb	r3, [r7, #10]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	f040 8083 	bne.w	8002400 <SD_disk_initialize+0x190>
 80022fa:	7afb      	ldrb	r3, [r7, #11]
 80022fc:	2baa      	cmp	r3, #170	@ 0xaa
 80022fe:	d17f      	bne.n	8002400 <SD_disk_initialize+0x190>
      {
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002300:	2100      	movs	r1, #0
 8002302:	2077      	movs	r0, #119	@ 0x77
 8002304:	f7ff ff62 	bl	80021cc <SD_SendCmd>
 8002308:	4603      	mov	r3, r0
 800230a:	2b01      	cmp	r3, #1
 800230c:	d807      	bhi.n	800231e <SD_disk_initialize+0xae>
 800230e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002312:	2069      	movs	r0, #105	@ 0x69
 8002314:	f7ff ff5a 	bl	80021cc <SD_SendCmd>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800231e:	4b47      	ldr	r3, [pc, #284]	@ (800243c <SD_disk_initialize+0x1cc>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1eb      	bne.n	8002300 <SD_disk_initialize+0x90>
 8002328:	e000      	b.n	800232c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800232a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800232c:	4b43      	ldr	r3, [pc, #268]	@ (800243c <SD_disk_initialize+0x1cc>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d064      	beq.n	8002400 <SD_disk_initialize+0x190>
 8002336:	2100      	movs	r1, #0
 8002338:	207a      	movs	r0, #122	@ 0x7a
 800233a:	f7ff ff47 	bl	80021cc <SD_SendCmd>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d15d      	bne.n	8002400 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e00c      	b.n	8002364 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800234a:	7bfc      	ldrb	r4, [r7, #15]
 800234c:	f7ff fe08 	bl	8001f60 <SPI_RxByte>
 8002350:	4603      	mov	r3, r0
 8002352:	461a      	mov	r2, r3
 8002354:	f104 0310 	add.w	r3, r4, #16
 8002358:	443b      	add	r3, r7
 800235a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	3301      	adds	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d9ef      	bls.n	800234a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800236a:	7a3b      	ldrb	r3, [r7, #8]
 800236c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <SD_disk_initialize+0x108>
 8002374:	2306      	movs	r3, #6
 8002376:	e000      	b.n	800237a <SD_disk_initialize+0x10a>
 8002378:	2302      	movs	r3, #2
 800237a:	73bb      	strb	r3, [r7, #14]
 800237c:	e040      	b.n	8002400 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800237e:	2100      	movs	r1, #0
 8002380:	2077      	movs	r0, #119	@ 0x77
 8002382:	f7ff ff23 	bl	80021cc <SD_SendCmd>
 8002386:	4603      	mov	r3, r0
 8002388:	2b01      	cmp	r3, #1
 800238a:	d808      	bhi.n	800239e <SD_disk_initialize+0x12e>
 800238c:	2100      	movs	r1, #0
 800238e:	2069      	movs	r0, #105	@ 0x69
 8002390:	f7ff ff1c 	bl	80021cc <SD_SendCmd>
 8002394:	4603      	mov	r3, r0
 8002396:	2b01      	cmp	r3, #1
 8002398:	d801      	bhi.n	800239e <SD_disk_initialize+0x12e>
 800239a:	2302      	movs	r3, #2
 800239c:	e000      	b.n	80023a0 <SD_disk_initialize+0x130>
 800239e:	2301      	movs	r3, #1
 80023a0:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80023a2:	7bbb      	ldrb	r3, [r7, #14]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d10e      	bne.n	80023c6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80023a8:	2100      	movs	r1, #0
 80023aa:	2077      	movs	r0, #119	@ 0x77
 80023ac:	f7ff ff0e 	bl	80021cc <SD_SendCmd>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d80e      	bhi.n	80023d4 <SD_disk_initialize+0x164>
 80023b6:	2100      	movs	r1, #0
 80023b8:	2069      	movs	r0, #105	@ 0x69
 80023ba:	f7ff ff07 	bl	80021cc <SD_SendCmd>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80023c4:	e00d      	b.n	80023e2 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80023c6:	2100      	movs	r1, #0
 80023c8:	2041      	movs	r0, #65	@ 0x41
 80023ca:	f7ff feff 	bl	80021cc <SD_SendCmd>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80023d4:	4b19      	ldr	r3, [pc, #100]	@ (800243c <SD_disk_initialize+0x1cc>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1e1      	bne.n	80023a2 <SD_disk_initialize+0x132>
 80023de:	e000      	b.n	80023e2 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80023e0:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80023e2:	4b16      	ldr	r3, [pc, #88]	@ (800243c <SD_disk_initialize+0x1cc>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <SD_disk_initialize+0x18c>
 80023ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023f0:	2050      	movs	r0, #80	@ 0x50
 80023f2:	f7ff feeb 	bl	80021cc <SD_SendCmd>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <SD_disk_initialize+0x190>
      {
        type = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8002400:	4a0f      	ldr	r2, [pc, #60]	@ (8002440 <SD_disk_initialize+0x1d0>)
 8002402:	7bbb      	ldrb	r3, [r7, #14]
 8002404:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8002406:	f7ff fd85 	bl	8001f14 <DESELECT>

  SPI_RxByte();
 800240a:	f7ff fda9 	bl	8001f60 <SPI_RxByte>

  if (type)
 800240e:	7bbb      	ldrb	r3, [r7, #14]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8002414:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <SD_disk_initialize+0x1c8>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	b2da      	uxtb	r2, r3
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <SD_disk_initialize+0x1c8>)
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e001      	b.n	800242a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002426:	f7ff fe2f 	bl	8002088 <SD_PowerOff>
  }

  return Stat;
 800242a:	4b03      	ldr	r3, [pc, #12]	@ (8002438 <SD_disk_initialize+0x1c8>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	b2db      	uxtb	r3, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bd90      	pop	{r4, r7, pc}
 8002438:	20000000 	.word	0x20000000
 800243c:	20002a45 	.word	0x20002a45
 8002440:	200002d0 	.word	0x200002d0

08002444 <SD_disk_status>:

DSTATUS SD_disk_status(BYTE drv)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <SD_disk_status+0x14>
    return STA_NOINIT;
 8002454:	2301      	movs	r3, #1
 8002456:	e002      	b.n	800245e <SD_disk_status+0x1a>

  return Stat;
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <SD_disk_status+0x28>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000000 	.word	0x20000000

08002470 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	4603      	mov	r3, r0
 800247e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <SD_disk_read+0x1c>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <SD_disk_read+0x20>
    return RES_PARERR;
 800248c:	2304      	movs	r3, #4
 800248e:	e051      	b.n	8002534 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8002490:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <SD_disk_read+0xcc>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800249e:	2303      	movs	r3, #3
 80024a0:	e048      	b.n	8002534 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80024a2:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <SD_disk_read+0xd0>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <SD_disk_read+0x44>
    sector *= 512;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	025b      	lsls	r3, r3, #9
 80024b2:	607b      	str	r3, [r7, #4]

  SELECT();
 80024b4:	f7ff fd22 	bl	8001efc <SELECT>

  if (count == 1)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d111      	bne.n	80024e2 <SD_disk_read+0x72>
  {

    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	2051      	movs	r0, #81	@ 0x51
 80024c2:	f7ff fe83 	bl	80021cc <SD_SendCmd>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d129      	bne.n	8002520 <SD_disk_read+0xb0>
 80024cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024d0:	68b8      	ldr	r0, [r7, #8]
 80024d2:	f7ff fdf1 	bl	80020b8 <SD_RxDataBlock>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d021      	beq.n	8002520 <SD_disk_read+0xb0>
      count = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	e01e      	b.n	8002520 <SD_disk_read+0xb0>
  }
  else
  {
    if (SD_SendCmd(CMD18, sector) == 0)
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	2052      	movs	r0, #82	@ 0x52
 80024e6:	f7ff fe71 	bl	80021cc <SD_SendCmd>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d117      	bne.n	8002520 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80024f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024f4:	68b8      	ldr	r0, [r7, #8]
 80024f6:	f7ff fddf 	bl	80020b8 <SD_RxDataBlock>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002506:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	3b01      	subs	r3, #1
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ed      	bne.n	80024f0 <SD_disk_read+0x80>
 8002514:	e000      	b.n	8002518 <SD_disk_read+0xa8>
          break;
 8002516:	bf00      	nop

      SD_SendCmd(CMD12, 0);
 8002518:	2100      	movs	r1, #0
 800251a:	204c      	movs	r0, #76	@ 0x4c
 800251c:	f7ff fe56 	bl	80021cc <SD_SendCmd>
    }
  }

  DESELECT();
 8002520:	f7ff fcf8 	bl	8001f14 <DESELECT>
  SPI_RxByte();
 8002524:	f7ff fd1c 	bl	8001f60 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000000 	.word	0x20000000
 8002540:	200002d0 	.word	0x200002d0

08002544 <SD_disk_write>:

#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <SD_disk_write+0x1c>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <SD_disk_write+0x20>
    return RES_PARERR;
 8002560:	2304      	movs	r3, #4
 8002562:	e06b      	b.n	800263c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8002564:	4b37      	ldr	r3, [pc, #220]	@ (8002644 <SD_disk_write+0x100>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002572:	2303      	movs	r3, #3
 8002574:	e062      	b.n	800263c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8002576:	4b33      	ldr	r3, [pc, #204]	@ (8002644 <SD_disk_write+0x100>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002584:	2302      	movs	r3, #2
 8002586:	e059      	b.n	800263c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8002588:	4b2f      	ldr	r3, [pc, #188]	@ (8002648 <SD_disk_write+0x104>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <SD_disk_write+0x56>
    sector *= 512;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	025b      	lsls	r3, r3, #9
 8002598:	607b      	str	r3, [r7, #4]

  SELECT();
 800259a:	f7ff fcaf 	bl	8001efc <SELECT>

  if (count == 1)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d110      	bne.n	80025c6 <SD_disk_write+0x82>
  {
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	2058      	movs	r0, #88	@ 0x58
 80025a8:	f7ff fe10 	bl	80021cc <SD_SendCmd>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d13a      	bne.n	8002628 <SD_disk_write+0xe4>
 80025b2:	21fe      	movs	r1, #254	@ 0xfe
 80025b4:	68b8      	ldr	r0, [r7, #8]
 80025b6:	f7ff fdb5 	bl	8002124 <SD_TxDataBlock>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d033      	beq.n	8002628 <SD_disk_write+0xe4>
      count = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	e030      	b.n	8002628 <SD_disk_write+0xe4>
  }
  else
  {
    if (CardType & 2)
 80025c6:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <SD_disk_write+0x104>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80025d2:	2100      	movs	r1, #0
 80025d4:	2077      	movs	r0, #119	@ 0x77
 80025d6:	f7ff fdf9 	bl	80021cc <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80025da:	6839      	ldr	r1, [r7, #0]
 80025dc:	2057      	movs	r0, #87	@ 0x57
 80025de:	f7ff fdf5 	bl	80021cc <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	2059      	movs	r0, #89	@ 0x59
 80025e6:	f7ff fdf1 	bl	80021cc <SD_SendCmd>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11b      	bne.n	8002628 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80025f0:	21fc      	movs	r1, #252	@ 0xfc
 80025f2:	68b8      	ldr	r0, [r7, #8]
 80025f4:	f7ff fd96 	bl	8002124 <SD_TxDataBlock>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002604:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	3b01      	subs	r3, #1
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ee      	bne.n	80025f0 <SD_disk_write+0xac>
 8002612:	e000      	b.n	8002616 <SD_disk_write+0xd2>
          break;
 8002614:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8002616:	21fd      	movs	r1, #253	@ 0xfd
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fd83 	bl	8002124 <SD_TxDataBlock>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <SD_disk_write+0xe4>
      {
        count = 1;
 8002624:	2301      	movs	r3, #1
 8002626:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8002628:	f7ff fc74 	bl	8001f14 <DESELECT>
  SPI_RxByte();
 800262c:	f7ff fc98 	bl	8001f60 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf14      	ite	ne
 8002636:	2301      	movne	r3, #1
 8002638:	2300      	moveq	r3, #0
 800263a:	b2db      	uxtb	r3, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000000 	.word	0x20000000
 8002648:	200002d0 	.word	0x200002d0

0800264c <SD_disk_ioctl>:
#endif /* _READONLY */

DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b08b      	sub	sp, #44	@ 0x2c
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	603a      	str	r2, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
 8002658:	460b      	mov	r3, r1
 800265a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002666:	2304      	movs	r3, #4
 8002668:	e119      	b.n	800289e <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8002670:	79bb      	ldrb	r3, [r7, #6]
 8002672:	2b05      	cmp	r3, #5
 8002674:	d129      	bne.n	80026ca <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d017      	beq.n	80026ae <SD_disk_ioctl+0x62>
 800267e:	2b02      	cmp	r3, #2
 8002680:	dc1f      	bgt.n	80026c2 <SD_disk_ioctl+0x76>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <SD_disk_ioctl+0x40>
 8002686:	2b01      	cmp	r3, #1
 8002688:	d00b      	beq.n	80026a2 <SD_disk_ioctl+0x56>
 800268a:	e01a      	b.n	80026c2 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800268c:	f7ff fd08 	bl	80020a0 <SD_CheckPower>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002696:	f7ff fcf7 	bl	8002088 <SD_PowerOff>
      res = RES_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80026a0:	e0fb      	b.n	800289a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 80026a2:	f7ff fca5 	bl	8001ff0 <SD_PowerOn>
      res = RES_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80026ac:	e0f5      	b.n	800289a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	1c5c      	adds	r4, r3, #1
 80026b2:	f7ff fcf5 	bl	80020a0 <SD_CheckPower>
 80026b6:	4603      	mov	r3, r0
 80026b8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80026c0:	e0eb      	b.n	800289a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 80026c2:	2304      	movs	r3, #4
 80026c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80026c8:	e0e7      	b.n	800289a <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80026ca:	4b77      	ldr	r3, [pc, #476]	@ (80028a8 <SD_disk_ioctl+0x25c>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0e0      	b.n	800289e <SD_disk_ioctl+0x252>

    SELECT();
 80026dc:	f7ff fc0e 	bl	8001efc <SELECT>

    switch (ctrl)
 80026e0:	79bb      	ldrb	r3, [r7, #6]
 80026e2:	2b0d      	cmp	r3, #13
 80026e4:	f200 80ca 	bhi.w	800287c <SD_disk_ioctl+0x230>
 80026e8:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <SD_disk_ioctl+0xa4>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	080027e7 	.word	0x080027e7
 80026f4:	08002729 	.word	0x08002729
 80026f8:	080027d7 	.word	0x080027d7
 80026fc:	0800287d 	.word	0x0800287d
 8002700:	0800287d 	.word	0x0800287d
 8002704:	0800287d 	.word	0x0800287d
 8002708:	0800287d 	.word	0x0800287d
 800270c:	0800287d 	.word	0x0800287d
 8002710:	0800287d 	.word	0x0800287d
 8002714:	0800287d 	.word	0x0800287d
 8002718:	0800287d 	.word	0x0800287d
 800271c:	080027f9 	.word	0x080027f9
 8002720:	0800281d 	.word	0x0800281d
 8002724:	08002841 	.word	0x08002841
    {
    case GET_SECTOR_COUNT:
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002728:	2100      	movs	r1, #0
 800272a:	2049      	movs	r0, #73	@ 0x49
 800272c:	f7ff fd4e 	bl	80021cc <SD_SendCmd>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 80a6 	bne.w	8002884 <SD_disk_ioctl+0x238>
 8002738:	f107 030c 	add.w	r3, r7, #12
 800273c:	2110      	movs	r1, #16
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fcba 	bl	80020b8 <SD_RxDataBlock>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 809c 	beq.w	8002884 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 800274c:	7b3b      	ldrb	r3, [r7, #12]
 800274e:	099b      	lsrs	r3, r3, #6
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d10d      	bne.n	8002772 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002756:	7d7b      	ldrb	r3, [r7, #21]
 8002758:	461a      	mov	r2, r3
 800275a:	7d3b      	ldrb	r3, [r7, #20]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	b29b      	uxth	r3, r3
 8002760:	4413      	add	r3, r2
 8002762:	b29b      	uxth	r3, r3
 8002764:	3301      	adds	r3, #1
 8002766:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002768:	8bfb      	ldrh	r3, [r7, #30]
 800276a:	029a      	lsls	r2, r3, #10
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e02d      	b.n	80027ce <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002772:	7c7b      	ldrb	r3, [r7, #17]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	b2da      	uxtb	r2, r3
 800277a:	7dbb      	ldrb	r3, [r7, #22]
 800277c:	09db      	lsrs	r3, r3, #7
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4413      	add	r3, r2
 8002782:	b2da      	uxtb	r2, r3
 8002784:	7d7b      	ldrb	r3, [r7, #21]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f003 0306 	and.w	r3, r3, #6
 800278e:	b2db      	uxtb	r3, r3
 8002790:	4413      	add	r3, r2
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3302      	adds	r3, #2
 8002796:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800279a:	7d3b      	ldrb	r3, [r7, #20]
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	7cfb      	ldrb	r3, [r7, #19]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	7cbb      	ldrb	r3, [r7, #18]
 80027ae:	029b      	lsls	r3, r3, #10
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80027c0:	8bfa      	ldrh	r2, [r7, #30]
 80027c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80027c6:	3b09      	subs	r3, #9
 80027c8:	409a      	lsls	r2, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80027d4:	e056      	b.n	8002884 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027dc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80027e4:	e055      	b.n	8002892 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF)
 80027e6:	f7ff fbe7 	bl	8001fb8 <SD_ReadyWait>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2bff      	cmp	r3, #255	@ 0xff
 80027ee:	d14b      	bne.n	8002888 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80027f6:	e047      	b.n	8002888 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80027f8:	2100      	movs	r1, #0
 80027fa:	2049      	movs	r0, #73	@ 0x49
 80027fc:	f7ff fce6 	bl	80021cc <SD_SendCmd>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d142      	bne.n	800288c <SD_disk_ioctl+0x240>
 8002806:	2110      	movs	r1, #16
 8002808:	6a38      	ldr	r0, [r7, #32]
 800280a:	f7ff fc55 	bl	80020b8 <SD_RxDataBlock>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d03b      	beq.n	800288c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800281a:	e037      	b.n	800288c <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800281c:	2100      	movs	r1, #0
 800281e:	204a      	movs	r0, #74	@ 0x4a
 8002820:	f7ff fcd4 	bl	80021cc <SD_SendCmd>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d132      	bne.n	8002890 <SD_disk_ioctl+0x244>
 800282a:	2110      	movs	r1, #16
 800282c:	6a38      	ldr	r0, [r7, #32]
 800282e:	f7ff fc43 	bl	80020b8 <SD_RxDataBlock>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d02b      	beq.n	8002890 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800283e:	e027      	b.n	8002890 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      if (SD_SendCmd(CMD58, 0) == 0)
 8002840:	2100      	movs	r1, #0
 8002842:	207a      	movs	r0, #122	@ 0x7a
 8002844:	f7ff fcc2 	bl	80021cc <SD_SendCmd>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 800284e:	2300      	movs	r3, #0
 8002850:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002854:	e00b      	b.n	800286e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8002856:	6a3c      	ldr	r4, [r7, #32]
 8002858:	1c63      	adds	r3, r4, #1
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	f7ff fb80 	bl	8001f60 <SPI_RxByte>
 8002860:	4603      	mov	r3, r0
 8002862:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002864:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002868:	3301      	adds	r3, #1
 800286a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800286e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002872:	2b03      	cmp	r3, #3
 8002874:	d9ef      	bls.n	8002856 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 800287c:	2304      	movs	r3, #4
 800287e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002882:	e006      	b.n	8002892 <SD_disk_ioctl+0x246>
      break;
 8002884:	bf00      	nop
 8002886:	e004      	b.n	8002892 <SD_disk_ioctl+0x246>
      break;
 8002888:	bf00      	nop
 800288a:	e002      	b.n	8002892 <SD_disk_ioctl+0x246>
      break;
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <SD_disk_ioctl+0x246>
      break;
 8002890:	bf00      	nop
    }

    DESELECT();
 8002892:	f7ff fb3f 	bl	8001f14 <DESELECT>
    SPI_RxByte();
 8002896:	f7ff fb63 	bl	8001f60 <SPI_RxByte>
  }

  return res;
 800289a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800289e:	4618      	mov	r0, r3
 80028a0:	372c      	adds	r7, #44	@ 0x2c
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000000 	.word	0x20000000

080028ac <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08e      	sub	sp, #56	@ 0x38
 80028b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	60da      	str	r2, [r3, #12]
 80028c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c2:	4b89      	ldr	r3, [pc, #548]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	4a88      	ldr	r2, [pc, #544]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028c8:	f043 0304 	orr.w	r3, r3, #4
 80028cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ce:	4b86      	ldr	r3, [pc, #536]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	623b      	str	r3, [r7, #32]
 80028d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028da:	4b83      	ldr	r3, [pc, #524]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	4a82      	ldr	r2, [pc, #520]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e6:	4b80      	ldr	r3, [pc, #512]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b7a      	ldr	r3, [pc, #488]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290a:	4b77      	ldr	r3, [pc, #476]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	4a76      	ldr	r2, [pc, #472]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	6313      	str	r3, [r2, #48]	@ 0x30
 8002916:	4b74      	ldr	r3, [pc, #464]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002922:	4b71      	ldr	r3, [pc, #452]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a70      	ldr	r2, [pc, #448]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002928:	f043 0320 	orr.w	r3, r3, #32
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800293a:	4b6b      	ldr	r3, [pc, #428]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002940:	f043 0310 	orr.w	r3, r3, #16
 8002944:	6313      	str	r3, [r2, #48]	@ 0x30
 8002946:	4b68      	ldr	r3, [pc, #416]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002952:	4b65      	ldr	r3, [pc, #404]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	4a64      	ldr	r2, [pc, #400]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002958:	f043 0308 	orr.w	r3, r3, #8
 800295c:	6313      	str	r3, [r2, #48]	@ 0x30
 800295e:	4b62      	ldr	r3, [pc, #392]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800296a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b5c      	ldr	r3, [pc, #368]	@ (8002ae8 <MX_GPIO_Init+0x23c>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002982:	2200      	movs	r2, #0
 8002984:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002988:	4858      	ldr	r0, [pc, #352]	@ (8002aec <MX_GPIO_Init+0x240>)
 800298a:	f002 ff8d 	bl	80058a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_OLED_Pin|ST7735_RES_Pin_Pin|ST7735_DC_Pin_Pin, GPIO_PIN_RESET);
 800298e:	2200      	movs	r2, #0
 8002990:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002994:	4856      	ldr	r0, [pc, #344]	@ (8002af0 <MX_GPIO_Init+0x244>)
 8002996:	f002 ff87 	bl	80058a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_BMP_Pin|CS_SDcard_Pin, GPIO_PIN_RESET);
 800299a:	2200      	movs	r2, #0
 800299c:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 80029a0:	4854      	ldr	r0, [pc, #336]	@ (8002af4 <MX_GPIO_Init+0x248>)
 80029a2:	f002 ff81 	bl	80058a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2140      	movs	r1, #64	@ 0x40
 80029aa:	4853      	ldr	r0, [pc, #332]	@ (8002af8 <MX_GPIO_Init+0x24c>)
 80029ac:	f002 ff7c 	bl	80058a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80029b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80029c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c4:	4619      	mov	r1, r3
 80029c6:	484d      	ldr	r0, [pc, #308]	@ (8002afc <MX_GPIO_Init+0x250>)
 80029c8:	f002 fdc2 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80029cc:	2332      	movs	r3, #50	@ 0x32
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d8:	2303      	movs	r3, #3
 80029da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029dc:	230b      	movs	r3, #11
 80029de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029e4:	4619      	mov	r1, r3
 80029e6:	4845      	ldr	r0, [pc, #276]	@ (8002afc <MX_GPIO_Init+0x250>)
 80029e8:	f002 fdb2 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80029ec:	2386      	movs	r3, #134	@ 0x86
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029fc:	230b      	movs	r3, #11
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a04:	4619      	mov	r1, r3
 8002a06:	483e      	ldr	r0, [pc, #248]	@ (8002b00 <MX_GPIO_Init+0x254>)
 8002a08:	f002 fda2 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002a0c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a12:	2301      	movs	r3, #1
 8002a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a22:	4619      	mov	r1, r3
 8002a24:	4831      	ldr	r0, [pc, #196]	@ (8002aec <MX_GPIO_Init+0x240>)
 8002a26:	f002 fd93 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_OLED_Pin ST7735_RES_Pin_Pin ST7735_DC_Pin_Pin */
  GPIO_InitStruct.Pin = CS_OLED_Pin|ST7735_RES_Pin_Pin|ST7735_DC_Pin_Pin;
 8002a2a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a30:	2301      	movs	r3, #1
 8002a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a40:	4619      	mov	r1, r3
 8002a42:	482b      	ldr	r0, [pc, #172]	@ (8002af0 <MX_GPIO_Init+0x244>)
 8002a44:	f002 fd84 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_BMP_Pin CS_SDcard_Pin */
  GPIO_InitStruct.Pin = CS_BMP_Pin|CS_SDcard_Pin;
 8002a48:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	2300      	movs	r3, #0
 8002a58:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4824      	ldr	r0, [pc, #144]	@ (8002af4 <MX_GPIO_Init+0x248>)
 8002a62:	f002 fd75 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002a66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a74:	2303      	movs	r3, #3
 8002a76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a78:	230b      	movs	r3, #11
 8002a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a80:	4619      	mov	r1, r3
 8002a82:	481a      	ldr	r0, [pc, #104]	@ (8002aec <MX_GPIO_Init+0x240>)
 8002a84:	f002 fd64 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002a88:	2340      	movs	r3, #64	@ 0x40
 8002a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4816      	ldr	r0, [pc, #88]	@ (8002af8 <MX_GPIO_Init+0x24c>)
 8002aa0:	f002 fd56 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002aa4:	2380      	movs	r3, #128	@ 0x80
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4810      	ldr	r0, [pc, #64]	@ (8002af8 <MX_GPIO_Init+0x24c>)
 8002ab8:	f002 fd4a 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002abc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ace:	230b      	movs	r3, #11
 8002ad0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4807      	ldr	r0, [pc, #28]	@ (8002af8 <MX_GPIO_Init+0x24c>)
 8002ada:	f002 fd39 	bl	8005550 <HAL_GPIO_Init>

}
 8002ade:	bf00      	nop
 8002ae0:	3738      	adds	r7, #56	@ 0x38
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40020400 	.word	0x40020400
 8002af0:	40021400 	.word	0x40021400
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40021800 	.word	0x40021800
 8002afc:	40020800 	.word	0x40020800
 8002b00:	40020000 	.word	0x40020000

08002b04 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002b7c <MX_I2C1_Init+0x78>)
 8002b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b10:	4a1b      	ldr	r2, [pc, #108]	@ (8002b80 <MX_I2C1_Init+0x7c>)
 8002b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b14:	4b18      	ldr	r3, [pc, #96]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b1a:	4b17      	ldr	r3, [pc, #92]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b20:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b26:	4b14      	ldr	r3, [pc, #80]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b32:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b38:	4b0f      	ldr	r3, [pc, #60]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b3e:	480e      	ldr	r0, [pc, #56]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b40:	f002 fecc 	bl	80058dc <HAL_I2C_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b4a:	f000 fc3d 	bl	80033c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4809      	ldr	r0, [pc, #36]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b52:	f003 ffd5 	bl	8006b00 <HAL_I2CEx_ConfigAnalogFilter>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b5c:	f000 fc34 	bl	80033c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b60:	2100      	movs	r1, #0
 8002b62:	4805      	ldr	r0, [pc, #20]	@ (8002b78 <MX_I2C1_Init+0x74>)
 8002b64:	f004 f817 	bl	8006b96 <HAL_I2CEx_ConfigDigitalFilter>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b6e:	f000 fc2b 	bl	80033c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200002d4 	.word	0x200002d4
 8002b7c:	40005400 	.word	0x40005400
 8002b80:	00808cd2 	.word	0x00808cd2

08002b84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b0aa      	sub	sp, #168	@ 0xa8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b9c:	f107 0310 	add.w	r3, r7, #16
 8002ba0:	2284      	movs	r2, #132	@ 0x84
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f00c fdb7 	bl	800f718 <memset>
  if(i2cHandle->Instance==I2C1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a22      	ldr	r2, [pc, #136]	@ (8002c38 <HAL_I2C_MspInit+0xb4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d13c      	bne.n	8002c2e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002bb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bb8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 fe48 	bl	8007858 <HAL_RCCEx_PeriphCLKConfig>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002bce:	f000 fbfb 	bl	80033c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <HAL_I2C_MspInit+0xb8>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	4a19      	ldr	r2, [pc, #100]	@ (8002c3c <HAL_I2C_MspInit+0xb8>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bde:	4b17      	ldr	r3, [pc, #92]	@ (8002c3c <HAL_I2C_MspInit+0xb8>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bf2:	2312      	movs	r3, #18
 8002bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c04:	2304      	movs	r3, #4
 8002c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002c0e:	4619      	mov	r1, r3
 8002c10:	480b      	ldr	r0, [pc, #44]	@ (8002c40 <HAL_I2C_MspInit+0xbc>)
 8002c12:	f002 fc9d 	bl	8005550 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <HAL_I2C_MspInit+0xb8>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	4a08      	ldr	r2, [pc, #32]	@ (8002c3c <HAL_I2C_MspInit+0xb8>)
 8002c1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c22:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <HAL_I2C_MspInit+0xb8>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002c2e:	bf00      	nop
 8002c30:	37a8      	adds	r7, #168	@ 0xa8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40005400 	.word	0x40005400
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40020400 	.word	0x40020400

08002c44 <SDcardInit>:
void OLEDdisplay(struct sensors *s);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDcardInit(char* folder_name) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af04      	add	r7, sp, #16
 8002c4a:	6078      	str	r0, [r7, #4]
    FRESULT res;
    uint8_t retry_count = 5;
 8002c4c:	2305      	movs	r3, #5
 8002c4e:	73fb      	strb	r3, [r7, #15]

    while (retry_count--) {
 8002c50:	e020      	b.n	8002c94 <SDcardInit+0x50>
        res = f_mount(&fs, "", 1);
 8002c52:	2201      	movs	r2, #1
 8002c54:	4939      	ldr	r1, [pc, #228]	@ (8002d3c <SDcardInit+0xf8>)
 8002c56:	483a      	ldr	r0, [pc, #232]	@ (8002d40 <SDcardInit+0xfc>)
 8002c58:	f00a fbb2 	bl	800d3c0 <f_mount>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	73bb      	strb	r3, [r7, #14]
        if (res == FR_OK) {
 8002c60:	7bbb      	ldrb	r3, [r7, #14]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01c      	beq.n	8002ca0 <SDcardInit+0x5c>
            break;
        }
        printf("Error mounting filesystem! (%d). Retrying...\r\n", res);
 8002c66:	7bbb      	ldrb	r3, [r7, #14]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4836      	ldr	r0, [pc, #216]	@ (8002d44 <SDcardInit+0x100>)
 8002c6c:	f00c fbb8 	bl	800f3e0 <iprintf>
     	  ST7735_WriteString(10, 140, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002c70:	4b35      	ldr	r3, [pc, #212]	@ (8002d48 <SDcardInit+0x104>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	9202      	str	r2, [sp, #8]
 8002c76:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002c7a:	9201      	str	r2, [sp, #4]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	9200      	str	r2, [sp, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a32      	ldr	r2, [pc, #200]	@ (8002d4c <SDcardInit+0x108>)
 8002c84:	218c      	movs	r1, #140	@ 0x8c
 8002c86:	200a      	movs	r0, #10
 8002c88:	f001 fa13 	bl	80040b2 <ST7735_WriteString>
        HAL_Delay(RETRY_DELAY_MS);
 8002c8c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c90:	f001 ff2e 	bl	8004af0 <HAL_Delay>
    while (retry_count--) {
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	1e5a      	subs	r2, r3, #1
 8002c98:	73fa      	strb	r2, [r7, #15]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1d9      	bne.n	8002c52 <SDcardInit+0xe>
 8002c9e:	e000      	b.n	8002ca2 <SDcardInit+0x5e>
            break;
 8002ca0:	bf00      	nop
    }

    retry_count = 5;
 8002ca2:	2305      	movs	r3, #5
 8002ca4:	73fb      	strb	r3, [r7, #15]
    while (retry_count--) {
 8002ca6:	e020      	b.n	8002cea <SDcardInit+0xa6>
        res = f_open(&fil, "test.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8002ca8:	2212      	movs	r2, #18
 8002caa:	4929      	ldr	r1, [pc, #164]	@ (8002d50 <SDcardInit+0x10c>)
 8002cac:	4829      	ldr	r0, [pc, #164]	@ (8002d54 <SDcardInit+0x110>)
 8002cae:	f00a fbcd 	bl	800d44c <f_open>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	73bb      	strb	r3, [r7, #14]
        if (res == FR_OK) {
 8002cb6:	7bbb      	ldrb	r3, [r7, #14]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01c      	beq.n	8002cf6 <SDcardInit+0xb2>
            break;
        }
        printf("Error opening SDcard file! (%d). Retrying...\r\n", res);
 8002cbc:	7bbb      	ldrb	r3, [r7, #14]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4825      	ldr	r0, [pc, #148]	@ (8002d58 <SDcardInit+0x114>)
 8002cc2:	f00c fb8d 	bl	800f3e0 <iprintf>
     	  ST7735_WriteString(10, 140, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002cc6:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <SDcardInit+0x104>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	9202      	str	r2, [sp, #8]
 8002ccc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002cd0:	9201      	str	r2, [sp, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	9200      	str	r2, [sp, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d4c <SDcardInit+0x108>)
 8002cda:	218c      	movs	r1, #140	@ 0x8c
 8002cdc:	200a      	movs	r0, #10
 8002cde:	f001 f9e8 	bl	80040b2 <ST7735_WriteString>
        HAL_Delay(RETRY_DELAY_MS);
 8002ce2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ce6:	f001 ff03 	bl	8004af0 <HAL_Delay>
    while (retry_count--) {
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	1e5a      	subs	r2, r3, #1
 8002cee:	73fa      	strb	r2, [r7, #15]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1d9      	bne.n	8002ca8 <SDcardInit+0x64>
 8002cf4:	e000      	b.n	8002cf8 <SDcardInit+0xb4>
            break;
 8002cf6:	bf00      	nop
    }

    res = f_lseek(&fil, f_size(&fil));
 8002cf8:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <SDcardInit+0x110>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4815      	ldr	r0, [pc, #84]	@ (8002d54 <SDcardInit+0x110>)
 8002d00:	f00a ffa8 	bl	800dc54 <f_lseek>
 8002d04:	4603      	mov	r3, r0
 8002d06:	73bb      	strb	r3, [r7, #14]
    if (res != FR_OK) {
 8002d08:	7bbb      	ldrb	r3, [r7, #14]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <SDcardInit+0xdc>
        printf("Error seeking to end of file! (%d)\r\n", res);
 8002d0e:	7bbb      	ldrb	r3, [r7, #14]
 8002d10:	4619      	mov	r1, r3
 8002d12:	4812      	ldr	r0, [pc, #72]	@ (8002d5c <SDcardInit+0x118>)
 8002d14:	f00c fb64 	bl	800f3e0 <iprintf>
        f_close(&fil);
 8002d18:	480e      	ldr	r0, [pc, #56]	@ (8002d54 <SDcardInit+0x110>)
 8002d1a:	f00a ff71 	bl	800dc00 <f_close>
        return;
 8002d1e:	e00a      	b.n	8002d36 <SDcardInit+0xf2>
    }

    f_puts("\n--- Nowy pomiar ---\n", &fil);
 8002d20:	490c      	ldr	r1, [pc, #48]	@ (8002d54 <SDcardInit+0x110>)
 8002d22:	480f      	ldr	r0, [pc, #60]	@ (8002d60 <SDcardInit+0x11c>)
 8002d24:	f00b fa31 	bl	800e18a <f_puts>
    f_puts("TVOC_ppb,CO2_eq_ppm,Ethanol_signal,H2_signal,Temperatura,Cisnienie,Napiecie_mV,Prad_mA,Moc_mW\n", &fil);
 8002d28:	490a      	ldr	r1, [pc, #40]	@ (8002d54 <SDcardInit+0x110>)
 8002d2a:	480e      	ldr	r0, [pc, #56]	@ (8002d64 <SDcardInit+0x120>)
 8002d2c:	f00b fa2d 	bl	800e18a <f_puts>

    f_sync(&fil);
 8002d30:	4808      	ldr	r0, [pc, #32]	@ (8002d54 <SDcardInit+0x110>)
 8002d32:	f00a fee7 	bl	800db04 <f_sync>

}
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	08012c58 	.word	0x08012c58
 8002d40:	2000034c 	.word	0x2000034c
 8002d44:	08012c5c 	.word	0x08012c5c
 8002d48:	20000004 	.word	0x20000004
 8002d4c:	08012c8c 	.word	0x08012c8c
 8002d50:	08012c9c 	.word	0x08012c9c
 8002d54:	20001384 	.word	0x20001384
 8002d58:	08012ca8 	.word	0x08012ca8
 8002d5c:	08012cd8 	.word	0x08012cd8
 8002d60:	08012d00 	.word	0x08012d00
 8002d64:	08012d18 	.word	0x08012d18

08002d68 <SDcardWriteData>:

void SDcardWriteData(struct sensors *s) {
 8002d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d6c:	b0c1      	sub	sp, #260	@ 0x104
 8002d6e:	af0c      	add	r7, sp, #48	@ 0x30
 8002d70:	6078      	str	r0, [r7, #4]
	// ERROR SDcard -> OLED
	if (f_lseek(&fil, f_size(&fil)) != FR_OK) {
 8002d72:	4b41      	ldr	r3, [pc, #260]	@ (8002e78 <SDcardWriteData+0x110>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4619      	mov	r1, r3
 8002d78:	483f      	ldr	r0, [pc, #252]	@ (8002e78 <SDcardWriteData+0x110>)
 8002d7a:	f00a ff6b 	bl	800dc54 <f_lseek>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d011      	beq.n	8002da8 <SDcardWriteData+0x40>
  	 printf("Error seeking in file!\r\n");
 8002d84:	483d      	ldr	r0, [pc, #244]	@ (8002e7c <SDcardWriteData+0x114>)
 8002d86:	f00c fb93 	bl	800f4b0 <puts>
  	 ST7735_WriteString(10, 140, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e80 <SDcardWriteData+0x118>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	9202      	str	r2, [sp, #8]
 8002d90:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002d94:	9201      	str	r2, [sp, #4]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	9200      	str	r2, [sp, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a39      	ldr	r2, [pc, #228]	@ (8002e84 <SDcardWriteData+0x11c>)
 8002d9e:	218c      	movs	r1, #140	@ 0x8c
 8002da0:	200a      	movs	r0, #10
 8002da2:	f001 f986 	bl	80040b2 <ST7735_WriteString>
 8002da6:	e063      	b.n	8002e70 <SDcardWriteData+0x108>
  	 return;
	}

	char buffer[200];
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	891b      	ldrh	r3, [r3, #8]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002dac:	469a      	mov	sl, r3
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	895b      	ldrh	r3, [r3, #10]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002db2:	461e      	mov	r6, r3
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	899b      	ldrh	r3, [r3, #12]
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002e88 <SDcardWriteData+0x120>
 8002dc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002dc8:	ee16 0a90 	vmov	r0, s13
 8002dcc:	f7fd fbdc 	bl	8000588 <__aeabi_f2d>
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	460d      	mov	r5, r1
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	89db      	ldrh	r3, [r3, #14]
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002de0:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002e88 <SDcardWriteData+0x120>
 8002de4:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002de8:	ee16 0a90 	vmov	r0, s13
 8002dec:	f7fd fbcc 	bl	8000588 <__aeabi_f2d>
 8002df0:	4680      	mov	r8, r0
 8002df2:	4689      	mov	r9, r1
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fd fbc5 	bl	8000588 <__aeabi_f2d>
 8002dfe:	4683      	mov	fp, r0
 8002e00:	468c      	mov	ip, r1
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	6849      	ldr	r1, [r1, #4]
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	8a00      	ldrh	r0, [r0, #16]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002e0a:	6038      	str	r0, [r7, #0]
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002e12:	4602      	mov	r2, r0
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure,s->INA219_Voltage, s->INA219_Current, s->INA219_Power);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	8a80      	ldrh	r0, [r0, #20]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u\n",
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f107 0008 	add.w	r0, r7, #8
 8002e1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002e20:	920a      	str	r2, [sp, #40]	@ 0x28
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e26:	9108      	str	r1, [sp, #32]
 8002e28:	e9cd bc06 	strd	fp, ip, [sp, #24]
 8002e2c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002e30:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002e34:	9600      	str	r6, [sp, #0]
 8002e36:	4653      	mov	r3, sl
 8002e38:	4a14      	ldr	r2, [pc, #80]	@ (8002e8c <SDcardWriteData+0x124>)
 8002e3a:	21c8      	movs	r1, #200	@ 0xc8
 8002e3c:	f00c fb40 	bl	800f4c0 <sniprintf>

	if (f_puts(buffer, &fil) < 0) {
 8002e40:	f107 0308 	add.w	r3, r7, #8
 8002e44:	490c      	ldr	r1, [pc, #48]	@ (8002e78 <SDcardWriteData+0x110>)
 8002e46:	4618      	mov	r0, r3
 8002e48:	f00b f99f 	bl	800e18a <f_puts>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da02      	bge.n	8002e58 <SDcardWriteData+0xf0>
  	 printf("Error writing to file!\r\n");
 8002e52:	480f      	ldr	r0, [pc, #60]	@ (8002e90 <SDcardWriteData+0x128>)
 8002e54:	f00c fb2c 	bl	800f4b0 <puts>
	}

	if (f_sync(&fil) != FR_OK) {
 8002e58:	4807      	ldr	r0, [pc, #28]	@ (8002e78 <SDcardWriteData+0x110>)
 8002e5a:	f00a fe53 	bl	800db04 <f_sync>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <SDcardWriteData+0x102>
		printf("Error syncing file!\r\n");
 8002e64:	480b      	ldr	r0, [pc, #44]	@ (8002e94 <SDcardWriteData+0x12c>)
 8002e66:	f00c fb23 	bl	800f4b0 <puts>
	}
	f_sync(&fil);
 8002e6a:	4803      	ldr	r0, [pc, #12]	@ (8002e78 <SDcardWriteData+0x110>)
 8002e6c:	f00a fe4a 	bl	800db04 <f_sync>
}
 8002e70:	37d4      	adds	r7, #212	@ 0xd4
 8002e72:	46bd      	mov	sp, r7
 8002e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e78:	20001384 	.word	0x20001384
 8002e7c:	08012d78 	.word	0x08012d78
 8002e80:	20000004 	.word	0x20000004
 8002e84:	08012c8c 	.word	0x08012c8c
 8002e88:	44000000 	.word	0x44000000
 8002e8c:	08012d90 	.word	0x08012d90
 8002e90:	08012db4 	.word	0x08012db4
 8002e94:	08012dcc 	.word	0x08012dcc

08002e98 <OLEDdisplay>:
    if (f_close(&fil) != FR_OK) {
        printf("Error closing file!\r\n");
    }
}

void OLEDdisplay(struct sensors *s) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b0a4      	sub	sp, #144	@ 0x90
 8002e9c:	af04      	add	r7, sp, #16
 8002e9e:	6078      	str	r0, [r7, #4]
    char buffer[100];
    int tempInt = (int)(s->BMP280temperature * 100);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80030e0 <OLEDdisplay+0x248>
 8002eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb2:	ee17 3a90 	vmov	r3, s15
 8002eb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int tempFrac = tempInt % 100;
 8002eb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eba:	4a8a      	ldr	r2, [pc, #552]	@ (80030e4 <OLEDdisplay+0x24c>)
 8002ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ec0:	1151      	asrs	r1, r2, #5
 8002ec2:	17da      	asrs	r2, r3, #31
 8002ec4:	1a8a      	subs	r2, r1, r2
 8002ec6:	2164      	movs	r1, #100	@ 0x64
 8002ec8:	fb01 f202 	mul.w	r2, r1, r2
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Temperatura
    snprintf(buffer, sizeof(buffer), "Temp: %d.%02d C", tempInt / 100, tempFrac);
 8002ed0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ed2:	4a84      	ldr	r2, [pc, #528]	@ (80030e4 <OLEDdisplay+0x24c>)
 8002ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ed8:	1152      	asrs	r2, r2, #5
 8002eda:	17db      	asrs	r3, r3, #31
 8002edc:	1ad2      	subs	r2, r2, r3
 8002ede:	f107 000c 	add.w	r0, r7, #12
 8002ee2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	4a7f      	ldr	r2, [pc, #508]	@ (80030e8 <OLEDdisplay+0x250>)
 8002eea:	2164      	movs	r1, #100	@ 0x64
 8002eec:	f00c fae8 	bl	800f4c0 <sniprintf>
    ST7735_WriteString(5,  5, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002ef0:	4b7e      	ldr	r3, [pc, #504]	@ (80030ec <OLEDdisplay+0x254>)
 8002ef2:	f107 010c 	add.w	r1, r7, #12
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	9202      	str	r2, [sp, #8]
 8002efa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002efe:	9201      	str	r2, [sp, #4]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	9200      	str	r2, [sp, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	460a      	mov	r2, r1
 8002f08:	2105      	movs	r1, #5
 8002f0a:	2005      	movs	r0, #5
 8002f0c:	f001 f8d1 	bl	80040b2 <ST7735_WriteString>

    // Ciśnienie
    snprintf(buffer, sizeof(buffer), "Prs:  %ld Pa", s->BMP280pressure);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f107 000c 	add.w	r0, r7, #12
 8002f18:	4a75      	ldr	r2, [pc, #468]	@ (80030f0 <OLEDdisplay+0x258>)
 8002f1a:	2164      	movs	r1, #100	@ 0x64
 8002f1c:	f00c fad0 	bl	800f4c0 <sniprintf>
    ST7735_WriteString(5,  20, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f20:	4b72      	ldr	r3, [pc, #456]	@ (80030ec <OLEDdisplay+0x254>)
 8002f22:	f107 010c 	add.w	r1, r7, #12
 8002f26:	2200      	movs	r2, #0
 8002f28:	9202      	str	r2, [sp, #8]
 8002f2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f2e:	9201      	str	r2, [sp, #4]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	9200      	str	r2, [sp, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	460a      	mov	r2, r1
 8002f38:	2114      	movs	r1, #20
 8002f3a:	2005      	movs	r0, #5
 8002f3c:	f001 f8b9 	bl	80040b2 <ST7735_WriteString>

    // TVOC
    snprintf(buffer, sizeof(buffer), "TVOC: %4u ppb", s->tvoc_ppb);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	891b      	ldrh	r3, [r3, #8]
 8002f44:	f107 000c 	add.w	r0, r7, #12
 8002f48:	4a6a      	ldr	r2, [pc, #424]	@ (80030f4 <OLEDdisplay+0x25c>)
 8002f4a:	2164      	movs	r1, #100	@ 0x64
 8002f4c:	f00c fab8 	bl	800f4c0 <sniprintf>
    ST7735_WriteString(5,  35, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f50:	4b66      	ldr	r3, [pc, #408]	@ (80030ec <OLEDdisplay+0x254>)
 8002f52:	f107 010c 	add.w	r1, r7, #12
 8002f56:	2200      	movs	r2, #0
 8002f58:	9202      	str	r2, [sp, #8]
 8002f5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f5e:	9201      	str	r2, [sp, #4]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	9200      	str	r2, [sp, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	460a      	mov	r2, r1
 8002f68:	2123      	movs	r1, #35	@ 0x23
 8002f6a:	2005      	movs	r0, #5
 8002f6c:	f001 f8a1 	bl	80040b2 <ST7735_WriteString>

    // CO2eq
    snprintf(buffer, sizeof(buffer), "CO2:  %4u ppm", s->co2_eq_ppm);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	895b      	ldrh	r3, [r3, #10]
 8002f74:	f107 000c 	add.w	r0, r7, #12
 8002f78:	4a5f      	ldr	r2, [pc, #380]	@ (80030f8 <OLEDdisplay+0x260>)
 8002f7a:	2164      	movs	r1, #100	@ 0x64
 8002f7c:	f00c faa0 	bl	800f4c0 <sniprintf>
    ST7735_WriteString(5,  50, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f80:	4b5a      	ldr	r3, [pc, #360]	@ (80030ec <OLEDdisplay+0x254>)
 8002f82:	f107 010c 	add.w	r1, r7, #12
 8002f86:	2200      	movs	r2, #0
 8002f88:	9202      	str	r2, [sp, #8]
 8002f8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f8e:	9201      	str	r2, [sp, #4]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	9200      	str	r2, [sp, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	460a      	mov	r2, r1
 8002f98:	2132      	movs	r1, #50	@ 0x32
 8002f9a:	2005      	movs	r0, #5
 8002f9c:	f001 f889 	bl	80040b2 <ST7735_WriteString>

    // Etanol/512.0
    float ethanol = s->scaled_ethanol_signal / 512.0f;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	899b      	ldrh	r3, [r3, #12]
 8002fa4:	ee07 3a90 	vmov	s15, r3
 8002fa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fac:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80030fc <OLEDdisplay+0x264>
 8002fb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fb4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    snprintf(buffer, sizeof(buffer), "EtOH: %.2f", ethanol);
 8002fb8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002fba:	f7fd fae5 	bl	8000588 <__aeabi_f2d>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	f107 000c 	add.w	r0, r7, #12
 8002fc6:	e9cd 2300 	strd	r2, r3, [sp]
 8002fca:	4a4d      	ldr	r2, [pc, #308]	@ (8003100 <OLEDdisplay+0x268>)
 8002fcc:	2164      	movs	r1, #100	@ 0x64
 8002fce:	f00c fa77 	bl	800f4c0 <sniprintf>
    ST7735_WriteString(5,  65, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002fd2:	4b46      	ldr	r3, [pc, #280]	@ (80030ec <OLEDdisplay+0x254>)
 8002fd4:	f107 010c 	add.w	r1, r7, #12
 8002fd8:	2200      	movs	r2, #0
 8002fda:	9202      	str	r2, [sp, #8]
 8002fdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fe0:	9201      	str	r2, [sp, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	9200      	str	r2, [sp, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	460a      	mov	r2, r1
 8002fea:	2141      	movs	r1, #65	@ 0x41
 8002fec:	2005      	movs	r0, #5
 8002fee:	f001 f860 	bl	80040b2 <ST7735_WriteString>

    // H2/512.0
    float h2 = s->scaled_h2_signal / 512.0f;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	89db      	ldrh	r3, [r3, #14]
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ffe:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80030fc <OLEDdisplay+0x264>
 8003002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003006:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    snprintf(buffer, sizeof(buffer), "H2:   %.2f", h2);
 800300a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800300c:	f7fd fabc 	bl	8000588 <__aeabi_f2d>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	f107 000c 	add.w	r0, r7, #12
 8003018:	e9cd 2300 	strd	r2, r3, [sp]
 800301c:	4a39      	ldr	r2, [pc, #228]	@ (8003104 <OLEDdisplay+0x26c>)
 800301e:	2164      	movs	r1, #100	@ 0x64
 8003020:	f00c fa4e 	bl	800f4c0 <sniprintf>
    ST7735_WriteString(5,  80, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003024:	4b31      	ldr	r3, [pc, #196]	@ (80030ec <OLEDdisplay+0x254>)
 8003026:	f107 010c 	add.w	r1, r7, #12
 800302a:	2200      	movs	r2, #0
 800302c:	9202      	str	r2, [sp, #8]
 800302e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003032:	9201      	str	r2, [sp, #4]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	9200      	str	r2, [sp, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	460a      	mov	r2, r1
 800303c:	2150      	movs	r1, #80	@ 0x50
 800303e:	2005      	movs	r0, #5
 8003040:	f001 f837 	bl	80040b2 <ST7735_WriteString>

    // INA219_Current
    snprintf(buffer, sizeof(buffer), "Current:  %4d mA", s->INA219_Current);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800304a:	f107 000c 	add.w	r0, r7, #12
 800304e:	4a2e      	ldr	r2, [pc, #184]	@ (8003108 <OLEDdisplay+0x270>)
 8003050:	2164      	movs	r1, #100	@ 0x64
 8003052:	f00c fa35 	bl	800f4c0 <sniprintf>
    ST7735_WriteString(5,  95, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003056:	4b25      	ldr	r3, [pc, #148]	@ (80030ec <OLEDdisplay+0x254>)
 8003058:	f107 010c 	add.w	r1, r7, #12
 800305c:	2200      	movs	r2, #0
 800305e:	9202      	str	r2, [sp, #8]
 8003060:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003064:	9201      	str	r2, [sp, #4]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	9200      	str	r2, [sp, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	460a      	mov	r2, r1
 800306e:	215f      	movs	r1, #95	@ 0x5f
 8003070:	2005      	movs	r0, #5
 8003072:	f001 f81e 	bl	80040b2 <ST7735_WriteString>

    // INA219_Voltage
    snprintf(buffer, sizeof(buffer), "Voltage:  %4u mV", s->INA219_Voltage);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8a1b      	ldrh	r3, [r3, #16]
 800307a:	f107 000c 	add.w	r0, r7, #12
 800307e:	4a23      	ldr	r2, [pc, #140]	@ (800310c <OLEDdisplay+0x274>)
 8003080:	2164      	movs	r1, #100	@ 0x64
 8003082:	f00c fa1d 	bl	800f4c0 <sniprintf>
    ST7735_WriteString(5,  110, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003086:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <OLEDdisplay+0x254>)
 8003088:	f107 010c 	add.w	r1, r7, #12
 800308c:	2200      	movs	r2, #0
 800308e:	9202      	str	r2, [sp, #8]
 8003090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003094:	9201      	str	r2, [sp, #4]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	9200      	str	r2, [sp, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	460a      	mov	r2, r1
 800309e:	216e      	movs	r1, #110	@ 0x6e
 80030a0:	2005      	movs	r0, #5
 80030a2:	f001 f806 	bl	80040b2 <ST7735_WriteString>

    // INA219_Power
    snprintf(buffer, sizeof(buffer), "Power:  %4u mW", s->INA219_Power);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8a9b      	ldrh	r3, [r3, #20]
 80030aa:	f107 000c 	add.w	r0, r7, #12
 80030ae:	4a18      	ldr	r2, [pc, #96]	@ (8003110 <OLEDdisplay+0x278>)
 80030b0:	2164      	movs	r1, #100	@ 0x64
 80030b2:	f00c fa05 	bl	800f4c0 <sniprintf>
    ST7735_WriteString(5,  125, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <OLEDdisplay+0x254>)
 80030b8:	f107 010c 	add.w	r1, r7, #12
 80030bc:	2200      	movs	r2, #0
 80030be:	9202      	str	r2, [sp, #8]
 80030c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030c4:	9201      	str	r2, [sp, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	9200      	str	r2, [sp, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	460a      	mov	r2, r1
 80030ce:	217d      	movs	r1, #125	@ 0x7d
 80030d0:	2005      	movs	r0, #5
 80030d2:	f000 ffee 	bl	80040b2 <ST7735_WriteString>

}
 80030d6:	bf00      	nop
 80030d8:	3780      	adds	r7, #128	@ 0x80
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	42c80000 	.word	0x42c80000
 80030e4:	51eb851f 	.word	0x51eb851f
 80030e8:	08012dfc 	.word	0x08012dfc
 80030ec:	20000004 	.word	0x20000004
 80030f0:	08012e0c 	.word	0x08012e0c
 80030f4:	08012e1c 	.word	0x08012e1c
 80030f8:	08012e2c 	.word	0x08012e2c
 80030fc:	44000000 	.word	0x44000000
 8003100:	08012e3c 	.word	0x08012e3c
 8003104:	08012e48 	.word	0x08012e48
 8003108:	08012e54 	.word	0x08012e54
 800310c:	08012e68 	.word	0x08012e68
 8003110:	08012e7c 	.word	0x08012e7c

08003114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003118:	f001 fc8d 	bl	8004a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800311c:	f000 f8ca 	bl	80032b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003120:	f7ff fbc4 	bl	80028ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8003124:	f7ff fcee 	bl	8002b04 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8003128:	f001 fb24 	bl	8004774 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800312c:	f001 fbb2 	bl	8004894 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8003130:	f000 fdac 	bl	8003c8c <MX_SPI1_Init>
  MX_FATFS_Init();
 8003134:	f007 fefe 	bl	800af34 <MX_FATFS_Init>
  MX_TIM7_Init();
 8003138:	f001 fa72 	bl	8004620 <MX_TIM7_Init>
  MX_ADC1_Init();
 800313c:	f7fe fe4c 	bl	8001dd8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8003140:	f001 f9f6 	bl	8004530 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8003144:	4846      	ldr	r0, [pc, #280]	@ (8003260 <main+0x14c>)
 8003146:	f005 fda7 	bl	8008c98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800314a:	2100      	movs	r1, #0
 800314c:	4845      	ldr	r0, [pc, #276]	@ (8003264 <main+0x150>)
 800314e:	f005 fe7d 	bl	8008e4c <HAL_TIM_PWM_Start>
  // OLED
  ST7735_Init();
 8003152:	f000 ff1d 	bl	8003f90 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 8003156:	2000      	movs	r0, #0
 8003158:	f001 f86a 	bl	8004230 <ST7735_FillScreen>

  // BMP
  BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 800315c:	2301      	movs	r3, #1
 800315e:	2203      	movs	r2, #3
 8003160:	2101      	movs	r1, #1
 8003162:	4841      	ldr	r0, [pc, #260]	@ (8003268 <main+0x154>)
 8003164:	f7fe f88a 	bl	800127c <BMP280_Init>
  // SGP
	if (sgp_probe() != STATUS_OK) {
 8003168:	f000 fcc8 	bl	8003afc <sgp_probe>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <main+0x64>
		printf("SGP sensor error\r\n");
 8003172:	483e      	ldr	r0, [pc, #248]	@ (800326c <main+0x158>)
 8003174:	f00c f99c 	bl	800f4b0 <puts>
	}
	// INA
	INA219_Init(&myina219, &hi2c1, INA219_ADDRESS);
 8003178:	2240      	movs	r2, #64	@ 0x40
 800317a:	493d      	ldr	r1, [pc, #244]	@ (8003270 <main+0x15c>)
 800317c:	483d      	ldr	r0, [pc, #244]	@ (8003274 <main+0x160>)
 800317e:	f7fe fde5 	bl	8001d4c <INA219_Init>
	//INA219_setCalibration_32V_2A(&myina219);

	// SD
	SDcardInit("test.txt");
 8003182:	483d      	ldr	r0, [pc, #244]	@ (8003278 <main+0x164>)
 8003184:	f7ff fd5e 	bl	8002c44 <SDcardInit>
	isProgramStarted = 1;
 8003188:	4b3c      	ldr	r3, [pc, #240]	@ (800327c <main+0x168>)
 800318a:	2201      	movs	r2, #1
 800318c:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	// stele probkowanie
  	if (_interruptFlag == 1){
 800318e:	4b3c      	ldr	r3, [pc, #240]	@ (8003280 <main+0x16c>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d1fb      	bne.n	800318e <main+0x7a>

    	// ADC
    	HAL_ADC_Start(&hadc1);
 8003196:	483b      	ldr	r0, [pc, #236]	@ (8003284 <main+0x170>)
 8003198:	f001 fd12 	bl	8004bc0 <HAL_ADC_Start>
    	HAL_ADC_PollForConversion(&hadc1, 1);
 800319c:	2101      	movs	r1, #1
 800319e:	4839      	ldr	r0, [pc, #228]	@ (8003284 <main+0x170>)
 80031a0:	f001 fddc 	bl	8004d5c <HAL_ADC_PollForConversion>
    	adcPosition = HAL_ADC_GetValue(&hadc1) ;
 80031a4:	4837      	ldr	r0, [pc, #220]	@ (8003284 <main+0x170>)
 80031a6:	f001 fe64 	bl	8004e72 <HAL_ADC_GetValue>
 80031aa:	4603      	mov	r3, r0
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	4b36      	ldr	r3, [pc, #216]	@ (8003288 <main+0x174>)
 80031b0:	801a      	strh	r2, [r3, #0]
    	printf("ADC: %.2f%%\r\n", (adcPosition / 4095.0f)*100);
 80031b2:	4b35      	ldr	r3, [pc, #212]	@ (8003288 <main+0x174>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031be:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800328c <main+0x178>
 80031c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031c6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003290 <main+0x17c>
 80031ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ce:	ee17 0a90 	vmov	r0, s15
 80031d2:	f7fd f9d9 	bl	8000588 <__aeabi_f2d>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	482e      	ldr	r0, [pc, #184]	@ (8003294 <main+0x180>)
 80031dc:	f00c f900 	bl	800f3e0 <iprintf>

    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (adcPosition / 4095.0f)*1000);
 80031e0:	4b29      	ldr	r3, [pc, #164]	@ (8003288 <main+0x174>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	ee07 3a90 	vmov	s15, r3
 80031e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031ec:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800328c <main+0x178>
 80031f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031f4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8003298 <main+0x184>
 80031f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031fc:	4b19      	ldr	r3, [pc, #100]	@ (8003264 <main+0x150>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003204:	ee17 2a90 	vmov	r2, s15
 8003208:	635a      	str	r2, [r3, #52]	@ 0x34


  		// BMP
			BMP280_ReadTemperatureAndPressure(&s.BMP280temperature, &s.BMP280pressure);
 800320a:	4924      	ldr	r1, [pc, #144]	@ (800329c <main+0x188>)
 800320c:	4824      	ldr	r0, [pc, #144]	@ (80032a0 <main+0x18c>)
 800320e:	f7fe f98f 	bl	8001530 <BMP280_ReadTemperatureAndPressure>

			// SGP
			sgp_measure_iaq_blocking_read(&s.tvoc_ppb, &s.co2_eq_ppm);
 8003212:	4924      	ldr	r1, [pc, #144]	@ (80032a4 <main+0x190>)
 8003214:	4824      	ldr	r0, [pc, #144]	@ (80032a8 <main+0x194>)
 8003216:	f000 fc29 	bl	8003a6c <sgp_measure_iaq_blocking_read>
			sgp_measure_signals_blocking_read(&s.scaled_ethanol_signal, &s.scaled_h2_signal);
 800321a:	4924      	ldr	r1, [pc, #144]	@ (80032ac <main+0x198>)
 800321c:	4824      	ldr	r0, [pc, #144]	@ (80032b0 <main+0x19c>)
 800321e:	f000 fc43 	bl	8003aa8 <sgp_measure_signals_blocking_read>
			//sgp_set_absolute_humidity()

			// INA219
			s.INA219_Current = INA219_ReadCurrent_raw(&myina219);
 8003222:	4814      	ldr	r0, [pc, #80]	@ (8003274 <main+0x160>)
 8003224:	f7fe fcc8 	bl	8001bb8 <INA219_ReadCurrent_raw>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	4b1c      	ldr	r3, [pc, #112]	@ (80032a0 <main+0x18c>)
 800322e:	825a      	strh	r2, [r3, #18]
			s.INA219_Voltage = INA219_ReadBusVoltage(&myina219);
 8003230:	4810      	ldr	r0, [pc, #64]	@ (8003274 <main+0x160>)
 8003232:	f7fe fcae 	bl	8001b92 <INA219_ReadBusVoltage>
 8003236:	4603      	mov	r3, r0
 8003238:	461a      	mov	r2, r3
 800323a:	4b19      	ldr	r3, [pc, #100]	@ (80032a0 <main+0x18c>)
 800323c:	821a      	strh	r2, [r3, #16]
			s.INA219_Power = INA219_ReadPower(&myina219);
 800323e:	480d      	ldr	r0, [pc, #52]	@ (8003274 <main+0x160>)
 8003240:	f7fe fcca 	bl	8001bd8 <INA219_ReadPower>
 8003244:	4603      	mov	r3, r0
 8003246:	461a      	mov	r2, r3
 8003248:	4b15      	ldr	r3, [pc, #84]	@ (80032a0 <main+0x18c>)
 800324a:	829a      	strh	r2, [r3, #20]


			// SD
			SDcardWriteData(&s);
 800324c:	4814      	ldr	r0, [pc, #80]	@ (80032a0 <main+0x18c>)
 800324e:	f7ff fd8b 	bl	8002d68 <SDcardWriteData>

			// OLED
			OLEDdisplay(&s);
 8003252:	4813      	ldr	r0, [pc, #76]	@ (80032a0 <main+0x18c>)
 8003254:	f7ff fe20 	bl	8002e98 <OLEDdisplay>

			//printf("{%u,%u,%.2f,%.2f,%.2f,%ld,%u,%d,%u}\r\n",
			//		s.tvoc_ppb, s.co2_eq_ppm, s.scaled_ethanol_signal/512.0f, s.scaled_h2_signal/512.0f, s.BMP280temperature, s.BMP280pressure, s.INA219_Voltage, s.INA219_Current, s.INA219_Power);

			_interruptFlag = 0;
 8003258:	4b09      	ldr	r3, [pc, #36]	@ (8003280 <main+0x16c>)
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
  	if (_interruptFlag == 1){
 800325e:	e796      	b.n	800318e <main+0x7a>
 8003260:	20002a98 	.word	0x20002a98
 8003264:	20002a4c 	.word	0x20002a4c
 8003268:	200029e0 	.word	0x200029e0
 800326c:	08012e8c 	.word	0x08012e8c
 8003270:	200002d4 	.word	0x200002d4
 8003274:	20000344 	.word	0x20000344
 8003278:	08012c9c 	.word	0x08012c9c
 800327c:	20000328 	.word	0x20000328
 8003280:	20000329 	.word	0x20000329
 8003284:	20000288 	.word	0x20000288
 8003288:	2000032a 	.word	0x2000032a
 800328c:	457ff000 	.word	0x457ff000
 8003290:	42c80000 	.word	0x42c80000
 8003294:	08012ea0 	.word	0x08012ea0
 8003298:	447a0000 	.word	0x447a0000
 800329c:	20000330 	.word	0x20000330
 80032a0:	2000032c 	.word	0x2000032c
 80032a4:	20000336 	.word	0x20000336
 80032a8:	20000334 	.word	0x20000334
 80032ac:	2000033a 	.word	0x2000033a
 80032b0:	20000338 	.word	0x20000338

080032b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b094      	sub	sp, #80	@ 0x50
 80032b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ba:	f107 0320 	add.w	r3, r7, #32
 80032be:	2230      	movs	r2, #48	@ 0x30
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f00c fa28 	bl	800f718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80032d8:	f003 fde4 	bl	8006ea4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032dc:	4b27      	ldr	r3, [pc, #156]	@ (800337c <SystemClock_Config+0xc8>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	4a26      	ldr	r2, [pc, #152]	@ (800337c <SystemClock_Config+0xc8>)
 80032e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80032e8:	4b24      	ldr	r3, [pc, #144]	@ (800337c <SystemClock_Config+0xc8>)
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80032f4:	4b22      	ldr	r3, [pc, #136]	@ (8003380 <SystemClock_Config+0xcc>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80032fc:	4a20      	ldr	r2, [pc, #128]	@ (8003380 <SystemClock_Config+0xcc>)
 80032fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4b1e      	ldr	r3, [pc, #120]	@ (8003380 <SystemClock_Config+0xcc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003310:	2301      	movs	r3, #1
 8003312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003314:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003318:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800331a:	2302      	movs	r3, #2
 800331c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800331e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003324:	2304      	movs	r3, #4
 8003326:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003328:	2348      	movs	r3, #72	@ 0x48
 800332a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800332c:	2302      	movs	r3, #2
 800332e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003330:	2303      	movs	r3, #3
 8003332:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003334:	f107 0320 	add.w	r3, r7, #32
 8003338:	4618      	mov	r0, r3
 800333a:	f003 fdc3 	bl	8006ec4 <HAL_RCC_OscConfig>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003344:	f000 f840 	bl	80033c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003348:	230f      	movs	r3, #15
 800334a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800334c:	2302      	movs	r3, #2
 800334e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003358:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800335e:	f107 030c 	add.w	r3, r7, #12
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f004 f851 	bl	800740c <HAL_RCC_ClockConfig>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003370:	f000 f82a 	bl	80033c8 <Error_Handler>
  }
}
 8003374:	bf00      	nop
 8003376:	3750      	adds	r7, #80	@ 0x50
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40023800 	.word	0x40023800
 8003380:	40007000 	.word	0x40007000

08003384 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if (htim == &htim7 && isProgramStarted == 1){
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a0a      	ldr	r2, [pc, #40]	@ (80033b8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10d      	bne.n	80033b0 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d109      	bne.n	80033b0 <HAL_TIM_PeriodElapsedCallback+0x2c>
  	if (_interruptFlag == 1){
 800339c:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d102      	bne.n	80033aa <HAL_TIM_PeriodElapsedCallback+0x26>
  		printf("Flaga _interruptFlag jest juz 1");
 80033a4:	4807      	ldr	r0, [pc, #28]	@ (80033c4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80033a6:	f00c f81b 	bl	800f3e0 <iprintf>
  	}
  	_interruptFlag = 1;
 80033aa:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
  }
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20002a98 	.word	0x20002a98
 80033bc:	20000328 	.word	0x20000328
 80033c0:	20000329 	.word	0x20000329
 80033c4:	08012eb0 	.word	0x08012eb0

080033c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033cc:	b672      	cpsid	i
}
 80033ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033d0:	bf00      	nop
 80033d2:	e7fd      	b.n	80033d0 <Error_Handler+0x8>

080033d4 <__io_putchar>:
 */

#include "usart.h"

int __io_putchar(int ch)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 80033dc:	1d39      	adds	r1, r7, #4
 80033de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033e2:	2201      	movs	r2, #1
 80033e4:	4803      	ldr	r0, [pc, #12]	@ (80033f4 <__io_putchar+0x20>)
 80033e6:	f006 fdfd 	bl	8009fe4 <HAL_UART_Transmit>
	return ch;
 80033ea:	687b      	ldr	r3, [r7, #4]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20002ae4 	.word	0x20002ae4

080033f8 <sensirion_common_generate_crc>:
 */

#include "sensirion_common.h"

u8 sensirion_common_generate_crc(u8 *data, u16 count)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
    u16 current_byte;
    u8 crc = CRC8_INIT;
 8003404:	23ff      	movs	r3, #255	@ 0xff
 8003406:	737b      	strb	r3, [r7, #13]
    u8 crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8003408:	2300      	movs	r3, #0
 800340a:	81fb      	strh	r3, [r7, #14]
 800340c:	e021      	b.n	8003452 <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 800340e:	89fb      	ldrh	r3, [r7, #14]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	7b7b      	ldrb	r3, [r7, #13]
 8003418:	4053      	eors	r3, r2
 800341a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800341c:	2308      	movs	r3, #8
 800341e:	733b      	strb	r3, [r7, #12]
 8003420:	e011      	b.n	8003446 <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 8003422:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003426:	2b00      	cmp	r3, #0
 8003428:	da07      	bge.n	800343a <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800342a:	7b7b      	ldrb	r3, [r7, #13]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	b25b      	sxtb	r3, r3
 8003430:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8003434:	b25b      	sxtb	r3, r3
 8003436:	737b      	strb	r3, [r7, #13]
 8003438:	e002      	b.n	8003440 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 800343a:	7b7b      	ldrb	r3, [r7, #13]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8003440:	7b3b      	ldrb	r3, [r7, #12]
 8003442:	3b01      	subs	r3, #1
 8003444:	733b      	strb	r3, [r7, #12]
 8003446:	7b3b      	ldrb	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1ea      	bne.n	8003422 <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800344c:	89fb      	ldrh	r3, [r7, #14]
 800344e:	3301      	adds	r3, #1
 8003450:	81fb      	strh	r3, [r7, #14]
 8003452:	89fa      	ldrh	r2, [r7, #14]
 8003454:	887b      	ldrh	r3, [r7, #2]
 8003456:	429a      	cmp	r2, r3
 8003458:	d3d9      	bcc.n	800340e <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 800345a:	7b7b      	ldrb	r3, [r7, #13]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <sensirion_common_check_crc>:

s8 sensirion_common_check_crc(u8 *data, u16 count, u8 checksum)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]
 8003474:	4613      	mov	r3, r2
 8003476:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8003478:	887b      	ldrh	r3, [r7, #2]
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ffbb 	bl	80033f8 <sensirion_common_generate_crc>
 8003482:	4603      	mov	r3, r0
 8003484:	461a      	mov	r2, r3
 8003486:	787b      	ldrb	r3, [r7, #1]
 8003488:	4293      	cmp	r3, r2
 800348a:	d002      	beq.n	8003492 <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 800348c:	f04f 33ff 	mov.w	r3, #4294967295
 8003490:	e000      	b.n	8003494 <sensirion_common_check_crc+0x2c>
    return STATUS_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <sensirion_i2c_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	4603      	mov	r3, r0
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	71fb      	strb	r3, [r7, #7]
 80034a8:	4613      	mov	r3, r2
 80034aa:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Receive(&hi2c1, address<<1, data, count, 100);
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	b299      	uxth	r1, r3
 80034b4:	88bb      	ldrh	r3, [r7, #4]
 80034b6:	2264      	movs	r2, #100	@ 0x64
 80034b8:	9200      	str	r2, [sp, #0]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	4804      	ldr	r0, [pc, #16]	@ (80034d0 <sensirion_i2c_read+0x34>)
 80034be:	f002 fbc1 	bl	8005c44 <HAL_I2C_Master_Receive>
 80034c2:	4603      	mov	r3, r0
 80034c4:	b25b      	sxtb	r3, r3
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	200002d4 	.word	0x200002d4

080034d4 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, uint8_t* data, uint16_t count)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af02      	add	r7, sp, #8
 80034da:	4603      	mov	r3, r0
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	71fb      	strb	r3, [r7, #7]
 80034e0:	4613      	mov	r3, r2
 80034e2:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Transmit(&hi2c1, address<<1, data, count, 100);  // data is the start pointer of our array
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	b299      	uxth	r1, r3
 80034ec:	88bb      	ldrh	r3, [r7, #4]
 80034ee:	2264      	movs	r2, #100	@ 0x64
 80034f0:	9200      	str	r2, [sp, #0]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	4804      	ldr	r0, [pc, #16]	@ (8003508 <sensirion_i2c_write+0x34>)
 80034f6:	f002 fa8d 	bl	8005a14 <HAL_I2C_Master_Transmit>
 80034fa:	4603      	mov	r3, r0
 80034fc:	b25b      	sxtb	r3, r3
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	200002d4 	.word	0x200002d4

0800350c <sensirion_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	if(useconds >= 1000)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800351a:	d308      	bcc.n	800352e <sensirion_sleep_usec+0x22>
	{
		HAL_Delay(useconds / (uint32_t)1000);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a07      	ldr	r2, [pc, #28]	@ (800353c <sensirion_sleep_usec+0x30>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	099b      	lsrs	r3, r3, #6
 8003526:	4618      	mov	r0, r3
 8003528:	f001 fae2 	bl	8004af0 <HAL_Delay>
	}
	else
	{
		HAL_Delay(1);
	}
}
 800352c:	e002      	b.n	8003534 <sensirion_sleep_usec+0x28>
		HAL_Delay(1);
 800352e:	2001      	movs	r0, #1
 8003530:	f001 fade 	bl	8004af0 <HAL_Delay>
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	10624dd3 	.word	0x10624dd3

08003540 <sgp_i2c_read_words>:
 *              The buffer may also have been modified on STATUS_FAIL return.
 * @data_words: Number of data words to read (without CRC bytes)
 *
 * Return:      STATUS_OK on success, STATUS_FAIL otherwise
 */
static s16 sgp_i2c_read_words(u16 *data, u16 data_words) {
 8003540:	b580      	push	{r7, lr}
 8003542:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8003546:	af00      	add	r7, sp, #0
 8003548:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800354c:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8003550:	6018      	str	r0, [r3, #0]
 8003552:	460a      	mov	r2, r1
 8003554:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8003558:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 800355c:	801a      	strh	r2, [r3, #0]
    s16 ret;
    u16 i, j;
    u16 size = data_words * (SGP_WORD_LEN + CRC8_LEN);
 800355e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8003562:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	0052      	lsls	r2, r2, #1
 800356c:	4413      	add	r3, r2
 800356e:	f8a7 3412 	strh.w	r3, [r7, #1042]	@ 0x412
    u16 word_buf[SGP_MAX_PROFILE_RET_LEN / sizeof(u16)];
    u8 * const buf8 = (u8 *)word_buf;
 8003572:	f107 0308 	add.w	r3, r7, #8
 8003576:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c

    ret = sensirion_i2c_read(SGP_I2C_ADDRESS, buf8, size);
 800357a:	2358      	movs	r3, #88	@ 0x58
 800357c:	4618      	mov	r0, r3
 800357e:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	@ 0x412
 8003582:	461a      	mov	r2, r3
 8003584:	f8d7 140c 	ldr.w	r1, [r7, #1036]	@ 0x40c
 8003588:	f7ff ff88 	bl	800349c <sensirion_i2c_read>
 800358c:	4603      	mov	r3, r0
 800358e:	f8a7 340a 	strh.w	r3, [r7, #1034]	@ 0x40a

    if (ret != 0)
 8003592:	f9b7 340a 	ldrsh.w	r3, [r7, #1034]	@ 0x40a
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <sgp_i2c_read_words+0x60>
        return STATUS_FAIL;
 800359a:	f04f 33ff 	mov.w	r3, #4294967295
 800359e:	e04e      	b.n	800363e <sgp_i2c_read_words+0xfe>

    /* check the CRC for each word */
    for (i = 0, j = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f8a7 3416 	strh.w	r3, [r7, #1046]	@ 0x416
 80035a6:	2300      	movs	r3, #0
 80035a8:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
 80035ac:	e040      	b.n	8003630 <sgp_i2c_read_words+0xf0>
         i < size;
         i += SGP_WORD_LEN + CRC8_LEN, j += SGP_WORD_LEN) {

        if (sensirion_common_check_crc(&buf8[i], SGP_WORD_LEN,
 80035ae:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 80035b2:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 80035b6:	18d0      	adds	r0, r2, r3
                                       buf8[i + SGP_WORD_LEN]) == STATUS_FAIL) {
 80035b8:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 80035bc:	3302      	adds	r3, #2
 80035be:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 80035c2:	4413      	add	r3, r2
        if (sensirion_common_check_crc(&buf8[i], SGP_WORD_LEN,
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	2102      	movs	r1, #2
 80035ca:	f7ff ff4d 	bl	8003468 <sensirion_common_check_crc>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d102      	bne.n	80035dc <sgp_i2c_read_words+0x9c>
            return STATUS_FAIL;
 80035d6:	f04f 33ff 	mov.w	r3, #4294967295
 80035da:	e030      	b.n	800363e <sgp_i2c_read_words+0xfe>
        }
        ((u8 *)data)[j]     = buf8[i];
 80035dc:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 80035e0:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 80035e4:	441a      	add	r2, r3
 80035e6:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 80035ea:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 80035ee:	f2a1 4114 	subw	r1, r1, #1044	@ 0x414
 80035f2:	6809      	ldr	r1, [r1, #0]
 80035f4:	440b      	add	r3, r1
 80035f6:	7812      	ldrb	r2, [r2, #0]
 80035f8:	701a      	strb	r2, [r3, #0]
        ((u8 *)data)[j + 1] = buf8[i + 1];
 80035fa:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 80035fe:	3301      	adds	r3, #1
 8003600:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8003604:	441a      	add	r2, r3
 8003606:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 800360a:	3301      	adds	r3, #1
 800360c:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 8003610:	f2a1 4114 	subw	r1, r1, #1044	@ 0x414
 8003614:	6809      	ldr	r1, [r1, #0]
 8003616:	440b      	add	r3, r1
 8003618:	7812      	ldrb	r2, [r2, #0]
 800361a:	701a      	strb	r2, [r3, #0]
         i += SGP_WORD_LEN + CRC8_LEN, j += SGP_WORD_LEN) {
 800361c:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 8003620:	3303      	adds	r3, #3
 8003622:	f8a7 3416 	strh.w	r3, [r7, #1046]	@ 0x416
 8003626:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 800362a:	3302      	adds	r3, #2
 800362c:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
         i < size;
 8003630:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	@ 0x416
 8003634:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	@ 0x412
 8003638:	429a      	cmp	r2, r3
 800363a:	d3b8      	bcc.n	80035ae <sgp_i2c_read_words+0x6e>
    }

    return STATUS_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <sgp_i2c_write>:
 * sgp_i2c_write() - writes to the SGP sensor
 * @command:     Command
 *
 * Return:      STATUS_OK on success.
 */
static s16 sgp_i2c_write(const sgp_command *command) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
    s8 ret;

    ret = sensirion_i2c_write(SGP_I2C_ADDRESS, command->buf, SGP_COMMAND_LEN);
 8003650:	2358      	movs	r3, #88	@ 0x58
 8003652:	4618      	mov	r0, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	4619      	mov	r1, r3
 800365a:	f7ff ff3b 	bl	80034d4 <sensirion_i2c_write>
 800365e:	4603      	mov	r3, r0
 8003660:	73fb      	strb	r3, [r7, #15]
    if (ret != 0)
 8003662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <sgp_i2c_write+0x28>
        return STATUS_FAIL;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	e000      	b.n	8003672 <sgp_i2c_write+0x2a>

    return STATUS_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <unpack_signals>:

/**
 * unpack_signals() - unpack signals which are stored in client_data.word_buf
 * @profile:    The profile
 */
static void unpack_signals(const struct sgp_profile *profile) {
 800367c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003680:	b089      	sub	sp, #36	@ 0x24
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	466b      	mov	r3, sp
 8003688:	461e      	mov	r6, r3
    s16 i, j;
    const struct sgp_signal *signal;
    u16 data_words = profile->number_of_signals;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	891b      	ldrh	r3, [r3, #8]
 800368e:	837b      	strh	r3, [r7, #26]
    u16 word_buf[data_words];
 8003690:	8b79      	ldrh	r1, [r7, #26]
 8003692:	460b      	mov	r3, r1
 8003694:	3b01      	subs	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	b28b      	uxth	r3, r1
 800369a:	2200      	movs	r2, #0
 800369c:	4698      	mov	r8, r3
 800369e:	4691      	mov	r9, r2
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80036ac:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80036b0:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80036b4:	b28b      	uxth	r3, r1
 80036b6:	2200      	movs	r2, #0
 80036b8:	461c      	mov	r4, r3
 80036ba:	4615      	mov	r5, r2
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	012b      	lsls	r3, r5, #4
 80036c6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80036ca:	0122      	lsls	r2, r4, #4
 80036cc:	460b      	mov	r3, r1
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	3307      	adds	r3, #7
 80036d2:	08db      	lsrs	r3, r3, #3
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	ebad 0d03 	sub.w	sp, sp, r3
 80036da:	466b      	mov	r3, sp
 80036dc:	3301      	adds	r3, #1
 80036de:	085b      	lsrs	r3, r3, #1
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	613b      	str	r3, [r7, #16]
    u16 value;

    /* copy buffer */
    for (i = 0; i < data_words; i++)
 80036e4:	2300      	movs	r3, #0
 80036e6:	83fb      	strh	r3, [r7, #30]
 80036e8:	e011      	b.n	800370e <unpack_signals+0x92>
        word_buf[i] = client_data.word_buf[i];
 80036ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80036ee:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80036f2:	4936      	ldr	r1, [pc, #216]	@ (80037cc <unpack_signals+0x150>)
 80036f4:	330c      	adds	r3, #12
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	440b      	add	r3, r1
 80036fa:	8899      	ldrh	r1, [r3, #4]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < data_words; i++)
 8003702:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003706:	b29b      	uxth	r3, r3
 8003708:	3301      	adds	r3, #1
 800370a:	b29b      	uxth	r3, r3
 800370c:	83fb      	strh	r3, [r7, #30]
 800370e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003712:	8b7b      	ldrh	r3, [r7, #26]
 8003714:	429a      	cmp	r2, r3
 8003716:	dbe8      	blt.n	80036ea <unpack_signals+0x6e>

    /* signals are in reverse order in the data buffer */
    for (i = profile->number_of_signals - 1, j = 0; i >= 0; i -= 1, j += 1) {
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	891b      	ldrh	r3, [r3, #8]
 800371c:	3b01      	subs	r3, #1
 800371e:	b29b      	uxth	r3, r3
 8003720:	83fb      	strh	r3, [r7, #30]
 8003722:	2300      	movs	r3, #0
 8003724:	83bb      	strh	r3, [r7, #28]
 8003726:	e046      	b.n	80037b6 <unpack_signals+0x13a>
        signal = profile->signals[profile->number_of_signals - i - 1];
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	891b      	ldrh	r3, [r3, #8]
 8003730:	4619      	mov	r1, r3
 8003732:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003736:	1acb      	subs	r3, r1, r3
 8003738:	4619      	mov	r1, r3
 800373a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800373e:	440b      	add	r3, r1
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]
        value = be16_to_cpu(word_buf[i]);
 8003748:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	b21a      	sxth	r2, r3
 8003756:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003760:	0a1b      	lsrs	r3, r3, #8
 8003762:	b29b      	uxth	r3, r3
 8003764:	b21b      	sxth	r3, r3
 8003766:	4313      	orrs	r3, r2
 8003768:	b21b      	sxth	r3, r3
 800376a:	817b      	strh	r3, [r7, #10]

        if (signal->conversion_function != NULL)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d010      	beq.n	8003796 <unpack_signals+0x11a>
            client_data.word_buf[j] = signal->conversion_function(value);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 800377c:	897a      	ldrh	r2, [r7, #10]
 800377e:	4610      	mov	r0, r2
 8003780:	4798      	blx	r3
 8003782:	4603      	mov	r3, r0
 8003784:	4619      	mov	r1, r3
 8003786:	4a11      	ldr	r2, [pc, #68]	@ (80037cc <unpack_signals+0x150>)
 8003788:	f104 030c 	add.w	r3, r4, #12
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	460a      	mov	r2, r1
 8003792:	809a      	strh	r2, [r3, #4]
 8003794:	e007      	b.n	80037a6 <unpack_signals+0x12a>
        else
            client_data.word_buf[j] = value;
 8003796:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800379a:	4a0c      	ldr	r2, [pc, #48]	@ (80037cc <unpack_signals+0x150>)
 800379c:	330c      	adds	r3, #12
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	897a      	ldrh	r2, [r7, #10]
 80037a4:	809a      	strh	r2, [r3, #4]
    for (i = profile->number_of_signals - 1, j = 0; i >= 0; i -= 1, j += 1) {
 80037a6:	8bfb      	ldrh	r3, [r7, #30]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	83fb      	strh	r3, [r7, #30]
 80037ae:	8bbb      	ldrh	r3, [r7, #28]
 80037b0:	3301      	adds	r3, #1
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	83bb      	strh	r3, [r7, #28]
 80037b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	dab4      	bge.n	8003728 <unpack_signals+0xac>
 80037be:	46b5      	mov	sp, r6
    }
}
 80037c0:	bf00      	nop
 80037c2:	3724      	adds	r7, #36	@ 0x24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037ca:	bf00      	nop
 80037cc:	200023b8 	.word	0x200023b8

080037d0 <read_measurement>:
/**
 * read_measurement() - reads the result of a profile measurement
 *
 * Return:  Length of the written data to the buffer. Negative if it fails.
 */
static s16 read_measurement(const struct sgp_profile *profile) {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

    s16 ret;

    switch (client_data.current_state) {
 80037d8:	4b10      	ldr	r3, [pc, #64]	@ (800381c <read_measurement+0x4c>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d116      	bne.n	800380e <read_measurement+0x3e>

        case MEASURING_PROFILE_STATE:
            ret = sgp_i2c_read_words(client_data.word_buf,
                                     profile->number_of_signals);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	891b      	ldrh	r3, [r3, #8]
            ret = sgp_i2c_read_words(client_data.word_buf,
 80037e4:	4619      	mov	r1, r3
 80037e6:	480e      	ldr	r0, [pc, #56]	@ (8003820 <read_measurement+0x50>)
 80037e8:	f7ff feaa 	bl	8003540 <sgp_i2c_read_words>
 80037ec:	4603      	mov	r3, r0
 80037ee:	81fb      	strh	r3, [r7, #14]

            if (ret)
 80037f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <read_measurement+0x2e>
                /* Measurement in progress */
                return STATUS_FAIL;
 80037f8:	f04f 33ff 	mov.w	r3, #4294967295
 80037fc:	e009      	b.n	8003812 <read_measurement+0x42>

            unpack_signals(profile);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ff3c 	bl	800367c <unpack_signals>
            client_data.current_state = WAIT_STATE;
 8003804:	4b05      	ldr	r3, [pc, #20]	@ (800381c <read_measurement+0x4c>)
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]

            return STATUS_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	e001      	b.n	8003812 <read_measurement+0x42>

        default:
            /* No command issued */
            return STATUS_FAIL;
 800380e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200023b8 	.word	0x200023b8
 8003820:	200023d4 	.word	0x200023d4

08003824 <sgp_i2c_read_words_from_cmd>:
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_i2c_read_words_from_cmd(const sgp_command *cmd,
                                       u32 duration_us,
                                       u16 *data_words,
                                       u16 num_words) {
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	807b      	strh	r3, [r7, #2]

    if (sgp_i2c_write(cmd) == STATUS_FAIL)
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff ff08 	bl	8003648 <sgp_i2c_write>
 8003838:	4603      	mov	r3, r0
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d102      	bne.n	8003846 <sgp_i2c_read_words_from_cmd+0x22>
        return STATUS_FAIL;
 8003840:	f04f 33ff 	mov.w	r3, #4294967295
 8003844:	e008      	b.n	8003858 <sgp_i2c_read_words_from_cmd+0x34>

    /* the chip needs some time to write the data into the RAM */
    sensirion_sleep_usec(duration_us);
 8003846:	68b8      	ldr	r0, [r7, #8]
 8003848:	f7ff fe60 	bl	800350c <sensirion_sleep_usec>
    return sgp_i2c_read_words(data_words, num_words);
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	4619      	mov	r1, r3
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff fe75 	bl	8003540 <sgp_i2c_read_words>
 8003856:	4603      	mov	r3, r0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <sgp_run_profile>:
 * sgp_run_profile() - run a profile and read write its return to client_data
 * @profile     A pointer to the profile
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_run_profile(const struct sgp_profile *profile) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
    u32 duration_us = profile->duration_us + 5;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3305      	adds	r3, #5
 800386e:	60fb      	str	r3, [r7, #12]

    if (sgp_i2c_write(&profile->command) == STATUS_FAIL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	330c      	adds	r3, #12
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fee7 	bl	8003648 <sgp_i2c_write>
 800387a:	4603      	mov	r3, r0
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d102      	bne.n	8003888 <sgp_run_profile+0x28>
        return STATUS_FAIL;
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	e00f      	b.n	80038a8 <sgp_run_profile+0x48>

    sensirion_sleep_usec(duration_us);
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff fe3f 	bl	800350c <sensirion_sleep_usec>

    if (profile->number_of_signals > 0) {
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	891b      	ldrh	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <sgp_run_profile+0x46>
        client_data.current_state = MEASURING_PROFILE_STATE;
 8003896:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <sgp_run_profile+0x50>)
 8003898:	2201      	movs	r2, #1
 800389a:	701a      	strb	r2, [r3, #0]
        return read_measurement(profile);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff97 	bl	80037d0 <read_measurement>
 80038a2:	4603      	mov	r3, r0
 80038a4:	e000      	b.n	80038a8 <sgp_run_profile+0x48>
    }

    return STATUS_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	200023b8 	.word	0x200023b8

080038b4 <sgp_get_profile_by_number>:
 * sgp_get_profile_by_number() - get a profile by its identifier number
 * @number      The number that identifies the profile
 *
 * Return:      A pointer to the profile or NULL if the profile does not exists
 */
static const struct sgp_profile *sgp_get_profile_by_number(u16 number) {
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	80fb      	strh	r3, [r7, #6]
    u8 i;
    const struct sgp_profile *profile = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < client_data.otp_features->number_of_profiles; i++) {
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
 80038c6:	e010      	b.n	80038ea <sgp_get_profile_by_number+0x36>
        profile = client_data.otp_features->profiles[i];
 80038c8:	4b14      	ldr	r3, [pc, #80]	@ (800391c <sgp_get_profile_by_number+0x68>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60bb      	str	r3, [r7, #8]
        if (number == profile->number)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	7a9b      	ldrb	r3, [r3, #10]
 80038dc:	461a      	mov	r2, r3
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00a      	beq.n	80038fa <sgp_get_profile_by_number+0x46>
    for (i = 0; i < client_data.otp_features->number_of_profiles; i++) {
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	3301      	adds	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <sgp_get_profile_by_number+0x68>)
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	889b      	ldrh	r3, [r3, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d3e7      	bcc.n	80038c8 <sgp_get_profile_by_number+0x14>
 80038f8:	e000      	b.n	80038fc <sgp_get_profile_by_number+0x48>
            break;
 80038fa:	bf00      	nop
    }

    if (i == client_data.otp_features->number_of_profiles) {
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	b29a      	uxth	r2, r3
 8003900:	4b06      	ldr	r3, [pc, #24]	@ (800391c <sgp_get_profile_by_number+0x68>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	889b      	ldrh	r3, [r3, #4]
 8003906:	429a      	cmp	r2, r3
 8003908:	d101      	bne.n	800390e <sgp_get_profile_by_number+0x5a>
        return NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	e000      	b.n	8003910 <sgp_get_profile_by_number+0x5c>
    }

    return profile;
 800390e:	68bb      	ldr	r3, [r7, #8]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	200023b8 	.word	0x200023b8

08003920 <sgp_run_profile_by_number>:
 * sgp_run_profile_by_number() - run a profile by its identifier number
 * @number:     The number that identifies the profile
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_run_profile_by_number(u16 number) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	80fb      	strh	r3, [r7, #6]
    const struct sgp_profile *profile;

    profile = sgp_get_profile_by_number(number);
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ffc1 	bl	80038b4 <sgp_get_profile_by_number>
 8003932:	60f8      	str	r0, [r7, #12]
    if (profile == NULL)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d102      	bne.n	8003940 <sgp_run_profile_by_number+0x20>
        return STATUS_FAIL;
 800393a:	f04f 33ff 	mov.w	r3, #4294967295
 800393e:	e00a      	b.n	8003956 <sgp_run_profile_by_number+0x36>

    if (sgp_run_profile(profile) == STATUS_FAIL)
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff ff8d 	bl	8003860 <sgp_run_profile>
 8003946:	4603      	mov	r3, r0
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d102      	bne.n	8003954 <sgp_run_profile_by_number+0x34>
        return STATUS_FAIL;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	e000      	b.n	8003956 <sgp_run_profile_by_number+0x36>

    return STATUS_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <sgp_detect_featureset_version>:
 *
 * @featureset:  Pointer to the featureset bits
 *
 * Return:    STATUS_OK on success
 */
static s16 sgp_detect_featureset_version(u16 *featureset) {
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
    s16 i, j;
    s16 ret = STATUS_FAIL;
 8003968:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800396c:	827b      	strh	r3, [r7, #18]
    u16 feature_set_version = be16_to_cpu(*featureset);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	b21a      	sxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	b29b      	uxth	r3, r3
 800397e:	b21b      	sxth	r3, r3
 8003980:	4313      	orrs	r3, r2
 8003982:	b21b      	sxth	r3, r3
 8003984:	823b      	strh	r3, [r7, #16]
    const struct sgp_otp_featureset *sgp_featureset;

    client_data.info.feature_set_version = feature_set_version;
 8003986:	4a36      	ldr	r2, [pc, #216]	@ (8003a60 <sgp_detect_featureset_version+0x100>)
 8003988:	8a3b      	ldrh	r3, [r7, #16]
 800398a:	8213      	strh	r3, [r2, #16]
    client_data.otp_features = &sgp_features_unknown;
 800398c:	4b34      	ldr	r3, [pc, #208]	@ (8003a60 <sgp_detect_featureset_version+0x100>)
 800398e:	4a35      	ldr	r2, [pc, #212]	@ (8003a64 <sgp_detect_featureset_version+0x104>)
 8003990:	619a      	str	r2, [r3, #24]
    for (i = 0; i < sgp_supported_featuresets.number_of_supported_featuresets; ++i) {
 8003992:	2300      	movs	r3, #0
 8003994:	82fb      	strh	r3, [r7, #22]
 8003996:	e054      	b.n	8003a42 <sgp_detect_featureset_version+0xe2>
        sgp_featureset = sgp_supported_featuresets.featuresets[i];
 8003998:	4b33      	ldr	r3, [pc, #204]	@ (8003a68 <sgp_detect_featureset_version+0x108>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < sgp_featureset->number_of_supported_featureset_versions; ++j) {
 80039a8:	2300      	movs	r3, #0
 80039aa:	82bb      	strh	r3, [r7, #20]
 80039ac:	e03f      	b.n	8003a2e <sgp_detect_featureset_version+0xce>
            if (SGP_FS_COMPAT(feature_set_version,
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	4413      	add	r3, r2
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	dd0f      	ble.n	80039e4 <sgp_detect_featureset_version+0x84>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4413      	add	r3, r2
 80039d0:	881a      	ldrh	r2, [r3, #0]
 80039d2:	8a3b      	ldrh	r3, [r7, #16]
 80039d4:	4053      	eors	r3, r2
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	f24f 13e0 	movw	r3, #61920	@ 0xf1e0
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01a      	beq.n	8003a1a <sgp_detect_featureset_version+0xba>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d115      	bne.n	8003a26 <sgp_detect_featureset_version+0xc6>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	4413      	add	r3, r2
 8003a06:	881a      	ldrh	r2, [r3, #0]
 8003a08:	8a3b      	ldrh	r3, [r7, #16]
 8003a0a:	4053      	eors	r3, r2
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f24f 13ff 	movw	r3, #61951	@ 0xf1ff
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d105      	bne.n	8003a26 <sgp_detect_featureset_version+0xc6>
                              sgp_featureset->supported_featureset_versions[j])) {
                client_data.otp_features = sgp_featureset;
 8003a1a:	4a11      	ldr	r2, [pc, #68]	@ (8003a60 <sgp_detect_featureset_version+0x100>)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6193      	str	r3, [r2, #24]
                ret = STATUS_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	827b      	strh	r3, [r7, #18]
                break;
 8003a24:	e009      	b.n	8003a3a <sgp_detect_featureset_version+0xda>
        for (j = 0; j < sgp_featureset->number_of_supported_featureset_versions; ++j) {
 8003a26:	8abb      	ldrh	r3, [r7, #20]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	82bb      	strh	r3, [r7, #20]
 8003a2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	8992      	ldrh	r2, [r2, #12]
 8003a36:	4293      	cmp	r3, r2
 8003a38:	dbb9      	blt.n	80039ae <sgp_detect_featureset_version+0x4e>
    for (i = 0; i < sgp_supported_featuresets.number_of_supported_featuresets; ++i) {
 8003a3a:	8afb      	ldrh	r3, [r7, #22]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	82fb      	strh	r3, [r7, #22]
 8003a42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a46:	4a08      	ldr	r2, [pc, #32]	@ (8003a68 <sgp_detect_featureset_version+0x108>)
 8003a48:	8892      	ldrh	r2, [r2, #4]
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	dba4      	blt.n	8003998 <sgp_detect_featureset_version+0x38>
            }
        }
    }
    return ret;
 8003a4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	200023b8 	.word	0x200023b8
 8003a64:	0801368c 	.word	0x0801368c
 8003a68:	080138c0 	.word	0x080138c0

08003a6c <sgp_measure_iaq_blocking_read>:
 *
 * The profile is executed synchronously.
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
s16 sgp_measure_iaq_blocking_read(u16 *tvoc_ppb, u16 *co2_eq_ppm) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
    if (sgp_run_profile_by_number(PROFILE_NUMBER_IAQ_MEASURE) == STATUS_FAIL)
 8003a76:	2001      	movs	r0, #1
 8003a78:	f7ff ff52 	bl	8003920 <sgp_run_profile_by_number>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d102      	bne.n	8003a8a <sgp_measure_iaq_blocking_read+0x1e>
        return STATUS_FAIL;
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295
 8003a88:	e008      	b.n	8003a9c <sgp_measure_iaq_blocking_read+0x30>

    *tvoc_ppb = client_data.word_buf[0];
 8003a8a:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <sgp_measure_iaq_blocking_read+0x38>)
 8003a8c:	8b9a      	ldrh	r2, [r3, #28]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = client_data.word_buf[1];
 8003a92:	4b04      	ldr	r3, [pc, #16]	@ (8003aa4 <sgp_measure_iaq_blocking_read+0x38>)
 8003a94:	8bda      	ldrh	r2, [r3, #30]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	801a      	strh	r2, [r3, #0]

    return STATUS_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	200023b8 	.word	0x200023b8

08003aa8 <sgp_measure_signals_blocking_read>:
 *                    value by 512 to get the real signal.
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
s16 sgp_measure_signals_blocking_read(u16 *scaled_ethanol_signal,
                                      u16 *scaled_h2_signal) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]

    if (sgp_run_profile_by_number(PROFILE_NUMBER_MEASURE_SIGNALS) == STATUS_FAIL)
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <sgp_measure_signals_blocking_read+0x3c>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff32 	bl	8003920 <sgp_run_profile_by_number>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac2:	d102      	bne.n	8003aca <sgp_measure_signals_blocking_read+0x22>
        return STATUS_FAIL;
 8003ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac8:	e008      	b.n	8003adc <sgp_measure_signals_blocking_read+0x34>

    *scaled_ethanol_signal = client_data.word_buf[0];
 8003aca:	4b07      	ldr	r3, [pc, #28]	@ (8003ae8 <sgp_measure_signals_blocking_read+0x40>)
 8003acc:	8b9a      	ldrh	r2, [r3, #28]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	801a      	strh	r2, [r3, #0]
    *scaled_h2_signal = client_data.word_buf[1];
 8003ad2:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <sgp_measure_signals_blocking_read+0x40>)
 8003ad4:	8bda      	ldrh	r2, [r3, #30]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	801a      	strh	r2, [r3, #0]

    return STATUS_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	0801369c 	.word	0x0801369c
 8003ae8:	200023b8 	.word	0x200023b8

08003aec <sgp_iaq_init>:
/**
 * sgp_iaq_init() - reset the SGP's internal IAQ baselines
 *
 * Return:  STATUS_OK on success.
 */
s16 sgp_iaq_init() {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
    return sgp_run_profile_by_number(PROFILE_NUMBER_IAQ_INIT);
 8003af0:	2000      	movs	r0, #0
 8003af2:	f7ff ff15 	bl	8003920 <sgp_run_profile_by_number>
 8003af6:	4603      	mov	r3, r0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}

08003afc <sgp_probe>:
 *
 * This call aleady initializes the IAQ baselines (sgp_iaq_init())
 *
 * Return:  STATUS_OK on success.
 */
s16 sgp_probe() {
 8003afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
    s16 err;
    const u64 *serial_buf = (const u64 *)client_data.word_buf;
 8003b04:	4b5d      	ldr	r3, [pc, #372]	@ (8003c7c <sgp_probe+0x180>)
 8003b06:	607b      	str	r3, [r7, #4]

    client_data.current_state = WAIT_STATE;
 8003b08:	4b5d      	ldr	r3, [pc, #372]	@ (8003c80 <sgp_probe+0x184>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]

    /* try to read the serial ID */
    err = sgp_i2c_read_words_from_cmd(&sgp_cmd_get_serial_id,
 8003b0e:	2302      	movs	r3, #2
 8003b10:	4a5a      	ldr	r2, [pc, #360]	@ (8003c7c <sgp_probe+0x180>)
 8003b12:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003b16:	485b      	ldr	r0, [pc, #364]	@ (8003c84 <sgp_probe+0x188>)
 8003b18:	f7ff fe84 	bl	8003824 <sgp_i2c_read_words_from_cmd>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	807b      	strh	r3, [r7, #2]
                                      SGP_CMD_GET_SERIAL_ID_DURATION_US,
                                      client_data.word_buf,
                                      SGP_CMD_GET_SERIAL_ID_WORDS);
    if (err == STATUS_FAIL)
 8003b20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d102      	bne.n	8003b30 <sgp_probe+0x34>
        return err;
 8003b2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b2e:	e09f      	b.n	8003c70 <sgp_probe+0x174>

    client_data.info.serial_id = be64_to_cpu(*serial_buf) >> 16;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	b293      	uxth	r3, r2
 8003b38:	0219      	lsls	r1, r3, #8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	b293      	uxth	r3, r2
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	430b      	orrs	r3, r1
 8003b48:	041e      	lsls	r6, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	0c02      	lsrs	r2, r0, #16
 8003b5a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003b5e:	0c0b      	lsrs	r3, r1, #16
 8003b60:	b293      	uxth	r3, r2
 8003b62:	ea4f 2c03 	mov.w	ip, r3, lsl #8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	0c02      	lsrs	r2, r0, #16
 8003b76:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003b7a:	0c0b      	lsrs	r3, r1, #16
 8003b7c:	b293      	uxth	r3, r2
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	ea4c 0303 	orr.w	r3, ip, r3
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	4333      	orrs	r3, r6
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	469a      	mov	sl, r3
 8003b8e:	4693      	mov	fp, r2
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	4653      	mov	r3, sl
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8003ba2:	f04f 0000 	mov.w	r0, #0
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	4658      	mov	r0, fp
 8003bac:	2100      	movs	r1, #0
 8003bae:	b281      	uxth	r1, r0
 8003bb0:	020e      	lsls	r6, r1, #8
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8003bb8:	f04f 0000 	mov.w	r0, #0
 8003bbc:	f04f 0100 	mov.w	r1, #0
 8003bc0:	4658      	mov	r0, fp
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	b281      	uxth	r1, r0
 8003bc6:	0a09      	lsrs	r1, r1, #8
 8003bc8:	b289      	uxth	r1, r1
 8003bca:	4331      	orrs	r1, r6
 8003bcc:	040e      	lsls	r6, r1, #16
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8003bd4:	f04f 0000 	mov.w	r0, #0
 8003bd8:	f04f 0100 	mov.w	r1, #0
 8003bdc:	ea4f 401b 	mov.w	r0, fp, lsr #16
 8003be0:	2100      	movs	r1, #0
 8003be2:	b281      	uxth	r1, r0
 8003be4:	ea4f 2c01 	mov.w	ip, r1, lsl #8
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8003bee:	f04f 0000 	mov.w	r0, #0
 8003bf2:	f04f 0100 	mov.w	r1, #0
 8003bf6:	ea4f 401b 	mov.w	r0, fp, lsr #16
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	b281      	uxth	r1, r0
 8003bfe:	0a09      	lsrs	r1, r1, #8
 8003c00:	b289      	uxth	r1, r1
 8003c02:	ea4c 0101 	orr.w	r1, ip, r1
 8003c06:	b289      	uxth	r1, r1
 8003c08:	4331      	orrs	r1, r6
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	4688      	mov	r8, r1
 8003c0e:	4681      	mov	r9, r0
 8003c10:	ea42 0408 	orr.w	r4, r2, r8
 8003c14:	ea43 0509 	orr.w	r5, r3, r9
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	0c22      	lsrs	r2, r4, #16
 8003c22:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8003c26:	0c2b      	lsrs	r3, r5, #16
 8003c28:	4915      	ldr	r1, [pc, #84]	@ (8003c80 <sgp_probe+0x184>)
 8003c2a:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* read the featureset version */
    err = sgp_i2c_read_words_from_cmd(&sgp_cmd_get_featureset,
 8003c2e:	2301      	movs	r3, #1
 8003c30:	4a12      	ldr	r2, [pc, #72]	@ (8003c7c <sgp_probe+0x180>)
 8003c32:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003c36:	4814      	ldr	r0, [pc, #80]	@ (8003c88 <sgp_probe+0x18c>)
 8003c38:	f7ff fdf4 	bl	8003824 <sgp_i2c_read_words_from_cmd>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	807b      	strh	r3, [r7, #2]
                                      SGP_CMD_GET_FEATURESET_DURATION_US,
                                      client_data.word_buf,
                                      SGP_CMD_GET_FEATURESET_WORDS);
    if (err == STATUS_FAIL)
 8003c40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d102      	bne.n	8003c50 <sgp_probe+0x154>
        return STATUS_FAIL;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	e00f      	b.n	8003c70 <sgp_probe+0x174>

    err = sgp_detect_featureset_version(client_data.word_buf);
 8003c50:	480a      	ldr	r0, [pc, #40]	@ (8003c7c <sgp_probe+0x180>)
 8003c52:	f7ff fe85 	bl	8003960 <sgp_detect_featureset_version>
 8003c56:	4603      	mov	r3, r0
 8003c58:	807b      	strh	r3, [r7, #2]
    if (err == STATUS_FAIL)
 8003c5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c62:	d102      	bne.n	8003c6a <sgp_probe+0x16e>
        return STATUS_FAIL;
 8003c64:	f04f 33ff 	mov.w	r3, #4294967295
 8003c68:	e002      	b.n	8003c70 <sgp_probe+0x174>

    return sgp_iaq_init();
 8003c6a:	f7ff ff3f 	bl	8003aec <sgp_iaq_init>
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200023d4 	.word	0x200023d4
 8003c80:	200023b8 	.word	0x200023b8
 8003c84:	08013684 	.word	0x08013684
 8003c88:	08013688 	.word	0x08013688

08003c8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003c90:	4b1b      	ldr	r3, [pc, #108]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003c92:	4a1c      	ldr	r2, [pc, #112]	@ (8003d04 <MX_SPI1_Init+0x78>)
 8003c94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c96:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003c98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003c9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c9e:	4b18      	ldr	r3, [pc, #96]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ca4:	4b16      	ldr	r3, [pc, #88]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003ca6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003caa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cac:	4b14      	ldr	r3, [pc, #80]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cb2:	4b13      	ldr	r3, [pc, #76]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cb8:	4b11      	ldr	r3, [pc, #68]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003cba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cbe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003cc2:	2230      	movs	r2, #48	@ 0x30
 8003cc4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003cd8:	4b09      	ldr	r3, [pc, #36]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003cda:	2207      	movs	r2, #7
 8003cdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003cde:	4b08      	ldr	r3, [pc, #32]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ce4:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cea:	4805      	ldr	r0, [pc, #20]	@ (8003d00 <MX_SPI1_Init+0x74>)
 8003cec:	f004 f9a4 	bl	8008038 <HAL_SPI_Init>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003cf6:	f7ff fb67 	bl	80033c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	200029e0 	.word	0x200029e0
 8003d04:	40013000 	.word	0x40013000

08003d08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	@ 0x28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d10:	f107 0314 	add.w	r3, r7, #20
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	609a      	str	r2, [r3, #8]
 8003d1c:	60da      	str	r2, [r3, #12]
 8003d1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a25      	ldr	r2, [pc, #148]	@ (8003dbc <HAL_SPI_MspInit+0xb4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d143      	bne.n	8003db2 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d2a:	4b25      	ldr	r3, [pc, #148]	@ (8003dc0 <HAL_SPI_MspInit+0xb8>)
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	4a24      	ldr	r2, [pc, #144]	@ (8003dc0 <HAL_SPI_MspInit+0xb8>)
 8003d30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d36:	4b22      	ldr	r3, [pc, #136]	@ (8003dc0 <HAL_SPI_MspInit+0xb8>)
 8003d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d42:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc0 <HAL_SPI_MspInit+0xb8>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc0 <HAL_SPI_MspInit+0xb8>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc0 <HAL_SPI_MspInit+0xb8>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d5a:	4b19      	ldr	r3, [pc, #100]	@ (8003dc0 <HAL_SPI_MspInit+0xb8>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	4a18      	ldr	r2, [pc, #96]	@ (8003dc0 <HAL_SPI_MspInit+0xb8>)
 8003d60:	f043 0302 	orr.w	r3, r3, #2
 8003d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d66:	4b16      	ldr	r3, [pc, #88]	@ (8003dc0 <HAL_SPI_MspInit+0xb8>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003d72:	2360      	movs	r3, #96	@ 0x60
 8003d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d76:	2302      	movs	r3, #2
 8003d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d82:	2305      	movs	r3, #5
 8003d84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	480d      	ldr	r0, [pc, #52]	@ (8003dc4 <HAL_SPI_MspInit+0xbc>)
 8003d8e:	f001 fbdf 	bl	8005550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003d92:	2320      	movs	r3, #32
 8003d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d96:	2302      	movs	r3, #2
 8003d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003da2:	2305      	movs	r3, #5
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da6:	f107 0314 	add.w	r3, r7, #20
 8003daa:	4619      	mov	r1, r3
 8003dac:	4806      	ldr	r0, [pc, #24]	@ (8003dc8 <HAL_SPI_MspInit+0xc0>)
 8003dae:	f001 fbcf 	bl	8005550 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003db2:	bf00      	nop
 8003db4:	3728      	adds	r7, #40	@ 0x28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40013000 	.word	0x40013000
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40020000 	.word	0x40020000
 8003dc8:	40020400 	.word	0x40020400

08003dcc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003dd6:	4802      	ldr	r0, [pc, #8]	@ (8003de0 <ST7735_Select+0x14>)
 8003dd8:	f001 fd66 	bl	80058a8 <HAL_GPIO_WritePin>
}
 8003ddc:	bf00      	nop
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40021400 	.word	0x40021400

08003de4 <ST7735_Unselect>:

void ST7735_Unselect() {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8003de8:	2201      	movs	r2, #1
 8003dea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003dee:	4802      	ldr	r0, [pc, #8]	@ (8003df8 <ST7735_Unselect+0x14>)
 8003df0:	f001 fd5a 	bl	80058a8 <HAL_GPIO_WritePin>
}
 8003df4:	bf00      	nop
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40021400 	.word	0x40021400

08003dfc <ST7735_Reset>:

static void ST7735_Reset() {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8003e00:	2200      	movs	r2, #0
 8003e02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e06:	4807      	ldr	r0, [pc, #28]	@ (8003e24 <ST7735_Reset+0x28>)
 8003e08:	f001 fd4e 	bl	80058a8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003e0c:	2005      	movs	r0, #5
 8003e0e:	f000 fe6f 	bl	8004af0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8003e12:	2201      	movs	r2, #1
 8003e14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e18:	4802      	ldr	r0, [pc, #8]	@ (8003e24 <ST7735_Reset+0x28>)
 8003e1a:	f001 fd45 	bl	80058a8 <HAL_GPIO_WritePin>
}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40021400 	.word	0x40021400

08003e28 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8003e32:	2200      	movs	r2, #0
 8003e34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e38:	4806      	ldr	r0, [pc, #24]	@ (8003e54 <ST7735_WriteCommand+0x2c>)
 8003e3a:	f001 fd35 	bl	80058a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003e3e:	1df9      	adds	r1, r7, #7
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295
 8003e44:	2201      	movs	r2, #1
 8003e46:	4804      	ldr	r0, [pc, #16]	@ (8003e58 <ST7735_WriteCommand+0x30>)
 8003e48:	f004 f9a1 	bl	800818e <HAL_SPI_Transmit>
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40021400 	.word	0x40021400
 8003e58:	200029e0 	.word	0x200029e0

08003e5c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003e66:	2201      	movs	r2, #1
 8003e68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e6c:	4807      	ldr	r0, [pc, #28]	@ (8003e8c <ST7735_WriteData+0x30>)
 8003e6e:	f001 fd1b 	bl	80058a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4804      	ldr	r0, [pc, #16]	@ (8003e90 <ST7735_WriteData+0x34>)
 8003e7e:	f004 f986 	bl	800818e <HAL_SPI_Transmit>
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40021400 	.word	0x40021400
 8003e90:	200029e0 	.word	0x200029e0

08003e94 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8003ea6:	e034      	b.n	8003f12 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8003eb2:	7afb      	ldrb	r3, [r7, #11]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ffb7 	bl	8003e28 <ST7735_WriteCommand>

        numArgs = *addr++;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003ec4:	7abb      	ldrb	r3, [r7, #10]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ecc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8003ece:	7abb      	ldrb	r3, [r7, #10]
 8003ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ed4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8003ed6:	7abb      	ldrb	r3, [r7, #10]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003edc:	7abb      	ldrb	r3, [r7, #10]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff ffbb 	bl	8003e5c <ST7735_WriteData>
            addr += numArgs;
 8003ee6:	7abb      	ldrb	r3, [r7, #10]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	4413      	add	r3, r2
 8003eec:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8003eee:	89bb      	ldrh	r3, [r7, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00e      	beq.n	8003f12 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8003efe:	89bb      	ldrh	r3, [r7, #12]
 8003f00:	2bff      	cmp	r3, #255	@ 0xff
 8003f02:	d102      	bne.n	8003f0a <ST7735_ExecuteCommandList+0x76>
 8003f04:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003f08:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8003f0a:	89bb      	ldrh	r3, [r7, #12]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fdef 	bl	8004af0 <HAL_Delay>
    while(numCommands--) {
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	1e5a      	subs	r2, r3, #1
 8003f16:	73fa      	strb	r2, [r7, #15]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1c5      	bne.n	8003ea8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8003f26:	b590      	push	{r4, r7, lr}
 8003f28:	b085      	sub	sp, #20
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	4608      	mov	r0, r1
 8003f30:	4611      	mov	r1, r2
 8003f32:	461a      	mov	r2, r3
 8003f34:	4623      	mov	r3, r4
 8003f36:	71fb      	strb	r3, [r7, #7]
 8003f38:	4603      	mov	r3, r0
 8003f3a:	71bb      	strb	r3, [r7, #6]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	717b      	strb	r3, [r7, #5]
 8003f40:	4613      	mov	r3, r2
 8003f42:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003f44:	202a      	movs	r0, #42	@ 0x2a
 8003f46:	f7ff ff6f 	bl	8003e28 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	733b      	strb	r3, [r7, #12]
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	737b      	strb	r3, [r7, #13]
 8003f52:	2300      	movs	r3, #0
 8003f54:	73bb      	strb	r3, [r7, #14]
 8003f56:	797b      	ldrb	r3, [r7, #5]
 8003f58:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003f5a:	f107 030c 	add.w	r3, r7, #12
 8003f5e:	2104      	movs	r1, #4
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff7b 	bl	8003e5c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003f66:	202b      	movs	r0, #43	@ 0x2b
 8003f68:	f7ff ff5e 	bl	8003e28 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8003f6c:	79bb      	ldrb	r3, [r7, #6]
 8003f6e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8003f70:	793b      	ldrb	r3, [r7, #4]
 8003f72:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003f74:	f107 030c 	add.w	r3, r7, #12
 8003f78:	2104      	movs	r1, #4
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff ff6e 	bl	8003e5c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003f80:	202c      	movs	r0, #44	@ 0x2c
 8003f82:	f7ff ff51 	bl	8003e28 <ST7735_WriteCommand>
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd90      	pop	{r4, r7, pc}
	...

08003f90 <ST7735_Init>:

void ST7735_Init() {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
    ST7735_Select();
 8003f94:	f7ff ff1a 	bl	8003dcc <ST7735_Select>
    ST7735_Reset();
 8003f98:	f7ff ff30 	bl	8003dfc <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8003f9c:	4806      	ldr	r0, [pc, #24]	@ (8003fb8 <ST7735_Init+0x28>)
 8003f9e:	f7ff ff79 	bl	8003e94 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8003fa2:	4806      	ldr	r0, [pc, #24]	@ (8003fbc <ST7735_Init+0x2c>)
 8003fa4:	f7ff ff76 	bl	8003e94 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8003fa8:	4805      	ldr	r0, [pc, #20]	@ (8003fc0 <ST7735_Init+0x30>)
 8003faa:	f7ff ff73 	bl	8003e94 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8003fae:	f7ff ff19 	bl	8003de4 <ST7735_Unselect>
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	080138c8 	.word	0x080138c8
 8003fbc:	08013904 	.word	0x08013904
 8003fc0:	08013914 	.word	0x08013914

08003fc4 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	b590      	push	{r4, r7, lr}
 8003fc8:	b089      	sub	sp, #36	@ 0x24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fce:	4603      	mov	r3, r0
 8003fd0:	80fb      	strh	r3, [r7, #6]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	80bb      	strh	r3, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	b2d8      	uxtb	r0, r3
 8003fde:	88bb      	ldrh	r3, [r7, #4]
 8003fe0:	b2d9      	uxtb	r1, r3
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003fea:	4413      	add	r3, r2
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b2dc      	uxtb	r4, r3
 8003ff2:	88bb      	ldrh	r3, [r7, #4]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003ffa:	4413      	add	r3, r2
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b2db      	uxtb	r3, r3
 8004002:	4622      	mov	r2, r4
 8004004:	f7ff ff8f 	bl	8003f26 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8004008:	2300      	movs	r3, #0
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	e043      	b.n	8004096 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800400e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	3b20      	subs	r3, #32
 8004014:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	4619      	mov	r1, r3
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	440b      	add	r3, r1
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4413      	add	r3, r2
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	e029      	b.n	8004084 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00e      	beq.n	800405e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8004040:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	b29b      	uxth	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	743b      	strb	r3, [r7, #16]
 800404a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800404c:	b2db      	uxtb	r3, r3
 800404e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8004050:	f107 0310 	add.w	r3, r7, #16
 8004054:	2102      	movs	r1, #2
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ff00 	bl	8003e5c <ST7735_WriteData>
 800405c:	e00f      	b.n	800407e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800405e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004062:	0a1b      	lsrs	r3, r3, #8
 8004064:	b29b      	uxth	r3, r3
 8004066:	b2db      	uxtb	r3, r3
 8004068:	733b      	strb	r3, [r7, #12]
 800406a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800406e:	b2db      	uxtb	r3, r3
 8004070:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8004072:	f107 030c 	add.w	r3, r7, #12
 8004076:	2102      	movs	r1, #2
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff feef 	bl	8003e5c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	3301      	adds	r3, #1
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004088:	461a      	mov	r2, r3
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	4293      	cmp	r3, r2
 800408e:	d3cf      	bcc.n	8004030 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	3301      	adds	r3, #1
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800409a:	461a      	mov	r2, r3
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	4293      	cmp	r3, r2
 80040a0:	d3b5      	bcc.n	800400e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	3724      	adds	r7, #36	@ 0x24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80040ae:	b002      	add	sp, #8
 80040b0:	4770      	bx	lr

080040b2 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80040b2:	b082      	sub	sp, #8
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af04      	add	r7, sp, #16
 80040ba:	603a      	str	r2, [r7, #0]
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	4603      	mov	r3, r0
 80040c0:	80fb      	strh	r3, [r7, #6]
 80040c2:	460b      	mov	r3, r1
 80040c4:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80040c6:	f7ff fe81 	bl	8003dcc <ST7735_Select>

    while(*str) {
 80040ca:	e02d      	b.n	8004128 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	7d3a      	ldrb	r2, [r7, #20]
 80040d0:	4413      	add	r3, r2
 80040d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80040d4:	dd13      	ble.n	80040fe <ST7735_WriteString+0x4c>
            x = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80040da:	7d7b      	ldrb	r3, [r7, #21]
 80040dc:	461a      	mov	r2, r3
 80040de:	88bb      	ldrh	r3, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80040e4:	88bb      	ldrh	r3, [r7, #4]
 80040e6:	7d7a      	ldrb	r2, [r7, #21]
 80040e8:	4413      	add	r3, r2
 80040ea:	2b9f      	cmp	r3, #159	@ 0x9f
 80040ec:	dc21      	bgt.n	8004132 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d103      	bne.n	80040fe <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	603b      	str	r3, [r7, #0]
                continue;
 80040fc:	e014      	b.n	8004128 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	88b9      	ldrh	r1, [r7, #4]
 8004104:	88f8      	ldrh	r0, [r7, #6]
 8004106:	8c3b      	ldrh	r3, [r7, #32]
 8004108:	9302      	str	r3, [sp, #8]
 800410a:	8bbb      	ldrh	r3, [r7, #28]
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f7ff ff56 	bl	8003fc4 <ST7735_WriteChar>
        x += font.width;
 8004118:	7d3b      	ldrb	r3, [r7, #20]
 800411a:	461a      	mov	r2, r3
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	4413      	add	r3, r2
 8004120:	80fb      	strh	r3, [r7, #6]
        str++;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	3301      	adds	r3, #1
 8004126:	603b      	str	r3, [r7, #0]
    while(*str) {
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1cd      	bne.n	80040cc <ST7735_WriteString+0x1a>
 8004130:	e000      	b.n	8004134 <ST7735_WriteString+0x82>
                break;
 8004132:	bf00      	nop
    }

    ST7735_Unselect();
 8004134:	f7ff fe56 	bl	8003de4 <ST7735_Unselect>
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004142:	b002      	add	sp, #8
 8004144:	4770      	bx	lr
	...

08004148 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004148:	b590      	push	{r4, r7, lr}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	4604      	mov	r4, r0
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	461a      	mov	r2, r3
 8004156:	4623      	mov	r3, r4
 8004158:	80fb      	strh	r3, [r7, #6]
 800415a:	4603      	mov	r3, r0
 800415c:	80bb      	strh	r3, [r7, #4]
 800415e:	460b      	mov	r3, r1
 8004160:	807b      	strh	r3, [r7, #2]
 8004162:	4613      	mov	r3, r2
 8004164:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	2b7f      	cmp	r3, #127	@ 0x7f
 800416a:	d858      	bhi.n	800421e <ST7735_FillRectangle+0xd6>
 800416c:	88bb      	ldrh	r3, [r7, #4]
 800416e:	2b9f      	cmp	r3, #159	@ 0x9f
 8004170:	d855      	bhi.n	800421e <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8004172:	88fa      	ldrh	r2, [r7, #6]
 8004174:	887b      	ldrh	r3, [r7, #2]
 8004176:	4413      	add	r3, r2
 8004178:	2b80      	cmp	r3, #128	@ 0x80
 800417a:	dd03      	ble.n	8004184 <ST7735_FillRectangle+0x3c>
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8004182:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8004184:	88ba      	ldrh	r2, [r7, #4]
 8004186:	883b      	ldrh	r3, [r7, #0]
 8004188:	4413      	add	r3, r2
 800418a:	2ba0      	cmp	r3, #160	@ 0xa0
 800418c:	dd03      	ble.n	8004196 <ST7735_FillRectangle+0x4e>
 800418e:	88bb      	ldrh	r3, [r7, #4]
 8004190:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8004194:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8004196:	f7ff fe19 	bl	8003dcc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	b2d8      	uxtb	r0, r3
 800419e:	88bb      	ldrh	r3, [r7, #4]
 80041a0:	b2d9      	uxtb	r1, r3
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	887b      	ldrh	r3, [r7, #2]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	4413      	add	r3, r2
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b2dc      	uxtb	r4, r3
 80041b2:	88bb      	ldrh	r3, [r7, #4]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	883b      	ldrh	r3, [r7, #0]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	4622      	mov	r2, r4
 80041c4:	f7ff feaf 	bl	8003f26 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80041c8:	8c3b      	ldrh	r3, [r7, #32]
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	733b      	strb	r3, [r7, #12]
 80041d2:	8c3b      	ldrh	r3, [r7, #32]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80041d8:	2201      	movs	r2, #1
 80041da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041de:	4812      	ldr	r0, [pc, #72]	@ (8004228 <ST7735_FillRectangle+0xe0>)
 80041e0:	f001 fb62 	bl	80058a8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80041e4:	883b      	ldrh	r3, [r7, #0]
 80041e6:	80bb      	strh	r3, [r7, #4]
 80041e8:	e013      	b.n	8004212 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	80fb      	strh	r3, [r7, #6]
 80041ee:	e00a      	b.n	8004206 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80041f0:	f107 010c 	add.w	r1, r7, #12
 80041f4:	f04f 33ff 	mov.w	r3, #4294967295
 80041f8:	2202      	movs	r2, #2
 80041fa:	480c      	ldr	r0, [pc, #48]	@ (800422c <ST7735_FillRectangle+0xe4>)
 80041fc:	f003 ffc7 	bl	800818e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	3b01      	subs	r3, #1
 8004204:	80fb      	strh	r3, [r7, #6]
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f1      	bne.n	80041f0 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 800420c:	88bb      	ldrh	r3, [r7, #4]
 800420e:	3b01      	subs	r3, #1
 8004210:	80bb      	strh	r3, [r7, #4]
 8004212:	88bb      	ldrh	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e8      	bne.n	80041ea <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8004218:	f7ff fde4 	bl	8003de4 <ST7735_Unselect>
 800421c:	e000      	b.n	8004220 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800421e:	bf00      	nop
}
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	bd90      	pop	{r4, r7, pc}
 8004226:	bf00      	nop
 8004228:	40021400 	.word	0x40021400
 800422c:	200029e0 	.word	0x200029e0

08004230 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af02      	add	r7, sp, #8
 8004236:	4603      	mov	r3, r0
 8004238:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	23a0      	movs	r3, #160	@ 0xa0
 8004240:	2280      	movs	r2, #128	@ 0x80
 8004242:	2100      	movs	r1, #0
 8004244:	2000      	movs	r0, #0
 8004246:	f7ff ff7f 	bl	8004148 <ST7735_FillRectangle>
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800425a:	4b0f      	ldr	r3, [pc, #60]	@ (8004298 <HAL_MspInit+0x44>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	4a0e      	ldr	r2, [pc, #56]	@ (8004298 <HAL_MspInit+0x44>)
 8004260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004264:	6413      	str	r3, [r2, #64]	@ 0x40
 8004266:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <HAL_MspInit+0x44>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004272:	4b09      	ldr	r3, [pc, #36]	@ (8004298 <HAL_MspInit+0x44>)
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	4a08      	ldr	r2, [pc, #32]	@ (8004298 <HAL_MspInit+0x44>)
 8004278:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800427c:	6453      	str	r3, [r2, #68]	@ 0x44
 800427e:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <HAL_MspInit+0x44>)
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800

0800429c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80042a0:	4b0e      	ldr	r3, [pc, #56]	@ (80042dc <SDTimer_Handler+0x40>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d006      	beq.n	80042b8 <SDTimer_Handler+0x1c>
    Timer1--;
 80042aa:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <SDTimer_Handler+0x40>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	4b09      	ldr	r3, [pc, #36]	@ (80042dc <SDTimer_Handler+0x40>)
 80042b6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80042b8:	4b09      	ldr	r3, [pc, #36]	@ (80042e0 <SDTimer_Handler+0x44>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d006      	beq.n	80042d0 <SDTimer_Handler+0x34>
    Timer2--;
 80042c2:	4b07      	ldr	r3, [pc, #28]	@ (80042e0 <SDTimer_Handler+0x44>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	4b04      	ldr	r3, [pc, #16]	@ (80042e0 <SDTimer_Handler+0x44>)
 80042ce:	701a      	strb	r2, [r3, #0]
}
 80042d0:	bf00      	nop
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20002a45 	.word	0x20002a45
 80042e0:	20002a46 	.word	0x20002a46

080042e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80042e8:	bf00      	nop
 80042ea:	e7fd      	b.n	80042e8 <NMI_Handler+0x4>

080042ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042f0:	bf00      	nop
 80042f2:	e7fd      	b.n	80042f0 <HardFault_Handler+0x4>

080042f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <MemManage_Handler+0x4>

080042fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004300:	bf00      	nop
 8004302:	e7fd      	b.n	8004300 <BusFault_Handler+0x4>

08004304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004308:	bf00      	nop
 800430a:	e7fd      	b.n	8004308 <UsageFault_Handler+0x4>

0800430c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800431a:	b480      	push	{r7}
 800431c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800431e:	bf00      	nop
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 800433c:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <SysTick_Handler+0x30>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	3301      	adds	r3, #1
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4b08      	ldr	r3, [pc, #32]	@ (8004368 <SysTick_Handler+0x30>)
 8004348:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800434a:	4b07      	ldr	r3, [pc, #28]	@ (8004368 <SysTick_Handler+0x30>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b09      	cmp	r3, #9
 8004352:	d904      	bls.n	800435e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8004354:	4b04      	ldr	r3, [pc, #16]	@ (8004368 <SysTick_Handler+0x30>)
 8004356:	2200      	movs	r2, #0
 8004358:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800435a:	f7ff ff9f 	bl	800429c <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800435e:	f000 fba7 	bl	8004ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20002a44 	.word	0x20002a44

0800436c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004370:	4802      	ldr	r0, [pc, #8]	@ (800437c <TIM7_IRQHandler+0x10>)
 8004372:	f004 fe65 	bl	8009040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20002a98 	.word	0x20002a98

08004380 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  return 1;
 8004384:	2301      	movs	r3, #1
}
 8004386:	4618      	mov	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <_kill>:

int _kill(int pid, int sig)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800439a:	f00b fa1f 	bl	800f7dc <__errno>
 800439e:	4603      	mov	r3, r0
 80043a0:	2216      	movs	r2, #22
 80043a2:	601a      	str	r2, [r3, #0]
  return -1;
 80043a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <_exit>:

void _exit (int status)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043b8:	f04f 31ff 	mov.w	r1, #4294967295
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ffe7 	bl	8004390 <_kill>
  while (1) {}    /* Make sure we hang here */
 80043c2:	bf00      	nop
 80043c4:	e7fd      	b.n	80043c2 <_exit+0x12>

080043c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b086      	sub	sp, #24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e00a      	b.n	80043ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80043d8:	f3af 8000 	nop.w
 80043dc:	4601      	mov	r1, r0
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	60ba      	str	r2, [r7, #8]
 80043e4:	b2ca      	uxtb	r2, r1
 80043e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	3301      	adds	r3, #1
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	dbf0      	blt.n	80043d8 <_read+0x12>
  }

  return len;
 80043f6:	687b      	ldr	r3, [r7, #4]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	e009      	b.n	8004426 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	60ba      	str	r2, [r7, #8]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe ffda 	bl	80033d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	3301      	adds	r3, #1
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	429a      	cmp	r2, r3
 800442c:	dbf1      	blt.n	8004412 <_write+0x12>
  }
  return len;
 800442e:	687b      	ldr	r3, [r7, #4]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <_close>:

int _close(int file)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004440:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004460:	605a      	str	r2, [r3, #4]
  return 0;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <_isatty>:

int _isatty(int file)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004478:	2301      	movs	r3, #1
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044a8:	4a14      	ldr	r2, [pc, #80]	@ (80044fc <_sbrk+0x5c>)
 80044aa:	4b15      	ldr	r3, [pc, #84]	@ (8004500 <_sbrk+0x60>)
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044b4:	4b13      	ldr	r3, [pc, #76]	@ (8004504 <_sbrk+0x64>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d102      	bne.n	80044c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044bc:	4b11      	ldr	r3, [pc, #68]	@ (8004504 <_sbrk+0x64>)
 80044be:	4a12      	ldr	r2, [pc, #72]	@ (8004508 <_sbrk+0x68>)
 80044c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044c2:	4b10      	ldr	r3, [pc, #64]	@ (8004504 <_sbrk+0x64>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4413      	add	r3, r2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d207      	bcs.n	80044e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044d0:	f00b f984 	bl	800f7dc <__errno>
 80044d4:	4603      	mov	r3, r0
 80044d6:	220c      	movs	r2, #12
 80044d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044da:	f04f 33ff 	mov.w	r3, #4294967295
 80044de:	e009      	b.n	80044f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044e0:	4b08      	ldr	r3, [pc, #32]	@ (8004504 <_sbrk+0x64>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044e6:	4b07      	ldr	r3, [pc, #28]	@ (8004504 <_sbrk+0x64>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	4a05      	ldr	r2, [pc, #20]	@ (8004504 <_sbrk+0x64>)
 80044f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044f2:	68fb      	ldr	r3, [r7, #12]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20050000 	.word	0x20050000
 8004500:	00000400 	.word	0x00000400
 8004504:	20002a48 	.word	0x20002a48
 8004508:	200033d8 	.word	0x200033d8

0800450c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004510:	4b06      	ldr	r3, [pc, #24]	@ (800452c <SystemInit+0x20>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004516:	4a05      	ldr	r2, [pc, #20]	@ (800452c <SystemInit+0x20>)
 8004518:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800451c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	e000ed00 	.word	0xe000ed00

08004530 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08e      	sub	sp, #56	@ 0x38
 8004534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004536:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	605a      	str	r2, [r3, #4]
 8004540:	609a      	str	r2, [r3, #8]
 8004542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004544:	f107 031c 	add.w	r3, r7, #28
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	605a      	str	r2, [r3, #4]
 800454e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004550:	463b      	mov	r3, r7
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	605a      	str	r2, [r3, #4]
 8004558:	609a      	str	r2, [r3, #8]
 800455a:	60da      	str	r2, [r3, #12]
 800455c:	611a      	str	r2, [r3, #16]
 800455e:	615a      	str	r2, [r3, #20]
 8004560:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004562:	4b2d      	ldr	r3, [pc, #180]	@ (8004618 <MX_TIM3_Init+0xe8>)
 8004564:	4a2d      	ldr	r2, [pc, #180]	@ (800461c <MX_TIM3_Init+0xec>)
 8004566:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8004568:	4b2b      	ldr	r3, [pc, #172]	@ (8004618 <MX_TIM3_Init+0xe8>)
 800456a:	2247      	movs	r2, #71	@ 0x47
 800456c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800456e:	4b2a      	ldr	r3, [pc, #168]	@ (8004618 <MX_TIM3_Init+0xe8>)
 8004570:	2200      	movs	r2, #0
 8004572:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8004574:	4b28      	ldr	r3, [pc, #160]	@ (8004618 <MX_TIM3_Init+0xe8>)
 8004576:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800457a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800457c:	4b26      	ldr	r3, [pc, #152]	@ (8004618 <MX_TIM3_Init+0xe8>)
 800457e:	2200      	movs	r2, #0
 8004580:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004582:	4b25      	ldr	r3, [pc, #148]	@ (8004618 <MX_TIM3_Init+0xe8>)
 8004584:	2200      	movs	r2, #0
 8004586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004588:	4823      	ldr	r0, [pc, #140]	@ (8004618 <MX_TIM3_Init+0xe8>)
 800458a:	f004 fb2d 	bl	8008be8 <HAL_TIM_Base_Init>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004594:	f7fe ff18 	bl	80033c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800459c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800459e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045a2:	4619      	mov	r1, r3
 80045a4:	481c      	ldr	r0, [pc, #112]	@ (8004618 <MX_TIM3_Init+0xe8>)
 80045a6:	f004 ff67 	bl	8009478 <HAL_TIM_ConfigClockSource>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80045b0:	f7fe ff0a 	bl	80033c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80045b4:	4818      	ldr	r0, [pc, #96]	@ (8004618 <MX_TIM3_Init+0xe8>)
 80045b6:	f004 fbe7 	bl	8008d88 <HAL_TIM_PWM_Init>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80045c0:	f7fe ff02 	bl	80033c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045c8:	2300      	movs	r3, #0
 80045ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80045cc:	f107 031c 	add.w	r3, r7, #28
 80045d0:	4619      	mov	r1, r3
 80045d2:	4811      	ldr	r0, [pc, #68]	@ (8004618 <MX_TIM3_Init+0xe8>)
 80045d4:	f005 fc0c 	bl	8009df0 <HAL_TIMEx_MasterConfigSynchronization>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80045de:	f7fe fef3 	bl	80033c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045e2:	2360      	movs	r3, #96	@ 0x60
 80045e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045f2:	463b      	mov	r3, r7
 80045f4:	2200      	movs	r2, #0
 80045f6:	4619      	mov	r1, r3
 80045f8:	4807      	ldr	r0, [pc, #28]	@ (8004618 <MX_TIM3_Init+0xe8>)
 80045fa:	f004 fe29 	bl	8009250 <HAL_TIM_PWM_ConfigChannel>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004604:	f7fe fee0 	bl	80033c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004608:	4803      	ldr	r0, [pc, #12]	@ (8004618 <MX_TIM3_Init+0xe8>)
 800460a:	f000 f87b 	bl	8004704 <HAL_TIM_MspPostInit>

}
 800460e:	bf00      	nop
 8004610:	3738      	adds	r7, #56	@ 0x38
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20002a4c 	.word	0x20002a4c
 800461c:	40000400 	.word	0x40000400

08004620 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004626:	1d3b      	adds	r3, r7, #4
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004630:	4b15      	ldr	r3, [pc, #84]	@ (8004688 <MX_TIM7_Init+0x68>)
 8004632:	4a16      	ldr	r2, [pc, #88]	@ (800468c <MX_TIM7_Init+0x6c>)
 8004634:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 8004636:	4b14      	ldr	r3, [pc, #80]	@ (8004688 <MX_TIM7_Init+0x68>)
 8004638:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800463c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800463e:	4b12      	ldr	r3, [pc, #72]	@ (8004688 <MX_TIM7_Init+0x68>)
 8004640:	2200      	movs	r2, #0
 8004642:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8004644:	4b10      	ldr	r3, [pc, #64]	@ (8004688 <MX_TIM7_Init+0x68>)
 8004646:	f242 720f 	movw	r2, #9999	@ 0x270f
 800464a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800464c:	4b0e      	ldr	r3, [pc, #56]	@ (8004688 <MX_TIM7_Init+0x68>)
 800464e:	2200      	movs	r2, #0
 8004650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004652:	480d      	ldr	r0, [pc, #52]	@ (8004688 <MX_TIM7_Init+0x68>)
 8004654:	f004 fac8 	bl	8008be8 <HAL_TIM_Base_Init>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800465e:	f7fe feb3 	bl	80033c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004662:	2300      	movs	r3, #0
 8004664:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800466a:	1d3b      	adds	r3, r7, #4
 800466c:	4619      	mov	r1, r3
 800466e:	4806      	ldr	r0, [pc, #24]	@ (8004688 <MX_TIM7_Init+0x68>)
 8004670:	f005 fbbe 	bl	8009df0 <HAL_TIMEx_MasterConfigSynchronization>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800467a:	f7fe fea5 	bl	80033c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20002a98 	.word	0x20002a98
 800468c:	40001400 	.word	0x40001400

08004690 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a16      	ldr	r2, [pc, #88]	@ (80046f8 <HAL_TIM_Base_MspInit+0x68>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10c      	bne.n	80046bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046a2:	4b16      	ldr	r3, [pc, #88]	@ (80046fc <HAL_TIM_Base_MspInit+0x6c>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	4a15      	ldr	r2, [pc, #84]	@ (80046fc <HAL_TIM_Base_MspInit+0x6c>)
 80046a8:	f043 0302 	orr.w	r3, r3, #2
 80046ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ae:	4b13      	ldr	r3, [pc, #76]	@ (80046fc <HAL_TIM_Base_MspInit+0x6c>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80046ba:	e018      	b.n	80046ee <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a0f      	ldr	r2, [pc, #60]	@ (8004700 <HAL_TIM_Base_MspInit+0x70>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d113      	bne.n	80046ee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80046c6:	4b0d      	ldr	r3, [pc, #52]	@ (80046fc <HAL_TIM_Base_MspInit+0x6c>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	4a0c      	ldr	r2, [pc, #48]	@ (80046fc <HAL_TIM_Base_MspInit+0x6c>)
 80046cc:	f043 0320 	orr.w	r3, r3, #32
 80046d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046d2:	4b0a      	ldr	r3, [pc, #40]	@ (80046fc <HAL_TIM_Base_MspInit+0x6c>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80046de:	2200      	movs	r2, #0
 80046e0:	2100      	movs	r1, #0
 80046e2:	2037      	movs	r0, #55	@ 0x37
 80046e4:	f000 fefd 	bl	80054e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80046e8:	2037      	movs	r0, #55	@ 0x37
 80046ea:	f000 ff16 	bl	800551a <HAL_NVIC_EnableIRQ>
}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40000400 	.word	0x40000400
 80046fc:	40023800 	.word	0x40023800
 8004700:	40001400 	.word	0x40001400

08004704 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800470c:	f107 030c 	add.w	r3, r7, #12
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a11      	ldr	r2, [pc, #68]	@ (8004768 <HAL_TIM_MspPostInit+0x64>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d11b      	bne.n	800475e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004726:	4b11      	ldr	r3, [pc, #68]	@ (800476c <HAL_TIM_MspPostInit+0x68>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	4a10      	ldr	r2, [pc, #64]	@ (800476c <HAL_TIM_MspPostInit+0x68>)
 800472c:	f043 0304 	orr.w	r3, r3, #4
 8004730:	6313      	str	r3, [r2, #48]	@ 0x30
 8004732:	4b0e      	ldr	r3, [pc, #56]	@ (800476c <HAL_TIM_MspPostInit+0x68>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	60bb      	str	r3, [r7, #8]
 800473c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800473e:	2340      	movs	r3, #64	@ 0x40
 8004740:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004742:	2302      	movs	r3, #2
 8004744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800474a:	2300      	movs	r3, #0
 800474c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800474e:	2302      	movs	r3, #2
 8004750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004752:	f107 030c 	add.w	r3, r7, #12
 8004756:	4619      	mov	r1, r3
 8004758:	4805      	ldr	r0, [pc, #20]	@ (8004770 <HAL_TIM_MspPostInit+0x6c>)
 800475a:	f000 fef9 	bl	8005550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800475e:	bf00      	nop
 8004760:	3720      	adds	r7, #32
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40000400 	.word	0x40000400
 800476c:	40023800 	.word	0x40023800
 8004770:	40020800 	.word	0x40020800

08004774 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004778:	4b14      	ldr	r3, [pc, #80]	@ (80047cc <MX_USART3_UART_Init+0x58>)
 800477a:	4a15      	ldr	r2, [pc, #84]	@ (80047d0 <MX_USART3_UART_Init+0x5c>)
 800477c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800477e:	4b13      	ldr	r3, [pc, #76]	@ (80047cc <MX_USART3_UART_Init+0x58>)
 8004780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004784:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004786:	4b11      	ldr	r3, [pc, #68]	@ (80047cc <MX_USART3_UART_Init+0x58>)
 8004788:	2200      	movs	r2, #0
 800478a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800478c:	4b0f      	ldr	r3, [pc, #60]	@ (80047cc <MX_USART3_UART_Init+0x58>)
 800478e:	2200      	movs	r2, #0
 8004790:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004792:	4b0e      	ldr	r3, [pc, #56]	@ (80047cc <MX_USART3_UART_Init+0x58>)
 8004794:	2200      	movs	r2, #0
 8004796:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004798:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <MX_USART3_UART_Init+0x58>)
 800479a:	220c      	movs	r2, #12
 800479c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800479e:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <MX_USART3_UART_Init+0x58>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80047a4:	4b09      	ldr	r3, [pc, #36]	@ (80047cc <MX_USART3_UART_Init+0x58>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047aa:	4b08      	ldr	r3, [pc, #32]	@ (80047cc <MX_USART3_UART_Init+0x58>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047b0:	4b06      	ldr	r3, [pc, #24]	@ (80047cc <MX_USART3_UART_Init+0x58>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80047b6:	4805      	ldr	r0, [pc, #20]	@ (80047cc <MX_USART3_UART_Init+0x58>)
 80047b8:	f005 fbc6 	bl	8009f48 <HAL_UART_Init>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80047c2:	f7fe fe01 	bl	80033c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80047c6:	bf00      	nop
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20002ae4 	.word	0x20002ae4
 80047d0:	40004800 	.word	0x40004800

080047d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b0aa      	sub	sp, #168	@ 0xa8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047dc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047ec:	f107 0310 	add.w	r3, r7, #16
 80047f0:	2284      	movs	r2, #132	@ 0x84
 80047f2:	2100      	movs	r1, #0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f00a ff8f 	bl	800f718 <memset>
  if(uartHandle->Instance==USART3)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a22      	ldr	r2, [pc, #136]	@ (8004888 <HAL_UART_MspInit+0xb4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d13c      	bne.n	800487e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004804:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004808:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800480a:	2300      	movs	r3, #0
 800480c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800480e:	f107 0310 	add.w	r3, r7, #16
 8004812:	4618      	mov	r0, r3
 8004814:	f003 f820 	bl	8007858 <HAL_RCCEx_PeriphCLKConfig>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800481e:	f7fe fdd3 	bl	80033c8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004822:	4b1a      	ldr	r3, [pc, #104]	@ (800488c <HAL_UART_MspInit+0xb8>)
 8004824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004826:	4a19      	ldr	r2, [pc, #100]	@ (800488c <HAL_UART_MspInit+0xb8>)
 8004828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800482c:	6413      	str	r3, [r2, #64]	@ 0x40
 800482e:	4b17      	ldr	r3, [pc, #92]	@ (800488c <HAL_UART_MspInit+0xb8>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800483a:	4b14      	ldr	r3, [pc, #80]	@ (800488c <HAL_UART_MspInit+0xb8>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483e:	4a13      	ldr	r2, [pc, #76]	@ (800488c <HAL_UART_MspInit+0xb8>)
 8004840:	f043 0308 	orr.w	r3, r3, #8
 8004844:	6313      	str	r3, [r2, #48]	@ 0x30
 8004846:	4b11      	ldr	r3, [pc, #68]	@ (800488c <HAL_UART_MspInit+0xb8>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004852:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004856:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485a:	2302      	movs	r3, #2
 800485c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004860:	2301      	movs	r3, #1
 8004862:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004866:	2303      	movs	r3, #3
 8004868:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800486c:	2307      	movs	r3, #7
 800486e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004872:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004876:	4619      	mov	r1, r3
 8004878:	4805      	ldr	r0, [pc, #20]	@ (8004890 <HAL_UART_MspInit+0xbc>)
 800487a:	f000 fe69 	bl	8005550 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800487e:	bf00      	nop
 8004880:	37a8      	adds	r7, #168	@ 0xa8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40004800 	.word	0x40004800
 800488c:	40023800 	.word	0x40023800
 8004890:	40020c00 	.word	0x40020c00

08004894 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004898:	4b14      	ldr	r3, [pc, #80]	@ (80048ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800489a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800489e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80048a0:	4b12      	ldr	r3, [pc, #72]	@ (80048ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80048a2:	2206      	movs	r2, #6
 80048a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80048a6:	4b11      	ldr	r3, [pc, #68]	@ (80048ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80048a8:	2202      	movs	r2, #2
 80048aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80048ac:	4b0f      	ldr	r3, [pc, #60]	@ (80048ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80048b2:	4b0e      	ldr	r3, [pc, #56]	@ (80048ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80048b4:	2202      	movs	r2, #2
 80048b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80048b8:	4b0c      	ldr	r3, [pc, #48]	@ (80048ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80048be:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80048c4:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80048ca:	4b08      	ldr	r3, [pc, #32]	@ (80048ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80048d0:	4b06      	ldr	r3, [pc, #24]	@ (80048ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80048d6:	4805      	ldr	r0, [pc, #20]	@ (80048ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80048d8:	f002 f9a9 	bl	8006c2e <HAL_PCD_Init>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80048e2:	f7fe fd71 	bl	80033c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80048e6:	bf00      	nop
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20002b6c 	.word	0x20002b6c

080048f0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b0ac      	sub	sp, #176	@ 0xb0
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004908:	f107 0318 	add.w	r3, r7, #24
 800490c:	2284      	movs	r2, #132	@ 0x84
 800490e:	2100      	movs	r1, #0
 8004910:	4618      	mov	r0, r3
 8004912:	f00a ff01 	bl	800f718 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800491e:	d159      	bne.n	80049d4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004920:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004924:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004926:	2300      	movs	r3, #0
 8004928:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800492c:	f107 0318 	add.w	r3, r7, #24
 8004930:	4618      	mov	r0, r3
 8004932:	f002 ff91 	bl	8007858 <HAL_RCCEx_PeriphCLKConfig>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800493c:	f7fe fd44 	bl	80033c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004940:	4b26      	ldr	r3, [pc, #152]	@ (80049dc <HAL_PCD_MspInit+0xec>)
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004944:	4a25      	ldr	r2, [pc, #148]	@ (80049dc <HAL_PCD_MspInit+0xec>)
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	6313      	str	r3, [r2, #48]	@ 0x30
 800494c:	4b23      	ldr	r3, [pc, #140]	@ (80049dc <HAL_PCD_MspInit+0xec>)
 800494e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004958:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800495c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004960:	2302      	movs	r3, #2
 8004962:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004966:	2300      	movs	r3, #0
 8004968:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800496c:	2303      	movs	r3, #3
 800496e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004972:	230a      	movs	r3, #10
 8004974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004978:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800497c:	4619      	mov	r1, r3
 800497e:	4818      	ldr	r0, [pc, #96]	@ (80049e0 <HAL_PCD_MspInit+0xf0>)
 8004980:	f000 fde6 	bl	8005550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004984:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004988:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800498c:	2300      	movs	r3, #0
 800498e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004992:	2300      	movs	r3, #0
 8004994:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004998:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800499c:	4619      	mov	r1, r3
 800499e:	4810      	ldr	r0, [pc, #64]	@ (80049e0 <HAL_PCD_MspInit+0xf0>)
 80049a0:	f000 fdd6 	bl	8005550 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80049a4:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <HAL_PCD_MspInit+0xec>)
 80049a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a8:	4a0c      	ldr	r2, [pc, #48]	@ (80049dc <HAL_PCD_MspInit+0xec>)
 80049aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80049b0:	4b0a      	ldr	r3, [pc, #40]	@ (80049dc <HAL_PCD_MspInit+0xec>)
 80049b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <HAL_PCD_MspInit+0xec>)
 80049be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c0:	4a06      	ldr	r2, [pc, #24]	@ (80049dc <HAL_PCD_MspInit+0xec>)
 80049c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80049c8:	4b04      	ldr	r3, [pc, #16]	@ (80049dc <HAL_PCD_MspInit+0xec>)
 80049ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80049d4:	bf00      	nop
 80049d6:	37b0      	adds	r7, #176	@ 0xb0
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40023800 	.word	0x40023800
 80049e0:	40020000 	.word	0x40020000

080049e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049e8:	f7ff fd90 	bl	800450c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049ec:	480c      	ldr	r0, [pc, #48]	@ (8004a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049ee:	490d      	ldr	r1, [pc, #52]	@ (8004a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049f4:	e002      	b.n	80049fc <LoopCopyDataInit>

080049f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049fa:	3304      	adds	r3, #4

080049fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a00:	d3f9      	bcc.n	80049f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a02:	4a0a      	ldr	r2, [pc, #40]	@ (8004a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a04:	4c0a      	ldr	r4, [pc, #40]	@ (8004a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a08:	e001      	b.n	8004a0e <LoopFillZerobss>

08004a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a0c:	3204      	adds	r2, #4

08004a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a10:	d3fb      	bcc.n	8004a0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004a12:	f00a fee9 	bl	800f7e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a16:	f7fe fb7d 	bl	8003114 <main>
  bx  lr    
 8004a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a1c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a24:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8004a28:	080141d8 	.word	0x080141d8
  ldr r2, =_sbss
 8004a2c:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8004a30:	200033d8 	.word	0x200033d8

08004a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a34:	e7fe      	b.n	8004a34 <ADC_IRQHandler>

08004a36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a3a:	2003      	movs	r0, #3
 8004a3c:	f000 fd46 	bl	80054cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a40:	2000      	movs	r0, #0
 8004a42:	f000 f805 	bl	8004a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a46:	f7ff fc05 	bl	8004254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a58:	4b12      	ldr	r3, [pc, #72]	@ (8004aa4 <HAL_InitTick+0x54>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	4b12      	ldr	r3, [pc, #72]	@ (8004aa8 <HAL_InitTick+0x58>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	4619      	mov	r1, r3
 8004a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fd61 	bl	8005536 <HAL_SYSTICK_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e00e      	b.n	8004a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b0f      	cmp	r3, #15
 8004a82:	d80a      	bhi.n	8004a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a84:	2200      	movs	r2, #0
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	f000 fd29 	bl	80054e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a90:	4a06      	ldr	r2, [pc, #24]	@ (8004aac <HAL_InitTick+0x5c>)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e000      	b.n	8004a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000058 	.word	0x20000058
 8004aa8:	20000060 	.word	0x20000060
 8004aac:	2000005c 	.word	0x2000005c

08004ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ab4:	4b06      	ldr	r3, [pc, #24]	@ (8004ad0 <HAL_IncTick+0x20>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4b06      	ldr	r3, [pc, #24]	@ (8004ad4 <HAL_IncTick+0x24>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4413      	add	r3, r2
 8004ac0:	4a04      	ldr	r2, [pc, #16]	@ (8004ad4 <HAL_IncTick+0x24>)
 8004ac2:	6013      	str	r3, [r2, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	20000060 	.word	0x20000060
 8004ad4:	2000304c 	.word	0x2000304c

08004ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return uwTick;
 8004adc:	4b03      	ldr	r3, [pc, #12]	@ (8004aec <HAL_GetTick+0x14>)
 8004ade:	681b      	ldr	r3, [r3, #0]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	2000304c 	.word	0x2000304c

08004af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004af8:	f7ff ffee 	bl	8004ad8 <HAL_GetTick>
 8004afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d005      	beq.n	8004b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b34 <HAL_Delay+0x44>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b16:	bf00      	nop
 8004b18:	f7ff ffde 	bl	8004ad8 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d8f7      	bhi.n	8004b18 <HAL_Delay+0x28>
  {
  }
}
 8004b28:	bf00      	nop
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000060 	.word	0x20000060

08004b38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e031      	b.n	8004bb2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fd f990 	bl	8001e7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	f003 0310 	and.w	r3, r3, #16
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d116      	bne.n	8004ba4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b7a:	4b10      	ldr	r3, [pc, #64]	@ (8004bbc <HAL_ADC_Init+0x84>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	f043 0202 	orr.w	r2, r3, #2
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fad6 	bl	8005138 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	f023 0303 	bic.w	r3, r3, #3
 8004b9a:	f043 0201 	orr.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ba2:	e001      	b.n	8004ba8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	ffffeefd 	.word	0xffffeefd

08004bc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_ADC_Start+0x1a>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e0ad      	b.n	8004d36 <HAL_ADC_Start+0x176>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d018      	beq.n	8004c22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004c00:	4b50      	ldr	r3, [pc, #320]	@ (8004d44 <HAL_ADC_Start+0x184>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a50      	ldr	r2, [pc, #320]	@ (8004d48 <HAL_ADC_Start+0x188>)
 8004c06:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0a:	0c9a      	lsrs	r2, r3, #18
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	4413      	add	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004c14:	e002      	b.n	8004c1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f9      	bne.n	8004c16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d175      	bne.n	8004d1c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c34:	4b45      	ldr	r3, [pc, #276]	@ (8004d4c <HAL_ADC_Start+0x18c>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d007      	beq.n	8004c5e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004c56:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c6a:	d106      	bne.n	8004c7a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c70:	f023 0206 	bic.w	r2, r3, #6
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	645a      	str	r2, [r3, #68]	@ 0x44
 8004c78:	e002      	b.n	8004c80 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004c90:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004c92:	4b2f      	ldr	r3, [pc, #188]	@ (8004d50 <HAL_ADC_Start+0x190>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10f      	bne.n	8004cbe <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d143      	bne.n	8004d34 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	e03a      	b.n	8004d34 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a24      	ldr	r2, [pc, #144]	@ (8004d54 <HAL_ADC_Start+0x194>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d10e      	bne.n	8004ce6 <HAL_ADC_Start+0x126>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004ce4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d50 <HAL_ADC_Start+0x190>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d120      	bne.n	8004d34 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a18      	ldr	r2, [pc, #96]	@ (8004d58 <HAL_ADC_Start+0x198>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d11b      	bne.n	8004d34 <HAL_ADC_Start+0x174>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d114      	bne.n	8004d34 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004d18:	609a      	str	r2, [r3, #8]
 8004d1a:	e00b      	b.n	8004d34 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	f043 0210 	orr.w	r2, r3, #16
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2c:	f043 0201 	orr.w	r2, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20000058 	.word	0x20000058
 8004d48:	431bde83 	.word	0x431bde83
 8004d4c:	fffff8fe 	.word	0xfffff8fe
 8004d50:	40012300 	.word	0x40012300
 8004d54:	40012000 	.word	0x40012000
 8004d58:	40012200 	.word	0x40012200

08004d5c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d78:	d113      	bne.n	8004da2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d88:	d10b      	bne.n	8004da2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8e:	f043 0220 	orr.w	r2, r3, #32
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e063      	b.n	8004e6a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004da2:	f7ff fe99 	bl	8004ad8 <HAL_GetTick>
 8004da6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004da8:	e021      	b.n	8004dee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db0:	d01d      	beq.n	8004dee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <HAL_ADC_PollForConversion+0x6c>
 8004db8:	f7ff fe8e 	bl	8004ad8 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d212      	bcs.n	8004dee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d00b      	beq.n	8004dee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	f043 0204 	orr.w	r2, r3, #4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e03d      	b.n	8004e6a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d1d6      	bne.n	8004daa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0212 	mvn.w	r2, #18
 8004e04:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d123      	bne.n	8004e68 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d11f      	bne.n	8004e68 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d006      	beq.n	8004e44 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d111      	bne.n	8004e68 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d105      	bne.n	8004e68 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	f043 0201 	orr.w	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x1c>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e136      	b.n	8005116 <HAL_ADC_ConfigChannel+0x28a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b09      	cmp	r3, #9
 8004eb6:	d93a      	bls.n	8004f2e <HAL_ADC_ConfigChannel+0xa2>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ec0:	d035      	beq.n	8004f2e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68d9      	ldr	r1, [r3, #12]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	4413      	add	r3, r2
 8004ed6:	3b1e      	subs	r3, #30
 8004ed8:	2207      	movs	r2, #7
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43da      	mvns	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	400a      	ands	r2, r1
 8004ee6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a8d      	ldr	r2, [pc, #564]	@ (8005124 <HAL_ADC_ConfigChannel+0x298>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d10a      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68d9      	ldr	r1, [r3, #12]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	061a      	lsls	r2, r3, #24
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f06:	e035      	b.n	8004f74 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68d9      	ldr	r1, [r3, #12]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	4618      	mov	r0, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	4403      	add	r3, r0
 8004f20:	3b1e      	subs	r3, #30
 8004f22:	409a      	lsls	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f2c:	e022      	b.n	8004f74 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6919      	ldr	r1, [r3, #16]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4413      	add	r3, r2
 8004f42:	2207      	movs	r2, #7
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43da      	mvns	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	400a      	ands	r2, r1
 8004f50:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6919      	ldr	r1, [r3, #16]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	4618      	mov	r0, r3
 8004f64:	4603      	mov	r3, r0
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	4403      	add	r3, r0
 8004f6a:	409a      	lsls	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b06      	cmp	r3, #6
 8004f7a:	d824      	bhi.n	8004fc6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3b05      	subs	r3, #5
 8004f8e:	221f      	movs	r2, #31
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	43da      	mvns	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	400a      	ands	r2, r1
 8004f9c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	4618      	mov	r0, r3
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3b05      	subs	r3, #5
 8004fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	635a      	str	r2, [r3, #52]	@ 0x34
 8004fc4:	e04c      	b.n	8005060 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b0c      	cmp	r3, #12
 8004fcc:	d824      	bhi.n	8005018 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	3b23      	subs	r3, #35	@ 0x23
 8004fe0:	221f      	movs	r2, #31
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43da      	mvns	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	400a      	ands	r2, r1
 8004fee:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	3b23      	subs	r3, #35	@ 0x23
 800500a:	fa00 f203 	lsl.w	r2, r0, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	631a      	str	r2, [r3, #48]	@ 0x30
 8005016:	e023      	b.n	8005060 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	3b41      	subs	r3, #65	@ 0x41
 800502a:	221f      	movs	r2, #31
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	43da      	mvns	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	400a      	ands	r2, r1
 8005038:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	4618      	mov	r0, r3
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	3b41      	subs	r3, #65	@ 0x41
 8005054:	fa00 f203 	lsl.w	r2, r0, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a30      	ldr	r2, [pc, #192]	@ (8005128 <HAL_ADC_ConfigChannel+0x29c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d10a      	bne.n	8005080 <HAL_ADC_ConfigChannel+0x1f4>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005072:	d105      	bne.n	8005080 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005074:	4b2d      	ldr	r3, [pc, #180]	@ (800512c <HAL_ADC_ConfigChannel+0x2a0>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	4a2c      	ldr	r2, [pc, #176]	@ (800512c <HAL_ADC_ConfigChannel+0x2a0>)
 800507a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800507e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a28      	ldr	r2, [pc, #160]	@ (8005128 <HAL_ADC_ConfigChannel+0x29c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d10f      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x21e>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b12      	cmp	r3, #18
 8005090:	d10b      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005092:	4b26      	ldr	r3, [pc, #152]	@ (800512c <HAL_ADC_ConfigChannel+0x2a0>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4a25      	ldr	r2, [pc, #148]	@ (800512c <HAL_ADC_ConfigChannel+0x2a0>)
 8005098:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800509c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800509e:	4b23      	ldr	r3, [pc, #140]	@ (800512c <HAL_ADC_ConfigChannel+0x2a0>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4a22      	ldr	r2, [pc, #136]	@ (800512c <HAL_ADC_ConfigChannel+0x2a0>)
 80050a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050a8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005128 <HAL_ADC_ConfigChannel+0x29c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d12b      	bne.n	800510c <HAL_ADC_ConfigChannel+0x280>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005124 <HAL_ADC_ConfigChannel+0x298>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d003      	beq.n	80050c6 <HAL_ADC_ConfigChannel+0x23a>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b11      	cmp	r3, #17
 80050c4:	d122      	bne.n	800510c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80050c6:	4b19      	ldr	r3, [pc, #100]	@ (800512c <HAL_ADC_ConfigChannel+0x2a0>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	4a18      	ldr	r2, [pc, #96]	@ (800512c <HAL_ADC_ConfigChannel+0x2a0>)
 80050cc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80050d0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80050d2:	4b16      	ldr	r3, [pc, #88]	@ (800512c <HAL_ADC_ConfigChannel+0x2a0>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4a15      	ldr	r2, [pc, #84]	@ (800512c <HAL_ADC_ConfigChannel+0x2a0>)
 80050d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050dc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a10      	ldr	r2, [pc, #64]	@ (8005124 <HAL_ADC_ConfigChannel+0x298>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d111      	bne.n	800510c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80050e8:	4b11      	ldr	r3, [pc, #68]	@ (8005130 <HAL_ADC_ConfigChannel+0x2a4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a11      	ldr	r2, [pc, #68]	@ (8005134 <HAL_ADC_ConfigChannel+0x2a8>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	0c9a      	lsrs	r2, r3, #18
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80050fe:	e002      	b.n	8005106 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3b01      	subs	r3, #1
 8005104:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f9      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	10000012 	.word	0x10000012
 8005128:	40012000 	.word	0x40012000
 800512c:	40012300 	.word	0x40012300
 8005130:	20000058 	.word	0x20000058
 8005134:	431bde83 	.word	0x431bde83

08005138 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005140:	4b78      	ldr	r3, [pc, #480]	@ (8005324 <ADC_Init+0x1ec>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4a77      	ldr	r2, [pc, #476]	@ (8005324 <ADC_Init+0x1ec>)
 8005146:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800514a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800514c:	4b75      	ldr	r3, [pc, #468]	@ (8005324 <ADC_Init+0x1ec>)
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	4973      	ldr	r1, [pc, #460]	@ (8005324 <ADC_Init+0x1ec>)
 8005156:	4313      	orrs	r3, r2
 8005158:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6859      	ldr	r1, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	021a      	lsls	r2, r3, #8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800518c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6859      	ldr	r1, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6899      	ldr	r1, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c6:	4a58      	ldr	r2, [pc, #352]	@ (8005328 <ADC_Init+0x1f0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d022      	beq.n	8005212 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6899      	ldr	r1, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80051fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6899      	ldr	r1, [r3, #8]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	609a      	str	r2, [r3, #8]
 8005210:	e00f      	b.n	8005232 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005230:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0202 	bic.w	r2, r2, #2
 8005240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6899      	ldr	r1, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	005a      	lsls	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01b      	beq.n	8005298 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800526e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800527e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6859      	ldr	r1, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528a:	3b01      	subs	r3, #1
 800528c:	035a      	lsls	r2, r3, #13
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	e007      	b.n	80052a8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80052b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	051a      	lsls	r2, r3, #20
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80052dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6899      	ldr	r1, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80052ea:	025a      	lsls	r2, r3, #9
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6899      	ldr	r1, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	029a      	lsls	r2, r3, #10
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	40012300 	.word	0x40012300
 8005328:	0f000001 	.word	0x0f000001

0800532c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800533c:	4b0b      	ldr	r3, [pc, #44]	@ (800536c <__NVIC_SetPriorityGrouping+0x40>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005348:	4013      	ands	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005354:	4b06      	ldr	r3, [pc, #24]	@ (8005370 <__NVIC_SetPriorityGrouping+0x44>)
 8005356:	4313      	orrs	r3, r2
 8005358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800535a:	4a04      	ldr	r2, [pc, #16]	@ (800536c <__NVIC_SetPriorityGrouping+0x40>)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	60d3      	str	r3, [r2, #12]
}
 8005360:	bf00      	nop
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	e000ed00 	.word	0xe000ed00
 8005370:	05fa0000 	.word	0x05fa0000

08005374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005378:	4b04      	ldr	r3, [pc, #16]	@ (800538c <__NVIC_GetPriorityGrouping+0x18>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	0a1b      	lsrs	r3, r3, #8
 800537e:	f003 0307 	and.w	r3, r3, #7
}
 8005382:	4618      	mov	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	e000ed00 	.word	0xe000ed00

08005390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800539a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	db0b      	blt.n	80053ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	f003 021f 	and.w	r2, r3, #31
 80053a8:	4907      	ldr	r1, [pc, #28]	@ (80053c8 <__NVIC_EnableIRQ+0x38>)
 80053aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	2001      	movs	r0, #1
 80053b2:	fa00 f202 	lsl.w	r2, r0, r2
 80053b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	e000e100 	.word	0xe000e100

080053cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	6039      	str	r1, [r7, #0]
 80053d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	db0a      	blt.n	80053f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	490c      	ldr	r1, [pc, #48]	@ (8005418 <__NVIC_SetPriority+0x4c>)
 80053e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ea:	0112      	lsls	r2, r2, #4
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	440b      	add	r3, r1
 80053f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053f4:	e00a      	b.n	800540c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	4908      	ldr	r1, [pc, #32]	@ (800541c <__NVIC_SetPriority+0x50>)
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	3b04      	subs	r3, #4
 8005404:	0112      	lsls	r2, r2, #4
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	440b      	add	r3, r1
 800540a:	761a      	strb	r2, [r3, #24]
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	e000e100 	.word	0xe000e100
 800541c:	e000ed00 	.word	0xe000ed00

08005420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005420:	b480      	push	{r7}
 8005422:	b089      	sub	sp, #36	@ 0x24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f1c3 0307 	rsb	r3, r3, #7
 800543a:	2b04      	cmp	r3, #4
 800543c:	bf28      	it	cs
 800543e:	2304      	movcs	r3, #4
 8005440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	3304      	adds	r3, #4
 8005446:	2b06      	cmp	r3, #6
 8005448:	d902      	bls.n	8005450 <NVIC_EncodePriority+0x30>
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	3b03      	subs	r3, #3
 800544e:	e000      	b.n	8005452 <NVIC_EncodePriority+0x32>
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005454:	f04f 32ff 	mov.w	r2, #4294967295
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	43da      	mvns	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	401a      	ands	r2, r3
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005468:	f04f 31ff 	mov.w	r1, #4294967295
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	fa01 f303 	lsl.w	r3, r1, r3
 8005472:	43d9      	mvns	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005478:	4313      	orrs	r3, r2
         );
}
 800547a:	4618      	mov	r0, r3
 800547c:	3724      	adds	r7, #36	@ 0x24
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3b01      	subs	r3, #1
 8005494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005498:	d301      	bcc.n	800549e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800549a:	2301      	movs	r3, #1
 800549c:	e00f      	b.n	80054be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800549e:	4a0a      	ldr	r2, [pc, #40]	@ (80054c8 <SysTick_Config+0x40>)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054a6:	210f      	movs	r1, #15
 80054a8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ac:	f7ff ff8e 	bl	80053cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054b0:	4b05      	ldr	r3, [pc, #20]	@ (80054c8 <SysTick_Config+0x40>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054b6:	4b04      	ldr	r3, [pc, #16]	@ (80054c8 <SysTick_Config+0x40>)
 80054b8:	2207      	movs	r2, #7
 80054ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	e000e010 	.word	0xe000e010

080054cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff ff29 	bl	800532c <__NVIC_SetPriorityGrouping>
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b086      	sub	sp, #24
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	4603      	mov	r3, r0
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80054f0:	2300      	movs	r3, #0
 80054f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054f4:	f7ff ff3e 	bl	8005374 <__NVIC_GetPriorityGrouping>
 80054f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	6978      	ldr	r0, [r7, #20]
 8005500:	f7ff ff8e 	bl	8005420 <NVIC_EncodePriority>
 8005504:	4602      	mov	r2, r0
 8005506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800550a:	4611      	mov	r1, r2
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff ff5d 	bl	80053cc <__NVIC_SetPriority>
}
 8005512:	bf00      	nop
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	4603      	mov	r3, r0
 8005522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff ff31 	bl	8005390 <__NVIC_EnableIRQ>
}
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b082      	sub	sp, #8
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff ffa2 	bl	8005488 <SysTick_Config>
 8005544:	4603      	mov	r3, r0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	@ 0x24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005566:	2300      	movs	r3, #0
 8005568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
 800556e:	e175      	b.n	800585c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005570:	2201      	movs	r2, #1
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4013      	ands	r3, r2
 8005582:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	429a      	cmp	r2, r3
 800558a:	f040 8164 	bne.w	8005856 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d005      	beq.n	80055a6 <HAL_GPIO_Init+0x56>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d130      	bne.n	8005608 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	2203      	movs	r2, #3
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	43db      	mvns	r3, r3
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4013      	ands	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055dc:	2201      	movs	r2, #1
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	091b      	lsrs	r3, r3, #4
 80055f2:	f003 0201 	and.w	r2, r3, #1
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	4313      	orrs	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f003 0303 	and.w	r3, r3, #3
 8005610:	2b03      	cmp	r3, #3
 8005612:	d017      	beq.n	8005644 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	2203      	movs	r2, #3
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	43db      	mvns	r3, r3
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	4013      	ands	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4313      	orrs	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d123      	bne.n	8005698 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	08da      	lsrs	r2, r3, #3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3208      	adds	r2, #8
 8005658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	220f      	movs	r2, #15
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	4313      	orrs	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	08da      	lsrs	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3208      	adds	r2, #8
 8005692:	69b9      	ldr	r1, [r7, #24]
 8005694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	2203      	movs	r2, #3
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	43db      	mvns	r3, r3
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	4013      	ands	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 0203 	and.w	r2, r3, #3
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80be 	beq.w	8005856 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056da:	4b66      	ldr	r3, [pc, #408]	@ (8005874 <HAL_GPIO_Init+0x324>)
 80056dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056de:	4a65      	ldr	r2, [pc, #404]	@ (8005874 <HAL_GPIO_Init+0x324>)
 80056e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80056e6:	4b63      	ldr	r3, [pc, #396]	@ (8005874 <HAL_GPIO_Init+0x324>)
 80056e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80056f2:	4a61      	ldr	r2, [pc, #388]	@ (8005878 <HAL_GPIO_Init+0x328>)
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	089b      	lsrs	r3, r3, #2
 80056f8:	3302      	adds	r3, #2
 80056fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	220f      	movs	r2, #15
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43db      	mvns	r3, r3
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	4013      	ands	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a58      	ldr	r2, [pc, #352]	@ (800587c <HAL_GPIO_Init+0x32c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d037      	beq.n	800578e <HAL_GPIO_Init+0x23e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a57      	ldr	r2, [pc, #348]	@ (8005880 <HAL_GPIO_Init+0x330>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d031      	beq.n	800578a <HAL_GPIO_Init+0x23a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a56      	ldr	r2, [pc, #344]	@ (8005884 <HAL_GPIO_Init+0x334>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d02b      	beq.n	8005786 <HAL_GPIO_Init+0x236>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a55      	ldr	r2, [pc, #340]	@ (8005888 <HAL_GPIO_Init+0x338>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d025      	beq.n	8005782 <HAL_GPIO_Init+0x232>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a54      	ldr	r2, [pc, #336]	@ (800588c <HAL_GPIO_Init+0x33c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d01f      	beq.n	800577e <HAL_GPIO_Init+0x22e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a53      	ldr	r2, [pc, #332]	@ (8005890 <HAL_GPIO_Init+0x340>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d019      	beq.n	800577a <HAL_GPIO_Init+0x22a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a52      	ldr	r2, [pc, #328]	@ (8005894 <HAL_GPIO_Init+0x344>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_GPIO_Init+0x226>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a51      	ldr	r2, [pc, #324]	@ (8005898 <HAL_GPIO_Init+0x348>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00d      	beq.n	8005772 <HAL_GPIO_Init+0x222>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a50      	ldr	r2, [pc, #320]	@ (800589c <HAL_GPIO_Init+0x34c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <HAL_GPIO_Init+0x21e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a4f      	ldr	r2, [pc, #316]	@ (80058a0 <HAL_GPIO_Init+0x350>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d101      	bne.n	800576a <HAL_GPIO_Init+0x21a>
 8005766:	2309      	movs	r3, #9
 8005768:	e012      	b.n	8005790 <HAL_GPIO_Init+0x240>
 800576a:	230a      	movs	r3, #10
 800576c:	e010      	b.n	8005790 <HAL_GPIO_Init+0x240>
 800576e:	2308      	movs	r3, #8
 8005770:	e00e      	b.n	8005790 <HAL_GPIO_Init+0x240>
 8005772:	2307      	movs	r3, #7
 8005774:	e00c      	b.n	8005790 <HAL_GPIO_Init+0x240>
 8005776:	2306      	movs	r3, #6
 8005778:	e00a      	b.n	8005790 <HAL_GPIO_Init+0x240>
 800577a:	2305      	movs	r3, #5
 800577c:	e008      	b.n	8005790 <HAL_GPIO_Init+0x240>
 800577e:	2304      	movs	r3, #4
 8005780:	e006      	b.n	8005790 <HAL_GPIO_Init+0x240>
 8005782:	2303      	movs	r3, #3
 8005784:	e004      	b.n	8005790 <HAL_GPIO_Init+0x240>
 8005786:	2302      	movs	r3, #2
 8005788:	e002      	b.n	8005790 <HAL_GPIO_Init+0x240>
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <HAL_GPIO_Init+0x240>
 800578e:	2300      	movs	r3, #0
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	f002 0203 	and.w	r2, r2, #3
 8005796:	0092      	lsls	r2, r2, #2
 8005798:	4093      	lsls	r3, r2
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	4313      	orrs	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80057a0:	4935      	ldr	r1, [pc, #212]	@ (8005878 <HAL_GPIO_Init+0x328>)
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	089b      	lsrs	r3, r3, #2
 80057a6:	3302      	adds	r3, #2
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057ae:	4b3d      	ldr	r3, [pc, #244]	@ (80058a4 <HAL_GPIO_Init+0x354>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4013      	ands	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057d2:	4a34      	ldr	r2, [pc, #208]	@ (80058a4 <HAL_GPIO_Init+0x354>)
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057d8:	4b32      	ldr	r3, [pc, #200]	@ (80058a4 <HAL_GPIO_Init+0x354>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	43db      	mvns	r3, r3
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	4013      	ands	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057fc:	4a29      	ldr	r2, [pc, #164]	@ (80058a4 <HAL_GPIO_Init+0x354>)
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005802:	4b28      	ldr	r3, [pc, #160]	@ (80058a4 <HAL_GPIO_Init+0x354>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	43db      	mvns	r3, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4013      	ands	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005826:	4a1f      	ldr	r2, [pc, #124]	@ (80058a4 <HAL_GPIO_Init+0x354>)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800582c:	4b1d      	ldr	r3, [pc, #116]	@ (80058a4 <HAL_GPIO_Init+0x354>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	43db      	mvns	r3, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4013      	ands	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005850:	4a14      	ldr	r2, [pc, #80]	@ (80058a4 <HAL_GPIO_Init+0x354>)
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	3301      	adds	r3, #1
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b0f      	cmp	r3, #15
 8005860:	f67f ae86 	bls.w	8005570 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	3724      	adds	r7, #36	@ 0x24
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40023800 	.word	0x40023800
 8005878:	40013800 	.word	0x40013800
 800587c:	40020000 	.word	0x40020000
 8005880:	40020400 	.word	0x40020400
 8005884:	40020800 	.word	0x40020800
 8005888:	40020c00 	.word	0x40020c00
 800588c:	40021000 	.word	0x40021000
 8005890:	40021400 	.word	0x40021400
 8005894:	40021800 	.word	0x40021800
 8005898:	40021c00 	.word	0x40021c00
 800589c:	40022000 	.word	0x40022000
 80058a0:	40022400 	.word	0x40022400
 80058a4:	40013c00 	.word	0x40013c00

080058a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	807b      	strh	r3, [r7, #2]
 80058b4:	4613      	mov	r3, r2
 80058b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058b8:	787b      	ldrb	r3, [r7, #1]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058be:	887a      	ldrh	r2, [r7, #2]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80058c4:	e003      	b.n	80058ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80058c6:	887b      	ldrh	r3, [r7, #2]
 80058c8:	041a      	lsls	r2, r3, #16
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	619a      	str	r2, [r3, #24]
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e08b      	b.n	8005a06 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fd f93e 	bl	8002b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2224      	movs	r2, #36	@ 0x24
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800592c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800593c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d107      	bne.n	8005956 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	e006      	b.n	8005964 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005962:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d108      	bne.n	800597e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800597a:	605a      	str	r2, [r3, #4]
 800597c:	e007      	b.n	800598e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800598c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6859      	ldr	r1, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	4b1d      	ldr	r3, [pc, #116]	@ (8005a10 <HAL_I2C_Init+0x134>)
 800599a:	430b      	orrs	r3, r1
 800599c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69d9      	ldr	r1, [r3, #28]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1a      	ldr	r2, [r3, #32]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	02008000 	.word	0x02008000

08005a14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	607a      	str	r2, [r7, #4]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	460b      	mov	r3, r1
 8005a22:	817b      	strh	r3, [r7, #10]
 8005a24:	4613      	mov	r3, r2
 8005a26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	f040 80fd 	bne.w	8005c30 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_I2C_Master_Transmit+0x30>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e0f6      	b.n	8005c32 <HAL_I2C_Master_Transmit+0x21e>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a4c:	f7ff f844 	bl	8004ad8 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	2319      	movs	r3, #25
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fdcc 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e0e1      	b.n	8005c32 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2221      	movs	r2, #33	@ 0x21
 8005a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2210      	movs	r2, #16
 8005a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	893a      	ldrh	r2, [r7, #8]
 8005a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2bff      	cmp	r3, #255	@ 0xff
 8005a9e:	d906      	bls.n	8005aae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	22ff      	movs	r2, #255	@ 0xff
 8005aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005aa6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e007      	b.n	8005abe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005ab8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005abc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d024      	beq.n	8005b10 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aca:	781a      	ldrb	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	3301      	adds	r3, #1
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	8979      	ldrh	r1, [r7, #10]
 8005b02:	4b4e      	ldr	r3, [pc, #312]	@ (8005c3c <HAL_I2C_Master_Transmit+0x228>)
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 ffc7 	bl	8006a9c <I2C_TransferConfig>
 8005b0e:	e066      	b.n	8005bde <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	8979      	ldrh	r1, [r7, #10]
 8005b18:	4b48      	ldr	r3, [pc, #288]	@ (8005c3c <HAL_I2C_Master_Transmit+0x228>)
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 ffbc 	bl	8006a9c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b24:	e05b      	b.n	8005bde <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	6a39      	ldr	r1, [r7, #32]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 fdbf 	bl	80066ae <I2C_WaitOnTXISFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e07b      	b.n	8005c32 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d034      	beq.n	8005bde <HAL_I2C_Master_Transmit+0x1ca>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d130      	bne.n	8005bde <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	2200      	movs	r2, #0
 8005b84:	2180      	movs	r1, #128	@ 0x80
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 fd38 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e04d      	b.n	8005c32 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2bff      	cmp	r3, #255	@ 0xff
 8005b9e:	d90e      	bls.n	8005bbe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	22ff      	movs	r2, #255	@ 0xff
 8005ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	8979      	ldrh	r1, [r7, #10]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 ff70 	bl	8006a9c <I2C_TransferConfig>
 8005bbc:	e00f      	b.n	8005bde <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	8979      	ldrh	r1, [r7, #10]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 ff5f 	bl	8006a9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d19e      	bne.n	8005b26 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	6a39      	ldr	r1, [r7, #32]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fda5 	bl	800673c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e01a      	b.n	8005c32 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2220      	movs	r2, #32
 8005c02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6859      	ldr	r1, [r3, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c40 <HAL_I2C_Master_Transmit+0x22c>)
 8005c10:	400b      	ands	r3, r1
 8005c12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e000      	b.n	8005c32 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	80002000 	.word	0x80002000
 8005c40:	fe00e800 	.word	0xfe00e800

08005c44 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	607a      	str	r2, [r7, #4]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	460b      	mov	r3, r1
 8005c52:	817b      	strh	r3, [r7, #10]
 8005c54:	4613      	mov	r3, r2
 8005c56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	f040 80db 	bne.w	8005e1c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_I2C_Master_Receive+0x30>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e0d4      	b.n	8005e1e <HAL_I2C_Master_Receive+0x1da>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c7c:	f7fe ff2c 	bl	8004ad8 <HAL_GetTick>
 8005c80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	2319      	movs	r3, #25
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 fcb4 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e0bf      	b.n	8005e1e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2222      	movs	r2, #34	@ 0x22
 8005ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2210      	movs	r2, #16
 8005caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	893a      	ldrh	r2, [r7, #8]
 8005cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2bff      	cmp	r3, #255	@ 0xff
 8005cce:	d90e      	bls.n	8005cee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	8979      	ldrh	r1, [r7, #10]
 8005cde:	4b52      	ldr	r3, [pc, #328]	@ (8005e28 <HAL_I2C_Master_Receive+0x1e4>)
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fed8 	bl	8006a9c <I2C_TransferConfig>
 8005cec:	e06d      	b.n	8005dca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	8979      	ldrh	r1, [r7, #10]
 8005d00:	4b49      	ldr	r3, [pc, #292]	@ (8005e28 <HAL_I2C_Master_Receive+0x1e4>)
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 fec7 	bl	8006a9c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005d0e:	e05c      	b.n	8005dca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	6a39      	ldr	r1, [r7, #32]
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 fd55 	bl	80067c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e07c      	b.n	8005e1e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d034      	beq.n	8005dca <HAL_I2C_Master_Receive+0x186>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d130      	bne.n	8005dca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2180      	movs	r1, #128	@ 0x80
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fc42 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e04d      	b.n	8005e1e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2bff      	cmp	r3, #255	@ 0xff
 8005d8a:	d90e      	bls.n	8005daa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	22ff      	movs	r2, #255	@ 0xff
 8005d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	8979      	ldrh	r1, [r7, #10]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 fe7a 	bl	8006a9c <I2C_TransferConfig>
 8005da8:	e00f      	b.n	8005dca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	8979      	ldrh	r1, [r7, #10]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 fe69 	bl	8006a9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d19d      	bne.n	8005d10 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	6a39      	ldr	r1, [r7, #32]
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 fcaf 	bl	800673c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e01a      	b.n	8005e1e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2220      	movs	r2, #32
 8005dee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6859      	ldr	r1, [r3, #4]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8005e2c <HAL_I2C_Master_Receive+0x1e8>)
 8005dfc:	400b      	ands	r3, r1
 8005dfe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	80002400 	.word	0x80002400
 8005e2c:	fe00e800 	.word	0xfe00e800

08005e30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	4608      	mov	r0, r1
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	817b      	strh	r3, [r7, #10]
 8005e42:	460b      	mov	r3, r1
 8005e44:	813b      	strh	r3, [r7, #8]
 8005e46:	4613      	mov	r3, r2
 8005e48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	f040 80f9 	bne.w	800604a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <HAL_I2C_Mem_Write+0x34>
 8005e5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d105      	bne.n	8005e70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e6a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0ed      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <HAL_I2C_Mem_Write+0x4e>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e0e6      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e86:	f7fe fe27 	bl	8004ad8 <HAL_GetTick>
 8005e8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	2319      	movs	r3, #25
 8005e92:	2201      	movs	r2, #1
 8005e94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 fbaf 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e0d1      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2221      	movs	r2, #33	@ 0x21
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2240      	movs	r2, #64	@ 0x40
 8005eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a3a      	ldr	r2, [r7, #32]
 8005ec2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ed0:	88f8      	ldrh	r0, [r7, #6]
 8005ed2:	893a      	ldrh	r2, [r7, #8]
 8005ed4:	8979      	ldrh	r1, [r7, #10]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	4603      	mov	r3, r0
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 fabf 	bl	8006464 <I2C_RequestMemoryWrite>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0a9      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2bff      	cmp	r3, #255	@ 0xff
 8005f00:	d90e      	bls.n	8005f20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	22ff      	movs	r2, #255	@ 0xff
 8005f06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	8979      	ldrh	r1, [r7, #10]
 8005f10:	2300      	movs	r3, #0
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 fdbf 	bl	8006a9c <I2C_TransferConfig>
 8005f1e:	e00f      	b.n	8005f40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	8979      	ldrh	r1, [r7, #10]
 8005f32:	2300      	movs	r3, #0
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 fdae 	bl	8006a9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fbb2 	bl	80066ae <I2C_WaitOnTXISFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e07b      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	781a      	ldrb	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d034      	beq.n	8005ff8 <HAL_I2C_Mem_Write+0x1c8>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d130      	bne.n	8005ff8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2180      	movs	r1, #128	@ 0x80
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 fb2b 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e04d      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2bff      	cmp	r3, #255	@ 0xff
 8005fb8:	d90e      	bls.n	8005fd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	22ff      	movs	r2, #255	@ 0xff
 8005fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	8979      	ldrh	r1, [r7, #10]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fd63 	bl	8006a9c <I2C_TransferConfig>
 8005fd6:	e00f      	b.n	8005ff8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	8979      	ldrh	r1, [r7, #10]
 8005fea:	2300      	movs	r3, #0
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 fd52 	bl	8006a9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d19e      	bne.n	8005f40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 fb98 	bl	800673c <I2C_WaitOnSTOPFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e01a      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2220      	movs	r2, #32
 800601c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6859      	ldr	r1, [r3, #4]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4b0a      	ldr	r3, [pc, #40]	@ (8006054 <HAL_I2C_Mem_Write+0x224>)
 800602a:	400b      	ands	r3, r1
 800602c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	e000      	b.n	800604c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800604a:	2302      	movs	r3, #2
  }
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	fe00e800 	.word	0xfe00e800

08006058 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	4608      	mov	r0, r1
 8006062:	4611      	mov	r1, r2
 8006064:	461a      	mov	r2, r3
 8006066:	4603      	mov	r3, r0
 8006068:	817b      	strh	r3, [r7, #10]
 800606a:	460b      	mov	r3, r1
 800606c:	813b      	strh	r3, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b20      	cmp	r3, #32
 800607c:	f040 80fd 	bne.w	800627a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_I2C_Mem_Read+0x34>
 8006086:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006088:	2b00      	cmp	r3, #0
 800608a:	d105      	bne.n	8006098 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006092:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e0f1      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_I2C_Mem_Read+0x4e>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e0ea      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060ae:	f7fe fd13 	bl	8004ad8 <HAL_GetTick>
 80060b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	2319      	movs	r3, #25
 80060ba:	2201      	movs	r2, #1
 80060bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 fa9b 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0d5      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2222      	movs	r2, #34	@ 0x22
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2240      	movs	r2, #64	@ 0x40
 80060dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80060f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060f8:	88f8      	ldrh	r0, [r7, #6]
 80060fa:	893a      	ldrh	r2, [r7, #8]
 80060fc:	8979      	ldrh	r1, [r7, #10]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	4603      	mov	r3, r0
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f9ff 	bl	800650c <I2C_RequestMemoryRead>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e0ad      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006124:	b29b      	uxth	r3, r3
 8006126:	2bff      	cmp	r3, #255	@ 0xff
 8006128:	d90e      	bls.n	8006148 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006134:	b2da      	uxtb	r2, r3
 8006136:	8979      	ldrh	r1, [r7, #10]
 8006138:	4b52      	ldr	r3, [pc, #328]	@ (8006284 <HAL_I2C_Mem_Read+0x22c>)
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fcab 	bl	8006a9c <I2C_TransferConfig>
 8006146:	e00f      	b.n	8006168 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006156:	b2da      	uxtb	r2, r3
 8006158:	8979      	ldrh	r1, [r7, #10]
 800615a:	4b4a      	ldr	r3, [pc, #296]	@ (8006284 <HAL_I2C_Mem_Read+0x22c>)
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fc9a 	bl	8006a9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616e:	2200      	movs	r2, #0
 8006170:	2104      	movs	r1, #4
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 fa42 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e07c      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d034      	beq.n	8006228 <HAL_I2C_Mem_Read+0x1d0>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d130      	bne.n	8006228 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061cc:	2200      	movs	r2, #0
 80061ce:	2180      	movs	r1, #128	@ 0x80
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fa13 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e04d      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2bff      	cmp	r3, #255	@ 0xff
 80061e8:	d90e      	bls.n	8006208 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	8979      	ldrh	r1, [r7, #10]
 80061f8:	2300      	movs	r3, #0
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fc4b 	bl	8006a9c <I2C_TransferConfig>
 8006206:	e00f      	b.n	8006228 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006216:	b2da      	uxtb	r2, r3
 8006218:	8979      	ldrh	r1, [r7, #10]
 800621a:	2300      	movs	r3, #0
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fc3a 	bl	8006a9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d19a      	bne.n	8006168 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 fa80 	bl	800673c <I2C_WaitOnSTOPFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e01a      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2220      	movs	r2, #32
 800624c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6859      	ldr	r1, [r3, #4]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	4b0b      	ldr	r3, [pc, #44]	@ (8006288 <HAL_I2C_Mem_Read+0x230>)
 800625a:	400b      	ands	r3, r1
 800625c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	e000      	b.n	800627c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800627a:	2302      	movs	r3, #2
  }
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	80002400 	.word	0x80002400
 8006288:	fe00e800 	.word	0xfe00e800

0800628c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08a      	sub	sp, #40	@ 0x28
 8006290:	af02      	add	r7, sp, #8
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	603b      	str	r3, [r7, #0]
 8006298:	460b      	mov	r3, r1
 800629a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	f040 80d2 	bne.w	8006452 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062bc:	d101      	bne.n	80062c2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80062be:	2302      	movs	r3, #2
 80062c0:	e0c8      	b.n	8006454 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_I2C_IsDeviceReady+0x44>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e0c1      	b.n	8006454 <HAL_I2C_IsDeviceReady+0x1c8>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2224      	movs	r2, #36	@ 0x24
 80062dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d105      	bne.n	80062fa <HAL_I2C_IsDeviceReady+0x6e>
 80062ee:	897b      	ldrh	r3, [r7, #10]
 80062f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062f4:	4b59      	ldr	r3, [pc, #356]	@ (800645c <HAL_I2C_IsDeviceReady+0x1d0>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	e004      	b.n	8006304 <HAL_I2C_IsDeviceReady+0x78>
 80062fa:	897b      	ldrh	r3, [r7, #10]
 80062fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006300:	4b57      	ldr	r3, [pc, #348]	@ (8006460 <HAL_I2C_IsDeviceReady+0x1d4>)
 8006302:	4313      	orrs	r3, r2
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800630a:	f7fe fbe5 	bl	8004ad8 <HAL_GetTick>
 800630e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b20      	cmp	r3, #32
 800631c:	bf0c      	ite	eq
 800631e:	2301      	moveq	r3, #1
 8006320:	2300      	movne	r3, #0
 8006322:	b2db      	uxtb	r3, r3
 8006324:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b10      	cmp	r3, #16
 8006332:	bf0c      	ite	eq
 8006334:	2301      	moveq	r3, #1
 8006336:	2300      	movne	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800633c:	e034      	b.n	80063a8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006344:	d01a      	beq.n	800637c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006346:	f7fe fbc7 	bl	8004ad8 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d302      	bcc.n	800635c <HAL_I2C_IsDeviceReady+0xd0>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10f      	bne.n	800637c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006368:	f043 0220 	orr.w	r2, r3, #32
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e06b      	b.n	8006454 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b20      	cmp	r3, #32
 8006388:	bf0c      	ite	eq
 800638a:	2301      	moveq	r3, #1
 800638c:	2300      	movne	r3, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b10      	cmp	r3, #16
 800639e:	bf0c      	ite	eq
 80063a0:	2301      	moveq	r3, #1
 80063a2:	2300      	movne	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80063a8:	7ffb      	ldrb	r3, [r7, #31]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d102      	bne.n	80063b4 <HAL_I2C_IsDeviceReady+0x128>
 80063ae:	7fbb      	ldrb	r3, [r7, #30]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0c4      	beq.n	800633e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	f003 0310 	and.w	r3, r3, #16
 80063be:	2b10      	cmp	r3, #16
 80063c0:	d01a      	beq.n	80063f8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2200      	movs	r2, #0
 80063ca:	2120      	movs	r1, #32
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f915 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e03b      	b.n	8006454 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2220      	movs	r2, #32
 80063e2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e02d      	b.n	8006454 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2200      	movs	r2, #0
 8006400:	2120      	movs	r1, #32
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f8fa 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e020      	b.n	8006454 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2210      	movs	r2, #16
 8006418:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2220      	movs	r2, #32
 8006420:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	3301      	adds	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	429a      	cmp	r2, r3
 800642e:	f63f af5a 	bhi.w	80062e6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643e:	f043 0220 	orr.w	r2, r3, #32
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8006452:	2302      	movs	r3, #2
  }
}
 8006454:	4618      	mov	r0, r3
 8006456:	3720      	adds	r7, #32
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	02002000 	.word	0x02002000
 8006460:	02002800 	.word	0x02002800

08006464 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	4608      	mov	r0, r1
 800646e:	4611      	mov	r1, r2
 8006470:	461a      	mov	r2, r3
 8006472:	4603      	mov	r3, r0
 8006474:	817b      	strh	r3, [r7, #10]
 8006476:	460b      	mov	r3, r1
 8006478:	813b      	strh	r3, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	b2da      	uxtb	r2, r3
 8006482:	8979      	ldrh	r1, [r7, #10]
 8006484:	4b20      	ldr	r3, [pc, #128]	@ (8006508 <I2C_RequestMemoryWrite+0xa4>)
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fb05 	bl	8006a9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	69b9      	ldr	r1, [r7, #24]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f909 	bl	80066ae <I2C_WaitOnTXISFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e02c      	b.n	8006500 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064a6:	88fb      	ldrh	r3, [r7, #6]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d105      	bne.n	80064b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064ac:	893b      	ldrh	r3, [r7, #8]
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80064b6:	e015      	b.n	80064e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064b8:	893b      	ldrh	r3, [r7, #8]
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	b29b      	uxth	r3, r3
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	69b9      	ldr	r1, [r7, #24]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f8ef 	bl	80066ae <I2C_WaitOnTXISFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e012      	b.n	8006500 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064da:	893b      	ldrh	r3, [r7, #8]
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	2200      	movs	r2, #0
 80064ec:	2180      	movs	r1, #128	@ 0x80
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f884 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	80002000 	.word	0x80002000

0800650c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	461a      	mov	r2, r3
 800651a:	4603      	mov	r3, r0
 800651c:	817b      	strh	r3, [r7, #10]
 800651e:	460b      	mov	r3, r1
 8006520:	813b      	strh	r3, [r7, #8]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006526:	88fb      	ldrh	r3, [r7, #6]
 8006528:	b2da      	uxtb	r2, r3
 800652a:	8979      	ldrh	r1, [r7, #10]
 800652c:	4b20      	ldr	r3, [pc, #128]	@ (80065b0 <I2C_RequestMemoryRead+0xa4>)
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	2300      	movs	r3, #0
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 fab2 	bl	8006a9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006538:	69fa      	ldr	r2, [r7, #28]
 800653a:	69b9      	ldr	r1, [r7, #24]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f8b6 	bl	80066ae <I2C_WaitOnTXISFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e02c      	b.n	80065a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800654c:	88fb      	ldrh	r3, [r7, #6]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d105      	bne.n	800655e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006552:	893b      	ldrh	r3, [r7, #8]
 8006554:	b2da      	uxtb	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	629a      	str	r2, [r3, #40]	@ 0x28
 800655c:	e015      	b.n	800658a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800655e:	893b      	ldrh	r3, [r7, #8]
 8006560:	0a1b      	lsrs	r3, r3, #8
 8006562:	b29b      	uxth	r3, r3
 8006564:	b2da      	uxtb	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	69b9      	ldr	r1, [r7, #24]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f89c 	bl	80066ae <I2C_WaitOnTXISFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e012      	b.n	80065a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006580:	893b      	ldrh	r3, [r7, #8]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2200      	movs	r2, #0
 8006592:	2140      	movs	r1, #64	@ 0x40
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 f831 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e000      	b.n	80065a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	80002000 	.word	0x80002000

080065b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d103      	bne.n	80065d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2200      	movs	r2, #0
 80065d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d007      	beq.n	80065f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699a      	ldr	r2, [r3, #24]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
 80065ee:	619a      	str	r2, [r3, #24]
  }
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	4613      	mov	r3, r2
 800660a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800660c:	e03b      	b.n	8006686 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f962 	bl	80068dc <I2C_IsErrorOccurred>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e041      	b.n	80066a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006628:	d02d      	beq.n	8006686 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662a:	f7fe fa55 	bl	8004ad8 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d302      	bcc.n	8006640 <I2C_WaitOnFlagUntilTimeout+0x44>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d122      	bne.n	8006686 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4013      	ands	r3, r2
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	429a      	cmp	r2, r3
 800664e:	bf0c      	ite	eq
 8006650:	2301      	moveq	r3, #1
 8006652:	2300      	movne	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	429a      	cmp	r2, r3
 800665c:	d113      	bne.n	8006686 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006662:	f043 0220 	orr.w	r2, r3, #32
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e00f      	b.n	80066a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699a      	ldr	r2, [r3, #24]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4013      	ands	r3, r2
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	429a      	cmp	r2, r3
 8006694:	bf0c      	ite	eq
 8006696:	2301      	moveq	r3, #1
 8006698:	2300      	movne	r3, #0
 800669a:	b2db      	uxtb	r3, r3
 800669c:	461a      	mov	r2, r3
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d0b4      	beq.n	800660e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066ba:	e033      	b.n	8006724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 f90b 	bl	80068dc <I2C_IsErrorOccurred>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e031      	b.n	8006734 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d6:	d025      	beq.n	8006724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d8:	f7fe f9fe 	bl	8004ad8 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d302      	bcc.n	80066ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d11a      	bne.n	8006724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d013      	beq.n	8006724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006700:	f043 0220 	orr.w	r2, r3, #32
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e007      	b.n	8006734 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b02      	cmp	r3, #2
 8006730:	d1c4      	bne.n	80066bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006748:	e02f      	b.n	80067aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 f8c4 	bl	80068dc <I2C_IsErrorOccurred>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e02d      	b.n	80067ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675e:	f7fe f9bb 	bl	8004ad8 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	429a      	cmp	r2, r3
 800676c:	d302      	bcc.n	8006774 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d11a      	bne.n	80067aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b20      	cmp	r3, #32
 8006780:	d013      	beq.n	80067aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006786:	f043 0220 	orr.w	r2, r3, #32
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e007      	b.n	80067ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d1c8      	bne.n	800674a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80067d4:	e071      	b.n	80068ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 f87e 	bl	80068dc <I2C_IsErrorOccurred>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b20      	cmp	r3, #32
 80067f6:	d13b      	bne.n	8006870 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d138      	bne.n	8006870 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b04      	cmp	r3, #4
 800680a:	d105      	bne.n	8006818 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f003 0310 	and.w	r3, r3, #16
 8006822:	2b10      	cmp	r3, #16
 8006824:	d121      	bne.n	800686a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2210      	movs	r2, #16
 800682c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2204      	movs	r2, #4
 8006832:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2220      	movs	r2, #32
 800683a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6859      	ldr	r1, [r3, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	4b24      	ldr	r3, [pc, #144]	@ (80068d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006848:	400b      	ands	r3, r1
 800684a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	75fb      	strb	r3, [r7, #23]
 8006868:	e002      	b.n	8006870 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006870:	f7fe f932 	bl	8004ad8 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	429a      	cmp	r2, r3
 800687e:	d302      	bcc.n	8006886 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d119      	bne.n	80068ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d116      	bne.n	80068ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b04      	cmp	r3, #4
 8006898:	d00f      	beq.n	80068ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689e:	f043 0220 	orr.w	r2, r3, #32
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	d002      	beq.n	80068ce <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80068c8:	7dfb      	ldrb	r3, [r7, #23]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d083      	beq.n	80067d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	fe00e800 	.word	0xfe00e800

080068dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08a      	sub	sp, #40	@ 0x28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f003 0310 	and.w	r3, r3, #16
 8006904:	2b00      	cmp	r3, #0
 8006906:	d068      	beq.n	80069da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2210      	movs	r2, #16
 800690e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006910:	e049      	b.n	80069a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d045      	beq.n	80069a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800691a:	f7fe f8dd 	bl	8004ad8 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	429a      	cmp	r2, r3
 8006928:	d302      	bcc.n	8006930 <I2C_IsErrorOccurred+0x54>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d13a      	bne.n	80069a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800693a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006942:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800694e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006952:	d121      	bne.n	8006998 <I2C_IsErrorOccurred+0xbc>
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800695a:	d01d      	beq.n	8006998 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800695c:	7cfb      	ldrb	r3, [r7, #19]
 800695e:	2b20      	cmp	r3, #32
 8006960:	d01a      	beq.n	8006998 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006970:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006972:	f7fe f8b1 	bl	8004ad8 <HAL_GetTick>
 8006976:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006978:	e00e      	b.n	8006998 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800697a:	f7fe f8ad 	bl	8004ad8 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b19      	cmp	r3, #25
 8006986:	d907      	bls.n	8006998 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	f043 0320 	orr.w	r3, r3, #32
 800698e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006996:	e006      	b.n	80069a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d1e9      	bne.n	800697a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d003      	beq.n	80069bc <I2C_IsErrorOccurred+0xe0>
 80069b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d0aa      	beq.n	8006912 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80069bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d103      	bne.n	80069cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2220      	movs	r2, #32
 80069ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	f043 0304 	orr.w	r3, r3, #4
 80069d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	f043 0301 	orr.w	r3, r3, #1
 80069f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	f043 0308 	orr.w	r3, r3, #8
 8006a14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00b      	beq.n	8006a48 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	f043 0302 	orr.w	r3, r3, #2
 8006a36:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01c      	beq.n	8006a8a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f7ff fdaf 	bl	80065b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6859      	ldr	r1, [r3, #4]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <I2C_IsErrorOccurred+0x1bc>)
 8006a62:	400b      	ands	r3, r1
 8006a64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3728      	adds	r7, #40	@ 0x28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	fe00e800 	.word	0xfe00e800

08006a9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	607b      	str	r3, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	817b      	strh	r3, [r7, #10]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006aae:	897b      	ldrh	r3, [r7, #10]
 8006ab0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ab4:	7a7b      	ldrb	r3, [r7, #9]
 8006ab6:	041b      	lsls	r3, r3, #16
 8006ab8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006abc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006aca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	0d5b      	lsrs	r3, r3, #21
 8006ad6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006ada:	4b08      	ldr	r3, [pc, #32]	@ (8006afc <I2C_TransferConfig+0x60>)
 8006adc:	430b      	orrs	r3, r1
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	ea02 0103 	and.w	r1, r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	03ff63ff 	.word	0x03ff63ff

08006b00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d138      	bne.n	8006b88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e032      	b.n	8006b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2224      	movs	r2, #36	@ 0x24
 8006b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0201 	bic.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6819      	ldr	r1, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0201 	orr.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	e000      	b.n	8006b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b88:	2302      	movs	r3, #2
  }
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d139      	bne.n	8006c20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e033      	b.n	8006c22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2224      	movs	r2, #36	@ 0x24
 8006bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0201 	bic.w	r2, r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006be8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e000      	b.n	8006c22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c20:	2302      	movs	r3, #2
  }
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b086      	sub	sp, #24
 8006c32:	af02      	add	r7, sp, #8
 8006c34:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e108      	b.n	8006e52 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fd fe48 	bl	80048f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2203      	movs	r2, #3
 8006c64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c6e:	d102      	bne.n	8006c76 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f003 fec4 	bl	800aa08 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	7c1a      	ldrb	r2, [r3, #16]
 8006c88:	f88d 2000 	strb.w	r2, [sp]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c90:	f003 fe60 	bl	800a954 <USB_CoreInit>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d005      	beq.n	8006ca6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e0d5      	b.n	8006e52 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2100      	movs	r1, #0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f003 febc 	bl	800aa2a <USB_SetCurrentMode>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d005      	beq.n	8006cc4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0c6      	b.n	8006e52 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	73fb      	strb	r3, [r7, #15]
 8006cc8:	e04a      	b.n	8006d60 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006cca:	7bfa      	ldrb	r2, [r7, #15]
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	3315      	adds	r3, #21
 8006cda:	2201      	movs	r2, #1
 8006cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006cde:	7bfa      	ldrb	r2, [r7, #15]
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	440b      	add	r3, r1
 8006cec:	3314      	adds	r3, #20
 8006cee:	7bfa      	ldrb	r2, [r7, #15]
 8006cf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006cf2:	7bfa      	ldrb	r2, [r7, #15]
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	b298      	uxth	r0, r3
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	440b      	add	r3, r1
 8006d04:	332e      	adds	r3, #46	@ 0x2e
 8006d06:	4602      	mov	r2, r0
 8006d08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d0a:	7bfa      	ldrb	r2, [r7, #15]
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	440b      	add	r3, r1
 8006d18:	3318      	adds	r3, #24
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006d1e:	7bfa      	ldrb	r2, [r7, #15]
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4613      	mov	r3, r2
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	4413      	add	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	440b      	add	r3, r1
 8006d2c:	331c      	adds	r3, #28
 8006d2e:	2200      	movs	r2, #0
 8006d30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d32:	7bfa      	ldrb	r2, [r7, #15]
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	3320      	adds	r3, #32
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d46:	7bfa      	ldrb	r2, [r7, #15]
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	440b      	add	r3, r1
 8006d54:	3324      	adds	r3, #36	@ 0x24
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	791b      	ldrb	r3, [r3, #4]
 8006d64:	7bfa      	ldrb	r2, [r7, #15]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d3af      	bcc.n	8006cca <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]
 8006d6e:	e044      	b.n	8006dfa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d70:	7bfa      	ldrb	r2, [r7, #15]
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	4613      	mov	r3, r2
 8006d76:	00db      	lsls	r3, r3, #3
 8006d78:	4413      	add	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	440b      	add	r3, r1
 8006d7e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006d82:	2200      	movs	r2, #0
 8006d84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006d86:	7bfa      	ldrb	r2, [r7, #15]
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	440b      	add	r3, r1
 8006d94:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006d98:	7bfa      	ldrb	r2, [r7, #15]
 8006d9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d9c:	7bfa      	ldrb	r2, [r7, #15]
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	4613      	mov	r3, r2
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006db2:	7bfa      	ldrb	r2, [r7, #15]
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006dc8:	7bfa      	ldrb	r2, [r7, #15]
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006dde:	7bfa      	ldrb	r2, [r7, #15]
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	3301      	adds	r3, #1
 8006df8:	73fb      	strb	r3, [r7, #15]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	791b      	ldrb	r3, [r3, #4]
 8006dfe:	7bfa      	ldrb	r2, [r7, #15]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d3b5      	bcc.n	8006d70 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	7c1a      	ldrb	r2, [r3, #16]
 8006e0c:	f88d 2000 	strb.w	r2, [sp]
 8006e10:	3304      	adds	r3, #4
 8006e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e14:	f003 fe56 	bl	800aac4 <USB_DevInit>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e013      	b.n	8006e52 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	7b1b      	ldrb	r3, [r3, #12]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d102      	bne.n	8006e46 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f80b 	bl	8006e5c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f004 f811 	bl	800ae72 <USB_DevDisconnect>

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e8a:	4b05      	ldr	r3, [pc, #20]	@ (8006ea0 <HAL_PCDEx_ActivateLPM+0x44>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	10000003 	.word	0x10000003

08006ea4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ea8:	4b05      	ldr	r3, [pc, #20]	@ (8006ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a04      	ldr	r2, [pc, #16]	@ (8006ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eb2:	6013      	str	r3, [r2, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40007000 	.word	0x40007000

08006ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e291      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 8087 	beq.w	8006ff6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ee8:	4b96      	ldr	r3, [pc, #600]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 030c 	and.w	r3, r3, #12
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d00c      	beq.n	8006f0e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ef4:	4b93      	ldr	r3, [pc, #588]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f003 030c 	and.w	r3, r3, #12
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d112      	bne.n	8006f26 <HAL_RCC_OscConfig+0x62>
 8006f00:	4b90      	ldr	r3, [pc, #576]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f0c:	d10b      	bne.n	8006f26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f0e:	4b8d      	ldr	r3, [pc, #564]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d06c      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x130>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d168      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e26b      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f2e:	d106      	bne.n	8006f3e <HAL_RCC_OscConfig+0x7a>
 8006f30:	4b84      	ldr	r3, [pc, #528]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a83      	ldr	r2, [pc, #524]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	e02e      	b.n	8006f9c <HAL_RCC_OscConfig+0xd8>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10c      	bne.n	8006f60 <HAL_RCC_OscConfig+0x9c>
 8006f46:	4b7f      	ldr	r3, [pc, #508]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a7e      	ldr	r2, [pc, #504]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	4b7c      	ldr	r3, [pc, #496]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a7b      	ldr	r2, [pc, #492]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	e01d      	b.n	8006f9c <HAL_RCC_OscConfig+0xd8>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f68:	d10c      	bne.n	8006f84 <HAL_RCC_OscConfig+0xc0>
 8006f6a:	4b76      	ldr	r3, [pc, #472]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a75      	ldr	r2, [pc, #468]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	4b73      	ldr	r3, [pc, #460]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a72      	ldr	r2, [pc, #456]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	e00b      	b.n	8006f9c <HAL_RCC_OscConfig+0xd8>
 8006f84:	4b6f      	ldr	r3, [pc, #444]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a6e      	ldr	r2, [pc, #440]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	4b6c      	ldr	r3, [pc, #432]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a6b      	ldr	r2, [pc, #428]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006f96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d013      	beq.n	8006fcc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa4:	f7fd fd98 	bl	8004ad8 <HAL_GetTick>
 8006fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006faa:	e008      	b.n	8006fbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fac:	f7fd fd94 	bl	8004ad8 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b64      	cmp	r3, #100	@ 0x64
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e21f      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fbe:	4b61      	ldr	r3, [pc, #388]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0f0      	beq.n	8006fac <HAL_RCC_OscConfig+0xe8>
 8006fca:	e014      	b.n	8006ff6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fcc:	f7fd fd84 	bl	8004ad8 <HAL_GetTick>
 8006fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fd2:	e008      	b.n	8006fe6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fd4:	f7fd fd80 	bl	8004ad8 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2b64      	cmp	r3, #100	@ 0x64
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e20b      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fe6:	4b57      	ldr	r3, [pc, #348]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1f0      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x110>
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d069      	beq.n	80070d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007002:	4b50      	ldr	r3, [pc, #320]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 030c 	and.w	r3, r3, #12
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00b      	beq.n	8007026 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800700e:	4b4d      	ldr	r3, [pc, #308]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f003 030c 	and.w	r3, r3, #12
 8007016:	2b08      	cmp	r3, #8
 8007018:	d11c      	bne.n	8007054 <HAL_RCC_OscConfig+0x190>
 800701a:	4b4a      	ldr	r3, [pc, #296]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d116      	bne.n	8007054 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007026:	4b47      	ldr	r3, [pc, #284]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <HAL_RCC_OscConfig+0x17a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d001      	beq.n	800703e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e1df      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800703e:	4b41      	ldr	r3, [pc, #260]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	493d      	ldr	r1, [pc, #244]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 800704e:	4313      	orrs	r3, r2
 8007050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007052:	e040      	b.n	80070d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d023      	beq.n	80070a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800705c:	4b39      	ldr	r3, [pc, #228]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a38      	ldr	r2, [pc, #224]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8007062:	f043 0301 	orr.w	r3, r3, #1
 8007066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007068:	f7fd fd36 	bl	8004ad8 <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007070:	f7fd fd32 	bl	8004ad8 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e1bd      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007082:	4b30      	ldr	r3, [pc, #192]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0f0      	beq.n	8007070 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800708e:	4b2d      	ldr	r3, [pc, #180]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	4929      	ldr	r1, [pc, #164]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	600b      	str	r3, [r1, #0]
 80070a2:	e018      	b.n	80070d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070a4:	4b27      	ldr	r3, [pc, #156]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a26      	ldr	r2, [pc, #152]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 80070aa:	f023 0301 	bic.w	r3, r3, #1
 80070ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b0:	f7fd fd12 	bl	8004ad8 <HAL_GetTick>
 80070b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070b8:	f7fd fd0e 	bl	8004ad8 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e199      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f0      	bne.n	80070b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d038      	beq.n	8007154 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d019      	beq.n	800711e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070ea:	4b16      	ldr	r3, [pc, #88]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 80070ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070ee:	4a15      	ldr	r2, [pc, #84]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 80070f0:	f043 0301 	orr.w	r3, r3, #1
 80070f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f6:	f7fd fcef 	bl	8004ad8 <HAL_GetTick>
 80070fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070fc:	e008      	b.n	8007110 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070fe:	f7fd fceb 	bl	8004ad8 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d901      	bls.n	8007110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e176      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007110:	4b0c      	ldr	r3, [pc, #48]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8007112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0f0      	beq.n	80070fe <HAL_RCC_OscConfig+0x23a>
 800711c:	e01a      	b.n	8007154 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800711e:	4b09      	ldr	r3, [pc, #36]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8007120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007122:	4a08      	ldr	r2, [pc, #32]	@ (8007144 <HAL_RCC_OscConfig+0x280>)
 8007124:	f023 0301 	bic.w	r3, r3, #1
 8007128:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712a:	f7fd fcd5 	bl	8004ad8 <HAL_GetTick>
 800712e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007130:	e00a      	b.n	8007148 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007132:	f7fd fcd1 	bl	8004ad8 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d903      	bls.n	8007148 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e15c      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
 8007144:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007148:	4b91      	ldr	r3, [pc, #580]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 800714a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1ee      	bne.n	8007132 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 80a4 	beq.w	80072aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007162:	4b8b      	ldr	r3, [pc, #556]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 8007164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10d      	bne.n	800718a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800716e:	4b88      	ldr	r3, [pc, #544]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 8007170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007172:	4a87      	ldr	r2, [pc, #540]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 8007174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007178:	6413      	str	r3, [r2, #64]	@ 0x40
 800717a:	4b85      	ldr	r3, [pc, #532]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 800717c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007182:	60bb      	str	r3, [r7, #8]
 8007184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007186:	2301      	movs	r3, #1
 8007188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800718a:	4b82      	ldr	r3, [pc, #520]	@ (8007394 <HAL_RCC_OscConfig+0x4d0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007192:	2b00      	cmp	r3, #0
 8007194:	d118      	bne.n	80071c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007196:	4b7f      	ldr	r3, [pc, #508]	@ (8007394 <HAL_RCC_OscConfig+0x4d0>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a7e      	ldr	r2, [pc, #504]	@ (8007394 <HAL_RCC_OscConfig+0x4d0>)
 800719c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071a2:	f7fd fc99 	bl	8004ad8 <HAL_GetTick>
 80071a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071aa:	f7fd fc95 	bl	8004ad8 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b64      	cmp	r3, #100	@ 0x64
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e120      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071bc:	4b75      	ldr	r3, [pc, #468]	@ (8007394 <HAL_RCC_OscConfig+0x4d0>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0f0      	beq.n	80071aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d106      	bne.n	80071de <HAL_RCC_OscConfig+0x31a>
 80071d0:	4b6f      	ldr	r3, [pc, #444]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 80071d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d4:	4a6e      	ldr	r2, [pc, #440]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 80071d6:	f043 0301 	orr.w	r3, r3, #1
 80071da:	6713      	str	r3, [r2, #112]	@ 0x70
 80071dc:	e02d      	b.n	800723a <HAL_RCC_OscConfig+0x376>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10c      	bne.n	8007200 <HAL_RCC_OscConfig+0x33c>
 80071e6:	4b6a      	ldr	r3, [pc, #424]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ea:	4a69      	ldr	r2, [pc, #420]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 80071ec:	f023 0301 	bic.w	r3, r3, #1
 80071f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80071f2:	4b67      	ldr	r3, [pc, #412]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 80071f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f6:	4a66      	ldr	r2, [pc, #408]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 80071f8:	f023 0304 	bic.w	r3, r3, #4
 80071fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80071fe:	e01c      	b.n	800723a <HAL_RCC_OscConfig+0x376>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2b05      	cmp	r3, #5
 8007206:	d10c      	bne.n	8007222 <HAL_RCC_OscConfig+0x35e>
 8007208:	4b61      	ldr	r3, [pc, #388]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 800720a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720c:	4a60      	ldr	r2, [pc, #384]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 800720e:	f043 0304 	orr.w	r3, r3, #4
 8007212:	6713      	str	r3, [r2, #112]	@ 0x70
 8007214:	4b5e      	ldr	r3, [pc, #376]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 8007216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007218:	4a5d      	ldr	r2, [pc, #372]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 800721a:	f043 0301 	orr.w	r3, r3, #1
 800721e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007220:	e00b      	b.n	800723a <HAL_RCC_OscConfig+0x376>
 8007222:	4b5b      	ldr	r3, [pc, #364]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 8007224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007226:	4a5a      	ldr	r2, [pc, #360]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 8007228:	f023 0301 	bic.w	r3, r3, #1
 800722c:	6713      	str	r3, [r2, #112]	@ 0x70
 800722e:	4b58      	ldr	r3, [pc, #352]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 8007230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007232:	4a57      	ldr	r2, [pc, #348]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 8007234:	f023 0304 	bic.w	r3, r3, #4
 8007238:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d015      	beq.n	800726e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007242:	f7fd fc49 	bl	8004ad8 <HAL_GetTick>
 8007246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007248:	e00a      	b.n	8007260 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800724a:	f7fd fc45 	bl	8004ad8 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007258:	4293      	cmp	r3, r2
 800725a:	d901      	bls.n	8007260 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e0ce      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007260:	4b4b      	ldr	r3, [pc, #300]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 8007262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0ee      	beq.n	800724a <HAL_RCC_OscConfig+0x386>
 800726c:	e014      	b.n	8007298 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800726e:	f7fd fc33 	bl	8004ad8 <HAL_GetTick>
 8007272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007274:	e00a      	b.n	800728c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007276:	f7fd fc2f 	bl	8004ad8 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007284:	4293      	cmp	r3, r2
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e0b8      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800728c:	4b40      	ldr	r3, [pc, #256]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 800728e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1ee      	bne.n	8007276 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d105      	bne.n	80072aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800729e:	4b3c      	ldr	r3, [pc, #240]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 80072a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a2:	4a3b      	ldr	r2, [pc, #236]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 80072a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072a8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 80a4 	beq.w	80073fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072b4:	4b36      	ldr	r3, [pc, #216]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 030c 	and.w	r3, r3, #12
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d06b      	beq.n	8007398 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d149      	bne.n	800735c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072c8:	4b31      	ldr	r3, [pc, #196]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a30      	ldr	r2, [pc, #192]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 80072ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d4:	f7fd fc00 	bl	8004ad8 <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072da:	e008      	b.n	80072ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072dc:	f7fd fbfc 	bl	8004ad8 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d901      	bls.n	80072ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e087      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072ee:	4b28      	ldr	r3, [pc, #160]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1f0      	bne.n	80072dc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69da      	ldr	r2, [r3, #28]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007308:	019b      	lsls	r3, r3, #6
 800730a:	431a      	orrs	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007310:	085b      	lsrs	r3, r3, #1
 8007312:	3b01      	subs	r3, #1
 8007314:	041b      	lsls	r3, r3, #16
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731c:	061b      	lsls	r3, r3, #24
 800731e:	4313      	orrs	r3, r2
 8007320:	4a1b      	ldr	r2, [pc, #108]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 8007322:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007326:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007328:	4b19      	ldr	r3, [pc, #100]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a18      	ldr	r2, [pc, #96]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 800732e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007334:	f7fd fbd0 	bl	8004ad8 <HAL_GetTick>
 8007338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800733c:	f7fd fbcc 	bl	8004ad8 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e057      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800734e:	4b10      	ldr	r3, [pc, #64]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0f0      	beq.n	800733c <HAL_RCC_OscConfig+0x478>
 800735a:	e04f      	b.n	80073fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800735c:	4b0c      	ldr	r3, [pc, #48]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a0b      	ldr	r2, [pc, #44]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 8007362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007368:	f7fd fbb6 	bl	8004ad8 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007370:	f7fd fbb2 	bl	8004ad8 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e03d      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007382:	4b03      	ldr	r3, [pc, #12]	@ (8007390 <HAL_RCC_OscConfig+0x4cc>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1f0      	bne.n	8007370 <HAL_RCC_OscConfig+0x4ac>
 800738e:	e035      	b.n	80073fc <HAL_RCC_OscConfig+0x538>
 8007390:	40023800 	.word	0x40023800
 8007394:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007398:	4b1b      	ldr	r3, [pc, #108]	@ (8007408 <HAL_RCC_OscConfig+0x544>)
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d028      	beq.n	80073f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d121      	bne.n	80073f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073be:	429a      	cmp	r2, r3
 80073c0:	d11a      	bne.n	80073f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80073c8:	4013      	ands	r3, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80073ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d111      	bne.n	80073f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073de:	085b      	lsrs	r3, r3, #1
 80073e0:	3b01      	subs	r3, #1
 80073e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d107      	bne.n	80073f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d001      	beq.n	80073fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e000      	b.n	80073fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	40023800 	.word	0x40023800

0800740c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e0d0      	b.n	80075c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007424:	4b6a      	ldr	r3, [pc, #424]	@ (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d910      	bls.n	8007454 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007432:	4b67      	ldr	r3, [pc, #412]	@ (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f023 020f 	bic.w	r2, r3, #15
 800743a:	4965      	ldr	r1, [pc, #404]	@ (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	4313      	orrs	r3, r2
 8007440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007442:	4b63      	ldr	r3, [pc, #396]	@ (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 030f 	and.w	r3, r3, #15
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	429a      	cmp	r2, r3
 800744e:	d001      	beq.n	8007454 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e0b8      	b.n	80075c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d020      	beq.n	80074a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800746c:	4b59      	ldr	r3, [pc, #356]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	4a58      	ldr	r2, [pc, #352]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 8007472:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007476:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007484:	4b53      	ldr	r3, [pc, #332]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	4a52      	ldr	r2, [pc, #328]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 800748a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800748e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007490:	4b50      	ldr	r3, [pc, #320]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	494d      	ldr	r1, [pc, #308]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d040      	beq.n	8007530 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d107      	bne.n	80074c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074b6:	4b47      	ldr	r3, [pc, #284]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d115      	bne.n	80074ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e07f      	b.n	80075c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d107      	bne.n	80074de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ce:	4b41      	ldr	r3, [pc, #260]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d109      	bne.n	80074ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e073      	b.n	80075c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074de:	4b3d      	ldr	r3, [pc, #244]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e06b      	b.n	80075c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074ee:	4b39      	ldr	r3, [pc, #228]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f023 0203 	bic.w	r2, r3, #3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	4936      	ldr	r1, [pc, #216]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007500:	f7fd faea 	bl	8004ad8 <HAL_GetTick>
 8007504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007506:	e00a      	b.n	800751e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007508:	f7fd fae6 	bl	8004ad8 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007516:	4293      	cmp	r3, r2
 8007518:	d901      	bls.n	800751e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e053      	b.n	80075c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800751e:	4b2d      	ldr	r3, [pc, #180]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 020c 	and.w	r2, r3, #12
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	429a      	cmp	r2, r3
 800752e:	d1eb      	bne.n	8007508 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007530:	4b27      	ldr	r3, [pc, #156]	@ (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 030f 	and.w	r3, r3, #15
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	429a      	cmp	r2, r3
 800753c:	d210      	bcs.n	8007560 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800753e:	4b24      	ldr	r3, [pc, #144]	@ (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f023 020f 	bic.w	r2, r3, #15
 8007546:	4922      	ldr	r1, [pc, #136]	@ (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	4313      	orrs	r3, r2
 800754c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800754e:	4b20      	ldr	r3, [pc, #128]	@ (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 030f 	and.w	r3, r3, #15
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	429a      	cmp	r2, r3
 800755a:	d001      	beq.n	8007560 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e032      	b.n	80075c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	2b00      	cmp	r3, #0
 800756a:	d008      	beq.n	800757e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800756c:	4b19      	ldr	r3, [pc, #100]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	4916      	ldr	r1, [pc, #88]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 800757a:	4313      	orrs	r3, r2
 800757c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0308 	and.w	r3, r3, #8
 8007586:	2b00      	cmp	r3, #0
 8007588:	d009      	beq.n	800759e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800758a:	4b12      	ldr	r3, [pc, #72]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	490e      	ldr	r1, [pc, #56]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 800759a:	4313      	orrs	r3, r2
 800759c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800759e:	f000 f821 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 80075a2:	4602      	mov	r2, r0
 80075a4:	4b0b      	ldr	r3, [pc, #44]	@ (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	091b      	lsrs	r3, r3, #4
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	490a      	ldr	r1, [pc, #40]	@ (80075d8 <HAL_RCC_ClockConfig+0x1cc>)
 80075b0:	5ccb      	ldrb	r3, [r1, r3]
 80075b2:	fa22 f303 	lsr.w	r3, r2, r3
 80075b6:	4a09      	ldr	r2, [pc, #36]	@ (80075dc <HAL_RCC_ClockConfig+0x1d0>)
 80075b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075ba:	4b09      	ldr	r3, [pc, #36]	@ (80075e0 <HAL_RCC_ClockConfig+0x1d4>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fd fa46 	bl	8004a50 <HAL_InitTick>

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	40023c00 	.word	0x40023c00
 80075d4:	40023800 	.word	0x40023800
 80075d8:	08013940 	.word	0x08013940
 80075dc:	20000058 	.word	0x20000058
 80075e0:	2000005c 	.word	0x2000005c

080075e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075e8:	b094      	sub	sp, #80	@ 0x50
 80075ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80075f0:	2300      	movs	r3, #0
 80075f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075f4:	2300      	movs	r3, #0
 80075f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075fc:	4b79      	ldr	r3, [pc, #484]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 030c 	and.w	r3, r3, #12
 8007604:	2b08      	cmp	r3, #8
 8007606:	d00d      	beq.n	8007624 <HAL_RCC_GetSysClockFreq+0x40>
 8007608:	2b08      	cmp	r3, #8
 800760a:	f200 80e1 	bhi.w	80077d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <HAL_RCC_GetSysClockFreq+0x34>
 8007612:	2b04      	cmp	r3, #4
 8007614:	d003      	beq.n	800761e <HAL_RCC_GetSysClockFreq+0x3a>
 8007616:	e0db      	b.n	80077d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007618:	4b73      	ldr	r3, [pc, #460]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800761a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800761c:	e0db      	b.n	80077d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800761e:	4b73      	ldr	r3, [pc, #460]	@ (80077ec <HAL_RCC_GetSysClockFreq+0x208>)
 8007620:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007622:	e0d8      	b.n	80077d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007624:	4b6f      	ldr	r3, [pc, #444]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800762c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800762e:	4b6d      	ldr	r3, [pc, #436]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d063      	beq.n	8007702 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800763a:	4b6a      	ldr	r3, [pc, #424]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	099b      	lsrs	r3, r3, #6
 8007640:	2200      	movs	r2, #0
 8007642:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007644:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764c:	633b      	str	r3, [r7, #48]	@ 0x30
 800764e:	2300      	movs	r3, #0
 8007650:	637b      	str	r3, [r7, #52]	@ 0x34
 8007652:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007656:	4622      	mov	r2, r4
 8007658:	462b      	mov	r3, r5
 800765a:	f04f 0000 	mov.w	r0, #0
 800765e:	f04f 0100 	mov.w	r1, #0
 8007662:	0159      	lsls	r1, r3, #5
 8007664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007668:	0150      	lsls	r0, r2, #5
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4621      	mov	r1, r4
 8007670:	1a51      	subs	r1, r2, r1
 8007672:	6139      	str	r1, [r7, #16]
 8007674:	4629      	mov	r1, r5
 8007676:	eb63 0301 	sbc.w	r3, r3, r1
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	f04f 0200 	mov.w	r2, #0
 8007680:	f04f 0300 	mov.w	r3, #0
 8007684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007688:	4659      	mov	r1, fp
 800768a:	018b      	lsls	r3, r1, #6
 800768c:	4651      	mov	r1, sl
 800768e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007692:	4651      	mov	r1, sl
 8007694:	018a      	lsls	r2, r1, #6
 8007696:	4651      	mov	r1, sl
 8007698:	ebb2 0801 	subs.w	r8, r2, r1
 800769c:	4659      	mov	r1, fp
 800769e:	eb63 0901 	sbc.w	r9, r3, r1
 80076a2:	f04f 0200 	mov.w	r2, #0
 80076a6:	f04f 0300 	mov.w	r3, #0
 80076aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076b6:	4690      	mov	r8, r2
 80076b8:	4699      	mov	r9, r3
 80076ba:	4623      	mov	r3, r4
 80076bc:	eb18 0303 	adds.w	r3, r8, r3
 80076c0:	60bb      	str	r3, [r7, #8]
 80076c2:	462b      	mov	r3, r5
 80076c4:	eb49 0303 	adc.w	r3, r9, r3
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	f04f 0200 	mov.w	r2, #0
 80076ce:	f04f 0300 	mov.w	r3, #0
 80076d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80076d6:	4629      	mov	r1, r5
 80076d8:	024b      	lsls	r3, r1, #9
 80076da:	4621      	mov	r1, r4
 80076dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80076e0:	4621      	mov	r1, r4
 80076e2:	024a      	lsls	r2, r1, #9
 80076e4:	4610      	mov	r0, r2
 80076e6:	4619      	mov	r1, r3
 80076e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ea:	2200      	movs	r2, #0
 80076ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80076f4:	f7f9 fb38 	bl	8000d68 <__aeabi_uldivmod>
 80076f8:	4602      	mov	r2, r0
 80076fa:	460b      	mov	r3, r1
 80076fc:	4613      	mov	r3, r2
 80076fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007700:	e058      	b.n	80077b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007702:	4b38      	ldr	r3, [pc, #224]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	099b      	lsrs	r3, r3, #6
 8007708:	2200      	movs	r2, #0
 800770a:	4618      	mov	r0, r3
 800770c:	4611      	mov	r1, r2
 800770e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007712:	623b      	str	r3, [r7, #32]
 8007714:	2300      	movs	r3, #0
 8007716:	627b      	str	r3, [r7, #36]	@ 0x24
 8007718:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800771c:	4642      	mov	r2, r8
 800771e:	464b      	mov	r3, r9
 8007720:	f04f 0000 	mov.w	r0, #0
 8007724:	f04f 0100 	mov.w	r1, #0
 8007728:	0159      	lsls	r1, r3, #5
 800772a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800772e:	0150      	lsls	r0, r2, #5
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4641      	mov	r1, r8
 8007736:	ebb2 0a01 	subs.w	sl, r2, r1
 800773a:	4649      	mov	r1, r9
 800773c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007740:	f04f 0200 	mov.w	r2, #0
 8007744:	f04f 0300 	mov.w	r3, #0
 8007748:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800774c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007750:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007754:	ebb2 040a 	subs.w	r4, r2, sl
 8007758:	eb63 050b 	sbc.w	r5, r3, fp
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	f04f 0300 	mov.w	r3, #0
 8007764:	00eb      	lsls	r3, r5, #3
 8007766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800776a:	00e2      	lsls	r2, r4, #3
 800776c:	4614      	mov	r4, r2
 800776e:	461d      	mov	r5, r3
 8007770:	4643      	mov	r3, r8
 8007772:	18e3      	adds	r3, r4, r3
 8007774:	603b      	str	r3, [r7, #0]
 8007776:	464b      	mov	r3, r9
 8007778:	eb45 0303 	adc.w	r3, r5, r3
 800777c:	607b      	str	r3, [r7, #4]
 800777e:	f04f 0200 	mov.w	r2, #0
 8007782:	f04f 0300 	mov.w	r3, #0
 8007786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800778a:	4629      	mov	r1, r5
 800778c:	028b      	lsls	r3, r1, #10
 800778e:	4621      	mov	r1, r4
 8007790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007794:	4621      	mov	r1, r4
 8007796:	028a      	lsls	r2, r1, #10
 8007798:	4610      	mov	r0, r2
 800779a:	4619      	mov	r1, r3
 800779c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800779e:	2200      	movs	r2, #0
 80077a0:	61bb      	str	r3, [r7, #24]
 80077a2:	61fa      	str	r2, [r7, #28]
 80077a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077a8:	f7f9 fade 	bl	8000d68 <__aeabi_uldivmod>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4613      	mov	r3, r2
 80077b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80077b4:	4b0b      	ldr	r3, [pc, #44]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	0c1b      	lsrs	r3, r3, #16
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	3301      	adds	r3, #1
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80077c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077ce:	e002      	b.n	80077d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077d0:	4b05      	ldr	r3, [pc, #20]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80077d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3750      	adds	r7, #80	@ 0x50
 80077dc:	46bd      	mov	sp, r7
 80077de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077e2:	bf00      	nop
 80077e4:	40023800 	.word	0x40023800
 80077e8:	00f42400 	.word	0x00f42400
 80077ec:	007a1200 	.word	0x007a1200

080077f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077f4:	4b03      	ldr	r3, [pc, #12]	@ (8007804 <HAL_RCC_GetHCLKFreq+0x14>)
 80077f6:	681b      	ldr	r3, [r3, #0]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	20000058 	.word	0x20000058

08007808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800780c:	f7ff fff0 	bl	80077f0 <HAL_RCC_GetHCLKFreq>
 8007810:	4602      	mov	r2, r0
 8007812:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	0a9b      	lsrs	r3, r3, #10
 8007818:	f003 0307 	and.w	r3, r3, #7
 800781c:	4903      	ldr	r1, [pc, #12]	@ (800782c <HAL_RCC_GetPCLK1Freq+0x24>)
 800781e:	5ccb      	ldrb	r3, [r1, r3]
 8007820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007824:	4618      	mov	r0, r3
 8007826:	bd80      	pop	{r7, pc}
 8007828:	40023800 	.word	0x40023800
 800782c:	08013950 	.word	0x08013950

08007830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007834:	f7ff ffdc 	bl	80077f0 <HAL_RCC_GetHCLKFreq>
 8007838:	4602      	mov	r2, r0
 800783a:	4b05      	ldr	r3, [pc, #20]	@ (8007850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	0b5b      	lsrs	r3, r3, #13
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	4903      	ldr	r1, [pc, #12]	@ (8007854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007846:	5ccb      	ldrb	r3, [r1, r3]
 8007848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800784c:	4618      	mov	r0, r3
 800784e:	bd80      	pop	{r7, pc}
 8007850:	40023800 	.word	0x40023800
 8007854:	08013950 	.word	0x08013950

08007858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b088      	sub	sp, #32
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007860:	2300      	movs	r3, #0
 8007862:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b00      	cmp	r3, #0
 800787e:	d012      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007880:	4b69      	ldr	r3, [pc, #420]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	4a68      	ldr	r2, [pc, #416]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007886:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800788a:	6093      	str	r3, [r2, #8]
 800788c:	4b66      	ldr	r3, [pc, #408]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007894:	4964      	ldr	r1, [pc, #400]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007896:	4313      	orrs	r3, r2
 8007898:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80078a2:	2301      	movs	r3, #1
 80078a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d017      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078b2:	4b5d      	ldr	r3, [pc, #372]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c0:	4959      	ldr	r1, [pc, #356]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078d0:	d101      	bne.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80078d2:	2301      	movs	r3, #1
 80078d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80078de:	2301      	movs	r3, #1
 80078e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d017      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80078ee:	4b4e      	ldr	r3, [pc, #312]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fc:	494a      	ldr	r1, [pc, #296]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800790c:	d101      	bne.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800790e:	2301      	movs	r3, #1
 8007910:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800791a:	2301      	movs	r3, #1
 800791c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800792a:	2301      	movs	r3, #1
 800792c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 808b 	beq.w	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800793c:	4b3a      	ldr	r3, [pc, #232]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800793e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007940:	4a39      	ldr	r2, [pc, #228]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007946:	6413      	str	r3, [r2, #64]	@ 0x40
 8007948:	4b37      	ldr	r3, [pc, #220]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800794a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007950:	60bb      	str	r3, [r7, #8]
 8007952:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007954:	4b35      	ldr	r3, [pc, #212]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a34      	ldr	r2, [pc, #208]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800795a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800795e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007960:	f7fd f8ba 	bl	8004ad8 <HAL_GetTick>
 8007964:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007966:	e008      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007968:	f7fd f8b6 	bl	8004ad8 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b64      	cmp	r3, #100	@ 0x64
 8007974:	d901      	bls.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e357      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800797a:	4b2c      	ldr	r3, [pc, #176]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007982:	2b00      	cmp	r3, #0
 8007984:	d0f0      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007986:	4b28      	ldr	r3, [pc, #160]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800798a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800798e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d035      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d02e      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079a4:	4b20      	ldr	r3, [pc, #128]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079b8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079be:	4a1a      	ldr	r2, [pc, #104]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80079c6:	4a18      	ldr	r2, [pc, #96]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80079cc:	4b16      	ldr	r3, [pc, #88]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d114      	bne.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d8:	f7fd f87e 	bl	8004ad8 <HAL_GetTick>
 80079dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079de:	e00a      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079e0:	f7fd f87a 	bl	8004ad8 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d901      	bls.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e319      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d0ee      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a0e:	d111      	bne.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a10:	4b05      	ldr	r3, [pc, #20]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007a1c:	4b04      	ldr	r3, [pc, #16]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a1e:	400b      	ands	r3, r1
 8007a20:	4901      	ldr	r1, [pc, #4]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	608b      	str	r3, [r1, #8]
 8007a26:	e00b      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007a28:	40023800 	.word	0x40023800
 8007a2c:	40007000 	.word	0x40007000
 8007a30:	0ffffcff 	.word	0x0ffffcff
 8007a34:	4baa      	ldr	r3, [pc, #680]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	4aa9      	ldr	r2, [pc, #676]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a3a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007a3e:	6093      	str	r3, [r2, #8]
 8007a40:	4ba7      	ldr	r3, [pc, #668]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a4c:	49a4      	ldr	r1, [pc, #656]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0310 	and.w	r3, r3, #16
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d010      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a5e:	4ba0      	ldr	r3, [pc, #640]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a64:	4a9e      	ldr	r2, [pc, #632]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a70:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a78:	4999      	ldr	r1, [pc, #612]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a8c:	4b94      	ldr	r3, [pc, #592]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a92:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a9a:	4991      	ldr	r1, [pc, #580]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007aae:	4b8c      	ldr	r3, [pc, #560]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ab4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007abc:	4988      	ldr	r1, [pc, #544]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ad0:	4b83      	ldr	r3, [pc, #524]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ade:	4980      	ldr	r1, [pc, #512]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007af2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b00:	4977      	ldr	r1, [pc, #476]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b14:	4b72      	ldr	r3, [pc, #456]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b1a:	f023 0203 	bic.w	r2, r3, #3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b22:	496f      	ldr	r1, [pc, #444]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b36:	4b6a      	ldr	r3, [pc, #424]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b3c:	f023 020c 	bic.w	r2, r3, #12
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b44:	4966      	ldr	r1, [pc, #408]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00a      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b58:	4b61      	ldr	r3, [pc, #388]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b5e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b66:	495e      	ldr	r1, [pc, #376]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b7a:	4b59      	ldr	r3, [pc, #356]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b80:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b88:	4955      	ldr	r1, [pc, #340]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00a      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b9c:	4b50      	ldr	r3, [pc, #320]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007baa:	494d      	ldr	r1, [pc, #308]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007bbe:	4b48      	ldr	r3, [pc, #288]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bc4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bcc:	4944      	ldr	r1, [pc, #272]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00a      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007be0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bee:	493c      	ldr	r1, [pc, #240]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00a      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c02:	4b37      	ldr	r3, [pc, #220]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c10:	4933      	ldr	r1, [pc, #204]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00a      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c24:	4b2e      	ldr	r3, [pc, #184]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c2a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c32:	492b      	ldr	r1, [pc, #172]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d011      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c46:	4b26      	ldr	r3, [pc, #152]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c4c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c54:	4922      	ldr	r1, [pc, #136]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c64:	d101      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007c66:	2301      	movs	r3, #1
 8007c68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0308 	and.w	r3, r3, #8
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007c76:	2301      	movs	r3, #1
 8007c78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c86:	4b16      	ldr	r3, [pc, #88]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c8c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c94:	4912      	ldr	r1, [pc, #72]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cb8:	4909      	ldr	r1, [pc, #36]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d006      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 80d9 	beq.w	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007cd4:	4b02      	ldr	r3, [pc, #8]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a01      	ldr	r2, [pc, #4]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007cde:	e001      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007ce0:	40023800 	.word	0x40023800
 8007ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ce6:	f7fc fef7 	bl	8004ad8 <HAL_GetTick>
 8007cea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cec:	e008      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007cee:	f7fc fef3 	bl	8004ad8 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	2b64      	cmp	r3, #100	@ 0x64
 8007cfa:	d901      	bls.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e194      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d00:	4b6c      	ldr	r3, [pc, #432]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1f0      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d021      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d11d      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d20:	4b64      	ldr	r3, [pc, #400]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d26:	0c1b      	lsrs	r3, r3, #16
 8007d28:	f003 0303 	and.w	r3, r3, #3
 8007d2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d2e:	4b61      	ldr	r3, [pc, #388]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d34:	0e1b      	lsrs	r3, r3, #24
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	019a      	lsls	r2, r3, #6
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	041b      	lsls	r3, r3, #16
 8007d46:	431a      	orrs	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	061b      	lsls	r3, r3, #24
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	071b      	lsls	r3, r3, #28
 8007d54:	4957      	ldr	r1, [pc, #348]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d004      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d70:	d00a      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d02e      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d86:	d129      	bne.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d88:	4b4a      	ldr	r3, [pc, #296]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d8e:	0c1b      	lsrs	r3, r3, #16
 8007d90:	f003 0303 	and.w	r3, r3, #3
 8007d94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d96:	4b47      	ldr	r3, [pc, #284]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d9c:	0f1b      	lsrs	r3, r3, #28
 8007d9e:	f003 0307 	and.w	r3, r3, #7
 8007da2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	019a      	lsls	r2, r3, #6
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	041b      	lsls	r3, r3, #16
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	061b      	lsls	r3, r3, #24
 8007db6:	431a      	orrs	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	071b      	lsls	r3, r3, #28
 8007dbc:	493d      	ldr	r1, [pc, #244]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dca:	f023 021f 	bic.w	r2, r3, #31
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	4937      	ldr	r1, [pc, #220]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01d      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007de8:	4b32      	ldr	r3, [pc, #200]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dee:	0e1b      	lsrs	r3, r3, #24
 8007df0:	f003 030f 	and.w	r3, r3, #15
 8007df4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007df6:	4b2f      	ldr	r3, [pc, #188]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dfc:	0f1b      	lsrs	r3, r3, #28
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	019a      	lsls	r2, r3, #6
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	041b      	lsls	r3, r3, #16
 8007e10:	431a      	orrs	r2, r3
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	061b      	lsls	r3, r3, #24
 8007e16:	431a      	orrs	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	071b      	lsls	r3, r3, #28
 8007e1c:	4925      	ldr	r1, [pc, #148]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d011      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	019a      	lsls	r2, r3, #6
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	041b      	lsls	r3, r3, #16
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	061b      	lsls	r3, r3, #24
 8007e44:	431a      	orrs	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	071b      	lsls	r3, r3, #28
 8007e4c:	4919      	ldr	r1, [pc, #100]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e54:	4b17      	ldr	r3, [pc, #92]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a16      	ldr	r2, [pc, #88]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e60:	f7fc fe3a 	bl	8004ad8 <HAL_GetTick>
 8007e64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e66:	e008      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e68:	f7fc fe36 	bl	8004ad8 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	2b64      	cmp	r3, #100	@ 0x64
 8007e74:	d901      	bls.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e0d7      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0f0      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	f040 80cd 	bne.w	8008028 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e8e:	4b09      	ldr	r3, [pc, #36]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a08      	ldr	r2, [pc, #32]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e9a:	f7fc fe1d 	bl	8004ad8 <HAL_GetTick>
 8007e9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ea0:	e00a      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ea2:	f7fc fe19 	bl	8004ad8 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	2b64      	cmp	r3, #100	@ 0x64
 8007eae:	d903      	bls.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e0ba      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007eb4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007eb8:	4b5e      	ldr	r3, [pc, #376]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ec4:	d0ed      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d009      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d02e      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d12a      	bne.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007eee:	4b51      	ldr	r3, [pc, #324]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ef4:	0c1b      	lsrs	r3, r3, #16
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007efc:	4b4d      	ldr	r3, [pc, #308]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f02:	0f1b      	lsrs	r3, r3, #28
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	019a      	lsls	r2, r3, #6
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	041b      	lsls	r3, r3, #16
 8007f14:	431a      	orrs	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	061b      	lsls	r3, r3, #24
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	071b      	lsls	r3, r3, #28
 8007f22:	4944      	ldr	r1, [pc, #272]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f2a:	4b42      	ldr	r3, [pc, #264]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f30:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	021b      	lsls	r3, r3, #8
 8007f3c:	493d      	ldr	r1, [pc, #244]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d022      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f58:	d11d      	bne.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f5a:	4b36      	ldr	r3, [pc, #216]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f60:	0e1b      	lsrs	r3, r3, #24
 8007f62:	f003 030f 	and.w	r3, r3, #15
 8007f66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f68:	4b32      	ldr	r3, [pc, #200]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f6e:	0f1b      	lsrs	r3, r3, #28
 8007f70:	f003 0307 	and.w	r3, r3, #7
 8007f74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	019a      	lsls	r2, r3, #6
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	041b      	lsls	r3, r3, #16
 8007f82:	431a      	orrs	r2, r3
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	061b      	lsls	r3, r3, #24
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	071b      	lsls	r3, r3, #28
 8007f8e:	4929      	ldr	r1, [pc, #164]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0308 	and.w	r3, r3, #8
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d028      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007fa2:	4b24      	ldr	r3, [pc, #144]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa8:	0e1b      	lsrs	r3, r3, #24
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007fb0:	4b20      	ldr	r3, [pc, #128]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb6:	0c1b      	lsrs	r3, r3, #16
 8007fb8:	f003 0303 	and.w	r3, r3, #3
 8007fbc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	019a      	lsls	r2, r3, #6
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	041b      	lsls	r3, r3, #16
 8007fc8:	431a      	orrs	r2, r3
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	061b      	lsls	r3, r3, #24
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	071b      	lsls	r3, r3, #28
 8007fd6:	4917      	ldr	r1, [pc, #92]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007fde:	4b15      	ldr	r3, [pc, #84]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fe4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fec:	4911      	ldr	r1, [pc, #68]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008000:	f7fc fd6a 	bl	8004ad8 <HAL_GetTick>
 8008004:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008006:	e008      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008008:	f7fc fd66 	bl	8004ad8 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b64      	cmp	r3, #100	@ 0x64
 8008014:	d901      	bls.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e007      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800801a:	4b06      	ldr	r3, [pc, #24]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008026:	d1ef      	bne.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3720      	adds	r7, #32
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	40023800 	.word	0x40023800

08008038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e09d      	b.n	8008186 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804e:	2b00      	cmp	r3, #0
 8008050:	d108      	bne.n	8008064 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800805a:	d009      	beq.n	8008070 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	61da      	str	r2, [r3, #28]
 8008062:	e005      	b.n	8008070 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d106      	bne.n	8008090 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7fb fe3c 	bl	8003d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80080b0:	d902      	bls.n	80080b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	e002      	b.n	80080be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80080b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80080bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80080c6:	d007      	beq.n	80080d8 <HAL_SPI_Init+0xa0>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80080d0:	d002      	beq.n	80080d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80080e8:	431a      	orrs	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	431a      	orrs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	431a      	orrs	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008106:	431a      	orrs	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800811a:	ea42 0103 	orr.w	r1, r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008122:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	0c1b      	lsrs	r3, r3, #16
 8008134:	f003 0204 	and.w	r2, r3, #4
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	f003 0310 	and.w	r3, r3, #16
 8008140:	431a      	orrs	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008154:	ea42 0103 	orr.w	r1, r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69da      	ldr	r2, [r3, #28]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008174:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b088      	sub	sp, #32
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	60b9      	str	r1, [r7, #8]
 8008198:	603b      	str	r3, [r7, #0]
 800819a:	4613      	mov	r3, r2
 800819c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d101      	bne.n	80081b0 <HAL_SPI_Transmit+0x22>
 80081ac:	2302      	movs	r3, #2
 80081ae:	e15f      	b.n	8008470 <HAL_SPI_Transmit+0x2e2>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081b8:	f7fc fc8e 	bl	8004ad8 <HAL_GetTick>
 80081bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80081be:	88fb      	ldrh	r3, [r7, #6]
 80081c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d002      	beq.n	80081d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80081ce:	2302      	movs	r3, #2
 80081d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081d2:	e148      	b.n	8008466 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <HAL_SPI_Transmit+0x52>
 80081da:	88fb      	ldrh	r3, [r7, #6]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d102      	bne.n	80081e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081e4:	e13f      	b.n	8008466 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2203      	movs	r2, #3
 80081ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	88fa      	ldrh	r2, [r7, #6]
 80081fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	88fa      	ldrh	r2, [r7, #6]
 8008204:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008230:	d10f      	bne.n	8008252 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008240:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008250:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800825c:	2b40      	cmp	r3, #64	@ 0x40
 800825e:	d007      	beq.n	8008270 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800826e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008278:	d94f      	bls.n	800831a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d002      	beq.n	8008288 <HAL_SPI_Transmit+0xfa>
 8008282:	8afb      	ldrh	r3, [r7, #22]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d142      	bne.n	800830e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828c:	881a      	ldrh	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008298:	1c9a      	adds	r2, r3, #2
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	3b01      	subs	r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80082ac:	e02f      	b.n	800830e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d112      	bne.n	80082e2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c0:	881a      	ldrh	r2, [r3, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082cc:	1c9a      	adds	r2, r3, #2
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	3b01      	subs	r3, #1
 80082da:	b29a      	uxth	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80082e0:	e015      	b.n	800830e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082e2:	f7fc fbf9 	bl	8004ad8 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d803      	bhi.n	80082fa <HAL_SPI_Transmit+0x16c>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f8:	d102      	bne.n	8008300 <HAL_SPI_Transmit+0x172>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d106      	bne.n	800830e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800830c:	e0ab      	b.n	8008466 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1ca      	bne.n	80082ae <HAL_SPI_Transmit+0x120>
 8008318:	e080      	b.n	800841c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <HAL_SPI_Transmit+0x19a>
 8008322:	8afb      	ldrh	r3, [r7, #22]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d174      	bne.n	8008412 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800832c:	b29b      	uxth	r3, r3
 800832e:	2b01      	cmp	r3, #1
 8008330:	d912      	bls.n	8008358 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008336:	881a      	ldrh	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008342:	1c9a      	adds	r2, r3, #2
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800834c:	b29b      	uxth	r3, r3
 800834e:	3b02      	subs	r3, #2
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008356:	e05c      	b.n	8008412 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	330c      	adds	r3, #12
 8008362:	7812      	ldrb	r2, [r2, #0]
 8008364:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008374:	b29b      	uxth	r3, r3
 8008376:	3b01      	subs	r3, #1
 8008378:	b29a      	uxth	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800837e:	e048      	b.n	8008412 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 0302 	and.w	r3, r3, #2
 800838a:	2b02      	cmp	r3, #2
 800838c:	d12b      	bne.n	80083e6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008392:	b29b      	uxth	r3, r3
 8008394:	2b01      	cmp	r3, #1
 8008396:	d912      	bls.n	80083be <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839c:	881a      	ldrh	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a8:	1c9a      	adds	r2, r3, #2
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	3b02      	subs	r3, #2
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80083bc:	e029      	b.n	8008412 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	330c      	adds	r3, #12
 80083c8:	7812      	ldrb	r2, [r2, #0]
 80083ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083da:	b29b      	uxth	r3, r3
 80083dc:	3b01      	subs	r3, #1
 80083de:	b29a      	uxth	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80083e4:	e015      	b.n	8008412 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083e6:	f7fc fb77 	bl	8004ad8 <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d803      	bhi.n	80083fe <HAL_SPI_Transmit+0x270>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d102      	bne.n	8008404 <HAL_SPI_Transmit+0x276>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d106      	bne.n	8008412 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008410:	e029      	b.n	8008466 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008416:	b29b      	uxth	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1b1      	bne.n	8008380 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800841c:	69ba      	ldr	r2, [r7, #24]
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fb77 	bl	8008b14 <SPI_EndRxTxTransaction>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2220      	movs	r2, #32
 8008430:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800843a:	2300      	movs	r3, #0
 800843c:	613b      	str	r3, [r7, #16]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	613b      	str	r3, [r7, #16]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	613b      	str	r3, [r7, #16]
 800844e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	77fb      	strb	r3, [r7, #31]
 800845c:	e003      	b.n	8008466 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800846e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3720      	adds	r7, #32
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	@ 0x28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
 8008484:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008486:	2301      	movs	r3, #1
 8008488:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008496:	2b01      	cmp	r3, #1
 8008498:	d101      	bne.n	800849e <HAL_SPI_TransmitReceive+0x26>
 800849a:	2302      	movs	r3, #2
 800849c:	e20a      	b.n	80088b4 <HAL_SPI_TransmitReceive+0x43c>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084a6:	f7fc fb17 	bl	8004ad8 <HAL_GetTick>
 80084aa:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80084b2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80084ba:	887b      	ldrh	r3, [r7, #2]
 80084bc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80084be:	887b      	ldrh	r3, [r7, #2]
 80084c0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80084c2:	7efb      	ldrb	r3, [r7, #27]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d00e      	beq.n	80084e6 <HAL_SPI_TransmitReceive+0x6e>
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084ce:	d106      	bne.n	80084de <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <HAL_SPI_TransmitReceive+0x66>
 80084d8:	7efb      	ldrb	r3, [r7, #27]
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d003      	beq.n	80084e6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80084de:	2302      	movs	r3, #2
 80084e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80084e4:	e1e0      	b.n	80088a8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d005      	beq.n	80084f8 <HAL_SPI_TransmitReceive+0x80>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <HAL_SPI_TransmitReceive+0x80>
 80084f2:	887b      	ldrh	r3, [r7, #2]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d103      	bne.n	8008500 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80084fe:	e1d3      	b.n	80088a8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b04      	cmp	r3, #4
 800850a:	d003      	beq.n	8008514 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2205      	movs	r2, #5
 8008510:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	887a      	ldrh	r2, [r7, #2]
 8008524:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	887a      	ldrh	r2, [r7, #2]
 800852c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	887a      	ldrh	r2, [r7, #2]
 800853a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	887a      	ldrh	r2, [r7, #2]
 8008540:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008556:	d802      	bhi.n	800855e <HAL_SPI_TransmitReceive+0xe6>
 8008558:	8a3b      	ldrh	r3, [r7, #16]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d908      	bls.n	8008570 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800856c:	605a      	str	r2, [r3, #4]
 800856e:	e007      	b.n	8008580 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685a      	ldr	r2, [r3, #4]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800857e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800858a:	2b40      	cmp	r3, #64	@ 0x40
 800858c:	d007      	beq.n	800859e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800859c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80085a6:	f240 8081 	bls.w	80086ac <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <HAL_SPI_TransmitReceive+0x140>
 80085b2:	8a7b      	ldrh	r3, [r7, #18]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d16d      	bne.n	8008694 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085bc:	881a      	ldrh	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c8:	1c9a      	adds	r2, r3, #2
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	3b01      	subs	r3, #1
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085dc:	e05a      	b.n	8008694 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d11b      	bne.n	8008624 <HAL_SPI_TransmitReceive+0x1ac>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d016      	beq.n	8008624 <HAL_SPI_TransmitReceive+0x1ac>
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d113      	bne.n	8008624 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008600:	881a      	ldrh	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860c:	1c9a      	adds	r2, r3, #2
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008616:	b29b      	uxth	r3, r3
 8008618:	3b01      	subs	r3, #1
 800861a:	b29a      	uxth	r2, r3
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b01      	cmp	r3, #1
 8008630:	d11c      	bne.n	800866c <HAL_SPI_TransmitReceive+0x1f4>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008638:	b29b      	uxth	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d016      	beq.n	800866c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008648:	b292      	uxth	r2, r2
 800864a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008650:	1c9a      	adds	r2, r3, #2
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800865c:	b29b      	uxth	r3, r3
 800865e:	3b01      	subs	r3, #1
 8008660:	b29a      	uxth	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008668:	2301      	movs	r3, #1
 800866a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800866c:	f7fc fa34 	bl	8004ad8 <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008678:	429a      	cmp	r2, r3
 800867a:	d80b      	bhi.n	8008694 <HAL_SPI_TransmitReceive+0x21c>
 800867c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008682:	d007      	beq.n	8008694 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008692:	e109      	b.n	80088a8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008698:	b29b      	uxth	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d19f      	bne.n	80085de <HAL_SPI_TransmitReceive+0x166>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d199      	bne.n	80085de <HAL_SPI_TransmitReceive+0x166>
 80086aa:	e0e3      	b.n	8008874 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d003      	beq.n	80086bc <HAL_SPI_TransmitReceive+0x244>
 80086b4:	8a7b      	ldrh	r3, [r7, #18]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	f040 80cf 	bne.w	800885a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d912      	bls.n	80086ec <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ca:	881a      	ldrh	r2, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d6:	1c9a      	adds	r2, r3, #2
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	3b02      	subs	r3, #2
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80086ea:	e0b6      	b.n	800885a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	330c      	adds	r3, #12
 80086f6:	7812      	ldrb	r2, [r2, #0]
 80086f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008708:	b29b      	uxth	r3, r3
 800870a:	3b01      	subs	r3, #1
 800870c:	b29a      	uxth	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008712:	e0a2      	b.n	800885a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b02      	cmp	r3, #2
 8008720:	d134      	bne.n	800878c <HAL_SPI_TransmitReceive+0x314>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008726:	b29b      	uxth	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	d02f      	beq.n	800878c <HAL_SPI_TransmitReceive+0x314>
 800872c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872e:	2b01      	cmp	r3, #1
 8008730:	d12c      	bne.n	800878c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008736:	b29b      	uxth	r3, r3
 8008738:	2b01      	cmp	r3, #1
 800873a:	d912      	bls.n	8008762 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008740:	881a      	ldrh	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800874c:	1c9a      	adds	r2, r3, #2
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008756:	b29b      	uxth	r3, r3
 8008758:	3b02      	subs	r3, #2
 800875a:	b29a      	uxth	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008760:	e012      	b.n	8008788 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	330c      	adds	r3, #12
 800876c:	7812      	ldrb	r2, [r2, #0]
 800876e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008774:	1c5a      	adds	r2, r3, #1
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800877e:	b29b      	uxth	r3, r3
 8008780:	3b01      	subs	r3, #1
 8008782:	b29a      	uxth	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b01      	cmp	r3, #1
 8008798:	d148      	bne.n	800882c <HAL_SPI_TransmitReceive+0x3b4>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d042      	beq.n	800882c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d923      	bls.n	80087fa <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68da      	ldr	r2, [r3, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087bc:	b292      	uxth	r2, r2
 80087be:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c4:	1c9a      	adds	r2, r3, #2
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	3b02      	subs	r3, #2
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d81f      	bhi.n	8008828 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80087f6:	605a      	str	r2, [r3, #4]
 80087f8:	e016      	b.n	8008828 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f103 020c 	add.w	r2, r3, #12
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008806:	7812      	ldrb	r2, [r2, #0]
 8008808:	b2d2      	uxtb	r2, r2
 800880a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008810:	1c5a      	adds	r2, r3, #1
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800881c:	b29b      	uxth	r3, r3
 800881e:	3b01      	subs	r3, #1
 8008820:	b29a      	uxth	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008828:	2301      	movs	r3, #1
 800882a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800882c:	f7fc f954 	bl	8004ad8 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008838:	429a      	cmp	r2, r3
 800883a:	d803      	bhi.n	8008844 <HAL_SPI_TransmitReceive+0x3cc>
 800883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d102      	bne.n	800884a <HAL_SPI_TransmitReceive+0x3d2>
 8008844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008846:	2b00      	cmp	r3, #0
 8008848:	d107      	bne.n	800885a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008858:	e026      	b.n	80088a8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800885e:	b29b      	uxth	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	f47f af57 	bne.w	8008714 <HAL_SPI_TransmitReceive+0x29c>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	f47f af50 	bne.w	8008714 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008874:	69fa      	ldr	r2, [r7, #28]
 8008876:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 f94b 	bl	8008b14 <SPI_EndRxTxTransaction>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2220      	movs	r2, #32
 800888e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800889e:	e003      	b.n	80088a8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80088b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3728      	adds	r7, #40	@ 0x28
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80088ca:	b2db      	uxtb	r3, r3
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	4613      	mov	r3, r2
 80088e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80088e8:	f7fc f8f6 	bl	8004ad8 <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f0:	1a9b      	subs	r3, r3, r2
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	4413      	add	r3, r2
 80088f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80088f8:	f7fc f8ee 	bl	8004ad8 <HAL_GetTick>
 80088fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80088fe:	4b39      	ldr	r3, [pc, #228]	@ (80089e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	015b      	lsls	r3, r3, #5
 8008904:	0d1b      	lsrs	r3, r3, #20
 8008906:	69fa      	ldr	r2, [r7, #28]
 8008908:	fb02 f303 	mul.w	r3, r2, r3
 800890c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800890e:	e054      	b.n	80089ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008916:	d050      	beq.n	80089ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008918:	f7fc f8de 	bl	8004ad8 <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	69fa      	ldr	r2, [r7, #28]
 8008924:	429a      	cmp	r2, r3
 8008926:	d902      	bls.n	800892e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d13d      	bne.n	80089aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800893c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008946:	d111      	bne.n	800896c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008950:	d004      	beq.n	800895c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800895a:	d107      	bne.n	800896c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800896a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008974:	d10f      	bne.n	8008996 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008994:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e017      	b.n	80089da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	689a      	ldr	r2, [r3, #8]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	4013      	ands	r3, r2
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	bf0c      	ite	eq
 80089ca:	2301      	moveq	r3, #1
 80089cc:	2300      	movne	r3, #0
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	461a      	mov	r2, r3
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d19b      	bne.n	8008910 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3720      	adds	r7, #32
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20000058 	.word	0x20000058

080089e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08a      	sub	sp, #40	@ 0x28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
 80089f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80089fa:	f7fc f86d 	bl	8004ad8 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a02:	1a9b      	subs	r3, r3, r2
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	4413      	add	r3, r2
 8008a08:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008a0a:	f7fc f865 	bl	8004ad8 <HAL_GetTick>
 8008a0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	330c      	adds	r3, #12
 8008a16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a18:	4b3d      	ldr	r3, [pc, #244]	@ (8008b10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	00da      	lsls	r2, r3, #3
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	0d1b      	lsrs	r3, r3, #20
 8008a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a2a:	fb02 f303 	mul.w	r3, r2, r3
 8008a2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008a30:	e060      	b.n	8008af4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008a38:	d107      	bne.n	8008a4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d104      	bne.n	8008a4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a50:	d050      	beq.n	8008af4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a52:	f7fc f841 	bl	8004ad8 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d902      	bls.n	8008a68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d13d      	bne.n	8008ae4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a80:	d111      	bne.n	8008aa6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a8a:	d004      	beq.n	8008a96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a94:	d107      	bne.n	8008aa6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008aa4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aae:	d10f      	bne.n	8008ad0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ace:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e010      	b.n	8008b06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008aea:	2300      	movs	r3, #0
 8008aec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689a      	ldr	r2, [r3, #8]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4013      	ands	r3, r2
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d196      	bne.n	8008a32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3728      	adds	r7, #40	@ 0x28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20000058 	.word	0x20000058

08008b14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f7ff ff5b 	bl	80089e8 <SPI_WaitFifoStateUntilTimeout>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d007      	beq.n	8008b48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b3c:	f043 0220 	orr.w	r2, r3, #32
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e046      	b.n	8008bd6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b48:	4b25      	ldr	r3, [pc, #148]	@ (8008be0 <SPI_EndRxTxTransaction+0xcc>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a25      	ldr	r2, [pc, #148]	@ (8008be4 <SPI_EndRxTxTransaction+0xd0>)
 8008b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b52:	0d5b      	lsrs	r3, r3, #21
 8008b54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008b58:	fb02 f303 	mul.w	r3, r2, r3
 8008b5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b66:	d112      	bne.n	8008b8e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2180      	movs	r1, #128	@ 0x80
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f7ff feb0 	bl	80088d8 <SPI_WaitFlagStateUntilTimeout>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d016      	beq.n	8008bac <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b82:	f043 0220 	orr.w	r2, r3, #32
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e023      	b.n	8008bd6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00a      	beq.n	8008baa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ba4:	2b80      	cmp	r3, #128	@ 0x80
 8008ba6:	d0f2      	beq.n	8008b8e <SPI_EndRxTxTransaction+0x7a>
 8008ba8:	e000      	b.n	8008bac <SPI_EndRxTxTransaction+0x98>
        break;
 8008baa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f7ff ff15 	bl	80089e8 <SPI_WaitFifoStateUntilTimeout>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d007      	beq.n	8008bd4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bc8:	f043 0220 	orr.w	r2, r3, #32
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e000      	b.n	8008bd6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20000058 	.word	0x20000058
 8008be4:	165e9f81 	.word	0x165e9f81

08008be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e049      	b.n	8008c8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d106      	bne.n	8008c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7fb fd3e 	bl	8004690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3304      	adds	r3, #4
 8008c24:	4619      	mov	r1, r3
 8008c26:	4610      	mov	r0, r2
 8008c28:	f000 fd18 	bl	800965c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d001      	beq.n	8008cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e054      	b.n	8008d5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f042 0201 	orr.w	r2, r2, #1
 8008cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a26      	ldr	r2, [pc, #152]	@ (8008d68 <HAL_TIM_Base_Start_IT+0xd0>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d022      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x80>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cda:	d01d      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x80>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a22      	ldr	r2, [pc, #136]	@ (8008d6c <HAL_TIM_Base_Start_IT+0xd4>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d018      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x80>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a21      	ldr	r2, [pc, #132]	@ (8008d70 <HAL_TIM_Base_Start_IT+0xd8>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d013      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x80>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8008d74 <HAL_TIM_Base_Start_IT+0xdc>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d00e      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x80>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8008d78 <HAL_TIM_Base_Start_IT+0xe0>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d009      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x80>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a1c      	ldr	r2, [pc, #112]	@ (8008d7c <HAL_TIM_Base_Start_IT+0xe4>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d004      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x80>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a1b      	ldr	r2, [pc, #108]	@ (8008d80 <HAL_TIM_Base_Start_IT+0xe8>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d115      	bne.n	8008d44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	4b19      	ldr	r3, [pc, #100]	@ (8008d84 <HAL_TIM_Base_Start_IT+0xec>)
 8008d20:	4013      	ands	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b06      	cmp	r3, #6
 8008d28:	d015      	beq.n	8008d56 <HAL_TIM_Base_Start_IT+0xbe>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d30:	d011      	beq.n	8008d56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f042 0201 	orr.w	r2, r2, #1
 8008d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d42:	e008      	b.n	8008d56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f042 0201 	orr.w	r2, r2, #1
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	e000      	b.n	8008d58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	40010000 	.word	0x40010000
 8008d6c:	40000400 	.word	0x40000400
 8008d70:	40000800 	.word	0x40000800
 8008d74:	40000c00 	.word	0x40000c00
 8008d78:	40010400 	.word	0x40010400
 8008d7c:	40014000 	.word	0x40014000
 8008d80:	40001800 	.word	0x40001800
 8008d84:	00010007 	.word	0x00010007

08008d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e049      	b.n	8008e2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d106      	bne.n	8008db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f841 	bl	8008e36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f000 fc48 	bl	800965c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b083      	sub	sp, #12
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e3e:	bf00      	nop
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
	...

08008e4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d109      	bne.n	8008e70 <HAL_TIM_PWM_Start+0x24>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	bf14      	ite	ne
 8008e68:	2301      	movne	r3, #1
 8008e6a:	2300      	moveq	r3, #0
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	e03c      	b.n	8008eea <HAL_TIM_PWM_Start+0x9e>
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d109      	bne.n	8008e8a <HAL_TIM_PWM_Start+0x3e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	bf14      	ite	ne
 8008e82:	2301      	movne	r3, #1
 8008e84:	2300      	moveq	r3, #0
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	e02f      	b.n	8008eea <HAL_TIM_PWM_Start+0x9e>
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d109      	bne.n	8008ea4 <HAL_TIM_PWM_Start+0x58>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	bf14      	ite	ne
 8008e9c:	2301      	movne	r3, #1
 8008e9e:	2300      	moveq	r3, #0
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	e022      	b.n	8008eea <HAL_TIM_PWM_Start+0x9e>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2b0c      	cmp	r3, #12
 8008ea8:	d109      	bne.n	8008ebe <HAL_TIM_PWM_Start+0x72>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	bf14      	ite	ne
 8008eb6:	2301      	movne	r3, #1
 8008eb8:	2300      	moveq	r3, #0
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	e015      	b.n	8008eea <HAL_TIM_PWM_Start+0x9e>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b10      	cmp	r3, #16
 8008ec2:	d109      	bne.n	8008ed8 <HAL_TIM_PWM_Start+0x8c>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	bf14      	ite	ne
 8008ed0:	2301      	movne	r3, #1
 8008ed2:	2300      	moveq	r3, #0
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	e008      	b.n	8008eea <HAL_TIM_PWM_Start+0x9e>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	bf14      	ite	ne
 8008ee4:	2301      	movne	r3, #1
 8008ee6:	2300      	moveq	r3, #0
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e092      	b.n	8009018 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d104      	bne.n	8008f02 <HAL_TIM_PWM_Start+0xb6>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f00:	e023      	b.n	8008f4a <HAL_TIM_PWM_Start+0xfe>
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d104      	bne.n	8008f12 <HAL_TIM_PWM_Start+0xc6>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f10:	e01b      	b.n	8008f4a <HAL_TIM_PWM_Start+0xfe>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b08      	cmp	r3, #8
 8008f16:	d104      	bne.n	8008f22 <HAL_TIM_PWM_Start+0xd6>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f20:	e013      	b.n	8008f4a <HAL_TIM_PWM_Start+0xfe>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2b0c      	cmp	r3, #12
 8008f26:	d104      	bne.n	8008f32 <HAL_TIM_PWM_Start+0xe6>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f30:	e00b      	b.n	8008f4a <HAL_TIM_PWM_Start+0xfe>
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b10      	cmp	r3, #16
 8008f36:	d104      	bne.n	8008f42 <HAL_TIM_PWM_Start+0xf6>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f40:	e003      	b.n	8008f4a <HAL_TIM_PWM_Start+0xfe>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2202      	movs	r2, #2
 8008f46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 ff26 	bl	8009da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a30      	ldr	r2, [pc, #192]	@ (8009020 <HAL_TIM_PWM_Start+0x1d4>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d004      	beq.n	8008f6c <HAL_TIM_PWM_Start+0x120>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a2f      	ldr	r2, [pc, #188]	@ (8009024 <HAL_TIM_PWM_Start+0x1d8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d101      	bne.n	8008f70 <HAL_TIM_PWM_Start+0x124>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e000      	b.n	8008f72 <HAL_TIM_PWM_Start+0x126>
 8008f70:	2300      	movs	r3, #0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d007      	beq.n	8008f86 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a25      	ldr	r2, [pc, #148]	@ (8009020 <HAL_TIM_PWM_Start+0x1d4>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d022      	beq.n	8008fd6 <HAL_TIM_PWM_Start+0x18a>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f98:	d01d      	beq.n	8008fd6 <HAL_TIM_PWM_Start+0x18a>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a22      	ldr	r2, [pc, #136]	@ (8009028 <HAL_TIM_PWM_Start+0x1dc>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d018      	beq.n	8008fd6 <HAL_TIM_PWM_Start+0x18a>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a20      	ldr	r2, [pc, #128]	@ (800902c <HAL_TIM_PWM_Start+0x1e0>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d013      	beq.n	8008fd6 <HAL_TIM_PWM_Start+0x18a>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8009030 <HAL_TIM_PWM_Start+0x1e4>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d00e      	beq.n	8008fd6 <HAL_TIM_PWM_Start+0x18a>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a19      	ldr	r2, [pc, #100]	@ (8009024 <HAL_TIM_PWM_Start+0x1d8>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d009      	beq.n	8008fd6 <HAL_TIM_PWM_Start+0x18a>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8009034 <HAL_TIM_PWM_Start+0x1e8>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d004      	beq.n	8008fd6 <HAL_TIM_PWM_Start+0x18a>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a19      	ldr	r2, [pc, #100]	@ (8009038 <HAL_TIM_PWM_Start+0x1ec>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d115      	bne.n	8009002 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	4b17      	ldr	r3, [pc, #92]	@ (800903c <HAL_TIM_PWM_Start+0x1f0>)
 8008fde:	4013      	ands	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2b06      	cmp	r3, #6
 8008fe6:	d015      	beq.n	8009014 <HAL_TIM_PWM_Start+0x1c8>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fee:	d011      	beq.n	8009014 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f042 0201 	orr.w	r2, r2, #1
 8008ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009000:	e008      	b.n	8009014 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f042 0201 	orr.w	r2, r2, #1
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	e000      	b.n	8009016 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009014:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	40010000 	.word	0x40010000
 8009024:	40010400 	.word	0x40010400
 8009028:	40000400 	.word	0x40000400
 800902c:	40000800 	.word	0x40000800
 8009030:	40000c00 	.word	0x40000c00
 8009034:	40014000 	.word	0x40014000
 8009038:	40001800 	.word	0x40001800
 800903c:	00010007 	.word	0x00010007

08009040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f003 0302 	and.w	r3, r3, #2
 800905e:	2b00      	cmp	r3, #0
 8009060:	d020      	beq.n	80090a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f003 0302 	and.w	r3, r3, #2
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01b      	beq.n	80090a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f06f 0202 	mvn.w	r2, #2
 8009074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	f003 0303 	and.w	r3, r3, #3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fac8 	bl	8009620 <HAL_TIM_IC_CaptureCallback>
 8009090:	e005      	b.n	800909e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 faba 	bl	800960c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 facb 	bl	8009634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d020      	beq.n	80090f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01b      	beq.n	80090f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f06f 0204 	mvn.w	r2, #4
 80090c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2202      	movs	r2, #2
 80090c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 faa2 	bl	8009620 <HAL_TIM_IC_CaptureCallback>
 80090dc:	e005      	b.n	80090ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa94 	bl	800960c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 faa5 	bl	8009634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f003 0308 	and.w	r3, r3, #8
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d020      	beq.n	800913c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f003 0308 	and.w	r3, r3, #8
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01b      	beq.n	800913c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f06f 0208 	mvn.w	r2, #8
 800910c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2204      	movs	r2, #4
 8009112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	f003 0303 	and.w	r3, r3, #3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fa7c 	bl	8009620 <HAL_TIM_IC_CaptureCallback>
 8009128:	e005      	b.n	8009136 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fa6e 	bl	800960c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fa7f 	bl	8009634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f003 0310 	and.w	r3, r3, #16
 8009142:	2b00      	cmp	r3, #0
 8009144:	d020      	beq.n	8009188 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f003 0310 	and.w	r3, r3, #16
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01b      	beq.n	8009188 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f06f 0210 	mvn.w	r2, #16
 8009158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2208      	movs	r2, #8
 800915e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fa56 	bl	8009620 <HAL_TIM_IC_CaptureCallback>
 8009174:	e005      	b.n	8009182 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fa48 	bl	800960c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fa59 	bl	8009634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00c      	beq.n	80091ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f06f 0201 	mvn.w	r2, #1
 80091a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7fa f8ec 	bl	8003384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d104      	bne.n	80091c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00c      	beq.n	80091da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d007      	beq.n	80091da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80091d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fea3 	bl	8009f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00c      	beq.n	80091fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80091f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fe9b 	bl	8009f34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00c      	beq.n	8009222 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800920e:	2b00      	cmp	r3, #0
 8009210:	d007      	beq.n	8009222 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800921a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fa13 	bl	8009648 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	f003 0320 	and.w	r3, r3, #32
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00c      	beq.n	8009246 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f003 0320 	and.w	r3, r3, #32
 8009232:	2b00      	cmp	r3, #0
 8009234:	d007      	beq.n	8009246 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f06f 0220 	mvn.w	r2, #32
 800923e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fe63 	bl	8009f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009246:	bf00      	nop
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800926a:	2302      	movs	r3, #2
 800926c:	e0ff      	b.n	800946e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b14      	cmp	r3, #20
 800927a:	f200 80f0 	bhi.w	800945e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800927e:	a201      	add	r2, pc, #4	@ (adr r2, 8009284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009284:	080092d9 	.word	0x080092d9
 8009288:	0800945f 	.word	0x0800945f
 800928c:	0800945f 	.word	0x0800945f
 8009290:	0800945f 	.word	0x0800945f
 8009294:	08009319 	.word	0x08009319
 8009298:	0800945f 	.word	0x0800945f
 800929c:	0800945f 	.word	0x0800945f
 80092a0:	0800945f 	.word	0x0800945f
 80092a4:	0800935b 	.word	0x0800935b
 80092a8:	0800945f 	.word	0x0800945f
 80092ac:	0800945f 	.word	0x0800945f
 80092b0:	0800945f 	.word	0x0800945f
 80092b4:	0800939b 	.word	0x0800939b
 80092b8:	0800945f 	.word	0x0800945f
 80092bc:	0800945f 	.word	0x0800945f
 80092c0:	0800945f 	.word	0x0800945f
 80092c4:	080093dd 	.word	0x080093dd
 80092c8:	0800945f 	.word	0x0800945f
 80092cc:	0800945f 	.word	0x0800945f
 80092d0:	0800945f 	.word	0x0800945f
 80092d4:	0800941d 	.word	0x0800941d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68b9      	ldr	r1, [r7, #8]
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fa68 	bl	80097b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	699a      	ldr	r2, [r3, #24]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f042 0208 	orr.w	r2, r2, #8
 80092f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	699a      	ldr	r2, [r3, #24]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f022 0204 	bic.w	r2, r2, #4
 8009302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6999      	ldr	r1, [r3, #24]
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	691a      	ldr	r2, [r3, #16]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	619a      	str	r2, [r3, #24]
      break;
 8009316:	e0a5      	b.n	8009464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68b9      	ldr	r1, [r7, #8]
 800931e:	4618      	mov	r0, r3
 8009320:	f000 faba 	bl	8009898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	699a      	ldr	r2, [r3, #24]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	699a      	ldr	r2, [r3, #24]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6999      	ldr	r1, [r3, #24]
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	021a      	lsls	r2, r3, #8
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	619a      	str	r2, [r3, #24]
      break;
 8009358:	e084      	b.n	8009464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fb11 	bl	8009988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	69da      	ldr	r2, [r3, #28]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f042 0208 	orr.w	r2, r2, #8
 8009374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	69da      	ldr	r2, [r3, #28]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f022 0204 	bic.w	r2, r2, #4
 8009384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	69d9      	ldr	r1, [r3, #28]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	691a      	ldr	r2, [r3, #16]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	430a      	orrs	r2, r1
 8009396:	61da      	str	r2, [r3, #28]
      break;
 8009398:	e064      	b.n	8009464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68b9      	ldr	r1, [r7, #8]
 80093a0:	4618      	mov	r0, r3
 80093a2:	f000 fb67 	bl	8009a74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	69da      	ldr	r2, [r3, #28]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	69da      	ldr	r2, [r3, #28]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	69d9      	ldr	r1, [r3, #28]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	021a      	lsls	r2, r3, #8
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	61da      	str	r2, [r3, #28]
      break;
 80093da:	e043      	b.n	8009464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68b9      	ldr	r1, [r7, #8]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 fb9e 	bl	8009b24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f042 0208 	orr.w	r2, r2, #8
 80093f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 0204 	bic.w	r2, r2, #4
 8009406:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	691a      	ldr	r2, [r3, #16]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800941a:	e023      	b.n	8009464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68b9      	ldr	r1, [r7, #8]
 8009422:	4618      	mov	r0, r3
 8009424:	f000 fbd0 	bl	8009bc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009436:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009446:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	021a      	lsls	r2, r3, #8
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	430a      	orrs	r2, r1
 800945a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800945c:	e002      	b.n	8009464 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	75fb      	strb	r3, [r7, #23]
      break;
 8009462:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800946c:	7dfb      	ldrb	r3, [r7, #23]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop

08009478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800948c:	2b01      	cmp	r3, #1
 800948e:	d101      	bne.n	8009494 <HAL_TIM_ConfigClockSource+0x1c>
 8009490:	2302      	movs	r3, #2
 8009492:	e0b4      	b.n	80095fe <HAL_TIM_ConfigClockSource+0x186>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2202      	movs	r2, #2
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	4b56      	ldr	r3, [pc, #344]	@ (8009608 <HAL_TIM_ConfigClockSource+0x190>)
 80094b0:	4013      	ands	r3, r2
 80094b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094cc:	d03e      	beq.n	800954c <HAL_TIM_ConfigClockSource+0xd4>
 80094ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094d2:	f200 8087 	bhi.w	80095e4 <HAL_TIM_ConfigClockSource+0x16c>
 80094d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094da:	f000 8086 	beq.w	80095ea <HAL_TIM_ConfigClockSource+0x172>
 80094de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094e2:	d87f      	bhi.n	80095e4 <HAL_TIM_ConfigClockSource+0x16c>
 80094e4:	2b70      	cmp	r3, #112	@ 0x70
 80094e6:	d01a      	beq.n	800951e <HAL_TIM_ConfigClockSource+0xa6>
 80094e8:	2b70      	cmp	r3, #112	@ 0x70
 80094ea:	d87b      	bhi.n	80095e4 <HAL_TIM_ConfigClockSource+0x16c>
 80094ec:	2b60      	cmp	r3, #96	@ 0x60
 80094ee:	d050      	beq.n	8009592 <HAL_TIM_ConfigClockSource+0x11a>
 80094f0:	2b60      	cmp	r3, #96	@ 0x60
 80094f2:	d877      	bhi.n	80095e4 <HAL_TIM_ConfigClockSource+0x16c>
 80094f4:	2b50      	cmp	r3, #80	@ 0x50
 80094f6:	d03c      	beq.n	8009572 <HAL_TIM_ConfigClockSource+0xfa>
 80094f8:	2b50      	cmp	r3, #80	@ 0x50
 80094fa:	d873      	bhi.n	80095e4 <HAL_TIM_ConfigClockSource+0x16c>
 80094fc:	2b40      	cmp	r3, #64	@ 0x40
 80094fe:	d058      	beq.n	80095b2 <HAL_TIM_ConfigClockSource+0x13a>
 8009500:	2b40      	cmp	r3, #64	@ 0x40
 8009502:	d86f      	bhi.n	80095e4 <HAL_TIM_ConfigClockSource+0x16c>
 8009504:	2b30      	cmp	r3, #48	@ 0x30
 8009506:	d064      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x15a>
 8009508:	2b30      	cmp	r3, #48	@ 0x30
 800950a:	d86b      	bhi.n	80095e4 <HAL_TIM_ConfigClockSource+0x16c>
 800950c:	2b20      	cmp	r3, #32
 800950e:	d060      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x15a>
 8009510:	2b20      	cmp	r3, #32
 8009512:	d867      	bhi.n	80095e4 <HAL_TIM_ConfigClockSource+0x16c>
 8009514:	2b00      	cmp	r3, #0
 8009516:	d05c      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x15a>
 8009518:	2b10      	cmp	r3, #16
 800951a:	d05a      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x15a>
 800951c:	e062      	b.n	80095e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800952e:	f000 fc19 	bl	8009d64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009540:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	609a      	str	r2, [r3, #8]
      break;
 800954a:	e04f      	b.n	80095ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800955c:	f000 fc02 	bl	8009d64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689a      	ldr	r2, [r3, #8]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800956e:	609a      	str	r2, [r3, #8]
      break;
 8009570:	e03c      	b.n	80095ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800957e:	461a      	mov	r2, r3
 8009580:	f000 fb76 	bl	8009c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2150      	movs	r1, #80	@ 0x50
 800958a:	4618      	mov	r0, r3
 800958c:	f000 fbcf 	bl	8009d2e <TIM_ITRx_SetConfig>
      break;
 8009590:	e02c      	b.n	80095ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800959e:	461a      	mov	r2, r3
 80095a0:	f000 fb95 	bl	8009cce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2160      	movs	r1, #96	@ 0x60
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 fbbf 	bl	8009d2e <TIM_ITRx_SetConfig>
      break;
 80095b0:	e01c      	b.n	80095ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095be:	461a      	mov	r2, r3
 80095c0:	f000 fb56 	bl	8009c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2140      	movs	r1, #64	@ 0x40
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 fbaf 	bl	8009d2e <TIM_ITRx_SetConfig>
      break;
 80095d0:	e00c      	b.n	80095ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4619      	mov	r1, r3
 80095dc:	4610      	mov	r0, r2
 80095de:	f000 fba6 	bl	8009d2e <TIM_ITRx_SetConfig>
      break;
 80095e2:	e003      	b.n	80095ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	73fb      	strb	r3, [r7, #15]
      break;
 80095e8:	e000      	b.n	80095ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80095ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	fffeff88 	.word	0xfffeff88

0800960c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a46      	ldr	r2, [pc, #280]	@ (8009788 <TIM_Base_SetConfig+0x12c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d013      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800967a:	d00f      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a43      	ldr	r2, [pc, #268]	@ (800978c <TIM_Base_SetConfig+0x130>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d00b      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a42      	ldr	r2, [pc, #264]	@ (8009790 <TIM_Base_SetConfig+0x134>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d007      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a41      	ldr	r2, [pc, #260]	@ (8009794 <TIM_Base_SetConfig+0x138>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d003      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a40      	ldr	r2, [pc, #256]	@ (8009798 <TIM_Base_SetConfig+0x13c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d108      	bne.n	80096ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a35      	ldr	r2, [pc, #212]	@ (8009788 <TIM_Base_SetConfig+0x12c>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d02b      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096bc:	d027      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a32      	ldr	r2, [pc, #200]	@ (800978c <TIM_Base_SetConfig+0x130>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d023      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a31      	ldr	r2, [pc, #196]	@ (8009790 <TIM_Base_SetConfig+0x134>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d01f      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a30      	ldr	r2, [pc, #192]	@ (8009794 <TIM_Base_SetConfig+0x138>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d01b      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a2f      	ldr	r2, [pc, #188]	@ (8009798 <TIM_Base_SetConfig+0x13c>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d017      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a2e      	ldr	r2, [pc, #184]	@ (800979c <TIM_Base_SetConfig+0x140>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d013      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a2d      	ldr	r2, [pc, #180]	@ (80097a0 <TIM_Base_SetConfig+0x144>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d00f      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a2c      	ldr	r2, [pc, #176]	@ (80097a4 <TIM_Base_SetConfig+0x148>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d00b      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a2b      	ldr	r2, [pc, #172]	@ (80097a8 <TIM_Base_SetConfig+0x14c>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d007      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a2a      	ldr	r2, [pc, #168]	@ (80097ac <TIM_Base_SetConfig+0x150>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d003      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a29      	ldr	r2, [pc, #164]	@ (80097b0 <TIM_Base_SetConfig+0x154>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d108      	bne.n	8009720 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	4313      	orrs	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	689a      	ldr	r2, [r3, #8]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a10      	ldr	r2, [pc, #64]	@ (8009788 <TIM_Base_SetConfig+0x12c>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d003      	beq.n	8009754 <TIM_Base_SetConfig+0xf8>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a12      	ldr	r2, [pc, #72]	@ (8009798 <TIM_Base_SetConfig+0x13c>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d103      	bne.n	800975c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	691a      	ldr	r2, [r3, #16]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	2b01      	cmp	r3, #1
 800976c:	d105      	bne.n	800977a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	f023 0201 	bic.w	r2, r3, #1
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	611a      	str	r2, [r3, #16]
  }
}
 800977a:	bf00      	nop
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	40010000 	.word	0x40010000
 800978c:	40000400 	.word	0x40000400
 8009790:	40000800 	.word	0x40000800
 8009794:	40000c00 	.word	0x40000c00
 8009798:	40010400 	.word	0x40010400
 800979c:	40014000 	.word	0x40014000
 80097a0:	40014400 	.word	0x40014400
 80097a4:	40014800 	.word	0x40014800
 80097a8:	40001800 	.word	0x40001800
 80097ac:	40001c00 	.word	0x40001c00
 80097b0:	40002000 	.word	0x40002000

080097b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a1b      	ldr	r3, [r3, #32]
 80097c8:	f023 0201 	bic.w	r2, r3, #1
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	4b2b      	ldr	r3, [pc, #172]	@ (800988c <TIM_OC1_SetConfig+0xd8>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f023 0303 	bic.w	r3, r3, #3
 80097ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f023 0302 	bic.w	r3, r3, #2
 80097fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	4313      	orrs	r3, r2
 8009806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a21      	ldr	r2, [pc, #132]	@ (8009890 <TIM_OC1_SetConfig+0xdc>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d003      	beq.n	8009818 <TIM_OC1_SetConfig+0x64>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a20      	ldr	r2, [pc, #128]	@ (8009894 <TIM_OC1_SetConfig+0xe0>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d10c      	bne.n	8009832 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	f023 0308 	bic.w	r3, r3, #8
 800981e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	4313      	orrs	r3, r2
 8009828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f023 0304 	bic.w	r3, r3, #4
 8009830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a16      	ldr	r2, [pc, #88]	@ (8009890 <TIM_OC1_SetConfig+0xdc>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d003      	beq.n	8009842 <TIM_OC1_SetConfig+0x8e>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a15      	ldr	r2, [pc, #84]	@ (8009894 <TIM_OC1_SetConfig+0xe0>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d111      	bne.n	8009866 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	4313      	orrs	r3, r2
 800985a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	4313      	orrs	r3, r2
 8009864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	621a      	str	r2, [r3, #32]
}
 8009880:	bf00      	nop
 8009882:	371c      	adds	r7, #28
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	fffeff8f 	.word	0xfffeff8f
 8009890:	40010000 	.word	0x40010000
 8009894:	40010400 	.word	0x40010400

08009898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	f023 0210 	bic.w	r2, r3, #16
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	4b2e      	ldr	r3, [pc, #184]	@ (800997c <TIM_OC2_SetConfig+0xe4>)
 80098c4:	4013      	ands	r3, r2
 80098c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	021b      	lsls	r3, r3, #8
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f023 0320 	bic.w	r3, r3, #32
 80098e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a23      	ldr	r2, [pc, #140]	@ (8009980 <TIM_OC2_SetConfig+0xe8>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d003      	beq.n	8009900 <TIM_OC2_SetConfig+0x68>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a22      	ldr	r2, [pc, #136]	@ (8009984 <TIM_OC2_SetConfig+0xec>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d10d      	bne.n	800991c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	4313      	orrs	r3, r2
 8009912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800991a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a18      	ldr	r2, [pc, #96]	@ (8009980 <TIM_OC2_SetConfig+0xe8>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d003      	beq.n	800992c <TIM_OC2_SetConfig+0x94>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a17      	ldr	r2, [pc, #92]	@ (8009984 <TIM_OC2_SetConfig+0xec>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d113      	bne.n	8009954 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800993a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	4313      	orrs	r3, r2
 8009946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	4313      	orrs	r3, r2
 8009952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	621a      	str	r2, [r3, #32]
}
 800996e:	bf00      	nop
 8009970:	371c      	adds	r7, #28
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	feff8fff 	.word	0xfeff8fff
 8009980:	40010000 	.word	0x40010000
 8009984:	40010400 	.word	0x40010400

08009988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009988:	b480      	push	{r7}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	69db      	ldr	r3, [r3, #28]
 80099ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	4b2d      	ldr	r3, [pc, #180]	@ (8009a68 <TIM_OC3_SetConfig+0xe0>)
 80099b4:	4013      	ands	r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f023 0303 	bic.w	r3, r3, #3
 80099be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80099d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	021b      	lsls	r3, r3, #8
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	4313      	orrs	r3, r2
 80099dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a22      	ldr	r2, [pc, #136]	@ (8009a6c <TIM_OC3_SetConfig+0xe4>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d003      	beq.n	80099ee <TIM_OC3_SetConfig+0x66>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a21      	ldr	r2, [pc, #132]	@ (8009a70 <TIM_OC3_SetConfig+0xe8>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d10d      	bne.n	8009a0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80099f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	021b      	lsls	r3, r3, #8
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a17      	ldr	r2, [pc, #92]	@ (8009a6c <TIM_OC3_SetConfig+0xe4>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d003      	beq.n	8009a1a <TIM_OC3_SetConfig+0x92>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a16      	ldr	r2, [pc, #88]	@ (8009a70 <TIM_OC3_SetConfig+0xe8>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d113      	bne.n	8009a42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	011b      	lsls	r3, r3, #4
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	011b      	lsls	r3, r3, #4
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	693a      	ldr	r2, [r7, #16]
 8009a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	621a      	str	r2, [r3, #32]
}
 8009a5c:	bf00      	nop
 8009a5e:	371c      	adds	r7, #28
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	fffeff8f 	.word	0xfffeff8f
 8009a6c:	40010000 	.word	0x40010000
 8009a70:	40010400 	.word	0x40010400

08009a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a1b      	ldr	r3, [r3, #32]
 8009a88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	69db      	ldr	r3, [r3, #28]
 8009a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009b18 <TIM_OC4_SetConfig+0xa4>)
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	021b      	lsls	r3, r3, #8
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	031b      	lsls	r3, r3, #12
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a13      	ldr	r2, [pc, #76]	@ (8009b1c <TIM_OC4_SetConfig+0xa8>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d003      	beq.n	8009adc <TIM_OC4_SetConfig+0x68>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a12      	ldr	r2, [pc, #72]	@ (8009b20 <TIM_OC4_SetConfig+0xac>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d109      	bne.n	8009af0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	019b      	lsls	r3, r3, #6
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	4313      	orrs	r3, r2
 8009aee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	685a      	ldr	r2, [r3, #4]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	621a      	str	r2, [r3, #32]
}
 8009b0a:	bf00      	nop
 8009b0c:	371c      	adds	r7, #28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	feff8fff 	.word	0xfeff8fff
 8009b1c:	40010000 	.word	0x40010000
 8009b20:	40010400 	.word	0x40010400

08009b24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a1b      	ldr	r3, [r3, #32]
 8009b38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8009bbc <TIM_OC5_SetConfig+0x98>)
 8009b50:	4013      	ands	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009b64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	041b      	lsls	r3, r3, #16
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a12      	ldr	r2, [pc, #72]	@ (8009bc0 <TIM_OC5_SetConfig+0x9c>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d003      	beq.n	8009b82 <TIM_OC5_SetConfig+0x5e>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a11      	ldr	r2, [pc, #68]	@ (8009bc4 <TIM_OC5_SetConfig+0xa0>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d109      	bne.n	8009b96 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	021b      	lsls	r3, r3, #8
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	621a      	str	r2, [r3, #32]
}
 8009bb0:	bf00      	nop
 8009bb2:	371c      	adds	r7, #28
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	fffeff8f 	.word	0xfffeff8f
 8009bc0:	40010000 	.word	0x40010000
 8009bc4:	40010400 	.word	0x40010400

08009bc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a1b      	ldr	r3, [r3, #32]
 8009bd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8009c64 <TIM_OC6_SetConfig+0x9c>)
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	021b      	lsls	r3, r3, #8
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	051b      	lsls	r3, r3, #20
 8009c12:	693a      	ldr	r2, [r7, #16]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a13      	ldr	r2, [pc, #76]	@ (8009c68 <TIM_OC6_SetConfig+0xa0>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d003      	beq.n	8009c28 <TIM_OC6_SetConfig+0x60>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a12      	ldr	r2, [pc, #72]	@ (8009c6c <TIM_OC6_SetConfig+0xa4>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d109      	bne.n	8009c3c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	029b      	lsls	r3, r3, #10
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	621a      	str	r2, [r3, #32]
}
 8009c56:	bf00      	nop
 8009c58:	371c      	adds	r7, #28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	feff8fff 	.word	0xfeff8fff
 8009c68:	40010000 	.word	0x40010000
 8009c6c:	40010400 	.word	0x40010400

08009c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
 8009c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	f023 0201 	bic.w	r2, r3, #1
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	011b      	lsls	r3, r3, #4
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f023 030a 	bic.w	r3, r3, #10
 8009cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	621a      	str	r2, [r3, #32]
}
 8009cc2:	bf00      	nop
 8009cc4:	371c      	adds	r7, #28
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b087      	sub	sp, #28
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	f023 0210 	bic.w	r2, r3, #16
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	699b      	ldr	r3, [r3, #24]
 8009cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	031b      	lsls	r3, r3, #12
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009d0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	011b      	lsls	r3, r3, #4
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	693a      	ldr	r2, [r7, #16]
 8009d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	621a      	str	r2, [r3, #32]
}
 8009d22:	bf00      	nop
 8009d24:	371c      	adds	r7, #28
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b085      	sub	sp, #20
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	f043 0307 	orr.w	r3, r3, #7
 8009d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	609a      	str	r2, [r3, #8]
}
 8009d58:	bf00      	nop
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b087      	sub	sp, #28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	021a      	lsls	r2, r3, #8
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	431a      	orrs	r2, r3
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	609a      	str	r2, [r3, #8]
}
 8009d98:	bf00      	nop
 8009d9a:	371c      	adds	r7, #28
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	f003 031f 	and.w	r3, r3, #31
 8009db6:	2201      	movs	r2, #1
 8009db8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6a1a      	ldr	r2, [r3, #32]
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	43db      	mvns	r3, r3
 8009dc6:	401a      	ands	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6a1a      	ldr	r2, [r3, #32]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	f003 031f 	and.w	r3, r3, #31
 8009dd6:	6879      	ldr	r1, [r7, #4]
 8009dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	621a      	str	r2, [r3, #32]
}
 8009de2:	bf00      	nop
 8009de4:	371c      	adds	r7, #28
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
	...

08009df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d101      	bne.n	8009e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e04:	2302      	movs	r3, #2
 8009e06:	e06d      	b.n	8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2202      	movs	r2, #2
 8009e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a30      	ldr	r2, [pc, #192]	@ (8009ef0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d004      	beq.n	8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a2f      	ldr	r2, [pc, #188]	@ (8009ef4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d108      	bne.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a20      	ldr	r2, [pc, #128]	@ (8009ef0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d022      	beq.n	8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e7a:	d01d      	beq.n	8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a1d      	ldr	r2, [pc, #116]	@ (8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d018      	beq.n	8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8009efc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d013      	beq.n	8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a1a      	ldr	r2, [pc, #104]	@ (8009f00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d00e      	beq.n	8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a15      	ldr	r2, [pc, #84]	@ (8009ef4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d009      	beq.n	8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a16      	ldr	r2, [pc, #88]	@ (8009f04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d004      	beq.n	8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a15      	ldr	r2, [pc, #84]	@ (8009f08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d10c      	bne.n	8009ed2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ebe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3714      	adds	r7, #20
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	40010000 	.word	0x40010000
 8009ef4:	40010400 	.word	0x40010400
 8009ef8:	40000400 	.word	0x40000400
 8009efc:	40000800 	.word	0x40000800
 8009f00:	40000c00 	.word	0x40000c00
 8009f04:	40014000 	.word	0x40014000
 8009f08:	40001800 	.word	0x40001800

08009f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e040      	b.n	8009fdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d106      	bne.n	8009f70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7fa fc32 	bl	80047d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2224      	movs	r2, #36	@ 0x24
 8009f74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f022 0201 	bic.w	r2, r2, #1
 8009f84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d002      	beq.n	8009f94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fb16 	bl	800a5c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f8af 	bl	800a0f8 <UART_SetConfig>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d101      	bne.n	8009fa4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e01b      	b.n	8009fdc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009fb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689a      	ldr	r2, [r3, #8]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009fc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f042 0201 	orr.w	r2, r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fb95 	bl	800a704 <UART_CheckIdleState>
 8009fda:	4603      	mov	r3, r0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08a      	sub	sp, #40	@ 0x28
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	603b      	str	r3, [r7, #0]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ff8:	2b20      	cmp	r3, #32
 8009ffa:	d177      	bne.n	800a0ec <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d002      	beq.n	800a008 <HAL_UART_Transmit+0x24>
 800a002:	88fb      	ldrh	r3, [r7, #6]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	e070      	b.n	800a0ee <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2221      	movs	r2, #33	@ 0x21
 800a018:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a01a:	f7fa fd5d 	bl	8004ad8 <HAL_GetTick>
 800a01e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	88fa      	ldrh	r2, [r7, #6]
 800a024:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	88fa      	ldrh	r2, [r7, #6]
 800a02c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a038:	d108      	bne.n	800a04c <HAL_UART_Transmit+0x68>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d104      	bne.n	800a04c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a042:	2300      	movs	r3, #0
 800a044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	61bb      	str	r3, [r7, #24]
 800a04a:	e003      	b.n	800a054 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a050:	2300      	movs	r3, #0
 800a052:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a054:	e02f      	b.n	800a0b6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2200      	movs	r2, #0
 800a05e:	2180      	movs	r1, #128	@ 0x80
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f000 fba6 	bl	800a7b2 <UART_WaitOnFlagUntilTimeout>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d004      	beq.n	800a076 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2220      	movs	r2, #32
 800a070:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e03b      	b.n	800a0ee <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10b      	bne.n	800a094 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	881b      	ldrh	r3, [r3, #0]
 800a080:	461a      	mov	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a08a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	3302      	adds	r3, #2
 800a090:	61bb      	str	r3, [r7, #24]
 800a092:	e007      	b.n	800a0a4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	781a      	ldrb	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1c9      	bne.n	800a056 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2140      	movs	r1, #64	@ 0x40
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 fb70 	bl	800a7b2 <UART_WaitOnFlagUntilTimeout>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d004      	beq.n	800a0e2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2220      	movs	r2, #32
 800a0dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e005      	b.n	800a0ee <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2220      	movs	r2, #32
 800a0e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	e000      	b.n	800a0ee <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a0ec:	2302      	movs	r3, #2
  }
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3720      	adds	r7, #32
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b088      	sub	sp, #32
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	689a      	ldr	r2, [r3, #8]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	431a      	orrs	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	431a      	orrs	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	69db      	ldr	r3, [r3, #28]
 800a118:	4313      	orrs	r3, r2
 800a11a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	4ba6      	ldr	r3, [pc, #664]	@ (800a3bc <UART_SetConfig+0x2c4>)
 800a124:	4013      	ands	r3, r2
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	6812      	ldr	r2, [r2, #0]
 800a12a:	6979      	ldr	r1, [r7, #20]
 800a12c:	430b      	orrs	r3, r1
 800a12e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68da      	ldr	r2, [r3, #12]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a1b      	ldr	r3, [r3, #32]
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	4313      	orrs	r3, r2
 800a154:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	697a      	ldr	r2, [r7, #20]
 800a166:	430a      	orrs	r2, r1
 800a168:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a94      	ldr	r2, [pc, #592]	@ (800a3c0 <UART_SetConfig+0x2c8>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d120      	bne.n	800a1b6 <UART_SetConfig+0xbe>
 800a174:	4b93      	ldr	r3, [pc, #588]	@ (800a3c4 <UART_SetConfig+0x2cc>)
 800a176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a17a:	f003 0303 	and.w	r3, r3, #3
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d816      	bhi.n	800a1b0 <UART_SetConfig+0xb8>
 800a182:	a201      	add	r2, pc, #4	@ (adr r2, 800a188 <UART_SetConfig+0x90>)
 800a184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a188:	0800a199 	.word	0x0800a199
 800a18c:	0800a1a5 	.word	0x0800a1a5
 800a190:	0800a19f 	.word	0x0800a19f
 800a194:	0800a1ab 	.word	0x0800a1ab
 800a198:	2301      	movs	r3, #1
 800a19a:	77fb      	strb	r3, [r7, #31]
 800a19c:	e150      	b.n	800a440 <UART_SetConfig+0x348>
 800a19e:	2302      	movs	r3, #2
 800a1a0:	77fb      	strb	r3, [r7, #31]
 800a1a2:	e14d      	b.n	800a440 <UART_SetConfig+0x348>
 800a1a4:	2304      	movs	r3, #4
 800a1a6:	77fb      	strb	r3, [r7, #31]
 800a1a8:	e14a      	b.n	800a440 <UART_SetConfig+0x348>
 800a1aa:	2308      	movs	r3, #8
 800a1ac:	77fb      	strb	r3, [r7, #31]
 800a1ae:	e147      	b.n	800a440 <UART_SetConfig+0x348>
 800a1b0:	2310      	movs	r3, #16
 800a1b2:	77fb      	strb	r3, [r7, #31]
 800a1b4:	e144      	b.n	800a440 <UART_SetConfig+0x348>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a83      	ldr	r2, [pc, #524]	@ (800a3c8 <UART_SetConfig+0x2d0>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d132      	bne.n	800a226 <UART_SetConfig+0x12e>
 800a1c0:	4b80      	ldr	r3, [pc, #512]	@ (800a3c4 <UART_SetConfig+0x2cc>)
 800a1c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1c6:	f003 030c 	and.w	r3, r3, #12
 800a1ca:	2b0c      	cmp	r3, #12
 800a1cc:	d828      	bhi.n	800a220 <UART_SetConfig+0x128>
 800a1ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d4 <UART_SetConfig+0xdc>)
 800a1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d4:	0800a209 	.word	0x0800a209
 800a1d8:	0800a221 	.word	0x0800a221
 800a1dc:	0800a221 	.word	0x0800a221
 800a1e0:	0800a221 	.word	0x0800a221
 800a1e4:	0800a215 	.word	0x0800a215
 800a1e8:	0800a221 	.word	0x0800a221
 800a1ec:	0800a221 	.word	0x0800a221
 800a1f0:	0800a221 	.word	0x0800a221
 800a1f4:	0800a20f 	.word	0x0800a20f
 800a1f8:	0800a221 	.word	0x0800a221
 800a1fc:	0800a221 	.word	0x0800a221
 800a200:	0800a221 	.word	0x0800a221
 800a204:	0800a21b 	.word	0x0800a21b
 800a208:	2300      	movs	r3, #0
 800a20a:	77fb      	strb	r3, [r7, #31]
 800a20c:	e118      	b.n	800a440 <UART_SetConfig+0x348>
 800a20e:	2302      	movs	r3, #2
 800a210:	77fb      	strb	r3, [r7, #31]
 800a212:	e115      	b.n	800a440 <UART_SetConfig+0x348>
 800a214:	2304      	movs	r3, #4
 800a216:	77fb      	strb	r3, [r7, #31]
 800a218:	e112      	b.n	800a440 <UART_SetConfig+0x348>
 800a21a:	2308      	movs	r3, #8
 800a21c:	77fb      	strb	r3, [r7, #31]
 800a21e:	e10f      	b.n	800a440 <UART_SetConfig+0x348>
 800a220:	2310      	movs	r3, #16
 800a222:	77fb      	strb	r3, [r7, #31]
 800a224:	e10c      	b.n	800a440 <UART_SetConfig+0x348>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a68      	ldr	r2, [pc, #416]	@ (800a3cc <UART_SetConfig+0x2d4>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d120      	bne.n	800a272 <UART_SetConfig+0x17a>
 800a230:	4b64      	ldr	r3, [pc, #400]	@ (800a3c4 <UART_SetConfig+0x2cc>)
 800a232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a236:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a23a:	2b30      	cmp	r3, #48	@ 0x30
 800a23c:	d013      	beq.n	800a266 <UART_SetConfig+0x16e>
 800a23e:	2b30      	cmp	r3, #48	@ 0x30
 800a240:	d814      	bhi.n	800a26c <UART_SetConfig+0x174>
 800a242:	2b20      	cmp	r3, #32
 800a244:	d009      	beq.n	800a25a <UART_SetConfig+0x162>
 800a246:	2b20      	cmp	r3, #32
 800a248:	d810      	bhi.n	800a26c <UART_SetConfig+0x174>
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <UART_SetConfig+0x15c>
 800a24e:	2b10      	cmp	r3, #16
 800a250:	d006      	beq.n	800a260 <UART_SetConfig+0x168>
 800a252:	e00b      	b.n	800a26c <UART_SetConfig+0x174>
 800a254:	2300      	movs	r3, #0
 800a256:	77fb      	strb	r3, [r7, #31]
 800a258:	e0f2      	b.n	800a440 <UART_SetConfig+0x348>
 800a25a:	2302      	movs	r3, #2
 800a25c:	77fb      	strb	r3, [r7, #31]
 800a25e:	e0ef      	b.n	800a440 <UART_SetConfig+0x348>
 800a260:	2304      	movs	r3, #4
 800a262:	77fb      	strb	r3, [r7, #31]
 800a264:	e0ec      	b.n	800a440 <UART_SetConfig+0x348>
 800a266:	2308      	movs	r3, #8
 800a268:	77fb      	strb	r3, [r7, #31]
 800a26a:	e0e9      	b.n	800a440 <UART_SetConfig+0x348>
 800a26c:	2310      	movs	r3, #16
 800a26e:	77fb      	strb	r3, [r7, #31]
 800a270:	e0e6      	b.n	800a440 <UART_SetConfig+0x348>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a56      	ldr	r2, [pc, #344]	@ (800a3d0 <UART_SetConfig+0x2d8>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d120      	bne.n	800a2be <UART_SetConfig+0x1c6>
 800a27c:	4b51      	ldr	r3, [pc, #324]	@ (800a3c4 <UART_SetConfig+0x2cc>)
 800a27e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a282:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a286:	2bc0      	cmp	r3, #192	@ 0xc0
 800a288:	d013      	beq.n	800a2b2 <UART_SetConfig+0x1ba>
 800a28a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a28c:	d814      	bhi.n	800a2b8 <UART_SetConfig+0x1c0>
 800a28e:	2b80      	cmp	r3, #128	@ 0x80
 800a290:	d009      	beq.n	800a2a6 <UART_SetConfig+0x1ae>
 800a292:	2b80      	cmp	r3, #128	@ 0x80
 800a294:	d810      	bhi.n	800a2b8 <UART_SetConfig+0x1c0>
 800a296:	2b00      	cmp	r3, #0
 800a298:	d002      	beq.n	800a2a0 <UART_SetConfig+0x1a8>
 800a29a:	2b40      	cmp	r3, #64	@ 0x40
 800a29c:	d006      	beq.n	800a2ac <UART_SetConfig+0x1b4>
 800a29e:	e00b      	b.n	800a2b8 <UART_SetConfig+0x1c0>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	77fb      	strb	r3, [r7, #31]
 800a2a4:	e0cc      	b.n	800a440 <UART_SetConfig+0x348>
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	77fb      	strb	r3, [r7, #31]
 800a2aa:	e0c9      	b.n	800a440 <UART_SetConfig+0x348>
 800a2ac:	2304      	movs	r3, #4
 800a2ae:	77fb      	strb	r3, [r7, #31]
 800a2b0:	e0c6      	b.n	800a440 <UART_SetConfig+0x348>
 800a2b2:	2308      	movs	r3, #8
 800a2b4:	77fb      	strb	r3, [r7, #31]
 800a2b6:	e0c3      	b.n	800a440 <UART_SetConfig+0x348>
 800a2b8:	2310      	movs	r3, #16
 800a2ba:	77fb      	strb	r3, [r7, #31]
 800a2bc:	e0c0      	b.n	800a440 <UART_SetConfig+0x348>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a44      	ldr	r2, [pc, #272]	@ (800a3d4 <UART_SetConfig+0x2dc>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d125      	bne.n	800a314 <UART_SetConfig+0x21c>
 800a2c8:	4b3e      	ldr	r3, [pc, #248]	@ (800a3c4 <UART_SetConfig+0x2cc>)
 800a2ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2d6:	d017      	beq.n	800a308 <UART_SetConfig+0x210>
 800a2d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2dc:	d817      	bhi.n	800a30e <UART_SetConfig+0x216>
 800a2de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2e2:	d00b      	beq.n	800a2fc <UART_SetConfig+0x204>
 800a2e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2e8:	d811      	bhi.n	800a30e <UART_SetConfig+0x216>
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d003      	beq.n	800a2f6 <UART_SetConfig+0x1fe>
 800a2ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2f2:	d006      	beq.n	800a302 <UART_SetConfig+0x20a>
 800a2f4:	e00b      	b.n	800a30e <UART_SetConfig+0x216>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	77fb      	strb	r3, [r7, #31]
 800a2fa:	e0a1      	b.n	800a440 <UART_SetConfig+0x348>
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	77fb      	strb	r3, [r7, #31]
 800a300:	e09e      	b.n	800a440 <UART_SetConfig+0x348>
 800a302:	2304      	movs	r3, #4
 800a304:	77fb      	strb	r3, [r7, #31]
 800a306:	e09b      	b.n	800a440 <UART_SetConfig+0x348>
 800a308:	2308      	movs	r3, #8
 800a30a:	77fb      	strb	r3, [r7, #31]
 800a30c:	e098      	b.n	800a440 <UART_SetConfig+0x348>
 800a30e:	2310      	movs	r3, #16
 800a310:	77fb      	strb	r3, [r7, #31]
 800a312:	e095      	b.n	800a440 <UART_SetConfig+0x348>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a2f      	ldr	r2, [pc, #188]	@ (800a3d8 <UART_SetConfig+0x2e0>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d125      	bne.n	800a36a <UART_SetConfig+0x272>
 800a31e:	4b29      	ldr	r3, [pc, #164]	@ (800a3c4 <UART_SetConfig+0x2cc>)
 800a320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a324:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a328:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a32c:	d017      	beq.n	800a35e <UART_SetConfig+0x266>
 800a32e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a332:	d817      	bhi.n	800a364 <UART_SetConfig+0x26c>
 800a334:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a338:	d00b      	beq.n	800a352 <UART_SetConfig+0x25a>
 800a33a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a33e:	d811      	bhi.n	800a364 <UART_SetConfig+0x26c>
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <UART_SetConfig+0x254>
 800a344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a348:	d006      	beq.n	800a358 <UART_SetConfig+0x260>
 800a34a:	e00b      	b.n	800a364 <UART_SetConfig+0x26c>
 800a34c:	2301      	movs	r3, #1
 800a34e:	77fb      	strb	r3, [r7, #31]
 800a350:	e076      	b.n	800a440 <UART_SetConfig+0x348>
 800a352:	2302      	movs	r3, #2
 800a354:	77fb      	strb	r3, [r7, #31]
 800a356:	e073      	b.n	800a440 <UART_SetConfig+0x348>
 800a358:	2304      	movs	r3, #4
 800a35a:	77fb      	strb	r3, [r7, #31]
 800a35c:	e070      	b.n	800a440 <UART_SetConfig+0x348>
 800a35e:	2308      	movs	r3, #8
 800a360:	77fb      	strb	r3, [r7, #31]
 800a362:	e06d      	b.n	800a440 <UART_SetConfig+0x348>
 800a364:	2310      	movs	r3, #16
 800a366:	77fb      	strb	r3, [r7, #31]
 800a368:	e06a      	b.n	800a440 <UART_SetConfig+0x348>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a1b      	ldr	r2, [pc, #108]	@ (800a3dc <UART_SetConfig+0x2e4>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d138      	bne.n	800a3e6 <UART_SetConfig+0x2ee>
 800a374:	4b13      	ldr	r3, [pc, #76]	@ (800a3c4 <UART_SetConfig+0x2cc>)
 800a376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a37a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a37e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a382:	d017      	beq.n	800a3b4 <UART_SetConfig+0x2bc>
 800a384:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a388:	d82a      	bhi.n	800a3e0 <UART_SetConfig+0x2e8>
 800a38a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a38e:	d00b      	beq.n	800a3a8 <UART_SetConfig+0x2b0>
 800a390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a394:	d824      	bhi.n	800a3e0 <UART_SetConfig+0x2e8>
 800a396:	2b00      	cmp	r3, #0
 800a398:	d003      	beq.n	800a3a2 <UART_SetConfig+0x2aa>
 800a39a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a39e:	d006      	beq.n	800a3ae <UART_SetConfig+0x2b6>
 800a3a0:	e01e      	b.n	800a3e0 <UART_SetConfig+0x2e8>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	77fb      	strb	r3, [r7, #31]
 800a3a6:	e04b      	b.n	800a440 <UART_SetConfig+0x348>
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	77fb      	strb	r3, [r7, #31]
 800a3ac:	e048      	b.n	800a440 <UART_SetConfig+0x348>
 800a3ae:	2304      	movs	r3, #4
 800a3b0:	77fb      	strb	r3, [r7, #31]
 800a3b2:	e045      	b.n	800a440 <UART_SetConfig+0x348>
 800a3b4:	2308      	movs	r3, #8
 800a3b6:	77fb      	strb	r3, [r7, #31]
 800a3b8:	e042      	b.n	800a440 <UART_SetConfig+0x348>
 800a3ba:	bf00      	nop
 800a3bc:	efff69f3 	.word	0xefff69f3
 800a3c0:	40011000 	.word	0x40011000
 800a3c4:	40023800 	.word	0x40023800
 800a3c8:	40004400 	.word	0x40004400
 800a3cc:	40004800 	.word	0x40004800
 800a3d0:	40004c00 	.word	0x40004c00
 800a3d4:	40005000 	.word	0x40005000
 800a3d8:	40011400 	.word	0x40011400
 800a3dc:	40007800 	.word	0x40007800
 800a3e0:	2310      	movs	r3, #16
 800a3e2:	77fb      	strb	r3, [r7, #31]
 800a3e4:	e02c      	b.n	800a440 <UART_SetConfig+0x348>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a72      	ldr	r2, [pc, #456]	@ (800a5b4 <UART_SetConfig+0x4bc>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d125      	bne.n	800a43c <UART_SetConfig+0x344>
 800a3f0:	4b71      	ldr	r3, [pc, #452]	@ (800a5b8 <UART_SetConfig+0x4c0>)
 800a3f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a3fa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a3fe:	d017      	beq.n	800a430 <UART_SetConfig+0x338>
 800a400:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a404:	d817      	bhi.n	800a436 <UART_SetConfig+0x33e>
 800a406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a40a:	d00b      	beq.n	800a424 <UART_SetConfig+0x32c>
 800a40c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a410:	d811      	bhi.n	800a436 <UART_SetConfig+0x33e>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d003      	beq.n	800a41e <UART_SetConfig+0x326>
 800a416:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a41a:	d006      	beq.n	800a42a <UART_SetConfig+0x332>
 800a41c:	e00b      	b.n	800a436 <UART_SetConfig+0x33e>
 800a41e:	2300      	movs	r3, #0
 800a420:	77fb      	strb	r3, [r7, #31]
 800a422:	e00d      	b.n	800a440 <UART_SetConfig+0x348>
 800a424:	2302      	movs	r3, #2
 800a426:	77fb      	strb	r3, [r7, #31]
 800a428:	e00a      	b.n	800a440 <UART_SetConfig+0x348>
 800a42a:	2304      	movs	r3, #4
 800a42c:	77fb      	strb	r3, [r7, #31]
 800a42e:	e007      	b.n	800a440 <UART_SetConfig+0x348>
 800a430:	2308      	movs	r3, #8
 800a432:	77fb      	strb	r3, [r7, #31]
 800a434:	e004      	b.n	800a440 <UART_SetConfig+0x348>
 800a436:	2310      	movs	r3, #16
 800a438:	77fb      	strb	r3, [r7, #31]
 800a43a:	e001      	b.n	800a440 <UART_SetConfig+0x348>
 800a43c:	2310      	movs	r3, #16
 800a43e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	69db      	ldr	r3, [r3, #28]
 800a444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a448:	d15b      	bne.n	800a502 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a44a:	7ffb      	ldrb	r3, [r7, #31]
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d828      	bhi.n	800a4a2 <UART_SetConfig+0x3aa>
 800a450:	a201      	add	r2, pc, #4	@ (adr r2, 800a458 <UART_SetConfig+0x360>)
 800a452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a456:	bf00      	nop
 800a458:	0800a47d 	.word	0x0800a47d
 800a45c:	0800a485 	.word	0x0800a485
 800a460:	0800a48d 	.word	0x0800a48d
 800a464:	0800a4a3 	.word	0x0800a4a3
 800a468:	0800a493 	.word	0x0800a493
 800a46c:	0800a4a3 	.word	0x0800a4a3
 800a470:	0800a4a3 	.word	0x0800a4a3
 800a474:	0800a4a3 	.word	0x0800a4a3
 800a478:	0800a49b 	.word	0x0800a49b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a47c:	f7fd f9c4 	bl	8007808 <HAL_RCC_GetPCLK1Freq>
 800a480:	61b8      	str	r0, [r7, #24]
        break;
 800a482:	e013      	b.n	800a4ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a484:	f7fd f9d4 	bl	8007830 <HAL_RCC_GetPCLK2Freq>
 800a488:	61b8      	str	r0, [r7, #24]
        break;
 800a48a:	e00f      	b.n	800a4ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a48c:	4b4b      	ldr	r3, [pc, #300]	@ (800a5bc <UART_SetConfig+0x4c4>)
 800a48e:	61bb      	str	r3, [r7, #24]
        break;
 800a490:	e00c      	b.n	800a4ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a492:	f7fd f8a7 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 800a496:	61b8      	str	r0, [r7, #24]
        break;
 800a498:	e008      	b.n	800a4ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a49a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a49e:	61bb      	str	r3, [r7, #24]
        break;
 800a4a0:	e004      	b.n	800a4ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	77bb      	strb	r3, [r7, #30]
        break;
 800a4aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d074      	beq.n	800a59c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	005a      	lsls	r2, r3, #1
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	085b      	lsrs	r3, r3, #1
 800a4bc:	441a      	add	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	2b0f      	cmp	r3, #15
 800a4cc:	d916      	bls.n	800a4fc <UART_SetConfig+0x404>
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4d4:	d212      	bcs.n	800a4fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	f023 030f 	bic.w	r3, r3, #15
 800a4de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	085b      	lsrs	r3, r3, #1
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	f003 0307 	and.w	r3, r3, #7
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	89fb      	ldrh	r3, [r7, #14]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	89fa      	ldrh	r2, [r7, #14]
 800a4f8:	60da      	str	r2, [r3, #12]
 800a4fa:	e04f      	b.n	800a59c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	77bb      	strb	r3, [r7, #30]
 800a500:	e04c      	b.n	800a59c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a502:	7ffb      	ldrb	r3, [r7, #31]
 800a504:	2b08      	cmp	r3, #8
 800a506:	d828      	bhi.n	800a55a <UART_SetConfig+0x462>
 800a508:	a201      	add	r2, pc, #4	@ (adr r2, 800a510 <UART_SetConfig+0x418>)
 800a50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50e:	bf00      	nop
 800a510:	0800a535 	.word	0x0800a535
 800a514:	0800a53d 	.word	0x0800a53d
 800a518:	0800a545 	.word	0x0800a545
 800a51c:	0800a55b 	.word	0x0800a55b
 800a520:	0800a54b 	.word	0x0800a54b
 800a524:	0800a55b 	.word	0x0800a55b
 800a528:	0800a55b 	.word	0x0800a55b
 800a52c:	0800a55b 	.word	0x0800a55b
 800a530:	0800a553 	.word	0x0800a553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a534:	f7fd f968 	bl	8007808 <HAL_RCC_GetPCLK1Freq>
 800a538:	61b8      	str	r0, [r7, #24]
        break;
 800a53a:	e013      	b.n	800a564 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a53c:	f7fd f978 	bl	8007830 <HAL_RCC_GetPCLK2Freq>
 800a540:	61b8      	str	r0, [r7, #24]
        break;
 800a542:	e00f      	b.n	800a564 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a544:	4b1d      	ldr	r3, [pc, #116]	@ (800a5bc <UART_SetConfig+0x4c4>)
 800a546:	61bb      	str	r3, [r7, #24]
        break;
 800a548:	e00c      	b.n	800a564 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a54a:	f7fd f84b 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 800a54e:	61b8      	str	r0, [r7, #24]
        break;
 800a550:	e008      	b.n	800a564 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a556:	61bb      	str	r3, [r7, #24]
        break;
 800a558:	e004      	b.n	800a564 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	77bb      	strb	r3, [r7, #30]
        break;
 800a562:	bf00      	nop
    }

    if (pclk != 0U)
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d018      	beq.n	800a59c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	085a      	lsrs	r2, r3, #1
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	441a      	add	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	fbb2 f3f3 	udiv	r3, r2, r3
 800a57c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	2b0f      	cmp	r3, #15
 800a582:	d909      	bls.n	800a598 <UART_SetConfig+0x4a0>
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a58a:	d205      	bcs.n	800a598 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	b29a      	uxth	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	60da      	str	r2, [r3, #12]
 800a596:	e001      	b.n	800a59c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a5a8:	7fbb      	ldrb	r3, [r7, #30]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3720      	adds	r7, #32
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	40007c00 	.word	0x40007c00
 800a5b8:	40023800 	.word	0x40023800
 800a5bc:	00f42400 	.word	0x00f42400

0800a5c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5cc:	f003 0308 	and.w	r3, r3, #8
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00a      	beq.n	800a5ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ee:	f003 0301 	and.w	r3, r3, #1
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00a      	beq.n	800a60c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	430a      	orrs	r2, r1
 800a60a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a610:	f003 0302 	and.w	r3, r3, #2
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00a      	beq.n	800a62e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a632:	f003 0304 	and.w	r3, r3, #4
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00a      	beq.n	800a650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	430a      	orrs	r2, r1
 800a64e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a654:	f003 0310 	and.w	r3, r3, #16
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00a      	beq.n	800a672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	430a      	orrs	r2, r1
 800a670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a676:	f003 0320 	and.w	r3, r3, #32
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00a      	beq.n	800a694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	430a      	orrs	r2, r1
 800a692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d01a      	beq.n	800a6d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6be:	d10a      	bne.n	800a6d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00a      	beq.n	800a6f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	430a      	orrs	r2, r1
 800a6f6:	605a      	str	r2, [r3, #4]
  }
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b08c      	sub	sp, #48	@ 0x30
 800a708:	af02      	add	r7, sp, #8
 800a70a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a714:	f7fa f9e0 	bl	8004ad8 <HAL_GetTick>
 800a718:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0308 	and.w	r3, r3, #8
 800a724:	2b08      	cmp	r3, #8
 800a726:	d12e      	bne.n	800a786 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a728:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a730:	2200      	movs	r2, #0
 800a732:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f83b 	bl	800a7b2 <UART_WaitOnFlagUntilTimeout>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d021      	beq.n	800a786 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	e853 3f00 	ldrex	r3, [r3]
 800a74e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a756:	623b      	str	r3, [r7, #32]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	461a      	mov	r2, r3
 800a75e:	6a3b      	ldr	r3, [r7, #32]
 800a760:	61fb      	str	r3, [r7, #28]
 800a762:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a764:	69b9      	ldr	r1, [r7, #24]
 800a766:	69fa      	ldr	r2, [r7, #28]
 800a768:	e841 2300 	strex	r3, r2, [r1]
 800a76c:	617b      	str	r3, [r7, #20]
   return(result);
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1e6      	bne.n	800a742 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2220      	movs	r2, #32
 800a778:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e011      	b.n	800a7aa <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2220      	movs	r2, #32
 800a78a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2220      	movs	r2, #32
 800a790:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3728      	adds	r7, #40	@ 0x28
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	60b9      	str	r1, [r7, #8]
 800a7bc:	603b      	str	r3, [r7, #0]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7c2:	e04f      	b.n	800a864 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ca:	d04b      	beq.n	800a864 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7cc:	f7fa f984 	bl	8004ad8 <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	69ba      	ldr	r2, [r7, #24]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d302      	bcc.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	e04e      	b.n	800a884 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d037      	beq.n	800a864 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2b80      	cmp	r3, #128	@ 0x80
 800a7f8:	d034      	beq.n	800a864 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	2b40      	cmp	r3, #64	@ 0x40
 800a7fe:	d031      	beq.n	800a864 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	69db      	ldr	r3, [r3, #28]
 800a806:	f003 0308 	and.w	r3, r3, #8
 800a80a:	2b08      	cmp	r3, #8
 800a80c:	d110      	bne.n	800a830 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2208      	movs	r2, #8
 800a814:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f000 f838 	bl	800a88c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2208      	movs	r2, #8
 800a820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e029      	b.n	800a884 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	69db      	ldr	r3, [r3, #28]
 800a836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a83a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a83e:	d111      	bne.n	800a864 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a848:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f000 f81e 	bl	800a88c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2220      	movs	r2, #32
 800a854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a860:	2303      	movs	r3, #3
 800a862:	e00f      	b.n	800a884 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	69da      	ldr	r2, [r3, #28]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	4013      	ands	r3, r2
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	429a      	cmp	r2, r3
 800a872:	bf0c      	ite	eq
 800a874:	2301      	moveq	r3, #1
 800a876:	2300      	movne	r3, #0
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	461a      	mov	r2, r3
 800a87c:	79fb      	ldrb	r3, [r7, #7]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d0a0      	beq.n	800a7c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b095      	sub	sp, #84	@ 0x54
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a89c:	e853 3f00 	ldrex	r3, [r3]
 800a8a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8ba:	e841 2300 	strex	r3, r2, [r1]
 800a8be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1e6      	bne.n	800a894 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3308      	adds	r3, #8
 800a8cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	e853 3f00 	ldrex	r3, [r3]
 800a8d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	f023 0301 	bic.w	r3, r3, #1
 800a8dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a8e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e5      	bne.n	800a8c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d118      	bne.n	800a934 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	e853 3f00 	ldrex	r3, [r3]
 800a90e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	f023 0310 	bic.w	r3, r3, #16
 800a916:	647b      	str	r3, [r7, #68]	@ 0x44
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	461a      	mov	r2, r3
 800a91e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a920:	61bb      	str	r3, [r7, #24]
 800a922:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a924:	6979      	ldr	r1, [r7, #20]
 800a926:	69ba      	ldr	r2, [r7, #24]
 800a928:	e841 2300 	strex	r3, r2, [r1]
 800a92c:	613b      	str	r3, [r7, #16]
   return(result);
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1e6      	bne.n	800a902 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2220      	movs	r2, #32
 800a938:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a948:	bf00      	nop
 800a94a:	3754      	adds	r7, #84	@ 0x54
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a954:	b084      	sub	sp, #16
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	f107 001c 	add.w	r0, r7, #28
 800a962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a966:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d121      	bne.n	800a9b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a972:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	68da      	ldr	r2, [r3, #12]
 800a97e:	4b21      	ldr	r3, [pc, #132]	@ (800aa04 <USB_CoreInit+0xb0>)
 800a980:	4013      	ands	r3, r2
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a992:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a996:	2b01      	cmp	r3, #1
 800a998:	d105      	bne.n	800a9a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fa92 	bl	800aed0 <USB_CoreReset>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]
 800a9b0:	e010      	b.n	800a9d4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fa86 	bl	800aed0 <USB_CoreReset>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800a9d4:	7fbb      	ldrb	r3, [r7, #30]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d10b      	bne.n	800a9f2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	f043 0206 	orr.w	r2, r3, #6
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	f043 0220 	orr.w	r2, r3, #32
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9fe:	b004      	add	sp, #16
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	ffbdffbf 	.word	0xffbdffbf

0800aa08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f023 0201 	bic.w	r2, r3, #1
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b084      	sub	sp, #16
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	460b      	mov	r3, r1
 800aa34:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aa36:	2300      	movs	r3, #0
 800aa38:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aa46:	78fb      	ldrb	r3, [r7, #3]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d115      	bne.n	800aa78 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aa58:	200a      	movs	r0, #10
 800aa5a:	f7fa f849 	bl	8004af0 <HAL_Delay>
      ms += 10U;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	330a      	adds	r3, #10
 800aa62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fa25 	bl	800aeb4 <USB_GetMode>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d01e      	beq.n	800aaae <USB_SetCurrentMode+0x84>
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2bc7      	cmp	r3, #199	@ 0xc7
 800aa74:	d9f0      	bls.n	800aa58 <USB_SetCurrentMode+0x2e>
 800aa76:	e01a      	b.n	800aaae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa78:	78fb      	ldrb	r3, [r7, #3]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d115      	bne.n	800aaaa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aa8a:	200a      	movs	r0, #10
 800aa8c:	f7fa f830 	bl	8004af0 <HAL_Delay>
      ms += 10U;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	330a      	adds	r3, #10
 800aa94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fa0c 	bl	800aeb4 <USB_GetMode>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d005      	beq.n	800aaae <USB_SetCurrentMode+0x84>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2bc7      	cmp	r3, #199	@ 0xc7
 800aaa6:	d9f0      	bls.n	800aa8a <USB_SetCurrentMode+0x60>
 800aaa8:	e001      	b.n	800aaae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e005      	b.n	800aaba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2bc8      	cmp	r3, #200	@ 0xc8
 800aab2:	d101      	bne.n	800aab8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e000      	b.n	800aaba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
	...

0800aac4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aac4:	b084      	sub	sp, #16
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b086      	sub	sp, #24
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800aad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aade:	2300      	movs	r3, #0
 800aae0:	613b      	str	r3, [r7, #16]
 800aae2:	e009      	b.n	800aaf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	3340      	adds	r3, #64	@ 0x40
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	2200      	movs	r2, #0
 800aaf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	613b      	str	r3, [r7, #16]
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	2b0e      	cmp	r3, #14
 800aafc:	d9f2      	bls.n	800aae4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aafe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d11c      	bne.n	800ab40 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab14:	f043 0302 	orr.w	r3, r3, #2
 800ab18:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab1e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	601a      	str	r2, [r3, #0]
 800ab3e:	e005      	b.n	800ab4c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab52:	461a      	mov	r2, r3
 800ab54:	2300      	movs	r3, #0
 800ab56:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d10d      	bne.n	800ab7c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ab60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d104      	bne.n	800ab72 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ab68:	2100      	movs	r1, #0
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f968 	bl	800ae40 <USB_SetDevSpeed>
 800ab70:	e008      	b.n	800ab84 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ab72:	2101      	movs	r1, #1
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f963 	bl	800ae40 <USB_SetDevSpeed>
 800ab7a:	e003      	b.n	800ab84 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ab7c:	2103      	movs	r1, #3
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f95e 	bl	800ae40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab84:	2110      	movs	r1, #16
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f8fa 	bl	800ad80 <USB_FlushTxFifo>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800ab92:	2301      	movs	r3, #1
 800ab94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f924 	bl	800ade4 <USB_FlushRxFifo>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d001      	beq.n	800aba6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abac:	461a      	mov	r2, r3
 800abae:	2300      	movs	r3, #0
 800abb0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abb8:	461a      	mov	r2, r3
 800abba:	2300      	movs	r3, #0
 800abbc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abc4:	461a      	mov	r2, r3
 800abc6:	2300      	movs	r3, #0
 800abc8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abca:	2300      	movs	r3, #0
 800abcc:	613b      	str	r3, [r7, #16]
 800abce:	e043      	b.n	800ac58 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	015a      	lsls	r2, r3, #5
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	4413      	add	r3, r2
 800abd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800abe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800abe6:	d118      	bne.n	800ac1a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10a      	bne.n	800ac04 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	015a      	lsls	r2, r3, #5
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	4413      	add	r3, r2
 800abf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abfa:	461a      	mov	r2, r3
 800abfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ac00:	6013      	str	r3, [r2, #0]
 800ac02:	e013      	b.n	800ac2c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac10:	461a      	mov	r2, r3
 800ac12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ac16:	6013      	str	r3, [r2, #0]
 800ac18:	e008      	b.n	800ac2c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	015a      	lsls	r2, r3, #5
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	4413      	add	r3, r2
 800ac22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac26:	461a      	mov	r2, r3
 800ac28:	2300      	movs	r3, #0
 800ac2a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	015a      	lsls	r2, r3, #5
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	4413      	add	r3, r2
 800ac34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac38:	461a      	mov	r2, r3
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	015a      	lsls	r2, r3, #5
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	4413      	add	r3, r2
 800ac46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ac50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	3301      	adds	r3, #1
 800ac56:	613b      	str	r3, [r7, #16]
 800ac58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d3b5      	bcc.n	800abd0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac64:	2300      	movs	r3, #0
 800ac66:	613b      	str	r3, [r7, #16]
 800ac68:	e043      	b.n	800acf2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	015a      	lsls	r2, r3, #5
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	4413      	add	r3, r2
 800ac72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac80:	d118      	bne.n	800acb4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	015a      	lsls	r2, r3, #5
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	4413      	add	r3, r2
 800ac90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac94:	461a      	mov	r2, r3
 800ac96:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ac9a:	6013      	str	r3, [r2, #0]
 800ac9c:	e013      	b.n	800acc6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acaa:	461a      	mov	r2, r3
 800acac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800acb0:	6013      	str	r3, [r2, #0]
 800acb2:	e008      	b.n	800acc6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	015a      	lsls	r2, r3, #5
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	4413      	add	r3, r2
 800acbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acc0:	461a      	mov	r2, r3
 800acc2:	2300      	movs	r3, #0
 800acc4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acd2:	461a      	mov	r2, r3
 800acd4:	2300      	movs	r3, #0
 800acd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	015a      	lsls	r2, r3, #5
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4413      	add	r3, r2
 800ace0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ace4:	461a      	mov	r2, r3
 800ace6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800acea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	3301      	adds	r3, #1
 800acf0:	613b      	str	r3, [r7, #16]
 800acf2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800acf6:	461a      	mov	r2, r3
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d3b5      	bcc.n	800ac6a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad10:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ad1e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ad20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d105      	bne.n	800ad34 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	f043 0210 	orr.w	r2, r3, #16
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	699a      	ldr	r2, [r3, #24]
 800ad38:	4b0f      	ldr	r3, [pc, #60]	@ (800ad78 <USB_DevInit+0x2b4>)
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ad40:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d005      	beq.n	800ad54 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	f043 0208 	orr.w	r2, r3, #8
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ad54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d105      	bne.n	800ad68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	699a      	ldr	r2, [r3, #24]
 800ad60:	4b06      	ldr	r3, [pc, #24]	@ (800ad7c <USB_DevInit+0x2b8>)
 800ad62:	4313      	orrs	r3, r2
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad74:	b004      	add	sp, #16
 800ad76:	4770      	bx	lr
 800ad78:	803c3800 	.word	0x803c3800
 800ad7c:	40000004 	.word	0x40000004

0800ad80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3301      	adds	r3, #1
 800ad92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad9a:	d901      	bls.n	800ada0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ad9c:	2303      	movs	r3, #3
 800ad9e:	e01b      	b.n	800add8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	daf2      	bge.n	800ad8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ada8:	2300      	movs	r3, #0
 800adaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	019b      	lsls	r3, r3, #6
 800adb0:	f043 0220 	orr.w	r2, r3, #32
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	3301      	adds	r3, #1
 800adbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800adc4:	d901      	bls.n	800adca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800adc6:	2303      	movs	r3, #3
 800adc8:	e006      	b.n	800add8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	f003 0320 	and.w	r3, r3, #32
 800add2:	2b20      	cmp	r3, #32
 800add4:	d0f0      	beq.n	800adb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800adec:	2300      	movs	r3, #0
 800adee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	3301      	adds	r3, #1
 800adf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800adfc:	d901      	bls.n	800ae02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800adfe:	2303      	movs	r3, #3
 800ae00:	e018      	b.n	800ae34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	daf2      	bge.n	800adf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2210      	movs	r2, #16
 800ae12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	3301      	adds	r3, #1
 800ae18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae20:	d901      	bls.n	800ae26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ae22:	2303      	movs	r3, #3
 800ae24:	e006      	b.n	800ae34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	f003 0310 	and.w	r3, r3, #16
 800ae2e:	2b10      	cmp	r3, #16
 800ae30:	d0f0      	beq.n	800ae14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3714      	adds	r7, #20
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	78fb      	ldrb	r3, [r7, #3]
 800ae5a:	68f9      	ldr	r1, [r7, #12]
 800ae5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae60:	4313      	orrs	r3, r2
 800ae62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr

0800ae72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae72:	b480      	push	{r7}
 800ae74:	b085      	sub	sp, #20
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ae8c:	f023 0303 	bic.w	r3, r3, #3
 800ae90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aea0:	f043 0302 	orr.w	r3, r3, #2
 800aea4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	695b      	ldr	r3, [r3, #20]
 800aec0:	f003 0301 	and.w	r3, r3, #1
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aed8:	2300      	movs	r3, #0
 800aeda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3301      	adds	r3, #1
 800aee0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aee8:	d901      	bls.n	800aeee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e01b      	b.n	800af26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	daf2      	bge.n	800aedc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aef6:	2300      	movs	r3, #0
 800aef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	f043 0201 	orr.w	r2, r3, #1
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	3301      	adds	r3, #1
 800af0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af12:	d901      	bls.n	800af18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af14:	2303      	movs	r3, #3
 800af16:	e006      	b.n	800af26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b01      	cmp	r3, #1
 800af22:	d0f0      	beq.n	800af06 <USB_CoreReset+0x36>

  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
	...

0800af34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800af38:	4904      	ldr	r1, [pc, #16]	@ (800af4c <MX_FATFS_Init+0x18>)
 800af3a:	4805      	ldr	r0, [pc, #20]	@ (800af50 <MX_FATFS_Init+0x1c>)
 800af3c:	f003 f996 	bl	800e26c <FATFS_LinkDriver>
 800af40:	4603      	mov	r3, r0
 800af42:	461a      	mov	r2, r3
 800af44:	4b03      	ldr	r3, [pc, #12]	@ (800af54 <MX_FATFS_Init+0x20>)
 800af46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800af48:	bf00      	nop
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	20003054 	.word	0x20003054
 800af50:	20000064 	.word	0x20000064
 800af54:	20003050 	.word	0x20003050

0800af58 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800af58:	b480      	push	{r7}
 800af5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800af5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800af5e:	4618      	mov	r0, r3
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800af72:	79fb      	ldrb	r3, [r7, #7]
 800af74:	4618      	mov	r0, r3
 800af76:	f7f7 f97b 	bl	8002270 <SD_disk_initialize>
 800af7a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	4603      	mov	r3, r0
 800af8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800af8e:	79fb      	ldrb	r3, [r7, #7]
 800af90:	4618      	mov	r0, r3
 800af92:	f7f7 fa57 	bl	8002444 <SD_disk_status>
 800af96:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60b9      	str	r1, [r7, #8]
 800afa8:	607a      	str	r2, [r7, #4]
 800afaa:	603b      	str	r3, [r7, #0]
 800afac:	4603      	mov	r3, r0
 800afae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800afb0:	7bf8      	ldrb	r0, [r7, #15]
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	68b9      	ldr	r1, [r7, #8]
 800afb8:	f7f7 fa5a 	bl	8002470 <SD_disk_read>
 800afbc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
 800afd0:	603b      	str	r3, [r7, #0]
 800afd2:	4603      	mov	r3, r0
 800afd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800afd6:	7bf8      	ldrb	r0, [r7, #15]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	68b9      	ldr	r1, [r7, #8]
 800afde:	f7f7 fab1 	bl	8002544 <SD_disk_write>
 800afe2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	4603      	mov	r3, r0
 800aff4:	603a      	str	r2, [r7, #0]
 800aff6:	71fb      	strb	r3, [r7, #7]
 800aff8:	460b      	mov	r3, r1
 800affa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800affc:	79b9      	ldrb	r1, [r7, #6]
 800affe:	79fb      	ldrb	r3, [r7, #7]
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	4618      	mov	r0, r3
 800b004:	f7f7 fb22 	bl	800264c <SD_disk_ioctl>
 800b008:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
	...

0800b014 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	4603      	mov	r3, r0
 800b01c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b01e:	79fb      	ldrb	r3, [r7, #7]
 800b020:	4a08      	ldr	r2, [pc, #32]	@ (800b044 <disk_status+0x30>)
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4413      	add	r3, r2
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	79fa      	ldrb	r2, [r7, #7]
 800b02c:	4905      	ldr	r1, [pc, #20]	@ (800b044 <disk_status+0x30>)
 800b02e:	440a      	add	r2, r1
 800b030:	7a12      	ldrb	r2, [r2, #8]
 800b032:	4610      	mov	r0, r2
 800b034:	4798      	blx	r3
 800b036:	4603      	mov	r3, r0
 800b038:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	20003280 	.word	0x20003280

0800b048 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	4603      	mov	r3, r0
 800b050:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b056:	79fb      	ldrb	r3, [r7, #7]
 800b058:	4a0d      	ldr	r2, [pc, #52]	@ (800b090 <disk_initialize+0x48>)
 800b05a:	5cd3      	ldrb	r3, [r2, r3]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d111      	bne.n	800b084 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b060:	79fb      	ldrb	r3, [r7, #7]
 800b062:	4a0b      	ldr	r2, [pc, #44]	@ (800b090 <disk_initialize+0x48>)
 800b064:	2101      	movs	r1, #1
 800b066:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b068:	79fb      	ldrb	r3, [r7, #7]
 800b06a:	4a09      	ldr	r2, [pc, #36]	@ (800b090 <disk_initialize+0x48>)
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	4413      	add	r3, r2
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	79fa      	ldrb	r2, [r7, #7]
 800b076:	4906      	ldr	r1, [pc, #24]	@ (800b090 <disk_initialize+0x48>)
 800b078:	440a      	add	r2, r1
 800b07a:	7a12      	ldrb	r2, [r2, #8]
 800b07c:	4610      	mov	r0, r2
 800b07e:	4798      	blx	r3
 800b080:	4603      	mov	r3, r0
 800b082:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b084:	7bfb      	ldrb	r3, [r7, #15]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	20003280 	.word	0x20003280

0800b094 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b094:	b590      	push	{r4, r7, lr}
 800b096:	b087      	sub	sp, #28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60b9      	str	r1, [r7, #8]
 800b09c:	607a      	str	r2, [r7, #4]
 800b09e:	603b      	str	r3, [r7, #0]
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	4a0a      	ldr	r2, [pc, #40]	@ (800b0d0 <disk_read+0x3c>)
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	689c      	ldr	r4, [r3, #8]
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
 800b0b2:	4a07      	ldr	r2, [pc, #28]	@ (800b0d0 <disk_read+0x3c>)
 800b0b4:	4413      	add	r3, r2
 800b0b6:	7a18      	ldrb	r0, [r3, #8]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	68b9      	ldr	r1, [r7, #8]
 800b0be:	47a0      	blx	r4
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b0c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	371c      	adds	r7, #28
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd90      	pop	{r4, r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20003280 	.word	0x20003280

0800b0d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b0d4:	b590      	push	{r4, r7, lr}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60b9      	str	r1, [r7, #8]
 800b0dc:	607a      	str	r2, [r7, #4]
 800b0de:	603b      	str	r3, [r7, #0]
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
 800b0e6:	4a0a      	ldr	r2, [pc, #40]	@ (800b110 <disk_write+0x3c>)
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	68dc      	ldr	r4, [r3, #12]
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
 800b0f2:	4a07      	ldr	r2, [pc, #28]	@ (800b110 <disk_write+0x3c>)
 800b0f4:	4413      	add	r3, r2
 800b0f6:	7a18      	ldrb	r0, [r3, #8]
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	68b9      	ldr	r1, [r7, #8]
 800b0fe:	47a0      	blx	r4
 800b100:	4603      	mov	r3, r0
 800b102:	75fb      	strb	r3, [r7, #23]
  return res;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
}
 800b106:	4618      	mov	r0, r3
 800b108:	371c      	adds	r7, #28
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd90      	pop	{r4, r7, pc}
 800b10e:	bf00      	nop
 800b110:	20003280 	.word	0x20003280

0800b114 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4603      	mov	r3, r0
 800b11c:	603a      	str	r2, [r7, #0]
 800b11e:	71fb      	strb	r3, [r7, #7]
 800b120:	460b      	mov	r3, r1
 800b122:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b124:	79fb      	ldrb	r3, [r7, #7]
 800b126:	4a09      	ldr	r2, [pc, #36]	@ (800b14c <disk_ioctl+0x38>)
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	79fa      	ldrb	r2, [r7, #7]
 800b132:	4906      	ldr	r1, [pc, #24]	@ (800b14c <disk_ioctl+0x38>)
 800b134:	440a      	add	r2, r1
 800b136:	7a10      	ldrb	r0, [r2, #8]
 800b138:	79b9      	ldrb	r1, [r7, #6]
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	4798      	blx	r3
 800b13e:	4603      	mov	r3, r0
 800b140:	73fb      	strb	r3, [r7, #15]
  return res;
 800b142:	7bfb      	ldrb	r3, [r7, #15]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	20003280 	.word	0x20003280

0800b150 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	3301      	adds	r3, #1
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b160:	89fb      	ldrh	r3, [r7, #14]
 800b162:	021b      	lsls	r3, r3, #8
 800b164:	b21a      	sxth	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	b21b      	sxth	r3, r3
 800b16c:	4313      	orrs	r3, r2
 800b16e:	b21b      	sxth	r3, r3
 800b170:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b172:	89fb      	ldrh	r3, [r7, #14]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3303      	adds	r3, #3
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	021b      	lsls	r3, r3, #8
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	3202      	adds	r2, #2
 800b198:	7812      	ldrb	r2, [r2, #0]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	021b      	lsls	r3, r3, #8
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	3201      	adds	r2, #1
 800b1a6:	7812      	ldrb	r2, [r2, #0]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	021b      	lsls	r3, r3, #8
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	7812      	ldrb	r2, [r2, #0]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]
	return rv;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b083      	sub	sp, #12
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	887a      	ldrh	r2, [r7, #2]
 800b1da:	b2d2      	uxtb	r2, r2
 800b1dc:	701a      	strb	r2, [r3, #0]
 800b1de:	887b      	ldrh	r3, [r7, #2]
 800b1e0:	0a1b      	lsrs	r3, r3, #8
 800b1e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	1c5a      	adds	r2, r3, #1
 800b1e8:	607a      	str	r2, [r7, #4]
 800b1ea:	887a      	ldrh	r2, [r7, #2]
 800b1ec:	b2d2      	uxtb	r2, r2
 800b1ee:	701a      	strb	r2, [r3, #0]
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	1c5a      	adds	r2, r3, #1
 800b20a:	607a      	str	r2, [r7, #4]
 800b20c:	683a      	ldr	r2, [r7, #0]
 800b20e:	b2d2      	uxtb	r2, r2
 800b210:	701a      	strb	r2, [r3, #0]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	0a1b      	lsrs	r3, r3, #8
 800b216:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	1c5a      	adds	r2, r3, #1
 800b21c:	607a      	str	r2, [r7, #4]
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	b2d2      	uxtb	r2, r2
 800b222:	701a      	strb	r2, [r3, #0]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	0a1b      	lsrs	r3, r3, #8
 800b228:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	1c5a      	adds	r2, r3, #1
 800b22e:	607a      	str	r2, [r7, #4]
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	b2d2      	uxtb	r2, r2
 800b234:	701a      	strb	r2, [r3, #0]
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	0a1b      	lsrs	r3, r3, #8
 800b23a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	1c5a      	adds	r2, r3, #1
 800b240:	607a      	str	r2, [r7, #4]
 800b242:	683a      	ldr	r2, [r7, #0]
 800b244:	b2d2      	uxtb	r2, r2
 800b246:	701a      	strb	r2, [r3, #0]
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b254:	b480      	push	{r7}
 800b256:	b087      	sub	sp, #28
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00d      	beq.n	800b28a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	1c53      	adds	r3, r2, #1
 800b272:	613b      	str	r3, [r7, #16]
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	1c59      	adds	r1, r3, #1
 800b278:	6179      	str	r1, [r7, #20]
 800b27a:	7812      	ldrb	r2, [r2, #0]
 800b27c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3b01      	subs	r3, #1
 800b282:	607b      	str	r3, [r7, #4]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1f1      	bne.n	800b26e <mem_cpy+0x1a>
	}
}
 800b28a:	bf00      	nop
 800b28c:	371c      	adds	r7, #28
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b296:	b480      	push	{r7}
 800b298:	b087      	sub	sp, #28
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	60f8      	str	r0, [r7, #12]
 800b29e:	60b9      	str	r1, [r7, #8]
 800b2a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	1c5a      	adds	r2, r3, #1
 800b2aa:	617a      	str	r2, [r7, #20]
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	b2d2      	uxtb	r2, r2
 800b2b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	607b      	str	r3, [r7, #4]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1f3      	bne.n	800b2a6 <mem_set+0x10>
}
 800b2be:	bf00      	nop
 800b2c0:	bf00      	nop
 800b2c2:	371c      	adds	r7, #28
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b2cc:	b480      	push	{r7}
 800b2ce:	b089      	sub	sp, #36	@ 0x24
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	61fb      	str	r3, [r7, #28]
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	1c5a      	adds	r2, r3, #1
 800b2e8:	61fa      	str	r2, [r7, #28]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	1c5a      	adds	r2, r3, #1
 800b2f2:	61ba      	str	r2, [r7, #24]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	1acb      	subs	r3, r1, r3
 800b2f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	607b      	str	r3, [r7, #4]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d002      	beq.n	800b30c <mem_cmp+0x40>
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d0eb      	beq.n	800b2e4 <mem_cmp+0x18>

	return r;
 800b30c:	697b      	ldr	r3, [r7, #20]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3724      	adds	r7, #36	@ 0x24
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b31a:	b480      	push	{r7}
 800b31c:	b083      	sub	sp, #12
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b324:	e002      	b.n	800b32c <chk_chr+0x12>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	3301      	adds	r3, #1
 800b32a:	607b      	str	r3, [r7, #4]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d005      	beq.n	800b340 <chk_chr+0x26>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	461a      	mov	r2, r3
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d1f2      	bne.n	800b326 <chk_chr+0xc>
	return *str;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	781b      	ldrb	r3, [r3, #0]
}
 800b344:	4618      	mov	r0, r3
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b35a:	2300      	movs	r3, #0
 800b35c:	60bb      	str	r3, [r7, #8]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	60fb      	str	r3, [r7, #12]
 800b362:	e029      	b.n	800b3b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b364:	4a27      	ldr	r2, [pc, #156]	@ (800b404 <chk_lock+0xb4>)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	011b      	lsls	r3, r3, #4
 800b36a:	4413      	add	r3, r2
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d01d      	beq.n	800b3ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b372:	4a24      	ldr	r2, [pc, #144]	@ (800b404 <chk_lock+0xb4>)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	011b      	lsls	r3, r3, #4
 800b378:	4413      	add	r3, r2
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	429a      	cmp	r2, r3
 800b382:	d116      	bne.n	800b3b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b384:	4a1f      	ldr	r2, [pc, #124]	@ (800b404 <chk_lock+0xb4>)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	011b      	lsls	r3, r3, #4
 800b38a:	4413      	add	r3, r2
 800b38c:	3304      	adds	r3, #4
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b394:	429a      	cmp	r2, r3
 800b396:	d10c      	bne.n	800b3b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b398:	4a1a      	ldr	r2, [pc, #104]	@ (800b404 <chk_lock+0xb4>)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	011b      	lsls	r3, r3, #4
 800b39e:	4413      	add	r3, r2
 800b3a0:	3308      	adds	r3, #8
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d102      	bne.n	800b3b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b3ac:	e007      	b.n	800b3be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d9d2      	bls.n	800b364 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d109      	bne.n	800b3d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d102      	bne.n	800b3d0 <chk_lock+0x80>
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	d101      	bne.n	800b3d4 <chk_lock+0x84>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	e010      	b.n	800b3f6 <chk_lock+0xa6>
 800b3d4:	2312      	movs	r3, #18
 800b3d6:	e00e      	b.n	800b3f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d108      	bne.n	800b3f0 <chk_lock+0xa0>
 800b3de:	4a09      	ldr	r2, [pc, #36]	@ (800b404 <chk_lock+0xb4>)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	011b      	lsls	r3, r3, #4
 800b3e4:	4413      	add	r3, r2
 800b3e6:	330c      	adds	r3, #12
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3ee:	d101      	bne.n	800b3f4 <chk_lock+0xa4>
 800b3f0:	2310      	movs	r3, #16
 800b3f2:	e000      	b.n	800b3f6 <chk_lock+0xa6>
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	20003060 	.word	0x20003060

0800b408 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b40e:	2300      	movs	r3, #0
 800b410:	607b      	str	r3, [r7, #4]
 800b412:	e002      	b.n	800b41a <enq_lock+0x12>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	3301      	adds	r3, #1
 800b418:	607b      	str	r3, [r7, #4]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d806      	bhi.n	800b42e <enq_lock+0x26>
 800b420:	4a09      	ldr	r2, [pc, #36]	@ (800b448 <enq_lock+0x40>)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	011b      	lsls	r3, r3, #4
 800b426:	4413      	add	r3, r2
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1f2      	bne.n	800b414 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b02      	cmp	r3, #2
 800b432:	bf14      	ite	ne
 800b434:	2301      	movne	r3, #1
 800b436:	2300      	moveq	r3, #0
 800b438:	b2db      	uxtb	r3, r3
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	370c      	adds	r7, #12
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	20003060 	.word	0x20003060

0800b44c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b456:	2300      	movs	r3, #0
 800b458:	60fb      	str	r3, [r7, #12]
 800b45a:	e01f      	b.n	800b49c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b45c:	4a41      	ldr	r2, [pc, #260]	@ (800b564 <inc_lock+0x118>)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	011b      	lsls	r3, r3, #4
 800b462:	4413      	add	r3, r2
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d113      	bne.n	800b496 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b46e:	4a3d      	ldr	r2, [pc, #244]	@ (800b564 <inc_lock+0x118>)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	011b      	lsls	r3, r3, #4
 800b474:	4413      	add	r3, r2
 800b476:	3304      	adds	r3, #4
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b47e:	429a      	cmp	r2, r3
 800b480:	d109      	bne.n	800b496 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b482:	4a38      	ldr	r2, [pc, #224]	@ (800b564 <inc_lock+0x118>)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	011b      	lsls	r3, r3, #4
 800b488:	4413      	add	r3, r2
 800b48a:	3308      	adds	r3, #8
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b492:	429a      	cmp	r2, r3
 800b494:	d006      	beq.n	800b4a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3301      	adds	r3, #1
 800b49a:	60fb      	str	r3, [r7, #12]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d9dc      	bls.n	800b45c <inc_lock+0x10>
 800b4a2:	e000      	b.n	800b4a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b4a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d132      	bne.n	800b512 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	e002      	b.n	800b4b8 <inc_lock+0x6c>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	60fb      	str	r3, [r7, #12]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d806      	bhi.n	800b4cc <inc_lock+0x80>
 800b4be:	4a29      	ldr	r2, [pc, #164]	@ (800b564 <inc_lock+0x118>)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	011b      	lsls	r3, r3, #4
 800b4c4:	4413      	add	r3, r2
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1f2      	bne.n	800b4b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d101      	bne.n	800b4d6 <inc_lock+0x8a>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e040      	b.n	800b558 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	4922      	ldr	r1, [pc, #136]	@ (800b564 <inc_lock+0x118>)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	011b      	lsls	r3, r3, #4
 800b4e0:	440b      	add	r3, r1
 800b4e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689a      	ldr	r2, [r3, #8]
 800b4e8:	491e      	ldr	r1, [pc, #120]	@ (800b564 <inc_lock+0x118>)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	011b      	lsls	r3, r3, #4
 800b4ee:	440b      	add	r3, r1
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	695a      	ldr	r2, [r3, #20]
 800b4f8:	491a      	ldr	r1, [pc, #104]	@ (800b564 <inc_lock+0x118>)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	011b      	lsls	r3, r3, #4
 800b4fe:	440b      	add	r3, r1
 800b500:	3308      	adds	r3, #8
 800b502:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b504:	4a17      	ldr	r2, [pc, #92]	@ (800b564 <inc_lock+0x118>)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	011b      	lsls	r3, r3, #4
 800b50a:	4413      	add	r3, r2
 800b50c:	330c      	adds	r3, #12
 800b50e:	2200      	movs	r2, #0
 800b510:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d009      	beq.n	800b52c <inc_lock+0xe0>
 800b518:	4a12      	ldr	r2, [pc, #72]	@ (800b564 <inc_lock+0x118>)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	011b      	lsls	r3, r3, #4
 800b51e:	4413      	add	r3, r2
 800b520:	330c      	adds	r3, #12
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d001      	beq.n	800b52c <inc_lock+0xe0>
 800b528:	2300      	movs	r3, #0
 800b52a:	e015      	b.n	800b558 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d108      	bne.n	800b544 <inc_lock+0xf8>
 800b532:	4a0c      	ldr	r2, [pc, #48]	@ (800b564 <inc_lock+0x118>)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	011b      	lsls	r3, r3, #4
 800b538:	4413      	add	r3, r2
 800b53a:	330c      	adds	r3, #12
 800b53c:	881b      	ldrh	r3, [r3, #0]
 800b53e:	3301      	adds	r3, #1
 800b540:	b29a      	uxth	r2, r3
 800b542:	e001      	b.n	800b548 <inc_lock+0xfc>
 800b544:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b548:	4906      	ldr	r1, [pc, #24]	@ (800b564 <inc_lock+0x118>)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	011b      	lsls	r3, r3, #4
 800b54e:	440b      	add	r3, r1
 800b550:	330c      	adds	r3, #12
 800b552:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	3301      	adds	r3, #1
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr
 800b564:	20003060 	.word	0x20003060

0800b568 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	3b01      	subs	r3, #1
 800b574:	607b      	str	r3, [r7, #4]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d825      	bhi.n	800b5c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800b57c:	4a17      	ldr	r2, [pc, #92]	@ (800b5dc <dec_lock+0x74>)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	011b      	lsls	r3, r3, #4
 800b582:	4413      	add	r3, r2
 800b584:	330c      	adds	r3, #12
 800b586:	881b      	ldrh	r3, [r3, #0]
 800b588:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b58a:	89fb      	ldrh	r3, [r7, #14]
 800b58c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b590:	d101      	bne.n	800b596 <dec_lock+0x2e>
 800b592:	2300      	movs	r3, #0
 800b594:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b596:	89fb      	ldrh	r3, [r7, #14]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <dec_lock+0x3a>
 800b59c:	89fb      	ldrh	r3, [r7, #14]
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b5a2:	4a0e      	ldr	r2, [pc, #56]	@ (800b5dc <dec_lock+0x74>)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	011b      	lsls	r3, r3, #4
 800b5a8:	4413      	add	r3, r2
 800b5aa:	330c      	adds	r3, #12
 800b5ac:	89fa      	ldrh	r2, [r7, #14]
 800b5ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b5b0:	89fb      	ldrh	r3, [r7, #14]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d105      	bne.n	800b5c2 <dec_lock+0x5a>
 800b5b6:	4a09      	ldr	r2, [pc, #36]	@ (800b5dc <dec_lock+0x74>)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	011b      	lsls	r3, r3, #4
 800b5bc:	4413      	add	r3, r2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	737b      	strb	r3, [r7, #13]
 800b5c6:	e001      	b.n	800b5cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b5c8:	2302      	movs	r3, #2
 800b5ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b5cc:	7b7b      	ldrb	r3, [r7, #13]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3714      	adds	r7, #20
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	20003060 	.word	0x20003060

0800b5e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	60fb      	str	r3, [r7, #12]
 800b5ec:	e010      	b.n	800b610 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b5ee:	4a0d      	ldr	r2, [pc, #52]	@ (800b624 <clear_lock+0x44>)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	011b      	lsls	r3, r3, #4
 800b5f4:	4413      	add	r3, r2
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d105      	bne.n	800b60a <clear_lock+0x2a>
 800b5fe:	4a09      	ldr	r2, [pc, #36]	@ (800b624 <clear_lock+0x44>)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	011b      	lsls	r3, r3, #4
 800b604:	4413      	add	r3, r2
 800b606:	2200      	movs	r2, #0
 800b608:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	3301      	adds	r3, #1
 800b60e:	60fb      	str	r3, [r7, #12]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d9eb      	bls.n	800b5ee <clear_lock+0xe>
	}
}
 800b616:	bf00      	nop
 800b618:	bf00      	nop
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	20003060 	.word	0x20003060

0800b628 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b086      	sub	sp, #24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b630:	2300      	movs	r3, #0
 800b632:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	78db      	ldrb	r3, [r3, #3]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d034      	beq.n	800b6a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b640:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	7858      	ldrb	r0, [r3, #1]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b64c:	2301      	movs	r3, #1
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	f7ff fd40 	bl	800b0d4 <disk_write>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d002      	beq.n	800b660 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	73fb      	strb	r3, [r7, #15]
 800b65e:	e022      	b.n	800b6a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b66a:	697a      	ldr	r2, [r7, #20]
 800b66c:	1ad2      	subs	r2, r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a1b      	ldr	r3, [r3, #32]
 800b672:	429a      	cmp	r2, r3
 800b674:	d217      	bcs.n	800b6a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	789b      	ldrb	r3, [r3, #2]
 800b67a:	613b      	str	r3, [r7, #16]
 800b67c:	e010      	b.n	800b6a0 <sync_window+0x78>
					wsect += fs->fsize;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	4413      	add	r3, r2
 800b686:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	7858      	ldrb	r0, [r3, #1]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b692:	2301      	movs	r3, #1
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	f7ff fd1d 	bl	800b0d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	3b01      	subs	r3, #1
 800b69e:	613b      	str	r3, [r7, #16]
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d8eb      	bhi.n	800b67e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3718      	adds	r7, #24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d01b      	beq.n	800b700 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff ffad 	bl	800b628 <sync_window>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d113      	bne.n	800b700 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	7858      	ldrb	r0, [r3, #1]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	683a      	ldr	r2, [r7, #0]
 800b6e6:	f7ff fcd5 	bl	800b094 <disk_read>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d004      	beq.n	800b6fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800b700:	7bfb      	ldrb	r3, [r7, #15]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
	...

0800b70c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff ff87 	bl	800b628 <sync_window>
 800b71a:	4603      	mov	r3, r0
 800b71c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b71e:	7bfb      	ldrb	r3, [r7, #15]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d159      	bne.n	800b7d8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	2b03      	cmp	r3, #3
 800b72a:	d149      	bne.n	800b7c0 <sync_fs+0xb4>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	791b      	ldrb	r3, [r3, #4]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d145      	bne.n	800b7c0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	899b      	ldrh	r3, [r3, #12]
 800b73e:	461a      	mov	r2, r3
 800b740:	2100      	movs	r1, #0
 800b742:	f7ff fda8 	bl	800b296 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	3338      	adds	r3, #56	@ 0x38
 800b74a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b74e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b752:	4618      	mov	r0, r3
 800b754:	f7ff fd37 	bl	800b1c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	3338      	adds	r3, #56	@ 0x38
 800b75c:	4921      	ldr	r1, [pc, #132]	@ (800b7e4 <sync_fs+0xd8>)
 800b75e:	4618      	mov	r0, r3
 800b760:	f7ff fd4c 	bl	800b1fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	3338      	adds	r3, #56	@ 0x38
 800b768:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b76c:	491e      	ldr	r1, [pc, #120]	@ (800b7e8 <sync_fs+0xdc>)
 800b76e:	4618      	mov	r0, r3
 800b770:	f7ff fd44 	bl	800b1fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	3338      	adds	r3, #56	@ 0x38
 800b778:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	4619      	mov	r1, r3
 800b782:	4610      	mov	r0, r2
 800b784:	f7ff fd3a 	bl	800b1fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	3338      	adds	r3, #56	@ 0x38
 800b78c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	4619      	mov	r1, r3
 800b796:	4610      	mov	r0, r2
 800b798:	f7ff fd30 	bl	800b1fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	7858      	ldrb	r0, [r3, #1]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	f7ff fc8d 	bl	800b0d4 <disk_write>
			fs->fsi_flag = 0;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	785b      	ldrb	r3, [r3, #1]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7ff fca3 	bl	800b114 <disk_ioctl>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d001      	beq.n	800b7d8 <sync_fs+0xcc>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	41615252 	.word	0x41615252
 800b7e8:	61417272 	.word	0x61417272

0800b7ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	3b02      	subs	r3, #2
 800b7fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	69db      	ldr	r3, [r3, #28]
 800b800:	3b02      	subs	r3, #2
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	d301      	bcc.n	800b80c <clust2sect+0x20>
 800b808:	2300      	movs	r3, #0
 800b80a:	e008      	b.n	800b81e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	895b      	ldrh	r3, [r3, #10]
 800b810:	461a      	mov	r2, r3
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	fb03 f202 	mul.w	r2, r3, r2
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b81c:	4413      	add	r3, r2
}
 800b81e:	4618      	mov	r0, r3
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b086      	sub	sp, #24
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
 800b832:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d904      	bls.n	800b84a <get_fat+0x20>
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	69db      	ldr	r3, [r3, #28]
 800b844:	683a      	ldr	r2, [r7, #0]
 800b846:	429a      	cmp	r2, r3
 800b848:	d302      	bcc.n	800b850 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b84a:	2301      	movs	r3, #1
 800b84c:	617b      	str	r3, [r7, #20]
 800b84e:	e0ba      	b.n	800b9c6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b850:	f04f 33ff 	mov.w	r3, #4294967295
 800b854:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	f000 8082 	beq.w	800b964 <get_fat+0x13a>
 800b860:	2b03      	cmp	r3, #3
 800b862:	f300 80a6 	bgt.w	800b9b2 <get_fat+0x188>
 800b866:	2b01      	cmp	r3, #1
 800b868:	d002      	beq.n	800b870 <get_fat+0x46>
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d055      	beq.n	800b91a <get_fat+0xf0>
 800b86e:	e0a0      	b.n	800b9b2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	60fb      	str	r3, [r7, #12]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	085b      	lsrs	r3, r3, #1
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	4413      	add	r3, r2
 800b87c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	899b      	ldrh	r3, [r3, #12]
 800b886:	4619      	mov	r1, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b88e:	4413      	add	r3, r2
 800b890:	4619      	mov	r1, r3
 800b892:	6938      	ldr	r0, [r7, #16]
 800b894:	f7ff ff0c 	bl	800b6b0 <move_window>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f040 808c 	bne.w	800b9b8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	60fa      	str	r2, [r7, #12]
 800b8a6:	693a      	ldr	r2, [r7, #16]
 800b8a8:	8992      	ldrh	r2, [r2, #12]
 800b8aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8ae:	fb01 f202 	mul.w	r2, r1, r2
 800b8b2:	1a9b      	subs	r3, r3, r2
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b8bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	899b      	ldrh	r3, [r3, #12]
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8ce:	4413      	add	r3, r2
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	6938      	ldr	r0, [r7, #16]
 800b8d4:	f7ff feec 	bl	800b6b0 <move_window>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d16e      	bne.n	800b9bc <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	899b      	ldrh	r3, [r3, #12]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8ea:	fb01 f202 	mul.w	r2, r1, r2
 800b8ee:	1a9b      	subs	r3, r3, r2
 800b8f0:	693a      	ldr	r2, [r7, #16]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b8f8:	021b      	lsls	r3, r3, #8
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	f003 0301 	and.w	r3, r3, #1
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <get_fat+0xe6>
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	091b      	lsrs	r3, r3, #4
 800b90e:	e002      	b.n	800b916 <get_fat+0xec>
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b916:	617b      	str	r3, [r7, #20]
			break;
 800b918:	e055      	b.n	800b9c6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	899b      	ldrh	r3, [r3, #12]
 800b922:	085b      	lsrs	r3, r3, #1
 800b924:	b29b      	uxth	r3, r3
 800b926:	4619      	mov	r1, r3
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b92e:	4413      	add	r3, r2
 800b930:	4619      	mov	r1, r3
 800b932:	6938      	ldr	r0, [r7, #16]
 800b934:	f7ff febc 	bl	800b6b0 <move_window>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d140      	bne.n	800b9c0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	693a      	ldr	r2, [r7, #16]
 800b94a:	8992      	ldrh	r2, [r2, #12]
 800b94c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b950:	fb00 f202 	mul.w	r2, r0, r2
 800b954:	1a9b      	subs	r3, r3, r2
 800b956:	440b      	add	r3, r1
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff fbf9 	bl	800b150 <ld_word>
 800b95e:	4603      	mov	r3, r0
 800b960:	617b      	str	r3, [r7, #20]
			break;
 800b962:	e030      	b.n	800b9c6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	899b      	ldrh	r3, [r3, #12]
 800b96c:	089b      	lsrs	r3, r3, #2
 800b96e:	b29b      	uxth	r3, r3
 800b970:	4619      	mov	r1, r3
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	fbb3 f3f1 	udiv	r3, r3, r1
 800b978:	4413      	add	r3, r2
 800b97a:	4619      	mov	r1, r3
 800b97c:	6938      	ldr	r0, [r7, #16]
 800b97e:	f7ff fe97 	bl	800b6b0 <move_window>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d11d      	bne.n	800b9c4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	693a      	ldr	r2, [r7, #16]
 800b994:	8992      	ldrh	r2, [r2, #12]
 800b996:	fbb3 f0f2 	udiv	r0, r3, r2
 800b99a:	fb00 f202 	mul.w	r2, r0, r2
 800b99e:	1a9b      	subs	r3, r3, r2
 800b9a0:	440b      	add	r3, r1
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7ff fbec 	bl	800b180 <ld_dword>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b9ae:	617b      	str	r3, [r7, #20]
			break;
 800b9b0:	e009      	b.n	800b9c6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	617b      	str	r3, [r7, #20]
 800b9b6:	e006      	b.n	800b9c6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b9b8:	bf00      	nop
 800b9ba:	e004      	b.n	800b9c6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b9bc:	bf00      	nop
 800b9be:	e002      	b.n	800b9c6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b9c0:	bf00      	nop
 800b9c2:	e000      	b.n	800b9c6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b9c4:	bf00      	nop
		}
	}

	return val;
 800b9c6:	697b      	ldr	r3, [r7, #20]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3718      	adds	r7, #24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b9d0:	b590      	push	{r4, r7, lr}
 800b9d2:	b089      	sub	sp, #36	@ 0x24
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b9dc:	2302      	movs	r3, #2
 800b9de:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	f240 8109 	bls.w	800bbfa <put_fat+0x22a>
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	69db      	ldr	r3, [r3, #28]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	f080 8103 	bcs.w	800bbfa <put_fat+0x22a>
		switch (fs->fs_type) {
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	2b03      	cmp	r3, #3
 800b9fa:	f000 80b6 	beq.w	800bb6a <put_fat+0x19a>
 800b9fe:	2b03      	cmp	r3, #3
 800ba00:	f300 80fb 	bgt.w	800bbfa <put_fat+0x22a>
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d003      	beq.n	800ba10 <put_fat+0x40>
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	f000 8083 	beq.w	800bb14 <put_fat+0x144>
 800ba0e:	e0f4      	b.n	800bbfa <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	61bb      	str	r3, [r7, #24]
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	085b      	lsrs	r3, r3, #1
 800ba18:	69ba      	ldr	r2, [r7, #24]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	899b      	ldrh	r3, [r3, #12]
 800ba26:	4619      	mov	r1, r3
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba2e:	4413      	add	r3, r2
 800ba30:	4619      	mov	r1, r3
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7ff fe3c 	bl	800b6b0 <move_window>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba3c:	7ffb      	ldrb	r3, [r7, #31]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f040 80d4 	bne.w	800bbec <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	1c5a      	adds	r2, r3, #1
 800ba4e:	61ba      	str	r2, [r7, #24]
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	8992      	ldrh	r2, [r2, #12]
 800ba54:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba58:	fb00 f202 	mul.w	r2, r0, r2
 800ba5c:	1a9b      	subs	r3, r3, r2
 800ba5e:	440b      	add	r3, r1
 800ba60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	f003 0301 	and.w	r3, r3, #1
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00d      	beq.n	800ba88 <put_fat+0xb8>
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	b25b      	sxtb	r3, r3
 800ba72:	f003 030f 	and.w	r3, r3, #15
 800ba76:	b25a      	sxtb	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	011b      	lsls	r3, r3, #4
 800ba7e:	b25b      	sxtb	r3, r3
 800ba80:	4313      	orrs	r3, r2
 800ba82:	b25b      	sxtb	r3, r3
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	e001      	b.n	800ba8c <put_fat+0xbc>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	697a      	ldr	r2, [r7, #20]
 800ba8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2201      	movs	r2, #1
 800ba94:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	899b      	ldrh	r3, [r3, #12]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	fbb3 f3f1 	udiv	r3, r3, r1
 800baa6:	4413      	add	r3, r2
 800baa8:	4619      	mov	r1, r3
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f7ff fe00 	bl	800b6b0 <move_window>
 800bab0:	4603      	mov	r3, r0
 800bab2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bab4:	7ffb      	ldrb	r3, [r7, #31]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f040 809a 	bne.w	800bbf0 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	899b      	ldrh	r3, [r3, #12]
 800bac6:	461a      	mov	r2, r3
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	fbb3 f0f2 	udiv	r0, r3, r2
 800bace:	fb00 f202 	mul.w	r2, r0, r2
 800bad2:	1a9b      	subs	r3, r3, r2
 800bad4:	440b      	add	r3, r1
 800bad6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	f003 0301 	and.w	r3, r3, #1
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d003      	beq.n	800baea <put_fat+0x11a>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	091b      	lsrs	r3, r3, #4
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	e00e      	b.n	800bb08 <put_fat+0x138>
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	b25b      	sxtb	r3, r3
 800baf0:	f023 030f 	bic.w	r3, r3, #15
 800baf4:	b25a      	sxtb	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	0a1b      	lsrs	r3, r3, #8
 800bafa:	b25b      	sxtb	r3, r3
 800bafc:	f003 030f 	and.w	r3, r3, #15
 800bb00:	b25b      	sxtb	r3, r3
 800bb02:	4313      	orrs	r3, r2
 800bb04:	b25b      	sxtb	r3, r3
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	697a      	ldr	r2, [r7, #20]
 800bb0a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	70da      	strb	r2, [r3, #3]
			break;
 800bb12:	e072      	b.n	800bbfa <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	899b      	ldrh	r3, [r3, #12]
 800bb1c:	085b      	lsrs	r3, r3, #1
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	4619      	mov	r1, r3
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb28:	4413      	add	r3, r2
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f7ff fdbf 	bl	800b6b0 <move_window>
 800bb32:	4603      	mov	r3, r0
 800bb34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb36:	7ffb      	ldrb	r3, [r7, #31]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d15b      	bne.n	800bbf4 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	005b      	lsls	r3, r3, #1
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	8992      	ldrh	r2, [r2, #12]
 800bb4a:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb4e:	fb00 f202 	mul.w	r2, r0, r2
 800bb52:	1a9b      	subs	r3, r3, r2
 800bb54:	440b      	add	r3, r1
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	b292      	uxth	r2, r2
 800bb5a:	4611      	mov	r1, r2
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7ff fb32 	bl	800b1c6 <st_word>
			fs->wflag = 1;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2201      	movs	r2, #1
 800bb66:	70da      	strb	r2, [r3, #3]
			break;
 800bb68:	e047      	b.n	800bbfa <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	899b      	ldrh	r3, [r3, #12]
 800bb72:	089b      	lsrs	r3, r3, #2
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	4619      	mov	r1, r3
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb7e:	4413      	add	r3, r2
 800bb80:	4619      	mov	r1, r3
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f7ff fd94 	bl	800b6b0 <move_window>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb8c:	7ffb      	ldrb	r3, [r7, #31]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d132      	bne.n	800bbf8 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	8992      	ldrh	r2, [r2, #12]
 800bba6:	fbb3 f0f2 	udiv	r0, r3, r2
 800bbaa:	fb00 f202 	mul.w	r2, r0, r2
 800bbae:	1a9b      	subs	r3, r3, r2
 800bbb0:	440b      	add	r3, r1
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7ff fae4 	bl	800b180 <ld_dword>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bbbe:	4323      	orrs	r3, r4
 800bbc0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	8992      	ldrh	r2, [r2, #12]
 800bbd0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bbd4:	fb00 f202 	mul.w	r2, r0, r2
 800bbd8:	1a9b      	subs	r3, r3, r2
 800bbda:	440b      	add	r3, r1
 800bbdc:	6879      	ldr	r1, [r7, #4]
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff fb0c 	bl	800b1fc <st_dword>
			fs->wflag = 1;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	70da      	strb	r2, [r3, #3]
			break;
 800bbea:	e006      	b.n	800bbfa <put_fat+0x22a>
			if (res != FR_OK) break;
 800bbec:	bf00      	nop
 800bbee:	e004      	b.n	800bbfa <put_fat+0x22a>
			if (res != FR_OK) break;
 800bbf0:	bf00      	nop
 800bbf2:	e002      	b.n	800bbfa <put_fat+0x22a>
			if (res != FR_OK) break;
 800bbf4:	bf00      	nop
 800bbf6:	e000      	b.n	800bbfa <put_fat+0x22a>
			if (res != FR_OK) break;
 800bbf8:	bf00      	nop
		}
	}
	return res;
 800bbfa:	7ffb      	ldrb	r3, [r7, #31]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3724      	adds	r7, #36	@ 0x24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd90      	pop	{r4, r7, pc}

0800bc04 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bc10:	2300      	movs	r3, #0
 800bc12:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d904      	bls.n	800bc2a <remove_chain+0x26>
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	69db      	ldr	r3, [r3, #28]
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d301      	bcc.n	800bc2e <remove_chain+0x2a>
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	e04b      	b.n	800bcc6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00c      	beq.n	800bc4e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bc34:	f04f 32ff 	mov.w	r2, #4294967295
 800bc38:	6879      	ldr	r1, [r7, #4]
 800bc3a:	69b8      	ldr	r0, [r7, #24]
 800bc3c:	f7ff fec8 	bl	800b9d0 <put_fat>
 800bc40:	4603      	mov	r3, r0
 800bc42:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bc44:	7ffb      	ldrb	r3, [r7, #31]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d001      	beq.n	800bc4e <remove_chain+0x4a>
 800bc4a:	7ffb      	ldrb	r3, [r7, #31]
 800bc4c:	e03b      	b.n	800bcc6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bc4e:	68b9      	ldr	r1, [r7, #8]
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f7ff fdea 	bl	800b82a <get_fat>
 800bc56:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d031      	beq.n	800bcc2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d101      	bne.n	800bc68 <remove_chain+0x64>
 800bc64:	2302      	movs	r3, #2
 800bc66:	e02e      	b.n	800bcc6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6e:	d101      	bne.n	800bc74 <remove_chain+0x70>
 800bc70:	2301      	movs	r3, #1
 800bc72:	e028      	b.n	800bcc6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bc74:	2200      	movs	r2, #0
 800bc76:	68b9      	ldr	r1, [r7, #8]
 800bc78:	69b8      	ldr	r0, [r7, #24]
 800bc7a:	f7ff fea9 	bl	800b9d0 <put_fat>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bc82:	7ffb      	ldrb	r3, [r7, #31]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <remove_chain+0x88>
 800bc88:	7ffb      	ldrb	r3, [r7, #31]
 800bc8a:	e01c      	b.n	800bcc6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	699a      	ldr	r2, [r3, #24]
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	69db      	ldr	r3, [r3, #28]
 800bc94:	3b02      	subs	r3, #2
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d20b      	bcs.n	800bcb2 <remove_chain+0xae>
			fs->free_clst++;
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	699b      	ldr	r3, [r3, #24]
 800bc9e:	1c5a      	adds	r2, r3, #1
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	791b      	ldrb	r3, [r3, #4]
 800bca8:	f043 0301 	orr.w	r3, r3, #1
 800bcac:	b2da      	uxtb	r2, r3
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	69db      	ldr	r3, [r3, #28]
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d3c6      	bcc.n	800bc4e <remove_chain+0x4a>
 800bcc0:	e000      	b.n	800bcc4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bcc2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3720      	adds	r7, #32
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b088      	sub	sp, #32
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10d      	bne.n	800bd00 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	695b      	ldr	r3, [r3, #20]
 800bce8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d004      	beq.n	800bcfa <create_chain+0x2c>
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	69db      	ldr	r3, [r3, #28]
 800bcf4:	69ba      	ldr	r2, [r7, #24]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d31b      	bcc.n	800bd32 <create_chain+0x64>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	61bb      	str	r3, [r7, #24]
 800bcfe:	e018      	b.n	800bd32 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7ff fd91 	bl	800b82a <get_fat>
 800bd08:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d801      	bhi.n	800bd14 <create_chain+0x46>
 800bd10:	2301      	movs	r3, #1
 800bd12:	e070      	b.n	800bdf6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd1a:	d101      	bne.n	800bd20 <create_chain+0x52>
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	e06a      	b.n	800bdf6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	69db      	ldr	r3, [r3, #28]
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d201      	bcs.n	800bd2e <create_chain+0x60>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	e063      	b.n	800bdf6 <create_chain+0x128>
		scl = clst;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	69db      	ldr	r3, [r3, #28]
 800bd40:	69fa      	ldr	r2, [r7, #28]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d307      	bcc.n	800bd56 <create_chain+0x88>
				ncl = 2;
 800bd46:	2302      	movs	r3, #2
 800bd48:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bd4a:	69fa      	ldr	r2, [r7, #28]
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d901      	bls.n	800bd56 <create_chain+0x88>
 800bd52:	2300      	movs	r3, #0
 800bd54:	e04f      	b.n	800bdf6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bd56:	69f9      	ldr	r1, [r7, #28]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff fd66 	bl	800b82a <get_fat>
 800bd5e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00e      	beq.n	800bd84 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d003      	beq.n	800bd74 <create_chain+0xa6>
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd72:	d101      	bne.n	800bd78 <create_chain+0xaa>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	e03e      	b.n	800bdf6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bd78:	69fa      	ldr	r2, [r7, #28]
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d1da      	bne.n	800bd36 <create_chain+0x68>
 800bd80:	2300      	movs	r3, #0
 800bd82:	e038      	b.n	800bdf6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bd84:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bd86:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8a:	69f9      	ldr	r1, [r7, #28]
 800bd8c:	6938      	ldr	r0, [r7, #16]
 800bd8e:	f7ff fe1f 	bl	800b9d0 <put_fat>
 800bd92:	4603      	mov	r3, r0
 800bd94:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d109      	bne.n	800bdb0 <create_chain+0xe2>
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d006      	beq.n	800bdb0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bda2:	69fa      	ldr	r2, [r7, #28]
 800bda4:	6839      	ldr	r1, [r7, #0]
 800bda6:	6938      	ldr	r0, [r7, #16]
 800bda8:	f7ff fe12 	bl	800b9d0 <put_fat>
 800bdac:	4603      	mov	r3, r0
 800bdae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d116      	bne.n	800bde4 <create_chain+0x116>
		fs->last_clst = ncl;
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	69fa      	ldr	r2, [r7, #28]
 800bdba:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	699a      	ldr	r2, [r3, #24]
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	69db      	ldr	r3, [r3, #28]
 800bdc4:	3b02      	subs	r3, #2
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d804      	bhi.n	800bdd4 <create_chain+0x106>
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	699b      	ldr	r3, [r3, #24]
 800bdce:	1e5a      	subs	r2, r3, #1
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	791b      	ldrb	r3, [r3, #4]
 800bdd8:	f043 0301 	orr.w	r3, r3, #1
 800bddc:	b2da      	uxtb	r2, r3
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	711a      	strb	r2, [r3, #4]
 800bde2:	e007      	b.n	800bdf4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bde4:	7dfb      	ldrb	r3, [r7, #23]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d102      	bne.n	800bdf0 <create_chain+0x122>
 800bdea:	f04f 33ff 	mov.w	r3, #4294967295
 800bdee:	e000      	b.n	800bdf2 <create_chain+0x124>
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bdf4:	69fb      	ldr	r3, [r7, #28]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3720      	adds	r7, #32
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bdfe:	b480      	push	{r7}
 800be00:	b087      	sub	sp, #28
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
 800be06:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be12:	3304      	adds	r3, #4
 800be14:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	899b      	ldrh	r3, [r3, #12]
 800be1a:	461a      	mov	r2, r3
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	8952      	ldrh	r2, [r2, #10]
 800be26:	fbb3 f3f2 	udiv	r3, r3, r2
 800be2a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	1d1a      	adds	r2, r3, #4
 800be30:	613a      	str	r2, [r7, #16]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d101      	bne.n	800be40 <clmt_clust+0x42>
 800be3c:	2300      	movs	r3, #0
 800be3e:	e010      	b.n	800be62 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800be40:	697a      	ldr	r2, [r7, #20]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	429a      	cmp	r2, r3
 800be46:	d307      	bcc.n	800be58 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800be48:	697a      	ldr	r2, [r7, #20]
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	1ad3      	subs	r3, r2, r3
 800be4e:	617b      	str	r3, [r7, #20]
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	3304      	adds	r3, #4
 800be54:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800be56:	e7e9      	b.n	800be2c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800be58:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	4413      	add	r3, r2
}
 800be62:	4618      	mov	r0, r3
 800be64:	371c      	adds	r7, #28
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr

0800be6e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b086      	sub	sp, #24
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800be84:	d204      	bcs.n	800be90 <dir_sdi+0x22>
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	f003 031f 	and.w	r3, r3, #31
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <dir_sdi+0x26>
		return FR_INT_ERR;
 800be90:	2302      	movs	r3, #2
 800be92:	e071      	b.n	800bf78 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d106      	bne.n	800beb4 <dir_sdi+0x46>
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d902      	bls.n	800beb4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beb2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10c      	bne.n	800bed4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	095b      	lsrs	r3, r3, #5
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	8912      	ldrh	r2, [r2, #8]
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d301      	bcc.n	800beca <dir_sdi+0x5c>
 800bec6:	2302      	movs	r3, #2
 800bec8:	e056      	b.n	800bf78 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	61da      	str	r2, [r3, #28]
 800bed2:	e02d      	b.n	800bf30 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	895b      	ldrh	r3, [r3, #10]
 800bed8:	461a      	mov	r2, r3
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	899b      	ldrh	r3, [r3, #12]
 800bede:	fb02 f303 	mul.w	r3, r2, r3
 800bee2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bee4:	e019      	b.n	800bf1a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6979      	ldr	r1, [r7, #20]
 800beea:	4618      	mov	r0, r3
 800beec:	f7ff fc9d 	bl	800b82a <get_fat>
 800bef0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef8:	d101      	bne.n	800befe <dir_sdi+0x90>
 800befa:	2301      	movs	r3, #1
 800befc:	e03c      	b.n	800bf78 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d904      	bls.n	800bf0e <dir_sdi+0xa0>
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	69db      	ldr	r3, [r3, #28]
 800bf08:	697a      	ldr	r2, [r7, #20]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d301      	bcc.n	800bf12 <dir_sdi+0xa4>
 800bf0e:	2302      	movs	r3, #2
 800bf10:	e032      	b.n	800bf78 <dir_sdi+0x10a>
			ofs -= csz;
 800bf12:	683a      	ldr	r2, [r7, #0]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d2e1      	bcs.n	800bee6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800bf22:	6979      	ldr	r1, [r7, #20]
 800bf24:	6938      	ldr	r0, [r7, #16]
 800bf26:	f7ff fc61 	bl	800b7ec <clust2sect>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	697a      	ldr	r2, [r7, #20]
 800bf34:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	69db      	ldr	r3, [r3, #28]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d101      	bne.n	800bf42 <dir_sdi+0xd4>
 800bf3e:	2302      	movs	r3, #2
 800bf40:	e01a      	b.n	800bf78 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	69da      	ldr	r2, [r3, #28]
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	899b      	ldrh	r3, [r3, #12]
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf52:	441a      	add	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	899b      	ldrh	r3, [r3, #12]
 800bf62:	461a      	mov	r2, r3
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf6a:	fb00 f202 	mul.w	r2, r0, r2
 800bf6e:	1a9b      	subs	r3, r3, r2
 800bf70:	18ca      	adds	r2, r1, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3718      	adds	r7, #24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	695b      	ldr	r3, [r3, #20]
 800bf94:	3320      	adds	r3, #32
 800bf96:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	69db      	ldr	r3, [r3, #28]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d003      	beq.n	800bfa8 <dir_next+0x28>
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bfa6:	d301      	bcc.n	800bfac <dir_next+0x2c>
 800bfa8:	2304      	movs	r3, #4
 800bfaa:	e0bb      	b.n	800c124 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	899b      	ldrh	r3, [r3, #12]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bfb8:	fb01 f202 	mul.w	r2, r1, r2
 800bfbc:	1a9b      	subs	r3, r3, r2
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f040 809d 	bne.w	800c0fe <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	69db      	ldr	r3, [r3, #28]
 800bfc8:	1c5a      	adds	r2, r3, #1
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	699b      	ldr	r3, [r3, #24]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10b      	bne.n	800bfee <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	095b      	lsrs	r3, r3, #5
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	8912      	ldrh	r2, [r2, #8]
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	f0c0 808d 	bcc.w	800c0fe <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	61da      	str	r2, [r3, #28]
 800bfea:	2304      	movs	r3, #4
 800bfec:	e09a      	b.n	800c124 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	899b      	ldrh	r3, [r3, #12]
 800bff2:	461a      	mov	r2, r3
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	8952      	ldrh	r2, [r2, #10]
 800bffe:	3a01      	subs	r2, #1
 800c000:	4013      	ands	r3, r2
 800c002:	2b00      	cmp	r3, #0
 800c004:	d17b      	bne.n	800c0fe <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	699b      	ldr	r3, [r3, #24]
 800c00c:	4619      	mov	r1, r3
 800c00e:	4610      	mov	r0, r2
 800c010:	f7ff fc0b 	bl	800b82a <get_fat>
 800c014:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d801      	bhi.n	800c020 <dir_next+0xa0>
 800c01c:	2302      	movs	r3, #2
 800c01e:	e081      	b.n	800c124 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c026:	d101      	bne.n	800c02c <dir_next+0xac>
 800c028:	2301      	movs	r3, #1
 800c02a:	e07b      	b.n	800c124 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	69db      	ldr	r3, [r3, #28]
 800c030:	697a      	ldr	r2, [r7, #20]
 800c032:	429a      	cmp	r2, r3
 800c034:	d359      	bcc.n	800c0ea <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d104      	bne.n	800c046 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	61da      	str	r2, [r3, #28]
 800c042:	2304      	movs	r3, #4
 800c044:	e06e      	b.n	800c124 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	4619      	mov	r1, r3
 800c04e:	4610      	mov	r0, r2
 800c050:	f7ff fe3d 	bl	800bcce <create_chain>
 800c054:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d101      	bne.n	800c060 <dir_next+0xe0>
 800c05c:	2307      	movs	r3, #7
 800c05e:	e061      	b.n	800c124 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	2b01      	cmp	r3, #1
 800c064:	d101      	bne.n	800c06a <dir_next+0xea>
 800c066:	2302      	movs	r3, #2
 800c068:	e05c      	b.n	800c124 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c070:	d101      	bne.n	800c076 <dir_next+0xf6>
 800c072:	2301      	movs	r3, #1
 800c074:	e056      	b.n	800c124 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f7ff fad6 	bl	800b628 <sync_window>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d001      	beq.n	800c086 <dir_next+0x106>
 800c082:	2301      	movs	r3, #1
 800c084:	e04e      	b.n	800c124 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	899b      	ldrh	r3, [r3, #12]
 800c090:	461a      	mov	r2, r3
 800c092:	2100      	movs	r1, #0
 800c094:	f7ff f8ff 	bl	800b296 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c098:	2300      	movs	r3, #0
 800c09a:	613b      	str	r3, [r7, #16]
 800c09c:	6979      	ldr	r1, [r7, #20]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f7ff fba4 	bl	800b7ec <clust2sect>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	635a      	str	r2, [r3, #52]	@ 0x34
 800c0aa:	e012      	b.n	800c0d2 <dir_next+0x152>
						fs->wflag = 1;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f7ff fab8 	bl	800b628 <sync_window>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <dir_next+0x142>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e030      	b.n	800c124 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	613b      	str	r3, [r7, #16]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0cc:	1c5a      	adds	r2, r3, #1
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	635a      	str	r2, [r3, #52]	@ 0x34
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	895b      	ldrh	r3, [r3, #10]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d3e6      	bcc.n	800c0ac <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	1ad2      	subs	r2, r2, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	697a      	ldr	r2, [r7, #20]
 800c0ee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c0f0:	6979      	ldr	r1, [r7, #20]
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f7ff fb7a 	bl	800b7ec <clust2sect>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	899b      	ldrh	r3, [r3, #12]
 800c10e:	461a      	mov	r2, r3
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	fbb3 f0f2 	udiv	r0, r3, r2
 800c116:	fb00 f202 	mul.w	r2, r0, r2
 800c11a:	1a9b      	subs	r3, r3, r2
 800c11c:	18ca      	adds	r2, r1, r3
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3718      	adds	r7, #24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c13c:	2100      	movs	r1, #0
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7ff fe95 	bl	800be6e <dir_sdi>
 800c144:	4603      	mov	r3, r0
 800c146:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c148:	7dfb      	ldrb	r3, [r7, #23]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d12b      	bne.n	800c1a6 <dir_alloc+0x7a>
		n = 0;
 800c14e:	2300      	movs	r3, #0
 800c150:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	69db      	ldr	r3, [r3, #28]
 800c156:	4619      	mov	r1, r3
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f7ff faa9 	bl	800b6b0 <move_window>
 800c15e:	4603      	mov	r3, r0
 800c160:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c162:	7dfb      	ldrb	r3, [r7, #23]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d11d      	bne.n	800c1a4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6a1b      	ldr	r3, [r3, #32]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	2be5      	cmp	r3, #229	@ 0xe5
 800c170:	d004      	beq.n	800c17c <dir_alloc+0x50>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d107      	bne.n	800c18c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	3301      	adds	r3, #1
 800c180:	613b      	str	r3, [r7, #16]
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	429a      	cmp	r2, r3
 800c188:	d102      	bne.n	800c190 <dir_alloc+0x64>
 800c18a:	e00c      	b.n	800c1a6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c18c:	2300      	movs	r3, #0
 800c18e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c190:	2101      	movs	r1, #1
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7ff fef4 	bl	800bf80 <dir_next>
 800c198:	4603      	mov	r3, r0
 800c19a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c19c:	7dfb      	ldrb	r3, [r7, #23]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d0d7      	beq.n	800c152 <dir_alloc+0x26>
 800c1a2:	e000      	b.n	800c1a6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c1a4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c1a6:	7dfb      	ldrb	r3, [r7, #23]
 800c1a8:	2b04      	cmp	r3, #4
 800c1aa:	d101      	bne.n	800c1b0 <dir_alloc+0x84>
 800c1ac:	2307      	movs	r3, #7
 800c1ae:	75fb      	strb	r3, [r7, #23]
	return res;
 800c1b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b084      	sub	sp, #16
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	331a      	adds	r3, #26
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fe ffc1 	bl	800b150 <ld_word>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d109      	bne.n	800c1ee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	3314      	adds	r3, #20
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fe ffb6 	bl	800b150 <ld_word>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	041b      	lsls	r3, r3, #16
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	331a      	adds	r3, #26
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	b292      	uxth	r2, r2
 800c20c:	4611      	mov	r1, r2
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fe ffd9 	bl	800b1c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	2b03      	cmp	r3, #3
 800c21a:	d109      	bne.n	800c230 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	f103 0214 	add.w	r2, r3, #20
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	0c1b      	lsrs	r3, r3, #16
 800c226:	b29b      	uxth	r3, r3
 800c228:	4619      	mov	r1, r3
 800c22a:	4610      	mov	r0, r2
 800c22c:	f7fe ffcb 	bl	800b1c6 <st_word>
	}
}
 800c230:	bf00      	nop
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c238:	b590      	push	{r4, r7, lr}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	331a      	adds	r3, #26
 800c246:	4618      	mov	r0, r3
 800c248:	f7fe ff82 	bl	800b150 <ld_word>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d001      	beq.n	800c256 <cmp_lfn+0x1e>
 800c252:	2300      	movs	r3, #0
 800c254:	e059      	b.n	800c30a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c25e:	1e5a      	subs	r2, r3, #1
 800c260:	4613      	mov	r3, r2
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	4413      	add	r3, r2
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	4413      	add	r3, r2
 800c26a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c26c:	2301      	movs	r3, #1
 800c26e:	81fb      	strh	r3, [r7, #14]
 800c270:	2300      	movs	r3, #0
 800c272:	613b      	str	r3, [r7, #16]
 800c274:	e033      	b.n	800c2de <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c276:	4a27      	ldr	r2, [pc, #156]	@ (800c314 <cmp_lfn+0xdc>)
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	4413      	add	r3, r2
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	461a      	mov	r2, r3
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	4413      	add	r3, r2
 800c284:	4618      	mov	r0, r3
 800c286:	f7fe ff63 	bl	800b150 <ld_word>
 800c28a:	4603      	mov	r3, r0
 800c28c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c28e:	89fb      	ldrh	r3, [r7, #14]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d01a      	beq.n	800c2ca <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	2bfe      	cmp	r3, #254	@ 0xfe
 800c298:	d812      	bhi.n	800c2c0 <cmp_lfn+0x88>
 800c29a:	89bb      	ldrh	r3, [r7, #12]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f002 f831 	bl	800e304 <ff_wtoupper>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	461c      	mov	r4, r3
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	1c5a      	adds	r2, r3, #1
 800c2aa:	617a      	str	r2, [r7, #20]
 800c2ac:	005b      	lsls	r3, r3, #1
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f002 f825 	bl	800e304 <ff_wtoupper>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	429c      	cmp	r4, r3
 800c2be:	d001      	beq.n	800c2c4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e022      	b.n	800c30a <cmp_lfn+0xd2>
			}
			wc = uc;
 800c2c4:	89bb      	ldrh	r3, [r7, #12]
 800c2c6:	81fb      	strh	r3, [r7, #14]
 800c2c8:	e006      	b.n	800c2d8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c2ca:	89bb      	ldrh	r3, [r7, #12]
 800c2cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d001      	beq.n	800c2d8 <cmp_lfn+0xa0>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	e018      	b.n	800c30a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	613b      	str	r3, [r7, #16]
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	2b0c      	cmp	r3, #12
 800c2e2:	d9c8      	bls.n	800c276 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00b      	beq.n	800c308 <cmp_lfn+0xd0>
 800c2f0:	89fb      	ldrh	r3, [r7, #14]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d008      	beq.n	800c308 <cmp_lfn+0xd0>
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	005b      	lsls	r3, r3, #1
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	881b      	ldrh	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d001      	beq.n	800c308 <cmp_lfn+0xd0>
 800c304:	2300      	movs	r3, #0
 800c306:	e000      	b.n	800c30a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c308:	2301      	movs	r3, #1
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	371c      	adds	r7, #28
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd90      	pop	{r4, r7, pc}
 800c312:	bf00      	nop
 800c314:	080139d8 	.word	0x080139d8

0800c318 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b088      	sub	sp, #32
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	4611      	mov	r1, r2
 800c324:	461a      	mov	r2, r3
 800c326:	460b      	mov	r3, r1
 800c328:	71fb      	strb	r3, [r7, #7]
 800c32a:	4613      	mov	r3, r2
 800c32c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	330d      	adds	r3, #13
 800c332:	79ba      	ldrb	r2, [r7, #6]
 800c334:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	330b      	adds	r3, #11
 800c33a:	220f      	movs	r2, #15
 800c33c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	330c      	adds	r3, #12
 800c342:	2200      	movs	r2, #0
 800c344:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	331a      	adds	r3, #26
 800c34a:	2100      	movs	r1, #0
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7fe ff3a 	bl	800b1c6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	1e5a      	subs	r2, r3, #1
 800c356:	4613      	mov	r3, r2
 800c358:	005b      	lsls	r3, r3, #1
 800c35a:	4413      	add	r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	4413      	add	r3, r2
 800c360:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	82fb      	strh	r3, [r7, #22]
 800c366:	2300      	movs	r3, #0
 800c368:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c36a:	8afb      	ldrh	r3, [r7, #22]
 800c36c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c370:	4293      	cmp	r3, r2
 800c372:	d007      	beq.n	800c384 <put_lfn+0x6c>
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	1c5a      	adds	r2, r3, #1
 800c378:	61fa      	str	r2, [r7, #28]
 800c37a:	005b      	lsls	r3, r3, #1
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	4413      	add	r3, r2
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c384:	4a17      	ldr	r2, [pc, #92]	@ (800c3e4 <put_lfn+0xcc>)
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	4413      	add	r3, r2
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	461a      	mov	r2, r3
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	4413      	add	r3, r2
 800c392:	8afa      	ldrh	r2, [r7, #22]
 800c394:	4611      	mov	r1, r2
 800c396:	4618      	mov	r0, r3
 800c398:	f7fe ff15 	bl	800b1c6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c39c:	8afb      	ldrh	r3, [r7, #22]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d102      	bne.n	800c3a8 <put_lfn+0x90>
 800c3a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c3a6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	61bb      	str	r3, [r7, #24]
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	2b0c      	cmp	r3, #12
 800c3b2:	d9da      	bls.n	800c36a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c3b4:	8afb      	ldrh	r3, [r7, #22]
 800c3b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d006      	beq.n	800c3cc <put_lfn+0xb4>
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	005b      	lsls	r3, r3, #1
 800c3c2:	68fa      	ldr	r2, [r7, #12]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	881b      	ldrh	r3, [r3, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d103      	bne.n	800c3d4 <put_lfn+0xbc>
 800c3cc:	79fb      	ldrb	r3, [r7, #7]
 800c3ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3d2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	79fa      	ldrb	r2, [r7, #7]
 800c3d8:	701a      	strb	r2, [r3, #0]
}
 800c3da:	bf00      	nop
 800c3dc:	3720      	adds	r7, #32
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	080139d8 	.word	0x080139d8

0800c3e8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08c      	sub	sp, #48	@ 0x30
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c3f6:	220b      	movs	r2, #11
 800c3f8:	68b9      	ldr	r1, [r7, #8]
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f7fe ff2a 	bl	800b254 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	2b05      	cmp	r3, #5
 800c404:	d929      	bls.n	800c45a <gen_numname+0x72>
		sr = seq;
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c40a:	e020      	b.n	800c44e <gen_numname+0x66>
			wc = *lfn++;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	1c9a      	adds	r2, r3, #2
 800c410:	607a      	str	r2, [r7, #4]
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c416:	2300      	movs	r3, #0
 800c418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c41a:	e015      	b.n	800c448 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800c41c:	69fb      	ldr	r3, [r7, #28]
 800c41e:	005a      	lsls	r2, r3, #1
 800c420:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c422:	f003 0301 	and.w	r3, r3, #1
 800c426:	4413      	add	r3, r2
 800c428:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c42a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c42c:	085b      	lsrs	r3, r3, #1
 800c42e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c436:	2b00      	cmp	r3, #0
 800c438:	d003      	beq.n	800c442 <gen_numname+0x5a>
 800c43a:	69fa      	ldr	r2, [r7, #28]
 800c43c:	4b30      	ldr	r3, [pc, #192]	@ (800c500 <gen_numname+0x118>)
 800c43e:	4053      	eors	r3, r2
 800c440:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c444:	3301      	adds	r3, #1
 800c446:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44a:	2b0f      	cmp	r3, #15
 800c44c:	d9e6      	bls.n	800c41c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	881b      	ldrh	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1da      	bne.n	800c40c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c45a:	2307      	movs	r3, #7
 800c45c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	b2db      	uxtb	r3, r3
 800c462:	f003 030f 	and.w	r3, r3, #15
 800c466:	b2db      	uxtb	r3, r3
 800c468:	3330      	adds	r3, #48	@ 0x30
 800c46a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800c46e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c472:	2b39      	cmp	r3, #57	@ 0x39
 800c474:	d904      	bls.n	800c480 <gen_numname+0x98>
 800c476:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c47a:	3307      	adds	r3, #7
 800c47c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800c480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c482:	1e5a      	subs	r2, r3, #1
 800c484:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c486:	3330      	adds	r3, #48	@ 0x30
 800c488:	443b      	add	r3, r7
 800c48a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c48e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	091b      	lsrs	r3, r3, #4
 800c496:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1df      	bne.n	800c45e <gen_numname+0x76>
	ns[i] = '~';
 800c49e:	f107 0214 	add.w	r2, r7, #20
 800c4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a4:	4413      	add	r3, r2
 800c4a6:	227e      	movs	r2, #126	@ 0x7e
 800c4a8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4ae:	e002      	b.n	800c4b6 <gen_numname+0xce>
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d205      	bcs.n	800c4ca <gen_numname+0xe2>
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c2:	4413      	add	r3, r2
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	2b20      	cmp	r3, #32
 800c4c8:	d1f2      	bne.n	800c4b0 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4cc:	2b07      	cmp	r3, #7
 800c4ce:	d807      	bhi.n	800c4e0 <gen_numname+0xf8>
 800c4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d2:	1c5a      	adds	r2, r3, #1
 800c4d4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c4d6:	3330      	adds	r3, #48	@ 0x30
 800c4d8:	443b      	add	r3, r7
 800c4da:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c4de:	e000      	b.n	800c4e2 <gen_numname+0xfa>
 800c4e0:	2120      	movs	r1, #32
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e4:	1c5a      	adds	r2, r3, #1
 800c4e6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	460a      	mov	r2, r1
 800c4ee:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f2:	2b07      	cmp	r3, #7
 800c4f4:	d9e9      	bls.n	800c4ca <gen_numname+0xe2>
}
 800c4f6:	bf00      	nop
 800c4f8:	bf00      	nop
 800c4fa:	3730      	adds	r7, #48	@ 0x30
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	00011021 	.word	0x00011021

0800c504 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c510:	230b      	movs	r3, #11
 800c512:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c514:	7bfb      	ldrb	r3, [r7, #15]
 800c516:	b2da      	uxtb	r2, r3
 800c518:	0852      	lsrs	r2, r2, #1
 800c51a:	01db      	lsls	r3, r3, #7
 800c51c:	4313      	orrs	r3, r2
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	1c59      	adds	r1, r3, #1
 800c524:	6079      	str	r1, [r7, #4]
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	4413      	add	r3, r2
 800c52a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	3b01      	subs	r3, #1
 800c530:	60bb      	str	r3, [r7, #8]
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1ed      	bne.n	800c514 <sum_sfn+0x10>
	return sum;
 800c538:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3714      	adds	r7, #20
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr

0800c546 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b086      	sub	sp, #24
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c554:	2100      	movs	r1, #0
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7ff fc89 	bl	800be6e <dir_sdi>
 800c55c:	4603      	mov	r3, r0
 800c55e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c560:	7dfb      	ldrb	r3, [r7, #23]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d001      	beq.n	800c56a <dir_find+0x24>
 800c566:	7dfb      	ldrb	r3, [r7, #23]
 800c568:	e0a9      	b.n	800c6be <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c56a:	23ff      	movs	r3, #255	@ 0xff
 800c56c:	753b      	strb	r3, [r7, #20]
 800c56e:	7d3b      	ldrb	r3, [r7, #20]
 800c570:	757b      	strb	r3, [r7, #21]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f04f 32ff 	mov.w	r2, #4294967295
 800c578:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	69db      	ldr	r3, [r3, #28]
 800c57e:	4619      	mov	r1, r3
 800c580:	6938      	ldr	r0, [r7, #16]
 800c582:	f7ff f895 	bl	800b6b0 <move_window>
 800c586:	4603      	mov	r3, r0
 800c588:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c58a:	7dfb      	ldrb	r3, [r7, #23]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f040 8090 	bne.w	800c6b2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6a1b      	ldr	r3, [r3, #32]
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c59a:	7dbb      	ldrb	r3, [r7, #22]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d102      	bne.n	800c5a6 <dir_find+0x60>
 800c5a0:	2304      	movs	r3, #4
 800c5a2:	75fb      	strb	r3, [r7, #23]
 800c5a4:	e08a      	b.n	800c6bc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	330b      	adds	r3, #11
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c5b2:	73fb      	strb	r3, [r7, #15]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	7bfa      	ldrb	r2, [r7, #15]
 800c5b8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c5ba:	7dbb      	ldrb	r3, [r7, #22]
 800c5bc:	2be5      	cmp	r3, #229	@ 0xe5
 800c5be:	d007      	beq.n	800c5d0 <dir_find+0x8a>
 800c5c0:	7bfb      	ldrb	r3, [r7, #15]
 800c5c2:	f003 0308 	and.w	r3, r3, #8
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d009      	beq.n	800c5de <dir_find+0x98>
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
 800c5cc:	2b0f      	cmp	r3, #15
 800c5ce:	d006      	beq.n	800c5de <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c5d0:	23ff      	movs	r3, #255	@ 0xff
 800c5d2:	757b      	strb	r3, [r7, #21]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5da:	631a      	str	r2, [r3, #48]	@ 0x30
 800c5dc:	e05e      	b.n	800c69c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c5de:	7bfb      	ldrb	r3, [r7, #15]
 800c5e0:	2b0f      	cmp	r3, #15
 800c5e2:	d136      	bne.n	800c652 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c5ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d154      	bne.n	800c69c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c5f2:	7dbb      	ldrb	r3, [r7, #22]
 800c5f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00d      	beq.n	800c618 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6a1b      	ldr	r3, [r3, #32]
 800c600:	7b5b      	ldrb	r3, [r3, #13]
 800c602:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c604:	7dbb      	ldrb	r3, [r7, #22]
 800c606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c60a:	75bb      	strb	r3, [r7, #22]
 800c60c:	7dbb      	ldrb	r3, [r7, #22]
 800c60e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	695a      	ldr	r2, [r3, #20]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c618:	7dba      	ldrb	r2, [r7, #22]
 800c61a:	7d7b      	ldrb	r3, [r7, #21]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d115      	bne.n	800c64c <dir_find+0x106>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a1b      	ldr	r3, [r3, #32]
 800c624:	330d      	adds	r3, #13
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	7d3a      	ldrb	r2, [r7, #20]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d10e      	bne.n	800c64c <dir_find+0x106>
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	691a      	ldr	r2, [r3, #16]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	4619      	mov	r1, r3
 800c638:	4610      	mov	r0, r2
 800c63a:	f7ff fdfd 	bl	800c238 <cmp_lfn>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d003      	beq.n	800c64c <dir_find+0x106>
 800c644:	7d7b      	ldrb	r3, [r7, #21]
 800c646:	3b01      	subs	r3, #1
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	e000      	b.n	800c64e <dir_find+0x108>
 800c64c:	23ff      	movs	r3, #255	@ 0xff
 800c64e:	757b      	strb	r3, [r7, #21]
 800c650:	e024      	b.n	800c69c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c652:	7d7b      	ldrb	r3, [r7, #21]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d109      	bne.n	800c66c <dir_find+0x126>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6a1b      	ldr	r3, [r3, #32]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7ff ff51 	bl	800c504 <sum_sfn>
 800c662:	4603      	mov	r3, r0
 800c664:	461a      	mov	r2, r3
 800c666:	7d3b      	ldrb	r3, [r7, #20]
 800c668:	4293      	cmp	r3, r2
 800c66a:	d024      	beq.n	800c6b6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c672:	f003 0301 	and.w	r3, r3, #1
 800c676:	2b00      	cmp	r3, #0
 800c678:	d10a      	bne.n	800c690 <dir_find+0x14a>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6a18      	ldr	r0, [r3, #32]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	3324      	adds	r3, #36	@ 0x24
 800c682:	220b      	movs	r2, #11
 800c684:	4619      	mov	r1, r3
 800c686:	f7fe fe21 	bl	800b2cc <mem_cmp>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d014      	beq.n	800c6ba <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c690:	23ff      	movs	r3, #255	@ 0xff
 800c692:	757b      	strb	r3, [r7, #21]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f04f 32ff 	mov.w	r2, #4294967295
 800c69a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c69c:	2100      	movs	r1, #0
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7ff fc6e 	bl	800bf80 <dir_next>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c6a8:	7dfb      	ldrb	r3, [r7, #23]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f43f af65 	beq.w	800c57a <dir_find+0x34>
 800c6b0:	e004      	b.n	800c6bc <dir_find+0x176>
		if (res != FR_OK) break;
 800c6b2:	bf00      	nop
 800c6b4:	e002      	b.n	800c6bc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c6b6:	bf00      	nop
 800c6b8:	e000      	b.n	800c6bc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c6ba:	bf00      	nop

	return res;
 800c6bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3718      	adds	r7, #24
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
	...

0800c6c8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b08c      	sub	sp, #48	@ 0x30
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c6dc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d001      	beq.n	800c6e8 <dir_register+0x20>
 800c6e4:	2306      	movs	r3, #6
 800c6e6:	e0e0      	b.n	800c8aa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6ec:	e002      	b.n	800c6f4 <dir_register+0x2c>
 800c6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	691a      	ldr	r2, [r3, #16]
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fa:	005b      	lsls	r3, r3, #1
 800c6fc:	4413      	add	r3, r2
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d1f4      	bne.n	800c6ee <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800c70a:	f107 030c 	add.w	r3, r7, #12
 800c70e:	220c      	movs	r2, #12
 800c710:	4618      	mov	r0, r3
 800c712:	f7fe fd9f 	bl	800b254 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c716:	7dfb      	ldrb	r3, [r7, #23]
 800c718:	f003 0301 	and.w	r3, r3, #1
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d032      	beq.n	800c786 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2240      	movs	r2, #64	@ 0x40
 800c724:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800c728:	2301      	movs	r3, #1
 800c72a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c72c:	e016      	b.n	800c75c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	691a      	ldr	r2, [r3, #16]
 800c738:	f107 010c 	add.w	r1, r7, #12
 800c73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73e:	f7ff fe53 	bl	800c3e8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7ff feff 	bl	800c546 <dir_find>
 800c748:	4603      	mov	r3, r0
 800c74a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800c74e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c752:	2b00      	cmp	r3, #0
 800c754:	d106      	bne.n	800c764 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c758:	3301      	adds	r3, #1
 800c75a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75e:	2b63      	cmp	r3, #99	@ 0x63
 800c760:	d9e5      	bls.n	800c72e <dir_register+0x66>
 800c762:	e000      	b.n	800c766 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c764:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c768:	2b64      	cmp	r3, #100	@ 0x64
 800c76a:	d101      	bne.n	800c770 <dir_register+0xa8>
 800c76c:	2307      	movs	r3, #7
 800c76e:	e09c      	b.n	800c8aa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c770:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c774:	2b04      	cmp	r3, #4
 800c776:	d002      	beq.n	800c77e <dir_register+0xb6>
 800c778:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c77c:	e095      	b.n	800c8aa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c77e:	7dfa      	ldrb	r2, [r7, #23]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c786:	7dfb      	ldrb	r3, [r7, #23]
 800c788:	f003 0302 	and.w	r3, r3, #2
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d007      	beq.n	800c7a0 <dir_register+0xd8>
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	330c      	adds	r3, #12
 800c794:	4a47      	ldr	r2, [pc, #284]	@ (800c8b4 <dir_register+0x1ec>)
 800c796:	fba2 2303 	umull	r2, r3, r2, r3
 800c79a:	089b      	lsrs	r3, r3, #2
 800c79c:	3301      	adds	r3, #1
 800c79e:	e000      	b.n	800c7a2 <dir_register+0xda>
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c7a4:	6a39      	ldr	r1, [r7, #32]
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7ff fcc0 	bl	800c12c <dir_alloc>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c7b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d148      	bne.n	800c84c <dir_register+0x184>
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	623b      	str	r3, [r7, #32]
 800c7c0:	6a3b      	ldr	r3, [r7, #32]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d042      	beq.n	800c84c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	695a      	ldr	r2, [r3, #20]
 800c7ca:	6a3b      	ldr	r3, [r7, #32]
 800c7cc:	015b      	lsls	r3, r3, #5
 800c7ce:	1ad3      	subs	r3, r2, r3
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7ff fb4b 	bl	800be6e <dir_sdi>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800c7de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d132      	bne.n	800c84c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	3324      	adds	r3, #36	@ 0x24
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7ff fe8a 	bl	800c504 <sum_sfn>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	69db      	ldr	r3, [r3, #28]
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	69f8      	ldr	r0, [r7, #28]
 800c7fc:	f7fe ff58 	bl	800b6b0 <move_window>
 800c800:	4603      	mov	r3, r0
 800c802:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800c806:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d11d      	bne.n	800c84a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	6918      	ldr	r0, [r3, #16]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a19      	ldr	r1, [r3, #32]
 800c816:	6a3b      	ldr	r3, [r7, #32]
 800c818:	b2da      	uxtb	r2, r3
 800c81a:	7efb      	ldrb	r3, [r7, #27]
 800c81c:	f7ff fd7c 	bl	800c318 <put_lfn>
				fs->wflag = 1;
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	2201      	movs	r2, #1
 800c824:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c826:	2100      	movs	r1, #0
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff fba9 	bl	800bf80 <dir_next>
 800c82e:	4603      	mov	r3, r0
 800c830:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800c834:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d107      	bne.n	800c84c <dir_register+0x184>
 800c83c:	6a3b      	ldr	r3, [r7, #32]
 800c83e:	3b01      	subs	r3, #1
 800c840:	623b      	str	r3, [r7, #32]
 800c842:	6a3b      	ldr	r3, [r7, #32]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d1d5      	bne.n	800c7f4 <dir_register+0x12c>
 800c848:	e000      	b.n	800c84c <dir_register+0x184>
				if (res != FR_OK) break;
 800c84a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c84c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c850:	2b00      	cmp	r3, #0
 800c852:	d128      	bne.n	800c8a6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	69db      	ldr	r3, [r3, #28]
 800c858:	4619      	mov	r1, r3
 800c85a:	69f8      	ldr	r0, [r7, #28]
 800c85c:	f7fe ff28 	bl	800b6b0 <move_window>
 800c860:	4603      	mov	r3, r0
 800c862:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800c866:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d11b      	bne.n	800c8a6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a1b      	ldr	r3, [r3, #32]
 800c872:	2220      	movs	r2, #32
 800c874:	2100      	movs	r1, #0
 800c876:	4618      	mov	r0, r3
 800c878:	f7fe fd0d 	bl	800b296 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6a18      	ldr	r0, [r3, #32]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	3324      	adds	r3, #36	@ 0x24
 800c884:	220b      	movs	r2, #11
 800c886:	4619      	mov	r1, r3
 800c888:	f7fe fce4 	bl	800b254 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	330c      	adds	r3, #12
 800c898:	f002 0218 	and.w	r2, r2, #24
 800c89c:	b2d2      	uxtb	r2, r2
 800c89e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c8a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3730      	adds	r7, #48	@ 0x30
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	4ec4ec4f 	.word	0x4ec4ec4f

0800c8b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08a      	sub	sp, #40	@ 0x28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	613b      	str	r3, [r7, #16]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	60fb      	str	r3, [r7, #12]
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	617b      	str	r3, [r7, #20]
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	1c5a      	adds	r2, r3, #1
 800c8dc:	61ba      	str	r2, [r7, #24]
 800c8de:	693a      	ldr	r2, [r7, #16]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c8e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8e8:	2b1f      	cmp	r3, #31
 800c8ea:	d940      	bls.n	800c96e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c8ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8ee:	2b2f      	cmp	r3, #47	@ 0x2f
 800c8f0:	d006      	beq.n	800c900 <create_name+0x48>
 800c8f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8f4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c8f6:	d110      	bne.n	800c91a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c8f8:	e002      	b.n	800c900 <create_name+0x48>
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	61bb      	str	r3, [r7, #24]
 800c900:	693a      	ldr	r2, [r7, #16]
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	4413      	add	r3, r2
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	2b2f      	cmp	r3, #47	@ 0x2f
 800c90a:	d0f6      	beq.n	800c8fa <create_name+0x42>
 800c90c:	693a      	ldr	r2, [r7, #16]
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	4413      	add	r3, r2
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	2b5c      	cmp	r3, #92	@ 0x5c
 800c916:	d0f0      	beq.n	800c8fa <create_name+0x42>
			break;
 800c918:	e02a      	b.n	800c970 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2bfe      	cmp	r3, #254	@ 0xfe
 800c91e:	d901      	bls.n	800c924 <create_name+0x6c>
 800c920:	2306      	movs	r3, #6
 800c922:	e17d      	b.n	800cc20 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c924:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c926:	b2db      	uxtb	r3, r3
 800c928:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c92a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c92c:	2101      	movs	r1, #1
 800c92e:	4618      	mov	r0, r3
 800c930:	f001 fcac 	bl	800e28c <ff_convert>
 800c934:	4603      	mov	r3, r0
 800c936:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c938:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <create_name+0x8a>
 800c93e:	2306      	movs	r3, #6
 800c940:	e16e      	b.n	800cc20 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c942:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c944:	2b7f      	cmp	r3, #127	@ 0x7f
 800c946:	d809      	bhi.n	800c95c <create_name+0xa4>
 800c948:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c94a:	4619      	mov	r1, r3
 800c94c:	488d      	ldr	r0, [pc, #564]	@ (800cb84 <create_name+0x2cc>)
 800c94e:	f7fe fce4 	bl	800b31a <chk_chr>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <create_name+0xa4>
 800c958:	2306      	movs	r3, #6
 800c95a:	e161      	b.n	800cc20 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	1c5a      	adds	r2, r3, #1
 800c960:	617a      	str	r2, [r7, #20]
 800c962:	005b      	lsls	r3, r3, #1
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	4413      	add	r3, r2
 800c968:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c96a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c96c:	e7b4      	b.n	800c8d8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c96e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	441a      	add	r2, r3
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c97a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c97c:	2b1f      	cmp	r3, #31
 800c97e:	d801      	bhi.n	800c984 <create_name+0xcc>
 800c980:	2304      	movs	r3, #4
 800c982:	e000      	b.n	800c986 <create_name+0xce>
 800c984:	2300      	movs	r3, #0
 800c986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c98a:	e011      	b.n	800c9b0 <create_name+0xf8>
		w = lfn[di - 1];
 800c98c:	697a      	ldr	r2, [r7, #20]
 800c98e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c992:	4413      	add	r3, r2
 800c994:	005b      	lsls	r3, r3, #1
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	4413      	add	r3, r2
 800c99a:	881b      	ldrh	r3, [r3, #0]
 800c99c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800c99e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9a0:	2b20      	cmp	r3, #32
 800c9a2:	d002      	beq.n	800c9aa <create_name+0xf2>
 800c9a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9a6:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9a8:	d106      	bne.n	800c9b8 <create_name+0x100>
		di--;
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d1ea      	bne.n	800c98c <create_name+0xd4>
 800c9b6:	e000      	b.n	800c9ba <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c9b8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	005b      	lsls	r3, r3, #1
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d101      	bne.n	800c9d0 <create_name+0x118>
 800c9cc:	2306      	movs	r3, #6
 800c9ce:	e127      	b.n	800cc20 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	3324      	adds	r3, #36	@ 0x24
 800c9d4:	220b      	movs	r2, #11
 800c9d6:	2120      	movs	r1, #32
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fe fc5c 	bl	800b296 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c9de:	2300      	movs	r3, #0
 800c9e0:	61bb      	str	r3, [r7, #24]
 800c9e2:	e002      	b.n	800c9ea <create_name+0x132>
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	61bb      	str	r3, [r7, #24]
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	881b      	ldrh	r3, [r3, #0]
 800c9f4:	2b20      	cmp	r3, #32
 800c9f6:	d0f5      	beq.n	800c9e4 <create_name+0x12c>
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	005b      	lsls	r3, r3, #1
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	4413      	add	r3, r2
 800ca00:	881b      	ldrh	r3, [r3, #0]
 800ca02:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca04:	d0ee      	beq.n	800c9e4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d009      	beq.n	800ca20 <create_name+0x168>
 800ca0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca10:	f043 0303 	orr.w	r3, r3, #3
 800ca14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ca18:	e002      	b.n	800ca20 <create_name+0x168>
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	617b      	str	r3, [r7, #20]
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d009      	beq.n	800ca3a <create_name+0x182>
 800ca26:	697a      	ldr	r2, [r7, #20]
 800ca28:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ca2c:	4413      	add	r3, r2
 800ca2e:	005b      	lsls	r3, r3, #1
 800ca30:	68fa      	ldr	r2, [r7, #12]
 800ca32:	4413      	add	r3, r2
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca38:	d1ef      	bne.n	800ca1a <create_name+0x162>

	i = b = 0; ni = 8;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ca40:	2300      	movs	r3, #0
 800ca42:	623b      	str	r3, [r7, #32]
 800ca44:	2308      	movs	r3, #8
 800ca46:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ca48:	69bb      	ldr	r3, [r7, #24]
 800ca4a:	1c5a      	adds	r2, r3, #1
 800ca4c:	61ba      	str	r2, [r7, #24]
 800ca4e:	005b      	lsls	r3, r3, #1
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	4413      	add	r3, r2
 800ca54:	881b      	ldrh	r3, [r3, #0]
 800ca56:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ca58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f000 8090 	beq.w	800cb80 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ca60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca62:	2b20      	cmp	r3, #32
 800ca64:	d006      	beq.n	800ca74 <create_name+0x1bc>
 800ca66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca68:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca6a:	d10a      	bne.n	800ca82 <create_name+0x1ca>
 800ca6c:	69ba      	ldr	r2, [r7, #24]
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d006      	beq.n	800ca82 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ca74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca78:	f043 0303 	orr.w	r3, r3, #3
 800ca7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca80:	e07d      	b.n	800cb7e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ca82:	6a3a      	ldr	r2, [r7, #32]
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d203      	bcs.n	800ca92 <create_name+0x1da>
 800ca8a:	69ba      	ldr	r2, [r7, #24]
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d123      	bne.n	800cada <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	2b0b      	cmp	r3, #11
 800ca96:	d106      	bne.n	800caa6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ca98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca9c:	f043 0303 	orr.w	r3, r3, #3
 800caa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800caa4:	e075      	b.n	800cb92 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800caa6:	69ba      	ldr	r2, [r7, #24]
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d005      	beq.n	800caba <create_name+0x202>
 800caae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cab2:	f043 0303 	orr.w	r3, r3, #3
 800cab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800caba:	69ba      	ldr	r2, [r7, #24]
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d866      	bhi.n	800cb90 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	61bb      	str	r3, [r7, #24]
 800cac6:	2308      	movs	r3, #8
 800cac8:	623b      	str	r3, [r7, #32]
 800caca:	230b      	movs	r3, #11
 800cacc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cace:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cad8:	e051      	b.n	800cb7e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cada:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cadc:	2b7f      	cmp	r3, #127	@ 0x7f
 800cade:	d914      	bls.n	800cb0a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cae0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cae2:	2100      	movs	r1, #0
 800cae4:	4618      	mov	r0, r3
 800cae6:	f001 fbd1 	bl	800e28c <ff_convert>
 800caea:	4603      	mov	r3, r0
 800caec:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800caee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d004      	beq.n	800cafe <create_name+0x246>
 800caf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800caf6:	3b80      	subs	r3, #128	@ 0x80
 800caf8:	4a23      	ldr	r2, [pc, #140]	@ (800cb88 <create_name+0x2d0>)
 800cafa:	5cd3      	ldrb	r3, [r2, r3]
 800cafc:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cafe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb02:	f043 0302 	orr.w	r3, r3, #2
 800cb06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cb0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d007      	beq.n	800cb20 <create_name+0x268>
 800cb10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb12:	4619      	mov	r1, r3
 800cb14:	481d      	ldr	r0, [pc, #116]	@ (800cb8c <create_name+0x2d4>)
 800cb16:	f7fe fc00 	bl	800b31a <chk_chr>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d008      	beq.n	800cb32 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cb20:	235f      	movs	r3, #95	@ 0x5f
 800cb22:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cb24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb28:	f043 0303 	orr.w	r3, r3, #3
 800cb2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cb30:	e01b      	b.n	800cb6a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cb32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb34:	2b40      	cmp	r3, #64	@ 0x40
 800cb36:	d909      	bls.n	800cb4c <create_name+0x294>
 800cb38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb3a:	2b5a      	cmp	r3, #90	@ 0x5a
 800cb3c:	d806      	bhi.n	800cb4c <create_name+0x294>
					b |= 2;
 800cb3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb42:	f043 0302 	orr.w	r3, r3, #2
 800cb46:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cb4a:	e00e      	b.n	800cb6a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cb4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb4e:	2b60      	cmp	r3, #96	@ 0x60
 800cb50:	d90b      	bls.n	800cb6a <create_name+0x2b2>
 800cb52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb54:	2b7a      	cmp	r3, #122	@ 0x7a
 800cb56:	d808      	bhi.n	800cb6a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cb58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb5c:	f043 0301 	orr.w	r3, r3, #1
 800cb60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cb64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb66:	3b20      	subs	r3, #32
 800cb68:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cb6a:	6a3b      	ldr	r3, [r7, #32]
 800cb6c:	1c5a      	adds	r2, r3, #1
 800cb6e:	623a      	str	r2, [r7, #32]
 800cb70:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cb72:	b2d1      	uxtb	r1, r2
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	4413      	add	r3, r2
 800cb78:	460a      	mov	r2, r1
 800cb7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800cb7e:	e763      	b.n	800ca48 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cb80:	bf00      	nop
 800cb82:	e006      	b.n	800cb92 <create_name+0x2da>
 800cb84:	08012ed0 	.word	0x08012ed0
 800cb88:	08013958 	.word	0x08013958
 800cb8c:	08012edc 	.word	0x08012edc
			if (si > di) break;			/* No extension */
 800cb90:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cb98:	2be5      	cmp	r3, #229	@ 0xe5
 800cb9a:	d103      	bne.n	800cba4 <create_name+0x2ec>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2205      	movs	r2, #5
 800cba0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	2b08      	cmp	r3, #8
 800cba8:	d104      	bne.n	800cbb4 <create_name+0x2fc>
 800cbaa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cbb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbb8:	f003 030c 	and.w	r3, r3, #12
 800cbbc:	2b0c      	cmp	r3, #12
 800cbbe:	d005      	beq.n	800cbcc <create_name+0x314>
 800cbc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbc4:	f003 0303 	and.w	r3, r3, #3
 800cbc8:	2b03      	cmp	r3, #3
 800cbca:	d105      	bne.n	800cbd8 <create_name+0x320>
 800cbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbd0:	f043 0302 	orr.w	r3, r3, #2
 800cbd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cbd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbdc:	f003 0302 	and.w	r3, r3, #2
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d117      	bne.n	800cc14 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cbe4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbe8:	f003 0303 	and.w	r3, r3, #3
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d105      	bne.n	800cbfc <create_name+0x344>
 800cbf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbf4:	f043 0310 	orr.w	r3, r3, #16
 800cbf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cbfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc00:	f003 030c 	and.w	r3, r3, #12
 800cc04:	2b04      	cmp	r3, #4
 800cc06:	d105      	bne.n	800cc14 <create_name+0x35c>
 800cc08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc0c:	f043 0308 	orr.w	r3, r3, #8
 800cc10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cc1a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800cc1e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3728      	adds	r7, #40	@ 0x28
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cc3c:	e002      	b.n	800cc44 <follow_path+0x1c>
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	3301      	adds	r3, #1
 800cc42:	603b      	str	r3, [r7, #0]
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b2f      	cmp	r3, #47	@ 0x2f
 800cc4a:	d0f8      	beq.n	800cc3e <follow_path+0x16>
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	2b5c      	cmp	r3, #92	@ 0x5c
 800cc52:	d0f4      	beq.n	800cc3e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	2200      	movs	r2, #0
 800cc58:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	2b1f      	cmp	r3, #31
 800cc60:	d80a      	bhi.n	800cc78 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2280      	movs	r2, #128	@ 0x80
 800cc66:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7ff f8fe 	bl	800be6e <dir_sdi>
 800cc72:	4603      	mov	r3, r0
 800cc74:	75fb      	strb	r3, [r7, #23]
 800cc76:	e048      	b.n	800cd0a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc78:	463b      	mov	r3, r7
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7ff fe1b 	bl	800c8b8 <create_name>
 800cc82:	4603      	mov	r3, r0
 800cc84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d139      	bne.n	800cd00 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f7ff fc5a 	bl	800c546 <dir_find>
 800cc92:	4603      	mov	r3, r0
 800cc94:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cc9c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00a      	beq.n	800ccba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cca4:	7dfb      	ldrb	r3, [r7, #23]
 800cca6:	2b04      	cmp	r3, #4
 800cca8:	d12c      	bne.n	800cd04 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ccaa:	7afb      	ldrb	r3, [r7, #11]
 800ccac:	f003 0304 	and.w	r3, r3, #4
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d127      	bne.n	800cd04 <follow_path+0xdc>
 800ccb4:	2305      	movs	r3, #5
 800ccb6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ccb8:	e024      	b.n	800cd04 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ccba:	7afb      	ldrb	r3, [r7, #11]
 800ccbc:	f003 0304 	and.w	r3, r3, #4
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d121      	bne.n	800cd08 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	799b      	ldrb	r3, [r3, #6]
 800ccc8:	f003 0310 	and.w	r3, r3, #16
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d102      	bne.n	800ccd6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ccd0:	2305      	movs	r3, #5
 800ccd2:	75fb      	strb	r3, [r7, #23]
 800ccd4:	e019      	b.n	800cd0a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	695b      	ldr	r3, [r3, #20]
 800cce0:	68fa      	ldr	r2, [r7, #12]
 800cce2:	8992      	ldrh	r2, [r2, #12]
 800cce4:	fbb3 f0f2 	udiv	r0, r3, r2
 800cce8:	fb00 f202 	mul.w	r2, r0, r2
 800ccec:	1a9b      	subs	r3, r3, r2
 800ccee:	440b      	add	r3, r1
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f7ff fa61 	bl	800c1ba <ld_clust>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ccfe:	e7bb      	b.n	800cc78 <follow_path+0x50>
			if (res != FR_OK) break;
 800cd00:	bf00      	nop
 800cd02:	e002      	b.n	800cd0a <follow_path+0xe2>
				break;
 800cd04:	bf00      	nop
 800cd06:	e000      	b.n	800cd0a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd08:	bf00      	nop
			}
		}
	}

	return res;
 800cd0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3718      	adds	r7, #24
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b087      	sub	sp, #28
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd20:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d031      	beq.n	800cd8e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	617b      	str	r3, [r7, #20]
 800cd30:	e002      	b.n	800cd38 <get_ldnumber+0x24>
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	3301      	adds	r3, #1
 800cd36:	617b      	str	r3, [r7, #20]
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	2b1f      	cmp	r3, #31
 800cd3e:	d903      	bls.n	800cd48 <get_ldnumber+0x34>
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	2b3a      	cmp	r3, #58	@ 0x3a
 800cd46:	d1f4      	bne.n	800cd32 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	2b3a      	cmp	r3, #58	@ 0x3a
 800cd4e:	d11c      	bne.n	800cd8a <get_ldnumber+0x76>
			tp = *path;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	1c5a      	adds	r2, r3, #1
 800cd5a:	60fa      	str	r2, [r7, #12]
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	3b30      	subs	r3, #48	@ 0x30
 800cd60:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	2b09      	cmp	r3, #9
 800cd66:	d80e      	bhi.n	800cd86 <get_ldnumber+0x72>
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d10a      	bne.n	800cd86 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d107      	bne.n	800cd86 <get_ldnumber+0x72>
					vol = (int)i;
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	617b      	str	r3, [r7, #20]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	e002      	b.n	800cd90 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cd8e:	693b      	ldr	r3, [r7, #16]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	371c      	adds	r7, #28
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	70da      	strb	r2, [r3, #3]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cdb4:	6839      	ldr	r1, [r7, #0]
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7fe fc7a 	bl	800b6b0 <move_window>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d001      	beq.n	800cdc6 <check_fs+0x2a>
 800cdc2:	2304      	movs	r3, #4
 800cdc4:	e038      	b.n	800ce38 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	3338      	adds	r3, #56	@ 0x38
 800cdca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fe f9be 	bl	800b150 <ld_word>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d001      	beq.n	800cde4 <check_fs+0x48>
 800cde0:	2303      	movs	r3, #3
 800cde2:	e029      	b.n	800ce38 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cdea:	2be9      	cmp	r3, #233	@ 0xe9
 800cdec:	d009      	beq.n	800ce02 <check_fs+0x66>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cdf4:	2beb      	cmp	r3, #235	@ 0xeb
 800cdf6:	d11e      	bne.n	800ce36 <check_fs+0x9a>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800cdfe:	2b90      	cmp	r3, #144	@ 0x90
 800ce00:	d119      	bne.n	800ce36 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	3338      	adds	r3, #56	@ 0x38
 800ce06:	3336      	adds	r3, #54	@ 0x36
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fe f9b9 	bl	800b180 <ld_dword>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ce14:	4a0a      	ldr	r2, [pc, #40]	@ (800ce40 <check_fs+0xa4>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d101      	bne.n	800ce1e <check_fs+0x82>
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	e00c      	b.n	800ce38 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	3338      	adds	r3, #56	@ 0x38
 800ce22:	3352      	adds	r3, #82	@ 0x52
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fe f9ab 	bl	800b180 <ld_dword>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	4a05      	ldr	r2, [pc, #20]	@ (800ce44 <check_fs+0xa8>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d101      	bne.n	800ce36 <check_fs+0x9a>
 800ce32:	2300      	movs	r3, #0
 800ce34:	e000      	b.n	800ce38 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ce36:	2302      	movs	r3, #2
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	00544146 	.word	0x00544146
 800ce44:	33544146 	.word	0x33544146

0800ce48 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b096      	sub	sp, #88	@ 0x58
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	4613      	mov	r3, r2
 800ce54:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f7ff ff59 	bl	800cd14 <get_ldnumber>
 800ce62:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	da01      	bge.n	800ce6e <find_volume+0x26>
 800ce6a:	230b      	movs	r3, #11
 800ce6c:	e265      	b.n	800d33a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ce6e:	4a9f      	ldr	r2, [pc, #636]	@ (800d0ec <find_volume+0x2a4>)
 800ce70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce76:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ce78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d101      	bne.n	800ce82 <find_volume+0x3a>
 800ce7e:	230c      	movs	r3, #12
 800ce80:	e25b      	b.n	800d33a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce86:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	f023 0301 	bic.w	r3, r3, #1
 800ce8e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ce90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d01a      	beq.n	800cece <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ce98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce9a:	785b      	ldrb	r3, [r3, #1]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe f8b9 	bl	800b014 <disk_status>
 800cea2:	4603      	mov	r3, r0
 800cea4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cea8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ceac:	f003 0301 	and.w	r3, r3, #1
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d10c      	bne.n	800cece <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ceb4:	79fb      	ldrb	r3, [r7, #7]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d007      	beq.n	800ceca <find_volume+0x82>
 800ceba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cebe:	f003 0304 	and.w	r3, r3, #4
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d001      	beq.n	800ceca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cec6:	230a      	movs	r3, #10
 800cec8:	e237      	b.n	800d33a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ceca:	2300      	movs	r3, #0
 800cecc:	e235      	b.n	800d33a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced0:	2200      	movs	r2, #0
 800ced2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ced4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ced6:	b2da      	uxtb	r2, r3
 800ced8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceda:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cede:	785b      	ldrb	r3, [r3, #1]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fe f8b1 	bl	800b048 <disk_initialize>
 800cee6:	4603      	mov	r3, r0
 800cee8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ceec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cef0:	f003 0301 	and.w	r3, r3, #1
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d001      	beq.n	800cefc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cef8:	2303      	movs	r3, #3
 800cefa:	e21e      	b.n	800d33a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d007      	beq.n	800cf12 <find_volume+0xca>
 800cf02:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf06:	f003 0304 	and.w	r3, r3, #4
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d001      	beq.n	800cf12 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cf0e:	230a      	movs	r3, #10
 800cf10:	e213      	b.n	800d33a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800cf12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf14:	7858      	ldrb	r0, [r3, #1]
 800cf16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf18:	330c      	adds	r3, #12
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	2102      	movs	r1, #2
 800cf1e:	f7fe f8f9 	bl	800b114 <disk_ioctl>
 800cf22:	4603      	mov	r3, r0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d001      	beq.n	800cf2c <find_volume+0xe4>
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e206      	b.n	800d33a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800cf2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf2e:	899b      	ldrh	r3, [r3, #12]
 800cf30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf34:	d80d      	bhi.n	800cf52 <find_volume+0x10a>
 800cf36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf38:	899b      	ldrh	r3, [r3, #12]
 800cf3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf3e:	d308      	bcc.n	800cf52 <find_volume+0x10a>
 800cf40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf42:	899b      	ldrh	r3, [r3, #12]
 800cf44:	461a      	mov	r2, r3
 800cf46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf48:	899b      	ldrh	r3, [r3, #12]
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d001      	beq.n	800cf56 <find_volume+0x10e>
 800cf52:	2301      	movs	r3, #1
 800cf54:	e1f1      	b.n	800d33a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cf56:	2300      	movs	r3, #0
 800cf58:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cf5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cf5c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cf5e:	f7ff ff1d 	bl	800cd9c <check_fs>
 800cf62:	4603      	mov	r3, r0
 800cf64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cf68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d149      	bne.n	800d004 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf70:	2300      	movs	r3, #0
 800cf72:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf74:	e01e      	b.n	800cfb4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cf76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf78:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800cf7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf7e:	011b      	lsls	r3, r3, #4
 800cf80:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cf84:	4413      	add	r3, r2
 800cf86:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cf88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf8a:	3304      	adds	r3, #4
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d006      	beq.n	800cfa0 <find_volume+0x158>
 800cf92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf94:	3308      	adds	r3, #8
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7fe f8f2 	bl	800b180 <ld_dword>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	e000      	b.n	800cfa2 <find_volume+0x15a>
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	3358      	adds	r3, #88	@ 0x58
 800cfa8:	443b      	add	r3, r7
 800cfaa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cfae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfb6:	2b03      	cmp	r3, #3
 800cfb8:	d9dd      	bls.n	800cf76 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cfba:	2300      	movs	r3, #0
 800cfbc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800cfbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d002      	beq.n	800cfca <find_volume+0x182>
 800cfc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfc6:	3b01      	subs	r3, #1
 800cfc8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cfca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	3358      	adds	r3, #88	@ 0x58
 800cfd0:	443b      	add	r3, r7
 800cfd2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cfd6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cfd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d005      	beq.n	800cfea <find_volume+0x1a2>
 800cfde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cfe0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cfe2:	f7ff fedb 	bl	800cd9c <check_fs>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	e000      	b.n	800cfec <find_volume+0x1a4>
 800cfea:	2303      	movs	r3, #3
 800cfec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cff0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d905      	bls.n	800d004 <find_volume+0x1bc>
 800cff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cffa:	3301      	adds	r3, #1
 800cffc:	643b      	str	r3, [r7, #64]	@ 0x40
 800cffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d000:	2b03      	cmp	r3, #3
 800d002:	d9e2      	bls.n	800cfca <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d004:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d008:	2b04      	cmp	r3, #4
 800d00a:	d101      	bne.n	800d010 <find_volume+0x1c8>
 800d00c:	2301      	movs	r3, #1
 800d00e:	e194      	b.n	800d33a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d010:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d014:	2b01      	cmp	r3, #1
 800d016:	d901      	bls.n	800d01c <find_volume+0x1d4>
 800d018:	230d      	movs	r3, #13
 800d01a:	e18e      	b.n	800d33a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d01e:	3338      	adds	r3, #56	@ 0x38
 800d020:	330b      	adds	r3, #11
 800d022:	4618      	mov	r0, r3
 800d024:	f7fe f894 	bl	800b150 <ld_word>
 800d028:	4603      	mov	r3, r0
 800d02a:	461a      	mov	r2, r3
 800d02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02e:	899b      	ldrh	r3, [r3, #12]
 800d030:	429a      	cmp	r2, r3
 800d032:	d001      	beq.n	800d038 <find_volume+0x1f0>
 800d034:	230d      	movs	r3, #13
 800d036:	e180      	b.n	800d33a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03a:	3338      	adds	r3, #56	@ 0x38
 800d03c:	3316      	adds	r3, #22
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe f886 	bl	800b150 <ld_word>
 800d044:	4603      	mov	r3, r0
 800d046:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d106      	bne.n	800d05c <find_volume+0x214>
 800d04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d050:	3338      	adds	r3, #56	@ 0x38
 800d052:	3324      	adds	r3, #36	@ 0x24
 800d054:	4618      	mov	r0, r3
 800d056:	f7fe f893 	bl	800b180 <ld_dword>
 800d05a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d05e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d060:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d064:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800d068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d06a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d06e:	789b      	ldrb	r3, [r3, #2]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d005      	beq.n	800d080 <find_volume+0x238>
 800d074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d076:	789b      	ldrb	r3, [r3, #2]
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d001      	beq.n	800d080 <find_volume+0x238>
 800d07c:	230d      	movs	r3, #13
 800d07e:	e15c      	b.n	800d33a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d082:	789b      	ldrb	r3, [r3, #2]
 800d084:	461a      	mov	r2, r3
 800d086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d088:	fb02 f303 	mul.w	r3, r2, r3
 800d08c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d090:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d094:	461a      	mov	r2, r3
 800d096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d098:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d09c:	895b      	ldrh	r3, [r3, #10]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d008      	beq.n	800d0b4 <find_volume+0x26c>
 800d0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a4:	895b      	ldrh	r3, [r3, #10]
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0aa:	895b      	ldrh	r3, [r3, #10]
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <find_volume+0x270>
 800d0b4:	230d      	movs	r3, #13
 800d0b6:	e140      	b.n	800d33a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ba:	3338      	adds	r3, #56	@ 0x38
 800d0bc:	3311      	adds	r3, #17
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7fe f846 	bl	800b150 <ld_word>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ce:	891b      	ldrh	r3, [r3, #8]
 800d0d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0d2:	8992      	ldrh	r2, [r2, #12]
 800d0d4:	0952      	lsrs	r2, r2, #5
 800d0d6:	b292      	uxth	r2, r2
 800d0d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0dc:	fb01 f202 	mul.w	r2, r1, r2
 800d0e0:	1a9b      	subs	r3, r3, r2
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d003      	beq.n	800d0f0 <find_volume+0x2a8>
 800d0e8:	230d      	movs	r3, #13
 800d0ea:	e126      	b.n	800d33a <find_volume+0x4f2>
 800d0ec:	20003058 	.word	0x20003058

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f2:	3338      	adds	r3, #56	@ 0x38
 800d0f4:	3313      	adds	r3, #19
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fe f82a 	bl	800b150 <ld_word>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d102:	2b00      	cmp	r3, #0
 800d104:	d106      	bne.n	800d114 <find_volume+0x2cc>
 800d106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d108:	3338      	adds	r3, #56	@ 0x38
 800d10a:	3320      	adds	r3, #32
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fe f837 	bl	800b180 <ld_dword>
 800d112:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d116:	3338      	adds	r3, #56	@ 0x38
 800d118:	330e      	adds	r3, #14
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7fe f818 	bl	800b150 <ld_word>
 800d120:	4603      	mov	r3, r0
 800d122:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d124:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <find_volume+0x2e6>
 800d12a:	230d      	movs	r3, #13
 800d12c:	e105      	b.n	800d33a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d12e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d132:	4413      	add	r3, r2
 800d134:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d136:	8911      	ldrh	r1, [r2, #8]
 800d138:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d13a:	8992      	ldrh	r2, [r2, #12]
 800d13c:	0952      	lsrs	r2, r2, #5
 800d13e:	b292      	uxth	r2, r2
 800d140:	fbb1 f2f2 	udiv	r2, r1, r2
 800d144:	b292      	uxth	r2, r2
 800d146:	4413      	add	r3, r2
 800d148:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d14a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14e:	429a      	cmp	r2, r3
 800d150:	d201      	bcs.n	800d156 <find_volume+0x30e>
 800d152:	230d      	movs	r3, #13
 800d154:	e0f1      	b.n	800d33a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d156:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15a:	1ad3      	subs	r3, r2, r3
 800d15c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d15e:	8952      	ldrh	r2, [r2, #10]
 800d160:	fbb3 f3f2 	udiv	r3, r3, r2
 800d164:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <find_volume+0x328>
 800d16c:	230d      	movs	r3, #13
 800d16e:	e0e4      	b.n	800d33a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800d170:	2303      	movs	r3, #3
 800d172:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d178:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d802      	bhi.n	800d186 <find_volume+0x33e>
 800d180:	2302      	movs	r3, #2
 800d182:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d188:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d802      	bhi.n	800d196 <find_volume+0x34e>
 800d190:	2301      	movs	r3, #1
 800d192:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d198:	1c9a      	adds	r2, r3, #2
 800d19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d19c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1a2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d1a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d1a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1a8:	441a      	add	r2, r3
 800d1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ac:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d1ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b2:	441a      	add	r2, r3
 800d1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800d1b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d1bc:	2b03      	cmp	r3, #3
 800d1be:	d11e      	bne.n	800d1fe <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c2:	3338      	adds	r3, #56	@ 0x38
 800d1c4:	332a      	adds	r3, #42	@ 0x2a
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fd ffc2 	bl	800b150 <ld_word>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <find_volume+0x38e>
 800d1d2:	230d      	movs	r3, #13
 800d1d4:	e0b1      	b.n	800d33a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d8:	891b      	ldrh	r3, [r3, #8]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d001      	beq.n	800d1e2 <find_volume+0x39a>
 800d1de:	230d      	movs	r3, #13
 800d1e0:	e0ab      	b.n	800d33a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e4:	3338      	adds	r3, #56	@ 0x38
 800d1e6:	332c      	adds	r3, #44	@ 0x2c
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fd ffc9 	bl	800b180 <ld_dword>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f6:	69db      	ldr	r3, [r3, #28]
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1fc:	e01f      	b.n	800d23e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d200:	891b      	ldrh	r3, [r3, #8]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d101      	bne.n	800d20a <find_volume+0x3c2>
 800d206:	230d      	movs	r3, #13
 800d208:	e097      	b.n	800d33a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d20e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d210:	441a      	add	r2, r3
 800d212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d214:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d216:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	d103      	bne.n	800d226 <find_volume+0x3de>
 800d21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d220:	69db      	ldr	r3, [r3, #28]
 800d222:	005b      	lsls	r3, r3, #1
 800d224:	e00a      	b.n	800d23c <find_volume+0x3f4>
 800d226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d228:	69da      	ldr	r2, [r3, #28]
 800d22a:	4613      	mov	r3, r2
 800d22c:	005b      	lsls	r3, r3, #1
 800d22e:	4413      	add	r3, r2
 800d230:	085a      	lsrs	r2, r3, #1
 800d232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d234:	69db      	ldr	r3, [r3, #28]
 800d236:	f003 0301 	and.w	r3, r3, #1
 800d23a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d23c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d240:	6a1a      	ldr	r2, [r3, #32]
 800d242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d244:	899b      	ldrh	r3, [r3, #12]
 800d246:	4619      	mov	r1, r3
 800d248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d24a:	440b      	add	r3, r1
 800d24c:	3b01      	subs	r3, #1
 800d24e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d250:	8989      	ldrh	r1, [r1, #12]
 800d252:	fbb3 f3f1 	udiv	r3, r3, r1
 800d256:	429a      	cmp	r2, r3
 800d258:	d201      	bcs.n	800d25e <find_volume+0x416>
 800d25a:	230d      	movs	r3, #13
 800d25c:	e06d      	b.n	800d33a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d260:	f04f 32ff 	mov.w	r2, #4294967295
 800d264:	619a      	str	r2, [r3, #24]
 800d266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d268:	699a      	ldr	r2, [r3, #24]
 800d26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d26c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d270:	2280      	movs	r2, #128	@ 0x80
 800d272:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d274:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d278:	2b03      	cmp	r3, #3
 800d27a:	d149      	bne.n	800d310 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d27e:	3338      	adds	r3, #56	@ 0x38
 800d280:	3330      	adds	r3, #48	@ 0x30
 800d282:	4618      	mov	r0, r3
 800d284:	f7fd ff64 	bl	800b150 <ld_word>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d140      	bne.n	800d310 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d28e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d290:	3301      	adds	r3, #1
 800d292:	4619      	mov	r1, r3
 800d294:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d296:	f7fe fa0b 	bl	800b6b0 <move_window>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d137      	bne.n	800d310 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a8:	3338      	adds	r3, #56	@ 0x38
 800d2aa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fd ff4e 	bl	800b150 <ld_word>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d127      	bne.n	800d310 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c2:	3338      	adds	r3, #56	@ 0x38
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7fd ff5b 	bl	800b180 <ld_dword>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	4a1d      	ldr	r2, [pc, #116]	@ (800d344 <find_volume+0x4fc>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d11e      	bne.n	800d310 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d4:	3338      	adds	r3, #56	@ 0x38
 800d2d6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7fd ff50 	bl	800b180 <ld_dword>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	4a19      	ldr	r2, [pc, #100]	@ (800d348 <find_volume+0x500>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d113      	bne.n	800d310 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ea:	3338      	adds	r3, #56	@ 0x38
 800d2ec:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7fd ff45 	bl	800b180 <ld_dword>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2fa:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2fe:	3338      	adds	r3, #56	@ 0x38
 800d300:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d304:	4618      	mov	r0, r3
 800d306:	f7fd ff3b 	bl	800b180 <ld_dword>
 800d30a:	4602      	mov	r2, r0
 800d30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d30e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d312:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d316:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d318:	4b0c      	ldr	r3, [pc, #48]	@ (800d34c <find_volume+0x504>)
 800d31a:	881b      	ldrh	r3, [r3, #0]
 800d31c:	3301      	adds	r3, #1
 800d31e:	b29a      	uxth	r2, r3
 800d320:	4b0a      	ldr	r3, [pc, #40]	@ (800d34c <find_volume+0x504>)
 800d322:	801a      	strh	r2, [r3, #0]
 800d324:	4b09      	ldr	r3, [pc, #36]	@ (800d34c <find_volume+0x504>)
 800d326:	881a      	ldrh	r2, [r3, #0]
 800d328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32e:	4a08      	ldr	r2, [pc, #32]	@ (800d350 <find_volume+0x508>)
 800d330:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d332:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d334:	f7fe f954 	bl	800b5e0 <clear_lock>
#endif
	return FR_OK;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3758      	adds	r7, #88	@ 0x58
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	41615252 	.word	0x41615252
 800d348:	61417272 	.word	0x61417272
 800d34c:	2000305c 	.word	0x2000305c
 800d350:	20003080 	.word	0x20003080

0800d354 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d35e:	2309      	movs	r3, #9
 800d360:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d01c      	beq.n	800d3a2 <validate+0x4e>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d018      	beq.n	800d3a2 <validate+0x4e>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d013      	beq.n	800d3a2 <validate+0x4e>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	889a      	ldrh	r2, [r3, #4]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	88db      	ldrh	r3, [r3, #6]
 800d384:	429a      	cmp	r2, r3
 800d386:	d10c      	bne.n	800d3a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	785b      	ldrb	r3, [r3, #1]
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fd fe40 	bl	800b014 <disk_status>
 800d394:	4603      	mov	r3, r0
 800d396:	f003 0301 	and.w	r3, r3, #1
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d101      	bne.n	800d3a2 <validate+0x4e>
			res = FR_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d3a2:	7bfb      	ldrb	r3, [r7, #15]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d102      	bne.n	800d3ae <validate+0x5a>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	e000      	b.n	800d3b0 <validate+0x5c>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	683a      	ldr	r2, [r7, #0]
 800d3b2:	6013      	str	r3, [r2, #0]
	return res;
 800d3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
	...

0800d3c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b088      	sub	sp, #32
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	4613      	mov	r3, r2
 800d3cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d3d2:	f107 0310 	add.w	r3, r7, #16
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7ff fc9c 	bl	800cd14 <get_ldnumber>
 800d3dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	da01      	bge.n	800d3e8 <f_mount+0x28>
 800d3e4:	230b      	movs	r3, #11
 800d3e6:	e02b      	b.n	800d440 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d3e8:	4a17      	ldr	r2, [pc, #92]	@ (800d448 <f_mount+0x88>)
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d005      	beq.n	800d404 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d3f8:	69b8      	ldr	r0, [r7, #24]
 800d3fa:	f7fe f8f1 	bl	800b5e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	2200      	movs	r2, #0
 800d402:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d002      	beq.n	800d410 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2200      	movs	r2, #0
 800d40e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	490d      	ldr	r1, [pc, #52]	@ (800d448 <f_mount+0x88>)
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d002      	beq.n	800d426 <f_mount+0x66>
 800d420:	79fb      	ldrb	r3, [r7, #7]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d001      	beq.n	800d42a <f_mount+0x6a>
 800d426:	2300      	movs	r3, #0
 800d428:	e00a      	b.n	800d440 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d42a:	f107 010c 	add.w	r1, r7, #12
 800d42e:	f107 0308 	add.w	r3, r7, #8
 800d432:	2200      	movs	r2, #0
 800d434:	4618      	mov	r0, r3
 800d436:	f7ff fd07 	bl	800ce48 <find_volume>
 800d43a:	4603      	mov	r3, r0
 800d43c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3720      	adds	r7, #32
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	20003058 	.word	0x20003058

0800d44c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b09a      	sub	sp, #104	@ 0x68
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	4613      	mov	r3, r2
 800d458:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d101      	bne.n	800d464 <f_open+0x18>
 800d460:	2309      	movs	r3, #9
 800d462:	e1b7      	b.n	800d7d4 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d464:	79fb      	ldrb	r3, [r7, #7]
 800d466:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d46a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d46c:	79fa      	ldrb	r2, [r7, #7]
 800d46e:	f107 0114 	add.w	r1, r7, #20
 800d472:	f107 0308 	add.w	r3, r7, #8
 800d476:	4618      	mov	r0, r3
 800d478:	f7ff fce6 	bl	800ce48 <find_volume>
 800d47c:	4603      	mov	r3, r0
 800d47e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800d482:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d486:	2b00      	cmp	r3, #0
 800d488:	f040 819b 	bne.w	800d7c2 <f_open+0x376>
		dj.obj.fs = fs;
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d490:	68ba      	ldr	r2, [r7, #8]
 800d492:	f107 0318 	add.w	r3, r7, #24
 800d496:	4611      	mov	r1, r2
 800d498:	4618      	mov	r0, r3
 800d49a:	f7ff fbc5 	bl	800cc28 <follow_path>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d4a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d118      	bne.n	800d4de <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d4ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d4b0:	b25b      	sxtb	r3, r3
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	da03      	bge.n	800d4be <f_open+0x72>
				res = FR_INVALID_NAME;
 800d4b6:	2306      	movs	r3, #6
 800d4b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d4bc:	e00f      	b.n	800d4de <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d4be:	79fb      	ldrb	r3, [r7, #7]
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	bf8c      	ite	hi
 800d4c4:	2301      	movhi	r3, #1
 800d4c6:	2300      	movls	r3, #0
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	f107 0318 	add.w	r3, r7, #24
 800d4d0:	4611      	mov	r1, r2
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fd ff3c 	bl	800b350 <chk_lock>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d4de:	79fb      	ldrb	r3, [r7, #7]
 800d4e0:	f003 031c 	and.w	r3, r3, #28
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d07f      	beq.n	800d5e8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d4e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d017      	beq.n	800d520 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d4f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d4f4:	2b04      	cmp	r3, #4
 800d4f6:	d10e      	bne.n	800d516 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d4f8:	f7fd ff86 	bl	800b408 <enq_lock>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d006      	beq.n	800d510 <f_open+0xc4>
 800d502:	f107 0318 	add.w	r3, r7, #24
 800d506:	4618      	mov	r0, r3
 800d508:	f7ff f8de 	bl	800c6c8 <dir_register>
 800d50c:	4603      	mov	r3, r0
 800d50e:	e000      	b.n	800d512 <f_open+0xc6>
 800d510:	2312      	movs	r3, #18
 800d512:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d516:	79fb      	ldrb	r3, [r7, #7]
 800d518:	f043 0308 	orr.w	r3, r3, #8
 800d51c:	71fb      	strb	r3, [r7, #7]
 800d51e:	e010      	b.n	800d542 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d520:	7fbb      	ldrb	r3, [r7, #30]
 800d522:	f003 0311 	and.w	r3, r3, #17
 800d526:	2b00      	cmp	r3, #0
 800d528:	d003      	beq.n	800d532 <f_open+0xe6>
					res = FR_DENIED;
 800d52a:	2307      	movs	r3, #7
 800d52c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d530:	e007      	b.n	800d542 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d532:	79fb      	ldrb	r3, [r7, #7]
 800d534:	f003 0304 	and.w	r3, r3, #4
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d002      	beq.n	800d542 <f_open+0xf6>
 800d53c:	2308      	movs	r3, #8
 800d53e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d542:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d546:	2b00      	cmp	r3, #0
 800d548:	d168      	bne.n	800d61c <f_open+0x1d0>
 800d54a:	79fb      	ldrb	r3, [r7, #7]
 800d54c:	f003 0308 	and.w	r3, r3, #8
 800d550:	2b00      	cmp	r3, #0
 800d552:	d063      	beq.n	800d61c <f_open+0x1d0>
				dw = GET_FATTIME();
 800d554:	f7fd fd00 	bl	800af58 <get_fattime>
 800d558:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d55c:	330e      	adds	r3, #14
 800d55e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d560:	4618      	mov	r0, r3
 800d562:	f7fd fe4b 	bl	800b1fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d568:	3316      	adds	r3, #22
 800d56a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7fd fe45 	bl	800b1fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d574:	330b      	adds	r3, #11
 800d576:	2220      	movs	r2, #32
 800d578:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d57e:	4611      	mov	r1, r2
 800d580:	4618      	mov	r0, r3
 800d582:	f7fe fe1a 	bl	800c1ba <ld_clust>
 800d586:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d58c:	2200      	movs	r2, #0
 800d58e:	4618      	mov	r0, r3
 800d590:	f7fe fe32 	bl	800c1f8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d596:	331c      	adds	r3, #28
 800d598:	2100      	movs	r1, #0
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fd fe2e 	bl	800b1fc <st_dword>
					fs->wflag = 1;
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d5a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d037      	beq.n	800d61c <f_open+0x1d0>
						dw = fs->winsect;
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5b0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d5b2:	f107 0318 	add.w	r3, r7, #24
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7fe fb22 	bl	800bc04 <remove_chain>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800d5c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d126      	bne.n	800d61c <f_open+0x1d0>
							res = move_window(fs, dw);
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fe f86c 	bl	800b6b0 <move_window>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5e2:	3a01      	subs	r2, #1
 800d5e4:	615a      	str	r2, [r3, #20]
 800d5e6:	e019      	b.n	800d61c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d5e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d115      	bne.n	800d61c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d5f0:	7fbb      	ldrb	r3, [r7, #30]
 800d5f2:	f003 0310 	and.w	r3, r3, #16
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d003      	beq.n	800d602 <f_open+0x1b6>
					res = FR_NO_FILE;
 800d5fa:	2304      	movs	r3, #4
 800d5fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d600:	e00c      	b.n	800d61c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d602:	79fb      	ldrb	r3, [r7, #7]
 800d604:	f003 0302 	and.w	r3, r3, #2
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d007      	beq.n	800d61c <f_open+0x1d0>
 800d60c:	7fbb      	ldrb	r3, [r7, #30]
 800d60e:	f003 0301 	and.w	r3, r3, #1
 800d612:	2b00      	cmp	r3, #0
 800d614:	d002      	beq.n	800d61c <f_open+0x1d0>
						res = FR_DENIED;
 800d616:	2307      	movs	r3, #7
 800d618:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d61c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d620:	2b00      	cmp	r3, #0
 800d622:	d126      	bne.n	800d672 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d624:	79fb      	ldrb	r3, [r7, #7]
 800d626:	f003 0308 	and.w	r3, r3, #8
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d003      	beq.n	800d636 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d62e:	79fb      	ldrb	r3, [r7, #7]
 800d630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d634:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d63e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d644:	79fb      	ldrb	r3, [r7, #7]
 800d646:	2b01      	cmp	r3, #1
 800d648:	bf8c      	ite	hi
 800d64a:	2301      	movhi	r3, #1
 800d64c:	2300      	movls	r3, #0
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	461a      	mov	r2, r3
 800d652:	f107 0318 	add.w	r3, r7, #24
 800d656:	4611      	mov	r1, r2
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fd fef7 	bl	800b44c <inc_lock>
 800d65e:	4602      	mov	r2, r0
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	691b      	ldr	r3, [r3, #16]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d102      	bne.n	800d672 <f_open+0x226>
 800d66c:	2302      	movs	r3, #2
 800d66e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d672:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d676:	2b00      	cmp	r3, #0
 800d678:	f040 80a3 	bne.w	800d7c2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d680:	4611      	mov	r1, r2
 800d682:	4618      	mov	r0, r3
 800d684:	f7fe fd99 	bl	800c1ba <ld_clust>
 800d688:	4602      	mov	r2, r0
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d690:	331c      	adds	r3, #28
 800d692:	4618      	mov	r0, r3
 800d694:	f7fd fd74 	bl	800b180 <ld_dword>
 800d698:	4602      	mov	r2, r0
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d6a4:	697a      	ldr	r2, [r7, #20]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	88da      	ldrh	r2, [r3, #6]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	79fa      	ldrb	r2, [r7, #7]
 800d6b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	3330      	adds	r3, #48	@ 0x30
 800d6ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fd fdde 	bl	800b296 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	f003 0320 	and.w	r3, r3, #32
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d06e      	beq.n	800d7c2 <f_open+0x376>
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d06a      	beq.n	800d7c2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	68da      	ldr	r2, [r3, #12]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	895b      	ldrh	r3, [r3, #10]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	899b      	ldrh	r3, [r3, #12]
 800d6fe:	fb02 f303 	mul.w	r3, r2, r3
 800d702:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d710:	e016      	b.n	800d740 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d716:	4618      	mov	r0, r3
 800d718:	f7fe f887 	bl	800b82a <get_fat>
 800d71c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d71e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d720:	2b01      	cmp	r3, #1
 800d722:	d802      	bhi.n	800d72a <f_open+0x2de>
 800d724:	2302      	movs	r3, #2
 800d726:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d72a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d730:	d102      	bne.n	800d738 <f_open+0x2ec>
 800d732:	2301      	movs	r3, #1
 800d734:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d738:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d73a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d73c:	1ad3      	subs	r3, r2, r3
 800d73e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d740:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d744:	2b00      	cmp	r3, #0
 800d746:	d103      	bne.n	800d750 <f_open+0x304>
 800d748:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d74a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d8e0      	bhi.n	800d712 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d754:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d756:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d131      	bne.n	800d7c2 <f_open+0x376>
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	899b      	ldrh	r3, [r3, #12]
 800d762:	461a      	mov	r2, r3
 800d764:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d766:	fbb3 f1f2 	udiv	r1, r3, r2
 800d76a:	fb01 f202 	mul.w	r2, r1, r2
 800d76e:	1a9b      	subs	r3, r3, r2
 800d770:	2b00      	cmp	r3, #0
 800d772:	d026      	beq.n	800d7c2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fe f837 	bl	800b7ec <clust2sect>
 800d77e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d782:	2b00      	cmp	r3, #0
 800d784:	d103      	bne.n	800d78e <f_open+0x342>
						res = FR_INT_ERR;
 800d786:	2302      	movs	r3, #2
 800d788:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d78c:	e019      	b.n	800d7c2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	899b      	ldrh	r3, [r3, #12]
 800d792:	461a      	mov	r2, r3
 800d794:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d796:	fbb3 f2f2 	udiv	r2, r3, r2
 800d79a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d79c:	441a      	add	r2, r3
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	7858      	ldrb	r0, [r3, #1]
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6a1a      	ldr	r2, [r3, #32]
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	f7fd fc6f 	bl	800b094 <disk_read>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d002      	beq.n	800d7c2 <f_open+0x376>
 800d7bc:	2301      	movs	r3, #1
 800d7be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d7c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d002      	beq.n	800d7d0 <f_open+0x384>
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d7d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3768      	adds	r7, #104	@ 0x68
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08c      	sub	sp, #48	@ 0x30
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
 800d7e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f107 0210 	add.w	r2, r7, #16
 800d7fa:	4611      	mov	r1, r2
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7ff fda9 	bl	800d354 <validate>
 800d802:	4603      	mov	r3, r0
 800d804:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d808:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d107      	bne.n	800d820 <f_write+0x44>
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	7d5b      	ldrb	r3, [r3, #21]
 800d814:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d818:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d002      	beq.n	800d826 <f_write+0x4a>
 800d820:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d824:	e16a      	b.n	800dafc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	7d1b      	ldrb	r3, [r3, #20]
 800d82a:	f003 0302 	and.w	r3, r3, #2
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <f_write+0x5a>
 800d832:	2307      	movs	r3, #7
 800d834:	e162      	b.n	800dafc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	699a      	ldr	r2, [r3, #24]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	441a      	add	r2, r3
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	429a      	cmp	r2, r3
 800d844:	f080 814c 	bcs.w	800dae0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	699b      	ldr	r3, [r3, #24]
 800d84c:	43db      	mvns	r3, r3
 800d84e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d850:	e146      	b.n	800dae0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	699b      	ldr	r3, [r3, #24]
 800d856:	693a      	ldr	r2, [r7, #16]
 800d858:	8992      	ldrh	r2, [r2, #12]
 800d85a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d85e:	fb01 f202 	mul.w	r2, r1, r2
 800d862:	1a9b      	subs	r3, r3, r2
 800d864:	2b00      	cmp	r3, #0
 800d866:	f040 80f1 	bne.w	800da4c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	699b      	ldr	r3, [r3, #24]
 800d86e:	693a      	ldr	r2, [r7, #16]
 800d870:	8992      	ldrh	r2, [r2, #12]
 800d872:	fbb3 f3f2 	udiv	r3, r3, r2
 800d876:	693a      	ldr	r2, [r7, #16]
 800d878:	8952      	ldrh	r2, [r2, #10]
 800d87a:	3a01      	subs	r2, #1
 800d87c:	4013      	ands	r3, r2
 800d87e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d143      	bne.n	800d90e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	699b      	ldr	r3, [r3, #24]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10c      	bne.n	800d8a8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d896:	2b00      	cmp	r3, #0
 800d898:	d11a      	bne.n	800d8d0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2100      	movs	r1, #0
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fe fa15 	bl	800bcce <create_chain>
 800d8a4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d8a6:	e013      	b.n	800d8d0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d007      	beq.n	800d8c0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	699b      	ldr	r3, [r3, #24]
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	f7fe faa1 	bl	800bdfe <clmt_clust>
 800d8bc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d8be:	e007      	b.n	800d8d0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	69db      	ldr	r3, [r3, #28]
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	4610      	mov	r0, r2
 800d8ca:	f7fe fa00 	bl	800bcce <create_chain>
 800d8ce:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 8109 	beq.w	800daea <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d104      	bne.n	800d8e8 <f_write+0x10c>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2202      	movs	r2, #2
 800d8e2:	755a      	strb	r2, [r3, #21]
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	e109      	b.n	800dafc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ee:	d104      	bne.n	800d8fa <f_write+0x11e>
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	755a      	strb	r2, [r3, #21]
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e100      	b.n	800dafc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8fe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	689b      	ldr	r3, [r3, #8]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d102      	bne.n	800d90e <f_write+0x132>
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d90c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	7d1b      	ldrb	r3, [r3, #20]
 800d912:	b25b      	sxtb	r3, r3
 800d914:	2b00      	cmp	r3, #0
 800d916:	da18      	bge.n	800d94a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	7858      	ldrb	r0, [r3, #1]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	6a1a      	ldr	r2, [r3, #32]
 800d926:	2301      	movs	r3, #1
 800d928:	f7fd fbd4 	bl	800b0d4 <disk_write>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d004      	beq.n	800d93c <f_write+0x160>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2201      	movs	r2, #1
 800d936:	755a      	strb	r2, [r3, #21]
 800d938:	2301      	movs	r3, #1
 800d93a:	e0df      	b.n	800dafc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	7d1b      	ldrb	r3, [r3, #20]
 800d940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d944:	b2da      	uxtb	r2, r3
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d94a:	693a      	ldr	r2, [r7, #16]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	69db      	ldr	r3, [r3, #28]
 800d950:	4619      	mov	r1, r3
 800d952:	4610      	mov	r0, r2
 800d954:	f7fd ff4a 	bl	800b7ec <clust2sect>
 800d958:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d104      	bne.n	800d96a <f_write+0x18e>
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2202      	movs	r2, #2
 800d964:	755a      	strb	r2, [r3, #21]
 800d966:	2302      	movs	r3, #2
 800d968:	e0c8      	b.n	800dafc <f_write+0x320>
			sect += csect;
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	4413      	add	r3, r2
 800d970:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	899b      	ldrh	r3, [r3, #12]
 800d976:	461a      	mov	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d97e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d043      	beq.n	800da0e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d986:	69ba      	ldr	r2, [r7, #24]
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	4413      	add	r3, r2
 800d98c:	693a      	ldr	r2, [r7, #16]
 800d98e:	8952      	ldrh	r2, [r2, #10]
 800d990:	4293      	cmp	r3, r2
 800d992:	d905      	bls.n	800d9a0 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	895b      	ldrh	r3, [r3, #10]
 800d998:	461a      	mov	r2, r3
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	1ad3      	subs	r3, r2, r3
 800d99e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	7858      	ldrb	r0, [r3, #1]
 800d9a4:	6a3b      	ldr	r3, [r7, #32]
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	69f9      	ldr	r1, [r7, #28]
 800d9aa:	f7fd fb93 	bl	800b0d4 <disk_write>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d004      	beq.n	800d9be <f_write+0x1e2>
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	755a      	strb	r2, [r3, #21]
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e09e      	b.n	800dafc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6a1a      	ldr	r2, [r3, #32]
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	1ad3      	subs	r3, r2, r3
 800d9c6:	6a3a      	ldr	r2, [r7, #32]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d918      	bls.n	800d9fe <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6a1a      	ldr	r2, [r3, #32]
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	693a      	ldr	r2, [r7, #16]
 800d9dc:	8992      	ldrh	r2, [r2, #12]
 800d9de:	fb02 f303 	mul.w	r3, r2, r3
 800d9e2:	69fa      	ldr	r2, [r7, #28]
 800d9e4:	18d1      	adds	r1, r2, r3
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	899b      	ldrh	r3, [r3, #12]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	f7fd fc32 	bl	800b254 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	7d1b      	ldrb	r3, [r3, #20]
 800d9f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9f8:	b2da      	uxtb	r2, r3
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	899b      	ldrh	r3, [r3, #12]
 800da02:	461a      	mov	r2, r3
 800da04:	6a3b      	ldr	r3, [r7, #32]
 800da06:	fb02 f303 	mul.w	r3, r2, r3
 800da0a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800da0c:	e04b      	b.n	800daa6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	697a      	ldr	r2, [r7, #20]
 800da14:	429a      	cmp	r2, r3
 800da16:	d016      	beq.n	800da46 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	699a      	ldr	r2, [r3, #24]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800da20:	429a      	cmp	r2, r3
 800da22:	d210      	bcs.n	800da46 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	7858      	ldrb	r0, [r3, #1]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800da2e:	2301      	movs	r3, #1
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	f7fd fb2f 	bl	800b094 <disk_read>
 800da36:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d004      	beq.n	800da46 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2201      	movs	r2, #1
 800da40:	755a      	strb	r2, [r3, #21]
 800da42:	2301      	movs	r3, #1
 800da44:	e05a      	b.n	800dafc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	697a      	ldr	r2, [r7, #20]
 800da4a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	899b      	ldrh	r3, [r3, #12]
 800da50:	4618      	mov	r0, r3
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	699b      	ldr	r3, [r3, #24]
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	8992      	ldrh	r2, [r2, #12]
 800da5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800da5e:	fb01 f202 	mul.w	r2, r1, r2
 800da62:	1a9b      	subs	r3, r3, r2
 800da64:	1ac3      	subs	r3, r0, r3
 800da66:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800da68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d901      	bls.n	800da74 <f_write+0x298>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	699b      	ldr	r3, [r3, #24]
 800da7e:	693a      	ldr	r2, [r7, #16]
 800da80:	8992      	ldrh	r2, [r2, #12]
 800da82:	fbb3 f0f2 	udiv	r0, r3, r2
 800da86:	fb00 f202 	mul.w	r2, r0, r2
 800da8a:	1a9b      	subs	r3, r3, r2
 800da8c:	440b      	add	r3, r1
 800da8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da90:	69f9      	ldr	r1, [r7, #28]
 800da92:	4618      	mov	r0, r3
 800da94:	f7fd fbde 	bl	800b254 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	7d1b      	ldrb	r3, [r3, #20]
 800da9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800daa0:	b2da      	uxtb	r2, r3
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800daa6:	69fa      	ldr	r2, [r7, #28]
 800daa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daaa:	4413      	add	r3, r2
 800daac:	61fb      	str	r3, [r7, #28]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	699a      	ldr	r2, [r3, #24]
 800dab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab4:	441a      	add	r2, r3
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	619a      	str	r2, [r3, #24]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	68da      	ldr	r2, [r3, #12]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	699b      	ldr	r3, [r3, #24]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	bf38      	it	cc
 800dac6:	461a      	movcc	r2, r3
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	60da      	str	r2, [r3, #12]
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	681a      	ldr	r2, [r3, #0]
 800dad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dad2:	441a      	add	r2, r3
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	601a      	str	r2, [r3, #0]
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dadc:	1ad3      	subs	r3, r2, r3
 800dade:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	f47f aeb5 	bne.w	800d852 <f_write+0x76>
 800dae8:	e000      	b.n	800daec <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800daea:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	7d1b      	ldrb	r3, [r3, #20]
 800daf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daf4:	b2da      	uxtb	r2, r3
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3730      	adds	r7, #48	@ 0x30
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f107 0208 	add.w	r2, r7, #8
 800db12:	4611      	mov	r1, r2
 800db14:	4618      	mov	r0, r3
 800db16:	f7ff fc1d 	bl	800d354 <validate>
 800db1a:	4603      	mov	r3, r0
 800db1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800db1e:	7dfb      	ldrb	r3, [r7, #23]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d168      	bne.n	800dbf6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	7d1b      	ldrb	r3, [r3, #20]
 800db28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d062      	beq.n	800dbf6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	7d1b      	ldrb	r3, [r3, #20]
 800db34:	b25b      	sxtb	r3, r3
 800db36:	2b00      	cmp	r3, #0
 800db38:	da15      	bge.n	800db66 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	7858      	ldrb	r0, [r3, #1]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a1a      	ldr	r2, [r3, #32]
 800db48:	2301      	movs	r3, #1
 800db4a:	f7fd fac3 	bl	800b0d4 <disk_write>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d001      	beq.n	800db58 <f_sync+0x54>
 800db54:	2301      	movs	r3, #1
 800db56:	e04f      	b.n	800dbf8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	7d1b      	ldrb	r3, [r3, #20]
 800db5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db60:	b2da      	uxtb	r2, r3
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800db66:	f7fd f9f7 	bl	800af58 <get_fattime>
 800db6a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db72:	4619      	mov	r1, r3
 800db74:	4610      	mov	r0, r2
 800db76:	f7fd fd9b 	bl	800b6b0 <move_window>
 800db7a:	4603      	mov	r3, r0
 800db7c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800db7e:	7dfb      	ldrb	r3, [r7, #23]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d138      	bne.n	800dbf6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db88:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	330b      	adds	r3, #11
 800db8e:	781a      	ldrb	r2, [r3, #0]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	330b      	adds	r3, #11
 800db94:	f042 0220 	orr.w	r2, r2, #32
 800db98:	b2d2      	uxtb	r2, r2
 800db9a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6818      	ldr	r0, [r3, #0]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	461a      	mov	r2, r3
 800dba6:	68f9      	ldr	r1, [r7, #12]
 800dba8:	f7fe fb26 	bl	800c1f8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f103 021c 	add.w	r2, r3, #28
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	4610      	mov	r0, r2
 800dbba:	f7fd fb1f 	bl	800b1fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	3316      	adds	r3, #22
 800dbc2:	6939      	ldr	r1, [r7, #16]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fd fb19 	bl	800b1fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3312      	adds	r3, #18
 800dbce:	2100      	movs	r1, #0
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fd faf8 	bl	800b1c6 <st_word>
					fs->wflag = 1;
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	2201      	movs	r2, #1
 800dbda:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fd fd94 	bl	800b70c <sync_fs>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	7d1b      	ldrb	r3, [r3, #20]
 800dbec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dbf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3718      	adds	r7, #24
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7ff ff7b 	bl	800db04 <f_sync>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dc12:	7bfb      	ldrb	r3, [r7, #15]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d118      	bne.n	800dc4a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f107 0208 	add.w	r2, r7, #8
 800dc1e:	4611      	mov	r1, r2
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff fb97 	bl	800d354 <validate>
 800dc26:	4603      	mov	r3, r0
 800dc28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dc2a:	7bfb      	ldrb	r3, [r7, #15]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10c      	bne.n	800dc4a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7fd fc97 	bl	800b568 <dec_lock>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dc3e:	7bfb      	ldrb	r3, [r7, #15]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d102      	bne.n	800dc4a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dc4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b090      	sub	sp, #64	@ 0x40
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f107 0208 	add.w	r2, r7, #8
 800dc64:	4611      	mov	r1, r2
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7ff fb74 	bl	800d354 <validate>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800dc72:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d103      	bne.n	800dc82 <f_lseek+0x2e>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	7d5b      	ldrb	r3, [r3, #21]
 800dc7e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800dc82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d002      	beq.n	800dc90 <f_lseek+0x3c>
 800dc8a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dc8e:	e201      	b.n	800e094 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	f000 80d9 	beq.w	800de4c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca0:	d15a      	bne.n	800dd58 <f_lseek+0x104>
			tbl = fp->cltbl;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dca6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800dca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcaa:	1d1a      	adds	r2, r3, #4
 800dcac:	627a      	str	r2, [r7, #36]	@ 0x24
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	617b      	str	r3, [r7, #20]
 800dcb2:	2302      	movs	r3, #2
 800dcb4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	689b      	ldr	r3, [r3, #8]
 800dcba:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800dcbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d03a      	beq.n	800dd38 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800dcc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc4:	613b      	str	r3, [r7, #16]
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dcca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dccc:	3302      	adds	r3, #2
 800dcce:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800dcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd2:	60fb      	str	r3, [r7, #12]
 800dcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fd fda3 	bl	800b82a <get_fat>
 800dce4:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d804      	bhi.n	800dcf6 <f_lseek+0xa2>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2202      	movs	r2, #2
 800dcf0:	755a      	strb	r2, [r3, #21]
 800dcf2:	2302      	movs	r3, #2
 800dcf4:	e1ce      	b.n	800e094 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcfc:	d104      	bne.n	800dd08 <f_lseek+0xb4>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	755a      	strb	r2, [r3, #21]
 800dd04:	2301      	movs	r3, #1
 800dd06:	e1c5      	b.n	800e094 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d0de      	beq.n	800dcd0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dd12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d809      	bhi.n	800dd2e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800dd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd1c:	1d1a      	adds	r2, r3, #4
 800dd1e:	627a      	str	r2, [r7, #36]	@ 0x24
 800dd20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd26:	1d1a      	adds	r2, r3, #4
 800dd28:	627a      	str	r2, [r7, #36]	@ 0x24
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	69db      	ldr	r3, [r3, #28]
 800dd32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d3c4      	bcc.n	800dcc2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd3e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800dd40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d803      	bhi.n	800dd50 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800dd48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	601a      	str	r2, [r3, #0]
 800dd4e:	e19f      	b.n	800e090 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800dd50:	2311      	movs	r3, #17
 800dd52:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800dd56:	e19b      	b.n	800e090 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d902      	bls.n	800dd68 <f_lseek+0x114>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	683a      	ldr	r2, [r7, #0]
 800dd6c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f000 818d 	beq.w	800e090 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	3b01      	subs	r3, #1
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f7fe f83e 	bl	800bdfe <clmt_clust>
 800dd82:	4602      	mov	r2, r0
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800dd88:	68ba      	ldr	r2, [r7, #8]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	69db      	ldr	r3, [r3, #28]
 800dd8e:	4619      	mov	r1, r3
 800dd90:	4610      	mov	r0, r2
 800dd92:	f7fd fd2b 	bl	800b7ec <clust2sect>
 800dd96:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d104      	bne.n	800dda8 <f_lseek+0x154>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2202      	movs	r2, #2
 800dda2:	755a      	strb	r2, [r3, #21]
 800dda4:	2302      	movs	r3, #2
 800dda6:	e175      	b.n	800e094 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	68ba      	ldr	r2, [r7, #8]
 800ddae:	8992      	ldrh	r2, [r2, #12]
 800ddb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddb4:	68ba      	ldr	r2, [r7, #8]
 800ddb6:	8952      	ldrh	r2, [r2, #10]
 800ddb8:	3a01      	subs	r2, #1
 800ddba:	4013      	ands	r3, r2
 800ddbc:	69ba      	ldr	r2, [r7, #24]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	699b      	ldr	r3, [r3, #24]
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	8992      	ldrh	r2, [r2, #12]
 800ddca:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddce:	fb01 f202 	mul.w	r2, r1, r2
 800ddd2:	1a9b      	subs	r3, r3, r2
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f000 815b 	beq.w	800e090 <f_lseek+0x43c>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a1b      	ldr	r3, [r3, #32]
 800ddde:	69ba      	ldr	r2, [r7, #24]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	f000 8155 	beq.w	800e090 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	7d1b      	ldrb	r3, [r3, #20]
 800ddea:	b25b      	sxtb	r3, r3
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	da18      	bge.n	800de22 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	7858      	ldrb	r0, [r3, #1]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a1a      	ldr	r2, [r3, #32]
 800ddfe:	2301      	movs	r3, #1
 800de00:	f7fd f968 	bl	800b0d4 <disk_write>
 800de04:	4603      	mov	r3, r0
 800de06:	2b00      	cmp	r3, #0
 800de08:	d004      	beq.n	800de14 <f_lseek+0x1c0>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2201      	movs	r2, #1
 800de0e:	755a      	strb	r2, [r3, #21]
 800de10:	2301      	movs	r3, #1
 800de12:	e13f      	b.n	800e094 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	7d1b      	ldrb	r3, [r3, #20]
 800de18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	7858      	ldrb	r0, [r3, #1]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800de2c:	2301      	movs	r3, #1
 800de2e:	69ba      	ldr	r2, [r7, #24]
 800de30:	f7fd f930 	bl	800b094 <disk_read>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d004      	beq.n	800de44 <f_lseek+0x1f0>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2201      	movs	r2, #1
 800de3e:	755a      	strb	r2, [r3, #21]
 800de40:	2301      	movs	r3, #1
 800de42:	e127      	b.n	800e094 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	69ba      	ldr	r2, [r7, #24]
 800de48:	621a      	str	r2, [r3, #32]
 800de4a:	e121      	b.n	800e090 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	429a      	cmp	r2, r3
 800de54:	d908      	bls.n	800de68 <f_lseek+0x214>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	7d1b      	ldrb	r3, [r3, #20]
 800de5a:	f003 0302 	and.w	r3, r3, #2
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d102      	bne.n	800de68 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	699b      	ldr	r3, [r3, #24]
 800de6c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800de6e:	2300      	movs	r3, #0
 800de70:	637b      	str	r3, [r7, #52]	@ 0x34
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de76:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	f000 80b5 	beq.w	800dfea <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	895b      	ldrh	r3, [r3, #10]
 800de84:	461a      	mov	r2, r3
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	899b      	ldrh	r3, [r3, #12]
 800de8a:	fb02 f303 	mul.w	r3, r2, r3
 800de8e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800de90:	6a3b      	ldr	r3, [r7, #32]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d01b      	beq.n	800dece <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	1e5a      	subs	r2, r3, #1
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	fbb2 f2f3 	udiv	r2, r2, r3
 800dea0:	6a3b      	ldr	r3, [r7, #32]
 800dea2:	1e59      	subs	r1, r3, #1
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800deaa:	429a      	cmp	r2, r3
 800deac:	d30f      	bcc.n	800dece <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800deae:	6a3b      	ldr	r3, [r7, #32]
 800deb0:	1e5a      	subs	r2, r3, #1
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	425b      	negs	r3, r3
 800deb6:	401a      	ands	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	699b      	ldr	r3, [r3, #24]
 800dec0:	683a      	ldr	r2, [r7, #0]
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	69db      	ldr	r3, [r3, #28]
 800deca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800decc:	e022      	b.n	800df14 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ded4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d119      	bne.n	800df0e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2100      	movs	r1, #0
 800dede:	4618      	mov	r0, r3
 800dee0:	f7fd fef5 	bl	800bcce <create_chain>
 800dee4:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dee8:	2b01      	cmp	r3, #1
 800deea:	d104      	bne.n	800def6 <f_lseek+0x2a2>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2202      	movs	r2, #2
 800def0:	755a      	strb	r2, [r3, #21]
 800def2:	2302      	movs	r3, #2
 800def4:	e0ce      	b.n	800e094 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800def6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800def8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800defc:	d104      	bne.n	800df08 <f_lseek+0x2b4>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2201      	movs	r2, #1
 800df02:	755a      	strb	r2, [r3, #21]
 800df04:	2301      	movs	r3, #1
 800df06:	e0c5      	b.n	800e094 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df0c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df12:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800df14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df16:	2b00      	cmp	r3, #0
 800df18:	d067      	beq.n	800dfea <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800df1a:	e03a      	b.n	800df92 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800df1c:	683a      	ldr	r2, [r7, #0]
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	1ad3      	subs	r3, r2, r3
 800df22:	603b      	str	r3, [r7, #0]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	699a      	ldr	r2, [r3, #24]
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	441a      	add	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	7d1b      	ldrb	r3, [r3, #20]
 800df34:	f003 0302 	and.w	r3, r3, #2
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00b      	beq.n	800df54 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800df40:	4618      	mov	r0, r3
 800df42:	f7fd fec4 	bl	800bcce <create_chain>
 800df46:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800df48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d108      	bne.n	800df60 <f_lseek+0x30c>
							ofs = 0; break;
 800df4e:	2300      	movs	r3, #0
 800df50:	603b      	str	r3, [r7, #0]
 800df52:	e022      	b.n	800df9a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fd fc66 	bl	800b82a <get_fat>
 800df5e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df66:	d104      	bne.n	800df72 <f_lseek+0x31e>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2201      	movs	r2, #1
 800df6c:	755a      	strb	r2, [r3, #21]
 800df6e:	2301      	movs	r3, #1
 800df70:	e090      	b.n	800e094 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800df72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df74:	2b01      	cmp	r3, #1
 800df76:	d904      	bls.n	800df82 <f_lseek+0x32e>
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	69db      	ldr	r3, [r3, #28]
 800df7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df7e:	429a      	cmp	r2, r3
 800df80:	d304      	bcc.n	800df8c <f_lseek+0x338>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2202      	movs	r2, #2
 800df86:	755a      	strb	r2, [r3, #21]
 800df88:	2302      	movs	r3, #2
 800df8a:	e083      	b.n	800e094 <f_lseek+0x440>
					fp->clust = clst;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df90:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800df92:	683a      	ldr	r2, [r7, #0]
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	429a      	cmp	r2, r3
 800df98:	d8c0      	bhi.n	800df1c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	699a      	ldr	r2, [r3, #24]
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	441a      	add	r2, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	899b      	ldrh	r3, [r3, #12]
 800dfaa:	461a      	mov	r2, r3
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	fbb3 f1f2 	udiv	r1, r3, r2
 800dfb2:	fb01 f202 	mul.w	r2, r1, r2
 800dfb6:	1a9b      	subs	r3, r3, r2
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d016      	beq.n	800dfea <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7fd fc13 	bl	800b7ec <clust2sect>
 800dfc6:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800dfc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d104      	bne.n	800dfd8 <f_lseek+0x384>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2202      	movs	r2, #2
 800dfd2:	755a      	strb	r2, [r3, #21]
 800dfd4:	2302      	movs	r3, #2
 800dfd6:	e05d      	b.n	800e094 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	899b      	ldrh	r3, [r3, #12]
 800dfdc:	461a      	mov	r2, r3
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dfe6:	4413      	add	r3, r2
 800dfe8:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	699a      	ldr	r2, [r3, #24]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d90a      	bls.n	800e00c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	699a      	ldr	r2, [r3, #24]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	7d1b      	ldrb	r3, [r3, #20]
 800e002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e006:	b2da      	uxtb	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	68ba      	ldr	r2, [r7, #8]
 800e012:	8992      	ldrh	r2, [r2, #12]
 800e014:	fbb3 f1f2 	udiv	r1, r3, r2
 800e018:	fb01 f202 	mul.w	r2, r1, r2
 800e01c:	1a9b      	subs	r3, r3, r2
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d036      	beq.n	800e090 <f_lseek+0x43c>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6a1b      	ldr	r3, [r3, #32]
 800e026:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e028:	429a      	cmp	r2, r3
 800e02a:	d031      	beq.n	800e090 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	7d1b      	ldrb	r3, [r3, #20]
 800e030:	b25b      	sxtb	r3, r3
 800e032:	2b00      	cmp	r3, #0
 800e034:	da18      	bge.n	800e068 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	7858      	ldrb	r0, [r3, #1]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6a1a      	ldr	r2, [r3, #32]
 800e044:	2301      	movs	r3, #1
 800e046:	f7fd f845 	bl	800b0d4 <disk_write>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d004      	beq.n	800e05a <f_lseek+0x406>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2201      	movs	r2, #1
 800e054:	755a      	strb	r2, [r3, #21]
 800e056:	2301      	movs	r3, #1
 800e058:	e01c      	b.n	800e094 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	7d1b      	ldrb	r3, [r3, #20]
 800e05e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e062:	b2da      	uxtb	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	7858      	ldrb	r0, [r3, #1]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e072:	2301      	movs	r3, #1
 800e074:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e076:	f7fd f80d 	bl	800b094 <disk_read>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d004      	beq.n	800e08a <f_lseek+0x436>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2201      	movs	r2, #1
 800e084:	755a      	strb	r2, [r3, #21]
 800e086:	2301      	movs	r3, #1
 800e088:	e004      	b.n	800e094 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e08e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e090:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e094:	4618      	mov	r0, r3
 800e096:	3740      	adds	r7, #64	@ 0x40
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800e0a8:	78fb      	ldrb	r3, [r7, #3]
 800e0aa:	2b0a      	cmp	r3, #10
 800e0ac:	d103      	bne.n	800e0b6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800e0ae:	210d      	movs	r1, #13
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f7ff fff3 	bl	800e09c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	db25      	blt.n	800e10e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	1c5a      	adds	r2, r3, #1
 800e0c6:	60fa      	str	r2, [r7, #12]
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	78fa      	ldrb	r2, [r7, #3]
 800e0ce:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2b3c      	cmp	r3, #60	@ 0x3c
 800e0d4:	dd12      	ble.n	800e0fc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6818      	ldr	r0, [r3, #0]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f103 010c 	add.w	r1, r3, #12
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	f107 0308 	add.w	r3, r7, #8
 800e0e6:	f7ff fb79 	bl	800d7dc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800e0ea:	68ba      	ldr	r2, [r7, #8]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d101      	bne.n	800e0f6 <putc_bfd+0x5a>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	e001      	b.n	800e0fa <putc_bfd+0x5e>
 800e0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e0fa:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	68fa      	ldr	r2, [r7, #12]
 800e100:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	1c5a      	adds	r2, r3, #1
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	609a      	str	r2, [r3, #8]
 800e10c:	e000      	b.n	800e110 <putc_bfd+0x74>
	if (i < 0) return;
 800e10e:	bf00      	nop
}
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b084      	sub	sp, #16
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	db16      	blt.n	800e154 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6818      	ldr	r0, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f103 010c 	add.w	r1, r3, #12
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	461a      	mov	r2, r3
 800e136:	f107 030c 	add.w	r3, r7, #12
 800e13a:	f7ff fb4f 	bl	800d7dc <f_write>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d107      	bne.n	800e154 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	68fa      	ldr	r2, [r7, #12]
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d102      	bne.n	800e154 <putc_flush+0x3e>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	e001      	b.n	800e158 <putc_flush+0x42>
	return EOF;
 800e154:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	683a      	ldr	r2, [r7, #0]
 800e16e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	605a      	str	r2, [r3, #4]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	685a      	ldr	r2, [r3, #4]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	609a      	str	r2, [r3, #8]
}
 800e17e:	bf00      	nop
 800e180:	370c      	adds	r7, #12
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr

0800e18a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b096      	sub	sp, #88	@ 0x58
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800e194:	f107 030c 	add.w	r3, r7, #12
 800e198:	6839      	ldr	r1, [r7, #0]
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7ff ffe0 	bl	800e160 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800e1a0:	e009      	b.n	800e1b6 <f_puts+0x2c>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	1c5a      	adds	r2, r3, #1
 800e1a6:	607a      	str	r2, [r7, #4]
 800e1a8:	781a      	ldrb	r2, [r3, #0]
 800e1aa:	f107 030c 	add.w	r3, r7, #12
 800e1ae:	4611      	mov	r1, r2
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7ff ff73 	bl	800e09c <putc_bfd>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d1f1      	bne.n	800e1a2 <f_puts+0x18>
	return putc_flush(&pb);
 800e1be:	f107 030c 	add.w	r3, r7, #12
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7ff ffa7 	bl	800e116 <putc_flush>
 800e1c8:	4603      	mov	r3, r0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3758      	adds	r7, #88	@ 0x58
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
	...

0800e1d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b087      	sub	sp, #28
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	4613      	mov	r3, r2
 800e1e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e1ea:	4b1f      	ldr	r3, [pc, #124]	@ (800e268 <FATFS_LinkDriverEx+0x94>)
 800e1ec:	7a5b      	ldrb	r3, [r3, #9]
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d131      	bne.n	800e258 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e1f4:	4b1c      	ldr	r3, [pc, #112]	@ (800e268 <FATFS_LinkDriverEx+0x94>)
 800e1f6:	7a5b      	ldrb	r3, [r3, #9]
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	4b1a      	ldr	r3, [pc, #104]	@ (800e268 <FATFS_LinkDriverEx+0x94>)
 800e1fe:	2100      	movs	r1, #0
 800e200:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e202:	4b19      	ldr	r3, [pc, #100]	@ (800e268 <FATFS_LinkDriverEx+0x94>)
 800e204:	7a5b      	ldrb	r3, [r3, #9]
 800e206:	b2db      	uxtb	r3, r3
 800e208:	4a17      	ldr	r2, [pc, #92]	@ (800e268 <FATFS_LinkDriverEx+0x94>)
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	4413      	add	r3, r2
 800e20e:	68fa      	ldr	r2, [r7, #12]
 800e210:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e212:	4b15      	ldr	r3, [pc, #84]	@ (800e268 <FATFS_LinkDriverEx+0x94>)
 800e214:	7a5b      	ldrb	r3, [r3, #9]
 800e216:	b2db      	uxtb	r3, r3
 800e218:	461a      	mov	r2, r3
 800e21a:	4b13      	ldr	r3, [pc, #76]	@ (800e268 <FATFS_LinkDriverEx+0x94>)
 800e21c:	4413      	add	r3, r2
 800e21e:	79fa      	ldrb	r2, [r7, #7]
 800e220:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e222:	4b11      	ldr	r3, [pc, #68]	@ (800e268 <FATFS_LinkDriverEx+0x94>)
 800e224:	7a5b      	ldrb	r3, [r3, #9]
 800e226:	b2db      	uxtb	r3, r3
 800e228:	1c5a      	adds	r2, r3, #1
 800e22a:	b2d1      	uxtb	r1, r2
 800e22c:	4a0e      	ldr	r2, [pc, #56]	@ (800e268 <FATFS_LinkDriverEx+0x94>)
 800e22e:	7251      	strb	r1, [r2, #9]
 800e230:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e232:	7dbb      	ldrb	r3, [r7, #22]
 800e234:	3330      	adds	r3, #48	@ 0x30
 800e236:	b2da      	uxtb	r2, r3
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	3301      	adds	r3, #1
 800e240:	223a      	movs	r2, #58	@ 0x3a
 800e242:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	3302      	adds	r3, #2
 800e248:	222f      	movs	r2, #47	@ 0x2f
 800e24a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	3303      	adds	r3, #3
 800e250:	2200      	movs	r2, #0
 800e252:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e254:	2300      	movs	r3, #0
 800e256:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e258:	7dfb      	ldrb	r3, [r7, #23]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	371c      	adds	r7, #28
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop
 800e268:	20003280 	.word	0x20003280

0800e26c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e276:	2200      	movs	r2, #0
 800e278:	6839      	ldr	r1, [r7, #0]
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7ff ffaa 	bl	800e1d4 <FATFS_LinkDriverEx>
 800e280:	4603      	mov	r3, r0
}
 800e282:	4618      	mov	r0, r3
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
	...

0800e28c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b085      	sub	sp, #20
 800e290:	af00      	add	r7, sp, #0
 800e292:	4603      	mov	r3, r0
 800e294:	6039      	str	r1, [r7, #0]
 800e296:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e298:	88fb      	ldrh	r3, [r7, #6]
 800e29a:	2b7f      	cmp	r3, #127	@ 0x7f
 800e29c:	d802      	bhi.n	800e2a4 <ff_convert+0x18>
		c = chr;
 800e29e:	88fb      	ldrh	r3, [r7, #6]
 800e2a0:	81fb      	strh	r3, [r7, #14]
 800e2a2:	e025      	b.n	800e2f0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00b      	beq.n	800e2c2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e2aa:	88fb      	ldrh	r3, [r7, #6]
 800e2ac:	2bff      	cmp	r3, #255	@ 0xff
 800e2ae:	d805      	bhi.n	800e2bc <ff_convert+0x30>
 800e2b0:	88fb      	ldrh	r3, [r7, #6]
 800e2b2:	3b80      	subs	r3, #128	@ 0x80
 800e2b4:	4a12      	ldr	r2, [pc, #72]	@ (800e300 <ff_convert+0x74>)
 800e2b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2ba:	e000      	b.n	800e2be <ff_convert+0x32>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	81fb      	strh	r3, [r7, #14]
 800e2c0:	e016      	b.n	800e2f0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	81fb      	strh	r3, [r7, #14]
 800e2c6:	e009      	b.n	800e2dc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e2c8:	89fb      	ldrh	r3, [r7, #14]
 800e2ca:	4a0d      	ldr	r2, [pc, #52]	@ (800e300 <ff_convert+0x74>)
 800e2cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2d0:	88fa      	ldrh	r2, [r7, #6]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d006      	beq.n	800e2e4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e2d6:	89fb      	ldrh	r3, [r7, #14]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	81fb      	strh	r3, [r7, #14]
 800e2dc:	89fb      	ldrh	r3, [r7, #14]
 800e2de:	2b7f      	cmp	r3, #127	@ 0x7f
 800e2e0:	d9f2      	bls.n	800e2c8 <ff_convert+0x3c>
 800e2e2:	e000      	b.n	800e2e6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e2e4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e2e6:	89fb      	ldrh	r3, [r7, #14]
 800e2e8:	3380      	adds	r3, #128	@ 0x80
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e2f0:	89fb      	ldrh	r3, [r7, #14]
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3714      	adds	r7, #20
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	080139e8 	.word	0x080139e8

0800e304 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e304:	b480      	push	{r7}
 800e306:	b087      	sub	sp, #28
 800e308:	af00      	add	r7, sp, #0
 800e30a:	4603      	mov	r3, r0
 800e30c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e30e:	88fb      	ldrh	r3, [r7, #6]
 800e310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e314:	d201      	bcs.n	800e31a <ff_wtoupper+0x16>
 800e316:	4b3e      	ldr	r3, [pc, #248]	@ (800e410 <ff_wtoupper+0x10c>)
 800e318:	e000      	b.n	800e31c <ff_wtoupper+0x18>
 800e31a:	4b3e      	ldr	r3, [pc, #248]	@ (800e414 <ff_wtoupper+0x110>)
 800e31c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	1c9a      	adds	r2, r3, #2
 800e322:	617a      	str	r2, [r7, #20]
 800e324:	881b      	ldrh	r3, [r3, #0]
 800e326:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e328:	8a7b      	ldrh	r3, [r7, #18]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d068      	beq.n	800e400 <ff_wtoupper+0xfc>
 800e32e:	88fa      	ldrh	r2, [r7, #6]
 800e330:	8a7b      	ldrh	r3, [r7, #18]
 800e332:	429a      	cmp	r2, r3
 800e334:	d364      	bcc.n	800e400 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	1c9a      	adds	r2, r3, #2
 800e33a:	617a      	str	r2, [r7, #20]
 800e33c:	881b      	ldrh	r3, [r3, #0]
 800e33e:	823b      	strh	r3, [r7, #16]
 800e340:	8a3b      	ldrh	r3, [r7, #16]
 800e342:	0a1b      	lsrs	r3, r3, #8
 800e344:	81fb      	strh	r3, [r7, #14]
 800e346:	8a3b      	ldrh	r3, [r7, #16]
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e34c:	88fa      	ldrh	r2, [r7, #6]
 800e34e:	8a79      	ldrh	r1, [r7, #18]
 800e350:	8a3b      	ldrh	r3, [r7, #16]
 800e352:	440b      	add	r3, r1
 800e354:	429a      	cmp	r2, r3
 800e356:	da49      	bge.n	800e3ec <ff_wtoupper+0xe8>
			switch (cmd) {
 800e358:	89fb      	ldrh	r3, [r7, #14]
 800e35a:	2b08      	cmp	r3, #8
 800e35c:	d84f      	bhi.n	800e3fe <ff_wtoupper+0xfa>
 800e35e:	a201      	add	r2, pc, #4	@ (adr r2, 800e364 <ff_wtoupper+0x60>)
 800e360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e364:	0800e389 	.word	0x0800e389
 800e368:	0800e39b 	.word	0x0800e39b
 800e36c:	0800e3b1 	.word	0x0800e3b1
 800e370:	0800e3b9 	.word	0x0800e3b9
 800e374:	0800e3c1 	.word	0x0800e3c1
 800e378:	0800e3c9 	.word	0x0800e3c9
 800e37c:	0800e3d1 	.word	0x0800e3d1
 800e380:	0800e3d9 	.word	0x0800e3d9
 800e384:	0800e3e1 	.word	0x0800e3e1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e388:	88fa      	ldrh	r2, [r7, #6]
 800e38a:	8a7b      	ldrh	r3, [r7, #18]
 800e38c:	1ad3      	subs	r3, r2, r3
 800e38e:	005b      	lsls	r3, r3, #1
 800e390:	697a      	ldr	r2, [r7, #20]
 800e392:	4413      	add	r3, r2
 800e394:	881b      	ldrh	r3, [r3, #0]
 800e396:	80fb      	strh	r3, [r7, #6]
 800e398:	e027      	b.n	800e3ea <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e39a:	88fa      	ldrh	r2, [r7, #6]
 800e39c:	8a7b      	ldrh	r3, [r7, #18]
 800e39e:	1ad3      	subs	r3, r2, r3
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	f003 0301 	and.w	r3, r3, #1
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	88fa      	ldrh	r2, [r7, #6]
 800e3aa:	1ad3      	subs	r3, r2, r3
 800e3ac:	80fb      	strh	r3, [r7, #6]
 800e3ae:	e01c      	b.n	800e3ea <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e3b0:	88fb      	ldrh	r3, [r7, #6]
 800e3b2:	3b10      	subs	r3, #16
 800e3b4:	80fb      	strh	r3, [r7, #6]
 800e3b6:	e018      	b.n	800e3ea <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e3b8:	88fb      	ldrh	r3, [r7, #6]
 800e3ba:	3b20      	subs	r3, #32
 800e3bc:	80fb      	strh	r3, [r7, #6]
 800e3be:	e014      	b.n	800e3ea <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e3c0:	88fb      	ldrh	r3, [r7, #6]
 800e3c2:	3b30      	subs	r3, #48	@ 0x30
 800e3c4:	80fb      	strh	r3, [r7, #6]
 800e3c6:	e010      	b.n	800e3ea <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e3c8:	88fb      	ldrh	r3, [r7, #6]
 800e3ca:	3b1a      	subs	r3, #26
 800e3cc:	80fb      	strh	r3, [r7, #6]
 800e3ce:	e00c      	b.n	800e3ea <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e3d0:	88fb      	ldrh	r3, [r7, #6]
 800e3d2:	3308      	adds	r3, #8
 800e3d4:	80fb      	strh	r3, [r7, #6]
 800e3d6:	e008      	b.n	800e3ea <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e3d8:	88fb      	ldrh	r3, [r7, #6]
 800e3da:	3b50      	subs	r3, #80	@ 0x50
 800e3dc:	80fb      	strh	r3, [r7, #6]
 800e3de:	e004      	b.n	800e3ea <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e3e0:	88fb      	ldrh	r3, [r7, #6]
 800e3e2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800e3e6:	80fb      	strh	r3, [r7, #6]
 800e3e8:	bf00      	nop
			}
			break;
 800e3ea:	e008      	b.n	800e3fe <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e3ec:	89fb      	ldrh	r3, [r7, #14]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d195      	bne.n	800e31e <ff_wtoupper+0x1a>
 800e3f2:	8a3b      	ldrh	r3, [r7, #16]
 800e3f4:	005b      	lsls	r3, r3, #1
 800e3f6:	697a      	ldr	r2, [r7, #20]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e3fc:	e78f      	b.n	800e31e <ff_wtoupper+0x1a>
			break;
 800e3fe:	bf00      	nop
	}

	return chr;
 800e400:	88fb      	ldrh	r3, [r7, #6]
}
 800e402:	4618      	mov	r0, r3
 800e404:	371c      	adds	r7, #28
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr
 800e40e:	bf00      	nop
 800e410:	08013ae8 	.word	0x08013ae8
 800e414:	08013cdc 	.word	0x08013cdc

0800e418 <malloc>:
 800e418:	4b02      	ldr	r3, [pc, #8]	@ (800e424 <malloc+0xc>)
 800e41a:	4601      	mov	r1, r0
 800e41c:	6818      	ldr	r0, [r3, #0]
 800e41e:	f000 b825 	b.w	800e46c <_malloc_r>
 800e422:	bf00      	nop
 800e424:	20000084 	.word	0x20000084

0800e428 <sbrk_aligned>:
 800e428:	b570      	push	{r4, r5, r6, lr}
 800e42a:	4e0f      	ldr	r6, [pc, #60]	@ (800e468 <sbrk_aligned+0x40>)
 800e42c:	460c      	mov	r4, r1
 800e42e:	6831      	ldr	r1, [r6, #0]
 800e430:	4605      	mov	r5, r0
 800e432:	b911      	cbnz	r1, 800e43a <sbrk_aligned+0x12>
 800e434:	f001 f9b0 	bl	800f798 <_sbrk_r>
 800e438:	6030      	str	r0, [r6, #0]
 800e43a:	4621      	mov	r1, r4
 800e43c:	4628      	mov	r0, r5
 800e43e:	f001 f9ab 	bl	800f798 <_sbrk_r>
 800e442:	1c43      	adds	r3, r0, #1
 800e444:	d103      	bne.n	800e44e <sbrk_aligned+0x26>
 800e446:	f04f 34ff 	mov.w	r4, #4294967295
 800e44a:	4620      	mov	r0, r4
 800e44c:	bd70      	pop	{r4, r5, r6, pc}
 800e44e:	1cc4      	adds	r4, r0, #3
 800e450:	f024 0403 	bic.w	r4, r4, #3
 800e454:	42a0      	cmp	r0, r4
 800e456:	d0f8      	beq.n	800e44a <sbrk_aligned+0x22>
 800e458:	1a21      	subs	r1, r4, r0
 800e45a:	4628      	mov	r0, r5
 800e45c:	f001 f99c 	bl	800f798 <_sbrk_r>
 800e460:	3001      	adds	r0, #1
 800e462:	d1f2      	bne.n	800e44a <sbrk_aligned+0x22>
 800e464:	e7ef      	b.n	800e446 <sbrk_aligned+0x1e>
 800e466:	bf00      	nop
 800e468:	2000328c 	.word	0x2000328c

0800e46c <_malloc_r>:
 800e46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e470:	1ccd      	adds	r5, r1, #3
 800e472:	f025 0503 	bic.w	r5, r5, #3
 800e476:	3508      	adds	r5, #8
 800e478:	2d0c      	cmp	r5, #12
 800e47a:	bf38      	it	cc
 800e47c:	250c      	movcc	r5, #12
 800e47e:	2d00      	cmp	r5, #0
 800e480:	4606      	mov	r6, r0
 800e482:	db01      	blt.n	800e488 <_malloc_r+0x1c>
 800e484:	42a9      	cmp	r1, r5
 800e486:	d904      	bls.n	800e492 <_malloc_r+0x26>
 800e488:	230c      	movs	r3, #12
 800e48a:	6033      	str	r3, [r6, #0]
 800e48c:	2000      	movs	r0, #0
 800e48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e492:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e568 <_malloc_r+0xfc>
 800e496:	f000 f869 	bl	800e56c <__malloc_lock>
 800e49a:	f8d8 3000 	ldr.w	r3, [r8]
 800e49e:	461c      	mov	r4, r3
 800e4a0:	bb44      	cbnz	r4, 800e4f4 <_malloc_r+0x88>
 800e4a2:	4629      	mov	r1, r5
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	f7ff ffbf 	bl	800e428 <sbrk_aligned>
 800e4aa:	1c43      	adds	r3, r0, #1
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	d158      	bne.n	800e562 <_malloc_r+0xf6>
 800e4b0:	f8d8 4000 	ldr.w	r4, [r8]
 800e4b4:	4627      	mov	r7, r4
 800e4b6:	2f00      	cmp	r7, #0
 800e4b8:	d143      	bne.n	800e542 <_malloc_r+0xd6>
 800e4ba:	2c00      	cmp	r4, #0
 800e4bc:	d04b      	beq.n	800e556 <_malloc_r+0xea>
 800e4be:	6823      	ldr	r3, [r4, #0]
 800e4c0:	4639      	mov	r1, r7
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	eb04 0903 	add.w	r9, r4, r3
 800e4c8:	f001 f966 	bl	800f798 <_sbrk_r>
 800e4cc:	4581      	cmp	r9, r0
 800e4ce:	d142      	bne.n	800e556 <_malloc_r+0xea>
 800e4d0:	6821      	ldr	r1, [r4, #0]
 800e4d2:	1a6d      	subs	r5, r5, r1
 800e4d4:	4629      	mov	r1, r5
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	f7ff ffa6 	bl	800e428 <sbrk_aligned>
 800e4dc:	3001      	adds	r0, #1
 800e4de:	d03a      	beq.n	800e556 <_malloc_r+0xea>
 800e4e0:	6823      	ldr	r3, [r4, #0]
 800e4e2:	442b      	add	r3, r5
 800e4e4:	6023      	str	r3, [r4, #0]
 800e4e6:	f8d8 3000 	ldr.w	r3, [r8]
 800e4ea:	685a      	ldr	r2, [r3, #4]
 800e4ec:	bb62      	cbnz	r2, 800e548 <_malloc_r+0xdc>
 800e4ee:	f8c8 7000 	str.w	r7, [r8]
 800e4f2:	e00f      	b.n	800e514 <_malloc_r+0xa8>
 800e4f4:	6822      	ldr	r2, [r4, #0]
 800e4f6:	1b52      	subs	r2, r2, r5
 800e4f8:	d420      	bmi.n	800e53c <_malloc_r+0xd0>
 800e4fa:	2a0b      	cmp	r2, #11
 800e4fc:	d917      	bls.n	800e52e <_malloc_r+0xc2>
 800e4fe:	1961      	adds	r1, r4, r5
 800e500:	42a3      	cmp	r3, r4
 800e502:	6025      	str	r5, [r4, #0]
 800e504:	bf18      	it	ne
 800e506:	6059      	strne	r1, [r3, #4]
 800e508:	6863      	ldr	r3, [r4, #4]
 800e50a:	bf08      	it	eq
 800e50c:	f8c8 1000 	streq.w	r1, [r8]
 800e510:	5162      	str	r2, [r4, r5]
 800e512:	604b      	str	r3, [r1, #4]
 800e514:	4630      	mov	r0, r6
 800e516:	f000 f82f 	bl	800e578 <__malloc_unlock>
 800e51a:	f104 000b 	add.w	r0, r4, #11
 800e51e:	1d23      	adds	r3, r4, #4
 800e520:	f020 0007 	bic.w	r0, r0, #7
 800e524:	1ac2      	subs	r2, r0, r3
 800e526:	bf1c      	itt	ne
 800e528:	1a1b      	subne	r3, r3, r0
 800e52a:	50a3      	strne	r3, [r4, r2]
 800e52c:	e7af      	b.n	800e48e <_malloc_r+0x22>
 800e52e:	6862      	ldr	r2, [r4, #4]
 800e530:	42a3      	cmp	r3, r4
 800e532:	bf0c      	ite	eq
 800e534:	f8c8 2000 	streq.w	r2, [r8]
 800e538:	605a      	strne	r2, [r3, #4]
 800e53a:	e7eb      	b.n	800e514 <_malloc_r+0xa8>
 800e53c:	4623      	mov	r3, r4
 800e53e:	6864      	ldr	r4, [r4, #4]
 800e540:	e7ae      	b.n	800e4a0 <_malloc_r+0x34>
 800e542:	463c      	mov	r4, r7
 800e544:	687f      	ldr	r7, [r7, #4]
 800e546:	e7b6      	b.n	800e4b6 <_malloc_r+0x4a>
 800e548:	461a      	mov	r2, r3
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	42a3      	cmp	r3, r4
 800e54e:	d1fb      	bne.n	800e548 <_malloc_r+0xdc>
 800e550:	2300      	movs	r3, #0
 800e552:	6053      	str	r3, [r2, #4]
 800e554:	e7de      	b.n	800e514 <_malloc_r+0xa8>
 800e556:	230c      	movs	r3, #12
 800e558:	6033      	str	r3, [r6, #0]
 800e55a:	4630      	mov	r0, r6
 800e55c:	f000 f80c 	bl	800e578 <__malloc_unlock>
 800e560:	e794      	b.n	800e48c <_malloc_r+0x20>
 800e562:	6005      	str	r5, [r0, #0]
 800e564:	e7d6      	b.n	800e514 <_malloc_r+0xa8>
 800e566:	bf00      	nop
 800e568:	20003290 	.word	0x20003290

0800e56c <__malloc_lock>:
 800e56c:	4801      	ldr	r0, [pc, #4]	@ (800e574 <__malloc_lock+0x8>)
 800e56e:	f001 b960 	b.w	800f832 <__retarget_lock_acquire_recursive>
 800e572:	bf00      	nop
 800e574:	200033d4 	.word	0x200033d4

0800e578 <__malloc_unlock>:
 800e578:	4801      	ldr	r0, [pc, #4]	@ (800e580 <__malloc_unlock+0x8>)
 800e57a:	f001 b95b 	b.w	800f834 <__retarget_lock_release_recursive>
 800e57e:	bf00      	nop
 800e580:	200033d4 	.word	0x200033d4

0800e584 <__cvt>:
 800e584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e588:	ec57 6b10 	vmov	r6, r7, d0
 800e58c:	2f00      	cmp	r7, #0
 800e58e:	460c      	mov	r4, r1
 800e590:	4619      	mov	r1, r3
 800e592:	463b      	mov	r3, r7
 800e594:	bfbb      	ittet	lt
 800e596:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e59a:	461f      	movlt	r7, r3
 800e59c:	2300      	movge	r3, #0
 800e59e:	232d      	movlt	r3, #45	@ 0x2d
 800e5a0:	700b      	strb	r3, [r1, #0]
 800e5a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e5a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e5a8:	4691      	mov	r9, r2
 800e5aa:	f023 0820 	bic.w	r8, r3, #32
 800e5ae:	bfbc      	itt	lt
 800e5b0:	4632      	movlt	r2, r6
 800e5b2:	4616      	movlt	r6, r2
 800e5b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e5b8:	d005      	beq.n	800e5c6 <__cvt+0x42>
 800e5ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e5be:	d100      	bne.n	800e5c2 <__cvt+0x3e>
 800e5c0:	3401      	adds	r4, #1
 800e5c2:	2102      	movs	r1, #2
 800e5c4:	e000      	b.n	800e5c8 <__cvt+0x44>
 800e5c6:	2103      	movs	r1, #3
 800e5c8:	ab03      	add	r3, sp, #12
 800e5ca:	9301      	str	r3, [sp, #4]
 800e5cc:	ab02      	add	r3, sp, #8
 800e5ce:	9300      	str	r3, [sp, #0]
 800e5d0:	ec47 6b10 	vmov	d0, r6, r7
 800e5d4:	4653      	mov	r3, sl
 800e5d6:	4622      	mov	r2, r4
 800e5d8:	f001 f9be 	bl	800f958 <_dtoa_r>
 800e5dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e5e0:	4605      	mov	r5, r0
 800e5e2:	d119      	bne.n	800e618 <__cvt+0x94>
 800e5e4:	f019 0f01 	tst.w	r9, #1
 800e5e8:	d00e      	beq.n	800e608 <__cvt+0x84>
 800e5ea:	eb00 0904 	add.w	r9, r0, r4
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	4639      	mov	r1, r7
 800e5f6:	f7f2 fa87 	bl	8000b08 <__aeabi_dcmpeq>
 800e5fa:	b108      	cbz	r0, 800e600 <__cvt+0x7c>
 800e5fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800e600:	2230      	movs	r2, #48	@ 0x30
 800e602:	9b03      	ldr	r3, [sp, #12]
 800e604:	454b      	cmp	r3, r9
 800e606:	d31e      	bcc.n	800e646 <__cvt+0xc2>
 800e608:	9b03      	ldr	r3, [sp, #12]
 800e60a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e60c:	1b5b      	subs	r3, r3, r5
 800e60e:	4628      	mov	r0, r5
 800e610:	6013      	str	r3, [r2, #0]
 800e612:	b004      	add	sp, #16
 800e614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e618:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e61c:	eb00 0904 	add.w	r9, r0, r4
 800e620:	d1e5      	bne.n	800e5ee <__cvt+0x6a>
 800e622:	7803      	ldrb	r3, [r0, #0]
 800e624:	2b30      	cmp	r3, #48	@ 0x30
 800e626:	d10a      	bne.n	800e63e <__cvt+0xba>
 800e628:	2200      	movs	r2, #0
 800e62a:	2300      	movs	r3, #0
 800e62c:	4630      	mov	r0, r6
 800e62e:	4639      	mov	r1, r7
 800e630:	f7f2 fa6a 	bl	8000b08 <__aeabi_dcmpeq>
 800e634:	b918      	cbnz	r0, 800e63e <__cvt+0xba>
 800e636:	f1c4 0401 	rsb	r4, r4, #1
 800e63a:	f8ca 4000 	str.w	r4, [sl]
 800e63e:	f8da 3000 	ldr.w	r3, [sl]
 800e642:	4499      	add	r9, r3
 800e644:	e7d3      	b.n	800e5ee <__cvt+0x6a>
 800e646:	1c59      	adds	r1, r3, #1
 800e648:	9103      	str	r1, [sp, #12]
 800e64a:	701a      	strb	r2, [r3, #0]
 800e64c:	e7d9      	b.n	800e602 <__cvt+0x7e>

0800e64e <__exponent>:
 800e64e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e650:	2900      	cmp	r1, #0
 800e652:	bfba      	itte	lt
 800e654:	4249      	neglt	r1, r1
 800e656:	232d      	movlt	r3, #45	@ 0x2d
 800e658:	232b      	movge	r3, #43	@ 0x2b
 800e65a:	2909      	cmp	r1, #9
 800e65c:	7002      	strb	r2, [r0, #0]
 800e65e:	7043      	strb	r3, [r0, #1]
 800e660:	dd29      	ble.n	800e6b6 <__exponent+0x68>
 800e662:	f10d 0307 	add.w	r3, sp, #7
 800e666:	461d      	mov	r5, r3
 800e668:	270a      	movs	r7, #10
 800e66a:	461a      	mov	r2, r3
 800e66c:	fbb1 f6f7 	udiv	r6, r1, r7
 800e670:	fb07 1416 	mls	r4, r7, r6, r1
 800e674:	3430      	adds	r4, #48	@ 0x30
 800e676:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e67a:	460c      	mov	r4, r1
 800e67c:	2c63      	cmp	r4, #99	@ 0x63
 800e67e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e682:	4631      	mov	r1, r6
 800e684:	dcf1      	bgt.n	800e66a <__exponent+0x1c>
 800e686:	3130      	adds	r1, #48	@ 0x30
 800e688:	1e94      	subs	r4, r2, #2
 800e68a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e68e:	1c41      	adds	r1, r0, #1
 800e690:	4623      	mov	r3, r4
 800e692:	42ab      	cmp	r3, r5
 800e694:	d30a      	bcc.n	800e6ac <__exponent+0x5e>
 800e696:	f10d 0309 	add.w	r3, sp, #9
 800e69a:	1a9b      	subs	r3, r3, r2
 800e69c:	42ac      	cmp	r4, r5
 800e69e:	bf88      	it	hi
 800e6a0:	2300      	movhi	r3, #0
 800e6a2:	3302      	adds	r3, #2
 800e6a4:	4403      	add	r3, r0
 800e6a6:	1a18      	subs	r0, r3, r0
 800e6a8:	b003      	add	sp, #12
 800e6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e6b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e6b4:	e7ed      	b.n	800e692 <__exponent+0x44>
 800e6b6:	2330      	movs	r3, #48	@ 0x30
 800e6b8:	3130      	adds	r1, #48	@ 0x30
 800e6ba:	7083      	strb	r3, [r0, #2]
 800e6bc:	70c1      	strb	r1, [r0, #3]
 800e6be:	1d03      	adds	r3, r0, #4
 800e6c0:	e7f1      	b.n	800e6a6 <__exponent+0x58>
	...

0800e6c4 <_printf_float>:
 800e6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c8:	b08d      	sub	sp, #52	@ 0x34
 800e6ca:	460c      	mov	r4, r1
 800e6cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e6d0:	4616      	mov	r6, r2
 800e6d2:	461f      	mov	r7, r3
 800e6d4:	4605      	mov	r5, r0
 800e6d6:	f001 f827 	bl	800f728 <_localeconv_r>
 800e6da:	6803      	ldr	r3, [r0, #0]
 800e6dc:	9304      	str	r3, [sp, #16]
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7f1 fde6 	bl	80002b0 <strlen>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6e8:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ec:	9005      	str	r0, [sp, #20]
 800e6ee:	3307      	adds	r3, #7
 800e6f0:	f023 0307 	bic.w	r3, r3, #7
 800e6f4:	f103 0208 	add.w	r2, r3, #8
 800e6f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e6fc:	f8d4 b000 	ldr.w	fp, [r4]
 800e700:	f8c8 2000 	str.w	r2, [r8]
 800e704:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e708:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e70c:	9307      	str	r3, [sp, #28]
 800e70e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e712:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e71a:	4b9c      	ldr	r3, [pc, #624]	@ (800e98c <_printf_float+0x2c8>)
 800e71c:	f04f 32ff 	mov.w	r2, #4294967295
 800e720:	f7f2 fa24 	bl	8000b6c <__aeabi_dcmpun>
 800e724:	bb70      	cbnz	r0, 800e784 <_printf_float+0xc0>
 800e726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e72a:	4b98      	ldr	r3, [pc, #608]	@ (800e98c <_printf_float+0x2c8>)
 800e72c:	f04f 32ff 	mov.w	r2, #4294967295
 800e730:	f7f2 f9fe 	bl	8000b30 <__aeabi_dcmple>
 800e734:	bb30      	cbnz	r0, 800e784 <_printf_float+0xc0>
 800e736:	2200      	movs	r2, #0
 800e738:	2300      	movs	r3, #0
 800e73a:	4640      	mov	r0, r8
 800e73c:	4649      	mov	r1, r9
 800e73e:	f7f2 f9ed 	bl	8000b1c <__aeabi_dcmplt>
 800e742:	b110      	cbz	r0, 800e74a <_printf_float+0x86>
 800e744:	232d      	movs	r3, #45	@ 0x2d
 800e746:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e74a:	4a91      	ldr	r2, [pc, #580]	@ (800e990 <_printf_float+0x2cc>)
 800e74c:	4b91      	ldr	r3, [pc, #580]	@ (800e994 <_printf_float+0x2d0>)
 800e74e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e752:	bf94      	ite	ls
 800e754:	4690      	movls	r8, r2
 800e756:	4698      	movhi	r8, r3
 800e758:	2303      	movs	r3, #3
 800e75a:	6123      	str	r3, [r4, #16]
 800e75c:	f02b 0304 	bic.w	r3, fp, #4
 800e760:	6023      	str	r3, [r4, #0]
 800e762:	f04f 0900 	mov.w	r9, #0
 800e766:	9700      	str	r7, [sp, #0]
 800e768:	4633      	mov	r3, r6
 800e76a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e76c:	4621      	mov	r1, r4
 800e76e:	4628      	mov	r0, r5
 800e770:	f000 f9d2 	bl	800eb18 <_printf_common>
 800e774:	3001      	adds	r0, #1
 800e776:	f040 808d 	bne.w	800e894 <_printf_float+0x1d0>
 800e77a:	f04f 30ff 	mov.w	r0, #4294967295
 800e77e:	b00d      	add	sp, #52	@ 0x34
 800e780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e784:	4642      	mov	r2, r8
 800e786:	464b      	mov	r3, r9
 800e788:	4640      	mov	r0, r8
 800e78a:	4649      	mov	r1, r9
 800e78c:	f7f2 f9ee 	bl	8000b6c <__aeabi_dcmpun>
 800e790:	b140      	cbz	r0, 800e7a4 <_printf_float+0xe0>
 800e792:	464b      	mov	r3, r9
 800e794:	2b00      	cmp	r3, #0
 800e796:	bfbc      	itt	lt
 800e798:	232d      	movlt	r3, #45	@ 0x2d
 800e79a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e79e:	4a7e      	ldr	r2, [pc, #504]	@ (800e998 <_printf_float+0x2d4>)
 800e7a0:	4b7e      	ldr	r3, [pc, #504]	@ (800e99c <_printf_float+0x2d8>)
 800e7a2:	e7d4      	b.n	800e74e <_printf_float+0x8a>
 800e7a4:	6863      	ldr	r3, [r4, #4]
 800e7a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e7aa:	9206      	str	r2, [sp, #24]
 800e7ac:	1c5a      	adds	r2, r3, #1
 800e7ae:	d13b      	bne.n	800e828 <_printf_float+0x164>
 800e7b0:	2306      	movs	r3, #6
 800e7b2:	6063      	str	r3, [r4, #4]
 800e7b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	6022      	str	r2, [r4, #0]
 800e7bc:	9303      	str	r3, [sp, #12]
 800e7be:	ab0a      	add	r3, sp, #40	@ 0x28
 800e7c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e7c4:	ab09      	add	r3, sp, #36	@ 0x24
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	6861      	ldr	r1, [r4, #4]
 800e7ca:	ec49 8b10 	vmov	d0, r8, r9
 800e7ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	f7ff fed6 	bl	800e584 <__cvt>
 800e7d8:	9b06      	ldr	r3, [sp, #24]
 800e7da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e7dc:	2b47      	cmp	r3, #71	@ 0x47
 800e7de:	4680      	mov	r8, r0
 800e7e0:	d129      	bne.n	800e836 <_printf_float+0x172>
 800e7e2:	1cc8      	adds	r0, r1, #3
 800e7e4:	db02      	blt.n	800e7ec <_printf_float+0x128>
 800e7e6:	6863      	ldr	r3, [r4, #4]
 800e7e8:	4299      	cmp	r1, r3
 800e7ea:	dd41      	ble.n	800e870 <_printf_float+0x1ac>
 800e7ec:	f1aa 0a02 	sub.w	sl, sl, #2
 800e7f0:	fa5f fa8a 	uxtb.w	sl, sl
 800e7f4:	3901      	subs	r1, #1
 800e7f6:	4652      	mov	r2, sl
 800e7f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e7fc:	9109      	str	r1, [sp, #36]	@ 0x24
 800e7fe:	f7ff ff26 	bl	800e64e <__exponent>
 800e802:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e804:	1813      	adds	r3, r2, r0
 800e806:	2a01      	cmp	r2, #1
 800e808:	4681      	mov	r9, r0
 800e80a:	6123      	str	r3, [r4, #16]
 800e80c:	dc02      	bgt.n	800e814 <_printf_float+0x150>
 800e80e:	6822      	ldr	r2, [r4, #0]
 800e810:	07d2      	lsls	r2, r2, #31
 800e812:	d501      	bpl.n	800e818 <_printf_float+0x154>
 800e814:	3301      	adds	r3, #1
 800e816:	6123      	str	r3, [r4, #16]
 800e818:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d0a2      	beq.n	800e766 <_printf_float+0xa2>
 800e820:	232d      	movs	r3, #45	@ 0x2d
 800e822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e826:	e79e      	b.n	800e766 <_printf_float+0xa2>
 800e828:	9a06      	ldr	r2, [sp, #24]
 800e82a:	2a47      	cmp	r2, #71	@ 0x47
 800e82c:	d1c2      	bne.n	800e7b4 <_printf_float+0xf0>
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d1c0      	bne.n	800e7b4 <_printf_float+0xf0>
 800e832:	2301      	movs	r3, #1
 800e834:	e7bd      	b.n	800e7b2 <_printf_float+0xee>
 800e836:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e83a:	d9db      	bls.n	800e7f4 <_printf_float+0x130>
 800e83c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e840:	d118      	bne.n	800e874 <_printf_float+0x1b0>
 800e842:	2900      	cmp	r1, #0
 800e844:	6863      	ldr	r3, [r4, #4]
 800e846:	dd0b      	ble.n	800e860 <_printf_float+0x19c>
 800e848:	6121      	str	r1, [r4, #16]
 800e84a:	b913      	cbnz	r3, 800e852 <_printf_float+0x18e>
 800e84c:	6822      	ldr	r2, [r4, #0]
 800e84e:	07d0      	lsls	r0, r2, #31
 800e850:	d502      	bpl.n	800e858 <_printf_float+0x194>
 800e852:	3301      	adds	r3, #1
 800e854:	440b      	add	r3, r1
 800e856:	6123      	str	r3, [r4, #16]
 800e858:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e85a:	f04f 0900 	mov.w	r9, #0
 800e85e:	e7db      	b.n	800e818 <_printf_float+0x154>
 800e860:	b913      	cbnz	r3, 800e868 <_printf_float+0x1a4>
 800e862:	6822      	ldr	r2, [r4, #0]
 800e864:	07d2      	lsls	r2, r2, #31
 800e866:	d501      	bpl.n	800e86c <_printf_float+0x1a8>
 800e868:	3302      	adds	r3, #2
 800e86a:	e7f4      	b.n	800e856 <_printf_float+0x192>
 800e86c:	2301      	movs	r3, #1
 800e86e:	e7f2      	b.n	800e856 <_printf_float+0x192>
 800e870:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e876:	4299      	cmp	r1, r3
 800e878:	db05      	blt.n	800e886 <_printf_float+0x1c2>
 800e87a:	6823      	ldr	r3, [r4, #0]
 800e87c:	6121      	str	r1, [r4, #16]
 800e87e:	07d8      	lsls	r0, r3, #31
 800e880:	d5ea      	bpl.n	800e858 <_printf_float+0x194>
 800e882:	1c4b      	adds	r3, r1, #1
 800e884:	e7e7      	b.n	800e856 <_printf_float+0x192>
 800e886:	2900      	cmp	r1, #0
 800e888:	bfd4      	ite	le
 800e88a:	f1c1 0202 	rsble	r2, r1, #2
 800e88e:	2201      	movgt	r2, #1
 800e890:	4413      	add	r3, r2
 800e892:	e7e0      	b.n	800e856 <_printf_float+0x192>
 800e894:	6823      	ldr	r3, [r4, #0]
 800e896:	055a      	lsls	r2, r3, #21
 800e898:	d407      	bmi.n	800e8aa <_printf_float+0x1e6>
 800e89a:	6923      	ldr	r3, [r4, #16]
 800e89c:	4642      	mov	r2, r8
 800e89e:	4631      	mov	r1, r6
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	47b8      	blx	r7
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	d12b      	bne.n	800e900 <_printf_float+0x23c>
 800e8a8:	e767      	b.n	800e77a <_printf_float+0xb6>
 800e8aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e8ae:	f240 80dd 	bls.w	800ea6c <_printf_float+0x3a8>
 800e8b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	f7f2 f925 	bl	8000b08 <__aeabi_dcmpeq>
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d033      	beq.n	800e92a <_printf_float+0x266>
 800e8c2:	4a37      	ldr	r2, [pc, #220]	@ (800e9a0 <_printf_float+0x2dc>)
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	47b8      	blx	r7
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	f43f af54 	beq.w	800e77a <_printf_float+0xb6>
 800e8d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e8d6:	4543      	cmp	r3, r8
 800e8d8:	db02      	blt.n	800e8e0 <_printf_float+0x21c>
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	07d8      	lsls	r0, r3, #31
 800e8de:	d50f      	bpl.n	800e900 <_printf_float+0x23c>
 800e8e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8e4:	4631      	mov	r1, r6
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	47b8      	blx	r7
 800e8ea:	3001      	adds	r0, #1
 800e8ec:	f43f af45 	beq.w	800e77a <_printf_float+0xb6>
 800e8f0:	f04f 0900 	mov.w	r9, #0
 800e8f4:	f108 38ff 	add.w	r8, r8, #4294967295
 800e8f8:	f104 0a1a 	add.w	sl, r4, #26
 800e8fc:	45c8      	cmp	r8, r9
 800e8fe:	dc09      	bgt.n	800e914 <_printf_float+0x250>
 800e900:	6823      	ldr	r3, [r4, #0]
 800e902:	079b      	lsls	r3, r3, #30
 800e904:	f100 8103 	bmi.w	800eb0e <_printf_float+0x44a>
 800e908:	68e0      	ldr	r0, [r4, #12]
 800e90a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e90c:	4298      	cmp	r0, r3
 800e90e:	bfb8      	it	lt
 800e910:	4618      	movlt	r0, r3
 800e912:	e734      	b.n	800e77e <_printf_float+0xba>
 800e914:	2301      	movs	r3, #1
 800e916:	4652      	mov	r2, sl
 800e918:	4631      	mov	r1, r6
 800e91a:	4628      	mov	r0, r5
 800e91c:	47b8      	blx	r7
 800e91e:	3001      	adds	r0, #1
 800e920:	f43f af2b 	beq.w	800e77a <_printf_float+0xb6>
 800e924:	f109 0901 	add.w	r9, r9, #1
 800e928:	e7e8      	b.n	800e8fc <_printf_float+0x238>
 800e92a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	dc39      	bgt.n	800e9a4 <_printf_float+0x2e0>
 800e930:	4a1b      	ldr	r2, [pc, #108]	@ (800e9a0 <_printf_float+0x2dc>)
 800e932:	2301      	movs	r3, #1
 800e934:	4631      	mov	r1, r6
 800e936:	4628      	mov	r0, r5
 800e938:	47b8      	blx	r7
 800e93a:	3001      	adds	r0, #1
 800e93c:	f43f af1d 	beq.w	800e77a <_printf_float+0xb6>
 800e940:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e944:	ea59 0303 	orrs.w	r3, r9, r3
 800e948:	d102      	bne.n	800e950 <_printf_float+0x28c>
 800e94a:	6823      	ldr	r3, [r4, #0]
 800e94c:	07d9      	lsls	r1, r3, #31
 800e94e:	d5d7      	bpl.n	800e900 <_printf_float+0x23c>
 800e950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e954:	4631      	mov	r1, r6
 800e956:	4628      	mov	r0, r5
 800e958:	47b8      	blx	r7
 800e95a:	3001      	adds	r0, #1
 800e95c:	f43f af0d 	beq.w	800e77a <_printf_float+0xb6>
 800e960:	f04f 0a00 	mov.w	sl, #0
 800e964:	f104 0b1a 	add.w	fp, r4, #26
 800e968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e96a:	425b      	negs	r3, r3
 800e96c:	4553      	cmp	r3, sl
 800e96e:	dc01      	bgt.n	800e974 <_printf_float+0x2b0>
 800e970:	464b      	mov	r3, r9
 800e972:	e793      	b.n	800e89c <_printf_float+0x1d8>
 800e974:	2301      	movs	r3, #1
 800e976:	465a      	mov	r2, fp
 800e978:	4631      	mov	r1, r6
 800e97a:	4628      	mov	r0, r5
 800e97c:	47b8      	blx	r7
 800e97e:	3001      	adds	r0, #1
 800e980:	f43f aefb 	beq.w	800e77a <_printf_float+0xb6>
 800e984:	f10a 0a01 	add.w	sl, sl, #1
 800e988:	e7ee      	b.n	800e968 <_printf_float+0x2a4>
 800e98a:	bf00      	nop
 800e98c:	7fefffff 	.word	0x7fefffff
 800e990:	08013d98 	.word	0x08013d98
 800e994:	08013d9c 	.word	0x08013d9c
 800e998:	08013da0 	.word	0x08013da0
 800e99c:	08013da4 	.word	0x08013da4
 800e9a0:	08013da8 	.word	0x08013da8
 800e9a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e9a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e9aa:	4553      	cmp	r3, sl
 800e9ac:	bfa8      	it	ge
 800e9ae:	4653      	movge	r3, sl
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	4699      	mov	r9, r3
 800e9b4:	dc36      	bgt.n	800ea24 <_printf_float+0x360>
 800e9b6:	f04f 0b00 	mov.w	fp, #0
 800e9ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9be:	f104 021a 	add.w	r2, r4, #26
 800e9c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e9c4:	9306      	str	r3, [sp, #24]
 800e9c6:	eba3 0309 	sub.w	r3, r3, r9
 800e9ca:	455b      	cmp	r3, fp
 800e9cc:	dc31      	bgt.n	800ea32 <_printf_float+0x36e>
 800e9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9d0:	459a      	cmp	sl, r3
 800e9d2:	dc3a      	bgt.n	800ea4a <_printf_float+0x386>
 800e9d4:	6823      	ldr	r3, [r4, #0]
 800e9d6:	07da      	lsls	r2, r3, #31
 800e9d8:	d437      	bmi.n	800ea4a <_printf_float+0x386>
 800e9da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9dc:	ebaa 0903 	sub.w	r9, sl, r3
 800e9e0:	9b06      	ldr	r3, [sp, #24]
 800e9e2:	ebaa 0303 	sub.w	r3, sl, r3
 800e9e6:	4599      	cmp	r9, r3
 800e9e8:	bfa8      	it	ge
 800e9ea:	4699      	movge	r9, r3
 800e9ec:	f1b9 0f00 	cmp.w	r9, #0
 800e9f0:	dc33      	bgt.n	800ea5a <_printf_float+0x396>
 800e9f2:	f04f 0800 	mov.w	r8, #0
 800e9f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9fa:	f104 0b1a 	add.w	fp, r4, #26
 800e9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea00:	ebaa 0303 	sub.w	r3, sl, r3
 800ea04:	eba3 0309 	sub.w	r3, r3, r9
 800ea08:	4543      	cmp	r3, r8
 800ea0a:	f77f af79 	ble.w	800e900 <_printf_float+0x23c>
 800ea0e:	2301      	movs	r3, #1
 800ea10:	465a      	mov	r2, fp
 800ea12:	4631      	mov	r1, r6
 800ea14:	4628      	mov	r0, r5
 800ea16:	47b8      	blx	r7
 800ea18:	3001      	adds	r0, #1
 800ea1a:	f43f aeae 	beq.w	800e77a <_printf_float+0xb6>
 800ea1e:	f108 0801 	add.w	r8, r8, #1
 800ea22:	e7ec      	b.n	800e9fe <_printf_float+0x33a>
 800ea24:	4642      	mov	r2, r8
 800ea26:	4631      	mov	r1, r6
 800ea28:	4628      	mov	r0, r5
 800ea2a:	47b8      	blx	r7
 800ea2c:	3001      	adds	r0, #1
 800ea2e:	d1c2      	bne.n	800e9b6 <_printf_float+0x2f2>
 800ea30:	e6a3      	b.n	800e77a <_printf_float+0xb6>
 800ea32:	2301      	movs	r3, #1
 800ea34:	4631      	mov	r1, r6
 800ea36:	4628      	mov	r0, r5
 800ea38:	9206      	str	r2, [sp, #24]
 800ea3a:	47b8      	blx	r7
 800ea3c:	3001      	adds	r0, #1
 800ea3e:	f43f ae9c 	beq.w	800e77a <_printf_float+0xb6>
 800ea42:	9a06      	ldr	r2, [sp, #24]
 800ea44:	f10b 0b01 	add.w	fp, fp, #1
 800ea48:	e7bb      	b.n	800e9c2 <_printf_float+0x2fe>
 800ea4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea4e:	4631      	mov	r1, r6
 800ea50:	4628      	mov	r0, r5
 800ea52:	47b8      	blx	r7
 800ea54:	3001      	adds	r0, #1
 800ea56:	d1c0      	bne.n	800e9da <_printf_float+0x316>
 800ea58:	e68f      	b.n	800e77a <_printf_float+0xb6>
 800ea5a:	9a06      	ldr	r2, [sp, #24]
 800ea5c:	464b      	mov	r3, r9
 800ea5e:	4442      	add	r2, r8
 800ea60:	4631      	mov	r1, r6
 800ea62:	4628      	mov	r0, r5
 800ea64:	47b8      	blx	r7
 800ea66:	3001      	adds	r0, #1
 800ea68:	d1c3      	bne.n	800e9f2 <_printf_float+0x32e>
 800ea6a:	e686      	b.n	800e77a <_printf_float+0xb6>
 800ea6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ea70:	f1ba 0f01 	cmp.w	sl, #1
 800ea74:	dc01      	bgt.n	800ea7a <_printf_float+0x3b6>
 800ea76:	07db      	lsls	r3, r3, #31
 800ea78:	d536      	bpl.n	800eae8 <_printf_float+0x424>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	4642      	mov	r2, r8
 800ea7e:	4631      	mov	r1, r6
 800ea80:	4628      	mov	r0, r5
 800ea82:	47b8      	blx	r7
 800ea84:	3001      	adds	r0, #1
 800ea86:	f43f ae78 	beq.w	800e77a <_printf_float+0xb6>
 800ea8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea8e:	4631      	mov	r1, r6
 800ea90:	4628      	mov	r0, r5
 800ea92:	47b8      	blx	r7
 800ea94:	3001      	adds	r0, #1
 800ea96:	f43f ae70 	beq.w	800e77a <_printf_float+0xb6>
 800ea9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eaa6:	f7f2 f82f 	bl	8000b08 <__aeabi_dcmpeq>
 800eaaa:	b9c0      	cbnz	r0, 800eade <_printf_float+0x41a>
 800eaac:	4653      	mov	r3, sl
 800eaae:	f108 0201 	add.w	r2, r8, #1
 800eab2:	4631      	mov	r1, r6
 800eab4:	4628      	mov	r0, r5
 800eab6:	47b8      	blx	r7
 800eab8:	3001      	adds	r0, #1
 800eaba:	d10c      	bne.n	800ead6 <_printf_float+0x412>
 800eabc:	e65d      	b.n	800e77a <_printf_float+0xb6>
 800eabe:	2301      	movs	r3, #1
 800eac0:	465a      	mov	r2, fp
 800eac2:	4631      	mov	r1, r6
 800eac4:	4628      	mov	r0, r5
 800eac6:	47b8      	blx	r7
 800eac8:	3001      	adds	r0, #1
 800eaca:	f43f ae56 	beq.w	800e77a <_printf_float+0xb6>
 800eace:	f108 0801 	add.w	r8, r8, #1
 800ead2:	45d0      	cmp	r8, sl
 800ead4:	dbf3      	blt.n	800eabe <_printf_float+0x3fa>
 800ead6:	464b      	mov	r3, r9
 800ead8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eadc:	e6df      	b.n	800e89e <_printf_float+0x1da>
 800eade:	f04f 0800 	mov.w	r8, #0
 800eae2:	f104 0b1a 	add.w	fp, r4, #26
 800eae6:	e7f4      	b.n	800ead2 <_printf_float+0x40e>
 800eae8:	2301      	movs	r3, #1
 800eaea:	4642      	mov	r2, r8
 800eaec:	e7e1      	b.n	800eab2 <_printf_float+0x3ee>
 800eaee:	2301      	movs	r3, #1
 800eaf0:	464a      	mov	r2, r9
 800eaf2:	4631      	mov	r1, r6
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	47b8      	blx	r7
 800eaf8:	3001      	adds	r0, #1
 800eafa:	f43f ae3e 	beq.w	800e77a <_printf_float+0xb6>
 800eafe:	f108 0801 	add.w	r8, r8, #1
 800eb02:	68e3      	ldr	r3, [r4, #12]
 800eb04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eb06:	1a5b      	subs	r3, r3, r1
 800eb08:	4543      	cmp	r3, r8
 800eb0a:	dcf0      	bgt.n	800eaee <_printf_float+0x42a>
 800eb0c:	e6fc      	b.n	800e908 <_printf_float+0x244>
 800eb0e:	f04f 0800 	mov.w	r8, #0
 800eb12:	f104 0919 	add.w	r9, r4, #25
 800eb16:	e7f4      	b.n	800eb02 <_printf_float+0x43e>

0800eb18 <_printf_common>:
 800eb18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb1c:	4616      	mov	r6, r2
 800eb1e:	4698      	mov	r8, r3
 800eb20:	688a      	ldr	r2, [r1, #8]
 800eb22:	690b      	ldr	r3, [r1, #16]
 800eb24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	bfb8      	it	lt
 800eb2c:	4613      	movlt	r3, r2
 800eb2e:	6033      	str	r3, [r6, #0]
 800eb30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb34:	4607      	mov	r7, r0
 800eb36:	460c      	mov	r4, r1
 800eb38:	b10a      	cbz	r2, 800eb3e <_printf_common+0x26>
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	6033      	str	r3, [r6, #0]
 800eb3e:	6823      	ldr	r3, [r4, #0]
 800eb40:	0699      	lsls	r1, r3, #26
 800eb42:	bf42      	ittt	mi
 800eb44:	6833      	ldrmi	r3, [r6, #0]
 800eb46:	3302      	addmi	r3, #2
 800eb48:	6033      	strmi	r3, [r6, #0]
 800eb4a:	6825      	ldr	r5, [r4, #0]
 800eb4c:	f015 0506 	ands.w	r5, r5, #6
 800eb50:	d106      	bne.n	800eb60 <_printf_common+0x48>
 800eb52:	f104 0a19 	add.w	sl, r4, #25
 800eb56:	68e3      	ldr	r3, [r4, #12]
 800eb58:	6832      	ldr	r2, [r6, #0]
 800eb5a:	1a9b      	subs	r3, r3, r2
 800eb5c:	42ab      	cmp	r3, r5
 800eb5e:	dc26      	bgt.n	800ebae <_printf_common+0x96>
 800eb60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb64:	6822      	ldr	r2, [r4, #0]
 800eb66:	3b00      	subs	r3, #0
 800eb68:	bf18      	it	ne
 800eb6a:	2301      	movne	r3, #1
 800eb6c:	0692      	lsls	r2, r2, #26
 800eb6e:	d42b      	bmi.n	800ebc8 <_printf_common+0xb0>
 800eb70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb74:	4641      	mov	r1, r8
 800eb76:	4638      	mov	r0, r7
 800eb78:	47c8      	blx	r9
 800eb7a:	3001      	adds	r0, #1
 800eb7c:	d01e      	beq.n	800ebbc <_printf_common+0xa4>
 800eb7e:	6823      	ldr	r3, [r4, #0]
 800eb80:	6922      	ldr	r2, [r4, #16]
 800eb82:	f003 0306 	and.w	r3, r3, #6
 800eb86:	2b04      	cmp	r3, #4
 800eb88:	bf02      	ittt	eq
 800eb8a:	68e5      	ldreq	r5, [r4, #12]
 800eb8c:	6833      	ldreq	r3, [r6, #0]
 800eb8e:	1aed      	subeq	r5, r5, r3
 800eb90:	68a3      	ldr	r3, [r4, #8]
 800eb92:	bf0c      	ite	eq
 800eb94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb98:	2500      	movne	r5, #0
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	bfc4      	itt	gt
 800eb9e:	1a9b      	subgt	r3, r3, r2
 800eba0:	18ed      	addgt	r5, r5, r3
 800eba2:	2600      	movs	r6, #0
 800eba4:	341a      	adds	r4, #26
 800eba6:	42b5      	cmp	r5, r6
 800eba8:	d11a      	bne.n	800ebe0 <_printf_common+0xc8>
 800ebaa:	2000      	movs	r0, #0
 800ebac:	e008      	b.n	800ebc0 <_printf_common+0xa8>
 800ebae:	2301      	movs	r3, #1
 800ebb0:	4652      	mov	r2, sl
 800ebb2:	4641      	mov	r1, r8
 800ebb4:	4638      	mov	r0, r7
 800ebb6:	47c8      	blx	r9
 800ebb8:	3001      	adds	r0, #1
 800ebba:	d103      	bne.n	800ebc4 <_printf_common+0xac>
 800ebbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebc4:	3501      	adds	r5, #1
 800ebc6:	e7c6      	b.n	800eb56 <_printf_common+0x3e>
 800ebc8:	18e1      	adds	r1, r4, r3
 800ebca:	1c5a      	adds	r2, r3, #1
 800ebcc:	2030      	movs	r0, #48	@ 0x30
 800ebce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ebd2:	4422      	add	r2, r4
 800ebd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ebd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ebdc:	3302      	adds	r3, #2
 800ebde:	e7c7      	b.n	800eb70 <_printf_common+0x58>
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	4622      	mov	r2, r4
 800ebe4:	4641      	mov	r1, r8
 800ebe6:	4638      	mov	r0, r7
 800ebe8:	47c8      	blx	r9
 800ebea:	3001      	adds	r0, #1
 800ebec:	d0e6      	beq.n	800ebbc <_printf_common+0xa4>
 800ebee:	3601      	adds	r6, #1
 800ebf0:	e7d9      	b.n	800eba6 <_printf_common+0x8e>
	...

0800ebf4 <_printf_i>:
 800ebf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebf8:	7e0f      	ldrb	r7, [r1, #24]
 800ebfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ebfc:	2f78      	cmp	r7, #120	@ 0x78
 800ebfe:	4691      	mov	r9, r2
 800ec00:	4680      	mov	r8, r0
 800ec02:	460c      	mov	r4, r1
 800ec04:	469a      	mov	sl, r3
 800ec06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ec0a:	d807      	bhi.n	800ec1c <_printf_i+0x28>
 800ec0c:	2f62      	cmp	r7, #98	@ 0x62
 800ec0e:	d80a      	bhi.n	800ec26 <_printf_i+0x32>
 800ec10:	2f00      	cmp	r7, #0
 800ec12:	f000 80d2 	beq.w	800edba <_printf_i+0x1c6>
 800ec16:	2f58      	cmp	r7, #88	@ 0x58
 800ec18:	f000 80b9 	beq.w	800ed8e <_printf_i+0x19a>
 800ec1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec24:	e03a      	b.n	800ec9c <_printf_i+0xa8>
 800ec26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec2a:	2b15      	cmp	r3, #21
 800ec2c:	d8f6      	bhi.n	800ec1c <_printf_i+0x28>
 800ec2e:	a101      	add	r1, pc, #4	@ (adr r1, 800ec34 <_printf_i+0x40>)
 800ec30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec34:	0800ec8d 	.word	0x0800ec8d
 800ec38:	0800eca1 	.word	0x0800eca1
 800ec3c:	0800ec1d 	.word	0x0800ec1d
 800ec40:	0800ec1d 	.word	0x0800ec1d
 800ec44:	0800ec1d 	.word	0x0800ec1d
 800ec48:	0800ec1d 	.word	0x0800ec1d
 800ec4c:	0800eca1 	.word	0x0800eca1
 800ec50:	0800ec1d 	.word	0x0800ec1d
 800ec54:	0800ec1d 	.word	0x0800ec1d
 800ec58:	0800ec1d 	.word	0x0800ec1d
 800ec5c:	0800ec1d 	.word	0x0800ec1d
 800ec60:	0800eda1 	.word	0x0800eda1
 800ec64:	0800eccb 	.word	0x0800eccb
 800ec68:	0800ed5b 	.word	0x0800ed5b
 800ec6c:	0800ec1d 	.word	0x0800ec1d
 800ec70:	0800ec1d 	.word	0x0800ec1d
 800ec74:	0800edc3 	.word	0x0800edc3
 800ec78:	0800ec1d 	.word	0x0800ec1d
 800ec7c:	0800eccb 	.word	0x0800eccb
 800ec80:	0800ec1d 	.word	0x0800ec1d
 800ec84:	0800ec1d 	.word	0x0800ec1d
 800ec88:	0800ed63 	.word	0x0800ed63
 800ec8c:	6833      	ldr	r3, [r6, #0]
 800ec8e:	1d1a      	adds	r2, r3, #4
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	6032      	str	r2, [r6, #0]
 800ec94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	e09d      	b.n	800eddc <_printf_i+0x1e8>
 800eca0:	6833      	ldr	r3, [r6, #0]
 800eca2:	6820      	ldr	r0, [r4, #0]
 800eca4:	1d19      	adds	r1, r3, #4
 800eca6:	6031      	str	r1, [r6, #0]
 800eca8:	0606      	lsls	r6, r0, #24
 800ecaa:	d501      	bpl.n	800ecb0 <_printf_i+0xbc>
 800ecac:	681d      	ldr	r5, [r3, #0]
 800ecae:	e003      	b.n	800ecb8 <_printf_i+0xc4>
 800ecb0:	0645      	lsls	r5, r0, #25
 800ecb2:	d5fb      	bpl.n	800ecac <_printf_i+0xb8>
 800ecb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ecb8:	2d00      	cmp	r5, #0
 800ecba:	da03      	bge.n	800ecc4 <_printf_i+0xd0>
 800ecbc:	232d      	movs	r3, #45	@ 0x2d
 800ecbe:	426d      	negs	r5, r5
 800ecc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ecc4:	4859      	ldr	r0, [pc, #356]	@ (800ee2c <_printf_i+0x238>)
 800ecc6:	230a      	movs	r3, #10
 800ecc8:	e011      	b.n	800ecee <_printf_i+0xfa>
 800ecca:	6821      	ldr	r1, [r4, #0]
 800eccc:	6833      	ldr	r3, [r6, #0]
 800ecce:	0608      	lsls	r0, r1, #24
 800ecd0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ecd4:	d402      	bmi.n	800ecdc <_printf_i+0xe8>
 800ecd6:	0649      	lsls	r1, r1, #25
 800ecd8:	bf48      	it	mi
 800ecda:	b2ad      	uxthmi	r5, r5
 800ecdc:	2f6f      	cmp	r7, #111	@ 0x6f
 800ecde:	4853      	ldr	r0, [pc, #332]	@ (800ee2c <_printf_i+0x238>)
 800ece0:	6033      	str	r3, [r6, #0]
 800ece2:	bf14      	ite	ne
 800ece4:	230a      	movne	r3, #10
 800ece6:	2308      	moveq	r3, #8
 800ece8:	2100      	movs	r1, #0
 800ecea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ecee:	6866      	ldr	r6, [r4, #4]
 800ecf0:	60a6      	str	r6, [r4, #8]
 800ecf2:	2e00      	cmp	r6, #0
 800ecf4:	bfa2      	ittt	ge
 800ecf6:	6821      	ldrge	r1, [r4, #0]
 800ecf8:	f021 0104 	bicge.w	r1, r1, #4
 800ecfc:	6021      	strge	r1, [r4, #0]
 800ecfe:	b90d      	cbnz	r5, 800ed04 <_printf_i+0x110>
 800ed00:	2e00      	cmp	r6, #0
 800ed02:	d04b      	beq.n	800ed9c <_printf_i+0x1a8>
 800ed04:	4616      	mov	r6, r2
 800ed06:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed0a:	fb03 5711 	mls	r7, r3, r1, r5
 800ed0e:	5dc7      	ldrb	r7, [r0, r7]
 800ed10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed14:	462f      	mov	r7, r5
 800ed16:	42bb      	cmp	r3, r7
 800ed18:	460d      	mov	r5, r1
 800ed1a:	d9f4      	bls.n	800ed06 <_printf_i+0x112>
 800ed1c:	2b08      	cmp	r3, #8
 800ed1e:	d10b      	bne.n	800ed38 <_printf_i+0x144>
 800ed20:	6823      	ldr	r3, [r4, #0]
 800ed22:	07df      	lsls	r7, r3, #31
 800ed24:	d508      	bpl.n	800ed38 <_printf_i+0x144>
 800ed26:	6923      	ldr	r3, [r4, #16]
 800ed28:	6861      	ldr	r1, [r4, #4]
 800ed2a:	4299      	cmp	r1, r3
 800ed2c:	bfde      	ittt	le
 800ed2e:	2330      	movle	r3, #48	@ 0x30
 800ed30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed38:	1b92      	subs	r2, r2, r6
 800ed3a:	6122      	str	r2, [r4, #16]
 800ed3c:	f8cd a000 	str.w	sl, [sp]
 800ed40:	464b      	mov	r3, r9
 800ed42:	aa03      	add	r2, sp, #12
 800ed44:	4621      	mov	r1, r4
 800ed46:	4640      	mov	r0, r8
 800ed48:	f7ff fee6 	bl	800eb18 <_printf_common>
 800ed4c:	3001      	adds	r0, #1
 800ed4e:	d14a      	bne.n	800ede6 <_printf_i+0x1f2>
 800ed50:	f04f 30ff 	mov.w	r0, #4294967295
 800ed54:	b004      	add	sp, #16
 800ed56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed5a:	6823      	ldr	r3, [r4, #0]
 800ed5c:	f043 0320 	orr.w	r3, r3, #32
 800ed60:	6023      	str	r3, [r4, #0]
 800ed62:	4833      	ldr	r0, [pc, #204]	@ (800ee30 <_printf_i+0x23c>)
 800ed64:	2778      	movs	r7, #120	@ 0x78
 800ed66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed6a:	6823      	ldr	r3, [r4, #0]
 800ed6c:	6831      	ldr	r1, [r6, #0]
 800ed6e:	061f      	lsls	r7, r3, #24
 800ed70:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed74:	d402      	bmi.n	800ed7c <_printf_i+0x188>
 800ed76:	065f      	lsls	r7, r3, #25
 800ed78:	bf48      	it	mi
 800ed7a:	b2ad      	uxthmi	r5, r5
 800ed7c:	6031      	str	r1, [r6, #0]
 800ed7e:	07d9      	lsls	r1, r3, #31
 800ed80:	bf44      	itt	mi
 800ed82:	f043 0320 	orrmi.w	r3, r3, #32
 800ed86:	6023      	strmi	r3, [r4, #0]
 800ed88:	b11d      	cbz	r5, 800ed92 <_printf_i+0x19e>
 800ed8a:	2310      	movs	r3, #16
 800ed8c:	e7ac      	b.n	800ece8 <_printf_i+0xf4>
 800ed8e:	4827      	ldr	r0, [pc, #156]	@ (800ee2c <_printf_i+0x238>)
 800ed90:	e7e9      	b.n	800ed66 <_printf_i+0x172>
 800ed92:	6823      	ldr	r3, [r4, #0]
 800ed94:	f023 0320 	bic.w	r3, r3, #32
 800ed98:	6023      	str	r3, [r4, #0]
 800ed9a:	e7f6      	b.n	800ed8a <_printf_i+0x196>
 800ed9c:	4616      	mov	r6, r2
 800ed9e:	e7bd      	b.n	800ed1c <_printf_i+0x128>
 800eda0:	6833      	ldr	r3, [r6, #0]
 800eda2:	6825      	ldr	r5, [r4, #0]
 800eda4:	6961      	ldr	r1, [r4, #20]
 800eda6:	1d18      	adds	r0, r3, #4
 800eda8:	6030      	str	r0, [r6, #0]
 800edaa:	062e      	lsls	r6, r5, #24
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	d501      	bpl.n	800edb4 <_printf_i+0x1c0>
 800edb0:	6019      	str	r1, [r3, #0]
 800edb2:	e002      	b.n	800edba <_printf_i+0x1c6>
 800edb4:	0668      	lsls	r0, r5, #25
 800edb6:	d5fb      	bpl.n	800edb0 <_printf_i+0x1bc>
 800edb8:	8019      	strh	r1, [r3, #0]
 800edba:	2300      	movs	r3, #0
 800edbc:	6123      	str	r3, [r4, #16]
 800edbe:	4616      	mov	r6, r2
 800edc0:	e7bc      	b.n	800ed3c <_printf_i+0x148>
 800edc2:	6833      	ldr	r3, [r6, #0]
 800edc4:	1d1a      	adds	r2, r3, #4
 800edc6:	6032      	str	r2, [r6, #0]
 800edc8:	681e      	ldr	r6, [r3, #0]
 800edca:	6862      	ldr	r2, [r4, #4]
 800edcc:	2100      	movs	r1, #0
 800edce:	4630      	mov	r0, r6
 800edd0:	f7f1 fa1e 	bl	8000210 <memchr>
 800edd4:	b108      	cbz	r0, 800edda <_printf_i+0x1e6>
 800edd6:	1b80      	subs	r0, r0, r6
 800edd8:	6060      	str	r0, [r4, #4]
 800edda:	6863      	ldr	r3, [r4, #4]
 800eddc:	6123      	str	r3, [r4, #16]
 800edde:	2300      	movs	r3, #0
 800ede0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ede4:	e7aa      	b.n	800ed3c <_printf_i+0x148>
 800ede6:	6923      	ldr	r3, [r4, #16]
 800ede8:	4632      	mov	r2, r6
 800edea:	4649      	mov	r1, r9
 800edec:	4640      	mov	r0, r8
 800edee:	47d0      	blx	sl
 800edf0:	3001      	adds	r0, #1
 800edf2:	d0ad      	beq.n	800ed50 <_printf_i+0x15c>
 800edf4:	6823      	ldr	r3, [r4, #0]
 800edf6:	079b      	lsls	r3, r3, #30
 800edf8:	d413      	bmi.n	800ee22 <_printf_i+0x22e>
 800edfa:	68e0      	ldr	r0, [r4, #12]
 800edfc:	9b03      	ldr	r3, [sp, #12]
 800edfe:	4298      	cmp	r0, r3
 800ee00:	bfb8      	it	lt
 800ee02:	4618      	movlt	r0, r3
 800ee04:	e7a6      	b.n	800ed54 <_printf_i+0x160>
 800ee06:	2301      	movs	r3, #1
 800ee08:	4632      	mov	r2, r6
 800ee0a:	4649      	mov	r1, r9
 800ee0c:	4640      	mov	r0, r8
 800ee0e:	47d0      	blx	sl
 800ee10:	3001      	adds	r0, #1
 800ee12:	d09d      	beq.n	800ed50 <_printf_i+0x15c>
 800ee14:	3501      	adds	r5, #1
 800ee16:	68e3      	ldr	r3, [r4, #12]
 800ee18:	9903      	ldr	r1, [sp, #12]
 800ee1a:	1a5b      	subs	r3, r3, r1
 800ee1c:	42ab      	cmp	r3, r5
 800ee1e:	dcf2      	bgt.n	800ee06 <_printf_i+0x212>
 800ee20:	e7eb      	b.n	800edfa <_printf_i+0x206>
 800ee22:	2500      	movs	r5, #0
 800ee24:	f104 0619 	add.w	r6, r4, #25
 800ee28:	e7f5      	b.n	800ee16 <_printf_i+0x222>
 800ee2a:	bf00      	nop
 800ee2c:	08013daa 	.word	0x08013daa
 800ee30:	08013dbb 	.word	0x08013dbb

0800ee34 <_scanf_float>:
 800ee34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee38:	b087      	sub	sp, #28
 800ee3a:	4617      	mov	r7, r2
 800ee3c:	9303      	str	r3, [sp, #12]
 800ee3e:	688b      	ldr	r3, [r1, #8]
 800ee40:	1e5a      	subs	r2, r3, #1
 800ee42:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ee46:	bf81      	itttt	hi
 800ee48:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ee4c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ee50:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ee54:	608b      	strhi	r3, [r1, #8]
 800ee56:	680b      	ldr	r3, [r1, #0]
 800ee58:	460a      	mov	r2, r1
 800ee5a:	f04f 0500 	mov.w	r5, #0
 800ee5e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ee62:	f842 3b1c 	str.w	r3, [r2], #28
 800ee66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ee6a:	4680      	mov	r8, r0
 800ee6c:	460c      	mov	r4, r1
 800ee6e:	bf98      	it	ls
 800ee70:	f04f 0b00 	movls.w	fp, #0
 800ee74:	9201      	str	r2, [sp, #4]
 800ee76:	4616      	mov	r6, r2
 800ee78:	46aa      	mov	sl, r5
 800ee7a:	46a9      	mov	r9, r5
 800ee7c:	9502      	str	r5, [sp, #8]
 800ee7e:	68a2      	ldr	r2, [r4, #8]
 800ee80:	b152      	cbz	r2, 800ee98 <_scanf_float+0x64>
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	2b4e      	cmp	r3, #78	@ 0x4e
 800ee88:	d864      	bhi.n	800ef54 <_scanf_float+0x120>
 800ee8a:	2b40      	cmp	r3, #64	@ 0x40
 800ee8c:	d83c      	bhi.n	800ef08 <_scanf_float+0xd4>
 800ee8e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ee92:	b2c8      	uxtb	r0, r1
 800ee94:	280e      	cmp	r0, #14
 800ee96:	d93a      	bls.n	800ef0e <_scanf_float+0xda>
 800ee98:	f1b9 0f00 	cmp.w	r9, #0
 800ee9c:	d003      	beq.n	800eea6 <_scanf_float+0x72>
 800ee9e:	6823      	ldr	r3, [r4, #0]
 800eea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eea4:	6023      	str	r3, [r4, #0]
 800eea6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eeaa:	f1ba 0f01 	cmp.w	sl, #1
 800eeae:	f200 8117 	bhi.w	800f0e0 <_scanf_float+0x2ac>
 800eeb2:	9b01      	ldr	r3, [sp, #4]
 800eeb4:	429e      	cmp	r6, r3
 800eeb6:	f200 8108 	bhi.w	800f0ca <_scanf_float+0x296>
 800eeba:	2001      	movs	r0, #1
 800eebc:	b007      	add	sp, #28
 800eebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800eec6:	2a0d      	cmp	r2, #13
 800eec8:	d8e6      	bhi.n	800ee98 <_scanf_float+0x64>
 800eeca:	a101      	add	r1, pc, #4	@ (adr r1, 800eed0 <_scanf_float+0x9c>)
 800eecc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eed0:	0800f017 	.word	0x0800f017
 800eed4:	0800ee99 	.word	0x0800ee99
 800eed8:	0800ee99 	.word	0x0800ee99
 800eedc:	0800ee99 	.word	0x0800ee99
 800eee0:	0800f077 	.word	0x0800f077
 800eee4:	0800f04f 	.word	0x0800f04f
 800eee8:	0800ee99 	.word	0x0800ee99
 800eeec:	0800ee99 	.word	0x0800ee99
 800eef0:	0800f025 	.word	0x0800f025
 800eef4:	0800ee99 	.word	0x0800ee99
 800eef8:	0800ee99 	.word	0x0800ee99
 800eefc:	0800ee99 	.word	0x0800ee99
 800ef00:	0800ee99 	.word	0x0800ee99
 800ef04:	0800efdd 	.word	0x0800efdd
 800ef08:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ef0c:	e7db      	b.n	800eec6 <_scanf_float+0x92>
 800ef0e:	290e      	cmp	r1, #14
 800ef10:	d8c2      	bhi.n	800ee98 <_scanf_float+0x64>
 800ef12:	a001      	add	r0, pc, #4	@ (adr r0, 800ef18 <_scanf_float+0xe4>)
 800ef14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ef18:	0800efcd 	.word	0x0800efcd
 800ef1c:	0800ee99 	.word	0x0800ee99
 800ef20:	0800efcd 	.word	0x0800efcd
 800ef24:	0800f063 	.word	0x0800f063
 800ef28:	0800ee99 	.word	0x0800ee99
 800ef2c:	0800ef75 	.word	0x0800ef75
 800ef30:	0800efb3 	.word	0x0800efb3
 800ef34:	0800efb3 	.word	0x0800efb3
 800ef38:	0800efb3 	.word	0x0800efb3
 800ef3c:	0800efb3 	.word	0x0800efb3
 800ef40:	0800efb3 	.word	0x0800efb3
 800ef44:	0800efb3 	.word	0x0800efb3
 800ef48:	0800efb3 	.word	0x0800efb3
 800ef4c:	0800efb3 	.word	0x0800efb3
 800ef50:	0800efb3 	.word	0x0800efb3
 800ef54:	2b6e      	cmp	r3, #110	@ 0x6e
 800ef56:	d809      	bhi.n	800ef6c <_scanf_float+0x138>
 800ef58:	2b60      	cmp	r3, #96	@ 0x60
 800ef5a:	d8b2      	bhi.n	800eec2 <_scanf_float+0x8e>
 800ef5c:	2b54      	cmp	r3, #84	@ 0x54
 800ef5e:	d07b      	beq.n	800f058 <_scanf_float+0x224>
 800ef60:	2b59      	cmp	r3, #89	@ 0x59
 800ef62:	d199      	bne.n	800ee98 <_scanf_float+0x64>
 800ef64:	2d07      	cmp	r5, #7
 800ef66:	d197      	bne.n	800ee98 <_scanf_float+0x64>
 800ef68:	2508      	movs	r5, #8
 800ef6a:	e02c      	b.n	800efc6 <_scanf_float+0x192>
 800ef6c:	2b74      	cmp	r3, #116	@ 0x74
 800ef6e:	d073      	beq.n	800f058 <_scanf_float+0x224>
 800ef70:	2b79      	cmp	r3, #121	@ 0x79
 800ef72:	e7f6      	b.n	800ef62 <_scanf_float+0x12e>
 800ef74:	6821      	ldr	r1, [r4, #0]
 800ef76:	05c8      	lsls	r0, r1, #23
 800ef78:	d51b      	bpl.n	800efb2 <_scanf_float+0x17e>
 800ef7a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ef7e:	6021      	str	r1, [r4, #0]
 800ef80:	f109 0901 	add.w	r9, r9, #1
 800ef84:	f1bb 0f00 	cmp.w	fp, #0
 800ef88:	d003      	beq.n	800ef92 <_scanf_float+0x15e>
 800ef8a:	3201      	adds	r2, #1
 800ef8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ef90:	60a2      	str	r2, [r4, #8]
 800ef92:	68a3      	ldr	r3, [r4, #8]
 800ef94:	3b01      	subs	r3, #1
 800ef96:	60a3      	str	r3, [r4, #8]
 800ef98:	6923      	ldr	r3, [r4, #16]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	6123      	str	r3, [r4, #16]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	3b01      	subs	r3, #1
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	607b      	str	r3, [r7, #4]
 800efa6:	f340 8087 	ble.w	800f0b8 <_scanf_float+0x284>
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	3301      	adds	r3, #1
 800efae:	603b      	str	r3, [r7, #0]
 800efb0:	e765      	b.n	800ee7e <_scanf_float+0x4a>
 800efb2:	eb1a 0105 	adds.w	r1, sl, r5
 800efb6:	f47f af6f 	bne.w	800ee98 <_scanf_float+0x64>
 800efba:	6822      	ldr	r2, [r4, #0]
 800efbc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800efc0:	6022      	str	r2, [r4, #0]
 800efc2:	460d      	mov	r5, r1
 800efc4:	468a      	mov	sl, r1
 800efc6:	f806 3b01 	strb.w	r3, [r6], #1
 800efca:	e7e2      	b.n	800ef92 <_scanf_float+0x15e>
 800efcc:	6822      	ldr	r2, [r4, #0]
 800efce:	0610      	lsls	r0, r2, #24
 800efd0:	f57f af62 	bpl.w	800ee98 <_scanf_float+0x64>
 800efd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800efd8:	6022      	str	r2, [r4, #0]
 800efda:	e7f4      	b.n	800efc6 <_scanf_float+0x192>
 800efdc:	f1ba 0f00 	cmp.w	sl, #0
 800efe0:	d10e      	bne.n	800f000 <_scanf_float+0x1cc>
 800efe2:	f1b9 0f00 	cmp.w	r9, #0
 800efe6:	d10e      	bne.n	800f006 <_scanf_float+0x1d2>
 800efe8:	6822      	ldr	r2, [r4, #0]
 800efea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800efee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800eff2:	d108      	bne.n	800f006 <_scanf_float+0x1d2>
 800eff4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eff8:	6022      	str	r2, [r4, #0]
 800effa:	f04f 0a01 	mov.w	sl, #1
 800effe:	e7e2      	b.n	800efc6 <_scanf_float+0x192>
 800f000:	f1ba 0f02 	cmp.w	sl, #2
 800f004:	d055      	beq.n	800f0b2 <_scanf_float+0x27e>
 800f006:	2d01      	cmp	r5, #1
 800f008:	d002      	beq.n	800f010 <_scanf_float+0x1dc>
 800f00a:	2d04      	cmp	r5, #4
 800f00c:	f47f af44 	bne.w	800ee98 <_scanf_float+0x64>
 800f010:	3501      	adds	r5, #1
 800f012:	b2ed      	uxtb	r5, r5
 800f014:	e7d7      	b.n	800efc6 <_scanf_float+0x192>
 800f016:	f1ba 0f01 	cmp.w	sl, #1
 800f01a:	f47f af3d 	bne.w	800ee98 <_scanf_float+0x64>
 800f01e:	f04f 0a02 	mov.w	sl, #2
 800f022:	e7d0      	b.n	800efc6 <_scanf_float+0x192>
 800f024:	b97d      	cbnz	r5, 800f046 <_scanf_float+0x212>
 800f026:	f1b9 0f00 	cmp.w	r9, #0
 800f02a:	f47f af38 	bne.w	800ee9e <_scanf_float+0x6a>
 800f02e:	6822      	ldr	r2, [r4, #0]
 800f030:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f034:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f038:	f040 8108 	bne.w	800f24c <_scanf_float+0x418>
 800f03c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f040:	6022      	str	r2, [r4, #0]
 800f042:	2501      	movs	r5, #1
 800f044:	e7bf      	b.n	800efc6 <_scanf_float+0x192>
 800f046:	2d03      	cmp	r5, #3
 800f048:	d0e2      	beq.n	800f010 <_scanf_float+0x1dc>
 800f04a:	2d05      	cmp	r5, #5
 800f04c:	e7de      	b.n	800f00c <_scanf_float+0x1d8>
 800f04e:	2d02      	cmp	r5, #2
 800f050:	f47f af22 	bne.w	800ee98 <_scanf_float+0x64>
 800f054:	2503      	movs	r5, #3
 800f056:	e7b6      	b.n	800efc6 <_scanf_float+0x192>
 800f058:	2d06      	cmp	r5, #6
 800f05a:	f47f af1d 	bne.w	800ee98 <_scanf_float+0x64>
 800f05e:	2507      	movs	r5, #7
 800f060:	e7b1      	b.n	800efc6 <_scanf_float+0x192>
 800f062:	6822      	ldr	r2, [r4, #0]
 800f064:	0591      	lsls	r1, r2, #22
 800f066:	f57f af17 	bpl.w	800ee98 <_scanf_float+0x64>
 800f06a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f06e:	6022      	str	r2, [r4, #0]
 800f070:	f8cd 9008 	str.w	r9, [sp, #8]
 800f074:	e7a7      	b.n	800efc6 <_scanf_float+0x192>
 800f076:	6822      	ldr	r2, [r4, #0]
 800f078:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f07c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f080:	d006      	beq.n	800f090 <_scanf_float+0x25c>
 800f082:	0550      	lsls	r0, r2, #21
 800f084:	f57f af08 	bpl.w	800ee98 <_scanf_float+0x64>
 800f088:	f1b9 0f00 	cmp.w	r9, #0
 800f08c:	f000 80de 	beq.w	800f24c <_scanf_float+0x418>
 800f090:	0591      	lsls	r1, r2, #22
 800f092:	bf58      	it	pl
 800f094:	9902      	ldrpl	r1, [sp, #8]
 800f096:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f09a:	bf58      	it	pl
 800f09c:	eba9 0101 	subpl.w	r1, r9, r1
 800f0a0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f0a4:	bf58      	it	pl
 800f0a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f0aa:	6022      	str	r2, [r4, #0]
 800f0ac:	f04f 0900 	mov.w	r9, #0
 800f0b0:	e789      	b.n	800efc6 <_scanf_float+0x192>
 800f0b2:	f04f 0a03 	mov.w	sl, #3
 800f0b6:	e786      	b.n	800efc6 <_scanf_float+0x192>
 800f0b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f0bc:	4639      	mov	r1, r7
 800f0be:	4640      	mov	r0, r8
 800f0c0:	4798      	blx	r3
 800f0c2:	2800      	cmp	r0, #0
 800f0c4:	f43f aedb 	beq.w	800ee7e <_scanf_float+0x4a>
 800f0c8:	e6e6      	b.n	800ee98 <_scanf_float+0x64>
 800f0ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0d2:	463a      	mov	r2, r7
 800f0d4:	4640      	mov	r0, r8
 800f0d6:	4798      	blx	r3
 800f0d8:	6923      	ldr	r3, [r4, #16]
 800f0da:	3b01      	subs	r3, #1
 800f0dc:	6123      	str	r3, [r4, #16]
 800f0de:	e6e8      	b.n	800eeb2 <_scanf_float+0x7e>
 800f0e0:	1e6b      	subs	r3, r5, #1
 800f0e2:	2b06      	cmp	r3, #6
 800f0e4:	d824      	bhi.n	800f130 <_scanf_float+0x2fc>
 800f0e6:	2d02      	cmp	r5, #2
 800f0e8:	d836      	bhi.n	800f158 <_scanf_float+0x324>
 800f0ea:	9b01      	ldr	r3, [sp, #4]
 800f0ec:	429e      	cmp	r6, r3
 800f0ee:	f67f aee4 	bls.w	800eeba <_scanf_float+0x86>
 800f0f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0fa:	463a      	mov	r2, r7
 800f0fc:	4640      	mov	r0, r8
 800f0fe:	4798      	blx	r3
 800f100:	6923      	ldr	r3, [r4, #16]
 800f102:	3b01      	subs	r3, #1
 800f104:	6123      	str	r3, [r4, #16]
 800f106:	e7f0      	b.n	800f0ea <_scanf_float+0x2b6>
 800f108:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f10c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f110:	463a      	mov	r2, r7
 800f112:	4640      	mov	r0, r8
 800f114:	4798      	blx	r3
 800f116:	6923      	ldr	r3, [r4, #16]
 800f118:	3b01      	subs	r3, #1
 800f11a:	6123      	str	r3, [r4, #16]
 800f11c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f120:	fa5f fa8a 	uxtb.w	sl, sl
 800f124:	f1ba 0f02 	cmp.w	sl, #2
 800f128:	d1ee      	bne.n	800f108 <_scanf_float+0x2d4>
 800f12a:	3d03      	subs	r5, #3
 800f12c:	b2ed      	uxtb	r5, r5
 800f12e:	1b76      	subs	r6, r6, r5
 800f130:	6823      	ldr	r3, [r4, #0]
 800f132:	05da      	lsls	r2, r3, #23
 800f134:	d530      	bpl.n	800f198 <_scanf_float+0x364>
 800f136:	055b      	lsls	r3, r3, #21
 800f138:	d511      	bpl.n	800f15e <_scanf_float+0x32a>
 800f13a:	9b01      	ldr	r3, [sp, #4]
 800f13c:	429e      	cmp	r6, r3
 800f13e:	f67f aebc 	bls.w	800eeba <_scanf_float+0x86>
 800f142:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f146:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f14a:	463a      	mov	r2, r7
 800f14c:	4640      	mov	r0, r8
 800f14e:	4798      	blx	r3
 800f150:	6923      	ldr	r3, [r4, #16]
 800f152:	3b01      	subs	r3, #1
 800f154:	6123      	str	r3, [r4, #16]
 800f156:	e7f0      	b.n	800f13a <_scanf_float+0x306>
 800f158:	46aa      	mov	sl, r5
 800f15a:	46b3      	mov	fp, r6
 800f15c:	e7de      	b.n	800f11c <_scanf_float+0x2e8>
 800f15e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f162:	6923      	ldr	r3, [r4, #16]
 800f164:	2965      	cmp	r1, #101	@ 0x65
 800f166:	f103 33ff 	add.w	r3, r3, #4294967295
 800f16a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f16e:	6123      	str	r3, [r4, #16]
 800f170:	d00c      	beq.n	800f18c <_scanf_float+0x358>
 800f172:	2945      	cmp	r1, #69	@ 0x45
 800f174:	d00a      	beq.n	800f18c <_scanf_float+0x358>
 800f176:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f17a:	463a      	mov	r2, r7
 800f17c:	4640      	mov	r0, r8
 800f17e:	4798      	blx	r3
 800f180:	6923      	ldr	r3, [r4, #16]
 800f182:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f186:	3b01      	subs	r3, #1
 800f188:	1eb5      	subs	r5, r6, #2
 800f18a:	6123      	str	r3, [r4, #16]
 800f18c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f190:	463a      	mov	r2, r7
 800f192:	4640      	mov	r0, r8
 800f194:	4798      	blx	r3
 800f196:	462e      	mov	r6, r5
 800f198:	6822      	ldr	r2, [r4, #0]
 800f19a:	f012 0210 	ands.w	r2, r2, #16
 800f19e:	d001      	beq.n	800f1a4 <_scanf_float+0x370>
 800f1a0:	2000      	movs	r0, #0
 800f1a2:	e68b      	b.n	800eebc <_scanf_float+0x88>
 800f1a4:	7032      	strb	r2, [r6, #0]
 800f1a6:	6823      	ldr	r3, [r4, #0]
 800f1a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f1ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f1b0:	d11c      	bne.n	800f1ec <_scanf_float+0x3b8>
 800f1b2:	9b02      	ldr	r3, [sp, #8]
 800f1b4:	454b      	cmp	r3, r9
 800f1b6:	eba3 0209 	sub.w	r2, r3, r9
 800f1ba:	d123      	bne.n	800f204 <_scanf_float+0x3d0>
 800f1bc:	9901      	ldr	r1, [sp, #4]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	4640      	mov	r0, r8
 800f1c2:	f002 fc8d 	bl	8011ae0 <_strtod_r>
 800f1c6:	9b03      	ldr	r3, [sp, #12]
 800f1c8:	6821      	ldr	r1, [r4, #0]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f011 0f02 	tst.w	r1, #2
 800f1d0:	ec57 6b10 	vmov	r6, r7, d0
 800f1d4:	f103 0204 	add.w	r2, r3, #4
 800f1d8:	d01f      	beq.n	800f21a <_scanf_float+0x3e6>
 800f1da:	9903      	ldr	r1, [sp, #12]
 800f1dc:	600a      	str	r2, [r1, #0]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	e9c3 6700 	strd	r6, r7, [r3]
 800f1e4:	68e3      	ldr	r3, [r4, #12]
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	60e3      	str	r3, [r4, #12]
 800f1ea:	e7d9      	b.n	800f1a0 <_scanf_float+0x36c>
 800f1ec:	9b04      	ldr	r3, [sp, #16]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d0e4      	beq.n	800f1bc <_scanf_float+0x388>
 800f1f2:	9905      	ldr	r1, [sp, #20]
 800f1f4:	230a      	movs	r3, #10
 800f1f6:	3101      	adds	r1, #1
 800f1f8:	4640      	mov	r0, r8
 800f1fa:	f002 fcf1 	bl	8011be0 <_strtol_r>
 800f1fe:	9b04      	ldr	r3, [sp, #16]
 800f200:	9e05      	ldr	r6, [sp, #20]
 800f202:	1ac2      	subs	r2, r0, r3
 800f204:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f208:	429e      	cmp	r6, r3
 800f20a:	bf28      	it	cs
 800f20c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f210:	4910      	ldr	r1, [pc, #64]	@ (800f254 <_scanf_float+0x420>)
 800f212:	4630      	mov	r0, r6
 800f214:	f000 f988 	bl	800f528 <siprintf>
 800f218:	e7d0      	b.n	800f1bc <_scanf_float+0x388>
 800f21a:	f011 0f04 	tst.w	r1, #4
 800f21e:	9903      	ldr	r1, [sp, #12]
 800f220:	600a      	str	r2, [r1, #0]
 800f222:	d1dc      	bne.n	800f1de <_scanf_float+0x3aa>
 800f224:	681d      	ldr	r5, [r3, #0]
 800f226:	4632      	mov	r2, r6
 800f228:	463b      	mov	r3, r7
 800f22a:	4630      	mov	r0, r6
 800f22c:	4639      	mov	r1, r7
 800f22e:	f7f1 fc9d 	bl	8000b6c <__aeabi_dcmpun>
 800f232:	b128      	cbz	r0, 800f240 <_scanf_float+0x40c>
 800f234:	4808      	ldr	r0, [pc, #32]	@ (800f258 <_scanf_float+0x424>)
 800f236:	f000 faff 	bl	800f838 <nanf>
 800f23a:	ed85 0a00 	vstr	s0, [r5]
 800f23e:	e7d1      	b.n	800f1e4 <_scanf_float+0x3b0>
 800f240:	4630      	mov	r0, r6
 800f242:	4639      	mov	r1, r7
 800f244:	f7f1 fcf0 	bl	8000c28 <__aeabi_d2f>
 800f248:	6028      	str	r0, [r5, #0]
 800f24a:	e7cb      	b.n	800f1e4 <_scanf_float+0x3b0>
 800f24c:	f04f 0900 	mov.w	r9, #0
 800f250:	e629      	b.n	800eea6 <_scanf_float+0x72>
 800f252:	bf00      	nop
 800f254:	08013dcc 	.word	0x08013dcc
 800f258:	08014165 	.word	0x08014165

0800f25c <std>:
 800f25c:	2300      	movs	r3, #0
 800f25e:	b510      	push	{r4, lr}
 800f260:	4604      	mov	r4, r0
 800f262:	e9c0 3300 	strd	r3, r3, [r0]
 800f266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f26a:	6083      	str	r3, [r0, #8]
 800f26c:	8181      	strh	r1, [r0, #12]
 800f26e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f270:	81c2      	strh	r2, [r0, #14]
 800f272:	6183      	str	r3, [r0, #24]
 800f274:	4619      	mov	r1, r3
 800f276:	2208      	movs	r2, #8
 800f278:	305c      	adds	r0, #92	@ 0x5c
 800f27a:	f000 fa4d 	bl	800f718 <memset>
 800f27e:	4b0d      	ldr	r3, [pc, #52]	@ (800f2b4 <std+0x58>)
 800f280:	6263      	str	r3, [r4, #36]	@ 0x24
 800f282:	4b0d      	ldr	r3, [pc, #52]	@ (800f2b8 <std+0x5c>)
 800f284:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f286:	4b0d      	ldr	r3, [pc, #52]	@ (800f2bc <std+0x60>)
 800f288:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f28a:	4b0d      	ldr	r3, [pc, #52]	@ (800f2c0 <std+0x64>)
 800f28c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f28e:	4b0d      	ldr	r3, [pc, #52]	@ (800f2c4 <std+0x68>)
 800f290:	6224      	str	r4, [r4, #32]
 800f292:	429c      	cmp	r4, r3
 800f294:	d006      	beq.n	800f2a4 <std+0x48>
 800f296:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f29a:	4294      	cmp	r4, r2
 800f29c:	d002      	beq.n	800f2a4 <std+0x48>
 800f29e:	33d0      	adds	r3, #208	@ 0xd0
 800f2a0:	429c      	cmp	r4, r3
 800f2a2:	d105      	bne.n	800f2b0 <std+0x54>
 800f2a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2ac:	f000 bac0 	b.w	800f830 <__retarget_lock_init_recursive>
 800f2b0:	bd10      	pop	{r4, pc}
 800f2b2:	bf00      	nop
 800f2b4:	0800f569 	.word	0x0800f569
 800f2b8:	0800f58b 	.word	0x0800f58b
 800f2bc:	0800f5c3 	.word	0x0800f5c3
 800f2c0:	0800f5e7 	.word	0x0800f5e7
 800f2c4:	20003294 	.word	0x20003294

0800f2c8 <stdio_exit_handler>:
 800f2c8:	4a02      	ldr	r2, [pc, #8]	@ (800f2d4 <stdio_exit_handler+0xc>)
 800f2ca:	4903      	ldr	r1, [pc, #12]	@ (800f2d8 <stdio_exit_handler+0x10>)
 800f2cc:	4803      	ldr	r0, [pc, #12]	@ (800f2dc <stdio_exit_handler+0x14>)
 800f2ce:	f000 b869 	b.w	800f3a4 <_fwalk_sglue>
 800f2d2:	bf00      	nop
 800f2d4:	20000078 	.word	0x20000078
 800f2d8:	08012221 	.word	0x08012221
 800f2dc:	20000088 	.word	0x20000088

0800f2e0 <cleanup_stdio>:
 800f2e0:	6841      	ldr	r1, [r0, #4]
 800f2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800f314 <cleanup_stdio+0x34>)
 800f2e4:	4299      	cmp	r1, r3
 800f2e6:	b510      	push	{r4, lr}
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	d001      	beq.n	800f2f0 <cleanup_stdio+0x10>
 800f2ec:	f002 ff98 	bl	8012220 <_fflush_r>
 800f2f0:	68a1      	ldr	r1, [r4, #8]
 800f2f2:	4b09      	ldr	r3, [pc, #36]	@ (800f318 <cleanup_stdio+0x38>)
 800f2f4:	4299      	cmp	r1, r3
 800f2f6:	d002      	beq.n	800f2fe <cleanup_stdio+0x1e>
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f002 ff91 	bl	8012220 <_fflush_r>
 800f2fe:	68e1      	ldr	r1, [r4, #12]
 800f300:	4b06      	ldr	r3, [pc, #24]	@ (800f31c <cleanup_stdio+0x3c>)
 800f302:	4299      	cmp	r1, r3
 800f304:	d004      	beq.n	800f310 <cleanup_stdio+0x30>
 800f306:	4620      	mov	r0, r4
 800f308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f30c:	f002 bf88 	b.w	8012220 <_fflush_r>
 800f310:	bd10      	pop	{r4, pc}
 800f312:	bf00      	nop
 800f314:	20003294 	.word	0x20003294
 800f318:	200032fc 	.word	0x200032fc
 800f31c:	20003364 	.word	0x20003364

0800f320 <global_stdio_init.part.0>:
 800f320:	b510      	push	{r4, lr}
 800f322:	4b0b      	ldr	r3, [pc, #44]	@ (800f350 <global_stdio_init.part.0+0x30>)
 800f324:	4c0b      	ldr	r4, [pc, #44]	@ (800f354 <global_stdio_init.part.0+0x34>)
 800f326:	4a0c      	ldr	r2, [pc, #48]	@ (800f358 <global_stdio_init.part.0+0x38>)
 800f328:	601a      	str	r2, [r3, #0]
 800f32a:	4620      	mov	r0, r4
 800f32c:	2200      	movs	r2, #0
 800f32e:	2104      	movs	r1, #4
 800f330:	f7ff ff94 	bl	800f25c <std>
 800f334:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f338:	2201      	movs	r2, #1
 800f33a:	2109      	movs	r1, #9
 800f33c:	f7ff ff8e 	bl	800f25c <std>
 800f340:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f344:	2202      	movs	r2, #2
 800f346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f34a:	2112      	movs	r1, #18
 800f34c:	f7ff bf86 	b.w	800f25c <std>
 800f350:	200033cc 	.word	0x200033cc
 800f354:	20003294 	.word	0x20003294
 800f358:	0800f2c9 	.word	0x0800f2c9

0800f35c <__sfp_lock_acquire>:
 800f35c:	4801      	ldr	r0, [pc, #4]	@ (800f364 <__sfp_lock_acquire+0x8>)
 800f35e:	f000 ba68 	b.w	800f832 <__retarget_lock_acquire_recursive>
 800f362:	bf00      	nop
 800f364:	200033d5 	.word	0x200033d5

0800f368 <__sfp_lock_release>:
 800f368:	4801      	ldr	r0, [pc, #4]	@ (800f370 <__sfp_lock_release+0x8>)
 800f36a:	f000 ba63 	b.w	800f834 <__retarget_lock_release_recursive>
 800f36e:	bf00      	nop
 800f370:	200033d5 	.word	0x200033d5

0800f374 <__sinit>:
 800f374:	b510      	push	{r4, lr}
 800f376:	4604      	mov	r4, r0
 800f378:	f7ff fff0 	bl	800f35c <__sfp_lock_acquire>
 800f37c:	6a23      	ldr	r3, [r4, #32]
 800f37e:	b11b      	cbz	r3, 800f388 <__sinit+0x14>
 800f380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f384:	f7ff bff0 	b.w	800f368 <__sfp_lock_release>
 800f388:	4b04      	ldr	r3, [pc, #16]	@ (800f39c <__sinit+0x28>)
 800f38a:	6223      	str	r3, [r4, #32]
 800f38c:	4b04      	ldr	r3, [pc, #16]	@ (800f3a0 <__sinit+0x2c>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d1f5      	bne.n	800f380 <__sinit+0xc>
 800f394:	f7ff ffc4 	bl	800f320 <global_stdio_init.part.0>
 800f398:	e7f2      	b.n	800f380 <__sinit+0xc>
 800f39a:	bf00      	nop
 800f39c:	0800f2e1 	.word	0x0800f2e1
 800f3a0:	200033cc 	.word	0x200033cc

0800f3a4 <_fwalk_sglue>:
 800f3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3a8:	4607      	mov	r7, r0
 800f3aa:	4688      	mov	r8, r1
 800f3ac:	4614      	mov	r4, r2
 800f3ae:	2600      	movs	r6, #0
 800f3b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3b4:	f1b9 0901 	subs.w	r9, r9, #1
 800f3b8:	d505      	bpl.n	800f3c6 <_fwalk_sglue+0x22>
 800f3ba:	6824      	ldr	r4, [r4, #0]
 800f3bc:	2c00      	cmp	r4, #0
 800f3be:	d1f7      	bne.n	800f3b0 <_fwalk_sglue+0xc>
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3c6:	89ab      	ldrh	r3, [r5, #12]
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d907      	bls.n	800f3dc <_fwalk_sglue+0x38>
 800f3cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	d003      	beq.n	800f3dc <_fwalk_sglue+0x38>
 800f3d4:	4629      	mov	r1, r5
 800f3d6:	4638      	mov	r0, r7
 800f3d8:	47c0      	blx	r8
 800f3da:	4306      	orrs	r6, r0
 800f3dc:	3568      	adds	r5, #104	@ 0x68
 800f3de:	e7e9      	b.n	800f3b4 <_fwalk_sglue+0x10>

0800f3e0 <iprintf>:
 800f3e0:	b40f      	push	{r0, r1, r2, r3}
 800f3e2:	b507      	push	{r0, r1, r2, lr}
 800f3e4:	4906      	ldr	r1, [pc, #24]	@ (800f400 <iprintf+0x20>)
 800f3e6:	ab04      	add	r3, sp, #16
 800f3e8:	6808      	ldr	r0, [r1, #0]
 800f3ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3ee:	6881      	ldr	r1, [r0, #8]
 800f3f0:	9301      	str	r3, [sp, #4]
 800f3f2:	f002 fd79 	bl	8011ee8 <_vfiprintf_r>
 800f3f6:	b003      	add	sp, #12
 800f3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3fc:	b004      	add	sp, #16
 800f3fe:	4770      	bx	lr
 800f400:	20000084 	.word	0x20000084

0800f404 <_puts_r>:
 800f404:	6a03      	ldr	r3, [r0, #32]
 800f406:	b570      	push	{r4, r5, r6, lr}
 800f408:	6884      	ldr	r4, [r0, #8]
 800f40a:	4605      	mov	r5, r0
 800f40c:	460e      	mov	r6, r1
 800f40e:	b90b      	cbnz	r3, 800f414 <_puts_r+0x10>
 800f410:	f7ff ffb0 	bl	800f374 <__sinit>
 800f414:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f416:	07db      	lsls	r3, r3, #31
 800f418:	d405      	bmi.n	800f426 <_puts_r+0x22>
 800f41a:	89a3      	ldrh	r3, [r4, #12]
 800f41c:	0598      	lsls	r0, r3, #22
 800f41e:	d402      	bmi.n	800f426 <_puts_r+0x22>
 800f420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f422:	f000 fa06 	bl	800f832 <__retarget_lock_acquire_recursive>
 800f426:	89a3      	ldrh	r3, [r4, #12]
 800f428:	0719      	lsls	r1, r3, #28
 800f42a:	d502      	bpl.n	800f432 <_puts_r+0x2e>
 800f42c:	6923      	ldr	r3, [r4, #16]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d135      	bne.n	800f49e <_puts_r+0x9a>
 800f432:	4621      	mov	r1, r4
 800f434:	4628      	mov	r0, r5
 800f436:	f000 f919 	bl	800f66c <__swsetup_r>
 800f43a:	b380      	cbz	r0, 800f49e <_puts_r+0x9a>
 800f43c:	f04f 35ff 	mov.w	r5, #4294967295
 800f440:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f442:	07da      	lsls	r2, r3, #31
 800f444:	d405      	bmi.n	800f452 <_puts_r+0x4e>
 800f446:	89a3      	ldrh	r3, [r4, #12]
 800f448:	059b      	lsls	r3, r3, #22
 800f44a:	d402      	bmi.n	800f452 <_puts_r+0x4e>
 800f44c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f44e:	f000 f9f1 	bl	800f834 <__retarget_lock_release_recursive>
 800f452:	4628      	mov	r0, r5
 800f454:	bd70      	pop	{r4, r5, r6, pc}
 800f456:	2b00      	cmp	r3, #0
 800f458:	da04      	bge.n	800f464 <_puts_r+0x60>
 800f45a:	69a2      	ldr	r2, [r4, #24]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	dc17      	bgt.n	800f490 <_puts_r+0x8c>
 800f460:	290a      	cmp	r1, #10
 800f462:	d015      	beq.n	800f490 <_puts_r+0x8c>
 800f464:	6823      	ldr	r3, [r4, #0]
 800f466:	1c5a      	adds	r2, r3, #1
 800f468:	6022      	str	r2, [r4, #0]
 800f46a:	7019      	strb	r1, [r3, #0]
 800f46c:	68a3      	ldr	r3, [r4, #8]
 800f46e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f472:	3b01      	subs	r3, #1
 800f474:	60a3      	str	r3, [r4, #8]
 800f476:	2900      	cmp	r1, #0
 800f478:	d1ed      	bne.n	800f456 <_puts_r+0x52>
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	da11      	bge.n	800f4a2 <_puts_r+0x9e>
 800f47e:	4622      	mov	r2, r4
 800f480:	210a      	movs	r1, #10
 800f482:	4628      	mov	r0, r5
 800f484:	f000 f8b3 	bl	800f5ee <__swbuf_r>
 800f488:	3001      	adds	r0, #1
 800f48a:	d0d7      	beq.n	800f43c <_puts_r+0x38>
 800f48c:	250a      	movs	r5, #10
 800f48e:	e7d7      	b.n	800f440 <_puts_r+0x3c>
 800f490:	4622      	mov	r2, r4
 800f492:	4628      	mov	r0, r5
 800f494:	f000 f8ab 	bl	800f5ee <__swbuf_r>
 800f498:	3001      	adds	r0, #1
 800f49a:	d1e7      	bne.n	800f46c <_puts_r+0x68>
 800f49c:	e7ce      	b.n	800f43c <_puts_r+0x38>
 800f49e:	3e01      	subs	r6, #1
 800f4a0:	e7e4      	b.n	800f46c <_puts_r+0x68>
 800f4a2:	6823      	ldr	r3, [r4, #0]
 800f4a4:	1c5a      	adds	r2, r3, #1
 800f4a6:	6022      	str	r2, [r4, #0]
 800f4a8:	220a      	movs	r2, #10
 800f4aa:	701a      	strb	r2, [r3, #0]
 800f4ac:	e7ee      	b.n	800f48c <_puts_r+0x88>
	...

0800f4b0 <puts>:
 800f4b0:	4b02      	ldr	r3, [pc, #8]	@ (800f4bc <puts+0xc>)
 800f4b2:	4601      	mov	r1, r0
 800f4b4:	6818      	ldr	r0, [r3, #0]
 800f4b6:	f7ff bfa5 	b.w	800f404 <_puts_r>
 800f4ba:	bf00      	nop
 800f4bc:	20000084 	.word	0x20000084

0800f4c0 <sniprintf>:
 800f4c0:	b40c      	push	{r2, r3}
 800f4c2:	b530      	push	{r4, r5, lr}
 800f4c4:	4b17      	ldr	r3, [pc, #92]	@ (800f524 <sniprintf+0x64>)
 800f4c6:	1e0c      	subs	r4, r1, #0
 800f4c8:	681d      	ldr	r5, [r3, #0]
 800f4ca:	b09d      	sub	sp, #116	@ 0x74
 800f4cc:	da08      	bge.n	800f4e0 <sniprintf+0x20>
 800f4ce:	238b      	movs	r3, #139	@ 0x8b
 800f4d0:	602b      	str	r3, [r5, #0]
 800f4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d6:	b01d      	add	sp, #116	@ 0x74
 800f4d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4dc:	b002      	add	sp, #8
 800f4de:	4770      	bx	lr
 800f4e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f4e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f4e8:	bf14      	ite	ne
 800f4ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f4ee:	4623      	moveq	r3, r4
 800f4f0:	9304      	str	r3, [sp, #16]
 800f4f2:	9307      	str	r3, [sp, #28]
 800f4f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f4f8:	9002      	str	r0, [sp, #8]
 800f4fa:	9006      	str	r0, [sp, #24]
 800f4fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f500:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f502:	ab21      	add	r3, sp, #132	@ 0x84
 800f504:	a902      	add	r1, sp, #8
 800f506:	4628      	mov	r0, r5
 800f508:	9301      	str	r3, [sp, #4]
 800f50a:	f002 fbc7 	bl	8011c9c <_svfiprintf_r>
 800f50e:	1c43      	adds	r3, r0, #1
 800f510:	bfbc      	itt	lt
 800f512:	238b      	movlt	r3, #139	@ 0x8b
 800f514:	602b      	strlt	r3, [r5, #0]
 800f516:	2c00      	cmp	r4, #0
 800f518:	d0dd      	beq.n	800f4d6 <sniprintf+0x16>
 800f51a:	9b02      	ldr	r3, [sp, #8]
 800f51c:	2200      	movs	r2, #0
 800f51e:	701a      	strb	r2, [r3, #0]
 800f520:	e7d9      	b.n	800f4d6 <sniprintf+0x16>
 800f522:	bf00      	nop
 800f524:	20000084 	.word	0x20000084

0800f528 <siprintf>:
 800f528:	b40e      	push	{r1, r2, r3}
 800f52a:	b500      	push	{lr}
 800f52c:	b09c      	sub	sp, #112	@ 0x70
 800f52e:	ab1d      	add	r3, sp, #116	@ 0x74
 800f530:	9002      	str	r0, [sp, #8]
 800f532:	9006      	str	r0, [sp, #24]
 800f534:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f538:	4809      	ldr	r0, [pc, #36]	@ (800f560 <siprintf+0x38>)
 800f53a:	9107      	str	r1, [sp, #28]
 800f53c:	9104      	str	r1, [sp, #16]
 800f53e:	4909      	ldr	r1, [pc, #36]	@ (800f564 <siprintf+0x3c>)
 800f540:	f853 2b04 	ldr.w	r2, [r3], #4
 800f544:	9105      	str	r1, [sp, #20]
 800f546:	6800      	ldr	r0, [r0, #0]
 800f548:	9301      	str	r3, [sp, #4]
 800f54a:	a902      	add	r1, sp, #8
 800f54c:	f002 fba6 	bl	8011c9c <_svfiprintf_r>
 800f550:	9b02      	ldr	r3, [sp, #8]
 800f552:	2200      	movs	r2, #0
 800f554:	701a      	strb	r2, [r3, #0]
 800f556:	b01c      	add	sp, #112	@ 0x70
 800f558:	f85d eb04 	ldr.w	lr, [sp], #4
 800f55c:	b003      	add	sp, #12
 800f55e:	4770      	bx	lr
 800f560:	20000084 	.word	0x20000084
 800f564:	ffff0208 	.word	0xffff0208

0800f568 <__sread>:
 800f568:	b510      	push	{r4, lr}
 800f56a:	460c      	mov	r4, r1
 800f56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f570:	f000 f900 	bl	800f774 <_read_r>
 800f574:	2800      	cmp	r0, #0
 800f576:	bfab      	itete	ge
 800f578:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f57a:	89a3      	ldrhlt	r3, [r4, #12]
 800f57c:	181b      	addge	r3, r3, r0
 800f57e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f582:	bfac      	ite	ge
 800f584:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f586:	81a3      	strhlt	r3, [r4, #12]
 800f588:	bd10      	pop	{r4, pc}

0800f58a <__swrite>:
 800f58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f58e:	461f      	mov	r7, r3
 800f590:	898b      	ldrh	r3, [r1, #12]
 800f592:	05db      	lsls	r3, r3, #23
 800f594:	4605      	mov	r5, r0
 800f596:	460c      	mov	r4, r1
 800f598:	4616      	mov	r6, r2
 800f59a:	d505      	bpl.n	800f5a8 <__swrite+0x1e>
 800f59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5a0:	2302      	movs	r3, #2
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	f000 f8d4 	bl	800f750 <_lseek_r>
 800f5a8:	89a3      	ldrh	r3, [r4, #12]
 800f5aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f5b2:	81a3      	strh	r3, [r4, #12]
 800f5b4:	4632      	mov	r2, r6
 800f5b6:	463b      	mov	r3, r7
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5be:	f000 b8fb 	b.w	800f7b8 <_write_r>

0800f5c2 <__sseek>:
 800f5c2:	b510      	push	{r4, lr}
 800f5c4:	460c      	mov	r4, r1
 800f5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5ca:	f000 f8c1 	bl	800f750 <_lseek_r>
 800f5ce:	1c43      	adds	r3, r0, #1
 800f5d0:	89a3      	ldrh	r3, [r4, #12]
 800f5d2:	bf15      	itete	ne
 800f5d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f5d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f5da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f5de:	81a3      	strheq	r3, [r4, #12]
 800f5e0:	bf18      	it	ne
 800f5e2:	81a3      	strhne	r3, [r4, #12]
 800f5e4:	bd10      	pop	{r4, pc}

0800f5e6 <__sclose>:
 800f5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5ea:	f000 b8a1 	b.w	800f730 <_close_r>

0800f5ee <__swbuf_r>:
 800f5ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f0:	460e      	mov	r6, r1
 800f5f2:	4614      	mov	r4, r2
 800f5f4:	4605      	mov	r5, r0
 800f5f6:	b118      	cbz	r0, 800f600 <__swbuf_r+0x12>
 800f5f8:	6a03      	ldr	r3, [r0, #32]
 800f5fa:	b90b      	cbnz	r3, 800f600 <__swbuf_r+0x12>
 800f5fc:	f7ff feba 	bl	800f374 <__sinit>
 800f600:	69a3      	ldr	r3, [r4, #24]
 800f602:	60a3      	str	r3, [r4, #8]
 800f604:	89a3      	ldrh	r3, [r4, #12]
 800f606:	071a      	lsls	r2, r3, #28
 800f608:	d501      	bpl.n	800f60e <__swbuf_r+0x20>
 800f60a:	6923      	ldr	r3, [r4, #16]
 800f60c:	b943      	cbnz	r3, 800f620 <__swbuf_r+0x32>
 800f60e:	4621      	mov	r1, r4
 800f610:	4628      	mov	r0, r5
 800f612:	f000 f82b 	bl	800f66c <__swsetup_r>
 800f616:	b118      	cbz	r0, 800f620 <__swbuf_r+0x32>
 800f618:	f04f 37ff 	mov.w	r7, #4294967295
 800f61c:	4638      	mov	r0, r7
 800f61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f620:	6823      	ldr	r3, [r4, #0]
 800f622:	6922      	ldr	r2, [r4, #16]
 800f624:	1a98      	subs	r0, r3, r2
 800f626:	6963      	ldr	r3, [r4, #20]
 800f628:	b2f6      	uxtb	r6, r6
 800f62a:	4283      	cmp	r3, r0
 800f62c:	4637      	mov	r7, r6
 800f62e:	dc05      	bgt.n	800f63c <__swbuf_r+0x4e>
 800f630:	4621      	mov	r1, r4
 800f632:	4628      	mov	r0, r5
 800f634:	f002 fdf4 	bl	8012220 <_fflush_r>
 800f638:	2800      	cmp	r0, #0
 800f63a:	d1ed      	bne.n	800f618 <__swbuf_r+0x2a>
 800f63c:	68a3      	ldr	r3, [r4, #8]
 800f63e:	3b01      	subs	r3, #1
 800f640:	60a3      	str	r3, [r4, #8]
 800f642:	6823      	ldr	r3, [r4, #0]
 800f644:	1c5a      	adds	r2, r3, #1
 800f646:	6022      	str	r2, [r4, #0]
 800f648:	701e      	strb	r6, [r3, #0]
 800f64a:	6962      	ldr	r2, [r4, #20]
 800f64c:	1c43      	adds	r3, r0, #1
 800f64e:	429a      	cmp	r2, r3
 800f650:	d004      	beq.n	800f65c <__swbuf_r+0x6e>
 800f652:	89a3      	ldrh	r3, [r4, #12]
 800f654:	07db      	lsls	r3, r3, #31
 800f656:	d5e1      	bpl.n	800f61c <__swbuf_r+0x2e>
 800f658:	2e0a      	cmp	r6, #10
 800f65a:	d1df      	bne.n	800f61c <__swbuf_r+0x2e>
 800f65c:	4621      	mov	r1, r4
 800f65e:	4628      	mov	r0, r5
 800f660:	f002 fdde 	bl	8012220 <_fflush_r>
 800f664:	2800      	cmp	r0, #0
 800f666:	d0d9      	beq.n	800f61c <__swbuf_r+0x2e>
 800f668:	e7d6      	b.n	800f618 <__swbuf_r+0x2a>
	...

0800f66c <__swsetup_r>:
 800f66c:	b538      	push	{r3, r4, r5, lr}
 800f66e:	4b29      	ldr	r3, [pc, #164]	@ (800f714 <__swsetup_r+0xa8>)
 800f670:	4605      	mov	r5, r0
 800f672:	6818      	ldr	r0, [r3, #0]
 800f674:	460c      	mov	r4, r1
 800f676:	b118      	cbz	r0, 800f680 <__swsetup_r+0x14>
 800f678:	6a03      	ldr	r3, [r0, #32]
 800f67a:	b90b      	cbnz	r3, 800f680 <__swsetup_r+0x14>
 800f67c:	f7ff fe7a 	bl	800f374 <__sinit>
 800f680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f684:	0719      	lsls	r1, r3, #28
 800f686:	d422      	bmi.n	800f6ce <__swsetup_r+0x62>
 800f688:	06da      	lsls	r2, r3, #27
 800f68a:	d407      	bmi.n	800f69c <__swsetup_r+0x30>
 800f68c:	2209      	movs	r2, #9
 800f68e:	602a      	str	r2, [r5, #0]
 800f690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f694:	81a3      	strh	r3, [r4, #12]
 800f696:	f04f 30ff 	mov.w	r0, #4294967295
 800f69a:	e033      	b.n	800f704 <__swsetup_r+0x98>
 800f69c:	0758      	lsls	r0, r3, #29
 800f69e:	d512      	bpl.n	800f6c6 <__swsetup_r+0x5a>
 800f6a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6a2:	b141      	cbz	r1, 800f6b6 <__swsetup_r+0x4a>
 800f6a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6a8:	4299      	cmp	r1, r3
 800f6aa:	d002      	beq.n	800f6b2 <__swsetup_r+0x46>
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	f000 ff17 	bl	80104e0 <_free_r>
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6b6:	89a3      	ldrh	r3, [r4, #12]
 800f6b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f6bc:	81a3      	strh	r3, [r4, #12]
 800f6be:	2300      	movs	r3, #0
 800f6c0:	6063      	str	r3, [r4, #4]
 800f6c2:	6923      	ldr	r3, [r4, #16]
 800f6c4:	6023      	str	r3, [r4, #0]
 800f6c6:	89a3      	ldrh	r3, [r4, #12]
 800f6c8:	f043 0308 	orr.w	r3, r3, #8
 800f6cc:	81a3      	strh	r3, [r4, #12]
 800f6ce:	6923      	ldr	r3, [r4, #16]
 800f6d0:	b94b      	cbnz	r3, 800f6e6 <__swsetup_r+0x7a>
 800f6d2:	89a3      	ldrh	r3, [r4, #12]
 800f6d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f6d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f6dc:	d003      	beq.n	800f6e6 <__swsetup_r+0x7a>
 800f6de:	4621      	mov	r1, r4
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	f002 fdeb 	bl	80122bc <__smakebuf_r>
 800f6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6ea:	f013 0201 	ands.w	r2, r3, #1
 800f6ee:	d00a      	beq.n	800f706 <__swsetup_r+0x9a>
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	60a2      	str	r2, [r4, #8]
 800f6f4:	6962      	ldr	r2, [r4, #20]
 800f6f6:	4252      	negs	r2, r2
 800f6f8:	61a2      	str	r2, [r4, #24]
 800f6fa:	6922      	ldr	r2, [r4, #16]
 800f6fc:	b942      	cbnz	r2, 800f710 <__swsetup_r+0xa4>
 800f6fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f702:	d1c5      	bne.n	800f690 <__swsetup_r+0x24>
 800f704:	bd38      	pop	{r3, r4, r5, pc}
 800f706:	0799      	lsls	r1, r3, #30
 800f708:	bf58      	it	pl
 800f70a:	6962      	ldrpl	r2, [r4, #20]
 800f70c:	60a2      	str	r2, [r4, #8]
 800f70e:	e7f4      	b.n	800f6fa <__swsetup_r+0x8e>
 800f710:	2000      	movs	r0, #0
 800f712:	e7f7      	b.n	800f704 <__swsetup_r+0x98>
 800f714:	20000084 	.word	0x20000084

0800f718 <memset>:
 800f718:	4402      	add	r2, r0
 800f71a:	4603      	mov	r3, r0
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d100      	bne.n	800f722 <memset+0xa>
 800f720:	4770      	bx	lr
 800f722:	f803 1b01 	strb.w	r1, [r3], #1
 800f726:	e7f9      	b.n	800f71c <memset+0x4>

0800f728 <_localeconv_r>:
 800f728:	4800      	ldr	r0, [pc, #0]	@ (800f72c <_localeconv_r+0x4>)
 800f72a:	4770      	bx	lr
 800f72c:	200001c4 	.word	0x200001c4

0800f730 <_close_r>:
 800f730:	b538      	push	{r3, r4, r5, lr}
 800f732:	4d06      	ldr	r5, [pc, #24]	@ (800f74c <_close_r+0x1c>)
 800f734:	2300      	movs	r3, #0
 800f736:	4604      	mov	r4, r0
 800f738:	4608      	mov	r0, r1
 800f73a:	602b      	str	r3, [r5, #0]
 800f73c:	f7f4 fe7c 	bl	8004438 <_close>
 800f740:	1c43      	adds	r3, r0, #1
 800f742:	d102      	bne.n	800f74a <_close_r+0x1a>
 800f744:	682b      	ldr	r3, [r5, #0]
 800f746:	b103      	cbz	r3, 800f74a <_close_r+0x1a>
 800f748:	6023      	str	r3, [r4, #0]
 800f74a:	bd38      	pop	{r3, r4, r5, pc}
 800f74c:	200033d0 	.word	0x200033d0

0800f750 <_lseek_r>:
 800f750:	b538      	push	{r3, r4, r5, lr}
 800f752:	4d07      	ldr	r5, [pc, #28]	@ (800f770 <_lseek_r+0x20>)
 800f754:	4604      	mov	r4, r0
 800f756:	4608      	mov	r0, r1
 800f758:	4611      	mov	r1, r2
 800f75a:	2200      	movs	r2, #0
 800f75c:	602a      	str	r2, [r5, #0]
 800f75e:	461a      	mov	r2, r3
 800f760:	f7f4 fe91 	bl	8004486 <_lseek>
 800f764:	1c43      	adds	r3, r0, #1
 800f766:	d102      	bne.n	800f76e <_lseek_r+0x1e>
 800f768:	682b      	ldr	r3, [r5, #0]
 800f76a:	b103      	cbz	r3, 800f76e <_lseek_r+0x1e>
 800f76c:	6023      	str	r3, [r4, #0]
 800f76e:	bd38      	pop	{r3, r4, r5, pc}
 800f770:	200033d0 	.word	0x200033d0

0800f774 <_read_r>:
 800f774:	b538      	push	{r3, r4, r5, lr}
 800f776:	4d07      	ldr	r5, [pc, #28]	@ (800f794 <_read_r+0x20>)
 800f778:	4604      	mov	r4, r0
 800f77a:	4608      	mov	r0, r1
 800f77c:	4611      	mov	r1, r2
 800f77e:	2200      	movs	r2, #0
 800f780:	602a      	str	r2, [r5, #0]
 800f782:	461a      	mov	r2, r3
 800f784:	f7f4 fe1f 	bl	80043c6 <_read>
 800f788:	1c43      	adds	r3, r0, #1
 800f78a:	d102      	bne.n	800f792 <_read_r+0x1e>
 800f78c:	682b      	ldr	r3, [r5, #0]
 800f78e:	b103      	cbz	r3, 800f792 <_read_r+0x1e>
 800f790:	6023      	str	r3, [r4, #0]
 800f792:	bd38      	pop	{r3, r4, r5, pc}
 800f794:	200033d0 	.word	0x200033d0

0800f798 <_sbrk_r>:
 800f798:	b538      	push	{r3, r4, r5, lr}
 800f79a:	4d06      	ldr	r5, [pc, #24]	@ (800f7b4 <_sbrk_r+0x1c>)
 800f79c:	2300      	movs	r3, #0
 800f79e:	4604      	mov	r4, r0
 800f7a0:	4608      	mov	r0, r1
 800f7a2:	602b      	str	r3, [r5, #0]
 800f7a4:	f7f4 fe7c 	bl	80044a0 <_sbrk>
 800f7a8:	1c43      	adds	r3, r0, #1
 800f7aa:	d102      	bne.n	800f7b2 <_sbrk_r+0x1a>
 800f7ac:	682b      	ldr	r3, [r5, #0]
 800f7ae:	b103      	cbz	r3, 800f7b2 <_sbrk_r+0x1a>
 800f7b0:	6023      	str	r3, [r4, #0]
 800f7b2:	bd38      	pop	{r3, r4, r5, pc}
 800f7b4:	200033d0 	.word	0x200033d0

0800f7b8 <_write_r>:
 800f7b8:	b538      	push	{r3, r4, r5, lr}
 800f7ba:	4d07      	ldr	r5, [pc, #28]	@ (800f7d8 <_write_r+0x20>)
 800f7bc:	4604      	mov	r4, r0
 800f7be:	4608      	mov	r0, r1
 800f7c0:	4611      	mov	r1, r2
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	602a      	str	r2, [r5, #0]
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	f7f4 fe1a 	bl	8004400 <_write>
 800f7cc:	1c43      	adds	r3, r0, #1
 800f7ce:	d102      	bne.n	800f7d6 <_write_r+0x1e>
 800f7d0:	682b      	ldr	r3, [r5, #0]
 800f7d2:	b103      	cbz	r3, 800f7d6 <_write_r+0x1e>
 800f7d4:	6023      	str	r3, [r4, #0]
 800f7d6:	bd38      	pop	{r3, r4, r5, pc}
 800f7d8:	200033d0 	.word	0x200033d0

0800f7dc <__errno>:
 800f7dc:	4b01      	ldr	r3, [pc, #4]	@ (800f7e4 <__errno+0x8>)
 800f7de:	6818      	ldr	r0, [r3, #0]
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop
 800f7e4:	20000084 	.word	0x20000084

0800f7e8 <__libc_init_array>:
 800f7e8:	b570      	push	{r4, r5, r6, lr}
 800f7ea:	4d0d      	ldr	r5, [pc, #52]	@ (800f820 <__libc_init_array+0x38>)
 800f7ec:	4c0d      	ldr	r4, [pc, #52]	@ (800f824 <__libc_init_array+0x3c>)
 800f7ee:	1b64      	subs	r4, r4, r5
 800f7f0:	10a4      	asrs	r4, r4, #2
 800f7f2:	2600      	movs	r6, #0
 800f7f4:	42a6      	cmp	r6, r4
 800f7f6:	d109      	bne.n	800f80c <__libc_init_array+0x24>
 800f7f8:	4d0b      	ldr	r5, [pc, #44]	@ (800f828 <__libc_init_array+0x40>)
 800f7fa:	4c0c      	ldr	r4, [pc, #48]	@ (800f82c <__libc_init_array+0x44>)
 800f7fc:	f003 fa1e 	bl	8012c3c <_init>
 800f800:	1b64      	subs	r4, r4, r5
 800f802:	10a4      	asrs	r4, r4, #2
 800f804:	2600      	movs	r6, #0
 800f806:	42a6      	cmp	r6, r4
 800f808:	d105      	bne.n	800f816 <__libc_init_array+0x2e>
 800f80a:	bd70      	pop	{r4, r5, r6, pc}
 800f80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f810:	4798      	blx	r3
 800f812:	3601      	adds	r6, #1
 800f814:	e7ee      	b.n	800f7f4 <__libc_init_array+0xc>
 800f816:	f855 3b04 	ldr.w	r3, [r5], #4
 800f81a:	4798      	blx	r3
 800f81c:	3601      	adds	r6, #1
 800f81e:	e7f2      	b.n	800f806 <__libc_init_array+0x1e>
 800f820:	080141d0 	.word	0x080141d0
 800f824:	080141d0 	.word	0x080141d0
 800f828:	080141d0 	.word	0x080141d0
 800f82c:	080141d4 	.word	0x080141d4

0800f830 <__retarget_lock_init_recursive>:
 800f830:	4770      	bx	lr

0800f832 <__retarget_lock_acquire_recursive>:
 800f832:	4770      	bx	lr

0800f834 <__retarget_lock_release_recursive>:
 800f834:	4770      	bx	lr
	...

0800f838 <nanf>:
 800f838:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f840 <nanf+0x8>
 800f83c:	4770      	bx	lr
 800f83e:	bf00      	nop
 800f840:	7fc00000 	.word	0x7fc00000

0800f844 <quorem>:
 800f844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f848:	6903      	ldr	r3, [r0, #16]
 800f84a:	690c      	ldr	r4, [r1, #16]
 800f84c:	42a3      	cmp	r3, r4
 800f84e:	4607      	mov	r7, r0
 800f850:	db7e      	blt.n	800f950 <quorem+0x10c>
 800f852:	3c01      	subs	r4, #1
 800f854:	f101 0814 	add.w	r8, r1, #20
 800f858:	00a3      	lsls	r3, r4, #2
 800f85a:	f100 0514 	add.w	r5, r0, #20
 800f85e:	9300      	str	r3, [sp, #0]
 800f860:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f864:	9301      	str	r3, [sp, #4]
 800f866:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f86a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f86e:	3301      	adds	r3, #1
 800f870:	429a      	cmp	r2, r3
 800f872:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f876:	fbb2 f6f3 	udiv	r6, r2, r3
 800f87a:	d32e      	bcc.n	800f8da <quorem+0x96>
 800f87c:	f04f 0a00 	mov.w	sl, #0
 800f880:	46c4      	mov	ip, r8
 800f882:	46ae      	mov	lr, r5
 800f884:	46d3      	mov	fp, sl
 800f886:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f88a:	b298      	uxth	r0, r3
 800f88c:	fb06 a000 	mla	r0, r6, r0, sl
 800f890:	0c02      	lsrs	r2, r0, #16
 800f892:	0c1b      	lsrs	r3, r3, #16
 800f894:	fb06 2303 	mla	r3, r6, r3, r2
 800f898:	f8de 2000 	ldr.w	r2, [lr]
 800f89c:	b280      	uxth	r0, r0
 800f89e:	b292      	uxth	r2, r2
 800f8a0:	1a12      	subs	r2, r2, r0
 800f8a2:	445a      	add	r2, fp
 800f8a4:	f8de 0000 	ldr.w	r0, [lr]
 800f8a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f8ac:	b29b      	uxth	r3, r3
 800f8ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f8b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f8b6:	b292      	uxth	r2, r2
 800f8b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f8bc:	45e1      	cmp	r9, ip
 800f8be:	f84e 2b04 	str.w	r2, [lr], #4
 800f8c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f8c6:	d2de      	bcs.n	800f886 <quorem+0x42>
 800f8c8:	9b00      	ldr	r3, [sp, #0]
 800f8ca:	58eb      	ldr	r3, [r5, r3]
 800f8cc:	b92b      	cbnz	r3, 800f8da <quorem+0x96>
 800f8ce:	9b01      	ldr	r3, [sp, #4]
 800f8d0:	3b04      	subs	r3, #4
 800f8d2:	429d      	cmp	r5, r3
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	d32f      	bcc.n	800f938 <quorem+0xf4>
 800f8d8:	613c      	str	r4, [r7, #16]
 800f8da:	4638      	mov	r0, r7
 800f8dc:	f001 f90e 	bl	8010afc <__mcmp>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	db25      	blt.n	800f930 <quorem+0xec>
 800f8e4:	4629      	mov	r1, r5
 800f8e6:	2000      	movs	r0, #0
 800f8e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f8ec:	f8d1 c000 	ldr.w	ip, [r1]
 800f8f0:	fa1f fe82 	uxth.w	lr, r2
 800f8f4:	fa1f f38c 	uxth.w	r3, ip
 800f8f8:	eba3 030e 	sub.w	r3, r3, lr
 800f8fc:	4403      	add	r3, r0
 800f8fe:	0c12      	lsrs	r2, r2, #16
 800f900:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f904:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f908:	b29b      	uxth	r3, r3
 800f90a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f90e:	45c1      	cmp	r9, r8
 800f910:	f841 3b04 	str.w	r3, [r1], #4
 800f914:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f918:	d2e6      	bcs.n	800f8e8 <quorem+0xa4>
 800f91a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f91e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f922:	b922      	cbnz	r2, 800f92e <quorem+0xea>
 800f924:	3b04      	subs	r3, #4
 800f926:	429d      	cmp	r5, r3
 800f928:	461a      	mov	r2, r3
 800f92a:	d30b      	bcc.n	800f944 <quorem+0x100>
 800f92c:	613c      	str	r4, [r7, #16]
 800f92e:	3601      	adds	r6, #1
 800f930:	4630      	mov	r0, r6
 800f932:	b003      	add	sp, #12
 800f934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f938:	6812      	ldr	r2, [r2, #0]
 800f93a:	3b04      	subs	r3, #4
 800f93c:	2a00      	cmp	r2, #0
 800f93e:	d1cb      	bne.n	800f8d8 <quorem+0x94>
 800f940:	3c01      	subs	r4, #1
 800f942:	e7c6      	b.n	800f8d2 <quorem+0x8e>
 800f944:	6812      	ldr	r2, [r2, #0]
 800f946:	3b04      	subs	r3, #4
 800f948:	2a00      	cmp	r2, #0
 800f94a:	d1ef      	bne.n	800f92c <quorem+0xe8>
 800f94c:	3c01      	subs	r4, #1
 800f94e:	e7ea      	b.n	800f926 <quorem+0xe2>
 800f950:	2000      	movs	r0, #0
 800f952:	e7ee      	b.n	800f932 <quorem+0xee>
 800f954:	0000      	movs	r0, r0
	...

0800f958 <_dtoa_r>:
 800f958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f95c:	69c7      	ldr	r7, [r0, #28]
 800f95e:	b099      	sub	sp, #100	@ 0x64
 800f960:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f964:	ec55 4b10 	vmov	r4, r5, d0
 800f968:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f96a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f96c:	4683      	mov	fp, r0
 800f96e:	920e      	str	r2, [sp, #56]	@ 0x38
 800f970:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f972:	b97f      	cbnz	r7, 800f994 <_dtoa_r+0x3c>
 800f974:	2010      	movs	r0, #16
 800f976:	f7fe fd4f 	bl	800e418 <malloc>
 800f97a:	4602      	mov	r2, r0
 800f97c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f980:	b920      	cbnz	r0, 800f98c <_dtoa_r+0x34>
 800f982:	4ba7      	ldr	r3, [pc, #668]	@ (800fc20 <_dtoa_r+0x2c8>)
 800f984:	21ef      	movs	r1, #239	@ 0xef
 800f986:	48a7      	ldr	r0, [pc, #668]	@ (800fc24 <_dtoa_r+0x2cc>)
 800f988:	f002 fd3a 	bl	8012400 <__assert_func>
 800f98c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f990:	6007      	str	r7, [r0, #0]
 800f992:	60c7      	str	r7, [r0, #12]
 800f994:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f998:	6819      	ldr	r1, [r3, #0]
 800f99a:	b159      	cbz	r1, 800f9b4 <_dtoa_r+0x5c>
 800f99c:	685a      	ldr	r2, [r3, #4]
 800f99e:	604a      	str	r2, [r1, #4]
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	4093      	lsls	r3, r2
 800f9a4:	608b      	str	r3, [r1, #8]
 800f9a6:	4658      	mov	r0, fp
 800f9a8:	f000 fe24 	bl	80105f4 <_Bfree>
 800f9ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	601a      	str	r2, [r3, #0]
 800f9b4:	1e2b      	subs	r3, r5, #0
 800f9b6:	bfb9      	ittee	lt
 800f9b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f9bc:	9303      	strlt	r3, [sp, #12]
 800f9be:	2300      	movge	r3, #0
 800f9c0:	6033      	strge	r3, [r6, #0]
 800f9c2:	9f03      	ldr	r7, [sp, #12]
 800f9c4:	4b98      	ldr	r3, [pc, #608]	@ (800fc28 <_dtoa_r+0x2d0>)
 800f9c6:	bfbc      	itt	lt
 800f9c8:	2201      	movlt	r2, #1
 800f9ca:	6032      	strlt	r2, [r6, #0]
 800f9cc:	43bb      	bics	r3, r7
 800f9ce:	d112      	bne.n	800f9f6 <_dtoa_r+0x9e>
 800f9d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f9d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f9d6:	6013      	str	r3, [r2, #0]
 800f9d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f9dc:	4323      	orrs	r3, r4
 800f9de:	f000 854d 	beq.w	801047c <_dtoa_r+0xb24>
 800f9e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f9e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fc3c <_dtoa_r+0x2e4>
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f000 854f 	beq.w	801048c <_dtoa_r+0xb34>
 800f9ee:	f10a 0303 	add.w	r3, sl, #3
 800f9f2:	f000 bd49 	b.w	8010488 <_dtoa_r+0xb30>
 800f9f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	ec51 0b17 	vmov	r0, r1, d7
 800fa00:	2300      	movs	r3, #0
 800fa02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fa06:	f7f1 f87f 	bl	8000b08 <__aeabi_dcmpeq>
 800fa0a:	4680      	mov	r8, r0
 800fa0c:	b158      	cbz	r0, 800fa26 <_dtoa_r+0xce>
 800fa0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa10:	2301      	movs	r3, #1
 800fa12:	6013      	str	r3, [r2, #0]
 800fa14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa16:	b113      	cbz	r3, 800fa1e <_dtoa_r+0xc6>
 800fa18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fa1a:	4b84      	ldr	r3, [pc, #528]	@ (800fc2c <_dtoa_r+0x2d4>)
 800fa1c:	6013      	str	r3, [r2, #0]
 800fa1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fc40 <_dtoa_r+0x2e8>
 800fa22:	f000 bd33 	b.w	801048c <_dtoa_r+0xb34>
 800fa26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fa2a:	aa16      	add	r2, sp, #88	@ 0x58
 800fa2c:	a917      	add	r1, sp, #92	@ 0x5c
 800fa2e:	4658      	mov	r0, fp
 800fa30:	f001 f984 	bl	8010d3c <__d2b>
 800fa34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fa38:	4681      	mov	r9, r0
 800fa3a:	2e00      	cmp	r6, #0
 800fa3c:	d077      	beq.n	800fb2e <_dtoa_r+0x1d6>
 800fa3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fa44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fa4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fa50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fa54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fa58:	4619      	mov	r1, r3
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	4b74      	ldr	r3, [pc, #464]	@ (800fc30 <_dtoa_r+0x2d8>)
 800fa5e:	f7f0 fc33 	bl	80002c8 <__aeabi_dsub>
 800fa62:	a369      	add	r3, pc, #420	@ (adr r3, 800fc08 <_dtoa_r+0x2b0>)
 800fa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa68:	f7f0 fde6 	bl	8000638 <__aeabi_dmul>
 800fa6c:	a368      	add	r3, pc, #416	@ (adr r3, 800fc10 <_dtoa_r+0x2b8>)
 800fa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa72:	f7f0 fc2b 	bl	80002cc <__adddf3>
 800fa76:	4604      	mov	r4, r0
 800fa78:	4630      	mov	r0, r6
 800fa7a:	460d      	mov	r5, r1
 800fa7c:	f7f0 fd72 	bl	8000564 <__aeabi_i2d>
 800fa80:	a365      	add	r3, pc, #404	@ (adr r3, 800fc18 <_dtoa_r+0x2c0>)
 800fa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa86:	f7f0 fdd7 	bl	8000638 <__aeabi_dmul>
 800fa8a:	4602      	mov	r2, r0
 800fa8c:	460b      	mov	r3, r1
 800fa8e:	4620      	mov	r0, r4
 800fa90:	4629      	mov	r1, r5
 800fa92:	f7f0 fc1b 	bl	80002cc <__adddf3>
 800fa96:	4604      	mov	r4, r0
 800fa98:	460d      	mov	r5, r1
 800fa9a:	f7f1 f87d 	bl	8000b98 <__aeabi_d2iz>
 800fa9e:	2200      	movs	r2, #0
 800faa0:	4607      	mov	r7, r0
 800faa2:	2300      	movs	r3, #0
 800faa4:	4620      	mov	r0, r4
 800faa6:	4629      	mov	r1, r5
 800faa8:	f7f1 f838 	bl	8000b1c <__aeabi_dcmplt>
 800faac:	b140      	cbz	r0, 800fac0 <_dtoa_r+0x168>
 800faae:	4638      	mov	r0, r7
 800fab0:	f7f0 fd58 	bl	8000564 <__aeabi_i2d>
 800fab4:	4622      	mov	r2, r4
 800fab6:	462b      	mov	r3, r5
 800fab8:	f7f1 f826 	bl	8000b08 <__aeabi_dcmpeq>
 800fabc:	b900      	cbnz	r0, 800fac0 <_dtoa_r+0x168>
 800fabe:	3f01      	subs	r7, #1
 800fac0:	2f16      	cmp	r7, #22
 800fac2:	d851      	bhi.n	800fb68 <_dtoa_r+0x210>
 800fac4:	4b5b      	ldr	r3, [pc, #364]	@ (800fc34 <_dtoa_r+0x2dc>)
 800fac6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800faca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800face:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fad2:	f7f1 f823 	bl	8000b1c <__aeabi_dcmplt>
 800fad6:	2800      	cmp	r0, #0
 800fad8:	d048      	beq.n	800fb6c <_dtoa_r+0x214>
 800fada:	3f01      	subs	r7, #1
 800fadc:	2300      	movs	r3, #0
 800fade:	9312      	str	r3, [sp, #72]	@ 0x48
 800fae0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fae2:	1b9b      	subs	r3, r3, r6
 800fae4:	1e5a      	subs	r2, r3, #1
 800fae6:	bf44      	itt	mi
 800fae8:	f1c3 0801 	rsbmi	r8, r3, #1
 800faec:	2300      	movmi	r3, #0
 800faee:	9208      	str	r2, [sp, #32]
 800faf0:	bf54      	ite	pl
 800faf2:	f04f 0800 	movpl.w	r8, #0
 800faf6:	9308      	strmi	r3, [sp, #32]
 800faf8:	2f00      	cmp	r7, #0
 800fafa:	db39      	blt.n	800fb70 <_dtoa_r+0x218>
 800fafc:	9b08      	ldr	r3, [sp, #32]
 800fafe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fb00:	443b      	add	r3, r7
 800fb02:	9308      	str	r3, [sp, #32]
 800fb04:	2300      	movs	r3, #0
 800fb06:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb0a:	2b09      	cmp	r3, #9
 800fb0c:	d864      	bhi.n	800fbd8 <_dtoa_r+0x280>
 800fb0e:	2b05      	cmp	r3, #5
 800fb10:	bfc4      	itt	gt
 800fb12:	3b04      	subgt	r3, #4
 800fb14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fb16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb18:	f1a3 0302 	sub.w	r3, r3, #2
 800fb1c:	bfcc      	ite	gt
 800fb1e:	2400      	movgt	r4, #0
 800fb20:	2401      	movle	r4, #1
 800fb22:	2b03      	cmp	r3, #3
 800fb24:	d863      	bhi.n	800fbee <_dtoa_r+0x296>
 800fb26:	e8df f003 	tbb	[pc, r3]
 800fb2a:	372a      	.short	0x372a
 800fb2c:	5535      	.short	0x5535
 800fb2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fb32:	441e      	add	r6, r3
 800fb34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fb38:	2b20      	cmp	r3, #32
 800fb3a:	bfc1      	itttt	gt
 800fb3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fb40:	409f      	lslgt	r7, r3
 800fb42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fb46:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fb4a:	bfd6      	itet	le
 800fb4c:	f1c3 0320 	rsble	r3, r3, #32
 800fb50:	ea47 0003 	orrgt.w	r0, r7, r3
 800fb54:	fa04 f003 	lslle.w	r0, r4, r3
 800fb58:	f7f0 fcf4 	bl	8000544 <__aeabi_ui2d>
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fb62:	3e01      	subs	r6, #1
 800fb64:	9214      	str	r2, [sp, #80]	@ 0x50
 800fb66:	e777      	b.n	800fa58 <_dtoa_r+0x100>
 800fb68:	2301      	movs	r3, #1
 800fb6a:	e7b8      	b.n	800fade <_dtoa_r+0x186>
 800fb6c:	9012      	str	r0, [sp, #72]	@ 0x48
 800fb6e:	e7b7      	b.n	800fae0 <_dtoa_r+0x188>
 800fb70:	427b      	negs	r3, r7
 800fb72:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb74:	2300      	movs	r3, #0
 800fb76:	eba8 0807 	sub.w	r8, r8, r7
 800fb7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fb7c:	e7c4      	b.n	800fb08 <_dtoa_r+0x1b0>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	dc35      	bgt.n	800fbf4 <_dtoa_r+0x29c>
 800fb88:	2301      	movs	r3, #1
 800fb8a:	9300      	str	r3, [sp, #0]
 800fb8c:	9307      	str	r3, [sp, #28]
 800fb8e:	461a      	mov	r2, r3
 800fb90:	920e      	str	r2, [sp, #56]	@ 0x38
 800fb92:	e00b      	b.n	800fbac <_dtoa_r+0x254>
 800fb94:	2301      	movs	r3, #1
 800fb96:	e7f3      	b.n	800fb80 <_dtoa_r+0x228>
 800fb98:	2300      	movs	r3, #0
 800fb9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb9e:	18fb      	adds	r3, r7, r3
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	3301      	adds	r3, #1
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	9307      	str	r3, [sp, #28]
 800fba8:	bfb8      	it	lt
 800fbaa:	2301      	movlt	r3, #1
 800fbac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fbb0:	2100      	movs	r1, #0
 800fbb2:	2204      	movs	r2, #4
 800fbb4:	f102 0514 	add.w	r5, r2, #20
 800fbb8:	429d      	cmp	r5, r3
 800fbba:	d91f      	bls.n	800fbfc <_dtoa_r+0x2a4>
 800fbbc:	6041      	str	r1, [r0, #4]
 800fbbe:	4658      	mov	r0, fp
 800fbc0:	f000 fcd8 	bl	8010574 <_Balloc>
 800fbc4:	4682      	mov	sl, r0
 800fbc6:	2800      	cmp	r0, #0
 800fbc8:	d13c      	bne.n	800fc44 <_dtoa_r+0x2ec>
 800fbca:	4b1b      	ldr	r3, [pc, #108]	@ (800fc38 <_dtoa_r+0x2e0>)
 800fbcc:	4602      	mov	r2, r0
 800fbce:	f240 11af 	movw	r1, #431	@ 0x1af
 800fbd2:	e6d8      	b.n	800f986 <_dtoa_r+0x2e>
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	e7e0      	b.n	800fb9a <_dtoa_r+0x242>
 800fbd8:	2401      	movs	r4, #1
 800fbda:	2300      	movs	r3, #0
 800fbdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbde:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fbe0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbe4:	9300      	str	r3, [sp, #0]
 800fbe6:	9307      	str	r3, [sp, #28]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	2312      	movs	r3, #18
 800fbec:	e7d0      	b.n	800fb90 <_dtoa_r+0x238>
 800fbee:	2301      	movs	r3, #1
 800fbf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbf2:	e7f5      	b.n	800fbe0 <_dtoa_r+0x288>
 800fbf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbf6:	9300      	str	r3, [sp, #0]
 800fbf8:	9307      	str	r3, [sp, #28]
 800fbfa:	e7d7      	b.n	800fbac <_dtoa_r+0x254>
 800fbfc:	3101      	adds	r1, #1
 800fbfe:	0052      	lsls	r2, r2, #1
 800fc00:	e7d8      	b.n	800fbb4 <_dtoa_r+0x25c>
 800fc02:	bf00      	nop
 800fc04:	f3af 8000 	nop.w
 800fc08:	636f4361 	.word	0x636f4361
 800fc0c:	3fd287a7 	.word	0x3fd287a7
 800fc10:	8b60c8b3 	.word	0x8b60c8b3
 800fc14:	3fc68a28 	.word	0x3fc68a28
 800fc18:	509f79fb 	.word	0x509f79fb
 800fc1c:	3fd34413 	.word	0x3fd34413
 800fc20:	08013dde 	.word	0x08013dde
 800fc24:	08013df5 	.word	0x08013df5
 800fc28:	7ff00000 	.word	0x7ff00000
 800fc2c:	08013da9 	.word	0x08013da9
 800fc30:	3ff80000 	.word	0x3ff80000
 800fc34:	08013ef0 	.word	0x08013ef0
 800fc38:	08013e4d 	.word	0x08013e4d
 800fc3c:	08013dda 	.word	0x08013dda
 800fc40:	08013da8 	.word	0x08013da8
 800fc44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fc48:	6018      	str	r0, [r3, #0]
 800fc4a:	9b07      	ldr	r3, [sp, #28]
 800fc4c:	2b0e      	cmp	r3, #14
 800fc4e:	f200 80a4 	bhi.w	800fd9a <_dtoa_r+0x442>
 800fc52:	2c00      	cmp	r4, #0
 800fc54:	f000 80a1 	beq.w	800fd9a <_dtoa_r+0x442>
 800fc58:	2f00      	cmp	r7, #0
 800fc5a:	dd33      	ble.n	800fcc4 <_dtoa_r+0x36c>
 800fc5c:	4bad      	ldr	r3, [pc, #692]	@ (800ff14 <_dtoa_r+0x5bc>)
 800fc5e:	f007 020f 	and.w	r2, r7, #15
 800fc62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc66:	ed93 7b00 	vldr	d7, [r3]
 800fc6a:	05f8      	lsls	r0, r7, #23
 800fc6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fc70:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fc74:	d516      	bpl.n	800fca4 <_dtoa_r+0x34c>
 800fc76:	4ba8      	ldr	r3, [pc, #672]	@ (800ff18 <_dtoa_r+0x5c0>)
 800fc78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fc80:	f7f0 fe04 	bl	800088c <__aeabi_ddiv>
 800fc84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc88:	f004 040f 	and.w	r4, r4, #15
 800fc8c:	2603      	movs	r6, #3
 800fc8e:	4da2      	ldr	r5, [pc, #648]	@ (800ff18 <_dtoa_r+0x5c0>)
 800fc90:	b954      	cbnz	r4, 800fca8 <_dtoa_r+0x350>
 800fc92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc9a:	f7f0 fdf7 	bl	800088c <__aeabi_ddiv>
 800fc9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fca2:	e028      	b.n	800fcf6 <_dtoa_r+0x39e>
 800fca4:	2602      	movs	r6, #2
 800fca6:	e7f2      	b.n	800fc8e <_dtoa_r+0x336>
 800fca8:	07e1      	lsls	r1, r4, #31
 800fcaa:	d508      	bpl.n	800fcbe <_dtoa_r+0x366>
 800fcac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fcb4:	f7f0 fcc0 	bl	8000638 <__aeabi_dmul>
 800fcb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fcbc:	3601      	adds	r6, #1
 800fcbe:	1064      	asrs	r4, r4, #1
 800fcc0:	3508      	adds	r5, #8
 800fcc2:	e7e5      	b.n	800fc90 <_dtoa_r+0x338>
 800fcc4:	f000 80d2 	beq.w	800fe6c <_dtoa_r+0x514>
 800fcc8:	427c      	negs	r4, r7
 800fcca:	4b92      	ldr	r3, [pc, #584]	@ (800ff14 <_dtoa_r+0x5bc>)
 800fccc:	4d92      	ldr	r5, [pc, #584]	@ (800ff18 <_dtoa_r+0x5c0>)
 800fcce:	f004 020f 	and.w	r2, r4, #15
 800fcd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fcde:	f7f0 fcab 	bl	8000638 <__aeabi_dmul>
 800fce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fce6:	1124      	asrs	r4, r4, #4
 800fce8:	2300      	movs	r3, #0
 800fcea:	2602      	movs	r6, #2
 800fcec:	2c00      	cmp	r4, #0
 800fcee:	f040 80b2 	bne.w	800fe56 <_dtoa_r+0x4fe>
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d1d3      	bne.n	800fc9e <_dtoa_r+0x346>
 800fcf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fcf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	f000 80b7 	beq.w	800fe70 <_dtoa_r+0x518>
 800fd02:	4b86      	ldr	r3, [pc, #536]	@ (800ff1c <_dtoa_r+0x5c4>)
 800fd04:	2200      	movs	r2, #0
 800fd06:	4620      	mov	r0, r4
 800fd08:	4629      	mov	r1, r5
 800fd0a:	f7f0 ff07 	bl	8000b1c <__aeabi_dcmplt>
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	f000 80ae 	beq.w	800fe70 <_dtoa_r+0x518>
 800fd14:	9b07      	ldr	r3, [sp, #28]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	f000 80aa 	beq.w	800fe70 <_dtoa_r+0x518>
 800fd1c:	9b00      	ldr	r3, [sp, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	dd37      	ble.n	800fd92 <_dtoa_r+0x43a>
 800fd22:	1e7b      	subs	r3, r7, #1
 800fd24:	9304      	str	r3, [sp, #16]
 800fd26:	4620      	mov	r0, r4
 800fd28:	4b7d      	ldr	r3, [pc, #500]	@ (800ff20 <_dtoa_r+0x5c8>)
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	f7f0 fc83 	bl	8000638 <__aeabi_dmul>
 800fd32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd36:	9c00      	ldr	r4, [sp, #0]
 800fd38:	3601      	adds	r6, #1
 800fd3a:	4630      	mov	r0, r6
 800fd3c:	f7f0 fc12 	bl	8000564 <__aeabi_i2d>
 800fd40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd44:	f7f0 fc78 	bl	8000638 <__aeabi_dmul>
 800fd48:	4b76      	ldr	r3, [pc, #472]	@ (800ff24 <_dtoa_r+0x5cc>)
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f7f0 fabe 	bl	80002cc <__adddf3>
 800fd50:	4605      	mov	r5, r0
 800fd52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fd56:	2c00      	cmp	r4, #0
 800fd58:	f040 808d 	bne.w	800fe76 <_dtoa_r+0x51e>
 800fd5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd60:	4b71      	ldr	r3, [pc, #452]	@ (800ff28 <_dtoa_r+0x5d0>)
 800fd62:	2200      	movs	r2, #0
 800fd64:	f7f0 fab0 	bl	80002c8 <__aeabi_dsub>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	460b      	mov	r3, r1
 800fd6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fd70:	462a      	mov	r2, r5
 800fd72:	4633      	mov	r3, r6
 800fd74:	f7f0 fef0 	bl	8000b58 <__aeabi_dcmpgt>
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	f040 828b 	bne.w	8010294 <_dtoa_r+0x93c>
 800fd7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd82:	462a      	mov	r2, r5
 800fd84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fd88:	f7f0 fec8 	bl	8000b1c <__aeabi_dcmplt>
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	f040 8128 	bne.w	800ffe2 <_dtoa_r+0x68a>
 800fd92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fd96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fd9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	f2c0 815a 	blt.w	8010056 <_dtoa_r+0x6fe>
 800fda2:	2f0e      	cmp	r7, #14
 800fda4:	f300 8157 	bgt.w	8010056 <_dtoa_r+0x6fe>
 800fda8:	4b5a      	ldr	r3, [pc, #360]	@ (800ff14 <_dtoa_r+0x5bc>)
 800fdaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fdae:	ed93 7b00 	vldr	d7, [r3]
 800fdb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	ed8d 7b00 	vstr	d7, [sp]
 800fdba:	da03      	bge.n	800fdc4 <_dtoa_r+0x46c>
 800fdbc:	9b07      	ldr	r3, [sp, #28]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	f340 8101 	ble.w	800ffc6 <_dtoa_r+0x66e>
 800fdc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fdc8:	4656      	mov	r6, sl
 800fdca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fdce:	4620      	mov	r0, r4
 800fdd0:	4629      	mov	r1, r5
 800fdd2:	f7f0 fd5b 	bl	800088c <__aeabi_ddiv>
 800fdd6:	f7f0 fedf 	bl	8000b98 <__aeabi_d2iz>
 800fdda:	4680      	mov	r8, r0
 800fddc:	f7f0 fbc2 	bl	8000564 <__aeabi_i2d>
 800fde0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fde4:	f7f0 fc28 	bl	8000638 <__aeabi_dmul>
 800fde8:	4602      	mov	r2, r0
 800fdea:	460b      	mov	r3, r1
 800fdec:	4620      	mov	r0, r4
 800fdee:	4629      	mov	r1, r5
 800fdf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fdf4:	f7f0 fa68 	bl	80002c8 <__aeabi_dsub>
 800fdf8:	f806 4b01 	strb.w	r4, [r6], #1
 800fdfc:	9d07      	ldr	r5, [sp, #28]
 800fdfe:	eba6 040a 	sub.w	r4, r6, sl
 800fe02:	42a5      	cmp	r5, r4
 800fe04:	4602      	mov	r2, r0
 800fe06:	460b      	mov	r3, r1
 800fe08:	f040 8117 	bne.w	801003a <_dtoa_r+0x6e2>
 800fe0c:	f7f0 fa5e 	bl	80002cc <__adddf3>
 800fe10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe14:	4604      	mov	r4, r0
 800fe16:	460d      	mov	r5, r1
 800fe18:	f7f0 fe9e 	bl	8000b58 <__aeabi_dcmpgt>
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	f040 80f9 	bne.w	8010014 <_dtoa_r+0x6bc>
 800fe22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe26:	4620      	mov	r0, r4
 800fe28:	4629      	mov	r1, r5
 800fe2a:	f7f0 fe6d 	bl	8000b08 <__aeabi_dcmpeq>
 800fe2e:	b118      	cbz	r0, 800fe38 <_dtoa_r+0x4e0>
 800fe30:	f018 0f01 	tst.w	r8, #1
 800fe34:	f040 80ee 	bne.w	8010014 <_dtoa_r+0x6bc>
 800fe38:	4649      	mov	r1, r9
 800fe3a:	4658      	mov	r0, fp
 800fe3c:	f000 fbda 	bl	80105f4 <_Bfree>
 800fe40:	2300      	movs	r3, #0
 800fe42:	7033      	strb	r3, [r6, #0]
 800fe44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fe46:	3701      	adds	r7, #1
 800fe48:	601f      	str	r7, [r3, #0]
 800fe4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	f000 831d 	beq.w	801048c <_dtoa_r+0xb34>
 800fe52:	601e      	str	r6, [r3, #0]
 800fe54:	e31a      	b.n	801048c <_dtoa_r+0xb34>
 800fe56:	07e2      	lsls	r2, r4, #31
 800fe58:	d505      	bpl.n	800fe66 <_dtoa_r+0x50e>
 800fe5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe5e:	f7f0 fbeb 	bl	8000638 <__aeabi_dmul>
 800fe62:	3601      	adds	r6, #1
 800fe64:	2301      	movs	r3, #1
 800fe66:	1064      	asrs	r4, r4, #1
 800fe68:	3508      	adds	r5, #8
 800fe6a:	e73f      	b.n	800fcec <_dtoa_r+0x394>
 800fe6c:	2602      	movs	r6, #2
 800fe6e:	e742      	b.n	800fcf6 <_dtoa_r+0x39e>
 800fe70:	9c07      	ldr	r4, [sp, #28]
 800fe72:	9704      	str	r7, [sp, #16]
 800fe74:	e761      	b.n	800fd3a <_dtoa_r+0x3e2>
 800fe76:	4b27      	ldr	r3, [pc, #156]	@ (800ff14 <_dtoa_r+0x5bc>)
 800fe78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fe7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fe82:	4454      	add	r4, sl
 800fe84:	2900      	cmp	r1, #0
 800fe86:	d053      	beq.n	800ff30 <_dtoa_r+0x5d8>
 800fe88:	4928      	ldr	r1, [pc, #160]	@ (800ff2c <_dtoa_r+0x5d4>)
 800fe8a:	2000      	movs	r0, #0
 800fe8c:	f7f0 fcfe 	bl	800088c <__aeabi_ddiv>
 800fe90:	4633      	mov	r3, r6
 800fe92:	462a      	mov	r2, r5
 800fe94:	f7f0 fa18 	bl	80002c8 <__aeabi_dsub>
 800fe98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fe9c:	4656      	mov	r6, sl
 800fe9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fea2:	f7f0 fe79 	bl	8000b98 <__aeabi_d2iz>
 800fea6:	4605      	mov	r5, r0
 800fea8:	f7f0 fb5c 	bl	8000564 <__aeabi_i2d>
 800feac:	4602      	mov	r2, r0
 800feae:	460b      	mov	r3, r1
 800feb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800feb4:	f7f0 fa08 	bl	80002c8 <__aeabi_dsub>
 800feb8:	3530      	adds	r5, #48	@ 0x30
 800feba:	4602      	mov	r2, r0
 800febc:	460b      	mov	r3, r1
 800febe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fec2:	f806 5b01 	strb.w	r5, [r6], #1
 800fec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800feca:	f7f0 fe27 	bl	8000b1c <__aeabi_dcmplt>
 800fece:	2800      	cmp	r0, #0
 800fed0:	d171      	bne.n	800ffb6 <_dtoa_r+0x65e>
 800fed2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fed6:	4911      	ldr	r1, [pc, #68]	@ (800ff1c <_dtoa_r+0x5c4>)
 800fed8:	2000      	movs	r0, #0
 800feda:	f7f0 f9f5 	bl	80002c8 <__aeabi_dsub>
 800fede:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fee2:	f7f0 fe1b 	bl	8000b1c <__aeabi_dcmplt>
 800fee6:	2800      	cmp	r0, #0
 800fee8:	f040 8095 	bne.w	8010016 <_dtoa_r+0x6be>
 800feec:	42a6      	cmp	r6, r4
 800feee:	f43f af50 	beq.w	800fd92 <_dtoa_r+0x43a>
 800fef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fef6:	4b0a      	ldr	r3, [pc, #40]	@ (800ff20 <_dtoa_r+0x5c8>)
 800fef8:	2200      	movs	r2, #0
 800fefa:	f7f0 fb9d 	bl	8000638 <__aeabi_dmul>
 800fefe:	4b08      	ldr	r3, [pc, #32]	@ (800ff20 <_dtoa_r+0x5c8>)
 800ff00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff04:	2200      	movs	r2, #0
 800ff06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff0a:	f7f0 fb95 	bl	8000638 <__aeabi_dmul>
 800ff0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff12:	e7c4      	b.n	800fe9e <_dtoa_r+0x546>
 800ff14:	08013ef0 	.word	0x08013ef0
 800ff18:	08013ec8 	.word	0x08013ec8
 800ff1c:	3ff00000 	.word	0x3ff00000
 800ff20:	40240000 	.word	0x40240000
 800ff24:	401c0000 	.word	0x401c0000
 800ff28:	40140000 	.word	0x40140000
 800ff2c:	3fe00000 	.word	0x3fe00000
 800ff30:	4631      	mov	r1, r6
 800ff32:	4628      	mov	r0, r5
 800ff34:	f7f0 fb80 	bl	8000638 <__aeabi_dmul>
 800ff38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff3c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ff3e:	4656      	mov	r6, sl
 800ff40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff44:	f7f0 fe28 	bl	8000b98 <__aeabi_d2iz>
 800ff48:	4605      	mov	r5, r0
 800ff4a:	f7f0 fb0b 	bl	8000564 <__aeabi_i2d>
 800ff4e:	4602      	mov	r2, r0
 800ff50:	460b      	mov	r3, r1
 800ff52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff56:	f7f0 f9b7 	bl	80002c8 <__aeabi_dsub>
 800ff5a:	3530      	adds	r5, #48	@ 0x30
 800ff5c:	f806 5b01 	strb.w	r5, [r6], #1
 800ff60:	4602      	mov	r2, r0
 800ff62:	460b      	mov	r3, r1
 800ff64:	42a6      	cmp	r6, r4
 800ff66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff6a:	f04f 0200 	mov.w	r2, #0
 800ff6e:	d124      	bne.n	800ffba <_dtoa_r+0x662>
 800ff70:	4bac      	ldr	r3, [pc, #688]	@ (8010224 <_dtoa_r+0x8cc>)
 800ff72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ff76:	f7f0 f9a9 	bl	80002cc <__adddf3>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	460b      	mov	r3, r1
 800ff7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff82:	f7f0 fde9 	bl	8000b58 <__aeabi_dcmpgt>
 800ff86:	2800      	cmp	r0, #0
 800ff88:	d145      	bne.n	8010016 <_dtoa_r+0x6be>
 800ff8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ff8e:	49a5      	ldr	r1, [pc, #660]	@ (8010224 <_dtoa_r+0x8cc>)
 800ff90:	2000      	movs	r0, #0
 800ff92:	f7f0 f999 	bl	80002c8 <__aeabi_dsub>
 800ff96:	4602      	mov	r2, r0
 800ff98:	460b      	mov	r3, r1
 800ff9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff9e:	f7f0 fdbd 	bl	8000b1c <__aeabi_dcmplt>
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	f43f aef5 	beq.w	800fd92 <_dtoa_r+0x43a>
 800ffa8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ffaa:	1e73      	subs	r3, r6, #1
 800ffac:	9315      	str	r3, [sp, #84]	@ 0x54
 800ffae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ffb2:	2b30      	cmp	r3, #48	@ 0x30
 800ffb4:	d0f8      	beq.n	800ffa8 <_dtoa_r+0x650>
 800ffb6:	9f04      	ldr	r7, [sp, #16]
 800ffb8:	e73e      	b.n	800fe38 <_dtoa_r+0x4e0>
 800ffba:	4b9b      	ldr	r3, [pc, #620]	@ (8010228 <_dtoa_r+0x8d0>)
 800ffbc:	f7f0 fb3c 	bl	8000638 <__aeabi_dmul>
 800ffc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffc4:	e7bc      	b.n	800ff40 <_dtoa_r+0x5e8>
 800ffc6:	d10c      	bne.n	800ffe2 <_dtoa_r+0x68a>
 800ffc8:	4b98      	ldr	r3, [pc, #608]	@ (801022c <_dtoa_r+0x8d4>)
 800ffca:	2200      	movs	r2, #0
 800ffcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffd0:	f7f0 fb32 	bl	8000638 <__aeabi_dmul>
 800ffd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffd8:	f7f0 fdb4 	bl	8000b44 <__aeabi_dcmpge>
 800ffdc:	2800      	cmp	r0, #0
 800ffde:	f000 8157 	beq.w	8010290 <_dtoa_r+0x938>
 800ffe2:	2400      	movs	r4, #0
 800ffe4:	4625      	mov	r5, r4
 800ffe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ffe8:	43db      	mvns	r3, r3
 800ffea:	9304      	str	r3, [sp, #16]
 800ffec:	4656      	mov	r6, sl
 800ffee:	2700      	movs	r7, #0
 800fff0:	4621      	mov	r1, r4
 800fff2:	4658      	mov	r0, fp
 800fff4:	f000 fafe 	bl	80105f4 <_Bfree>
 800fff8:	2d00      	cmp	r5, #0
 800fffa:	d0dc      	beq.n	800ffb6 <_dtoa_r+0x65e>
 800fffc:	b12f      	cbz	r7, 801000a <_dtoa_r+0x6b2>
 800fffe:	42af      	cmp	r7, r5
 8010000:	d003      	beq.n	801000a <_dtoa_r+0x6b2>
 8010002:	4639      	mov	r1, r7
 8010004:	4658      	mov	r0, fp
 8010006:	f000 faf5 	bl	80105f4 <_Bfree>
 801000a:	4629      	mov	r1, r5
 801000c:	4658      	mov	r0, fp
 801000e:	f000 faf1 	bl	80105f4 <_Bfree>
 8010012:	e7d0      	b.n	800ffb6 <_dtoa_r+0x65e>
 8010014:	9704      	str	r7, [sp, #16]
 8010016:	4633      	mov	r3, r6
 8010018:	461e      	mov	r6, r3
 801001a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801001e:	2a39      	cmp	r2, #57	@ 0x39
 8010020:	d107      	bne.n	8010032 <_dtoa_r+0x6da>
 8010022:	459a      	cmp	sl, r3
 8010024:	d1f8      	bne.n	8010018 <_dtoa_r+0x6c0>
 8010026:	9a04      	ldr	r2, [sp, #16]
 8010028:	3201      	adds	r2, #1
 801002a:	9204      	str	r2, [sp, #16]
 801002c:	2230      	movs	r2, #48	@ 0x30
 801002e:	f88a 2000 	strb.w	r2, [sl]
 8010032:	781a      	ldrb	r2, [r3, #0]
 8010034:	3201      	adds	r2, #1
 8010036:	701a      	strb	r2, [r3, #0]
 8010038:	e7bd      	b.n	800ffb6 <_dtoa_r+0x65e>
 801003a:	4b7b      	ldr	r3, [pc, #492]	@ (8010228 <_dtoa_r+0x8d0>)
 801003c:	2200      	movs	r2, #0
 801003e:	f7f0 fafb 	bl	8000638 <__aeabi_dmul>
 8010042:	2200      	movs	r2, #0
 8010044:	2300      	movs	r3, #0
 8010046:	4604      	mov	r4, r0
 8010048:	460d      	mov	r5, r1
 801004a:	f7f0 fd5d 	bl	8000b08 <__aeabi_dcmpeq>
 801004e:	2800      	cmp	r0, #0
 8010050:	f43f aebb 	beq.w	800fdca <_dtoa_r+0x472>
 8010054:	e6f0      	b.n	800fe38 <_dtoa_r+0x4e0>
 8010056:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010058:	2a00      	cmp	r2, #0
 801005a:	f000 80db 	beq.w	8010214 <_dtoa_r+0x8bc>
 801005e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010060:	2a01      	cmp	r2, #1
 8010062:	f300 80bf 	bgt.w	80101e4 <_dtoa_r+0x88c>
 8010066:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010068:	2a00      	cmp	r2, #0
 801006a:	f000 80b7 	beq.w	80101dc <_dtoa_r+0x884>
 801006e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010072:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010074:	4646      	mov	r6, r8
 8010076:	9a08      	ldr	r2, [sp, #32]
 8010078:	2101      	movs	r1, #1
 801007a:	441a      	add	r2, r3
 801007c:	4658      	mov	r0, fp
 801007e:	4498      	add	r8, r3
 8010080:	9208      	str	r2, [sp, #32]
 8010082:	f000 fbb5 	bl	80107f0 <__i2b>
 8010086:	4605      	mov	r5, r0
 8010088:	b15e      	cbz	r6, 80100a2 <_dtoa_r+0x74a>
 801008a:	9b08      	ldr	r3, [sp, #32]
 801008c:	2b00      	cmp	r3, #0
 801008e:	dd08      	ble.n	80100a2 <_dtoa_r+0x74a>
 8010090:	42b3      	cmp	r3, r6
 8010092:	9a08      	ldr	r2, [sp, #32]
 8010094:	bfa8      	it	ge
 8010096:	4633      	movge	r3, r6
 8010098:	eba8 0803 	sub.w	r8, r8, r3
 801009c:	1af6      	subs	r6, r6, r3
 801009e:	1ad3      	subs	r3, r2, r3
 80100a0:	9308      	str	r3, [sp, #32]
 80100a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100a4:	b1f3      	cbz	r3, 80100e4 <_dtoa_r+0x78c>
 80100a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	f000 80b7 	beq.w	801021c <_dtoa_r+0x8c4>
 80100ae:	b18c      	cbz	r4, 80100d4 <_dtoa_r+0x77c>
 80100b0:	4629      	mov	r1, r5
 80100b2:	4622      	mov	r2, r4
 80100b4:	4658      	mov	r0, fp
 80100b6:	f000 fc5b 	bl	8010970 <__pow5mult>
 80100ba:	464a      	mov	r2, r9
 80100bc:	4601      	mov	r1, r0
 80100be:	4605      	mov	r5, r0
 80100c0:	4658      	mov	r0, fp
 80100c2:	f000 fbab 	bl	801081c <__multiply>
 80100c6:	4649      	mov	r1, r9
 80100c8:	9004      	str	r0, [sp, #16]
 80100ca:	4658      	mov	r0, fp
 80100cc:	f000 fa92 	bl	80105f4 <_Bfree>
 80100d0:	9b04      	ldr	r3, [sp, #16]
 80100d2:	4699      	mov	r9, r3
 80100d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100d6:	1b1a      	subs	r2, r3, r4
 80100d8:	d004      	beq.n	80100e4 <_dtoa_r+0x78c>
 80100da:	4649      	mov	r1, r9
 80100dc:	4658      	mov	r0, fp
 80100de:	f000 fc47 	bl	8010970 <__pow5mult>
 80100e2:	4681      	mov	r9, r0
 80100e4:	2101      	movs	r1, #1
 80100e6:	4658      	mov	r0, fp
 80100e8:	f000 fb82 	bl	80107f0 <__i2b>
 80100ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100ee:	4604      	mov	r4, r0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	f000 81cf 	beq.w	8010494 <_dtoa_r+0xb3c>
 80100f6:	461a      	mov	r2, r3
 80100f8:	4601      	mov	r1, r0
 80100fa:	4658      	mov	r0, fp
 80100fc:	f000 fc38 	bl	8010970 <__pow5mult>
 8010100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010102:	2b01      	cmp	r3, #1
 8010104:	4604      	mov	r4, r0
 8010106:	f300 8095 	bgt.w	8010234 <_dtoa_r+0x8dc>
 801010a:	9b02      	ldr	r3, [sp, #8]
 801010c:	2b00      	cmp	r3, #0
 801010e:	f040 8087 	bne.w	8010220 <_dtoa_r+0x8c8>
 8010112:	9b03      	ldr	r3, [sp, #12]
 8010114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010118:	2b00      	cmp	r3, #0
 801011a:	f040 8089 	bne.w	8010230 <_dtoa_r+0x8d8>
 801011e:	9b03      	ldr	r3, [sp, #12]
 8010120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010124:	0d1b      	lsrs	r3, r3, #20
 8010126:	051b      	lsls	r3, r3, #20
 8010128:	b12b      	cbz	r3, 8010136 <_dtoa_r+0x7de>
 801012a:	9b08      	ldr	r3, [sp, #32]
 801012c:	3301      	adds	r3, #1
 801012e:	9308      	str	r3, [sp, #32]
 8010130:	f108 0801 	add.w	r8, r8, #1
 8010134:	2301      	movs	r3, #1
 8010136:	930a      	str	r3, [sp, #40]	@ 0x28
 8010138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801013a:	2b00      	cmp	r3, #0
 801013c:	f000 81b0 	beq.w	80104a0 <_dtoa_r+0xb48>
 8010140:	6923      	ldr	r3, [r4, #16]
 8010142:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010146:	6918      	ldr	r0, [r3, #16]
 8010148:	f000 fb06 	bl	8010758 <__hi0bits>
 801014c:	f1c0 0020 	rsb	r0, r0, #32
 8010150:	9b08      	ldr	r3, [sp, #32]
 8010152:	4418      	add	r0, r3
 8010154:	f010 001f 	ands.w	r0, r0, #31
 8010158:	d077      	beq.n	801024a <_dtoa_r+0x8f2>
 801015a:	f1c0 0320 	rsb	r3, r0, #32
 801015e:	2b04      	cmp	r3, #4
 8010160:	dd6b      	ble.n	801023a <_dtoa_r+0x8e2>
 8010162:	9b08      	ldr	r3, [sp, #32]
 8010164:	f1c0 001c 	rsb	r0, r0, #28
 8010168:	4403      	add	r3, r0
 801016a:	4480      	add	r8, r0
 801016c:	4406      	add	r6, r0
 801016e:	9308      	str	r3, [sp, #32]
 8010170:	f1b8 0f00 	cmp.w	r8, #0
 8010174:	dd05      	ble.n	8010182 <_dtoa_r+0x82a>
 8010176:	4649      	mov	r1, r9
 8010178:	4642      	mov	r2, r8
 801017a:	4658      	mov	r0, fp
 801017c:	f000 fc52 	bl	8010a24 <__lshift>
 8010180:	4681      	mov	r9, r0
 8010182:	9b08      	ldr	r3, [sp, #32]
 8010184:	2b00      	cmp	r3, #0
 8010186:	dd05      	ble.n	8010194 <_dtoa_r+0x83c>
 8010188:	4621      	mov	r1, r4
 801018a:	461a      	mov	r2, r3
 801018c:	4658      	mov	r0, fp
 801018e:	f000 fc49 	bl	8010a24 <__lshift>
 8010192:	4604      	mov	r4, r0
 8010194:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010196:	2b00      	cmp	r3, #0
 8010198:	d059      	beq.n	801024e <_dtoa_r+0x8f6>
 801019a:	4621      	mov	r1, r4
 801019c:	4648      	mov	r0, r9
 801019e:	f000 fcad 	bl	8010afc <__mcmp>
 80101a2:	2800      	cmp	r0, #0
 80101a4:	da53      	bge.n	801024e <_dtoa_r+0x8f6>
 80101a6:	1e7b      	subs	r3, r7, #1
 80101a8:	9304      	str	r3, [sp, #16]
 80101aa:	4649      	mov	r1, r9
 80101ac:	2300      	movs	r3, #0
 80101ae:	220a      	movs	r2, #10
 80101b0:	4658      	mov	r0, fp
 80101b2:	f000 fa41 	bl	8010638 <__multadd>
 80101b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101b8:	4681      	mov	r9, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	f000 8172 	beq.w	80104a4 <_dtoa_r+0xb4c>
 80101c0:	2300      	movs	r3, #0
 80101c2:	4629      	mov	r1, r5
 80101c4:	220a      	movs	r2, #10
 80101c6:	4658      	mov	r0, fp
 80101c8:	f000 fa36 	bl	8010638 <__multadd>
 80101cc:	9b00      	ldr	r3, [sp, #0]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	4605      	mov	r5, r0
 80101d2:	dc67      	bgt.n	80102a4 <_dtoa_r+0x94c>
 80101d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101d6:	2b02      	cmp	r3, #2
 80101d8:	dc41      	bgt.n	801025e <_dtoa_r+0x906>
 80101da:	e063      	b.n	80102a4 <_dtoa_r+0x94c>
 80101dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80101de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80101e2:	e746      	b.n	8010072 <_dtoa_r+0x71a>
 80101e4:	9b07      	ldr	r3, [sp, #28]
 80101e6:	1e5c      	subs	r4, r3, #1
 80101e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101ea:	42a3      	cmp	r3, r4
 80101ec:	bfbf      	itttt	lt
 80101ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80101f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80101f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80101f4:	1ae3      	sublt	r3, r4, r3
 80101f6:	bfb4      	ite	lt
 80101f8:	18d2      	addlt	r2, r2, r3
 80101fa:	1b1c      	subge	r4, r3, r4
 80101fc:	9b07      	ldr	r3, [sp, #28]
 80101fe:	bfbc      	itt	lt
 8010200:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010202:	2400      	movlt	r4, #0
 8010204:	2b00      	cmp	r3, #0
 8010206:	bfb5      	itete	lt
 8010208:	eba8 0603 	sublt.w	r6, r8, r3
 801020c:	9b07      	ldrge	r3, [sp, #28]
 801020e:	2300      	movlt	r3, #0
 8010210:	4646      	movge	r6, r8
 8010212:	e730      	b.n	8010076 <_dtoa_r+0x71e>
 8010214:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010216:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010218:	4646      	mov	r6, r8
 801021a:	e735      	b.n	8010088 <_dtoa_r+0x730>
 801021c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801021e:	e75c      	b.n	80100da <_dtoa_r+0x782>
 8010220:	2300      	movs	r3, #0
 8010222:	e788      	b.n	8010136 <_dtoa_r+0x7de>
 8010224:	3fe00000 	.word	0x3fe00000
 8010228:	40240000 	.word	0x40240000
 801022c:	40140000 	.word	0x40140000
 8010230:	9b02      	ldr	r3, [sp, #8]
 8010232:	e780      	b.n	8010136 <_dtoa_r+0x7de>
 8010234:	2300      	movs	r3, #0
 8010236:	930a      	str	r3, [sp, #40]	@ 0x28
 8010238:	e782      	b.n	8010140 <_dtoa_r+0x7e8>
 801023a:	d099      	beq.n	8010170 <_dtoa_r+0x818>
 801023c:	9a08      	ldr	r2, [sp, #32]
 801023e:	331c      	adds	r3, #28
 8010240:	441a      	add	r2, r3
 8010242:	4498      	add	r8, r3
 8010244:	441e      	add	r6, r3
 8010246:	9208      	str	r2, [sp, #32]
 8010248:	e792      	b.n	8010170 <_dtoa_r+0x818>
 801024a:	4603      	mov	r3, r0
 801024c:	e7f6      	b.n	801023c <_dtoa_r+0x8e4>
 801024e:	9b07      	ldr	r3, [sp, #28]
 8010250:	9704      	str	r7, [sp, #16]
 8010252:	2b00      	cmp	r3, #0
 8010254:	dc20      	bgt.n	8010298 <_dtoa_r+0x940>
 8010256:	9300      	str	r3, [sp, #0]
 8010258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801025a:	2b02      	cmp	r3, #2
 801025c:	dd1e      	ble.n	801029c <_dtoa_r+0x944>
 801025e:	9b00      	ldr	r3, [sp, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	f47f aec0 	bne.w	800ffe6 <_dtoa_r+0x68e>
 8010266:	4621      	mov	r1, r4
 8010268:	2205      	movs	r2, #5
 801026a:	4658      	mov	r0, fp
 801026c:	f000 f9e4 	bl	8010638 <__multadd>
 8010270:	4601      	mov	r1, r0
 8010272:	4604      	mov	r4, r0
 8010274:	4648      	mov	r0, r9
 8010276:	f000 fc41 	bl	8010afc <__mcmp>
 801027a:	2800      	cmp	r0, #0
 801027c:	f77f aeb3 	ble.w	800ffe6 <_dtoa_r+0x68e>
 8010280:	4656      	mov	r6, sl
 8010282:	2331      	movs	r3, #49	@ 0x31
 8010284:	f806 3b01 	strb.w	r3, [r6], #1
 8010288:	9b04      	ldr	r3, [sp, #16]
 801028a:	3301      	adds	r3, #1
 801028c:	9304      	str	r3, [sp, #16]
 801028e:	e6ae      	b.n	800ffee <_dtoa_r+0x696>
 8010290:	9c07      	ldr	r4, [sp, #28]
 8010292:	9704      	str	r7, [sp, #16]
 8010294:	4625      	mov	r5, r4
 8010296:	e7f3      	b.n	8010280 <_dtoa_r+0x928>
 8010298:	9b07      	ldr	r3, [sp, #28]
 801029a:	9300      	str	r3, [sp, #0]
 801029c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801029e:	2b00      	cmp	r3, #0
 80102a0:	f000 8104 	beq.w	80104ac <_dtoa_r+0xb54>
 80102a4:	2e00      	cmp	r6, #0
 80102a6:	dd05      	ble.n	80102b4 <_dtoa_r+0x95c>
 80102a8:	4629      	mov	r1, r5
 80102aa:	4632      	mov	r2, r6
 80102ac:	4658      	mov	r0, fp
 80102ae:	f000 fbb9 	bl	8010a24 <__lshift>
 80102b2:	4605      	mov	r5, r0
 80102b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d05a      	beq.n	8010370 <_dtoa_r+0xa18>
 80102ba:	6869      	ldr	r1, [r5, #4]
 80102bc:	4658      	mov	r0, fp
 80102be:	f000 f959 	bl	8010574 <_Balloc>
 80102c2:	4606      	mov	r6, r0
 80102c4:	b928      	cbnz	r0, 80102d2 <_dtoa_r+0x97a>
 80102c6:	4b84      	ldr	r3, [pc, #528]	@ (80104d8 <_dtoa_r+0xb80>)
 80102c8:	4602      	mov	r2, r0
 80102ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80102ce:	f7ff bb5a 	b.w	800f986 <_dtoa_r+0x2e>
 80102d2:	692a      	ldr	r2, [r5, #16]
 80102d4:	3202      	adds	r2, #2
 80102d6:	0092      	lsls	r2, r2, #2
 80102d8:	f105 010c 	add.w	r1, r5, #12
 80102dc:	300c      	adds	r0, #12
 80102de:	f002 f877 	bl	80123d0 <memcpy>
 80102e2:	2201      	movs	r2, #1
 80102e4:	4631      	mov	r1, r6
 80102e6:	4658      	mov	r0, fp
 80102e8:	f000 fb9c 	bl	8010a24 <__lshift>
 80102ec:	f10a 0301 	add.w	r3, sl, #1
 80102f0:	9307      	str	r3, [sp, #28]
 80102f2:	9b00      	ldr	r3, [sp, #0]
 80102f4:	4453      	add	r3, sl
 80102f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102f8:	9b02      	ldr	r3, [sp, #8]
 80102fa:	f003 0301 	and.w	r3, r3, #1
 80102fe:	462f      	mov	r7, r5
 8010300:	930a      	str	r3, [sp, #40]	@ 0x28
 8010302:	4605      	mov	r5, r0
 8010304:	9b07      	ldr	r3, [sp, #28]
 8010306:	4621      	mov	r1, r4
 8010308:	3b01      	subs	r3, #1
 801030a:	4648      	mov	r0, r9
 801030c:	9300      	str	r3, [sp, #0]
 801030e:	f7ff fa99 	bl	800f844 <quorem>
 8010312:	4639      	mov	r1, r7
 8010314:	9002      	str	r0, [sp, #8]
 8010316:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801031a:	4648      	mov	r0, r9
 801031c:	f000 fbee 	bl	8010afc <__mcmp>
 8010320:	462a      	mov	r2, r5
 8010322:	9008      	str	r0, [sp, #32]
 8010324:	4621      	mov	r1, r4
 8010326:	4658      	mov	r0, fp
 8010328:	f000 fc04 	bl	8010b34 <__mdiff>
 801032c:	68c2      	ldr	r2, [r0, #12]
 801032e:	4606      	mov	r6, r0
 8010330:	bb02      	cbnz	r2, 8010374 <_dtoa_r+0xa1c>
 8010332:	4601      	mov	r1, r0
 8010334:	4648      	mov	r0, r9
 8010336:	f000 fbe1 	bl	8010afc <__mcmp>
 801033a:	4602      	mov	r2, r0
 801033c:	4631      	mov	r1, r6
 801033e:	4658      	mov	r0, fp
 8010340:	920e      	str	r2, [sp, #56]	@ 0x38
 8010342:	f000 f957 	bl	80105f4 <_Bfree>
 8010346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010348:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801034a:	9e07      	ldr	r6, [sp, #28]
 801034c:	ea43 0102 	orr.w	r1, r3, r2
 8010350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010352:	4319      	orrs	r1, r3
 8010354:	d110      	bne.n	8010378 <_dtoa_r+0xa20>
 8010356:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801035a:	d029      	beq.n	80103b0 <_dtoa_r+0xa58>
 801035c:	9b08      	ldr	r3, [sp, #32]
 801035e:	2b00      	cmp	r3, #0
 8010360:	dd02      	ble.n	8010368 <_dtoa_r+0xa10>
 8010362:	9b02      	ldr	r3, [sp, #8]
 8010364:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010368:	9b00      	ldr	r3, [sp, #0]
 801036a:	f883 8000 	strb.w	r8, [r3]
 801036e:	e63f      	b.n	800fff0 <_dtoa_r+0x698>
 8010370:	4628      	mov	r0, r5
 8010372:	e7bb      	b.n	80102ec <_dtoa_r+0x994>
 8010374:	2201      	movs	r2, #1
 8010376:	e7e1      	b.n	801033c <_dtoa_r+0x9e4>
 8010378:	9b08      	ldr	r3, [sp, #32]
 801037a:	2b00      	cmp	r3, #0
 801037c:	db04      	blt.n	8010388 <_dtoa_r+0xa30>
 801037e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010380:	430b      	orrs	r3, r1
 8010382:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010384:	430b      	orrs	r3, r1
 8010386:	d120      	bne.n	80103ca <_dtoa_r+0xa72>
 8010388:	2a00      	cmp	r2, #0
 801038a:	dded      	ble.n	8010368 <_dtoa_r+0xa10>
 801038c:	4649      	mov	r1, r9
 801038e:	2201      	movs	r2, #1
 8010390:	4658      	mov	r0, fp
 8010392:	f000 fb47 	bl	8010a24 <__lshift>
 8010396:	4621      	mov	r1, r4
 8010398:	4681      	mov	r9, r0
 801039a:	f000 fbaf 	bl	8010afc <__mcmp>
 801039e:	2800      	cmp	r0, #0
 80103a0:	dc03      	bgt.n	80103aa <_dtoa_r+0xa52>
 80103a2:	d1e1      	bne.n	8010368 <_dtoa_r+0xa10>
 80103a4:	f018 0f01 	tst.w	r8, #1
 80103a8:	d0de      	beq.n	8010368 <_dtoa_r+0xa10>
 80103aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80103ae:	d1d8      	bne.n	8010362 <_dtoa_r+0xa0a>
 80103b0:	9a00      	ldr	r2, [sp, #0]
 80103b2:	2339      	movs	r3, #57	@ 0x39
 80103b4:	7013      	strb	r3, [r2, #0]
 80103b6:	4633      	mov	r3, r6
 80103b8:	461e      	mov	r6, r3
 80103ba:	3b01      	subs	r3, #1
 80103bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80103c0:	2a39      	cmp	r2, #57	@ 0x39
 80103c2:	d052      	beq.n	801046a <_dtoa_r+0xb12>
 80103c4:	3201      	adds	r2, #1
 80103c6:	701a      	strb	r2, [r3, #0]
 80103c8:	e612      	b.n	800fff0 <_dtoa_r+0x698>
 80103ca:	2a00      	cmp	r2, #0
 80103cc:	dd07      	ble.n	80103de <_dtoa_r+0xa86>
 80103ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80103d2:	d0ed      	beq.n	80103b0 <_dtoa_r+0xa58>
 80103d4:	9a00      	ldr	r2, [sp, #0]
 80103d6:	f108 0301 	add.w	r3, r8, #1
 80103da:	7013      	strb	r3, [r2, #0]
 80103dc:	e608      	b.n	800fff0 <_dtoa_r+0x698>
 80103de:	9b07      	ldr	r3, [sp, #28]
 80103e0:	9a07      	ldr	r2, [sp, #28]
 80103e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80103e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d028      	beq.n	801043e <_dtoa_r+0xae6>
 80103ec:	4649      	mov	r1, r9
 80103ee:	2300      	movs	r3, #0
 80103f0:	220a      	movs	r2, #10
 80103f2:	4658      	mov	r0, fp
 80103f4:	f000 f920 	bl	8010638 <__multadd>
 80103f8:	42af      	cmp	r7, r5
 80103fa:	4681      	mov	r9, r0
 80103fc:	f04f 0300 	mov.w	r3, #0
 8010400:	f04f 020a 	mov.w	r2, #10
 8010404:	4639      	mov	r1, r7
 8010406:	4658      	mov	r0, fp
 8010408:	d107      	bne.n	801041a <_dtoa_r+0xac2>
 801040a:	f000 f915 	bl	8010638 <__multadd>
 801040e:	4607      	mov	r7, r0
 8010410:	4605      	mov	r5, r0
 8010412:	9b07      	ldr	r3, [sp, #28]
 8010414:	3301      	adds	r3, #1
 8010416:	9307      	str	r3, [sp, #28]
 8010418:	e774      	b.n	8010304 <_dtoa_r+0x9ac>
 801041a:	f000 f90d 	bl	8010638 <__multadd>
 801041e:	4629      	mov	r1, r5
 8010420:	4607      	mov	r7, r0
 8010422:	2300      	movs	r3, #0
 8010424:	220a      	movs	r2, #10
 8010426:	4658      	mov	r0, fp
 8010428:	f000 f906 	bl	8010638 <__multadd>
 801042c:	4605      	mov	r5, r0
 801042e:	e7f0      	b.n	8010412 <_dtoa_r+0xaba>
 8010430:	9b00      	ldr	r3, [sp, #0]
 8010432:	2b00      	cmp	r3, #0
 8010434:	bfcc      	ite	gt
 8010436:	461e      	movgt	r6, r3
 8010438:	2601      	movle	r6, #1
 801043a:	4456      	add	r6, sl
 801043c:	2700      	movs	r7, #0
 801043e:	4649      	mov	r1, r9
 8010440:	2201      	movs	r2, #1
 8010442:	4658      	mov	r0, fp
 8010444:	f000 faee 	bl	8010a24 <__lshift>
 8010448:	4621      	mov	r1, r4
 801044a:	4681      	mov	r9, r0
 801044c:	f000 fb56 	bl	8010afc <__mcmp>
 8010450:	2800      	cmp	r0, #0
 8010452:	dcb0      	bgt.n	80103b6 <_dtoa_r+0xa5e>
 8010454:	d102      	bne.n	801045c <_dtoa_r+0xb04>
 8010456:	f018 0f01 	tst.w	r8, #1
 801045a:	d1ac      	bne.n	80103b6 <_dtoa_r+0xa5e>
 801045c:	4633      	mov	r3, r6
 801045e:	461e      	mov	r6, r3
 8010460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010464:	2a30      	cmp	r2, #48	@ 0x30
 8010466:	d0fa      	beq.n	801045e <_dtoa_r+0xb06>
 8010468:	e5c2      	b.n	800fff0 <_dtoa_r+0x698>
 801046a:	459a      	cmp	sl, r3
 801046c:	d1a4      	bne.n	80103b8 <_dtoa_r+0xa60>
 801046e:	9b04      	ldr	r3, [sp, #16]
 8010470:	3301      	adds	r3, #1
 8010472:	9304      	str	r3, [sp, #16]
 8010474:	2331      	movs	r3, #49	@ 0x31
 8010476:	f88a 3000 	strb.w	r3, [sl]
 801047a:	e5b9      	b.n	800fff0 <_dtoa_r+0x698>
 801047c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801047e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80104dc <_dtoa_r+0xb84>
 8010482:	b11b      	cbz	r3, 801048c <_dtoa_r+0xb34>
 8010484:	f10a 0308 	add.w	r3, sl, #8
 8010488:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801048a:	6013      	str	r3, [r2, #0]
 801048c:	4650      	mov	r0, sl
 801048e:	b019      	add	sp, #100	@ 0x64
 8010490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010496:	2b01      	cmp	r3, #1
 8010498:	f77f ae37 	ble.w	801010a <_dtoa_r+0x7b2>
 801049c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801049e:	930a      	str	r3, [sp, #40]	@ 0x28
 80104a0:	2001      	movs	r0, #1
 80104a2:	e655      	b.n	8010150 <_dtoa_r+0x7f8>
 80104a4:	9b00      	ldr	r3, [sp, #0]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	f77f aed6 	ble.w	8010258 <_dtoa_r+0x900>
 80104ac:	4656      	mov	r6, sl
 80104ae:	4621      	mov	r1, r4
 80104b0:	4648      	mov	r0, r9
 80104b2:	f7ff f9c7 	bl	800f844 <quorem>
 80104b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80104ba:	f806 8b01 	strb.w	r8, [r6], #1
 80104be:	9b00      	ldr	r3, [sp, #0]
 80104c0:	eba6 020a 	sub.w	r2, r6, sl
 80104c4:	4293      	cmp	r3, r2
 80104c6:	ddb3      	ble.n	8010430 <_dtoa_r+0xad8>
 80104c8:	4649      	mov	r1, r9
 80104ca:	2300      	movs	r3, #0
 80104cc:	220a      	movs	r2, #10
 80104ce:	4658      	mov	r0, fp
 80104d0:	f000 f8b2 	bl	8010638 <__multadd>
 80104d4:	4681      	mov	r9, r0
 80104d6:	e7ea      	b.n	80104ae <_dtoa_r+0xb56>
 80104d8:	08013e4d 	.word	0x08013e4d
 80104dc:	08013dd1 	.word	0x08013dd1

080104e0 <_free_r>:
 80104e0:	b538      	push	{r3, r4, r5, lr}
 80104e2:	4605      	mov	r5, r0
 80104e4:	2900      	cmp	r1, #0
 80104e6:	d041      	beq.n	801056c <_free_r+0x8c>
 80104e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104ec:	1f0c      	subs	r4, r1, #4
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	bfb8      	it	lt
 80104f2:	18e4      	addlt	r4, r4, r3
 80104f4:	f7fe f83a 	bl	800e56c <__malloc_lock>
 80104f8:	4a1d      	ldr	r2, [pc, #116]	@ (8010570 <_free_r+0x90>)
 80104fa:	6813      	ldr	r3, [r2, #0]
 80104fc:	b933      	cbnz	r3, 801050c <_free_r+0x2c>
 80104fe:	6063      	str	r3, [r4, #4]
 8010500:	6014      	str	r4, [r2, #0]
 8010502:	4628      	mov	r0, r5
 8010504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010508:	f7fe b836 	b.w	800e578 <__malloc_unlock>
 801050c:	42a3      	cmp	r3, r4
 801050e:	d908      	bls.n	8010522 <_free_r+0x42>
 8010510:	6820      	ldr	r0, [r4, #0]
 8010512:	1821      	adds	r1, r4, r0
 8010514:	428b      	cmp	r3, r1
 8010516:	bf01      	itttt	eq
 8010518:	6819      	ldreq	r1, [r3, #0]
 801051a:	685b      	ldreq	r3, [r3, #4]
 801051c:	1809      	addeq	r1, r1, r0
 801051e:	6021      	streq	r1, [r4, #0]
 8010520:	e7ed      	b.n	80104fe <_free_r+0x1e>
 8010522:	461a      	mov	r2, r3
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	b10b      	cbz	r3, 801052c <_free_r+0x4c>
 8010528:	42a3      	cmp	r3, r4
 801052a:	d9fa      	bls.n	8010522 <_free_r+0x42>
 801052c:	6811      	ldr	r1, [r2, #0]
 801052e:	1850      	adds	r0, r2, r1
 8010530:	42a0      	cmp	r0, r4
 8010532:	d10b      	bne.n	801054c <_free_r+0x6c>
 8010534:	6820      	ldr	r0, [r4, #0]
 8010536:	4401      	add	r1, r0
 8010538:	1850      	adds	r0, r2, r1
 801053a:	4283      	cmp	r3, r0
 801053c:	6011      	str	r1, [r2, #0]
 801053e:	d1e0      	bne.n	8010502 <_free_r+0x22>
 8010540:	6818      	ldr	r0, [r3, #0]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	6053      	str	r3, [r2, #4]
 8010546:	4408      	add	r0, r1
 8010548:	6010      	str	r0, [r2, #0]
 801054a:	e7da      	b.n	8010502 <_free_r+0x22>
 801054c:	d902      	bls.n	8010554 <_free_r+0x74>
 801054e:	230c      	movs	r3, #12
 8010550:	602b      	str	r3, [r5, #0]
 8010552:	e7d6      	b.n	8010502 <_free_r+0x22>
 8010554:	6820      	ldr	r0, [r4, #0]
 8010556:	1821      	adds	r1, r4, r0
 8010558:	428b      	cmp	r3, r1
 801055a:	bf04      	itt	eq
 801055c:	6819      	ldreq	r1, [r3, #0]
 801055e:	685b      	ldreq	r3, [r3, #4]
 8010560:	6063      	str	r3, [r4, #4]
 8010562:	bf04      	itt	eq
 8010564:	1809      	addeq	r1, r1, r0
 8010566:	6021      	streq	r1, [r4, #0]
 8010568:	6054      	str	r4, [r2, #4]
 801056a:	e7ca      	b.n	8010502 <_free_r+0x22>
 801056c:	bd38      	pop	{r3, r4, r5, pc}
 801056e:	bf00      	nop
 8010570:	20003290 	.word	0x20003290

08010574 <_Balloc>:
 8010574:	b570      	push	{r4, r5, r6, lr}
 8010576:	69c6      	ldr	r6, [r0, #28]
 8010578:	4604      	mov	r4, r0
 801057a:	460d      	mov	r5, r1
 801057c:	b976      	cbnz	r6, 801059c <_Balloc+0x28>
 801057e:	2010      	movs	r0, #16
 8010580:	f7fd ff4a 	bl	800e418 <malloc>
 8010584:	4602      	mov	r2, r0
 8010586:	61e0      	str	r0, [r4, #28]
 8010588:	b920      	cbnz	r0, 8010594 <_Balloc+0x20>
 801058a:	4b18      	ldr	r3, [pc, #96]	@ (80105ec <_Balloc+0x78>)
 801058c:	4818      	ldr	r0, [pc, #96]	@ (80105f0 <_Balloc+0x7c>)
 801058e:	216b      	movs	r1, #107	@ 0x6b
 8010590:	f001 ff36 	bl	8012400 <__assert_func>
 8010594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010598:	6006      	str	r6, [r0, #0]
 801059a:	60c6      	str	r6, [r0, #12]
 801059c:	69e6      	ldr	r6, [r4, #28]
 801059e:	68f3      	ldr	r3, [r6, #12]
 80105a0:	b183      	cbz	r3, 80105c4 <_Balloc+0x50>
 80105a2:	69e3      	ldr	r3, [r4, #28]
 80105a4:	68db      	ldr	r3, [r3, #12]
 80105a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80105aa:	b9b8      	cbnz	r0, 80105dc <_Balloc+0x68>
 80105ac:	2101      	movs	r1, #1
 80105ae:	fa01 f605 	lsl.w	r6, r1, r5
 80105b2:	1d72      	adds	r2, r6, #5
 80105b4:	0092      	lsls	r2, r2, #2
 80105b6:	4620      	mov	r0, r4
 80105b8:	f001 ff40 	bl	801243c <_calloc_r>
 80105bc:	b160      	cbz	r0, 80105d8 <_Balloc+0x64>
 80105be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80105c2:	e00e      	b.n	80105e2 <_Balloc+0x6e>
 80105c4:	2221      	movs	r2, #33	@ 0x21
 80105c6:	2104      	movs	r1, #4
 80105c8:	4620      	mov	r0, r4
 80105ca:	f001 ff37 	bl	801243c <_calloc_r>
 80105ce:	69e3      	ldr	r3, [r4, #28]
 80105d0:	60f0      	str	r0, [r6, #12]
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d1e4      	bne.n	80105a2 <_Balloc+0x2e>
 80105d8:	2000      	movs	r0, #0
 80105da:	bd70      	pop	{r4, r5, r6, pc}
 80105dc:	6802      	ldr	r2, [r0, #0]
 80105de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80105e2:	2300      	movs	r3, #0
 80105e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80105e8:	e7f7      	b.n	80105da <_Balloc+0x66>
 80105ea:	bf00      	nop
 80105ec:	08013dde 	.word	0x08013dde
 80105f0:	08013e5e 	.word	0x08013e5e

080105f4 <_Bfree>:
 80105f4:	b570      	push	{r4, r5, r6, lr}
 80105f6:	69c6      	ldr	r6, [r0, #28]
 80105f8:	4605      	mov	r5, r0
 80105fa:	460c      	mov	r4, r1
 80105fc:	b976      	cbnz	r6, 801061c <_Bfree+0x28>
 80105fe:	2010      	movs	r0, #16
 8010600:	f7fd ff0a 	bl	800e418 <malloc>
 8010604:	4602      	mov	r2, r0
 8010606:	61e8      	str	r0, [r5, #28]
 8010608:	b920      	cbnz	r0, 8010614 <_Bfree+0x20>
 801060a:	4b09      	ldr	r3, [pc, #36]	@ (8010630 <_Bfree+0x3c>)
 801060c:	4809      	ldr	r0, [pc, #36]	@ (8010634 <_Bfree+0x40>)
 801060e:	218f      	movs	r1, #143	@ 0x8f
 8010610:	f001 fef6 	bl	8012400 <__assert_func>
 8010614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010618:	6006      	str	r6, [r0, #0]
 801061a:	60c6      	str	r6, [r0, #12]
 801061c:	b13c      	cbz	r4, 801062e <_Bfree+0x3a>
 801061e:	69eb      	ldr	r3, [r5, #28]
 8010620:	6862      	ldr	r2, [r4, #4]
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010628:	6021      	str	r1, [r4, #0]
 801062a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801062e:	bd70      	pop	{r4, r5, r6, pc}
 8010630:	08013dde 	.word	0x08013dde
 8010634:	08013e5e 	.word	0x08013e5e

08010638 <__multadd>:
 8010638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801063c:	690d      	ldr	r5, [r1, #16]
 801063e:	4607      	mov	r7, r0
 8010640:	460c      	mov	r4, r1
 8010642:	461e      	mov	r6, r3
 8010644:	f101 0c14 	add.w	ip, r1, #20
 8010648:	2000      	movs	r0, #0
 801064a:	f8dc 3000 	ldr.w	r3, [ip]
 801064e:	b299      	uxth	r1, r3
 8010650:	fb02 6101 	mla	r1, r2, r1, r6
 8010654:	0c1e      	lsrs	r6, r3, #16
 8010656:	0c0b      	lsrs	r3, r1, #16
 8010658:	fb02 3306 	mla	r3, r2, r6, r3
 801065c:	b289      	uxth	r1, r1
 801065e:	3001      	adds	r0, #1
 8010660:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010664:	4285      	cmp	r5, r0
 8010666:	f84c 1b04 	str.w	r1, [ip], #4
 801066a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801066e:	dcec      	bgt.n	801064a <__multadd+0x12>
 8010670:	b30e      	cbz	r6, 80106b6 <__multadd+0x7e>
 8010672:	68a3      	ldr	r3, [r4, #8]
 8010674:	42ab      	cmp	r3, r5
 8010676:	dc19      	bgt.n	80106ac <__multadd+0x74>
 8010678:	6861      	ldr	r1, [r4, #4]
 801067a:	4638      	mov	r0, r7
 801067c:	3101      	adds	r1, #1
 801067e:	f7ff ff79 	bl	8010574 <_Balloc>
 8010682:	4680      	mov	r8, r0
 8010684:	b928      	cbnz	r0, 8010692 <__multadd+0x5a>
 8010686:	4602      	mov	r2, r0
 8010688:	4b0c      	ldr	r3, [pc, #48]	@ (80106bc <__multadd+0x84>)
 801068a:	480d      	ldr	r0, [pc, #52]	@ (80106c0 <__multadd+0x88>)
 801068c:	21ba      	movs	r1, #186	@ 0xba
 801068e:	f001 feb7 	bl	8012400 <__assert_func>
 8010692:	6922      	ldr	r2, [r4, #16]
 8010694:	3202      	adds	r2, #2
 8010696:	f104 010c 	add.w	r1, r4, #12
 801069a:	0092      	lsls	r2, r2, #2
 801069c:	300c      	adds	r0, #12
 801069e:	f001 fe97 	bl	80123d0 <memcpy>
 80106a2:	4621      	mov	r1, r4
 80106a4:	4638      	mov	r0, r7
 80106a6:	f7ff ffa5 	bl	80105f4 <_Bfree>
 80106aa:	4644      	mov	r4, r8
 80106ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80106b0:	3501      	adds	r5, #1
 80106b2:	615e      	str	r6, [r3, #20]
 80106b4:	6125      	str	r5, [r4, #16]
 80106b6:	4620      	mov	r0, r4
 80106b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106bc:	08013e4d 	.word	0x08013e4d
 80106c0:	08013e5e 	.word	0x08013e5e

080106c4 <__s2b>:
 80106c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106c8:	460c      	mov	r4, r1
 80106ca:	4615      	mov	r5, r2
 80106cc:	461f      	mov	r7, r3
 80106ce:	2209      	movs	r2, #9
 80106d0:	3308      	adds	r3, #8
 80106d2:	4606      	mov	r6, r0
 80106d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80106d8:	2100      	movs	r1, #0
 80106da:	2201      	movs	r2, #1
 80106dc:	429a      	cmp	r2, r3
 80106de:	db09      	blt.n	80106f4 <__s2b+0x30>
 80106e0:	4630      	mov	r0, r6
 80106e2:	f7ff ff47 	bl	8010574 <_Balloc>
 80106e6:	b940      	cbnz	r0, 80106fa <__s2b+0x36>
 80106e8:	4602      	mov	r2, r0
 80106ea:	4b19      	ldr	r3, [pc, #100]	@ (8010750 <__s2b+0x8c>)
 80106ec:	4819      	ldr	r0, [pc, #100]	@ (8010754 <__s2b+0x90>)
 80106ee:	21d3      	movs	r1, #211	@ 0xd3
 80106f0:	f001 fe86 	bl	8012400 <__assert_func>
 80106f4:	0052      	lsls	r2, r2, #1
 80106f6:	3101      	adds	r1, #1
 80106f8:	e7f0      	b.n	80106dc <__s2b+0x18>
 80106fa:	9b08      	ldr	r3, [sp, #32]
 80106fc:	6143      	str	r3, [r0, #20]
 80106fe:	2d09      	cmp	r5, #9
 8010700:	f04f 0301 	mov.w	r3, #1
 8010704:	6103      	str	r3, [r0, #16]
 8010706:	dd16      	ble.n	8010736 <__s2b+0x72>
 8010708:	f104 0909 	add.w	r9, r4, #9
 801070c:	46c8      	mov	r8, r9
 801070e:	442c      	add	r4, r5
 8010710:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010714:	4601      	mov	r1, r0
 8010716:	3b30      	subs	r3, #48	@ 0x30
 8010718:	220a      	movs	r2, #10
 801071a:	4630      	mov	r0, r6
 801071c:	f7ff ff8c 	bl	8010638 <__multadd>
 8010720:	45a0      	cmp	r8, r4
 8010722:	d1f5      	bne.n	8010710 <__s2b+0x4c>
 8010724:	f1a5 0408 	sub.w	r4, r5, #8
 8010728:	444c      	add	r4, r9
 801072a:	1b2d      	subs	r5, r5, r4
 801072c:	1963      	adds	r3, r4, r5
 801072e:	42bb      	cmp	r3, r7
 8010730:	db04      	blt.n	801073c <__s2b+0x78>
 8010732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010736:	340a      	adds	r4, #10
 8010738:	2509      	movs	r5, #9
 801073a:	e7f6      	b.n	801072a <__s2b+0x66>
 801073c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010740:	4601      	mov	r1, r0
 8010742:	3b30      	subs	r3, #48	@ 0x30
 8010744:	220a      	movs	r2, #10
 8010746:	4630      	mov	r0, r6
 8010748:	f7ff ff76 	bl	8010638 <__multadd>
 801074c:	e7ee      	b.n	801072c <__s2b+0x68>
 801074e:	bf00      	nop
 8010750:	08013e4d 	.word	0x08013e4d
 8010754:	08013e5e 	.word	0x08013e5e

08010758 <__hi0bits>:
 8010758:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801075c:	4603      	mov	r3, r0
 801075e:	bf36      	itet	cc
 8010760:	0403      	lslcc	r3, r0, #16
 8010762:	2000      	movcs	r0, #0
 8010764:	2010      	movcc	r0, #16
 8010766:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801076a:	bf3c      	itt	cc
 801076c:	021b      	lslcc	r3, r3, #8
 801076e:	3008      	addcc	r0, #8
 8010770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010774:	bf3c      	itt	cc
 8010776:	011b      	lslcc	r3, r3, #4
 8010778:	3004      	addcc	r0, #4
 801077a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801077e:	bf3c      	itt	cc
 8010780:	009b      	lslcc	r3, r3, #2
 8010782:	3002      	addcc	r0, #2
 8010784:	2b00      	cmp	r3, #0
 8010786:	db05      	blt.n	8010794 <__hi0bits+0x3c>
 8010788:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801078c:	f100 0001 	add.w	r0, r0, #1
 8010790:	bf08      	it	eq
 8010792:	2020      	moveq	r0, #32
 8010794:	4770      	bx	lr

08010796 <__lo0bits>:
 8010796:	6803      	ldr	r3, [r0, #0]
 8010798:	4602      	mov	r2, r0
 801079a:	f013 0007 	ands.w	r0, r3, #7
 801079e:	d00b      	beq.n	80107b8 <__lo0bits+0x22>
 80107a0:	07d9      	lsls	r1, r3, #31
 80107a2:	d421      	bmi.n	80107e8 <__lo0bits+0x52>
 80107a4:	0798      	lsls	r0, r3, #30
 80107a6:	bf49      	itett	mi
 80107a8:	085b      	lsrmi	r3, r3, #1
 80107aa:	089b      	lsrpl	r3, r3, #2
 80107ac:	2001      	movmi	r0, #1
 80107ae:	6013      	strmi	r3, [r2, #0]
 80107b0:	bf5c      	itt	pl
 80107b2:	6013      	strpl	r3, [r2, #0]
 80107b4:	2002      	movpl	r0, #2
 80107b6:	4770      	bx	lr
 80107b8:	b299      	uxth	r1, r3
 80107ba:	b909      	cbnz	r1, 80107c0 <__lo0bits+0x2a>
 80107bc:	0c1b      	lsrs	r3, r3, #16
 80107be:	2010      	movs	r0, #16
 80107c0:	b2d9      	uxtb	r1, r3
 80107c2:	b909      	cbnz	r1, 80107c8 <__lo0bits+0x32>
 80107c4:	3008      	adds	r0, #8
 80107c6:	0a1b      	lsrs	r3, r3, #8
 80107c8:	0719      	lsls	r1, r3, #28
 80107ca:	bf04      	itt	eq
 80107cc:	091b      	lsreq	r3, r3, #4
 80107ce:	3004      	addeq	r0, #4
 80107d0:	0799      	lsls	r1, r3, #30
 80107d2:	bf04      	itt	eq
 80107d4:	089b      	lsreq	r3, r3, #2
 80107d6:	3002      	addeq	r0, #2
 80107d8:	07d9      	lsls	r1, r3, #31
 80107da:	d403      	bmi.n	80107e4 <__lo0bits+0x4e>
 80107dc:	085b      	lsrs	r3, r3, #1
 80107de:	f100 0001 	add.w	r0, r0, #1
 80107e2:	d003      	beq.n	80107ec <__lo0bits+0x56>
 80107e4:	6013      	str	r3, [r2, #0]
 80107e6:	4770      	bx	lr
 80107e8:	2000      	movs	r0, #0
 80107ea:	4770      	bx	lr
 80107ec:	2020      	movs	r0, #32
 80107ee:	4770      	bx	lr

080107f0 <__i2b>:
 80107f0:	b510      	push	{r4, lr}
 80107f2:	460c      	mov	r4, r1
 80107f4:	2101      	movs	r1, #1
 80107f6:	f7ff febd 	bl	8010574 <_Balloc>
 80107fa:	4602      	mov	r2, r0
 80107fc:	b928      	cbnz	r0, 801080a <__i2b+0x1a>
 80107fe:	4b05      	ldr	r3, [pc, #20]	@ (8010814 <__i2b+0x24>)
 8010800:	4805      	ldr	r0, [pc, #20]	@ (8010818 <__i2b+0x28>)
 8010802:	f240 1145 	movw	r1, #325	@ 0x145
 8010806:	f001 fdfb 	bl	8012400 <__assert_func>
 801080a:	2301      	movs	r3, #1
 801080c:	6144      	str	r4, [r0, #20]
 801080e:	6103      	str	r3, [r0, #16]
 8010810:	bd10      	pop	{r4, pc}
 8010812:	bf00      	nop
 8010814:	08013e4d 	.word	0x08013e4d
 8010818:	08013e5e 	.word	0x08013e5e

0801081c <__multiply>:
 801081c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010820:	4614      	mov	r4, r2
 8010822:	690a      	ldr	r2, [r1, #16]
 8010824:	6923      	ldr	r3, [r4, #16]
 8010826:	429a      	cmp	r2, r3
 8010828:	bfa8      	it	ge
 801082a:	4623      	movge	r3, r4
 801082c:	460f      	mov	r7, r1
 801082e:	bfa4      	itt	ge
 8010830:	460c      	movge	r4, r1
 8010832:	461f      	movge	r7, r3
 8010834:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010838:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801083c:	68a3      	ldr	r3, [r4, #8]
 801083e:	6861      	ldr	r1, [r4, #4]
 8010840:	eb0a 0609 	add.w	r6, sl, r9
 8010844:	42b3      	cmp	r3, r6
 8010846:	b085      	sub	sp, #20
 8010848:	bfb8      	it	lt
 801084a:	3101      	addlt	r1, #1
 801084c:	f7ff fe92 	bl	8010574 <_Balloc>
 8010850:	b930      	cbnz	r0, 8010860 <__multiply+0x44>
 8010852:	4602      	mov	r2, r0
 8010854:	4b44      	ldr	r3, [pc, #272]	@ (8010968 <__multiply+0x14c>)
 8010856:	4845      	ldr	r0, [pc, #276]	@ (801096c <__multiply+0x150>)
 8010858:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801085c:	f001 fdd0 	bl	8012400 <__assert_func>
 8010860:	f100 0514 	add.w	r5, r0, #20
 8010864:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010868:	462b      	mov	r3, r5
 801086a:	2200      	movs	r2, #0
 801086c:	4543      	cmp	r3, r8
 801086e:	d321      	bcc.n	80108b4 <__multiply+0x98>
 8010870:	f107 0114 	add.w	r1, r7, #20
 8010874:	f104 0214 	add.w	r2, r4, #20
 8010878:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801087c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010880:	9302      	str	r3, [sp, #8]
 8010882:	1b13      	subs	r3, r2, r4
 8010884:	3b15      	subs	r3, #21
 8010886:	f023 0303 	bic.w	r3, r3, #3
 801088a:	3304      	adds	r3, #4
 801088c:	f104 0715 	add.w	r7, r4, #21
 8010890:	42ba      	cmp	r2, r7
 8010892:	bf38      	it	cc
 8010894:	2304      	movcc	r3, #4
 8010896:	9301      	str	r3, [sp, #4]
 8010898:	9b02      	ldr	r3, [sp, #8]
 801089a:	9103      	str	r1, [sp, #12]
 801089c:	428b      	cmp	r3, r1
 801089e:	d80c      	bhi.n	80108ba <__multiply+0x9e>
 80108a0:	2e00      	cmp	r6, #0
 80108a2:	dd03      	ble.n	80108ac <__multiply+0x90>
 80108a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d05b      	beq.n	8010964 <__multiply+0x148>
 80108ac:	6106      	str	r6, [r0, #16]
 80108ae:	b005      	add	sp, #20
 80108b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b4:	f843 2b04 	str.w	r2, [r3], #4
 80108b8:	e7d8      	b.n	801086c <__multiply+0x50>
 80108ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80108be:	f1ba 0f00 	cmp.w	sl, #0
 80108c2:	d024      	beq.n	801090e <__multiply+0xf2>
 80108c4:	f104 0e14 	add.w	lr, r4, #20
 80108c8:	46a9      	mov	r9, r5
 80108ca:	f04f 0c00 	mov.w	ip, #0
 80108ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80108d2:	f8d9 3000 	ldr.w	r3, [r9]
 80108d6:	fa1f fb87 	uxth.w	fp, r7
 80108da:	b29b      	uxth	r3, r3
 80108dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80108e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80108e4:	f8d9 7000 	ldr.w	r7, [r9]
 80108e8:	4463      	add	r3, ip
 80108ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80108ee:	fb0a c70b 	mla	r7, sl, fp, ip
 80108f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80108f6:	b29b      	uxth	r3, r3
 80108f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80108fc:	4572      	cmp	r2, lr
 80108fe:	f849 3b04 	str.w	r3, [r9], #4
 8010902:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010906:	d8e2      	bhi.n	80108ce <__multiply+0xb2>
 8010908:	9b01      	ldr	r3, [sp, #4]
 801090a:	f845 c003 	str.w	ip, [r5, r3]
 801090e:	9b03      	ldr	r3, [sp, #12]
 8010910:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010914:	3104      	adds	r1, #4
 8010916:	f1b9 0f00 	cmp.w	r9, #0
 801091a:	d021      	beq.n	8010960 <__multiply+0x144>
 801091c:	682b      	ldr	r3, [r5, #0]
 801091e:	f104 0c14 	add.w	ip, r4, #20
 8010922:	46ae      	mov	lr, r5
 8010924:	f04f 0a00 	mov.w	sl, #0
 8010928:	f8bc b000 	ldrh.w	fp, [ip]
 801092c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010930:	fb09 770b 	mla	r7, r9, fp, r7
 8010934:	4457      	add	r7, sl
 8010936:	b29b      	uxth	r3, r3
 8010938:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801093c:	f84e 3b04 	str.w	r3, [lr], #4
 8010940:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010944:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010948:	f8be 3000 	ldrh.w	r3, [lr]
 801094c:	fb09 330a 	mla	r3, r9, sl, r3
 8010950:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010954:	4562      	cmp	r2, ip
 8010956:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801095a:	d8e5      	bhi.n	8010928 <__multiply+0x10c>
 801095c:	9f01      	ldr	r7, [sp, #4]
 801095e:	51eb      	str	r3, [r5, r7]
 8010960:	3504      	adds	r5, #4
 8010962:	e799      	b.n	8010898 <__multiply+0x7c>
 8010964:	3e01      	subs	r6, #1
 8010966:	e79b      	b.n	80108a0 <__multiply+0x84>
 8010968:	08013e4d 	.word	0x08013e4d
 801096c:	08013e5e 	.word	0x08013e5e

08010970 <__pow5mult>:
 8010970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010974:	4615      	mov	r5, r2
 8010976:	f012 0203 	ands.w	r2, r2, #3
 801097a:	4607      	mov	r7, r0
 801097c:	460e      	mov	r6, r1
 801097e:	d007      	beq.n	8010990 <__pow5mult+0x20>
 8010980:	4c25      	ldr	r4, [pc, #148]	@ (8010a18 <__pow5mult+0xa8>)
 8010982:	3a01      	subs	r2, #1
 8010984:	2300      	movs	r3, #0
 8010986:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801098a:	f7ff fe55 	bl	8010638 <__multadd>
 801098e:	4606      	mov	r6, r0
 8010990:	10ad      	asrs	r5, r5, #2
 8010992:	d03d      	beq.n	8010a10 <__pow5mult+0xa0>
 8010994:	69fc      	ldr	r4, [r7, #28]
 8010996:	b97c      	cbnz	r4, 80109b8 <__pow5mult+0x48>
 8010998:	2010      	movs	r0, #16
 801099a:	f7fd fd3d 	bl	800e418 <malloc>
 801099e:	4602      	mov	r2, r0
 80109a0:	61f8      	str	r0, [r7, #28]
 80109a2:	b928      	cbnz	r0, 80109b0 <__pow5mult+0x40>
 80109a4:	4b1d      	ldr	r3, [pc, #116]	@ (8010a1c <__pow5mult+0xac>)
 80109a6:	481e      	ldr	r0, [pc, #120]	@ (8010a20 <__pow5mult+0xb0>)
 80109a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80109ac:	f001 fd28 	bl	8012400 <__assert_func>
 80109b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80109b4:	6004      	str	r4, [r0, #0]
 80109b6:	60c4      	str	r4, [r0, #12]
 80109b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80109bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80109c0:	b94c      	cbnz	r4, 80109d6 <__pow5mult+0x66>
 80109c2:	f240 2171 	movw	r1, #625	@ 0x271
 80109c6:	4638      	mov	r0, r7
 80109c8:	f7ff ff12 	bl	80107f0 <__i2b>
 80109cc:	2300      	movs	r3, #0
 80109ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80109d2:	4604      	mov	r4, r0
 80109d4:	6003      	str	r3, [r0, #0]
 80109d6:	f04f 0900 	mov.w	r9, #0
 80109da:	07eb      	lsls	r3, r5, #31
 80109dc:	d50a      	bpl.n	80109f4 <__pow5mult+0x84>
 80109de:	4631      	mov	r1, r6
 80109e0:	4622      	mov	r2, r4
 80109e2:	4638      	mov	r0, r7
 80109e4:	f7ff ff1a 	bl	801081c <__multiply>
 80109e8:	4631      	mov	r1, r6
 80109ea:	4680      	mov	r8, r0
 80109ec:	4638      	mov	r0, r7
 80109ee:	f7ff fe01 	bl	80105f4 <_Bfree>
 80109f2:	4646      	mov	r6, r8
 80109f4:	106d      	asrs	r5, r5, #1
 80109f6:	d00b      	beq.n	8010a10 <__pow5mult+0xa0>
 80109f8:	6820      	ldr	r0, [r4, #0]
 80109fa:	b938      	cbnz	r0, 8010a0c <__pow5mult+0x9c>
 80109fc:	4622      	mov	r2, r4
 80109fe:	4621      	mov	r1, r4
 8010a00:	4638      	mov	r0, r7
 8010a02:	f7ff ff0b 	bl	801081c <__multiply>
 8010a06:	6020      	str	r0, [r4, #0]
 8010a08:	f8c0 9000 	str.w	r9, [r0]
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	e7e4      	b.n	80109da <__pow5mult+0x6a>
 8010a10:	4630      	mov	r0, r6
 8010a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a16:	bf00      	nop
 8010a18:	08013eb8 	.word	0x08013eb8
 8010a1c:	08013dde 	.word	0x08013dde
 8010a20:	08013e5e 	.word	0x08013e5e

08010a24 <__lshift>:
 8010a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a28:	460c      	mov	r4, r1
 8010a2a:	6849      	ldr	r1, [r1, #4]
 8010a2c:	6923      	ldr	r3, [r4, #16]
 8010a2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010a32:	68a3      	ldr	r3, [r4, #8]
 8010a34:	4607      	mov	r7, r0
 8010a36:	4691      	mov	r9, r2
 8010a38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a3c:	f108 0601 	add.w	r6, r8, #1
 8010a40:	42b3      	cmp	r3, r6
 8010a42:	db0b      	blt.n	8010a5c <__lshift+0x38>
 8010a44:	4638      	mov	r0, r7
 8010a46:	f7ff fd95 	bl	8010574 <_Balloc>
 8010a4a:	4605      	mov	r5, r0
 8010a4c:	b948      	cbnz	r0, 8010a62 <__lshift+0x3e>
 8010a4e:	4602      	mov	r2, r0
 8010a50:	4b28      	ldr	r3, [pc, #160]	@ (8010af4 <__lshift+0xd0>)
 8010a52:	4829      	ldr	r0, [pc, #164]	@ (8010af8 <__lshift+0xd4>)
 8010a54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010a58:	f001 fcd2 	bl	8012400 <__assert_func>
 8010a5c:	3101      	adds	r1, #1
 8010a5e:	005b      	lsls	r3, r3, #1
 8010a60:	e7ee      	b.n	8010a40 <__lshift+0x1c>
 8010a62:	2300      	movs	r3, #0
 8010a64:	f100 0114 	add.w	r1, r0, #20
 8010a68:	f100 0210 	add.w	r2, r0, #16
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	4553      	cmp	r3, sl
 8010a70:	db33      	blt.n	8010ada <__lshift+0xb6>
 8010a72:	6920      	ldr	r0, [r4, #16]
 8010a74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a78:	f104 0314 	add.w	r3, r4, #20
 8010a7c:	f019 091f 	ands.w	r9, r9, #31
 8010a80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010a88:	d02b      	beq.n	8010ae2 <__lshift+0xbe>
 8010a8a:	f1c9 0e20 	rsb	lr, r9, #32
 8010a8e:	468a      	mov	sl, r1
 8010a90:	2200      	movs	r2, #0
 8010a92:	6818      	ldr	r0, [r3, #0]
 8010a94:	fa00 f009 	lsl.w	r0, r0, r9
 8010a98:	4310      	orrs	r0, r2
 8010a9a:	f84a 0b04 	str.w	r0, [sl], #4
 8010a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aa2:	459c      	cmp	ip, r3
 8010aa4:	fa22 f20e 	lsr.w	r2, r2, lr
 8010aa8:	d8f3      	bhi.n	8010a92 <__lshift+0x6e>
 8010aaa:	ebac 0304 	sub.w	r3, ip, r4
 8010aae:	3b15      	subs	r3, #21
 8010ab0:	f023 0303 	bic.w	r3, r3, #3
 8010ab4:	3304      	adds	r3, #4
 8010ab6:	f104 0015 	add.w	r0, r4, #21
 8010aba:	4584      	cmp	ip, r0
 8010abc:	bf38      	it	cc
 8010abe:	2304      	movcc	r3, #4
 8010ac0:	50ca      	str	r2, [r1, r3]
 8010ac2:	b10a      	cbz	r2, 8010ac8 <__lshift+0xa4>
 8010ac4:	f108 0602 	add.w	r6, r8, #2
 8010ac8:	3e01      	subs	r6, #1
 8010aca:	4638      	mov	r0, r7
 8010acc:	612e      	str	r6, [r5, #16]
 8010ace:	4621      	mov	r1, r4
 8010ad0:	f7ff fd90 	bl	80105f4 <_Bfree>
 8010ad4:	4628      	mov	r0, r5
 8010ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ada:	f842 0f04 	str.w	r0, [r2, #4]!
 8010ade:	3301      	adds	r3, #1
 8010ae0:	e7c5      	b.n	8010a6e <__lshift+0x4a>
 8010ae2:	3904      	subs	r1, #4
 8010ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ae8:	f841 2f04 	str.w	r2, [r1, #4]!
 8010aec:	459c      	cmp	ip, r3
 8010aee:	d8f9      	bhi.n	8010ae4 <__lshift+0xc0>
 8010af0:	e7ea      	b.n	8010ac8 <__lshift+0xa4>
 8010af2:	bf00      	nop
 8010af4:	08013e4d 	.word	0x08013e4d
 8010af8:	08013e5e 	.word	0x08013e5e

08010afc <__mcmp>:
 8010afc:	690a      	ldr	r2, [r1, #16]
 8010afe:	4603      	mov	r3, r0
 8010b00:	6900      	ldr	r0, [r0, #16]
 8010b02:	1a80      	subs	r0, r0, r2
 8010b04:	b530      	push	{r4, r5, lr}
 8010b06:	d10e      	bne.n	8010b26 <__mcmp+0x2a>
 8010b08:	3314      	adds	r3, #20
 8010b0a:	3114      	adds	r1, #20
 8010b0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010b10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010b14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010b18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010b1c:	4295      	cmp	r5, r2
 8010b1e:	d003      	beq.n	8010b28 <__mcmp+0x2c>
 8010b20:	d205      	bcs.n	8010b2e <__mcmp+0x32>
 8010b22:	f04f 30ff 	mov.w	r0, #4294967295
 8010b26:	bd30      	pop	{r4, r5, pc}
 8010b28:	42a3      	cmp	r3, r4
 8010b2a:	d3f3      	bcc.n	8010b14 <__mcmp+0x18>
 8010b2c:	e7fb      	b.n	8010b26 <__mcmp+0x2a>
 8010b2e:	2001      	movs	r0, #1
 8010b30:	e7f9      	b.n	8010b26 <__mcmp+0x2a>
	...

08010b34 <__mdiff>:
 8010b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b38:	4689      	mov	r9, r1
 8010b3a:	4606      	mov	r6, r0
 8010b3c:	4611      	mov	r1, r2
 8010b3e:	4648      	mov	r0, r9
 8010b40:	4614      	mov	r4, r2
 8010b42:	f7ff ffdb 	bl	8010afc <__mcmp>
 8010b46:	1e05      	subs	r5, r0, #0
 8010b48:	d112      	bne.n	8010b70 <__mdiff+0x3c>
 8010b4a:	4629      	mov	r1, r5
 8010b4c:	4630      	mov	r0, r6
 8010b4e:	f7ff fd11 	bl	8010574 <_Balloc>
 8010b52:	4602      	mov	r2, r0
 8010b54:	b928      	cbnz	r0, 8010b62 <__mdiff+0x2e>
 8010b56:	4b3f      	ldr	r3, [pc, #252]	@ (8010c54 <__mdiff+0x120>)
 8010b58:	f240 2137 	movw	r1, #567	@ 0x237
 8010b5c:	483e      	ldr	r0, [pc, #248]	@ (8010c58 <__mdiff+0x124>)
 8010b5e:	f001 fc4f 	bl	8012400 <__assert_func>
 8010b62:	2301      	movs	r3, #1
 8010b64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010b68:	4610      	mov	r0, r2
 8010b6a:	b003      	add	sp, #12
 8010b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b70:	bfbc      	itt	lt
 8010b72:	464b      	movlt	r3, r9
 8010b74:	46a1      	movlt	r9, r4
 8010b76:	4630      	mov	r0, r6
 8010b78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010b7c:	bfba      	itte	lt
 8010b7e:	461c      	movlt	r4, r3
 8010b80:	2501      	movlt	r5, #1
 8010b82:	2500      	movge	r5, #0
 8010b84:	f7ff fcf6 	bl	8010574 <_Balloc>
 8010b88:	4602      	mov	r2, r0
 8010b8a:	b918      	cbnz	r0, 8010b94 <__mdiff+0x60>
 8010b8c:	4b31      	ldr	r3, [pc, #196]	@ (8010c54 <__mdiff+0x120>)
 8010b8e:	f240 2145 	movw	r1, #581	@ 0x245
 8010b92:	e7e3      	b.n	8010b5c <__mdiff+0x28>
 8010b94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010b98:	6926      	ldr	r6, [r4, #16]
 8010b9a:	60c5      	str	r5, [r0, #12]
 8010b9c:	f109 0310 	add.w	r3, r9, #16
 8010ba0:	f109 0514 	add.w	r5, r9, #20
 8010ba4:	f104 0e14 	add.w	lr, r4, #20
 8010ba8:	f100 0b14 	add.w	fp, r0, #20
 8010bac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010bb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010bb4:	9301      	str	r3, [sp, #4]
 8010bb6:	46d9      	mov	r9, fp
 8010bb8:	f04f 0c00 	mov.w	ip, #0
 8010bbc:	9b01      	ldr	r3, [sp, #4]
 8010bbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010bc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010bc6:	9301      	str	r3, [sp, #4]
 8010bc8:	fa1f f38a 	uxth.w	r3, sl
 8010bcc:	4619      	mov	r1, r3
 8010bce:	b283      	uxth	r3, r0
 8010bd0:	1acb      	subs	r3, r1, r3
 8010bd2:	0c00      	lsrs	r0, r0, #16
 8010bd4:	4463      	add	r3, ip
 8010bd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010bda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010be4:	4576      	cmp	r6, lr
 8010be6:	f849 3b04 	str.w	r3, [r9], #4
 8010bea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010bee:	d8e5      	bhi.n	8010bbc <__mdiff+0x88>
 8010bf0:	1b33      	subs	r3, r6, r4
 8010bf2:	3b15      	subs	r3, #21
 8010bf4:	f023 0303 	bic.w	r3, r3, #3
 8010bf8:	3415      	adds	r4, #21
 8010bfa:	3304      	adds	r3, #4
 8010bfc:	42a6      	cmp	r6, r4
 8010bfe:	bf38      	it	cc
 8010c00:	2304      	movcc	r3, #4
 8010c02:	441d      	add	r5, r3
 8010c04:	445b      	add	r3, fp
 8010c06:	461e      	mov	r6, r3
 8010c08:	462c      	mov	r4, r5
 8010c0a:	4544      	cmp	r4, r8
 8010c0c:	d30e      	bcc.n	8010c2c <__mdiff+0xf8>
 8010c0e:	f108 0103 	add.w	r1, r8, #3
 8010c12:	1b49      	subs	r1, r1, r5
 8010c14:	f021 0103 	bic.w	r1, r1, #3
 8010c18:	3d03      	subs	r5, #3
 8010c1a:	45a8      	cmp	r8, r5
 8010c1c:	bf38      	it	cc
 8010c1e:	2100      	movcc	r1, #0
 8010c20:	440b      	add	r3, r1
 8010c22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010c26:	b191      	cbz	r1, 8010c4e <__mdiff+0x11a>
 8010c28:	6117      	str	r7, [r2, #16]
 8010c2a:	e79d      	b.n	8010b68 <__mdiff+0x34>
 8010c2c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010c30:	46e6      	mov	lr, ip
 8010c32:	0c08      	lsrs	r0, r1, #16
 8010c34:	fa1c fc81 	uxtah	ip, ip, r1
 8010c38:	4471      	add	r1, lr
 8010c3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010c3e:	b289      	uxth	r1, r1
 8010c40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010c44:	f846 1b04 	str.w	r1, [r6], #4
 8010c48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010c4c:	e7dd      	b.n	8010c0a <__mdiff+0xd6>
 8010c4e:	3f01      	subs	r7, #1
 8010c50:	e7e7      	b.n	8010c22 <__mdiff+0xee>
 8010c52:	bf00      	nop
 8010c54:	08013e4d 	.word	0x08013e4d
 8010c58:	08013e5e 	.word	0x08013e5e

08010c5c <__ulp>:
 8010c5c:	b082      	sub	sp, #8
 8010c5e:	ed8d 0b00 	vstr	d0, [sp]
 8010c62:	9a01      	ldr	r2, [sp, #4]
 8010c64:	4b0f      	ldr	r3, [pc, #60]	@ (8010ca4 <__ulp+0x48>)
 8010c66:	4013      	ands	r3, r2
 8010c68:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	dc08      	bgt.n	8010c82 <__ulp+0x26>
 8010c70:	425b      	negs	r3, r3
 8010c72:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010c76:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010c7a:	da04      	bge.n	8010c86 <__ulp+0x2a>
 8010c7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010c80:	4113      	asrs	r3, r2
 8010c82:	2200      	movs	r2, #0
 8010c84:	e008      	b.n	8010c98 <__ulp+0x3c>
 8010c86:	f1a2 0314 	sub.w	r3, r2, #20
 8010c8a:	2b1e      	cmp	r3, #30
 8010c8c:	bfda      	itte	le
 8010c8e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010c92:	40da      	lsrle	r2, r3
 8010c94:	2201      	movgt	r2, #1
 8010c96:	2300      	movs	r3, #0
 8010c98:	4619      	mov	r1, r3
 8010c9a:	4610      	mov	r0, r2
 8010c9c:	ec41 0b10 	vmov	d0, r0, r1
 8010ca0:	b002      	add	sp, #8
 8010ca2:	4770      	bx	lr
 8010ca4:	7ff00000 	.word	0x7ff00000

08010ca8 <__b2d>:
 8010ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cac:	6906      	ldr	r6, [r0, #16]
 8010cae:	f100 0814 	add.w	r8, r0, #20
 8010cb2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010cb6:	1f37      	subs	r7, r6, #4
 8010cb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010cbc:	4610      	mov	r0, r2
 8010cbe:	f7ff fd4b 	bl	8010758 <__hi0bits>
 8010cc2:	f1c0 0320 	rsb	r3, r0, #32
 8010cc6:	280a      	cmp	r0, #10
 8010cc8:	600b      	str	r3, [r1, #0]
 8010cca:	491b      	ldr	r1, [pc, #108]	@ (8010d38 <__b2d+0x90>)
 8010ccc:	dc15      	bgt.n	8010cfa <__b2d+0x52>
 8010cce:	f1c0 0c0b 	rsb	ip, r0, #11
 8010cd2:	fa22 f30c 	lsr.w	r3, r2, ip
 8010cd6:	45b8      	cmp	r8, r7
 8010cd8:	ea43 0501 	orr.w	r5, r3, r1
 8010cdc:	bf34      	ite	cc
 8010cde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010ce2:	2300      	movcs	r3, #0
 8010ce4:	3015      	adds	r0, #21
 8010ce6:	fa02 f000 	lsl.w	r0, r2, r0
 8010cea:	fa23 f30c 	lsr.w	r3, r3, ip
 8010cee:	4303      	orrs	r3, r0
 8010cf0:	461c      	mov	r4, r3
 8010cf2:	ec45 4b10 	vmov	d0, r4, r5
 8010cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cfa:	45b8      	cmp	r8, r7
 8010cfc:	bf3a      	itte	cc
 8010cfe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010d02:	f1a6 0708 	subcc.w	r7, r6, #8
 8010d06:	2300      	movcs	r3, #0
 8010d08:	380b      	subs	r0, #11
 8010d0a:	d012      	beq.n	8010d32 <__b2d+0x8a>
 8010d0c:	f1c0 0120 	rsb	r1, r0, #32
 8010d10:	fa23 f401 	lsr.w	r4, r3, r1
 8010d14:	4082      	lsls	r2, r0
 8010d16:	4322      	orrs	r2, r4
 8010d18:	4547      	cmp	r7, r8
 8010d1a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010d1e:	bf8c      	ite	hi
 8010d20:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010d24:	2200      	movls	r2, #0
 8010d26:	4083      	lsls	r3, r0
 8010d28:	40ca      	lsrs	r2, r1
 8010d2a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010d2e:	4313      	orrs	r3, r2
 8010d30:	e7de      	b.n	8010cf0 <__b2d+0x48>
 8010d32:	ea42 0501 	orr.w	r5, r2, r1
 8010d36:	e7db      	b.n	8010cf0 <__b2d+0x48>
 8010d38:	3ff00000 	.word	0x3ff00000

08010d3c <__d2b>:
 8010d3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d40:	460f      	mov	r7, r1
 8010d42:	2101      	movs	r1, #1
 8010d44:	ec59 8b10 	vmov	r8, r9, d0
 8010d48:	4616      	mov	r6, r2
 8010d4a:	f7ff fc13 	bl	8010574 <_Balloc>
 8010d4e:	4604      	mov	r4, r0
 8010d50:	b930      	cbnz	r0, 8010d60 <__d2b+0x24>
 8010d52:	4602      	mov	r2, r0
 8010d54:	4b23      	ldr	r3, [pc, #140]	@ (8010de4 <__d2b+0xa8>)
 8010d56:	4824      	ldr	r0, [pc, #144]	@ (8010de8 <__d2b+0xac>)
 8010d58:	f240 310f 	movw	r1, #783	@ 0x30f
 8010d5c:	f001 fb50 	bl	8012400 <__assert_func>
 8010d60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010d64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d68:	b10d      	cbz	r5, 8010d6e <__d2b+0x32>
 8010d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010d6e:	9301      	str	r3, [sp, #4]
 8010d70:	f1b8 0300 	subs.w	r3, r8, #0
 8010d74:	d023      	beq.n	8010dbe <__d2b+0x82>
 8010d76:	4668      	mov	r0, sp
 8010d78:	9300      	str	r3, [sp, #0]
 8010d7a:	f7ff fd0c 	bl	8010796 <__lo0bits>
 8010d7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010d82:	b1d0      	cbz	r0, 8010dba <__d2b+0x7e>
 8010d84:	f1c0 0320 	rsb	r3, r0, #32
 8010d88:	fa02 f303 	lsl.w	r3, r2, r3
 8010d8c:	430b      	orrs	r3, r1
 8010d8e:	40c2      	lsrs	r2, r0
 8010d90:	6163      	str	r3, [r4, #20]
 8010d92:	9201      	str	r2, [sp, #4]
 8010d94:	9b01      	ldr	r3, [sp, #4]
 8010d96:	61a3      	str	r3, [r4, #24]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	bf0c      	ite	eq
 8010d9c:	2201      	moveq	r2, #1
 8010d9e:	2202      	movne	r2, #2
 8010da0:	6122      	str	r2, [r4, #16]
 8010da2:	b1a5      	cbz	r5, 8010dce <__d2b+0x92>
 8010da4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010da8:	4405      	add	r5, r0
 8010daa:	603d      	str	r5, [r7, #0]
 8010dac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010db0:	6030      	str	r0, [r6, #0]
 8010db2:	4620      	mov	r0, r4
 8010db4:	b003      	add	sp, #12
 8010db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dba:	6161      	str	r1, [r4, #20]
 8010dbc:	e7ea      	b.n	8010d94 <__d2b+0x58>
 8010dbe:	a801      	add	r0, sp, #4
 8010dc0:	f7ff fce9 	bl	8010796 <__lo0bits>
 8010dc4:	9b01      	ldr	r3, [sp, #4]
 8010dc6:	6163      	str	r3, [r4, #20]
 8010dc8:	3020      	adds	r0, #32
 8010dca:	2201      	movs	r2, #1
 8010dcc:	e7e8      	b.n	8010da0 <__d2b+0x64>
 8010dce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010dd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010dd6:	6038      	str	r0, [r7, #0]
 8010dd8:	6918      	ldr	r0, [r3, #16]
 8010dda:	f7ff fcbd 	bl	8010758 <__hi0bits>
 8010dde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010de2:	e7e5      	b.n	8010db0 <__d2b+0x74>
 8010de4:	08013e4d 	.word	0x08013e4d
 8010de8:	08013e5e 	.word	0x08013e5e

08010dec <__ratio>:
 8010dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df0:	b085      	sub	sp, #20
 8010df2:	e9cd 1000 	strd	r1, r0, [sp]
 8010df6:	a902      	add	r1, sp, #8
 8010df8:	f7ff ff56 	bl	8010ca8 <__b2d>
 8010dfc:	9800      	ldr	r0, [sp, #0]
 8010dfe:	a903      	add	r1, sp, #12
 8010e00:	ec55 4b10 	vmov	r4, r5, d0
 8010e04:	f7ff ff50 	bl	8010ca8 <__b2d>
 8010e08:	9b01      	ldr	r3, [sp, #4]
 8010e0a:	6919      	ldr	r1, [r3, #16]
 8010e0c:	9b00      	ldr	r3, [sp, #0]
 8010e0e:	691b      	ldr	r3, [r3, #16]
 8010e10:	1ac9      	subs	r1, r1, r3
 8010e12:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010e16:	1a9b      	subs	r3, r3, r2
 8010e18:	ec5b ab10 	vmov	sl, fp, d0
 8010e1c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	bfce      	itee	gt
 8010e24:	462a      	movgt	r2, r5
 8010e26:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010e2a:	465a      	movle	r2, fp
 8010e2c:	462f      	mov	r7, r5
 8010e2e:	46d9      	mov	r9, fp
 8010e30:	bfcc      	ite	gt
 8010e32:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010e36:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010e3a:	464b      	mov	r3, r9
 8010e3c:	4652      	mov	r2, sl
 8010e3e:	4620      	mov	r0, r4
 8010e40:	4639      	mov	r1, r7
 8010e42:	f7ef fd23 	bl	800088c <__aeabi_ddiv>
 8010e46:	ec41 0b10 	vmov	d0, r0, r1
 8010e4a:	b005      	add	sp, #20
 8010e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e50 <__copybits>:
 8010e50:	3901      	subs	r1, #1
 8010e52:	b570      	push	{r4, r5, r6, lr}
 8010e54:	1149      	asrs	r1, r1, #5
 8010e56:	6914      	ldr	r4, [r2, #16]
 8010e58:	3101      	adds	r1, #1
 8010e5a:	f102 0314 	add.w	r3, r2, #20
 8010e5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010e62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010e66:	1f05      	subs	r5, r0, #4
 8010e68:	42a3      	cmp	r3, r4
 8010e6a:	d30c      	bcc.n	8010e86 <__copybits+0x36>
 8010e6c:	1aa3      	subs	r3, r4, r2
 8010e6e:	3b11      	subs	r3, #17
 8010e70:	f023 0303 	bic.w	r3, r3, #3
 8010e74:	3211      	adds	r2, #17
 8010e76:	42a2      	cmp	r2, r4
 8010e78:	bf88      	it	hi
 8010e7a:	2300      	movhi	r3, #0
 8010e7c:	4418      	add	r0, r3
 8010e7e:	2300      	movs	r3, #0
 8010e80:	4288      	cmp	r0, r1
 8010e82:	d305      	bcc.n	8010e90 <__copybits+0x40>
 8010e84:	bd70      	pop	{r4, r5, r6, pc}
 8010e86:	f853 6b04 	ldr.w	r6, [r3], #4
 8010e8a:	f845 6f04 	str.w	r6, [r5, #4]!
 8010e8e:	e7eb      	b.n	8010e68 <__copybits+0x18>
 8010e90:	f840 3b04 	str.w	r3, [r0], #4
 8010e94:	e7f4      	b.n	8010e80 <__copybits+0x30>

08010e96 <__any_on>:
 8010e96:	f100 0214 	add.w	r2, r0, #20
 8010e9a:	6900      	ldr	r0, [r0, #16]
 8010e9c:	114b      	asrs	r3, r1, #5
 8010e9e:	4298      	cmp	r0, r3
 8010ea0:	b510      	push	{r4, lr}
 8010ea2:	db11      	blt.n	8010ec8 <__any_on+0x32>
 8010ea4:	dd0a      	ble.n	8010ebc <__any_on+0x26>
 8010ea6:	f011 011f 	ands.w	r1, r1, #31
 8010eaa:	d007      	beq.n	8010ebc <__any_on+0x26>
 8010eac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010eb0:	fa24 f001 	lsr.w	r0, r4, r1
 8010eb4:	fa00 f101 	lsl.w	r1, r0, r1
 8010eb8:	428c      	cmp	r4, r1
 8010eba:	d10b      	bne.n	8010ed4 <__any_on+0x3e>
 8010ebc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d803      	bhi.n	8010ecc <__any_on+0x36>
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	bd10      	pop	{r4, pc}
 8010ec8:	4603      	mov	r3, r0
 8010eca:	e7f7      	b.n	8010ebc <__any_on+0x26>
 8010ecc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010ed0:	2900      	cmp	r1, #0
 8010ed2:	d0f5      	beq.n	8010ec0 <__any_on+0x2a>
 8010ed4:	2001      	movs	r0, #1
 8010ed6:	e7f6      	b.n	8010ec6 <__any_on+0x30>

08010ed8 <sulp>:
 8010ed8:	b570      	push	{r4, r5, r6, lr}
 8010eda:	4604      	mov	r4, r0
 8010edc:	460d      	mov	r5, r1
 8010ede:	ec45 4b10 	vmov	d0, r4, r5
 8010ee2:	4616      	mov	r6, r2
 8010ee4:	f7ff feba 	bl	8010c5c <__ulp>
 8010ee8:	ec51 0b10 	vmov	r0, r1, d0
 8010eec:	b17e      	cbz	r6, 8010f0e <sulp+0x36>
 8010eee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010ef2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	dd09      	ble.n	8010f0e <sulp+0x36>
 8010efa:	051b      	lsls	r3, r3, #20
 8010efc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010f00:	2400      	movs	r4, #0
 8010f02:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010f06:	4622      	mov	r2, r4
 8010f08:	462b      	mov	r3, r5
 8010f0a:	f7ef fb95 	bl	8000638 <__aeabi_dmul>
 8010f0e:	ec41 0b10 	vmov	d0, r0, r1
 8010f12:	bd70      	pop	{r4, r5, r6, pc}
 8010f14:	0000      	movs	r0, r0
	...

08010f18 <_strtod_l>:
 8010f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f1c:	b09f      	sub	sp, #124	@ 0x7c
 8010f1e:	460c      	mov	r4, r1
 8010f20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010f22:	2200      	movs	r2, #0
 8010f24:	921a      	str	r2, [sp, #104]	@ 0x68
 8010f26:	9005      	str	r0, [sp, #20]
 8010f28:	f04f 0a00 	mov.w	sl, #0
 8010f2c:	f04f 0b00 	mov.w	fp, #0
 8010f30:	460a      	mov	r2, r1
 8010f32:	9219      	str	r2, [sp, #100]	@ 0x64
 8010f34:	7811      	ldrb	r1, [r2, #0]
 8010f36:	292b      	cmp	r1, #43	@ 0x2b
 8010f38:	d04a      	beq.n	8010fd0 <_strtod_l+0xb8>
 8010f3a:	d838      	bhi.n	8010fae <_strtod_l+0x96>
 8010f3c:	290d      	cmp	r1, #13
 8010f3e:	d832      	bhi.n	8010fa6 <_strtod_l+0x8e>
 8010f40:	2908      	cmp	r1, #8
 8010f42:	d832      	bhi.n	8010faa <_strtod_l+0x92>
 8010f44:	2900      	cmp	r1, #0
 8010f46:	d03b      	beq.n	8010fc0 <_strtod_l+0xa8>
 8010f48:	2200      	movs	r2, #0
 8010f4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010f4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010f4e:	782a      	ldrb	r2, [r5, #0]
 8010f50:	2a30      	cmp	r2, #48	@ 0x30
 8010f52:	f040 80b3 	bne.w	80110bc <_strtod_l+0x1a4>
 8010f56:	786a      	ldrb	r2, [r5, #1]
 8010f58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010f5c:	2a58      	cmp	r2, #88	@ 0x58
 8010f5e:	d16e      	bne.n	801103e <_strtod_l+0x126>
 8010f60:	9302      	str	r3, [sp, #8]
 8010f62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f64:	9301      	str	r3, [sp, #4]
 8010f66:	ab1a      	add	r3, sp, #104	@ 0x68
 8010f68:	9300      	str	r3, [sp, #0]
 8010f6a:	4a8e      	ldr	r2, [pc, #568]	@ (80111a4 <_strtod_l+0x28c>)
 8010f6c:	9805      	ldr	r0, [sp, #20]
 8010f6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010f70:	a919      	add	r1, sp, #100	@ 0x64
 8010f72:	f001 fadf 	bl	8012534 <__gethex>
 8010f76:	f010 060f 	ands.w	r6, r0, #15
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	d005      	beq.n	8010f8a <_strtod_l+0x72>
 8010f7e:	2e06      	cmp	r6, #6
 8010f80:	d128      	bne.n	8010fd4 <_strtod_l+0xbc>
 8010f82:	3501      	adds	r5, #1
 8010f84:	2300      	movs	r3, #0
 8010f86:	9519      	str	r5, [sp, #100]	@ 0x64
 8010f88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	f040 858e 	bne.w	8011aae <_strtod_l+0xb96>
 8010f92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f94:	b1cb      	cbz	r3, 8010fca <_strtod_l+0xb2>
 8010f96:	4652      	mov	r2, sl
 8010f98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010f9c:	ec43 2b10 	vmov	d0, r2, r3
 8010fa0:	b01f      	add	sp, #124	@ 0x7c
 8010fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fa6:	2920      	cmp	r1, #32
 8010fa8:	d1ce      	bne.n	8010f48 <_strtod_l+0x30>
 8010faa:	3201      	adds	r2, #1
 8010fac:	e7c1      	b.n	8010f32 <_strtod_l+0x1a>
 8010fae:	292d      	cmp	r1, #45	@ 0x2d
 8010fb0:	d1ca      	bne.n	8010f48 <_strtod_l+0x30>
 8010fb2:	2101      	movs	r1, #1
 8010fb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010fb6:	1c51      	adds	r1, r2, #1
 8010fb8:	9119      	str	r1, [sp, #100]	@ 0x64
 8010fba:	7852      	ldrb	r2, [r2, #1]
 8010fbc:	2a00      	cmp	r2, #0
 8010fbe:	d1c5      	bne.n	8010f4c <_strtod_l+0x34>
 8010fc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010fc2:	9419      	str	r4, [sp, #100]	@ 0x64
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	f040 8570 	bne.w	8011aaa <_strtod_l+0xb92>
 8010fca:	4652      	mov	r2, sl
 8010fcc:	465b      	mov	r3, fp
 8010fce:	e7e5      	b.n	8010f9c <_strtod_l+0x84>
 8010fd0:	2100      	movs	r1, #0
 8010fd2:	e7ef      	b.n	8010fb4 <_strtod_l+0x9c>
 8010fd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010fd6:	b13a      	cbz	r2, 8010fe8 <_strtod_l+0xd0>
 8010fd8:	2135      	movs	r1, #53	@ 0x35
 8010fda:	a81c      	add	r0, sp, #112	@ 0x70
 8010fdc:	f7ff ff38 	bl	8010e50 <__copybits>
 8010fe0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010fe2:	9805      	ldr	r0, [sp, #20]
 8010fe4:	f7ff fb06 	bl	80105f4 <_Bfree>
 8010fe8:	3e01      	subs	r6, #1
 8010fea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010fec:	2e04      	cmp	r6, #4
 8010fee:	d806      	bhi.n	8010ffe <_strtod_l+0xe6>
 8010ff0:	e8df f006 	tbb	[pc, r6]
 8010ff4:	201d0314 	.word	0x201d0314
 8010ff8:	14          	.byte	0x14
 8010ff9:	00          	.byte	0x00
 8010ffa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010ffe:	05e1      	lsls	r1, r4, #23
 8011000:	bf48      	it	mi
 8011002:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011006:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801100a:	0d1b      	lsrs	r3, r3, #20
 801100c:	051b      	lsls	r3, r3, #20
 801100e:	2b00      	cmp	r3, #0
 8011010:	d1bb      	bne.n	8010f8a <_strtod_l+0x72>
 8011012:	f7fe fbe3 	bl	800f7dc <__errno>
 8011016:	2322      	movs	r3, #34	@ 0x22
 8011018:	6003      	str	r3, [r0, #0]
 801101a:	e7b6      	b.n	8010f8a <_strtod_l+0x72>
 801101c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011020:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011024:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011028:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801102c:	e7e7      	b.n	8010ffe <_strtod_l+0xe6>
 801102e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80111ac <_strtod_l+0x294>
 8011032:	e7e4      	b.n	8010ffe <_strtod_l+0xe6>
 8011034:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011038:	f04f 3aff 	mov.w	sl, #4294967295
 801103c:	e7df      	b.n	8010ffe <_strtod_l+0xe6>
 801103e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011040:	1c5a      	adds	r2, r3, #1
 8011042:	9219      	str	r2, [sp, #100]	@ 0x64
 8011044:	785b      	ldrb	r3, [r3, #1]
 8011046:	2b30      	cmp	r3, #48	@ 0x30
 8011048:	d0f9      	beq.n	801103e <_strtod_l+0x126>
 801104a:	2b00      	cmp	r3, #0
 801104c:	d09d      	beq.n	8010f8a <_strtod_l+0x72>
 801104e:	2301      	movs	r3, #1
 8011050:	9309      	str	r3, [sp, #36]	@ 0x24
 8011052:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011054:	930c      	str	r3, [sp, #48]	@ 0x30
 8011056:	2300      	movs	r3, #0
 8011058:	9308      	str	r3, [sp, #32]
 801105a:	930a      	str	r3, [sp, #40]	@ 0x28
 801105c:	461f      	mov	r7, r3
 801105e:	220a      	movs	r2, #10
 8011060:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011062:	7805      	ldrb	r5, [r0, #0]
 8011064:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011068:	b2d9      	uxtb	r1, r3
 801106a:	2909      	cmp	r1, #9
 801106c:	d928      	bls.n	80110c0 <_strtod_l+0x1a8>
 801106e:	494e      	ldr	r1, [pc, #312]	@ (80111a8 <_strtod_l+0x290>)
 8011070:	2201      	movs	r2, #1
 8011072:	f001 f979 	bl	8012368 <strncmp>
 8011076:	2800      	cmp	r0, #0
 8011078:	d032      	beq.n	80110e0 <_strtod_l+0x1c8>
 801107a:	2000      	movs	r0, #0
 801107c:	462a      	mov	r2, r5
 801107e:	4681      	mov	r9, r0
 8011080:	463d      	mov	r5, r7
 8011082:	4603      	mov	r3, r0
 8011084:	2a65      	cmp	r2, #101	@ 0x65
 8011086:	d001      	beq.n	801108c <_strtod_l+0x174>
 8011088:	2a45      	cmp	r2, #69	@ 0x45
 801108a:	d114      	bne.n	80110b6 <_strtod_l+0x19e>
 801108c:	b91d      	cbnz	r5, 8011096 <_strtod_l+0x17e>
 801108e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011090:	4302      	orrs	r2, r0
 8011092:	d095      	beq.n	8010fc0 <_strtod_l+0xa8>
 8011094:	2500      	movs	r5, #0
 8011096:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011098:	1c62      	adds	r2, r4, #1
 801109a:	9219      	str	r2, [sp, #100]	@ 0x64
 801109c:	7862      	ldrb	r2, [r4, #1]
 801109e:	2a2b      	cmp	r2, #43	@ 0x2b
 80110a0:	d077      	beq.n	8011192 <_strtod_l+0x27a>
 80110a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80110a4:	d07b      	beq.n	801119e <_strtod_l+0x286>
 80110a6:	f04f 0c00 	mov.w	ip, #0
 80110aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80110ae:	2909      	cmp	r1, #9
 80110b0:	f240 8082 	bls.w	80111b8 <_strtod_l+0x2a0>
 80110b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80110b6:	f04f 0800 	mov.w	r8, #0
 80110ba:	e0a2      	b.n	8011202 <_strtod_l+0x2ea>
 80110bc:	2300      	movs	r3, #0
 80110be:	e7c7      	b.n	8011050 <_strtod_l+0x138>
 80110c0:	2f08      	cmp	r7, #8
 80110c2:	bfd5      	itete	le
 80110c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80110c6:	9908      	ldrgt	r1, [sp, #32]
 80110c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80110cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80110d0:	f100 0001 	add.w	r0, r0, #1
 80110d4:	bfd4      	ite	le
 80110d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80110d8:	9308      	strgt	r3, [sp, #32]
 80110da:	3701      	adds	r7, #1
 80110dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80110de:	e7bf      	b.n	8011060 <_strtod_l+0x148>
 80110e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110e2:	1c5a      	adds	r2, r3, #1
 80110e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80110e6:	785a      	ldrb	r2, [r3, #1]
 80110e8:	b37f      	cbz	r7, 801114a <_strtod_l+0x232>
 80110ea:	4681      	mov	r9, r0
 80110ec:	463d      	mov	r5, r7
 80110ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80110f2:	2b09      	cmp	r3, #9
 80110f4:	d912      	bls.n	801111c <_strtod_l+0x204>
 80110f6:	2301      	movs	r3, #1
 80110f8:	e7c4      	b.n	8011084 <_strtod_l+0x16c>
 80110fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110fc:	1c5a      	adds	r2, r3, #1
 80110fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8011100:	785a      	ldrb	r2, [r3, #1]
 8011102:	3001      	adds	r0, #1
 8011104:	2a30      	cmp	r2, #48	@ 0x30
 8011106:	d0f8      	beq.n	80110fa <_strtod_l+0x1e2>
 8011108:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801110c:	2b08      	cmp	r3, #8
 801110e:	f200 84d3 	bhi.w	8011ab8 <_strtod_l+0xba0>
 8011112:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011114:	930c      	str	r3, [sp, #48]	@ 0x30
 8011116:	4681      	mov	r9, r0
 8011118:	2000      	movs	r0, #0
 801111a:	4605      	mov	r5, r0
 801111c:	3a30      	subs	r2, #48	@ 0x30
 801111e:	f100 0301 	add.w	r3, r0, #1
 8011122:	d02a      	beq.n	801117a <_strtod_l+0x262>
 8011124:	4499      	add	r9, r3
 8011126:	eb00 0c05 	add.w	ip, r0, r5
 801112a:	462b      	mov	r3, r5
 801112c:	210a      	movs	r1, #10
 801112e:	4563      	cmp	r3, ip
 8011130:	d10d      	bne.n	801114e <_strtod_l+0x236>
 8011132:	1c69      	adds	r1, r5, #1
 8011134:	4401      	add	r1, r0
 8011136:	4428      	add	r0, r5
 8011138:	2808      	cmp	r0, #8
 801113a:	dc16      	bgt.n	801116a <_strtod_l+0x252>
 801113c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801113e:	230a      	movs	r3, #10
 8011140:	fb03 2300 	mla	r3, r3, r0, r2
 8011144:	930a      	str	r3, [sp, #40]	@ 0x28
 8011146:	2300      	movs	r3, #0
 8011148:	e018      	b.n	801117c <_strtod_l+0x264>
 801114a:	4638      	mov	r0, r7
 801114c:	e7da      	b.n	8011104 <_strtod_l+0x1ec>
 801114e:	2b08      	cmp	r3, #8
 8011150:	f103 0301 	add.w	r3, r3, #1
 8011154:	dc03      	bgt.n	801115e <_strtod_l+0x246>
 8011156:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011158:	434e      	muls	r6, r1
 801115a:	960a      	str	r6, [sp, #40]	@ 0x28
 801115c:	e7e7      	b.n	801112e <_strtod_l+0x216>
 801115e:	2b10      	cmp	r3, #16
 8011160:	bfde      	ittt	le
 8011162:	9e08      	ldrle	r6, [sp, #32]
 8011164:	434e      	mulle	r6, r1
 8011166:	9608      	strle	r6, [sp, #32]
 8011168:	e7e1      	b.n	801112e <_strtod_l+0x216>
 801116a:	280f      	cmp	r0, #15
 801116c:	dceb      	bgt.n	8011146 <_strtod_l+0x22e>
 801116e:	9808      	ldr	r0, [sp, #32]
 8011170:	230a      	movs	r3, #10
 8011172:	fb03 2300 	mla	r3, r3, r0, r2
 8011176:	9308      	str	r3, [sp, #32]
 8011178:	e7e5      	b.n	8011146 <_strtod_l+0x22e>
 801117a:	4629      	mov	r1, r5
 801117c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801117e:	1c50      	adds	r0, r2, #1
 8011180:	9019      	str	r0, [sp, #100]	@ 0x64
 8011182:	7852      	ldrb	r2, [r2, #1]
 8011184:	4618      	mov	r0, r3
 8011186:	460d      	mov	r5, r1
 8011188:	e7b1      	b.n	80110ee <_strtod_l+0x1d6>
 801118a:	f04f 0900 	mov.w	r9, #0
 801118e:	2301      	movs	r3, #1
 8011190:	e77d      	b.n	801108e <_strtod_l+0x176>
 8011192:	f04f 0c00 	mov.w	ip, #0
 8011196:	1ca2      	adds	r2, r4, #2
 8011198:	9219      	str	r2, [sp, #100]	@ 0x64
 801119a:	78a2      	ldrb	r2, [r4, #2]
 801119c:	e785      	b.n	80110aa <_strtod_l+0x192>
 801119e:	f04f 0c01 	mov.w	ip, #1
 80111a2:	e7f8      	b.n	8011196 <_strtod_l+0x27e>
 80111a4:	08013fd0 	.word	0x08013fd0
 80111a8:	08013fb8 	.word	0x08013fb8
 80111ac:	7ff00000 	.word	0x7ff00000
 80111b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80111b2:	1c51      	adds	r1, r2, #1
 80111b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80111b6:	7852      	ldrb	r2, [r2, #1]
 80111b8:	2a30      	cmp	r2, #48	@ 0x30
 80111ba:	d0f9      	beq.n	80111b0 <_strtod_l+0x298>
 80111bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80111c0:	2908      	cmp	r1, #8
 80111c2:	f63f af78 	bhi.w	80110b6 <_strtod_l+0x19e>
 80111c6:	3a30      	subs	r2, #48	@ 0x30
 80111c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80111ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80111cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80111ce:	f04f 080a 	mov.w	r8, #10
 80111d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80111d4:	1c56      	adds	r6, r2, #1
 80111d6:	9619      	str	r6, [sp, #100]	@ 0x64
 80111d8:	7852      	ldrb	r2, [r2, #1]
 80111da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80111de:	f1be 0f09 	cmp.w	lr, #9
 80111e2:	d939      	bls.n	8011258 <_strtod_l+0x340>
 80111e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80111e6:	1a76      	subs	r6, r6, r1
 80111e8:	2e08      	cmp	r6, #8
 80111ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80111ee:	dc03      	bgt.n	80111f8 <_strtod_l+0x2e0>
 80111f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80111f2:	4588      	cmp	r8, r1
 80111f4:	bfa8      	it	ge
 80111f6:	4688      	movge	r8, r1
 80111f8:	f1bc 0f00 	cmp.w	ip, #0
 80111fc:	d001      	beq.n	8011202 <_strtod_l+0x2ea>
 80111fe:	f1c8 0800 	rsb	r8, r8, #0
 8011202:	2d00      	cmp	r5, #0
 8011204:	d14e      	bne.n	80112a4 <_strtod_l+0x38c>
 8011206:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011208:	4308      	orrs	r0, r1
 801120a:	f47f aebe 	bne.w	8010f8a <_strtod_l+0x72>
 801120e:	2b00      	cmp	r3, #0
 8011210:	f47f aed6 	bne.w	8010fc0 <_strtod_l+0xa8>
 8011214:	2a69      	cmp	r2, #105	@ 0x69
 8011216:	d028      	beq.n	801126a <_strtod_l+0x352>
 8011218:	dc25      	bgt.n	8011266 <_strtod_l+0x34e>
 801121a:	2a49      	cmp	r2, #73	@ 0x49
 801121c:	d025      	beq.n	801126a <_strtod_l+0x352>
 801121e:	2a4e      	cmp	r2, #78	@ 0x4e
 8011220:	f47f aece 	bne.w	8010fc0 <_strtod_l+0xa8>
 8011224:	499b      	ldr	r1, [pc, #620]	@ (8011494 <_strtod_l+0x57c>)
 8011226:	a819      	add	r0, sp, #100	@ 0x64
 8011228:	f001 fba6 	bl	8012978 <__match>
 801122c:	2800      	cmp	r0, #0
 801122e:	f43f aec7 	beq.w	8010fc0 <_strtod_l+0xa8>
 8011232:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	2b28      	cmp	r3, #40	@ 0x28
 8011238:	d12e      	bne.n	8011298 <_strtod_l+0x380>
 801123a:	4997      	ldr	r1, [pc, #604]	@ (8011498 <_strtod_l+0x580>)
 801123c:	aa1c      	add	r2, sp, #112	@ 0x70
 801123e:	a819      	add	r0, sp, #100	@ 0x64
 8011240:	f001 fbae 	bl	80129a0 <__hexnan>
 8011244:	2805      	cmp	r0, #5
 8011246:	d127      	bne.n	8011298 <_strtod_l+0x380>
 8011248:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801124a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801124e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011252:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011256:	e698      	b.n	8010f8a <_strtod_l+0x72>
 8011258:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801125a:	fb08 2101 	mla	r1, r8, r1, r2
 801125e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011262:	920e      	str	r2, [sp, #56]	@ 0x38
 8011264:	e7b5      	b.n	80111d2 <_strtod_l+0x2ba>
 8011266:	2a6e      	cmp	r2, #110	@ 0x6e
 8011268:	e7da      	b.n	8011220 <_strtod_l+0x308>
 801126a:	498c      	ldr	r1, [pc, #560]	@ (801149c <_strtod_l+0x584>)
 801126c:	a819      	add	r0, sp, #100	@ 0x64
 801126e:	f001 fb83 	bl	8012978 <__match>
 8011272:	2800      	cmp	r0, #0
 8011274:	f43f aea4 	beq.w	8010fc0 <_strtod_l+0xa8>
 8011278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801127a:	4989      	ldr	r1, [pc, #548]	@ (80114a0 <_strtod_l+0x588>)
 801127c:	3b01      	subs	r3, #1
 801127e:	a819      	add	r0, sp, #100	@ 0x64
 8011280:	9319      	str	r3, [sp, #100]	@ 0x64
 8011282:	f001 fb79 	bl	8012978 <__match>
 8011286:	b910      	cbnz	r0, 801128e <_strtod_l+0x376>
 8011288:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801128a:	3301      	adds	r3, #1
 801128c:	9319      	str	r3, [sp, #100]	@ 0x64
 801128e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80114b0 <_strtod_l+0x598>
 8011292:	f04f 0a00 	mov.w	sl, #0
 8011296:	e678      	b.n	8010f8a <_strtod_l+0x72>
 8011298:	4882      	ldr	r0, [pc, #520]	@ (80114a4 <_strtod_l+0x58c>)
 801129a:	f001 f8a9 	bl	80123f0 <nan>
 801129e:	ec5b ab10 	vmov	sl, fp, d0
 80112a2:	e672      	b.n	8010f8a <_strtod_l+0x72>
 80112a4:	eba8 0309 	sub.w	r3, r8, r9
 80112a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80112aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80112ac:	2f00      	cmp	r7, #0
 80112ae:	bf08      	it	eq
 80112b0:	462f      	moveq	r7, r5
 80112b2:	2d10      	cmp	r5, #16
 80112b4:	462c      	mov	r4, r5
 80112b6:	bfa8      	it	ge
 80112b8:	2410      	movge	r4, #16
 80112ba:	f7ef f943 	bl	8000544 <__aeabi_ui2d>
 80112be:	2d09      	cmp	r5, #9
 80112c0:	4682      	mov	sl, r0
 80112c2:	468b      	mov	fp, r1
 80112c4:	dc13      	bgt.n	80112ee <_strtod_l+0x3d6>
 80112c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	f43f ae5e 	beq.w	8010f8a <_strtod_l+0x72>
 80112ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112d0:	dd78      	ble.n	80113c4 <_strtod_l+0x4ac>
 80112d2:	2b16      	cmp	r3, #22
 80112d4:	dc5f      	bgt.n	8011396 <_strtod_l+0x47e>
 80112d6:	4974      	ldr	r1, [pc, #464]	@ (80114a8 <_strtod_l+0x590>)
 80112d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80112dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112e0:	4652      	mov	r2, sl
 80112e2:	465b      	mov	r3, fp
 80112e4:	f7ef f9a8 	bl	8000638 <__aeabi_dmul>
 80112e8:	4682      	mov	sl, r0
 80112ea:	468b      	mov	fp, r1
 80112ec:	e64d      	b.n	8010f8a <_strtod_l+0x72>
 80112ee:	4b6e      	ldr	r3, [pc, #440]	@ (80114a8 <_strtod_l+0x590>)
 80112f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80112f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80112f8:	f7ef f99e 	bl	8000638 <__aeabi_dmul>
 80112fc:	4682      	mov	sl, r0
 80112fe:	9808      	ldr	r0, [sp, #32]
 8011300:	468b      	mov	fp, r1
 8011302:	f7ef f91f 	bl	8000544 <__aeabi_ui2d>
 8011306:	4602      	mov	r2, r0
 8011308:	460b      	mov	r3, r1
 801130a:	4650      	mov	r0, sl
 801130c:	4659      	mov	r1, fp
 801130e:	f7ee ffdd 	bl	80002cc <__adddf3>
 8011312:	2d0f      	cmp	r5, #15
 8011314:	4682      	mov	sl, r0
 8011316:	468b      	mov	fp, r1
 8011318:	ddd5      	ble.n	80112c6 <_strtod_l+0x3ae>
 801131a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801131c:	1b2c      	subs	r4, r5, r4
 801131e:	441c      	add	r4, r3
 8011320:	2c00      	cmp	r4, #0
 8011322:	f340 8096 	ble.w	8011452 <_strtod_l+0x53a>
 8011326:	f014 030f 	ands.w	r3, r4, #15
 801132a:	d00a      	beq.n	8011342 <_strtod_l+0x42a>
 801132c:	495e      	ldr	r1, [pc, #376]	@ (80114a8 <_strtod_l+0x590>)
 801132e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011332:	4652      	mov	r2, sl
 8011334:	465b      	mov	r3, fp
 8011336:	e9d1 0100 	ldrd	r0, r1, [r1]
 801133a:	f7ef f97d 	bl	8000638 <__aeabi_dmul>
 801133e:	4682      	mov	sl, r0
 8011340:	468b      	mov	fp, r1
 8011342:	f034 040f 	bics.w	r4, r4, #15
 8011346:	d073      	beq.n	8011430 <_strtod_l+0x518>
 8011348:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801134c:	dd48      	ble.n	80113e0 <_strtod_l+0x4c8>
 801134e:	2400      	movs	r4, #0
 8011350:	46a0      	mov	r8, r4
 8011352:	940a      	str	r4, [sp, #40]	@ 0x28
 8011354:	46a1      	mov	r9, r4
 8011356:	9a05      	ldr	r2, [sp, #20]
 8011358:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80114b0 <_strtod_l+0x598>
 801135c:	2322      	movs	r3, #34	@ 0x22
 801135e:	6013      	str	r3, [r2, #0]
 8011360:	f04f 0a00 	mov.w	sl, #0
 8011364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011366:	2b00      	cmp	r3, #0
 8011368:	f43f ae0f 	beq.w	8010f8a <_strtod_l+0x72>
 801136c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801136e:	9805      	ldr	r0, [sp, #20]
 8011370:	f7ff f940 	bl	80105f4 <_Bfree>
 8011374:	9805      	ldr	r0, [sp, #20]
 8011376:	4649      	mov	r1, r9
 8011378:	f7ff f93c 	bl	80105f4 <_Bfree>
 801137c:	9805      	ldr	r0, [sp, #20]
 801137e:	4641      	mov	r1, r8
 8011380:	f7ff f938 	bl	80105f4 <_Bfree>
 8011384:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011386:	9805      	ldr	r0, [sp, #20]
 8011388:	f7ff f934 	bl	80105f4 <_Bfree>
 801138c:	9805      	ldr	r0, [sp, #20]
 801138e:	4621      	mov	r1, r4
 8011390:	f7ff f930 	bl	80105f4 <_Bfree>
 8011394:	e5f9      	b.n	8010f8a <_strtod_l+0x72>
 8011396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011398:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801139c:	4293      	cmp	r3, r2
 801139e:	dbbc      	blt.n	801131a <_strtod_l+0x402>
 80113a0:	4c41      	ldr	r4, [pc, #260]	@ (80114a8 <_strtod_l+0x590>)
 80113a2:	f1c5 050f 	rsb	r5, r5, #15
 80113a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80113aa:	4652      	mov	r2, sl
 80113ac:	465b      	mov	r3, fp
 80113ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113b2:	f7ef f941 	bl	8000638 <__aeabi_dmul>
 80113b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113b8:	1b5d      	subs	r5, r3, r5
 80113ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80113be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80113c2:	e78f      	b.n	80112e4 <_strtod_l+0x3cc>
 80113c4:	3316      	adds	r3, #22
 80113c6:	dba8      	blt.n	801131a <_strtod_l+0x402>
 80113c8:	4b37      	ldr	r3, [pc, #220]	@ (80114a8 <_strtod_l+0x590>)
 80113ca:	eba9 0808 	sub.w	r8, r9, r8
 80113ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80113d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80113d6:	4650      	mov	r0, sl
 80113d8:	4659      	mov	r1, fp
 80113da:	f7ef fa57 	bl	800088c <__aeabi_ddiv>
 80113de:	e783      	b.n	80112e8 <_strtod_l+0x3d0>
 80113e0:	4b32      	ldr	r3, [pc, #200]	@ (80114ac <_strtod_l+0x594>)
 80113e2:	9308      	str	r3, [sp, #32]
 80113e4:	2300      	movs	r3, #0
 80113e6:	1124      	asrs	r4, r4, #4
 80113e8:	4650      	mov	r0, sl
 80113ea:	4659      	mov	r1, fp
 80113ec:	461e      	mov	r6, r3
 80113ee:	2c01      	cmp	r4, #1
 80113f0:	dc21      	bgt.n	8011436 <_strtod_l+0x51e>
 80113f2:	b10b      	cbz	r3, 80113f8 <_strtod_l+0x4e0>
 80113f4:	4682      	mov	sl, r0
 80113f6:	468b      	mov	fp, r1
 80113f8:	492c      	ldr	r1, [pc, #176]	@ (80114ac <_strtod_l+0x594>)
 80113fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80113fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011402:	4652      	mov	r2, sl
 8011404:	465b      	mov	r3, fp
 8011406:	e9d1 0100 	ldrd	r0, r1, [r1]
 801140a:	f7ef f915 	bl	8000638 <__aeabi_dmul>
 801140e:	4b28      	ldr	r3, [pc, #160]	@ (80114b0 <_strtod_l+0x598>)
 8011410:	460a      	mov	r2, r1
 8011412:	400b      	ands	r3, r1
 8011414:	4927      	ldr	r1, [pc, #156]	@ (80114b4 <_strtod_l+0x59c>)
 8011416:	428b      	cmp	r3, r1
 8011418:	4682      	mov	sl, r0
 801141a:	d898      	bhi.n	801134e <_strtod_l+0x436>
 801141c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011420:	428b      	cmp	r3, r1
 8011422:	bf86      	itte	hi
 8011424:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80114b8 <_strtod_l+0x5a0>
 8011428:	f04f 3aff 	movhi.w	sl, #4294967295
 801142c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011430:	2300      	movs	r3, #0
 8011432:	9308      	str	r3, [sp, #32]
 8011434:	e07a      	b.n	801152c <_strtod_l+0x614>
 8011436:	07e2      	lsls	r2, r4, #31
 8011438:	d505      	bpl.n	8011446 <_strtod_l+0x52e>
 801143a:	9b08      	ldr	r3, [sp, #32]
 801143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011440:	f7ef f8fa 	bl	8000638 <__aeabi_dmul>
 8011444:	2301      	movs	r3, #1
 8011446:	9a08      	ldr	r2, [sp, #32]
 8011448:	3208      	adds	r2, #8
 801144a:	3601      	adds	r6, #1
 801144c:	1064      	asrs	r4, r4, #1
 801144e:	9208      	str	r2, [sp, #32]
 8011450:	e7cd      	b.n	80113ee <_strtod_l+0x4d6>
 8011452:	d0ed      	beq.n	8011430 <_strtod_l+0x518>
 8011454:	4264      	negs	r4, r4
 8011456:	f014 020f 	ands.w	r2, r4, #15
 801145a:	d00a      	beq.n	8011472 <_strtod_l+0x55a>
 801145c:	4b12      	ldr	r3, [pc, #72]	@ (80114a8 <_strtod_l+0x590>)
 801145e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011462:	4650      	mov	r0, sl
 8011464:	4659      	mov	r1, fp
 8011466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146a:	f7ef fa0f 	bl	800088c <__aeabi_ddiv>
 801146e:	4682      	mov	sl, r0
 8011470:	468b      	mov	fp, r1
 8011472:	1124      	asrs	r4, r4, #4
 8011474:	d0dc      	beq.n	8011430 <_strtod_l+0x518>
 8011476:	2c1f      	cmp	r4, #31
 8011478:	dd20      	ble.n	80114bc <_strtod_l+0x5a4>
 801147a:	2400      	movs	r4, #0
 801147c:	46a0      	mov	r8, r4
 801147e:	940a      	str	r4, [sp, #40]	@ 0x28
 8011480:	46a1      	mov	r9, r4
 8011482:	9a05      	ldr	r2, [sp, #20]
 8011484:	2322      	movs	r3, #34	@ 0x22
 8011486:	f04f 0a00 	mov.w	sl, #0
 801148a:	f04f 0b00 	mov.w	fp, #0
 801148e:	6013      	str	r3, [r2, #0]
 8011490:	e768      	b.n	8011364 <_strtod_l+0x44c>
 8011492:	bf00      	nop
 8011494:	08013da5 	.word	0x08013da5
 8011498:	08013fbc 	.word	0x08013fbc
 801149c:	08013d9d 	.word	0x08013d9d
 80114a0:	08013dd4 	.word	0x08013dd4
 80114a4:	08014165 	.word	0x08014165
 80114a8:	08013ef0 	.word	0x08013ef0
 80114ac:	08013ec8 	.word	0x08013ec8
 80114b0:	7ff00000 	.word	0x7ff00000
 80114b4:	7ca00000 	.word	0x7ca00000
 80114b8:	7fefffff 	.word	0x7fefffff
 80114bc:	f014 0310 	ands.w	r3, r4, #16
 80114c0:	bf18      	it	ne
 80114c2:	236a      	movne	r3, #106	@ 0x6a
 80114c4:	4ea9      	ldr	r6, [pc, #676]	@ (801176c <_strtod_l+0x854>)
 80114c6:	9308      	str	r3, [sp, #32]
 80114c8:	4650      	mov	r0, sl
 80114ca:	4659      	mov	r1, fp
 80114cc:	2300      	movs	r3, #0
 80114ce:	07e2      	lsls	r2, r4, #31
 80114d0:	d504      	bpl.n	80114dc <_strtod_l+0x5c4>
 80114d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80114d6:	f7ef f8af 	bl	8000638 <__aeabi_dmul>
 80114da:	2301      	movs	r3, #1
 80114dc:	1064      	asrs	r4, r4, #1
 80114de:	f106 0608 	add.w	r6, r6, #8
 80114e2:	d1f4      	bne.n	80114ce <_strtod_l+0x5b6>
 80114e4:	b10b      	cbz	r3, 80114ea <_strtod_l+0x5d2>
 80114e6:	4682      	mov	sl, r0
 80114e8:	468b      	mov	fp, r1
 80114ea:	9b08      	ldr	r3, [sp, #32]
 80114ec:	b1b3      	cbz	r3, 801151c <_strtod_l+0x604>
 80114ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80114f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	4659      	mov	r1, fp
 80114fa:	dd0f      	ble.n	801151c <_strtod_l+0x604>
 80114fc:	2b1f      	cmp	r3, #31
 80114fe:	dd55      	ble.n	80115ac <_strtod_l+0x694>
 8011500:	2b34      	cmp	r3, #52	@ 0x34
 8011502:	bfde      	ittt	le
 8011504:	f04f 33ff 	movle.w	r3, #4294967295
 8011508:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801150c:	4093      	lslle	r3, r2
 801150e:	f04f 0a00 	mov.w	sl, #0
 8011512:	bfcc      	ite	gt
 8011514:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011518:	ea03 0b01 	andle.w	fp, r3, r1
 801151c:	2200      	movs	r2, #0
 801151e:	2300      	movs	r3, #0
 8011520:	4650      	mov	r0, sl
 8011522:	4659      	mov	r1, fp
 8011524:	f7ef faf0 	bl	8000b08 <__aeabi_dcmpeq>
 8011528:	2800      	cmp	r0, #0
 801152a:	d1a6      	bne.n	801147a <_strtod_l+0x562>
 801152c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801152e:	9300      	str	r3, [sp, #0]
 8011530:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011532:	9805      	ldr	r0, [sp, #20]
 8011534:	462b      	mov	r3, r5
 8011536:	463a      	mov	r2, r7
 8011538:	f7ff f8c4 	bl	80106c4 <__s2b>
 801153c:	900a      	str	r0, [sp, #40]	@ 0x28
 801153e:	2800      	cmp	r0, #0
 8011540:	f43f af05 	beq.w	801134e <_strtod_l+0x436>
 8011544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011546:	2a00      	cmp	r2, #0
 8011548:	eba9 0308 	sub.w	r3, r9, r8
 801154c:	bfa8      	it	ge
 801154e:	2300      	movge	r3, #0
 8011550:	9312      	str	r3, [sp, #72]	@ 0x48
 8011552:	2400      	movs	r4, #0
 8011554:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011558:	9316      	str	r3, [sp, #88]	@ 0x58
 801155a:	46a0      	mov	r8, r4
 801155c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801155e:	9805      	ldr	r0, [sp, #20]
 8011560:	6859      	ldr	r1, [r3, #4]
 8011562:	f7ff f807 	bl	8010574 <_Balloc>
 8011566:	4681      	mov	r9, r0
 8011568:	2800      	cmp	r0, #0
 801156a:	f43f aef4 	beq.w	8011356 <_strtod_l+0x43e>
 801156e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011570:	691a      	ldr	r2, [r3, #16]
 8011572:	3202      	adds	r2, #2
 8011574:	f103 010c 	add.w	r1, r3, #12
 8011578:	0092      	lsls	r2, r2, #2
 801157a:	300c      	adds	r0, #12
 801157c:	f000 ff28 	bl	80123d0 <memcpy>
 8011580:	ec4b ab10 	vmov	d0, sl, fp
 8011584:	9805      	ldr	r0, [sp, #20]
 8011586:	aa1c      	add	r2, sp, #112	@ 0x70
 8011588:	a91b      	add	r1, sp, #108	@ 0x6c
 801158a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801158e:	f7ff fbd5 	bl	8010d3c <__d2b>
 8011592:	901a      	str	r0, [sp, #104]	@ 0x68
 8011594:	2800      	cmp	r0, #0
 8011596:	f43f aede 	beq.w	8011356 <_strtod_l+0x43e>
 801159a:	9805      	ldr	r0, [sp, #20]
 801159c:	2101      	movs	r1, #1
 801159e:	f7ff f927 	bl	80107f0 <__i2b>
 80115a2:	4680      	mov	r8, r0
 80115a4:	b948      	cbnz	r0, 80115ba <_strtod_l+0x6a2>
 80115a6:	f04f 0800 	mov.w	r8, #0
 80115aa:	e6d4      	b.n	8011356 <_strtod_l+0x43e>
 80115ac:	f04f 32ff 	mov.w	r2, #4294967295
 80115b0:	fa02 f303 	lsl.w	r3, r2, r3
 80115b4:	ea03 0a0a 	and.w	sl, r3, sl
 80115b8:	e7b0      	b.n	801151c <_strtod_l+0x604>
 80115ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80115bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80115be:	2d00      	cmp	r5, #0
 80115c0:	bfab      	itete	ge
 80115c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80115c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80115c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80115c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80115ca:	bfac      	ite	ge
 80115cc:	18ef      	addge	r7, r5, r3
 80115ce:	1b5e      	sublt	r6, r3, r5
 80115d0:	9b08      	ldr	r3, [sp, #32]
 80115d2:	1aed      	subs	r5, r5, r3
 80115d4:	4415      	add	r5, r2
 80115d6:	4b66      	ldr	r3, [pc, #408]	@ (8011770 <_strtod_l+0x858>)
 80115d8:	3d01      	subs	r5, #1
 80115da:	429d      	cmp	r5, r3
 80115dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80115e0:	da50      	bge.n	8011684 <_strtod_l+0x76c>
 80115e2:	1b5b      	subs	r3, r3, r5
 80115e4:	2b1f      	cmp	r3, #31
 80115e6:	eba2 0203 	sub.w	r2, r2, r3
 80115ea:	f04f 0101 	mov.w	r1, #1
 80115ee:	dc3d      	bgt.n	801166c <_strtod_l+0x754>
 80115f0:	fa01 f303 	lsl.w	r3, r1, r3
 80115f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80115f6:	2300      	movs	r3, #0
 80115f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80115fa:	18bd      	adds	r5, r7, r2
 80115fc:	9b08      	ldr	r3, [sp, #32]
 80115fe:	42af      	cmp	r7, r5
 8011600:	4416      	add	r6, r2
 8011602:	441e      	add	r6, r3
 8011604:	463b      	mov	r3, r7
 8011606:	bfa8      	it	ge
 8011608:	462b      	movge	r3, r5
 801160a:	42b3      	cmp	r3, r6
 801160c:	bfa8      	it	ge
 801160e:	4633      	movge	r3, r6
 8011610:	2b00      	cmp	r3, #0
 8011612:	bfc2      	ittt	gt
 8011614:	1aed      	subgt	r5, r5, r3
 8011616:	1af6      	subgt	r6, r6, r3
 8011618:	1aff      	subgt	r7, r7, r3
 801161a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801161c:	2b00      	cmp	r3, #0
 801161e:	dd16      	ble.n	801164e <_strtod_l+0x736>
 8011620:	4641      	mov	r1, r8
 8011622:	9805      	ldr	r0, [sp, #20]
 8011624:	461a      	mov	r2, r3
 8011626:	f7ff f9a3 	bl	8010970 <__pow5mult>
 801162a:	4680      	mov	r8, r0
 801162c:	2800      	cmp	r0, #0
 801162e:	d0ba      	beq.n	80115a6 <_strtod_l+0x68e>
 8011630:	4601      	mov	r1, r0
 8011632:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011634:	9805      	ldr	r0, [sp, #20]
 8011636:	f7ff f8f1 	bl	801081c <__multiply>
 801163a:	900e      	str	r0, [sp, #56]	@ 0x38
 801163c:	2800      	cmp	r0, #0
 801163e:	f43f ae8a 	beq.w	8011356 <_strtod_l+0x43e>
 8011642:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011644:	9805      	ldr	r0, [sp, #20]
 8011646:	f7fe ffd5 	bl	80105f4 <_Bfree>
 801164a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801164c:	931a      	str	r3, [sp, #104]	@ 0x68
 801164e:	2d00      	cmp	r5, #0
 8011650:	dc1d      	bgt.n	801168e <_strtod_l+0x776>
 8011652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011654:	2b00      	cmp	r3, #0
 8011656:	dd23      	ble.n	80116a0 <_strtod_l+0x788>
 8011658:	4649      	mov	r1, r9
 801165a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801165c:	9805      	ldr	r0, [sp, #20]
 801165e:	f7ff f987 	bl	8010970 <__pow5mult>
 8011662:	4681      	mov	r9, r0
 8011664:	b9e0      	cbnz	r0, 80116a0 <_strtod_l+0x788>
 8011666:	f04f 0900 	mov.w	r9, #0
 801166a:	e674      	b.n	8011356 <_strtod_l+0x43e>
 801166c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011670:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011674:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011678:	35e2      	adds	r5, #226	@ 0xe2
 801167a:	fa01 f305 	lsl.w	r3, r1, r5
 801167e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011680:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011682:	e7ba      	b.n	80115fa <_strtod_l+0x6e2>
 8011684:	2300      	movs	r3, #0
 8011686:	9310      	str	r3, [sp, #64]	@ 0x40
 8011688:	2301      	movs	r3, #1
 801168a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801168c:	e7b5      	b.n	80115fa <_strtod_l+0x6e2>
 801168e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011690:	9805      	ldr	r0, [sp, #20]
 8011692:	462a      	mov	r2, r5
 8011694:	f7ff f9c6 	bl	8010a24 <__lshift>
 8011698:	901a      	str	r0, [sp, #104]	@ 0x68
 801169a:	2800      	cmp	r0, #0
 801169c:	d1d9      	bne.n	8011652 <_strtod_l+0x73a>
 801169e:	e65a      	b.n	8011356 <_strtod_l+0x43e>
 80116a0:	2e00      	cmp	r6, #0
 80116a2:	dd07      	ble.n	80116b4 <_strtod_l+0x79c>
 80116a4:	4649      	mov	r1, r9
 80116a6:	9805      	ldr	r0, [sp, #20]
 80116a8:	4632      	mov	r2, r6
 80116aa:	f7ff f9bb 	bl	8010a24 <__lshift>
 80116ae:	4681      	mov	r9, r0
 80116b0:	2800      	cmp	r0, #0
 80116b2:	d0d8      	beq.n	8011666 <_strtod_l+0x74e>
 80116b4:	2f00      	cmp	r7, #0
 80116b6:	dd08      	ble.n	80116ca <_strtod_l+0x7b2>
 80116b8:	4641      	mov	r1, r8
 80116ba:	9805      	ldr	r0, [sp, #20]
 80116bc:	463a      	mov	r2, r7
 80116be:	f7ff f9b1 	bl	8010a24 <__lshift>
 80116c2:	4680      	mov	r8, r0
 80116c4:	2800      	cmp	r0, #0
 80116c6:	f43f ae46 	beq.w	8011356 <_strtod_l+0x43e>
 80116ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80116cc:	9805      	ldr	r0, [sp, #20]
 80116ce:	464a      	mov	r2, r9
 80116d0:	f7ff fa30 	bl	8010b34 <__mdiff>
 80116d4:	4604      	mov	r4, r0
 80116d6:	2800      	cmp	r0, #0
 80116d8:	f43f ae3d 	beq.w	8011356 <_strtod_l+0x43e>
 80116dc:	68c3      	ldr	r3, [r0, #12]
 80116de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80116e0:	2300      	movs	r3, #0
 80116e2:	60c3      	str	r3, [r0, #12]
 80116e4:	4641      	mov	r1, r8
 80116e6:	f7ff fa09 	bl	8010afc <__mcmp>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	da46      	bge.n	801177c <_strtod_l+0x864>
 80116ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116f0:	ea53 030a 	orrs.w	r3, r3, sl
 80116f4:	d16c      	bne.n	80117d0 <_strtod_l+0x8b8>
 80116f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d168      	bne.n	80117d0 <_strtod_l+0x8b8>
 80116fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011702:	0d1b      	lsrs	r3, r3, #20
 8011704:	051b      	lsls	r3, r3, #20
 8011706:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801170a:	d961      	bls.n	80117d0 <_strtod_l+0x8b8>
 801170c:	6963      	ldr	r3, [r4, #20]
 801170e:	b913      	cbnz	r3, 8011716 <_strtod_l+0x7fe>
 8011710:	6923      	ldr	r3, [r4, #16]
 8011712:	2b01      	cmp	r3, #1
 8011714:	dd5c      	ble.n	80117d0 <_strtod_l+0x8b8>
 8011716:	4621      	mov	r1, r4
 8011718:	2201      	movs	r2, #1
 801171a:	9805      	ldr	r0, [sp, #20]
 801171c:	f7ff f982 	bl	8010a24 <__lshift>
 8011720:	4641      	mov	r1, r8
 8011722:	4604      	mov	r4, r0
 8011724:	f7ff f9ea 	bl	8010afc <__mcmp>
 8011728:	2800      	cmp	r0, #0
 801172a:	dd51      	ble.n	80117d0 <_strtod_l+0x8b8>
 801172c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011730:	9a08      	ldr	r2, [sp, #32]
 8011732:	0d1b      	lsrs	r3, r3, #20
 8011734:	051b      	lsls	r3, r3, #20
 8011736:	2a00      	cmp	r2, #0
 8011738:	d06b      	beq.n	8011812 <_strtod_l+0x8fa>
 801173a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801173e:	d868      	bhi.n	8011812 <_strtod_l+0x8fa>
 8011740:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011744:	f67f ae9d 	bls.w	8011482 <_strtod_l+0x56a>
 8011748:	4b0a      	ldr	r3, [pc, #40]	@ (8011774 <_strtod_l+0x85c>)
 801174a:	4650      	mov	r0, sl
 801174c:	4659      	mov	r1, fp
 801174e:	2200      	movs	r2, #0
 8011750:	f7ee ff72 	bl	8000638 <__aeabi_dmul>
 8011754:	4b08      	ldr	r3, [pc, #32]	@ (8011778 <_strtod_l+0x860>)
 8011756:	400b      	ands	r3, r1
 8011758:	4682      	mov	sl, r0
 801175a:	468b      	mov	fp, r1
 801175c:	2b00      	cmp	r3, #0
 801175e:	f47f ae05 	bne.w	801136c <_strtod_l+0x454>
 8011762:	9a05      	ldr	r2, [sp, #20]
 8011764:	2322      	movs	r3, #34	@ 0x22
 8011766:	6013      	str	r3, [r2, #0]
 8011768:	e600      	b.n	801136c <_strtod_l+0x454>
 801176a:	bf00      	nop
 801176c:	08013fe8 	.word	0x08013fe8
 8011770:	fffffc02 	.word	0xfffffc02
 8011774:	39500000 	.word	0x39500000
 8011778:	7ff00000 	.word	0x7ff00000
 801177c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011780:	d165      	bne.n	801184e <_strtod_l+0x936>
 8011782:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011784:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011788:	b35a      	cbz	r2, 80117e2 <_strtod_l+0x8ca>
 801178a:	4a9f      	ldr	r2, [pc, #636]	@ (8011a08 <_strtod_l+0xaf0>)
 801178c:	4293      	cmp	r3, r2
 801178e:	d12b      	bne.n	80117e8 <_strtod_l+0x8d0>
 8011790:	9b08      	ldr	r3, [sp, #32]
 8011792:	4651      	mov	r1, sl
 8011794:	b303      	cbz	r3, 80117d8 <_strtod_l+0x8c0>
 8011796:	4b9d      	ldr	r3, [pc, #628]	@ (8011a0c <_strtod_l+0xaf4>)
 8011798:	465a      	mov	r2, fp
 801179a:	4013      	ands	r3, r2
 801179c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80117a0:	f04f 32ff 	mov.w	r2, #4294967295
 80117a4:	d81b      	bhi.n	80117de <_strtod_l+0x8c6>
 80117a6:	0d1b      	lsrs	r3, r3, #20
 80117a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80117ac:	fa02 f303 	lsl.w	r3, r2, r3
 80117b0:	4299      	cmp	r1, r3
 80117b2:	d119      	bne.n	80117e8 <_strtod_l+0x8d0>
 80117b4:	4b96      	ldr	r3, [pc, #600]	@ (8011a10 <_strtod_l+0xaf8>)
 80117b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d102      	bne.n	80117c2 <_strtod_l+0x8aa>
 80117bc:	3101      	adds	r1, #1
 80117be:	f43f adca 	beq.w	8011356 <_strtod_l+0x43e>
 80117c2:	4b92      	ldr	r3, [pc, #584]	@ (8011a0c <_strtod_l+0xaf4>)
 80117c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117c6:	401a      	ands	r2, r3
 80117c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80117cc:	f04f 0a00 	mov.w	sl, #0
 80117d0:	9b08      	ldr	r3, [sp, #32]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d1b8      	bne.n	8011748 <_strtod_l+0x830>
 80117d6:	e5c9      	b.n	801136c <_strtod_l+0x454>
 80117d8:	f04f 33ff 	mov.w	r3, #4294967295
 80117dc:	e7e8      	b.n	80117b0 <_strtod_l+0x898>
 80117de:	4613      	mov	r3, r2
 80117e0:	e7e6      	b.n	80117b0 <_strtod_l+0x898>
 80117e2:	ea53 030a 	orrs.w	r3, r3, sl
 80117e6:	d0a1      	beq.n	801172c <_strtod_l+0x814>
 80117e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80117ea:	b1db      	cbz	r3, 8011824 <_strtod_l+0x90c>
 80117ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117ee:	4213      	tst	r3, r2
 80117f0:	d0ee      	beq.n	80117d0 <_strtod_l+0x8b8>
 80117f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117f4:	9a08      	ldr	r2, [sp, #32]
 80117f6:	4650      	mov	r0, sl
 80117f8:	4659      	mov	r1, fp
 80117fa:	b1bb      	cbz	r3, 801182c <_strtod_l+0x914>
 80117fc:	f7ff fb6c 	bl	8010ed8 <sulp>
 8011800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011804:	ec53 2b10 	vmov	r2, r3, d0
 8011808:	f7ee fd60 	bl	80002cc <__adddf3>
 801180c:	4682      	mov	sl, r0
 801180e:	468b      	mov	fp, r1
 8011810:	e7de      	b.n	80117d0 <_strtod_l+0x8b8>
 8011812:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011816:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801181a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801181e:	f04f 3aff 	mov.w	sl, #4294967295
 8011822:	e7d5      	b.n	80117d0 <_strtod_l+0x8b8>
 8011824:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011826:	ea13 0f0a 	tst.w	r3, sl
 801182a:	e7e1      	b.n	80117f0 <_strtod_l+0x8d8>
 801182c:	f7ff fb54 	bl	8010ed8 <sulp>
 8011830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011834:	ec53 2b10 	vmov	r2, r3, d0
 8011838:	f7ee fd46 	bl	80002c8 <__aeabi_dsub>
 801183c:	2200      	movs	r2, #0
 801183e:	2300      	movs	r3, #0
 8011840:	4682      	mov	sl, r0
 8011842:	468b      	mov	fp, r1
 8011844:	f7ef f960 	bl	8000b08 <__aeabi_dcmpeq>
 8011848:	2800      	cmp	r0, #0
 801184a:	d0c1      	beq.n	80117d0 <_strtod_l+0x8b8>
 801184c:	e619      	b.n	8011482 <_strtod_l+0x56a>
 801184e:	4641      	mov	r1, r8
 8011850:	4620      	mov	r0, r4
 8011852:	f7ff facb 	bl	8010dec <__ratio>
 8011856:	ec57 6b10 	vmov	r6, r7, d0
 801185a:	2200      	movs	r2, #0
 801185c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011860:	4630      	mov	r0, r6
 8011862:	4639      	mov	r1, r7
 8011864:	f7ef f964 	bl	8000b30 <__aeabi_dcmple>
 8011868:	2800      	cmp	r0, #0
 801186a:	d06f      	beq.n	801194c <_strtod_l+0xa34>
 801186c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801186e:	2b00      	cmp	r3, #0
 8011870:	d17a      	bne.n	8011968 <_strtod_l+0xa50>
 8011872:	f1ba 0f00 	cmp.w	sl, #0
 8011876:	d158      	bne.n	801192a <_strtod_l+0xa12>
 8011878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801187a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801187e:	2b00      	cmp	r3, #0
 8011880:	d15a      	bne.n	8011938 <_strtod_l+0xa20>
 8011882:	4b64      	ldr	r3, [pc, #400]	@ (8011a14 <_strtod_l+0xafc>)
 8011884:	2200      	movs	r2, #0
 8011886:	4630      	mov	r0, r6
 8011888:	4639      	mov	r1, r7
 801188a:	f7ef f947 	bl	8000b1c <__aeabi_dcmplt>
 801188e:	2800      	cmp	r0, #0
 8011890:	d159      	bne.n	8011946 <_strtod_l+0xa2e>
 8011892:	4630      	mov	r0, r6
 8011894:	4639      	mov	r1, r7
 8011896:	4b60      	ldr	r3, [pc, #384]	@ (8011a18 <_strtod_l+0xb00>)
 8011898:	2200      	movs	r2, #0
 801189a:	f7ee fecd 	bl	8000638 <__aeabi_dmul>
 801189e:	4606      	mov	r6, r0
 80118a0:	460f      	mov	r7, r1
 80118a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80118a6:	9606      	str	r6, [sp, #24]
 80118a8:	9307      	str	r3, [sp, #28]
 80118aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80118ae:	4d57      	ldr	r5, [pc, #348]	@ (8011a0c <_strtod_l+0xaf4>)
 80118b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80118b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118b6:	401d      	ands	r5, r3
 80118b8:	4b58      	ldr	r3, [pc, #352]	@ (8011a1c <_strtod_l+0xb04>)
 80118ba:	429d      	cmp	r5, r3
 80118bc:	f040 80b2 	bne.w	8011a24 <_strtod_l+0xb0c>
 80118c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80118c6:	ec4b ab10 	vmov	d0, sl, fp
 80118ca:	f7ff f9c7 	bl	8010c5c <__ulp>
 80118ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80118d2:	ec51 0b10 	vmov	r0, r1, d0
 80118d6:	f7ee feaf 	bl	8000638 <__aeabi_dmul>
 80118da:	4652      	mov	r2, sl
 80118dc:	465b      	mov	r3, fp
 80118de:	f7ee fcf5 	bl	80002cc <__adddf3>
 80118e2:	460b      	mov	r3, r1
 80118e4:	4949      	ldr	r1, [pc, #292]	@ (8011a0c <_strtod_l+0xaf4>)
 80118e6:	4a4e      	ldr	r2, [pc, #312]	@ (8011a20 <_strtod_l+0xb08>)
 80118e8:	4019      	ands	r1, r3
 80118ea:	4291      	cmp	r1, r2
 80118ec:	4682      	mov	sl, r0
 80118ee:	d942      	bls.n	8011976 <_strtod_l+0xa5e>
 80118f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80118f2:	4b47      	ldr	r3, [pc, #284]	@ (8011a10 <_strtod_l+0xaf8>)
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d103      	bne.n	8011900 <_strtod_l+0x9e8>
 80118f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118fa:	3301      	adds	r3, #1
 80118fc:	f43f ad2b 	beq.w	8011356 <_strtod_l+0x43e>
 8011900:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011a10 <_strtod_l+0xaf8>
 8011904:	f04f 3aff 	mov.w	sl, #4294967295
 8011908:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801190a:	9805      	ldr	r0, [sp, #20]
 801190c:	f7fe fe72 	bl	80105f4 <_Bfree>
 8011910:	9805      	ldr	r0, [sp, #20]
 8011912:	4649      	mov	r1, r9
 8011914:	f7fe fe6e 	bl	80105f4 <_Bfree>
 8011918:	9805      	ldr	r0, [sp, #20]
 801191a:	4641      	mov	r1, r8
 801191c:	f7fe fe6a 	bl	80105f4 <_Bfree>
 8011920:	9805      	ldr	r0, [sp, #20]
 8011922:	4621      	mov	r1, r4
 8011924:	f7fe fe66 	bl	80105f4 <_Bfree>
 8011928:	e618      	b.n	801155c <_strtod_l+0x644>
 801192a:	f1ba 0f01 	cmp.w	sl, #1
 801192e:	d103      	bne.n	8011938 <_strtod_l+0xa20>
 8011930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011932:	2b00      	cmp	r3, #0
 8011934:	f43f ada5 	beq.w	8011482 <_strtod_l+0x56a>
 8011938:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80119e8 <_strtod_l+0xad0>
 801193c:	4f35      	ldr	r7, [pc, #212]	@ (8011a14 <_strtod_l+0xafc>)
 801193e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011942:	2600      	movs	r6, #0
 8011944:	e7b1      	b.n	80118aa <_strtod_l+0x992>
 8011946:	4f34      	ldr	r7, [pc, #208]	@ (8011a18 <_strtod_l+0xb00>)
 8011948:	2600      	movs	r6, #0
 801194a:	e7aa      	b.n	80118a2 <_strtod_l+0x98a>
 801194c:	4b32      	ldr	r3, [pc, #200]	@ (8011a18 <_strtod_l+0xb00>)
 801194e:	4630      	mov	r0, r6
 8011950:	4639      	mov	r1, r7
 8011952:	2200      	movs	r2, #0
 8011954:	f7ee fe70 	bl	8000638 <__aeabi_dmul>
 8011958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801195a:	4606      	mov	r6, r0
 801195c:	460f      	mov	r7, r1
 801195e:	2b00      	cmp	r3, #0
 8011960:	d09f      	beq.n	80118a2 <_strtod_l+0x98a>
 8011962:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011966:	e7a0      	b.n	80118aa <_strtod_l+0x992>
 8011968:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80119f0 <_strtod_l+0xad8>
 801196c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011970:	ec57 6b17 	vmov	r6, r7, d7
 8011974:	e799      	b.n	80118aa <_strtod_l+0x992>
 8011976:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801197a:	9b08      	ldr	r3, [sp, #32]
 801197c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011980:	2b00      	cmp	r3, #0
 8011982:	d1c1      	bne.n	8011908 <_strtod_l+0x9f0>
 8011984:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011988:	0d1b      	lsrs	r3, r3, #20
 801198a:	051b      	lsls	r3, r3, #20
 801198c:	429d      	cmp	r5, r3
 801198e:	d1bb      	bne.n	8011908 <_strtod_l+0x9f0>
 8011990:	4630      	mov	r0, r6
 8011992:	4639      	mov	r1, r7
 8011994:	f7ef fa00 	bl	8000d98 <__aeabi_d2lz>
 8011998:	f7ee fe20 	bl	80005dc <__aeabi_l2d>
 801199c:	4602      	mov	r2, r0
 801199e:	460b      	mov	r3, r1
 80119a0:	4630      	mov	r0, r6
 80119a2:	4639      	mov	r1, r7
 80119a4:	f7ee fc90 	bl	80002c8 <__aeabi_dsub>
 80119a8:	460b      	mov	r3, r1
 80119aa:	4602      	mov	r2, r0
 80119ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80119b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80119b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119b6:	ea46 060a 	orr.w	r6, r6, sl
 80119ba:	431e      	orrs	r6, r3
 80119bc:	d06f      	beq.n	8011a9e <_strtod_l+0xb86>
 80119be:	a30e      	add	r3, pc, #56	@ (adr r3, 80119f8 <_strtod_l+0xae0>)
 80119c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c4:	f7ef f8aa 	bl	8000b1c <__aeabi_dcmplt>
 80119c8:	2800      	cmp	r0, #0
 80119ca:	f47f accf 	bne.w	801136c <_strtod_l+0x454>
 80119ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8011a00 <_strtod_l+0xae8>)
 80119d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80119d8:	f7ef f8be 	bl	8000b58 <__aeabi_dcmpgt>
 80119dc:	2800      	cmp	r0, #0
 80119de:	d093      	beq.n	8011908 <_strtod_l+0x9f0>
 80119e0:	e4c4      	b.n	801136c <_strtod_l+0x454>
 80119e2:	bf00      	nop
 80119e4:	f3af 8000 	nop.w
 80119e8:	00000000 	.word	0x00000000
 80119ec:	bff00000 	.word	0xbff00000
 80119f0:	00000000 	.word	0x00000000
 80119f4:	3ff00000 	.word	0x3ff00000
 80119f8:	94a03595 	.word	0x94a03595
 80119fc:	3fdfffff 	.word	0x3fdfffff
 8011a00:	35afe535 	.word	0x35afe535
 8011a04:	3fe00000 	.word	0x3fe00000
 8011a08:	000fffff 	.word	0x000fffff
 8011a0c:	7ff00000 	.word	0x7ff00000
 8011a10:	7fefffff 	.word	0x7fefffff
 8011a14:	3ff00000 	.word	0x3ff00000
 8011a18:	3fe00000 	.word	0x3fe00000
 8011a1c:	7fe00000 	.word	0x7fe00000
 8011a20:	7c9fffff 	.word	0x7c9fffff
 8011a24:	9b08      	ldr	r3, [sp, #32]
 8011a26:	b323      	cbz	r3, 8011a72 <_strtod_l+0xb5a>
 8011a28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011a2c:	d821      	bhi.n	8011a72 <_strtod_l+0xb5a>
 8011a2e:	a328      	add	r3, pc, #160	@ (adr r3, 8011ad0 <_strtod_l+0xbb8>)
 8011a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a34:	4630      	mov	r0, r6
 8011a36:	4639      	mov	r1, r7
 8011a38:	f7ef f87a 	bl	8000b30 <__aeabi_dcmple>
 8011a3c:	b1a0      	cbz	r0, 8011a68 <_strtod_l+0xb50>
 8011a3e:	4639      	mov	r1, r7
 8011a40:	4630      	mov	r0, r6
 8011a42:	f7ef f8d1 	bl	8000be8 <__aeabi_d2uiz>
 8011a46:	2801      	cmp	r0, #1
 8011a48:	bf38      	it	cc
 8011a4a:	2001      	movcc	r0, #1
 8011a4c:	f7ee fd7a 	bl	8000544 <__aeabi_ui2d>
 8011a50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a52:	4606      	mov	r6, r0
 8011a54:	460f      	mov	r7, r1
 8011a56:	b9fb      	cbnz	r3, 8011a98 <_strtod_l+0xb80>
 8011a58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011a5c:	9014      	str	r0, [sp, #80]	@ 0x50
 8011a5e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011a60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011a64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011a68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011a6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011a6e:	1b5b      	subs	r3, r3, r5
 8011a70:	9311      	str	r3, [sp, #68]	@ 0x44
 8011a72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011a76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011a7a:	f7ff f8ef 	bl	8010c5c <__ulp>
 8011a7e:	4650      	mov	r0, sl
 8011a80:	ec53 2b10 	vmov	r2, r3, d0
 8011a84:	4659      	mov	r1, fp
 8011a86:	f7ee fdd7 	bl	8000638 <__aeabi_dmul>
 8011a8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011a8e:	f7ee fc1d 	bl	80002cc <__adddf3>
 8011a92:	4682      	mov	sl, r0
 8011a94:	468b      	mov	fp, r1
 8011a96:	e770      	b.n	801197a <_strtod_l+0xa62>
 8011a98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011a9c:	e7e0      	b.n	8011a60 <_strtod_l+0xb48>
 8011a9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011ad8 <_strtod_l+0xbc0>)
 8011aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa4:	f7ef f83a 	bl	8000b1c <__aeabi_dcmplt>
 8011aa8:	e798      	b.n	80119dc <_strtod_l+0xac4>
 8011aaa:	2300      	movs	r3, #0
 8011aac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011aae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011ab0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ab2:	6013      	str	r3, [r2, #0]
 8011ab4:	f7ff ba6d 	b.w	8010f92 <_strtod_l+0x7a>
 8011ab8:	2a65      	cmp	r2, #101	@ 0x65
 8011aba:	f43f ab66 	beq.w	801118a <_strtod_l+0x272>
 8011abe:	2a45      	cmp	r2, #69	@ 0x45
 8011ac0:	f43f ab63 	beq.w	801118a <_strtod_l+0x272>
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	f7ff bb9e 	b.w	8011206 <_strtod_l+0x2ee>
 8011aca:	bf00      	nop
 8011acc:	f3af 8000 	nop.w
 8011ad0:	ffc00000 	.word	0xffc00000
 8011ad4:	41dfffff 	.word	0x41dfffff
 8011ad8:	94a03595 	.word	0x94a03595
 8011adc:	3fcfffff 	.word	0x3fcfffff

08011ae0 <_strtod_r>:
 8011ae0:	4b01      	ldr	r3, [pc, #4]	@ (8011ae8 <_strtod_r+0x8>)
 8011ae2:	f7ff ba19 	b.w	8010f18 <_strtod_l>
 8011ae6:	bf00      	nop
 8011ae8:	200000d4 	.word	0x200000d4

08011aec <_strtol_l.constprop.0>:
 8011aec:	2b24      	cmp	r3, #36	@ 0x24
 8011aee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011af2:	4686      	mov	lr, r0
 8011af4:	4690      	mov	r8, r2
 8011af6:	d801      	bhi.n	8011afc <_strtol_l.constprop.0+0x10>
 8011af8:	2b01      	cmp	r3, #1
 8011afa:	d106      	bne.n	8011b0a <_strtol_l.constprop.0+0x1e>
 8011afc:	f7fd fe6e 	bl	800f7dc <__errno>
 8011b00:	2316      	movs	r3, #22
 8011b02:	6003      	str	r3, [r0, #0]
 8011b04:	2000      	movs	r0, #0
 8011b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b0a:	4834      	ldr	r0, [pc, #208]	@ (8011bdc <_strtol_l.constprop.0+0xf0>)
 8011b0c:	460d      	mov	r5, r1
 8011b0e:	462a      	mov	r2, r5
 8011b10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b14:	5d06      	ldrb	r6, [r0, r4]
 8011b16:	f016 0608 	ands.w	r6, r6, #8
 8011b1a:	d1f8      	bne.n	8011b0e <_strtol_l.constprop.0+0x22>
 8011b1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8011b1e:	d12d      	bne.n	8011b7c <_strtol_l.constprop.0+0x90>
 8011b20:	782c      	ldrb	r4, [r5, #0]
 8011b22:	2601      	movs	r6, #1
 8011b24:	1c95      	adds	r5, r2, #2
 8011b26:	f033 0210 	bics.w	r2, r3, #16
 8011b2a:	d109      	bne.n	8011b40 <_strtol_l.constprop.0+0x54>
 8011b2c:	2c30      	cmp	r4, #48	@ 0x30
 8011b2e:	d12a      	bne.n	8011b86 <_strtol_l.constprop.0+0x9a>
 8011b30:	782a      	ldrb	r2, [r5, #0]
 8011b32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011b36:	2a58      	cmp	r2, #88	@ 0x58
 8011b38:	d125      	bne.n	8011b86 <_strtol_l.constprop.0+0x9a>
 8011b3a:	786c      	ldrb	r4, [r5, #1]
 8011b3c:	2310      	movs	r3, #16
 8011b3e:	3502      	adds	r5, #2
 8011b40:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011b44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011b48:	2200      	movs	r2, #0
 8011b4a:	fbbc f9f3 	udiv	r9, ip, r3
 8011b4e:	4610      	mov	r0, r2
 8011b50:	fb03 ca19 	mls	sl, r3, r9, ip
 8011b54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011b58:	2f09      	cmp	r7, #9
 8011b5a:	d81b      	bhi.n	8011b94 <_strtol_l.constprop.0+0xa8>
 8011b5c:	463c      	mov	r4, r7
 8011b5e:	42a3      	cmp	r3, r4
 8011b60:	dd27      	ble.n	8011bb2 <_strtol_l.constprop.0+0xc6>
 8011b62:	1c57      	adds	r7, r2, #1
 8011b64:	d007      	beq.n	8011b76 <_strtol_l.constprop.0+0x8a>
 8011b66:	4581      	cmp	r9, r0
 8011b68:	d320      	bcc.n	8011bac <_strtol_l.constprop.0+0xc0>
 8011b6a:	d101      	bne.n	8011b70 <_strtol_l.constprop.0+0x84>
 8011b6c:	45a2      	cmp	sl, r4
 8011b6e:	db1d      	blt.n	8011bac <_strtol_l.constprop.0+0xc0>
 8011b70:	fb00 4003 	mla	r0, r0, r3, r4
 8011b74:	2201      	movs	r2, #1
 8011b76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b7a:	e7eb      	b.n	8011b54 <_strtol_l.constprop.0+0x68>
 8011b7c:	2c2b      	cmp	r4, #43	@ 0x2b
 8011b7e:	bf04      	itt	eq
 8011b80:	782c      	ldrbeq	r4, [r5, #0]
 8011b82:	1c95      	addeq	r5, r2, #2
 8011b84:	e7cf      	b.n	8011b26 <_strtol_l.constprop.0+0x3a>
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d1da      	bne.n	8011b40 <_strtol_l.constprop.0+0x54>
 8011b8a:	2c30      	cmp	r4, #48	@ 0x30
 8011b8c:	bf0c      	ite	eq
 8011b8e:	2308      	moveq	r3, #8
 8011b90:	230a      	movne	r3, #10
 8011b92:	e7d5      	b.n	8011b40 <_strtol_l.constprop.0+0x54>
 8011b94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011b98:	2f19      	cmp	r7, #25
 8011b9a:	d801      	bhi.n	8011ba0 <_strtol_l.constprop.0+0xb4>
 8011b9c:	3c37      	subs	r4, #55	@ 0x37
 8011b9e:	e7de      	b.n	8011b5e <_strtol_l.constprop.0+0x72>
 8011ba0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011ba4:	2f19      	cmp	r7, #25
 8011ba6:	d804      	bhi.n	8011bb2 <_strtol_l.constprop.0+0xc6>
 8011ba8:	3c57      	subs	r4, #87	@ 0x57
 8011baa:	e7d8      	b.n	8011b5e <_strtol_l.constprop.0+0x72>
 8011bac:	f04f 32ff 	mov.w	r2, #4294967295
 8011bb0:	e7e1      	b.n	8011b76 <_strtol_l.constprop.0+0x8a>
 8011bb2:	1c53      	adds	r3, r2, #1
 8011bb4:	d108      	bne.n	8011bc8 <_strtol_l.constprop.0+0xdc>
 8011bb6:	2322      	movs	r3, #34	@ 0x22
 8011bb8:	f8ce 3000 	str.w	r3, [lr]
 8011bbc:	4660      	mov	r0, ip
 8011bbe:	f1b8 0f00 	cmp.w	r8, #0
 8011bc2:	d0a0      	beq.n	8011b06 <_strtol_l.constprop.0+0x1a>
 8011bc4:	1e69      	subs	r1, r5, #1
 8011bc6:	e006      	b.n	8011bd6 <_strtol_l.constprop.0+0xea>
 8011bc8:	b106      	cbz	r6, 8011bcc <_strtol_l.constprop.0+0xe0>
 8011bca:	4240      	negs	r0, r0
 8011bcc:	f1b8 0f00 	cmp.w	r8, #0
 8011bd0:	d099      	beq.n	8011b06 <_strtol_l.constprop.0+0x1a>
 8011bd2:	2a00      	cmp	r2, #0
 8011bd4:	d1f6      	bne.n	8011bc4 <_strtol_l.constprop.0+0xd8>
 8011bd6:	f8c8 1000 	str.w	r1, [r8]
 8011bda:	e794      	b.n	8011b06 <_strtol_l.constprop.0+0x1a>
 8011bdc:	08014011 	.word	0x08014011

08011be0 <_strtol_r>:
 8011be0:	f7ff bf84 	b.w	8011aec <_strtol_l.constprop.0>

08011be4 <__ssputs_r>:
 8011be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011be8:	688e      	ldr	r6, [r1, #8]
 8011bea:	461f      	mov	r7, r3
 8011bec:	42be      	cmp	r6, r7
 8011bee:	680b      	ldr	r3, [r1, #0]
 8011bf0:	4682      	mov	sl, r0
 8011bf2:	460c      	mov	r4, r1
 8011bf4:	4690      	mov	r8, r2
 8011bf6:	d82d      	bhi.n	8011c54 <__ssputs_r+0x70>
 8011bf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011bfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011c00:	d026      	beq.n	8011c50 <__ssputs_r+0x6c>
 8011c02:	6965      	ldr	r5, [r4, #20]
 8011c04:	6909      	ldr	r1, [r1, #16]
 8011c06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c0a:	eba3 0901 	sub.w	r9, r3, r1
 8011c0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c12:	1c7b      	adds	r3, r7, #1
 8011c14:	444b      	add	r3, r9
 8011c16:	106d      	asrs	r5, r5, #1
 8011c18:	429d      	cmp	r5, r3
 8011c1a:	bf38      	it	cc
 8011c1c:	461d      	movcc	r5, r3
 8011c1e:	0553      	lsls	r3, r2, #21
 8011c20:	d527      	bpl.n	8011c72 <__ssputs_r+0x8e>
 8011c22:	4629      	mov	r1, r5
 8011c24:	f7fc fc22 	bl	800e46c <_malloc_r>
 8011c28:	4606      	mov	r6, r0
 8011c2a:	b360      	cbz	r0, 8011c86 <__ssputs_r+0xa2>
 8011c2c:	6921      	ldr	r1, [r4, #16]
 8011c2e:	464a      	mov	r2, r9
 8011c30:	f000 fbce 	bl	80123d0 <memcpy>
 8011c34:	89a3      	ldrh	r3, [r4, #12]
 8011c36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c3e:	81a3      	strh	r3, [r4, #12]
 8011c40:	6126      	str	r6, [r4, #16]
 8011c42:	6165      	str	r5, [r4, #20]
 8011c44:	444e      	add	r6, r9
 8011c46:	eba5 0509 	sub.w	r5, r5, r9
 8011c4a:	6026      	str	r6, [r4, #0]
 8011c4c:	60a5      	str	r5, [r4, #8]
 8011c4e:	463e      	mov	r6, r7
 8011c50:	42be      	cmp	r6, r7
 8011c52:	d900      	bls.n	8011c56 <__ssputs_r+0x72>
 8011c54:	463e      	mov	r6, r7
 8011c56:	6820      	ldr	r0, [r4, #0]
 8011c58:	4632      	mov	r2, r6
 8011c5a:	4641      	mov	r1, r8
 8011c5c:	f000 fb6a 	bl	8012334 <memmove>
 8011c60:	68a3      	ldr	r3, [r4, #8]
 8011c62:	1b9b      	subs	r3, r3, r6
 8011c64:	60a3      	str	r3, [r4, #8]
 8011c66:	6823      	ldr	r3, [r4, #0]
 8011c68:	4433      	add	r3, r6
 8011c6a:	6023      	str	r3, [r4, #0]
 8011c6c:	2000      	movs	r0, #0
 8011c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c72:	462a      	mov	r2, r5
 8011c74:	f000 ff41 	bl	8012afa <_realloc_r>
 8011c78:	4606      	mov	r6, r0
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	d1e0      	bne.n	8011c40 <__ssputs_r+0x5c>
 8011c7e:	6921      	ldr	r1, [r4, #16]
 8011c80:	4650      	mov	r0, sl
 8011c82:	f7fe fc2d 	bl	80104e0 <_free_r>
 8011c86:	230c      	movs	r3, #12
 8011c88:	f8ca 3000 	str.w	r3, [sl]
 8011c8c:	89a3      	ldrh	r3, [r4, #12]
 8011c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c92:	81a3      	strh	r3, [r4, #12]
 8011c94:	f04f 30ff 	mov.w	r0, #4294967295
 8011c98:	e7e9      	b.n	8011c6e <__ssputs_r+0x8a>
	...

08011c9c <_svfiprintf_r>:
 8011c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ca0:	4698      	mov	r8, r3
 8011ca2:	898b      	ldrh	r3, [r1, #12]
 8011ca4:	061b      	lsls	r3, r3, #24
 8011ca6:	b09d      	sub	sp, #116	@ 0x74
 8011ca8:	4607      	mov	r7, r0
 8011caa:	460d      	mov	r5, r1
 8011cac:	4614      	mov	r4, r2
 8011cae:	d510      	bpl.n	8011cd2 <_svfiprintf_r+0x36>
 8011cb0:	690b      	ldr	r3, [r1, #16]
 8011cb2:	b973      	cbnz	r3, 8011cd2 <_svfiprintf_r+0x36>
 8011cb4:	2140      	movs	r1, #64	@ 0x40
 8011cb6:	f7fc fbd9 	bl	800e46c <_malloc_r>
 8011cba:	6028      	str	r0, [r5, #0]
 8011cbc:	6128      	str	r0, [r5, #16]
 8011cbe:	b930      	cbnz	r0, 8011cce <_svfiprintf_r+0x32>
 8011cc0:	230c      	movs	r3, #12
 8011cc2:	603b      	str	r3, [r7, #0]
 8011cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8011cc8:	b01d      	add	sp, #116	@ 0x74
 8011cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cce:	2340      	movs	r3, #64	@ 0x40
 8011cd0:	616b      	str	r3, [r5, #20]
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cd6:	2320      	movs	r3, #32
 8011cd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ce0:	2330      	movs	r3, #48	@ 0x30
 8011ce2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011e80 <_svfiprintf_r+0x1e4>
 8011ce6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011cea:	f04f 0901 	mov.w	r9, #1
 8011cee:	4623      	mov	r3, r4
 8011cf0:	469a      	mov	sl, r3
 8011cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cf6:	b10a      	cbz	r2, 8011cfc <_svfiprintf_r+0x60>
 8011cf8:	2a25      	cmp	r2, #37	@ 0x25
 8011cfa:	d1f9      	bne.n	8011cf0 <_svfiprintf_r+0x54>
 8011cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8011d00:	d00b      	beq.n	8011d1a <_svfiprintf_r+0x7e>
 8011d02:	465b      	mov	r3, fp
 8011d04:	4622      	mov	r2, r4
 8011d06:	4629      	mov	r1, r5
 8011d08:	4638      	mov	r0, r7
 8011d0a:	f7ff ff6b 	bl	8011be4 <__ssputs_r>
 8011d0e:	3001      	adds	r0, #1
 8011d10:	f000 80a7 	beq.w	8011e62 <_svfiprintf_r+0x1c6>
 8011d14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d16:	445a      	add	r2, fp
 8011d18:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	f000 809f 	beq.w	8011e62 <_svfiprintf_r+0x1c6>
 8011d24:	2300      	movs	r3, #0
 8011d26:	f04f 32ff 	mov.w	r2, #4294967295
 8011d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d2e:	f10a 0a01 	add.w	sl, sl, #1
 8011d32:	9304      	str	r3, [sp, #16]
 8011d34:	9307      	str	r3, [sp, #28]
 8011d36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d3c:	4654      	mov	r4, sl
 8011d3e:	2205      	movs	r2, #5
 8011d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d44:	484e      	ldr	r0, [pc, #312]	@ (8011e80 <_svfiprintf_r+0x1e4>)
 8011d46:	f7ee fa63 	bl	8000210 <memchr>
 8011d4a:	9a04      	ldr	r2, [sp, #16]
 8011d4c:	b9d8      	cbnz	r0, 8011d86 <_svfiprintf_r+0xea>
 8011d4e:	06d0      	lsls	r0, r2, #27
 8011d50:	bf44      	itt	mi
 8011d52:	2320      	movmi	r3, #32
 8011d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d58:	0711      	lsls	r1, r2, #28
 8011d5a:	bf44      	itt	mi
 8011d5c:	232b      	movmi	r3, #43	@ 0x2b
 8011d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d62:	f89a 3000 	ldrb.w	r3, [sl]
 8011d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d68:	d015      	beq.n	8011d96 <_svfiprintf_r+0xfa>
 8011d6a:	9a07      	ldr	r2, [sp, #28]
 8011d6c:	4654      	mov	r4, sl
 8011d6e:	2000      	movs	r0, #0
 8011d70:	f04f 0c0a 	mov.w	ip, #10
 8011d74:	4621      	mov	r1, r4
 8011d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d7a:	3b30      	subs	r3, #48	@ 0x30
 8011d7c:	2b09      	cmp	r3, #9
 8011d7e:	d94b      	bls.n	8011e18 <_svfiprintf_r+0x17c>
 8011d80:	b1b0      	cbz	r0, 8011db0 <_svfiprintf_r+0x114>
 8011d82:	9207      	str	r2, [sp, #28]
 8011d84:	e014      	b.n	8011db0 <_svfiprintf_r+0x114>
 8011d86:	eba0 0308 	sub.w	r3, r0, r8
 8011d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8011d8e:	4313      	orrs	r3, r2
 8011d90:	9304      	str	r3, [sp, #16]
 8011d92:	46a2      	mov	sl, r4
 8011d94:	e7d2      	b.n	8011d3c <_svfiprintf_r+0xa0>
 8011d96:	9b03      	ldr	r3, [sp, #12]
 8011d98:	1d19      	adds	r1, r3, #4
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	9103      	str	r1, [sp, #12]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	bfbb      	ittet	lt
 8011da2:	425b      	neglt	r3, r3
 8011da4:	f042 0202 	orrlt.w	r2, r2, #2
 8011da8:	9307      	strge	r3, [sp, #28]
 8011daa:	9307      	strlt	r3, [sp, #28]
 8011dac:	bfb8      	it	lt
 8011dae:	9204      	strlt	r2, [sp, #16]
 8011db0:	7823      	ldrb	r3, [r4, #0]
 8011db2:	2b2e      	cmp	r3, #46	@ 0x2e
 8011db4:	d10a      	bne.n	8011dcc <_svfiprintf_r+0x130>
 8011db6:	7863      	ldrb	r3, [r4, #1]
 8011db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dba:	d132      	bne.n	8011e22 <_svfiprintf_r+0x186>
 8011dbc:	9b03      	ldr	r3, [sp, #12]
 8011dbe:	1d1a      	adds	r2, r3, #4
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	9203      	str	r2, [sp, #12]
 8011dc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011dc8:	3402      	adds	r4, #2
 8011dca:	9305      	str	r3, [sp, #20]
 8011dcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011e90 <_svfiprintf_r+0x1f4>
 8011dd0:	7821      	ldrb	r1, [r4, #0]
 8011dd2:	2203      	movs	r2, #3
 8011dd4:	4650      	mov	r0, sl
 8011dd6:	f7ee fa1b 	bl	8000210 <memchr>
 8011dda:	b138      	cbz	r0, 8011dec <_svfiprintf_r+0x150>
 8011ddc:	9b04      	ldr	r3, [sp, #16]
 8011dde:	eba0 000a 	sub.w	r0, r0, sl
 8011de2:	2240      	movs	r2, #64	@ 0x40
 8011de4:	4082      	lsls	r2, r0
 8011de6:	4313      	orrs	r3, r2
 8011de8:	3401      	adds	r4, #1
 8011dea:	9304      	str	r3, [sp, #16]
 8011dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011df0:	4824      	ldr	r0, [pc, #144]	@ (8011e84 <_svfiprintf_r+0x1e8>)
 8011df2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011df6:	2206      	movs	r2, #6
 8011df8:	f7ee fa0a 	bl	8000210 <memchr>
 8011dfc:	2800      	cmp	r0, #0
 8011dfe:	d036      	beq.n	8011e6e <_svfiprintf_r+0x1d2>
 8011e00:	4b21      	ldr	r3, [pc, #132]	@ (8011e88 <_svfiprintf_r+0x1ec>)
 8011e02:	bb1b      	cbnz	r3, 8011e4c <_svfiprintf_r+0x1b0>
 8011e04:	9b03      	ldr	r3, [sp, #12]
 8011e06:	3307      	adds	r3, #7
 8011e08:	f023 0307 	bic.w	r3, r3, #7
 8011e0c:	3308      	adds	r3, #8
 8011e0e:	9303      	str	r3, [sp, #12]
 8011e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e12:	4433      	add	r3, r6
 8011e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e16:	e76a      	b.n	8011cee <_svfiprintf_r+0x52>
 8011e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e1c:	460c      	mov	r4, r1
 8011e1e:	2001      	movs	r0, #1
 8011e20:	e7a8      	b.n	8011d74 <_svfiprintf_r+0xd8>
 8011e22:	2300      	movs	r3, #0
 8011e24:	3401      	adds	r4, #1
 8011e26:	9305      	str	r3, [sp, #20]
 8011e28:	4619      	mov	r1, r3
 8011e2a:	f04f 0c0a 	mov.w	ip, #10
 8011e2e:	4620      	mov	r0, r4
 8011e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e34:	3a30      	subs	r2, #48	@ 0x30
 8011e36:	2a09      	cmp	r2, #9
 8011e38:	d903      	bls.n	8011e42 <_svfiprintf_r+0x1a6>
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d0c6      	beq.n	8011dcc <_svfiprintf_r+0x130>
 8011e3e:	9105      	str	r1, [sp, #20]
 8011e40:	e7c4      	b.n	8011dcc <_svfiprintf_r+0x130>
 8011e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e46:	4604      	mov	r4, r0
 8011e48:	2301      	movs	r3, #1
 8011e4a:	e7f0      	b.n	8011e2e <_svfiprintf_r+0x192>
 8011e4c:	ab03      	add	r3, sp, #12
 8011e4e:	9300      	str	r3, [sp, #0]
 8011e50:	462a      	mov	r2, r5
 8011e52:	4b0e      	ldr	r3, [pc, #56]	@ (8011e8c <_svfiprintf_r+0x1f0>)
 8011e54:	a904      	add	r1, sp, #16
 8011e56:	4638      	mov	r0, r7
 8011e58:	f7fc fc34 	bl	800e6c4 <_printf_float>
 8011e5c:	1c42      	adds	r2, r0, #1
 8011e5e:	4606      	mov	r6, r0
 8011e60:	d1d6      	bne.n	8011e10 <_svfiprintf_r+0x174>
 8011e62:	89ab      	ldrh	r3, [r5, #12]
 8011e64:	065b      	lsls	r3, r3, #25
 8011e66:	f53f af2d 	bmi.w	8011cc4 <_svfiprintf_r+0x28>
 8011e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e6c:	e72c      	b.n	8011cc8 <_svfiprintf_r+0x2c>
 8011e6e:	ab03      	add	r3, sp, #12
 8011e70:	9300      	str	r3, [sp, #0]
 8011e72:	462a      	mov	r2, r5
 8011e74:	4b05      	ldr	r3, [pc, #20]	@ (8011e8c <_svfiprintf_r+0x1f0>)
 8011e76:	a904      	add	r1, sp, #16
 8011e78:	4638      	mov	r0, r7
 8011e7a:	f7fc febb 	bl	800ebf4 <_printf_i>
 8011e7e:	e7ed      	b.n	8011e5c <_svfiprintf_r+0x1c0>
 8011e80:	08014111 	.word	0x08014111
 8011e84:	0801411b 	.word	0x0801411b
 8011e88:	0800e6c5 	.word	0x0800e6c5
 8011e8c:	08011be5 	.word	0x08011be5
 8011e90:	08014117 	.word	0x08014117

08011e94 <__sfputc_r>:
 8011e94:	6893      	ldr	r3, [r2, #8]
 8011e96:	3b01      	subs	r3, #1
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	b410      	push	{r4}
 8011e9c:	6093      	str	r3, [r2, #8]
 8011e9e:	da08      	bge.n	8011eb2 <__sfputc_r+0x1e>
 8011ea0:	6994      	ldr	r4, [r2, #24]
 8011ea2:	42a3      	cmp	r3, r4
 8011ea4:	db01      	blt.n	8011eaa <__sfputc_r+0x16>
 8011ea6:	290a      	cmp	r1, #10
 8011ea8:	d103      	bne.n	8011eb2 <__sfputc_r+0x1e>
 8011eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011eae:	f7fd bb9e 	b.w	800f5ee <__swbuf_r>
 8011eb2:	6813      	ldr	r3, [r2, #0]
 8011eb4:	1c58      	adds	r0, r3, #1
 8011eb6:	6010      	str	r0, [r2, #0]
 8011eb8:	7019      	strb	r1, [r3, #0]
 8011eba:	4608      	mov	r0, r1
 8011ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ec0:	4770      	bx	lr

08011ec2 <__sfputs_r>:
 8011ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ec4:	4606      	mov	r6, r0
 8011ec6:	460f      	mov	r7, r1
 8011ec8:	4614      	mov	r4, r2
 8011eca:	18d5      	adds	r5, r2, r3
 8011ecc:	42ac      	cmp	r4, r5
 8011ece:	d101      	bne.n	8011ed4 <__sfputs_r+0x12>
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	e007      	b.n	8011ee4 <__sfputs_r+0x22>
 8011ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ed8:	463a      	mov	r2, r7
 8011eda:	4630      	mov	r0, r6
 8011edc:	f7ff ffda 	bl	8011e94 <__sfputc_r>
 8011ee0:	1c43      	adds	r3, r0, #1
 8011ee2:	d1f3      	bne.n	8011ecc <__sfputs_r+0xa>
 8011ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011ee8 <_vfiprintf_r>:
 8011ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eec:	460d      	mov	r5, r1
 8011eee:	b09d      	sub	sp, #116	@ 0x74
 8011ef0:	4614      	mov	r4, r2
 8011ef2:	4698      	mov	r8, r3
 8011ef4:	4606      	mov	r6, r0
 8011ef6:	b118      	cbz	r0, 8011f00 <_vfiprintf_r+0x18>
 8011ef8:	6a03      	ldr	r3, [r0, #32]
 8011efa:	b90b      	cbnz	r3, 8011f00 <_vfiprintf_r+0x18>
 8011efc:	f7fd fa3a 	bl	800f374 <__sinit>
 8011f00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f02:	07d9      	lsls	r1, r3, #31
 8011f04:	d405      	bmi.n	8011f12 <_vfiprintf_r+0x2a>
 8011f06:	89ab      	ldrh	r3, [r5, #12]
 8011f08:	059a      	lsls	r2, r3, #22
 8011f0a:	d402      	bmi.n	8011f12 <_vfiprintf_r+0x2a>
 8011f0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f0e:	f7fd fc90 	bl	800f832 <__retarget_lock_acquire_recursive>
 8011f12:	89ab      	ldrh	r3, [r5, #12]
 8011f14:	071b      	lsls	r3, r3, #28
 8011f16:	d501      	bpl.n	8011f1c <_vfiprintf_r+0x34>
 8011f18:	692b      	ldr	r3, [r5, #16]
 8011f1a:	b99b      	cbnz	r3, 8011f44 <_vfiprintf_r+0x5c>
 8011f1c:	4629      	mov	r1, r5
 8011f1e:	4630      	mov	r0, r6
 8011f20:	f7fd fba4 	bl	800f66c <__swsetup_r>
 8011f24:	b170      	cbz	r0, 8011f44 <_vfiprintf_r+0x5c>
 8011f26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f28:	07dc      	lsls	r4, r3, #31
 8011f2a:	d504      	bpl.n	8011f36 <_vfiprintf_r+0x4e>
 8011f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f30:	b01d      	add	sp, #116	@ 0x74
 8011f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f36:	89ab      	ldrh	r3, [r5, #12]
 8011f38:	0598      	lsls	r0, r3, #22
 8011f3a:	d4f7      	bmi.n	8011f2c <_vfiprintf_r+0x44>
 8011f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f3e:	f7fd fc79 	bl	800f834 <__retarget_lock_release_recursive>
 8011f42:	e7f3      	b.n	8011f2c <_vfiprintf_r+0x44>
 8011f44:	2300      	movs	r3, #0
 8011f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f48:	2320      	movs	r3, #32
 8011f4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f52:	2330      	movs	r3, #48	@ 0x30
 8011f54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012104 <_vfiprintf_r+0x21c>
 8011f58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011f5c:	f04f 0901 	mov.w	r9, #1
 8011f60:	4623      	mov	r3, r4
 8011f62:	469a      	mov	sl, r3
 8011f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f68:	b10a      	cbz	r2, 8011f6e <_vfiprintf_r+0x86>
 8011f6a:	2a25      	cmp	r2, #37	@ 0x25
 8011f6c:	d1f9      	bne.n	8011f62 <_vfiprintf_r+0x7a>
 8011f6e:	ebba 0b04 	subs.w	fp, sl, r4
 8011f72:	d00b      	beq.n	8011f8c <_vfiprintf_r+0xa4>
 8011f74:	465b      	mov	r3, fp
 8011f76:	4622      	mov	r2, r4
 8011f78:	4629      	mov	r1, r5
 8011f7a:	4630      	mov	r0, r6
 8011f7c:	f7ff ffa1 	bl	8011ec2 <__sfputs_r>
 8011f80:	3001      	adds	r0, #1
 8011f82:	f000 80a7 	beq.w	80120d4 <_vfiprintf_r+0x1ec>
 8011f86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f88:	445a      	add	r2, fp
 8011f8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	f000 809f 	beq.w	80120d4 <_vfiprintf_r+0x1ec>
 8011f96:	2300      	movs	r3, #0
 8011f98:	f04f 32ff 	mov.w	r2, #4294967295
 8011f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fa0:	f10a 0a01 	add.w	sl, sl, #1
 8011fa4:	9304      	str	r3, [sp, #16]
 8011fa6:	9307      	str	r3, [sp, #28]
 8011fa8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011fac:	931a      	str	r3, [sp, #104]	@ 0x68
 8011fae:	4654      	mov	r4, sl
 8011fb0:	2205      	movs	r2, #5
 8011fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fb6:	4853      	ldr	r0, [pc, #332]	@ (8012104 <_vfiprintf_r+0x21c>)
 8011fb8:	f7ee f92a 	bl	8000210 <memchr>
 8011fbc:	9a04      	ldr	r2, [sp, #16]
 8011fbe:	b9d8      	cbnz	r0, 8011ff8 <_vfiprintf_r+0x110>
 8011fc0:	06d1      	lsls	r1, r2, #27
 8011fc2:	bf44      	itt	mi
 8011fc4:	2320      	movmi	r3, #32
 8011fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011fca:	0713      	lsls	r3, r2, #28
 8011fcc:	bf44      	itt	mi
 8011fce:	232b      	movmi	r3, #43	@ 0x2b
 8011fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8011fd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fda:	d015      	beq.n	8012008 <_vfiprintf_r+0x120>
 8011fdc:	9a07      	ldr	r2, [sp, #28]
 8011fde:	4654      	mov	r4, sl
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	f04f 0c0a 	mov.w	ip, #10
 8011fe6:	4621      	mov	r1, r4
 8011fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fec:	3b30      	subs	r3, #48	@ 0x30
 8011fee:	2b09      	cmp	r3, #9
 8011ff0:	d94b      	bls.n	801208a <_vfiprintf_r+0x1a2>
 8011ff2:	b1b0      	cbz	r0, 8012022 <_vfiprintf_r+0x13a>
 8011ff4:	9207      	str	r2, [sp, #28]
 8011ff6:	e014      	b.n	8012022 <_vfiprintf_r+0x13a>
 8011ff8:	eba0 0308 	sub.w	r3, r0, r8
 8011ffc:	fa09 f303 	lsl.w	r3, r9, r3
 8012000:	4313      	orrs	r3, r2
 8012002:	9304      	str	r3, [sp, #16]
 8012004:	46a2      	mov	sl, r4
 8012006:	e7d2      	b.n	8011fae <_vfiprintf_r+0xc6>
 8012008:	9b03      	ldr	r3, [sp, #12]
 801200a:	1d19      	adds	r1, r3, #4
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	9103      	str	r1, [sp, #12]
 8012010:	2b00      	cmp	r3, #0
 8012012:	bfbb      	ittet	lt
 8012014:	425b      	neglt	r3, r3
 8012016:	f042 0202 	orrlt.w	r2, r2, #2
 801201a:	9307      	strge	r3, [sp, #28]
 801201c:	9307      	strlt	r3, [sp, #28]
 801201e:	bfb8      	it	lt
 8012020:	9204      	strlt	r2, [sp, #16]
 8012022:	7823      	ldrb	r3, [r4, #0]
 8012024:	2b2e      	cmp	r3, #46	@ 0x2e
 8012026:	d10a      	bne.n	801203e <_vfiprintf_r+0x156>
 8012028:	7863      	ldrb	r3, [r4, #1]
 801202a:	2b2a      	cmp	r3, #42	@ 0x2a
 801202c:	d132      	bne.n	8012094 <_vfiprintf_r+0x1ac>
 801202e:	9b03      	ldr	r3, [sp, #12]
 8012030:	1d1a      	adds	r2, r3, #4
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	9203      	str	r2, [sp, #12]
 8012036:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801203a:	3402      	adds	r4, #2
 801203c:	9305      	str	r3, [sp, #20]
 801203e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012114 <_vfiprintf_r+0x22c>
 8012042:	7821      	ldrb	r1, [r4, #0]
 8012044:	2203      	movs	r2, #3
 8012046:	4650      	mov	r0, sl
 8012048:	f7ee f8e2 	bl	8000210 <memchr>
 801204c:	b138      	cbz	r0, 801205e <_vfiprintf_r+0x176>
 801204e:	9b04      	ldr	r3, [sp, #16]
 8012050:	eba0 000a 	sub.w	r0, r0, sl
 8012054:	2240      	movs	r2, #64	@ 0x40
 8012056:	4082      	lsls	r2, r0
 8012058:	4313      	orrs	r3, r2
 801205a:	3401      	adds	r4, #1
 801205c:	9304      	str	r3, [sp, #16]
 801205e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012062:	4829      	ldr	r0, [pc, #164]	@ (8012108 <_vfiprintf_r+0x220>)
 8012064:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012068:	2206      	movs	r2, #6
 801206a:	f7ee f8d1 	bl	8000210 <memchr>
 801206e:	2800      	cmp	r0, #0
 8012070:	d03f      	beq.n	80120f2 <_vfiprintf_r+0x20a>
 8012072:	4b26      	ldr	r3, [pc, #152]	@ (801210c <_vfiprintf_r+0x224>)
 8012074:	bb1b      	cbnz	r3, 80120be <_vfiprintf_r+0x1d6>
 8012076:	9b03      	ldr	r3, [sp, #12]
 8012078:	3307      	adds	r3, #7
 801207a:	f023 0307 	bic.w	r3, r3, #7
 801207e:	3308      	adds	r3, #8
 8012080:	9303      	str	r3, [sp, #12]
 8012082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012084:	443b      	add	r3, r7
 8012086:	9309      	str	r3, [sp, #36]	@ 0x24
 8012088:	e76a      	b.n	8011f60 <_vfiprintf_r+0x78>
 801208a:	fb0c 3202 	mla	r2, ip, r2, r3
 801208e:	460c      	mov	r4, r1
 8012090:	2001      	movs	r0, #1
 8012092:	e7a8      	b.n	8011fe6 <_vfiprintf_r+0xfe>
 8012094:	2300      	movs	r3, #0
 8012096:	3401      	adds	r4, #1
 8012098:	9305      	str	r3, [sp, #20]
 801209a:	4619      	mov	r1, r3
 801209c:	f04f 0c0a 	mov.w	ip, #10
 80120a0:	4620      	mov	r0, r4
 80120a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120a6:	3a30      	subs	r2, #48	@ 0x30
 80120a8:	2a09      	cmp	r2, #9
 80120aa:	d903      	bls.n	80120b4 <_vfiprintf_r+0x1cc>
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d0c6      	beq.n	801203e <_vfiprintf_r+0x156>
 80120b0:	9105      	str	r1, [sp, #20]
 80120b2:	e7c4      	b.n	801203e <_vfiprintf_r+0x156>
 80120b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80120b8:	4604      	mov	r4, r0
 80120ba:	2301      	movs	r3, #1
 80120bc:	e7f0      	b.n	80120a0 <_vfiprintf_r+0x1b8>
 80120be:	ab03      	add	r3, sp, #12
 80120c0:	9300      	str	r3, [sp, #0]
 80120c2:	462a      	mov	r2, r5
 80120c4:	4b12      	ldr	r3, [pc, #72]	@ (8012110 <_vfiprintf_r+0x228>)
 80120c6:	a904      	add	r1, sp, #16
 80120c8:	4630      	mov	r0, r6
 80120ca:	f7fc fafb 	bl	800e6c4 <_printf_float>
 80120ce:	4607      	mov	r7, r0
 80120d0:	1c78      	adds	r0, r7, #1
 80120d2:	d1d6      	bne.n	8012082 <_vfiprintf_r+0x19a>
 80120d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120d6:	07d9      	lsls	r1, r3, #31
 80120d8:	d405      	bmi.n	80120e6 <_vfiprintf_r+0x1fe>
 80120da:	89ab      	ldrh	r3, [r5, #12]
 80120dc:	059a      	lsls	r2, r3, #22
 80120de:	d402      	bmi.n	80120e6 <_vfiprintf_r+0x1fe>
 80120e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120e2:	f7fd fba7 	bl	800f834 <__retarget_lock_release_recursive>
 80120e6:	89ab      	ldrh	r3, [r5, #12]
 80120e8:	065b      	lsls	r3, r3, #25
 80120ea:	f53f af1f 	bmi.w	8011f2c <_vfiprintf_r+0x44>
 80120ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80120f0:	e71e      	b.n	8011f30 <_vfiprintf_r+0x48>
 80120f2:	ab03      	add	r3, sp, #12
 80120f4:	9300      	str	r3, [sp, #0]
 80120f6:	462a      	mov	r2, r5
 80120f8:	4b05      	ldr	r3, [pc, #20]	@ (8012110 <_vfiprintf_r+0x228>)
 80120fa:	a904      	add	r1, sp, #16
 80120fc:	4630      	mov	r0, r6
 80120fe:	f7fc fd79 	bl	800ebf4 <_printf_i>
 8012102:	e7e4      	b.n	80120ce <_vfiprintf_r+0x1e6>
 8012104:	08014111 	.word	0x08014111
 8012108:	0801411b 	.word	0x0801411b
 801210c:	0800e6c5 	.word	0x0800e6c5
 8012110:	08011ec3 	.word	0x08011ec3
 8012114:	08014117 	.word	0x08014117

08012118 <__sflush_r>:
 8012118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801211c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012120:	0716      	lsls	r6, r2, #28
 8012122:	4605      	mov	r5, r0
 8012124:	460c      	mov	r4, r1
 8012126:	d454      	bmi.n	80121d2 <__sflush_r+0xba>
 8012128:	684b      	ldr	r3, [r1, #4]
 801212a:	2b00      	cmp	r3, #0
 801212c:	dc02      	bgt.n	8012134 <__sflush_r+0x1c>
 801212e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012130:	2b00      	cmp	r3, #0
 8012132:	dd48      	ble.n	80121c6 <__sflush_r+0xae>
 8012134:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012136:	2e00      	cmp	r6, #0
 8012138:	d045      	beq.n	80121c6 <__sflush_r+0xae>
 801213a:	2300      	movs	r3, #0
 801213c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012140:	682f      	ldr	r7, [r5, #0]
 8012142:	6a21      	ldr	r1, [r4, #32]
 8012144:	602b      	str	r3, [r5, #0]
 8012146:	d030      	beq.n	80121aa <__sflush_r+0x92>
 8012148:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801214a:	89a3      	ldrh	r3, [r4, #12]
 801214c:	0759      	lsls	r1, r3, #29
 801214e:	d505      	bpl.n	801215c <__sflush_r+0x44>
 8012150:	6863      	ldr	r3, [r4, #4]
 8012152:	1ad2      	subs	r2, r2, r3
 8012154:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012156:	b10b      	cbz	r3, 801215c <__sflush_r+0x44>
 8012158:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801215a:	1ad2      	subs	r2, r2, r3
 801215c:	2300      	movs	r3, #0
 801215e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012160:	6a21      	ldr	r1, [r4, #32]
 8012162:	4628      	mov	r0, r5
 8012164:	47b0      	blx	r6
 8012166:	1c43      	adds	r3, r0, #1
 8012168:	89a3      	ldrh	r3, [r4, #12]
 801216a:	d106      	bne.n	801217a <__sflush_r+0x62>
 801216c:	6829      	ldr	r1, [r5, #0]
 801216e:	291d      	cmp	r1, #29
 8012170:	d82b      	bhi.n	80121ca <__sflush_r+0xb2>
 8012172:	4a2a      	ldr	r2, [pc, #168]	@ (801221c <__sflush_r+0x104>)
 8012174:	410a      	asrs	r2, r1
 8012176:	07d6      	lsls	r6, r2, #31
 8012178:	d427      	bmi.n	80121ca <__sflush_r+0xb2>
 801217a:	2200      	movs	r2, #0
 801217c:	6062      	str	r2, [r4, #4]
 801217e:	04d9      	lsls	r1, r3, #19
 8012180:	6922      	ldr	r2, [r4, #16]
 8012182:	6022      	str	r2, [r4, #0]
 8012184:	d504      	bpl.n	8012190 <__sflush_r+0x78>
 8012186:	1c42      	adds	r2, r0, #1
 8012188:	d101      	bne.n	801218e <__sflush_r+0x76>
 801218a:	682b      	ldr	r3, [r5, #0]
 801218c:	b903      	cbnz	r3, 8012190 <__sflush_r+0x78>
 801218e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012192:	602f      	str	r7, [r5, #0]
 8012194:	b1b9      	cbz	r1, 80121c6 <__sflush_r+0xae>
 8012196:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801219a:	4299      	cmp	r1, r3
 801219c:	d002      	beq.n	80121a4 <__sflush_r+0x8c>
 801219e:	4628      	mov	r0, r5
 80121a0:	f7fe f99e 	bl	80104e0 <_free_r>
 80121a4:	2300      	movs	r3, #0
 80121a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80121a8:	e00d      	b.n	80121c6 <__sflush_r+0xae>
 80121aa:	2301      	movs	r3, #1
 80121ac:	4628      	mov	r0, r5
 80121ae:	47b0      	blx	r6
 80121b0:	4602      	mov	r2, r0
 80121b2:	1c50      	adds	r0, r2, #1
 80121b4:	d1c9      	bne.n	801214a <__sflush_r+0x32>
 80121b6:	682b      	ldr	r3, [r5, #0]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d0c6      	beq.n	801214a <__sflush_r+0x32>
 80121bc:	2b1d      	cmp	r3, #29
 80121be:	d001      	beq.n	80121c4 <__sflush_r+0xac>
 80121c0:	2b16      	cmp	r3, #22
 80121c2:	d11e      	bne.n	8012202 <__sflush_r+0xea>
 80121c4:	602f      	str	r7, [r5, #0]
 80121c6:	2000      	movs	r0, #0
 80121c8:	e022      	b.n	8012210 <__sflush_r+0xf8>
 80121ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121ce:	b21b      	sxth	r3, r3
 80121d0:	e01b      	b.n	801220a <__sflush_r+0xf2>
 80121d2:	690f      	ldr	r7, [r1, #16]
 80121d4:	2f00      	cmp	r7, #0
 80121d6:	d0f6      	beq.n	80121c6 <__sflush_r+0xae>
 80121d8:	0793      	lsls	r3, r2, #30
 80121da:	680e      	ldr	r6, [r1, #0]
 80121dc:	bf08      	it	eq
 80121de:	694b      	ldreq	r3, [r1, #20]
 80121e0:	600f      	str	r7, [r1, #0]
 80121e2:	bf18      	it	ne
 80121e4:	2300      	movne	r3, #0
 80121e6:	eba6 0807 	sub.w	r8, r6, r7
 80121ea:	608b      	str	r3, [r1, #8]
 80121ec:	f1b8 0f00 	cmp.w	r8, #0
 80121f0:	dde9      	ble.n	80121c6 <__sflush_r+0xae>
 80121f2:	6a21      	ldr	r1, [r4, #32]
 80121f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80121f6:	4643      	mov	r3, r8
 80121f8:	463a      	mov	r2, r7
 80121fa:	4628      	mov	r0, r5
 80121fc:	47b0      	blx	r6
 80121fe:	2800      	cmp	r0, #0
 8012200:	dc08      	bgt.n	8012214 <__sflush_r+0xfc>
 8012202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801220a:	81a3      	strh	r3, [r4, #12]
 801220c:	f04f 30ff 	mov.w	r0, #4294967295
 8012210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012214:	4407      	add	r7, r0
 8012216:	eba8 0800 	sub.w	r8, r8, r0
 801221a:	e7e7      	b.n	80121ec <__sflush_r+0xd4>
 801221c:	dfbffffe 	.word	0xdfbffffe

08012220 <_fflush_r>:
 8012220:	b538      	push	{r3, r4, r5, lr}
 8012222:	690b      	ldr	r3, [r1, #16]
 8012224:	4605      	mov	r5, r0
 8012226:	460c      	mov	r4, r1
 8012228:	b913      	cbnz	r3, 8012230 <_fflush_r+0x10>
 801222a:	2500      	movs	r5, #0
 801222c:	4628      	mov	r0, r5
 801222e:	bd38      	pop	{r3, r4, r5, pc}
 8012230:	b118      	cbz	r0, 801223a <_fflush_r+0x1a>
 8012232:	6a03      	ldr	r3, [r0, #32]
 8012234:	b90b      	cbnz	r3, 801223a <_fflush_r+0x1a>
 8012236:	f7fd f89d 	bl	800f374 <__sinit>
 801223a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d0f3      	beq.n	801222a <_fflush_r+0xa>
 8012242:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012244:	07d0      	lsls	r0, r2, #31
 8012246:	d404      	bmi.n	8012252 <_fflush_r+0x32>
 8012248:	0599      	lsls	r1, r3, #22
 801224a:	d402      	bmi.n	8012252 <_fflush_r+0x32>
 801224c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801224e:	f7fd faf0 	bl	800f832 <__retarget_lock_acquire_recursive>
 8012252:	4628      	mov	r0, r5
 8012254:	4621      	mov	r1, r4
 8012256:	f7ff ff5f 	bl	8012118 <__sflush_r>
 801225a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801225c:	07da      	lsls	r2, r3, #31
 801225e:	4605      	mov	r5, r0
 8012260:	d4e4      	bmi.n	801222c <_fflush_r+0xc>
 8012262:	89a3      	ldrh	r3, [r4, #12]
 8012264:	059b      	lsls	r3, r3, #22
 8012266:	d4e1      	bmi.n	801222c <_fflush_r+0xc>
 8012268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801226a:	f7fd fae3 	bl	800f834 <__retarget_lock_release_recursive>
 801226e:	e7dd      	b.n	801222c <_fflush_r+0xc>

08012270 <__swhatbuf_r>:
 8012270:	b570      	push	{r4, r5, r6, lr}
 8012272:	460c      	mov	r4, r1
 8012274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012278:	2900      	cmp	r1, #0
 801227a:	b096      	sub	sp, #88	@ 0x58
 801227c:	4615      	mov	r5, r2
 801227e:	461e      	mov	r6, r3
 8012280:	da0d      	bge.n	801229e <__swhatbuf_r+0x2e>
 8012282:	89a3      	ldrh	r3, [r4, #12]
 8012284:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012288:	f04f 0100 	mov.w	r1, #0
 801228c:	bf14      	ite	ne
 801228e:	2340      	movne	r3, #64	@ 0x40
 8012290:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012294:	2000      	movs	r0, #0
 8012296:	6031      	str	r1, [r6, #0]
 8012298:	602b      	str	r3, [r5, #0]
 801229a:	b016      	add	sp, #88	@ 0x58
 801229c:	bd70      	pop	{r4, r5, r6, pc}
 801229e:	466a      	mov	r2, sp
 80122a0:	f000 f874 	bl	801238c <_fstat_r>
 80122a4:	2800      	cmp	r0, #0
 80122a6:	dbec      	blt.n	8012282 <__swhatbuf_r+0x12>
 80122a8:	9901      	ldr	r1, [sp, #4]
 80122aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80122ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80122b2:	4259      	negs	r1, r3
 80122b4:	4159      	adcs	r1, r3
 80122b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80122ba:	e7eb      	b.n	8012294 <__swhatbuf_r+0x24>

080122bc <__smakebuf_r>:
 80122bc:	898b      	ldrh	r3, [r1, #12]
 80122be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122c0:	079d      	lsls	r5, r3, #30
 80122c2:	4606      	mov	r6, r0
 80122c4:	460c      	mov	r4, r1
 80122c6:	d507      	bpl.n	80122d8 <__smakebuf_r+0x1c>
 80122c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80122cc:	6023      	str	r3, [r4, #0]
 80122ce:	6123      	str	r3, [r4, #16]
 80122d0:	2301      	movs	r3, #1
 80122d2:	6163      	str	r3, [r4, #20]
 80122d4:	b003      	add	sp, #12
 80122d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122d8:	ab01      	add	r3, sp, #4
 80122da:	466a      	mov	r2, sp
 80122dc:	f7ff ffc8 	bl	8012270 <__swhatbuf_r>
 80122e0:	9f00      	ldr	r7, [sp, #0]
 80122e2:	4605      	mov	r5, r0
 80122e4:	4639      	mov	r1, r7
 80122e6:	4630      	mov	r0, r6
 80122e8:	f7fc f8c0 	bl	800e46c <_malloc_r>
 80122ec:	b948      	cbnz	r0, 8012302 <__smakebuf_r+0x46>
 80122ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122f2:	059a      	lsls	r2, r3, #22
 80122f4:	d4ee      	bmi.n	80122d4 <__smakebuf_r+0x18>
 80122f6:	f023 0303 	bic.w	r3, r3, #3
 80122fa:	f043 0302 	orr.w	r3, r3, #2
 80122fe:	81a3      	strh	r3, [r4, #12]
 8012300:	e7e2      	b.n	80122c8 <__smakebuf_r+0xc>
 8012302:	89a3      	ldrh	r3, [r4, #12]
 8012304:	6020      	str	r0, [r4, #0]
 8012306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801230a:	81a3      	strh	r3, [r4, #12]
 801230c:	9b01      	ldr	r3, [sp, #4]
 801230e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012312:	b15b      	cbz	r3, 801232c <__smakebuf_r+0x70>
 8012314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012318:	4630      	mov	r0, r6
 801231a:	f000 f849 	bl	80123b0 <_isatty_r>
 801231e:	b128      	cbz	r0, 801232c <__smakebuf_r+0x70>
 8012320:	89a3      	ldrh	r3, [r4, #12]
 8012322:	f023 0303 	bic.w	r3, r3, #3
 8012326:	f043 0301 	orr.w	r3, r3, #1
 801232a:	81a3      	strh	r3, [r4, #12]
 801232c:	89a3      	ldrh	r3, [r4, #12]
 801232e:	431d      	orrs	r5, r3
 8012330:	81a5      	strh	r5, [r4, #12]
 8012332:	e7cf      	b.n	80122d4 <__smakebuf_r+0x18>

08012334 <memmove>:
 8012334:	4288      	cmp	r0, r1
 8012336:	b510      	push	{r4, lr}
 8012338:	eb01 0402 	add.w	r4, r1, r2
 801233c:	d902      	bls.n	8012344 <memmove+0x10>
 801233e:	4284      	cmp	r4, r0
 8012340:	4623      	mov	r3, r4
 8012342:	d807      	bhi.n	8012354 <memmove+0x20>
 8012344:	1e43      	subs	r3, r0, #1
 8012346:	42a1      	cmp	r1, r4
 8012348:	d008      	beq.n	801235c <memmove+0x28>
 801234a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801234e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012352:	e7f8      	b.n	8012346 <memmove+0x12>
 8012354:	4402      	add	r2, r0
 8012356:	4601      	mov	r1, r0
 8012358:	428a      	cmp	r2, r1
 801235a:	d100      	bne.n	801235e <memmove+0x2a>
 801235c:	bd10      	pop	{r4, pc}
 801235e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012366:	e7f7      	b.n	8012358 <memmove+0x24>

08012368 <strncmp>:
 8012368:	b510      	push	{r4, lr}
 801236a:	b16a      	cbz	r2, 8012388 <strncmp+0x20>
 801236c:	3901      	subs	r1, #1
 801236e:	1884      	adds	r4, r0, r2
 8012370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012374:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012378:	429a      	cmp	r2, r3
 801237a:	d103      	bne.n	8012384 <strncmp+0x1c>
 801237c:	42a0      	cmp	r0, r4
 801237e:	d001      	beq.n	8012384 <strncmp+0x1c>
 8012380:	2a00      	cmp	r2, #0
 8012382:	d1f5      	bne.n	8012370 <strncmp+0x8>
 8012384:	1ad0      	subs	r0, r2, r3
 8012386:	bd10      	pop	{r4, pc}
 8012388:	4610      	mov	r0, r2
 801238a:	e7fc      	b.n	8012386 <strncmp+0x1e>

0801238c <_fstat_r>:
 801238c:	b538      	push	{r3, r4, r5, lr}
 801238e:	4d07      	ldr	r5, [pc, #28]	@ (80123ac <_fstat_r+0x20>)
 8012390:	2300      	movs	r3, #0
 8012392:	4604      	mov	r4, r0
 8012394:	4608      	mov	r0, r1
 8012396:	4611      	mov	r1, r2
 8012398:	602b      	str	r3, [r5, #0]
 801239a:	f7f2 f859 	bl	8004450 <_fstat>
 801239e:	1c43      	adds	r3, r0, #1
 80123a0:	d102      	bne.n	80123a8 <_fstat_r+0x1c>
 80123a2:	682b      	ldr	r3, [r5, #0]
 80123a4:	b103      	cbz	r3, 80123a8 <_fstat_r+0x1c>
 80123a6:	6023      	str	r3, [r4, #0]
 80123a8:	bd38      	pop	{r3, r4, r5, pc}
 80123aa:	bf00      	nop
 80123ac:	200033d0 	.word	0x200033d0

080123b0 <_isatty_r>:
 80123b0:	b538      	push	{r3, r4, r5, lr}
 80123b2:	4d06      	ldr	r5, [pc, #24]	@ (80123cc <_isatty_r+0x1c>)
 80123b4:	2300      	movs	r3, #0
 80123b6:	4604      	mov	r4, r0
 80123b8:	4608      	mov	r0, r1
 80123ba:	602b      	str	r3, [r5, #0]
 80123bc:	f7f2 f858 	bl	8004470 <_isatty>
 80123c0:	1c43      	adds	r3, r0, #1
 80123c2:	d102      	bne.n	80123ca <_isatty_r+0x1a>
 80123c4:	682b      	ldr	r3, [r5, #0]
 80123c6:	b103      	cbz	r3, 80123ca <_isatty_r+0x1a>
 80123c8:	6023      	str	r3, [r4, #0]
 80123ca:	bd38      	pop	{r3, r4, r5, pc}
 80123cc:	200033d0 	.word	0x200033d0

080123d0 <memcpy>:
 80123d0:	440a      	add	r2, r1
 80123d2:	4291      	cmp	r1, r2
 80123d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80123d8:	d100      	bne.n	80123dc <memcpy+0xc>
 80123da:	4770      	bx	lr
 80123dc:	b510      	push	{r4, lr}
 80123de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80123e6:	4291      	cmp	r1, r2
 80123e8:	d1f9      	bne.n	80123de <memcpy+0xe>
 80123ea:	bd10      	pop	{r4, pc}
 80123ec:	0000      	movs	r0, r0
	...

080123f0 <nan>:
 80123f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80123f8 <nan+0x8>
 80123f4:	4770      	bx	lr
 80123f6:	bf00      	nop
 80123f8:	00000000 	.word	0x00000000
 80123fc:	7ff80000 	.word	0x7ff80000

08012400 <__assert_func>:
 8012400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012402:	4614      	mov	r4, r2
 8012404:	461a      	mov	r2, r3
 8012406:	4b09      	ldr	r3, [pc, #36]	@ (801242c <__assert_func+0x2c>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	4605      	mov	r5, r0
 801240c:	68d8      	ldr	r0, [r3, #12]
 801240e:	b954      	cbnz	r4, 8012426 <__assert_func+0x26>
 8012410:	4b07      	ldr	r3, [pc, #28]	@ (8012430 <__assert_func+0x30>)
 8012412:	461c      	mov	r4, r3
 8012414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012418:	9100      	str	r1, [sp, #0]
 801241a:	462b      	mov	r3, r5
 801241c:	4905      	ldr	r1, [pc, #20]	@ (8012434 <__assert_func+0x34>)
 801241e:	f000 fba7 	bl	8012b70 <fiprintf>
 8012422:	f000 fbb7 	bl	8012b94 <abort>
 8012426:	4b04      	ldr	r3, [pc, #16]	@ (8012438 <__assert_func+0x38>)
 8012428:	e7f4      	b.n	8012414 <__assert_func+0x14>
 801242a:	bf00      	nop
 801242c:	20000084 	.word	0x20000084
 8012430:	08014165 	.word	0x08014165
 8012434:	08014137 	.word	0x08014137
 8012438:	0801412a 	.word	0x0801412a

0801243c <_calloc_r>:
 801243c:	b570      	push	{r4, r5, r6, lr}
 801243e:	fba1 5402 	umull	r5, r4, r1, r2
 8012442:	b93c      	cbnz	r4, 8012454 <_calloc_r+0x18>
 8012444:	4629      	mov	r1, r5
 8012446:	f7fc f811 	bl	800e46c <_malloc_r>
 801244a:	4606      	mov	r6, r0
 801244c:	b928      	cbnz	r0, 801245a <_calloc_r+0x1e>
 801244e:	2600      	movs	r6, #0
 8012450:	4630      	mov	r0, r6
 8012452:	bd70      	pop	{r4, r5, r6, pc}
 8012454:	220c      	movs	r2, #12
 8012456:	6002      	str	r2, [r0, #0]
 8012458:	e7f9      	b.n	801244e <_calloc_r+0x12>
 801245a:	462a      	mov	r2, r5
 801245c:	4621      	mov	r1, r4
 801245e:	f7fd f95b 	bl	800f718 <memset>
 8012462:	e7f5      	b.n	8012450 <_calloc_r+0x14>

08012464 <rshift>:
 8012464:	6903      	ldr	r3, [r0, #16]
 8012466:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801246a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801246e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012472:	f100 0414 	add.w	r4, r0, #20
 8012476:	dd45      	ble.n	8012504 <rshift+0xa0>
 8012478:	f011 011f 	ands.w	r1, r1, #31
 801247c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012480:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012484:	d10c      	bne.n	80124a0 <rshift+0x3c>
 8012486:	f100 0710 	add.w	r7, r0, #16
 801248a:	4629      	mov	r1, r5
 801248c:	42b1      	cmp	r1, r6
 801248e:	d334      	bcc.n	80124fa <rshift+0x96>
 8012490:	1a9b      	subs	r3, r3, r2
 8012492:	009b      	lsls	r3, r3, #2
 8012494:	1eea      	subs	r2, r5, #3
 8012496:	4296      	cmp	r6, r2
 8012498:	bf38      	it	cc
 801249a:	2300      	movcc	r3, #0
 801249c:	4423      	add	r3, r4
 801249e:	e015      	b.n	80124cc <rshift+0x68>
 80124a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80124a4:	f1c1 0820 	rsb	r8, r1, #32
 80124a8:	40cf      	lsrs	r7, r1
 80124aa:	f105 0e04 	add.w	lr, r5, #4
 80124ae:	46a1      	mov	r9, r4
 80124b0:	4576      	cmp	r6, lr
 80124b2:	46f4      	mov	ip, lr
 80124b4:	d815      	bhi.n	80124e2 <rshift+0x7e>
 80124b6:	1a9a      	subs	r2, r3, r2
 80124b8:	0092      	lsls	r2, r2, #2
 80124ba:	3a04      	subs	r2, #4
 80124bc:	3501      	adds	r5, #1
 80124be:	42ae      	cmp	r6, r5
 80124c0:	bf38      	it	cc
 80124c2:	2200      	movcc	r2, #0
 80124c4:	18a3      	adds	r3, r4, r2
 80124c6:	50a7      	str	r7, [r4, r2]
 80124c8:	b107      	cbz	r7, 80124cc <rshift+0x68>
 80124ca:	3304      	adds	r3, #4
 80124cc:	1b1a      	subs	r2, r3, r4
 80124ce:	42a3      	cmp	r3, r4
 80124d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80124d4:	bf08      	it	eq
 80124d6:	2300      	moveq	r3, #0
 80124d8:	6102      	str	r2, [r0, #16]
 80124da:	bf08      	it	eq
 80124dc:	6143      	streq	r3, [r0, #20]
 80124de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124e2:	f8dc c000 	ldr.w	ip, [ip]
 80124e6:	fa0c fc08 	lsl.w	ip, ip, r8
 80124ea:	ea4c 0707 	orr.w	r7, ip, r7
 80124ee:	f849 7b04 	str.w	r7, [r9], #4
 80124f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80124f6:	40cf      	lsrs	r7, r1
 80124f8:	e7da      	b.n	80124b0 <rshift+0x4c>
 80124fa:	f851 cb04 	ldr.w	ip, [r1], #4
 80124fe:	f847 cf04 	str.w	ip, [r7, #4]!
 8012502:	e7c3      	b.n	801248c <rshift+0x28>
 8012504:	4623      	mov	r3, r4
 8012506:	e7e1      	b.n	80124cc <rshift+0x68>

08012508 <__hexdig_fun>:
 8012508:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801250c:	2b09      	cmp	r3, #9
 801250e:	d802      	bhi.n	8012516 <__hexdig_fun+0xe>
 8012510:	3820      	subs	r0, #32
 8012512:	b2c0      	uxtb	r0, r0
 8012514:	4770      	bx	lr
 8012516:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801251a:	2b05      	cmp	r3, #5
 801251c:	d801      	bhi.n	8012522 <__hexdig_fun+0x1a>
 801251e:	3847      	subs	r0, #71	@ 0x47
 8012520:	e7f7      	b.n	8012512 <__hexdig_fun+0xa>
 8012522:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012526:	2b05      	cmp	r3, #5
 8012528:	d801      	bhi.n	801252e <__hexdig_fun+0x26>
 801252a:	3827      	subs	r0, #39	@ 0x27
 801252c:	e7f1      	b.n	8012512 <__hexdig_fun+0xa>
 801252e:	2000      	movs	r0, #0
 8012530:	4770      	bx	lr
	...

08012534 <__gethex>:
 8012534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012538:	b085      	sub	sp, #20
 801253a:	468a      	mov	sl, r1
 801253c:	9302      	str	r3, [sp, #8]
 801253e:	680b      	ldr	r3, [r1, #0]
 8012540:	9001      	str	r0, [sp, #4]
 8012542:	4690      	mov	r8, r2
 8012544:	1c9c      	adds	r4, r3, #2
 8012546:	46a1      	mov	r9, r4
 8012548:	f814 0b01 	ldrb.w	r0, [r4], #1
 801254c:	2830      	cmp	r0, #48	@ 0x30
 801254e:	d0fa      	beq.n	8012546 <__gethex+0x12>
 8012550:	eba9 0303 	sub.w	r3, r9, r3
 8012554:	f1a3 0b02 	sub.w	fp, r3, #2
 8012558:	f7ff ffd6 	bl	8012508 <__hexdig_fun>
 801255c:	4605      	mov	r5, r0
 801255e:	2800      	cmp	r0, #0
 8012560:	d168      	bne.n	8012634 <__gethex+0x100>
 8012562:	49a0      	ldr	r1, [pc, #640]	@ (80127e4 <__gethex+0x2b0>)
 8012564:	2201      	movs	r2, #1
 8012566:	4648      	mov	r0, r9
 8012568:	f7ff fefe 	bl	8012368 <strncmp>
 801256c:	4607      	mov	r7, r0
 801256e:	2800      	cmp	r0, #0
 8012570:	d167      	bne.n	8012642 <__gethex+0x10e>
 8012572:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012576:	4626      	mov	r6, r4
 8012578:	f7ff ffc6 	bl	8012508 <__hexdig_fun>
 801257c:	2800      	cmp	r0, #0
 801257e:	d062      	beq.n	8012646 <__gethex+0x112>
 8012580:	4623      	mov	r3, r4
 8012582:	7818      	ldrb	r0, [r3, #0]
 8012584:	2830      	cmp	r0, #48	@ 0x30
 8012586:	4699      	mov	r9, r3
 8012588:	f103 0301 	add.w	r3, r3, #1
 801258c:	d0f9      	beq.n	8012582 <__gethex+0x4e>
 801258e:	f7ff ffbb 	bl	8012508 <__hexdig_fun>
 8012592:	fab0 f580 	clz	r5, r0
 8012596:	096d      	lsrs	r5, r5, #5
 8012598:	f04f 0b01 	mov.w	fp, #1
 801259c:	464a      	mov	r2, r9
 801259e:	4616      	mov	r6, r2
 80125a0:	3201      	adds	r2, #1
 80125a2:	7830      	ldrb	r0, [r6, #0]
 80125a4:	f7ff ffb0 	bl	8012508 <__hexdig_fun>
 80125a8:	2800      	cmp	r0, #0
 80125aa:	d1f8      	bne.n	801259e <__gethex+0x6a>
 80125ac:	498d      	ldr	r1, [pc, #564]	@ (80127e4 <__gethex+0x2b0>)
 80125ae:	2201      	movs	r2, #1
 80125b0:	4630      	mov	r0, r6
 80125b2:	f7ff fed9 	bl	8012368 <strncmp>
 80125b6:	2800      	cmp	r0, #0
 80125b8:	d13f      	bne.n	801263a <__gethex+0x106>
 80125ba:	b944      	cbnz	r4, 80125ce <__gethex+0x9a>
 80125bc:	1c74      	adds	r4, r6, #1
 80125be:	4622      	mov	r2, r4
 80125c0:	4616      	mov	r6, r2
 80125c2:	3201      	adds	r2, #1
 80125c4:	7830      	ldrb	r0, [r6, #0]
 80125c6:	f7ff ff9f 	bl	8012508 <__hexdig_fun>
 80125ca:	2800      	cmp	r0, #0
 80125cc:	d1f8      	bne.n	80125c0 <__gethex+0x8c>
 80125ce:	1ba4      	subs	r4, r4, r6
 80125d0:	00a7      	lsls	r7, r4, #2
 80125d2:	7833      	ldrb	r3, [r6, #0]
 80125d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80125d8:	2b50      	cmp	r3, #80	@ 0x50
 80125da:	d13e      	bne.n	801265a <__gethex+0x126>
 80125dc:	7873      	ldrb	r3, [r6, #1]
 80125de:	2b2b      	cmp	r3, #43	@ 0x2b
 80125e0:	d033      	beq.n	801264a <__gethex+0x116>
 80125e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80125e4:	d034      	beq.n	8012650 <__gethex+0x11c>
 80125e6:	1c71      	adds	r1, r6, #1
 80125e8:	2400      	movs	r4, #0
 80125ea:	7808      	ldrb	r0, [r1, #0]
 80125ec:	f7ff ff8c 	bl	8012508 <__hexdig_fun>
 80125f0:	1e43      	subs	r3, r0, #1
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	2b18      	cmp	r3, #24
 80125f6:	d830      	bhi.n	801265a <__gethex+0x126>
 80125f8:	f1a0 0210 	sub.w	r2, r0, #16
 80125fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012600:	f7ff ff82 	bl	8012508 <__hexdig_fun>
 8012604:	f100 3cff 	add.w	ip, r0, #4294967295
 8012608:	fa5f fc8c 	uxtb.w	ip, ip
 801260c:	f1bc 0f18 	cmp.w	ip, #24
 8012610:	f04f 030a 	mov.w	r3, #10
 8012614:	d91e      	bls.n	8012654 <__gethex+0x120>
 8012616:	b104      	cbz	r4, 801261a <__gethex+0xe6>
 8012618:	4252      	negs	r2, r2
 801261a:	4417      	add	r7, r2
 801261c:	f8ca 1000 	str.w	r1, [sl]
 8012620:	b1ed      	cbz	r5, 801265e <__gethex+0x12a>
 8012622:	f1bb 0f00 	cmp.w	fp, #0
 8012626:	bf0c      	ite	eq
 8012628:	2506      	moveq	r5, #6
 801262a:	2500      	movne	r5, #0
 801262c:	4628      	mov	r0, r5
 801262e:	b005      	add	sp, #20
 8012630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012634:	2500      	movs	r5, #0
 8012636:	462c      	mov	r4, r5
 8012638:	e7b0      	b.n	801259c <__gethex+0x68>
 801263a:	2c00      	cmp	r4, #0
 801263c:	d1c7      	bne.n	80125ce <__gethex+0x9a>
 801263e:	4627      	mov	r7, r4
 8012640:	e7c7      	b.n	80125d2 <__gethex+0x9e>
 8012642:	464e      	mov	r6, r9
 8012644:	462f      	mov	r7, r5
 8012646:	2501      	movs	r5, #1
 8012648:	e7c3      	b.n	80125d2 <__gethex+0x9e>
 801264a:	2400      	movs	r4, #0
 801264c:	1cb1      	adds	r1, r6, #2
 801264e:	e7cc      	b.n	80125ea <__gethex+0xb6>
 8012650:	2401      	movs	r4, #1
 8012652:	e7fb      	b.n	801264c <__gethex+0x118>
 8012654:	fb03 0002 	mla	r0, r3, r2, r0
 8012658:	e7ce      	b.n	80125f8 <__gethex+0xc4>
 801265a:	4631      	mov	r1, r6
 801265c:	e7de      	b.n	801261c <__gethex+0xe8>
 801265e:	eba6 0309 	sub.w	r3, r6, r9
 8012662:	3b01      	subs	r3, #1
 8012664:	4629      	mov	r1, r5
 8012666:	2b07      	cmp	r3, #7
 8012668:	dc0a      	bgt.n	8012680 <__gethex+0x14c>
 801266a:	9801      	ldr	r0, [sp, #4]
 801266c:	f7fd ff82 	bl	8010574 <_Balloc>
 8012670:	4604      	mov	r4, r0
 8012672:	b940      	cbnz	r0, 8012686 <__gethex+0x152>
 8012674:	4b5c      	ldr	r3, [pc, #368]	@ (80127e8 <__gethex+0x2b4>)
 8012676:	4602      	mov	r2, r0
 8012678:	21e4      	movs	r1, #228	@ 0xe4
 801267a:	485c      	ldr	r0, [pc, #368]	@ (80127ec <__gethex+0x2b8>)
 801267c:	f7ff fec0 	bl	8012400 <__assert_func>
 8012680:	3101      	adds	r1, #1
 8012682:	105b      	asrs	r3, r3, #1
 8012684:	e7ef      	b.n	8012666 <__gethex+0x132>
 8012686:	f100 0a14 	add.w	sl, r0, #20
 801268a:	2300      	movs	r3, #0
 801268c:	4655      	mov	r5, sl
 801268e:	469b      	mov	fp, r3
 8012690:	45b1      	cmp	r9, r6
 8012692:	d337      	bcc.n	8012704 <__gethex+0x1d0>
 8012694:	f845 bb04 	str.w	fp, [r5], #4
 8012698:	eba5 050a 	sub.w	r5, r5, sl
 801269c:	10ad      	asrs	r5, r5, #2
 801269e:	6125      	str	r5, [r4, #16]
 80126a0:	4658      	mov	r0, fp
 80126a2:	f7fe f859 	bl	8010758 <__hi0bits>
 80126a6:	016d      	lsls	r5, r5, #5
 80126a8:	f8d8 6000 	ldr.w	r6, [r8]
 80126ac:	1a2d      	subs	r5, r5, r0
 80126ae:	42b5      	cmp	r5, r6
 80126b0:	dd54      	ble.n	801275c <__gethex+0x228>
 80126b2:	1bad      	subs	r5, r5, r6
 80126b4:	4629      	mov	r1, r5
 80126b6:	4620      	mov	r0, r4
 80126b8:	f7fe fbed 	bl	8010e96 <__any_on>
 80126bc:	4681      	mov	r9, r0
 80126be:	b178      	cbz	r0, 80126e0 <__gethex+0x1ac>
 80126c0:	1e6b      	subs	r3, r5, #1
 80126c2:	1159      	asrs	r1, r3, #5
 80126c4:	f003 021f 	and.w	r2, r3, #31
 80126c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80126cc:	f04f 0901 	mov.w	r9, #1
 80126d0:	fa09 f202 	lsl.w	r2, r9, r2
 80126d4:	420a      	tst	r2, r1
 80126d6:	d003      	beq.n	80126e0 <__gethex+0x1ac>
 80126d8:	454b      	cmp	r3, r9
 80126da:	dc36      	bgt.n	801274a <__gethex+0x216>
 80126dc:	f04f 0902 	mov.w	r9, #2
 80126e0:	4629      	mov	r1, r5
 80126e2:	4620      	mov	r0, r4
 80126e4:	f7ff febe 	bl	8012464 <rshift>
 80126e8:	442f      	add	r7, r5
 80126ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80126ee:	42bb      	cmp	r3, r7
 80126f0:	da42      	bge.n	8012778 <__gethex+0x244>
 80126f2:	9801      	ldr	r0, [sp, #4]
 80126f4:	4621      	mov	r1, r4
 80126f6:	f7fd ff7d 	bl	80105f4 <_Bfree>
 80126fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80126fc:	2300      	movs	r3, #0
 80126fe:	6013      	str	r3, [r2, #0]
 8012700:	25a3      	movs	r5, #163	@ 0xa3
 8012702:	e793      	b.n	801262c <__gethex+0xf8>
 8012704:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012708:	2a2e      	cmp	r2, #46	@ 0x2e
 801270a:	d012      	beq.n	8012732 <__gethex+0x1fe>
 801270c:	2b20      	cmp	r3, #32
 801270e:	d104      	bne.n	801271a <__gethex+0x1e6>
 8012710:	f845 bb04 	str.w	fp, [r5], #4
 8012714:	f04f 0b00 	mov.w	fp, #0
 8012718:	465b      	mov	r3, fp
 801271a:	7830      	ldrb	r0, [r6, #0]
 801271c:	9303      	str	r3, [sp, #12]
 801271e:	f7ff fef3 	bl	8012508 <__hexdig_fun>
 8012722:	9b03      	ldr	r3, [sp, #12]
 8012724:	f000 000f 	and.w	r0, r0, #15
 8012728:	4098      	lsls	r0, r3
 801272a:	ea4b 0b00 	orr.w	fp, fp, r0
 801272e:	3304      	adds	r3, #4
 8012730:	e7ae      	b.n	8012690 <__gethex+0x15c>
 8012732:	45b1      	cmp	r9, r6
 8012734:	d8ea      	bhi.n	801270c <__gethex+0x1d8>
 8012736:	492b      	ldr	r1, [pc, #172]	@ (80127e4 <__gethex+0x2b0>)
 8012738:	9303      	str	r3, [sp, #12]
 801273a:	2201      	movs	r2, #1
 801273c:	4630      	mov	r0, r6
 801273e:	f7ff fe13 	bl	8012368 <strncmp>
 8012742:	9b03      	ldr	r3, [sp, #12]
 8012744:	2800      	cmp	r0, #0
 8012746:	d1e1      	bne.n	801270c <__gethex+0x1d8>
 8012748:	e7a2      	b.n	8012690 <__gethex+0x15c>
 801274a:	1ea9      	subs	r1, r5, #2
 801274c:	4620      	mov	r0, r4
 801274e:	f7fe fba2 	bl	8010e96 <__any_on>
 8012752:	2800      	cmp	r0, #0
 8012754:	d0c2      	beq.n	80126dc <__gethex+0x1a8>
 8012756:	f04f 0903 	mov.w	r9, #3
 801275a:	e7c1      	b.n	80126e0 <__gethex+0x1ac>
 801275c:	da09      	bge.n	8012772 <__gethex+0x23e>
 801275e:	1b75      	subs	r5, r6, r5
 8012760:	4621      	mov	r1, r4
 8012762:	9801      	ldr	r0, [sp, #4]
 8012764:	462a      	mov	r2, r5
 8012766:	f7fe f95d 	bl	8010a24 <__lshift>
 801276a:	1b7f      	subs	r7, r7, r5
 801276c:	4604      	mov	r4, r0
 801276e:	f100 0a14 	add.w	sl, r0, #20
 8012772:	f04f 0900 	mov.w	r9, #0
 8012776:	e7b8      	b.n	80126ea <__gethex+0x1b6>
 8012778:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801277c:	42bd      	cmp	r5, r7
 801277e:	dd6f      	ble.n	8012860 <__gethex+0x32c>
 8012780:	1bed      	subs	r5, r5, r7
 8012782:	42ae      	cmp	r6, r5
 8012784:	dc34      	bgt.n	80127f0 <__gethex+0x2bc>
 8012786:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801278a:	2b02      	cmp	r3, #2
 801278c:	d022      	beq.n	80127d4 <__gethex+0x2a0>
 801278e:	2b03      	cmp	r3, #3
 8012790:	d024      	beq.n	80127dc <__gethex+0x2a8>
 8012792:	2b01      	cmp	r3, #1
 8012794:	d115      	bne.n	80127c2 <__gethex+0x28e>
 8012796:	42ae      	cmp	r6, r5
 8012798:	d113      	bne.n	80127c2 <__gethex+0x28e>
 801279a:	2e01      	cmp	r6, #1
 801279c:	d10b      	bne.n	80127b6 <__gethex+0x282>
 801279e:	9a02      	ldr	r2, [sp, #8]
 80127a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80127a4:	6013      	str	r3, [r2, #0]
 80127a6:	2301      	movs	r3, #1
 80127a8:	6123      	str	r3, [r4, #16]
 80127aa:	f8ca 3000 	str.w	r3, [sl]
 80127ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80127b0:	2562      	movs	r5, #98	@ 0x62
 80127b2:	601c      	str	r4, [r3, #0]
 80127b4:	e73a      	b.n	801262c <__gethex+0xf8>
 80127b6:	1e71      	subs	r1, r6, #1
 80127b8:	4620      	mov	r0, r4
 80127ba:	f7fe fb6c 	bl	8010e96 <__any_on>
 80127be:	2800      	cmp	r0, #0
 80127c0:	d1ed      	bne.n	801279e <__gethex+0x26a>
 80127c2:	9801      	ldr	r0, [sp, #4]
 80127c4:	4621      	mov	r1, r4
 80127c6:	f7fd ff15 	bl	80105f4 <_Bfree>
 80127ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80127cc:	2300      	movs	r3, #0
 80127ce:	6013      	str	r3, [r2, #0]
 80127d0:	2550      	movs	r5, #80	@ 0x50
 80127d2:	e72b      	b.n	801262c <__gethex+0xf8>
 80127d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d1f3      	bne.n	80127c2 <__gethex+0x28e>
 80127da:	e7e0      	b.n	801279e <__gethex+0x26a>
 80127dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d1dd      	bne.n	801279e <__gethex+0x26a>
 80127e2:	e7ee      	b.n	80127c2 <__gethex+0x28e>
 80127e4:	08013fb8 	.word	0x08013fb8
 80127e8:	08013e4d 	.word	0x08013e4d
 80127ec:	08014166 	.word	0x08014166
 80127f0:	1e6f      	subs	r7, r5, #1
 80127f2:	f1b9 0f00 	cmp.w	r9, #0
 80127f6:	d130      	bne.n	801285a <__gethex+0x326>
 80127f8:	b127      	cbz	r7, 8012804 <__gethex+0x2d0>
 80127fa:	4639      	mov	r1, r7
 80127fc:	4620      	mov	r0, r4
 80127fe:	f7fe fb4a 	bl	8010e96 <__any_on>
 8012802:	4681      	mov	r9, r0
 8012804:	117a      	asrs	r2, r7, #5
 8012806:	2301      	movs	r3, #1
 8012808:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801280c:	f007 071f 	and.w	r7, r7, #31
 8012810:	40bb      	lsls	r3, r7
 8012812:	4213      	tst	r3, r2
 8012814:	4629      	mov	r1, r5
 8012816:	4620      	mov	r0, r4
 8012818:	bf18      	it	ne
 801281a:	f049 0902 	orrne.w	r9, r9, #2
 801281e:	f7ff fe21 	bl	8012464 <rshift>
 8012822:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012826:	1b76      	subs	r6, r6, r5
 8012828:	2502      	movs	r5, #2
 801282a:	f1b9 0f00 	cmp.w	r9, #0
 801282e:	d047      	beq.n	80128c0 <__gethex+0x38c>
 8012830:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012834:	2b02      	cmp	r3, #2
 8012836:	d015      	beq.n	8012864 <__gethex+0x330>
 8012838:	2b03      	cmp	r3, #3
 801283a:	d017      	beq.n	801286c <__gethex+0x338>
 801283c:	2b01      	cmp	r3, #1
 801283e:	d109      	bne.n	8012854 <__gethex+0x320>
 8012840:	f019 0f02 	tst.w	r9, #2
 8012844:	d006      	beq.n	8012854 <__gethex+0x320>
 8012846:	f8da 3000 	ldr.w	r3, [sl]
 801284a:	ea49 0903 	orr.w	r9, r9, r3
 801284e:	f019 0f01 	tst.w	r9, #1
 8012852:	d10e      	bne.n	8012872 <__gethex+0x33e>
 8012854:	f045 0510 	orr.w	r5, r5, #16
 8012858:	e032      	b.n	80128c0 <__gethex+0x38c>
 801285a:	f04f 0901 	mov.w	r9, #1
 801285e:	e7d1      	b.n	8012804 <__gethex+0x2d0>
 8012860:	2501      	movs	r5, #1
 8012862:	e7e2      	b.n	801282a <__gethex+0x2f6>
 8012864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012866:	f1c3 0301 	rsb	r3, r3, #1
 801286a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801286c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801286e:	2b00      	cmp	r3, #0
 8012870:	d0f0      	beq.n	8012854 <__gethex+0x320>
 8012872:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012876:	f104 0314 	add.w	r3, r4, #20
 801287a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801287e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012882:	f04f 0c00 	mov.w	ip, #0
 8012886:	4618      	mov	r0, r3
 8012888:	f853 2b04 	ldr.w	r2, [r3], #4
 801288c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012890:	d01b      	beq.n	80128ca <__gethex+0x396>
 8012892:	3201      	adds	r2, #1
 8012894:	6002      	str	r2, [r0, #0]
 8012896:	2d02      	cmp	r5, #2
 8012898:	f104 0314 	add.w	r3, r4, #20
 801289c:	d13c      	bne.n	8012918 <__gethex+0x3e4>
 801289e:	f8d8 2000 	ldr.w	r2, [r8]
 80128a2:	3a01      	subs	r2, #1
 80128a4:	42b2      	cmp	r2, r6
 80128a6:	d109      	bne.n	80128bc <__gethex+0x388>
 80128a8:	1171      	asrs	r1, r6, #5
 80128aa:	2201      	movs	r2, #1
 80128ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80128b0:	f006 061f 	and.w	r6, r6, #31
 80128b4:	fa02 f606 	lsl.w	r6, r2, r6
 80128b8:	421e      	tst	r6, r3
 80128ba:	d13a      	bne.n	8012932 <__gethex+0x3fe>
 80128bc:	f045 0520 	orr.w	r5, r5, #32
 80128c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128c2:	601c      	str	r4, [r3, #0]
 80128c4:	9b02      	ldr	r3, [sp, #8]
 80128c6:	601f      	str	r7, [r3, #0]
 80128c8:	e6b0      	b.n	801262c <__gethex+0xf8>
 80128ca:	4299      	cmp	r1, r3
 80128cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80128d0:	d8d9      	bhi.n	8012886 <__gethex+0x352>
 80128d2:	68a3      	ldr	r3, [r4, #8]
 80128d4:	459b      	cmp	fp, r3
 80128d6:	db17      	blt.n	8012908 <__gethex+0x3d4>
 80128d8:	6861      	ldr	r1, [r4, #4]
 80128da:	9801      	ldr	r0, [sp, #4]
 80128dc:	3101      	adds	r1, #1
 80128de:	f7fd fe49 	bl	8010574 <_Balloc>
 80128e2:	4681      	mov	r9, r0
 80128e4:	b918      	cbnz	r0, 80128ee <__gethex+0x3ba>
 80128e6:	4b1a      	ldr	r3, [pc, #104]	@ (8012950 <__gethex+0x41c>)
 80128e8:	4602      	mov	r2, r0
 80128ea:	2184      	movs	r1, #132	@ 0x84
 80128ec:	e6c5      	b.n	801267a <__gethex+0x146>
 80128ee:	6922      	ldr	r2, [r4, #16]
 80128f0:	3202      	adds	r2, #2
 80128f2:	f104 010c 	add.w	r1, r4, #12
 80128f6:	0092      	lsls	r2, r2, #2
 80128f8:	300c      	adds	r0, #12
 80128fa:	f7ff fd69 	bl	80123d0 <memcpy>
 80128fe:	4621      	mov	r1, r4
 8012900:	9801      	ldr	r0, [sp, #4]
 8012902:	f7fd fe77 	bl	80105f4 <_Bfree>
 8012906:	464c      	mov	r4, r9
 8012908:	6923      	ldr	r3, [r4, #16]
 801290a:	1c5a      	adds	r2, r3, #1
 801290c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012910:	6122      	str	r2, [r4, #16]
 8012912:	2201      	movs	r2, #1
 8012914:	615a      	str	r2, [r3, #20]
 8012916:	e7be      	b.n	8012896 <__gethex+0x362>
 8012918:	6922      	ldr	r2, [r4, #16]
 801291a:	455a      	cmp	r2, fp
 801291c:	dd0b      	ble.n	8012936 <__gethex+0x402>
 801291e:	2101      	movs	r1, #1
 8012920:	4620      	mov	r0, r4
 8012922:	f7ff fd9f 	bl	8012464 <rshift>
 8012926:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801292a:	3701      	adds	r7, #1
 801292c:	42bb      	cmp	r3, r7
 801292e:	f6ff aee0 	blt.w	80126f2 <__gethex+0x1be>
 8012932:	2501      	movs	r5, #1
 8012934:	e7c2      	b.n	80128bc <__gethex+0x388>
 8012936:	f016 061f 	ands.w	r6, r6, #31
 801293a:	d0fa      	beq.n	8012932 <__gethex+0x3fe>
 801293c:	4453      	add	r3, sl
 801293e:	f1c6 0620 	rsb	r6, r6, #32
 8012942:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012946:	f7fd ff07 	bl	8010758 <__hi0bits>
 801294a:	42b0      	cmp	r0, r6
 801294c:	dbe7      	blt.n	801291e <__gethex+0x3ea>
 801294e:	e7f0      	b.n	8012932 <__gethex+0x3fe>
 8012950:	08013e4d 	.word	0x08013e4d

08012954 <L_shift>:
 8012954:	f1c2 0208 	rsb	r2, r2, #8
 8012958:	0092      	lsls	r2, r2, #2
 801295a:	b570      	push	{r4, r5, r6, lr}
 801295c:	f1c2 0620 	rsb	r6, r2, #32
 8012960:	6843      	ldr	r3, [r0, #4]
 8012962:	6804      	ldr	r4, [r0, #0]
 8012964:	fa03 f506 	lsl.w	r5, r3, r6
 8012968:	432c      	orrs	r4, r5
 801296a:	40d3      	lsrs	r3, r2
 801296c:	6004      	str	r4, [r0, #0]
 801296e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012972:	4288      	cmp	r0, r1
 8012974:	d3f4      	bcc.n	8012960 <L_shift+0xc>
 8012976:	bd70      	pop	{r4, r5, r6, pc}

08012978 <__match>:
 8012978:	b530      	push	{r4, r5, lr}
 801297a:	6803      	ldr	r3, [r0, #0]
 801297c:	3301      	adds	r3, #1
 801297e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012982:	b914      	cbnz	r4, 801298a <__match+0x12>
 8012984:	6003      	str	r3, [r0, #0]
 8012986:	2001      	movs	r0, #1
 8012988:	bd30      	pop	{r4, r5, pc}
 801298a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801298e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012992:	2d19      	cmp	r5, #25
 8012994:	bf98      	it	ls
 8012996:	3220      	addls	r2, #32
 8012998:	42a2      	cmp	r2, r4
 801299a:	d0f0      	beq.n	801297e <__match+0x6>
 801299c:	2000      	movs	r0, #0
 801299e:	e7f3      	b.n	8012988 <__match+0x10>

080129a0 <__hexnan>:
 80129a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a4:	680b      	ldr	r3, [r1, #0]
 80129a6:	6801      	ldr	r1, [r0, #0]
 80129a8:	115e      	asrs	r6, r3, #5
 80129aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80129ae:	f013 031f 	ands.w	r3, r3, #31
 80129b2:	b087      	sub	sp, #28
 80129b4:	bf18      	it	ne
 80129b6:	3604      	addne	r6, #4
 80129b8:	2500      	movs	r5, #0
 80129ba:	1f37      	subs	r7, r6, #4
 80129bc:	4682      	mov	sl, r0
 80129be:	4690      	mov	r8, r2
 80129c0:	9301      	str	r3, [sp, #4]
 80129c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80129c6:	46b9      	mov	r9, r7
 80129c8:	463c      	mov	r4, r7
 80129ca:	9502      	str	r5, [sp, #8]
 80129cc:	46ab      	mov	fp, r5
 80129ce:	784a      	ldrb	r2, [r1, #1]
 80129d0:	1c4b      	adds	r3, r1, #1
 80129d2:	9303      	str	r3, [sp, #12]
 80129d4:	b342      	cbz	r2, 8012a28 <__hexnan+0x88>
 80129d6:	4610      	mov	r0, r2
 80129d8:	9105      	str	r1, [sp, #20]
 80129da:	9204      	str	r2, [sp, #16]
 80129dc:	f7ff fd94 	bl	8012508 <__hexdig_fun>
 80129e0:	2800      	cmp	r0, #0
 80129e2:	d151      	bne.n	8012a88 <__hexnan+0xe8>
 80129e4:	9a04      	ldr	r2, [sp, #16]
 80129e6:	9905      	ldr	r1, [sp, #20]
 80129e8:	2a20      	cmp	r2, #32
 80129ea:	d818      	bhi.n	8012a1e <__hexnan+0x7e>
 80129ec:	9b02      	ldr	r3, [sp, #8]
 80129ee:	459b      	cmp	fp, r3
 80129f0:	dd13      	ble.n	8012a1a <__hexnan+0x7a>
 80129f2:	454c      	cmp	r4, r9
 80129f4:	d206      	bcs.n	8012a04 <__hexnan+0x64>
 80129f6:	2d07      	cmp	r5, #7
 80129f8:	dc04      	bgt.n	8012a04 <__hexnan+0x64>
 80129fa:	462a      	mov	r2, r5
 80129fc:	4649      	mov	r1, r9
 80129fe:	4620      	mov	r0, r4
 8012a00:	f7ff ffa8 	bl	8012954 <L_shift>
 8012a04:	4544      	cmp	r4, r8
 8012a06:	d952      	bls.n	8012aae <__hexnan+0x10e>
 8012a08:	2300      	movs	r3, #0
 8012a0a:	f1a4 0904 	sub.w	r9, r4, #4
 8012a0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012a12:	f8cd b008 	str.w	fp, [sp, #8]
 8012a16:	464c      	mov	r4, r9
 8012a18:	461d      	mov	r5, r3
 8012a1a:	9903      	ldr	r1, [sp, #12]
 8012a1c:	e7d7      	b.n	80129ce <__hexnan+0x2e>
 8012a1e:	2a29      	cmp	r2, #41	@ 0x29
 8012a20:	d157      	bne.n	8012ad2 <__hexnan+0x132>
 8012a22:	3102      	adds	r1, #2
 8012a24:	f8ca 1000 	str.w	r1, [sl]
 8012a28:	f1bb 0f00 	cmp.w	fp, #0
 8012a2c:	d051      	beq.n	8012ad2 <__hexnan+0x132>
 8012a2e:	454c      	cmp	r4, r9
 8012a30:	d206      	bcs.n	8012a40 <__hexnan+0xa0>
 8012a32:	2d07      	cmp	r5, #7
 8012a34:	dc04      	bgt.n	8012a40 <__hexnan+0xa0>
 8012a36:	462a      	mov	r2, r5
 8012a38:	4649      	mov	r1, r9
 8012a3a:	4620      	mov	r0, r4
 8012a3c:	f7ff ff8a 	bl	8012954 <L_shift>
 8012a40:	4544      	cmp	r4, r8
 8012a42:	d936      	bls.n	8012ab2 <__hexnan+0x112>
 8012a44:	f1a8 0204 	sub.w	r2, r8, #4
 8012a48:	4623      	mov	r3, r4
 8012a4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8012a4e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012a52:	429f      	cmp	r7, r3
 8012a54:	d2f9      	bcs.n	8012a4a <__hexnan+0xaa>
 8012a56:	1b3b      	subs	r3, r7, r4
 8012a58:	f023 0303 	bic.w	r3, r3, #3
 8012a5c:	3304      	adds	r3, #4
 8012a5e:	3401      	adds	r4, #1
 8012a60:	3e03      	subs	r6, #3
 8012a62:	42b4      	cmp	r4, r6
 8012a64:	bf88      	it	hi
 8012a66:	2304      	movhi	r3, #4
 8012a68:	4443      	add	r3, r8
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	f843 2b04 	str.w	r2, [r3], #4
 8012a70:	429f      	cmp	r7, r3
 8012a72:	d2fb      	bcs.n	8012a6c <__hexnan+0xcc>
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	b91b      	cbnz	r3, 8012a80 <__hexnan+0xe0>
 8012a78:	4547      	cmp	r7, r8
 8012a7a:	d128      	bne.n	8012ace <__hexnan+0x12e>
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	603b      	str	r3, [r7, #0]
 8012a80:	2005      	movs	r0, #5
 8012a82:	b007      	add	sp, #28
 8012a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a88:	3501      	adds	r5, #1
 8012a8a:	2d08      	cmp	r5, #8
 8012a8c:	f10b 0b01 	add.w	fp, fp, #1
 8012a90:	dd06      	ble.n	8012aa0 <__hexnan+0x100>
 8012a92:	4544      	cmp	r4, r8
 8012a94:	d9c1      	bls.n	8012a1a <__hexnan+0x7a>
 8012a96:	2300      	movs	r3, #0
 8012a98:	f844 3c04 	str.w	r3, [r4, #-4]
 8012a9c:	2501      	movs	r5, #1
 8012a9e:	3c04      	subs	r4, #4
 8012aa0:	6822      	ldr	r2, [r4, #0]
 8012aa2:	f000 000f 	and.w	r0, r0, #15
 8012aa6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012aaa:	6020      	str	r0, [r4, #0]
 8012aac:	e7b5      	b.n	8012a1a <__hexnan+0x7a>
 8012aae:	2508      	movs	r5, #8
 8012ab0:	e7b3      	b.n	8012a1a <__hexnan+0x7a>
 8012ab2:	9b01      	ldr	r3, [sp, #4]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d0dd      	beq.n	8012a74 <__hexnan+0xd4>
 8012ab8:	f1c3 0320 	rsb	r3, r3, #32
 8012abc:	f04f 32ff 	mov.w	r2, #4294967295
 8012ac0:	40da      	lsrs	r2, r3
 8012ac2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012ac6:	4013      	ands	r3, r2
 8012ac8:	f846 3c04 	str.w	r3, [r6, #-4]
 8012acc:	e7d2      	b.n	8012a74 <__hexnan+0xd4>
 8012ace:	3f04      	subs	r7, #4
 8012ad0:	e7d0      	b.n	8012a74 <__hexnan+0xd4>
 8012ad2:	2004      	movs	r0, #4
 8012ad4:	e7d5      	b.n	8012a82 <__hexnan+0xe2>

08012ad6 <__ascii_mbtowc>:
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	b901      	cbnz	r1, 8012adc <__ascii_mbtowc+0x6>
 8012ada:	a901      	add	r1, sp, #4
 8012adc:	b142      	cbz	r2, 8012af0 <__ascii_mbtowc+0x1a>
 8012ade:	b14b      	cbz	r3, 8012af4 <__ascii_mbtowc+0x1e>
 8012ae0:	7813      	ldrb	r3, [r2, #0]
 8012ae2:	600b      	str	r3, [r1, #0]
 8012ae4:	7812      	ldrb	r2, [r2, #0]
 8012ae6:	1e10      	subs	r0, r2, #0
 8012ae8:	bf18      	it	ne
 8012aea:	2001      	movne	r0, #1
 8012aec:	b002      	add	sp, #8
 8012aee:	4770      	bx	lr
 8012af0:	4610      	mov	r0, r2
 8012af2:	e7fb      	b.n	8012aec <__ascii_mbtowc+0x16>
 8012af4:	f06f 0001 	mvn.w	r0, #1
 8012af8:	e7f8      	b.n	8012aec <__ascii_mbtowc+0x16>

08012afa <_realloc_r>:
 8012afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012afe:	4680      	mov	r8, r0
 8012b00:	4615      	mov	r5, r2
 8012b02:	460c      	mov	r4, r1
 8012b04:	b921      	cbnz	r1, 8012b10 <_realloc_r+0x16>
 8012b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b0a:	4611      	mov	r1, r2
 8012b0c:	f7fb bcae 	b.w	800e46c <_malloc_r>
 8012b10:	b92a      	cbnz	r2, 8012b1e <_realloc_r+0x24>
 8012b12:	f7fd fce5 	bl	80104e0 <_free_r>
 8012b16:	2400      	movs	r4, #0
 8012b18:	4620      	mov	r0, r4
 8012b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b1e:	f000 f840 	bl	8012ba2 <_malloc_usable_size_r>
 8012b22:	4285      	cmp	r5, r0
 8012b24:	4606      	mov	r6, r0
 8012b26:	d802      	bhi.n	8012b2e <_realloc_r+0x34>
 8012b28:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012b2c:	d8f4      	bhi.n	8012b18 <_realloc_r+0x1e>
 8012b2e:	4629      	mov	r1, r5
 8012b30:	4640      	mov	r0, r8
 8012b32:	f7fb fc9b 	bl	800e46c <_malloc_r>
 8012b36:	4607      	mov	r7, r0
 8012b38:	2800      	cmp	r0, #0
 8012b3a:	d0ec      	beq.n	8012b16 <_realloc_r+0x1c>
 8012b3c:	42b5      	cmp	r5, r6
 8012b3e:	462a      	mov	r2, r5
 8012b40:	4621      	mov	r1, r4
 8012b42:	bf28      	it	cs
 8012b44:	4632      	movcs	r2, r6
 8012b46:	f7ff fc43 	bl	80123d0 <memcpy>
 8012b4a:	4621      	mov	r1, r4
 8012b4c:	4640      	mov	r0, r8
 8012b4e:	f7fd fcc7 	bl	80104e0 <_free_r>
 8012b52:	463c      	mov	r4, r7
 8012b54:	e7e0      	b.n	8012b18 <_realloc_r+0x1e>

08012b56 <__ascii_wctomb>:
 8012b56:	4603      	mov	r3, r0
 8012b58:	4608      	mov	r0, r1
 8012b5a:	b141      	cbz	r1, 8012b6e <__ascii_wctomb+0x18>
 8012b5c:	2aff      	cmp	r2, #255	@ 0xff
 8012b5e:	d904      	bls.n	8012b6a <__ascii_wctomb+0x14>
 8012b60:	228a      	movs	r2, #138	@ 0x8a
 8012b62:	601a      	str	r2, [r3, #0]
 8012b64:	f04f 30ff 	mov.w	r0, #4294967295
 8012b68:	4770      	bx	lr
 8012b6a:	700a      	strb	r2, [r1, #0]
 8012b6c:	2001      	movs	r0, #1
 8012b6e:	4770      	bx	lr

08012b70 <fiprintf>:
 8012b70:	b40e      	push	{r1, r2, r3}
 8012b72:	b503      	push	{r0, r1, lr}
 8012b74:	4601      	mov	r1, r0
 8012b76:	ab03      	add	r3, sp, #12
 8012b78:	4805      	ldr	r0, [pc, #20]	@ (8012b90 <fiprintf+0x20>)
 8012b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b7e:	6800      	ldr	r0, [r0, #0]
 8012b80:	9301      	str	r3, [sp, #4]
 8012b82:	f7ff f9b1 	bl	8011ee8 <_vfiprintf_r>
 8012b86:	b002      	add	sp, #8
 8012b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b8c:	b003      	add	sp, #12
 8012b8e:	4770      	bx	lr
 8012b90:	20000084 	.word	0x20000084

08012b94 <abort>:
 8012b94:	b508      	push	{r3, lr}
 8012b96:	2006      	movs	r0, #6
 8012b98:	f000 f834 	bl	8012c04 <raise>
 8012b9c:	2001      	movs	r0, #1
 8012b9e:	f7f1 fc07 	bl	80043b0 <_exit>

08012ba2 <_malloc_usable_size_r>:
 8012ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ba6:	1f18      	subs	r0, r3, #4
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	bfbc      	itt	lt
 8012bac:	580b      	ldrlt	r3, [r1, r0]
 8012bae:	18c0      	addlt	r0, r0, r3
 8012bb0:	4770      	bx	lr

08012bb2 <_raise_r>:
 8012bb2:	291f      	cmp	r1, #31
 8012bb4:	b538      	push	{r3, r4, r5, lr}
 8012bb6:	4605      	mov	r5, r0
 8012bb8:	460c      	mov	r4, r1
 8012bba:	d904      	bls.n	8012bc6 <_raise_r+0x14>
 8012bbc:	2316      	movs	r3, #22
 8012bbe:	6003      	str	r3, [r0, #0]
 8012bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc4:	bd38      	pop	{r3, r4, r5, pc}
 8012bc6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012bc8:	b112      	cbz	r2, 8012bd0 <_raise_r+0x1e>
 8012bca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012bce:	b94b      	cbnz	r3, 8012be4 <_raise_r+0x32>
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	f000 f831 	bl	8012c38 <_getpid_r>
 8012bd6:	4622      	mov	r2, r4
 8012bd8:	4601      	mov	r1, r0
 8012bda:	4628      	mov	r0, r5
 8012bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012be0:	f000 b818 	b.w	8012c14 <_kill_r>
 8012be4:	2b01      	cmp	r3, #1
 8012be6:	d00a      	beq.n	8012bfe <_raise_r+0x4c>
 8012be8:	1c59      	adds	r1, r3, #1
 8012bea:	d103      	bne.n	8012bf4 <_raise_r+0x42>
 8012bec:	2316      	movs	r3, #22
 8012bee:	6003      	str	r3, [r0, #0]
 8012bf0:	2001      	movs	r0, #1
 8012bf2:	e7e7      	b.n	8012bc4 <_raise_r+0x12>
 8012bf4:	2100      	movs	r1, #0
 8012bf6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	4798      	blx	r3
 8012bfe:	2000      	movs	r0, #0
 8012c00:	e7e0      	b.n	8012bc4 <_raise_r+0x12>
	...

08012c04 <raise>:
 8012c04:	4b02      	ldr	r3, [pc, #8]	@ (8012c10 <raise+0xc>)
 8012c06:	4601      	mov	r1, r0
 8012c08:	6818      	ldr	r0, [r3, #0]
 8012c0a:	f7ff bfd2 	b.w	8012bb2 <_raise_r>
 8012c0e:	bf00      	nop
 8012c10:	20000084 	.word	0x20000084

08012c14 <_kill_r>:
 8012c14:	b538      	push	{r3, r4, r5, lr}
 8012c16:	4d07      	ldr	r5, [pc, #28]	@ (8012c34 <_kill_r+0x20>)
 8012c18:	2300      	movs	r3, #0
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	4608      	mov	r0, r1
 8012c1e:	4611      	mov	r1, r2
 8012c20:	602b      	str	r3, [r5, #0]
 8012c22:	f7f1 fbb5 	bl	8004390 <_kill>
 8012c26:	1c43      	adds	r3, r0, #1
 8012c28:	d102      	bne.n	8012c30 <_kill_r+0x1c>
 8012c2a:	682b      	ldr	r3, [r5, #0]
 8012c2c:	b103      	cbz	r3, 8012c30 <_kill_r+0x1c>
 8012c2e:	6023      	str	r3, [r4, #0]
 8012c30:	bd38      	pop	{r3, r4, r5, pc}
 8012c32:	bf00      	nop
 8012c34:	200033d0 	.word	0x200033d0

08012c38 <_getpid_r>:
 8012c38:	f7f1 bba2 	b.w	8004380 <_getpid>

08012c3c <_init>:
 8012c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c3e:	bf00      	nop
 8012c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c42:	bc08      	pop	{r3}
 8012c44:	469e      	mov	lr, r3
 8012c46:	4770      	bx	lr

08012c48 <_fini>:
 8012c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c4a:	bf00      	nop
 8012c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c4e:	bc08      	pop	{r3}
 8012c50:	469e      	mov	lr, r3
 8012c52:	4770      	bx	lr
