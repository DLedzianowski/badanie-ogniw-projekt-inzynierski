
badanie-ogniw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001248  0800ed80  0800ed80  0000fd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffc8  0800ffc8  000111f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffc8  0800ffc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffd0  0800ffd0  000111f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffd0  0800ffd0  00010fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ffd4  0800ffd4  00010fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800ffd8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a68  200001f4  080101cc  000111f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c5c  080101cc  00011c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a754  00000000  00000000  00011224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ce  00000000  00000000  0002b978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  0002fc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c5  00000000  00000000  00031248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6a6  00000000  00000000  0003230d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e9f  00000000  00000000  0005d9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1034  00000000  00000000  00080852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00171886  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fd4  00000000  00000000  001718cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  001788a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ed64 	.word	0x0800ed64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0800ed64 	.word	0x0800ed64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010d2:	7b3b      	ldrb	r3, [r7, #12]
 80010d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e2:	480c      	ldr	r0, [pc, #48]	@ (8001114 <BMP280_Read8+0x50>)
 80010e4:	f002 fe9a 	bl	8003e1c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <BMP280_Read8+0x54>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f107 020c 	add.w	r2, r7, #12
 80010f0:	f107 010c 	add.w	r1, r7, #12
 80010f4:	230a      	movs	r3, #10
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2302      	movs	r3, #2
 80010fa:	f004 fc01 	bl	8005900 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001104:	4803      	ldr	r0, [pc, #12]	@ (8001114 <BMP280_Read8+0x50>)
 8001106:	f002 fe89 	bl	8003e1c <HAL_GPIO_WritePin>
	return tmp[1];
 800110a:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000
 8001118:	20000210 	.word	0x20000210

0800111c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800112a:	7b3b      	ldrb	r3, [r7, #12]
 800112c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001130:	b2db      	uxtb	r3, r3
 8001132:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800113a:	4810      	ldr	r0, [pc, #64]	@ (800117c <BMP280_Read16+0x60>)
 800113c:	f002 fe6e 	bl	8003e1c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <BMP280_Read16+0x64>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	f107 010c 	add.w	r1, r7, #12
 800114c:	230a      	movs	r3, #10
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2303      	movs	r3, #3
 8001152:	f004 fbd5 	bl	8005900 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800115c:	4807      	ldr	r0, [pc, #28]	@ (800117c <BMP280_Read16+0x60>)
 800115e:	f002 fe5d 	bl	8003e1c <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	7bbb      	ldrb	r3, [r7, #14]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	b29b      	uxth	r3, r3
#endif
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	20000210 	.word	0x20000210

08001184 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffc3 	bl	800111c <BMP280_Read16>
 8001196:	4603      	mov	r3, r0
 8001198:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	b29b      	uxth	r3, r3
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 80011cc:	7b3b      	ldrb	r3, [r7, #12]
 80011ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <BMP280_Write8+0x58>)
 80011e2:	f002 fe1b 	bl	8003e1c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <BMP280_Write8+0x5c>)
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	f107 010c 	add.w	r1, r7, #12
 80011f2:	230a      	movs	r3, #10
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2302      	movs	r3, #2
 80011f8:	f004 fb82 	bl	8005900 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001202:	4803      	ldr	r0, [pc, #12]	@ (8001210 <BMP280_Write8+0x58>)
 8001204:	f002 fe0a 	bl	8003e1c <HAL_GPIO_WritePin>
#endif
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	20000210 	.word	0x20000210

08001218 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af02      	add	r7, sp, #8
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8001226:	7b3b      	ldrb	r3, [r7, #12]
 8001228:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800122c:	b2db      	uxtb	r3, r3
 800122e:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001236:	480f      	ldr	r0, [pc, #60]	@ (8001274 <BMP280_Read24+0x5c>)
 8001238:	f002 fdf0 	bl	8003e1c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <BMP280_Read24+0x60>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	f107 010c 	add.w	r1, r7, #12
 8001248:	230a      	movs	r3, #10
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2303      	movs	r3, #3
 800124e:	f004 fb57 	bl	8005900 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001258:	4806      	ldr	r0, [pc, #24]	@ (8001274 <BMP280_Read24+0x5c>)
 800125a:	f002 fddf 	bl	8003e1c <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 800125e:	7b7b      	ldrb	r3, [r7, #13]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	4313      	orrs	r3, r2
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	4313      	orrs	r3, r2
#endif
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	20000210 	.word	0x20000210

0800127c <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4603      	mov	r3, r0
 800128c:	70fb      	strb	r3, [r7, #3]
 800128e:	460b      	mov	r3, r1
 8001290:	70bb      	strb	r3, [r7, #2]
 8001292:	4613      	mov	r3, r2
 8001294:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 8001296:	4a4f      	ldr	r2, [pc, #316]	@ (80013d4 <BMP280_Init+0x158>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a2:	484d      	ldr	r0, [pc, #308]	@ (80013d8 <BMP280_Init+0x15c>)
 80012a4:	f002 fdba 	bl	8003e1c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80012a8:	2005      	movs	r0, #5
 80012aa:	f002 fb01 	bl	80038b0 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b4:	4848      	ldr	r0, [pc, #288]	@ (80013d8 <BMP280_Init+0x15c>)
 80012b6:	f002 fdb1 	bl	8003e1c <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 80012ba:	787b      	ldrb	r3, [r7, #1]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d901      	bls.n	80012c4 <BMP280_Init+0x48>
	    mode = BMP280_NORMALMODE;
 80012c0:	2303      	movs	r3, #3
 80012c2:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80012c4:	4a45      	ldr	r2, [pc, #276]	@ (80013dc <BMP280_Init+0x160>)
 80012c6:	787b      	ldrb	r3, [r7, #1]
 80012c8:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80012ca:	787b      	ldrb	r3, [r7, #1]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <BMP280_Init+0x58>
		mode = BMP280_SLEEPMODE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d901      	bls.n	80012de <BMP280_Init+0x62>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80012da:	2305      	movs	r3, #5
 80012dc:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80012de:	4a40      	ldr	r2, [pc, #256]	@ (80013e0 <BMP280_Init+0x164>)
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	d901      	bls.n	80012ee <BMP280_Init+0x72>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80012ea:	2305      	movs	r3, #5
 80012ec:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80012ee:	4a3d      	ldr	r2, [pc, #244]	@ (80013e4 <BMP280_Init+0x168>)
 80012f0:	78bb      	ldrb	r3, [r7, #2]
 80012f2:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80012f4:	bf00      	nop
 80012f6:	20d0      	movs	r0, #208	@ 0xd0
 80012f8:	f7ff fee4 	bl	80010c4 <BMP280_Read8>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b58      	cmp	r3, #88	@ 0x58
 8001300:	d1f9      	bne.n	80012f6 <BMP280_Init+0x7a>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001302:	2088      	movs	r0, #136	@ 0x88
 8001304:	f7ff ff3e 	bl	8001184 <BMP280_Read16LE>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b36      	ldr	r3, [pc, #216]	@ (80013e8 <BMP280_Init+0x16c>)
 800130e:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001310:	208a      	movs	r0, #138	@ 0x8a
 8001312:	f7ff ff37 	bl	8001184 <BMP280_Read16LE>
 8001316:	4603      	mov	r3, r0
 8001318:	b21a      	sxth	r2, r3
 800131a:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <BMP280_Init+0x170>)
 800131c:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 800131e:	208c      	movs	r0, #140	@ 0x8c
 8001320:	f7ff ff30 	bl	8001184 <BMP280_Read16LE>
 8001324:	4603      	mov	r3, r0
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <BMP280_Init+0x174>)
 800132a:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800132c:	208e      	movs	r0, #142	@ 0x8e
 800132e:	f7ff ff29 	bl	8001184 <BMP280_Read16LE>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <BMP280_Init+0x178>)
 8001338:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800133a:	2090      	movs	r0, #144	@ 0x90
 800133c:	f7ff ff22 	bl	8001184 <BMP280_Read16LE>
 8001340:	4603      	mov	r3, r0
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <BMP280_Init+0x17c>)
 8001346:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001348:	2092      	movs	r0, #146	@ 0x92
 800134a:	f7ff ff1b 	bl	8001184 <BMP280_Read16LE>
 800134e:	4603      	mov	r3, r0
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <BMP280_Init+0x180>)
 8001354:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001356:	2094      	movs	r0, #148	@ 0x94
 8001358:	f7ff ff14 	bl	8001184 <BMP280_Read16LE>
 800135c:	4603      	mov	r3, r0
 800135e:	b21a      	sxth	r2, r3
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <BMP280_Init+0x184>)
 8001362:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001364:	2096      	movs	r0, #150	@ 0x96
 8001366:	f7ff ff0d 	bl	8001184 <BMP280_Read16LE>
 800136a:	4603      	mov	r3, r0
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <BMP280_Init+0x188>)
 8001370:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001372:	2098      	movs	r0, #152	@ 0x98
 8001374:	f7ff ff06 	bl	8001184 <BMP280_Read16LE>
 8001378:	4603      	mov	r3, r0
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <BMP280_Init+0x18c>)
 800137e:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001380:	209a      	movs	r0, #154	@ 0x9a
 8001382:	f7ff feff 	bl	8001184 <BMP280_Read16LE>
 8001386:	4603      	mov	r3, r0
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b20      	ldr	r3, [pc, #128]	@ (800140c <BMP280_Init+0x190>)
 800138c:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 800138e:	209c      	movs	r0, #156	@ 0x9c
 8001390:	f7ff fef8 	bl	8001184 <BMP280_Read16LE>
 8001394:	4603      	mov	r3, r0
 8001396:	b21a      	sxth	r2, r3
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <BMP280_Init+0x194>)
 800139a:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800139c:	209e      	movs	r0, #158	@ 0x9e
 800139e:	f7ff fef1 	bl	8001184 <BMP280_Read16LE>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <BMP280_Init+0x198>)
 80013a8:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	015b      	lsls	r3, r3, #5
 80013ae:	b25a      	sxtb	r2, r3
 80013b0:	78bb      	ldrb	r3, [r7, #2]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b25a      	sxtb	r2, r3
 80013ba:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80013be:	4313      	orrs	r3, r2
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4619      	mov	r1, r3
 80013c6:	20f4      	movs	r0, #244	@ 0xf4
 80013c8:	f7ff fef6 	bl	80011b8 <BMP280_Write8>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000210 	.word	0x20000210
 80013d8:	40021000 	.word	0x40021000
 80013dc:	20000216 	.word	0x20000216
 80013e0:	20000214 	.word	0x20000214
 80013e4:	20000215 	.word	0x20000215
 80013e8:	2000022c 	.word	0x2000022c
 80013ec:	20000218 	.word	0x20000218
 80013f0:	2000021a 	.word	0x2000021a
 80013f4:	2000022e 	.word	0x2000022e
 80013f8:	2000021c 	.word	0x2000021c
 80013fc:	2000021e 	.word	0x2000021e
 8001400:	20000220 	.word	0x20000220
 8001404:	20000222 	.word	0x20000222
 8001408:	20000224 	.word	0x20000224
 800140c:	20000226 	.word	0x20000226
 8001410:	20000228 	.word	0x20000228
 8001414:	2000022a 	.word	0x2000022a

08001418 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800141e:	4b3d      	ldr	r3, [pc, #244]	@ (8001514 <BMP280_ReadTemperature+0xfc>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d16d      	bne.n	8001502 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001426:	20f4      	movs	r0, #244	@ 0xf4
 8001428:	f7ff fe4c 	bl	80010c4 <BMP280_Read8>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	4619      	mov	r1, r3
 8001444:	20f4      	movs	r0, #244	@ 0xf4
 8001446:	f7ff feb7 	bl	80011b8 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800144a:	20f4      	movs	r0, #244	@ 0xf4
 800144c:	f7ff fe3a 	bl	80010c4 <BMP280_Read8>
 8001450:	4603      	mov	r3, r0
 8001452:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001454:	7dbb      	ldrb	r3, [r7, #22]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d14f      	bne.n	8001502 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001462:	20f4      	movs	r0, #244	@ 0xf4
 8001464:	f7ff fe2e 	bl	80010c4 <BMP280_Read8>
 8001468:	4603      	mov	r3, r0
 800146a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800146c:	7dbb      	ldrb	r3, [r7, #22]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001474:	7dbb      	ldrb	r3, [r7, #22]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800147a:	e7f2      	b.n	8001462 <BMP280_ReadTemperature+0x4a>
				  break;
 800147c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800147e:	20fa      	movs	r0, #250	@ 0xfa
 8001480:	f7ff feca 	bl	8001218 <BMP280_Read24>
 8001484:	4603      	mov	r3, r0
 8001486:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	111b      	asrs	r3, r3, #4
 800148c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	10da      	asrs	r2, r3, #3
 8001492:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800149a:	4a20      	ldr	r2, [pc, #128]	@ (800151c <BMP280_ReadTemperature+0x104>)
 800149c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	12db      	asrs	r3, r3, #11
 80014a6:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	111b      	asrs	r3, r3, #4
 80014ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	1112      	asrs	r2, r2, #4
 80014b6:	4918      	ldr	r1, [pc, #96]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 80014b8:	8809      	ldrh	r1, [r1, #0]
 80014ba:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c0:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80014c2:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <BMP280_ReadTemperature+0x108>)
 80014c4:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014cc:	139b      	asrs	r3, r3, #14
 80014ce:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a13      	ldr	r2, [pc, #76]	@ (8001524 <BMP280_ReadTemperature+0x10c>)
 80014d8:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <BMP280_ReadTemperature+0x10c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3380      	adds	r3, #128	@ 0x80
 80014e6:	121b      	asrs	r3, r3, #8
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80014f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f8:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001528 <BMP280_ReadTemperature+0x110>
 80014fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001500:	e001      	b.n	8001506 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001502:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800152c <BMP280_ReadTemperature+0x114>
}
 8001506:	eef0 7a47 	vmov.f32	s15, s14
 800150a:	eeb0 0a67 	vmov.f32	s0, s15
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000216 	.word	0x20000216
 8001518:	2000022c 	.word	0x2000022c
 800151c:	20000218 	.word	0x20000218
 8001520:	2000021a 	.word	0x2000021a
 8001524:	20000230 	.word	0x20000230
 8001528:	42c80000 	.word	0x42c80000
 800152c:	c2c60000 	.word	0xc2c60000

08001530 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001534:	b0cc      	sub	sp, #304	@ 0x130
 8001536:	af00      	add	r7, sp, #0
 8001538:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 800153c:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001540:	f7ff ff6a 	bl	8001418 <BMP280_ReadTemperature>
 8001544:	eef0 7a40 	vmov.f32	s15, s0
 8001548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800154c:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8001828 <BMP280_ReadTemperatureAndPressure+0x2f8>
 800155c:	eef4 7a47 	vcmp.f32	s15, s14
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d101      	bne.n	800156a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8001566:	23ff      	movs	r3, #255	@ 0xff
 8001568:	e2bf      	b.n	8001aea <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800156a:	20f7      	movs	r0, #247	@ 0xf7
 800156c:	f7ff fe54 	bl	8001218 <BMP280_Read24>
 8001570:	4603      	mov	r3, r0
 8001572:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  adc_P >>= 4;
 8001576:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800157a:	111b      	asrs	r3, r3, #4
 800157c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001580:	4baa      	ldr	r3, [pc, #680]	@ (800182c <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	17da      	asrs	r2, r3, #31
 8001586:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800158a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800158e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001592:	460b      	mov	r3, r1
 8001594:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8001598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800159a:	4613      	mov	r3, r2
 800159c:	f143 33ff 	adc.w	r3, r3, #4294967295
 80015a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015a6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 80015aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015b2:	fb03 f102 	mul.w	r1, r3, r2
 80015b6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	18ca      	adds	r2, r1, r3
 80015c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c8:	fba3 4503 	umull	r4, r5, r3, r3
 80015cc:	1953      	adds	r3, r2, r5
 80015ce:	461d      	mov	r5, r3
 80015d0:	4b97      	ldr	r3, [pc, #604]	@ (8001830 <BMP280_ReadTemperatureAndPressure+0x300>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	17da      	asrs	r2, r3, #31
 80015da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80015de:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80015e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80015e6:	4603      	mov	r3, r0
 80015e8:	fb03 f205 	mul.w	r2, r3, r5
 80015ec:	460b      	mov	r3, r1
 80015ee:	fb04 f303 	mul.w	r3, r4, r3
 80015f2:	4413      	add	r3, r2
 80015f4:	4602      	mov	r2, r0
 80015f6:	fba4 8902 	umull	r8, r9, r4, r2
 80015fa:	444b      	add	r3, r9
 80015fc:	4699      	mov	r9, r3
 80015fe:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 8001602:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001606:	4b8b      	ldr	r3, [pc, #556]	@ (8001834 <BMP280_ReadTemperatureAndPressure+0x304>)
 8001608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160c:	b21b      	sxth	r3, r3
 800160e:	17da      	asrs	r2, r3, #31
 8001610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001614:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001618:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800161c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001620:	462a      	mov	r2, r5
 8001622:	fb02 f203 	mul.w	r2, r2, r3
 8001626:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800162a:	4621      	mov	r1, r4
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	441a      	add	r2, r3
 8001632:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001636:	4621      	mov	r1, r4
 8001638:	fba3 ab01 	umull	sl, fp, r3, r1
 800163c:	eb02 030b 	add.w	r3, r2, fp
 8001640:	469b      	mov	fp, r3
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800164e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001652:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001656:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800165a:	1814      	adds	r4, r2, r0
 800165c:	643c      	str	r4, [r7, #64]	@ 0x40
 800165e:	414b      	adcs	r3, r1
 8001660:	647b      	str	r3, [r7, #68]	@ 0x44
 8001662:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001666:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 800166a:	4b73      	ldr	r3, [pc, #460]	@ (8001838 <BMP280_ReadTemperatureAndPressure+0x308>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	b21b      	sxth	r3, r3
 8001672:	17da      	asrs	r2, r3, #31
 8001674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001678:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001688:	00d9      	lsls	r1, r3, #3
 800168a:	2000      	movs	r0, #0
 800168c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001690:	1814      	adds	r4, r2, r0
 8001692:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001694:	414b      	adcs	r3, r1
 8001696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001698:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800169c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80016a0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80016a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016a8:	fb03 f102 	mul.w	r1, r3, r2
 80016ac:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80016b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	18ca      	adds	r2, r1, r3
 80016ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016be:	fba3 1303 	umull	r1, r3, r3, r3
 80016c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016c6:	460b      	mov	r3, r1
 80016c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80016cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80016d0:	18d3      	adds	r3, r2, r3
 80016d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016d6:	4b59      	ldr	r3, [pc, #356]	@ (800183c <BMP280_ReadTemperatureAndPressure+0x30c>)
 80016d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	17da      	asrs	r2, r3, #31
 80016e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80016e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80016e8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80016ec:	462b      	mov	r3, r5
 80016ee:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80016f2:	4642      	mov	r2, r8
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	464b      	mov	r3, r9
 80016fa:	4621      	mov	r1, r4
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	4622      	mov	r2, r4
 8001704:	4641      	mov	r1, r8
 8001706:	fba2 1201 	umull	r1, r2, r2, r1
 800170a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800170e:	460a      	mov	r2, r1
 8001710:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8001714:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001718:	4413      	add	r3, r2
 800171a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800172a:	4623      	mov	r3, r4
 800172c:	0a18      	lsrs	r0, r3, #8
 800172e:	462b      	mov	r3, r5
 8001730:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001734:	462b      	mov	r3, r5
 8001736:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001738:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <BMP280_ReadTemperatureAndPressure+0x310>)
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	b21b      	sxth	r3, r3
 8001740:	17da      	asrs	r2, r3, #31
 8001742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001746:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800174a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800174e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001752:	464a      	mov	r2, r9
 8001754:	fb02 f203 	mul.w	r2, r2, r3
 8001758:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800175c:	4644      	mov	r4, r8
 800175e:	fb04 f303 	mul.w	r3, r4, r3
 8001762:	441a      	add	r2, r3
 8001764:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001768:	4644      	mov	r4, r8
 800176a:	fba3 4304 	umull	r4, r3, r3, r4
 800176e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001772:	4623      	mov	r3, r4
 8001774:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800177c:	18d3      	adds	r3, r2, r3
 800177e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800178e:	464c      	mov	r4, r9
 8001790:	0323      	lsls	r3, r4, #12
 8001792:	4644      	mov	r4, r8
 8001794:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001798:	4644      	mov	r4, r8
 800179a:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800179c:	1884      	adds	r4, r0, r2
 800179e:	633c      	str	r4, [r7, #48]	@ 0x30
 80017a0:	eb41 0303 	adc.w	r3, r1, r3
 80017a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80017a6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80017aa:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80017ae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017b2:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80017b6:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 80017ba:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80017be:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <BMP280_ReadTemperatureAndPressure+0x314>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2200      	movs	r2, #0
 80017c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80017ce:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80017d2:	462b      	mov	r3, r5
 80017d4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80017d8:	4642      	mov	r2, r8
 80017da:	fb02 f203 	mul.w	r2, r2, r3
 80017de:	464b      	mov	r3, r9
 80017e0:	4621      	mov	r1, r4
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	4622      	mov	r2, r4
 80017ea:	4641      	mov	r1, r8
 80017ec:	fba2 1201 	umull	r1, r2, r2, r1
 80017f0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80017f4:	460a      	mov	r2, r1
 80017f6:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80017fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80017fe:	4413      	add	r3, r2
 8001800:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001810:	4629      	mov	r1, r5
 8001812:	104a      	asrs	r2, r1, #1
 8001814:	4629      	mov	r1, r5
 8001816:	17cb      	asrs	r3, r1, #31
 8001818:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	  if (var1 == 0) {
 800181c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001820:	4313      	orrs	r3, r2
 8001822:	d111      	bne.n	8001848 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001824:	2300      	movs	r3, #0
 8001826:	e160      	b.n	8001aea <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001828:	c2c60000 	.word	0xc2c60000
 800182c:	20000230 	.word	0x20000230
 8001830:	20000224 	.word	0x20000224
 8001834:	20000222 	.word	0x20000222
 8001838:	20000220 	.word	0x20000220
 800183c:	2000021e 	.word	0x2000021e
 8001840:	2000021c 	.word	0x2000021c
 8001844:	2000022e 	.word	0x2000022e
	  }
	  p = 1048576 - adc_P;
 8001848:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800184c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001850:	17da      	asrs	r2, r3, #31
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001856:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800185a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 800185e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001862:	105b      	asrs	r3, r3, #1
 8001864:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001868:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800186c:	07db      	lsls	r3, r3, #31
 800186e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001872:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001876:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800187a:	4621      	mov	r1, r4
 800187c:	1a89      	subs	r1, r1, r2
 800187e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001882:	4629      	mov	r1, r5
 8001884:	eb61 0303 	sbc.w	r3, r1, r3
 8001888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800188c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001890:	4622      	mov	r2, r4
 8001892:	462b      	mov	r3, r5
 8001894:	1891      	adds	r1, r2, r2
 8001896:	6239      	str	r1, [r7, #32]
 8001898:	415b      	adcs	r3, r3
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
 800189c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018a0:	4621      	mov	r1, r4
 80018a2:	1851      	adds	r1, r2, r1
 80018a4:	61b9      	str	r1, [r7, #24]
 80018a6:	4629      	mov	r1, r5
 80018a8:	414b      	adcs	r3, r1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018b8:	4649      	mov	r1, r9
 80018ba:	018b      	lsls	r3, r1, #6
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c2:	4641      	mov	r1, r8
 80018c4:	018a      	lsls	r2, r1, #6
 80018c6:	4641      	mov	r1, r8
 80018c8:	1889      	adds	r1, r1, r2
 80018ca:	6139      	str	r1, [r7, #16]
 80018cc:	4649      	mov	r1, r9
 80018ce:	eb43 0101 	adc.w	r1, r3, r1
 80018d2:	6179      	str	r1, [r7, #20]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018e0:	4649      	mov	r1, r9
 80018e2:	008b      	lsls	r3, r1, #2
 80018e4:	4641      	mov	r1, r8
 80018e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018ea:	4641      	mov	r1, r8
 80018ec:	008a      	lsls	r2, r1, #2
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	4622      	mov	r2, r4
 80018f6:	189b      	adds	r3, r3, r2
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	460b      	mov	r3, r1
 80018fc:	462a      	mov	r2, r5
 80018fe:	eb42 0303 	adc.w	r3, r2, r3
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001910:	4649      	mov	r1, r9
 8001912:	008b      	lsls	r3, r1, #2
 8001914:	4641      	mov	r1, r8
 8001916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800191a:	4641      	mov	r1, r8
 800191c:	008a      	lsls	r2, r1, #2
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	4603      	mov	r3, r0
 8001924:	4622      	mov	r2, r4
 8001926:	189b      	adds	r3, r3, r2
 8001928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800192a:	462b      	mov	r3, r5
 800192c:	460a      	mov	r2, r1
 800192e:	eb42 0303 	adc.w	r3, r2, r3
 8001932:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001934:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001938:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800193c:	f7ff f9c4 	bl	8000cc8 <__aeabi_ldivmod>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001948:	4b6b      	ldr	r3, [pc, #428]	@ (8001af8 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	b21b      	sxth	r3, r3
 8001950:	17da      	asrs	r2, r3, #31
 8001952:	673b      	str	r3, [r7, #112]	@ 0x70
 8001954:	677a      	str	r2, [r7, #116]	@ 0x74
 8001956:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0b50      	lsrs	r0, r2, #13
 8001964:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001968:	1359      	asrs	r1, r3, #13
 800196a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800196e:	462b      	mov	r3, r5
 8001970:	fb00 f203 	mul.w	r2, r0, r3
 8001974:	4623      	mov	r3, r4
 8001976:	fb03 f301 	mul.w	r3, r3, r1
 800197a:	4413      	add	r3, r2
 800197c:	4622      	mov	r2, r4
 800197e:	fba2 1200 	umull	r1, r2, r2, r0
 8001982:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001986:	460a      	mov	r2, r1
 8001988:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800198c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001990:	4413      	add	r3, r2
 8001992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001996:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800199a:	f04f 0000 	mov.w	r0, #0
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	0b50      	lsrs	r0, r2, #13
 80019a4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a8:	1359      	asrs	r1, r3, #13
 80019aa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80019ae:	462b      	mov	r3, r5
 80019b0:	fb00 f203 	mul.w	r2, r0, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	fb03 f301 	mul.w	r3, r3, r1
 80019ba:	4413      	add	r3, r2
 80019bc:	4622      	mov	r2, r4
 80019be:	fba2 1200 	umull	r1, r2, r2, r0
 80019c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80019c6:	460a      	mov	r2, r1
 80019c8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80019cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80019d0:	4413      	add	r3, r2
 80019d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80019e2:	4621      	mov	r1, r4
 80019e4:	0e4a      	lsrs	r2, r1, #25
 80019e6:	4629      	mov	r1, r5
 80019e8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019ec:	4629      	mov	r1, r5
 80019ee:	164b      	asrs	r3, r1, #25
 80019f0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 80019f4:	4b41      	ldr	r3, [pc, #260]	@ (8001afc <BMP280_ReadTemperatureAndPressure+0x5cc>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	17da      	asrs	r2, r3, #31
 80019fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a06:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a0a:	462a      	mov	r2, r5
 8001a0c:	fb02 f203 	mul.w	r2, r2, r3
 8001a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a14:	4621      	mov	r1, r4
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001a20:	4621      	mov	r1, r4
 8001a22:	fba2 1201 	umull	r1, r2, r2, r1
 8001a26:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a30:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a34:	4413      	add	r3, r2
 8001a36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001a46:	4621      	mov	r1, r4
 8001a48:	0cca      	lsrs	r2, r1, #19
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a50:	4629      	mov	r1, r5
 8001a52:	14cb      	asrs	r3, r1, #19
 8001a54:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001a58:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001a5c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a60:	1884      	adds	r4, r0, r2
 8001a62:	663c      	str	r4, [r7, #96]	@ 0x60
 8001a64:	eb41 0303 	adc.w	r3, r1, r3
 8001a68:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a6a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a72:	4621      	mov	r1, r4
 8001a74:	1889      	adds	r1, r1, r2
 8001a76:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001a78:	4629      	mov	r1, r5
 8001a7a:	eb43 0101 	adc.w	r1, r3, r1
 8001a7e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	0a18      	lsrs	r0, r3, #8
 8001a90:	462b      	mov	r3, r5
 8001a92:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a96:	462b      	mov	r3, r5
 8001a98:	1219      	asrs	r1, r3, #8
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8001a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	17da      	asrs	r2, r3, #31
 8001aa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001aa6:	657a      	str	r2, [r7, #84]	@ 0x54
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ab4:	464c      	mov	r4, r9
 8001ab6:	0123      	lsls	r3, r4, #4
 8001ab8:	4644      	mov	r4, r8
 8001aba:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001abe:	4644      	mov	r4, r8
 8001ac0:	0122      	lsls	r2, r4, #4
 8001ac2:	1884      	adds	r4, r0, r2
 8001ac4:	603c      	str	r4, [r7, #0]
 8001ac6:	eb41 0303 	adc.w	r3, r1, r3
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ad0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  *pressure = (int32_t)p/256;
 8001ad4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da00      	bge.n	8001ade <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001adc:	33ff      	adds	r3, #255	@ 0xff
 8001ade:	121b      	asrs	r3, r3, #8
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ae6:	601a      	str	r2, [r3, #0]

	  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	2000022a 	.word	0x2000022a
 8001afc:	20000228 	.word	0x20000228
 8001b00:	20000226 	.word	0x20000226

08001b04 <SELECT>:
#define SD_CS_GPIO_Port GPIOE
#define SD_CS_Pin GPIO_PIN_11

/* SPI Chip Select */
static void SELECT(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b0e:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <SELECT+0x14>)
 8001b10:	f002 f984 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000

08001b1c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b26:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <DESELECT+0x14>)
 8001b28:	f002 f978 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000

08001b34 <SPI_TxByte>:


static void SPI_TxByte(BYTE data)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001b3e:	bf00      	nop
 8001b40:	4808      	ldr	r0, [pc, #32]	@ (8001b64 <SPI_TxByte+0x30>)
 8001b42:	f004 f8ff 	bl	8005d44 <HAL_SPI_GetState>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d1f9      	bne.n	8001b40 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001b4c:	1df9      	adds	r1, r7, #7
 8001b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b52:	2201      	movs	r2, #1
 8001b54:	4803      	ldr	r0, [pc, #12]	@ (8001b64 <SPI_TxByte+0x30>)
 8001b56:	f003 fd5e 	bl	8005616 <HAL_SPI_Transmit>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200022fc 	.word	0x200022fc

08001b68 <SPI_RxByte>:


static uint8_t SPI_RxByte(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001b6e:	23ff      	movs	r3, #255	@ 0xff
 8001b70:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001b76:	bf00      	nop
 8001b78:	4809      	ldr	r0, [pc, #36]	@ (8001ba0 <SPI_RxByte+0x38>)
 8001b7a:	f004 f8e3 	bl	8005d44 <HAL_SPI_GetState>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d1f9      	bne.n	8001b78 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001b84:	1dba      	adds	r2, r7, #6
 8001b86:	1df9      	adds	r1, r7, #7
 8001b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	4803      	ldr	r0, [pc, #12]	@ (8001ba0 <SPI_RxByte+0x38>)
 8001b92:	f003 feb5 	bl	8005900 <HAL_SPI_TransmitReceive>

  return data;
 8001b96:	79bb      	ldrb	r3, [r7, #6]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200022fc 	.word	0x200022fc

08001ba4 <SPI_RxBytePtr>:


static void SPI_RxBytePtr(uint8_t *buff)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001bac:	f7ff ffdc 	bl	8001b68 <SPI_RxByte>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	701a      	strb	r2, [r3, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <SD_ReadyWait>:


static uint8_t SD_ReadyWait(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
  uint8_t res;

   Timer2 = 50;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <SD_ReadyWait+0x34>)
 8001bc8:	2232      	movs	r2, #50	@ 0x32
 8001bca:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001bcc:	f7ff ffcc 	bl	8001b68 <SPI_RxByte>

  do
  {
     res = SPI_RxByte();
 8001bd0:	f7ff ffca 	bl	8001b68 <SPI_RxByte>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2bff      	cmp	r3, #255	@ 0xff
 8001bdc:	d004      	beq.n	8001be8 <SD_ReadyWait+0x28>
 8001bde:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <SD_ReadyWait+0x34>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f3      	bne.n	8001bd0 <SD_ReadyWait+0x10>

  return res;
 8001be8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20002362 	.word	0x20002362

08001bf8 <SD_PowerOn>:

 static void SD_PowerOn(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001bfe:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001c02:	617b      	str	r3, [r7, #20]

   DESELECT();
 8001c04:	f7ff ff8a 	bl	8001b1c <DESELECT>

  for(int i = 0; i < 10; i++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	e005      	b.n	8001c1a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001c0e:	20ff      	movs	r0, #255	@ 0xff
 8001c10:	f7ff ff90 	bl	8001b34 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	3301      	adds	r3, #1
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b09      	cmp	r3, #9
 8001c1e:	ddf6      	ble.n	8001c0e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001c20:	f7ff ff70 	bl	8001b04 <SELECT>

   cmd_arg[0] = (CMD0 | 0x40);
 8001c24:	2340      	movs	r3, #64	@ 0x40
 8001c26:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001c38:	2395      	movs	r3, #149	@ 0x95
 8001c3a:	727b      	strb	r3, [r7, #9]

   for (int i = 0; i < 6; i++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e009      	b.n	8001c56 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001c42:	1d3a      	adds	r2, r7, #4
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff72 	bl	8001b34 <SPI_TxByte>
   for (int i = 0; i < 6; i++)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3301      	adds	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	ddf2      	ble.n	8001c42 <SD_PowerOn+0x4a>
  }

   while ((SPI_RxByte() != 0x01) && Count)
 8001c5c:	e002      	b.n	8001c64 <SD_PowerOn+0x6c>
  {
    Count--;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
   while ((SPI_RxByte() != 0x01) && Count)
 8001c64:	f7ff ff80 	bl	8001b68 <SPI_RxByte>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d002      	beq.n	8001c74 <SD_PowerOn+0x7c>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f4      	bne.n	8001c5e <SD_PowerOn+0x66>
  }

  DESELECT();
 8001c74:	f7ff ff52 	bl	8001b1c <DESELECT>
  SPI_TxByte(0XFF);
 8001c78:	20ff      	movs	r0, #255	@ 0xff
 8001c7a:	f7ff ff5b 	bl	8001b34 <SPI_TxByte>

  PowerFlag = 1;
 8001c7e:	4b03      	ldr	r3, [pc, #12]	@ (8001c8c <SD_PowerOn+0x94>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
}
 8001c84:	bf00      	nop
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000235 	.word	0x20000235

08001c90 <SD_PowerOff>:

 static void SD_PowerOff(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <SD_PowerOff+0x14>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	20000235 	.word	0x20000235

08001ca8 <SD_CheckPower>:

 static uint8_t SD_CheckPower(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001cac:	4b03      	ldr	r3, [pc, #12]	@ (8001cbc <SD_CheckPower+0x14>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000235 	.word	0x20000235

08001cc0 <SD_RxDataBlock>:

 static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint8_t token;

   Timer1 = 10;
 8001cca:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <SD_RxDataBlock+0x68>)
 8001ccc:	220a      	movs	r2, #10
 8001cce:	701a      	strb	r2, [r3, #0]

  do
  {
    token = SPI_RxByte();
 8001cd0:	f7ff ff4a 	bl	8001b68 <SPI_RxByte>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	2bff      	cmp	r3, #255	@ 0xff
 8001cdc:	d104      	bne.n	8001ce8 <SD_RxDataBlock+0x28>
 8001cde:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <SD_RxDataBlock+0x68>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f3      	bne.n	8001cd0 <SD_RxDataBlock+0x10>


  if(token != 0xFE)
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	2bfe      	cmp	r3, #254	@ 0xfe
 8001cec:	d001      	beq.n	8001cf2 <SD_RxDataBlock+0x32>
    return FALSE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e016      	b.n	8001d20 <SD_RxDataBlock+0x60>

  do
  {
    SPI_RxBytePtr(buff++);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff53 	bl	8001ba4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff4d 	bl	8001ba4 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	3b02      	subs	r3, #2
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1ed      	bne.n	8001cf2 <SD_RxDataBlock+0x32>

  SPI_RxByte();
 8001d16:	f7ff ff27 	bl	8001b68 <SPI_RxByte>
  SPI_RxByte();
 8001d1a:	f7ff ff25 	bl	8001b68 <SPI_RxByte>

  return TRUE;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20002361 	.word	0x20002361

08001d2c <SD_TxDataBlock>:


#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	737b      	strb	r3, [r7, #13]

  if (SD_ReadyWait() != 0xFF)
 8001d3c:	f7ff ff40 	bl	8001bc0 <SD_ReadyWait>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2bff      	cmp	r3, #255	@ 0xff
 8001d44:	d001      	beq.n	8001d4a <SD_TxDataBlock+0x1e>
    return FALSE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e040      	b.n	8001dcc <SD_TxDataBlock+0xa0>

  SPI_TxByte(token);
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fef1 	bl	8001b34 <SPI_TxByte>

  if (token != 0xFD)
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	2bfd      	cmp	r3, #253	@ 0xfd
 8001d56:	d031      	beq.n	8001dbc <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73bb      	strb	r3, [r7, #14]

    do
    {
      SPI_TxByte(*buff++);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fee5 	bl	8001b34 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fede 	bl	8001b34 <SPI_TxByte>
    } while (--wc);
 8001d78:	7bbb      	ldrb	r3, [r7, #14]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	73bb      	strb	r3, [r7, #14]
 8001d7e:	7bbb      	ldrb	r3, [r7, #14]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1eb      	bne.n	8001d5c <SD_TxDataBlock+0x30>

    SPI_RxByte();
 8001d84:	f7ff fef0 	bl	8001b68 <SPI_RxByte>
    SPI_RxByte();
 8001d88:	f7ff feee 	bl	8001b68 <SPI_RxByte>

    while (i <= 64)
 8001d8c:	e00b      	b.n	8001da6 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001d8e:	f7ff feeb 	bl	8001b68 <SPI_RxByte>
 8001d92:	4603      	mov	r3, r0
 8001d94:	73fb      	strb	r3, [r7, #15]

      if ((resp & 0x1F) == 0x05)
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d006      	beq.n	8001dae <SD_TxDataBlock+0x82>
        break;

      i++;
 8001da0:	7b7b      	ldrb	r3, [r7, #13]
 8001da2:	3301      	adds	r3, #1
 8001da4:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001da6:	7b7b      	ldrb	r3, [r7, #13]
 8001da8:	2b40      	cmp	r3, #64	@ 0x40
 8001daa:	d9f0      	bls.n	8001d8e <SD_TxDataBlock+0x62>
 8001dac:	e000      	b.n	8001db0 <SD_TxDataBlock+0x84>
        break;
 8001dae:	bf00      	nop
    }

    while (SPI_RxByte() == 0);
 8001db0:	bf00      	nop
 8001db2:	f7ff fed9 	bl	8001b68 <SPI_RxByte>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0fa      	beq.n	8001db2 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d101      	bne.n	8001dca <SD_TxDataBlock+0x9e>
    return TRUE;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  if (SD_ReadyWait() != 0xFF)
 8001de0:	f7ff feee 	bl	8001bc0 <SD_ReadyWait>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2bff      	cmp	r3, #255	@ 0xff
 8001de8:	d001      	beq.n	8001dee <SD_SendCmd+0x1a>
    return 0xFF;
 8001dea:	23ff      	movs	r3, #255	@ 0xff
 8001dec:	e040      	b.n	8001e70 <SD_SendCmd+0x9c>

  SPI_TxByte(cmd); 			/* Command */
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fe9f 	bl	8001b34 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	0e1b      	lsrs	r3, r3, #24
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fe99 	bl	8001b34 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	0c1b      	lsrs	r3, r3, #16
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fe93 	bl	8001b34 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fe8d 	bl	8001b34 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fe88 	bl	8001b34 <SPI_TxByte>

  crc = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b40      	cmp	r3, #64	@ 0x40
 8001e2c:	d101      	bne.n	8001e32 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001e2e:	2395      	movs	r3, #149	@ 0x95
 8001e30:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b48      	cmp	r3, #72	@ 0x48
 8001e36:	d101      	bne.n	8001e3c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001e38:	2387      	movs	r3, #135	@ 0x87
 8001e3a:	73fb      	strb	r3, [r7, #15]

  /* CRC */
  SPI_TxByte(crc);
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fe78 	bl	8001b34 <SPI_TxByte>

  if (cmd == CMD12)
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	2b4c      	cmp	r3, #76	@ 0x4c
 8001e48:	d101      	bne.n	8001e4e <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001e4a:	f7ff fe8d 	bl	8001b68 <SPI_RxByte>

  uint8_t n = 10;
 8001e4e:	230a      	movs	r3, #10
 8001e50:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001e52:	f7ff fe89 	bl	8001b68 <SPI_RxByte>
 8001e56:	4603      	mov	r3, r0
 8001e58:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001e5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da05      	bge.n	8001e6e <SD_SendCmd+0x9a>
 8001e62:	7bbb      	ldrb	r3, [r7, #14]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	73bb      	strb	r3, [r7, #14]
 8001e68:	7bbb      	ldrb	r3, [r7, #14]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f1      	bne.n	8001e52 <SD_SendCmd+0x7e>

  return res;
 8001e6e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <SD_disk_initialize>:


DSTATUS SD_disk_initialize(BYTE drv)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  if(drv)
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0d5      	b.n	8002038 <SD_disk_initialize+0x1c0>

  if(Stat & STA_NODISK)
 8001e8c:	4b6c      	ldr	r3, [pc, #432]	@ (8002040 <SD_disk_initialize+0x1c8>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <SD_disk_initialize+0x2a>
    return Stat;
 8001e9a:	4b69      	ldr	r3, [pc, #420]	@ (8002040 <SD_disk_initialize+0x1c8>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	e0ca      	b.n	8002038 <SD_disk_initialize+0x1c0>

  SD_PowerOn();
 8001ea2:	f7ff fea9 	bl	8001bf8 <SD_PowerOn>

  SELECT();
 8001ea6:	f7ff fe2d 	bl	8001b04 <SELECT>

  type = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73bb      	strb	r3, [r7, #14]

  if (SD_SendCmd(CMD0, 0) == 1)
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2040      	movs	r0, #64	@ 0x40
 8001eb2:	f7ff ff8f 	bl	8001dd4 <SD_SendCmd>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	f040 80a5 	bne.w	8002008 <SD_disk_initialize+0x190>
  {
    Timer1 = 100;
 8001ebe:	4b61      	ldr	r3, [pc, #388]	@ (8002044 <SD_disk_initialize+0x1cc>)
 8001ec0:	2264      	movs	r2, #100	@ 0x64
 8001ec2:	701a      	strb	r2, [r3, #0]

    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001ec4:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001ec8:	2048      	movs	r0, #72	@ 0x48
 8001eca:	f7ff ff83 	bl	8001dd4 <SD_SendCmd>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d158      	bne.n	8001f86 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e00c      	b.n	8001ef4 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001eda:	7bfc      	ldrb	r4, [r7, #15]
 8001edc:	f7ff fe44 	bl	8001b68 <SPI_RxByte>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f104 0310 	add.w	r3, r4, #16
 8001ee8:	443b      	add	r3, r7
 8001eea:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d9ef      	bls.n	8001eda <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001efa:	7abb      	ldrb	r3, [r7, #10]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	f040 8083 	bne.w	8002008 <SD_disk_initialize+0x190>
 8001f02:	7afb      	ldrb	r3, [r7, #11]
 8001f04:	2baa      	cmp	r3, #170	@ 0xaa
 8001f06:	d17f      	bne.n	8002008 <SD_disk_initialize+0x190>
      {
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2077      	movs	r0, #119	@ 0x77
 8001f0c:	f7ff ff62 	bl	8001dd4 <SD_SendCmd>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d807      	bhi.n	8001f26 <SD_disk_initialize+0xae>
 8001f16:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f1a:	2069      	movs	r0, #105	@ 0x69
 8001f1c:	f7ff ff5a 	bl	8001dd4 <SD_SendCmd>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001f26:	4b47      	ldr	r3, [pc, #284]	@ (8002044 <SD_disk_initialize+0x1cc>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1eb      	bne.n	8001f08 <SD_disk_initialize+0x90>
 8001f30:	e000      	b.n	8001f34 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001f32:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001f34:	4b43      	ldr	r3, [pc, #268]	@ (8002044 <SD_disk_initialize+0x1cc>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d064      	beq.n	8002008 <SD_disk_initialize+0x190>
 8001f3e:	2100      	movs	r1, #0
 8001f40:	207a      	movs	r0, #122	@ 0x7a
 8001f42:	f7ff ff47 	bl	8001dd4 <SD_SendCmd>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d15d      	bne.n	8002008 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e00c      	b.n	8001f6c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001f52:	7bfc      	ldrb	r4, [r7, #15]
 8001f54:	f7ff fe08 	bl	8001b68 <SPI_RxByte>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f104 0310 	add.w	r3, r4, #16
 8001f60:	443b      	add	r3, r7
 8001f62:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d9ef      	bls.n	8001f52 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001f72:	7a3b      	ldrb	r3, [r7, #8]
 8001f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SD_disk_initialize+0x108>
 8001f7c:	2306      	movs	r3, #6
 8001f7e:	e000      	b.n	8001f82 <SD_disk_initialize+0x10a>
 8001f80:	2302      	movs	r3, #2
 8001f82:	73bb      	strb	r3, [r7, #14]
 8001f84:	e040      	b.n	8002008 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001f86:	2100      	movs	r1, #0
 8001f88:	2077      	movs	r0, #119	@ 0x77
 8001f8a:	f7ff ff23 	bl	8001dd4 <SD_SendCmd>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d808      	bhi.n	8001fa6 <SD_disk_initialize+0x12e>
 8001f94:	2100      	movs	r1, #0
 8001f96:	2069      	movs	r0, #105	@ 0x69
 8001f98:	f7ff ff1c 	bl	8001dd4 <SD_SendCmd>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d801      	bhi.n	8001fa6 <SD_disk_initialize+0x12e>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e000      	b.n	8001fa8 <SD_disk_initialize+0x130>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001faa:	7bbb      	ldrb	r3, [r7, #14]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d10e      	bne.n	8001fce <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2077      	movs	r0, #119	@ 0x77
 8001fb4:	f7ff ff0e 	bl	8001dd4 <SD_SendCmd>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d80e      	bhi.n	8001fdc <SD_disk_initialize+0x164>
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2069      	movs	r0, #105	@ 0x69
 8001fc2:	f7ff ff07 	bl	8001dd4 <SD_SendCmd>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d107      	bne.n	8001fdc <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001fcc:	e00d      	b.n	8001fea <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2041      	movs	r0, #65	@ 0x41
 8001fd2:	f7ff feff 	bl	8001dd4 <SD_SendCmd>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001fdc:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <SD_disk_initialize+0x1cc>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1e1      	bne.n	8001faa <SD_disk_initialize+0x132>
 8001fe6:	e000      	b.n	8001fea <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001fe8:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001fea:	4b16      	ldr	r3, [pc, #88]	@ (8002044 <SD_disk_initialize+0x1cc>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <SD_disk_initialize+0x18c>
 8001ff4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ff8:	2050      	movs	r0, #80	@ 0x50
 8001ffa:	f7ff feeb 	bl	8001dd4 <SD_SendCmd>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <SD_disk_initialize+0x190>
      {
        type = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8002008:	4a0f      	ldr	r2, [pc, #60]	@ (8002048 <SD_disk_initialize+0x1d0>)
 800200a:	7bbb      	ldrb	r3, [r7, #14]
 800200c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800200e:	f7ff fd85 	bl	8001b1c <DESELECT>

  SPI_RxByte();
 8002012:	f7ff fda9 	bl	8001b68 <SPI_RxByte>

  if (type)
 8002016:	7bbb      	ldrb	r3, [r7, #14]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 800201c:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <SD_disk_initialize+0x1c8>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	b2da      	uxtb	r2, r3
 8002028:	4b05      	ldr	r3, [pc, #20]	@ (8002040 <SD_disk_initialize+0x1c8>)
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e001      	b.n	8002032 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800202e:	f7ff fe2f 	bl	8001c90 <SD_PowerOff>
  }

  return Stat;
 8002032:	4b03      	ldr	r3, [pc, #12]	@ (8002040 <SD_disk_initialize+0x1c8>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b2db      	uxtb	r3, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bd90      	pop	{r4, r7, pc}
 8002040:	20000000 	.word	0x20000000
 8002044:	20002361 	.word	0x20002361
 8002048:	20000234 	.word	0x20000234

0800204c <SD_disk_status>:

DSTATUS SD_disk_status(BYTE drv)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <SD_disk_status+0x14>
    return STA_NOINIT;
 800205c:	2301      	movs	r3, #1
 800205e:	e002      	b.n	8002066 <SD_disk_status+0x1a>

  return Stat;
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <SD_disk_status+0x28>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b2db      	uxtb	r3, r3
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000000 	.word	0x20000000

08002078 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4603      	mov	r3, r0
 8002086:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <SD_disk_read+0x1c>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <SD_disk_read+0x20>
    return RES_PARERR;
 8002094:	2304      	movs	r3, #4
 8002096:	e051      	b.n	800213c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8002098:	4b2a      	ldr	r3, [pc, #168]	@ (8002144 <SD_disk_read+0xcc>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <SD_disk_read+0x32>
    return RES_NOTRDY;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e048      	b.n	800213c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80020aa:	4b27      	ldr	r3, [pc, #156]	@ (8002148 <SD_disk_read+0xd0>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d102      	bne.n	80020bc <SD_disk_read+0x44>
    sector *= 512;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	025b      	lsls	r3, r3, #9
 80020ba:	607b      	str	r3, [r7, #4]

  SELECT();
 80020bc:	f7ff fd22 	bl	8001b04 <SELECT>

  if (count == 1)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d111      	bne.n	80020ea <SD_disk_read+0x72>
  {

    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	2051      	movs	r0, #81	@ 0x51
 80020ca:	f7ff fe83 	bl	8001dd4 <SD_SendCmd>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d129      	bne.n	8002128 <SD_disk_read+0xb0>
 80020d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020d8:	68b8      	ldr	r0, [r7, #8]
 80020da:	f7ff fdf1 	bl	8001cc0 <SD_RxDataBlock>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d021      	beq.n	8002128 <SD_disk_read+0xb0>
      count = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	e01e      	b.n	8002128 <SD_disk_read+0xb0>
  }
  else
  {
    if (SD_SendCmd(CMD18, sector) == 0)
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	2052      	movs	r0, #82	@ 0x52
 80020ee:	f7ff fe71 	bl	8001dd4 <SD_SendCmd>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d117      	bne.n	8002128 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80020f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020fc:	68b8      	ldr	r0, [r7, #8]
 80020fe:	f7ff fddf 	bl	8001cc0 <SD_RxDataBlock>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800210e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	3b01      	subs	r3, #1
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ed      	bne.n	80020f8 <SD_disk_read+0x80>
 800211c:	e000      	b.n	8002120 <SD_disk_read+0xa8>
          break;
 800211e:	bf00      	nop

      SD_SendCmd(CMD12, 0);
 8002120:	2100      	movs	r1, #0
 8002122:	204c      	movs	r0, #76	@ 0x4c
 8002124:	f7ff fe56 	bl	8001dd4 <SD_SendCmd>
    }
  }

  DESELECT();
 8002128:	f7ff fcf8 	bl	8001b1c <DESELECT>
  SPI_RxByte();
 800212c:	f7ff fd1c 	bl	8001b68 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	bf14      	ite	ne
 8002136:	2301      	movne	r3, #1
 8002138:	2300      	moveq	r3, #0
 800213a:	b2db      	uxtb	r3, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000000 	.word	0x20000000
 8002148:	20000234 	.word	0x20000234

0800214c <SD_disk_write>:

#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d102      	bne.n	8002168 <SD_disk_write+0x1c>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <SD_disk_write+0x20>
    return RES_PARERR;
 8002168:	2304      	movs	r3, #4
 800216a:	e06b      	b.n	8002244 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 800216c:	4b37      	ldr	r3, [pc, #220]	@ (800224c <SD_disk_write+0x100>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <SD_disk_write+0x32>
    return RES_NOTRDY;
 800217a:	2303      	movs	r3, #3
 800217c:	e062      	b.n	8002244 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800217e:	4b33      	ldr	r3, [pc, #204]	@ (800224c <SD_disk_write+0x100>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <SD_disk_write+0x44>
    return RES_WRPRT;
 800218c:	2302      	movs	r3, #2
 800218e:	e059      	b.n	8002244 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8002190:	4b2f      	ldr	r3, [pc, #188]	@ (8002250 <SD_disk_write+0x104>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <SD_disk_write+0x56>
    sector *= 512;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	025b      	lsls	r3, r3, #9
 80021a0:	607b      	str	r3, [r7, #4]

  SELECT();
 80021a2:	f7ff fcaf 	bl	8001b04 <SELECT>

  if (count == 1)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d110      	bne.n	80021ce <SD_disk_write+0x82>
  {
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	2058      	movs	r0, #88	@ 0x58
 80021b0:	f7ff fe10 	bl	8001dd4 <SD_SendCmd>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d13a      	bne.n	8002230 <SD_disk_write+0xe4>
 80021ba:	21fe      	movs	r1, #254	@ 0xfe
 80021bc:	68b8      	ldr	r0, [r7, #8]
 80021be:	f7ff fdb5 	bl	8001d2c <SD_TxDataBlock>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d033      	beq.n	8002230 <SD_disk_write+0xe4>
      count = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	e030      	b.n	8002230 <SD_disk_write+0xe4>
  }
  else
  {
    if (CardType & 2)
 80021ce:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <SD_disk_write+0x104>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80021da:	2100      	movs	r1, #0
 80021dc:	2077      	movs	r0, #119	@ 0x77
 80021de:	f7ff fdf9 	bl	8001dd4 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	2057      	movs	r0, #87	@ 0x57
 80021e6:	f7ff fdf5 	bl	8001dd4 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	2059      	movs	r0, #89	@ 0x59
 80021ee:	f7ff fdf1 	bl	8001dd4 <SD_SendCmd>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d11b      	bne.n	8002230 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80021f8:	21fc      	movs	r1, #252	@ 0xfc
 80021fa:	68b8      	ldr	r0, [r7, #8]
 80021fc:	f7ff fd96 	bl	8001d2c <SD_TxDataBlock>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800220c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	3b01      	subs	r3, #1
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ee      	bne.n	80021f8 <SD_disk_write+0xac>
 800221a:	e000      	b.n	800221e <SD_disk_write+0xd2>
          break;
 800221c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800221e:	21fd      	movs	r1, #253	@ 0xfd
 8002220:	2000      	movs	r0, #0
 8002222:	f7ff fd83 	bl	8001d2c <SD_TxDataBlock>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <SD_disk_write+0xe4>
      {
        count = 1;
 800222c:	2301      	movs	r3, #1
 800222e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8002230:	f7ff fc74 	bl	8001b1c <DESELECT>
  SPI_RxByte();
 8002234:	f7ff fc98 	bl	8001b68 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	bf14      	ite	ne
 800223e:	2301      	movne	r3, #1
 8002240:	2300      	moveq	r3, #0
 8002242:	b2db      	uxtb	r3, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000000 	.word	0x20000000
 8002250:	20000234 	.word	0x20000234

08002254 <SD_disk_ioctl>:
#endif /* _READONLY */

DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b08b      	sub	sp, #44	@ 0x2c
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	603a      	str	r2, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
 8002260:	460b      	mov	r3, r1
 8002262:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800226e:	2304      	movs	r3, #4
 8002270:	e119      	b.n	80024a6 <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8002278:	79bb      	ldrb	r3, [r7, #6]
 800227a:	2b05      	cmp	r3, #5
 800227c:	d129      	bne.n	80022d2 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d017      	beq.n	80022b6 <SD_disk_ioctl+0x62>
 8002286:	2b02      	cmp	r3, #2
 8002288:	dc1f      	bgt.n	80022ca <SD_disk_ioctl+0x76>
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <SD_disk_ioctl+0x40>
 800228e:	2b01      	cmp	r3, #1
 8002290:	d00b      	beq.n	80022aa <SD_disk_ioctl+0x56>
 8002292:	e01a      	b.n	80022ca <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002294:	f7ff fd08 	bl	8001ca8 <SD_CheckPower>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800229e:	f7ff fcf7 	bl	8001c90 <SD_PowerOff>
      res = RES_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80022a8:	e0fb      	b.n	80024a2 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 80022aa:	f7ff fca5 	bl	8001bf8 <SD_PowerOn>
      res = RES_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80022b4:	e0f5      	b.n	80024a2 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	1c5c      	adds	r4, r3, #1
 80022ba:	f7ff fcf5 	bl	8001ca8 <SD_CheckPower>
 80022be:	4603      	mov	r3, r0
 80022c0:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80022c2:	2300      	movs	r3, #0
 80022c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80022c8:	e0eb      	b.n	80024a2 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 80022ca:	2304      	movs	r3, #4
 80022cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80022d0:	e0e7      	b.n	80024a2 <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80022d2:	4b77      	ldr	r3, [pc, #476]	@ (80024b0 <SD_disk_ioctl+0x25c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0e0      	b.n	80024a6 <SD_disk_ioctl+0x252>

    SELECT();
 80022e4:	f7ff fc0e 	bl	8001b04 <SELECT>

    switch (ctrl)
 80022e8:	79bb      	ldrb	r3, [r7, #6]
 80022ea:	2b0d      	cmp	r3, #13
 80022ec:	f200 80ca 	bhi.w	8002484 <SD_disk_ioctl+0x230>
 80022f0:	a201      	add	r2, pc, #4	@ (adr r2, 80022f8 <SD_disk_ioctl+0xa4>)
 80022f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f6:	bf00      	nop
 80022f8:	080023ef 	.word	0x080023ef
 80022fc:	08002331 	.word	0x08002331
 8002300:	080023df 	.word	0x080023df
 8002304:	08002485 	.word	0x08002485
 8002308:	08002485 	.word	0x08002485
 800230c:	08002485 	.word	0x08002485
 8002310:	08002485 	.word	0x08002485
 8002314:	08002485 	.word	0x08002485
 8002318:	08002485 	.word	0x08002485
 800231c:	08002485 	.word	0x08002485
 8002320:	08002485 	.word	0x08002485
 8002324:	08002401 	.word	0x08002401
 8002328:	08002425 	.word	0x08002425
 800232c:	08002449 	.word	0x08002449
    {
    case GET_SECTOR_COUNT:
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002330:	2100      	movs	r1, #0
 8002332:	2049      	movs	r0, #73	@ 0x49
 8002334:	f7ff fd4e 	bl	8001dd4 <SD_SendCmd>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 80a6 	bne.w	800248c <SD_disk_ioctl+0x238>
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	2110      	movs	r1, #16
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fcba 	bl	8001cc0 <SD_RxDataBlock>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 809c 	beq.w	800248c <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8002354:	7b3b      	ldrb	r3, [r7, #12]
 8002356:	099b      	lsrs	r3, r3, #6
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d10d      	bne.n	800237a <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800235e:	7d7b      	ldrb	r3, [r7, #21]
 8002360:	461a      	mov	r2, r3
 8002362:	7d3b      	ldrb	r3, [r7, #20]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b29b      	uxth	r3, r3
 8002368:	4413      	add	r3, r2
 800236a:	b29b      	uxth	r3, r3
 800236c:	3301      	adds	r3, #1
 800236e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002370:	8bfb      	ldrh	r3, [r7, #30]
 8002372:	029a      	lsls	r2, r3, #10
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e02d      	b.n	80023d6 <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800237a:	7c7b      	ldrb	r3, [r7, #17]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	b2da      	uxtb	r2, r3
 8002382:	7dbb      	ldrb	r3, [r7, #22]
 8002384:	09db      	lsrs	r3, r3, #7
 8002386:	b2db      	uxtb	r3, r3
 8002388:	4413      	add	r3, r2
 800238a:	b2da      	uxtb	r2, r3
 800238c:	7d7b      	ldrb	r3, [r7, #21]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f003 0306 	and.w	r3, r3, #6
 8002396:	b2db      	uxtb	r3, r3
 8002398:	4413      	add	r3, r2
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3302      	adds	r3, #2
 800239e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80023a2:	7d3b      	ldrb	r3, [r7, #20]
 80023a4:	099b      	lsrs	r3, r3, #6
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	7cfb      	ldrb	r3, [r7, #19]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	7cbb      	ldrb	r3, [r7, #18]
 80023b6:	029b      	lsls	r3, r3, #10
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80023be:	b29b      	uxth	r3, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80023c8:	8bfa      	ldrh	r2, [r7, #30]
 80023ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80023ce:	3b09      	subs	r3, #9
 80023d0:	409a      	lsls	r2, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80023dc:	e056      	b.n	800248c <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023e4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80023ec:	e055      	b.n	800249a <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF)
 80023ee:	f7ff fbe7 	bl	8001bc0 <SD_ReadyWait>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2bff      	cmp	r3, #255	@ 0xff
 80023f6:	d14b      	bne.n	8002490 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80023fe:	e047      	b.n	8002490 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002400:	2100      	movs	r1, #0
 8002402:	2049      	movs	r0, #73	@ 0x49
 8002404:	f7ff fce6 	bl	8001dd4 <SD_SendCmd>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d142      	bne.n	8002494 <SD_disk_ioctl+0x240>
 800240e:	2110      	movs	r1, #16
 8002410:	6a38      	ldr	r0, [r7, #32]
 8002412:	f7ff fc55 	bl	8001cc0 <SD_RxDataBlock>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d03b      	beq.n	8002494 <SD_disk_ioctl+0x240>
        res = RES_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002422:	e037      	b.n	8002494 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002424:	2100      	movs	r1, #0
 8002426:	204a      	movs	r0, #74	@ 0x4a
 8002428:	f7ff fcd4 	bl	8001dd4 <SD_SendCmd>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d132      	bne.n	8002498 <SD_disk_ioctl+0x244>
 8002432:	2110      	movs	r1, #16
 8002434:	6a38      	ldr	r0, [r7, #32]
 8002436:	f7ff fc43 	bl	8001cc0 <SD_RxDataBlock>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d02b      	beq.n	8002498 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002446:	e027      	b.n	8002498 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      if (SD_SendCmd(CMD58, 0) == 0)
 8002448:	2100      	movs	r1, #0
 800244a:	207a      	movs	r0, #122	@ 0x7a
 800244c:	f7ff fcc2 	bl	8001dd4 <SD_SendCmd>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d116      	bne.n	8002484 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 8002456:	2300      	movs	r3, #0
 8002458:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800245c:	e00b      	b.n	8002476 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 800245e:	6a3c      	ldr	r4, [r7, #32]
 8002460:	1c63      	adds	r3, r4, #1
 8002462:	623b      	str	r3, [r7, #32]
 8002464:	f7ff fb80 	bl	8001b68 <SPI_RxByte>
 8002468:	4603      	mov	r3, r0
 800246a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800246c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002470:	3301      	adds	r3, #1
 8002472:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002476:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800247a:	2b03      	cmp	r3, #3
 800247c:	d9ef      	bls.n	800245e <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8002484:	2304      	movs	r3, #4
 8002486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800248a:	e006      	b.n	800249a <SD_disk_ioctl+0x246>
      break;
 800248c:	bf00      	nop
 800248e:	e004      	b.n	800249a <SD_disk_ioctl+0x246>
      break;
 8002490:	bf00      	nop
 8002492:	e002      	b.n	800249a <SD_disk_ioctl+0x246>
      break;
 8002494:	bf00      	nop
 8002496:	e000      	b.n	800249a <SD_disk_ioctl+0x246>
      break;
 8002498:	bf00      	nop
    }

    DESELECT();
 800249a:	f7ff fb3f 	bl	8001b1c <DESELECT>
    SPI_RxByte();
 800249e:	f7ff fb63 	bl	8001b68 <SPI_RxByte>
  }

  return res;
 80024a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	372c      	adds	r7, #44	@ 0x2c
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000000 	.word	0x20000000

080024b4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08e      	sub	sp, #56	@ 0x38
 80024b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ca:	4b89      	ldr	r3, [pc, #548]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4a88      	ldr	r2, [pc, #544]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d6:	4b86      	ldr	r3, [pc, #536]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	623b      	str	r3, [r7, #32]
 80024e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024e2:	4b83      	ldr	r3, [pc, #524]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	4a82      	ldr	r2, [pc, #520]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 80024e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ee:	4b80      	ldr	r3, [pc, #512]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	4b7d      	ldr	r3, [pc, #500]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	4a7c      	ldr	r2, [pc, #496]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6313      	str	r3, [r2, #48]	@ 0x30
 8002506:	4b7a      	ldr	r3, [pc, #488]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	4b77      	ldr	r3, [pc, #476]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	4a76      	ldr	r2, [pc, #472]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6313      	str	r3, [r2, #48]	@ 0x30
 800251e:	4b74      	ldr	r3, [pc, #464]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800252a:	4b71      	ldr	r3, [pc, #452]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	4a70      	ldr	r2, [pc, #448]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002530:	f043 0320 	orr.w	r3, r3, #32
 8002534:	6313      	str	r3, [r2, #48]	@ 0x30
 8002536:	4b6e      	ldr	r3, [pc, #440]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002542:	4b6b      	ldr	r3, [pc, #428]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	4a6a      	ldr	r2, [pc, #424]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002548:	f043 0310 	orr.w	r3, r3, #16
 800254c:	6313      	str	r3, [r2, #48]	@ 0x30
 800254e:	4b68      	ldr	r3, [pc, #416]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800255a:	4b65      	ldr	r3, [pc, #404]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a64      	ldr	r2, [pc, #400]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002560:	f043 0308 	orr.w	r3, r3, #8
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b62      	ldr	r3, [pc, #392]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002572:	4b5f      	ldr	r3, [pc, #380]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a5e      	ldr	r2, [pc, #376]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b5c      	ldr	r3, [pc, #368]	@ (80026f0 <MX_GPIO_Init+0x23c>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800258a:	2200      	movs	r2, #0
 800258c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002590:	4858      	ldr	r0, [pc, #352]	@ (80026f4 <MX_GPIO_Init+0x240>)
 8002592:	f001 fc43 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_OLED_Pin|ST7735_RES_Pin_Pin|ST7735_DC_Pin_Pin, GPIO_PIN_RESET);
 8002596:	2200      	movs	r2, #0
 8002598:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800259c:	4856      	ldr	r0, [pc, #344]	@ (80026f8 <MX_GPIO_Init+0x244>)
 800259e:	f001 fc3d 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_BMP_Pin|CS_SDcard_Pin, GPIO_PIN_RESET);
 80025a2:	2200      	movs	r2, #0
 80025a4:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 80025a8:	4854      	ldr	r0, [pc, #336]	@ (80026fc <MX_GPIO_Init+0x248>)
 80025aa:	f001 fc37 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2140      	movs	r1, #64	@ 0x40
 80025b2:	4853      	ldr	r0, [pc, #332]	@ (8002700 <MX_GPIO_Init+0x24c>)
 80025b4:	f001 fc32 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80025b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80025c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025cc:	4619      	mov	r1, r3
 80025ce:	484d      	ldr	r0, [pc, #308]	@ (8002704 <MX_GPIO_Init+0x250>)
 80025d0:	f001 fa78 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80025d4:	2332      	movs	r3, #50	@ 0x32
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025e4:	230b      	movs	r3, #11
 80025e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ec:	4619      	mov	r1, r3
 80025ee:	4845      	ldr	r0, [pc, #276]	@ (8002704 <MX_GPIO_Init+0x250>)
 80025f0:	f001 fa68 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025f4:	2386      	movs	r3, #134	@ 0x86
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002604:	230b      	movs	r3, #11
 8002606:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800260c:	4619      	mov	r1, r3
 800260e:	483e      	ldr	r0, [pc, #248]	@ (8002708 <MX_GPIO_Init+0x254>)
 8002610:	f001 fa58 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002614:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261a:	2301      	movs	r3, #1
 800261c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800262a:	4619      	mov	r1, r3
 800262c:	4831      	ldr	r0, [pc, #196]	@ (80026f4 <MX_GPIO_Init+0x240>)
 800262e:	f001 fa49 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_OLED_Pin ST7735_RES_Pin_Pin ST7735_DC_Pin_Pin */
  GPIO_InitStruct.Pin = CS_OLED_Pin|ST7735_RES_Pin_Pin|ST7735_DC_Pin_Pin;
 8002632:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002638:	2301      	movs	r3, #1
 800263a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	2300      	movs	r3, #0
 8002642:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002648:	4619      	mov	r1, r3
 800264a:	482b      	ldr	r0, [pc, #172]	@ (80026f8 <MX_GPIO_Init+0x244>)
 800264c:	f001 fa3a 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_BMP_Pin CS_SDcard_Pin */
  GPIO_InitStruct.Pin = CS_BMP_Pin|CS_SDcard_Pin;
 8002650:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	2301      	movs	r3, #1
 8002658:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002666:	4619      	mov	r1, r3
 8002668:	4824      	ldr	r0, [pc, #144]	@ (80026fc <MX_GPIO_Init+0x248>)
 800266a:	f001 fa2b 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800266e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002680:	230b      	movs	r3, #11
 8002682:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002688:	4619      	mov	r1, r3
 800268a:	481a      	ldr	r0, [pc, #104]	@ (80026f4 <MX_GPIO_Init+0x240>)
 800268c:	f001 fa1a 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002690:	2340      	movs	r3, #64	@ 0x40
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002694:	2301      	movs	r3, #1
 8002696:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80026a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a4:	4619      	mov	r1, r3
 80026a6:	4816      	ldr	r0, [pc, #88]	@ (8002700 <MX_GPIO_Init+0x24c>)
 80026a8:	f001 fa0c 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80026ac:	2380      	movs	r3, #128	@ 0x80
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80026b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026bc:	4619      	mov	r1, r3
 80026be:	4810      	ldr	r0, [pc, #64]	@ (8002700 <MX_GPIO_Init+0x24c>)
 80026c0:	f001 fa00 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80026c4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d2:	2303      	movs	r3, #3
 80026d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026d6:	230b      	movs	r3, #11
 80026d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026de:	4619      	mov	r1, r3
 80026e0:	4807      	ldr	r0, [pc, #28]	@ (8002700 <MX_GPIO_Init+0x24c>)
 80026e2:	f001 f9ef 	bl	8003ac4 <HAL_GPIO_Init>

}
 80026e6:	bf00      	nop
 80026e8:	3738      	adds	r7, #56	@ 0x38
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020400 	.word	0x40020400
 80026f8:	40021400 	.word	0x40021400
 80026fc:	40021000 	.word	0x40021000
 8002700:	40021800 	.word	0x40021800
 8002704:	40020800 	.word	0x40020800
 8002708:	40020000 	.word	0x40020000

0800270c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002710:	4b1b      	ldr	r3, [pc, #108]	@ (8002780 <MX_I2C1_Init+0x74>)
 8002712:	4a1c      	ldr	r2, [pc, #112]	@ (8002784 <MX_I2C1_Init+0x78>)
 8002714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8002716:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <MX_I2C1_Init+0x74>)
 8002718:	4a1b      	ldr	r2, [pc, #108]	@ (8002788 <MX_I2C1_Init+0x7c>)
 800271a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800271c:	4b18      	ldr	r3, [pc, #96]	@ (8002780 <MX_I2C1_Init+0x74>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002722:	4b17      	ldr	r3, [pc, #92]	@ (8002780 <MX_I2C1_Init+0x74>)
 8002724:	2201      	movs	r2, #1
 8002726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002728:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <MX_I2C1_Init+0x74>)
 800272a:	2200      	movs	r2, #0
 800272c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800272e:	4b14      	ldr	r3, [pc, #80]	@ (8002780 <MX_I2C1_Init+0x74>)
 8002730:	2200      	movs	r2, #0
 8002732:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002734:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <MX_I2C1_Init+0x74>)
 8002736:	2200      	movs	r2, #0
 8002738:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800273a:	4b11      	ldr	r3, [pc, #68]	@ (8002780 <MX_I2C1_Init+0x74>)
 800273c:	2200      	movs	r2, #0
 800273e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002740:	4b0f      	ldr	r3, [pc, #60]	@ (8002780 <MX_I2C1_Init+0x74>)
 8002742:	2200      	movs	r2, #0
 8002744:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002746:	480e      	ldr	r0, [pc, #56]	@ (8002780 <MX_I2C1_Init+0x74>)
 8002748:	f001 fb82 	bl	8003e50 <HAL_I2C_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002752:	f000 fa8f 	bl	8002c74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002756:	2100      	movs	r1, #0
 8002758:	4809      	ldr	r0, [pc, #36]	@ (8002780 <MX_I2C1_Init+0x74>)
 800275a:	f001 fc15 	bl	8003f88 <HAL_I2CEx_ConfigAnalogFilter>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002764:	f000 fa86 	bl	8002c74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002768:	2100      	movs	r1, #0
 800276a:	4805      	ldr	r0, [pc, #20]	@ (8002780 <MX_I2C1_Init+0x74>)
 800276c:	f001 fc57 	bl	800401e <HAL_I2CEx_ConfigDigitalFilter>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002776:	f000 fa7d 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000238 	.word	0x20000238
 8002784:	40005400 	.word	0x40005400
 8002788:	00808cd2 	.word	0x00808cd2

0800278c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b0aa      	sub	sp, #168	@ 0xa8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027a4:	f107 0310 	add.w	r3, r7, #16
 80027a8:	2284      	movs	r2, #132	@ 0x84
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f009 f847 	bl	800b840 <memset>
  if(i2cHandle->Instance==I2C1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a22      	ldr	r2, [pc, #136]	@ (8002840 <HAL_I2C_MspInit+0xb4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d13c      	bne.n	8002836 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027c2:	2300      	movs	r3, #0
 80027c4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c6:	f107 0310 	add.w	r3, r7, #16
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 fa88 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80027d6:	f000 fa4d 	bl	8002c74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027da:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <HAL_I2C_MspInit+0xb8>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	4a19      	ldr	r2, [pc, #100]	@ (8002844 <HAL_I2C_MspInit+0xb8>)
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e6:	4b17      	ldr	r3, [pc, #92]	@ (8002844 <HAL_I2C_MspInit+0xb8>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fa:	2312      	movs	r3, #18
 80027fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800280c:	2304      	movs	r3, #4
 800280e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002816:	4619      	mov	r1, r3
 8002818:	480b      	ldr	r0, [pc, #44]	@ (8002848 <HAL_I2C_MspInit+0xbc>)
 800281a:	f001 f953 	bl	8003ac4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800281e:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <HAL_I2C_MspInit+0xb8>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a08      	ldr	r2, [pc, #32]	@ (8002844 <HAL_I2C_MspInit+0xb8>)
 8002824:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_I2C_MspInit+0xb8>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002836:	bf00      	nop
 8002838:	37a8      	adds	r7, #168	@ 0xa8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40005400 	.word	0x40005400
 8002844:	40023800 	.word	0x40023800
 8002848:	40020400 	.word	0x40020400

0800284c <SDcardInit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDcardInit(char* folder_name) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
    FRESULT res;
    uint8_t retry_count = 5;
 8002854:	2305      	movs	r3, #5
 8002856:	73fb      	strb	r3, [r7, #15]

    while (retry_count--) {
 8002858:	e012      	b.n	8002880 <SDcardInit+0x34>
        res = f_mount(&fs, "", 1);
 800285a:	2201      	movs	r2, #1
 800285c:	492b      	ldr	r1, [pc, #172]	@ (800290c <SDcardInit+0xc0>)
 800285e:	482c      	ldr	r0, [pc, #176]	@ (8002910 <SDcardInit+0xc4>)
 8002860:	f006 fe42 	bl	80094e8 <f_mount>
 8002864:	4603      	mov	r3, r0
 8002866:	73bb      	strb	r3, [r7, #14]
        if (res == FR_OK) {
 8002868:	7bbb      	ldrb	r3, [r7, #14]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00e      	beq.n	800288c <SDcardInit+0x40>
            break;
        }
        printf("Error mounting filesystem! (%d). Retrying...\n", res);
 800286e:	7bbb      	ldrb	r3, [r7, #14]
 8002870:	4619      	mov	r1, r3
 8002872:	4828      	ldr	r0, [pc, #160]	@ (8002914 <SDcardInit+0xc8>)
 8002874:	f008 fe48 	bl	800b508 <iprintf>
        HAL_Delay(RETRY_DELAY_MS);
 8002878:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800287c:	f001 f818 	bl	80038b0 <HAL_Delay>
    while (retry_count--) {
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	1e5a      	subs	r2, r3, #1
 8002884:	73fa      	strb	r2, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1e7      	bne.n	800285a <SDcardInit+0xe>
 800288a:	e000      	b.n	800288e <SDcardInit+0x42>
            break;
 800288c:	bf00      	nop
    }

    retry_count = 5;
 800288e:	2305      	movs	r3, #5
 8002890:	73fb      	strb	r3, [r7, #15]
    while (retry_count--) {
 8002892:	e012      	b.n	80028ba <SDcardInit+0x6e>
        res = f_open(&fil, "file.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8002894:	2212      	movs	r2, #18
 8002896:	4920      	ldr	r1, [pc, #128]	@ (8002918 <SDcardInit+0xcc>)
 8002898:	4820      	ldr	r0, [pc, #128]	@ (800291c <SDcardInit+0xd0>)
 800289a:	f006 fe6b 	bl	8009574 <f_open>
 800289e:	4603      	mov	r3, r0
 80028a0:	73bb      	strb	r3, [r7, #14]
        if (res == FR_OK) {
 80028a2:	7bbb      	ldrb	r3, [r7, #14]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00e      	beq.n	80028c6 <SDcardInit+0x7a>
            break;
        }
        printf("Error opening SDcard file! (%d). Retrying...\n", res);
 80028a8:	7bbb      	ldrb	r3, [r7, #14]
 80028aa:	4619      	mov	r1, r3
 80028ac:	481c      	ldr	r0, [pc, #112]	@ (8002920 <SDcardInit+0xd4>)
 80028ae:	f008 fe2b 	bl	800b508 <iprintf>
        HAL_Delay(RETRY_DELAY_MS);
 80028b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028b6:	f000 fffb 	bl	80038b0 <HAL_Delay>
    while (retry_count--) {
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	1e5a      	subs	r2, r3, #1
 80028be:	73fa      	strb	r2, [r7, #15]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1e7      	bne.n	8002894 <SDcardInit+0x48>
 80028c4:	e000      	b.n	80028c8 <SDcardInit+0x7c>
            break;
 80028c6:	bf00      	nop
    }

    res = f_lseek(&fil, f_size(&fil));
 80028c8:	4b14      	ldr	r3, [pc, #80]	@ (800291c <SDcardInit+0xd0>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4619      	mov	r1, r3
 80028ce:	4813      	ldr	r0, [pc, #76]	@ (800291c <SDcardInit+0xd0>)
 80028d0:	f007 fa54 	bl	8009d7c <f_lseek>
 80028d4:	4603      	mov	r3, r0
 80028d6:	73bb      	strb	r3, [r7, #14]
    if (res != FR_OK) {
 80028d8:	7bbb      	ldrb	r3, [r7, #14]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <SDcardInit+0xa4>
        printf("Error seeking to end of file! (%d)\n", res);
 80028de:	7bbb      	ldrb	r3, [r7, #14]
 80028e0:	4619      	mov	r1, r3
 80028e2:	4810      	ldr	r0, [pc, #64]	@ (8002924 <SDcardInit+0xd8>)
 80028e4:	f008 fe10 	bl	800b508 <iprintf>
        f_close(&fil);
 80028e8:	480c      	ldr	r0, [pc, #48]	@ (800291c <SDcardInit+0xd0>)
 80028ea:	f007 fa1d 	bl	8009d28 <f_close>
        return;
 80028ee:	e00a      	b.n	8002906 <SDcardInit+0xba>
    }

    f_puts("\n--- Nowy pomiar ---\n", &fil);
 80028f0:	490a      	ldr	r1, [pc, #40]	@ (800291c <SDcardInit+0xd0>)
 80028f2:	480d      	ldr	r0, [pc, #52]	@ (8002928 <SDcardInit+0xdc>)
 80028f4:	f007 fcdd 	bl	800a2b2 <f_puts>
    f_puts("Temperatura,Ciśnienie\n", &fil);
 80028f8:	4908      	ldr	r1, [pc, #32]	@ (800291c <SDcardInit+0xd0>)
 80028fa:	480c      	ldr	r0, [pc, #48]	@ (800292c <SDcardInit+0xe0>)
 80028fc:	f007 fcd9 	bl	800a2b2 <f_puts>

    f_sync(&fil);
 8002900:	4806      	ldr	r0, [pc, #24]	@ (800291c <SDcardInit+0xd0>)
 8002902:	f007 f993 	bl	8009c2c <f_sync>

}
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	0800ed80 	.word	0x0800ed80
 8002910:	20000294 	.word	0x20000294
 8002914:	0800ed84 	.word	0x0800ed84
 8002918:	0800edb4 	.word	0x0800edb4
 800291c:	200012cc 	.word	0x200012cc
 8002920:	0800edc0 	.word	0x0800edc0
 8002924:	0800edf0 	.word	0x0800edf0
 8002928:	0800ee14 	.word	0x0800ee14
 800292c:	0800ee2c 	.word	0x0800ee2c

08002930 <SDcardWriteData>:

void SDcardWriteData(float *temperature, int32_t *pressure) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b094      	sub	sp, #80	@ 0x50
 8002934:	af04      	add	r7, sp, #16
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
    if (f_lseek(&fil, f_size(&fil)) != FR_OK) {
 800293a:	4b24      	ldr	r3, [pc, #144]	@ (80029cc <SDcardWriteData+0x9c>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	4619      	mov	r1, r3
 8002940:	4822      	ldr	r0, [pc, #136]	@ (80029cc <SDcardWriteData+0x9c>)
 8002942:	f007 fa1b 	bl	8009d7c <f_lseek>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d011      	beq.n	8002970 <SDcardWriteData+0x40>
        printf("Error seeking in file!\n");
 800294c:	4820      	ldr	r0, [pc, #128]	@ (80029d0 <SDcardWriteData+0xa0>)
 800294e:	f008 fe43 	bl	800b5d8 <puts>
        ST7735_WriteString(10, ST7735_WIDTH-20, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002952:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <SDcardWriteData+0xa4>)
 8002954:	2200      	movs	r2, #0
 8002956:	9202      	str	r2, [sp, #8]
 8002958:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800295c:	9201      	str	r2, [sp, #4]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	9200      	str	r2, [sp, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1c      	ldr	r2, [pc, #112]	@ (80029d8 <SDcardWriteData+0xa8>)
 8002966:	216c      	movs	r1, #108	@ 0x6c
 8002968:	200a      	movs	r0, #10
 800296a:	f000 fbae 	bl	80030ca <ST7735_WriteString>
 800296e:	e029      	b.n	80029c4 <SDcardWriteData+0x94>
        return;
    }

    char buffer[50];
    snprintf(buffer, sizeof(buffer), "%.2f,%ld\n", *temperature, *pressure);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7fd fe07 	bl	8000588 <__aeabi_f2d>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	6839      	ldr	r1, [r7, #0]
 8002980:	6809      	ldr	r1, [r1, #0]
 8002982:	f107 000c 	add.w	r0, r7, #12
 8002986:	9102      	str	r1, [sp, #8]
 8002988:	e9cd 2300 	strd	r2, r3, [sp]
 800298c:	4a13      	ldr	r2, [pc, #76]	@ (80029dc <SDcardWriteData+0xac>)
 800298e:	2132      	movs	r1, #50	@ 0x32
 8002990:	f008 fe2a 	bl	800b5e8 <sniprintf>

    if (f_puts(buffer, &fil) < 0) {
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	490c      	ldr	r1, [pc, #48]	@ (80029cc <SDcardWriteData+0x9c>)
 800299a:	4618      	mov	r0, r3
 800299c:	f007 fc89 	bl	800a2b2 <f_puts>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	da02      	bge.n	80029ac <SDcardWriteData+0x7c>
        printf("Error writing to file!\n");
 80029a6:	480e      	ldr	r0, [pc, #56]	@ (80029e0 <SDcardWriteData+0xb0>)
 80029a8:	f008 fe16 	bl	800b5d8 <puts>
    }

    if (f_sync(&fil) != FR_OK) {
 80029ac:	4807      	ldr	r0, [pc, #28]	@ (80029cc <SDcardWriteData+0x9c>)
 80029ae:	f007 f93d 	bl	8009c2c <f_sync>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <SDcardWriteData+0x8e>
        printf("Error syncing file!\n");
 80029b8:	480a      	ldr	r0, [pc, #40]	@ (80029e4 <SDcardWriteData+0xb4>)
 80029ba:	f008 fe0d 	bl	800b5d8 <puts>
    }
    f_sync(&fil);
 80029be:	4803      	ldr	r0, [pc, #12]	@ (80029cc <SDcardWriteData+0x9c>)
 80029c0:	f007 f934 	bl	8009c2c <f_sync>
}
 80029c4:	3740      	adds	r7, #64	@ 0x40
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200012cc 	.word	0x200012cc
 80029d0:	0800ee44 	.word	0x0800ee44
 80029d4:	20000004 	.word	0x20000004
 80029d8:	0800ee5c 	.word	0x0800ee5c
 80029dc:	0800ee6c 	.word	0x0800ee6c
 80029e0:	0800ee78 	.word	0x0800ee78
 80029e4:	0800ee90 	.word	0x0800ee90

080029e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b0a0      	sub	sp, #128	@ 0x80
 80029ec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029ee:	f000 ff02 	bl	80037f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029f2:	f000 f8d7 	bl	8002ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029f6:	f7ff fd5d 	bl	80024b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80029fa:	f7ff fe87 	bl	800270c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80029fe:	f000 fd99 	bl	8003534 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002a02:	f000 fe27 	bl	8003654 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8002a06:	f000 f94d 	bl	8002ca4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002a0a:	f004 fb27 	bl	800705c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8002a0e:	f000 facb 	bl	8002fa8 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f000 fc18 	bl	8003248 <ST7735_FillScreen>

  BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8002a18:	2301      	movs	r3, #1
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	4856      	ldr	r0, [pc, #344]	@ (8002b78 <main+0x190>)
 8002a20:	f7fe fc2c 	bl	800127c <BMP280_Init>

  SDcardInit("test.txt");
 8002a24:	4855      	ldr	r0, [pc, #340]	@ (8002b7c <main+0x194>)
 8002a26:	f7ff ff11 	bl	800284c <SDcardInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	BMP280_ReadTemperatureAndPressure(&BMP280temperature, &BMP280pressure);
 8002a2a:	4955      	ldr	r1, [pc, #340]	@ (8002b80 <main+0x198>)
 8002a2c:	4855      	ldr	r0, [pc, #340]	@ (8002b84 <main+0x19c>)
 8002a2e:	f7fe fd7f 	bl	8001530 <BMP280_ReadTemperatureAndPressure>
  	printf("Temperature: %.2f °C, %ld Pa\n\r", BMP280temperature, BMP280pressure);
 8002a32:	4b54      	ldr	r3, [pc, #336]	@ (8002b84 <main+0x19c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fda6 	bl	8000588 <__aeabi_f2d>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	494f      	ldr	r1, [pc, #316]	@ (8002b80 <main+0x198>)
 8002a42:	6809      	ldr	r1, [r1, #0]
 8002a44:	9100      	str	r1, [sp, #0]
 8002a46:	4850      	ldr	r0, [pc, #320]	@ (8002b88 <main+0x1a0>)
 8002a48:	f008 fd5e 	bl	800b508 <iprintf>



  	SDcardWriteData(&BMP280temperature, &BMP280pressure);
 8002a4c:	494c      	ldr	r1, [pc, #304]	@ (8002b80 <main+0x198>)
 8002a4e:	484d      	ldr	r0, [pc, #308]	@ (8002b84 <main+0x19c>)
 8002a50:	f7ff ff6e 	bl	8002930 <SDcardWriteData>



    char buffer[100];
    int tempInt = (int)(BMP280temperature * 100);
 8002a54:	4b4b      	ldr	r3, [pc, #300]	@ (8002b84 <main+0x19c>)
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8002b8c <main+0x1a4>
 8002a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a66:	ee17 3a90 	vmov	r3, s15
 8002a6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int tempFrac = tempInt % 100;
 8002a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a6e:	4a48      	ldr	r2, [pc, #288]	@ (8002b90 <main+0x1a8>)
 8002a70:	fb82 1203 	smull	r1, r2, r2, r3
 8002a74:	1151      	asrs	r1, r2, #5
 8002a76:	17da      	asrs	r2, r3, #31
 8002a78:	1a8a      	subs	r2, r1, r2
 8002a7a:	2164      	movs	r1, #100	@ 0x64
 8002a7c:	fb01 f202 	mul.w	r2, r1, r2
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	66bb      	str	r3, [r7, #104]	@ 0x68

    // Temperatura
    int len = snprintf(NULL, 0, "Temp: %d.%02d °C", tempInt / 100, tempFrac) + 1;
 8002a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a86:	4a42      	ldr	r2, [pc, #264]	@ (8002b90 <main+0x1a8>)
 8002a88:	fb82 1203 	smull	r1, r2, r2, r3
 8002a8c:	1152      	asrs	r2, r2, #5
 8002a8e:	17db      	asrs	r3, r3, #31
 8002a90:	1ad2      	subs	r2, r2, r3
 8002a92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	4a3e      	ldr	r2, [pc, #248]	@ (8002b94 <main+0x1ac>)
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f008 fda3 	bl	800b5e8 <sniprintf>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (len < sizeof(buffer)) {
 8002aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002aaa:	2b63      	cmp	r3, #99	@ 0x63
 8002aac:	d81d      	bhi.n	8002aea <main+0x102>
    	snprintf(buffer, sizeof(buffer), "Temp: %d.%02d °C", tempInt / 100, tempFrac);
 8002aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ab0:	4a37      	ldr	r2, [pc, #220]	@ (8002b90 <main+0x1a8>)
 8002ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ab6:	1152      	asrs	r2, r2, #5
 8002ab8:	17db      	asrs	r3, r3, #31
 8002aba:	1ad2      	subs	r2, r2, r3
 8002abc:	4638      	mov	r0, r7
 8002abe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	4a33      	ldr	r2, [pc, #204]	@ (8002b94 <main+0x1ac>)
 8002ac6:	2164      	movs	r1, #100	@ 0x64
 8002ac8:	f008 fd8e 	bl	800b5e8 <sniprintf>
    	ST7735_WriteString(10, 10, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002acc:	4b32      	ldr	r3, [pc, #200]	@ (8002b98 <main+0x1b0>)
 8002ace:	4639      	mov	r1, r7
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	9202      	str	r2, [sp, #8]
 8002ad4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ad8:	9201      	str	r2, [sp, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	9200      	str	r2, [sp, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	460a      	mov	r2, r1
 8002ae2:	210a      	movs	r1, #10
 8002ae4:	200a      	movs	r0, #10
 8002ae6:	f000 faf0 	bl	80030ca <ST7735_WriteString>
    }
    ST7735_WriteString(10, 10, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002aea:	4b2b      	ldr	r3, [pc, #172]	@ (8002b98 <main+0x1b0>)
 8002aec:	4639      	mov	r1, r7
 8002aee:	2200      	movs	r2, #0
 8002af0:	9202      	str	r2, [sp, #8]
 8002af2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002af6:	9201      	str	r2, [sp, #4]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	9200      	str	r2, [sp, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	460a      	mov	r2, r1
 8002b00:	210a      	movs	r1, #10
 8002b02:	200a      	movs	r0, #10
 8002b04:	f000 fae1 	bl	80030ca <ST7735_WriteString>

    // Cisnienie
    len = snprintf(NULL, 0, "Pressure: %ld Pa", BMP280pressure) + 1;
 8002b08:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <main+0x198>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a23      	ldr	r2, [pc, #140]	@ (8002b9c <main+0x1b4>)
 8002b0e:	2100      	movs	r1, #0
 8002b10:	2000      	movs	r0, #0
 8002b12:	f008 fd69 	bl	800b5e8 <sniprintf>
 8002b16:	4603      	mov	r3, r0
 8002b18:	3301      	adds	r3, #1
 8002b1a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (len < sizeof(buffer)) {
 8002b1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b1e:	2b63      	cmp	r3, #99	@ 0x63
 8002b20:	d815      	bhi.n	8002b4e <main+0x166>
    	snprintf(buffer, sizeof(buffer), "Prs: %ld Pa", BMP280pressure);
 8002b22:	4b17      	ldr	r3, [pc, #92]	@ (8002b80 <main+0x198>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4638      	mov	r0, r7
 8002b28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba0 <main+0x1b8>)
 8002b2a:	2164      	movs	r1, #100	@ 0x64
 8002b2c:	f008 fd5c 	bl	800b5e8 <sniprintf>
    	ST7735_WriteString(10, 20, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002b30:	4b19      	ldr	r3, [pc, #100]	@ (8002b98 <main+0x1b0>)
 8002b32:	4639      	mov	r1, r7
 8002b34:	2200      	movs	r2, #0
 8002b36:	9202      	str	r2, [sp, #8]
 8002b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b3c:	9201      	str	r2, [sp, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	9200      	str	r2, [sp, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	460a      	mov	r2, r1
 8002b46:	2114      	movs	r1, #20
 8002b48:	200a      	movs	r0, #10
 8002b4a:	f000 fabe 	bl	80030ca <ST7735_WriteString>
    }
    ST7735_WriteString(10, 20, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002b4e:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <main+0x1b0>)
 8002b50:	4639      	mov	r1, r7
 8002b52:	2200      	movs	r2, #0
 8002b54:	9202      	str	r2, [sp, #8]
 8002b56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b5a:	9201      	str	r2, [sp, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	9200      	str	r2, [sp, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	460a      	mov	r2, r1
 8002b64:	2114      	movs	r1, #20
 8002b66:	200a      	movs	r0, #10
 8002b68:	f000 faaf 	bl	80030ca <ST7735_WriteString>


  	HAL_Delay(1000);
 8002b6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b70:	f000 fe9e 	bl	80038b0 <HAL_Delay>
  {
 8002b74:	e759      	b.n	8002a2a <main+0x42>
 8002b76:	bf00      	nop
 8002b78:	200022fc 	.word	0x200022fc
 8002b7c:	0800eeb8 	.word	0x0800eeb8
 8002b80:	20000290 	.word	0x20000290
 8002b84:	2000028c 	.word	0x2000028c
 8002b88:	0800eec4 	.word	0x0800eec4
 8002b8c:	42c80000 	.word	0x42c80000
 8002b90:	51eb851f 	.word	0x51eb851f
 8002b94:	0800eee4 	.word	0x0800eee4
 8002b98:	20000004 	.word	0x20000004
 8002b9c:	0800eef8 	.word	0x0800eef8
 8002ba0:	0800ef0c 	.word	0x0800ef0c

08002ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b094      	sub	sp, #80	@ 0x50
 8002ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002baa:	f107 0320 	add.w	r3, r7, #32
 8002bae:	2230      	movs	r2, #48	@ 0x30
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f008 fe44 	bl	800b840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bb8:	f107 030c 	add.w	r3, r7, #12
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002bc8:	f001 fbb0 	bl	800432c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bcc:	4b27      	ldr	r3, [pc, #156]	@ (8002c6c <SystemClock_Config+0xc8>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd0:	4a26      	ldr	r2, [pc, #152]	@ (8002c6c <SystemClock_Config+0xc8>)
 8002bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd8:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <SystemClock_Config+0xc8>)
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002be4:	4b22      	ldr	r3, [pc, #136]	@ (8002c70 <SystemClock_Config+0xcc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002bec:	4a20      	ldr	r2, [pc, #128]	@ (8002c70 <SystemClock_Config+0xcc>)
 8002bee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c70 <SystemClock_Config+0xcc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c00:	2301      	movs	r3, #1
 8002c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c14:	2304      	movs	r3, #4
 8002c16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002c18:	2348      	movs	r3, #72	@ 0x48
 8002c1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002c20:	2303      	movs	r3, #3
 8002c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c24:	f107 0320 	add.w	r3, r7, #32
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 fb8f 	bl	800434c <HAL_RCC_OscConfig>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c34:	f000 f81e 	bl	8002c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c38:	230f      	movs	r3, #15
 8002c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	2102      	movs	r1, #2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f001 fe1d 	bl	8004894 <HAL_RCC_ClockConfig>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002c60:	f000 f808 	bl	8002c74 <Error_Handler>
  }
}
 8002c64:	bf00      	nop
 8002c66:	3750      	adds	r7, #80	@ 0x50
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40007000 	.word	0x40007000

08002c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c78:	b672      	cpsid	i
}
 8002c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <Error_Handler+0x8>

08002c80 <__io_putchar>:
 */

#include "usart.h"

int __io_putchar(int ch)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 8002c88:	1d39      	adds	r1, r7, #4
 8002c8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4803      	ldr	r0, [pc, #12]	@ (8002ca0 <__io_putchar+0x20>)
 8002c92:	f003 fa3b 	bl	800610c <HAL_UART_Transmit>
	return ch;
 8002c96:	687b      	ldr	r3, [r7, #4]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20002368 	.word	0x20002368

08002ca4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002caa:	4a1c      	ldr	r2, [pc, #112]	@ (8002d1c <MX_SPI1_Init+0x78>)
 8002cac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002cb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cb6:	4b18      	ldr	r3, [pc, #96]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cbc:	4b16      	ldr	r3, [pc, #88]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002cbe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002cc2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002cc4:	4b14      	ldr	r3, [pc, #80]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002cca:	4b13      	ldr	r3, [pc, #76]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cd0:	4b11      	ldr	r3, [pc, #68]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cd6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002cda:	2220      	movs	r2, #32
 8002cdc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cde:	4b0e      	ldr	r3, [pc, #56]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cea:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002cf0:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002cf2:	2207      	movs	r2, #7
 8002cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cf6:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002cfc:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d02:	4805      	ldr	r0, [pc, #20]	@ (8002d18 <MX_SPI1_Init+0x74>)
 8002d04:	f002 fbdc 	bl	80054c0 <HAL_SPI_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d0e:	f7ff ffb1 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200022fc 	.word	0x200022fc
 8002d1c:	40013000 	.word	0x40013000

08002d20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	@ 0x28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a25      	ldr	r2, [pc, #148]	@ (8002dd4 <HAL_SPI_MspInit+0xb4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d143      	bne.n	8002dca <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d42:	4b25      	ldr	r3, [pc, #148]	@ (8002dd8 <HAL_SPI_MspInit+0xb8>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	4a24      	ldr	r2, [pc, #144]	@ (8002dd8 <HAL_SPI_MspInit+0xb8>)
 8002d48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d4e:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <HAL_SPI_MspInit+0xb8>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd8 <HAL_SPI_MspInit+0xb8>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8002dd8 <HAL_SPI_MspInit+0xb8>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d66:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd8 <HAL_SPI_MspInit+0xb8>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d72:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_SPI_MspInit+0xb8>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	4a18      	ldr	r2, [pc, #96]	@ (8002dd8 <HAL_SPI_MspInit+0xb8>)
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7e:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <HAL_SPI_MspInit+0xb8>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002d8a:	2360      	movs	r3, #96	@ 0x60
 8002d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d96:	2303      	movs	r3, #3
 8002d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d9a:	2305      	movs	r3, #5
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	4619      	mov	r1, r3
 8002da4:	480d      	ldr	r0, [pc, #52]	@ (8002ddc <HAL_SPI_MspInit+0xbc>)
 8002da6:	f000 fe8d 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002daa:	2320      	movs	r3, #32
 8002dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db6:	2303      	movs	r3, #3
 8002db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dba:	2305      	movs	r3, #5
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbe:	f107 0314 	add.w	r3, r7, #20
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4806      	ldr	r0, [pc, #24]	@ (8002de0 <HAL_SPI_MspInit+0xc0>)
 8002dc6:	f000 fe7d 	bl	8003ac4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002dca:	bf00      	nop
 8002dcc:	3728      	adds	r7, #40	@ 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40013000 	.word	0x40013000
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40020400 	.word	0x40020400

08002de4 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002de8:	2200      	movs	r2, #0
 8002dea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002dee:	4802      	ldr	r0, [pc, #8]	@ (8002df8 <ST7735_Select+0x14>)
 8002df0:	f001 f814 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021400 	.word	0x40021400

08002dfc <ST7735_Unselect>:

void ST7735_Unselect() {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002e00:	2201      	movs	r2, #1
 8002e02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e06:	4802      	ldr	r0, [pc, #8]	@ (8002e10 <ST7735_Unselect+0x14>)
 8002e08:	f001 f808 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40021400 	.word	0x40021400

08002e14 <ST7735_Reset>:

static void ST7735_Reset() {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002e1e:	4807      	ldr	r0, [pc, #28]	@ (8002e3c <ST7735_Reset+0x28>)
 8002e20:	f000 fffc 	bl	8003e1c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002e24:	2005      	movs	r0, #5
 8002e26:	f000 fd43 	bl	80038b0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002e30:	4802      	ldr	r0, [pc, #8]	@ (8002e3c <ST7735_Reset+0x28>)
 8002e32:	f000 fff3 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40021400 	.word	0x40021400

08002e40 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e50:	4806      	ldr	r0, [pc, #24]	@ (8002e6c <ST7735_WriteCommand+0x2c>)
 8002e52:	f000 ffe3 	bl	8003e1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002e56:	1df9      	adds	r1, r7, #7
 8002e58:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4804      	ldr	r0, [pc, #16]	@ (8002e70 <ST7735_WriteCommand+0x30>)
 8002e60:	f002 fbd9 	bl	8005616 <HAL_SPI_Transmit>
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021400 	.word	0x40021400
 8002e70:	200022fc 	.word	0x200022fc

08002e74 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e84:	4807      	ldr	r0, [pc, #28]	@ (8002ea4 <ST7735_WriteData+0x30>)
 8002e86:	f000 ffc9 	bl	8003e1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4804      	ldr	r0, [pc, #16]	@ (8002ea8 <ST7735_WriteData+0x34>)
 8002e96:	f002 fbbe 	bl	8005616 <HAL_SPI_Transmit>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40021400 	.word	0x40021400
 8002ea8:	200022fc 	.word	0x200022fc

08002eac <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8002ebe:	e034      	b.n	8002f2a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8002eca:	7afb      	ldrb	r3, [r7, #11]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ffb7 	bl	8002e40 <ST7735_WriteCommand>

        numArgs = *addr++;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002edc:	7abb      	ldrb	r3, [r7, #10]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8002ee6:	7abb      	ldrb	r3, [r7, #10]
 8002ee8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eec:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002eee:	7abb      	ldrb	r3, [r7, #10]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002ef4:	7abb      	ldrb	r3, [r7, #10]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ffbb 	bl	8002e74 <ST7735_WriteData>
            addr += numArgs;
 8002efe:	7abb      	ldrb	r3, [r7, #10]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8002f06:	89bb      	ldrh	r3, [r7, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8002f16:	89bb      	ldrh	r3, [r7, #12]
 8002f18:	2bff      	cmp	r3, #255	@ 0xff
 8002f1a:	d102      	bne.n	8002f22 <ST7735_ExecuteCommandList+0x76>
 8002f1c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002f20:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002f22:	89bb      	ldrh	r3, [r7, #12]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fcc3 	bl	80038b0 <HAL_Delay>
    while(numCommands--) {
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	1e5a      	subs	r2, r3, #1
 8002f2e:	73fa      	strb	r2, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1c5      	bne.n	8002ec0 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002f3e:	b590      	push	{r4, r7, lr}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4604      	mov	r4, r0
 8002f46:	4608      	mov	r0, r1
 8002f48:	4611      	mov	r1, r2
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	71fb      	strb	r3, [r7, #7]
 8002f50:	4603      	mov	r3, r0
 8002f52:	71bb      	strb	r3, [r7, #6]
 8002f54:	460b      	mov	r3, r1
 8002f56:	717b      	strb	r3, [r7, #5]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002f5c:	202a      	movs	r0, #42	@ 0x2a
 8002f5e:	f7ff ff6f 	bl	8002e40 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002f62:	2300      	movs	r3, #0
 8002f64:	733b      	strb	r3, [r7, #12]
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	737b      	strb	r3, [r7, #13]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73bb      	strb	r3, [r7, #14]
 8002f6e:	797b      	ldrb	r3, [r7, #5]
 8002f70:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002f72:	f107 030c 	add.w	r3, r7, #12
 8002f76:	2104      	movs	r1, #4
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff7b 	bl	8002e74 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002f7e:	202b      	movs	r0, #43	@ 0x2b
 8002f80:	f7ff ff5e 	bl	8002e40 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8002f84:	79bb      	ldrb	r3, [r7, #6]
 8002f86:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002f88:	793b      	ldrb	r3, [r7, #4]
 8002f8a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	2104      	movs	r1, #4
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff6e 	bl	8002e74 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002f98:	202c      	movs	r0, #44	@ 0x2c
 8002f9a:	f7ff ff51 	bl	8002e40 <ST7735_WriteCommand>
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd90      	pop	{r4, r7, pc}
	...

08002fa8 <ST7735_Init>:

void ST7735_Init() {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
    ST7735_Select();
 8002fac:	f7ff ff1a 	bl	8002de4 <ST7735_Select>
    ST7735_Reset();
 8002fb0:	f7ff ff30 	bl	8002e14 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8002fb4:	4806      	ldr	r0, [pc, #24]	@ (8002fd0 <ST7735_Init+0x28>)
 8002fb6:	f7ff ff79 	bl	8002eac <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8002fba:	4806      	ldr	r0, [pc, #24]	@ (8002fd4 <ST7735_Init+0x2c>)
 8002fbc:	f7ff ff76 	bl	8002eac <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8002fc0:	4805      	ldr	r0, [pc, #20]	@ (8002fd8 <ST7735_Init+0x30>)
 8002fc2:	f7ff ff73 	bl	8002eac <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8002fc6:	f7ff ff19 	bl	8002dfc <ST7735_Unselect>
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	0800f6cc 	.word	0x0800f6cc
 8002fd4:	0800f708 	.word	0x0800f708
 8002fd8:	0800f718 	.word	0x0800f718

08002fdc <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002fdc:	b082      	sub	sp, #8
 8002fde:	b590      	push	{r4, r7, lr}
 8002fe0:	b089      	sub	sp, #36	@ 0x24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	80fb      	strh	r3, [r7, #6]
 8002fea:	460b      	mov	r3, r1
 8002fec:	80bb      	strh	r3, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	b2d8      	uxtb	r0, r3
 8002ff6:	88bb      	ldrh	r3, [r7, #4]
 8002ff8:	b2d9      	uxtb	r1, r3
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003002:	4413      	add	r3, r2
 8003004:	b2db      	uxtb	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b2dc      	uxtb	r4, r3
 800300a:	88bb      	ldrh	r3, [r7, #4]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003012:	4413      	add	r3, r2
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	4622      	mov	r2, r4
 800301c:	f7ff ff8f 	bl	8002f3e <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8003020:	2300      	movs	r3, #0
 8003022:	61fb      	str	r3, [r7, #28]
 8003024:	e043      	b.n	80030ae <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8003026:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	3b20      	subs	r3, #32
 800302c:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4619      	mov	r1, r3
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	440b      	add	r3, r1
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	e029      	b.n	800309c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00e      	beq.n	8003076 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8003058:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	b29b      	uxth	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	743b      	strb	r3, [r7, #16]
 8003062:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003064:	b2db      	uxtb	r3, r3
 8003066:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8003068:	f107 0310 	add.w	r3, r7, #16
 800306c:	2102      	movs	r1, #2
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ff00 	bl	8002e74 <ST7735_WriteData>
 8003074:	e00f      	b.n	8003096 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8003076:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	b29b      	uxth	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	733b      	strb	r3, [r7, #12]
 8003082:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003086:	b2db      	uxtb	r3, r3
 8003088:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800308a:	f107 030c 	add.w	r3, r7, #12
 800308e:	2102      	movs	r1, #2
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff feef 	bl	8002e74 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	3301      	adds	r3, #1
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80030a0:	461a      	mov	r2, r3
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d3cf      	bcc.n	8003048 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	3301      	adds	r3, #1
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80030b2:	461a      	mov	r2, r3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d3b5      	bcc.n	8003026 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80030ba:	bf00      	nop
 80030bc:	bf00      	nop
 80030be:	3724      	adds	r7, #36	@ 0x24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80030c6:	b002      	add	sp, #8
 80030c8:	4770      	bx	lr

080030ca <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80030ca:	b082      	sub	sp, #8
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af04      	add	r7, sp, #16
 80030d2:	603a      	str	r2, [r7, #0]
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	4603      	mov	r3, r0
 80030d8:	80fb      	strh	r3, [r7, #6]
 80030da:	460b      	mov	r3, r1
 80030dc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80030de:	f7ff fe81 	bl	8002de4 <ST7735_Select>

    while(*str) {
 80030e2:	e02d      	b.n	8003140 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	7d3a      	ldrb	r2, [r7, #20]
 80030e8:	4413      	add	r3, r2
 80030ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80030ec:	dd13      	ble.n	8003116 <ST7735_WriteString+0x4c>
            x = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80030f2:	7d7b      	ldrb	r3, [r7, #21]
 80030f4:	461a      	mov	r2, r3
 80030f6:	88bb      	ldrh	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80030fc:	88bb      	ldrh	r3, [r7, #4]
 80030fe:	7d7a      	ldrb	r2, [r7, #21]
 8003100:	4413      	add	r3, r2
 8003102:	2b9f      	cmp	r3, #159	@ 0x9f
 8003104:	dc21      	bgt.n	800314a <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b20      	cmp	r3, #32
 800310c:	d103      	bne.n	8003116 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	3301      	adds	r3, #1
 8003112:	603b      	str	r3, [r7, #0]
                continue;
 8003114:	e014      	b.n	8003140 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	88b9      	ldrh	r1, [r7, #4]
 800311c:	88f8      	ldrh	r0, [r7, #6]
 800311e:	8c3b      	ldrh	r3, [r7, #32]
 8003120:	9302      	str	r3, [sp, #8]
 8003122:	8bbb      	ldrh	r3, [r7, #28]
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f7ff ff56 	bl	8002fdc <ST7735_WriteChar>
        x += font.width;
 8003130:	7d3b      	ldrb	r3, [r7, #20]
 8003132:	461a      	mov	r2, r3
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	4413      	add	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
        str++;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1cd      	bne.n	80030e4 <ST7735_WriteString+0x1a>
 8003148:	e000      	b.n	800314c <ST7735_WriteString+0x82>
                break;
 800314a:	bf00      	nop
    }

    ST7735_Unselect();
 800314c:	f7ff fe56 	bl	8002dfc <ST7735_Unselect>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800315a:	b002      	add	sp, #8
 800315c:	4770      	bx	lr
	...

08003160 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	4604      	mov	r4, r0
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4623      	mov	r3, r4
 8003170:	80fb      	strh	r3, [r7, #6]
 8003172:	4603      	mov	r3, r0
 8003174:	80bb      	strh	r3, [r7, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	807b      	strh	r3, [r7, #2]
 800317a:	4613      	mov	r3, r2
 800317c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	2b7f      	cmp	r3, #127	@ 0x7f
 8003182:	d858      	bhi.n	8003236 <ST7735_FillRectangle+0xd6>
 8003184:	88bb      	ldrh	r3, [r7, #4]
 8003186:	2b9f      	cmp	r3, #159	@ 0x9f
 8003188:	d855      	bhi.n	8003236 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800318a:	88fa      	ldrh	r2, [r7, #6]
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	4413      	add	r3, r2
 8003190:	2b80      	cmp	r3, #128	@ 0x80
 8003192:	dd03      	ble.n	800319c <ST7735_FillRectangle+0x3c>
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800319a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800319c:	88ba      	ldrh	r2, [r7, #4]
 800319e:	883b      	ldrh	r3, [r7, #0]
 80031a0:	4413      	add	r3, r2
 80031a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80031a4:	dd03      	ble.n	80031ae <ST7735_FillRectangle+0x4e>
 80031a6:	88bb      	ldrh	r3, [r7, #4]
 80031a8:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 80031ac:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80031ae:	f7ff fe19 	bl	8002de4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	b2d8      	uxtb	r0, r3
 80031b6:	88bb      	ldrh	r3, [r7, #4]
 80031b8:	b2d9      	uxtb	r1, r3
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	887b      	ldrh	r3, [r7, #2]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b2dc      	uxtb	r4, r3
 80031ca:	88bb      	ldrh	r3, [r7, #4]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	883b      	ldrh	r3, [r7, #0]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	4622      	mov	r2, r4
 80031dc:	f7ff feaf 	bl	8002f3e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80031e0:	8c3b      	ldrh	r3, [r7, #32]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	733b      	strb	r3, [r7, #12]
 80031ea:	8c3b      	ldrh	r3, [r7, #32]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80031f0:	2201      	movs	r2, #1
 80031f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031f6:	4812      	ldr	r0, [pc, #72]	@ (8003240 <ST7735_FillRectangle+0xe0>)
 80031f8:	f000 fe10 	bl	8003e1c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80031fc:	883b      	ldrh	r3, [r7, #0]
 80031fe:	80bb      	strh	r3, [r7, #4]
 8003200:	e013      	b.n	800322a <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8003202:	887b      	ldrh	r3, [r7, #2]
 8003204:	80fb      	strh	r3, [r7, #6]
 8003206:	e00a      	b.n	800321e <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003208:	f107 010c 	add.w	r1, r7, #12
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
 8003210:	2202      	movs	r2, #2
 8003212:	480c      	ldr	r0, [pc, #48]	@ (8003244 <ST7735_FillRectangle+0xe4>)
 8003214:	f002 f9ff 	bl	8005616 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	3b01      	subs	r3, #1
 800321c:	80fb      	strh	r3, [r7, #6]
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f1      	bne.n	8003208 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8003224:	88bb      	ldrh	r3, [r7, #4]
 8003226:	3b01      	subs	r3, #1
 8003228:	80bb      	strh	r3, [r7, #4]
 800322a:	88bb      	ldrh	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e8      	bne.n	8003202 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8003230:	f7ff fde4 	bl	8002dfc <ST7735_Unselect>
 8003234:	e000      	b.n	8003238 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003236:	bf00      	nop
}
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	bf00      	nop
 8003240:	40021400 	.word	0x40021400
 8003244:	200022fc 	.word	0x200022fc

08003248 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af02      	add	r7, sp, #8
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	23a0      	movs	r3, #160	@ 0xa0
 8003258:	2280      	movs	r2, #128	@ 0x80
 800325a:	2100      	movs	r1, #0
 800325c:	2000      	movs	r0, #0
 800325e:	f7ff ff7f 	bl	8003160 <ST7735_FillRectangle>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	4b0f      	ldr	r3, [pc, #60]	@ (80032b0 <HAL_MspInit+0x44>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	4a0e      	ldr	r2, [pc, #56]	@ (80032b0 <HAL_MspInit+0x44>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327c:	6413      	str	r3, [r2, #64]	@ 0x40
 800327e:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <HAL_MspInit+0x44>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328a:	4b09      	ldr	r3, [pc, #36]	@ (80032b0 <HAL_MspInit+0x44>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	4a08      	ldr	r2, [pc, #32]	@ (80032b0 <HAL_MspInit+0x44>)
 8003290:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003294:	6453      	str	r3, [r2, #68]	@ 0x44
 8003296:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <HAL_MspInit+0x44>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800

080032b4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80032b8:	4b0e      	ldr	r3, [pc, #56]	@ (80032f4 <SDTimer_Handler+0x40>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d006      	beq.n	80032d0 <SDTimer_Handler+0x1c>
    Timer1--;
 80032c2:	4b0c      	ldr	r3, [pc, #48]	@ (80032f4 <SDTimer_Handler+0x40>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <SDTimer_Handler+0x40>)
 80032ce:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80032d0:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <SDTimer_Handler+0x44>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d006      	beq.n	80032e8 <SDTimer_Handler+0x34>
    Timer2--;
 80032da:	4b07      	ldr	r3, [pc, #28]	@ (80032f8 <SDTimer_Handler+0x44>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	4b04      	ldr	r3, [pc, #16]	@ (80032f8 <SDTimer_Handler+0x44>)
 80032e6:	701a      	strb	r2, [r3, #0]
}/* USER CODE END 0 */
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20002361 	.word	0x20002361
 80032f8:	20002362 	.word	0x20002362

080032fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003300:	bf00      	nop
 8003302:	e7fd      	b.n	8003300 <NMI_Handler+0x4>

08003304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003308:	bf00      	nop
 800330a:	e7fd      	b.n	8003308 <HardFault_Handler+0x4>

0800330c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <MemManage_Handler+0x4>

08003314 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003318:	bf00      	nop
 800331a:	e7fd      	b.n	8003318 <BusFault_Handler+0x4>

0800331c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <UsageFault_Handler+0x4>

08003324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8003354:	4b0a      	ldr	r3, [pc, #40]	@ (8003380 <SysTick_Handler+0x30>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	3301      	adds	r3, #1
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4b08      	ldr	r3, [pc, #32]	@ (8003380 <SysTick_Handler+0x30>)
 8003360:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8003362:	4b07      	ldr	r3, [pc, #28]	@ (8003380 <SysTick_Handler+0x30>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b09      	cmp	r3, #9
 800336a:	d904      	bls.n	8003376 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 800336c:	4b04      	ldr	r3, [pc, #16]	@ (8003380 <SysTick_Handler+0x30>)
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8003372:	f7ff ff9f 	bl	80032b4 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003376:	f000 fa7b 	bl	8003870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20002360 	.word	0x20002360

08003384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return 1;
 8003388:	2301      	movs	r3, #1
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <_kill>:

int _kill(int pid, int sig)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800339e:	f008 fab1 	bl	800b904 <__errno>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2216      	movs	r2, #22
 80033a6:	601a      	str	r2, [r3, #0]
  return -1;
 80033a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <_exit>:

void _exit (int status)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033bc:	f04f 31ff 	mov.w	r1, #4294967295
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ffe7 	bl	8003394 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033c6:	bf00      	nop
 80033c8:	e7fd      	b.n	80033c6 <_exit+0x12>

080033ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	e00a      	b.n	80033f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033dc:	f3af 8000 	nop.w
 80033e0:	4601      	mov	r1, r0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	60ba      	str	r2, [r7, #8]
 80033e8:	b2ca      	uxtb	r2, r1
 80033ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	3301      	adds	r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	dbf0      	blt.n	80033dc <_read+0x12>
  }

  return len;
 80033fa:	687b      	ldr	r3, [r7, #4]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e009      	b.n	800342a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	60ba      	str	r2, [r7, #8]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fc2e 	bl	8002c80 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	3301      	adds	r3, #1
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	429a      	cmp	r2, r3
 8003430:	dbf1      	blt.n	8003416 <_write+0x12>
  }
  return len;
 8003432:	687b      	ldr	r3, [r7, #4]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <_close>:

int _close(int file)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003464:	605a      	str	r2, [r3, #4]
  return 0;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <_isatty>:

int _isatty(int file)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800347c:	2301      	movs	r3, #1
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800348a:	b480      	push	{r7}
 800348c:	b085      	sub	sp, #20
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034ac:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <_sbrk+0x5c>)
 80034ae:	4b15      	ldr	r3, [pc, #84]	@ (8003504 <_sbrk+0x60>)
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034b8:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <_sbrk+0x64>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034c0:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <_sbrk+0x64>)
 80034c2:	4a12      	ldr	r2, [pc, #72]	@ (800350c <_sbrk+0x68>)
 80034c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034c6:	4b10      	ldr	r3, [pc, #64]	@ (8003508 <_sbrk+0x64>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d207      	bcs.n	80034e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034d4:	f008 fa16 	bl	800b904 <__errno>
 80034d8:	4603      	mov	r3, r0
 80034da:	220c      	movs	r2, #12
 80034dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
 80034e2:	e009      	b.n	80034f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034e4:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <_sbrk+0x64>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ea:	4b07      	ldr	r3, [pc, #28]	@ (8003508 <_sbrk+0x64>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	4a05      	ldr	r2, [pc, #20]	@ (8003508 <_sbrk+0x64>)
 80034f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034f6:	68fb      	ldr	r3, [r7, #12]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20050000 	.word	0x20050000
 8003504:	00000400 	.word	0x00000400
 8003508:	20002364 	.word	0x20002364
 800350c:	20002c60 	.word	0x20002c60

08003510 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003514:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <SystemInit+0x20>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351a:	4a05      	ldr	r2, [pc, #20]	@ (8003530 <SystemInit+0x20>)
 800351c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003520:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003538:	4b14      	ldr	r3, [pc, #80]	@ (800358c <MX_USART3_UART_Init+0x58>)
 800353a:	4a15      	ldr	r2, [pc, #84]	@ (8003590 <MX_USART3_UART_Init+0x5c>)
 800353c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800353e:	4b13      	ldr	r3, [pc, #76]	@ (800358c <MX_USART3_UART_Init+0x58>)
 8003540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003544:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003546:	4b11      	ldr	r3, [pc, #68]	@ (800358c <MX_USART3_UART_Init+0x58>)
 8003548:	2200      	movs	r2, #0
 800354a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800354c:	4b0f      	ldr	r3, [pc, #60]	@ (800358c <MX_USART3_UART_Init+0x58>)
 800354e:	2200      	movs	r2, #0
 8003550:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003552:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <MX_USART3_UART_Init+0x58>)
 8003554:	2200      	movs	r2, #0
 8003556:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003558:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <MX_USART3_UART_Init+0x58>)
 800355a:	220c      	movs	r2, #12
 800355c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800355e:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <MX_USART3_UART_Init+0x58>)
 8003560:	2200      	movs	r2, #0
 8003562:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003564:	4b09      	ldr	r3, [pc, #36]	@ (800358c <MX_USART3_UART_Init+0x58>)
 8003566:	2200      	movs	r2, #0
 8003568:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800356a:	4b08      	ldr	r3, [pc, #32]	@ (800358c <MX_USART3_UART_Init+0x58>)
 800356c:	2200      	movs	r2, #0
 800356e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <MX_USART3_UART_Init+0x58>)
 8003572:	2200      	movs	r2, #0
 8003574:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003576:	4805      	ldr	r0, [pc, #20]	@ (800358c <MX_USART3_UART_Init+0x58>)
 8003578:	f002 fd7a 	bl	8006070 <HAL_UART_Init>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003582:	f7ff fb77 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20002368 	.word	0x20002368
 8003590:	40004800 	.word	0x40004800

08003594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b0aa      	sub	sp, #168	@ 0xa8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035ac:	f107 0310 	add.w	r3, r7, #16
 80035b0:	2284      	movs	r2, #132	@ 0x84
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f008 f943 	bl	800b840 <memset>
  if(uartHandle->Instance==USART3)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a22      	ldr	r2, [pc, #136]	@ (8003648 <HAL_UART_MspInit+0xb4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d13c      	bne.n	800363e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80035c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80035ca:	2300      	movs	r3, #0
 80035cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035ce:	f107 0310 	add.w	r3, r7, #16
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 fb84 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80035de:	f7ff fb49 	bl	8002c74 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80035e2:	4b1a      	ldr	r3, [pc, #104]	@ (800364c <HAL_UART_MspInit+0xb8>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	4a19      	ldr	r2, [pc, #100]	@ (800364c <HAL_UART_MspInit+0xb8>)
 80035e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ee:	4b17      	ldr	r3, [pc, #92]	@ (800364c <HAL_UART_MspInit+0xb8>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035fa:	4b14      	ldr	r3, [pc, #80]	@ (800364c <HAL_UART_MspInit+0xb8>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	4a13      	ldr	r2, [pc, #76]	@ (800364c <HAL_UART_MspInit+0xb8>)
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	6313      	str	r3, [r2, #48]	@ 0x30
 8003606:	4b11      	ldr	r3, [pc, #68]	@ (800364c <HAL_UART_MspInit+0xb8>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003612:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003616:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003620:	2301      	movs	r3, #1
 8003622:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003626:	2303      	movs	r3, #3
 8003628:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800362c:	2307      	movs	r3, #7
 800362e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003632:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003636:	4619      	mov	r1, r3
 8003638:	4805      	ldr	r0, [pc, #20]	@ (8003650 <HAL_UART_MspInit+0xbc>)
 800363a:	f000 fa43 	bl	8003ac4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800363e:	bf00      	nop
 8003640:	37a8      	adds	r7, #168	@ 0xa8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40004800 	.word	0x40004800
 800364c:	40023800 	.word	0x40023800
 8003650:	40020c00 	.word	0x40020c00

08003654 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003658:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800365a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800365e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003660:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003662:	2206      	movs	r2, #6
 8003664:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003666:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003668:	2202      	movs	r2, #2
 800366a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800366c:	4b0f      	ldr	r3, [pc, #60]	@ (80036ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800366e:	2200      	movs	r2, #0
 8003670:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003672:	4b0e      	ldr	r3, [pc, #56]	@ (80036ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003674:	2202      	movs	r2, #2
 8003676:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003678:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800367a:	2201      	movs	r2, #1
 800367c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800367e:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003680:	2200      	movs	r2, #0
 8003682:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003684:	4b09      	ldr	r3, [pc, #36]	@ (80036ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003686:	2200      	movs	r2, #0
 8003688:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800368a:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800368c:	2201      	movs	r2, #1
 800368e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003690:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003692:	2200      	movs	r2, #0
 8003694:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003696:	4805      	ldr	r0, [pc, #20]	@ (80036ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003698:	f000 fd0d 	bl	80040b6 <HAL_PCD_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80036a2:	f7ff fae7 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	200023f0 	.word	0x200023f0

080036b0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b0ac      	sub	sp, #176	@ 0xb0
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036c8:	f107 0318 	add.w	r3, r7, #24
 80036cc:	2284      	movs	r2, #132	@ 0x84
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f008 f8b5 	bl	800b840 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036de:	d159      	bne.n	8003794 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80036e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80036e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036ec:	f107 0318 	add.w	r3, r7, #24
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 faf5 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80036fc:	f7ff faba 	bl	8002c74 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003700:	4b26      	ldr	r3, [pc, #152]	@ (800379c <HAL_PCD_MspInit+0xec>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	4a25      	ldr	r2, [pc, #148]	@ (800379c <HAL_PCD_MspInit+0xec>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6313      	str	r3, [r2, #48]	@ 0x30
 800370c:	4b23      	ldr	r3, [pc, #140]	@ (800379c <HAL_PCD_MspInit+0xec>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003718:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800371c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003720:	2302      	movs	r3, #2
 8003722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003732:	230a      	movs	r3, #10
 8003734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003738:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800373c:	4619      	mov	r1, r3
 800373e:	4818      	ldr	r0, [pc, #96]	@ (80037a0 <HAL_PCD_MspInit+0xf0>)
 8003740:	f000 f9c0 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003744:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003748:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003758:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800375c:	4619      	mov	r1, r3
 800375e:	4810      	ldr	r0, [pc, #64]	@ (80037a0 <HAL_PCD_MspInit+0xf0>)
 8003760:	f000 f9b0 	bl	8003ac4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003764:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <HAL_PCD_MspInit+0xec>)
 8003766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003768:	4a0c      	ldr	r2, [pc, #48]	@ (800379c <HAL_PCD_MspInit+0xec>)
 800376a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800376e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003770:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <HAL_PCD_MspInit+0xec>)
 8003772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4b07      	ldr	r3, [pc, #28]	@ (800379c <HAL_PCD_MspInit+0xec>)
 800377e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003780:	4a06      	ldr	r2, [pc, #24]	@ (800379c <HAL_PCD_MspInit+0xec>)
 8003782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003786:	6453      	str	r3, [r2, #68]	@ 0x44
 8003788:	4b04      	ldr	r3, [pc, #16]	@ (800379c <HAL_PCD_MspInit+0xec>)
 800378a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003794:	bf00      	nop
 8003796:	37b0      	adds	r7, #176	@ 0xb0
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	40020000 	.word	0x40020000

080037a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037a8:	f7ff feb2 	bl	8003510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037ac:	480c      	ldr	r0, [pc, #48]	@ (80037e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037ae:	490d      	ldr	r1, [pc, #52]	@ (80037e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037b0:	4a0d      	ldr	r2, [pc, #52]	@ (80037e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b4:	e002      	b.n	80037bc <LoopCopyDataInit>

080037b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ba:	3304      	adds	r3, #4

080037bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c0:	d3f9      	bcc.n	80037b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037c2:	4a0a      	ldr	r2, [pc, #40]	@ (80037ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037c4:	4c0a      	ldr	r4, [pc, #40]	@ (80037f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037c8:	e001      	b.n	80037ce <LoopFillZerobss>

080037ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037cc:	3204      	adds	r2, #4

080037ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d0:	d3fb      	bcc.n	80037ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80037d2:	f008 f89d 	bl	800b910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037d6:	f7ff f907 	bl	80029e8 <main>
  bx  lr    
 80037da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80037e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037e4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80037e8:	0800ffd8 	.word	0x0800ffd8
  ldr r2, =_sbss
 80037ec:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80037f0:	20002c5c 	.word	0x20002c5c

080037f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037f4:	e7fe      	b.n	80037f4 <ADC_IRQHandler>

080037f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037fa:	2003      	movs	r0, #3
 80037fc:	f000 f92e 	bl	8003a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003800:	2000      	movs	r0, #0
 8003802:	f000 f805 	bl	8003810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003806:	f7ff fd31 	bl	800326c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003818:	4b12      	ldr	r3, [pc, #72]	@ (8003864 <HAL_InitTick+0x54>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <HAL_InitTick+0x58>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	4619      	mov	r1, r3
 8003822:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003826:	fbb3 f3f1 	udiv	r3, r3, r1
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f93b 	bl	8003aaa <HAL_SYSTICK_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e00e      	b.n	800385c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b0f      	cmp	r3, #15
 8003842:	d80a      	bhi.n	800385a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003844:	2200      	movs	r2, #0
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	f000 f911 	bl	8003a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003850:	4a06      	ldr	r2, [pc, #24]	@ (800386c <HAL_InitTick+0x5c>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e000      	b.n	800385c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	2000000c 	.word	0x2000000c
 8003868:	20000014 	.word	0x20000014
 800386c:	20000010 	.word	0x20000010

08003870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003874:	4b06      	ldr	r3, [pc, #24]	@ (8003890 <HAL_IncTick+0x20>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <HAL_IncTick+0x24>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4413      	add	r3, r2
 8003880:	4a04      	ldr	r2, [pc, #16]	@ (8003894 <HAL_IncTick+0x24>)
 8003882:	6013      	str	r3, [r2, #0]
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000014 	.word	0x20000014
 8003894:	200028d0 	.word	0x200028d0

08003898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return uwTick;
 800389c:	4b03      	ldr	r3, [pc, #12]	@ (80038ac <HAL_GetTick+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	200028d0 	.word	0x200028d0

080038b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038b8:	f7ff ffee 	bl	8003898 <HAL_GetTick>
 80038bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d005      	beq.n	80038d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ca:	4b0a      	ldr	r3, [pc, #40]	@ (80038f4 <HAL_Delay+0x44>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038d6:	bf00      	nop
 80038d8:	f7ff ffde 	bl	8003898 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d8f7      	bhi.n	80038d8 <HAL_Delay+0x28>
  {
  }
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000014 	.word	0x20000014

080038f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <__NVIC_SetPriorityGrouping+0x40>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003914:	4013      	ands	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003920:	4b06      	ldr	r3, [pc, #24]	@ (800393c <__NVIC_SetPriorityGrouping+0x44>)
 8003922:	4313      	orrs	r3, r2
 8003924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003926:	4a04      	ldr	r2, [pc, #16]	@ (8003938 <__NVIC_SetPriorityGrouping+0x40>)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	60d3      	str	r3, [r2, #12]
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000ed00 	.word	0xe000ed00
 800393c:	05fa0000 	.word	0x05fa0000

08003940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003944:	4b04      	ldr	r3, [pc, #16]	@ (8003958 <__NVIC_GetPriorityGrouping+0x18>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	f003 0307 	and.w	r3, r3, #7
}
 800394e:	4618      	mov	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	490c      	ldr	r1, [pc, #48]	@ (80039a8 <__NVIC_SetPriority+0x4c>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4908      	ldr	r1, [pc, #32]	@ (80039ac <__NVIC_SetPriority+0x50>)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3b04      	subs	r3, #4
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	@ 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f1c3 0307 	rsb	r3, r3, #7
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	bf28      	it	cs
 80039ce:	2304      	movcs	r3, #4
 80039d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d902      	bls.n	80039e0 <NVIC_EncodePriority+0x30>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b03      	subs	r3, #3
 80039de:	e000      	b.n	80039e2 <NVIC_EncodePriority+0x32>
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	401a      	ands	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	43d9      	mvns	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	4313      	orrs	r3, r2
         );
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3724      	adds	r7, #36	@ 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a28:	d301      	bcc.n	8003a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e00f      	b.n	8003a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a58 <SysTick_Config+0x40>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a36:	210f      	movs	r1, #15
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3c:	f7ff ff8e 	bl	800395c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a40:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <SysTick_Config+0x40>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a46:	4b04      	ldr	r3, [pc, #16]	@ (8003a58 <SysTick_Config+0x40>)
 8003a48:	2207      	movs	r2, #7
 8003a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	e000e010 	.word	0xe000e010

08003a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff ff47 	bl	80038f8 <__NVIC_SetPriorityGrouping>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b086      	sub	sp, #24
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4603      	mov	r3, r0
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a84:	f7ff ff5c 	bl	8003940 <__NVIC_GetPriorityGrouping>
 8003a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	f7ff ff8e 	bl	80039b0 <NVIC_EncodePriority>
 8003a94:	4602      	mov	r2, r0
 8003a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ff5d 	bl	800395c <__NVIC_SetPriority>
}
 8003aa2:	bf00      	nop
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ffb0 	bl	8003a18 <SysTick_Config>
 8003ab8:	4603      	mov	r3, r0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	e175      	b.n	8003dd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	f040 8164 	bne.w	8003dca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d005      	beq.n	8003b1a <HAL_GPIO_Init+0x56>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d130      	bne.n	8003b7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2203      	movs	r2, #3
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b50:	2201      	movs	r2, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 0201 	and.w	r2, r3, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d017      	beq.n	8003bb8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d123      	bne.n	8003c0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	08da      	lsrs	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3208      	adds	r2, #8
 8003bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	220f      	movs	r2, #15
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	08da      	lsrs	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3208      	adds	r2, #8
 8003c06:	69b9      	ldr	r1, [r7, #24]
 8003c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0203 	and.w	r2, r3, #3
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80be 	beq.w	8003dca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4e:	4b66      	ldr	r3, [pc, #408]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	4a65      	ldr	r2, [pc, #404]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c5a:	4b63      	ldr	r3, [pc, #396]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c66:	4a61      	ldr	r2, [pc, #388]	@ (8003dec <HAL_GPIO_Init+0x328>)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a58      	ldr	r2, [pc, #352]	@ (8003df0 <HAL_GPIO_Init+0x32c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d037      	beq.n	8003d02 <HAL_GPIO_Init+0x23e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a57      	ldr	r2, [pc, #348]	@ (8003df4 <HAL_GPIO_Init+0x330>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d031      	beq.n	8003cfe <HAL_GPIO_Init+0x23a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a56      	ldr	r2, [pc, #344]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d02b      	beq.n	8003cfa <HAL_GPIO_Init+0x236>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a55      	ldr	r2, [pc, #340]	@ (8003dfc <HAL_GPIO_Init+0x338>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d025      	beq.n	8003cf6 <HAL_GPIO_Init+0x232>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a54      	ldr	r2, [pc, #336]	@ (8003e00 <HAL_GPIO_Init+0x33c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01f      	beq.n	8003cf2 <HAL_GPIO_Init+0x22e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a53      	ldr	r2, [pc, #332]	@ (8003e04 <HAL_GPIO_Init+0x340>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d019      	beq.n	8003cee <HAL_GPIO_Init+0x22a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a52      	ldr	r2, [pc, #328]	@ (8003e08 <HAL_GPIO_Init+0x344>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_GPIO_Init+0x226>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a51      	ldr	r2, [pc, #324]	@ (8003e0c <HAL_GPIO_Init+0x348>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_GPIO_Init+0x222>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a50      	ldr	r2, [pc, #320]	@ (8003e10 <HAL_GPIO_Init+0x34c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <HAL_GPIO_Init+0x21e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4f      	ldr	r2, [pc, #316]	@ (8003e14 <HAL_GPIO_Init+0x350>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_GPIO_Init+0x21a>
 8003cda:	2309      	movs	r3, #9
 8003cdc:	e012      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cde:	230a      	movs	r3, #10
 8003ce0:	e010      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	e00e      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003ce6:	2307      	movs	r3, #7
 8003ce8:	e00c      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cea:	2306      	movs	r3, #6
 8003cec:	e00a      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cee:	2305      	movs	r3, #5
 8003cf0:	e008      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	e006      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e004      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e002      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_GPIO_Init+0x240>
 8003d02:	2300      	movs	r3, #0
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f002 0203 	and.w	r2, r2, #3
 8003d0a:	0092      	lsls	r2, r2, #2
 8003d0c:	4093      	lsls	r3, r2
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d14:	4935      	ldr	r1, [pc, #212]	@ (8003dec <HAL_GPIO_Init+0x328>)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	3302      	adds	r3, #2
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d22:	4b3d      	ldr	r3, [pc, #244]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d46:	4a34      	ldr	r2, [pc, #208]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d4c:	4b32      	ldr	r3, [pc, #200]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d70:	4a29      	ldr	r2, [pc, #164]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d76:	4b28      	ldr	r3, [pc, #160]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003da0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dc4:	4a14      	ldr	r2, [pc, #80]	@ (8003e18 <HAL_GPIO_Init+0x354>)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	f67f ae86 	bls.w	8003ae4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3724      	adds	r7, #36	@ 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40013800 	.word	0x40013800
 8003df0:	40020000 	.word	0x40020000
 8003df4:	40020400 	.word	0x40020400
 8003df8:	40020800 	.word	0x40020800
 8003dfc:	40020c00 	.word	0x40020c00
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40021400 	.word	0x40021400
 8003e08:	40021800 	.word	0x40021800
 8003e0c:	40021c00 	.word	0x40021c00
 8003e10:	40022000 	.word	0x40022000
 8003e14:	40022400 	.word	0x40022400
 8003e18:	40013c00 	.word	0x40013c00

08003e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	807b      	strh	r3, [r7, #2]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e2c:	787b      	ldrb	r3, [r7, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e32:	887a      	ldrh	r2, [r7, #2]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e38:	e003      	b.n	8003e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e3a:	887b      	ldrh	r3, [r7, #2]
 8003e3c:	041a      	lsls	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	619a      	str	r2, [r3, #24]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e08b      	b.n	8003f7a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fe fc88 	bl	800278c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2224      	movs	r2, #36	@ 0x24
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ea0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d107      	bne.n	8003eca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ec6:	609a      	str	r2, [r3, #8]
 8003ec8:	e006      	b.n	8003ed8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ed6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d108      	bne.n	8003ef2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	e007      	b.n	8003f02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f84 <HAL_I2C_Init+0x134>)
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69d9      	ldr	r1, [r3, #28]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1a      	ldr	r2, [r3, #32]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	02008000 	.word	0x02008000

08003f88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d138      	bne.n	8004010 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e032      	b.n	8004012 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	@ 0x24
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6819      	ldr	r1, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b20      	cmp	r3, #32
 8004032:	d139      	bne.n	80040a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800403e:	2302      	movs	r3, #2
 8004040:	e033      	b.n	80040aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2224      	movs	r2, #36	@ 0x24
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0201 	bic.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004070:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e000      	b.n	80040aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
  }
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b086      	sub	sp, #24
 80040ba:	af02      	add	r7, sp, #8
 80040bc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e108      	b.n	80042da <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fae4 	bl	80036b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2203      	movs	r2, #3
 80040ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040f6:	d102      	bne.n	80040fe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f002 fd14 	bl	8006b30 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7c1a      	ldrb	r2, [r3, #16]
 8004110:	f88d 2000 	strb.w	r2, [sp]
 8004114:	3304      	adds	r3, #4
 8004116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004118:	f002 fcb0 	bl	8006a7c <USB_CoreInit>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e0d5      	b.n	80042da <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f002 fd0c 	bl	8006b52 <USB_SetCurrentMode>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0c6      	b.n	80042da <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	e04a      	b.n	80041e8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	3315      	adds	r3, #21
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004166:	7bfa      	ldrb	r2, [r7, #15]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	3314      	adds	r3, #20
 8004176:	7bfa      	ldrb	r2, [r7, #15]
 8004178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800417a:	7bfa      	ldrb	r2, [r7, #15]
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	b298      	uxth	r0, r3
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4413      	add	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	332e      	adds	r3, #46	@ 0x2e
 800418e:	4602      	mov	r2, r0
 8004190:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	3318      	adds	r3, #24
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041a6:	7bfa      	ldrb	r2, [r7, #15]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	331c      	adds	r3, #28
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	3320      	adds	r3, #32
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041ce:	7bfa      	ldrb	r2, [r7, #15]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	3324      	adds	r3, #36	@ 0x24
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	3301      	adds	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	791b      	ldrb	r3, [r3, #4]
 80041ec:	7bfa      	ldrb	r2, [r7, #15]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d3af      	bcc.n	8004152 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
 80041f6:	e044      	b.n	8004282 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800420e:	7bfa      	ldrb	r2, [r7, #15]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004220:	7bfa      	ldrb	r2, [r7, #15]
 8004222:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004224:	7bfa      	ldrb	r2, [r7, #15]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800423a:	7bfa      	ldrb	r2, [r7, #15]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004250:	7bfa      	ldrb	r2, [r7, #15]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	3301      	adds	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	791b      	ldrb	r3, [r3, #4]
 8004286:	7bfa      	ldrb	r2, [r7, #15]
 8004288:	429a      	cmp	r2, r3
 800428a:	d3b5      	bcc.n	80041f8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	7c1a      	ldrb	r2, [r3, #16]
 8004294:	f88d 2000 	strb.w	r2, [sp]
 8004298:	3304      	adds	r3, #4
 800429a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800429c:	f002 fca6 	bl	8006bec <USB_DevInit>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2202      	movs	r2, #2
 80042aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e013      	b.n	80042da <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	7b1b      	ldrb	r3, [r3, #12]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d102      	bne.n	80042ce <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f80b 	bl	80042e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f002 fe61 	bl	8006f9a <USB_DevDisconnect>

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004312:	4b05      	ldr	r3, [pc, #20]	@ (8004328 <HAL_PCDEx_ActivateLPM+0x44>)
 8004314:	4313      	orrs	r3, r2
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	10000003 	.word	0x10000003

0800432c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004330:	4b05      	ldr	r3, [pc, #20]	@ (8004348 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a04      	ldr	r2, [pc, #16]	@ (8004348 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800433a:	6013      	str	r3, [r2, #0]
}
 800433c:	bf00      	nop
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40007000 	.word	0x40007000

0800434c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004354:	2300      	movs	r3, #0
 8004356:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e291      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 8087 	beq.w	800447e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004370:	4b96      	ldr	r3, [pc, #600]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b04      	cmp	r3, #4
 800437a:	d00c      	beq.n	8004396 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800437c:	4b93      	ldr	r3, [pc, #588]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b08      	cmp	r3, #8
 8004386:	d112      	bne.n	80043ae <HAL_RCC_OscConfig+0x62>
 8004388:	4b90      	ldr	r3, [pc, #576]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004390:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004394:	d10b      	bne.n	80043ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004396:	4b8d      	ldr	r3, [pc, #564]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d06c      	beq.n	800447c <HAL_RCC_OscConfig+0x130>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d168      	bne.n	800447c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e26b      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b6:	d106      	bne.n	80043c6 <HAL_RCC_OscConfig+0x7a>
 80043b8:	4b84      	ldr	r3, [pc, #528]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a83      	ldr	r2, [pc, #524]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80043be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	e02e      	b.n	8004424 <HAL_RCC_OscConfig+0xd8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x9c>
 80043ce:	4b7f      	ldr	r3, [pc, #508]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a7e      	ldr	r2, [pc, #504]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80043d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b7c      	ldr	r3, [pc, #496]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a7b      	ldr	r2, [pc, #492]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80043e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e01d      	b.n	8004424 <HAL_RCC_OscConfig+0xd8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0xc0>
 80043f2:	4b76      	ldr	r3, [pc, #472]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a75      	ldr	r2, [pc, #468]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80043f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4b73      	ldr	r3, [pc, #460]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a72      	ldr	r2, [pc, #456]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e00b      	b.n	8004424 <HAL_RCC_OscConfig+0xd8>
 800440c:	4b6f      	ldr	r3, [pc, #444]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a6e      	ldr	r2, [pc, #440]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b6c      	ldr	r3, [pc, #432]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a6b      	ldr	r2, [pc, #428]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 800441e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d013      	beq.n	8004454 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7ff fa34 	bl	8003898 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004434:	f7ff fa30 	bl	8003898 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	@ 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e21f      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004446:	4b61      	ldr	r3, [pc, #388]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0xe8>
 8004452:	e014      	b.n	800447e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7ff fa20 	bl	8003898 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800445c:	f7ff fa1c 	bl	8003898 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	@ 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e20b      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446e:	4b57      	ldr	r3, [pc, #348]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x110>
 800447a:	e000      	b.n	800447e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d069      	beq.n	800455e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800448a:	4b50      	ldr	r3, [pc, #320]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004496:	4b4d      	ldr	r3, [pc, #308]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d11c      	bne.n	80044dc <HAL_RCC_OscConfig+0x190>
 80044a2:	4b4a      	ldr	r3, [pc, #296]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d116      	bne.n	80044dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ae:	4b47      	ldr	r3, [pc, #284]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_RCC_OscConfig+0x17a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d001      	beq.n	80044c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e1df      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c6:	4b41      	ldr	r3, [pc, #260]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	493d      	ldr	r1, [pc, #244]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044da:	e040      	b.n	800455e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d023      	beq.n	800452c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e4:	4b39      	ldr	r3, [pc, #228]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a38      	ldr	r2, [pc, #224]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7ff f9d2 	bl	8003898 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f8:	f7ff f9ce 	bl	8003898 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e1bd      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450a:	4b30      	ldr	r3, [pc, #192]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004516:	4b2d      	ldr	r3, [pc, #180]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4929      	ldr	r1, [pc, #164]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]
 800452a:	e018      	b.n	800455e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800452c:	4b27      	ldr	r3, [pc, #156]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a26      	ldr	r2, [pc, #152]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004532:	f023 0301 	bic.w	r3, r3, #1
 8004536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7ff f9ae 	bl	8003898 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004540:	f7ff f9aa 	bl	8003898 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e199      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004552:	4b1e      	ldr	r3, [pc, #120]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d038      	beq.n	80045dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d019      	beq.n	80045a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004572:	4b16      	ldr	r3, [pc, #88]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004576:	4a15      	ldr	r2, [pc, #84]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457e:	f7ff f98b 	bl	8003898 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004586:	f7ff f987 	bl	8003898 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e176      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004598:	4b0c      	ldr	r3, [pc, #48]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 800459a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x23a>
 80045a4:	e01a      	b.n	80045dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a6:	4b09      	ldr	r3, [pc, #36]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80045a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045aa:	4a08      	ldr	r2, [pc, #32]	@ (80045cc <HAL_RCC_OscConfig+0x280>)
 80045ac:	f023 0301 	bic.w	r3, r3, #1
 80045b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7ff f971 	bl	8003898 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ba:	f7ff f96d 	bl	8003898 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d903      	bls.n	80045d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e15c      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
 80045cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d0:	4b91      	ldr	r3, [pc, #580]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80045d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1ee      	bne.n	80045ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80a4 	beq.w	8004732 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10d      	bne.n	8004612 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f6:	4b88      	ldr	r3, [pc, #544]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	4a87      	ldr	r2, [pc, #540]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80045fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004600:	6413      	str	r3, [r2, #64]	@ 0x40
 8004602:	4b85      	ldr	r3, [pc, #532]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460e:	2301      	movs	r3, #1
 8004610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004612:	4b82      	ldr	r3, [pc, #520]	@ (800481c <HAL_RCC_OscConfig+0x4d0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d118      	bne.n	8004650 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800461e:	4b7f      	ldr	r3, [pc, #508]	@ (800481c <HAL_RCC_OscConfig+0x4d0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a7e      	ldr	r2, [pc, #504]	@ (800481c <HAL_RCC_OscConfig+0x4d0>)
 8004624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800462a:	f7ff f935 	bl	8003898 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004632:	f7ff f931 	bl	8003898 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b64      	cmp	r3, #100	@ 0x64
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e120      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004644:	4b75      	ldr	r3, [pc, #468]	@ (800481c <HAL_RCC_OscConfig+0x4d0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d106      	bne.n	8004666 <HAL_RCC_OscConfig+0x31a>
 8004658:	4b6f      	ldr	r3, [pc, #444]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465c:	4a6e      	ldr	r2, [pc, #440]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	6713      	str	r3, [r2, #112]	@ 0x70
 8004664:	e02d      	b.n	80046c2 <HAL_RCC_OscConfig+0x376>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x33c>
 800466e:	4b6a      	ldr	r3, [pc, #424]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004672:	4a69      	ldr	r2, [pc, #420]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	6713      	str	r3, [r2, #112]	@ 0x70
 800467a:	4b67      	ldr	r3, [pc, #412]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467e:	4a66      	ldr	r2, [pc, #408]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 8004680:	f023 0304 	bic.w	r3, r3, #4
 8004684:	6713      	str	r3, [r2, #112]	@ 0x70
 8004686:	e01c      	b.n	80046c2 <HAL_RCC_OscConfig+0x376>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b05      	cmp	r3, #5
 800468e:	d10c      	bne.n	80046aa <HAL_RCC_OscConfig+0x35e>
 8004690:	4b61      	ldr	r3, [pc, #388]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 8004692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004694:	4a60      	ldr	r2, [pc, #384]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 8004696:	f043 0304 	orr.w	r3, r3, #4
 800469a:	6713      	str	r3, [r2, #112]	@ 0x70
 800469c:	4b5e      	ldr	r3, [pc, #376]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a8:	e00b      	b.n	80046c2 <HAL_RCC_OscConfig+0x376>
 80046aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ae:	4a5a      	ldr	r2, [pc, #360]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046b6:	4b58      	ldr	r3, [pc, #352]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ba:	4a57      	ldr	r2, [pc, #348]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80046bc:	f023 0304 	bic.w	r3, r3, #4
 80046c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d015      	beq.n	80046f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ca:	f7ff f8e5 	bl	8003898 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d0:	e00a      	b.n	80046e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d2:	f7ff f8e1 	bl	8003898 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e0ce      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ee      	beq.n	80046d2 <HAL_RCC_OscConfig+0x386>
 80046f4:	e014      	b.n	8004720 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f6:	f7ff f8cf 	bl	8003898 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046fc:	e00a      	b.n	8004714 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7ff f8cb 	bl	8003898 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470c:	4293      	cmp	r3, r2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e0b8      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004714:	4b40      	ldr	r3, [pc, #256]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ee      	bne.n	80046fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d105      	bne.n	8004732 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004726:	4b3c      	ldr	r3, [pc, #240]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	4a3b      	ldr	r2, [pc, #236]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 800472c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004730:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80a4 	beq.w	8004884 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800473c:	4b36      	ldr	r3, [pc, #216]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 030c 	and.w	r3, r3, #12
 8004744:	2b08      	cmp	r3, #8
 8004746:	d06b      	beq.n	8004820 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d149      	bne.n	80047e4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004750:	4b31      	ldr	r3, [pc, #196]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a30      	ldr	r2, [pc, #192]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 8004756:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800475a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7ff f89c 	bl	8003898 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7ff f898 	bl	8003898 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e087      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	4b28      	ldr	r3, [pc, #160]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69da      	ldr	r2, [r3, #28]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	019b      	lsls	r3, r3, #6
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	3b01      	subs	r3, #1
 800479c:	041b      	lsls	r3, r3, #16
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	061b      	lsls	r3, r3, #24
 80047a6:	4313      	orrs	r3, r2
 80047a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80047aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047ae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b0:	4b19      	ldr	r3, [pc, #100]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a18      	ldr	r2, [pc, #96]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80047b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7ff f86c 	bl	8003898 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7ff f868 	bl	8003898 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e057      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d6:	4b10      	ldr	r3, [pc, #64]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x478>
 80047e2:	e04f      	b.n	8004884 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 80047ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7ff f852 	bl	8003898 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f8:	f7ff f84e 	bl	8003898 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e03d      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480a:	4b03      	ldr	r3, [pc, #12]	@ (8004818 <HAL_RCC_OscConfig+0x4cc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x4ac>
 8004816:	e035      	b.n	8004884 <HAL_RCC_OscConfig+0x538>
 8004818:	40023800 	.word	0x40023800
 800481c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004820:	4b1b      	ldr	r3, [pc, #108]	@ (8004890 <HAL_RCC_OscConfig+0x544>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d028      	beq.n	8004880 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d121      	bne.n	8004880 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d11a      	bne.n	8004880 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004850:	4013      	ands	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004856:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004858:	4293      	cmp	r3, r2
 800485a:	d111      	bne.n	8004880 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004866:	085b      	lsrs	r3, r3, #1
 8004868:	3b01      	subs	r3, #1
 800486a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800486c:	429a      	cmp	r2, r3
 800486e:	d107      	bne.n	8004880 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800

08004894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0d0      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d910      	bls.n	80048dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b67      	ldr	r3, [pc, #412]	@ (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f023 020f 	bic.w	r2, r3, #15
 80048c2:	4965      	ldr	r1, [pc, #404]	@ (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b63      	ldr	r3, [pc, #396]	@ (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0b8      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d020      	beq.n	800492a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f4:	4b59      	ldr	r3, [pc, #356]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a58      	ldr	r2, [pc, #352]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 80048fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800490c:	4b53      	ldr	r3, [pc, #332]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4a52      	ldr	r2, [pc, #328]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004912:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004916:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004918:	4b50      	ldr	r3, [pc, #320]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	494d      	ldr	r1, [pc, #308]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d040      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d107      	bne.n	800494e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b47      	ldr	r3, [pc, #284]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d115      	bne.n	8004976 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e07f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d107      	bne.n	8004966 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004956:	4b41      	ldr	r3, [pc, #260]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e073      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004966:	4b3d      	ldr	r3, [pc, #244]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e06b      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004976:	4b39      	ldr	r3, [pc, #228]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f023 0203 	bic.w	r2, r3, #3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4936      	ldr	r1, [pc, #216]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004984:	4313      	orrs	r3, r2
 8004986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004988:	f7fe ff86 	bl	8003898 <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004990:	f7fe ff82 	bl	8003898 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e053      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a6:	4b2d      	ldr	r3, [pc, #180]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 020c 	and.w	r2, r3, #12
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d1eb      	bne.n	8004990 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049b8:	4b27      	ldr	r3, [pc, #156]	@ (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d210      	bcs.n	80049e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b24      	ldr	r3, [pc, #144]	@ (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f023 020f 	bic.w	r2, r3, #15
 80049ce:	4922      	ldr	r1, [pc, #136]	@ (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d6:	4b20      	ldr	r3, [pc, #128]	@ (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e032      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f4:	4b19      	ldr	r3, [pc, #100]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4916      	ldr	r1, [pc, #88]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a12:	4b12      	ldr	r3, [pc, #72]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	490e      	ldr	r1, [pc, #56]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a26:	f000 f821 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	490a      	ldr	r1, [pc, #40]	@ (8004a60 <HAL_RCC_ClockConfig+0x1cc>)
 8004a38:	5ccb      	ldrb	r3, [r1, r3]
 8004a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3e:	4a09      	ldr	r2, [pc, #36]	@ (8004a64 <HAL_RCC_ClockConfig+0x1d0>)
 8004a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a42:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <HAL_RCC_ClockConfig+0x1d4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe fee2 	bl	8003810 <HAL_InitTick>

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40023c00 	.word	0x40023c00
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	0800f744 	.word	0x0800f744
 8004a64:	2000000c 	.word	0x2000000c
 8004a68:	20000010 	.word	0x20000010

08004a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a70:	b094      	sub	sp, #80	@ 0x50
 8004a72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a78:	2300      	movs	r3, #0
 8004a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a84:	4b79      	ldr	r3, [pc, #484]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 030c 	and.w	r3, r3, #12
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d00d      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0x40>
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	f200 80e1 	bhi.w	8004c58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a9e:	e0db      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aa0:	4b73      	ldr	r3, [pc, #460]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aa4:	e0db      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aa6:	4b73      	ldr	r3, [pc, #460]	@ (8004c74 <HAL_RCC_GetSysClockFreq+0x208>)
 8004aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aaa:	e0d8      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aac:	4b6f      	ldr	r3, [pc, #444]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ab4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d063      	beq.n	8004b8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	099b      	lsrs	r3, r3, #6
 8004ac8:	2200      	movs	r2, #0
 8004aca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004acc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ada:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ade:	4622      	mov	r2, r4
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f04f 0100 	mov.w	r1, #0
 8004aea:	0159      	lsls	r1, r3, #5
 8004aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004af0:	0150      	lsls	r0, r2, #5
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4621      	mov	r1, r4
 8004af8:	1a51      	subs	r1, r2, r1
 8004afa:	6139      	str	r1, [r7, #16]
 8004afc:	4629      	mov	r1, r5
 8004afe:	eb63 0301 	sbc.w	r3, r3, r1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b10:	4659      	mov	r1, fp
 8004b12:	018b      	lsls	r3, r1, #6
 8004b14:	4651      	mov	r1, sl
 8004b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b1a:	4651      	mov	r1, sl
 8004b1c:	018a      	lsls	r2, r1, #6
 8004b1e:	4651      	mov	r1, sl
 8004b20:	ebb2 0801 	subs.w	r8, r2, r1
 8004b24:	4659      	mov	r1, fp
 8004b26:	eb63 0901 	sbc.w	r9, r3, r1
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b3e:	4690      	mov	r8, r2
 8004b40:	4699      	mov	r9, r3
 8004b42:	4623      	mov	r3, r4
 8004b44:	eb18 0303 	adds.w	r3, r8, r3
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	462b      	mov	r3, r5
 8004b4c:	eb49 0303 	adc.w	r3, r9, r3
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b5e:	4629      	mov	r1, r5
 8004b60:	024b      	lsls	r3, r1, #9
 8004b62:	4621      	mov	r1, r4
 8004b64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b68:	4621      	mov	r1, r4
 8004b6a:	024a      	lsls	r2, r1, #9
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b72:	2200      	movs	r2, #0
 8004b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b7c:	f7fc f8f4 	bl	8000d68 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4613      	mov	r3, r2
 8004b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b88:	e058      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b8a:	4b38      	ldr	r3, [pc, #224]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	099b      	lsrs	r3, r3, #6
 8004b90:	2200      	movs	r2, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	4611      	mov	r1, r2
 8004b96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b9a:	623b      	str	r3, [r7, #32]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ba0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	f04f 0000 	mov.w	r0, #0
 8004bac:	f04f 0100 	mov.w	r1, #0
 8004bb0:	0159      	lsls	r1, r3, #5
 8004bb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb6:	0150      	lsls	r0, r2, #5
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4641      	mov	r1, r8
 8004bbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bdc:	ebb2 040a 	subs.w	r4, r2, sl
 8004be0:	eb63 050b 	sbc.w	r5, r3, fp
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	00eb      	lsls	r3, r5, #3
 8004bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bf2:	00e2      	lsls	r2, r4, #3
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	461d      	mov	r5, r3
 8004bf8:	4643      	mov	r3, r8
 8004bfa:	18e3      	adds	r3, r4, r3
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	464b      	mov	r3, r9
 8004c00:	eb45 0303 	adc.w	r3, r5, r3
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c12:	4629      	mov	r1, r5
 8004c14:	028b      	lsls	r3, r1, #10
 8004c16:	4621      	mov	r1, r4
 8004c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	028a      	lsls	r2, r1, #10
 8004c20:	4610      	mov	r0, r2
 8004c22:	4619      	mov	r1, r3
 8004c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c26:	2200      	movs	r2, #0
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	61fa      	str	r2, [r7, #28]
 8004c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c30:	f7fc f89a 	bl	8000d68 <__aeabi_uldivmod>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4613      	mov	r3, r2
 8004c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	3301      	adds	r3, #1
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c56:	e002      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c58:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3750      	adds	r7, #80	@ 0x50
 8004c64:	46bd      	mov	sp, r7
 8004c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	00f42400 	.word	0x00f42400
 8004c74:	007a1200 	.word	0x007a1200

08004c78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c7c:	4b03      	ldr	r3, [pc, #12]	@ (8004c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	2000000c 	.word	0x2000000c

08004c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c94:	f7ff fff0 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	0a9b      	lsrs	r3, r3, #10
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	4903      	ldr	r1, [pc, #12]	@ (8004cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca6:	5ccb      	ldrb	r3, [r1, r3]
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	0800f754 	.word	0x0800f754

08004cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cbc:	f7ff ffdc 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	4b05      	ldr	r3, [pc, #20]	@ (8004cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	0b5b      	lsrs	r3, r3, #13
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	4903      	ldr	r1, [pc, #12]	@ (8004cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cce:	5ccb      	ldrb	r3, [r1, r3]
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	0800f754 	.word	0x0800f754

08004ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d012      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d08:	4b69      	ldr	r3, [pc, #420]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	4a68      	ldr	r2, [pc, #416]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d12:	6093      	str	r3, [r2, #8]
 8004d14:	4b66      	ldr	r3, [pc, #408]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d1c:	4964      	ldr	r1, [pc, #400]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d017      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d48:	4959      	ldr	r1, [pc, #356]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d58:	d101      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d66:	2301      	movs	r3, #1
 8004d68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d017      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d76:	4b4e      	ldr	r3, [pc, #312]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d84:	494a      	ldr	r1, [pc, #296]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d94:	d101      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d96:	2301      	movs	r3, #1
 8004d98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004da2:	2301      	movs	r3, #1
 8004da4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004db2:	2301      	movs	r3, #1
 8004db4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 808b 	beq.w	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	4a39      	ldr	r2, [pc, #228]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dce:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dd0:	4b37      	ldr	r3, [pc, #220]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ddc:	4b35      	ldr	r3, [pc, #212]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a34      	ldr	r2, [pc, #208]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de8:	f7fe fd56 	bl	8003898 <HAL_GetTick>
 8004dec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df0:	f7fe fd52 	bl	8003898 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	@ 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e357      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e02:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e0e:	4b28      	ldr	r3, [pc, #160]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d035      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d02e      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e2c:	4b20      	ldr	r3, [pc, #128]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e36:	4b1e      	ldr	r3, [pc, #120]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e40:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e42:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e46:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e4c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e4e:	4a18      	ldr	r2, [pc, #96]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e54:	4b16      	ldr	r3, [pc, #88]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d114      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fe fd1a 	bl	8003898 <HAL_GetTick>
 8004e64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e66:	e00a      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e68:	f7fe fd16 	bl	8003898 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e319      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0ee      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e96:	d111      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e98:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ea4:	4b04      	ldr	r3, [pc, #16]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ea6:	400b      	ands	r3, r1
 8004ea8:	4901      	ldr	r1, [pc, #4]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	608b      	str	r3, [r1, #8]
 8004eae:	e00b      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	40007000 	.word	0x40007000
 8004eb8:	0ffffcff 	.word	0x0ffffcff
 8004ebc:	4baa      	ldr	r3, [pc, #680]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	4aa9      	ldr	r2, [pc, #676]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ec6:	6093      	str	r3, [r2, #8]
 8004ec8:	4ba7      	ldr	r3, [pc, #668]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed4:	49a4      	ldr	r1, [pc, #656]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d010      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ee6:	4ba0      	ldr	r3, [pc, #640]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eec:	4a9e      	ldr	r2, [pc, #632]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ef2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004ef6:	4b9c      	ldr	r3, [pc, #624]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ef8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f00:	4999      	ldr	r1, [pc, #612]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f14:	4b94      	ldr	r3, [pc, #592]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f22:	4991      	ldr	r1, [pc, #580]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f36:	4b8c      	ldr	r3, [pc, #560]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f44:	4988      	ldr	r1, [pc, #544]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f58:	4b83      	ldr	r3, [pc, #524]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f66:	4980      	ldr	r1, [pc, #512]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f7a:	4b7b      	ldr	r3, [pc, #492]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f88:	4977      	ldr	r1, [pc, #476]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f9c:	4b72      	ldr	r3, [pc, #456]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa2:	f023 0203 	bic.w	r2, r3, #3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004faa:	496f      	ldr	r1, [pc, #444]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc4:	f023 020c 	bic.w	r2, r3, #12
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fcc:	4966      	ldr	r1, [pc, #408]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fe0:	4b61      	ldr	r3, [pc, #388]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fee:	495e      	ldr	r1, [pc, #376]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005002:	4b59      	ldr	r3, [pc, #356]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005008:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005010:	4955      	ldr	r1, [pc, #340]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005024:	4b50      	ldr	r3, [pc, #320]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005032:	494d      	ldr	r1, [pc, #308]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005046:	4b48      	ldr	r3, [pc, #288]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005054:	4944      	ldr	r1, [pc, #272]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005068:	4b3f      	ldr	r3, [pc, #252]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005076:	493c      	ldr	r1, [pc, #240]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800508a:	4b37      	ldr	r3, [pc, #220]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005090:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005098:	4933      	ldr	r1, [pc, #204]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050ba:	492b      	ldr	r1, [pc, #172]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d011      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050ce:	4b26      	ldr	r3, [pc, #152]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050dc:	4922      	ldr	r1, [pc, #136]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050ec:	d101      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80050ee:	2301      	movs	r3, #1
 80050f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80050fe:	2301      	movs	r3, #1
 8005100:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800510e:	4b16      	ldr	r3, [pc, #88]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005114:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800511c:	4912      	ldr	r1, [pc, #72]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005130:	4b0d      	ldr	r3, [pc, #52]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005136:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005140:	4909      	ldr	r1, [pc, #36]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d006      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80d9 	beq.w	800530e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800515c:	4b02      	ldr	r3, [pc, #8]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a01      	ldr	r2, [pc, #4]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005162:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005166:	e001      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005168:	40023800 	.word	0x40023800
 800516c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800516e:	f7fe fb93 	bl	8003898 <HAL_GetTick>
 8005172:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005174:	e008      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005176:	f7fe fb8f 	bl	8003898 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b64      	cmp	r3, #100	@ 0x64
 8005182:	d901      	bls.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e194      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005188:	4b6c      	ldr	r3, [pc, #432]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f0      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d021      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11d      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051a8:	4b64      	ldr	r3, [pc, #400]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ae:	0c1b      	lsrs	r3, r3, #16
 80051b0:	f003 0303 	and.w	r3, r3, #3
 80051b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051b6:	4b61      	ldr	r3, [pc, #388]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051bc:	0e1b      	lsrs	r3, r3, #24
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	019a      	lsls	r2, r3, #6
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	041b      	lsls	r3, r3, #16
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	061b      	lsls	r3, r3, #24
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	071b      	lsls	r3, r3, #28
 80051dc:	4957      	ldr	r1, [pc, #348]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051f8:	d00a      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005202:	2b00      	cmp	r3, #0
 8005204:	d02e      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800520e:	d129      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005210:	4b4a      	ldr	r3, [pc, #296]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005216:	0c1b      	lsrs	r3, r3, #16
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800521e:	4b47      	ldr	r3, [pc, #284]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005224:	0f1b      	lsrs	r3, r3, #28
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	019a      	lsls	r2, r3, #6
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	061b      	lsls	r3, r3, #24
 800523e:	431a      	orrs	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	071b      	lsls	r3, r3, #28
 8005244:	493d      	ldr	r1, [pc, #244]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800524c:	4b3b      	ldr	r3, [pc, #236]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800524e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005252:	f023 021f 	bic.w	r2, r3, #31
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525a:	3b01      	subs	r3, #1
 800525c:	4937      	ldr	r1, [pc, #220]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01d      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005270:	4b32      	ldr	r3, [pc, #200]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005276:	0e1b      	lsrs	r3, r3, #24
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800527e:	4b2f      	ldr	r3, [pc, #188]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005284:	0f1b      	lsrs	r3, r3, #28
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	019a      	lsls	r2, r3, #6
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	041b      	lsls	r3, r3, #16
 8005298:	431a      	orrs	r2, r3
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	061b      	lsls	r3, r3, #24
 800529e:	431a      	orrs	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	071b      	lsls	r3, r3, #28
 80052a4:	4925      	ldr	r1, [pc, #148]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d011      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	019a      	lsls	r2, r3, #6
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	041b      	lsls	r3, r3, #16
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	061b      	lsls	r3, r3, #24
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	071b      	lsls	r3, r3, #28
 80052d4:	4919      	ldr	r1, [pc, #100]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052dc:	4b17      	ldr	r3, [pc, #92]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a16      	ldr	r2, [pc, #88]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e8:	f7fe fad6 	bl	8003898 <HAL_GetTick>
 80052ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052f0:	f7fe fad2 	bl	8003898 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b64      	cmp	r3, #100	@ 0x64
 80052fc:	d901      	bls.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e0d7      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005302:	4b0e      	ldr	r3, [pc, #56]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b01      	cmp	r3, #1
 8005312:	f040 80cd 	bne.w	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005316:	4b09      	ldr	r3, [pc, #36]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a08      	ldr	r2, [pc, #32]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800531c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005322:	f7fe fab9 	bl	8003898 <HAL_GetTick>
 8005326:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005328:	e00a      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800532a:	f7fe fab5 	bl	8003898 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b64      	cmp	r3, #100	@ 0x64
 8005336:	d903      	bls.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e0ba      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800533c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005340:	4b5e      	ldr	r3, [pc, #376]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800534c:	d0ed      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d009      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800536a:	2b00      	cmp	r3, #0
 800536c:	d02e      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d12a      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005376:	4b51      	ldr	r3, [pc, #324]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537c:	0c1b      	lsrs	r3, r3, #16
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005384:	4b4d      	ldr	r3, [pc, #308]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538a:	0f1b      	lsrs	r3, r3, #28
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	019a      	lsls	r2, r3, #6
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	041b      	lsls	r3, r3, #16
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	061b      	lsls	r3, r3, #24
 80053a4:	431a      	orrs	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	071b      	lsls	r3, r3, #28
 80053aa:	4944      	ldr	r1, [pc, #272]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053b2:	4b42      	ldr	r3, [pc, #264]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c0:	3b01      	subs	r3, #1
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	493d      	ldr	r1, [pc, #244]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d022      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053e0:	d11d      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053e2:	4b36      	ldr	r3, [pc, #216]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e8:	0e1b      	lsrs	r3, r3, #24
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053f0:	4b32      	ldr	r3, [pc, #200]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f6:	0f1b      	lsrs	r3, r3, #28
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	019a      	lsls	r2, r3, #6
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	431a      	orrs	r2, r3
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	061b      	lsls	r3, r3, #24
 8005410:	431a      	orrs	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	071b      	lsls	r3, r3, #28
 8005416:	4929      	ldr	r1, [pc, #164]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d028      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800542a:	4b24      	ldr	r3, [pc, #144]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005430:	0e1b      	lsrs	r3, r3, #24
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005438:	4b20      	ldr	r3, [pc, #128]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543e:	0c1b      	lsrs	r3, r3, #16
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	019a      	lsls	r2, r3, #6
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	041b      	lsls	r3, r3, #16
 8005450:	431a      	orrs	r2, r3
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	061b      	lsls	r3, r3, #24
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	071b      	lsls	r3, r3, #28
 800545e:	4917      	ldr	r1, [pc, #92]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005466:	4b15      	ldr	r3, [pc, #84]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800546c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005474:	4911      	ldr	r1, [pc, #68]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800547c:	4b0f      	ldr	r3, [pc, #60]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a0e      	ldr	r2, [pc, #56]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005486:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005488:	f7fe fa06 	bl	8003898 <HAL_GetTick>
 800548c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005490:	f7fe fa02 	bl	8003898 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b64      	cmp	r3, #100	@ 0x64
 800549c:	d901      	bls.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e007      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054a2:	4b06      	ldr	r3, [pc, #24]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054ae:	d1ef      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3720      	adds	r7, #32
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40023800 	.word	0x40023800

080054c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e09d      	b.n	800560e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d108      	bne.n	80054ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054e2:	d009      	beq.n	80054f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	61da      	str	r2, [r3, #28]
 80054ea:	e005      	b.n	80054f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fd fc04 	bl	8002d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800552e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005538:	d902      	bls.n	8005540 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	e002      	b.n	8005546 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005544:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800554e:	d007      	beq.n	8005560 <HAL_SPI_Init+0xa0>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005558:	d002      	beq.n	8005560 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a2:	ea42 0103 	orr.w	r1, r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	0c1b      	lsrs	r3, r3, #16
 80055bc:	f003 0204 	and.w	r2, r3, #4
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80055dc:	ea42 0103 	orr.w	r1, r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69da      	ldr	r2, [r3, #28]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b088      	sub	sp, #32
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	4613      	mov	r3, r2
 8005624:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_SPI_Transmit+0x22>
 8005634:	2302      	movs	r3, #2
 8005636:	e15f      	b.n	80058f8 <HAL_SPI_Transmit+0x2e2>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005640:	f7fe f92a 	bl	8003898 <HAL_GetTick>
 8005644:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b01      	cmp	r3, #1
 8005654:	d002      	beq.n	800565c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005656:	2302      	movs	r3, #2
 8005658:	77fb      	strb	r3, [r7, #31]
    goto error;
 800565a:	e148      	b.n	80058ee <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_SPI_Transmit+0x52>
 8005662:	88fb      	ldrh	r3, [r7, #6]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d102      	bne.n	800566e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800566c:	e13f      	b.n	80058ee <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2203      	movs	r2, #3
 8005672:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	88fa      	ldrh	r2, [r7, #6]
 8005686:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	88fa      	ldrh	r2, [r7, #6]
 800568c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056b8:	d10f      	bne.n	80056da <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e4:	2b40      	cmp	r3, #64	@ 0x40
 80056e6:	d007      	beq.n	80056f8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005700:	d94f      	bls.n	80057a2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_SPI_Transmit+0xfa>
 800570a:	8afb      	ldrh	r3, [r7, #22]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d142      	bne.n	8005796 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005714:	881a      	ldrh	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005720:	1c9a      	adds	r2, r3, #2
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b01      	subs	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005734:	e02f      	b.n	8005796 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b02      	cmp	r3, #2
 8005742:	d112      	bne.n	800576a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005748:	881a      	ldrh	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005754:	1c9a      	adds	r2, r3, #2
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005768:	e015      	b.n	8005796 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800576a:	f7fe f895 	bl	8003898 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d803      	bhi.n	8005782 <HAL_SPI_Transmit+0x16c>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005780:	d102      	bne.n	8005788 <HAL_SPI_Transmit+0x172>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005794:	e0ab      	b.n	80058ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1ca      	bne.n	8005736 <HAL_SPI_Transmit+0x120>
 80057a0:	e080      	b.n	80058a4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_SPI_Transmit+0x19a>
 80057aa:	8afb      	ldrh	r3, [r7, #22]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d174      	bne.n	800589a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d912      	bls.n	80057e0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057be:	881a      	ldrh	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b02      	subs	r3, #2
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057de:	e05c      	b.n	800589a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	7812      	ldrb	r2, [r2, #0]
 80057ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005806:	e048      	b.n	800589a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b02      	cmp	r3, #2
 8005814:	d12b      	bne.n	800586e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d912      	bls.n	8005846 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	881a      	ldrh	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005830:	1c9a      	adds	r2, r3, #2
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b02      	subs	r3, #2
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005844:	e029      	b.n	800589a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	330c      	adds	r3, #12
 8005850:	7812      	ldrb	r2, [r2, #0]
 8005852:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800586c:	e015      	b.n	800589a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800586e:	f7fe f813 	bl	8003898 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d803      	bhi.n	8005886 <HAL_SPI_Transmit+0x270>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005884:	d102      	bne.n	800588c <HAL_SPI_Transmit+0x276>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005898:	e029      	b.n	80058ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800589e:	b29b      	uxth	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1b1      	bne.n	8005808 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fb77 	bl	8005f9c <SPI_EndRxTxTransaction>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10a      	bne.n	80058d8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	77fb      	strb	r3, [r7, #31]
 80058e4:	e003      	b.n	80058ee <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80058f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3720      	adds	r7, #32
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	@ 0x28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800590e:	2301      	movs	r3, #1
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_SPI_TransmitReceive+0x26>
 8005922:	2302      	movs	r3, #2
 8005924:	e20a      	b.n	8005d3c <HAL_SPI_TransmitReceive+0x43c>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800592e:	f7fd ffb3 	bl	8003898 <HAL_GetTick>
 8005932:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800593a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005942:	887b      	ldrh	r3, [r7, #2]
 8005944:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005946:	887b      	ldrh	r3, [r7, #2]
 8005948:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800594a:	7efb      	ldrb	r3, [r7, #27]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d00e      	beq.n	800596e <HAL_SPI_TransmitReceive+0x6e>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005956:	d106      	bne.n	8005966 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d102      	bne.n	8005966 <HAL_SPI_TransmitReceive+0x66>
 8005960:	7efb      	ldrb	r3, [r7, #27]
 8005962:	2b04      	cmp	r3, #4
 8005964:	d003      	beq.n	800596e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005966:	2302      	movs	r3, #2
 8005968:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800596c:	e1e0      	b.n	8005d30 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_SPI_TransmitReceive+0x80>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <HAL_SPI_TransmitReceive+0x80>
 800597a:	887b      	ldrh	r3, [r7, #2]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d103      	bne.n	8005988 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005986:	e1d3      	b.n	8005d30 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b04      	cmp	r3, #4
 8005992:	d003      	beq.n	800599c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2205      	movs	r2, #5
 8005998:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	887a      	ldrh	r2, [r7, #2]
 80059ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	887a      	ldrh	r2, [r7, #2]
 80059b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	887a      	ldrh	r2, [r7, #2]
 80059c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	887a      	ldrh	r2, [r7, #2]
 80059c8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059de:	d802      	bhi.n	80059e6 <HAL_SPI_TransmitReceive+0xe6>
 80059e0:	8a3b      	ldrh	r3, [r7, #16]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d908      	bls.n	80059f8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	e007      	b.n	8005a08 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a06:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a12:	2b40      	cmp	r3, #64	@ 0x40
 8005a14:	d007      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a2e:	f240 8081 	bls.w	8005b34 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_SPI_TransmitReceive+0x140>
 8005a3a:	8a7b      	ldrh	r3, [r7, #18]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d16d      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a44:	881a      	ldrh	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a50:	1c9a      	adds	r2, r3, #2
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a64:	e05a      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d11b      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x1ac>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d016      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x1ac>
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d113      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a88:	881a      	ldrh	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a94:	1c9a      	adds	r2, r3, #2
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d11c      	bne.n	8005af4 <HAL_SPI_TransmitReceive+0x1f4>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d016      	beq.n	8005af4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad0:	b292      	uxth	r2, r2
 8005ad2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad8:	1c9a      	adds	r2, r3, #2
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005af0:	2301      	movs	r3, #1
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005af4:	f7fd fed0 	bl	8003898 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d80b      	bhi.n	8005b1c <HAL_SPI_TransmitReceive+0x21c>
 8005b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0a:	d007      	beq.n	8005b1c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005b1a:	e109      	b.n	8005d30 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d19f      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x166>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d199      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x166>
 8005b32:	e0e3      	b.n	8005cfc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0x244>
 8005b3c:	8a7b      	ldrh	r3, [r7, #18]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	f040 80cf 	bne.w	8005ce2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d912      	bls.n	8005b74 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b52:	881a      	ldrh	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5e:	1c9a      	adds	r2, r3, #2
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b02      	subs	r3, #2
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b72:	e0b6      	b.n	8005ce2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	7812      	ldrb	r2, [r2, #0]
 8005b80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b9a:	e0a2      	b.n	8005ce2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d134      	bne.n	8005c14 <HAL_SPI_TransmitReceive+0x314>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d02f      	beq.n	8005c14 <HAL_SPI_TransmitReceive+0x314>
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d12c      	bne.n	8005c14 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d912      	bls.n	8005bea <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc8:	881a      	ldrh	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd4:	1c9a      	adds	r2, r3, #2
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b02      	subs	r3, #2
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005be8:	e012      	b.n	8005c10 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	7812      	ldrb	r2, [r2, #0]
 8005bf6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d148      	bne.n	8005cb4 <HAL_SPI_TransmitReceive+0x3b4>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d042      	beq.n	8005cb4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d923      	bls.n	8005c82 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c44:	b292      	uxth	r2, r2
 8005c46:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4c:	1c9a      	adds	r2, r3, #2
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b02      	subs	r3, #2
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d81f      	bhi.n	8005cb0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c7e:	605a      	str	r2, [r3, #4]
 8005c80:	e016      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f103 020c 	add.w	r2, r3, #12
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	7812      	ldrb	r2, [r2, #0]
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cb4:	f7fd fdf0 	bl	8003898 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d803      	bhi.n	8005ccc <HAL_SPI_TransmitReceive+0x3cc>
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d102      	bne.n	8005cd2 <HAL_SPI_TransmitReceive+0x3d2>
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d107      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005ce0:	e026      	b.n	8005d30 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f47f af57 	bne.w	8005b9c <HAL_SPI_TransmitReceive+0x29c>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f47f af50 	bne.w	8005b9c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f94b 	bl	8005f9c <SPI_EndRxTxTransaction>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2220      	movs	r2, #32
 8005d16:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d26:	e003      	b.n	8005d30 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005d38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3728      	adds	r7, #40	@ 0x28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d52:	b2db      	uxtb	r3, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d70:	f7fd fd92 	bl	8003898 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d78:	1a9b      	subs	r3, r3, r2
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d80:	f7fd fd8a 	bl	8003898 <HAL_GetTick>
 8005d84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d86:	4b39      	ldr	r3, [pc, #228]	@ (8005e6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	015b      	lsls	r3, r3, #5
 8005d8c:	0d1b      	lsrs	r3, r3, #20
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	fb02 f303 	mul.w	r3, r2, r3
 8005d94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d96:	e054      	b.n	8005e42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9e:	d050      	beq.n	8005e42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005da0:	f7fd fd7a 	bl	8003898 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d902      	bls.n	8005db6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d13d      	bne.n	8005e32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005dc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dce:	d111      	bne.n	8005df4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dd8:	d004      	beq.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005de2:	d107      	bne.n	8005df4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005df2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dfc:	d10f      	bne.n	8005e1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e017      	b.n	8005e62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	bf0c      	ite	eq
 8005e52:	2301      	moveq	r3, #1
 8005e54:	2300      	movne	r3, #0
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	461a      	mov	r2, r3
 8005e5a:	79fb      	ldrb	r3, [r7, #7]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d19b      	bne.n	8005d98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3720      	adds	r7, #32
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	2000000c 	.word	0x2000000c

08005e70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	@ 0x28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e82:	f7fd fd09 	bl	8003898 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	4413      	add	r3, r2
 8005e90:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005e92:	f7fd fd01 	bl	8003898 <HAL_GetTick>
 8005e96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8005f98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	00da      	lsls	r2, r3, #3
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	0d1b      	lsrs	r3, r3, #20
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb2:	fb02 f303 	mul.w	r3, r2, r3
 8005eb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005eb8:	e060      	b.n	8005f7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ec0:	d107      	bne.n	8005ed2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d104      	bne.n	8005ed2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d050      	beq.n	8005f7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eda:	f7fd fcdd 	bl	8003898 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d902      	bls.n	8005ef0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d13d      	bne.n	8005f6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005efe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f08:	d111      	bne.n	8005f2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f12:	d004      	beq.n	8005f1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f1c:	d107      	bne.n	8005f2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f36:	d10f      	bne.n	8005f58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e010      	b.n	8005f8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4013      	ands	r3, r2
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d196      	bne.n	8005eba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3728      	adds	r7, #40	@ 0x28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	2000000c 	.word	0x2000000c

08005f9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff ff5b 	bl	8005e70 <SPI_WaitFifoStateUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d007      	beq.n	8005fd0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fc4:	f043 0220 	orr.w	r2, r3, #32
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e046      	b.n	800605e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005fd0:	4b25      	ldr	r3, [pc, #148]	@ (8006068 <SPI_EndRxTxTransaction+0xcc>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a25      	ldr	r2, [pc, #148]	@ (800606c <SPI_EndRxTxTransaction+0xd0>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	0d5b      	lsrs	r3, r3, #21
 8005fdc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005fe0:	fb02 f303 	mul.w	r3, r2, r3
 8005fe4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fee:	d112      	bne.n	8006016 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2180      	movs	r1, #128	@ 0x80
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff feb0 	bl	8005d60 <SPI_WaitFlagStateUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d016      	beq.n	8006034 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800600a:	f043 0220 	orr.w	r2, r3, #32
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e023      	b.n	800605e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	3b01      	subs	r3, #1
 8006020:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602c:	2b80      	cmp	r3, #128	@ 0x80
 800602e:	d0f2      	beq.n	8006016 <SPI_EndRxTxTransaction+0x7a>
 8006030:	e000      	b.n	8006034 <SPI_EndRxTxTransaction+0x98>
        break;
 8006032:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2200      	movs	r2, #0
 800603c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff ff15 	bl	8005e70 <SPI_WaitFifoStateUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006050:	f043 0220 	orr.w	r2, r3, #32
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e000      	b.n	800605e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	2000000c 	.word	0x2000000c
 800606c:	165e9f81 	.word	0x165e9f81

08006070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e040      	b.n	8006104 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fd fa7e 	bl	8003594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2224      	movs	r2, #36	@ 0x24
 800609c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0201 	bic.w	r2, r2, #1
 80060ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fb16 	bl	80066e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f8af 	bl	8006220 <UART_SetConfig>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e01b      	b.n	8006104 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fb95 	bl	800682c <UART_CheckIdleState>
 8006102:	4603      	mov	r3, r0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08a      	sub	sp, #40	@ 0x28
 8006110:	af02      	add	r7, sp, #8
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	4613      	mov	r3, r2
 800611a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006120:	2b20      	cmp	r3, #32
 8006122:	d177      	bne.n	8006214 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <HAL_UART_Transmit+0x24>
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e070      	b.n	8006216 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2221      	movs	r2, #33	@ 0x21
 8006140:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006142:	f7fd fba9 	bl	8003898 <HAL_GetTick>
 8006146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	88fa      	ldrh	r2, [r7, #6]
 800614c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006160:	d108      	bne.n	8006174 <HAL_UART_Transmit+0x68>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d104      	bne.n	8006174 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	e003      	b.n	800617c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006178:	2300      	movs	r3, #0
 800617a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800617c:	e02f      	b.n	80061de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2200      	movs	r2, #0
 8006186:	2180      	movs	r1, #128	@ 0x80
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fba6 	bl	80068da <UART_WaitOnFlagUntilTimeout>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d004      	beq.n	800619e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2220      	movs	r2, #32
 8006198:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e03b      	b.n	8006216 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10b      	bne.n	80061bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	3302      	adds	r3, #2
 80061b8:	61bb      	str	r3, [r7, #24]
 80061ba:	e007      	b.n	80061cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	781a      	ldrb	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	3301      	adds	r3, #1
 80061ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1c9      	bne.n	800617e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2200      	movs	r2, #0
 80061f2:	2140      	movs	r1, #64	@ 0x40
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fb70 	bl	80068da <UART_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2220      	movs	r2, #32
 8006204:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e005      	b.n	8006216 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2220      	movs	r2, #32
 800620e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	e000      	b.n	8006216 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006214:	2302      	movs	r3, #2
  }
}
 8006216:	4618      	mov	r0, r3
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	4ba6      	ldr	r3, [pc, #664]	@ (80064e4 <UART_SetConfig+0x2c4>)
 800624c:	4013      	ands	r3, r2
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6812      	ldr	r2, [r2, #0]
 8006252:	6979      	ldr	r1, [r7, #20]
 8006254:	430b      	orrs	r3, r1
 8006256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	430a      	orrs	r2, r1
 8006290:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a94      	ldr	r2, [pc, #592]	@ (80064e8 <UART_SetConfig+0x2c8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d120      	bne.n	80062de <UART_SetConfig+0xbe>
 800629c:	4b93      	ldr	r3, [pc, #588]	@ (80064ec <UART_SetConfig+0x2cc>)
 800629e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d816      	bhi.n	80062d8 <UART_SetConfig+0xb8>
 80062aa:	a201      	add	r2, pc, #4	@ (adr r2, 80062b0 <UART_SetConfig+0x90>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	080062c1 	.word	0x080062c1
 80062b4:	080062cd 	.word	0x080062cd
 80062b8:	080062c7 	.word	0x080062c7
 80062bc:	080062d3 	.word	0x080062d3
 80062c0:	2301      	movs	r3, #1
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e150      	b.n	8006568 <UART_SetConfig+0x348>
 80062c6:	2302      	movs	r3, #2
 80062c8:	77fb      	strb	r3, [r7, #31]
 80062ca:	e14d      	b.n	8006568 <UART_SetConfig+0x348>
 80062cc:	2304      	movs	r3, #4
 80062ce:	77fb      	strb	r3, [r7, #31]
 80062d0:	e14a      	b.n	8006568 <UART_SetConfig+0x348>
 80062d2:	2308      	movs	r3, #8
 80062d4:	77fb      	strb	r3, [r7, #31]
 80062d6:	e147      	b.n	8006568 <UART_SetConfig+0x348>
 80062d8:	2310      	movs	r3, #16
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e144      	b.n	8006568 <UART_SetConfig+0x348>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a83      	ldr	r2, [pc, #524]	@ (80064f0 <UART_SetConfig+0x2d0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d132      	bne.n	800634e <UART_SetConfig+0x12e>
 80062e8:	4b80      	ldr	r3, [pc, #512]	@ (80064ec <UART_SetConfig+0x2cc>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ee:	f003 030c 	and.w	r3, r3, #12
 80062f2:	2b0c      	cmp	r3, #12
 80062f4:	d828      	bhi.n	8006348 <UART_SetConfig+0x128>
 80062f6:	a201      	add	r2, pc, #4	@ (adr r2, 80062fc <UART_SetConfig+0xdc>)
 80062f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fc:	08006331 	.word	0x08006331
 8006300:	08006349 	.word	0x08006349
 8006304:	08006349 	.word	0x08006349
 8006308:	08006349 	.word	0x08006349
 800630c:	0800633d 	.word	0x0800633d
 8006310:	08006349 	.word	0x08006349
 8006314:	08006349 	.word	0x08006349
 8006318:	08006349 	.word	0x08006349
 800631c:	08006337 	.word	0x08006337
 8006320:	08006349 	.word	0x08006349
 8006324:	08006349 	.word	0x08006349
 8006328:	08006349 	.word	0x08006349
 800632c:	08006343 	.word	0x08006343
 8006330:	2300      	movs	r3, #0
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e118      	b.n	8006568 <UART_SetConfig+0x348>
 8006336:	2302      	movs	r3, #2
 8006338:	77fb      	strb	r3, [r7, #31]
 800633a:	e115      	b.n	8006568 <UART_SetConfig+0x348>
 800633c:	2304      	movs	r3, #4
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	e112      	b.n	8006568 <UART_SetConfig+0x348>
 8006342:	2308      	movs	r3, #8
 8006344:	77fb      	strb	r3, [r7, #31]
 8006346:	e10f      	b.n	8006568 <UART_SetConfig+0x348>
 8006348:	2310      	movs	r3, #16
 800634a:	77fb      	strb	r3, [r7, #31]
 800634c:	e10c      	b.n	8006568 <UART_SetConfig+0x348>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a68      	ldr	r2, [pc, #416]	@ (80064f4 <UART_SetConfig+0x2d4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d120      	bne.n	800639a <UART_SetConfig+0x17a>
 8006358:	4b64      	ldr	r3, [pc, #400]	@ (80064ec <UART_SetConfig+0x2cc>)
 800635a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800635e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006362:	2b30      	cmp	r3, #48	@ 0x30
 8006364:	d013      	beq.n	800638e <UART_SetConfig+0x16e>
 8006366:	2b30      	cmp	r3, #48	@ 0x30
 8006368:	d814      	bhi.n	8006394 <UART_SetConfig+0x174>
 800636a:	2b20      	cmp	r3, #32
 800636c:	d009      	beq.n	8006382 <UART_SetConfig+0x162>
 800636e:	2b20      	cmp	r3, #32
 8006370:	d810      	bhi.n	8006394 <UART_SetConfig+0x174>
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <UART_SetConfig+0x15c>
 8006376:	2b10      	cmp	r3, #16
 8006378:	d006      	beq.n	8006388 <UART_SetConfig+0x168>
 800637a:	e00b      	b.n	8006394 <UART_SetConfig+0x174>
 800637c:	2300      	movs	r3, #0
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e0f2      	b.n	8006568 <UART_SetConfig+0x348>
 8006382:	2302      	movs	r3, #2
 8006384:	77fb      	strb	r3, [r7, #31]
 8006386:	e0ef      	b.n	8006568 <UART_SetConfig+0x348>
 8006388:	2304      	movs	r3, #4
 800638a:	77fb      	strb	r3, [r7, #31]
 800638c:	e0ec      	b.n	8006568 <UART_SetConfig+0x348>
 800638e:	2308      	movs	r3, #8
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	e0e9      	b.n	8006568 <UART_SetConfig+0x348>
 8006394:	2310      	movs	r3, #16
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e0e6      	b.n	8006568 <UART_SetConfig+0x348>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a56      	ldr	r2, [pc, #344]	@ (80064f8 <UART_SetConfig+0x2d8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d120      	bne.n	80063e6 <UART_SetConfig+0x1c6>
 80063a4:	4b51      	ldr	r3, [pc, #324]	@ (80064ec <UART_SetConfig+0x2cc>)
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80063ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80063b0:	d013      	beq.n	80063da <UART_SetConfig+0x1ba>
 80063b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80063b4:	d814      	bhi.n	80063e0 <UART_SetConfig+0x1c0>
 80063b6:	2b80      	cmp	r3, #128	@ 0x80
 80063b8:	d009      	beq.n	80063ce <UART_SetConfig+0x1ae>
 80063ba:	2b80      	cmp	r3, #128	@ 0x80
 80063bc:	d810      	bhi.n	80063e0 <UART_SetConfig+0x1c0>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <UART_SetConfig+0x1a8>
 80063c2:	2b40      	cmp	r3, #64	@ 0x40
 80063c4:	d006      	beq.n	80063d4 <UART_SetConfig+0x1b4>
 80063c6:	e00b      	b.n	80063e0 <UART_SetConfig+0x1c0>
 80063c8:	2300      	movs	r3, #0
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e0cc      	b.n	8006568 <UART_SetConfig+0x348>
 80063ce:	2302      	movs	r3, #2
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e0c9      	b.n	8006568 <UART_SetConfig+0x348>
 80063d4:	2304      	movs	r3, #4
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e0c6      	b.n	8006568 <UART_SetConfig+0x348>
 80063da:	2308      	movs	r3, #8
 80063dc:	77fb      	strb	r3, [r7, #31]
 80063de:	e0c3      	b.n	8006568 <UART_SetConfig+0x348>
 80063e0:	2310      	movs	r3, #16
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e0c0      	b.n	8006568 <UART_SetConfig+0x348>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a44      	ldr	r2, [pc, #272]	@ (80064fc <UART_SetConfig+0x2dc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d125      	bne.n	800643c <UART_SetConfig+0x21c>
 80063f0:	4b3e      	ldr	r3, [pc, #248]	@ (80064ec <UART_SetConfig+0x2cc>)
 80063f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063fe:	d017      	beq.n	8006430 <UART_SetConfig+0x210>
 8006400:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006404:	d817      	bhi.n	8006436 <UART_SetConfig+0x216>
 8006406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800640a:	d00b      	beq.n	8006424 <UART_SetConfig+0x204>
 800640c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006410:	d811      	bhi.n	8006436 <UART_SetConfig+0x216>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <UART_SetConfig+0x1fe>
 8006416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800641a:	d006      	beq.n	800642a <UART_SetConfig+0x20a>
 800641c:	e00b      	b.n	8006436 <UART_SetConfig+0x216>
 800641e:	2300      	movs	r3, #0
 8006420:	77fb      	strb	r3, [r7, #31]
 8006422:	e0a1      	b.n	8006568 <UART_SetConfig+0x348>
 8006424:	2302      	movs	r3, #2
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	e09e      	b.n	8006568 <UART_SetConfig+0x348>
 800642a:	2304      	movs	r3, #4
 800642c:	77fb      	strb	r3, [r7, #31]
 800642e:	e09b      	b.n	8006568 <UART_SetConfig+0x348>
 8006430:	2308      	movs	r3, #8
 8006432:	77fb      	strb	r3, [r7, #31]
 8006434:	e098      	b.n	8006568 <UART_SetConfig+0x348>
 8006436:	2310      	movs	r3, #16
 8006438:	77fb      	strb	r3, [r7, #31]
 800643a:	e095      	b.n	8006568 <UART_SetConfig+0x348>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a2f      	ldr	r2, [pc, #188]	@ (8006500 <UART_SetConfig+0x2e0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d125      	bne.n	8006492 <UART_SetConfig+0x272>
 8006446:	4b29      	ldr	r3, [pc, #164]	@ (80064ec <UART_SetConfig+0x2cc>)
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800644c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006450:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006454:	d017      	beq.n	8006486 <UART_SetConfig+0x266>
 8006456:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800645a:	d817      	bhi.n	800648c <UART_SetConfig+0x26c>
 800645c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006460:	d00b      	beq.n	800647a <UART_SetConfig+0x25a>
 8006462:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006466:	d811      	bhi.n	800648c <UART_SetConfig+0x26c>
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <UART_SetConfig+0x254>
 800646c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006470:	d006      	beq.n	8006480 <UART_SetConfig+0x260>
 8006472:	e00b      	b.n	800648c <UART_SetConfig+0x26c>
 8006474:	2301      	movs	r3, #1
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e076      	b.n	8006568 <UART_SetConfig+0x348>
 800647a:	2302      	movs	r3, #2
 800647c:	77fb      	strb	r3, [r7, #31]
 800647e:	e073      	b.n	8006568 <UART_SetConfig+0x348>
 8006480:	2304      	movs	r3, #4
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e070      	b.n	8006568 <UART_SetConfig+0x348>
 8006486:	2308      	movs	r3, #8
 8006488:	77fb      	strb	r3, [r7, #31]
 800648a:	e06d      	b.n	8006568 <UART_SetConfig+0x348>
 800648c:	2310      	movs	r3, #16
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e06a      	b.n	8006568 <UART_SetConfig+0x348>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1b      	ldr	r2, [pc, #108]	@ (8006504 <UART_SetConfig+0x2e4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d138      	bne.n	800650e <UART_SetConfig+0x2ee>
 800649c:	4b13      	ldr	r3, [pc, #76]	@ (80064ec <UART_SetConfig+0x2cc>)
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80064a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064aa:	d017      	beq.n	80064dc <UART_SetConfig+0x2bc>
 80064ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064b0:	d82a      	bhi.n	8006508 <UART_SetConfig+0x2e8>
 80064b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064b6:	d00b      	beq.n	80064d0 <UART_SetConfig+0x2b0>
 80064b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064bc:	d824      	bhi.n	8006508 <UART_SetConfig+0x2e8>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <UART_SetConfig+0x2aa>
 80064c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064c6:	d006      	beq.n	80064d6 <UART_SetConfig+0x2b6>
 80064c8:	e01e      	b.n	8006508 <UART_SetConfig+0x2e8>
 80064ca:	2300      	movs	r3, #0
 80064cc:	77fb      	strb	r3, [r7, #31]
 80064ce:	e04b      	b.n	8006568 <UART_SetConfig+0x348>
 80064d0:	2302      	movs	r3, #2
 80064d2:	77fb      	strb	r3, [r7, #31]
 80064d4:	e048      	b.n	8006568 <UART_SetConfig+0x348>
 80064d6:	2304      	movs	r3, #4
 80064d8:	77fb      	strb	r3, [r7, #31]
 80064da:	e045      	b.n	8006568 <UART_SetConfig+0x348>
 80064dc:	2308      	movs	r3, #8
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e042      	b.n	8006568 <UART_SetConfig+0x348>
 80064e2:	bf00      	nop
 80064e4:	efff69f3 	.word	0xefff69f3
 80064e8:	40011000 	.word	0x40011000
 80064ec:	40023800 	.word	0x40023800
 80064f0:	40004400 	.word	0x40004400
 80064f4:	40004800 	.word	0x40004800
 80064f8:	40004c00 	.word	0x40004c00
 80064fc:	40005000 	.word	0x40005000
 8006500:	40011400 	.word	0x40011400
 8006504:	40007800 	.word	0x40007800
 8006508:	2310      	movs	r3, #16
 800650a:	77fb      	strb	r3, [r7, #31]
 800650c:	e02c      	b.n	8006568 <UART_SetConfig+0x348>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a72      	ldr	r2, [pc, #456]	@ (80066dc <UART_SetConfig+0x4bc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d125      	bne.n	8006564 <UART_SetConfig+0x344>
 8006518:	4b71      	ldr	r3, [pc, #452]	@ (80066e0 <UART_SetConfig+0x4c0>)
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006522:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006526:	d017      	beq.n	8006558 <UART_SetConfig+0x338>
 8006528:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800652c:	d817      	bhi.n	800655e <UART_SetConfig+0x33e>
 800652e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006532:	d00b      	beq.n	800654c <UART_SetConfig+0x32c>
 8006534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006538:	d811      	bhi.n	800655e <UART_SetConfig+0x33e>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <UART_SetConfig+0x326>
 800653e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006542:	d006      	beq.n	8006552 <UART_SetConfig+0x332>
 8006544:	e00b      	b.n	800655e <UART_SetConfig+0x33e>
 8006546:	2300      	movs	r3, #0
 8006548:	77fb      	strb	r3, [r7, #31]
 800654a:	e00d      	b.n	8006568 <UART_SetConfig+0x348>
 800654c:	2302      	movs	r3, #2
 800654e:	77fb      	strb	r3, [r7, #31]
 8006550:	e00a      	b.n	8006568 <UART_SetConfig+0x348>
 8006552:	2304      	movs	r3, #4
 8006554:	77fb      	strb	r3, [r7, #31]
 8006556:	e007      	b.n	8006568 <UART_SetConfig+0x348>
 8006558:	2308      	movs	r3, #8
 800655a:	77fb      	strb	r3, [r7, #31]
 800655c:	e004      	b.n	8006568 <UART_SetConfig+0x348>
 800655e:	2310      	movs	r3, #16
 8006560:	77fb      	strb	r3, [r7, #31]
 8006562:	e001      	b.n	8006568 <UART_SetConfig+0x348>
 8006564:	2310      	movs	r3, #16
 8006566:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006570:	d15b      	bne.n	800662a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006572:	7ffb      	ldrb	r3, [r7, #31]
 8006574:	2b08      	cmp	r3, #8
 8006576:	d828      	bhi.n	80065ca <UART_SetConfig+0x3aa>
 8006578:	a201      	add	r2, pc, #4	@ (adr r2, 8006580 <UART_SetConfig+0x360>)
 800657a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657e:	bf00      	nop
 8006580:	080065a5 	.word	0x080065a5
 8006584:	080065ad 	.word	0x080065ad
 8006588:	080065b5 	.word	0x080065b5
 800658c:	080065cb 	.word	0x080065cb
 8006590:	080065bb 	.word	0x080065bb
 8006594:	080065cb 	.word	0x080065cb
 8006598:	080065cb 	.word	0x080065cb
 800659c:	080065cb 	.word	0x080065cb
 80065a0:	080065c3 	.word	0x080065c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a4:	f7fe fb74 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 80065a8:	61b8      	str	r0, [r7, #24]
        break;
 80065aa:	e013      	b.n	80065d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065ac:	f7fe fb84 	bl	8004cb8 <HAL_RCC_GetPCLK2Freq>
 80065b0:	61b8      	str	r0, [r7, #24]
        break;
 80065b2:	e00f      	b.n	80065d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065b4:	4b4b      	ldr	r3, [pc, #300]	@ (80066e4 <UART_SetConfig+0x4c4>)
 80065b6:	61bb      	str	r3, [r7, #24]
        break;
 80065b8:	e00c      	b.n	80065d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ba:	f7fe fa57 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 80065be:	61b8      	str	r0, [r7, #24]
        break;
 80065c0:	e008      	b.n	80065d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065c6:	61bb      	str	r3, [r7, #24]
        break;
 80065c8:	e004      	b.n	80065d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	77bb      	strb	r3, [r7, #30]
        break;
 80065d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d074      	beq.n	80066c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	005a      	lsls	r2, r3, #1
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	441a      	add	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b0f      	cmp	r3, #15
 80065f4:	d916      	bls.n	8006624 <UART_SetConfig+0x404>
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065fc:	d212      	bcs.n	8006624 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	b29b      	uxth	r3, r3
 8006602:	f023 030f 	bic.w	r3, r3, #15
 8006606:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	085b      	lsrs	r3, r3, #1
 800660c:	b29b      	uxth	r3, r3
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	b29a      	uxth	r2, r3
 8006614:	89fb      	ldrh	r3, [r7, #14]
 8006616:	4313      	orrs	r3, r2
 8006618:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	89fa      	ldrh	r2, [r7, #14]
 8006620:	60da      	str	r2, [r3, #12]
 8006622:	e04f      	b.n	80066c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	77bb      	strb	r3, [r7, #30]
 8006628:	e04c      	b.n	80066c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800662a:	7ffb      	ldrb	r3, [r7, #31]
 800662c:	2b08      	cmp	r3, #8
 800662e:	d828      	bhi.n	8006682 <UART_SetConfig+0x462>
 8006630:	a201      	add	r2, pc, #4	@ (adr r2, 8006638 <UART_SetConfig+0x418>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	0800665d 	.word	0x0800665d
 800663c:	08006665 	.word	0x08006665
 8006640:	0800666d 	.word	0x0800666d
 8006644:	08006683 	.word	0x08006683
 8006648:	08006673 	.word	0x08006673
 800664c:	08006683 	.word	0x08006683
 8006650:	08006683 	.word	0x08006683
 8006654:	08006683 	.word	0x08006683
 8006658:	0800667b 	.word	0x0800667b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800665c:	f7fe fb18 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 8006660:	61b8      	str	r0, [r7, #24]
        break;
 8006662:	e013      	b.n	800668c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006664:	f7fe fb28 	bl	8004cb8 <HAL_RCC_GetPCLK2Freq>
 8006668:	61b8      	str	r0, [r7, #24]
        break;
 800666a:	e00f      	b.n	800668c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800666c:	4b1d      	ldr	r3, [pc, #116]	@ (80066e4 <UART_SetConfig+0x4c4>)
 800666e:	61bb      	str	r3, [r7, #24]
        break;
 8006670:	e00c      	b.n	800668c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006672:	f7fe f9fb 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8006676:	61b8      	str	r0, [r7, #24]
        break;
 8006678:	e008      	b.n	800668c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800667a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800667e:	61bb      	str	r3, [r7, #24]
        break;
 8006680:	e004      	b.n	800668c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	77bb      	strb	r3, [r7, #30]
        break;
 800668a:	bf00      	nop
    }

    if (pclk != 0U)
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d018      	beq.n	80066c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	085a      	lsrs	r2, r3, #1
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	441a      	add	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2b0f      	cmp	r3, #15
 80066aa:	d909      	bls.n	80066c0 <UART_SetConfig+0x4a0>
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b2:	d205      	bcs.n	80066c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	60da      	str	r2, [r3, #12]
 80066be:	e001      	b.n	80066c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80066d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40007c00 	.word	0x40007c00
 80066e0:	40023800 	.word	0x40023800
 80066e4:	00f42400 	.word	0x00f42400

080066e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00a      	beq.n	8006712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01a      	beq.n	80067fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067e6:	d10a      	bne.n	80067fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	605a      	str	r2, [r3, #4]
  }
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08c      	sub	sp, #48	@ 0x30
 8006830:	af02      	add	r7, sp, #8
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800683c:	f7fd f82c 	bl	8003898 <HAL_GetTick>
 8006840:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b08      	cmp	r3, #8
 800684e:	d12e      	bne.n	80068ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006850:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006858:	2200      	movs	r2, #0
 800685a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f83b 	bl	80068da <UART_WaitOnFlagUntilTimeout>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d021      	beq.n	80068ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	e853 3f00 	ldrex	r3, [r3]
 8006876:	60fb      	str	r3, [r7, #12]
   return(result);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800687e:	623b      	str	r3, [r7, #32]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	61fb      	str	r3, [r7, #28]
 800688a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	69b9      	ldr	r1, [r7, #24]
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	617b      	str	r3, [r7, #20]
   return(result);
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e6      	bne.n	800686a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e011      	b.n	80068d2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3728      	adds	r7, #40	@ 0x28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	603b      	str	r3, [r7, #0]
 80068e6:	4613      	mov	r3, r2
 80068e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ea:	e04f      	b.n	800698c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f2:	d04b      	beq.n	800698c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f4:	f7fc ffd0 	bl	8003898 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	429a      	cmp	r2, r3
 8006902:	d302      	bcc.n	800690a <UART_WaitOnFlagUntilTimeout+0x30>
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e04e      	b.n	80069ac <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d037      	beq.n	800698c <UART_WaitOnFlagUntilTimeout+0xb2>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b80      	cmp	r3, #128	@ 0x80
 8006920:	d034      	beq.n	800698c <UART_WaitOnFlagUntilTimeout+0xb2>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b40      	cmp	r3, #64	@ 0x40
 8006926:	d031      	beq.n	800698c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b08      	cmp	r3, #8
 8006934:	d110      	bne.n	8006958 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2208      	movs	r2, #8
 800693c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f838 	bl	80069b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2208      	movs	r2, #8
 8006948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e029      	b.n	80069ac <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006966:	d111      	bne.n	800698c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006970:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 f81e 	bl	80069b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e00f      	b.n	80069ac <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69da      	ldr	r2, [r3, #28]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4013      	ands	r3, r2
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	429a      	cmp	r2, r3
 800699a:	bf0c      	ite	eq
 800699c:	2301      	moveq	r3, #1
 800699e:	2300      	movne	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d0a0      	beq.n	80068ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b095      	sub	sp, #84	@ 0x54
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069da:	643b      	str	r3, [r7, #64]	@ 0x40
 80069dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e6      	bne.n	80069bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3308      	adds	r3, #8
 80069f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	f023 0301 	bic.w	r3, r3, #1
 8006a04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e5      	bne.n	80069ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d118      	bne.n	8006a5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f023 0310 	bic.w	r3, r3, #16
 8006a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	6979      	ldr	r1, [r7, #20]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	613b      	str	r3, [r7, #16]
   return(result);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e6      	bne.n	8006a2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a70:	bf00      	nop
 8006a72:	3754      	adds	r7, #84	@ 0x54
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	f107 001c 	add.w	r0, r7, #28
 8006a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d121      	bne.n	8006ada <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	4b21      	ldr	r3, [pc, #132]	@ (8006b2c <USB_CoreInit+0xb0>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006aba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d105      	bne.n	8006ace <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa92 	bl	8006ff8 <USB_CoreReset>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]
 8006ad8:	e010      	b.n	8006afc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa86 	bl	8006ff8 <USB_CoreReset>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006afc:	7fbb      	ldrb	r3, [r7, #30]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d10b      	bne.n	8006b1a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f043 0206 	orr.w	r2, r3, #6
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f043 0220 	orr.w	r2, r3, #32
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b26:	b004      	add	sp, #16
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	ffbdffbf 	.word	0xffbdffbf

08006b30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f023 0201 	bic.w	r2, r3, #1
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b6e:	78fb      	ldrb	r3, [r7, #3]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d115      	bne.n	8006ba0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b80:	200a      	movs	r0, #10
 8006b82:	f7fc fe95 	bl	80038b0 <HAL_Delay>
      ms += 10U;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	330a      	adds	r3, #10
 8006b8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fa25 	bl	8006fdc <USB_GetMode>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d01e      	beq.n	8006bd6 <USB_SetCurrentMode+0x84>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b9c:	d9f0      	bls.n	8006b80 <USB_SetCurrentMode+0x2e>
 8006b9e:	e01a      	b.n	8006bd6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d115      	bne.n	8006bd2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006bb2:	200a      	movs	r0, #10
 8006bb4:	f7fc fe7c 	bl	80038b0 <HAL_Delay>
      ms += 10U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	330a      	adds	r3, #10
 8006bbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fa0c 	bl	8006fdc <USB_GetMode>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <USB_SetCurrentMode+0x84>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2bc7      	cmp	r3, #199	@ 0xc7
 8006bce:	d9f0      	bls.n	8006bb2 <USB_SetCurrentMode+0x60>
 8006bd0:	e001      	b.n	8006bd6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e005      	b.n	8006be2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2bc8      	cmp	r3, #200	@ 0xc8
 8006bda:	d101      	bne.n	8006be0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e000      	b.n	8006be2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bec:	b084      	sub	sp, #16
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b086      	sub	sp, #24
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	e009      	b.n	8006c20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	3340      	adds	r3, #64	@ 0x40
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	2200      	movs	r2, #0
 8006c18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	2b0e      	cmp	r3, #14
 8006c24:	d9f2      	bls.n	8006c0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d11c      	bne.n	8006c68 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c3c:	f043 0302 	orr.w	r3, r3, #2
 8006c40:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c46:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	e005      	b.n	8006c74 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c80:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d10d      	bne.n	8006ca4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d104      	bne.n	8006c9a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c90:	2100      	movs	r1, #0
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f968 	bl	8006f68 <USB_SetDevSpeed>
 8006c98:	e008      	b.n	8006cac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f963 	bl	8006f68 <USB_SetDevSpeed>
 8006ca2:	e003      	b.n	8006cac <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ca4:	2103      	movs	r1, #3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f95e 	bl	8006f68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cac:	2110      	movs	r1, #16
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f8fa 	bl	8006ea8 <USB_FlushTxFifo>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f924 	bl	8006f0c <USB_FlushRxFifo>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cec:	461a      	mov	r2, r3
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	e043      	b.n	8006d80 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d0e:	d118      	bne.n	8006d42 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10a      	bne.n	8006d2c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d22:	461a      	mov	r2, r3
 8006d24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	e013      	b.n	8006d54 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d38:	461a      	mov	r2, r3
 8006d3a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	e008      	b.n	8006d54 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2300      	movs	r3, #0
 8006d52:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d60:	461a      	mov	r2, r3
 8006d62:	2300      	movs	r3, #0
 8006d64:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d72:	461a      	mov	r2, r3
 8006d74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d84:	461a      	mov	r2, r3
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d3b5      	bcc.n	8006cf8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	e043      	b.n	8006e1a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006da4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006da8:	d118      	bne.n	8006ddc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10a      	bne.n	8006dc6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	e013      	b.n	8006dee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	e008      	b.n	8006dee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006de8:	461a      	mov	r2, r3
 8006dea:	2300      	movs	r3, #0
 8006dec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	3301      	adds	r3, #1
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e1e:	461a      	mov	r2, r3
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d3b5      	bcc.n	8006d92 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e38:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006e46:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d105      	bne.n	8006e5c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f043 0210 	orr.w	r2, r3, #16
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	699a      	ldr	r2, [r3, #24]
 8006e60:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea0 <USB_DevInit+0x2b4>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e68:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	f043 0208 	orr.w	r2, r3, #8
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e7c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d105      	bne.n	8006e90 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699a      	ldr	r2, [r3, #24]
 8006e88:	4b06      	ldr	r3, [pc, #24]	@ (8006ea4 <USB_DevInit+0x2b8>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e9c:	b004      	add	sp, #16
 8006e9e:	4770      	bx	lr
 8006ea0:	803c3800 	.word	0x803c3800
 8006ea4:	40000004 	.word	0x40000004

08006ea8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ec2:	d901      	bls.n	8006ec8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e01b      	b.n	8006f00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	daf2      	bge.n	8006eb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	019b      	lsls	r3, r3, #6
 8006ed8:	f043 0220 	orr.w	r2, r3, #32
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eec:	d901      	bls.n	8006ef2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e006      	b.n	8006f00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b20      	cmp	r3, #32
 8006efc:	d0f0      	beq.n	8006ee0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f24:	d901      	bls.n	8006f2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e018      	b.n	8006f5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	daf2      	bge.n	8006f18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2210      	movs	r2, #16
 8006f3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f48:	d901      	bls.n	8006f4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e006      	b.n	8006f5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0310 	and.w	r3, r3, #16
 8006f56:	2b10      	cmp	r3, #16
 8006f58:	d0f0      	beq.n	8006f3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	68f9      	ldr	r1, [r7, #12]
 8006f84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006fb4:	f023 0303 	bic.w	r3, r3, #3
 8006fb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fc8:	f043 0302 	orr.w	r3, r3, #2
 8006fcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	f003 0301 	and.w	r3, r3, #1
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3301      	adds	r3, #1
 8007008:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007010:	d901      	bls.n	8007016 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e01b      	b.n	800704e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	daf2      	bge.n	8007004 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f043 0201 	orr.w	r2, r3, #1
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3301      	adds	r3, #1
 8007032:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800703a:	d901      	bls.n	8007040 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e006      	b.n	800704e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b01      	cmp	r3, #1
 800704a:	d0f0      	beq.n	800702e <USB_CoreReset+0x36>

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
	...

0800705c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007060:	4904      	ldr	r1, [pc, #16]	@ (8007074 <MX_FATFS_Init+0x18>)
 8007062:	4805      	ldr	r0, [pc, #20]	@ (8007078 <MX_FATFS_Init+0x1c>)
 8007064:	f003 f996 	bl	800a394 <FATFS_LinkDriver>
 8007068:	4603      	mov	r3, r0
 800706a:	461a      	mov	r2, r3
 800706c:	4b03      	ldr	r3, [pc, #12]	@ (800707c <MX_FATFS_Init+0x20>)
 800706e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007070:	bf00      	nop
 8007072:	bd80      	pop	{r7, pc}
 8007074:	200028d8 	.word	0x200028d8
 8007078:	20000018 	.word	0x20000018
 800707c:	200028d4 	.word	0x200028d4

08007080 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007080:	b480      	push	{r7}
 8007082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007084:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007086:	4618      	mov	r0, r3
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	4603      	mov	r3, r0
 8007098:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800709a:	79fb      	ldrb	r3, [r7, #7]
 800709c:	4618      	mov	r0, r3
 800709e:	f7fa feeb 	bl	8001e78 <SD_disk_initialize>
 80070a2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80070b6:	79fb      	ldrb	r3, [r7, #7]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fa ffc7 	bl	800204c <SD_disk_status>
 80070be:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60b9      	str	r1, [r7, #8]
 80070d0:	607a      	str	r2, [r7, #4]
 80070d2:	603b      	str	r3, [r7, #0]
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80070d8:	7bf8      	ldrb	r0, [r7, #15]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	68b9      	ldr	r1, [r7, #8]
 80070e0:	f7fa ffca 	bl	8002078 <SD_disk_read>
 80070e4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	603b      	str	r3, [r7, #0]
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80070fe:	7bf8      	ldrb	r0, [r7, #15]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	f7fb f821 	bl	800214c <SD_disk_write>
 800710a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	603a      	str	r2, [r7, #0]
 800711e:	71fb      	strb	r3, [r7, #7]
 8007120:	460b      	mov	r3, r1
 8007122:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007124:	79b9      	ldrb	r1, [r7, #6]
 8007126:	79fb      	ldrb	r3, [r7, #7]
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	4618      	mov	r0, r3
 800712c:	f7fb f892 	bl	8002254 <SD_disk_ioctl>
 8007130:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007146:	79fb      	ldrb	r3, [r7, #7]
 8007148:	4a08      	ldr	r2, [pc, #32]	@ (800716c <disk_status+0x30>)
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	79fa      	ldrb	r2, [r7, #7]
 8007154:	4905      	ldr	r1, [pc, #20]	@ (800716c <disk_status+0x30>)
 8007156:	440a      	add	r2, r1
 8007158:	7a12      	ldrb	r2, [r2, #8]
 800715a:	4610      	mov	r0, r2
 800715c:	4798      	blx	r3
 800715e:	4603      	mov	r3, r0
 8007160:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007162:	7bfb      	ldrb	r3, [r7, #15]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20002b04 	.word	0x20002b04

08007170 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	4a0d      	ldr	r2, [pc, #52]	@ (80071b8 <disk_initialize+0x48>)
 8007182:	5cd3      	ldrb	r3, [r2, r3]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d111      	bne.n	80071ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007188:	79fb      	ldrb	r3, [r7, #7]
 800718a:	4a0b      	ldr	r2, [pc, #44]	@ (80071b8 <disk_initialize+0x48>)
 800718c:	2101      	movs	r1, #1
 800718e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	4a09      	ldr	r2, [pc, #36]	@ (80071b8 <disk_initialize+0x48>)
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	79fa      	ldrb	r2, [r7, #7]
 800719e:	4906      	ldr	r1, [pc, #24]	@ (80071b8 <disk_initialize+0x48>)
 80071a0:	440a      	add	r2, r1
 80071a2:	7a12      	ldrb	r2, [r2, #8]
 80071a4:	4610      	mov	r0, r2
 80071a6:	4798      	blx	r3
 80071a8:	4603      	mov	r3, r0
 80071aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20002b04 	.word	0x20002b04

080071bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80071bc:	b590      	push	{r4, r7, lr}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	607a      	str	r2, [r7, #4]
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	4a0a      	ldr	r2, [pc, #40]	@ (80071f8 <disk_read+0x3c>)
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	689c      	ldr	r4, [r3, #8]
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	4a07      	ldr	r2, [pc, #28]	@ (80071f8 <disk_read+0x3c>)
 80071dc:	4413      	add	r3, r2
 80071de:	7a18      	ldrb	r0, [r3, #8]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	47a0      	blx	r4
 80071e8:	4603      	mov	r3, r0
 80071ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd90      	pop	{r4, r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20002b04 	.word	0x20002b04

080071fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80071fc:	b590      	push	{r4, r7, lr}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	4a0a      	ldr	r2, [pc, #40]	@ (8007238 <disk_write+0x3c>)
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	68dc      	ldr	r4, [r3, #12]
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	4a07      	ldr	r2, [pc, #28]	@ (8007238 <disk_write+0x3c>)
 800721c:	4413      	add	r3, r2
 800721e:	7a18      	ldrb	r0, [r3, #8]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	68b9      	ldr	r1, [r7, #8]
 8007226:	47a0      	blx	r4
 8007228:	4603      	mov	r3, r0
 800722a:	75fb      	strb	r3, [r7, #23]
  return res;
 800722c:	7dfb      	ldrb	r3, [r7, #23]
}
 800722e:	4618      	mov	r0, r3
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	bd90      	pop	{r4, r7, pc}
 8007236:	bf00      	nop
 8007238:	20002b04 	.word	0x20002b04

0800723c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	603a      	str	r2, [r7, #0]
 8007246:	71fb      	strb	r3, [r7, #7]
 8007248:	460b      	mov	r3, r1
 800724a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	4a09      	ldr	r2, [pc, #36]	@ (8007274 <disk_ioctl+0x38>)
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	79fa      	ldrb	r2, [r7, #7]
 800725a:	4906      	ldr	r1, [pc, #24]	@ (8007274 <disk_ioctl+0x38>)
 800725c:	440a      	add	r2, r1
 800725e:	7a10      	ldrb	r0, [r2, #8]
 8007260:	79b9      	ldrb	r1, [r7, #6]
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	4798      	blx	r3
 8007266:	4603      	mov	r3, r0
 8007268:	73fb      	strb	r3, [r7, #15]
  return res;
 800726a:	7bfb      	ldrb	r3, [r7, #15]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20002b04 	.word	0x20002b04

08007278 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3301      	adds	r3, #1
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007288:	89fb      	ldrh	r3, [r7, #14]
 800728a:	021b      	lsls	r3, r3, #8
 800728c:	b21a      	sxth	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	b21b      	sxth	r3, r3
 8007294:	4313      	orrs	r3, r2
 8007296:	b21b      	sxth	r3, r3
 8007298:	81fb      	strh	r3, [r7, #14]
	return rv;
 800729a:	89fb      	ldrh	r3, [r7, #14]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3303      	adds	r3, #3
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	021b      	lsls	r3, r3, #8
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	3202      	adds	r2, #2
 80072c0:	7812      	ldrb	r2, [r2, #0]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	3201      	adds	r2, #1
 80072ce:	7812      	ldrb	r2, [r2, #0]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	021b      	lsls	r3, r3, #8
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	7812      	ldrb	r2, [r2, #0]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]
	return rv;
 80072e0:	68fb      	ldr	r3, [r7, #12]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	887a      	ldrh	r2, [r7, #2]
 8007302:	b2d2      	uxtb	r2, r2
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	887b      	ldrh	r3, [r7, #2]
 8007308:	0a1b      	lsrs	r3, r3, #8
 800730a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	607a      	str	r2, [r7, #4]
 8007312:	887a      	ldrh	r2, [r7, #2]
 8007314:	b2d2      	uxtb	r2, r2
 8007316:	701a      	strb	r2, [r3, #0]
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	0a1b      	lsrs	r3, r3, #8
 800733e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	b2d2      	uxtb	r2, r2
 800734a:	701a      	strb	r2, [r3, #0]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	0a1b      	lsrs	r3, r3, #8
 8007350:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	0a1b      	lsrs	r3, r3, #8
 8007362:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	607a      	str	r2, [r7, #4]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	b2d2      	uxtb	r2, r2
 800736e:	701a      	strb	r2, [r3, #0]
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00d      	beq.n	80073b2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	1c53      	adds	r3, r2, #1
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	1c59      	adds	r1, r3, #1
 80073a0:	6179      	str	r1, [r7, #20]
 80073a2:	7812      	ldrb	r2, [r2, #0]
 80073a4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	607b      	str	r3, [r7, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f1      	bne.n	8007396 <mem_cpy+0x1a>
	}
}
 80073b2:	bf00      	nop
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80073be:	b480      	push	{r7}
 80073c0:	b087      	sub	sp, #28
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	617a      	str	r2, [r7, #20]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3b01      	subs	r3, #1
 80073de:	607b      	str	r3, [r7, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1f3      	bne.n	80073ce <mem_set+0x10>
}
 80073e6:	bf00      	nop
 80073e8:	bf00      	nop
 80073ea:	371c      	adds	r7, #28
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80073f4:	b480      	push	{r7}
 80073f6:	b089      	sub	sp, #36	@ 0x24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	61fb      	str	r3, [r7, #28]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	61fa      	str	r2, [r7, #28]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	4619      	mov	r1, r3
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	61ba      	str	r2, [r7, #24]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	1acb      	subs	r3, r1, r3
 8007420:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3b01      	subs	r3, #1
 8007426:	607b      	str	r3, [r7, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <mem_cmp+0x40>
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0eb      	beq.n	800740c <mem_cmp+0x18>

	return r;
 8007434:	697b      	ldr	r3, [r7, #20]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3724      	adds	r7, #36	@ 0x24
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800744c:	e002      	b.n	8007454 <chk_chr+0x12>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3301      	adds	r3, #1
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d005      	beq.n	8007468 <chk_chr+0x26>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	461a      	mov	r2, r3
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	4293      	cmp	r3, r2
 8007466:	d1f2      	bne.n	800744e <chk_chr+0xc>
	return *str;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	781b      	ldrb	r3, [r3, #0]
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007482:	2300      	movs	r3, #0
 8007484:	60bb      	str	r3, [r7, #8]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	e029      	b.n	80074e0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800748c:	4a27      	ldr	r2, [pc, #156]	@ (800752c <chk_lock+0xb4>)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	4413      	add	r3, r2
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01d      	beq.n	80074d6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800749a:	4a24      	ldr	r2, [pc, #144]	@ (800752c <chk_lock+0xb4>)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	4413      	add	r3, r2
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d116      	bne.n	80074da <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80074ac:	4a1f      	ldr	r2, [pc, #124]	@ (800752c <chk_lock+0xb4>)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	011b      	lsls	r3, r3, #4
 80074b2:	4413      	add	r3, r2
 80074b4:	3304      	adds	r3, #4
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80074bc:	429a      	cmp	r2, r3
 80074be:	d10c      	bne.n	80074da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074c0:	4a1a      	ldr	r2, [pc, #104]	@ (800752c <chk_lock+0xb4>)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	4413      	add	r3, r2
 80074c8:	3308      	adds	r3, #8
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d102      	bne.n	80074da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074d4:	e007      	b.n	80074e6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80074d6:	2301      	movs	r3, #1
 80074d8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3301      	adds	r3, #1
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d9d2      	bls.n	800748c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d109      	bne.n	8007500 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d102      	bne.n	80074f8 <chk_lock+0x80>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d101      	bne.n	80074fc <chk_lock+0x84>
 80074f8:	2300      	movs	r3, #0
 80074fa:	e010      	b.n	800751e <chk_lock+0xa6>
 80074fc:	2312      	movs	r3, #18
 80074fe:	e00e      	b.n	800751e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d108      	bne.n	8007518 <chk_lock+0xa0>
 8007506:	4a09      	ldr	r2, [pc, #36]	@ (800752c <chk_lock+0xb4>)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	4413      	add	r3, r2
 800750e:	330c      	adds	r3, #12
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007516:	d101      	bne.n	800751c <chk_lock+0xa4>
 8007518:	2310      	movs	r3, #16
 800751a:	e000      	b.n	800751e <chk_lock+0xa6>
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	200028e4 	.word	0x200028e4

08007530 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007536:	2300      	movs	r3, #0
 8007538:	607b      	str	r3, [r7, #4]
 800753a:	e002      	b.n	8007542 <enq_lock+0x12>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3301      	adds	r3, #1
 8007540:	607b      	str	r3, [r7, #4]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d806      	bhi.n	8007556 <enq_lock+0x26>
 8007548:	4a09      	ldr	r2, [pc, #36]	@ (8007570 <enq_lock+0x40>)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	4413      	add	r3, r2
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1f2      	bne.n	800753c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b02      	cmp	r3, #2
 800755a:	bf14      	ite	ne
 800755c:	2301      	movne	r3, #1
 800755e:	2300      	moveq	r3, #0
 8007560:	b2db      	uxtb	r3, r3
}
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	200028e4 	.word	0x200028e4

08007574 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	e01f      	b.n	80075c4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007584:	4a41      	ldr	r2, [pc, #260]	@ (800768c <inc_lock+0x118>)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	4413      	add	r3, r2
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d113      	bne.n	80075be <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007596:	4a3d      	ldr	r2, [pc, #244]	@ (800768c <inc_lock+0x118>)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	011b      	lsls	r3, r3, #4
 800759c:	4413      	add	r3, r2
 800759e:	3304      	adds	r3, #4
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d109      	bne.n	80075be <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80075aa:	4a38      	ldr	r2, [pc, #224]	@ (800768c <inc_lock+0x118>)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	4413      	add	r3, r2
 80075b2:	3308      	adds	r3, #8
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d006      	beq.n	80075cc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3301      	adds	r3, #1
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d9dc      	bls.n	8007584 <inc_lock+0x10>
 80075ca:	e000      	b.n	80075ce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80075cc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d132      	bne.n	800763a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	e002      	b.n	80075e0 <inc_lock+0x6c>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3301      	adds	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d806      	bhi.n	80075f4 <inc_lock+0x80>
 80075e6:	4a29      	ldr	r2, [pc, #164]	@ (800768c <inc_lock+0x118>)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	4413      	add	r3, r2
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1f2      	bne.n	80075da <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d101      	bne.n	80075fe <inc_lock+0x8a>
 80075fa:	2300      	movs	r3, #0
 80075fc:	e040      	b.n	8007680 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	4922      	ldr	r1, [pc, #136]	@ (800768c <inc_lock+0x118>)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	440b      	add	r3, r1
 800760a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	491e      	ldr	r1, [pc, #120]	@ (800768c <inc_lock+0x118>)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	440b      	add	r3, r1
 8007618:	3304      	adds	r3, #4
 800761a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	695a      	ldr	r2, [r3, #20]
 8007620:	491a      	ldr	r1, [pc, #104]	@ (800768c <inc_lock+0x118>)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	440b      	add	r3, r1
 8007628:	3308      	adds	r3, #8
 800762a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800762c:	4a17      	ldr	r2, [pc, #92]	@ (800768c <inc_lock+0x118>)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	4413      	add	r3, r2
 8007634:	330c      	adds	r3, #12
 8007636:	2200      	movs	r2, #0
 8007638:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d009      	beq.n	8007654 <inc_lock+0xe0>
 8007640:	4a12      	ldr	r2, [pc, #72]	@ (800768c <inc_lock+0x118>)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	4413      	add	r3, r2
 8007648:	330c      	adds	r3, #12
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <inc_lock+0xe0>
 8007650:	2300      	movs	r3, #0
 8007652:	e015      	b.n	8007680 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d108      	bne.n	800766c <inc_lock+0xf8>
 800765a:	4a0c      	ldr	r2, [pc, #48]	@ (800768c <inc_lock+0x118>)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	011b      	lsls	r3, r3, #4
 8007660:	4413      	add	r3, r2
 8007662:	330c      	adds	r3, #12
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	3301      	adds	r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	e001      	b.n	8007670 <inc_lock+0xfc>
 800766c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007670:	4906      	ldr	r1, [pc, #24]	@ (800768c <inc_lock+0x118>)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	011b      	lsls	r3, r3, #4
 8007676:	440b      	add	r3, r1
 8007678:	330c      	adds	r3, #12
 800767a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3301      	adds	r3, #1
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	200028e4 	.word	0x200028e4

08007690 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3b01      	subs	r3, #1
 800769c:	607b      	str	r3, [r7, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d825      	bhi.n	80076f0 <dec_lock+0x60>
		n = Files[i].ctr;
 80076a4:	4a17      	ldr	r2, [pc, #92]	@ (8007704 <dec_lock+0x74>)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	4413      	add	r3, r2
 80076ac:	330c      	adds	r3, #12
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80076b2:	89fb      	ldrh	r3, [r7, #14]
 80076b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076b8:	d101      	bne.n	80076be <dec_lock+0x2e>
 80076ba:	2300      	movs	r3, #0
 80076bc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80076be:	89fb      	ldrh	r3, [r7, #14]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <dec_lock+0x3a>
 80076c4:	89fb      	ldrh	r3, [r7, #14]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80076ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007704 <dec_lock+0x74>)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	011b      	lsls	r3, r3, #4
 80076d0:	4413      	add	r3, r2
 80076d2:	330c      	adds	r3, #12
 80076d4:	89fa      	ldrh	r2, [r7, #14]
 80076d6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80076d8:	89fb      	ldrh	r3, [r7, #14]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d105      	bne.n	80076ea <dec_lock+0x5a>
 80076de:	4a09      	ldr	r2, [pc, #36]	@ (8007704 <dec_lock+0x74>)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	011b      	lsls	r3, r3, #4
 80076e4:	4413      	add	r3, r2
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	737b      	strb	r3, [r7, #13]
 80076ee:	e001      	b.n	80076f4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80076f0:	2302      	movs	r3, #2
 80076f2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80076f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	200028e4 	.word	0x200028e4

08007708 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007710:	2300      	movs	r3, #0
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	e010      	b.n	8007738 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007716:	4a0d      	ldr	r2, [pc, #52]	@ (800774c <clear_lock+0x44>)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	4413      	add	r3, r2
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	429a      	cmp	r2, r3
 8007724:	d105      	bne.n	8007732 <clear_lock+0x2a>
 8007726:	4a09      	ldr	r2, [pc, #36]	@ (800774c <clear_lock+0x44>)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	011b      	lsls	r3, r3, #4
 800772c:	4413      	add	r3, r2
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3301      	adds	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d9eb      	bls.n	8007716 <clear_lock+0xe>
	}
}
 800773e:	bf00      	nop
 8007740:	bf00      	nop
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	200028e4 	.word	0x200028e4

08007750 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	78db      	ldrb	r3, [r3, #3]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d034      	beq.n	80077ce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007768:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	7858      	ldrb	r0, [r3, #1]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007774:	2301      	movs	r3, #1
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	f7ff fd40 	bl	80071fc <disk_write>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007782:	2301      	movs	r3, #1
 8007784:	73fb      	strb	r3, [r7, #15]
 8007786:	e022      	b.n	80077ce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	1ad2      	subs	r2, r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	429a      	cmp	r2, r3
 800779c:	d217      	bcs.n	80077ce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	789b      	ldrb	r3, [r3, #2]
 80077a2:	613b      	str	r3, [r7, #16]
 80077a4:	e010      	b.n	80077c8 <sync_window+0x78>
					wsect += fs->fsize;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	4413      	add	r3, r2
 80077ae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	7858      	ldrb	r0, [r3, #1]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80077ba:	2301      	movs	r3, #1
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	f7ff fd1d 	bl	80071fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d8eb      	bhi.n	80077a6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d01b      	beq.n	8007828 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7ff ffad 	bl	8007750 <sync_window>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d113      	bne.n	8007828 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	7858      	ldrb	r0, [r3, #1]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800780a:	2301      	movs	r3, #1
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	f7ff fcd5 	bl	80071bc <disk_read>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d004      	beq.n	8007822 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007818:	f04f 33ff 	mov.w	r3, #4294967295
 800781c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800781e:	2301      	movs	r3, #1
 8007820:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff ff87 	bl	8007750 <sync_window>
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d159      	bne.n	8007900 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b03      	cmp	r3, #3
 8007852:	d149      	bne.n	80078e8 <sync_fs+0xb4>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	791b      	ldrb	r3, [r3, #4]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d145      	bne.n	80078e8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	899b      	ldrh	r3, [r3, #12]
 8007866:	461a      	mov	r2, r3
 8007868:	2100      	movs	r1, #0
 800786a:	f7ff fda8 	bl	80073be <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3338      	adds	r3, #56	@ 0x38
 8007872:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007876:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff fd37 	bl	80072ee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3338      	adds	r3, #56	@ 0x38
 8007884:	4921      	ldr	r1, [pc, #132]	@ (800790c <sync_fs+0xd8>)
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff fd4c 	bl	8007324 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3338      	adds	r3, #56	@ 0x38
 8007890:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007894:	491e      	ldr	r1, [pc, #120]	@ (8007910 <sync_fs+0xdc>)
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fd44 	bl	8007324 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3338      	adds	r3, #56	@ 0x38
 80078a0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	4619      	mov	r1, r3
 80078aa:	4610      	mov	r0, r2
 80078ac:	f7ff fd3a 	bl	8007324 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3338      	adds	r3, #56	@ 0x38
 80078b4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	4619      	mov	r1, r3
 80078be:	4610      	mov	r0, r2
 80078c0:	f7ff fd30 	bl	8007324 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	7858      	ldrb	r0, [r3, #1]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078dc:	2301      	movs	r3, #1
 80078de:	f7ff fc8d 	bl	80071fc <disk_write>
			fs->fsi_flag = 0;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	785b      	ldrb	r3, [r3, #1]
 80078ec:	2200      	movs	r2, #0
 80078ee:	2100      	movs	r1, #0
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff fca3 	bl	800723c <disk_ioctl>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <sync_fs+0xcc>
 80078fc:	2301      	movs	r3, #1
 80078fe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007900:	7bfb      	ldrb	r3, [r7, #15]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	41615252 	.word	0x41615252
 8007910:	61417272 	.word	0x61417272

08007914 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	3b02      	subs	r3, #2
 8007922:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	3b02      	subs	r3, #2
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	429a      	cmp	r2, r3
 800792e:	d301      	bcc.n	8007934 <clust2sect+0x20>
 8007930:	2300      	movs	r3, #0
 8007932:	e008      	b.n	8007946 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	895b      	ldrh	r3, [r3, #10]
 8007938:	461a      	mov	r2, r3
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	fb03 f202 	mul.w	r2, r3, r2
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007944:	4413      	add	r3, r2
}
 8007946:	4618      	mov	r0, r3
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b086      	sub	sp, #24
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d904      	bls.n	8007972 <get_fat+0x20>
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	69db      	ldr	r3, [r3, #28]
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d302      	bcc.n	8007978 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007972:	2301      	movs	r3, #1
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	e0ba      	b.n	8007aee <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007978:	f04f 33ff 	mov.w	r3, #4294967295
 800797c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	2b03      	cmp	r3, #3
 8007984:	f000 8082 	beq.w	8007a8c <get_fat+0x13a>
 8007988:	2b03      	cmp	r3, #3
 800798a:	f300 80a6 	bgt.w	8007ada <get_fat+0x188>
 800798e:	2b01      	cmp	r3, #1
 8007990:	d002      	beq.n	8007998 <get_fat+0x46>
 8007992:	2b02      	cmp	r3, #2
 8007994:	d055      	beq.n	8007a42 <get_fat+0xf0>
 8007996:	e0a0      	b.n	8007ada <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	085b      	lsrs	r3, r3, #1
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	899b      	ldrh	r3, [r3, #12]
 80079ae:	4619      	mov	r1, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80079b6:	4413      	add	r3, r2
 80079b8:	4619      	mov	r1, r3
 80079ba:	6938      	ldr	r0, [r7, #16]
 80079bc:	f7ff ff0c 	bl	80077d8 <move_window>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f040 808c 	bne.w	8007ae0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	60fa      	str	r2, [r7, #12]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	8992      	ldrh	r2, [r2, #12]
 80079d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80079d6:	fb01 f202 	mul.w	r2, r1, r2
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4413      	add	r3, r2
 80079e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	899b      	ldrh	r3, [r3, #12]
 80079ee:	4619      	mov	r1, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80079f6:	4413      	add	r3, r2
 80079f8:	4619      	mov	r1, r3
 80079fa:	6938      	ldr	r0, [r7, #16]
 80079fc:	f7ff feec 	bl	80077d8 <move_window>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d16e      	bne.n	8007ae4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	899b      	ldrh	r3, [r3, #12]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a12:	fb01 f202 	mul.w	r2, r1, r2
 8007a16:	1a9b      	subs	r3, r3, r2
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <get_fat+0xe6>
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	091b      	lsrs	r3, r3, #4
 8007a36:	e002      	b.n	8007a3e <get_fat+0xec>
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a3e:	617b      	str	r3, [r7, #20]
			break;
 8007a40:	e055      	b.n	8007aee <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	899b      	ldrh	r3, [r3, #12]
 8007a4a:	085b      	lsrs	r3, r3, #1
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	4619      	mov	r1, r3
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a56:	4413      	add	r3, r2
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6938      	ldr	r0, [r7, #16]
 8007a5c:	f7ff febc 	bl	80077d8 <move_window>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d140      	bne.n	8007ae8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	8992      	ldrh	r2, [r2, #12]
 8007a74:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a78:	fb00 f202 	mul.w	r2, r0, r2
 8007a7c:	1a9b      	subs	r3, r3, r2
 8007a7e:	440b      	add	r3, r1
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7ff fbf9 	bl	8007278 <ld_word>
 8007a86:	4603      	mov	r3, r0
 8007a88:	617b      	str	r3, [r7, #20]
			break;
 8007a8a:	e030      	b.n	8007aee <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	899b      	ldrh	r3, [r3, #12]
 8007a94:	089b      	lsrs	r3, r3, #2
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	4619      	mov	r1, r3
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007aa0:	4413      	add	r3, r2
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6938      	ldr	r0, [r7, #16]
 8007aa6:	f7ff fe97 	bl	80077d8 <move_window>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d11d      	bne.n	8007aec <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	8992      	ldrh	r2, [r2, #12]
 8007abe:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ac2:	fb00 f202 	mul.w	r2, r0, r2
 8007ac6:	1a9b      	subs	r3, r3, r2
 8007ac8:	440b      	add	r3, r1
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff fbec 	bl	80072a8 <ld_dword>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007ad6:	617b      	str	r3, [r7, #20]
			break;
 8007ad8:	e009      	b.n	8007aee <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007ada:	2301      	movs	r3, #1
 8007adc:	617b      	str	r3, [r7, #20]
 8007ade:	e006      	b.n	8007aee <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ae0:	bf00      	nop
 8007ae2:	e004      	b.n	8007aee <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ae4:	bf00      	nop
 8007ae6:	e002      	b.n	8007aee <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ae8:	bf00      	nop
 8007aea:	e000      	b.n	8007aee <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007aec:	bf00      	nop
		}
	}

	return val;
 8007aee:	697b      	ldr	r3, [r7, #20]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007af8:	b590      	push	{r4, r7, lr}
 8007afa:	b089      	sub	sp, #36	@ 0x24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007b04:	2302      	movs	r3, #2
 8007b06:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	f240 8109 	bls.w	8007d22 <put_fat+0x22a>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	f080 8103 	bcs.w	8007d22 <put_fat+0x22a>
		switch (fs->fs_type) {
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	f000 80b6 	beq.w	8007c92 <put_fat+0x19a>
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	f300 80fb 	bgt.w	8007d22 <put_fat+0x22a>
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d003      	beq.n	8007b38 <put_fat+0x40>
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	f000 8083 	beq.w	8007c3c <put_fat+0x144>
 8007b36:	e0f4      	b.n	8007d22 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	4413      	add	r3, r2
 8007b44:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	899b      	ldrh	r3, [r3, #12]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b56:	4413      	add	r3, r2
 8007b58:	4619      	mov	r1, r3
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f7ff fe3c 	bl	80077d8 <move_window>
 8007b60:	4603      	mov	r3, r0
 8007b62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b64:	7ffb      	ldrb	r3, [r7, #31]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f040 80d4 	bne.w	8007d14 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	1c5a      	adds	r2, r3, #1
 8007b76:	61ba      	str	r2, [r7, #24]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	8992      	ldrh	r2, [r2, #12]
 8007b7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b80:	fb00 f202 	mul.w	r2, r0, r2
 8007b84:	1a9b      	subs	r3, r3, r2
 8007b86:	440b      	add	r3, r1
 8007b88:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00d      	beq.n	8007bb0 <put_fat+0xb8>
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	b25b      	sxtb	r3, r3
 8007b9a:	f003 030f 	and.w	r3, r3, #15
 8007b9e:	b25a      	sxtb	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	011b      	lsls	r3, r3, #4
 8007ba6:	b25b      	sxtb	r3, r3
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	b25b      	sxtb	r3, r3
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	e001      	b.n	8007bb4 <put_fat+0xbc>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	899b      	ldrh	r3, [r3, #12]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bce:	4413      	add	r3, r2
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7ff fe00 	bl	80077d8 <move_window>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007bdc:	7ffb      	ldrb	r3, [r7, #31]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f040 809a 	bne.w	8007d18 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	899b      	ldrh	r3, [r3, #12]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bf6:	fb00 f202 	mul.w	r2, r0, r2
 8007bfa:	1a9b      	subs	r3, r3, r2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <put_fat+0x11a>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	091b      	lsrs	r3, r3, #4
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	e00e      	b.n	8007c30 <put_fat+0x138>
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	b25b      	sxtb	r3, r3
 8007c18:	f023 030f 	bic.w	r3, r3, #15
 8007c1c:	b25a      	sxtb	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	0a1b      	lsrs	r3, r3, #8
 8007c22:	b25b      	sxtb	r3, r3
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	b25b      	sxtb	r3, r3
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	b25b      	sxtb	r3, r3
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	70da      	strb	r2, [r3, #3]
			break;
 8007c3a:	e072      	b.n	8007d22 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	899b      	ldrh	r3, [r3, #12]
 8007c44:	085b      	lsrs	r3, r3, #1
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	4619      	mov	r1, r3
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c50:	4413      	add	r3, r2
 8007c52:	4619      	mov	r1, r3
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7ff fdbf 	bl	80077d8 <move_window>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c5e:	7ffb      	ldrb	r3, [r7, #31]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d15b      	bne.n	8007d1c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	8992      	ldrh	r2, [r2, #12]
 8007c72:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c76:	fb00 f202 	mul.w	r2, r0, r2
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	440b      	add	r3, r1
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	b292      	uxth	r2, r2
 8007c82:	4611      	mov	r1, r2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff fb32 	bl	80072ee <st_word>
			fs->wflag = 1;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	70da      	strb	r2, [r3, #3]
			break;
 8007c90:	e047      	b.n	8007d22 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	899b      	ldrh	r3, [r3, #12]
 8007c9a:	089b      	lsrs	r3, r3, #2
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ca6:	4413      	add	r3, r2
 8007ca8:	4619      	mov	r1, r3
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f7ff fd94 	bl	80077d8 <move_window>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007cb4:	7ffb      	ldrb	r3, [r7, #31]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d132      	bne.n	8007d20 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	8992      	ldrh	r2, [r2, #12]
 8007cce:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cd2:	fb00 f202 	mul.w	r2, r0, r2
 8007cd6:	1a9b      	subs	r3, r3, r2
 8007cd8:	440b      	add	r3, r1
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7ff fae4 	bl	80072a8 <ld_dword>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007ce6:	4323      	orrs	r3, r4
 8007ce8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	8992      	ldrh	r2, [r2, #12]
 8007cf8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cfc:	fb00 f202 	mul.w	r2, r0, r2
 8007d00:	1a9b      	subs	r3, r3, r2
 8007d02:	440b      	add	r3, r1
 8007d04:	6879      	ldr	r1, [r7, #4]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff fb0c 	bl	8007324 <st_dword>
			fs->wflag = 1;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	70da      	strb	r2, [r3, #3]
			break;
 8007d12:	e006      	b.n	8007d22 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007d14:	bf00      	nop
 8007d16:	e004      	b.n	8007d22 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007d18:	bf00      	nop
 8007d1a:	e002      	b.n	8007d22 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007d1c:	bf00      	nop
 8007d1e:	e000      	b.n	8007d22 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007d20:	bf00      	nop
		}
	}
	return res;
 8007d22:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3724      	adds	r7, #36	@ 0x24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd90      	pop	{r4, r7, pc}

08007d2c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d904      	bls.n	8007d52 <remove_chain+0x26>
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d301      	bcc.n	8007d56 <remove_chain+0x2a>
 8007d52:	2302      	movs	r3, #2
 8007d54:	e04b      	b.n	8007dee <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00c      	beq.n	8007d76 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d60:	6879      	ldr	r1, [r7, #4]
 8007d62:	69b8      	ldr	r0, [r7, #24]
 8007d64:	f7ff fec8 	bl	8007af8 <put_fat>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007d6c:	7ffb      	ldrb	r3, [r7, #31]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <remove_chain+0x4a>
 8007d72:	7ffb      	ldrb	r3, [r7, #31]
 8007d74:	e03b      	b.n	8007dee <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007d76:	68b9      	ldr	r1, [r7, #8]
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7ff fdea 	bl	8007952 <get_fat>
 8007d7e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d031      	beq.n	8007dea <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d101      	bne.n	8007d90 <remove_chain+0x64>
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e02e      	b.n	8007dee <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d96:	d101      	bne.n	8007d9c <remove_chain+0x70>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e028      	b.n	8007dee <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	69b8      	ldr	r0, [r7, #24]
 8007da2:	f7ff fea9 	bl	8007af8 <put_fat>
 8007da6:	4603      	mov	r3, r0
 8007da8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007daa:	7ffb      	ldrb	r3, [r7, #31]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <remove_chain+0x88>
 8007db0:	7ffb      	ldrb	r3, [r7, #31]
 8007db2:	e01c      	b.n	8007dee <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	699a      	ldr	r2, [r3, #24]
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	3b02      	subs	r3, #2
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d20b      	bcs.n	8007dda <remove_chain+0xae>
			fs->free_clst++;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	791b      	ldrb	r3, [r3, #4]
 8007dd0:	f043 0301 	orr.w	r3, r3, #1
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d3c6      	bcc.n	8007d76 <remove_chain+0x4a>
 8007de8:	e000      	b.n	8007dec <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007dea:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3720      	adds	r7, #32
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b088      	sub	sp, #32
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10d      	bne.n	8007e28 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d004      	beq.n	8007e22 <create_chain+0x2c>
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d31b      	bcc.n	8007e5a <create_chain+0x64>
 8007e22:	2301      	movs	r3, #1
 8007e24:	61bb      	str	r3, [r7, #24]
 8007e26:	e018      	b.n	8007e5a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7ff fd91 	bl	8007952 <get_fat>
 8007e30:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d801      	bhi.n	8007e3c <create_chain+0x46>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e070      	b.n	8007f1e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e42:	d101      	bne.n	8007e48 <create_chain+0x52>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	e06a      	b.n	8007f1e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d201      	bcs.n	8007e56 <create_chain+0x60>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	e063      	b.n	8007f1e <create_chain+0x128>
		scl = clst;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	3301      	adds	r3, #1
 8007e62:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	69fa      	ldr	r2, [r7, #28]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d307      	bcc.n	8007e7e <create_chain+0x88>
				ncl = 2;
 8007e6e:	2302      	movs	r3, #2
 8007e70:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d901      	bls.n	8007e7e <create_chain+0x88>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e04f      	b.n	8007f1e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007e7e:	69f9      	ldr	r1, [r7, #28]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff fd66 	bl	8007952 <get_fat>
 8007e86:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00e      	beq.n	8007eac <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d003      	beq.n	8007e9c <create_chain+0xa6>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9a:	d101      	bne.n	8007ea0 <create_chain+0xaa>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	e03e      	b.n	8007f1e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007ea0:	69fa      	ldr	r2, [r7, #28]
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d1da      	bne.n	8007e5e <create_chain+0x68>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	e038      	b.n	8007f1e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007eac:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb2:	69f9      	ldr	r1, [r7, #28]
 8007eb4:	6938      	ldr	r0, [r7, #16]
 8007eb6:	f7ff fe1f 	bl	8007af8 <put_fat>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d109      	bne.n	8007ed8 <create_chain+0xe2>
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d006      	beq.n	8007ed8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007eca:	69fa      	ldr	r2, [r7, #28]
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6938      	ldr	r0, [r7, #16]
 8007ed0:	f7ff fe12 	bl	8007af8 <put_fat>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d116      	bne.n	8007f0c <create_chain+0x116>
		fs->last_clst = ncl;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	69fa      	ldr	r2, [r7, #28]
 8007ee2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	699a      	ldr	r2, [r3, #24]
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	3b02      	subs	r3, #2
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d804      	bhi.n	8007efc <create_chain+0x106>
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	1e5a      	subs	r2, r3, #1
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	791b      	ldrb	r3, [r3, #4]
 8007f00:	f043 0301 	orr.w	r3, r3, #1
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	711a      	strb	r2, [r3, #4]
 8007f0a:	e007      	b.n	8007f1c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d102      	bne.n	8007f18 <create_chain+0x122>
 8007f12:	f04f 33ff 	mov.w	r3, #4294967295
 8007f16:	e000      	b.n	8007f1a <create_chain+0x124>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007f1c:	69fb      	ldr	r3, [r7, #28]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3720      	adds	r7, #32
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b087      	sub	sp, #28
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	899b      	ldrh	r3, [r3, #12]
 8007f42:	461a      	mov	r2, r3
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	8952      	ldrh	r2, [r2, #10]
 8007f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f52:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	1d1a      	adds	r2, r3, #4
 8007f58:	613a      	str	r2, [r7, #16]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <clmt_clust+0x42>
 8007f64:	2300      	movs	r3, #0
 8007f66:	e010      	b.n	8007f8a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d307      	bcc.n	8007f80 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f7e:	e7e9      	b.n	8007f54 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007f80:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	4413      	add	r3, r2
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b086      	sub	sp, #24
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fac:	d204      	bcs.n	8007fb8 <dir_sdi+0x22>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	f003 031f 	and.w	r3, r3, #31
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <dir_sdi+0x26>
		return FR_INT_ERR;
 8007fb8:	2302      	movs	r3, #2
 8007fba:	e071      	b.n	80080a0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <dir_sdi+0x46>
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d902      	bls.n	8007fdc <dir_sdi+0x46>
		clst = fs->dirbase;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fda:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10c      	bne.n	8007ffc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	095b      	lsrs	r3, r3, #5
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	8912      	ldrh	r2, [r2, #8]
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d301      	bcc.n	8007ff2 <dir_sdi+0x5c>
 8007fee:	2302      	movs	r3, #2
 8007ff0:	e056      	b.n	80080a0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	61da      	str	r2, [r3, #28]
 8007ffa:	e02d      	b.n	8008058 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	895b      	ldrh	r3, [r3, #10]
 8008000:	461a      	mov	r2, r3
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	899b      	ldrh	r3, [r3, #12]
 8008006:	fb02 f303 	mul.w	r3, r2, r3
 800800a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800800c:	e019      	b.n	8008042 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6979      	ldr	r1, [r7, #20]
 8008012:	4618      	mov	r0, r3
 8008014:	f7ff fc9d 	bl	8007952 <get_fat>
 8008018:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008020:	d101      	bne.n	8008026 <dir_sdi+0x90>
 8008022:	2301      	movs	r3, #1
 8008024:	e03c      	b.n	80080a0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d904      	bls.n	8008036 <dir_sdi+0xa0>
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	429a      	cmp	r2, r3
 8008034:	d301      	bcc.n	800803a <dir_sdi+0xa4>
 8008036:	2302      	movs	r3, #2
 8008038:	e032      	b.n	80080a0 <dir_sdi+0x10a>
			ofs -= csz;
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	429a      	cmp	r2, r3
 8008048:	d2e1      	bcs.n	800800e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800804a:	6979      	ldr	r1, [r7, #20]
 800804c:	6938      	ldr	r0, [r7, #16]
 800804e:	f7ff fc61 	bl	8007914 <clust2sect>
 8008052:	4602      	mov	r2, r0
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <dir_sdi+0xd4>
 8008066:	2302      	movs	r3, #2
 8008068:	e01a      	b.n	80080a0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	69da      	ldr	r2, [r3, #28]
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	899b      	ldrh	r3, [r3, #12]
 8008072:	4619      	mov	r1, r3
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	fbb3 f3f1 	udiv	r3, r3, r1
 800807a:	441a      	add	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	899b      	ldrh	r3, [r3, #12]
 800808a:	461a      	mov	r2, r3
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008092:	fb00 f202 	mul.w	r2, r0, r2
 8008096:	1a9b      	subs	r3, r3, r2
 8008098:	18ca      	adds	r2, r1, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	3320      	adds	r3, #32
 80080be:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <dir_next+0x28>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080ce:	d301      	bcc.n	80080d4 <dir_next+0x2c>
 80080d0:	2304      	movs	r3, #4
 80080d2:	e0bb      	b.n	800824c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	899b      	ldrh	r3, [r3, #12]
 80080d8:	461a      	mov	r2, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80080e0:	fb01 f202 	mul.w	r2, r1, r2
 80080e4:	1a9b      	subs	r3, r3, r2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f040 809d 	bne.w	8008226 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10b      	bne.n	8008116 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	095b      	lsrs	r3, r3, #5
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	8912      	ldrh	r2, [r2, #8]
 8008106:	4293      	cmp	r3, r2
 8008108:	f0c0 808d 	bcc.w	8008226 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	61da      	str	r2, [r3, #28]
 8008112:	2304      	movs	r3, #4
 8008114:	e09a      	b.n	800824c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	899b      	ldrh	r3, [r3, #12]
 800811a:	461a      	mov	r2, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	8952      	ldrh	r2, [r2, #10]
 8008126:	3a01      	subs	r2, #1
 8008128:	4013      	ands	r3, r2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d17b      	bne.n	8008226 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f7ff fc0b 	bl	8007952 <get_fat>
 800813c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d801      	bhi.n	8008148 <dir_next+0xa0>
 8008144:	2302      	movs	r3, #2
 8008146:	e081      	b.n	800824c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	d101      	bne.n	8008154 <dir_next+0xac>
 8008150:	2301      	movs	r3, #1
 8008152:	e07b      	b.n	800824c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	69db      	ldr	r3, [r3, #28]
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	429a      	cmp	r2, r3
 800815c:	d359      	bcc.n	8008212 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d104      	bne.n	800816e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	61da      	str	r2, [r3, #28]
 800816a:	2304      	movs	r3, #4
 800816c:	e06e      	b.n	800824c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	4619      	mov	r1, r3
 8008176:	4610      	mov	r0, r2
 8008178:	f7ff fe3d 	bl	8007df6 <create_chain>
 800817c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <dir_next+0xe0>
 8008184:	2307      	movs	r3, #7
 8008186:	e061      	b.n	800824c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d101      	bne.n	8008192 <dir_next+0xea>
 800818e:	2302      	movs	r3, #2
 8008190:	e05c      	b.n	800824c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008198:	d101      	bne.n	800819e <dir_next+0xf6>
 800819a:	2301      	movs	r3, #1
 800819c:	e056      	b.n	800824c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f7ff fad6 	bl	8007750 <sync_window>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <dir_next+0x106>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e04e      	b.n	800824c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	899b      	ldrh	r3, [r3, #12]
 80081b8:	461a      	mov	r2, r3
 80081ba:	2100      	movs	r1, #0
 80081bc:	f7ff f8ff 	bl	80073be <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80081c0:	2300      	movs	r3, #0
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	6979      	ldr	r1, [r7, #20]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f7ff fba4 	bl	8007914 <clust2sect>
 80081cc:	4602      	mov	r2, r0
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80081d2:	e012      	b.n	80081fa <dir_next+0x152>
						fs->wflag = 1;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f7ff fab8 	bl	8007750 <sync_window>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <dir_next+0x142>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e030      	b.n	800824c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	3301      	adds	r3, #1
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	895b      	ldrh	r3, [r3, #10]
 80081fe:	461a      	mov	r2, r3
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	4293      	cmp	r3, r2
 8008204:	d3e6      	bcc.n	80081d4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	1ad2      	subs	r2, r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008218:	6979      	ldr	r1, [r7, #20]
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f7ff fb7a 	bl	8007914 <clust2sect>
 8008220:	4602      	mov	r2, r0
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	899b      	ldrh	r3, [r3, #12]
 8008236:	461a      	mov	r2, r3
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	fbb3 f0f2 	udiv	r0, r3, r2
 800823e:	fb00 f202 	mul.w	r2, r0, r2
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	18ca      	adds	r2, r1, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008264:	2100      	movs	r1, #0
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7ff fe95 	bl	8007f96 <dir_sdi>
 800826c:	4603      	mov	r3, r0
 800826e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d12b      	bne.n	80082ce <dir_alloc+0x7a>
		n = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	4619      	mov	r1, r3
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f7ff faa9 	bl	80077d8 <move_window>
 8008286:	4603      	mov	r3, r0
 8008288:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800828a:	7dfb      	ldrb	r3, [r7, #23]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d11d      	bne.n	80082cc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2be5      	cmp	r3, #229	@ 0xe5
 8008298:	d004      	beq.n	80082a4 <dir_alloc+0x50>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d107      	bne.n	80082b4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	3301      	adds	r3, #1
 80082a8:	613b      	str	r3, [r7, #16]
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d102      	bne.n	80082b8 <dir_alloc+0x64>
 80082b2:	e00c      	b.n	80082ce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80082b4:	2300      	movs	r3, #0
 80082b6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80082b8:	2101      	movs	r1, #1
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff fef4 	bl	80080a8 <dir_next>
 80082c0:	4603      	mov	r3, r0
 80082c2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80082c4:	7dfb      	ldrb	r3, [r7, #23]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0d7      	beq.n	800827a <dir_alloc+0x26>
 80082ca:	e000      	b.n	80082ce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80082cc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d101      	bne.n	80082d8 <dir_alloc+0x84>
 80082d4:	2307      	movs	r3, #7
 80082d6:	75fb      	strb	r3, [r7, #23]
	return res;
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	331a      	adds	r3, #26
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe ffc1 	bl	8007278 <ld_word>
 80082f6:	4603      	mov	r3, r0
 80082f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d109      	bne.n	8008316 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	3314      	adds	r3, #20
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe ffb6 	bl	8007278 <ld_word>
 800830c:	4603      	mov	r3, r0
 800830e:	041b      	lsls	r3, r3, #16
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	4313      	orrs	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008316:	68fb      	ldr	r3, [r7, #12]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	331a      	adds	r3, #26
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	b292      	uxth	r2, r2
 8008334:	4611      	mov	r1, r2
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe ffd9 	bl	80072ee <st_word>
	if (fs->fs_type == FS_FAT32) {
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b03      	cmp	r3, #3
 8008342:	d109      	bne.n	8008358 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f103 0214 	add.w	r2, r3, #20
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	0c1b      	lsrs	r3, r3, #16
 800834e:	b29b      	uxth	r3, r3
 8008350:	4619      	mov	r1, r3
 8008352:	4610      	mov	r0, r2
 8008354:	f7fe ffcb 	bl	80072ee <st_word>
	}
}
 8008358:	bf00      	nop
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008360:	b590      	push	{r4, r7, lr}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	331a      	adds	r3, #26
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe ff82 	bl	8007278 <ld_word>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <cmp_lfn+0x1e>
 800837a:	2300      	movs	r3, #0
 800837c:	e059      	b.n	8008432 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008386:	1e5a      	subs	r2, r3, #1
 8008388:	4613      	mov	r3, r2
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	4413      	add	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008394:	2301      	movs	r3, #1
 8008396:	81fb      	strh	r3, [r7, #14]
 8008398:	2300      	movs	r3, #0
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	e033      	b.n	8008406 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800839e:	4a27      	ldr	r2, [pc, #156]	@ (800843c <cmp_lfn+0xdc>)
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	4413      	add	r3, r2
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	4413      	add	r3, r2
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fe ff63 	bl	8007278 <ld_word>
 80083b2:	4603      	mov	r3, r0
 80083b4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80083b6:	89fb      	ldrh	r3, [r7, #14]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d01a      	beq.n	80083f2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2bfe      	cmp	r3, #254	@ 0xfe
 80083c0:	d812      	bhi.n	80083e8 <cmp_lfn+0x88>
 80083c2:	89bb      	ldrh	r3, [r7, #12]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f002 f831 	bl	800a42c <ff_wtoupper>
 80083ca:	4603      	mov	r3, r0
 80083cc:	461c      	mov	r4, r3
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	617a      	str	r2, [r7, #20]
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	4413      	add	r3, r2
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	4618      	mov	r0, r3
 80083de:	f002 f825 	bl	800a42c <ff_wtoupper>
 80083e2:	4603      	mov	r3, r0
 80083e4:	429c      	cmp	r4, r3
 80083e6:	d001      	beq.n	80083ec <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80083e8:	2300      	movs	r3, #0
 80083ea:	e022      	b.n	8008432 <cmp_lfn+0xd2>
			}
			wc = uc;
 80083ec:	89bb      	ldrh	r3, [r7, #12]
 80083ee:	81fb      	strh	r3, [r7, #14]
 80083f0:	e006      	b.n	8008400 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80083f2:	89bb      	ldrh	r3, [r7, #12]
 80083f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d001      	beq.n	8008400 <cmp_lfn+0xa0>
 80083fc:	2300      	movs	r3, #0
 80083fe:	e018      	b.n	8008432 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	3301      	adds	r3, #1
 8008404:	613b      	str	r3, [r7, #16]
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2b0c      	cmp	r3, #12
 800840a:	d9c8      	bls.n	800839e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00b      	beq.n	8008430 <cmp_lfn+0xd0>
 8008418:	89fb      	ldrh	r3, [r7, #14]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d008      	beq.n	8008430 <cmp_lfn+0xd0>
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	4413      	add	r3, r2
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <cmp_lfn+0xd0>
 800842c:	2300      	movs	r3, #0
 800842e:	e000      	b.n	8008432 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008430:	2301      	movs	r3, #1
}
 8008432:	4618      	mov	r0, r3
 8008434:	371c      	adds	r7, #28
 8008436:	46bd      	mov	sp, r7
 8008438:	bd90      	pop	{r4, r7, pc}
 800843a:	bf00      	nop
 800843c:	0800f7dc 	.word	0x0800f7dc

08008440 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b088      	sub	sp, #32
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	4611      	mov	r1, r2
 800844c:	461a      	mov	r2, r3
 800844e:	460b      	mov	r3, r1
 8008450:	71fb      	strb	r3, [r7, #7]
 8008452:	4613      	mov	r3, r2
 8008454:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	330d      	adds	r3, #13
 800845a:	79ba      	ldrb	r2, [r7, #6]
 800845c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	330b      	adds	r3, #11
 8008462:	220f      	movs	r2, #15
 8008464:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	330c      	adds	r3, #12
 800846a:	2200      	movs	r2, #0
 800846c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	331a      	adds	r3, #26
 8008472:	2100      	movs	r1, #0
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe ff3a 	bl	80072ee <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	1e5a      	subs	r2, r3, #1
 800847e:	4613      	mov	r3, r2
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	4413      	add	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	82fb      	strh	r3, [r7, #22]
 800848e:	2300      	movs	r3, #0
 8008490:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008492:	8afb      	ldrh	r3, [r7, #22]
 8008494:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008498:	4293      	cmp	r3, r2
 800849a:	d007      	beq.n	80084ac <put_lfn+0x6c>
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	61fa      	str	r2, [r7, #28]
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	881b      	ldrh	r3, [r3, #0]
 80084aa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80084ac:	4a17      	ldr	r2, [pc, #92]	@ (800850c <put_lfn+0xcc>)
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	4413      	add	r3, r2
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	461a      	mov	r2, r3
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	4413      	add	r3, r2
 80084ba:	8afa      	ldrh	r2, [r7, #22]
 80084bc:	4611      	mov	r1, r2
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fe ff15 	bl	80072ee <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80084c4:	8afb      	ldrh	r3, [r7, #22]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d102      	bne.n	80084d0 <put_lfn+0x90>
 80084ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80084ce:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	3301      	adds	r3, #1
 80084d4:	61bb      	str	r3, [r7, #24]
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	2b0c      	cmp	r3, #12
 80084da:	d9da      	bls.n	8008492 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80084dc:	8afb      	ldrh	r3, [r7, #22]
 80084de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d006      	beq.n	80084f4 <put_lfn+0xb4>
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	4413      	add	r3, r2
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d103      	bne.n	80084fc <put_lfn+0xbc>
 80084f4:	79fb      	ldrb	r3, [r7, #7]
 80084f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084fa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	79fa      	ldrb	r2, [r7, #7]
 8008500:	701a      	strb	r2, [r3, #0]
}
 8008502:	bf00      	nop
 8008504:	3720      	adds	r7, #32
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	0800f7dc 	.word	0x0800f7dc

08008510 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08c      	sub	sp, #48	@ 0x30
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800851e:	220b      	movs	r2, #11
 8008520:	68b9      	ldr	r1, [r7, #8]
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7fe ff2a 	bl	800737c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b05      	cmp	r3, #5
 800852c:	d929      	bls.n	8008582 <gen_numname+0x72>
		sr = seq;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008532:	e020      	b.n	8008576 <gen_numname+0x66>
			wc = *lfn++;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	1c9a      	adds	r2, r3, #2
 8008538:	607a      	str	r2, [r7, #4]
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800853e:	2300      	movs	r3, #0
 8008540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008542:	e015      	b.n	8008570 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	005a      	lsls	r2, r3, #1
 8008548:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	4413      	add	r3, r2
 8008550:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008552:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008554:	085b      	lsrs	r3, r3, #1
 8008556:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <gen_numname+0x5a>
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	4b30      	ldr	r3, [pc, #192]	@ (8008628 <gen_numname+0x118>)
 8008566:	4053      	eors	r3, r2
 8008568:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800856a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856c:	3301      	adds	r3, #1
 800856e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008572:	2b0f      	cmp	r3, #15
 8008574:	d9e6      	bls.n	8008544 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1da      	bne.n	8008534 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008582:	2307      	movs	r3, #7
 8008584:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	b2db      	uxtb	r3, r3
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	b2db      	uxtb	r3, r3
 8008590:	3330      	adds	r3, #48	@ 0x30
 8008592:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8008596:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800859a:	2b39      	cmp	r3, #57	@ 0x39
 800859c:	d904      	bls.n	80085a8 <gen_numname+0x98>
 800859e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085a2:	3307      	adds	r3, #7
 80085a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80085a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085aa:	1e5a      	subs	r2, r3, #1
 80085ac:	62ba      	str	r2, [r7, #40]	@ 0x28
 80085ae:	3330      	adds	r3, #48	@ 0x30
 80085b0:	443b      	add	r3, r7
 80085b2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80085b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	091b      	lsrs	r3, r3, #4
 80085be:	603b      	str	r3, [r7, #0]
	} while (seq);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1df      	bne.n	8008586 <gen_numname+0x76>
	ns[i] = '~';
 80085c6:	f107 0214 	add.w	r2, r7, #20
 80085ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085cc:	4413      	add	r3, r2
 80085ce:	227e      	movs	r2, #126	@ 0x7e
 80085d0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80085d2:	2300      	movs	r3, #0
 80085d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085d6:	e002      	b.n	80085de <gen_numname+0xce>
 80085d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085da:	3301      	adds	r3, #1
 80085dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80085de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d205      	bcs.n	80085f2 <gen_numname+0xe2>
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ea:	4413      	add	r3, r2
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b20      	cmp	r3, #32
 80085f0:	d1f2      	bne.n	80085d8 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80085f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f4:	2b07      	cmp	r3, #7
 80085f6:	d807      	bhi.n	8008608 <gen_numname+0xf8>
 80085f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80085fe:	3330      	adds	r3, #48	@ 0x30
 8008600:	443b      	add	r3, r7
 8008602:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008606:	e000      	b.n	800860a <gen_numname+0xfa>
 8008608:	2120      	movs	r1, #32
 800860a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4413      	add	r3, r2
 8008614:	460a      	mov	r2, r1
 8008616:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861a:	2b07      	cmp	r3, #7
 800861c:	d9e9      	bls.n	80085f2 <gen_numname+0xe2>
}
 800861e:	bf00      	nop
 8008620:	bf00      	nop
 8008622:	3730      	adds	r7, #48	@ 0x30
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	00011021 	.word	0x00011021

0800862c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008638:	230b      	movs	r3, #11
 800863a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	b2da      	uxtb	r2, r3
 8008640:	0852      	lsrs	r2, r2, #1
 8008642:	01db      	lsls	r3, r3, #7
 8008644:	4313      	orrs	r3, r2
 8008646:	b2da      	uxtb	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	1c59      	adds	r1, r3, #1
 800864c:	6079      	str	r1, [r7, #4]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	4413      	add	r3, r2
 8008652:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	3b01      	subs	r3, #1
 8008658:	60bb      	str	r3, [r7, #8]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1ed      	bne.n	800863c <sum_sfn+0x10>
	return sum;
 8008660:	7bfb      	ldrb	r3, [r7, #15]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b086      	sub	sp, #24
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800867c:	2100      	movs	r1, #0
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7ff fc89 	bl	8007f96 <dir_sdi>
 8008684:	4603      	mov	r3, r0
 8008686:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008688:	7dfb      	ldrb	r3, [r7, #23]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <dir_find+0x24>
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	e0a9      	b.n	80087e6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008692:	23ff      	movs	r3, #255	@ 0xff
 8008694:	753b      	strb	r3, [r7, #20]
 8008696:	7d3b      	ldrb	r3, [r7, #20]
 8008698:	757b      	strb	r3, [r7, #21]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f04f 32ff 	mov.w	r2, #4294967295
 80086a0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6938      	ldr	r0, [r7, #16]
 80086aa:	f7ff f895 	bl	80077d8 <move_window>
 80086ae:	4603      	mov	r3, r0
 80086b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f040 8090 	bne.w	80087da <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80086c2:	7dbb      	ldrb	r3, [r7, #22]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d102      	bne.n	80086ce <dir_find+0x60>
 80086c8:	2304      	movs	r3, #4
 80086ca:	75fb      	strb	r3, [r7, #23]
 80086cc:	e08a      	b.n	80087e4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	330b      	adds	r3, #11
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086da:	73fb      	strb	r3, [r7, #15]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	7bfa      	ldrb	r2, [r7, #15]
 80086e0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80086e2:	7dbb      	ldrb	r3, [r7, #22]
 80086e4:	2be5      	cmp	r3, #229	@ 0xe5
 80086e6:	d007      	beq.n	80086f8 <dir_find+0x8a>
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	f003 0308 	and.w	r3, r3, #8
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d009      	beq.n	8008706 <dir_find+0x98>
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	2b0f      	cmp	r3, #15
 80086f6:	d006      	beq.n	8008706 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80086f8:	23ff      	movs	r3, #255	@ 0xff
 80086fa:	757b      	strb	r3, [r7, #21]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008702:	631a      	str	r2, [r3, #48]	@ 0x30
 8008704:	e05e      	b.n	80087c4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	2b0f      	cmp	r3, #15
 800870a:	d136      	bne.n	800877a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008716:	2b00      	cmp	r3, #0
 8008718:	d154      	bne.n	80087c4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800871a:	7dbb      	ldrb	r3, [r7, #22]
 800871c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00d      	beq.n	8008740 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	7b5b      	ldrb	r3, [r3, #13]
 800872a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800872c:	7dbb      	ldrb	r3, [r7, #22]
 800872e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008732:	75bb      	strb	r3, [r7, #22]
 8008734:	7dbb      	ldrb	r3, [r7, #22]
 8008736:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	695a      	ldr	r2, [r3, #20]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008740:	7dba      	ldrb	r2, [r7, #22]
 8008742:	7d7b      	ldrb	r3, [r7, #21]
 8008744:	429a      	cmp	r2, r3
 8008746:	d115      	bne.n	8008774 <dir_find+0x106>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	330d      	adds	r3, #13
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	7d3a      	ldrb	r2, [r7, #20]
 8008752:	429a      	cmp	r2, r3
 8008754:	d10e      	bne.n	8008774 <dir_find+0x106>
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	691a      	ldr	r2, [r3, #16]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	4619      	mov	r1, r3
 8008760:	4610      	mov	r0, r2
 8008762:	f7ff fdfd 	bl	8008360 <cmp_lfn>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <dir_find+0x106>
 800876c:	7d7b      	ldrb	r3, [r7, #21]
 800876e:	3b01      	subs	r3, #1
 8008770:	b2db      	uxtb	r3, r3
 8008772:	e000      	b.n	8008776 <dir_find+0x108>
 8008774:	23ff      	movs	r3, #255	@ 0xff
 8008776:	757b      	strb	r3, [r7, #21]
 8008778:	e024      	b.n	80087c4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800877a:	7d7b      	ldrb	r3, [r7, #21]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d109      	bne.n	8008794 <dir_find+0x126>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	4618      	mov	r0, r3
 8008786:	f7ff ff51 	bl	800862c <sum_sfn>
 800878a:	4603      	mov	r3, r0
 800878c:	461a      	mov	r2, r3
 800878e:	7d3b      	ldrb	r3, [r7, #20]
 8008790:	4293      	cmp	r3, r2
 8008792:	d024      	beq.n	80087de <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10a      	bne.n	80087b8 <dir_find+0x14a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a18      	ldr	r0, [r3, #32]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	3324      	adds	r3, #36	@ 0x24
 80087aa:	220b      	movs	r2, #11
 80087ac:	4619      	mov	r1, r3
 80087ae:	f7fe fe21 	bl	80073f4 <mem_cmp>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d014      	beq.n	80087e2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80087b8:	23ff      	movs	r3, #255	@ 0xff
 80087ba:	757b      	strb	r3, [r7, #21]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f04f 32ff 	mov.w	r2, #4294967295
 80087c2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80087c4:	2100      	movs	r1, #0
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff fc6e 	bl	80080a8 <dir_next>
 80087cc:	4603      	mov	r3, r0
 80087ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f43f af65 	beq.w	80086a2 <dir_find+0x34>
 80087d8:	e004      	b.n	80087e4 <dir_find+0x176>
		if (res != FR_OK) break;
 80087da:	bf00      	nop
 80087dc:	e002      	b.n	80087e4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80087de:	bf00      	nop
 80087e0:	e000      	b.n	80087e4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80087e2:	bf00      	nop

	return res;
 80087e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08c      	sub	sp, #48	@ 0x30
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008804:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <dir_register+0x20>
 800880c:	2306      	movs	r3, #6
 800880e:	e0e0      	b.n	80089d2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008810:	2300      	movs	r3, #0
 8008812:	627b      	str	r3, [r7, #36]	@ 0x24
 8008814:	e002      	b.n	800881c <dir_register+0x2c>
 8008816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008818:	3301      	adds	r3, #1
 800881a:	627b      	str	r3, [r7, #36]	@ 0x24
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	691a      	ldr	r2, [r3, #16]
 8008820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	4413      	add	r3, r2
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1f4      	bne.n	8008816 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8008832:	f107 030c 	add.w	r3, r7, #12
 8008836:	220c      	movs	r2, #12
 8008838:	4618      	mov	r0, r3
 800883a:	f7fe fd9f 	bl	800737c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	f003 0301 	and.w	r3, r3, #1
 8008844:	2b00      	cmp	r3, #0
 8008846:	d032      	beq.n	80088ae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2240      	movs	r2, #64	@ 0x40
 800884c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008850:	2301      	movs	r3, #1
 8008852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008854:	e016      	b.n	8008884 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	691a      	ldr	r2, [r3, #16]
 8008860:	f107 010c 	add.w	r1, r7, #12
 8008864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008866:	f7ff fe53 	bl	8008510 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7ff feff 	bl	800866e <dir_find>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008876:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800887a:	2b00      	cmp	r3, #0
 800887c:	d106      	bne.n	800888c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800887e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008880:	3301      	adds	r3, #1
 8008882:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008886:	2b63      	cmp	r3, #99	@ 0x63
 8008888:	d9e5      	bls.n	8008856 <dir_register+0x66>
 800888a:	e000      	b.n	800888e <dir_register+0x9e>
			if (res != FR_OK) break;
 800888c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800888e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008890:	2b64      	cmp	r3, #100	@ 0x64
 8008892:	d101      	bne.n	8008898 <dir_register+0xa8>
 8008894:	2307      	movs	r3, #7
 8008896:	e09c      	b.n	80089d2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008898:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800889c:	2b04      	cmp	r3, #4
 800889e:	d002      	beq.n	80088a6 <dir_register+0xb6>
 80088a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088a4:	e095      	b.n	80089d2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80088a6:	7dfa      	ldrb	r2, [r7, #23]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80088ae:	7dfb      	ldrb	r3, [r7, #23]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d007      	beq.n	80088c8 <dir_register+0xd8>
 80088b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ba:	330c      	adds	r3, #12
 80088bc:	4a47      	ldr	r2, [pc, #284]	@ (80089dc <dir_register+0x1ec>)
 80088be:	fba2 2303 	umull	r2, r3, r2, r3
 80088c2:	089b      	lsrs	r3, r3, #2
 80088c4:	3301      	adds	r3, #1
 80088c6:	e000      	b.n	80088ca <dir_register+0xda>
 80088c8:	2301      	movs	r3, #1
 80088ca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80088cc:	6a39      	ldr	r1, [r7, #32]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff fcc0 	bl	8008254 <dir_alloc>
 80088d4:	4603      	mov	r3, r0
 80088d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80088da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d148      	bne.n	8008974 <dir_register+0x184>
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	623b      	str	r3, [r7, #32]
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d042      	beq.n	8008974 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	695a      	ldr	r2, [r3, #20]
 80088f2:	6a3b      	ldr	r3, [r7, #32]
 80088f4:	015b      	lsls	r3, r3, #5
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7ff fb4b 	bl	8007f96 <dir_sdi>
 8008900:	4603      	mov	r3, r0
 8008902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800890a:	2b00      	cmp	r3, #0
 800890c:	d132      	bne.n	8008974 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3324      	adds	r3, #36	@ 0x24
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fe8a 	bl	800862c <sum_sfn>
 8008918:	4603      	mov	r3, r0
 800891a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	4619      	mov	r1, r3
 8008922:	69f8      	ldr	r0, [r7, #28]
 8008924:	f7fe ff58 	bl	80077d8 <move_window>
 8008928:	4603      	mov	r3, r0
 800892a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800892e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008932:	2b00      	cmp	r3, #0
 8008934:	d11d      	bne.n	8008972 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	6918      	ldr	r0, [r3, #16]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a19      	ldr	r1, [r3, #32]
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	b2da      	uxtb	r2, r3
 8008942:	7efb      	ldrb	r3, [r7, #27]
 8008944:	f7ff fd7c 	bl	8008440 <put_lfn>
				fs->wflag = 1;
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	2201      	movs	r2, #1
 800894c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800894e:	2100      	movs	r1, #0
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff fba9 	bl	80080a8 <dir_next>
 8008956:	4603      	mov	r3, r0
 8008958:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800895c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008960:	2b00      	cmp	r3, #0
 8008962:	d107      	bne.n	8008974 <dir_register+0x184>
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	3b01      	subs	r3, #1
 8008968:	623b      	str	r3, [r7, #32]
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1d5      	bne.n	800891c <dir_register+0x12c>
 8008970:	e000      	b.n	8008974 <dir_register+0x184>
				if (res != FR_OK) break;
 8008972:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008974:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008978:	2b00      	cmp	r3, #0
 800897a:	d128      	bne.n	80089ce <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	69db      	ldr	r3, [r3, #28]
 8008980:	4619      	mov	r1, r3
 8008982:	69f8      	ldr	r0, [r7, #28]
 8008984:	f7fe ff28 	bl	80077d8 <move_window>
 8008988:	4603      	mov	r3, r0
 800898a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800898e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008992:	2b00      	cmp	r3, #0
 8008994:	d11b      	bne.n	80089ce <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	2220      	movs	r2, #32
 800899c:	2100      	movs	r1, #0
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fd0d 	bl	80073be <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a18      	ldr	r0, [r3, #32]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3324      	adds	r3, #36	@ 0x24
 80089ac:	220b      	movs	r2, #11
 80089ae:	4619      	mov	r1, r3
 80089b0:	f7fe fce4 	bl	800737c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	330c      	adds	r3, #12
 80089c0:	f002 0218 	and.w	r2, r2, #24
 80089c4:	b2d2      	uxtb	r2, r2
 80089c6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	2201      	movs	r2, #1
 80089cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80089ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3730      	adds	r7, #48	@ 0x30
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	4ec4ec4f 	.word	0x4ec4ec4f

080089e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08a      	sub	sp, #40	@ 0x28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	613b      	str	r3, [r7, #16]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	60fb      	str	r3, [r7, #12]
 80089f8:	2300      	movs	r3, #0
 80089fa:	617b      	str	r3, [r7, #20]
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	61ba      	str	r2, [r7, #24]
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	4413      	add	r3, r2
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008a0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a10:	2b1f      	cmp	r3, #31
 8008a12:	d940      	bls.n	8008a96 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008a14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a16:	2b2f      	cmp	r3, #47	@ 0x2f
 8008a18:	d006      	beq.n	8008a28 <create_name+0x48>
 8008a1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a1c:	2b5c      	cmp	r3, #92	@ 0x5c
 8008a1e:	d110      	bne.n	8008a42 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008a20:	e002      	b.n	8008a28 <create_name+0x48>
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	3301      	adds	r3, #1
 8008a26:	61bb      	str	r3, [r7, #24]
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b2f      	cmp	r3, #47	@ 0x2f
 8008a32:	d0f6      	beq.n	8008a22 <create_name+0x42>
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	4413      	add	r3, r2
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8008a3e:	d0f0      	beq.n	8008a22 <create_name+0x42>
			break;
 8008a40:	e02a      	b.n	8008a98 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2bfe      	cmp	r3, #254	@ 0xfe
 8008a46:	d901      	bls.n	8008a4c <create_name+0x6c>
 8008a48:	2306      	movs	r3, #6
 8008a4a:	e17d      	b.n	8008d48 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008a4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008a52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a54:	2101      	movs	r1, #1
 8008a56:	4618      	mov	r0, r3
 8008a58:	f001 fcac 	bl	800a3b4 <ff_convert>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008a60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <create_name+0x8a>
 8008a66:	2306      	movs	r3, #6
 8008a68:	e16e      	b.n	8008d48 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008a6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a6e:	d809      	bhi.n	8008a84 <create_name+0xa4>
 8008a70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a72:	4619      	mov	r1, r3
 8008a74:	488d      	ldr	r0, [pc, #564]	@ (8008cac <create_name+0x2cc>)
 8008a76:	f7fe fce4 	bl	8007442 <chk_chr>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <create_name+0xa4>
 8008a80:	2306      	movs	r3, #6
 8008a82:	e161      	b.n	8008d48 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	617a      	str	r2, [r7, #20]
 8008a8a:	005b      	lsls	r3, r3, #1
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4413      	add	r3, r2
 8008a90:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008a92:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008a94:	e7b4      	b.n	8008a00 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008a96:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	441a      	add	r2, r3
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008aa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008aa4:	2b1f      	cmp	r3, #31
 8008aa6:	d801      	bhi.n	8008aac <create_name+0xcc>
 8008aa8:	2304      	movs	r3, #4
 8008aaa:	e000      	b.n	8008aae <create_name+0xce>
 8008aac:	2300      	movs	r3, #0
 8008aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008ab2:	e011      	b.n	8008ad8 <create_name+0xf8>
		w = lfn[di - 1];
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008aba:	4413      	add	r3, r2
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008ac6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ac8:	2b20      	cmp	r3, #32
 8008aca:	d002      	beq.n	8008ad2 <create_name+0xf2>
 8008acc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ace:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ad0:	d106      	bne.n	8008ae0 <create_name+0x100>
		di--;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1ea      	bne.n	8008ab4 <create_name+0xd4>
 8008ade:	e000      	b.n	8008ae2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008ae0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	4413      	add	r3, r2
 8008aea:	2200      	movs	r2, #0
 8008aec:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <create_name+0x118>
 8008af4:	2306      	movs	r3, #6
 8008af6:	e127      	b.n	8008d48 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	3324      	adds	r3, #36	@ 0x24
 8008afc:	220b      	movs	r2, #11
 8008afe:	2120      	movs	r1, #32
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fe fc5c 	bl	80073be <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008b06:	2300      	movs	r3, #0
 8008b08:	61bb      	str	r3, [r7, #24]
 8008b0a:	e002      	b.n	8008b12 <create_name+0x132>
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	61bb      	str	r3, [r7, #24]
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	4413      	add	r3, r2
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	2b20      	cmp	r3, #32
 8008b1e:	d0f5      	beq.n	8008b0c <create_name+0x12c>
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	005b      	lsls	r3, r3, #1
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	4413      	add	r3, r2
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b2c:	d0ee      	beq.n	8008b0c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d009      	beq.n	8008b48 <create_name+0x168>
 8008b34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b38:	f043 0303 	orr.w	r3, r3, #3
 8008b3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008b40:	e002      	b.n	8008b48 <create_name+0x168>
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	617b      	str	r3, [r7, #20]
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d009      	beq.n	8008b62 <create_name+0x182>
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008b54:	4413      	add	r3, r2
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b60:	d1ef      	bne.n	8008b42 <create_name+0x162>

	i = b = 0; ni = 8;
 8008b62:	2300      	movs	r3, #0
 8008b64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008b68:	2300      	movs	r3, #0
 8008b6a:	623b      	str	r3, [r7, #32]
 8008b6c:	2308      	movs	r3, #8
 8008b6e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	61ba      	str	r2, [r7, #24]
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008b80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 8090 	beq.w	8008ca8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008b88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b8a:	2b20      	cmp	r3, #32
 8008b8c:	d006      	beq.n	8008b9c <create_name+0x1bc>
 8008b8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b90:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b92:	d10a      	bne.n	8008baa <create_name+0x1ca>
 8008b94:	69ba      	ldr	r2, [r7, #24]
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d006      	beq.n	8008baa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ba0:	f043 0303 	orr.w	r3, r3, #3
 8008ba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008ba8:	e07d      	b.n	8008ca6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008baa:	6a3a      	ldr	r2, [r7, #32]
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d203      	bcs.n	8008bba <create_name+0x1da>
 8008bb2:	69ba      	ldr	r2, [r7, #24]
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d123      	bne.n	8008c02 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	2b0b      	cmp	r3, #11
 8008bbe:	d106      	bne.n	8008bce <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bc4:	f043 0303 	orr.w	r3, r3, #3
 8008bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008bcc:	e075      	b.n	8008cba <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d005      	beq.n	8008be2 <create_name+0x202>
 8008bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bda:	f043 0303 	orr.w	r3, r3, #3
 8008bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d866      	bhi.n	8008cb8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	61bb      	str	r3, [r7, #24]
 8008bee:	2308      	movs	r3, #8
 8008bf0:	623b      	str	r3, [r7, #32]
 8008bf2:	230b      	movs	r3, #11
 8008bf4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008bf6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c00:	e051      	b.n	8008ca6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008c02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c04:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c06:	d914      	bls.n	8008c32 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008c08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f001 fbd1 	bl	800a3b4 <ff_convert>
 8008c12:	4603      	mov	r3, r0
 8008c14:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008c16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d004      	beq.n	8008c26 <create_name+0x246>
 8008c1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c1e:	3b80      	subs	r3, #128	@ 0x80
 8008c20:	4a23      	ldr	r2, [pc, #140]	@ (8008cb0 <create_name+0x2d0>)
 8008c22:	5cd3      	ldrb	r3, [r2, r3]
 8008c24:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008c26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c2a:	f043 0302 	orr.w	r3, r3, #2
 8008c2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008c32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d007      	beq.n	8008c48 <create_name+0x268>
 8008c38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	481d      	ldr	r0, [pc, #116]	@ (8008cb4 <create_name+0x2d4>)
 8008c3e:	f7fe fc00 	bl	8007442 <chk_chr>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d008      	beq.n	8008c5a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008c48:	235f      	movs	r3, #95	@ 0x5f
 8008c4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c50:	f043 0303 	orr.w	r3, r3, #3
 8008c54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c58:	e01b      	b.n	8008c92 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008c5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c5c:	2b40      	cmp	r3, #64	@ 0x40
 8008c5e:	d909      	bls.n	8008c74 <create_name+0x294>
 8008c60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c62:	2b5a      	cmp	r3, #90	@ 0x5a
 8008c64:	d806      	bhi.n	8008c74 <create_name+0x294>
					b |= 2;
 8008c66:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c6a:	f043 0302 	orr.w	r3, r3, #2
 8008c6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c72:	e00e      	b.n	8008c92 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008c74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c76:	2b60      	cmp	r3, #96	@ 0x60
 8008c78:	d90b      	bls.n	8008c92 <create_name+0x2b2>
 8008c7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c7c:	2b7a      	cmp	r3, #122	@ 0x7a
 8008c7e:	d808      	bhi.n	8008c92 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008c80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c8e:	3b20      	subs	r3, #32
 8008c90:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	1c5a      	adds	r2, r3, #1
 8008c96:	623a      	str	r2, [r7, #32]
 8008c98:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008c9a:	b2d1      	uxtb	r1, r2
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	460a      	mov	r2, r1
 8008ca2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008ca6:	e763      	b.n	8008b70 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008ca8:	bf00      	nop
 8008caa:	e006      	b.n	8008cba <create_name+0x2da>
 8008cac:	0800ef18 	.word	0x0800ef18
 8008cb0:	0800f75c 	.word	0x0800f75c
 8008cb4:	0800ef24 	.word	0x0800ef24
			if (si > di) break;			/* No extension */
 8008cb8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008cc0:	2be5      	cmp	r3, #229	@ 0xe5
 8008cc2:	d103      	bne.n	8008ccc <create_name+0x2ec>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2205      	movs	r2, #5
 8008cc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	2b08      	cmp	r3, #8
 8008cd0:	d104      	bne.n	8008cdc <create_name+0x2fc>
 8008cd2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008cdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ce0:	f003 030c 	and.w	r3, r3, #12
 8008ce4:	2b0c      	cmp	r3, #12
 8008ce6:	d005      	beq.n	8008cf4 <create_name+0x314>
 8008ce8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cec:	f003 0303 	and.w	r3, r3, #3
 8008cf0:	2b03      	cmp	r3, #3
 8008cf2:	d105      	bne.n	8008d00 <create_name+0x320>
 8008cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cf8:	f043 0302 	orr.w	r3, r3, #2
 8008cfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008d00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d04:	f003 0302 	and.w	r3, r3, #2
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d117      	bne.n	8008d3c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008d0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d10:	f003 0303 	and.w	r3, r3, #3
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d105      	bne.n	8008d24 <create_name+0x344>
 8008d18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d1c:	f043 0310 	orr.w	r3, r3, #16
 8008d20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008d24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d28:	f003 030c 	and.w	r3, r3, #12
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d105      	bne.n	8008d3c <create_name+0x35c>
 8008d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d34:	f043 0308 	orr.w	r3, r3, #8
 8008d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008d42:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008d46:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3728      	adds	r7, #40	@ 0x28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008d64:	e002      	b.n	8008d6c <follow_path+0x1c>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d72:	d0f8      	beq.n	8008d66 <follow_path+0x16>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d7a:	d0f4      	beq.n	8008d66 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b1f      	cmp	r3, #31
 8008d88:	d80a      	bhi.n	8008da0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2280      	movs	r2, #128	@ 0x80
 8008d8e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008d92:	2100      	movs	r1, #0
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff f8fe 	bl	8007f96 <dir_sdi>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	75fb      	strb	r3, [r7, #23]
 8008d9e:	e048      	b.n	8008e32 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008da0:	463b      	mov	r3, r7
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7ff fe1b 	bl	80089e0 <create_name>
 8008daa:	4603      	mov	r3, r0
 8008dac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d139      	bne.n	8008e28 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fc5a 	bl	800866e <dir_find>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008dc4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00a      	beq.n	8008de2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d12c      	bne.n	8008e2c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008dd2:	7afb      	ldrb	r3, [r7, #11]
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d127      	bne.n	8008e2c <follow_path+0xdc>
 8008ddc:	2305      	movs	r3, #5
 8008dde:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008de0:	e024      	b.n	8008e2c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008de2:	7afb      	ldrb	r3, [r7, #11]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d121      	bne.n	8008e30 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	799b      	ldrb	r3, [r3, #6]
 8008df0:	f003 0310 	and.w	r3, r3, #16
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008df8:	2305      	movs	r3, #5
 8008dfa:	75fb      	strb	r3, [r7, #23]
 8008dfc:	e019      	b.n	8008e32 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	8992      	ldrh	r2, [r2, #12]
 8008e0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e10:	fb00 f202 	mul.w	r2, r0, r2
 8008e14:	1a9b      	subs	r3, r3, r2
 8008e16:	440b      	add	r3, r1
 8008e18:	4619      	mov	r1, r3
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f7ff fa61 	bl	80082e2 <ld_clust>
 8008e20:	4602      	mov	r2, r0
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e26:	e7bb      	b.n	8008da0 <follow_path+0x50>
			if (res != FR_OK) break;
 8008e28:	bf00      	nop
 8008e2a:	e002      	b.n	8008e32 <follow_path+0xe2>
				break;
 8008e2c:	bf00      	nop
 8008e2e:	e000      	b.n	8008e32 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e30:	bf00      	nop
			}
		}
	}

	return res;
 8008e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3718      	adds	r7, #24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008e44:	f04f 33ff 	mov.w	r3, #4294967295
 8008e48:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d031      	beq.n	8008eb6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	617b      	str	r3, [r7, #20]
 8008e58:	e002      	b.n	8008e60 <get_ldnumber+0x24>
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b1f      	cmp	r3, #31
 8008e66:	d903      	bls.n	8008e70 <get_ldnumber+0x34>
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e6e:	d1f4      	bne.n	8008e5a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e76:	d11c      	bne.n	8008eb2 <get_ldnumber+0x76>
			tp = *path;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	60fa      	str	r2, [r7, #12]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	3b30      	subs	r3, #48	@ 0x30
 8008e88:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2b09      	cmp	r3, #9
 8008e8e:	d80e      	bhi.n	8008eae <get_ldnumber+0x72>
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d10a      	bne.n	8008eae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d107      	bne.n	8008eae <get_ldnumber+0x72>
					vol = (int)i;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	e002      	b.n	8008eb8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008eb6:	693b      	ldr	r3, [r7, #16]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	70da      	strb	r2, [r3, #3]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eda:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7fe fc7a 	bl	80077d8 <move_window>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <check_fs+0x2a>
 8008eea:	2304      	movs	r3, #4
 8008eec:	e038      	b.n	8008f60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3338      	adds	r3, #56	@ 0x38
 8008ef2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe f9be 	bl	8007278 <ld_word>
 8008efc:	4603      	mov	r3, r0
 8008efe:	461a      	mov	r2, r3
 8008f00:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d001      	beq.n	8008f0c <check_fs+0x48>
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e029      	b.n	8008f60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008f12:	2be9      	cmp	r3, #233	@ 0xe9
 8008f14:	d009      	beq.n	8008f2a <check_fs+0x66>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008f1c:	2beb      	cmp	r3, #235	@ 0xeb
 8008f1e:	d11e      	bne.n	8008f5e <check_fs+0x9a>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008f26:	2b90      	cmp	r3, #144	@ 0x90
 8008f28:	d119      	bne.n	8008f5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	3338      	adds	r3, #56	@ 0x38
 8008f2e:	3336      	adds	r3, #54	@ 0x36
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe f9b9 	bl	80072a8 <ld_dword>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008f68 <check_fs+0xa4>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d101      	bne.n	8008f46 <check_fs+0x82>
 8008f42:	2300      	movs	r3, #0
 8008f44:	e00c      	b.n	8008f60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	3338      	adds	r3, #56	@ 0x38
 8008f4a:	3352      	adds	r3, #82	@ 0x52
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fe f9ab 	bl	80072a8 <ld_dword>
 8008f52:	4603      	mov	r3, r0
 8008f54:	4a05      	ldr	r2, [pc, #20]	@ (8008f6c <check_fs+0xa8>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d101      	bne.n	8008f5e <check_fs+0x9a>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	e000      	b.n	8008f60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008f5e:	2302      	movs	r3, #2
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	00544146 	.word	0x00544146
 8008f6c:	33544146 	.word	0x33544146

08008f70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b096      	sub	sp, #88	@ 0x58
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2200      	movs	r2, #0
 8008f82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f7ff ff59 	bl	8008e3c <get_ldnumber>
 8008f8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	da01      	bge.n	8008f96 <find_volume+0x26>
 8008f92:	230b      	movs	r3, #11
 8008f94:	e265      	b.n	8009462 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008f96:	4a9f      	ldr	r2, [pc, #636]	@ (8009214 <find_volume+0x2a4>)
 8008f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <find_volume+0x3a>
 8008fa6:	230c      	movs	r3, #12
 8008fa8:	e25b      	b.n	8009462 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008fb0:	79fb      	ldrb	r3, [r7, #7]
 8008fb2:	f023 0301 	bic.w	r3, r3, #1
 8008fb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d01a      	beq.n	8008ff6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fe f8b9 	bl	800713c <disk_status>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008fd0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10c      	bne.n	8008ff6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d007      	beq.n	8008ff2 <find_volume+0x82>
 8008fe2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008fe6:	f003 0304 	and.w	r3, r3, #4
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008fee:	230a      	movs	r3, #10
 8008ff0:	e237      	b.n	8009462 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	e235      	b.n	8009462 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009002:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009006:	785b      	ldrb	r3, [r3, #1]
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe f8b1 	bl	8007170 <disk_initialize>
 800900e:	4603      	mov	r3, r0
 8009010:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009014:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009020:	2303      	movs	r3, #3
 8009022:	e21e      	b.n	8009462 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d007      	beq.n	800903a <find_volume+0xca>
 800902a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800902e:	f003 0304 	and.w	r3, r3, #4
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009036:	230a      	movs	r3, #10
 8009038:	e213      	b.n	8009462 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800903a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903c:	7858      	ldrb	r0, [r3, #1]
 800903e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009040:	330c      	adds	r3, #12
 8009042:	461a      	mov	r2, r3
 8009044:	2102      	movs	r1, #2
 8009046:	f7fe f8f9 	bl	800723c <disk_ioctl>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <find_volume+0xe4>
 8009050:	2301      	movs	r3, #1
 8009052:	e206      	b.n	8009462 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009056:	899b      	ldrh	r3, [r3, #12]
 8009058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800905c:	d80d      	bhi.n	800907a <find_volume+0x10a>
 800905e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009060:	899b      	ldrh	r3, [r3, #12]
 8009062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009066:	d308      	bcc.n	800907a <find_volume+0x10a>
 8009068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906a:	899b      	ldrh	r3, [r3, #12]
 800906c:	461a      	mov	r2, r3
 800906e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009070:	899b      	ldrh	r3, [r3, #12]
 8009072:	3b01      	subs	r3, #1
 8009074:	4013      	ands	r3, r2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <find_volume+0x10e>
 800907a:	2301      	movs	r3, #1
 800907c:	e1f1      	b.n	8009462 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009082:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009084:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009086:	f7ff ff1d 	bl	8008ec4 <check_fs>
 800908a:	4603      	mov	r3, r0
 800908c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009090:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009094:	2b02      	cmp	r3, #2
 8009096:	d149      	bne.n	800912c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009098:	2300      	movs	r3, #0
 800909a:	643b      	str	r3, [r7, #64]	@ 0x40
 800909c:	e01e      	b.n	80090dc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800909e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80090a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80090ac:	4413      	add	r3, r2
 80090ae:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80090b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b2:	3304      	adds	r3, #4
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d006      	beq.n	80090c8 <find_volume+0x158>
 80090ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090bc:	3308      	adds	r3, #8
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe f8f2 	bl	80072a8 <ld_dword>
 80090c4:	4602      	mov	r2, r0
 80090c6:	e000      	b.n	80090ca <find_volume+0x15a>
 80090c8:	2200      	movs	r2, #0
 80090ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	3358      	adds	r3, #88	@ 0x58
 80090d0:	443b      	add	r3, r7
 80090d2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80090d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090d8:	3301      	adds	r3, #1
 80090da:	643b      	str	r3, [r7, #64]	@ 0x40
 80090dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d9dd      	bls.n	800909e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80090e2:	2300      	movs	r3, #0
 80090e4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80090e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <find_volume+0x182>
 80090ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090ee:	3b01      	subs	r3, #1
 80090f0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80090f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	3358      	adds	r3, #88	@ 0x58
 80090f8:	443b      	add	r3, r7
 80090fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80090fe:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009102:	2b00      	cmp	r3, #0
 8009104:	d005      	beq.n	8009112 <find_volume+0x1a2>
 8009106:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009108:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800910a:	f7ff fedb 	bl	8008ec4 <check_fs>
 800910e:	4603      	mov	r3, r0
 8009110:	e000      	b.n	8009114 <find_volume+0x1a4>
 8009112:	2303      	movs	r3, #3
 8009114:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009118:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800911c:	2b01      	cmp	r3, #1
 800911e:	d905      	bls.n	800912c <find_volume+0x1bc>
 8009120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009122:	3301      	adds	r3, #1
 8009124:	643b      	str	r3, [r7, #64]	@ 0x40
 8009126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009128:	2b03      	cmp	r3, #3
 800912a:	d9e2      	bls.n	80090f2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800912c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009130:	2b04      	cmp	r3, #4
 8009132:	d101      	bne.n	8009138 <find_volume+0x1c8>
 8009134:	2301      	movs	r3, #1
 8009136:	e194      	b.n	8009462 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009138:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800913c:	2b01      	cmp	r3, #1
 800913e:	d901      	bls.n	8009144 <find_volume+0x1d4>
 8009140:	230d      	movs	r3, #13
 8009142:	e18e      	b.n	8009462 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009146:	3338      	adds	r3, #56	@ 0x38
 8009148:	330b      	adds	r3, #11
 800914a:	4618      	mov	r0, r3
 800914c:	f7fe f894 	bl	8007278 <ld_word>
 8009150:	4603      	mov	r3, r0
 8009152:	461a      	mov	r2, r3
 8009154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009156:	899b      	ldrh	r3, [r3, #12]
 8009158:	429a      	cmp	r2, r3
 800915a:	d001      	beq.n	8009160 <find_volume+0x1f0>
 800915c:	230d      	movs	r3, #13
 800915e:	e180      	b.n	8009462 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009162:	3338      	adds	r3, #56	@ 0x38
 8009164:	3316      	adds	r3, #22
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe f886 	bl	8007278 <ld_word>
 800916c:	4603      	mov	r3, r0
 800916e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <find_volume+0x214>
 8009176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009178:	3338      	adds	r3, #56	@ 0x38
 800917a:	3324      	adds	r3, #36	@ 0x24
 800917c:	4618      	mov	r0, r3
 800917e:	f7fe f893 	bl	80072a8 <ld_dword>
 8009182:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009186:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009188:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800918a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8009190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009192:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009196:	789b      	ldrb	r3, [r3, #2]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d005      	beq.n	80091a8 <find_volume+0x238>
 800919c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919e:	789b      	ldrb	r3, [r3, #2]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d001      	beq.n	80091a8 <find_volume+0x238>
 80091a4:	230d      	movs	r3, #13
 80091a6:	e15c      	b.n	8009462 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80091a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091aa:	789b      	ldrb	r3, [r3, #2]
 80091ac:	461a      	mov	r2, r3
 80091ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091b0:	fb02 f303 	mul.w	r3, r2, r3
 80091b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80091b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091bc:	461a      	mov	r2, r3
 80091be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80091c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c4:	895b      	ldrh	r3, [r3, #10]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d008      	beq.n	80091dc <find_volume+0x26c>
 80091ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091cc:	895b      	ldrh	r3, [r3, #10]
 80091ce:	461a      	mov	r2, r3
 80091d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d2:	895b      	ldrh	r3, [r3, #10]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	4013      	ands	r3, r2
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <find_volume+0x270>
 80091dc:	230d      	movs	r3, #13
 80091de:	e140      	b.n	8009462 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	3338      	adds	r3, #56	@ 0x38
 80091e4:	3311      	adds	r3, #17
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe f846 	bl	8007278 <ld_word>
 80091ec:	4603      	mov	r3, r0
 80091ee:	461a      	mov	r2, r3
 80091f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80091f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f6:	891b      	ldrh	r3, [r3, #8]
 80091f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091fa:	8992      	ldrh	r2, [r2, #12]
 80091fc:	0952      	lsrs	r2, r2, #5
 80091fe:	b292      	uxth	r2, r2
 8009200:	fbb3 f1f2 	udiv	r1, r3, r2
 8009204:	fb01 f202 	mul.w	r2, r1, r2
 8009208:	1a9b      	subs	r3, r3, r2
 800920a:	b29b      	uxth	r3, r3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <find_volume+0x2a8>
 8009210:	230d      	movs	r3, #13
 8009212:	e126      	b.n	8009462 <find_volume+0x4f2>
 8009214:	200028dc 	.word	0x200028dc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921a:	3338      	adds	r3, #56	@ 0x38
 800921c:	3313      	adds	r3, #19
 800921e:	4618      	mov	r0, r3
 8009220:	f7fe f82a 	bl	8007278 <ld_word>
 8009224:	4603      	mov	r3, r0
 8009226:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800922a:	2b00      	cmp	r3, #0
 800922c:	d106      	bne.n	800923c <find_volume+0x2cc>
 800922e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009230:	3338      	adds	r3, #56	@ 0x38
 8009232:	3320      	adds	r3, #32
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe f837 	bl	80072a8 <ld_dword>
 800923a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	3338      	adds	r3, #56	@ 0x38
 8009240:	330e      	adds	r3, #14
 8009242:	4618      	mov	r0, r3
 8009244:	f7fe f818 	bl	8007278 <ld_word>
 8009248:	4603      	mov	r3, r0
 800924a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800924c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <find_volume+0x2e6>
 8009252:	230d      	movs	r3, #13
 8009254:	e105      	b.n	8009462 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009256:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800925a:	4413      	add	r3, r2
 800925c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800925e:	8911      	ldrh	r1, [r2, #8]
 8009260:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009262:	8992      	ldrh	r2, [r2, #12]
 8009264:	0952      	lsrs	r2, r2, #5
 8009266:	b292      	uxth	r2, r2
 8009268:	fbb1 f2f2 	udiv	r2, r1, r2
 800926c:	b292      	uxth	r2, r2
 800926e:	4413      	add	r3, r2
 8009270:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009272:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009276:	429a      	cmp	r2, r3
 8009278:	d201      	bcs.n	800927e <find_volume+0x30e>
 800927a:	230d      	movs	r3, #13
 800927c:	e0f1      	b.n	8009462 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800927e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009286:	8952      	ldrh	r2, [r2, #10]
 8009288:	fbb3 f3f2 	udiv	r3, r3, r2
 800928c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800928e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <find_volume+0x328>
 8009294:	230d      	movs	r3, #13
 8009296:	e0e4      	b.n	8009462 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009298:	2303      	movs	r3, #3
 800929a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800929e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d802      	bhi.n	80092ae <find_volume+0x33e>
 80092a8:	2302      	movs	r3, #2
 80092aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80092ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d802      	bhi.n	80092be <find_volume+0x34e>
 80092b8:	2301      	movs	r3, #1
 80092ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80092be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c0:	1c9a      	adds	r2, r3, #2
 80092c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80092c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80092ca:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80092cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80092ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092d0:	441a      	add	r2, r3
 80092d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80092d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80092d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092da:	441a      	add	r2, r3
 80092dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092de:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80092e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80092e4:	2b03      	cmp	r3, #3
 80092e6:	d11e      	bne.n	8009326 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80092e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ea:	3338      	adds	r3, #56	@ 0x38
 80092ec:	332a      	adds	r3, #42	@ 0x2a
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7fd ffc2 	bl	8007278 <ld_word>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <find_volume+0x38e>
 80092fa:	230d      	movs	r3, #13
 80092fc:	e0b1      	b.n	8009462 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80092fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009300:	891b      	ldrh	r3, [r3, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <find_volume+0x39a>
 8009306:	230d      	movs	r3, #13
 8009308:	e0ab      	b.n	8009462 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800930a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930c:	3338      	adds	r3, #56	@ 0x38
 800930e:	332c      	adds	r3, #44	@ 0x2c
 8009310:	4618      	mov	r0, r3
 8009312:	f7fd ffc9 	bl	80072a8 <ld_dword>
 8009316:	4602      	mov	r2, r0
 8009318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800931c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	647b      	str	r3, [r7, #68]	@ 0x44
 8009324:	e01f      	b.n	8009366 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009328:	891b      	ldrh	r3, [r3, #8]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <find_volume+0x3c2>
 800932e:	230d      	movs	r3, #13
 8009330:	e097      	b.n	8009462 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009334:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009338:	441a      	add	r2, r3
 800933a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800933e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009342:	2b02      	cmp	r3, #2
 8009344:	d103      	bne.n	800934e <find_volume+0x3de>
 8009346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009348:	69db      	ldr	r3, [r3, #28]
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	e00a      	b.n	8009364 <find_volume+0x3f4>
 800934e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009350:	69da      	ldr	r2, [r3, #28]
 8009352:	4613      	mov	r3, r2
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	4413      	add	r3, r2
 8009358:	085a      	lsrs	r2, r3, #1
 800935a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009364:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009368:	6a1a      	ldr	r2, [r3, #32]
 800936a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936c:	899b      	ldrh	r3, [r3, #12]
 800936e:	4619      	mov	r1, r3
 8009370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009372:	440b      	add	r3, r1
 8009374:	3b01      	subs	r3, #1
 8009376:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009378:	8989      	ldrh	r1, [r1, #12]
 800937a:	fbb3 f3f1 	udiv	r3, r3, r1
 800937e:	429a      	cmp	r2, r3
 8009380:	d201      	bcs.n	8009386 <find_volume+0x416>
 8009382:	230d      	movs	r3, #13
 8009384:	e06d      	b.n	8009462 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009388:	f04f 32ff 	mov.w	r2, #4294967295
 800938c:	619a      	str	r2, [r3, #24]
 800938e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009390:	699a      	ldr	r2, [r3, #24]
 8009392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009394:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009398:	2280      	movs	r2, #128	@ 0x80
 800939a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800939c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d149      	bne.n	8009438 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80093a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a6:	3338      	adds	r3, #56	@ 0x38
 80093a8:	3330      	adds	r3, #48	@ 0x30
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fd ff64 	bl	8007278 <ld_word>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d140      	bne.n	8009438 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80093b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093b8:	3301      	adds	r3, #1
 80093ba:	4619      	mov	r1, r3
 80093bc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80093be:	f7fe fa0b 	bl	80077d8 <move_window>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d137      	bne.n	8009438 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80093c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ca:	2200      	movs	r2, #0
 80093cc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80093ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d0:	3338      	adds	r3, #56	@ 0x38
 80093d2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fd ff4e 	bl	8007278 <ld_word>
 80093dc:	4603      	mov	r3, r0
 80093de:	461a      	mov	r2, r3
 80093e0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d127      	bne.n	8009438 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80093e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ea:	3338      	adds	r3, #56	@ 0x38
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fd ff5b 	bl	80072a8 <ld_dword>
 80093f2:	4603      	mov	r3, r0
 80093f4:	4a1d      	ldr	r2, [pc, #116]	@ (800946c <find_volume+0x4fc>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d11e      	bne.n	8009438 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80093fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fc:	3338      	adds	r3, #56	@ 0x38
 80093fe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009402:	4618      	mov	r0, r3
 8009404:	f7fd ff50 	bl	80072a8 <ld_dword>
 8009408:	4603      	mov	r3, r0
 800940a:	4a19      	ldr	r2, [pc, #100]	@ (8009470 <find_volume+0x500>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d113      	bne.n	8009438 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009412:	3338      	adds	r3, #56	@ 0x38
 8009414:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009418:	4618      	mov	r0, r3
 800941a:	f7fd ff45 	bl	80072a8 <ld_dword>
 800941e:	4602      	mov	r2, r0
 8009420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009422:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009426:	3338      	adds	r3, #56	@ 0x38
 8009428:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800942c:	4618      	mov	r0, r3
 800942e:	f7fd ff3b 	bl	80072a8 <ld_dword>
 8009432:	4602      	mov	r2, r0
 8009434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009436:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800943e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009440:	4b0c      	ldr	r3, [pc, #48]	@ (8009474 <find_volume+0x504>)
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	3301      	adds	r3, #1
 8009446:	b29a      	uxth	r2, r3
 8009448:	4b0a      	ldr	r3, [pc, #40]	@ (8009474 <find_volume+0x504>)
 800944a:	801a      	strh	r2, [r3, #0]
 800944c:	4b09      	ldr	r3, [pc, #36]	@ (8009474 <find_volume+0x504>)
 800944e:	881a      	ldrh	r2, [r3, #0]
 8009450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009452:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009456:	4a08      	ldr	r2, [pc, #32]	@ (8009478 <find_volume+0x508>)
 8009458:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800945a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800945c:	f7fe f954 	bl	8007708 <clear_lock>
#endif
	return FR_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3758      	adds	r7, #88	@ 0x58
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	41615252 	.word	0x41615252
 8009470:	61417272 	.word	0x61417272
 8009474:	200028e0 	.word	0x200028e0
 8009478:	20002904 	.word	0x20002904

0800947c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009486:	2309      	movs	r3, #9
 8009488:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01c      	beq.n	80094ca <validate+0x4e>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d018      	beq.n	80094ca <validate+0x4e>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d013      	beq.n	80094ca <validate+0x4e>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	889a      	ldrh	r2, [r3, #4]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	88db      	ldrh	r3, [r3, #6]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d10c      	bne.n	80094ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	785b      	ldrb	r3, [r3, #1]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fd fe40 	bl	800713c <disk_status>
 80094bc:	4603      	mov	r3, r0
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <validate+0x4e>
			res = FR_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d102      	bne.n	80094d6 <validate+0x5a>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	e000      	b.n	80094d8 <validate+0x5c>
 80094d6:	2300      	movs	r3, #0
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	6013      	str	r3, [r2, #0]
	return res;
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
	...

080094e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b088      	sub	sp, #32
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	4613      	mov	r3, r2
 80094f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80094fa:	f107 0310 	add.w	r3, r7, #16
 80094fe:	4618      	mov	r0, r3
 8009500:	f7ff fc9c 	bl	8008e3c <get_ldnumber>
 8009504:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	2b00      	cmp	r3, #0
 800950a:	da01      	bge.n	8009510 <f_mount+0x28>
 800950c:	230b      	movs	r3, #11
 800950e:	e02b      	b.n	8009568 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009510:	4a17      	ldr	r2, [pc, #92]	@ (8009570 <f_mount+0x88>)
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009518:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d005      	beq.n	800952c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009520:	69b8      	ldr	r0, [r7, #24]
 8009522:	f7fe f8f1 	bl	8007708 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2200      	movs	r2, #0
 800952a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d002      	beq.n	8009538 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	490d      	ldr	r1, [pc, #52]	@ (8009570 <f_mount+0x88>)
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <f_mount+0x66>
 8009548:	79fb      	ldrb	r3, [r7, #7]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d001      	beq.n	8009552 <f_mount+0x6a>
 800954e:	2300      	movs	r3, #0
 8009550:	e00a      	b.n	8009568 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009552:	f107 010c 	add.w	r1, r7, #12
 8009556:	f107 0308 	add.w	r3, r7, #8
 800955a:	2200      	movs	r2, #0
 800955c:	4618      	mov	r0, r3
 800955e:	f7ff fd07 	bl	8008f70 <find_volume>
 8009562:	4603      	mov	r3, r0
 8009564:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009566:	7dfb      	ldrb	r3, [r7, #23]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3720      	adds	r7, #32
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	200028dc 	.word	0x200028dc

08009574 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b09a      	sub	sp, #104	@ 0x68
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	4613      	mov	r3, r2
 8009580:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <f_open+0x18>
 8009588:	2309      	movs	r3, #9
 800958a:	e1b7      	b.n	80098fc <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800958c:	79fb      	ldrb	r3, [r7, #7]
 800958e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009592:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009594:	79fa      	ldrb	r2, [r7, #7]
 8009596:	f107 0114 	add.w	r1, r7, #20
 800959a:	f107 0308 	add.w	r3, r7, #8
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff fce6 	bl	8008f70 <find_volume>
 80095a4:	4603      	mov	r3, r0
 80095a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80095aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f040 819b 	bne.w	80098ea <f_open+0x376>
		dj.obj.fs = fs;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	f107 0318 	add.w	r3, r7, #24
 80095be:	4611      	mov	r1, r2
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7ff fbc5 	bl	8008d50 <follow_path>
 80095c6:	4603      	mov	r3, r0
 80095c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80095cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d118      	bne.n	8009606 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80095d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80095d8:	b25b      	sxtb	r3, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	da03      	bge.n	80095e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80095de:	2306      	movs	r3, #6
 80095e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80095e4:	e00f      	b.n	8009606 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	bf8c      	ite	hi
 80095ec:	2301      	movhi	r3, #1
 80095ee:	2300      	movls	r3, #0
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	461a      	mov	r2, r3
 80095f4:	f107 0318 	add.w	r3, r7, #24
 80095f8:	4611      	mov	r1, r2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fd ff3c 	bl	8007478 <chk_lock>
 8009600:	4603      	mov	r3, r0
 8009602:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009606:	79fb      	ldrb	r3, [r7, #7]
 8009608:	f003 031c 	and.w	r3, r3, #28
 800960c:	2b00      	cmp	r3, #0
 800960e:	d07f      	beq.n	8009710 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009610:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009614:	2b00      	cmp	r3, #0
 8009616:	d017      	beq.n	8009648 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009618:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800961c:	2b04      	cmp	r3, #4
 800961e:	d10e      	bne.n	800963e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009620:	f7fd ff86 	bl	8007530 <enq_lock>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d006      	beq.n	8009638 <f_open+0xc4>
 800962a:	f107 0318 	add.w	r3, r7, #24
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff f8de 	bl	80087f0 <dir_register>
 8009634:	4603      	mov	r3, r0
 8009636:	e000      	b.n	800963a <f_open+0xc6>
 8009638:	2312      	movs	r3, #18
 800963a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800963e:	79fb      	ldrb	r3, [r7, #7]
 8009640:	f043 0308 	orr.w	r3, r3, #8
 8009644:	71fb      	strb	r3, [r7, #7]
 8009646:	e010      	b.n	800966a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009648:	7fbb      	ldrb	r3, [r7, #30]
 800964a:	f003 0311 	and.w	r3, r3, #17
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <f_open+0xe6>
					res = FR_DENIED;
 8009652:	2307      	movs	r3, #7
 8009654:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009658:	e007      	b.n	800966a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800965a:	79fb      	ldrb	r3, [r7, #7]
 800965c:	f003 0304 	and.w	r3, r3, #4
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <f_open+0xf6>
 8009664:	2308      	movs	r3, #8
 8009666:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800966a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800966e:	2b00      	cmp	r3, #0
 8009670:	d168      	bne.n	8009744 <f_open+0x1d0>
 8009672:	79fb      	ldrb	r3, [r7, #7]
 8009674:	f003 0308 	and.w	r3, r3, #8
 8009678:	2b00      	cmp	r3, #0
 800967a:	d063      	beq.n	8009744 <f_open+0x1d0>
				dw = GET_FATTIME();
 800967c:	f7fd fd00 	bl	8007080 <get_fattime>
 8009680:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009684:	330e      	adds	r3, #14
 8009686:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009688:	4618      	mov	r0, r3
 800968a:	f7fd fe4b 	bl	8007324 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800968e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009690:	3316      	adds	r3, #22
 8009692:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009694:	4618      	mov	r0, r3
 8009696:	f7fd fe45 	bl	8007324 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800969a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969c:	330b      	adds	r3, #11
 800969e:	2220      	movs	r2, #32
 80096a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096a6:	4611      	mov	r1, r2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fe fe1a 	bl	80082e2 <ld_clust>
 80096ae:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80096b4:	2200      	movs	r2, #0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe fe32 	bl	8008320 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80096bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096be:	331c      	adds	r3, #28
 80096c0:	2100      	movs	r1, #0
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fd fe2e 	bl	8007324 <st_dword>
					fs->wflag = 1;
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2201      	movs	r2, #1
 80096cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80096ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d037      	beq.n	8009744 <f_open+0x1d0>
						dw = fs->winsect;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096d8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80096da:	f107 0318 	add.w	r3, r7, #24
 80096de:	2200      	movs	r2, #0
 80096e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe fb22 	bl	8007d2c <remove_chain>
 80096e8:	4603      	mov	r3, r0
 80096ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80096ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d126      	bne.n	8009744 <f_open+0x1d0>
							res = move_window(fs, dw);
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe f86c 	bl	80077d8 <move_window>
 8009700:	4603      	mov	r3, r0
 8009702:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800970a:	3a01      	subs	r2, #1
 800970c:	615a      	str	r2, [r3, #20]
 800970e:	e019      	b.n	8009744 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009710:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009714:	2b00      	cmp	r3, #0
 8009716:	d115      	bne.n	8009744 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009718:	7fbb      	ldrb	r3, [r7, #30]
 800971a:	f003 0310 	and.w	r3, r3, #16
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <f_open+0x1b6>
					res = FR_NO_FILE;
 8009722:	2304      	movs	r3, #4
 8009724:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009728:	e00c      	b.n	8009744 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800972a:	79fb      	ldrb	r3, [r7, #7]
 800972c:	f003 0302 	and.w	r3, r3, #2
 8009730:	2b00      	cmp	r3, #0
 8009732:	d007      	beq.n	8009744 <f_open+0x1d0>
 8009734:	7fbb      	ldrb	r3, [r7, #30]
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <f_open+0x1d0>
						res = FR_DENIED;
 800973e:	2307      	movs	r3, #7
 8009740:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009744:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009748:	2b00      	cmp	r3, #0
 800974a:	d126      	bne.n	800979a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800974c:	79fb      	ldrb	r3, [r7, #7]
 800974e:	f003 0308 	and.w	r3, r3, #8
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009756:	79fb      	ldrb	r3, [r7, #7]
 8009758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800975c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009766:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	2b01      	cmp	r3, #1
 8009770:	bf8c      	ite	hi
 8009772:	2301      	movhi	r3, #1
 8009774:	2300      	movls	r3, #0
 8009776:	b2db      	uxtb	r3, r3
 8009778:	461a      	mov	r2, r3
 800977a:	f107 0318 	add.w	r3, r7, #24
 800977e:	4611      	mov	r1, r2
 8009780:	4618      	mov	r0, r3
 8009782:	f7fd fef7 	bl	8007574 <inc_lock>
 8009786:	4602      	mov	r2, r0
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d102      	bne.n	800979a <f_open+0x226>
 8009794:	2302      	movs	r3, #2
 8009796:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800979a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f040 80a3 	bne.w	80098ea <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097a8:	4611      	mov	r1, r2
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fe fd99 	bl	80082e2 <ld_clust>
 80097b0:	4602      	mov	r2, r0
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80097b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b8:	331c      	adds	r3, #28
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fd fd74 	bl	80072a8 <ld_dword>
 80097c0:	4602      	mov	r2, r0
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	88da      	ldrh	r2, [r3, #6]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	79fa      	ldrb	r2, [r7, #7]
 80097de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3330      	adds	r3, #48	@ 0x30
 80097f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80097fa:	2100      	movs	r1, #0
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fd fdde 	bl	80073be <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009802:	79fb      	ldrb	r3, [r7, #7]
 8009804:	f003 0320 	and.w	r3, r3, #32
 8009808:	2b00      	cmp	r3, #0
 800980a:	d06e      	beq.n	80098ea <f_open+0x376>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d06a      	beq.n	80098ea <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	68da      	ldr	r2, [r3, #12]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	895b      	ldrh	r3, [r3, #10]
 8009820:	461a      	mov	r2, r3
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	899b      	ldrh	r3, [r3, #12]
 8009826:	fb02 f303 	mul.w	r3, r2, r3
 800982a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009838:	e016      	b.n	8009868 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe f887 	bl	8007952 <get_fat>
 8009844:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009848:	2b01      	cmp	r3, #1
 800984a:	d802      	bhi.n	8009852 <f_open+0x2de>
 800984c:	2302      	movs	r3, #2
 800984e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009858:	d102      	bne.n	8009860 <f_open+0x2ec>
 800985a:	2301      	movs	r3, #1
 800985c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009860:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009868:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800986c:	2b00      	cmp	r3, #0
 800986e:	d103      	bne.n	8009878 <f_open+0x304>
 8009870:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009874:	429a      	cmp	r2, r3
 8009876:	d8e0      	bhi.n	800983a <f_open+0x2c6>
				}
				fp->clust = clst;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800987c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800987e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009882:	2b00      	cmp	r3, #0
 8009884:	d131      	bne.n	80098ea <f_open+0x376>
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	899b      	ldrh	r3, [r3, #12]
 800988a:	461a      	mov	r2, r3
 800988c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800988e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009892:	fb01 f202 	mul.w	r2, r1, r2
 8009896:	1a9b      	subs	r3, r3, r2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d026      	beq.n	80098ea <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fe f837 	bl	8007914 <clust2sect>
 80098a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80098a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d103      	bne.n	80098b6 <f_open+0x342>
						res = FR_INT_ERR;
 80098ae:	2302      	movs	r3, #2
 80098b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80098b4:	e019      	b.n	80098ea <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	899b      	ldrh	r3, [r3, #12]
 80098ba:	461a      	mov	r2, r3
 80098bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098be:	fbb3 f2f2 	udiv	r2, r3, r2
 80098c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098c4:	441a      	add	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	7858      	ldrb	r0, [r3, #1]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6a1a      	ldr	r2, [r3, #32]
 80098d8:	2301      	movs	r3, #1
 80098da:	f7fd fc6f 	bl	80071bc <disk_read>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <f_open+0x376>
 80098e4:	2301      	movs	r3, #1
 80098e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80098ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <f_open+0x384>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80098f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3768      	adds	r7, #104	@ 0x68
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08c      	sub	sp, #48	@ 0x30
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f107 0210 	add.w	r2, r7, #16
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff fda9 	bl	800947c <validate>
 800992a:	4603      	mov	r3, r0
 800992c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009930:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009934:	2b00      	cmp	r3, #0
 8009936:	d107      	bne.n	8009948 <f_write+0x44>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	7d5b      	ldrb	r3, [r3, #21]
 800993c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <f_write+0x4a>
 8009948:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800994c:	e16a      	b.n	8009c24 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	7d1b      	ldrb	r3, [r3, #20]
 8009952:	f003 0302 	and.w	r3, r3, #2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <f_write+0x5a>
 800995a:	2307      	movs	r3, #7
 800995c:	e162      	b.n	8009c24 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	699a      	ldr	r2, [r3, #24]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	441a      	add	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	429a      	cmp	r2, r3
 800996c:	f080 814c 	bcs.w	8009c08 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	43db      	mvns	r3, r3
 8009976:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009978:	e146      	b.n	8009c08 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	699b      	ldr	r3, [r3, #24]
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	8992      	ldrh	r2, [r2, #12]
 8009982:	fbb3 f1f2 	udiv	r1, r3, r2
 8009986:	fb01 f202 	mul.w	r2, r1, r2
 800998a:	1a9b      	subs	r3, r3, r2
 800998c:	2b00      	cmp	r3, #0
 800998e:	f040 80f1 	bne.w	8009b74 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	693a      	ldr	r2, [r7, #16]
 8009998:	8992      	ldrh	r2, [r2, #12]
 800999a:	fbb3 f3f2 	udiv	r3, r3, r2
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	8952      	ldrh	r2, [r2, #10]
 80099a2:	3a01      	subs	r2, #1
 80099a4:	4013      	ands	r3, r2
 80099a6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d143      	bne.n	8009a36 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10c      	bne.n	80099d0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80099bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d11a      	bne.n	80099f8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2100      	movs	r1, #0
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fe fa15 	bl	8007df6 <create_chain>
 80099cc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80099ce:	e013      	b.n	80099f8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d007      	beq.n	80099e8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	4619      	mov	r1, r3
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f7fe faa1 	bl	8007f26 <clmt_clust>
 80099e4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80099e6:	e007      	b.n	80099f8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	4619      	mov	r1, r3
 80099f0:	4610      	mov	r0, r2
 80099f2:	f7fe fa00 	bl	8007df6 <create_chain>
 80099f6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80099f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 8109 	beq.w	8009c12 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d104      	bne.n	8009a10 <f_write+0x10c>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2202      	movs	r2, #2
 8009a0a:	755a      	strb	r2, [r3, #21]
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	e109      	b.n	8009c24 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a16:	d104      	bne.n	8009a22 <f_write+0x11e>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	755a      	strb	r2, [r3, #21]
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e100      	b.n	8009c24 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a26:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d102      	bne.n	8009a36 <f_write+0x132>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a34:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	7d1b      	ldrb	r3, [r3, #20]
 8009a3a:	b25b      	sxtb	r3, r3
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	da18      	bge.n	8009a72 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	7858      	ldrb	r0, [r3, #1]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6a1a      	ldr	r2, [r3, #32]
 8009a4e:	2301      	movs	r3, #1
 8009a50:	f7fd fbd4 	bl	80071fc <disk_write>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d004      	beq.n	8009a64 <f_write+0x160>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	755a      	strb	r2, [r3, #21]
 8009a60:	2301      	movs	r3, #1
 8009a62:	e0df      	b.n	8009c24 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	7d1b      	ldrb	r3, [r3, #20]
 8009a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a6c:	b2da      	uxtb	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	69db      	ldr	r3, [r3, #28]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	f7fd ff4a 	bl	8007914 <clust2sect>
 8009a80:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d104      	bne.n	8009a92 <f_write+0x18e>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	755a      	strb	r2, [r3, #21]
 8009a8e:	2302      	movs	r3, #2
 8009a90:	e0c8      	b.n	8009c24 <f_write+0x320>
			sect += csect;
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	4413      	add	r3, r2
 8009a98:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	899b      	ldrh	r3, [r3, #12]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aa6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009aa8:	6a3b      	ldr	r3, [r7, #32]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d043      	beq.n	8009b36 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	8952      	ldrh	r2, [r2, #10]
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d905      	bls.n	8009ac8 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	895b      	ldrh	r3, [r3, #10]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	7858      	ldrb	r0, [r3, #1]
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	69f9      	ldr	r1, [r7, #28]
 8009ad2:	f7fd fb93 	bl	80071fc <disk_write>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d004      	beq.n	8009ae6 <f_write+0x1e2>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	755a      	strb	r2, [r3, #21]
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e09e      	b.n	8009c24 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6a1a      	ldr	r2, [r3, #32]
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	6a3a      	ldr	r2, [r7, #32]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d918      	bls.n	8009b26 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6a1a      	ldr	r2, [r3, #32]
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	8992      	ldrh	r2, [r2, #12]
 8009b06:	fb02 f303 	mul.w	r3, r2, r3
 8009b0a:	69fa      	ldr	r2, [r7, #28]
 8009b0c:	18d1      	adds	r1, r2, r3
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	899b      	ldrh	r3, [r3, #12]
 8009b12:	461a      	mov	r2, r3
 8009b14:	f7fd fc32 	bl	800737c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	7d1b      	ldrb	r3, [r3, #20]
 8009b1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	899b      	ldrh	r3, [r3, #12]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	fb02 f303 	mul.w	r3, r2, r3
 8009b32:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009b34:	e04b      	b.n	8009bce <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d016      	beq.n	8009b6e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	699a      	ldr	r2, [r3, #24]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d210      	bcs.n	8009b6e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	7858      	ldrb	r0, [r3, #1]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009b56:	2301      	movs	r3, #1
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	f7fd fb2f 	bl	80071bc <disk_read>
 8009b5e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d004      	beq.n	8009b6e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2201      	movs	r2, #1
 8009b68:	755a      	strb	r2, [r3, #21]
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e05a      	b.n	8009c24 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	697a      	ldr	r2, [r7, #20]
 8009b72:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	899b      	ldrh	r3, [r3, #12]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	8992      	ldrh	r2, [r2, #12]
 8009b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b86:	fb01 f202 	mul.w	r2, r1, r2
 8009b8a:	1a9b      	subs	r3, r3, r2
 8009b8c:	1ac3      	subs	r3, r0, r3
 8009b8e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d901      	bls.n	8009b9c <f_write+0x298>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	8992      	ldrh	r2, [r2, #12]
 8009baa:	fbb3 f0f2 	udiv	r0, r3, r2
 8009bae:	fb00 f202 	mul.w	r2, r0, r2
 8009bb2:	1a9b      	subs	r3, r3, r2
 8009bb4:	440b      	add	r3, r1
 8009bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bb8:	69f9      	ldr	r1, [r7, #28]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fd fbde 	bl	800737c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	7d1b      	ldrb	r3, [r3, #20]
 8009bc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009bce:	69fa      	ldr	r2, [r7, #28]
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd2:	4413      	add	r3, r2
 8009bd4:	61fb      	str	r3, [r7, #28]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	699a      	ldr	r2, [r3, #24]
 8009bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bdc:	441a      	add	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	619a      	str	r2, [r3, #24]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	68da      	ldr	r2, [r3, #12]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	bf38      	it	cc
 8009bee:	461a      	movcc	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	60da      	str	r2, [r3, #12]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfa:	441a      	add	r2, r3
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f47f aeb5 	bne.w	800997a <f_write+0x76>
 8009c10:	e000      	b.n	8009c14 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c12:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	7d1b      	ldrb	r3, [r3, #20]
 8009c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3730      	adds	r7, #48	@ 0x30
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f107 0208 	add.w	r2, r7, #8
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7ff fc1d 	bl	800947c <validate>
 8009c42:	4603      	mov	r3, r0
 8009c44:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c46:	7dfb      	ldrb	r3, [r7, #23]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d168      	bne.n	8009d1e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	7d1b      	ldrb	r3, [r3, #20]
 8009c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d062      	beq.n	8009d1e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	7d1b      	ldrb	r3, [r3, #20]
 8009c5c:	b25b      	sxtb	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da15      	bge.n	8009c8e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	7858      	ldrb	r0, [r3, #1]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a1a      	ldr	r2, [r3, #32]
 8009c70:	2301      	movs	r3, #1
 8009c72:	f7fd fac3 	bl	80071fc <disk_write>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d001      	beq.n	8009c80 <f_sync+0x54>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e04f      	b.n	8009d20 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	7d1b      	ldrb	r3, [r3, #20]
 8009c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c88:	b2da      	uxtb	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009c8e:	f7fd f9f7 	bl	8007080 <get_fattime>
 8009c92:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	f7fd fd9b 	bl	80077d8 <move_window>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d138      	bne.n	8009d1e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	330b      	adds	r3, #11
 8009cb6:	781a      	ldrb	r2, [r3, #0]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	330b      	adds	r3, #11
 8009cbc:	f042 0220 	orr.w	r2, r2, #32
 8009cc0:	b2d2      	uxtb	r2, r2
 8009cc2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6818      	ldr	r0, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	68f9      	ldr	r1, [r7, #12]
 8009cd0:	f7fe fb26 	bl	8008320 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f103 021c 	add.w	r2, r3, #28
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	4610      	mov	r0, r2
 8009ce2:	f7fd fb1f 	bl	8007324 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3316      	adds	r3, #22
 8009cea:	6939      	ldr	r1, [r7, #16]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fd fb19 	bl	8007324 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3312      	adds	r3, #18
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fd faf8 	bl	80072ee <st_word>
					fs->wflag = 1;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2201      	movs	r2, #1
 8009d02:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fd fd94 	bl	8007834 <sync_fs>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	7d1b      	ldrb	r3, [r3, #20]
 8009d14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff ff7b 	bl	8009c2c <f_sync>
 8009d36:	4603      	mov	r3, r0
 8009d38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d118      	bne.n	8009d72 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f107 0208 	add.w	r2, r7, #8
 8009d46:	4611      	mov	r1, r2
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7ff fb97 	bl	800947c <validate>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10c      	bne.n	8009d72 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fd fc97 	bl	8007690 <dec_lock>
 8009d62:	4603      	mov	r3, r0
 8009d64:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d102      	bne.n	8009d72 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b090      	sub	sp, #64	@ 0x40
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f107 0208 	add.w	r2, r7, #8
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff fb74 	bl	800947c <validate>
 8009d94:	4603      	mov	r3, r0
 8009d96:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009d9a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d103      	bne.n	8009daa <f_lseek+0x2e>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	7d5b      	ldrb	r3, [r3, #21]
 8009da6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009daa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d002      	beq.n	8009db8 <f_lseek+0x3c>
 8009db2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009db6:	e201      	b.n	800a1bc <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 80d9 	beq.w	8009f74 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc8:	d15a      	bne.n	8009e80 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dce:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd2:	1d1a      	adds	r2, r3, #4
 8009dd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	617b      	str	r3, [r7, #20]
 8009dda:	2302      	movs	r3, #2
 8009ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8009de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d03a      	beq.n	8009e60 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dec:	613b      	str	r3, [r7, #16]
 8009dee:	2300      	movs	r3, #0
 8009df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df4:	3302      	adds	r3, #2
 8009df6:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8009df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfe:	3301      	adds	r3, #1
 8009e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fd fda3 	bl	8007952 <get_fat>
 8009e0c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d804      	bhi.n	8009e1e <f_lseek+0xa2>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	755a      	strb	r2, [r3, #21]
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	e1ce      	b.n	800a1bc <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e24:	d104      	bne.n	8009e30 <f_lseek+0xb4>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	755a      	strb	r2, [r3, #21]
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e1c5      	b.n	800a1bc <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	3301      	adds	r3, #1
 8009e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d0de      	beq.n	8009df8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009e3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d809      	bhi.n	8009e56 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e44:	1d1a      	adds	r2, r3, #4
 8009e46:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4e:	1d1a      	adds	r2, r3, #4
 8009e50:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d3c4      	bcc.n	8009dea <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e66:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d803      	bhi.n	8009e78 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	e19f      	b.n	800a1b8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009e78:	2311      	movs	r3, #17
 8009e7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009e7e:	e19b      	b.n	800a1b8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d902      	bls.n	8009e90 <f_lseek+0x114>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 818d 	beq.w	800a1b8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f7fe f83e 	bl	8007f26 <clmt_clust>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	69db      	ldr	r3, [r3, #28]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	4610      	mov	r0, r2
 8009eba:	f7fd fd2b 	bl	8007914 <clust2sect>
 8009ebe:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d104      	bne.n	8009ed0 <f_lseek+0x154>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2202      	movs	r2, #2
 8009eca:	755a      	strb	r2, [r3, #21]
 8009ecc:	2302      	movs	r3, #2
 8009ece:	e175      	b.n	800a1bc <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	8992      	ldrh	r2, [r2, #12]
 8009ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	8952      	ldrh	r2, [r2, #10]
 8009ee0:	3a01      	subs	r2, #1
 8009ee2:	4013      	ands	r3, r2
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	68ba      	ldr	r2, [r7, #8]
 8009ef0:	8992      	ldrh	r2, [r2, #12]
 8009ef2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ef6:	fb01 f202 	mul.w	r2, r1, r2
 8009efa:	1a9b      	subs	r3, r3, r2
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 815b 	beq.w	800a1b8 <f_lseek+0x43c>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	69ba      	ldr	r2, [r7, #24]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	f000 8155 	beq.w	800a1b8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	7d1b      	ldrb	r3, [r3, #20]
 8009f12:	b25b      	sxtb	r3, r3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	da18      	bge.n	8009f4a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	7858      	ldrb	r0, [r3, #1]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a1a      	ldr	r2, [r3, #32]
 8009f26:	2301      	movs	r3, #1
 8009f28:	f7fd f968 	bl	80071fc <disk_write>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d004      	beq.n	8009f3c <f_lseek+0x1c0>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	755a      	strb	r2, [r3, #21]
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e13f      	b.n	800a1bc <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	7d1b      	ldrb	r3, [r3, #20]
 8009f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	7858      	ldrb	r0, [r3, #1]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f54:	2301      	movs	r3, #1
 8009f56:	69ba      	ldr	r2, [r7, #24]
 8009f58:	f7fd f930 	bl	80071bc <disk_read>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d004      	beq.n	8009f6c <f_lseek+0x1f0>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	755a      	strb	r2, [r3, #21]
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e127      	b.n	800a1bc <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	69ba      	ldr	r2, [r7, #24]
 8009f70:	621a      	str	r2, [r3, #32]
 8009f72:	e121      	b.n	800a1b8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d908      	bls.n	8009f90 <f_lseek+0x214>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	7d1b      	ldrb	r3, [r3, #20]
 8009f82:	f003 0302 	and.w	r3, r3, #2
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d102      	bne.n	8009f90 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f9e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 80b5 	beq.w	800a112 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	895b      	ldrh	r3, [r3, #10]
 8009fac:	461a      	mov	r2, r3
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	899b      	ldrh	r3, [r3, #12]
 8009fb2:	fb02 f303 	mul.w	r3, r2, r3
 8009fb6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d01b      	beq.n	8009ff6 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	1e5a      	subs	r2, r3, #1
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009fc8:	6a3b      	ldr	r3, [r7, #32]
 8009fca:	1e59      	subs	r1, r3, #1
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d30f      	bcc.n	8009ff6 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	1e5a      	subs	r2, r3, #1
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	425b      	negs	r3, r3
 8009fde:	401a      	ands	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ff4:	e022      	b.n	800a03c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d119      	bne.n	800a036 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2100      	movs	r1, #0
 800a006:	4618      	mov	r0, r3
 800a008:	f7fd fef5 	bl	8007df6 <create_chain>
 800a00c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a010:	2b01      	cmp	r3, #1
 800a012:	d104      	bne.n	800a01e <f_lseek+0x2a2>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2202      	movs	r2, #2
 800a018:	755a      	strb	r2, [r3, #21]
 800a01a:	2302      	movs	r3, #2
 800a01c:	e0ce      	b.n	800a1bc <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a024:	d104      	bne.n	800a030 <f_lseek+0x2b4>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	755a      	strb	r2, [r3, #21]
 800a02c:	2301      	movs	r3, #1
 800a02e:	e0c5      	b.n	800a1bc <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a034:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a03a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d067      	beq.n	800a112 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a042:	e03a      	b.n	800a0ba <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	603b      	str	r3, [r7, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	699a      	ldr	r2, [r3, #24]
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	441a      	add	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	7d1b      	ldrb	r3, [r3, #20]
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00b      	beq.n	800a07c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fd fec4 	bl	8007df6 <create_chain>
 800a06e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a072:	2b00      	cmp	r3, #0
 800a074:	d108      	bne.n	800a088 <f_lseek+0x30c>
							ofs = 0; break;
 800a076:	2300      	movs	r3, #0
 800a078:	603b      	str	r3, [r7, #0]
 800a07a:	e022      	b.n	800a0c2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a080:	4618      	mov	r0, r3
 800a082:	f7fd fc66 	bl	8007952 <get_fat>
 800a086:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08e:	d104      	bne.n	800a09a <f_lseek+0x31e>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	755a      	strb	r2, [r3, #21]
 800a096:	2301      	movs	r3, #1
 800a098:	e090      	b.n	800a1bc <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d904      	bls.n	800a0aa <f_lseek+0x32e>
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	69db      	ldr	r3, [r3, #28]
 800a0a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d304      	bcc.n	800a0b4 <f_lseek+0x338>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2202      	movs	r2, #2
 800a0ae:	755a      	strb	r2, [r3, #21]
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	e083      	b.n	800a1bc <f_lseek+0x440>
					fp->clust = clst;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0b8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d8c0      	bhi.n	800a044 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	699a      	ldr	r2, [r3, #24]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	441a      	add	r2, r3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	899b      	ldrh	r3, [r3, #12]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0da:	fb01 f202 	mul.w	r2, r1, r2
 800a0de:	1a9b      	subs	r3, r3, r2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d016      	beq.n	800a112 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fd fc13 	bl	8007914 <clust2sect>
 800a0ee:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a0f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d104      	bne.n	800a100 <f_lseek+0x384>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	755a      	strb	r2, [r3, #21]
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	e05d      	b.n	800a1bc <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	899b      	ldrh	r3, [r3, #12]
 800a104:	461a      	mov	r2, r3
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	fbb3 f3f2 	udiv	r3, r3, r2
 800a10c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a10e:	4413      	add	r3, r2
 800a110:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	699a      	ldr	r2, [r3, #24]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d90a      	bls.n	800a134 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	699a      	ldr	r2, [r3, #24]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	7d1b      	ldrb	r3, [r3, #20]
 800a12a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	8992      	ldrh	r2, [r2, #12]
 800a13c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a140:	fb01 f202 	mul.w	r2, r1, r2
 800a144:	1a9b      	subs	r3, r3, r2
 800a146:	2b00      	cmp	r3, #0
 800a148:	d036      	beq.n	800a1b8 <f_lseek+0x43c>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a150:	429a      	cmp	r2, r3
 800a152:	d031      	beq.n	800a1b8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	7d1b      	ldrb	r3, [r3, #20]
 800a158:	b25b      	sxtb	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	da18      	bge.n	800a190 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	7858      	ldrb	r0, [r3, #1]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a1a      	ldr	r2, [r3, #32]
 800a16c:	2301      	movs	r3, #1
 800a16e:	f7fd f845 	bl	80071fc <disk_write>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d004      	beq.n	800a182 <f_lseek+0x406>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	755a      	strb	r2, [r3, #21]
 800a17e:	2301      	movs	r3, #1
 800a180:	e01c      	b.n	800a1bc <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	7d1b      	ldrb	r3, [r3, #20]
 800a186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	7858      	ldrb	r0, [r3, #1]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a19a:	2301      	movs	r3, #1
 800a19c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a19e:	f7fd f80d 	bl	80071bc <disk_read>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d004      	beq.n	800a1b2 <f_lseek+0x436>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	755a      	strb	r2, [r3, #21]
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e004      	b.n	800a1bc <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1b6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a1b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3740      	adds	r7, #64	@ 0x40
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	2b0a      	cmp	r3, #10
 800a1d4:	d103      	bne.n	800a1de <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a1d6:	210d      	movs	r1, #13
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7ff fff3 	bl	800a1c4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	db25      	blt.n	800a236 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	1c5a      	adds	r2, r3, #1
 800a1ee:	60fa      	str	r2, [r7, #12]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	78fa      	ldrb	r2, [r7, #3]
 800a1f6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2b3c      	cmp	r3, #60	@ 0x3c
 800a1fc:	dd12      	ble.n	800a224 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6818      	ldr	r0, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f103 010c 	add.w	r1, r3, #12
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	f107 0308 	add.w	r3, r7, #8
 800a20e:	f7ff fb79 	bl	8009904 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	429a      	cmp	r2, r3
 800a218:	d101      	bne.n	800a21e <putc_bfd+0x5a>
 800a21a:	2300      	movs	r3, #0
 800a21c:	e001      	b.n	800a222 <putc_bfd+0x5e>
 800a21e:	f04f 33ff 	mov.w	r3, #4294967295
 800a222:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	1c5a      	adds	r2, r3, #1
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	609a      	str	r2, [r3, #8]
 800a234:	e000      	b.n	800a238 <putc_bfd+0x74>
	if (i < 0) return;
 800a236:	bf00      	nop
}
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b084      	sub	sp, #16
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	db16      	blt.n	800a27c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6818      	ldr	r0, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f103 010c 	add.w	r1, r3, #12
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	461a      	mov	r2, r3
 800a25e:	f107 030c 	add.w	r3, r7, #12
 800a262:	f7ff fb4f 	bl	8009904 <f_write>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d107      	bne.n	800a27c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	4293      	cmp	r3, r2
 800a274:	d102      	bne.n	800a27c <putc_flush+0x3e>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	e001      	b.n	800a280 <putc_flush+0x42>
	return EOF;
 800a27c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	683a      	ldr	r2, [r7, #0]
 800a296:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	605a      	str	r2, [r3, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	609a      	str	r2, [r3, #8]
}
 800a2a6:	bf00      	nop
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b096      	sub	sp, #88	@ 0x58
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a2bc:	f107 030c 	add.w	r3, r7, #12
 800a2c0:	6839      	ldr	r1, [r7, #0]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7ff ffe0 	bl	800a288 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a2c8:	e009      	b.n	800a2de <f_puts+0x2c>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	1c5a      	adds	r2, r3, #1
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	781a      	ldrb	r2, [r3, #0]
 800a2d2:	f107 030c 	add.w	r3, r7, #12
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7ff ff73 	bl	800a1c4 <putc_bfd>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1f1      	bne.n	800a2ca <f_puts+0x18>
	return putc_flush(&pb);
 800a2e6:	f107 030c 	add.w	r3, r7, #12
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7ff ffa7 	bl	800a23e <putc_flush>
 800a2f0:	4603      	mov	r3, r0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3758      	adds	r7, #88	@ 0x58
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
	...

0800a2fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b087      	sub	sp, #28
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	4613      	mov	r3, r2
 800a308:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a30a:	2301      	movs	r3, #1
 800a30c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a312:	4b1f      	ldr	r3, [pc, #124]	@ (800a390 <FATFS_LinkDriverEx+0x94>)
 800a314:	7a5b      	ldrb	r3, [r3, #9]
 800a316:	b2db      	uxtb	r3, r3
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d131      	bne.n	800a380 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a31c:	4b1c      	ldr	r3, [pc, #112]	@ (800a390 <FATFS_LinkDriverEx+0x94>)
 800a31e:	7a5b      	ldrb	r3, [r3, #9]
 800a320:	b2db      	uxtb	r3, r3
 800a322:	461a      	mov	r2, r3
 800a324:	4b1a      	ldr	r3, [pc, #104]	@ (800a390 <FATFS_LinkDriverEx+0x94>)
 800a326:	2100      	movs	r1, #0
 800a328:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a32a:	4b19      	ldr	r3, [pc, #100]	@ (800a390 <FATFS_LinkDriverEx+0x94>)
 800a32c:	7a5b      	ldrb	r3, [r3, #9]
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	4a17      	ldr	r2, [pc, #92]	@ (800a390 <FATFS_LinkDriverEx+0x94>)
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a33a:	4b15      	ldr	r3, [pc, #84]	@ (800a390 <FATFS_LinkDriverEx+0x94>)
 800a33c:	7a5b      	ldrb	r3, [r3, #9]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	461a      	mov	r2, r3
 800a342:	4b13      	ldr	r3, [pc, #76]	@ (800a390 <FATFS_LinkDriverEx+0x94>)
 800a344:	4413      	add	r3, r2
 800a346:	79fa      	ldrb	r2, [r7, #7]
 800a348:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a34a:	4b11      	ldr	r3, [pc, #68]	@ (800a390 <FATFS_LinkDriverEx+0x94>)
 800a34c:	7a5b      	ldrb	r3, [r3, #9]
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	1c5a      	adds	r2, r3, #1
 800a352:	b2d1      	uxtb	r1, r2
 800a354:	4a0e      	ldr	r2, [pc, #56]	@ (800a390 <FATFS_LinkDriverEx+0x94>)
 800a356:	7251      	strb	r1, [r2, #9]
 800a358:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a35a:	7dbb      	ldrb	r3, [r7, #22]
 800a35c:	3330      	adds	r3, #48	@ 0x30
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	3301      	adds	r3, #1
 800a368:	223a      	movs	r2, #58	@ 0x3a
 800a36a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	3302      	adds	r3, #2
 800a370:	222f      	movs	r2, #47	@ 0x2f
 800a372:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	3303      	adds	r3, #3
 800a378:	2200      	movs	r2, #0
 800a37a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a380:	7dfb      	ldrb	r3, [r7, #23]
}
 800a382:	4618      	mov	r0, r3
 800a384:	371c      	adds	r7, #28
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	20002b04 	.word	0x20002b04

0800a394 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a39e:	2200      	movs	r2, #0
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7ff ffaa 	bl	800a2fc <FATFS_LinkDriverEx>
 800a3a8:	4603      	mov	r3, r0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	6039      	str	r1, [r7, #0]
 800a3be:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a3c0:	88fb      	ldrh	r3, [r7, #6]
 800a3c2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a3c4:	d802      	bhi.n	800a3cc <ff_convert+0x18>
		c = chr;
 800a3c6:	88fb      	ldrh	r3, [r7, #6]
 800a3c8:	81fb      	strh	r3, [r7, #14]
 800a3ca:	e025      	b.n	800a418 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00b      	beq.n	800a3ea <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a3d2:	88fb      	ldrh	r3, [r7, #6]
 800a3d4:	2bff      	cmp	r3, #255	@ 0xff
 800a3d6:	d805      	bhi.n	800a3e4 <ff_convert+0x30>
 800a3d8:	88fb      	ldrh	r3, [r7, #6]
 800a3da:	3b80      	subs	r3, #128	@ 0x80
 800a3dc:	4a12      	ldr	r2, [pc, #72]	@ (800a428 <ff_convert+0x74>)
 800a3de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3e2:	e000      	b.n	800a3e6 <ff_convert+0x32>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	81fb      	strh	r3, [r7, #14]
 800a3e8:	e016      	b.n	800a418 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	81fb      	strh	r3, [r7, #14]
 800a3ee:	e009      	b.n	800a404 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a3f0:	89fb      	ldrh	r3, [r7, #14]
 800a3f2:	4a0d      	ldr	r2, [pc, #52]	@ (800a428 <ff_convert+0x74>)
 800a3f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3f8:	88fa      	ldrh	r2, [r7, #6]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d006      	beq.n	800a40c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a3fe:	89fb      	ldrh	r3, [r7, #14]
 800a400:	3301      	adds	r3, #1
 800a402:	81fb      	strh	r3, [r7, #14]
 800a404:	89fb      	ldrh	r3, [r7, #14]
 800a406:	2b7f      	cmp	r3, #127	@ 0x7f
 800a408:	d9f2      	bls.n	800a3f0 <ff_convert+0x3c>
 800a40a:	e000      	b.n	800a40e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a40c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a40e:	89fb      	ldrh	r3, [r7, #14]
 800a410:	3380      	adds	r3, #128	@ 0x80
 800a412:	b29b      	uxth	r3, r3
 800a414:	b2db      	uxtb	r3, r3
 800a416:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a418:	89fb      	ldrh	r3, [r7, #14]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	0800f7ec 	.word	0x0800f7ec

0800a42c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	4603      	mov	r3, r0
 800a434:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a436:	88fb      	ldrh	r3, [r7, #6]
 800a438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a43c:	d201      	bcs.n	800a442 <ff_wtoupper+0x16>
 800a43e:	4b3e      	ldr	r3, [pc, #248]	@ (800a538 <ff_wtoupper+0x10c>)
 800a440:	e000      	b.n	800a444 <ff_wtoupper+0x18>
 800a442:	4b3e      	ldr	r3, [pc, #248]	@ (800a53c <ff_wtoupper+0x110>)
 800a444:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	1c9a      	adds	r2, r3, #2
 800a44a:	617a      	str	r2, [r7, #20]
 800a44c:	881b      	ldrh	r3, [r3, #0]
 800a44e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a450:	8a7b      	ldrh	r3, [r7, #18]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d068      	beq.n	800a528 <ff_wtoupper+0xfc>
 800a456:	88fa      	ldrh	r2, [r7, #6]
 800a458:	8a7b      	ldrh	r3, [r7, #18]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d364      	bcc.n	800a528 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	1c9a      	adds	r2, r3, #2
 800a462:	617a      	str	r2, [r7, #20]
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	823b      	strh	r3, [r7, #16]
 800a468:	8a3b      	ldrh	r3, [r7, #16]
 800a46a:	0a1b      	lsrs	r3, r3, #8
 800a46c:	81fb      	strh	r3, [r7, #14]
 800a46e:	8a3b      	ldrh	r3, [r7, #16]
 800a470:	b2db      	uxtb	r3, r3
 800a472:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a474:	88fa      	ldrh	r2, [r7, #6]
 800a476:	8a79      	ldrh	r1, [r7, #18]
 800a478:	8a3b      	ldrh	r3, [r7, #16]
 800a47a:	440b      	add	r3, r1
 800a47c:	429a      	cmp	r2, r3
 800a47e:	da49      	bge.n	800a514 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a480:	89fb      	ldrh	r3, [r7, #14]
 800a482:	2b08      	cmp	r3, #8
 800a484:	d84f      	bhi.n	800a526 <ff_wtoupper+0xfa>
 800a486:	a201      	add	r2, pc, #4	@ (adr r2, 800a48c <ff_wtoupper+0x60>)
 800a488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48c:	0800a4b1 	.word	0x0800a4b1
 800a490:	0800a4c3 	.word	0x0800a4c3
 800a494:	0800a4d9 	.word	0x0800a4d9
 800a498:	0800a4e1 	.word	0x0800a4e1
 800a49c:	0800a4e9 	.word	0x0800a4e9
 800a4a0:	0800a4f1 	.word	0x0800a4f1
 800a4a4:	0800a4f9 	.word	0x0800a4f9
 800a4a8:	0800a501 	.word	0x0800a501
 800a4ac:	0800a509 	.word	0x0800a509
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a4b0:	88fa      	ldrh	r2, [r7, #6]
 800a4b2:	8a7b      	ldrh	r3, [r7, #18]
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	005b      	lsls	r3, r3, #1
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	80fb      	strh	r3, [r7, #6]
 800a4c0:	e027      	b.n	800a512 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a4c2:	88fa      	ldrh	r2, [r7, #6]
 800a4c4:	8a7b      	ldrh	r3, [r7, #18]
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	88fa      	ldrh	r2, [r7, #6]
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	80fb      	strh	r3, [r7, #6]
 800a4d6:	e01c      	b.n	800a512 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a4d8:	88fb      	ldrh	r3, [r7, #6]
 800a4da:	3b10      	subs	r3, #16
 800a4dc:	80fb      	strh	r3, [r7, #6]
 800a4de:	e018      	b.n	800a512 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a4e0:	88fb      	ldrh	r3, [r7, #6]
 800a4e2:	3b20      	subs	r3, #32
 800a4e4:	80fb      	strh	r3, [r7, #6]
 800a4e6:	e014      	b.n	800a512 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a4e8:	88fb      	ldrh	r3, [r7, #6]
 800a4ea:	3b30      	subs	r3, #48	@ 0x30
 800a4ec:	80fb      	strh	r3, [r7, #6]
 800a4ee:	e010      	b.n	800a512 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a4f0:	88fb      	ldrh	r3, [r7, #6]
 800a4f2:	3b1a      	subs	r3, #26
 800a4f4:	80fb      	strh	r3, [r7, #6]
 800a4f6:	e00c      	b.n	800a512 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a4f8:	88fb      	ldrh	r3, [r7, #6]
 800a4fa:	3308      	adds	r3, #8
 800a4fc:	80fb      	strh	r3, [r7, #6]
 800a4fe:	e008      	b.n	800a512 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a500:	88fb      	ldrh	r3, [r7, #6]
 800a502:	3b50      	subs	r3, #80	@ 0x50
 800a504:	80fb      	strh	r3, [r7, #6]
 800a506:	e004      	b.n	800a512 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a508:	88fb      	ldrh	r3, [r7, #6]
 800a50a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a50e:	80fb      	strh	r3, [r7, #6]
 800a510:	bf00      	nop
			}
			break;
 800a512:	e008      	b.n	800a526 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a514:	89fb      	ldrh	r3, [r7, #14]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d195      	bne.n	800a446 <ff_wtoupper+0x1a>
 800a51a:	8a3b      	ldrh	r3, [r7, #16]
 800a51c:	005b      	lsls	r3, r3, #1
 800a51e:	697a      	ldr	r2, [r7, #20]
 800a520:	4413      	add	r3, r2
 800a522:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a524:	e78f      	b.n	800a446 <ff_wtoupper+0x1a>
			break;
 800a526:	bf00      	nop
	}

	return chr;
 800a528:	88fb      	ldrh	r3, [r7, #6]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	371c      	adds	r7, #28
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	0800f8ec 	.word	0x0800f8ec
 800a53c:	0800fae0 	.word	0x0800fae0

0800a540 <malloc>:
 800a540:	4b02      	ldr	r3, [pc, #8]	@ (800a54c <malloc+0xc>)
 800a542:	4601      	mov	r1, r0
 800a544:	6818      	ldr	r0, [r3, #0]
 800a546:	f000 b825 	b.w	800a594 <_malloc_r>
 800a54a:	bf00      	nop
 800a54c:	20000038 	.word	0x20000038

0800a550 <sbrk_aligned>:
 800a550:	b570      	push	{r4, r5, r6, lr}
 800a552:	4e0f      	ldr	r6, [pc, #60]	@ (800a590 <sbrk_aligned+0x40>)
 800a554:	460c      	mov	r4, r1
 800a556:	6831      	ldr	r1, [r6, #0]
 800a558:	4605      	mov	r5, r0
 800a55a:	b911      	cbnz	r1, 800a562 <sbrk_aligned+0x12>
 800a55c:	f001 f9b0 	bl	800b8c0 <_sbrk_r>
 800a560:	6030      	str	r0, [r6, #0]
 800a562:	4621      	mov	r1, r4
 800a564:	4628      	mov	r0, r5
 800a566:	f001 f9ab 	bl	800b8c0 <_sbrk_r>
 800a56a:	1c43      	adds	r3, r0, #1
 800a56c:	d103      	bne.n	800a576 <sbrk_aligned+0x26>
 800a56e:	f04f 34ff 	mov.w	r4, #4294967295
 800a572:	4620      	mov	r0, r4
 800a574:	bd70      	pop	{r4, r5, r6, pc}
 800a576:	1cc4      	adds	r4, r0, #3
 800a578:	f024 0403 	bic.w	r4, r4, #3
 800a57c:	42a0      	cmp	r0, r4
 800a57e:	d0f8      	beq.n	800a572 <sbrk_aligned+0x22>
 800a580:	1a21      	subs	r1, r4, r0
 800a582:	4628      	mov	r0, r5
 800a584:	f001 f99c 	bl	800b8c0 <_sbrk_r>
 800a588:	3001      	adds	r0, #1
 800a58a:	d1f2      	bne.n	800a572 <sbrk_aligned+0x22>
 800a58c:	e7ef      	b.n	800a56e <sbrk_aligned+0x1e>
 800a58e:	bf00      	nop
 800a590:	20002b10 	.word	0x20002b10

0800a594 <_malloc_r>:
 800a594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a598:	1ccd      	adds	r5, r1, #3
 800a59a:	f025 0503 	bic.w	r5, r5, #3
 800a59e:	3508      	adds	r5, #8
 800a5a0:	2d0c      	cmp	r5, #12
 800a5a2:	bf38      	it	cc
 800a5a4:	250c      	movcc	r5, #12
 800a5a6:	2d00      	cmp	r5, #0
 800a5a8:	4606      	mov	r6, r0
 800a5aa:	db01      	blt.n	800a5b0 <_malloc_r+0x1c>
 800a5ac:	42a9      	cmp	r1, r5
 800a5ae:	d904      	bls.n	800a5ba <_malloc_r+0x26>
 800a5b0:	230c      	movs	r3, #12
 800a5b2:	6033      	str	r3, [r6, #0]
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a690 <_malloc_r+0xfc>
 800a5be:	f000 f869 	bl	800a694 <__malloc_lock>
 800a5c2:	f8d8 3000 	ldr.w	r3, [r8]
 800a5c6:	461c      	mov	r4, r3
 800a5c8:	bb44      	cbnz	r4, 800a61c <_malloc_r+0x88>
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7ff ffbf 	bl	800a550 <sbrk_aligned>
 800a5d2:	1c43      	adds	r3, r0, #1
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	d158      	bne.n	800a68a <_malloc_r+0xf6>
 800a5d8:	f8d8 4000 	ldr.w	r4, [r8]
 800a5dc:	4627      	mov	r7, r4
 800a5de:	2f00      	cmp	r7, #0
 800a5e0:	d143      	bne.n	800a66a <_malloc_r+0xd6>
 800a5e2:	2c00      	cmp	r4, #0
 800a5e4:	d04b      	beq.n	800a67e <_malloc_r+0xea>
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	4639      	mov	r1, r7
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	eb04 0903 	add.w	r9, r4, r3
 800a5f0:	f001 f966 	bl	800b8c0 <_sbrk_r>
 800a5f4:	4581      	cmp	r9, r0
 800a5f6:	d142      	bne.n	800a67e <_malloc_r+0xea>
 800a5f8:	6821      	ldr	r1, [r4, #0]
 800a5fa:	1a6d      	subs	r5, r5, r1
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	4630      	mov	r0, r6
 800a600:	f7ff ffa6 	bl	800a550 <sbrk_aligned>
 800a604:	3001      	adds	r0, #1
 800a606:	d03a      	beq.n	800a67e <_malloc_r+0xea>
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	442b      	add	r3, r5
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	f8d8 3000 	ldr.w	r3, [r8]
 800a612:	685a      	ldr	r2, [r3, #4]
 800a614:	bb62      	cbnz	r2, 800a670 <_malloc_r+0xdc>
 800a616:	f8c8 7000 	str.w	r7, [r8]
 800a61a:	e00f      	b.n	800a63c <_malloc_r+0xa8>
 800a61c:	6822      	ldr	r2, [r4, #0]
 800a61e:	1b52      	subs	r2, r2, r5
 800a620:	d420      	bmi.n	800a664 <_malloc_r+0xd0>
 800a622:	2a0b      	cmp	r2, #11
 800a624:	d917      	bls.n	800a656 <_malloc_r+0xc2>
 800a626:	1961      	adds	r1, r4, r5
 800a628:	42a3      	cmp	r3, r4
 800a62a:	6025      	str	r5, [r4, #0]
 800a62c:	bf18      	it	ne
 800a62e:	6059      	strne	r1, [r3, #4]
 800a630:	6863      	ldr	r3, [r4, #4]
 800a632:	bf08      	it	eq
 800a634:	f8c8 1000 	streq.w	r1, [r8]
 800a638:	5162      	str	r2, [r4, r5]
 800a63a:	604b      	str	r3, [r1, #4]
 800a63c:	4630      	mov	r0, r6
 800a63e:	f000 f82f 	bl	800a6a0 <__malloc_unlock>
 800a642:	f104 000b 	add.w	r0, r4, #11
 800a646:	1d23      	adds	r3, r4, #4
 800a648:	f020 0007 	bic.w	r0, r0, #7
 800a64c:	1ac2      	subs	r2, r0, r3
 800a64e:	bf1c      	itt	ne
 800a650:	1a1b      	subne	r3, r3, r0
 800a652:	50a3      	strne	r3, [r4, r2]
 800a654:	e7af      	b.n	800a5b6 <_malloc_r+0x22>
 800a656:	6862      	ldr	r2, [r4, #4]
 800a658:	42a3      	cmp	r3, r4
 800a65a:	bf0c      	ite	eq
 800a65c:	f8c8 2000 	streq.w	r2, [r8]
 800a660:	605a      	strne	r2, [r3, #4]
 800a662:	e7eb      	b.n	800a63c <_malloc_r+0xa8>
 800a664:	4623      	mov	r3, r4
 800a666:	6864      	ldr	r4, [r4, #4]
 800a668:	e7ae      	b.n	800a5c8 <_malloc_r+0x34>
 800a66a:	463c      	mov	r4, r7
 800a66c:	687f      	ldr	r7, [r7, #4]
 800a66e:	e7b6      	b.n	800a5de <_malloc_r+0x4a>
 800a670:	461a      	mov	r2, r3
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	42a3      	cmp	r3, r4
 800a676:	d1fb      	bne.n	800a670 <_malloc_r+0xdc>
 800a678:	2300      	movs	r3, #0
 800a67a:	6053      	str	r3, [r2, #4]
 800a67c:	e7de      	b.n	800a63c <_malloc_r+0xa8>
 800a67e:	230c      	movs	r3, #12
 800a680:	6033      	str	r3, [r6, #0]
 800a682:	4630      	mov	r0, r6
 800a684:	f000 f80c 	bl	800a6a0 <__malloc_unlock>
 800a688:	e794      	b.n	800a5b4 <_malloc_r+0x20>
 800a68a:	6005      	str	r5, [r0, #0]
 800a68c:	e7d6      	b.n	800a63c <_malloc_r+0xa8>
 800a68e:	bf00      	nop
 800a690:	20002b14 	.word	0x20002b14

0800a694 <__malloc_lock>:
 800a694:	4801      	ldr	r0, [pc, #4]	@ (800a69c <__malloc_lock+0x8>)
 800a696:	f001 b960 	b.w	800b95a <__retarget_lock_acquire_recursive>
 800a69a:	bf00      	nop
 800a69c:	20002c58 	.word	0x20002c58

0800a6a0 <__malloc_unlock>:
 800a6a0:	4801      	ldr	r0, [pc, #4]	@ (800a6a8 <__malloc_unlock+0x8>)
 800a6a2:	f001 b95b 	b.w	800b95c <__retarget_lock_release_recursive>
 800a6a6:	bf00      	nop
 800a6a8:	20002c58 	.word	0x20002c58

0800a6ac <__cvt>:
 800a6ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b0:	ec57 6b10 	vmov	r6, r7, d0
 800a6b4:	2f00      	cmp	r7, #0
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	463b      	mov	r3, r7
 800a6bc:	bfbb      	ittet	lt
 800a6be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a6c2:	461f      	movlt	r7, r3
 800a6c4:	2300      	movge	r3, #0
 800a6c6:	232d      	movlt	r3, #45	@ 0x2d
 800a6c8:	700b      	strb	r3, [r1, #0]
 800a6ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a6d0:	4691      	mov	r9, r2
 800a6d2:	f023 0820 	bic.w	r8, r3, #32
 800a6d6:	bfbc      	itt	lt
 800a6d8:	4632      	movlt	r2, r6
 800a6da:	4616      	movlt	r6, r2
 800a6dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a6e0:	d005      	beq.n	800a6ee <__cvt+0x42>
 800a6e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a6e6:	d100      	bne.n	800a6ea <__cvt+0x3e>
 800a6e8:	3401      	adds	r4, #1
 800a6ea:	2102      	movs	r1, #2
 800a6ec:	e000      	b.n	800a6f0 <__cvt+0x44>
 800a6ee:	2103      	movs	r1, #3
 800a6f0:	ab03      	add	r3, sp, #12
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	ab02      	add	r3, sp, #8
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	ec47 6b10 	vmov	d0, r6, r7
 800a6fc:	4653      	mov	r3, sl
 800a6fe:	4622      	mov	r2, r4
 800a700:	f001 f9be 	bl	800ba80 <_dtoa_r>
 800a704:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a708:	4605      	mov	r5, r0
 800a70a:	d119      	bne.n	800a740 <__cvt+0x94>
 800a70c:	f019 0f01 	tst.w	r9, #1
 800a710:	d00e      	beq.n	800a730 <__cvt+0x84>
 800a712:	eb00 0904 	add.w	r9, r0, r4
 800a716:	2200      	movs	r2, #0
 800a718:	2300      	movs	r3, #0
 800a71a:	4630      	mov	r0, r6
 800a71c:	4639      	mov	r1, r7
 800a71e:	f7f6 f9f3 	bl	8000b08 <__aeabi_dcmpeq>
 800a722:	b108      	cbz	r0, 800a728 <__cvt+0x7c>
 800a724:	f8cd 900c 	str.w	r9, [sp, #12]
 800a728:	2230      	movs	r2, #48	@ 0x30
 800a72a:	9b03      	ldr	r3, [sp, #12]
 800a72c:	454b      	cmp	r3, r9
 800a72e:	d31e      	bcc.n	800a76e <__cvt+0xc2>
 800a730:	9b03      	ldr	r3, [sp, #12]
 800a732:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a734:	1b5b      	subs	r3, r3, r5
 800a736:	4628      	mov	r0, r5
 800a738:	6013      	str	r3, [r2, #0]
 800a73a:	b004      	add	sp, #16
 800a73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a740:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a744:	eb00 0904 	add.w	r9, r0, r4
 800a748:	d1e5      	bne.n	800a716 <__cvt+0x6a>
 800a74a:	7803      	ldrb	r3, [r0, #0]
 800a74c:	2b30      	cmp	r3, #48	@ 0x30
 800a74e:	d10a      	bne.n	800a766 <__cvt+0xba>
 800a750:	2200      	movs	r2, #0
 800a752:	2300      	movs	r3, #0
 800a754:	4630      	mov	r0, r6
 800a756:	4639      	mov	r1, r7
 800a758:	f7f6 f9d6 	bl	8000b08 <__aeabi_dcmpeq>
 800a75c:	b918      	cbnz	r0, 800a766 <__cvt+0xba>
 800a75e:	f1c4 0401 	rsb	r4, r4, #1
 800a762:	f8ca 4000 	str.w	r4, [sl]
 800a766:	f8da 3000 	ldr.w	r3, [sl]
 800a76a:	4499      	add	r9, r3
 800a76c:	e7d3      	b.n	800a716 <__cvt+0x6a>
 800a76e:	1c59      	adds	r1, r3, #1
 800a770:	9103      	str	r1, [sp, #12]
 800a772:	701a      	strb	r2, [r3, #0]
 800a774:	e7d9      	b.n	800a72a <__cvt+0x7e>

0800a776 <__exponent>:
 800a776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a778:	2900      	cmp	r1, #0
 800a77a:	bfba      	itte	lt
 800a77c:	4249      	neglt	r1, r1
 800a77e:	232d      	movlt	r3, #45	@ 0x2d
 800a780:	232b      	movge	r3, #43	@ 0x2b
 800a782:	2909      	cmp	r1, #9
 800a784:	7002      	strb	r2, [r0, #0]
 800a786:	7043      	strb	r3, [r0, #1]
 800a788:	dd29      	ble.n	800a7de <__exponent+0x68>
 800a78a:	f10d 0307 	add.w	r3, sp, #7
 800a78e:	461d      	mov	r5, r3
 800a790:	270a      	movs	r7, #10
 800a792:	461a      	mov	r2, r3
 800a794:	fbb1 f6f7 	udiv	r6, r1, r7
 800a798:	fb07 1416 	mls	r4, r7, r6, r1
 800a79c:	3430      	adds	r4, #48	@ 0x30
 800a79e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	2c63      	cmp	r4, #99	@ 0x63
 800a7a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	dcf1      	bgt.n	800a792 <__exponent+0x1c>
 800a7ae:	3130      	adds	r1, #48	@ 0x30
 800a7b0:	1e94      	subs	r4, r2, #2
 800a7b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a7b6:	1c41      	adds	r1, r0, #1
 800a7b8:	4623      	mov	r3, r4
 800a7ba:	42ab      	cmp	r3, r5
 800a7bc:	d30a      	bcc.n	800a7d4 <__exponent+0x5e>
 800a7be:	f10d 0309 	add.w	r3, sp, #9
 800a7c2:	1a9b      	subs	r3, r3, r2
 800a7c4:	42ac      	cmp	r4, r5
 800a7c6:	bf88      	it	hi
 800a7c8:	2300      	movhi	r3, #0
 800a7ca:	3302      	adds	r3, #2
 800a7cc:	4403      	add	r3, r0
 800a7ce:	1a18      	subs	r0, r3, r0
 800a7d0:	b003      	add	sp, #12
 800a7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a7d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a7dc:	e7ed      	b.n	800a7ba <__exponent+0x44>
 800a7de:	2330      	movs	r3, #48	@ 0x30
 800a7e0:	3130      	adds	r1, #48	@ 0x30
 800a7e2:	7083      	strb	r3, [r0, #2]
 800a7e4:	70c1      	strb	r1, [r0, #3]
 800a7e6:	1d03      	adds	r3, r0, #4
 800a7e8:	e7f1      	b.n	800a7ce <__exponent+0x58>
	...

0800a7ec <_printf_float>:
 800a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	b08d      	sub	sp, #52	@ 0x34
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a7f8:	4616      	mov	r6, r2
 800a7fa:	461f      	mov	r7, r3
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	f001 f827 	bl	800b850 <_localeconv_r>
 800a802:	6803      	ldr	r3, [r0, #0]
 800a804:	9304      	str	r3, [sp, #16]
 800a806:	4618      	mov	r0, r3
 800a808:	f7f5 fd52 	bl	80002b0 <strlen>
 800a80c:	2300      	movs	r3, #0
 800a80e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a810:	f8d8 3000 	ldr.w	r3, [r8]
 800a814:	9005      	str	r0, [sp, #20]
 800a816:	3307      	adds	r3, #7
 800a818:	f023 0307 	bic.w	r3, r3, #7
 800a81c:	f103 0208 	add.w	r2, r3, #8
 800a820:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a824:	f8d4 b000 	ldr.w	fp, [r4]
 800a828:	f8c8 2000 	str.w	r2, [r8]
 800a82c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a830:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a834:	9307      	str	r3, [sp, #28]
 800a836:	f8cd 8018 	str.w	r8, [sp, #24]
 800a83a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a83e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a842:	4b9c      	ldr	r3, [pc, #624]	@ (800aab4 <_printf_float+0x2c8>)
 800a844:	f04f 32ff 	mov.w	r2, #4294967295
 800a848:	f7f6 f990 	bl	8000b6c <__aeabi_dcmpun>
 800a84c:	bb70      	cbnz	r0, 800a8ac <_printf_float+0xc0>
 800a84e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a852:	4b98      	ldr	r3, [pc, #608]	@ (800aab4 <_printf_float+0x2c8>)
 800a854:	f04f 32ff 	mov.w	r2, #4294967295
 800a858:	f7f6 f96a 	bl	8000b30 <__aeabi_dcmple>
 800a85c:	bb30      	cbnz	r0, 800a8ac <_printf_float+0xc0>
 800a85e:	2200      	movs	r2, #0
 800a860:	2300      	movs	r3, #0
 800a862:	4640      	mov	r0, r8
 800a864:	4649      	mov	r1, r9
 800a866:	f7f6 f959 	bl	8000b1c <__aeabi_dcmplt>
 800a86a:	b110      	cbz	r0, 800a872 <_printf_float+0x86>
 800a86c:	232d      	movs	r3, #45	@ 0x2d
 800a86e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a872:	4a91      	ldr	r2, [pc, #580]	@ (800aab8 <_printf_float+0x2cc>)
 800a874:	4b91      	ldr	r3, [pc, #580]	@ (800aabc <_printf_float+0x2d0>)
 800a876:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a87a:	bf94      	ite	ls
 800a87c:	4690      	movls	r8, r2
 800a87e:	4698      	movhi	r8, r3
 800a880:	2303      	movs	r3, #3
 800a882:	6123      	str	r3, [r4, #16]
 800a884:	f02b 0304 	bic.w	r3, fp, #4
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	f04f 0900 	mov.w	r9, #0
 800a88e:	9700      	str	r7, [sp, #0]
 800a890:	4633      	mov	r3, r6
 800a892:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a894:	4621      	mov	r1, r4
 800a896:	4628      	mov	r0, r5
 800a898:	f000 f9d2 	bl	800ac40 <_printf_common>
 800a89c:	3001      	adds	r0, #1
 800a89e:	f040 808d 	bne.w	800a9bc <_printf_float+0x1d0>
 800a8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a6:	b00d      	add	sp, #52	@ 0x34
 800a8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ac:	4642      	mov	r2, r8
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	f7f6 f95a 	bl	8000b6c <__aeabi_dcmpun>
 800a8b8:	b140      	cbz	r0, 800a8cc <_printf_float+0xe0>
 800a8ba:	464b      	mov	r3, r9
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	bfbc      	itt	lt
 800a8c0:	232d      	movlt	r3, #45	@ 0x2d
 800a8c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a8c6:	4a7e      	ldr	r2, [pc, #504]	@ (800aac0 <_printf_float+0x2d4>)
 800a8c8:	4b7e      	ldr	r3, [pc, #504]	@ (800aac4 <_printf_float+0x2d8>)
 800a8ca:	e7d4      	b.n	800a876 <_printf_float+0x8a>
 800a8cc:	6863      	ldr	r3, [r4, #4]
 800a8ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a8d2:	9206      	str	r2, [sp, #24]
 800a8d4:	1c5a      	adds	r2, r3, #1
 800a8d6:	d13b      	bne.n	800a950 <_printf_float+0x164>
 800a8d8:	2306      	movs	r3, #6
 800a8da:	6063      	str	r3, [r4, #4]
 800a8dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	6022      	str	r2, [r4, #0]
 800a8e4:	9303      	str	r3, [sp, #12]
 800a8e6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a8e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a8ec:	ab09      	add	r3, sp, #36	@ 0x24
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	6861      	ldr	r1, [r4, #4]
 800a8f2:	ec49 8b10 	vmov	d0, r8, r9
 800a8f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f7ff fed6 	bl	800a6ac <__cvt>
 800a900:	9b06      	ldr	r3, [sp, #24]
 800a902:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a904:	2b47      	cmp	r3, #71	@ 0x47
 800a906:	4680      	mov	r8, r0
 800a908:	d129      	bne.n	800a95e <_printf_float+0x172>
 800a90a:	1cc8      	adds	r0, r1, #3
 800a90c:	db02      	blt.n	800a914 <_printf_float+0x128>
 800a90e:	6863      	ldr	r3, [r4, #4]
 800a910:	4299      	cmp	r1, r3
 800a912:	dd41      	ble.n	800a998 <_printf_float+0x1ac>
 800a914:	f1aa 0a02 	sub.w	sl, sl, #2
 800a918:	fa5f fa8a 	uxtb.w	sl, sl
 800a91c:	3901      	subs	r1, #1
 800a91e:	4652      	mov	r2, sl
 800a920:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a924:	9109      	str	r1, [sp, #36]	@ 0x24
 800a926:	f7ff ff26 	bl	800a776 <__exponent>
 800a92a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a92c:	1813      	adds	r3, r2, r0
 800a92e:	2a01      	cmp	r2, #1
 800a930:	4681      	mov	r9, r0
 800a932:	6123      	str	r3, [r4, #16]
 800a934:	dc02      	bgt.n	800a93c <_printf_float+0x150>
 800a936:	6822      	ldr	r2, [r4, #0]
 800a938:	07d2      	lsls	r2, r2, #31
 800a93a:	d501      	bpl.n	800a940 <_printf_float+0x154>
 800a93c:	3301      	adds	r3, #1
 800a93e:	6123      	str	r3, [r4, #16]
 800a940:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a944:	2b00      	cmp	r3, #0
 800a946:	d0a2      	beq.n	800a88e <_printf_float+0xa2>
 800a948:	232d      	movs	r3, #45	@ 0x2d
 800a94a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a94e:	e79e      	b.n	800a88e <_printf_float+0xa2>
 800a950:	9a06      	ldr	r2, [sp, #24]
 800a952:	2a47      	cmp	r2, #71	@ 0x47
 800a954:	d1c2      	bne.n	800a8dc <_printf_float+0xf0>
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1c0      	bne.n	800a8dc <_printf_float+0xf0>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e7bd      	b.n	800a8da <_printf_float+0xee>
 800a95e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a962:	d9db      	bls.n	800a91c <_printf_float+0x130>
 800a964:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a968:	d118      	bne.n	800a99c <_printf_float+0x1b0>
 800a96a:	2900      	cmp	r1, #0
 800a96c:	6863      	ldr	r3, [r4, #4]
 800a96e:	dd0b      	ble.n	800a988 <_printf_float+0x19c>
 800a970:	6121      	str	r1, [r4, #16]
 800a972:	b913      	cbnz	r3, 800a97a <_printf_float+0x18e>
 800a974:	6822      	ldr	r2, [r4, #0]
 800a976:	07d0      	lsls	r0, r2, #31
 800a978:	d502      	bpl.n	800a980 <_printf_float+0x194>
 800a97a:	3301      	adds	r3, #1
 800a97c:	440b      	add	r3, r1
 800a97e:	6123      	str	r3, [r4, #16]
 800a980:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a982:	f04f 0900 	mov.w	r9, #0
 800a986:	e7db      	b.n	800a940 <_printf_float+0x154>
 800a988:	b913      	cbnz	r3, 800a990 <_printf_float+0x1a4>
 800a98a:	6822      	ldr	r2, [r4, #0]
 800a98c:	07d2      	lsls	r2, r2, #31
 800a98e:	d501      	bpl.n	800a994 <_printf_float+0x1a8>
 800a990:	3302      	adds	r3, #2
 800a992:	e7f4      	b.n	800a97e <_printf_float+0x192>
 800a994:	2301      	movs	r3, #1
 800a996:	e7f2      	b.n	800a97e <_printf_float+0x192>
 800a998:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a99c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a99e:	4299      	cmp	r1, r3
 800a9a0:	db05      	blt.n	800a9ae <_printf_float+0x1c2>
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	6121      	str	r1, [r4, #16]
 800a9a6:	07d8      	lsls	r0, r3, #31
 800a9a8:	d5ea      	bpl.n	800a980 <_printf_float+0x194>
 800a9aa:	1c4b      	adds	r3, r1, #1
 800a9ac:	e7e7      	b.n	800a97e <_printf_float+0x192>
 800a9ae:	2900      	cmp	r1, #0
 800a9b0:	bfd4      	ite	le
 800a9b2:	f1c1 0202 	rsble	r2, r1, #2
 800a9b6:	2201      	movgt	r2, #1
 800a9b8:	4413      	add	r3, r2
 800a9ba:	e7e0      	b.n	800a97e <_printf_float+0x192>
 800a9bc:	6823      	ldr	r3, [r4, #0]
 800a9be:	055a      	lsls	r2, r3, #21
 800a9c0:	d407      	bmi.n	800a9d2 <_printf_float+0x1e6>
 800a9c2:	6923      	ldr	r3, [r4, #16]
 800a9c4:	4642      	mov	r2, r8
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	47b8      	blx	r7
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	d12b      	bne.n	800aa28 <_printf_float+0x23c>
 800a9d0:	e767      	b.n	800a8a2 <_printf_float+0xb6>
 800a9d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a9d6:	f240 80dd 	bls.w	800ab94 <_printf_float+0x3a8>
 800a9da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f7f6 f891 	bl	8000b08 <__aeabi_dcmpeq>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	d033      	beq.n	800aa52 <_printf_float+0x266>
 800a9ea:	4a37      	ldr	r2, [pc, #220]	@ (800aac8 <_printf_float+0x2dc>)
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	4631      	mov	r1, r6
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	47b8      	blx	r7
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	f43f af54 	beq.w	800a8a2 <_printf_float+0xb6>
 800a9fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a9fe:	4543      	cmp	r3, r8
 800aa00:	db02      	blt.n	800aa08 <_printf_float+0x21c>
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	07d8      	lsls	r0, r3, #31
 800aa06:	d50f      	bpl.n	800aa28 <_printf_float+0x23c>
 800aa08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4628      	mov	r0, r5
 800aa10:	47b8      	blx	r7
 800aa12:	3001      	adds	r0, #1
 800aa14:	f43f af45 	beq.w	800a8a2 <_printf_float+0xb6>
 800aa18:	f04f 0900 	mov.w	r9, #0
 800aa1c:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa20:	f104 0a1a 	add.w	sl, r4, #26
 800aa24:	45c8      	cmp	r8, r9
 800aa26:	dc09      	bgt.n	800aa3c <_printf_float+0x250>
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	079b      	lsls	r3, r3, #30
 800aa2c:	f100 8103 	bmi.w	800ac36 <_printf_float+0x44a>
 800aa30:	68e0      	ldr	r0, [r4, #12]
 800aa32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa34:	4298      	cmp	r0, r3
 800aa36:	bfb8      	it	lt
 800aa38:	4618      	movlt	r0, r3
 800aa3a:	e734      	b.n	800a8a6 <_printf_float+0xba>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	4652      	mov	r2, sl
 800aa40:	4631      	mov	r1, r6
 800aa42:	4628      	mov	r0, r5
 800aa44:	47b8      	blx	r7
 800aa46:	3001      	adds	r0, #1
 800aa48:	f43f af2b 	beq.w	800a8a2 <_printf_float+0xb6>
 800aa4c:	f109 0901 	add.w	r9, r9, #1
 800aa50:	e7e8      	b.n	800aa24 <_printf_float+0x238>
 800aa52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	dc39      	bgt.n	800aacc <_printf_float+0x2e0>
 800aa58:	4a1b      	ldr	r2, [pc, #108]	@ (800aac8 <_printf_float+0x2dc>)
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	4628      	mov	r0, r5
 800aa60:	47b8      	blx	r7
 800aa62:	3001      	adds	r0, #1
 800aa64:	f43f af1d 	beq.w	800a8a2 <_printf_float+0xb6>
 800aa68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aa6c:	ea59 0303 	orrs.w	r3, r9, r3
 800aa70:	d102      	bne.n	800aa78 <_printf_float+0x28c>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	07d9      	lsls	r1, r3, #31
 800aa76:	d5d7      	bpl.n	800aa28 <_printf_float+0x23c>
 800aa78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa7c:	4631      	mov	r1, r6
 800aa7e:	4628      	mov	r0, r5
 800aa80:	47b8      	blx	r7
 800aa82:	3001      	adds	r0, #1
 800aa84:	f43f af0d 	beq.w	800a8a2 <_printf_float+0xb6>
 800aa88:	f04f 0a00 	mov.w	sl, #0
 800aa8c:	f104 0b1a 	add.w	fp, r4, #26
 800aa90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa92:	425b      	negs	r3, r3
 800aa94:	4553      	cmp	r3, sl
 800aa96:	dc01      	bgt.n	800aa9c <_printf_float+0x2b0>
 800aa98:	464b      	mov	r3, r9
 800aa9a:	e793      	b.n	800a9c4 <_printf_float+0x1d8>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	465a      	mov	r2, fp
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	47b8      	blx	r7
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	f43f aefb 	beq.w	800a8a2 <_printf_float+0xb6>
 800aaac:	f10a 0a01 	add.w	sl, sl, #1
 800aab0:	e7ee      	b.n	800aa90 <_printf_float+0x2a4>
 800aab2:	bf00      	nop
 800aab4:	7fefffff 	.word	0x7fefffff
 800aab8:	0800fb9c 	.word	0x0800fb9c
 800aabc:	0800fba0 	.word	0x0800fba0
 800aac0:	0800fba4 	.word	0x0800fba4
 800aac4:	0800fba8 	.word	0x0800fba8
 800aac8:	0800fbac 	.word	0x0800fbac
 800aacc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aace:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aad2:	4553      	cmp	r3, sl
 800aad4:	bfa8      	it	ge
 800aad6:	4653      	movge	r3, sl
 800aad8:	2b00      	cmp	r3, #0
 800aada:	4699      	mov	r9, r3
 800aadc:	dc36      	bgt.n	800ab4c <_printf_float+0x360>
 800aade:	f04f 0b00 	mov.w	fp, #0
 800aae2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aae6:	f104 021a 	add.w	r2, r4, #26
 800aaea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aaec:	9306      	str	r3, [sp, #24]
 800aaee:	eba3 0309 	sub.w	r3, r3, r9
 800aaf2:	455b      	cmp	r3, fp
 800aaf4:	dc31      	bgt.n	800ab5a <_printf_float+0x36e>
 800aaf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf8:	459a      	cmp	sl, r3
 800aafa:	dc3a      	bgt.n	800ab72 <_printf_float+0x386>
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	07da      	lsls	r2, r3, #31
 800ab00:	d437      	bmi.n	800ab72 <_printf_float+0x386>
 800ab02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab04:	ebaa 0903 	sub.w	r9, sl, r3
 800ab08:	9b06      	ldr	r3, [sp, #24]
 800ab0a:	ebaa 0303 	sub.w	r3, sl, r3
 800ab0e:	4599      	cmp	r9, r3
 800ab10:	bfa8      	it	ge
 800ab12:	4699      	movge	r9, r3
 800ab14:	f1b9 0f00 	cmp.w	r9, #0
 800ab18:	dc33      	bgt.n	800ab82 <_printf_float+0x396>
 800ab1a:	f04f 0800 	mov.w	r8, #0
 800ab1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab22:	f104 0b1a 	add.w	fp, r4, #26
 800ab26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab28:	ebaa 0303 	sub.w	r3, sl, r3
 800ab2c:	eba3 0309 	sub.w	r3, r3, r9
 800ab30:	4543      	cmp	r3, r8
 800ab32:	f77f af79 	ble.w	800aa28 <_printf_float+0x23c>
 800ab36:	2301      	movs	r3, #1
 800ab38:	465a      	mov	r2, fp
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	47b8      	blx	r7
 800ab40:	3001      	adds	r0, #1
 800ab42:	f43f aeae 	beq.w	800a8a2 <_printf_float+0xb6>
 800ab46:	f108 0801 	add.w	r8, r8, #1
 800ab4a:	e7ec      	b.n	800ab26 <_printf_float+0x33a>
 800ab4c:	4642      	mov	r2, r8
 800ab4e:	4631      	mov	r1, r6
 800ab50:	4628      	mov	r0, r5
 800ab52:	47b8      	blx	r7
 800ab54:	3001      	adds	r0, #1
 800ab56:	d1c2      	bne.n	800aade <_printf_float+0x2f2>
 800ab58:	e6a3      	b.n	800a8a2 <_printf_float+0xb6>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	4628      	mov	r0, r5
 800ab60:	9206      	str	r2, [sp, #24]
 800ab62:	47b8      	blx	r7
 800ab64:	3001      	adds	r0, #1
 800ab66:	f43f ae9c 	beq.w	800a8a2 <_printf_float+0xb6>
 800ab6a:	9a06      	ldr	r2, [sp, #24]
 800ab6c:	f10b 0b01 	add.w	fp, fp, #1
 800ab70:	e7bb      	b.n	800aaea <_printf_float+0x2fe>
 800ab72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab76:	4631      	mov	r1, r6
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b8      	blx	r7
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	d1c0      	bne.n	800ab02 <_printf_float+0x316>
 800ab80:	e68f      	b.n	800a8a2 <_printf_float+0xb6>
 800ab82:	9a06      	ldr	r2, [sp, #24]
 800ab84:	464b      	mov	r3, r9
 800ab86:	4442      	add	r2, r8
 800ab88:	4631      	mov	r1, r6
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	47b8      	blx	r7
 800ab8e:	3001      	adds	r0, #1
 800ab90:	d1c3      	bne.n	800ab1a <_printf_float+0x32e>
 800ab92:	e686      	b.n	800a8a2 <_printf_float+0xb6>
 800ab94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab98:	f1ba 0f01 	cmp.w	sl, #1
 800ab9c:	dc01      	bgt.n	800aba2 <_printf_float+0x3b6>
 800ab9e:	07db      	lsls	r3, r3, #31
 800aba0:	d536      	bpl.n	800ac10 <_printf_float+0x424>
 800aba2:	2301      	movs	r3, #1
 800aba4:	4642      	mov	r2, r8
 800aba6:	4631      	mov	r1, r6
 800aba8:	4628      	mov	r0, r5
 800abaa:	47b8      	blx	r7
 800abac:	3001      	adds	r0, #1
 800abae:	f43f ae78 	beq.w	800a8a2 <_printf_float+0xb6>
 800abb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abb6:	4631      	mov	r1, r6
 800abb8:	4628      	mov	r0, r5
 800abba:	47b8      	blx	r7
 800abbc:	3001      	adds	r0, #1
 800abbe:	f43f ae70 	beq.w	800a8a2 <_printf_float+0xb6>
 800abc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800abc6:	2200      	movs	r2, #0
 800abc8:	2300      	movs	r3, #0
 800abca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abce:	f7f5 ff9b 	bl	8000b08 <__aeabi_dcmpeq>
 800abd2:	b9c0      	cbnz	r0, 800ac06 <_printf_float+0x41a>
 800abd4:	4653      	mov	r3, sl
 800abd6:	f108 0201 	add.w	r2, r8, #1
 800abda:	4631      	mov	r1, r6
 800abdc:	4628      	mov	r0, r5
 800abde:	47b8      	blx	r7
 800abe0:	3001      	adds	r0, #1
 800abe2:	d10c      	bne.n	800abfe <_printf_float+0x412>
 800abe4:	e65d      	b.n	800a8a2 <_printf_float+0xb6>
 800abe6:	2301      	movs	r3, #1
 800abe8:	465a      	mov	r2, fp
 800abea:	4631      	mov	r1, r6
 800abec:	4628      	mov	r0, r5
 800abee:	47b8      	blx	r7
 800abf0:	3001      	adds	r0, #1
 800abf2:	f43f ae56 	beq.w	800a8a2 <_printf_float+0xb6>
 800abf6:	f108 0801 	add.w	r8, r8, #1
 800abfa:	45d0      	cmp	r8, sl
 800abfc:	dbf3      	blt.n	800abe6 <_printf_float+0x3fa>
 800abfe:	464b      	mov	r3, r9
 800ac00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ac04:	e6df      	b.n	800a9c6 <_printf_float+0x1da>
 800ac06:	f04f 0800 	mov.w	r8, #0
 800ac0a:	f104 0b1a 	add.w	fp, r4, #26
 800ac0e:	e7f4      	b.n	800abfa <_printf_float+0x40e>
 800ac10:	2301      	movs	r3, #1
 800ac12:	4642      	mov	r2, r8
 800ac14:	e7e1      	b.n	800abda <_printf_float+0x3ee>
 800ac16:	2301      	movs	r3, #1
 800ac18:	464a      	mov	r2, r9
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	47b8      	blx	r7
 800ac20:	3001      	adds	r0, #1
 800ac22:	f43f ae3e 	beq.w	800a8a2 <_printf_float+0xb6>
 800ac26:	f108 0801 	add.w	r8, r8, #1
 800ac2a:	68e3      	ldr	r3, [r4, #12]
 800ac2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac2e:	1a5b      	subs	r3, r3, r1
 800ac30:	4543      	cmp	r3, r8
 800ac32:	dcf0      	bgt.n	800ac16 <_printf_float+0x42a>
 800ac34:	e6fc      	b.n	800aa30 <_printf_float+0x244>
 800ac36:	f04f 0800 	mov.w	r8, #0
 800ac3a:	f104 0919 	add.w	r9, r4, #25
 800ac3e:	e7f4      	b.n	800ac2a <_printf_float+0x43e>

0800ac40 <_printf_common>:
 800ac40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac44:	4616      	mov	r6, r2
 800ac46:	4698      	mov	r8, r3
 800ac48:	688a      	ldr	r2, [r1, #8]
 800ac4a:	690b      	ldr	r3, [r1, #16]
 800ac4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac50:	4293      	cmp	r3, r2
 800ac52:	bfb8      	it	lt
 800ac54:	4613      	movlt	r3, r2
 800ac56:	6033      	str	r3, [r6, #0]
 800ac58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac5c:	4607      	mov	r7, r0
 800ac5e:	460c      	mov	r4, r1
 800ac60:	b10a      	cbz	r2, 800ac66 <_printf_common+0x26>
 800ac62:	3301      	adds	r3, #1
 800ac64:	6033      	str	r3, [r6, #0]
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	0699      	lsls	r1, r3, #26
 800ac6a:	bf42      	ittt	mi
 800ac6c:	6833      	ldrmi	r3, [r6, #0]
 800ac6e:	3302      	addmi	r3, #2
 800ac70:	6033      	strmi	r3, [r6, #0]
 800ac72:	6825      	ldr	r5, [r4, #0]
 800ac74:	f015 0506 	ands.w	r5, r5, #6
 800ac78:	d106      	bne.n	800ac88 <_printf_common+0x48>
 800ac7a:	f104 0a19 	add.w	sl, r4, #25
 800ac7e:	68e3      	ldr	r3, [r4, #12]
 800ac80:	6832      	ldr	r2, [r6, #0]
 800ac82:	1a9b      	subs	r3, r3, r2
 800ac84:	42ab      	cmp	r3, r5
 800ac86:	dc26      	bgt.n	800acd6 <_printf_common+0x96>
 800ac88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac8c:	6822      	ldr	r2, [r4, #0]
 800ac8e:	3b00      	subs	r3, #0
 800ac90:	bf18      	it	ne
 800ac92:	2301      	movne	r3, #1
 800ac94:	0692      	lsls	r2, r2, #26
 800ac96:	d42b      	bmi.n	800acf0 <_printf_common+0xb0>
 800ac98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac9c:	4641      	mov	r1, r8
 800ac9e:	4638      	mov	r0, r7
 800aca0:	47c8      	blx	r9
 800aca2:	3001      	adds	r0, #1
 800aca4:	d01e      	beq.n	800ace4 <_printf_common+0xa4>
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	6922      	ldr	r2, [r4, #16]
 800acaa:	f003 0306 	and.w	r3, r3, #6
 800acae:	2b04      	cmp	r3, #4
 800acb0:	bf02      	ittt	eq
 800acb2:	68e5      	ldreq	r5, [r4, #12]
 800acb4:	6833      	ldreq	r3, [r6, #0]
 800acb6:	1aed      	subeq	r5, r5, r3
 800acb8:	68a3      	ldr	r3, [r4, #8]
 800acba:	bf0c      	ite	eq
 800acbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acc0:	2500      	movne	r5, #0
 800acc2:	4293      	cmp	r3, r2
 800acc4:	bfc4      	itt	gt
 800acc6:	1a9b      	subgt	r3, r3, r2
 800acc8:	18ed      	addgt	r5, r5, r3
 800acca:	2600      	movs	r6, #0
 800accc:	341a      	adds	r4, #26
 800acce:	42b5      	cmp	r5, r6
 800acd0:	d11a      	bne.n	800ad08 <_printf_common+0xc8>
 800acd2:	2000      	movs	r0, #0
 800acd4:	e008      	b.n	800ace8 <_printf_common+0xa8>
 800acd6:	2301      	movs	r3, #1
 800acd8:	4652      	mov	r2, sl
 800acda:	4641      	mov	r1, r8
 800acdc:	4638      	mov	r0, r7
 800acde:	47c8      	blx	r9
 800ace0:	3001      	adds	r0, #1
 800ace2:	d103      	bne.n	800acec <_printf_common+0xac>
 800ace4:	f04f 30ff 	mov.w	r0, #4294967295
 800ace8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acec:	3501      	adds	r5, #1
 800acee:	e7c6      	b.n	800ac7e <_printf_common+0x3e>
 800acf0:	18e1      	adds	r1, r4, r3
 800acf2:	1c5a      	adds	r2, r3, #1
 800acf4:	2030      	movs	r0, #48	@ 0x30
 800acf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800acfa:	4422      	add	r2, r4
 800acfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad04:	3302      	adds	r3, #2
 800ad06:	e7c7      	b.n	800ac98 <_printf_common+0x58>
 800ad08:	2301      	movs	r3, #1
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	4641      	mov	r1, r8
 800ad0e:	4638      	mov	r0, r7
 800ad10:	47c8      	blx	r9
 800ad12:	3001      	adds	r0, #1
 800ad14:	d0e6      	beq.n	800ace4 <_printf_common+0xa4>
 800ad16:	3601      	adds	r6, #1
 800ad18:	e7d9      	b.n	800acce <_printf_common+0x8e>
	...

0800ad1c <_printf_i>:
 800ad1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad20:	7e0f      	ldrb	r7, [r1, #24]
 800ad22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad24:	2f78      	cmp	r7, #120	@ 0x78
 800ad26:	4691      	mov	r9, r2
 800ad28:	4680      	mov	r8, r0
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	469a      	mov	sl, r3
 800ad2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad32:	d807      	bhi.n	800ad44 <_printf_i+0x28>
 800ad34:	2f62      	cmp	r7, #98	@ 0x62
 800ad36:	d80a      	bhi.n	800ad4e <_printf_i+0x32>
 800ad38:	2f00      	cmp	r7, #0
 800ad3a:	f000 80d2 	beq.w	800aee2 <_printf_i+0x1c6>
 800ad3e:	2f58      	cmp	r7, #88	@ 0x58
 800ad40:	f000 80b9 	beq.w	800aeb6 <_printf_i+0x19a>
 800ad44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad4c:	e03a      	b.n	800adc4 <_printf_i+0xa8>
 800ad4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad52:	2b15      	cmp	r3, #21
 800ad54:	d8f6      	bhi.n	800ad44 <_printf_i+0x28>
 800ad56:	a101      	add	r1, pc, #4	@ (adr r1, 800ad5c <_printf_i+0x40>)
 800ad58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad5c:	0800adb5 	.word	0x0800adb5
 800ad60:	0800adc9 	.word	0x0800adc9
 800ad64:	0800ad45 	.word	0x0800ad45
 800ad68:	0800ad45 	.word	0x0800ad45
 800ad6c:	0800ad45 	.word	0x0800ad45
 800ad70:	0800ad45 	.word	0x0800ad45
 800ad74:	0800adc9 	.word	0x0800adc9
 800ad78:	0800ad45 	.word	0x0800ad45
 800ad7c:	0800ad45 	.word	0x0800ad45
 800ad80:	0800ad45 	.word	0x0800ad45
 800ad84:	0800ad45 	.word	0x0800ad45
 800ad88:	0800aec9 	.word	0x0800aec9
 800ad8c:	0800adf3 	.word	0x0800adf3
 800ad90:	0800ae83 	.word	0x0800ae83
 800ad94:	0800ad45 	.word	0x0800ad45
 800ad98:	0800ad45 	.word	0x0800ad45
 800ad9c:	0800aeeb 	.word	0x0800aeeb
 800ada0:	0800ad45 	.word	0x0800ad45
 800ada4:	0800adf3 	.word	0x0800adf3
 800ada8:	0800ad45 	.word	0x0800ad45
 800adac:	0800ad45 	.word	0x0800ad45
 800adb0:	0800ae8b 	.word	0x0800ae8b
 800adb4:	6833      	ldr	r3, [r6, #0]
 800adb6:	1d1a      	adds	r2, r3, #4
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	6032      	str	r2, [r6, #0]
 800adbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800adc4:	2301      	movs	r3, #1
 800adc6:	e09d      	b.n	800af04 <_printf_i+0x1e8>
 800adc8:	6833      	ldr	r3, [r6, #0]
 800adca:	6820      	ldr	r0, [r4, #0]
 800adcc:	1d19      	adds	r1, r3, #4
 800adce:	6031      	str	r1, [r6, #0]
 800add0:	0606      	lsls	r6, r0, #24
 800add2:	d501      	bpl.n	800add8 <_printf_i+0xbc>
 800add4:	681d      	ldr	r5, [r3, #0]
 800add6:	e003      	b.n	800ade0 <_printf_i+0xc4>
 800add8:	0645      	lsls	r5, r0, #25
 800adda:	d5fb      	bpl.n	800add4 <_printf_i+0xb8>
 800addc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ade0:	2d00      	cmp	r5, #0
 800ade2:	da03      	bge.n	800adec <_printf_i+0xd0>
 800ade4:	232d      	movs	r3, #45	@ 0x2d
 800ade6:	426d      	negs	r5, r5
 800ade8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adec:	4859      	ldr	r0, [pc, #356]	@ (800af54 <_printf_i+0x238>)
 800adee:	230a      	movs	r3, #10
 800adf0:	e011      	b.n	800ae16 <_printf_i+0xfa>
 800adf2:	6821      	ldr	r1, [r4, #0]
 800adf4:	6833      	ldr	r3, [r6, #0]
 800adf6:	0608      	lsls	r0, r1, #24
 800adf8:	f853 5b04 	ldr.w	r5, [r3], #4
 800adfc:	d402      	bmi.n	800ae04 <_printf_i+0xe8>
 800adfe:	0649      	lsls	r1, r1, #25
 800ae00:	bf48      	it	mi
 800ae02:	b2ad      	uxthmi	r5, r5
 800ae04:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae06:	4853      	ldr	r0, [pc, #332]	@ (800af54 <_printf_i+0x238>)
 800ae08:	6033      	str	r3, [r6, #0]
 800ae0a:	bf14      	ite	ne
 800ae0c:	230a      	movne	r3, #10
 800ae0e:	2308      	moveq	r3, #8
 800ae10:	2100      	movs	r1, #0
 800ae12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae16:	6866      	ldr	r6, [r4, #4]
 800ae18:	60a6      	str	r6, [r4, #8]
 800ae1a:	2e00      	cmp	r6, #0
 800ae1c:	bfa2      	ittt	ge
 800ae1e:	6821      	ldrge	r1, [r4, #0]
 800ae20:	f021 0104 	bicge.w	r1, r1, #4
 800ae24:	6021      	strge	r1, [r4, #0]
 800ae26:	b90d      	cbnz	r5, 800ae2c <_printf_i+0x110>
 800ae28:	2e00      	cmp	r6, #0
 800ae2a:	d04b      	beq.n	800aec4 <_printf_i+0x1a8>
 800ae2c:	4616      	mov	r6, r2
 800ae2e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae32:	fb03 5711 	mls	r7, r3, r1, r5
 800ae36:	5dc7      	ldrb	r7, [r0, r7]
 800ae38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae3c:	462f      	mov	r7, r5
 800ae3e:	42bb      	cmp	r3, r7
 800ae40:	460d      	mov	r5, r1
 800ae42:	d9f4      	bls.n	800ae2e <_printf_i+0x112>
 800ae44:	2b08      	cmp	r3, #8
 800ae46:	d10b      	bne.n	800ae60 <_printf_i+0x144>
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	07df      	lsls	r7, r3, #31
 800ae4c:	d508      	bpl.n	800ae60 <_printf_i+0x144>
 800ae4e:	6923      	ldr	r3, [r4, #16]
 800ae50:	6861      	ldr	r1, [r4, #4]
 800ae52:	4299      	cmp	r1, r3
 800ae54:	bfde      	ittt	le
 800ae56:	2330      	movle	r3, #48	@ 0x30
 800ae58:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae60:	1b92      	subs	r2, r2, r6
 800ae62:	6122      	str	r2, [r4, #16]
 800ae64:	f8cd a000 	str.w	sl, [sp]
 800ae68:	464b      	mov	r3, r9
 800ae6a:	aa03      	add	r2, sp, #12
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	4640      	mov	r0, r8
 800ae70:	f7ff fee6 	bl	800ac40 <_printf_common>
 800ae74:	3001      	adds	r0, #1
 800ae76:	d14a      	bne.n	800af0e <_printf_i+0x1f2>
 800ae78:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7c:	b004      	add	sp, #16
 800ae7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	f043 0320 	orr.w	r3, r3, #32
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	4833      	ldr	r0, [pc, #204]	@ (800af58 <_printf_i+0x23c>)
 800ae8c:	2778      	movs	r7, #120	@ 0x78
 800ae8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	6831      	ldr	r1, [r6, #0]
 800ae96:	061f      	lsls	r7, r3, #24
 800ae98:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae9c:	d402      	bmi.n	800aea4 <_printf_i+0x188>
 800ae9e:	065f      	lsls	r7, r3, #25
 800aea0:	bf48      	it	mi
 800aea2:	b2ad      	uxthmi	r5, r5
 800aea4:	6031      	str	r1, [r6, #0]
 800aea6:	07d9      	lsls	r1, r3, #31
 800aea8:	bf44      	itt	mi
 800aeaa:	f043 0320 	orrmi.w	r3, r3, #32
 800aeae:	6023      	strmi	r3, [r4, #0]
 800aeb0:	b11d      	cbz	r5, 800aeba <_printf_i+0x19e>
 800aeb2:	2310      	movs	r3, #16
 800aeb4:	e7ac      	b.n	800ae10 <_printf_i+0xf4>
 800aeb6:	4827      	ldr	r0, [pc, #156]	@ (800af54 <_printf_i+0x238>)
 800aeb8:	e7e9      	b.n	800ae8e <_printf_i+0x172>
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	f023 0320 	bic.w	r3, r3, #32
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	e7f6      	b.n	800aeb2 <_printf_i+0x196>
 800aec4:	4616      	mov	r6, r2
 800aec6:	e7bd      	b.n	800ae44 <_printf_i+0x128>
 800aec8:	6833      	ldr	r3, [r6, #0]
 800aeca:	6825      	ldr	r5, [r4, #0]
 800aecc:	6961      	ldr	r1, [r4, #20]
 800aece:	1d18      	adds	r0, r3, #4
 800aed0:	6030      	str	r0, [r6, #0]
 800aed2:	062e      	lsls	r6, r5, #24
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	d501      	bpl.n	800aedc <_printf_i+0x1c0>
 800aed8:	6019      	str	r1, [r3, #0]
 800aeda:	e002      	b.n	800aee2 <_printf_i+0x1c6>
 800aedc:	0668      	lsls	r0, r5, #25
 800aede:	d5fb      	bpl.n	800aed8 <_printf_i+0x1bc>
 800aee0:	8019      	strh	r1, [r3, #0]
 800aee2:	2300      	movs	r3, #0
 800aee4:	6123      	str	r3, [r4, #16]
 800aee6:	4616      	mov	r6, r2
 800aee8:	e7bc      	b.n	800ae64 <_printf_i+0x148>
 800aeea:	6833      	ldr	r3, [r6, #0]
 800aeec:	1d1a      	adds	r2, r3, #4
 800aeee:	6032      	str	r2, [r6, #0]
 800aef0:	681e      	ldr	r6, [r3, #0]
 800aef2:	6862      	ldr	r2, [r4, #4]
 800aef4:	2100      	movs	r1, #0
 800aef6:	4630      	mov	r0, r6
 800aef8:	f7f5 f98a 	bl	8000210 <memchr>
 800aefc:	b108      	cbz	r0, 800af02 <_printf_i+0x1e6>
 800aefe:	1b80      	subs	r0, r0, r6
 800af00:	6060      	str	r0, [r4, #4]
 800af02:	6863      	ldr	r3, [r4, #4]
 800af04:	6123      	str	r3, [r4, #16]
 800af06:	2300      	movs	r3, #0
 800af08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af0c:	e7aa      	b.n	800ae64 <_printf_i+0x148>
 800af0e:	6923      	ldr	r3, [r4, #16]
 800af10:	4632      	mov	r2, r6
 800af12:	4649      	mov	r1, r9
 800af14:	4640      	mov	r0, r8
 800af16:	47d0      	blx	sl
 800af18:	3001      	adds	r0, #1
 800af1a:	d0ad      	beq.n	800ae78 <_printf_i+0x15c>
 800af1c:	6823      	ldr	r3, [r4, #0]
 800af1e:	079b      	lsls	r3, r3, #30
 800af20:	d413      	bmi.n	800af4a <_printf_i+0x22e>
 800af22:	68e0      	ldr	r0, [r4, #12]
 800af24:	9b03      	ldr	r3, [sp, #12]
 800af26:	4298      	cmp	r0, r3
 800af28:	bfb8      	it	lt
 800af2a:	4618      	movlt	r0, r3
 800af2c:	e7a6      	b.n	800ae7c <_printf_i+0x160>
 800af2e:	2301      	movs	r3, #1
 800af30:	4632      	mov	r2, r6
 800af32:	4649      	mov	r1, r9
 800af34:	4640      	mov	r0, r8
 800af36:	47d0      	blx	sl
 800af38:	3001      	adds	r0, #1
 800af3a:	d09d      	beq.n	800ae78 <_printf_i+0x15c>
 800af3c:	3501      	adds	r5, #1
 800af3e:	68e3      	ldr	r3, [r4, #12]
 800af40:	9903      	ldr	r1, [sp, #12]
 800af42:	1a5b      	subs	r3, r3, r1
 800af44:	42ab      	cmp	r3, r5
 800af46:	dcf2      	bgt.n	800af2e <_printf_i+0x212>
 800af48:	e7eb      	b.n	800af22 <_printf_i+0x206>
 800af4a:	2500      	movs	r5, #0
 800af4c:	f104 0619 	add.w	r6, r4, #25
 800af50:	e7f5      	b.n	800af3e <_printf_i+0x222>
 800af52:	bf00      	nop
 800af54:	0800fbae 	.word	0x0800fbae
 800af58:	0800fbbf 	.word	0x0800fbbf

0800af5c <_scanf_float>:
 800af5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af60:	b087      	sub	sp, #28
 800af62:	4617      	mov	r7, r2
 800af64:	9303      	str	r3, [sp, #12]
 800af66:	688b      	ldr	r3, [r1, #8]
 800af68:	1e5a      	subs	r2, r3, #1
 800af6a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800af6e:	bf81      	itttt	hi
 800af70:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800af74:	eb03 0b05 	addhi.w	fp, r3, r5
 800af78:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800af7c:	608b      	strhi	r3, [r1, #8]
 800af7e:	680b      	ldr	r3, [r1, #0]
 800af80:	460a      	mov	r2, r1
 800af82:	f04f 0500 	mov.w	r5, #0
 800af86:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800af8a:	f842 3b1c 	str.w	r3, [r2], #28
 800af8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800af92:	4680      	mov	r8, r0
 800af94:	460c      	mov	r4, r1
 800af96:	bf98      	it	ls
 800af98:	f04f 0b00 	movls.w	fp, #0
 800af9c:	9201      	str	r2, [sp, #4]
 800af9e:	4616      	mov	r6, r2
 800afa0:	46aa      	mov	sl, r5
 800afa2:	46a9      	mov	r9, r5
 800afa4:	9502      	str	r5, [sp, #8]
 800afa6:	68a2      	ldr	r2, [r4, #8]
 800afa8:	b152      	cbz	r2, 800afc0 <_scanf_float+0x64>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	2b4e      	cmp	r3, #78	@ 0x4e
 800afb0:	d864      	bhi.n	800b07c <_scanf_float+0x120>
 800afb2:	2b40      	cmp	r3, #64	@ 0x40
 800afb4:	d83c      	bhi.n	800b030 <_scanf_float+0xd4>
 800afb6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800afba:	b2c8      	uxtb	r0, r1
 800afbc:	280e      	cmp	r0, #14
 800afbe:	d93a      	bls.n	800b036 <_scanf_float+0xda>
 800afc0:	f1b9 0f00 	cmp.w	r9, #0
 800afc4:	d003      	beq.n	800afce <_scanf_float+0x72>
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afd2:	f1ba 0f01 	cmp.w	sl, #1
 800afd6:	f200 8117 	bhi.w	800b208 <_scanf_float+0x2ac>
 800afda:	9b01      	ldr	r3, [sp, #4]
 800afdc:	429e      	cmp	r6, r3
 800afde:	f200 8108 	bhi.w	800b1f2 <_scanf_float+0x296>
 800afe2:	2001      	movs	r0, #1
 800afe4:	b007      	add	sp, #28
 800afe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afea:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800afee:	2a0d      	cmp	r2, #13
 800aff0:	d8e6      	bhi.n	800afc0 <_scanf_float+0x64>
 800aff2:	a101      	add	r1, pc, #4	@ (adr r1, 800aff8 <_scanf_float+0x9c>)
 800aff4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aff8:	0800b13f 	.word	0x0800b13f
 800affc:	0800afc1 	.word	0x0800afc1
 800b000:	0800afc1 	.word	0x0800afc1
 800b004:	0800afc1 	.word	0x0800afc1
 800b008:	0800b19f 	.word	0x0800b19f
 800b00c:	0800b177 	.word	0x0800b177
 800b010:	0800afc1 	.word	0x0800afc1
 800b014:	0800afc1 	.word	0x0800afc1
 800b018:	0800b14d 	.word	0x0800b14d
 800b01c:	0800afc1 	.word	0x0800afc1
 800b020:	0800afc1 	.word	0x0800afc1
 800b024:	0800afc1 	.word	0x0800afc1
 800b028:	0800afc1 	.word	0x0800afc1
 800b02c:	0800b105 	.word	0x0800b105
 800b030:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b034:	e7db      	b.n	800afee <_scanf_float+0x92>
 800b036:	290e      	cmp	r1, #14
 800b038:	d8c2      	bhi.n	800afc0 <_scanf_float+0x64>
 800b03a:	a001      	add	r0, pc, #4	@ (adr r0, 800b040 <_scanf_float+0xe4>)
 800b03c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b040:	0800b0f5 	.word	0x0800b0f5
 800b044:	0800afc1 	.word	0x0800afc1
 800b048:	0800b0f5 	.word	0x0800b0f5
 800b04c:	0800b18b 	.word	0x0800b18b
 800b050:	0800afc1 	.word	0x0800afc1
 800b054:	0800b09d 	.word	0x0800b09d
 800b058:	0800b0db 	.word	0x0800b0db
 800b05c:	0800b0db 	.word	0x0800b0db
 800b060:	0800b0db 	.word	0x0800b0db
 800b064:	0800b0db 	.word	0x0800b0db
 800b068:	0800b0db 	.word	0x0800b0db
 800b06c:	0800b0db 	.word	0x0800b0db
 800b070:	0800b0db 	.word	0x0800b0db
 800b074:	0800b0db 	.word	0x0800b0db
 800b078:	0800b0db 	.word	0x0800b0db
 800b07c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b07e:	d809      	bhi.n	800b094 <_scanf_float+0x138>
 800b080:	2b60      	cmp	r3, #96	@ 0x60
 800b082:	d8b2      	bhi.n	800afea <_scanf_float+0x8e>
 800b084:	2b54      	cmp	r3, #84	@ 0x54
 800b086:	d07b      	beq.n	800b180 <_scanf_float+0x224>
 800b088:	2b59      	cmp	r3, #89	@ 0x59
 800b08a:	d199      	bne.n	800afc0 <_scanf_float+0x64>
 800b08c:	2d07      	cmp	r5, #7
 800b08e:	d197      	bne.n	800afc0 <_scanf_float+0x64>
 800b090:	2508      	movs	r5, #8
 800b092:	e02c      	b.n	800b0ee <_scanf_float+0x192>
 800b094:	2b74      	cmp	r3, #116	@ 0x74
 800b096:	d073      	beq.n	800b180 <_scanf_float+0x224>
 800b098:	2b79      	cmp	r3, #121	@ 0x79
 800b09a:	e7f6      	b.n	800b08a <_scanf_float+0x12e>
 800b09c:	6821      	ldr	r1, [r4, #0]
 800b09e:	05c8      	lsls	r0, r1, #23
 800b0a0:	d51b      	bpl.n	800b0da <_scanf_float+0x17e>
 800b0a2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b0a6:	6021      	str	r1, [r4, #0]
 800b0a8:	f109 0901 	add.w	r9, r9, #1
 800b0ac:	f1bb 0f00 	cmp.w	fp, #0
 800b0b0:	d003      	beq.n	800b0ba <_scanf_float+0x15e>
 800b0b2:	3201      	adds	r2, #1
 800b0b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b0b8:	60a2      	str	r2, [r4, #8]
 800b0ba:	68a3      	ldr	r3, [r4, #8]
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	60a3      	str	r3, [r4, #8]
 800b0c0:	6923      	ldr	r3, [r4, #16]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	6123      	str	r3, [r4, #16]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	607b      	str	r3, [r7, #4]
 800b0ce:	f340 8087 	ble.w	800b1e0 <_scanf_float+0x284>
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	603b      	str	r3, [r7, #0]
 800b0d8:	e765      	b.n	800afa6 <_scanf_float+0x4a>
 800b0da:	eb1a 0105 	adds.w	r1, sl, r5
 800b0de:	f47f af6f 	bne.w	800afc0 <_scanf_float+0x64>
 800b0e2:	6822      	ldr	r2, [r4, #0]
 800b0e4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b0e8:	6022      	str	r2, [r4, #0]
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	468a      	mov	sl, r1
 800b0ee:	f806 3b01 	strb.w	r3, [r6], #1
 800b0f2:	e7e2      	b.n	800b0ba <_scanf_float+0x15e>
 800b0f4:	6822      	ldr	r2, [r4, #0]
 800b0f6:	0610      	lsls	r0, r2, #24
 800b0f8:	f57f af62 	bpl.w	800afc0 <_scanf_float+0x64>
 800b0fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b100:	6022      	str	r2, [r4, #0]
 800b102:	e7f4      	b.n	800b0ee <_scanf_float+0x192>
 800b104:	f1ba 0f00 	cmp.w	sl, #0
 800b108:	d10e      	bne.n	800b128 <_scanf_float+0x1cc>
 800b10a:	f1b9 0f00 	cmp.w	r9, #0
 800b10e:	d10e      	bne.n	800b12e <_scanf_float+0x1d2>
 800b110:	6822      	ldr	r2, [r4, #0]
 800b112:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b116:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b11a:	d108      	bne.n	800b12e <_scanf_float+0x1d2>
 800b11c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b120:	6022      	str	r2, [r4, #0]
 800b122:	f04f 0a01 	mov.w	sl, #1
 800b126:	e7e2      	b.n	800b0ee <_scanf_float+0x192>
 800b128:	f1ba 0f02 	cmp.w	sl, #2
 800b12c:	d055      	beq.n	800b1da <_scanf_float+0x27e>
 800b12e:	2d01      	cmp	r5, #1
 800b130:	d002      	beq.n	800b138 <_scanf_float+0x1dc>
 800b132:	2d04      	cmp	r5, #4
 800b134:	f47f af44 	bne.w	800afc0 <_scanf_float+0x64>
 800b138:	3501      	adds	r5, #1
 800b13a:	b2ed      	uxtb	r5, r5
 800b13c:	e7d7      	b.n	800b0ee <_scanf_float+0x192>
 800b13e:	f1ba 0f01 	cmp.w	sl, #1
 800b142:	f47f af3d 	bne.w	800afc0 <_scanf_float+0x64>
 800b146:	f04f 0a02 	mov.w	sl, #2
 800b14a:	e7d0      	b.n	800b0ee <_scanf_float+0x192>
 800b14c:	b97d      	cbnz	r5, 800b16e <_scanf_float+0x212>
 800b14e:	f1b9 0f00 	cmp.w	r9, #0
 800b152:	f47f af38 	bne.w	800afc6 <_scanf_float+0x6a>
 800b156:	6822      	ldr	r2, [r4, #0]
 800b158:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b15c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b160:	f040 8108 	bne.w	800b374 <_scanf_float+0x418>
 800b164:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b168:	6022      	str	r2, [r4, #0]
 800b16a:	2501      	movs	r5, #1
 800b16c:	e7bf      	b.n	800b0ee <_scanf_float+0x192>
 800b16e:	2d03      	cmp	r5, #3
 800b170:	d0e2      	beq.n	800b138 <_scanf_float+0x1dc>
 800b172:	2d05      	cmp	r5, #5
 800b174:	e7de      	b.n	800b134 <_scanf_float+0x1d8>
 800b176:	2d02      	cmp	r5, #2
 800b178:	f47f af22 	bne.w	800afc0 <_scanf_float+0x64>
 800b17c:	2503      	movs	r5, #3
 800b17e:	e7b6      	b.n	800b0ee <_scanf_float+0x192>
 800b180:	2d06      	cmp	r5, #6
 800b182:	f47f af1d 	bne.w	800afc0 <_scanf_float+0x64>
 800b186:	2507      	movs	r5, #7
 800b188:	e7b1      	b.n	800b0ee <_scanf_float+0x192>
 800b18a:	6822      	ldr	r2, [r4, #0]
 800b18c:	0591      	lsls	r1, r2, #22
 800b18e:	f57f af17 	bpl.w	800afc0 <_scanf_float+0x64>
 800b192:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b196:	6022      	str	r2, [r4, #0]
 800b198:	f8cd 9008 	str.w	r9, [sp, #8]
 800b19c:	e7a7      	b.n	800b0ee <_scanf_float+0x192>
 800b19e:	6822      	ldr	r2, [r4, #0]
 800b1a0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b1a4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b1a8:	d006      	beq.n	800b1b8 <_scanf_float+0x25c>
 800b1aa:	0550      	lsls	r0, r2, #21
 800b1ac:	f57f af08 	bpl.w	800afc0 <_scanf_float+0x64>
 800b1b0:	f1b9 0f00 	cmp.w	r9, #0
 800b1b4:	f000 80de 	beq.w	800b374 <_scanf_float+0x418>
 800b1b8:	0591      	lsls	r1, r2, #22
 800b1ba:	bf58      	it	pl
 800b1bc:	9902      	ldrpl	r1, [sp, #8]
 800b1be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b1c2:	bf58      	it	pl
 800b1c4:	eba9 0101 	subpl.w	r1, r9, r1
 800b1c8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b1cc:	bf58      	it	pl
 800b1ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b1d2:	6022      	str	r2, [r4, #0]
 800b1d4:	f04f 0900 	mov.w	r9, #0
 800b1d8:	e789      	b.n	800b0ee <_scanf_float+0x192>
 800b1da:	f04f 0a03 	mov.w	sl, #3
 800b1de:	e786      	b.n	800b0ee <_scanf_float+0x192>
 800b1e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	4640      	mov	r0, r8
 800b1e8:	4798      	blx	r3
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	f43f aedb 	beq.w	800afa6 <_scanf_float+0x4a>
 800b1f0:	e6e6      	b.n	800afc0 <_scanf_float+0x64>
 800b1f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1fa:	463a      	mov	r2, r7
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	4798      	blx	r3
 800b200:	6923      	ldr	r3, [r4, #16]
 800b202:	3b01      	subs	r3, #1
 800b204:	6123      	str	r3, [r4, #16]
 800b206:	e6e8      	b.n	800afda <_scanf_float+0x7e>
 800b208:	1e6b      	subs	r3, r5, #1
 800b20a:	2b06      	cmp	r3, #6
 800b20c:	d824      	bhi.n	800b258 <_scanf_float+0x2fc>
 800b20e:	2d02      	cmp	r5, #2
 800b210:	d836      	bhi.n	800b280 <_scanf_float+0x324>
 800b212:	9b01      	ldr	r3, [sp, #4]
 800b214:	429e      	cmp	r6, r3
 800b216:	f67f aee4 	bls.w	800afe2 <_scanf_float+0x86>
 800b21a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b21e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b222:	463a      	mov	r2, r7
 800b224:	4640      	mov	r0, r8
 800b226:	4798      	blx	r3
 800b228:	6923      	ldr	r3, [r4, #16]
 800b22a:	3b01      	subs	r3, #1
 800b22c:	6123      	str	r3, [r4, #16]
 800b22e:	e7f0      	b.n	800b212 <_scanf_float+0x2b6>
 800b230:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b234:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b238:	463a      	mov	r2, r7
 800b23a:	4640      	mov	r0, r8
 800b23c:	4798      	blx	r3
 800b23e:	6923      	ldr	r3, [r4, #16]
 800b240:	3b01      	subs	r3, #1
 800b242:	6123      	str	r3, [r4, #16]
 800b244:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b248:	fa5f fa8a 	uxtb.w	sl, sl
 800b24c:	f1ba 0f02 	cmp.w	sl, #2
 800b250:	d1ee      	bne.n	800b230 <_scanf_float+0x2d4>
 800b252:	3d03      	subs	r5, #3
 800b254:	b2ed      	uxtb	r5, r5
 800b256:	1b76      	subs	r6, r6, r5
 800b258:	6823      	ldr	r3, [r4, #0]
 800b25a:	05da      	lsls	r2, r3, #23
 800b25c:	d530      	bpl.n	800b2c0 <_scanf_float+0x364>
 800b25e:	055b      	lsls	r3, r3, #21
 800b260:	d511      	bpl.n	800b286 <_scanf_float+0x32a>
 800b262:	9b01      	ldr	r3, [sp, #4]
 800b264:	429e      	cmp	r6, r3
 800b266:	f67f aebc 	bls.w	800afe2 <_scanf_float+0x86>
 800b26a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b26e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b272:	463a      	mov	r2, r7
 800b274:	4640      	mov	r0, r8
 800b276:	4798      	blx	r3
 800b278:	6923      	ldr	r3, [r4, #16]
 800b27a:	3b01      	subs	r3, #1
 800b27c:	6123      	str	r3, [r4, #16]
 800b27e:	e7f0      	b.n	800b262 <_scanf_float+0x306>
 800b280:	46aa      	mov	sl, r5
 800b282:	46b3      	mov	fp, r6
 800b284:	e7de      	b.n	800b244 <_scanf_float+0x2e8>
 800b286:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b28a:	6923      	ldr	r3, [r4, #16]
 800b28c:	2965      	cmp	r1, #101	@ 0x65
 800b28e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b292:	f106 35ff 	add.w	r5, r6, #4294967295
 800b296:	6123      	str	r3, [r4, #16]
 800b298:	d00c      	beq.n	800b2b4 <_scanf_float+0x358>
 800b29a:	2945      	cmp	r1, #69	@ 0x45
 800b29c:	d00a      	beq.n	800b2b4 <_scanf_float+0x358>
 800b29e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2a2:	463a      	mov	r2, r7
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	4798      	blx	r3
 800b2a8:	6923      	ldr	r3, [r4, #16]
 800b2aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	1eb5      	subs	r5, r6, #2
 800b2b2:	6123      	str	r3, [r4, #16]
 800b2b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2b8:	463a      	mov	r2, r7
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	4798      	blx	r3
 800b2be:	462e      	mov	r6, r5
 800b2c0:	6822      	ldr	r2, [r4, #0]
 800b2c2:	f012 0210 	ands.w	r2, r2, #16
 800b2c6:	d001      	beq.n	800b2cc <_scanf_float+0x370>
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	e68b      	b.n	800afe4 <_scanf_float+0x88>
 800b2cc:	7032      	strb	r2, [r6, #0]
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b2d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2d8:	d11c      	bne.n	800b314 <_scanf_float+0x3b8>
 800b2da:	9b02      	ldr	r3, [sp, #8]
 800b2dc:	454b      	cmp	r3, r9
 800b2de:	eba3 0209 	sub.w	r2, r3, r9
 800b2e2:	d123      	bne.n	800b32c <_scanf_float+0x3d0>
 800b2e4:	9901      	ldr	r1, [sp, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	f002 fc8d 	bl	800dc08 <_strtod_r>
 800b2ee:	9b03      	ldr	r3, [sp, #12]
 800b2f0:	6821      	ldr	r1, [r4, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f011 0f02 	tst.w	r1, #2
 800b2f8:	ec57 6b10 	vmov	r6, r7, d0
 800b2fc:	f103 0204 	add.w	r2, r3, #4
 800b300:	d01f      	beq.n	800b342 <_scanf_float+0x3e6>
 800b302:	9903      	ldr	r1, [sp, #12]
 800b304:	600a      	str	r2, [r1, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	e9c3 6700 	strd	r6, r7, [r3]
 800b30c:	68e3      	ldr	r3, [r4, #12]
 800b30e:	3301      	adds	r3, #1
 800b310:	60e3      	str	r3, [r4, #12]
 800b312:	e7d9      	b.n	800b2c8 <_scanf_float+0x36c>
 800b314:	9b04      	ldr	r3, [sp, #16]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d0e4      	beq.n	800b2e4 <_scanf_float+0x388>
 800b31a:	9905      	ldr	r1, [sp, #20]
 800b31c:	230a      	movs	r3, #10
 800b31e:	3101      	adds	r1, #1
 800b320:	4640      	mov	r0, r8
 800b322:	f002 fcf1 	bl	800dd08 <_strtol_r>
 800b326:	9b04      	ldr	r3, [sp, #16]
 800b328:	9e05      	ldr	r6, [sp, #20]
 800b32a:	1ac2      	subs	r2, r0, r3
 800b32c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b330:	429e      	cmp	r6, r3
 800b332:	bf28      	it	cs
 800b334:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b338:	4910      	ldr	r1, [pc, #64]	@ (800b37c <_scanf_float+0x420>)
 800b33a:	4630      	mov	r0, r6
 800b33c:	f000 f988 	bl	800b650 <siprintf>
 800b340:	e7d0      	b.n	800b2e4 <_scanf_float+0x388>
 800b342:	f011 0f04 	tst.w	r1, #4
 800b346:	9903      	ldr	r1, [sp, #12]
 800b348:	600a      	str	r2, [r1, #0]
 800b34a:	d1dc      	bne.n	800b306 <_scanf_float+0x3aa>
 800b34c:	681d      	ldr	r5, [r3, #0]
 800b34e:	4632      	mov	r2, r6
 800b350:	463b      	mov	r3, r7
 800b352:	4630      	mov	r0, r6
 800b354:	4639      	mov	r1, r7
 800b356:	f7f5 fc09 	bl	8000b6c <__aeabi_dcmpun>
 800b35a:	b128      	cbz	r0, 800b368 <_scanf_float+0x40c>
 800b35c:	4808      	ldr	r0, [pc, #32]	@ (800b380 <_scanf_float+0x424>)
 800b35e:	f000 faff 	bl	800b960 <nanf>
 800b362:	ed85 0a00 	vstr	s0, [r5]
 800b366:	e7d1      	b.n	800b30c <_scanf_float+0x3b0>
 800b368:	4630      	mov	r0, r6
 800b36a:	4639      	mov	r1, r7
 800b36c:	f7f5 fc5c 	bl	8000c28 <__aeabi_d2f>
 800b370:	6028      	str	r0, [r5, #0]
 800b372:	e7cb      	b.n	800b30c <_scanf_float+0x3b0>
 800b374:	f04f 0900 	mov.w	r9, #0
 800b378:	e629      	b.n	800afce <_scanf_float+0x72>
 800b37a:	bf00      	nop
 800b37c:	0800fbd0 	.word	0x0800fbd0
 800b380:	0800ff65 	.word	0x0800ff65

0800b384 <std>:
 800b384:	2300      	movs	r3, #0
 800b386:	b510      	push	{r4, lr}
 800b388:	4604      	mov	r4, r0
 800b38a:	e9c0 3300 	strd	r3, r3, [r0]
 800b38e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b392:	6083      	str	r3, [r0, #8]
 800b394:	8181      	strh	r1, [r0, #12]
 800b396:	6643      	str	r3, [r0, #100]	@ 0x64
 800b398:	81c2      	strh	r2, [r0, #14]
 800b39a:	6183      	str	r3, [r0, #24]
 800b39c:	4619      	mov	r1, r3
 800b39e:	2208      	movs	r2, #8
 800b3a0:	305c      	adds	r0, #92	@ 0x5c
 800b3a2:	f000 fa4d 	bl	800b840 <memset>
 800b3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3dc <std+0x58>)
 800b3a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e0 <std+0x5c>)
 800b3ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e4 <std+0x60>)
 800b3b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e8 <std+0x64>)
 800b3b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3ec <std+0x68>)
 800b3b8:	6224      	str	r4, [r4, #32]
 800b3ba:	429c      	cmp	r4, r3
 800b3bc:	d006      	beq.n	800b3cc <std+0x48>
 800b3be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3c2:	4294      	cmp	r4, r2
 800b3c4:	d002      	beq.n	800b3cc <std+0x48>
 800b3c6:	33d0      	adds	r3, #208	@ 0xd0
 800b3c8:	429c      	cmp	r4, r3
 800b3ca:	d105      	bne.n	800b3d8 <std+0x54>
 800b3cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d4:	f000 bac0 	b.w	800b958 <__retarget_lock_init_recursive>
 800b3d8:	bd10      	pop	{r4, pc}
 800b3da:	bf00      	nop
 800b3dc:	0800b691 	.word	0x0800b691
 800b3e0:	0800b6b3 	.word	0x0800b6b3
 800b3e4:	0800b6eb 	.word	0x0800b6eb
 800b3e8:	0800b70f 	.word	0x0800b70f
 800b3ec:	20002b18 	.word	0x20002b18

0800b3f0 <stdio_exit_handler>:
 800b3f0:	4a02      	ldr	r2, [pc, #8]	@ (800b3fc <stdio_exit_handler+0xc>)
 800b3f2:	4903      	ldr	r1, [pc, #12]	@ (800b400 <stdio_exit_handler+0x10>)
 800b3f4:	4803      	ldr	r0, [pc, #12]	@ (800b404 <stdio_exit_handler+0x14>)
 800b3f6:	f000 b869 	b.w	800b4cc <_fwalk_sglue>
 800b3fa:	bf00      	nop
 800b3fc:	2000002c 	.word	0x2000002c
 800b400:	0800e349 	.word	0x0800e349
 800b404:	2000003c 	.word	0x2000003c

0800b408 <cleanup_stdio>:
 800b408:	6841      	ldr	r1, [r0, #4]
 800b40a:	4b0c      	ldr	r3, [pc, #48]	@ (800b43c <cleanup_stdio+0x34>)
 800b40c:	4299      	cmp	r1, r3
 800b40e:	b510      	push	{r4, lr}
 800b410:	4604      	mov	r4, r0
 800b412:	d001      	beq.n	800b418 <cleanup_stdio+0x10>
 800b414:	f002 ff98 	bl	800e348 <_fflush_r>
 800b418:	68a1      	ldr	r1, [r4, #8]
 800b41a:	4b09      	ldr	r3, [pc, #36]	@ (800b440 <cleanup_stdio+0x38>)
 800b41c:	4299      	cmp	r1, r3
 800b41e:	d002      	beq.n	800b426 <cleanup_stdio+0x1e>
 800b420:	4620      	mov	r0, r4
 800b422:	f002 ff91 	bl	800e348 <_fflush_r>
 800b426:	68e1      	ldr	r1, [r4, #12]
 800b428:	4b06      	ldr	r3, [pc, #24]	@ (800b444 <cleanup_stdio+0x3c>)
 800b42a:	4299      	cmp	r1, r3
 800b42c:	d004      	beq.n	800b438 <cleanup_stdio+0x30>
 800b42e:	4620      	mov	r0, r4
 800b430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b434:	f002 bf88 	b.w	800e348 <_fflush_r>
 800b438:	bd10      	pop	{r4, pc}
 800b43a:	bf00      	nop
 800b43c:	20002b18 	.word	0x20002b18
 800b440:	20002b80 	.word	0x20002b80
 800b444:	20002be8 	.word	0x20002be8

0800b448 <global_stdio_init.part.0>:
 800b448:	b510      	push	{r4, lr}
 800b44a:	4b0b      	ldr	r3, [pc, #44]	@ (800b478 <global_stdio_init.part.0+0x30>)
 800b44c:	4c0b      	ldr	r4, [pc, #44]	@ (800b47c <global_stdio_init.part.0+0x34>)
 800b44e:	4a0c      	ldr	r2, [pc, #48]	@ (800b480 <global_stdio_init.part.0+0x38>)
 800b450:	601a      	str	r2, [r3, #0]
 800b452:	4620      	mov	r0, r4
 800b454:	2200      	movs	r2, #0
 800b456:	2104      	movs	r1, #4
 800b458:	f7ff ff94 	bl	800b384 <std>
 800b45c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b460:	2201      	movs	r2, #1
 800b462:	2109      	movs	r1, #9
 800b464:	f7ff ff8e 	bl	800b384 <std>
 800b468:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b46c:	2202      	movs	r2, #2
 800b46e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b472:	2112      	movs	r1, #18
 800b474:	f7ff bf86 	b.w	800b384 <std>
 800b478:	20002c50 	.word	0x20002c50
 800b47c:	20002b18 	.word	0x20002b18
 800b480:	0800b3f1 	.word	0x0800b3f1

0800b484 <__sfp_lock_acquire>:
 800b484:	4801      	ldr	r0, [pc, #4]	@ (800b48c <__sfp_lock_acquire+0x8>)
 800b486:	f000 ba68 	b.w	800b95a <__retarget_lock_acquire_recursive>
 800b48a:	bf00      	nop
 800b48c:	20002c59 	.word	0x20002c59

0800b490 <__sfp_lock_release>:
 800b490:	4801      	ldr	r0, [pc, #4]	@ (800b498 <__sfp_lock_release+0x8>)
 800b492:	f000 ba63 	b.w	800b95c <__retarget_lock_release_recursive>
 800b496:	bf00      	nop
 800b498:	20002c59 	.word	0x20002c59

0800b49c <__sinit>:
 800b49c:	b510      	push	{r4, lr}
 800b49e:	4604      	mov	r4, r0
 800b4a0:	f7ff fff0 	bl	800b484 <__sfp_lock_acquire>
 800b4a4:	6a23      	ldr	r3, [r4, #32]
 800b4a6:	b11b      	cbz	r3, 800b4b0 <__sinit+0x14>
 800b4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ac:	f7ff bff0 	b.w	800b490 <__sfp_lock_release>
 800b4b0:	4b04      	ldr	r3, [pc, #16]	@ (800b4c4 <__sinit+0x28>)
 800b4b2:	6223      	str	r3, [r4, #32]
 800b4b4:	4b04      	ldr	r3, [pc, #16]	@ (800b4c8 <__sinit+0x2c>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1f5      	bne.n	800b4a8 <__sinit+0xc>
 800b4bc:	f7ff ffc4 	bl	800b448 <global_stdio_init.part.0>
 800b4c0:	e7f2      	b.n	800b4a8 <__sinit+0xc>
 800b4c2:	bf00      	nop
 800b4c4:	0800b409 	.word	0x0800b409
 800b4c8:	20002c50 	.word	0x20002c50

0800b4cc <_fwalk_sglue>:
 800b4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4d0:	4607      	mov	r7, r0
 800b4d2:	4688      	mov	r8, r1
 800b4d4:	4614      	mov	r4, r2
 800b4d6:	2600      	movs	r6, #0
 800b4d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4dc:	f1b9 0901 	subs.w	r9, r9, #1
 800b4e0:	d505      	bpl.n	800b4ee <_fwalk_sglue+0x22>
 800b4e2:	6824      	ldr	r4, [r4, #0]
 800b4e4:	2c00      	cmp	r4, #0
 800b4e6:	d1f7      	bne.n	800b4d8 <_fwalk_sglue+0xc>
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ee:	89ab      	ldrh	r3, [r5, #12]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d907      	bls.n	800b504 <_fwalk_sglue+0x38>
 800b4f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	d003      	beq.n	800b504 <_fwalk_sglue+0x38>
 800b4fc:	4629      	mov	r1, r5
 800b4fe:	4638      	mov	r0, r7
 800b500:	47c0      	blx	r8
 800b502:	4306      	orrs	r6, r0
 800b504:	3568      	adds	r5, #104	@ 0x68
 800b506:	e7e9      	b.n	800b4dc <_fwalk_sglue+0x10>

0800b508 <iprintf>:
 800b508:	b40f      	push	{r0, r1, r2, r3}
 800b50a:	b507      	push	{r0, r1, r2, lr}
 800b50c:	4906      	ldr	r1, [pc, #24]	@ (800b528 <iprintf+0x20>)
 800b50e:	ab04      	add	r3, sp, #16
 800b510:	6808      	ldr	r0, [r1, #0]
 800b512:	f853 2b04 	ldr.w	r2, [r3], #4
 800b516:	6881      	ldr	r1, [r0, #8]
 800b518:	9301      	str	r3, [sp, #4]
 800b51a:	f002 fd79 	bl	800e010 <_vfiprintf_r>
 800b51e:	b003      	add	sp, #12
 800b520:	f85d eb04 	ldr.w	lr, [sp], #4
 800b524:	b004      	add	sp, #16
 800b526:	4770      	bx	lr
 800b528:	20000038 	.word	0x20000038

0800b52c <_puts_r>:
 800b52c:	6a03      	ldr	r3, [r0, #32]
 800b52e:	b570      	push	{r4, r5, r6, lr}
 800b530:	6884      	ldr	r4, [r0, #8]
 800b532:	4605      	mov	r5, r0
 800b534:	460e      	mov	r6, r1
 800b536:	b90b      	cbnz	r3, 800b53c <_puts_r+0x10>
 800b538:	f7ff ffb0 	bl	800b49c <__sinit>
 800b53c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b53e:	07db      	lsls	r3, r3, #31
 800b540:	d405      	bmi.n	800b54e <_puts_r+0x22>
 800b542:	89a3      	ldrh	r3, [r4, #12]
 800b544:	0598      	lsls	r0, r3, #22
 800b546:	d402      	bmi.n	800b54e <_puts_r+0x22>
 800b548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b54a:	f000 fa06 	bl	800b95a <__retarget_lock_acquire_recursive>
 800b54e:	89a3      	ldrh	r3, [r4, #12]
 800b550:	0719      	lsls	r1, r3, #28
 800b552:	d502      	bpl.n	800b55a <_puts_r+0x2e>
 800b554:	6923      	ldr	r3, [r4, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d135      	bne.n	800b5c6 <_puts_r+0x9a>
 800b55a:	4621      	mov	r1, r4
 800b55c:	4628      	mov	r0, r5
 800b55e:	f000 f919 	bl	800b794 <__swsetup_r>
 800b562:	b380      	cbz	r0, 800b5c6 <_puts_r+0x9a>
 800b564:	f04f 35ff 	mov.w	r5, #4294967295
 800b568:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b56a:	07da      	lsls	r2, r3, #31
 800b56c:	d405      	bmi.n	800b57a <_puts_r+0x4e>
 800b56e:	89a3      	ldrh	r3, [r4, #12]
 800b570:	059b      	lsls	r3, r3, #22
 800b572:	d402      	bmi.n	800b57a <_puts_r+0x4e>
 800b574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b576:	f000 f9f1 	bl	800b95c <__retarget_lock_release_recursive>
 800b57a:	4628      	mov	r0, r5
 800b57c:	bd70      	pop	{r4, r5, r6, pc}
 800b57e:	2b00      	cmp	r3, #0
 800b580:	da04      	bge.n	800b58c <_puts_r+0x60>
 800b582:	69a2      	ldr	r2, [r4, #24]
 800b584:	429a      	cmp	r2, r3
 800b586:	dc17      	bgt.n	800b5b8 <_puts_r+0x8c>
 800b588:	290a      	cmp	r1, #10
 800b58a:	d015      	beq.n	800b5b8 <_puts_r+0x8c>
 800b58c:	6823      	ldr	r3, [r4, #0]
 800b58e:	1c5a      	adds	r2, r3, #1
 800b590:	6022      	str	r2, [r4, #0]
 800b592:	7019      	strb	r1, [r3, #0]
 800b594:	68a3      	ldr	r3, [r4, #8]
 800b596:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b59a:	3b01      	subs	r3, #1
 800b59c:	60a3      	str	r3, [r4, #8]
 800b59e:	2900      	cmp	r1, #0
 800b5a0:	d1ed      	bne.n	800b57e <_puts_r+0x52>
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	da11      	bge.n	800b5ca <_puts_r+0x9e>
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	210a      	movs	r1, #10
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	f000 f8b3 	bl	800b716 <__swbuf_r>
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	d0d7      	beq.n	800b564 <_puts_r+0x38>
 800b5b4:	250a      	movs	r5, #10
 800b5b6:	e7d7      	b.n	800b568 <_puts_r+0x3c>
 800b5b8:	4622      	mov	r2, r4
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	f000 f8ab 	bl	800b716 <__swbuf_r>
 800b5c0:	3001      	adds	r0, #1
 800b5c2:	d1e7      	bne.n	800b594 <_puts_r+0x68>
 800b5c4:	e7ce      	b.n	800b564 <_puts_r+0x38>
 800b5c6:	3e01      	subs	r6, #1
 800b5c8:	e7e4      	b.n	800b594 <_puts_r+0x68>
 800b5ca:	6823      	ldr	r3, [r4, #0]
 800b5cc:	1c5a      	adds	r2, r3, #1
 800b5ce:	6022      	str	r2, [r4, #0]
 800b5d0:	220a      	movs	r2, #10
 800b5d2:	701a      	strb	r2, [r3, #0]
 800b5d4:	e7ee      	b.n	800b5b4 <_puts_r+0x88>
	...

0800b5d8 <puts>:
 800b5d8:	4b02      	ldr	r3, [pc, #8]	@ (800b5e4 <puts+0xc>)
 800b5da:	4601      	mov	r1, r0
 800b5dc:	6818      	ldr	r0, [r3, #0]
 800b5de:	f7ff bfa5 	b.w	800b52c <_puts_r>
 800b5e2:	bf00      	nop
 800b5e4:	20000038 	.word	0x20000038

0800b5e8 <sniprintf>:
 800b5e8:	b40c      	push	{r2, r3}
 800b5ea:	b530      	push	{r4, r5, lr}
 800b5ec:	4b17      	ldr	r3, [pc, #92]	@ (800b64c <sniprintf+0x64>)
 800b5ee:	1e0c      	subs	r4, r1, #0
 800b5f0:	681d      	ldr	r5, [r3, #0]
 800b5f2:	b09d      	sub	sp, #116	@ 0x74
 800b5f4:	da08      	bge.n	800b608 <sniprintf+0x20>
 800b5f6:	238b      	movs	r3, #139	@ 0x8b
 800b5f8:	602b      	str	r3, [r5, #0]
 800b5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fe:	b01d      	add	sp, #116	@ 0x74
 800b600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b604:	b002      	add	sp, #8
 800b606:	4770      	bx	lr
 800b608:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b60c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b610:	bf14      	ite	ne
 800b612:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b616:	4623      	moveq	r3, r4
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	9307      	str	r3, [sp, #28]
 800b61c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b620:	9002      	str	r0, [sp, #8]
 800b622:	9006      	str	r0, [sp, #24]
 800b624:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b628:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b62a:	ab21      	add	r3, sp, #132	@ 0x84
 800b62c:	a902      	add	r1, sp, #8
 800b62e:	4628      	mov	r0, r5
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	f002 fbc7 	bl	800ddc4 <_svfiprintf_r>
 800b636:	1c43      	adds	r3, r0, #1
 800b638:	bfbc      	itt	lt
 800b63a:	238b      	movlt	r3, #139	@ 0x8b
 800b63c:	602b      	strlt	r3, [r5, #0]
 800b63e:	2c00      	cmp	r4, #0
 800b640:	d0dd      	beq.n	800b5fe <sniprintf+0x16>
 800b642:	9b02      	ldr	r3, [sp, #8]
 800b644:	2200      	movs	r2, #0
 800b646:	701a      	strb	r2, [r3, #0]
 800b648:	e7d9      	b.n	800b5fe <sniprintf+0x16>
 800b64a:	bf00      	nop
 800b64c:	20000038 	.word	0x20000038

0800b650 <siprintf>:
 800b650:	b40e      	push	{r1, r2, r3}
 800b652:	b500      	push	{lr}
 800b654:	b09c      	sub	sp, #112	@ 0x70
 800b656:	ab1d      	add	r3, sp, #116	@ 0x74
 800b658:	9002      	str	r0, [sp, #8]
 800b65a:	9006      	str	r0, [sp, #24]
 800b65c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b660:	4809      	ldr	r0, [pc, #36]	@ (800b688 <siprintf+0x38>)
 800b662:	9107      	str	r1, [sp, #28]
 800b664:	9104      	str	r1, [sp, #16]
 800b666:	4909      	ldr	r1, [pc, #36]	@ (800b68c <siprintf+0x3c>)
 800b668:	f853 2b04 	ldr.w	r2, [r3], #4
 800b66c:	9105      	str	r1, [sp, #20]
 800b66e:	6800      	ldr	r0, [r0, #0]
 800b670:	9301      	str	r3, [sp, #4]
 800b672:	a902      	add	r1, sp, #8
 800b674:	f002 fba6 	bl	800ddc4 <_svfiprintf_r>
 800b678:	9b02      	ldr	r3, [sp, #8]
 800b67a:	2200      	movs	r2, #0
 800b67c:	701a      	strb	r2, [r3, #0]
 800b67e:	b01c      	add	sp, #112	@ 0x70
 800b680:	f85d eb04 	ldr.w	lr, [sp], #4
 800b684:	b003      	add	sp, #12
 800b686:	4770      	bx	lr
 800b688:	20000038 	.word	0x20000038
 800b68c:	ffff0208 	.word	0xffff0208

0800b690 <__sread>:
 800b690:	b510      	push	{r4, lr}
 800b692:	460c      	mov	r4, r1
 800b694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b698:	f000 f900 	bl	800b89c <_read_r>
 800b69c:	2800      	cmp	r0, #0
 800b69e:	bfab      	itete	ge
 800b6a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b6a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b6a4:	181b      	addge	r3, r3, r0
 800b6a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b6aa:	bfac      	ite	ge
 800b6ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b6ae:	81a3      	strhlt	r3, [r4, #12]
 800b6b0:	bd10      	pop	{r4, pc}

0800b6b2 <__swrite>:
 800b6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b6:	461f      	mov	r7, r3
 800b6b8:	898b      	ldrh	r3, [r1, #12]
 800b6ba:	05db      	lsls	r3, r3, #23
 800b6bc:	4605      	mov	r5, r0
 800b6be:	460c      	mov	r4, r1
 800b6c0:	4616      	mov	r6, r2
 800b6c2:	d505      	bpl.n	800b6d0 <__swrite+0x1e>
 800b6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f000 f8d4 	bl	800b878 <_lseek_r>
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b6da:	81a3      	strh	r3, [r4, #12]
 800b6dc:	4632      	mov	r2, r6
 800b6de:	463b      	mov	r3, r7
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e6:	f000 b8fb 	b.w	800b8e0 <_write_r>

0800b6ea <__sseek>:
 800b6ea:	b510      	push	{r4, lr}
 800b6ec:	460c      	mov	r4, r1
 800b6ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f2:	f000 f8c1 	bl	800b878 <_lseek_r>
 800b6f6:	1c43      	adds	r3, r0, #1
 800b6f8:	89a3      	ldrh	r3, [r4, #12]
 800b6fa:	bf15      	itete	ne
 800b6fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b6fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b702:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b706:	81a3      	strheq	r3, [r4, #12]
 800b708:	bf18      	it	ne
 800b70a:	81a3      	strhne	r3, [r4, #12]
 800b70c:	bd10      	pop	{r4, pc}

0800b70e <__sclose>:
 800b70e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b712:	f000 b8a1 	b.w	800b858 <_close_r>

0800b716 <__swbuf_r>:
 800b716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b718:	460e      	mov	r6, r1
 800b71a:	4614      	mov	r4, r2
 800b71c:	4605      	mov	r5, r0
 800b71e:	b118      	cbz	r0, 800b728 <__swbuf_r+0x12>
 800b720:	6a03      	ldr	r3, [r0, #32]
 800b722:	b90b      	cbnz	r3, 800b728 <__swbuf_r+0x12>
 800b724:	f7ff feba 	bl	800b49c <__sinit>
 800b728:	69a3      	ldr	r3, [r4, #24]
 800b72a:	60a3      	str	r3, [r4, #8]
 800b72c:	89a3      	ldrh	r3, [r4, #12]
 800b72e:	071a      	lsls	r2, r3, #28
 800b730:	d501      	bpl.n	800b736 <__swbuf_r+0x20>
 800b732:	6923      	ldr	r3, [r4, #16]
 800b734:	b943      	cbnz	r3, 800b748 <__swbuf_r+0x32>
 800b736:	4621      	mov	r1, r4
 800b738:	4628      	mov	r0, r5
 800b73a:	f000 f82b 	bl	800b794 <__swsetup_r>
 800b73e:	b118      	cbz	r0, 800b748 <__swbuf_r+0x32>
 800b740:	f04f 37ff 	mov.w	r7, #4294967295
 800b744:	4638      	mov	r0, r7
 800b746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	6922      	ldr	r2, [r4, #16]
 800b74c:	1a98      	subs	r0, r3, r2
 800b74e:	6963      	ldr	r3, [r4, #20]
 800b750:	b2f6      	uxtb	r6, r6
 800b752:	4283      	cmp	r3, r0
 800b754:	4637      	mov	r7, r6
 800b756:	dc05      	bgt.n	800b764 <__swbuf_r+0x4e>
 800b758:	4621      	mov	r1, r4
 800b75a:	4628      	mov	r0, r5
 800b75c:	f002 fdf4 	bl	800e348 <_fflush_r>
 800b760:	2800      	cmp	r0, #0
 800b762:	d1ed      	bne.n	800b740 <__swbuf_r+0x2a>
 800b764:	68a3      	ldr	r3, [r4, #8]
 800b766:	3b01      	subs	r3, #1
 800b768:	60a3      	str	r3, [r4, #8]
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	1c5a      	adds	r2, r3, #1
 800b76e:	6022      	str	r2, [r4, #0]
 800b770:	701e      	strb	r6, [r3, #0]
 800b772:	6962      	ldr	r2, [r4, #20]
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	429a      	cmp	r2, r3
 800b778:	d004      	beq.n	800b784 <__swbuf_r+0x6e>
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	07db      	lsls	r3, r3, #31
 800b77e:	d5e1      	bpl.n	800b744 <__swbuf_r+0x2e>
 800b780:	2e0a      	cmp	r6, #10
 800b782:	d1df      	bne.n	800b744 <__swbuf_r+0x2e>
 800b784:	4621      	mov	r1, r4
 800b786:	4628      	mov	r0, r5
 800b788:	f002 fdde 	bl	800e348 <_fflush_r>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d0d9      	beq.n	800b744 <__swbuf_r+0x2e>
 800b790:	e7d6      	b.n	800b740 <__swbuf_r+0x2a>
	...

0800b794 <__swsetup_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	4b29      	ldr	r3, [pc, #164]	@ (800b83c <__swsetup_r+0xa8>)
 800b798:	4605      	mov	r5, r0
 800b79a:	6818      	ldr	r0, [r3, #0]
 800b79c:	460c      	mov	r4, r1
 800b79e:	b118      	cbz	r0, 800b7a8 <__swsetup_r+0x14>
 800b7a0:	6a03      	ldr	r3, [r0, #32]
 800b7a2:	b90b      	cbnz	r3, 800b7a8 <__swsetup_r+0x14>
 800b7a4:	f7ff fe7a 	bl	800b49c <__sinit>
 800b7a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ac:	0719      	lsls	r1, r3, #28
 800b7ae:	d422      	bmi.n	800b7f6 <__swsetup_r+0x62>
 800b7b0:	06da      	lsls	r2, r3, #27
 800b7b2:	d407      	bmi.n	800b7c4 <__swsetup_r+0x30>
 800b7b4:	2209      	movs	r2, #9
 800b7b6:	602a      	str	r2, [r5, #0]
 800b7b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7bc:	81a3      	strh	r3, [r4, #12]
 800b7be:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c2:	e033      	b.n	800b82c <__swsetup_r+0x98>
 800b7c4:	0758      	lsls	r0, r3, #29
 800b7c6:	d512      	bpl.n	800b7ee <__swsetup_r+0x5a>
 800b7c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7ca:	b141      	cbz	r1, 800b7de <__swsetup_r+0x4a>
 800b7cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7d0:	4299      	cmp	r1, r3
 800b7d2:	d002      	beq.n	800b7da <__swsetup_r+0x46>
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	f000 ff17 	bl	800c608 <_free_r>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7e4:	81a3      	strh	r3, [r4, #12]
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	6063      	str	r3, [r4, #4]
 800b7ea:	6923      	ldr	r3, [r4, #16]
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	89a3      	ldrh	r3, [r4, #12]
 800b7f0:	f043 0308 	orr.w	r3, r3, #8
 800b7f4:	81a3      	strh	r3, [r4, #12]
 800b7f6:	6923      	ldr	r3, [r4, #16]
 800b7f8:	b94b      	cbnz	r3, 800b80e <__swsetup_r+0x7a>
 800b7fa:	89a3      	ldrh	r3, [r4, #12]
 800b7fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b804:	d003      	beq.n	800b80e <__swsetup_r+0x7a>
 800b806:	4621      	mov	r1, r4
 800b808:	4628      	mov	r0, r5
 800b80a:	f002 fdeb 	bl	800e3e4 <__smakebuf_r>
 800b80e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b812:	f013 0201 	ands.w	r2, r3, #1
 800b816:	d00a      	beq.n	800b82e <__swsetup_r+0x9a>
 800b818:	2200      	movs	r2, #0
 800b81a:	60a2      	str	r2, [r4, #8]
 800b81c:	6962      	ldr	r2, [r4, #20]
 800b81e:	4252      	negs	r2, r2
 800b820:	61a2      	str	r2, [r4, #24]
 800b822:	6922      	ldr	r2, [r4, #16]
 800b824:	b942      	cbnz	r2, 800b838 <__swsetup_r+0xa4>
 800b826:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b82a:	d1c5      	bne.n	800b7b8 <__swsetup_r+0x24>
 800b82c:	bd38      	pop	{r3, r4, r5, pc}
 800b82e:	0799      	lsls	r1, r3, #30
 800b830:	bf58      	it	pl
 800b832:	6962      	ldrpl	r2, [r4, #20]
 800b834:	60a2      	str	r2, [r4, #8]
 800b836:	e7f4      	b.n	800b822 <__swsetup_r+0x8e>
 800b838:	2000      	movs	r0, #0
 800b83a:	e7f7      	b.n	800b82c <__swsetup_r+0x98>
 800b83c:	20000038 	.word	0x20000038

0800b840 <memset>:
 800b840:	4402      	add	r2, r0
 800b842:	4603      	mov	r3, r0
 800b844:	4293      	cmp	r3, r2
 800b846:	d100      	bne.n	800b84a <memset+0xa>
 800b848:	4770      	bx	lr
 800b84a:	f803 1b01 	strb.w	r1, [r3], #1
 800b84e:	e7f9      	b.n	800b844 <memset+0x4>

0800b850 <_localeconv_r>:
 800b850:	4800      	ldr	r0, [pc, #0]	@ (800b854 <_localeconv_r+0x4>)
 800b852:	4770      	bx	lr
 800b854:	20000178 	.word	0x20000178

0800b858 <_close_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	4d06      	ldr	r5, [pc, #24]	@ (800b874 <_close_r+0x1c>)
 800b85c:	2300      	movs	r3, #0
 800b85e:	4604      	mov	r4, r0
 800b860:	4608      	mov	r0, r1
 800b862:	602b      	str	r3, [r5, #0]
 800b864:	f7f7 fdea 	bl	800343c <_close>
 800b868:	1c43      	adds	r3, r0, #1
 800b86a:	d102      	bne.n	800b872 <_close_r+0x1a>
 800b86c:	682b      	ldr	r3, [r5, #0]
 800b86e:	b103      	cbz	r3, 800b872 <_close_r+0x1a>
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	bd38      	pop	{r3, r4, r5, pc}
 800b874:	20002c54 	.word	0x20002c54

0800b878 <_lseek_r>:
 800b878:	b538      	push	{r3, r4, r5, lr}
 800b87a:	4d07      	ldr	r5, [pc, #28]	@ (800b898 <_lseek_r+0x20>)
 800b87c:	4604      	mov	r4, r0
 800b87e:	4608      	mov	r0, r1
 800b880:	4611      	mov	r1, r2
 800b882:	2200      	movs	r2, #0
 800b884:	602a      	str	r2, [r5, #0]
 800b886:	461a      	mov	r2, r3
 800b888:	f7f7 fdff 	bl	800348a <_lseek>
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	d102      	bne.n	800b896 <_lseek_r+0x1e>
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	b103      	cbz	r3, 800b896 <_lseek_r+0x1e>
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	bd38      	pop	{r3, r4, r5, pc}
 800b898:	20002c54 	.word	0x20002c54

0800b89c <_read_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	4d07      	ldr	r5, [pc, #28]	@ (800b8bc <_read_r+0x20>)
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	4608      	mov	r0, r1
 800b8a4:	4611      	mov	r1, r2
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	602a      	str	r2, [r5, #0]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	f7f7 fd8d 	bl	80033ca <_read>
 800b8b0:	1c43      	adds	r3, r0, #1
 800b8b2:	d102      	bne.n	800b8ba <_read_r+0x1e>
 800b8b4:	682b      	ldr	r3, [r5, #0]
 800b8b6:	b103      	cbz	r3, 800b8ba <_read_r+0x1e>
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	bd38      	pop	{r3, r4, r5, pc}
 800b8bc:	20002c54 	.word	0x20002c54

0800b8c0 <_sbrk_r>:
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	4d06      	ldr	r5, [pc, #24]	@ (800b8dc <_sbrk_r+0x1c>)
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	4608      	mov	r0, r1
 800b8ca:	602b      	str	r3, [r5, #0]
 800b8cc:	f7f7 fdea 	bl	80034a4 <_sbrk>
 800b8d0:	1c43      	adds	r3, r0, #1
 800b8d2:	d102      	bne.n	800b8da <_sbrk_r+0x1a>
 800b8d4:	682b      	ldr	r3, [r5, #0]
 800b8d6:	b103      	cbz	r3, 800b8da <_sbrk_r+0x1a>
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	bd38      	pop	{r3, r4, r5, pc}
 800b8dc:	20002c54 	.word	0x20002c54

0800b8e0 <_write_r>:
 800b8e0:	b538      	push	{r3, r4, r5, lr}
 800b8e2:	4d07      	ldr	r5, [pc, #28]	@ (800b900 <_write_r+0x20>)
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	4608      	mov	r0, r1
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	602a      	str	r2, [r5, #0]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	f7f7 fd88 	bl	8003404 <_write>
 800b8f4:	1c43      	adds	r3, r0, #1
 800b8f6:	d102      	bne.n	800b8fe <_write_r+0x1e>
 800b8f8:	682b      	ldr	r3, [r5, #0]
 800b8fa:	b103      	cbz	r3, 800b8fe <_write_r+0x1e>
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	bd38      	pop	{r3, r4, r5, pc}
 800b900:	20002c54 	.word	0x20002c54

0800b904 <__errno>:
 800b904:	4b01      	ldr	r3, [pc, #4]	@ (800b90c <__errno+0x8>)
 800b906:	6818      	ldr	r0, [r3, #0]
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	20000038 	.word	0x20000038

0800b910 <__libc_init_array>:
 800b910:	b570      	push	{r4, r5, r6, lr}
 800b912:	4d0d      	ldr	r5, [pc, #52]	@ (800b948 <__libc_init_array+0x38>)
 800b914:	4c0d      	ldr	r4, [pc, #52]	@ (800b94c <__libc_init_array+0x3c>)
 800b916:	1b64      	subs	r4, r4, r5
 800b918:	10a4      	asrs	r4, r4, #2
 800b91a:	2600      	movs	r6, #0
 800b91c:	42a6      	cmp	r6, r4
 800b91e:	d109      	bne.n	800b934 <__libc_init_array+0x24>
 800b920:	4d0b      	ldr	r5, [pc, #44]	@ (800b950 <__libc_init_array+0x40>)
 800b922:	4c0c      	ldr	r4, [pc, #48]	@ (800b954 <__libc_init_array+0x44>)
 800b924:	f003 fa1e 	bl	800ed64 <_init>
 800b928:	1b64      	subs	r4, r4, r5
 800b92a:	10a4      	asrs	r4, r4, #2
 800b92c:	2600      	movs	r6, #0
 800b92e:	42a6      	cmp	r6, r4
 800b930:	d105      	bne.n	800b93e <__libc_init_array+0x2e>
 800b932:	bd70      	pop	{r4, r5, r6, pc}
 800b934:	f855 3b04 	ldr.w	r3, [r5], #4
 800b938:	4798      	blx	r3
 800b93a:	3601      	adds	r6, #1
 800b93c:	e7ee      	b.n	800b91c <__libc_init_array+0xc>
 800b93e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b942:	4798      	blx	r3
 800b944:	3601      	adds	r6, #1
 800b946:	e7f2      	b.n	800b92e <__libc_init_array+0x1e>
 800b948:	0800ffd0 	.word	0x0800ffd0
 800b94c:	0800ffd0 	.word	0x0800ffd0
 800b950:	0800ffd0 	.word	0x0800ffd0
 800b954:	0800ffd4 	.word	0x0800ffd4

0800b958 <__retarget_lock_init_recursive>:
 800b958:	4770      	bx	lr

0800b95a <__retarget_lock_acquire_recursive>:
 800b95a:	4770      	bx	lr

0800b95c <__retarget_lock_release_recursive>:
 800b95c:	4770      	bx	lr
	...

0800b960 <nanf>:
 800b960:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b968 <nanf+0x8>
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	7fc00000 	.word	0x7fc00000

0800b96c <quorem>:
 800b96c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b970:	6903      	ldr	r3, [r0, #16]
 800b972:	690c      	ldr	r4, [r1, #16]
 800b974:	42a3      	cmp	r3, r4
 800b976:	4607      	mov	r7, r0
 800b978:	db7e      	blt.n	800ba78 <quorem+0x10c>
 800b97a:	3c01      	subs	r4, #1
 800b97c:	f101 0814 	add.w	r8, r1, #20
 800b980:	00a3      	lsls	r3, r4, #2
 800b982:	f100 0514 	add.w	r5, r0, #20
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b98c:	9301      	str	r3, [sp, #4]
 800b98e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b996:	3301      	adds	r3, #1
 800b998:	429a      	cmp	r2, r3
 800b99a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b99e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9a2:	d32e      	bcc.n	800ba02 <quorem+0x96>
 800b9a4:	f04f 0a00 	mov.w	sl, #0
 800b9a8:	46c4      	mov	ip, r8
 800b9aa:	46ae      	mov	lr, r5
 800b9ac:	46d3      	mov	fp, sl
 800b9ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b9b2:	b298      	uxth	r0, r3
 800b9b4:	fb06 a000 	mla	r0, r6, r0, sl
 800b9b8:	0c02      	lsrs	r2, r0, #16
 800b9ba:	0c1b      	lsrs	r3, r3, #16
 800b9bc:	fb06 2303 	mla	r3, r6, r3, r2
 800b9c0:	f8de 2000 	ldr.w	r2, [lr]
 800b9c4:	b280      	uxth	r0, r0
 800b9c6:	b292      	uxth	r2, r2
 800b9c8:	1a12      	subs	r2, r2, r0
 800b9ca:	445a      	add	r2, fp
 800b9cc:	f8de 0000 	ldr.w	r0, [lr]
 800b9d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b9da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b9de:	b292      	uxth	r2, r2
 800b9e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b9e4:	45e1      	cmp	r9, ip
 800b9e6:	f84e 2b04 	str.w	r2, [lr], #4
 800b9ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b9ee:	d2de      	bcs.n	800b9ae <quorem+0x42>
 800b9f0:	9b00      	ldr	r3, [sp, #0]
 800b9f2:	58eb      	ldr	r3, [r5, r3]
 800b9f4:	b92b      	cbnz	r3, 800ba02 <quorem+0x96>
 800b9f6:	9b01      	ldr	r3, [sp, #4]
 800b9f8:	3b04      	subs	r3, #4
 800b9fa:	429d      	cmp	r5, r3
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	d32f      	bcc.n	800ba60 <quorem+0xf4>
 800ba00:	613c      	str	r4, [r7, #16]
 800ba02:	4638      	mov	r0, r7
 800ba04:	f001 f90e 	bl	800cc24 <__mcmp>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	db25      	blt.n	800ba58 <quorem+0xec>
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	2000      	movs	r0, #0
 800ba10:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba14:	f8d1 c000 	ldr.w	ip, [r1]
 800ba18:	fa1f fe82 	uxth.w	lr, r2
 800ba1c:	fa1f f38c 	uxth.w	r3, ip
 800ba20:	eba3 030e 	sub.w	r3, r3, lr
 800ba24:	4403      	add	r3, r0
 800ba26:	0c12      	lsrs	r2, r2, #16
 800ba28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba36:	45c1      	cmp	r9, r8
 800ba38:	f841 3b04 	str.w	r3, [r1], #4
 800ba3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba40:	d2e6      	bcs.n	800ba10 <quorem+0xa4>
 800ba42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba4a:	b922      	cbnz	r2, 800ba56 <quorem+0xea>
 800ba4c:	3b04      	subs	r3, #4
 800ba4e:	429d      	cmp	r5, r3
 800ba50:	461a      	mov	r2, r3
 800ba52:	d30b      	bcc.n	800ba6c <quorem+0x100>
 800ba54:	613c      	str	r4, [r7, #16]
 800ba56:	3601      	adds	r6, #1
 800ba58:	4630      	mov	r0, r6
 800ba5a:	b003      	add	sp, #12
 800ba5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba60:	6812      	ldr	r2, [r2, #0]
 800ba62:	3b04      	subs	r3, #4
 800ba64:	2a00      	cmp	r2, #0
 800ba66:	d1cb      	bne.n	800ba00 <quorem+0x94>
 800ba68:	3c01      	subs	r4, #1
 800ba6a:	e7c6      	b.n	800b9fa <quorem+0x8e>
 800ba6c:	6812      	ldr	r2, [r2, #0]
 800ba6e:	3b04      	subs	r3, #4
 800ba70:	2a00      	cmp	r2, #0
 800ba72:	d1ef      	bne.n	800ba54 <quorem+0xe8>
 800ba74:	3c01      	subs	r4, #1
 800ba76:	e7ea      	b.n	800ba4e <quorem+0xe2>
 800ba78:	2000      	movs	r0, #0
 800ba7a:	e7ee      	b.n	800ba5a <quorem+0xee>
 800ba7c:	0000      	movs	r0, r0
	...

0800ba80 <_dtoa_r>:
 800ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba84:	69c7      	ldr	r7, [r0, #28]
 800ba86:	b099      	sub	sp, #100	@ 0x64
 800ba88:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ba8c:	ec55 4b10 	vmov	r4, r5, d0
 800ba90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ba92:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba94:	4683      	mov	fp, r0
 800ba96:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba9a:	b97f      	cbnz	r7, 800babc <_dtoa_r+0x3c>
 800ba9c:	2010      	movs	r0, #16
 800ba9e:	f7fe fd4f 	bl	800a540 <malloc>
 800baa2:	4602      	mov	r2, r0
 800baa4:	f8cb 001c 	str.w	r0, [fp, #28]
 800baa8:	b920      	cbnz	r0, 800bab4 <_dtoa_r+0x34>
 800baaa:	4ba7      	ldr	r3, [pc, #668]	@ (800bd48 <_dtoa_r+0x2c8>)
 800baac:	21ef      	movs	r1, #239	@ 0xef
 800baae:	48a7      	ldr	r0, [pc, #668]	@ (800bd4c <_dtoa_r+0x2cc>)
 800bab0:	f002 fd3a 	bl	800e528 <__assert_func>
 800bab4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bab8:	6007      	str	r7, [r0, #0]
 800baba:	60c7      	str	r7, [r0, #12]
 800babc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bac0:	6819      	ldr	r1, [r3, #0]
 800bac2:	b159      	cbz	r1, 800badc <_dtoa_r+0x5c>
 800bac4:	685a      	ldr	r2, [r3, #4]
 800bac6:	604a      	str	r2, [r1, #4]
 800bac8:	2301      	movs	r3, #1
 800baca:	4093      	lsls	r3, r2
 800bacc:	608b      	str	r3, [r1, #8]
 800bace:	4658      	mov	r0, fp
 800bad0:	f000 fe24 	bl	800c71c <_Bfree>
 800bad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bad8:	2200      	movs	r2, #0
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	1e2b      	subs	r3, r5, #0
 800bade:	bfb9      	ittee	lt
 800bae0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bae4:	9303      	strlt	r3, [sp, #12]
 800bae6:	2300      	movge	r3, #0
 800bae8:	6033      	strge	r3, [r6, #0]
 800baea:	9f03      	ldr	r7, [sp, #12]
 800baec:	4b98      	ldr	r3, [pc, #608]	@ (800bd50 <_dtoa_r+0x2d0>)
 800baee:	bfbc      	itt	lt
 800baf0:	2201      	movlt	r2, #1
 800baf2:	6032      	strlt	r2, [r6, #0]
 800baf4:	43bb      	bics	r3, r7
 800baf6:	d112      	bne.n	800bb1e <_dtoa_r+0x9e>
 800baf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bafa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bafe:	6013      	str	r3, [r2, #0]
 800bb00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb04:	4323      	orrs	r3, r4
 800bb06:	f000 854d 	beq.w	800c5a4 <_dtoa_r+0xb24>
 800bb0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bd64 <_dtoa_r+0x2e4>
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 854f 	beq.w	800c5b4 <_dtoa_r+0xb34>
 800bb16:	f10a 0303 	add.w	r3, sl, #3
 800bb1a:	f000 bd49 	b.w	800c5b0 <_dtoa_r+0xb30>
 800bb1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb22:	2200      	movs	r2, #0
 800bb24:	ec51 0b17 	vmov	r0, r1, d7
 800bb28:	2300      	movs	r3, #0
 800bb2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bb2e:	f7f4 ffeb 	bl	8000b08 <__aeabi_dcmpeq>
 800bb32:	4680      	mov	r8, r0
 800bb34:	b158      	cbz	r0, 800bb4e <_dtoa_r+0xce>
 800bb36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb38:	2301      	movs	r3, #1
 800bb3a:	6013      	str	r3, [r2, #0]
 800bb3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb3e:	b113      	cbz	r3, 800bb46 <_dtoa_r+0xc6>
 800bb40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb42:	4b84      	ldr	r3, [pc, #528]	@ (800bd54 <_dtoa_r+0x2d4>)
 800bb44:	6013      	str	r3, [r2, #0]
 800bb46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bd68 <_dtoa_r+0x2e8>
 800bb4a:	f000 bd33 	b.w	800c5b4 <_dtoa_r+0xb34>
 800bb4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bb52:	aa16      	add	r2, sp, #88	@ 0x58
 800bb54:	a917      	add	r1, sp, #92	@ 0x5c
 800bb56:	4658      	mov	r0, fp
 800bb58:	f001 f984 	bl	800ce64 <__d2b>
 800bb5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bb60:	4681      	mov	r9, r0
 800bb62:	2e00      	cmp	r6, #0
 800bb64:	d077      	beq.n	800bc56 <_dtoa_r+0x1d6>
 800bb66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bb6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bb78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bb7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bb80:	4619      	mov	r1, r3
 800bb82:	2200      	movs	r2, #0
 800bb84:	4b74      	ldr	r3, [pc, #464]	@ (800bd58 <_dtoa_r+0x2d8>)
 800bb86:	f7f4 fb9f 	bl	80002c8 <__aeabi_dsub>
 800bb8a:	a369      	add	r3, pc, #420	@ (adr r3, 800bd30 <_dtoa_r+0x2b0>)
 800bb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb90:	f7f4 fd52 	bl	8000638 <__aeabi_dmul>
 800bb94:	a368      	add	r3, pc, #416	@ (adr r3, 800bd38 <_dtoa_r+0x2b8>)
 800bb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9a:	f7f4 fb97 	bl	80002cc <__adddf3>
 800bb9e:	4604      	mov	r4, r0
 800bba0:	4630      	mov	r0, r6
 800bba2:	460d      	mov	r5, r1
 800bba4:	f7f4 fcde 	bl	8000564 <__aeabi_i2d>
 800bba8:	a365      	add	r3, pc, #404	@ (adr r3, 800bd40 <_dtoa_r+0x2c0>)
 800bbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbae:	f7f4 fd43 	bl	8000638 <__aeabi_dmul>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	4629      	mov	r1, r5
 800bbba:	f7f4 fb87 	bl	80002cc <__adddf3>
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	460d      	mov	r5, r1
 800bbc2:	f7f4 ffe9 	bl	8000b98 <__aeabi_d2iz>
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	4607      	mov	r7, r0
 800bbca:	2300      	movs	r3, #0
 800bbcc:	4620      	mov	r0, r4
 800bbce:	4629      	mov	r1, r5
 800bbd0:	f7f4 ffa4 	bl	8000b1c <__aeabi_dcmplt>
 800bbd4:	b140      	cbz	r0, 800bbe8 <_dtoa_r+0x168>
 800bbd6:	4638      	mov	r0, r7
 800bbd8:	f7f4 fcc4 	bl	8000564 <__aeabi_i2d>
 800bbdc:	4622      	mov	r2, r4
 800bbde:	462b      	mov	r3, r5
 800bbe0:	f7f4 ff92 	bl	8000b08 <__aeabi_dcmpeq>
 800bbe4:	b900      	cbnz	r0, 800bbe8 <_dtoa_r+0x168>
 800bbe6:	3f01      	subs	r7, #1
 800bbe8:	2f16      	cmp	r7, #22
 800bbea:	d851      	bhi.n	800bc90 <_dtoa_r+0x210>
 800bbec:	4b5b      	ldr	r3, [pc, #364]	@ (800bd5c <_dtoa_r+0x2dc>)
 800bbee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbfa:	f7f4 ff8f 	bl	8000b1c <__aeabi_dcmplt>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d048      	beq.n	800bc94 <_dtoa_r+0x214>
 800bc02:	3f01      	subs	r7, #1
 800bc04:	2300      	movs	r3, #0
 800bc06:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc0a:	1b9b      	subs	r3, r3, r6
 800bc0c:	1e5a      	subs	r2, r3, #1
 800bc0e:	bf44      	itt	mi
 800bc10:	f1c3 0801 	rsbmi	r8, r3, #1
 800bc14:	2300      	movmi	r3, #0
 800bc16:	9208      	str	r2, [sp, #32]
 800bc18:	bf54      	ite	pl
 800bc1a:	f04f 0800 	movpl.w	r8, #0
 800bc1e:	9308      	strmi	r3, [sp, #32]
 800bc20:	2f00      	cmp	r7, #0
 800bc22:	db39      	blt.n	800bc98 <_dtoa_r+0x218>
 800bc24:	9b08      	ldr	r3, [sp, #32]
 800bc26:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bc28:	443b      	add	r3, r7
 800bc2a:	9308      	str	r3, [sp, #32]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc32:	2b09      	cmp	r3, #9
 800bc34:	d864      	bhi.n	800bd00 <_dtoa_r+0x280>
 800bc36:	2b05      	cmp	r3, #5
 800bc38:	bfc4      	itt	gt
 800bc3a:	3b04      	subgt	r3, #4
 800bc3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bc3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc40:	f1a3 0302 	sub.w	r3, r3, #2
 800bc44:	bfcc      	ite	gt
 800bc46:	2400      	movgt	r4, #0
 800bc48:	2401      	movle	r4, #1
 800bc4a:	2b03      	cmp	r3, #3
 800bc4c:	d863      	bhi.n	800bd16 <_dtoa_r+0x296>
 800bc4e:	e8df f003 	tbb	[pc, r3]
 800bc52:	372a      	.short	0x372a
 800bc54:	5535      	.short	0x5535
 800bc56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bc5a:	441e      	add	r6, r3
 800bc5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bc60:	2b20      	cmp	r3, #32
 800bc62:	bfc1      	itttt	gt
 800bc64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bc68:	409f      	lslgt	r7, r3
 800bc6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bc6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bc72:	bfd6      	itet	le
 800bc74:	f1c3 0320 	rsble	r3, r3, #32
 800bc78:	ea47 0003 	orrgt.w	r0, r7, r3
 800bc7c:	fa04 f003 	lslle.w	r0, r4, r3
 800bc80:	f7f4 fc60 	bl	8000544 <__aeabi_ui2d>
 800bc84:	2201      	movs	r2, #1
 800bc86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bc8a:	3e01      	subs	r6, #1
 800bc8c:	9214      	str	r2, [sp, #80]	@ 0x50
 800bc8e:	e777      	b.n	800bb80 <_dtoa_r+0x100>
 800bc90:	2301      	movs	r3, #1
 800bc92:	e7b8      	b.n	800bc06 <_dtoa_r+0x186>
 800bc94:	9012      	str	r0, [sp, #72]	@ 0x48
 800bc96:	e7b7      	b.n	800bc08 <_dtoa_r+0x188>
 800bc98:	427b      	negs	r3, r7
 800bc9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	eba8 0807 	sub.w	r8, r8, r7
 800bca2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bca4:	e7c4      	b.n	800bc30 <_dtoa_r+0x1b0>
 800bca6:	2300      	movs	r3, #0
 800bca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	dc35      	bgt.n	800bd1c <_dtoa_r+0x29c>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	9300      	str	r3, [sp, #0]
 800bcb4:	9307      	str	r3, [sp, #28]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcba:	e00b      	b.n	800bcd4 <_dtoa_r+0x254>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e7f3      	b.n	800bca8 <_dtoa_r+0x228>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcc6:	18fb      	adds	r3, r7, r3
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	3301      	adds	r3, #1
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	9307      	str	r3, [sp, #28]
 800bcd0:	bfb8      	it	lt
 800bcd2:	2301      	movlt	r3, #1
 800bcd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bcd8:	2100      	movs	r1, #0
 800bcda:	2204      	movs	r2, #4
 800bcdc:	f102 0514 	add.w	r5, r2, #20
 800bce0:	429d      	cmp	r5, r3
 800bce2:	d91f      	bls.n	800bd24 <_dtoa_r+0x2a4>
 800bce4:	6041      	str	r1, [r0, #4]
 800bce6:	4658      	mov	r0, fp
 800bce8:	f000 fcd8 	bl	800c69c <_Balloc>
 800bcec:	4682      	mov	sl, r0
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	d13c      	bne.n	800bd6c <_dtoa_r+0x2ec>
 800bcf2:	4b1b      	ldr	r3, [pc, #108]	@ (800bd60 <_dtoa_r+0x2e0>)
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	f240 11af 	movw	r1, #431	@ 0x1af
 800bcfa:	e6d8      	b.n	800baae <_dtoa_r+0x2e>
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e7e0      	b.n	800bcc2 <_dtoa_r+0x242>
 800bd00:	2401      	movs	r4, #1
 800bd02:	2300      	movs	r3, #0
 800bd04:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd06:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bd08:	f04f 33ff 	mov.w	r3, #4294967295
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	9307      	str	r3, [sp, #28]
 800bd10:	2200      	movs	r2, #0
 800bd12:	2312      	movs	r3, #18
 800bd14:	e7d0      	b.n	800bcb8 <_dtoa_r+0x238>
 800bd16:	2301      	movs	r3, #1
 800bd18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd1a:	e7f5      	b.n	800bd08 <_dtoa_r+0x288>
 800bd1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	9307      	str	r3, [sp, #28]
 800bd22:	e7d7      	b.n	800bcd4 <_dtoa_r+0x254>
 800bd24:	3101      	adds	r1, #1
 800bd26:	0052      	lsls	r2, r2, #1
 800bd28:	e7d8      	b.n	800bcdc <_dtoa_r+0x25c>
 800bd2a:	bf00      	nop
 800bd2c:	f3af 8000 	nop.w
 800bd30:	636f4361 	.word	0x636f4361
 800bd34:	3fd287a7 	.word	0x3fd287a7
 800bd38:	8b60c8b3 	.word	0x8b60c8b3
 800bd3c:	3fc68a28 	.word	0x3fc68a28
 800bd40:	509f79fb 	.word	0x509f79fb
 800bd44:	3fd34413 	.word	0x3fd34413
 800bd48:	0800fbe2 	.word	0x0800fbe2
 800bd4c:	0800fbf9 	.word	0x0800fbf9
 800bd50:	7ff00000 	.word	0x7ff00000
 800bd54:	0800fbad 	.word	0x0800fbad
 800bd58:	3ff80000 	.word	0x3ff80000
 800bd5c:	0800fcf0 	.word	0x0800fcf0
 800bd60:	0800fc51 	.word	0x0800fc51
 800bd64:	0800fbde 	.word	0x0800fbde
 800bd68:	0800fbac 	.word	0x0800fbac
 800bd6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd70:	6018      	str	r0, [r3, #0]
 800bd72:	9b07      	ldr	r3, [sp, #28]
 800bd74:	2b0e      	cmp	r3, #14
 800bd76:	f200 80a4 	bhi.w	800bec2 <_dtoa_r+0x442>
 800bd7a:	2c00      	cmp	r4, #0
 800bd7c:	f000 80a1 	beq.w	800bec2 <_dtoa_r+0x442>
 800bd80:	2f00      	cmp	r7, #0
 800bd82:	dd33      	ble.n	800bdec <_dtoa_r+0x36c>
 800bd84:	4bad      	ldr	r3, [pc, #692]	@ (800c03c <_dtoa_r+0x5bc>)
 800bd86:	f007 020f 	and.w	r2, r7, #15
 800bd8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd8e:	ed93 7b00 	vldr	d7, [r3]
 800bd92:	05f8      	lsls	r0, r7, #23
 800bd94:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bd98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bd9c:	d516      	bpl.n	800bdcc <_dtoa_r+0x34c>
 800bd9e:	4ba8      	ldr	r3, [pc, #672]	@ (800c040 <_dtoa_r+0x5c0>)
 800bda0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bda4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bda8:	f7f4 fd70 	bl	800088c <__aeabi_ddiv>
 800bdac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdb0:	f004 040f 	and.w	r4, r4, #15
 800bdb4:	2603      	movs	r6, #3
 800bdb6:	4da2      	ldr	r5, [pc, #648]	@ (800c040 <_dtoa_r+0x5c0>)
 800bdb8:	b954      	cbnz	r4, 800bdd0 <_dtoa_r+0x350>
 800bdba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdc2:	f7f4 fd63 	bl	800088c <__aeabi_ddiv>
 800bdc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdca:	e028      	b.n	800be1e <_dtoa_r+0x39e>
 800bdcc:	2602      	movs	r6, #2
 800bdce:	e7f2      	b.n	800bdb6 <_dtoa_r+0x336>
 800bdd0:	07e1      	lsls	r1, r4, #31
 800bdd2:	d508      	bpl.n	800bde6 <_dtoa_r+0x366>
 800bdd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bddc:	f7f4 fc2c 	bl	8000638 <__aeabi_dmul>
 800bde0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bde4:	3601      	adds	r6, #1
 800bde6:	1064      	asrs	r4, r4, #1
 800bde8:	3508      	adds	r5, #8
 800bdea:	e7e5      	b.n	800bdb8 <_dtoa_r+0x338>
 800bdec:	f000 80d2 	beq.w	800bf94 <_dtoa_r+0x514>
 800bdf0:	427c      	negs	r4, r7
 800bdf2:	4b92      	ldr	r3, [pc, #584]	@ (800c03c <_dtoa_r+0x5bc>)
 800bdf4:	4d92      	ldr	r5, [pc, #584]	@ (800c040 <_dtoa_r+0x5c0>)
 800bdf6:	f004 020f 	and.w	r2, r4, #15
 800bdfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be06:	f7f4 fc17 	bl	8000638 <__aeabi_dmul>
 800be0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be0e:	1124      	asrs	r4, r4, #4
 800be10:	2300      	movs	r3, #0
 800be12:	2602      	movs	r6, #2
 800be14:	2c00      	cmp	r4, #0
 800be16:	f040 80b2 	bne.w	800bf7e <_dtoa_r+0x4fe>
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1d3      	bne.n	800bdc6 <_dtoa_r+0x346>
 800be1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be24:	2b00      	cmp	r3, #0
 800be26:	f000 80b7 	beq.w	800bf98 <_dtoa_r+0x518>
 800be2a:	4b86      	ldr	r3, [pc, #536]	@ (800c044 <_dtoa_r+0x5c4>)
 800be2c:	2200      	movs	r2, #0
 800be2e:	4620      	mov	r0, r4
 800be30:	4629      	mov	r1, r5
 800be32:	f7f4 fe73 	bl	8000b1c <__aeabi_dcmplt>
 800be36:	2800      	cmp	r0, #0
 800be38:	f000 80ae 	beq.w	800bf98 <_dtoa_r+0x518>
 800be3c:	9b07      	ldr	r3, [sp, #28]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f000 80aa 	beq.w	800bf98 <_dtoa_r+0x518>
 800be44:	9b00      	ldr	r3, [sp, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	dd37      	ble.n	800beba <_dtoa_r+0x43a>
 800be4a:	1e7b      	subs	r3, r7, #1
 800be4c:	9304      	str	r3, [sp, #16]
 800be4e:	4620      	mov	r0, r4
 800be50:	4b7d      	ldr	r3, [pc, #500]	@ (800c048 <_dtoa_r+0x5c8>)
 800be52:	2200      	movs	r2, #0
 800be54:	4629      	mov	r1, r5
 800be56:	f7f4 fbef 	bl	8000638 <__aeabi_dmul>
 800be5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be5e:	9c00      	ldr	r4, [sp, #0]
 800be60:	3601      	adds	r6, #1
 800be62:	4630      	mov	r0, r6
 800be64:	f7f4 fb7e 	bl	8000564 <__aeabi_i2d>
 800be68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be6c:	f7f4 fbe4 	bl	8000638 <__aeabi_dmul>
 800be70:	4b76      	ldr	r3, [pc, #472]	@ (800c04c <_dtoa_r+0x5cc>)
 800be72:	2200      	movs	r2, #0
 800be74:	f7f4 fa2a 	bl	80002cc <__adddf3>
 800be78:	4605      	mov	r5, r0
 800be7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800be7e:	2c00      	cmp	r4, #0
 800be80:	f040 808d 	bne.w	800bf9e <_dtoa_r+0x51e>
 800be84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be88:	4b71      	ldr	r3, [pc, #452]	@ (800c050 <_dtoa_r+0x5d0>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	f7f4 fa1c 	bl	80002c8 <__aeabi_dsub>
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be98:	462a      	mov	r2, r5
 800be9a:	4633      	mov	r3, r6
 800be9c:	f7f4 fe5c 	bl	8000b58 <__aeabi_dcmpgt>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	f040 828b 	bne.w	800c3bc <_dtoa_r+0x93c>
 800bea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beaa:	462a      	mov	r2, r5
 800beac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800beb0:	f7f4 fe34 	bl	8000b1c <__aeabi_dcmplt>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	f040 8128 	bne.w	800c10a <_dtoa_r+0x68a>
 800beba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bebe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bec2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f2c0 815a 	blt.w	800c17e <_dtoa_r+0x6fe>
 800beca:	2f0e      	cmp	r7, #14
 800becc:	f300 8157 	bgt.w	800c17e <_dtoa_r+0x6fe>
 800bed0:	4b5a      	ldr	r3, [pc, #360]	@ (800c03c <_dtoa_r+0x5bc>)
 800bed2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bed6:	ed93 7b00 	vldr	d7, [r3]
 800beda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bedc:	2b00      	cmp	r3, #0
 800bede:	ed8d 7b00 	vstr	d7, [sp]
 800bee2:	da03      	bge.n	800beec <_dtoa_r+0x46c>
 800bee4:	9b07      	ldr	r3, [sp, #28]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f340 8101 	ble.w	800c0ee <_dtoa_r+0x66e>
 800beec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bef0:	4656      	mov	r6, sl
 800bef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bef6:	4620      	mov	r0, r4
 800bef8:	4629      	mov	r1, r5
 800befa:	f7f4 fcc7 	bl	800088c <__aeabi_ddiv>
 800befe:	f7f4 fe4b 	bl	8000b98 <__aeabi_d2iz>
 800bf02:	4680      	mov	r8, r0
 800bf04:	f7f4 fb2e 	bl	8000564 <__aeabi_i2d>
 800bf08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf0c:	f7f4 fb94 	bl	8000638 <__aeabi_dmul>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4620      	mov	r0, r4
 800bf16:	4629      	mov	r1, r5
 800bf18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf1c:	f7f4 f9d4 	bl	80002c8 <__aeabi_dsub>
 800bf20:	f806 4b01 	strb.w	r4, [r6], #1
 800bf24:	9d07      	ldr	r5, [sp, #28]
 800bf26:	eba6 040a 	sub.w	r4, r6, sl
 800bf2a:	42a5      	cmp	r5, r4
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	f040 8117 	bne.w	800c162 <_dtoa_r+0x6e2>
 800bf34:	f7f4 f9ca 	bl	80002cc <__adddf3>
 800bf38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	460d      	mov	r5, r1
 800bf40:	f7f4 fe0a 	bl	8000b58 <__aeabi_dcmpgt>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	f040 80f9 	bne.w	800c13c <_dtoa_r+0x6bc>
 800bf4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf4e:	4620      	mov	r0, r4
 800bf50:	4629      	mov	r1, r5
 800bf52:	f7f4 fdd9 	bl	8000b08 <__aeabi_dcmpeq>
 800bf56:	b118      	cbz	r0, 800bf60 <_dtoa_r+0x4e0>
 800bf58:	f018 0f01 	tst.w	r8, #1
 800bf5c:	f040 80ee 	bne.w	800c13c <_dtoa_r+0x6bc>
 800bf60:	4649      	mov	r1, r9
 800bf62:	4658      	mov	r0, fp
 800bf64:	f000 fbda 	bl	800c71c <_Bfree>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	7033      	strb	r3, [r6, #0]
 800bf6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf6e:	3701      	adds	r7, #1
 800bf70:	601f      	str	r7, [r3, #0]
 800bf72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f000 831d 	beq.w	800c5b4 <_dtoa_r+0xb34>
 800bf7a:	601e      	str	r6, [r3, #0]
 800bf7c:	e31a      	b.n	800c5b4 <_dtoa_r+0xb34>
 800bf7e:	07e2      	lsls	r2, r4, #31
 800bf80:	d505      	bpl.n	800bf8e <_dtoa_r+0x50e>
 800bf82:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf86:	f7f4 fb57 	bl	8000638 <__aeabi_dmul>
 800bf8a:	3601      	adds	r6, #1
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	1064      	asrs	r4, r4, #1
 800bf90:	3508      	adds	r5, #8
 800bf92:	e73f      	b.n	800be14 <_dtoa_r+0x394>
 800bf94:	2602      	movs	r6, #2
 800bf96:	e742      	b.n	800be1e <_dtoa_r+0x39e>
 800bf98:	9c07      	ldr	r4, [sp, #28]
 800bf9a:	9704      	str	r7, [sp, #16]
 800bf9c:	e761      	b.n	800be62 <_dtoa_r+0x3e2>
 800bf9e:	4b27      	ldr	r3, [pc, #156]	@ (800c03c <_dtoa_r+0x5bc>)
 800bfa0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bfa2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfa6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfaa:	4454      	add	r4, sl
 800bfac:	2900      	cmp	r1, #0
 800bfae:	d053      	beq.n	800c058 <_dtoa_r+0x5d8>
 800bfb0:	4928      	ldr	r1, [pc, #160]	@ (800c054 <_dtoa_r+0x5d4>)
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	f7f4 fc6a 	bl	800088c <__aeabi_ddiv>
 800bfb8:	4633      	mov	r3, r6
 800bfba:	462a      	mov	r2, r5
 800bfbc:	f7f4 f984 	bl	80002c8 <__aeabi_dsub>
 800bfc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bfc4:	4656      	mov	r6, sl
 800bfc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfca:	f7f4 fde5 	bl	8000b98 <__aeabi_d2iz>
 800bfce:	4605      	mov	r5, r0
 800bfd0:	f7f4 fac8 	bl	8000564 <__aeabi_i2d>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfdc:	f7f4 f974 	bl	80002c8 <__aeabi_dsub>
 800bfe0:	3530      	adds	r5, #48	@ 0x30
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfea:	f806 5b01 	strb.w	r5, [r6], #1
 800bfee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bff2:	f7f4 fd93 	bl	8000b1c <__aeabi_dcmplt>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d171      	bne.n	800c0de <_dtoa_r+0x65e>
 800bffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bffe:	4911      	ldr	r1, [pc, #68]	@ (800c044 <_dtoa_r+0x5c4>)
 800c000:	2000      	movs	r0, #0
 800c002:	f7f4 f961 	bl	80002c8 <__aeabi_dsub>
 800c006:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c00a:	f7f4 fd87 	bl	8000b1c <__aeabi_dcmplt>
 800c00e:	2800      	cmp	r0, #0
 800c010:	f040 8095 	bne.w	800c13e <_dtoa_r+0x6be>
 800c014:	42a6      	cmp	r6, r4
 800c016:	f43f af50 	beq.w	800beba <_dtoa_r+0x43a>
 800c01a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c01e:	4b0a      	ldr	r3, [pc, #40]	@ (800c048 <_dtoa_r+0x5c8>)
 800c020:	2200      	movs	r2, #0
 800c022:	f7f4 fb09 	bl	8000638 <__aeabi_dmul>
 800c026:	4b08      	ldr	r3, [pc, #32]	@ (800c048 <_dtoa_r+0x5c8>)
 800c028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c02c:	2200      	movs	r2, #0
 800c02e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c032:	f7f4 fb01 	bl	8000638 <__aeabi_dmul>
 800c036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c03a:	e7c4      	b.n	800bfc6 <_dtoa_r+0x546>
 800c03c:	0800fcf0 	.word	0x0800fcf0
 800c040:	0800fcc8 	.word	0x0800fcc8
 800c044:	3ff00000 	.word	0x3ff00000
 800c048:	40240000 	.word	0x40240000
 800c04c:	401c0000 	.word	0x401c0000
 800c050:	40140000 	.word	0x40140000
 800c054:	3fe00000 	.word	0x3fe00000
 800c058:	4631      	mov	r1, r6
 800c05a:	4628      	mov	r0, r5
 800c05c:	f7f4 faec 	bl	8000638 <__aeabi_dmul>
 800c060:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c064:	9415      	str	r4, [sp, #84]	@ 0x54
 800c066:	4656      	mov	r6, sl
 800c068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c06c:	f7f4 fd94 	bl	8000b98 <__aeabi_d2iz>
 800c070:	4605      	mov	r5, r0
 800c072:	f7f4 fa77 	bl	8000564 <__aeabi_i2d>
 800c076:	4602      	mov	r2, r0
 800c078:	460b      	mov	r3, r1
 800c07a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c07e:	f7f4 f923 	bl	80002c8 <__aeabi_dsub>
 800c082:	3530      	adds	r5, #48	@ 0x30
 800c084:	f806 5b01 	strb.w	r5, [r6], #1
 800c088:	4602      	mov	r2, r0
 800c08a:	460b      	mov	r3, r1
 800c08c:	42a6      	cmp	r6, r4
 800c08e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c092:	f04f 0200 	mov.w	r2, #0
 800c096:	d124      	bne.n	800c0e2 <_dtoa_r+0x662>
 800c098:	4bac      	ldr	r3, [pc, #688]	@ (800c34c <_dtoa_r+0x8cc>)
 800c09a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c09e:	f7f4 f915 	bl	80002cc <__adddf3>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0aa:	f7f4 fd55 	bl	8000b58 <__aeabi_dcmpgt>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d145      	bne.n	800c13e <_dtoa_r+0x6be>
 800c0b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0b6:	49a5      	ldr	r1, [pc, #660]	@ (800c34c <_dtoa_r+0x8cc>)
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	f7f4 f905 	bl	80002c8 <__aeabi_dsub>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0c6:	f7f4 fd29 	bl	8000b1c <__aeabi_dcmplt>
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	f43f aef5 	beq.w	800beba <_dtoa_r+0x43a>
 800c0d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c0d2:	1e73      	subs	r3, r6, #1
 800c0d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c0d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c0da:	2b30      	cmp	r3, #48	@ 0x30
 800c0dc:	d0f8      	beq.n	800c0d0 <_dtoa_r+0x650>
 800c0de:	9f04      	ldr	r7, [sp, #16]
 800c0e0:	e73e      	b.n	800bf60 <_dtoa_r+0x4e0>
 800c0e2:	4b9b      	ldr	r3, [pc, #620]	@ (800c350 <_dtoa_r+0x8d0>)
 800c0e4:	f7f4 faa8 	bl	8000638 <__aeabi_dmul>
 800c0e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0ec:	e7bc      	b.n	800c068 <_dtoa_r+0x5e8>
 800c0ee:	d10c      	bne.n	800c10a <_dtoa_r+0x68a>
 800c0f0:	4b98      	ldr	r3, [pc, #608]	@ (800c354 <_dtoa_r+0x8d4>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0f8:	f7f4 fa9e 	bl	8000638 <__aeabi_dmul>
 800c0fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c100:	f7f4 fd20 	bl	8000b44 <__aeabi_dcmpge>
 800c104:	2800      	cmp	r0, #0
 800c106:	f000 8157 	beq.w	800c3b8 <_dtoa_r+0x938>
 800c10a:	2400      	movs	r4, #0
 800c10c:	4625      	mov	r5, r4
 800c10e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c110:	43db      	mvns	r3, r3
 800c112:	9304      	str	r3, [sp, #16]
 800c114:	4656      	mov	r6, sl
 800c116:	2700      	movs	r7, #0
 800c118:	4621      	mov	r1, r4
 800c11a:	4658      	mov	r0, fp
 800c11c:	f000 fafe 	bl	800c71c <_Bfree>
 800c120:	2d00      	cmp	r5, #0
 800c122:	d0dc      	beq.n	800c0de <_dtoa_r+0x65e>
 800c124:	b12f      	cbz	r7, 800c132 <_dtoa_r+0x6b2>
 800c126:	42af      	cmp	r7, r5
 800c128:	d003      	beq.n	800c132 <_dtoa_r+0x6b2>
 800c12a:	4639      	mov	r1, r7
 800c12c:	4658      	mov	r0, fp
 800c12e:	f000 faf5 	bl	800c71c <_Bfree>
 800c132:	4629      	mov	r1, r5
 800c134:	4658      	mov	r0, fp
 800c136:	f000 faf1 	bl	800c71c <_Bfree>
 800c13a:	e7d0      	b.n	800c0de <_dtoa_r+0x65e>
 800c13c:	9704      	str	r7, [sp, #16]
 800c13e:	4633      	mov	r3, r6
 800c140:	461e      	mov	r6, r3
 800c142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c146:	2a39      	cmp	r2, #57	@ 0x39
 800c148:	d107      	bne.n	800c15a <_dtoa_r+0x6da>
 800c14a:	459a      	cmp	sl, r3
 800c14c:	d1f8      	bne.n	800c140 <_dtoa_r+0x6c0>
 800c14e:	9a04      	ldr	r2, [sp, #16]
 800c150:	3201      	adds	r2, #1
 800c152:	9204      	str	r2, [sp, #16]
 800c154:	2230      	movs	r2, #48	@ 0x30
 800c156:	f88a 2000 	strb.w	r2, [sl]
 800c15a:	781a      	ldrb	r2, [r3, #0]
 800c15c:	3201      	adds	r2, #1
 800c15e:	701a      	strb	r2, [r3, #0]
 800c160:	e7bd      	b.n	800c0de <_dtoa_r+0x65e>
 800c162:	4b7b      	ldr	r3, [pc, #492]	@ (800c350 <_dtoa_r+0x8d0>)
 800c164:	2200      	movs	r2, #0
 800c166:	f7f4 fa67 	bl	8000638 <__aeabi_dmul>
 800c16a:	2200      	movs	r2, #0
 800c16c:	2300      	movs	r3, #0
 800c16e:	4604      	mov	r4, r0
 800c170:	460d      	mov	r5, r1
 800c172:	f7f4 fcc9 	bl	8000b08 <__aeabi_dcmpeq>
 800c176:	2800      	cmp	r0, #0
 800c178:	f43f aebb 	beq.w	800bef2 <_dtoa_r+0x472>
 800c17c:	e6f0      	b.n	800bf60 <_dtoa_r+0x4e0>
 800c17e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c180:	2a00      	cmp	r2, #0
 800c182:	f000 80db 	beq.w	800c33c <_dtoa_r+0x8bc>
 800c186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c188:	2a01      	cmp	r2, #1
 800c18a:	f300 80bf 	bgt.w	800c30c <_dtoa_r+0x88c>
 800c18e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c190:	2a00      	cmp	r2, #0
 800c192:	f000 80b7 	beq.w	800c304 <_dtoa_r+0x884>
 800c196:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c19a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c19c:	4646      	mov	r6, r8
 800c19e:	9a08      	ldr	r2, [sp, #32]
 800c1a0:	2101      	movs	r1, #1
 800c1a2:	441a      	add	r2, r3
 800c1a4:	4658      	mov	r0, fp
 800c1a6:	4498      	add	r8, r3
 800c1a8:	9208      	str	r2, [sp, #32]
 800c1aa:	f000 fbb5 	bl	800c918 <__i2b>
 800c1ae:	4605      	mov	r5, r0
 800c1b0:	b15e      	cbz	r6, 800c1ca <_dtoa_r+0x74a>
 800c1b2:	9b08      	ldr	r3, [sp, #32]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dd08      	ble.n	800c1ca <_dtoa_r+0x74a>
 800c1b8:	42b3      	cmp	r3, r6
 800c1ba:	9a08      	ldr	r2, [sp, #32]
 800c1bc:	bfa8      	it	ge
 800c1be:	4633      	movge	r3, r6
 800c1c0:	eba8 0803 	sub.w	r8, r8, r3
 800c1c4:	1af6      	subs	r6, r6, r3
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	9308      	str	r3, [sp, #32]
 800c1ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1cc:	b1f3      	cbz	r3, 800c20c <_dtoa_r+0x78c>
 800c1ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 80b7 	beq.w	800c344 <_dtoa_r+0x8c4>
 800c1d6:	b18c      	cbz	r4, 800c1fc <_dtoa_r+0x77c>
 800c1d8:	4629      	mov	r1, r5
 800c1da:	4622      	mov	r2, r4
 800c1dc:	4658      	mov	r0, fp
 800c1de:	f000 fc5b 	bl	800ca98 <__pow5mult>
 800c1e2:	464a      	mov	r2, r9
 800c1e4:	4601      	mov	r1, r0
 800c1e6:	4605      	mov	r5, r0
 800c1e8:	4658      	mov	r0, fp
 800c1ea:	f000 fbab 	bl	800c944 <__multiply>
 800c1ee:	4649      	mov	r1, r9
 800c1f0:	9004      	str	r0, [sp, #16]
 800c1f2:	4658      	mov	r0, fp
 800c1f4:	f000 fa92 	bl	800c71c <_Bfree>
 800c1f8:	9b04      	ldr	r3, [sp, #16]
 800c1fa:	4699      	mov	r9, r3
 800c1fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1fe:	1b1a      	subs	r2, r3, r4
 800c200:	d004      	beq.n	800c20c <_dtoa_r+0x78c>
 800c202:	4649      	mov	r1, r9
 800c204:	4658      	mov	r0, fp
 800c206:	f000 fc47 	bl	800ca98 <__pow5mult>
 800c20a:	4681      	mov	r9, r0
 800c20c:	2101      	movs	r1, #1
 800c20e:	4658      	mov	r0, fp
 800c210:	f000 fb82 	bl	800c918 <__i2b>
 800c214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c216:	4604      	mov	r4, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f000 81cf 	beq.w	800c5bc <_dtoa_r+0xb3c>
 800c21e:	461a      	mov	r2, r3
 800c220:	4601      	mov	r1, r0
 800c222:	4658      	mov	r0, fp
 800c224:	f000 fc38 	bl	800ca98 <__pow5mult>
 800c228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	4604      	mov	r4, r0
 800c22e:	f300 8095 	bgt.w	800c35c <_dtoa_r+0x8dc>
 800c232:	9b02      	ldr	r3, [sp, #8]
 800c234:	2b00      	cmp	r3, #0
 800c236:	f040 8087 	bne.w	800c348 <_dtoa_r+0x8c8>
 800c23a:	9b03      	ldr	r3, [sp, #12]
 800c23c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c240:	2b00      	cmp	r3, #0
 800c242:	f040 8089 	bne.w	800c358 <_dtoa_r+0x8d8>
 800c246:	9b03      	ldr	r3, [sp, #12]
 800c248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c24c:	0d1b      	lsrs	r3, r3, #20
 800c24e:	051b      	lsls	r3, r3, #20
 800c250:	b12b      	cbz	r3, 800c25e <_dtoa_r+0x7de>
 800c252:	9b08      	ldr	r3, [sp, #32]
 800c254:	3301      	adds	r3, #1
 800c256:	9308      	str	r3, [sp, #32]
 800c258:	f108 0801 	add.w	r8, r8, #1
 800c25c:	2301      	movs	r3, #1
 800c25e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c262:	2b00      	cmp	r3, #0
 800c264:	f000 81b0 	beq.w	800c5c8 <_dtoa_r+0xb48>
 800c268:	6923      	ldr	r3, [r4, #16]
 800c26a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c26e:	6918      	ldr	r0, [r3, #16]
 800c270:	f000 fb06 	bl	800c880 <__hi0bits>
 800c274:	f1c0 0020 	rsb	r0, r0, #32
 800c278:	9b08      	ldr	r3, [sp, #32]
 800c27a:	4418      	add	r0, r3
 800c27c:	f010 001f 	ands.w	r0, r0, #31
 800c280:	d077      	beq.n	800c372 <_dtoa_r+0x8f2>
 800c282:	f1c0 0320 	rsb	r3, r0, #32
 800c286:	2b04      	cmp	r3, #4
 800c288:	dd6b      	ble.n	800c362 <_dtoa_r+0x8e2>
 800c28a:	9b08      	ldr	r3, [sp, #32]
 800c28c:	f1c0 001c 	rsb	r0, r0, #28
 800c290:	4403      	add	r3, r0
 800c292:	4480      	add	r8, r0
 800c294:	4406      	add	r6, r0
 800c296:	9308      	str	r3, [sp, #32]
 800c298:	f1b8 0f00 	cmp.w	r8, #0
 800c29c:	dd05      	ble.n	800c2aa <_dtoa_r+0x82a>
 800c29e:	4649      	mov	r1, r9
 800c2a0:	4642      	mov	r2, r8
 800c2a2:	4658      	mov	r0, fp
 800c2a4:	f000 fc52 	bl	800cb4c <__lshift>
 800c2a8:	4681      	mov	r9, r0
 800c2aa:	9b08      	ldr	r3, [sp, #32]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	dd05      	ble.n	800c2bc <_dtoa_r+0x83c>
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	4658      	mov	r0, fp
 800c2b6:	f000 fc49 	bl	800cb4c <__lshift>
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d059      	beq.n	800c376 <_dtoa_r+0x8f6>
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	4648      	mov	r0, r9
 800c2c6:	f000 fcad 	bl	800cc24 <__mcmp>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	da53      	bge.n	800c376 <_dtoa_r+0x8f6>
 800c2ce:	1e7b      	subs	r3, r7, #1
 800c2d0:	9304      	str	r3, [sp, #16]
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	220a      	movs	r2, #10
 800c2d8:	4658      	mov	r0, fp
 800c2da:	f000 fa41 	bl	800c760 <__multadd>
 800c2de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2e0:	4681      	mov	r9, r0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f000 8172 	beq.w	800c5cc <_dtoa_r+0xb4c>
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	220a      	movs	r2, #10
 800c2ee:	4658      	mov	r0, fp
 800c2f0:	f000 fa36 	bl	800c760 <__multadd>
 800c2f4:	9b00      	ldr	r3, [sp, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	4605      	mov	r5, r0
 800c2fa:	dc67      	bgt.n	800c3cc <_dtoa_r+0x94c>
 800c2fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	dc41      	bgt.n	800c386 <_dtoa_r+0x906>
 800c302:	e063      	b.n	800c3cc <_dtoa_r+0x94c>
 800c304:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c306:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c30a:	e746      	b.n	800c19a <_dtoa_r+0x71a>
 800c30c:	9b07      	ldr	r3, [sp, #28]
 800c30e:	1e5c      	subs	r4, r3, #1
 800c310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c312:	42a3      	cmp	r3, r4
 800c314:	bfbf      	itttt	lt
 800c316:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c318:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c31a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c31c:	1ae3      	sublt	r3, r4, r3
 800c31e:	bfb4      	ite	lt
 800c320:	18d2      	addlt	r2, r2, r3
 800c322:	1b1c      	subge	r4, r3, r4
 800c324:	9b07      	ldr	r3, [sp, #28]
 800c326:	bfbc      	itt	lt
 800c328:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c32a:	2400      	movlt	r4, #0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	bfb5      	itete	lt
 800c330:	eba8 0603 	sublt.w	r6, r8, r3
 800c334:	9b07      	ldrge	r3, [sp, #28]
 800c336:	2300      	movlt	r3, #0
 800c338:	4646      	movge	r6, r8
 800c33a:	e730      	b.n	800c19e <_dtoa_r+0x71e>
 800c33c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c33e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c340:	4646      	mov	r6, r8
 800c342:	e735      	b.n	800c1b0 <_dtoa_r+0x730>
 800c344:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c346:	e75c      	b.n	800c202 <_dtoa_r+0x782>
 800c348:	2300      	movs	r3, #0
 800c34a:	e788      	b.n	800c25e <_dtoa_r+0x7de>
 800c34c:	3fe00000 	.word	0x3fe00000
 800c350:	40240000 	.word	0x40240000
 800c354:	40140000 	.word	0x40140000
 800c358:	9b02      	ldr	r3, [sp, #8]
 800c35a:	e780      	b.n	800c25e <_dtoa_r+0x7de>
 800c35c:	2300      	movs	r3, #0
 800c35e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c360:	e782      	b.n	800c268 <_dtoa_r+0x7e8>
 800c362:	d099      	beq.n	800c298 <_dtoa_r+0x818>
 800c364:	9a08      	ldr	r2, [sp, #32]
 800c366:	331c      	adds	r3, #28
 800c368:	441a      	add	r2, r3
 800c36a:	4498      	add	r8, r3
 800c36c:	441e      	add	r6, r3
 800c36e:	9208      	str	r2, [sp, #32]
 800c370:	e792      	b.n	800c298 <_dtoa_r+0x818>
 800c372:	4603      	mov	r3, r0
 800c374:	e7f6      	b.n	800c364 <_dtoa_r+0x8e4>
 800c376:	9b07      	ldr	r3, [sp, #28]
 800c378:	9704      	str	r7, [sp, #16]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	dc20      	bgt.n	800c3c0 <_dtoa_r+0x940>
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c382:	2b02      	cmp	r3, #2
 800c384:	dd1e      	ble.n	800c3c4 <_dtoa_r+0x944>
 800c386:	9b00      	ldr	r3, [sp, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f47f aec0 	bne.w	800c10e <_dtoa_r+0x68e>
 800c38e:	4621      	mov	r1, r4
 800c390:	2205      	movs	r2, #5
 800c392:	4658      	mov	r0, fp
 800c394:	f000 f9e4 	bl	800c760 <__multadd>
 800c398:	4601      	mov	r1, r0
 800c39a:	4604      	mov	r4, r0
 800c39c:	4648      	mov	r0, r9
 800c39e:	f000 fc41 	bl	800cc24 <__mcmp>
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	f77f aeb3 	ble.w	800c10e <_dtoa_r+0x68e>
 800c3a8:	4656      	mov	r6, sl
 800c3aa:	2331      	movs	r3, #49	@ 0x31
 800c3ac:	f806 3b01 	strb.w	r3, [r6], #1
 800c3b0:	9b04      	ldr	r3, [sp, #16]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	9304      	str	r3, [sp, #16]
 800c3b6:	e6ae      	b.n	800c116 <_dtoa_r+0x696>
 800c3b8:	9c07      	ldr	r4, [sp, #28]
 800c3ba:	9704      	str	r7, [sp, #16]
 800c3bc:	4625      	mov	r5, r4
 800c3be:	e7f3      	b.n	800c3a8 <_dtoa_r+0x928>
 800c3c0:	9b07      	ldr	r3, [sp, #28]
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f000 8104 	beq.w	800c5d4 <_dtoa_r+0xb54>
 800c3cc:	2e00      	cmp	r6, #0
 800c3ce:	dd05      	ble.n	800c3dc <_dtoa_r+0x95c>
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	4632      	mov	r2, r6
 800c3d4:	4658      	mov	r0, fp
 800c3d6:	f000 fbb9 	bl	800cb4c <__lshift>
 800c3da:	4605      	mov	r5, r0
 800c3dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d05a      	beq.n	800c498 <_dtoa_r+0xa18>
 800c3e2:	6869      	ldr	r1, [r5, #4]
 800c3e4:	4658      	mov	r0, fp
 800c3e6:	f000 f959 	bl	800c69c <_Balloc>
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	b928      	cbnz	r0, 800c3fa <_dtoa_r+0x97a>
 800c3ee:	4b84      	ldr	r3, [pc, #528]	@ (800c600 <_dtoa_r+0xb80>)
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c3f6:	f7ff bb5a 	b.w	800baae <_dtoa_r+0x2e>
 800c3fa:	692a      	ldr	r2, [r5, #16]
 800c3fc:	3202      	adds	r2, #2
 800c3fe:	0092      	lsls	r2, r2, #2
 800c400:	f105 010c 	add.w	r1, r5, #12
 800c404:	300c      	adds	r0, #12
 800c406:	f002 f877 	bl	800e4f8 <memcpy>
 800c40a:	2201      	movs	r2, #1
 800c40c:	4631      	mov	r1, r6
 800c40e:	4658      	mov	r0, fp
 800c410:	f000 fb9c 	bl	800cb4c <__lshift>
 800c414:	f10a 0301 	add.w	r3, sl, #1
 800c418:	9307      	str	r3, [sp, #28]
 800c41a:	9b00      	ldr	r3, [sp, #0]
 800c41c:	4453      	add	r3, sl
 800c41e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c420:	9b02      	ldr	r3, [sp, #8]
 800c422:	f003 0301 	and.w	r3, r3, #1
 800c426:	462f      	mov	r7, r5
 800c428:	930a      	str	r3, [sp, #40]	@ 0x28
 800c42a:	4605      	mov	r5, r0
 800c42c:	9b07      	ldr	r3, [sp, #28]
 800c42e:	4621      	mov	r1, r4
 800c430:	3b01      	subs	r3, #1
 800c432:	4648      	mov	r0, r9
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	f7ff fa99 	bl	800b96c <quorem>
 800c43a:	4639      	mov	r1, r7
 800c43c:	9002      	str	r0, [sp, #8]
 800c43e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c442:	4648      	mov	r0, r9
 800c444:	f000 fbee 	bl	800cc24 <__mcmp>
 800c448:	462a      	mov	r2, r5
 800c44a:	9008      	str	r0, [sp, #32]
 800c44c:	4621      	mov	r1, r4
 800c44e:	4658      	mov	r0, fp
 800c450:	f000 fc04 	bl	800cc5c <__mdiff>
 800c454:	68c2      	ldr	r2, [r0, #12]
 800c456:	4606      	mov	r6, r0
 800c458:	bb02      	cbnz	r2, 800c49c <_dtoa_r+0xa1c>
 800c45a:	4601      	mov	r1, r0
 800c45c:	4648      	mov	r0, r9
 800c45e:	f000 fbe1 	bl	800cc24 <__mcmp>
 800c462:	4602      	mov	r2, r0
 800c464:	4631      	mov	r1, r6
 800c466:	4658      	mov	r0, fp
 800c468:	920e      	str	r2, [sp, #56]	@ 0x38
 800c46a:	f000 f957 	bl	800c71c <_Bfree>
 800c46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c470:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c472:	9e07      	ldr	r6, [sp, #28]
 800c474:	ea43 0102 	orr.w	r1, r3, r2
 800c478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c47a:	4319      	orrs	r1, r3
 800c47c:	d110      	bne.n	800c4a0 <_dtoa_r+0xa20>
 800c47e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c482:	d029      	beq.n	800c4d8 <_dtoa_r+0xa58>
 800c484:	9b08      	ldr	r3, [sp, #32]
 800c486:	2b00      	cmp	r3, #0
 800c488:	dd02      	ble.n	800c490 <_dtoa_r+0xa10>
 800c48a:	9b02      	ldr	r3, [sp, #8]
 800c48c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c490:	9b00      	ldr	r3, [sp, #0]
 800c492:	f883 8000 	strb.w	r8, [r3]
 800c496:	e63f      	b.n	800c118 <_dtoa_r+0x698>
 800c498:	4628      	mov	r0, r5
 800c49a:	e7bb      	b.n	800c414 <_dtoa_r+0x994>
 800c49c:	2201      	movs	r2, #1
 800c49e:	e7e1      	b.n	800c464 <_dtoa_r+0x9e4>
 800c4a0:	9b08      	ldr	r3, [sp, #32]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	db04      	blt.n	800c4b0 <_dtoa_r+0xa30>
 800c4a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4a8:	430b      	orrs	r3, r1
 800c4aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c4ac:	430b      	orrs	r3, r1
 800c4ae:	d120      	bne.n	800c4f2 <_dtoa_r+0xa72>
 800c4b0:	2a00      	cmp	r2, #0
 800c4b2:	dded      	ble.n	800c490 <_dtoa_r+0xa10>
 800c4b4:	4649      	mov	r1, r9
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	4658      	mov	r0, fp
 800c4ba:	f000 fb47 	bl	800cb4c <__lshift>
 800c4be:	4621      	mov	r1, r4
 800c4c0:	4681      	mov	r9, r0
 800c4c2:	f000 fbaf 	bl	800cc24 <__mcmp>
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	dc03      	bgt.n	800c4d2 <_dtoa_r+0xa52>
 800c4ca:	d1e1      	bne.n	800c490 <_dtoa_r+0xa10>
 800c4cc:	f018 0f01 	tst.w	r8, #1
 800c4d0:	d0de      	beq.n	800c490 <_dtoa_r+0xa10>
 800c4d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4d6:	d1d8      	bne.n	800c48a <_dtoa_r+0xa0a>
 800c4d8:	9a00      	ldr	r2, [sp, #0]
 800c4da:	2339      	movs	r3, #57	@ 0x39
 800c4dc:	7013      	strb	r3, [r2, #0]
 800c4de:	4633      	mov	r3, r6
 800c4e0:	461e      	mov	r6, r3
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c4e8:	2a39      	cmp	r2, #57	@ 0x39
 800c4ea:	d052      	beq.n	800c592 <_dtoa_r+0xb12>
 800c4ec:	3201      	adds	r2, #1
 800c4ee:	701a      	strb	r2, [r3, #0]
 800c4f0:	e612      	b.n	800c118 <_dtoa_r+0x698>
 800c4f2:	2a00      	cmp	r2, #0
 800c4f4:	dd07      	ble.n	800c506 <_dtoa_r+0xa86>
 800c4f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4fa:	d0ed      	beq.n	800c4d8 <_dtoa_r+0xa58>
 800c4fc:	9a00      	ldr	r2, [sp, #0]
 800c4fe:	f108 0301 	add.w	r3, r8, #1
 800c502:	7013      	strb	r3, [r2, #0]
 800c504:	e608      	b.n	800c118 <_dtoa_r+0x698>
 800c506:	9b07      	ldr	r3, [sp, #28]
 800c508:	9a07      	ldr	r2, [sp, #28]
 800c50a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c50e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c510:	4293      	cmp	r3, r2
 800c512:	d028      	beq.n	800c566 <_dtoa_r+0xae6>
 800c514:	4649      	mov	r1, r9
 800c516:	2300      	movs	r3, #0
 800c518:	220a      	movs	r2, #10
 800c51a:	4658      	mov	r0, fp
 800c51c:	f000 f920 	bl	800c760 <__multadd>
 800c520:	42af      	cmp	r7, r5
 800c522:	4681      	mov	r9, r0
 800c524:	f04f 0300 	mov.w	r3, #0
 800c528:	f04f 020a 	mov.w	r2, #10
 800c52c:	4639      	mov	r1, r7
 800c52e:	4658      	mov	r0, fp
 800c530:	d107      	bne.n	800c542 <_dtoa_r+0xac2>
 800c532:	f000 f915 	bl	800c760 <__multadd>
 800c536:	4607      	mov	r7, r0
 800c538:	4605      	mov	r5, r0
 800c53a:	9b07      	ldr	r3, [sp, #28]
 800c53c:	3301      	adds	r3, #1
 800c53e:	9307      	str	r3, [sp, #28]
 800c540:	e774      	b.n	800c42c <_dtoa_r+0x9ac>
 800c542:	f000 f90d 	bl	800c760 <__multadd>
 800c546:	4629      	mov	r1, r5
 800c548:	4607      	mov	r7, r0
 800c54a:	2300      	movs	r3, #0
 800c54c:	220a      	movs	r2, #10
 800c54e:	4658      	mov	r0, fp
 800c550:	f000 f906 	bl	800c760 <__multadd>
 800c554:	4605      	mov	r5, r0
 800c556:	e7f0      	b.n	800c53a <_dtoa_r+0xaba>
 800c558:	9b00      	ldr	r3, [sp, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	bfcc      	ite	gt
 800c55e:	461e      	movgt	r6, r3
 800c560:	2601      	movle	r6, #1
 800c562:	4456      	add	r6, sl
 800c564:	2700      	movs	r7, #0
 800c566:	4649      	mov	r1, r9
 800c568:	2201      	movs	r2, #1
 800c56a:	4658      	mov	r0, fp
 800c56c:	f000 faee 	bl	800cb4c <__lshift>
 800c570:	4621      	mov	r1, r4
 800c572:	4681      	mov	r9, r0
 800c574:	f000 fb56 	bl	800cc24 <__mcmp>
 800c578:	2800      	cmp	r0, #0
 800c57a:	dcb0      	bgt.n	800c4de <_dtoa_r+0xa5e>
 800c57c:	d102      	bne.n	800c584 <_dtoa_r+0xb04>
 800c57e:	f018 0f01 	tst.w	r8, #1
 800c582:	d1ac      	bne.n	800c4de <_dtoa_r+0xa5e>
 800c584:	4633      	mov	r3, r6
 800c586:	461e      	mov	r6, r3
 800c588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c58c:	2a30      	cmp	r2, #48	@ 0x30
 800c58e:	d0fa      	beq.n	800c586 <_dtoa_r+0xb06>
 800c590:	e5c2      	b.n	800c118 <_dtoa_r+0x698>
 800c592:	459a      	cmp	sl, r3
 800c594:	d1a4      	bne.n	800c4e0 <_dtoa_r+0xa60>
 800c596:	9b04      	ldr	r3, [sp, #16]
 800c598:	3301      	adds	r3, #1
 800c59a:	9304      	str	r3, [sp, #16]
 800c59c:	2331      	movs	r3, #49	@ 0x31
 800c59e:	f88a 3000 	strb.w	r3, [sl]
 800c5a2:	e5b9      	b.n	800c118 <_dtoa_r+0x698>
 800c5a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c5a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c604 <_dtoa_r+0xb84>
 800c5aa:	b11b      	cbz	r3, 800c5b4 <_dtoa_r+0xb34>
 800c5ac:	f10a 0308 	add.w	r3, sl, #8
 800c5b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c5b2:	6013      	str	r3, [r2, #0]
 800c5b4:	4650      	mov	r0, sl
 800c5b6:	b019      	add	sp, #100	@ 0x64
 800c5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	f77f ae37 	ble.w	800c232 <_dtoa_r+0x7b2>
 800c5c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5c8:	2001      	movs	r0, #1
 800c5ca:	e655      	b.n	800c278 <_dtoa_r+0x7f8>
 800c5cc:	9b00      	ldr	r3, [sp, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f77f aed6 	ble.w	800c380 <_dtoa_r+0x900>
 800c5d4:	4656      	mov	r6, sl
 800c5d6:	4621      	mov	r1, r4
 800c5d8:	4648      	mov	r0, r9
 800c5da:	f7ff f9c7 	bl	800b96c <quorem>
 800c5de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c5e2:	f806 8b01 	strb.w	r8, [r6], #1
 800c5e6:	9b00      	ldr	r3, [sp, #0]
 800c5e8:	eba6 020a 	sub.w	r2, r6, sl
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	ddb3      	ble.n	800c558 <_dtoa_r+0xad8>
 800c5f0:	4649      	mov	r1, r9
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	220a      	movs	r2, #10
 800c5f6:	4658      	mov	r0, fp
 800c5f8:	f000 f8b2 	bl	800c760 <__multadd>
 800c5fc:	4681      	mov	r9, r0
 800c5fe:	e7ea      	b.n	800c5d6 <_dtoa_r+0xb56>
 800c600:	0800fc51 	.word	0x0800fc51
 800c604:	0800fbd5 	.word	0x0800fbd5

0800c608 <_free_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	4605      	mov	r5, r0
 800c60c:	2900      	cmp	r1, #0
 800c60e:	d041      	beq.n	800c694 <_free_r+0x8c>
 800c610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c614:	1f0c      	subs	r4, r1, #4
 800c616:	2b00      	cmp	r3, #0
 800c618:	bfb8      	it	lt
 800c61a:	18e4      	addlt	r4, r4, r3
 800c61c:	f7fe f83a 	bl	800a694 <__malloc_lock>
 800c620:	4a1d      	ldr	r2, [pc, #116]	@ (800c698 <_free_r+0x90>)
 800c622:	6813      	ldr	r3, [r2, #0]
 800c624:	b933      	cbnz	r3, 800c634 <_free_r+0x2c>
 800c626:	6063      	str	r3, [r4, #4]
 800c628:	6014      	str	r4, [r2, #0]
 800c62a:	4628      	mov	r0, r5
 800c62c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c630:	f7fe b836 	b.w	800a6a0 <__malloc_unlock>
 800c634:	42a3      	cmp	r3, r4
 800c636:	d908      	bls.n	800c64a <_free_r+0x42>
 800c638:	6820      	ldr	r0, [r4, #0]
 800c63a:	1821      	adds	r1, r4, r0
 800c63c:	428b      	cmp	r3, r1
 800c63e:	bf01      	itttt	eq
 800c640:	6819      	ldreq	r1, [r3, #0]
 800c642:	685b      	ldreq	r3, [r3, #4]
 800c644:	1809      	addeq	r1, r1, r0
 800c646:	6021      	streq	r1, [r4, #0]
 800c648:	e7ed      	b.n	800c626 <_free_r+0x1e>
 800c64a:	461a      	mov	r2, r3
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	b10b      	cbz	r3, 800c654 <_free_r+0x4c>
 800c650:	42a3      	cmp	r3, r4
 800c652:	d9fa      	bls.n	800c64a <_free_r+0x42>
 800c654:	6811      	ldr	r1, [r2, #0]
 800c656:	1850      	adds	r0, r2, r1
 800c658:	42a0      	cmp	r0, r4
 800c65a:	d10b      	bne.n	800c674 <_free_r+0x6c>
 800c65c:	6820      	ldr	r0, [r4, #0]
 800c65e:	4401      	add	r1, r0
 800c660:	1850      	adds	r0, r2, r1
 800c662:	4283      	cmp	r3, r0
 800c664:	6011      	str	r1, [r2, #0]
 800c666:	d1e0      	bne.n	800c62a <_free_r+0x22>
 800c668:	6818      	ldr	r0, [r3, #0]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	6053      	str	r3, [r2, #4]
 800c66e:	4408      	add	r0, r1
 800c670:	6010      	str	r0, [r2, #0]
 800c672:	e7da      	b.n	800c62a <_free_r+0x22>
 800c674:	d902      	bls.n	800c67c <_free_r+0x74>
 800c676:	230c      	movs	r3, #12
 800c678:	602b      	str	r3, [r5, #0]
 800c67a:	e7d6      	b.n	800c62a <_free_r+0x22>
 800c67c:	6820      	ldr	r0, [r4, #0]
 800c67e:	1821      	adds	r1, r4, r0
 800c680:	428b      	cmp	r3, r1
 800c682:	bf04      	itt	eq
 800c684:	6819      	ldreq	r1, [r3, #0]
 800c686:	685b      	ldreq	r3, [r3, #4]
 800c688:	6063      	str	r3, [r4, #4]
 800c68a:	bf04      	itt	eq
 800c68c:	1809      	addeq	r1, r1, r0
 800c68e:	6021      	streq	r1, [r4, #0]
 800c690:	6054      	str	r4, [r2, #4]
 800c692:	e7ca      	b.n	800c62a <_free_r+0x22>
 800c694:	bd38      	pop	{r3, r4, r5, pc}
 800c696:	bf00      	nop
 800c698:	20002b14 	.word	0x20002b14

0800c69c <_Balloc>:
 800c69c:	b570      	push	{r4, r5, r6, lr}
 800c69e:	69c6      	ldr	r6, [r0, #28]
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	460d      	mov	r5, r1
 800c6a4:	b976      	cbnz	r6, 800c6c4 <_Balloc+0x28>
 800c6a6:	2010      	movs	r0, #16
 800c6a8:	f7fd ff4a 	bl	800a540 <malloc>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	61e0      	str	r0, [r4, #28]
 800c6b0:	b920      	cbnz	r0, 800c6bc <_Balloc+0x20>
 800c6b2:	4b18      	ldr	r3, [pc, #96]	@ (800c714 <_Balloc+0x78>)
 800c6b4:	4818      	ldr	r0, [pc, #96]	@ (800c718 <_Balloc+0x7c>)
 800c6b6:	216b      	movs	r1, #107	@ 0x6b
 800c6b8:	f001 ff36 	bl	800e528 <__assert_func>
 800c6bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6c0:	6006      	str	r6, [r0, #0]
 800c6c2:	60c6      	str	r6, [r0, #12]
 800c6c4:	69e6      	ldr	r6, [r4, #28]
 800c6c6:	68f3      	ldr	r3, [r6, #12]
 800c6c8:	b183      	cbz	r3, 800c6ec <_Balloc+0x50>
 800c6ca:	69e3      	ldr	r3, [r4, #28]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6d2:	b9b8      	cbnz	r0, 800c704 <_Balloc+0x68>
 800c6d4:	2101      	movs	r1, #1
 800c6d6:	fa01 f605 	lsl.w	r6, r1, r5
 800c6da:	1d72      	adds	r2, r6, #5
 800c6dc:	0092      	lsls	r2, r2, #2
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f001 ff40 	bl	800e564 <_calloc_r>
 800c6e4:	b160      	cbz	r0, 800c700 <_Balloc+0x64>
 800c6e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6ea:	e00e      	b.n	800c70a <_Balloc+0x6e>
 800c6ec:	2221      	movs	r2, #33	@ 0x21
 800c6ee:	2104      	movs	r1, #4
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f001 ff37 	bl	800e564 <_calloc_r>
 800c6f6:	69e3      	ldr	r3, [r4, #28]
 800c6f8:	60f0      	str	r0, [r6, #12]
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1e4      	bne.n	800c6ca <_Balloc+0x2e>
 800c700:	2000      	movs	r0, #0
 800c702:	bd70      	pop	{r4, r5, r6, pc}
 800c704:	6802      	ldr	r2, [r0, #0]
 800c706:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c70a:	2300      	movs	r3, #0
 800c70c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c710:	e7f7      	b.n	800c702 <_Balloc+0x66>
 800c712:	bf00      	nop
 800c714:	0800fbe2 	.word	0x0800fbe2
 800c718:	0800fc62 	.word	0x0800fc62

0800c71c <_Bfree>:
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	69c6      	ldr	r6, [r0, #28]
 800c720:	4605      	mov	r5, r0
 800c722:	460c      	mov	r4, r1
 800c724:	b976      	cbnz	r6, 800c744 <_Bfree+0x28>
 800c726:	2010      	movs	r0, #16
 800c728:	f7fd ff0a 	bl	800a540 <malloc>
 800c72c:	4602      	mov	r2, r0
 800c72e:	61e8      	str	r0, [r5, #28]
 800c730:	b920      	cbnz	r0, 800c73c <_Bfree+0x20>
 800c732:	4b09      	ldr	r3, [pc, #36]	@ (800c758 <_Bfree+0x3c>)
 800c734:	4809      	ldr	r0, [pc, #36]	@ (800c75c <_Bfree+0x40>)
 800c736:	218f      	movs	r1, #143	@ 0x8f
 800c738:	f001 fef6 	bl	800e528 <__assert_func>
 800c73c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c740:	6006      	str	r6, [r0, #0]
 800c742:	60c6      	str	r6, [r0, #12]
 800c744:	b13c      	cbz	r4, 800c756 <_Bfree+0x3a>
 800c746:	69eb      	ldr	r3, [r5, #28]
 800c748:	6862      	ldr	r2, [r4, #4]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c750:	6021      	str	r1, [r4, #0]
 800c752:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c756:	bd70      	pop	{r4, r5, r6, pc}
 800c758:	0800fbe2 	.word	0x0800fbe2
 800c75c:	0800fc62 	.word	0x0800fc62

0800c760 <__multadd>:
 800c760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c764:	690d      	ldr	r5, [r1, #16]
 800c766:	4607      	mov	r7, r0
 800c768:	460c      	mov	r4, r1
 800c76a:	461e      	mov	r6, r3
 800c76c:	f101 0c14 	add.w	ip, r1, #20
 800c770:	2000      	movs	r0, #0
 800c772:	f8dc 3000 	ldr.w	r3, [ip]
 800c776:	b299      	uxth	r1, r3
 800c778:	fb02 6101 	mla	r1, r2, r1, r6
 800c77c:	0c1e      	lsrs	r6, r3, #16
 800c77e:	0c0b      	lsrs	r3, r1, #16
 800c780:	fb02 3306 	mla	r3, r2, r6, r3
 800c784:	b289      	uxth	r1, r1
 800c786:	3001      	adds	r0, #1
 800c788:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c78c:	4285      	cmp	r5, r0
 800c78e:	f84c 1b04 	str.w	r1, [ip], #4
 800c792:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c796:	dcec      	bgt.n	800c772 <__multadd+0x12>
 800c798:	b30e      	cbz	r6, 800c7de <__multadd+0x7e>
 800c79a:	68a3      	ldr	r3, [r4, #8]
 800c79c:	42ab      	cmp	r3, r5
 800c79e:	dc19      	bgt.n	800c7d4 <__multadd+0x74>
 800c7a0:	6861      	ldr	r1, [r4, #4]
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	3101      	adds	r1, #1
 800c7a6:	f7ff ff79 	bl	800c69c <_Balloc>
 800c7aa:	4680      	mov	r8, r0
 800c7ac:	b928      	cbnz	r0, 800c7ba <__multadd+0x5a>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c7e4 <__multadd+0x84>)
 800c7b2:	480d      	ldr	r0, [pc, #52]	@ (800c7e8 <__multadd+0x88>)
 800c7b4:	21ba      	movs	r1, #186	@ 0xba
 800c7b6:	f001 feb7 	bl	800e528 <__assert_func>
 800c7ba:	6922      	ldr	r2, [r4, #16]
 800c7bc:	3202      	adds	r2, #2
 800c7be:	f104 010c 	add.w	r1, r4, #12
 800c7c2:	0092      	lsls	r2, r2, #2
 800c7c4:	300c      	adds	r0, #12
 800c7c6:	f001 fe97 	bl	800e4f8 <memcpy>
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	4638      	mov	r0, r7
 800c7ce:	f7ff ffa5 	bl	800c71c <_Bfree>
 800c7d2:	4644      	mov	r4, r8
 800c7d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7d8:	3501      	adds	r5, #1
 800c7da:	615e      	str	r6, [r3, #20]
 800c7dc:	6125      	str	r5, [r4, #16]
 800c7de:	4620      	mov	r0, r4
 800c7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7e4:	0800fc51 	.word	0x0800fc51
 800c7e8:	0800fc62 	.word	0x0800fc62

0800c7ec <__s2b>:
 800c7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7f0:	460c      	mov	r4, r1
 800c7f2:	4615      	mov	r5, r2
 800c7f4:	461f      	mov	r7, r3
 800c7f6:	2209      	movs	r2, #9
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c800:	2100      	movs	r1, #0
 800c802:	2201      	movs	r2, #1
 800c804:	429a      	cmp	r2, r3
 800c806:	db09      	blt.n	800c81c <__s2b+0x30>
 800c808:	4630      	mov	r0, r6
 800c80a:	f7ff ff47 	bl	800c69c <_Balloc>
 800c80e:	b940      	cbnz	r0, 800c822 <__s2b+0x36>
 800c810:	4602      	mov	r2, r0
 800c812:	4b19      	ldr	r3, [pc, #100]	@ (800c878 <__s2b+0x8c>)
 800c814:	4819      	ldr	r0, [pc, #100]	@ (800c87c <__s2b+0x90>)
 800c816:	21d3      	movs	r1, #211	@ 0xd3
 800c818:	f001 fe86 	bl	800e528 <__assert_func>
 800c81c:	0052      	lsls	r2, r2, #1
 800c81e:	3101      	adds	r1, #1
 800c820:	e7f0      	b.n	800c804 <__s2b+0x18>
 800c822:	9b08      	ldr	r3, [sp, #32]
 800c824:	6143      	str	r3, [r0, #20]
 800c826:	2d09      	cmp	r5, #9
 800c828:	f04f 0301 	mov.w	r3, #1
 800c82c:	6103      	str	r3, [r0, #16]
 800c82e:	dd16      	ble.n	800c85e <__s2b+0x72>
 800c830:	f104 0909 	add.w	r9, r4, #9
 800c834:	46c8      	mov	r8, r9
 800c836:	442c      	add	r4, r5
 800c838:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c83c:	4601      	mov	r1, r0
 800c83e:	3b30      	subs	r3, #48	@ 0x30
 800c840:	220a      	movs	r2, #10
 800c842:	4630      	mov	r0, r6
 800c844:	f7ff ff8c 	bl	800c760 <__multadd>
 800c848:	45a0      	cmp	r8, r4
 800c84a:	d1f5      	bne.n	800c838 <__s2b+0x4c>
 800c84c:	f1a5 0408 	sub.w	r4, r5, #8
 800c850:	444c      	add	r4, r9
 800c852:	1b2d      	subs	r5, r5, r4
 800c854:	1963      	adds	r3, r4, r5
 800c856:	42bb      	cmp	r3, r7
 800c858:	db04      	blt.n	800c864 <__s2b+0x78>
 800c85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c85e:	340a      	adds	r4, #10
 800c860:	2509      	movs	r5, #9
 800c862:	e7f6      	b.n	800c852 <__s2b+0x66>
 800c864:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c868:	4601      	mov	r1, r0
 800c86a:	3b30      	subs	r3, #48	@ 0x30
 800c86c:	220a      	movs	r2, #10
 800c86e:	4630      	mov	r0, r6
 800c870:	f7ff ff76 	bl	800c760 <__multadd>
 800c874:	e7ee      	b.n	800c854 <__s2b+0x68>
 800c876:	bf00      	nop
 800c878:	0800fc51 	.word	0x0800fc51
 800c87c:	0800fc62 	.word	0x0800fc62

0800c880 <__hi0bits>:
 800c880:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c884:	4603      	mov	r3, r0
 800c886:	bf36      	itet	cc
 800c888:	0403      	lslcc	r3, r0, #16
 800c88a:	2000      	movcs	r0, #0
 800c88c:	2010      	movcc	r0, #16
 800c88e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c892:	bf3c      	itt	cc
 800c894:	021b      	lslcc	r3, r3, #8
 800c896:	3008      	addcc	r0, #8
 800c898:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c89c:	bf3c      	itt	cc
 800c89e:	011b      	lslcc	r3, r3, #4
 800c8a0:	3004      	addcc	r0, #4
 800c8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8a6:	bf3c      	itt	cc
 800c8a8:	009b      	lslcc	r3, r3, #2
 800c8aa:	3002      	addcc	r0, #2
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	db05      	blt.n	800c8bc <__hi0bits+0x3c>
 800c8b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c8b4:	f100 0001 	add.w	r0, r0, #1
 800c8b8:	bf08      	it	eq
 800c8ba:	2020      	moveq	r0, #32
 800c8bc:	4770      	bx	lr

0800c8be <__lo0bits>:
 800c8be:	6803      	ldr	r3, [r0, #0]
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	f013 0007 	ands.w	r0, r3, #7
 800c8c6:	d00b      	beq.n	800c8e0 <__lo0bits+0x22>
 800c8c8:	07d9      	lsls	r1, r3, #31
 800c8ca:	d421      	bmi.n	800c910 <__lo0bits+0x52>
 800c8cc:	0798      	lsls	r0, r3, #30
 800c8ce:	bf49      	itett	mi
 800c8d0:	085b      	lsrmi	r3, r3, #1
 800c8d2:	089b      	lsrpl	r3, r3, #2
 800c8d4:	2001      	movmi	r0, #1
 800c8d6:	6013      	strmi	r3, [r2, #0]
 800c8d8:	bf5c      	itt	pl
 800c8da:	6013      	strpl	r3, [r2, #0]
 800c8dc:	2002      	movpl	r0, #2
 800c8de:	4770      	bx	lr
 800c8e0:	b299      	uxth	r1, r3
 800c8e2:	b909      	cbnz	r1, 800c8e8 <__lo0bits+0x2a>
 800c8e4:	0c1b      	lsrs	r3, r3, #16
 800c8e6:	2010      	movs	r0, #16
 800c8e8:	b2d9      	uxtb	r1, r3
 800c8ea:	b909      	cbnz	r1, 800c8f0 <__lo0bits+0x32>
 800c8ec:	3008      	adds	r0, #8
 800c8ee:	0a1b      	lsrs	r3, r3, #8
 800c8f0:	0719      	lsls	r1, r3, #28
 800c8f2:	bf04      	itt	eq
 800c8f4:	091b      	lsreq	r3, r3, #4
 800c8f6:	3004      	addeq	r0, #4
 800c8f8:	0799      	lsls	r1, r3, #30
 800c8fa:	bf04      	itt	eq
 800c8fc:	089b      	lsreq	r3, r3, #2
 800c8fe:	3002      	addeq	r0, #2
 800c900:	07d9      	lsls	r1, r3, #31
 800c902:	d403      	bmi.n	800c90c <__lo0bits+0x4e>
 800c904:	085b      	lsrs	r3, r3, #1
 800c906:	f100 0001 	add.w	r0, r0, #1
 800c90a:	d003      	beq.n	800c914 <__lo0bits+0x56>
 800c90c:	6013      	str	r3, [r2, #0]
 800c90e:	4770      	bx	lr
 800c910:	2000      	movs	r0, #0
 800c912:	4770      	bx	lr
 800c914:	2020      	movs	r0, #32
 800c916:	4770      	bx	lr

0800c918 <__i2b>:
 800c918:	b510      	push	{r4, lr}
 800c91a:	460c      	mov	r4, r1
 800c91c:	2101      	movs	r1, #1
 800c91e:	f7ff febd 	bl	800c69c <_Balloc>
 800c922:	4602      	mov	r2, r0
 800c924:	b928      	cbnz	r0, 800c932 <__i2b+0x1a>
 800c926:	4b05      	ldr	r3, [pc, #20]	@ (800c93c <__i2b+0x24>)
 800c928:	4805      	ldr	r0, [pc, #20]	@ (800c940 <__i2b+0x28>)
 800c92a:	f240 1145 	movw	r1, #325	@ 0x145
 800c92e:	f001 fdfb 	bl	800e528 <__assert_func>
 800c932:	2301      	movs	r3, #1
 800c934:	6144      	str	r4, [r0, #20]
 800c936:	6103      	str	r3, [r0, #16]
 800c938:	bd10      	pop	{r4, pc}
 800c93a:	bf00      	nop
 800c93c:	0800fc51 	.word	0x0800fc51
 800c940:	0800fc62 	.word	0x0800fc62

0800c944 <__multiply>:
 800c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c948:	4614      	mov	r4, r2
 800c94a:	690a      	ldr	r2, [r1, #16]
 800c94c:	6923      	ldr	r3, [r4, #16]
 800c94e:	429a      	cmp	r2, r3
 800c950:	bfa8      	it	ge
 800c952:	4623      	movge	r3, r4
 800c954:	460f      	mov	r7, r1
 800c956:	bfa4      	itt	ge
 800c958:	460c      	movge	r4, r1
 800c95a:	461f      	movge	r7, r3
 800c95c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c960:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c964:	68a3      	ldr	r3, [r4, #8]
 800c966:	6861      	ldr	r1, [r4, #4]
 800c968:	eb0a 0609 	add.w	r6, sl, r9
 800c96c:	42b3      	cmp	r3, r6
 800c96e:	b085      	sub	sp, #20
 800c970:	bfb8      	it	lt
 800c972:	3101      	addlt	r1, #1
 800c974:	f7ff fe92 	bl	800c69c <_Balloc>
 800c978:	b930      	cbnz	r0, 800c988 <__multiply+0x44>
 800c97a:	4602      	mov	r2, r0
 800c97c:	4b44      	ldr	r3, [pc, #272]	@ (800ca90 <__multiply+0x14c>)
 800c97e:	4845      	ldr	r0, [pc, #276]	@ (800ca94 <__multiply+0x150>)
 800c980:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c984:	f001 fdd0 	bl	800e528 <__assert_func>
 800c988:	f100 0514 	add.w	r5, r0, #20
 800c98c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c990:	462b      	mov	r3, r5
 800c992:	2200      	movs	r2, #0
 800c994:	4543      	cmp	r3, r8
 800c996:	d321      	bcc.n	800c9dc <__multiply+0x98>
 800c998:	f107 0114 	add.w	r1, r7, #20
 800c99c:	f104 0214 	add.w	r2, r4, #20
 800c9a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c9a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c9a8:	9302      	str	r3, [sp, #8]
 800c9aa:	1b13      	subs	r3, r2, r4
 800c9ac:	3b15      	subs	r3, #21
 800c9ae:	f023 0303 	bic.w	r3, r3, #3
 800c9b2:	3304      	adds	r3, #4
 800c9b4:	f104 0715 	add.w	r7, r4, #21
 800c9b8:	42ba      	cmp	r2, r7
 800c9ba:	bf38      	it	cc
 800c9bc:	2304      	movcc	r3, #4
 800c9be:	9301      	str	r3, [sp, #4]
 800c9c0:	9b02      	ldr	r3, [sp, #8]
 800c9c2:	9103      	str	r1, [sp, #12]
 800c9c4:	428b      	cmp	r3, r1
 800c9c6:	d80c      	bhi.n	800c9e2 <__multiply+0x9e>
 800c9c8:	2e00      	cmp	r6, #0
 800c9ca:	dd03      	ble.n	800c9d4 <__multiply+0x90>
 800c9cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d05b      	beq.n	800ca8c <__multiply+0x148>
 800c9d4:	6106      	str	r6, [r0, #16]
 800c9d6:	b005      	add	sp, #20
 800c9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9dc:	f843 2b04 	str.w	r2, [r3], #4
 800c9e0:	e7d8      	b.n	800c994 <__multiply+0x50>
 800c9e2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c9e6:	f1ba 0f00 	cmp.w	sl, #0
 800c9ea:	d024      	beq.n	800ca36 <__multiply+0xf2>
 800c9ec:	f104 0e14 	add.w	lr, r4, #20
 800c9f0:	46a9      	mov	r9, r5
 800c9f2:	f04f 0c00 	mov.w	ip, #0
 800c9f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c9fa:	f8d9 3000 	ldr.w	r3, [r9]
 800c9fe:	fa1f fb87 	uxth.w	fp, r7
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	fb0a 330b 	mla	r3, sl, fp, r3
 800ca08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ca0c:	f8d9 7000 	ldr.w	r7, [r9]
 800ca10:	4463      	add	r3, ip
 800ca12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca16:	fb0a c70b 	mla	r7, sl, fp, ip
 800ca1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca24:	4572      	cmp	r2, lr
 800ca26:	f849 3b04 	str.w	r3, [r9], #4
 800ca2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca2e:	d8e2      	bhi.n	800c9f6 <__multiply+0xb2>
 800ca30:	9b01      	ldr	r3, [sp, #4]
 800ca32:	f845 c003 	str.w	ip, [r5, r3]
 800ca36:	9b03      	ldr	r3, [sp, #12]
 800ca38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ca3c:	3104      	adds	r1, #4
 800ca3e:	f1b9 0f00 	cmp.w	r9, #0
 800ca42:	d021      	beq.n	800ca88 <__multiply+0x144>
 800ca44:	682b      	ldr	r3, [r5, #0]
 800ca46:	f104 0c14 	add.w	ip, r4, #20
 800ca4a:	46ae      	mov	lr, r5
 800ca4c:	f04f 0a00 	mov.w	sl, #0
 800ca50:	f8bc b000 	ldrh.w	fp, [ip]
 800ca54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ca58:	fb09 770b 	mla	r7, r9, fp, r7
 800ca5c:	4457      	add	r7, sl
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca64:	f84e 3b04 	str.w	r3, [lr], #4
 800ca68:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca70:	f8be 3000 	ldrh.w	r3, [lr]
 800ca74:	fb09 330a 	mla	r3, r9, sl, r3
 800ca78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ca7c:	4562      	cmp	r2, ip
 800ca7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca82:	d8e5      	bhi.n	800ca50 <__multiply+0x10c>
 800ca84:	9f01      	ldr	r7, [sp, #4]
 800ca86:	51eb      	str	r3, [r5, r7]
 800ca88:	3504      	adds	r5, #4
 800ca8a:	e799      	b.n	800c9c0 <__multiply+0x7c>
 800ca8c:	3e01      	subs	r6, #1
 800ca8e:	e79b      	b.n	800c9c8 <__multiply+0x84>
 800ca90:	0800fc51 	.word	0x0800fc51
 800ca94:	0800fc62 	.word	0x0800fc62

0800ca98 <__pow5mult>:
 800ca98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca9c:	4615      	mov	r5, r2
 800ca9e:	f012 0203 	ands.w	r2, r2, #3
 800caa2:	4607      	mov	r7, r0
 800caa4:	460e      	mov	r6, r1
 800caa6:	d007      	beq.n	800cab8 <__pow5mult+0x20>
 800caa8:	4c25      	ldr	r4, [pc, #148]	@ (800cb40 <__pow5mult+0xa8>)
 800caaa:	3a01      	subs	r2, #1
 800caac:	2300      	movs	r3, #0
 800caae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cab2:	f7ff fe55 	bl	800c760 <__multadd>
 800cab6:	4606      	mov	r6, r0
 800cab8:	10ad      	asrs	r5, r5, #2
 800caba:	d03d      	beq.n	800cb38 <__pow5mult+0xa0>
 800cabc:	69fc      	ldr	r4, [r7, #28]
 800cabe:	b97c      	cbnz	r4, 800cae0 <__pow5mult+0x48>
 800cac0:	2010      	movs	r0, #16
 800cac2:	f7fd fd3d 	bl	800a540 <malloc>
 800cac6:	4602      	mov	r2, r0
 800cac8:	61f8      	str	r0, [r7, #28]
 800caca:	b928      	cbnz	r0, 800cad8 <__pow5mult+0x40>
 800cacc:	4b1d      	ldr	r3, [pc, #116]	@ (800cb44 <__pow5mult+0xac>)
 800cace:	481e      	ldr	r0, [pc, #120]	@ (800cb48 <__pow5mult+0xb0>)
 800cad0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cad4:	f001 fd28 	bl	800e528 <__assert_func>
 800cad8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cadc:	6004      	str	r4, [r0, #0]
 800cade:	60c4      	str	r4, [r0, #12]
 800cae0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cae4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cae8:	b94c      	cbnz	r4, 800cafe <__pow5mult+0x66>
 800caea:	f240 2171 	movw	r1, #625	@ 0x271
 800caee:	4638      	mov	r0, r7
 800caf0:	f7ff ff12 	bl	800c918 <__i2b>
 800caf4:	2300      	movs	r3, #0
 800caf6:	f8c8 0008 	str.w	r0, [r8, #8]
 800cafa:	4604      	mov	r4, r0
 800cafc:	6003      	str	r3, [r0, #0]
 800cafe:	f04f 0900 	mov.w	r9, #0
 800cb02:	07eb      	lsls	r3, r5, #31
 800cb04:	d50a      	bpl.n	800cb1c <__pow5mult+0x84>
 800cb06:	4631      	mov	r1, r6
 800cb08:	4622      	mov	r2, r4
 800cb0a:	4638      	mov	r0, r7
 800cb0c:	f7ff ff1a 	bl	800c944 <__multiply>
 800cb10:	4631      	mov	r1, r6
 800cb12:	4680      	mov	r8, r0
 800cb14:	4638      	mov	r0, r7
 800cb16:	f7ff fe01 	bl	800c71c <_Bfree>
 800cb1a:	4646      	mov	r6, r8
 800cb1c:	106d      	asrs	r5, r5, #1
 800cb1e:	d00b      	beq.n	800cb38 <__pow5mult+0xa0>
 800cb20:	6820      	ldr	r0, [r4, #0]
 800cb22:	b938      	cbnz	r0, 800cb34 <__pow5mult+0x9c>
 800cb24:	4622      	mov	r2, r4
 800cb26:	4621      	mov	r1, r4
 800cb28:	4638      	mov	r0, r7
 800cb2a:	f7ff ff0b 	bl	800c944 <__multiply>
 800cb2e:	6020      	str	r0, [r4, #0]
 800cb30:	f8c0 9000 	str.w	r9, [r0]
 800cb34:	4604      	mov	r4, r0
 800cb36:	e7e4      	b.n	800cb02 <__pow5mult+0x6a>
 800cb38:	4630      	mov	r0, r6
 800cb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb3e:	bf00      	nop
 800cb40:	0800fcbc 	.word	0x0800fcbc
 800cb44:	0800fbe2 	.word	0x0800fbe2
 800cb48:	0800fc62 	.word	0x0800fc62

0800cb4c <__lshift>:
 800cb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb50:	460c      	mov	r4, r1
 800cb52:	6849      	ldr	r1, [r1, #4]
 800cb54:	6923      	ldr	r3, [r4, #16]
 800cb56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb5a:	68a3      	ldr	r3, [r4, #8]
 800cb5c:	4607      	mov	r7, r0
 800cb5e:	4691      	mov	r9, r2
 800cb60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb64:	f108 0601 	add.w	r6, r8, #1
 800cb68:	42b3      	cmp	r3, r6
 800cb6a:	db0b      	blt.n	800cb84 <__lshift+0x38>
 800cb6c:	4638      	mov	r0, r7
 800cb6e:	f7ff fd95 	bl	800c69c <_Balloc>
 800cb72:	4605      	mov	r5, r0
 800cb74:	b948      	cbnz	r0, 800cb8a <__lshift+0x3e>
 800cb76:	4602      	mov	r2, r0
 800cb78:	4b28      	ldr	r3, [pc, #160]	@ (800cc1c <__lshift+0xd0>)
 800cb7a:	4829      	ldr	r0, [pc, #164]	@ (800cc20 <__lshift+0xd4>)
 800cb7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cb80:	f001 fcd2 	bl	800e528 <__assert_func>
 800cb84:	3101      	adds	r1, #1
 800cb86:	005b      	lsls	r3, r3, #1
 800cb88:	e7ee      	b.n	800cb68 <__lshift+0x1c>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	f100 0114 	add.w	r1, r0, #20
 800cb90:	f100 0210 	add.w	r2, r0, #16
 800cb94:	4618      	mov	r0, r3
 800cb96:	4553      	cmp	r3, sl
 800cb98:	db33      	blt.n	800cc02 <__lshift+0xb6>
 800cb9a:	6920      	ldr	r0, [r4, #16]
 800cb9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cba0:	f104 0314 	add.w	r3, r4, #20
 800cba4:	f019 091f 	ands.w	r9, r9, #31
 800cba8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbb0:	d02b      	beq.n	800cc0a <__lshift+0xbe>
 800cbb2:	f1c9 0e20 	rsb	lr, r9, #32
 800cbb6:	468a      	mov	sl, r1
 800cbb8:	2200      	movs	r2, #0
 800cbba:	6818      	ldr	r0, [r3, #0]
 800cbbc:	fa00 f009 	lsl.w	r0, r0, r9
 800cbc0:	4310      	orrs	r0, r2
 800cbc2:	f84a 0b04 	str.w	r0, [sl], #4
 800cbc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbca:	459c      	cmp	ip, r3
 800cbcc:	fa22 f20e 	lsr.w	r2, r2, lr
 800cbd0:	d8f3      	bhi.n	800cbba <__lshift+0x6e>
 800cbd2:	ebac 0304 	sub.w	r3, ip, r4
 800cbd6:	3b15      	subs	r3, #21
 800cbd8:	f023 0303 	bic.w	r3, r3, #3
 800cbdc:	3304      	adds	r3, #4
 800cbde:	f104 0015 	add.w	r0, r4, #21
 800cbe2:	4584      	cmp	ip, r0
 800cbe4:	bf38      	it	cc
 800cbe6:	2304      	movcc	r3, #4
 800cbe8:	50ca      	str	r2, [r1, r3]
 800cbea:	b10a      	cbz	r2, 800cbf0 <__lshift+0xa4>
 800cbec:	f108 0602 	add.w	r6, r8, #2
 800cbf0:	3e01      	subs	r6, #1
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	612e      	str	r6, [r5, #16]
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	f7ff fd90 	bl	800c71c <_Bfree>
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc02:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc06:	3301      	adds	r3, #1
 800cc08:	e7c5      	b.n	800cb96 <__lshift+0x4a>
 800cc0a:	3904      	subs	r1, #4
 800cc0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc10:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc14:	459c      	cmp	ip, r3
 800cc16:	d8f9      	bhi.n	800cc0c <__lshift+0xc0>
 800cc18:	e7ea      	b.n	800cbf0 <__lshift+0xa4>
 800cc1a:	bf00      	nop
 800cc1c:	0800fc51 	.word	0x0800fc51
 800cc20:	0800fc62 	.word	0x0800fc62

0800cc24 <__mcmp>:
 800cc24:	690a      	ldr	r2, [r1, #16]
 800cc26:	4603      	mov	r3, r0
 800cc28:	6900      	ldr	r0, [r0, #16]
 800cc2a:	1a80      	subs	r0, r0, r2
 800cc2c:	b530      	push	{r4, r5, lr}
 800cc2e:	d10e      	bne.n	800cc4e <__mcmp+0x2a>
 800cc30:	3314      	adds	r3, #20
 800cc32:	3114      	adds	r1, #20
 800cc34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cc38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cc3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc44:	4295      	cmp	r5, r2
 800cc46:	d003      	beq.n	800cc50 <__mcmp+0x2c>
 800cc48:	d205      	bcs.n	800cc56 <__mcmp+0x32>
 800cc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc4e:	bd30      	pop	{r4, r5, pc}
 800cc50:	42a3      	cmp	r3, r4
 800cc52:	d3f3      	bcc.n	800cc3c <__mcmp+0x18>
 800cc54:	e7fb      	b.n	800cc4e <__mcmp+0x2a>
 800cc56:	2001      	movs	r0, #1
 800cc58:	e7f9      	b.n	800cc4e <__mcmp+0x2a>
	...

0800cc5c <__mdiff>:
 800cc5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc60:	4689      	mov	r9, r1
 800cc62:	4606      	mov	r6, r0
 800cc64:	4611      	mov	r1, r2
 800cc66:	4648      	mov	r0, r9
 800cc68:	4614      	mov	r4, r2
 800cc6a:	f7ff ffdb 	bl	800cc24 <__mcmp>
 800cc6e:	1e05      	subs	r5, r0, #0
 800cc70:	d112      	bne.n	800cc98 <__mdiff+0x3c>
 800cc72:	4629      	mov	r1, r5
 800cc74:	4630      	mov	r0, r6
 800cc76:	f7ff fd11 	bl	800c69c <_Balloc>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	b928      	cbnz	r0, 800cc8a <__mdiff+0x2e>
 800cc7e:	4b3f      	ldr	r3, [pc, #252]	@ (800cd7c <__mdiff+0x120>)
 800cc80:	f240 2137 	movw	r1, #567	@ 0x237
 800cc84:	483e      	ldr	r0, [pc, #248]	@ (800cd80 <__mdiff+0x124>)
 800cc86:	f001 fc4f 	bl	800e528 <__assert_func>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc90:	4610      	mov	r0, r2
 800cc92:	b003      	add	sp, #12
 800cc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc98:	bfbc      	itt	lt
 800cc9a:	464b      	movlt	r3, r9
 800cc9c:	46a1      	movlt	r9, r4
 800cc9e:	4630      	mov	r0, r6
 800cca0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cca4:	bfba      	itte	lt
 800cca6:	461c      	movlt	r4, r3
 800cca8:	2501      	movlt	r5, #1
 800ccaa:	2500      	movge	r5, #0
 800ccac:	f7ff fcf6 	bl	800c69c <_Balloc>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	b918      	cbnz	r0, 800ccbc <__mdiff+0x60>
 800ccb4:	4b31      	ldr	r3, [pc, #196]	@ (800cd7c <__mdiff+0x120>)
 800ccb6:	f240 2145 	movw	r1, #581	@ 0x245
 800ccba:	e7e3      	b.n	800cc84 <__mdiff+0x28>
 800ccbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ccc0:	6926      	ldr	r6, [r4, #16]
 800ccc2:	60c5      	str	r5, [r0, #12]
 800ccc4:	f109 0310 	add.w	r3, r9, #16
 800ccc8:	f109 0514 	add.w	r5, r9, #20
 800cccc:	f104 0e14 	add.w	lr, r4, #20
 800ccd0:	f100 0b14 	add.w	fp, r0, #20
 800ccd4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ccd8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ccdc:	9301      	str	r3, [sp, #4]
 800ccde:	46d9      	mov	r9, fp
 800cce0:	f04f 0c00 	mov.w	ip, #0
 800cce4:	9b01      	ldr	r3, [sp, #4]
 800cce6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ccea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	fa1f f38a 	uxth.w	r3, sl
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	b283      	uxth	r3, r0
 800ccf8:	1acb      	subs	r3, r1, r3
 800ccfa:	0c00      	lsrs	r0, r0, #16
 800ccfc:	4463      	add	r3, ip
 800ccfe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cd02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd0c:	4576      	cmp	r6, lr
 800cd0e:	f849 3b04 	str.w	r3, [r9], #4
 800cd12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd16:	d8e5      	bhi.n	800cce4 <__mdiff+0x88>
 800cd18:	1b33      	subs	r3, r6, r4
 800cd1a:	3b15      	subs	r3, #21
 800cd1c:	f023 0303 	bic.w	r3, r3, #3
 800cd20:	3415      	adds	r4, #21
 800cd22:	3304      	adds	r3, #4
 800cd24:	42a6      	cmp	r6, r4
 800cd26:	bf38      	it	cc
 800cd28:	2304      	movcc	r3, #4
 800cd2a:	441d      	add	r5, r3
 800cd2c:	445b      	add	r3, fp
 800cd2e:	461e      	mov	r6, r3
 800cd30:	462c      	mov	r4, r5
 800cd32:	4544      	cmp	r4, r8
 800cd34:	d30e      	bcc.n	800cd54 <__mdiff+0xf8>
 800cd36:	f108 0103 	add.w	r1, r8, #3
 800cd3a:	1b49      	subs	r1, r1, r5
 800cd3c:	f021 0103 	bic.w	r1, r1, #3
 800cd40:	3d03      	subs	r5, #3
 800cd42:	45a8      	cmp	r8, r5
 800cd44:	bf38      	it	cc
 800cd46:	2100      	movcc	r1, #0
 800cd48:	440b      	add	r3, r1
 800cd4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd4e:	b191      	cbz	r1, 800cd76 <__mdiff+0x11a>
 800cd50:	6117      	str	r7, [r2, #16]
 800cd52:	e79d      	b.n	800cc90 <__mdiff+0x34>
 800cd54:	f854 1b04 	ldr.w	r1, [r4], #4
 800cd58:	46e6      	mov	lr, ip
 800cd5a:	0c08      	lsrs	r0, r1, #16
 800cd5c:	fa1c fc81 	uxtah	ip, ip, r1
 800cd60:	4471      	add	r1, lr
 800cd62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cd66:	b289      	uxth	r1, r1
 800cd68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd6c:	f846 1b04 	str.w	r1, [r6], #4
 800cd70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd74:	e7dd      	b.n	800cd32 <__mdiff+0xd6>
 800cd76:	3f01      	subs	r7, #1
 800cd78:	e7e7      	b.n	800cd4a <__mdiff+0xee>
 800cd7a:	bf00      	nop
 800cd7c:	0800fc51 	.word	0x0800fc51
 800cd80:	0800fc62 	.word	0x0800fc62

0800cd84 <__ulp>:
 800cd84:	b082      	sub	sp, #8
 800cd86:	ed8d 0b00 	vstr	d0, [sp]
 800cd8a:	9a01      	ldr	r2, [sp, #4]
 800cd8c:	4b0f      	ldr	r3, [pc, #60]	@ (800cdcc <__ulp+0x48>)
 800cd8e:	4013      	ands	r3, r2
 800cd90:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	dc08      	bgt.n	800cdaa <__ulp+0x26>
 800cd98:	425b      	negs	r3, r3
 800cd9a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cd9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cda2:	da04      	bge.n	800cdae <__ulp+0x2a>
 800cda4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cda8:	4113      	asrs	r3, r2
 800cdaa:	2200      	movs	r2, #0
 800cdac:	e008      	b.n	800cdc0 <__ulp+0x3c>
 800cdae:	f1a2 0314 	sub.w	r3, r2, #20
 800cdb2:	2b1e      	cmp	r3, #30
 800cdb4:	bfda      	itte	le
 800cdb6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cdba:	40da      	lsrle	r2, r3
 800cdbc:	2201      	movgt	r2, #1
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	4610      	mov	r0, r2
 800cdc4:	ec41 0b10 	vmov	d0, r0, r1
 800cdc8:	b002      	add	sp, #8
 800cdca:	4770      	bx	lr
 800cdcc:	7ff00000 	.word	0x7ff00000

0800cdd0 <__b2d>:
 800cdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd4:	6906      	ldr	r6, [r0, #16]
 800cdd6:	f100 0814 	add.w	r8, r0, #20
 800cdda:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cdde:	1f37      	subs	r7, r6, #4
 800cde0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cde4:	4610      	mov	r0, r2
 800cde6:	f7ff fd4b 	bl	800c880 <__hi0bits>
 800cdea:	f1c0 0320 	rsb	r3, r0, #32
 800cdee:	280a      	cmp	r0, #10
 800cdf0:	600b      	str	r3, [r1, #0]
 800cdf2:	491b      	ldr	r1, [pc, #108]	@ (800ce60 <__b2d+0x90>)
 800cdf4:	dc15      	bgt.n	800ce22 <__b2d+0x52>
 800cdf6:	f1c0 0c0b 	rsb	ip, r0, #11
 800cdfa:	fa22 f30c 	lsr.w	r3, r2, ip
 800cdfe:	45b8      	cmp	r8, r7
 800ce00:	ea43 0501 	orr.w	r5, r3, r1
 800ce04:	bf34      	ite	cc
 800ce06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce0a:	2300      	movcs	r3, #0
 800ce0c:	3015      	adds	r0, #21
 800ce0e:	fa02 f000 	lsl.w	r0, r2, r0
 800ce12:	fa23 f30c 	lsr.w	r3, r3, ip
 800ce16:	4303      	orrs	r3, r0
 800ce18:	461c      	mov	r4, r3
 800ce1a:	ec45 4b10 	vmov	d0, r4, r5
 800ce1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce22:	45b8      	cmp	r8, r7
 800ce24:	bf3a      	itte	cc
 800ce26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce2a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ce2e:	2300      	movcs	r3, #0
 800ce30:	380b      	subs	r0, #11
 800ce32:	d012      	beq.n	800ce5a <__b2d+0x8a>
 800ce34:	f1c0 0120 	rsb	r1, r0, #32
 800ce38:	fa23 f401 	lsr.w	r4, r3, r1
 800ce3c:	4082      	lsls	r2, r0
 800ce3e:	4322      	orrs	r2, r4
 800ce40:	4547      	cmp	r7, r8
 800ce42:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ce46:	bf8c      	ite	hi
 800ce48:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ce4c:	2200      	movls	r2, #0
 800ce4e:	4083      	lsls	r3, r0
 800ce50:	40ca      	lsrs	r2, r1
 800ce52:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ce56:	4313      	orrs	r3, r2
 800ce58:	e7de      	b.n	800ce18 <__b2d+0x48>
 800ce5a:	ea42 0501 	orr.w	r5, r2, r1
 800ce5e:	e7db      	b.n	800ce18 <__b2d+0x48>
 800ce60:	3ff00000 	.word	0x3ff00000

0800ce64 <__d2b>:
 800ce64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce68:	460f      	mov	r7, r1
 800ce6a:	2101      	movs	r1, #1
 800ce6c:	ec59 8b10 	vmov	r8, r9, d0
 800ce70:	4616      	mov	r6, r2
 800ce72:	f7ff fc13 	bl	800c69c <_Balloc>
 800ce76:	4604      	mov	r4, r0
 800ce78:	b930      	cbnz	r0, 800ce88 <__d2b+0x24>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	4b23      	ldr	r3, [pc, #140]	@ (800cf0c <__d2b+0xa8>)
 800ce7e:	4824      	ldr	r0, [pc, #144]	@ (800cf10 <__d2b+0xac>)
 800ce80:	f240 310f 	movw	r1, #783	@ 0x30f
 800ce84:	f001 fb50 	bl	800e528 <__assert_func>
 800ce88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce90:	b10d      	cbz	r5, 800ce96 <__d2b+0x32>
 800ce92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce96:	9301      	str	r3, [sp, #4]
 800ce98:	f1b8 0300 	subs.w	r3, r8, #0
 800ce9c:	d023      	beq.n	800cee6 <__d2b+0x82>
 800ce9e:	4668      	mov	r0, sp
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	f7ff fd0c 	bl	800c8be <__lo0bits>
 800cea6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ceaa:	b1d0      	cbz	r0, 800cee2 <__d2b+0x7e>
 800ceac:	f1c0 0320 	rsb	r3, r0, #32
 800ceb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ceb4:	430b      	orrs	r3, r1
 800ceb6:	40c2      	lsrs	r2, r0
 800ceb8:	6163      	str	r3, [r4, #20]
 800ceba:	9201      	str	r2, [sp, #4]
 800cebc:	9b01      	ldr	r3, [sp, #4]
 800cebe:	61a3      	str	r3, [r4, #24]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	bf0c      	ite	eq
 800cec4:	2201      	moveq	r2, #1
 800cec6:	2202      	movne	r2, #2
 800cec8:	6122      	str	r2, [r4, #16]
 800ceca:	b1a5      	cbz	r5, 800cef6 <__d2b+0x92>
 800cecc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ced0:	4405      	add	r5, r0
 800ced2:	603d      	str	r5, [r7, #0]
 800ced4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ced8:	6030      	str	r0, [r6, #0]
 800ceda:	4620      	mov	r0, r4
 800cedc:	b003      	add	sp, #12
 800cede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cee2:	6161      	str	r1, [r4, #20]
 800cee4:	e7ea      	b.n	800cebc <__d2b+0x58>
 800cee6:	a801      	add	r0, sp, #4
 800cee8:	f7ff fce9 	bl	800c8be <__lo0bits>
 800ceec:	9b01      	ldr	r3, [sp, #4]
 800ceee:	6163      	str	r3, [r4, #20]
 800cef0:	3020      	adds	r0, #32
 800cef2:	2201      	movs	r2, #1
 800cef4:	e7e8      	b.n	800cec8 <__d2b+0x64>
 800cef6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cefa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cefe:	6038      	str	r0, [r7, #0]
 800cf00:	6918      	ldr	r0, [r3, #16]
 800cf02:	f7ff fcbd 	bl	800c880 <__hi0bits>
 800cf06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf0a:	e7e5      	b.n	800ced8 <__d2b+0x74>
 800cf0c:	0800fc51 	.word	0x0800fc51
 800cf10:	0800fc62 	.word	0x0800fc62

0800cf14 <__ratio>:
 800cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf18:	b085      	sub	sp, #20
 800cf1a:	e9cd 1000 	strd	r1, r0, [sp]
 800cf1e:	a902      	add	r1, sp, #8
 800cf20:	f7ff ff56 	bl	800cdd0 <__b2d>
 800cf24:	9800      	ldr	r0, [sp, #0]
 800cf26:	a903      	add	r1, sp, #12
 800cf28:	ec55 4b10 	vmov	r4, r5, d0
 800cf2c:	f7ff ff50 	bl	800cdd0 <__b2d>
 800cf30:	9b01      	ldr	r3, [sp, #4]
 800cf32:	6919      	ldr	r1, [r3, #16]
 800cf34:	9b00      	ldr	r3, [sp, #0]
 800cf36:	691b      	ldr	r3, [r3, #16]
 800cf38:	1ac9      	subs	r1, r1, r3
 800cf3a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cf3e:	1a9b      	subs	r3, r3, r2
 800cf40:	ec5b ab10 	vmov	sl, fp, d0
 800cf44:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	bfce      	itee	gt
 800cf4c:	462a      	movgt	r2, r5
 800cf4e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cf52:	465a      	movle	r2, fp
 800cf54:	462f      	mov	r7, r5
 800cf56:	46d9      	mov	r9, fp
 800cf58:	bfcc      	ite	gt
 800cf5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cf5e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cf62:	464b      	mov	r3, r9
 800cf64:	4652      	mov	r2, sl
 800cf66:	4620      	mov	r0, r4
 800cf68:	4639      	mov	r1, r7
 800cf6a:	f7f3 fc8f 	bl	800088c <__aeabi_ddiv>
 800cf6e:	ec41 0b10 	vmov	d0, r0, r1
 800cf72:	b005      	add	sp, #20
 800cf74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf78 <__copybits>:
 800cf78:	3901      	subs	r1, #1
 800cf7a:	b570      	push	{r4, r5, r6, lr}
 800cf7c:	1149      	asrs	r1, r1, #5
 800cf7e:	6914      	ldr	r4, [r2, #16]
 800cf80:	3101      	adds	r1, #1
 800cf82:	f102 0314 	add.w	r3, r2, #20
 800cf86:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cf8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cf8e:	1f05      	subs	r5, r0, #4
 800cf90:	42a3      	cmp	r3, r4
 800cf92:	d30c      	bcc.n	800cfae <__copybits+0x36>
 800cf94:	1aa3      	subs	r3, r4, r2
 800cf96:	3b11      	subs	r3, #17
 800cf98:	f023 0303 	bic.w	r3, r3, #3
 800cf9c:	3211      	adds	r2, #17
 800cf9e:	42a2      	cmp	r2, r4
 800cfa0:	bf88      	it	hi
 800cfa2:	2300      	movhi	r3, #0
 800cfa4:	4418      	add	r0, r3
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	4288      	cmp	r0, r1
 800cfaa:	d305      	bcc.n	800cfb8 <__copybits+0x40>
 800cfac:	bd70      	pop	{r4, r5, r6, pc}
 800cfae:	f853 6b04 	ldr.w	r6, [r3], #4
 800cfb2:	f845 6f04 	str.w	r6, [r5, #4]!
 800cfb6:	e7eb      	b.n	800cf90 <__copybits+0x18>
 800cfb8:	f840 3b04 	str.w	r3, [r0], #4
 800cfbc:	e7f4      	b.n	800cfa8 <__copybits+0x30>

0800cfbe <__any_on>:
 800cfbe:	f100 0214 	add.w	r2, r0, #20
 800cfc2:	6900      	ldr	r0, [r0, #16]
 800cfc4:	114b      	asrs	r3, r1, #5
 800cfc6:	4298      	cmp	r0, r3
 800cfc8:	b510      	push	{r4, lr}
 800cfca:	db11      	blt.n	800cff0 <__any_on+0x32>
 800cfcc:	dd0a      	ble.n	800cfe4 <__any_on+0x26>
 800cfce:	f011 011f 	ands.w	r1, r1, #31
 800cfd2:	d007      	beq.n	800cfe4 <__any_on+0x26>
 800cfd4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cfd8:	fa24 f001 	lsr.w	r0, r4, r1
 800cfdc:	fa00 f101 	lsl.w	r1, r0, r1
 800cfe0:	428c      	cmp	r4, r1
 800cfe2:	d10b      	bne.n	800cffc <__any_on+0x3e>
 800cfe4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d803      	bhi.n	800cff4 <__any_on+0x36>
 800cfec:	2000      	movs	r0, #0
 800cfee:	bd10      	pop	{r4, pc}
 800cff0:	4603      	mov	r3, r0
 800cff2:	e7f7      	b.n	800cfe4 <__any_on+0x26>
 800cff4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cff8:	2900      	cmp	r1, #0
 800cffa:	d0f5      	beq.n	800cfe8 <__any_on+0x2a>
 800cffc:	2001      	movs	r0, #1
 800cffe:	e7f6      	b.n	800cfee <__any_on+0x30>

0800d000 <sulp>:
 800d000:	b570      	push	{r4, r5, r6, lr}
 800d002:	4604      	mov	r4, r0
 800d004:	460d      	mov	r5, r1
 800d006:	ec45 4b10 	vmov	d0, r4, r5
 800d00a:	4616      	mov	r6, r2
 800d00c:	f7ff feba 	bl	800cd84 <__ulp>
 800d010:	ec51 0b10 	vmov	r0, r1, d0
 800d014:	b17e      	cbz	r6, 800d036 <sulp+0x36>
 800d016:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d01a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d01e:	2b00      	cmp	r3, #0
 800d020:	dd09      	ble.n	800d036 <sulp+0x36>
 800d022:	051b      	lsls	r3, r3, #20
 800d024:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d028:	2400      	movs	r4, #0
 800d02a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d02e:	4622      	mov	r2, r4
 800d030:	462b      	mov	r3, r5
 800d032:	f7f3 fb01 	bl	8000638 <__aeabi_dmul>
 800d036:	ec41 0b10 	vmov	d0, r0, r1
 800d03a:	bd70      	pop	{r4, r5, r6, pc}
 800d03c:	0000      	movs	r0, r0
	...

0800d040 <_strtod_l>:
 800d040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d044:	b09f      	sub	sp, #124	@ 0x7c
 800d046:	460c      	mov	r4, r1
 800d048:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d04a:	2200      	movs	r2, #0
 800d04c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d04e:	9005      	str	r0, [sp, #20]
 800d050:	f04f 0a00 	mov.w	sl, #0
 800d054:	f04f 0b00 	mov.w	fp, #0
 800d058:	460a      	mov	r2, r1
 800d05a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d05c:	7811      	ldrb	r1, [r2, #0]
 800d05e:	292b      	cmp	r1, #43	@ 0x2b
 800d060:	d04a      	beq.n	800d0f8 <_strtod_l+0xb8>
 800d062:	d838      	bhi.n	800d0d6 <_strtod_l+0x96>
 800d064:	290d      	cmp	r1, #13
 800d066:	d832      	bhi.n	800d0ce <_strtod_l+0x8e>
 800d068:	2908      	cmp	r1, #8
 800d06a:	d832      	bhi.n	800d0d2 <_strtod_l+0x92>
 800d06c:	2900      	cmp	r1, #0
 800d06e:	d03b      	beq.n	800d0e8 <_strtod_l+0xa8>
 800d070:	2200      	movs	r2, #0
 800d072:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d074:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d076:	782a      	ldrb	r2, [r5, #0]
 800d078:	2a30      	cmp	r2, #48	@ 0x30
 800d07a:	f040 80b3 	bne.w	800d1e4 <_strtod_l+0x1a4>
 800d07e:	786a      	ldrb	r2, [r5, #1]
 800d080:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d084:	2a58      	cmp	r2, #88	@ 0x58
 800d086:	d16e      	bne.n	800d166 <_strtod_l+0x126>
 800d088:	9302      	str	r3, [sp, #8]
 800d08a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d08c:	9301      	str	r3, [sp, #4]
 800d08e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d090:	9300      	str	r3, [sp, #0]
 800d092:	4a8e      	ldr	r2, [pc, #568]	@ (800d2cc <_strtod_l+0x28c>)
 800d094:	9805      	ldr	r0, [sp, #20]
 800d096:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d098:	a919      	add	r1, sp, #100	@ 0x64
 800d09a:	f001 fadf 	bl	800e65c <__gethex>
 800d09e:	f010 060f 	ands.w	r6, r0, #15
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	d005      	beq.n	800d0b2 <_strtod_l+0x72>
 800d0a6:	2e06      	cmp	r6, #6
 800d0a8:	d128      	bne.n	800d0fc <_strtod_l+0xbc>
 800d0aa:	3501      	adds	r5, #1
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800d0b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f040 858e 	bne.w	800dbd6 <_strtod_l+0xb96>
 800d0ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0bc:	b1cb      	cbz	r3, 800d0f2 <_strtod_l+0xb2>
 800d0be:	4652      	mov	r2, sl
 800d0c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d0c4:	ec43 2b10 	vmov	d0, r2, r3
 800d0c8:	b01f      	add	sp, #124	@ 0x7c
 800d0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ce:	2920      	cmp	r1, #32
 800d0d0:	d1ce      	bne.n	800d070 <_strtod_l+0x30>
 800d0d2:	3201      	adds	r2, #1
 800d0d4:	e7c1      	b.n	800d05a <_strtod_l+0x1a>
 800d0d6:	292d      	cmp	r1, #45	@ 0x2d
 800d0d8:	d1ca      	bne.n	800d070 <_strtod_l+0x30>
 800d0da:	2101      	movs	r1, #1
 800d0dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d0de:	1c51      	adds	r1, r2, #1
 800d0e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d0e2:	7852      	ldrb	r2, [r2, #1]
 800d0e4:	2a00      	cmp	r2, #0
 800d0e6:	d1c5      	bne.n	800d074 <_strtod_l+0x34>
 800d0e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d0ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f040 8570 	bne.w	800dbd2 <_strtod_l+0xb92>
 800d0f2:	4652      	mov	r2, sl
 800d0f4:	465b      	mov	r3, fp
 800d0f6:	e7e5      	b.n	800d0c4 <_strtod_l+0x84>
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	e7ef      	b.n	800d0dc <_strtod_l+0x9c>
 800d0fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d0fe:	b13a      	cbz	r2, 800d110 <_strtod_l+0xd0>
 800d100:	2135      	movs	r1, #53	@ 0x35
 800d102:	a81c      	add	r0, sp, #112	@ 0x70
 800d104:	f7ff ff38 	bl	800cf78 <__copybits>
 800d108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d10a:	9805      	ldr	r0, [sp, #20]
 800d10c:	f7ff fb06 	bl	800c71c <_Bfree>
 800d110:	3e01      	subs	r6, #1
 800d112:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d114:	2e04      	cmp	r6, #4
 800d116:	d806      	bhi.n	800d126 <_strtod_l+0xe6>
 800d118:	e8df f006 	tbb	[pc, r6]
 800d11c:	201d0314 	.word	0x201d0314
 800d120:	14          	.byte	0x14
 800d121:	00          	.byte	0x00
 800d122:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d126:	05e1      	lsls	r1, r4, #23
 800d128:	bf48      	it	mi
 800d12a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d12e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d132:	0d1b      	lsrs	r3, r3, #20
 800d134:	051b      	lsls	r3, r3, #20
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1bb      	bne.n	800d0b2 <_strtod_l+0x72>
 800d13a:	f7fe fbe3 	bl	800b904 <__errno>
 800d13e:	2322      	movs	r3, #34	@ 0x22
 800d140:	6003      	str	r3, [r0, #0]
 800d142:	e7b6      	b.n	800d0b2 <_strtod_l+0x72>
 800d144:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d148:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d14c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d150:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d154:	e7e7      	b.n	800d126 <_strtod_l+0xe6>
 800d156:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d2d4 <_strtod_l+0x294>
 800d15a:	e7e4      	b.n	800d126 <_strtod_l+0xe6>
 800d15c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d160:	f04f 3aff 	mov.w	sl, #4294967295
 800d164:	e7df      	b.n	800d126 <_strtod_l+0xe6>
 800d166:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d168:	1c5a      	adds	r2, r3, #1
 800d16a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d16c:	785b      	ldrb	r3, [r3, #1]
 800d16e:	2b30      	cmp	r3, #48	@ 0x30
 800d170:	d0f9      	beq.n	800d166 <_strtod_l+0x126>
 800d172:	2b00      	cmp	r3, #0
 800d174:	d09d      	beq.n	800d0b2 <_strtod_l+0x72>
 800d176:	2301      	movs	r3, #1
 800d178:	9309      	str	r3, [sp, #36]	@ 0x24
 800d17a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d17c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d17e:	2300      	movs	r3, #0
 800d180:	9308      	str	r3, [sp, #32]
 800d182:	930a      	str	r3, [sp, #40]	@ 0x28
 800d184:	461f      	mov	r7, r3
 800d186:	220a      	movs	r2, #10
 800d188:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d18a:	7805      	ldrb	r5, [r0, #0]
 800d18c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d190:	b2d9      	uxtb	r1, r3
 800d192:	2909      	cmp	r1, #9
 800d194:	d928      	bls.n	800d1e8 <_strtod_l+0x1a8>
 800d196:	494e      	ldr	r1, [pc, #312]	@ (800d2d0 <_strtod_l+0x290>)
 800d198:	2201      	movs	r2, #1
 800d19a:	f001 f979 	bl	800e490 <strncmp>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d032      	beq.n	800d208 <_strtod_l+0x1c8>
 800d1a2:	2000      	movs	r0, #0
 800d1a4:	462a      	mov	r2, r5
 800d1a6:	4681      	mov	r9, r0
 800d1a8:	463d      	mov	r5, r7
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2a65      	cmp	r2, #101	@ 0x65
 800d1ae:	d001      	beq.n	800d1b4 <_strtod_l+0x174>
 800d1b0:	2a45      	cmp	r2, #69	@ 0x45
 800d1b2:	d114      	bne.n	800d1de <_strtod_l+0x19e>
 800d1b4:	b91d      	cbnz	r5, 800d1be <_strtod_l+0x17e>
 800d1b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1b8:	4302      	orrs	r2, r0
 800d1ba:	d095      	beq.n	800d0e8 <_strtod_l+0xa8>
 800d1bc:	2500      	movs	r5, #0
 800d1be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d1c0:	1c62      	adds	r2, r4, #1
 800d1c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1c4:	7862      	ldrb	r2, [r4, #1]
 800d1c6:	2a2b      	cmp	r2, #43	@ 0x2b
 800d1c8:	d077      	beq.n	800d2ba <_strtod_l+0x27a>
 800d1ca:	2a2d      	cmp	r2, #45	@ 0x2d
 800d1cc:	d07b      	beq.n	800d2c6 <_strtod_l+0x286>
 800d1ce:	f04f 0c00 	mov.w	ip, #0
 800d1d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d1d6:	2909      	cmp	r1, #9
 800d1d8:	f240 8082 	bls.w	800d2e0 <_strtod_l+0x2a0>
 800d1dc:	9419      	str	r4, [sp, #100]	@ 0x64
 800d1de:	f04f 0800 	mov.w	r8, #0
 800d1e2:	e0a2      	b.n	800d32a <_strtod_l+0x2ea>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	e7c7      	b.n	800d178 <_strtod_l+0x138>
 800d1e8:	2f08      	cmp	r7, #8
 800d1ea:	bfd5      	itete	le
 800d1ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d1ee:	9908      	ldrgt	r1, [sp, #32]
 800d1f0:	fb02 3301 	mlale	r3, r2, r1, r3
 800d1f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d1f8:	f100 0001 	add.w	r0, r0, #1
 800d1fc:	bfd4      	ite	le
 800d1fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d200:	9308      	strgt	r3, [sp, #32]
 800d202:	3701      	adds	r7, #1
 800d204:	9019      	str	r0, [sp, #100]	@ 0x64
 800d206:	e7bf      	b.n	800d188 <_strtod_l+0x148>
 800d208:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d20a:	1c5a      	adds	r2, r3, #1
 800d20c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d20e:	785a      	ldrb	r2, [r3, #1]
 800d210:	b37f      	cbz	r7, 800d272 <_strtod_l+0x232>
 800d212:	4681      	mov	r9, r0
 800d214:	463d      	mov	r5, r7
 800d216:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d21a:	2b09      	cmp	r3, #9
 800d21c:	d912      	bls.n	800d244 <_strtod_l+0x204>
 800d21e:	2301      	movs	r3, #1
 800d220:	e7c4      	b.n	800d1ac <_strtod_l+0x16c>
 800d222:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d224:	1c5a      	adds	r2, r3, #1
 800d226:	9219      	str	r2, [sp, #100]	@ 0x64
 800d228:	785a      	ldrb	r2, [r3, #1]
 800d22a:	3001      	adds	r0, #1
 800d22c:	2a30      	cmp	r2, #48	@ 0x30
 800d22e:	d0f8      	beq.n	800d222 <_strtod_l+0x1e2>
 800d230:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d234:	2b08      	cmp	r3, #8
 800d236:	f200 84d3 	bhi.w	800dbe0 <_strtod_l+0xba0>
 800d23a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d23c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d23e:	4681      	mov	r9, r0
 800d240:	2000      	movs	r0, #0
 800d242:	4605      	mov	r5, r0
 800d244:	3a30      	subs	r2, #48	@ 0x30
 800d246:	f100 0301 	add.w	r3, r0, #1
 800d24a:	d02a      	beq.n	800d2a2 <_strtod_l+0x262>
 800d24c:	4499      	add	r9, r3
 800d24e:	eb00 0c05 	add.w	ip, r0, r5
 800d252:	462b      	mov	r3, r5
 800d254:	210a      	movs	r1, #10
 800d256:	4563      	cmp	r3, ip
 800d258:	d10d      	bne.n	800d276 <_strtod_l+0x236>
 800d25a:	1c69      	adds	r1, r5, #1
 800d25c:	4401      	add	r1, r0
 800d25e:	4428      	add	r0, r5
 800d260:	2808      	cmp	r0, #8
 800d262:	dc16      	bgt.n	800d292 <_strtod_l+0x252>
 800d264:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d266:	230a      	movs	r3, #10
 800d268:	fb03 2300 	mla	r3, r3, r0, r2
 800d26c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d26e:	2300      	movs	r3, #0
 800d270:	e018      	b.n	800d2a4 <_strtod_l+0x264>
 800d272:	4638      	mov	r0, r7
 800d274:	e7da      	b.n	800d22c <_strtod_l+0x1ec>
 800d276:	2b08      	cmp	r3, #8
 800d278:	f103 0301 	add.w	r3, r3, #1
 800d27c:	dc03      	bgt.n	800d286 <_strtod_l+0x246>
 800d27e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d280:	434e      	muls	r6, r1
 800d282:	960a      	str	r6, [sp, #40]	@ 0x28
 800d284:	e7e7      	b.n	800d256 <_strtod_l+0x216>
 800d286:	2b10      	cmp	r3, #16
 800d288:	bfde      	ittt	le
 800d28a:	9e08      	ldrle	r6, [sp, #32]
 800d28c:	434e      	mulle	r6, r1
 800d28e:	9608      	strle	r6, [sp, #32]
 800d290:	e7e1      	b.n	800d256 <_strtod_l+0x216>
 800d292:	280f      	cmp	r0, #15
 800d294:	dceb      	bgt.n	800d26e <_strtod_l+0x22e>
 800d296:	9808      	ldr	r0, [sp, #32]
 800d298:	230a      	movs	r3, #10
 800d29a:	fb03 2300 	mla	r3, r3, r0, r2
 800d29e:	9308      	str	r3, [sp, #32]
 800d2a0:	e7e5      	b.n	800d26e <_strtod_l+0x22e>
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2a6:	1c50      	adds	r0, r2, #1
 800d2a8:	9019      	str	r0, [sp, #100]	@ 0x64
 800d2aa:	7852      	ldrb	r2, [r2, #1]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	460d      	mov	r5, r1
 800d2b0:	e7b1      	b.n	800d216 <_strtod_l+0x1d6>
 800d2b2:	f04f 0900 	mov.w	r9, #0
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e77d      	b.n	800d1b6 <_strtod_l+0x176>
 800d2ba:	f04f 0c00 	mov.w	ip, #0
 800d2be:	1ca2      	adds	r2, r4, #2
 800d2c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800d2c2:	78a2      	ldrb	r2, [r4, #2]
 800d2c4:	e785      	b.n	800d1d2 <_strtod_l+0x192>
 800d2c6:	f04f 0c01 	mov.w	ip, #1
 800d2ca:	e7f8      	b.n	800d2be <_strtod_l+0x27e>
 800d2cc:	0800fdd0 	.word	0x0800fdd0
 800d2d0:	0800fdb8 	.word	0x0800fdb8
 800d2d4:	7ff00000 	.word	0x7ff00000
 800d2d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2da:	1c51      	adds	r1, r2, #1
 800d2dc:	9119      	str	r1, [sp, #100]	@ 0x64
 800d2de:	7852      	ldrb	r2, [r2, #1]
 800d2e0:	2a30      	cmp	r2, #48	@ 0x30
 800d2e2:	d0f9      	beq.n	800d2d8 <_strtod_l+0x298>
 800d2e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d2e8:	2908      	cmp	r1, #8
 800d2ea:	f63f af78 	bhi.w	800d1de <_strtod_l+0x19e>
 800d2ee:	3a30      	subs	r2, #48	@ 0x30
 800d2f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d2f6:	f04f 080a 	mov.w	r8, #10
 800d2fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2fc:	1c56      	adds	r6, r2, #1
 800d2fe:	9619      	str	r6, [sp, #100]	@ 0x64
 800d300:	7852      	ldrb	r2, [r2, #1]
 800d302:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d306:	f1be 0f09 	cmp.w	lr, #9
 800d30a:	d939      	bls.n	800d380 <_strtod_l+0x340>
 800d30c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d30e:	1a76      	subs	r6, r6, r1
 800d310:	2e08      	cmp	r6, #8
 800d312:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d316:	dc03      	bgt.n	800d320 <_strtod_l+0x2e0>
 800d318:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d31a:	4588      	cmp	r8, r1
 800d31c:	bfa8      	it	ge
 800d31e:	4688      	movge	r8, r1
 800d320:	f1bc 0f00 	cmp.w	ip, #0
 800d324:	d001      	beq.n	800d32a <_strtod_l+0x2ea>
 800d326:	f1c8 0800 	rsb	r8, r8, #0
 800d32a:	2d00      	cmp	r5, #0
 800d32c:	d14e      	bne.n	800d3cc <_strtod_l+0x38c>
 800d32e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d330:	4308      	orrs	r0, r1
 800d332:	f47f aebe 	bne.w	800d0b2 <_strtod_l+0x72>
 800d336:	2b00      	cmp	r3, #0
 800d338:	f47f aed6 	bne.w	800d0e8 <_strtod_l+0xa8>
 800d33c:	2a69      	cmp	r2, #105	@ 0x69
 800d33e:	d028      	beq.n	800d392 <_strtod_l+0x352>
 800d340:	dc25      	bgt.n	800d38e <_strtod_l+0x34e>
 800d342:	2a49      	cmp	r2, #73	@ 0x49
 800d344:	d025      	beq.n	800d392 <_strtod_l+0x352>
 800d346:	2a4e      	cmp	r2, #78	@ 0x4e
 800d348:	f47f aece 	bne.w	800d0e8 <_strtod_l+0xa8>
 800d34c:	499b      	ldr	r1, [pc, #620]	@ (800d5bc <_strtod_l+0x57c>)
 800d34e:	a819      	add	r0, sp, #100	@ 0x64
 800d350:	f001 fba6 	bl	800eaa0 <__match>
 800d354:	2800      	cmp	r0, #0
 800d356:	f43f aec7 	beq.w	800d0e8 <_strtod_l+0xa8>
 800d35a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	2b28      	cmp	r3, #40	@ 0x28
 800d360:	d12e      	bne.n	800d3c0 <_strtod_l+0x380>
 800d362:	4997      	ldr	r1, [pc, #604]	@ (800d5c0 <_strtod_l+0x580>)
 800d364:	aa1c      	add	r2, sp, #112	@ 0x70
 800d366:	a819      	add	r0, sp, #100	@ 0x64
 800d368:	f001 fbae 	bl	800eac8 <__hexnan>
 800d36c:	2805      	cmp	r0, #5
 800d36e:	d127      	bne.n	800d3c0 <_strtod_l+0x380>
 800d370:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d372:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d376:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d37a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d37e:	e698      	b.n	800d0b2 <_strtod_l+0x72>
 800d380:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d382:	fb08 2101 	mla	r1, r8, r1, r2
 800d386:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d38a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d38c:	e7b5      	b.n	800d2fa <_strtod_l+0x2ba>
 800d38e:	2a6e      	cmp	r2, #110	@ 0x6e
 800d390:	e7da      	b.n	800d348 <_strtod_l+0x308>
 800d392:	498c      	ldr	r1, [pc, #560]	@ (800d5c4 <_strtod_l+0x584>)
 800d394:	a819      	add	r0, sp, #100	@ 0x64
 800d396:	f001 fb83 	bl	800eaa0 <__match>
 800d39a:	2800      	cmp	r0, #0
 800d39c:	f43f aea4 	beq.w	800d0e8 <_strtod_l+0xa8>
 800d3a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3a2:	4989      	ldr	r1, [pc, #548]	@ (800d5c8 <_strtod_l+0x588>)
 800d3a4:	3b01      	subs	r3, #1
 800d3a6:	a819      	add	r0, sp, #100	@ 0x64
 800d3a8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d3aa:	f001 fb79 	bl	800eaa0 <__match>
 800d3ae:	b910      	cbnz	r0, 800d3b6 <_strtod_l+0x376>
 800d3b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d3b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d5d8 <_strtod_l+0x598>
 800d3ba:	f04f 0a00 	mov.w	sl, #0
 800d3be:	e678      	b.n	800d0b2 <_strtod_l+0x72>
 800d3c0:	4882      	ldr	r0, [pc, #520]	@ (800d5cc <_strtod_l+0x58c>)
 800d3c2:	f001 f8a9 	bl	800e518 <nan>
 800d3c6:	ec5b ab10 	vmov	sl, fp, d0
 800d3ca:	e672      	b.n	800d0b2 <_strtod_l+0x72>
 800d3cc:	eba8 0309 	sub.w	r3, r8, r9
 800d3d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d3d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3d4:	2f00      	cmp	r7, #0
 800d3d6:	bf08      	it	eq
 800d3d8:	462f      	moveq	r7, r5
 800d3da:	2d10      	cmp	r5, #16
 800d3dc:	462c      	mov	r4, r5
 800d3de:	bfa8      	it	ge
 800d3e0:	2410      	movge	r4, #16
 800d3e2:	f7f3 f8af 	bl	8000544 <__aeabi_ui2d>
 800d3e6:	2d09      	cmp	r5, #9
 800d3e8:	4682      	mov	sl, r0
 800d3ea:	468b      	mov	fp, r1
 800d3ec:	dc13      	bgt.n	800d416 <_strtod_l+0x3d6>
 800d3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f43f ae5e 	beq.w	800d0b2 <_strtod_l+0x72>
 800d3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f8:	dd78      	ble.n	800d4ec <_strtod_l+0x4ac>
 800d3fa:	2b16      	cmp	r3, #22
 800d3fc:	dc5f      	bgt.n	800d4be <_strtod_l+0x47e>
 800d3fe:	4974      	ldr	r1, [pc, #464]	@ (800d5d0 <_strtod_l+0x590>)
 800d400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d404:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d408:	4652      	mov	r2, sl
 800d40a:	465b      	mov	r3, fp
 800d40c:	f7f3 f914 	bl	8000638 <__aeabi_dmul>
 800d410:	4682      	mov	sl, r0
 800d412:	468b      	mov	fp, r1
 800d414:	e64d      	b.n	800d0b2 <_strtod_l+0x72>
 800d416:	4b6e      	ldr	r3, [pc, #440]	@ (800d5d0 <_strtod_l+0x590>)
 800d418:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d41c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d420:	f7f3 f90a 	bl	8000638 <__aeabi_dmul>
 800d424:	4682      	mov	sl, r0
 800d426:	9808      	ldr	r0, [sp, #32]
 800d428:	468b      	mov	fp, r1
 800d42a:	f7f3 f88b 	bl	8000544 <__aeabi_ui2d>
 800d42e:	4602      	mov	r2, r0
 800d430:	460b      	mov	r3, r1
 800d432:	4650      	mov	r0, sl
 800d434:	4659      	mov	r1, fp
 800d436:	f7f2 ff49 	bl	80002cc <__adddf3>
 800d43a:	2d0f      	cmp	r5, #15
 800d43c:	4682      	mov	sl, r0
 800d43e:	468b      	mov	fp, r1
 800d440:	ddd5      	ble.n	800d3ee <_strtod_l+0x3ae>
 800d442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d444:	1b2c      	subs	r4, r5, r4
 800d446:	441c      	add	r4, r3
 800d448:	2c00      	cmp	r4, #0
 800d44a:	f340 8096 	ble.w	800d57a <_strtod_l+0x53a>
 800d44e:	f014 030f 	ands.w	r3, r4, #15
 800d452:	d00a      	beq.n	800d46a <_strtod_l+0x42a>
 800d454:	495e      	ldr	r1, [pc, #376]	@ (800d5d0 <_strtod_l+0x590>)
 800d456:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d45a:	4652      	mov	r2, sl
 800d45c:	465b      	mov	r3, fp
 800d45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d462:	f7f3 f8e9 	bl	8000638 <__aeabi_dmul>
 800d466:	4682      	mov	sl, r0
 800d468:	468b      	mov	fp, r1
 800d46a:	f034 040f 	bics.w	r4, r4, #15
 800d46e:	d073      	beq.n	800d558 <_strtod_l+0x518>
 800d470:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d474:	dd48      	ble.n	800d508 <_strtod_l+0x4c8>
 800d476:	2400      	movs	r4, #0
 800d478:	46a0      	mov	r8, r4
 800d47a:	940a      	str	r4, [sp, #40]	@ 0x28
 800d47c:	46a1      	mov	r9, r4
 800d47e:	9a05      	ldr	r2, [sp, #20]
 800d480:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d5d8 <_strtod_l+0x598>
 800d484:	2322      	movs	r3, #34	@ 0x22
 800d486:	6013      	str	r3, [r2, #0]
 800d488:	f04f 0a00 	mov.w	sl, #0
 800d48c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d48e:	2b00      	cmp	r3, #0
 800d490:	f43f ae0f 	beq.w	800d0b2 <_strtod_l+0x72>
 800d494:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d496:	9805      	ldr	r0, [sp, #20]
 800d498:	f7ff f940 	bl	800c71c <_Bfree>
 800d49c:	9805      	ldr	r0, [sp, #20]
 800d49e:	4649      	mov	r1, r9
 800d4a0:	f7ff f93c 	bl	800c71c <_Bfree>
 800d4a4:	9805      	ldr	r0, [sp, #20]
 800d4a6:	4641      	mov	r1, r8
 800d4a8:	f7ff f938 	bl	800c71c <_Bfree>
 800d4ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4ae:	9805      	ldr	r0, [sp, #20]
 800d4b0:	f7ff f934 	bl	800c71c <_Bfree>
 800d4b4:	9805      	ldr	r0, [sp, #20]
 800d4b6:	4621      	mov	r1, r4
 800d4b8:	f7ff f930 	bl	800c71c <_Bfree>
 800d4bc:	e5f9      	b.n	800d0b2 <_strtod_l+0x72>
 800d4be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	dbbc      	blt.n	800d442 <_strtod_l+0x402>
 800d4c8:	4c41      	ldr	r4, [pc, #260]	@ (800d5d0 <_strtod_l+0x590>)
 800d4ca:	f1c5 050f 	rsb	r5, r5, #15
 800d4ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d4d2:	4652      	mov	r2, sl
 800d4d4:	465b      	mov	r3, fp
 800d4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4da:	f7f3 f8ad 	bl	8000638 <__aeabi_dmul>
 800d4de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4e0:	1b5d      	subs	r5, r3, r5
 800d4e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d4e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d4ea:	e78f      	b.n	800d40c <_strtod_l+0x3cc>
 800d4ec:	3316      	adds	r3, #22
 800d4ee:	dba8      	blt.n	800d442 <_strtod_l+0x402>
 800d4f0:	4b37      	ldr	r3, [pc, #220]	@ (800d5d0 <_strtod_l+0x590>)
 800d4f2:	eba9 0808 	sub.w	r8, r9, r8
 800d4f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d4fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d4fe:	4650      	mov	r0, sl
 800d500:	4659      	mov	r1, fp
 800d502:	f7f3 f9c3 	bl	800088c <__aeabi_ddiv>
 800d506:	e783      	b.n	800d410 <_strtod_l+0x3d0>
 800d508:	4b32      	ldr	r3, [pc, #200]	@ (800d5d4 <_strtod_l+0x594>)
 800d50a:	9308      	str	r3, [sp, #32]
 800d50c:	2300      	movs	r3, #0
 800d50e:	1124      	asrs	r4, r4, #4
 800d510:	4650      	mov	r0, sl
 800d512:	4659      	mov	r1, fp
 800d514:	461e      	mov	r6, r3
 800d516:	2c01      	cmp	r4, #1
 800d518:	dc21      	bgt.n	800d55e <_strtod_l+0x51e>
 800d51a:	b10b      	cbz	r3, 800d520 <_strtod_l+0x4e0>
 800d51c:	4682      	mov	sl, r0
 800d51e:	468b      	mov	fp, r1
 800d520:	492c      	ldr	r1, [pc, #176]	@ (800d5d4 <_strtod_l+0x594>)
 800d522:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d526:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d52a:	4652      	mov	r2, sl
 800d52c:	465b      	mov	r3, fp
 800d52e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d532:	f7f3 f881 	bl	8000638 <__aeabi_dmul>
 800d536:	4b28      	ldr	r3, [pc, #160]	@ (800d5d8 <_strtod_l+0x598>)
 800d538:	460a      	mov	r2, r1
 800d53a:	400b      	ands	r3, r1
 800d53c:	4927      	ldr	r1, [pc, #156]	@ (800d5dc <_strtod_l+0x59c>)
 800d53e:	428b      	cmp	r3, r1
 800d540:	4682      	mov	sl, r0
 800d542:	d898      	bhi.n	800d476 <_strtod_l+0x436>
 800d544:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d548:	428b      	cmp	r3, r1
 800d54a:	bf86      	itte	hi
 800d54c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d5e0 <_strtod_l+0x5a0>
 800d550:	f04f 3aff 	movhi.w	sl, #4294967295
 800d554:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d558:	2300      	movs	r3, #0
 800d55a:	9308      	str	r3, [sp, #32]
 800d55c:	e07a      	b.n	800d654 <_strtod_l+0x614>
 800d55e:	07e2      	lsls	r2, r4, #31
 800d560:	d505      	bpl.n	800d56e <_strtod_l+0x52e>
 800d562:	9b08      	ldr	r3, [sp, #32]
 800d564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d568:	f7f3 f866 	bl	8000638 <__aeabi_dmul>
 800d56c:	2301      	movs	r3, #1
 800d56e:	9a08      	ldr	r2, [sp, #32]
 800d570:	3208      	adds	r2, #8
 800d572:	3601      	adds	r6, #1
 800d574:	1064      	asrs	r4, r4, #1
 800d576:	9208      	str	r2, [sp, #32]
 800d578:	e7cd      	b.n	800d516 <_strtod_l+0x4d6>
 800d57a:	d0ed      	beq.n	800d558 <_strtod_l+0x518>
 800d57c:	4264      	negs	r4, r4
 800d57e:	f014 020f 	ands.w	r2, r4, #15
 800d582:	d00a      	beq.n	800d59a <_strtod_l+0x55a>
 800d584:	4b12      	ldr	r3, [pc, #72]	@ (800d5d0 <_strtod_l+0x590>)
 800d586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d58a:	4650      	mov	r0, sl
 800d58c:	4659      	mov	r1, fp
 800d58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d592:	f7f3 f97b 	bl	800088c <__aeabi_ddiv>
 800d596:	4682      	mov	sl, r0
 800d598:	468b      	mov	fp, r1
 800d59a:	1124      	asrs	r4, r4, #4
 800d59c:	d0dc      	beq.n	800d558 <_strtod_l+0x518>
 800d59e:	2c1f      	cmp	r4, #31
 800d5a0:	dd20      	ble.n	800d5e4 <_strtod_l+0x5a4>
 800d5a2:	2400      	movs	r4, #0
 800d5a4:	46a0      	mov	r8, r4
 800d5a6:	940a      	str	r4, [sp, #40]	@ 0x28
 800d5a8:	46a1      	mov	r9, r4
 800d5aa:	9a05      	ldr	r2, [sp, #20]
 800d5ac:	2322      	movs	r3, #34	@ 0x22
 800d5ae:	f04f 0a00 	mov.w	sl, #0
 800d5b2:	f04f 0b00 	mov.w	fp, #0
 800d5b6:	6013      	str	r3, [r2, #0]
 800d5b8:	e768      	b.n	800d48c <_strtod_l+0x44c>
 800d5ba:	bf00      	nop
 800d5bc:	0800fba9 	.word	0x0800fba9
 800d5c0:	0800fdbc 	.word	0x0800fdbc
 800d5c4:	0800fba1 	.word	0x0800fba1
 800d5c8:	0800fbd8 	.word	0x0800fbd8
 800d5cc:	0800ff65 	.word	0x0800ff65
 800d5d0:	0800fcf0 	.word	0x0800fcf0
 800d5d4:	0800fcc8 	.word	0x0800fcc8
 800d5d8:	7ff00000 	.word	0x7ff00000
 800d5dc:	7ca00000 	.word	0x7ca00000
 800d5e0:	7fefffff 	.word	0x7fefffff
 800d5e4:	f014 0310 	ands.w	r3, r4, #16
 800d5e8:	bf18      	it	ne
 800d5ea:	236a      	movne	r3, #106	@ 0x6a
 800d5ec:	4ea9      	ldr	r6, [pc, #676]	@ (800d894 <_strtod_l+0x854>)
 800d5ee:	9308      	str	r3, [sp, #32]
 800d5f0:	4650      	mov	r0, sl
 800d5f2:	4659      	mov	r1, fp
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	07e2      	lsls	r2, r4, #31
 800d5f8:	d504      	bpl.n	800d604 <_strtod_l+0x5c4>
 800d5fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d5fe:	f7f3 f81b 	bl	8000638 <__aeabi_dmul>
 800d602:	2301      	movs	r3, #1
 800d604:	1064      	asrs	r4, r4, #1
 800d606:	f106 0608 	add.w	r6, r6, #8
 800d60a:	d1f4      	bne.n	800d5f6 <_strtod_l+0x5b6>
 800d60c:	b10b      	cbz	r3, 800d612 <_strtod_l+0x5d2>
 800d60e:	4682      	mov	sl, r0
 800d610:	468b      	mov	fp, r1
 800d612:	9b08      	ldr	r3, [sp, #32]
 800d614:	b1b3      	cbz	r3, 800d644 <_strtod_l+0x604>
 800d616:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d61a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d61e:	2b00      	cmp	r3, #0
 800d620:	4659      	mov	r1, fp
 800d622:	dd0f      	ble.n	800d644 <_strtod_l+0x604>
 800d624:	2b1f      	cmp	r3, #31
 800d626:	dd55      	ble.n	800d6d4 <_strtod_l+0x694>
 800d628:	2b34      	cmp	r3, #52	@ 0x34
 800d62a:	bfde      	ittt	le
 800d62c:	f04f 33ff 	movle.w	r3, #4294967295
 800d630:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d634:	4093      	lslle	r3, r2
 800d636:	f04f 0a00 	mov.w	sl, #0
 800d63a:	bfcc      	ite	gt
 800d63c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d640:	ea03 0b01 	andle.w	fp, r3, r1
 800d644:	2200      	movs	r2, #0
 800d646:	2300      	movs	r3, #0
 800d648:	4650      	mov	r0, sl
 800d64a:	4659      	mov	r1, fp
 800d64c:	f7f3 fa5c 	bl	8000b08 <__aeabi_dcmpeq>
 800d650:	2800      	cmp	r0, #0
 800d652:	d1a6      	bne.n	800d5a2 <_strtod_l+0x562>
 800d654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d65a:	9805      	ldr	r0, [sp, #20]
 800d65c:	462b      	mov	r3, r5
 800d65e:	463a      	mov	r2, r7
 800d660:	f7ff f8c4 	bl	800c7ec <__s2b>
 800d664:	900a      	str	r0, [sp, #40]	@ 0x28
 800d666:	2800      	cmp	r0, #0
 800d668:	f43f af05 	beq.w	800d476 <_strtod_l+0x436>
 800d66c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d66e:	2a00      	cmp	r2, #0
 800d670:	eba9 0308 	sub.w	r3, r9, r8
 800d674:	bfa8      	it	ge
 800d676:	2300      	movge	r3, #0
 800d678:	9312      	str	r3, [sp, #72]	@ 0x48
 800d67a:	2400      	movs	r4, #0
 800d67c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d680:	9316      	str	r3, [sp, #88]	@ 0x58
 800d682:	46a0      	mov	r8, r4
 800d684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d686:	9805      	ldr	r0, [sp, #20]
 800d688:	6859      	ldr	r1, [r3, #4]
 800d68a:	f7ff f807 	bl	800c69c <_Balloc>
 800d68e:	4681      	mov	r9, r0
 800d690:	2800      	cmp	r0, #0
 800d692:	f43f aef4 	beq.w	800d47e <_strtod_l+0x43e>
 800d696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d698:	691a      	ldr	r2, [r3, #16]
 800d69a:	3202      	adds	r2, #2
 800d69c:	f103 010c 	add.w	r1, r3, #12
 800d6a0:	0092      	lsls	r2, r2, #2
 800d6a2:	300c      	adds	r0, #12
 800d6a4:	f000 ff28 	bl	800e4f8 <memcpy>
 800d6a8:	ec4b ab10 	vmov	d0, sl, fp
 800d6ac:	9805      	ldr	r0, [sp, #20]
 800d6ae:	aa1c      	add	r2, sp, #112	@ 0x70
 800d6b0:	a91b      	add	r1, sp, #108	@ 0x6c
 800d6b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d6b6:	f7ff fbd5 	bl	800ce64 <__d2b>
 800d6ba:	901a      	str	r0, [sp, #104]	@ 0x68
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	f43f aede 	beq.w	800d47e <_strtod_l+0x43e>
 800d6c2:	9805      	ldr	r0, [sp, #20]
 800d6c4:	2101      	movs	r1, #1
 800d6c6:	f7ff f927 	bl	800c918 <__i2b>
 800d6ca:	4680      	mov	r8, r0
 800d6cc:	b948      	cbnz	r0, 800d6e2 <_strtod_l+0x6a2>
 800d6ce:	f04f 0800 	mov.w	r8, #0
 800d6d2:	e6d4      	b.n	800d47e <_strtod_l+0x43e>
 800d6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d6dc:	ea03 0a0a 	and.w	sl, r3, sl
 800d6e0:	e7b0      	b.n	800d644 <_strtod_l+0x604>
 800d6e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d6e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d6e6:	2d00      	cmp	r5, #0
 800d6e8:	bfab      	itete	ge
 800d6ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d6ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d6ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d6f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d6f2:	bfac      	ite	ge
 800d6f4:	18ef      	addge	r7, r5, r3
 800d6f6:	1b5e      	sublt	r6, r3, r5
 800d6f8:	9b08      	ldr	r3, [sp, #32]
 800d6fa:	1aed      	subs	r5, r5, r3
 800d6fc:	4415      	add	r5, r2
 800d6fe:	4b66      	ldr	r3, [pc, #408]	@ (800d898 <_strtod_l+0x858>)
 800d700:	3d01      	subs	r5, #1
 800d702:	429d      	cmp	r5, r3
 800d704:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d708:	da50      	bge.n	800d7ac <_strtod_l+0x76c>
 800d70a:	1b5b      	subs	r3, r3, r5
 800d70c:	2b1f      	cmp	r3, #31
 800d70e:	eba2 0203 	sub.w	r2, r2, r3
 800d712:	f04f 0101 	mov.w	r1, #1
 800d716:	dc3d      	bgt.n	800d794 <_strtod_l+0x754>
 800d718:	fa01 f303 	lsl.w	r3, r1, r3
 800d71c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d71e:	2300      	movs	r3, #0
 800d720:	9310      	str	r3, [sp, #64]	@ 0x40
 800d722:	18bd      	adds	r5, r7, r2
 800d724:	9b08      	ldr	r3, [sp, #32]
 800d726:	42af      	cmp	r7, r5
 800d728:	4416      	add	r6, r2
 800d72a:	441e      	add	r6, r3
 800d72c:	463b      	mov	r3, r7
 800d72e:	bfa8      	it	ge
 800d730:	462b      	movge	r3, r5
 800d732:	42b3      	cmp	r3, r6
 800d734:	bfa8      	it	ge
 800d736:	4633      	movge	r3, r6
 800d738:	2b00      	cmp	r3, #0
 800d73a:	bfc2      	ittt	gt
 800d73c:	1aed      	subgt	r5, r5, r3
 800d73e:	1af6      	subgt	r6, r6, r3
 800d740:	1aff      	subgt	r7, r7, r3
 800d742:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d744:	2b00      	cmp	r3, #0
 800d746:	dd16      	ble.n	800d776 <_strtod_l+0x736>
 800d748:	4641      	mov	r1, r8
 800d74a:	9805      	ldr	r0, [sp, #20]
 800d74c:	461a      	mov	r2, r3
 800d74e:	f7ff f9a3 	bl	800ca98 <__pow5mult>
 800d752:	4680      	mov	r8, r0
 800d754:	2800      	cmp	r0, #0
 800d756:	d0ba      	beq.n	800d6ce <_strtod_l+0x68e>
 800d758:	4601      	mov	r1, r0
 800d75a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d75c:	9805      	ldr	r0, [sp, #20]
 800d75e:	f7ff f8f1 	bl	800c944 <__multiply>
 800d762:	900e      	str	r0, [sp, #56]	@ 0x38
 800d764:	2800      	cmp	r0, #0
 800d766:	f43f ae8a 	beq.w	800d47e <_strtod_l+0x43e>
 800d76a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d76c:	9805      	ldr	r0, [sp, #20]
 800d76e:	f7fe ffd5 	bl	800c71c <_Bfree>
 800d772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d774:	931a      	str	r3, [sp, #104]	@ 0x68
 800d776:	2d00      	cmp	r5, #0
 800d778:	dc1d      	bgt.n	800d7b6 <_strtod_l+0x776>
 800d77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	dd23      	ble.n	800d7c8 <_strtod_l+0x788>
 800d780:	4649      	mov	r1, r9
 800d782:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d784:	9805      	ldr	r0, [sp, #20]
 800d786:	f7ff f987 	bl	800ca98 <__pow5mult>
 800d78a:	4681      	mov	r9, r0
 800d78c:	b9e0      	cbnz	r0, 800d7c8 <_strtod_l+0x788>
 800d78e:	f04f 0900 	mov.w	r9, #0
 800d792:	e674      	b.n	800d47e <_strtod_l+0x43e>
 800d794:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d798:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d79c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d7a0:	35e2      	adds	r5, #226	@ 0xe2
 800d7a2:	fa01 f305 	lsl.w	r3, r1, r5
 800d7a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d7a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d7aa:	e7ba      	b.n	800d722 <_strtod_l+0x6e2>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d7b4:	e7b5      	b.n	800d722 <_strtod_l+0x6e2>
 800d7b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d7b8:	9805      	ldr	r0, [sp, #20]
 800d7ba:	462a      	mov	r2, r5
 800d7bc:	f7ff f9c6 	bl	800cb4c <__lshift>
 800d7c0:	901a      	str	r0, [sp, #104]	@ 0x68
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	d1d9      	bne.n	800d77a <_strtod_l+0x73a>
 800d7c6:	e65a      	b.n	800d47e <_strtod_l+0x43e>
 800d7c8:	2e00      	cmp	r6, #0
 800d7ca:	dd07      	ble.n	800d7dc <_strtod_l+0x79c>
 800d7cc:	4649      	mov	r1, r9
 800d7ce:	9805      	ldr	r0, [sp, #20]
 800d7d0:	4632      	mov	r2, r6
 800d7d2:	f7ff f9bb 	bl	800cb4c <__lshift>
 800d7d6:	4681      	mov	r9, r0
 800d7d8:	2800      	cmp	r0, #0
 800d7da:	d0d8      	beq.n	800d78e <_strtod_l+0x74e>
 800d7dc:	2f00      	cmp	r7, #0
 800d7de:	dd08      	ble.n	800d7f2 <_strtod_l+0x7b2>
 800d7e0:	4641      	mov	r1, r8
 800d7e2:	9805      	ldr	r0, [sp, #20]
 800d7e4:	463a      	mov	r2, r7
 800d7e6:	f7ff f9b1 	bl	800cb4c <__lshift>
 800d7ea:	4680      	mov	r8, r0
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	f43f ae46 	beq.w	800d47e <_strtod_l+0x43e>
 800d7f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d7f4:	9805      	ldr	r0, [sp, #20]
 800d7f6:	464a      	mov	r2, r9
 800d7f8:	f7ff fa30 	bl	800cc5c <__mdiff>
 800d7fc:	4604      	mov	r4, r0
 800d7fe:	2800      	cmp	r0, #0
 800d800:	f43f ae3d 	beq.w	800d47e <_strtod_l+0x43e>
 800d804:	68c3      	ldr	r3, [r0, #12]
 800d806:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d808:	2300      	movs	r3, #0
 800d80a:	60c3      	str	r3, [r0, #12]
 800d80c:	4641      	mov	r1, r8
 800d80e:	f7ff fa09 	bl	800cc24 <__mcmp>
 800d812:	2800      	cmp	r0, #0
 800d814:	da46      	bge.n	800d8a4 <_strtod_l+0x864>
 800d816:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d818:	ea53 030a 	orrs.w	r3, r3, sl
 800d81c:	d16c      	bne.n	800d8f8 <_strtod_l+0x8b8>
 800d81e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d822:	2b00      	cmp	r3, #0
 800d824:	d168      	bne.n	800d8f8 <_strtod_l+0x8b8>
 800d826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d82a:	0d1b      	lsrs	r3, r3, #20
 800d82c:	051b      	lsls	r3, r3, #20
 800d82e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d832:	d961      	bls.n	800d8f8 <_strtod_l+0x8b8>
 800d834:	6963      	ldr	r3, [r4, #20]
 800d836:	b913      	cbnz	r3, 800d83e <_strtod_l+0x7fe>
 800d838:	6923      	ldr	r3, [r4, #16]
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	dd5c      	ble.n	800d8f8 <_strtod_l+0x8b8>
 800d83e:	4621      	mov	r1, r4
 800d840:	2201      	movs	r2, #1
 800d842:	9805      	ldr	r0, [sp, #20]
 800d844:	f7ff f982 	bl	800cb4c <__lshift>
 800d848:	4641      	mov	r1, r8
 800d84a:	4604      	mov	r4, r0
 800d84c:	f7ff f9ea 	bl	800cc24 <__mcmp>
 800d850:	2800      	cmp	r0, #0
 800d852:	dd51      	ble.n	800d8f8 <_strtod_l+0x8b8>
 800d854:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d858:	9a08      	ldr	r2, [sp, #32]
 800d85a:	0d1b      	lsrs	r3, r3, #20
 800d85c:	051b      	lsls	r3, r3, #20
 800d85e:	2a00      	cmp	r2, #0
 800d860:	d06b      	beq.n	800d93a <_strtod_l+0x8fa>
 800d862:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d866:	d868      	bhi.n	800d93a <_strtod_l+0x8fa>
 800d868:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d86c:	f67f ae9d 	bls.w	800d5aa <_strtod_l+0x56a>
 800d870:	4b0a      	ldr	r3, [pc, #40]	@ (800d89c <_strtod_l+0x85c>)
 800d872:	4650      	mov	r0, sl
 800d874:	4659      	mov	r1, fp
 800d876:	2200      	movs	r2, #0
 800d878:	f7f2 fede 	bl	8000638 <__aeabi_dmul>
 800d87c:	4b08      	ldr	r3, [pc, #32]	@ (800d8a0 <_strtod_l+0x860>)
 800d87e:	400b      	ands	r3, r1
 800d880:	4682      	mov	sl, r0
 800d882:	468b      	mov	fp, r1
 800d884:	2b00      	cmp	r3, #0
 800d886:	f47f ae05 	bne.w	800d494 <_strtod_l+0x454>
 800d88a:	9a05      	ldr	r2, [sp, #20]
 800d88c:	2322      	movs	r3, #34	@ 0x22
 800d88e:	6013      	str	r3, [r2, #0]
 800d890:	e600      	b.n	800d494 <_strtod_l+0x454>
 800d892:	bf00      	nop
 800d894:	0800fde8 	.word	0x0800fde8
 800d898:	fffffc02 	.word	0xfffffc02
 800d89c:	39500000 	.word	0x39500000
 800d8a0:	7ff00000 	.word	0x7ff00000
 800d8a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d8a8:	d165      	bne.n	800d976 <_strtod_l+0x936>
 800d8aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d8ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8b0:	b35a      	cbz	r2, 800d90a <_strtod_l+0x8ca>
 800d8b2:	4a9f      	ldr	r2, [pc, #636]	@ (800db30 <_strtod_l+0xaf0>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d12b      	bne.n	800d910 <_strtod_l+0x8d0>
 800d8b8:	9b08      	ldr	r3, [sp, #32]
 800d8ba:	4651      	mov	r1, sl
 800d8bc:	b303      	cbz	r3, 800d900 <_strtod_l+0x8c0>
 800d8be:	4b9d      	ldr	r3, [pc, #628]	@ (800db34 <_strtod_l+0xaf4>)
 800d8c0:	465a      	mov	r2, fp
 800d8c2:	4013      	ands	r3, r2
 800d8c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8cc:	d81b      	bhi.n	800d906 <_strtod_l+0x8c6>
 800d8ce:	0d1b      	lsrs	r3, r3, #20
 800d8d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8d8:	4299      	cmp	r1, r3
 800d8da:	d119      	bne.n	800d910 <_strtod_l+0x8d0>
 800d8dc:	4b96      	ldr	r3, [pc, #600]	@ (800db38 <_strtod_l+0xaf8>)
 800d8de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d102      	bne.n	800d8ea <_strtod_l+0x8aa>
 800d8e4:	3101      	adds	r1, #1
 800d8e6:	f43f adca 	beq.w	800d47e <_strtod_l+0x43e>
 800d8ea:	4b92      	ldr	r3, [pc, #584]	@ (800db34 <_strtod_l+0xaf4>)
 800d8ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8ee:	401a      	ands	r2, r3
 800d8f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d8f4:	f04f 0a00 	mov.w	sl, #0
 800d8f8:	9b08      	ldr	r3, [sp, #32]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d1b8      	bne.n	800d870 <_strtod_l+0x830>
 800d8fe:	e5c9      	b.n	800d494 <_strtod_l+0x454>
 800d900:	f04f 33ff 	mov.w	r3, #4294967295
 800d904:	e7e8      	b.n	800d8d8 <_strtod_l+0x898>
 800d906:	4613      	mov	r3, r2
 800d908:	e7e6      	b.n	800d8d8 <_strtod_l+0x898>
 800d90a:	ea53 030a 	orrs.w	r3, r3, sl
 800d90e:	d0a1      	beq.n	800d854 <_strtod_l+0x814>
 800d910:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d912:	b1db      	cbz	r3, 800d94c <_strtod_l+0x90c>
 800d914:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d916:	4213      	tst	r3, r2
 800d918:	d0ee      	beq.n	800d8f8 <_strtod_l+0x8b8>
 800d91a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d91c:	9a08      	ldr	r2, [sp, #32]
 800d91e:	4650      	mov	r0, sl
 800d920:	4659      	mov	r1, fp
 800d922:	b1bb      	cbz	r3, 800d954 <_strtod_l+0x914>
 800d924:	f7ff fb6c 	bl	800d000 <sulp>
 800d928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d92c:	ec53 2b10 	vmov	r2, r3, d0
 800d930:	f7f2 fccc 	bl	80002cc <__adddf3>
 800d934:	4682      	mov	sl, r0
 800d936:	468b      	mov	fp, r1
 800d938:	e7de      	b.n	800d8f8 <_strtod_l+0x8b8>
 800d93a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d93e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d942:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d946:	f04f 3aff 	mov.w	sl, #4294967295
 800d94a:	e7d5      	b.n	800d8f8 <_strtod_l+0x8b8>
 800d94c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d94e:	ea13 0f0a 	tst.w	r3, sl
 800d952:	e7e1      	b.n	800d918 <_strtod_l+0x8d8>
 800d954:	f7ff fb54 	bl	800d000 <sulp>
 800d958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d95c:	ec53 2b10 	vmov	r2, r3, d0
 800d960:	f7f2 fcb2 	bl	80002c8 <__aeabi_dsub>
 800d964:	2200      	movs	r2, #0
 800d966:	2300      	movs	r3, #0
 800d968:	4682      	mov	sl, r0
 800d96a:	468b      	mov	fp, r1
 800d96c:	f7f3 f8cc 	bl	8000b08 <__aeabi_dcmpeq>
 800d970:	2800      	cmp	r0, #0
 800d972:	d0c1      	beq.n	800d8f8 <_strtod_l+0x8b8>
 800d974:	e619      	b.n	800d5aa <_strtod_l+0x56a>
 800d976:	4641      	mov	r1, r8
 800d978:	4620      	mov	r0, r4
 800d97a:	f7ff facb 	bl	800cf14 <__ratio>
 800d97e:	ec57 6b10 	vmov	r6, r7, d0
 800d982:	2200      	movs	r2, #0
 800d984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d988:	4630      	mov	r0, r6
 800d98a:	4639      	mov	r1, r7
 800d98c:	f7f3 f8d0 	bl	8000b30 <__aeabi_dcmple>
 800d990:	2800      	cmp	r0, #0
 800d992:	d06f      	beq.n	800da74 <_strtod_l+0xa34>
 800d994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d996:	2b00      	cmp	r3, #0
 800d998:	d17a      	bne.n	800da90 <_strtod_l+0xa50>
 800d99a:	f1ba 0f00 	cmp.w	sl, #0
 800d99e:	d158      	bne.n	800da52 <_strtod_l+0xa12>
 800d9a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d15a      	bne.n	800da60 <_strtod_l+0xa20>
 800d9aa:	4b64      	ldr	r3, [pc, #400]	@ (800db3c <_strtod_l+0xafc>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	4639      	mov	r1, r7
 800d9b2:	f7f3 f8b3 	bl	8000b1c <__aeabi_dcmplt>
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	d159      	bne.n	800da6e <_strtod_l+0xa2e>
 800d9ba:	4630      	mov	r0, r6
 800d9bc:	4639      	mov	r1, r7
 800d9be:	4b60      	ldr	r3, [pc, #384]	@ (800db40 <_strtod_l+0xb00>)
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f7f2 fe39 	bl	8000638 <__aeabi_dmul>
 800d9c6:	4606      	mov	r6, r0
 800d9c8:	460f      	mov	r7, r1
 800d9ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d9ce:	9606      	str	r6, [sp, #24]
 800d9d0:	9307      	str	r3, [sp, #28]
 800d9d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9d6:	4d57      	ldr	r5, [pc, #348]	@ (800db34 <_strtod_l+0xaf4>)
 800d9d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d9dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9de:	401d      	ands	r5, r3
 800d9e0:	4b58      	ldr	r3, [pc, #352]	@ (800db44 <_strtod_l+0xb04>)
 800d9e2:	429d      	cmp	r5, r3
 800d9e4:	f040 80b2 	bne.w	800db4c <_strtod_l+0xb0c>
 800d9e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d9ee:	ec4b ab10 	vmov	d0, sl, fp
 800d9f2:	f7ff f9c7 	bl	800cd84 <__ulp>
 800d9f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9fa:	ec51 0b10 	vmov	r0, r1, d0
 800d9fe:	f7f2 fe1b 	bl	8000638 <__aeabi_dmul>
 800da02:	4652      	mov	r2, sl
 800da04:	465b      	mov	r3, fp
 800da06:	f7f2 fc61 	bl	80002cc <__adddf3>
 800da0a:	460b      	mov	r3, r1
 800da0c:	4949      	ldr	r1, [pc, #292]	@ (800db34 <_strtod_l+0xaf4>)
 800da0e:	4a4e      	ldr	r2, [pc, #312]	@ (800db48 <_strtod_l+0xb08>)
 800da10:	4019      	ands	r1, r3
 800da12:	4291      	cmp	r1, r2
 800da14:	4682      	mov	sl, r0
 800da16:	d942      	bls.n	800da9e <_strtod_l+0xa5e>
 800da18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800da1a:	4b47      	ldr	r3, [pc, #284]	@ (800db38 <_strtod_l+0xaf8>)
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d103      	bne.n	800da28 <_strtod_l+0x9e8>
 800da20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da22:	3301      	adds	r3, #1
 800da24:	f43f ad2b 	beq.w	800d47e <_strtod_l+0x43e>
 800da28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800db38 <_strtod_l+0xaf8>
 800da2c:	f04f 3aff 	mov.w	sl, #4294967295
 800da30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da32:	9805      	ldr	r0, [sp, #20]
 800da34:	f7fe fe72 	bl	800c71c <_Bfree>
 800da38:	9805      	ldr	r0, [sp, #20]
 800da3a:	4649      	mov	r1, r9
 800da3c:	f7fe fe6e 	bl	800c71c <_Bfree>
 800da40:	9805      	ldr	r0, [sp, #20]
 800da42:	4641      	mov	r1, r8
 800da44:	f7fe fe6a 	bl	800c71c <_Bfree>
 800da48:	9805      	ldr	r0, [sp, #20]
 800da4a:	4621      	mov	r1, r4
 800da4c:	f7fe fe66 	bl	800c71c <_Bfree>
 800da50:	e618      	b.n	800d684 <_strtod_l+0x644>
 800da52:	f1ba 0f01 	cmp.w	sl, #1
 800da56:	d103      	bne.n	800da60 <_strtod_l+0xa20>
 800da58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	f43f ada5 	beq.w	800d5aa <_strtod_l+0x56a>
 800da60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800db10 <_strtod_l+0xad0>
 800da64:	4f35      	ldr	r7, [pc, #212]	@ (800db3c <_strtod_l+0xafc>)
 800da66:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da6a:	2600      	movs	r6, #0
 800da6c:	e7b1      	b.n	800d9d2 <_strtod_l+0x992>
 800da6e:	4f34      	ldr	r7, [pc, #208]	@ (800db40 <_strtod_l+0xb00>)
 800da70:	2600      	movs	r6, #0
 800da72:	e7aa      	b.n	800d9ca <_strtod_l+0x98a>
 800da74:	4b32      	ldr	r3, [pc, #200]	@ (800db40 <_strtod_l+0xb00>)
 800da76:	4630      	mov	r0, r6
 800da78:	4639      	mov	r1, r7
 800da7a:	2200      	movs	r2, #0
 800da7c:	f7f2 fddc 	bl	8000638 <__aeabi_dmul>
 800da80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da82:	4606      	mov	r6, r0
 800da84:	460f      	mov	r7, r1
 800da86:	2b00      	cmp	r3, #0
 800da88:	d09f      	beq.n	800d9ca <_strtod_l+0x98a>
 800da8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800da8e:	e7a0      	b.n	800d9d2 <_strtod_l+0x992>
 800da90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800db18 <_strtod_l+0xad8>
 800da94:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da98:	ec57 6b17 	vmov	r6, r7, d7
 800da9c:	e799      	b.n	800d9d2 <_strtod_l+0x992>
 800da9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800daa2:	9b08      	ldr	r3, [sp, #32]
 800daa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d1c1      	bne.n	800da30 <_strtod_l+0x9f0>
 800daac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dab0:	0d1b      	lsrs	r3, r3, #20
 800dab2:	051b      	lsls	r3, r3, #20
 800dab4:	429d      	cmp	r5, r3
 800dab6:	d1bb      	bne.n	800da30 <_strtod_l+0x9f0>
 800dab8:	4630      	mov	r0, r6
 800daba:	4639      	mov	r1, r7
 800dabc:	f7f3 f96c 	bl	8000d98 <__aeabi_d2lz>
 800dac0:	f7f2 fd8c 	bl	80005dc <__aeabi_l2d>
 800dac4:	4602      	mov	r2, r0
 800dac6:	460b      	mov	r3, r1
 800dac8:	4630      	mov	r0, r6
 800daca:	4639      	mov	r1, r7
 800dacc:	f7f2 fbfc 	bl	80002c8 <__aeabi_dsub>
 800dad0:	460b      	mov	r3, r1
 800dad2:	4602      	mov	r2, r0
 800dad4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dad8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dadc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dade:	ea46 060a 	orr.w	r6, r6, sl
 800dae2:	431e      	orrs	r6, r3
 800dae4:	d06f      	beq.n	800dbc6 <_strtod_l+0xb86>
 800dae6:	a30e      	add	r3, pc, #56	@ (adr r3, 800db20 <_strtod_l+0xae0>)
 800dae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daec:	f7f3 f816 	bl	8000b1c <__aeabi_dcmplt>
 800daf0:	2800      	cmp	r0, #0
 800daf2:	f47f accf 	bne.w	800d494 <_strtod_l+0x454>
 800daf6:	a30c      	add	r3, pc, #48	@ (adr r3, 800db28 <_strtod_l+0xae8>)
 800daf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db00:	f7f3 f82a 	bl	8000b58 <__aeabi_dcmpgt>
 800db04:	2800      	cmp	r0, #0
 800db06:	d093      	beq.n	800da30 <_strtod_l+0x9f0>
 800db08:	e4c4      	b.n	800d494 <_strtod_l+0x454>
 800db0a:	bf00      	nop
 800db0c:	f3af 8000 	nop.w
 800db10:	00000000 	.word	0x00000000
 800db14:	bff00000 	.word	0xbff00000
 800db18:	00000000 	.word	0x00000000
 800db1c:	3ff00000 	.word	0x3ff00000
 800db20:	94a03595 	.word	0x94a03595
 800db24:	3fdfffff 	.word	0x3fdfffff
 800db28:	35afe535 	.word	0x35afe535
 800db2c:	3fe00000 	.word	0x3fe00000
 800db30:	000fffff 	.word	0x000fffff
 800db34:	7ff00000 	.word	0x7ff00000
 800db38:	7fefffff 	.word	0x7fefffff
 800db3c:	3ff00000 	.word	0x3ff00000
 800db40:	3fe00000 	.word	0x3fe00000
 800db44:	7fe00000 	.word	0x7fe00000
 800db48:	7c9fffff 	.word	0x7c9fffff
 800db4c:	9b08      	ldr	r3, [sp, #32]
 800db4e:	b323      	cbz	r3, 800db9a <_strtod_l+0xb5a>
 800db50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800db54:	d821      	bhi.n	800db9a <_strtod_l+0xb5a>
 800db56:	a328      	add	r3, pc, #160	@ (adr r3, 800dbf8 <_strtod_l+0xbb8>)
 800db58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5c:	4630      	mov	r0, r6
 800db5e:	4639      	mov	r1, r7
 800db60:	f7f2 ffe6 	bl	8000b30 <__aeabi_dcmple>
 800db64:	b1a0      	cbz	r0, 800db90 <_strtod_l+0xb50>
 800db66:	4639      	mov	r1, r7
 800db68:	4630      	mov	r0, r6
 800db6a:	f7f3 f83d 	bl	8000be8 <__aeabi_d2uiz>
 800db6e:	2801      	cmp	r0, #1
 800db70:	bf38      	it	cc
 800db72:	2001      	movcc	r0, #1
 800db74:	f7f2 fce6 	bl	8000544 <__aeabi_ui2d>
 800db78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db7a:	4606      	mov	r6, r0
 800db7c:	460f      	mov	r7, r1
 800db7e:	b9fb      	cbnz	r3, 800dbc0 <_strtod_l+0xb80>
 800db80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db84:	9014      	str	r0, [sp, #80]	@ 0x50
 800db86:	9315      	str	r3, [sp, #84]	@ 0x54
 800db88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800db8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800db90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800db96:	1b5b      	subs	r3, r3, r5
 800db98:	9311      	str	r3, [sp, #68]	@ 0x44
 800db9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800db9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dba2:	f7ff f8ef 	bl	800cd84 <__ulp>
 800dba6:	4650      	mov	r0, sl
 800dba8:	ec53 2b10 	vmov	r2, r3, d0
 800dbac:	4659      	mov	r1, fp
 800dbae:	f7f2 fd43 	bl	8000638 <__aeabi_dmul>
 800dbb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dbb6:	f7f2 fb89 	bl	80002cc <__adddf3>
 800dbba:	4682      	mov	sl, r0
 800dbbc:	468b      	mov	fp, r1
 800dbbe:	e770      	b.n	800daa2 <_strtod_l+0xa62>
 800dbc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dbc4:	e7e0      	b.n	800db88 <_strtod_l+0xb48>
 800dbc6:	a30e      	add	r3, pc, #56	@ (adr r3, 800dc00 <_strtod_l+0xbc0>)
 800dbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbcc:	f7f2 ffa6 	bl	8000b1c <__aeabi_dcmplt>
 800dbd0:	e798      	b.n	800db04 <_strtod_l+0xac4>
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dbd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbda:	6013      	str	r3, [r2, #0]
 800dbdc:	f7ff ba6d 	b.w	800d0ba <_strtod_l+0x7a>
 800dbe0:	2a65      	cmp	r2, #101	@ 0x65
 800dbe2:	f43f ab66 	beq.w	800d2b2 <_strtod_l+0x272>
 800dbe6:	2a45      	cmp	r2, #69	@ 0x45
 800dbe8:	f43f ab63 	beq.w	800d2b2 <_strtod_l+0x272>
 800dbec:	2301      	movs	r3, #1
 800dbee:	f7ff bb9e 	b.w	800d32e <_strtod_l+0x2ee>
 800dbf2:	bf00      	nop
 800dbf4:	f3af 8000 	nop.w
 800dbf8:	ffc00000 	.word	0xffc00000
 800dbfc:	41dfffff 	.word	0x41dfffff
 800dc00:	94a03595 	.word	0x94a03595
 800dc04:	3fcfffff 	.word	0x3fcfffff

0800dc08 <_strtod_r>:
 800dc08:	4b01      	ldr	r3, [pc, #4]	@ (800dc10 <_strtod_r+0x8>)
 800dc0a:	f7ff ba19 	b.w	800d040 <_strtod_l>
 800dc0e:	bf00      	nop
 800dc10:	20000088 	.word	0x20000088

0800dc14 <_strtol_l.constprop.0>:
 800dc14:	2b24      	cmp	r3, #36	@ 0x24
 800dc16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc1a:	4686      	mov	lr, r0
 800dc1c:	4690      	mov	r8, r2
 800dc1e:	d801      	bhi.n	800dc24 <_strtol_l.constprop.0+0x10>
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d106      	bne.n	800dc32 <_strtol_l.constprop.0+0x1e>
 800dc24:	f7fd fe6e 	bl	800b904 <__errno>
 800dc28:	2316      	movs	r3, #22
 800dc2a:	6003      	str	r3, [r0, #0]
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc32:	4834      	ldr	r0, [pc, #208]	@ (800dd04 <_strtol_l.constprop.0+0xf0>)
 800dc34:	460d      	mov	r5, r1
 800dc36:	462a      	mov	r2, r5
 800dc38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc3c:	5d06      	ldrb	r6, [r0, r4]
 800dc3e:	f016 0608 	ands.w	r6, r6, #8
 800dc42:	d1f8      	bne.n	800dc36 <_strtol_l.constprop.0+0x22>
 800dc44:	2c2d      	cmp	r4, #45	@ 0x2d
 800dc46:	d12d      	bne.n	800dca4 <_strtol_l.constprop.0+0x90>
 800dc48:	782c      	ldrb	r4, [r5, #0]
 800dc4a:	2601      	movs	r6, #1
 800dc4c:	1c95      	adds	r5, r2, #2
 800dc4e:	f033 0210 	bics.w	r2, r3, #16
 800dc52:	d109      	bne.n	800dc68 <_strtol_l.constprop.0+0x54>
 800dc54:	2c30      	cmp	r4, #48	@ 0x30
 800dc56:	d12a      	bne.n	800dcae <_strtol_l.constprop.0+0x9a>
 800dc58:	782a      	ldrb	r2, [r5, #0]
 800dc5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dc5e:	2a58      	cmp	r2, #88	@ 0x58
 800dc60:	d125      	bne.n	800dcae <_strtol_l.constprop.0+0x9a>
 800dc62:	786c      	ldrb	r4, [r5, #1]
 800dc64:	2310      	movs	r3, #16
 800dc66:	3502      	adds	r5, #2
 800dc68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dc6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dc70:	2200      	movs	r2, #0
 800dc72:	fbbc f9f3 	udiv	r9, ip, r3
 800dc76:	4610      	mov	r0, r2
 800dc78:	fb03 ca19 	mls	sl, r3, r9, ip
 800dc7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dc80:	2f09      	cmp	r7, #9
 800dc82:	d81b      	bhi.n	800dcbc <_strtol_l.constprop.0+0xa8>
 800dc84:	463c      	mov	r4, r7
 800dc86:	42a3      	cmp	r3, r4
 800dc88:	dd27      	ble.n	800dcda <_strtol_l.constprop.0+0xc6>
 800dc8a:	1c57      	adds	r7, r2, #1
 800dc8c:	d007      	beq.n	800dc9e <_strtol_l.constprop.0+0x8a>
 800dc8e:	4581      	cmp	r9, r0
 800dc90:	d320      	bcc.n	800dcd4 <_strtol_l.constprop.0+0xc0>
 800dc92:	d101      	bne.n	800dc98 <_strtol_l.constprop.0+0x84>
 800dc94:	45a2      	cmp	sl, r4
 800dc96:	db1d      	blt.n	800dcd4 <_strtol_l.constprop.0+0xc0>
 800dc98:	fb00 4003 	mla	r0, r0, r3, r4
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dca2:	e7eb      	b.n	800dc7c <_strtol_l.constprop.0+0x68>
 800dca4:	2c2b      	cmp	r4, #43	@ 0x2b
 800dca6:	bf04      	itt	eq
 800dca8:	782c      	ldrbeq	r4, [r5, #0]
 800dcaa:	1c95      	addeq	r5, r2, #2
 800dcac:	e7cf      	b.n	800dc4e <_strtol_l.constprop.0+0x3a>
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d1da      	bne.n	800dc68 <_strtol_l.constprop.0+0x54>
 800dcb2:	2c30      	cmp	r4, #48	@ 0x30
 800dcb4:	bf0c      	ite	eq
 800dcb6:	2308      	moveq	r3, #8
 800dcb8:	230a      	movne	r3, #10
 800dcba:	e7d5      	b.n	800dc68 <_strtol_l.constprop.0+0x54>
 800dcbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dcc0:	2f19      	cmp	r7, #25
 800dcc2:	d801      	bhi.n	800dcc8 <_strtol_l.constprop.0+0xb4>
 800dcc4:	3c37      	subs	r4, #55	@ 0x37
 800dcc6:	e7de      	b.n	800dc86 <_strtol_l.constprop.0+0x72>
 800dcc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dccc:	2f19      	cmp	r7, #25
 800dcce:	d804      	bhi.n	800dcda <_strtol_l.constprop.0+0xc6>
 800dcd0:	3c57      	subs	r4, #87	@ 0x57
 800dcd2:	e7d8      	b.n	800dc86 <_strtol_l.constprop.0+0x72>
 800dcd4:	f04f 32ff 	mov.w	r2, #4294967295
 800dcd8:	e7e1      	b.n	800dc9e <_strtol_l.constprop.0+0x8a>
 800dcda:	1c53      	adds	r3, r2, #1
 800dcdc:	d108      	bne.n	800dcf0 <_strtol_l.constprop.0+0xdc>
 800dcde:	2322      	movs	r3, #34	@ 0x22
 800dce0:	f8ce 3000 	str.w	r3, [lr]
 800dce4:	4660      	mov	r0, ip
 800dce6:	f1b8 0f00 	cmp.w	r8, #0
 800dcea:	d0a0      	beq.n	800dc2e <_strtol_l.constprop.0+0x1a>
 800dcec:	1e69      	subs	r1, r5, #1
 800dcee:	e006      	b.n	800dcfe <_strtol_l.constprop.0+0xea>
 800dcf0:	b106      	cbz	r6, 800dcf4 <_strtol_l.constprop.0+0xe0>
 800dcf2:	4240      	negs	r0, r0
 800dcf4:	f1b8 0f00 	cmp.w	r8, #0
 800dcf8:	d099      	beq.n	800dc2e <_strtol_l.constprop.0+0x1a>
 800dcfa:	2a00      	cmp	r2, #0
 800dcfc:	d1f6      	bne.n	800dcec <_strtol_l.constprop.0+0xd8>
 800dcfe:	f8c8 1000 	str.w	r1, [r8]
 800dd02:	e794      	b.n	800dc2e <_strtol_l.constprop.0+0x1a>
 800dd04:	0800fe11 	.word	0x0800fe11

0800dd08 <_strtol_r>:
 800dd08:	f7ff bf84 	b.w	800dc14 <_strtol_l.constprop.0>

0800dd0c <__ssputs_r>:
 800dd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd10:	688e      	ldr	r6, [r1, #8]
 800dd12:	461f      	mov	r7, r3
 800dd14:	42be      	cmp	r6, r7
 800dd16:	680b      	ldr	r3, [r1, #0]
 800dd18:	4682      	mov	sl, r0
 800dd1a:	460c      	mov	r4, r1
 800dd1c:	4690      	mov	r8, r2
 800dd1e:	d82d      	bhi.n	800dd7c <__ssputs_r+0x70>
 800dd20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dd28:	d026      	beq.n	800dd78 <__ssputs_r+0x6c>
 800dd2a:	6965      	ldr	r5, [r4, #20]
 800dd2c:	6909      	ldr	r1, [r1, #16]
 800dd2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd32:	eba3 0901 	sub.w	r9, r3, r1
 800dd36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd3a:	1c7b      	adds	r3, r7, #1
 800dd3c:	444b      	add	r3, r9
 800dd3e:	106d      	asrs	r5, r5, #1
 800dd40:	429d      	cmp	r5, r3
 800dd42:	bf38      	it	cc
 800dd44:	461d      	movcc	r5, r3
 800dd46:	0553      	lsls	r3, r2, #21
 800dd48:	d527      	bpl.n	800dd9a <__ssputs_r+0x8e>
 800dd4a:	4629      	mov	r1, r5
 800dd4c:	f7fc fc22 	bl	800a594 <_malloc_r>
 800dd50:	4606      	mov	r6, r0
 800dd52:	b360      	cbz	r0, 800ddae <__ssputs_r+0xa2>
 800dd54:	6921      	ldr	r1, [r4, #16]
 800dd56:	464a      	mov	r2, r9
 800dd58:	f000 fbce 	bl	800e4f8 <memcpy>
 800dd5c:	89a3      	ldrh	r3, [r4, #12]
 800dd5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dd62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd66:	81a3      	strh	r3, [r4, #12]
 800dd68:	6126      	str	r6, [r4, #16]
 800dd6a:	6165      	str	r5, [r4, #20]
 800dd6c:	444e      	add	r6, r9
 800dd6e:	eba5 0509 	sub.w	r5, r5, r9
 800dd72:	6026      	str	r6, [r4, #0]
 800dd74:	60a5      	str	r5, [r4, #8]
 800dd76:	463e      	mov	r6, r7
 800dd78:	42be      	cmp	r6, r7
 800dd7a:	d900      	bls.n	800dd7e <__ssputs_r+0x72>
 800dd7c:	463e      	mov	r6, r7
 800dd7e:	6820      	ldr	r0, [r4, #0]
 800dd80:	4632      	mov	r2, r6
 800dd82:	4641      	mov	r1, r8
 800dd84:	f000 fb6a 	bl	800e45c <memmove>
 800dd88:	68a3      	ldr	r3, [r4, #8]
 800dd8a:	1b9b      	subs	r3, r3, r6
 800dd8c:	60a3      	str	r3, [r4, #8]
 800dd8e:	6823      	ldr	r3, [r4, #0]
 800dd90:	4433      	add	r3, r6
 800dd92:	6023      	str	r3, [r4, #0]
 800dd94:	2000      	movs	r0, #0
 800dd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd9a:	462a      	mov	r2, r5
 800dd9c:	f000 ff41 	bl	800ec22 <_realloc_r>
 800dda0:	4606      	mov	r6, r0
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d1e0      	bne.n	800dd68 <__ssputs_r+0x5c>
 800dda6:	6921      	ldr	r1, [r4, #16]
 800dda8:	4650      	mov	r0, sl
 800ddaa:	f7fe fc2d 	bl	800c608 <_free_r>
 800ddae:	230c      	movs	r3, #12
 800ddb0:	f8ca 3000 	str.w	r3, [sl]
 800ddb4:	89a3      	ldrh	r3, [r4, #12]
 800ddb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddba:	81a3      	strh	r3, [r4, #12]
 800ddbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ddc0:	e7e9      	b.n	800dd96 <__ssputs_r+0x8a>
	...

0800ddc4 <_svfiprintf_r>:
 800ddc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc8:	4698      	mov	r8, r3
 800ddca:	898b      	ldrh	r3, [r1, #12]
 800ddcc:	061b      	lsls	r3, r3, #24
 800ddce:	b09d      	sub	sp, #116	@ 0x74
 800ddd0:	4607      	mov	r7, r0
 800ddd2:	460d      	mov	r5, r1
 800ddd4:	4614      	mov	r4, r2
 800ddd6:	d510      	bpl.n	800ddfa <_svfiprintf_r+0x36>
 800ddd8:	690b      	ldr	r3, [r1, #16]
 800ddda:	b973      	cbnz	r3, 800ddfa <_svfiprintf_r+0x36>
 800dddc:	2140      	movs	r1, #64	@ 0x40
 800ddde:	f7fc fbd9 	bl	800a594 <_malloc_r>
 800dde2:	6028      	str	r0, [r5, #0]
 800dde4:	6128      	str	r0, [r5, #16]
 800dde6:	b930      	cbnz	r0, 800ddf6 <_svfiprintf_r+0x32>
 800dde8:	230c      	movs	r3, #12
 800ddea:	603b      	str	r3, [r7, #0]
 800ddec:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf0:	b01d      	add	sp, #116	@ 0x74
 800ddf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddf6:	2340      	movs	r3, #64	@ 0x40
 800ddf8:	616b      	str	r3, [r5, #20]
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddfe:	2320      	movs	r3, #32
 800de00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de04:	f8cd 800c 	str.w	r8, [sp, #12]
 800de08:	2330      	movs	r3, #48	@ 0x30
 800de0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dfa8 <_svfiprintf_r+0x1e4>
 800de0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de12:	f04f 0901 	mov.w	r9, #1
 800de16:	4623      	mov	r3, r4
 800de18:	469a      	mov	sl, r3
 800de1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de1e:	b10a      	cbz	r2, 800de24 <_svfiprintf_r+0x60>
 800de20:	2a25      	cmp	r2, #37	@ 0x25
 800de22:	d1f9      	bne.n	800de18 <_svfiprintf_r+0x54>
 800de24:	ebba 0b04 	subs.w	fp, sl, r4
 800de28:	d00b      	beq.n	800de42 <_svfiprintf_r+0x7e>
 800de2a:	465b      	mov	r3, fp
 800de2c:	4622      	mov	r2, r4
 800de2e:	4629      	mov	r1, r5
 800de30:	4638      	mov	r0, r7
 800de32:	f7ff ff6b 	bl	800dd0c <__ssputs_r>
 800de36:	3001      	adds	r0, #1
 800de38:	f000 80a7 	beq.w	800df8a <_svfiprintf_r+0x1c6>
 800de3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de3e:	445a      	add	r2, fp
 800de40:	9209      	str	r2, [sp, #36]	@ 0x24
 800de42:	f89a 3000 	ldrb.w	r3, [sl]
 800de46:	2b00      	cmp	r3, #0
 800de48:	f000 809f 	beq.w	800df8a <_svfiprintf_r+0x1c6>
 800de4c:	2300      	movs	r3, #0
 800de4e:	f04f 32ff 	mov.w	r2, #4294967295
 800de52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de56:	f10a 0a01 	add.w	sl, sl, #1
 800de5a:	9304      	str	r3, [sp, #16]
 800de5c:	9307      	str	r3, [sp, #28]
 800de5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de62:	931a      	str	r3, [sp, #104]	@ 0x68
 800de64:	4654      	mov	r4, sl
 800de66:	2205      	movs	r2, #5
 800de68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de6c:	484e      	ldr	r0, [pc, #312]	@ (800dfa8 <_svfiprintf_r+0x1e4>)
 800de6e:	f7f2 f9cf 	bl	8000210 <memchr>
 800de72:	9a04      	ldr	r2, [sp, #16]
 800de74:	b9d8      	cbnz	r0, 800deae <_svfiprintf_r+0xea>
 800de76:	06d0      	lsls	r0, r2, #27
 800de78:	bf44      	itt	mi
 800de7a:	2320      	movmi	r3, #32
 800de7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de80:	0711      	lsls	r1, r2, #28
 800de82:	bf44      	itt	mi
 800de84:	232b      	movmi	r3, #43	@ 0x2b
 800de86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de8a:	f89a 3000 	ldrb.w	r3, [sl]
 800de8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800de90:	d015      	beq.n	800debe <_svfiprintf_r+0xfa>
 800de92:	9a07      	ldr	r2, [sp, #28]
 800de94:	4654      	mov	r4, sl
 800de96:	2000      	movs	r0, #0
 800de98:	f04f 0c0a 	mov.w	ip, #10
 800de9c:	4621      	mov	r1, r4
 800de9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dea2:	3b30      	subs	r3, #48	@ 0x30
 800dea4:	2b09      	cmp	r3, #9
 800dea6:	d94b      	bls.n	800df40 <_svfiprintf_r+0x17c>
 800dea8:	b1b0      	cbz	r0, 800ded8 <_svfiprintf_r+0x114>
 800deaa:	9207      	str	r2, [sp, #28]
 800deac:	e014      	b.n	800ded8 <_svfiprintf_r+0x114>
 800deae:	eba0 0308 	sub.w	r3, r0, r8
 800deb2:	fa09 f303 	lsl.w	r3, r9, r3
 800deb6:	4313      	orrs	r3, r2
 800deb8:	9304      	str	r3, [sp, #16]
 800deba:	46a2      	mov	sl, r4
 800debc:	e7d2      	b.n	800de64 <_svfiprintf_r+0xa0>
 800debe:	9b03      	ldr	r3, [sp, #12]
 800dec0:	1d19      	adds	r1, r3, #4
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	9103      	str	r1, [sp, #12]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	bfbb      	ittet	lt
 800deca:	425b      	neglt	r3, r3
 800decc:	f042 0202 	orrlt.w	r2, r2, #2
 800ded0:	9307      	strge	r3, [sp, #28]
 800ded2:	9307      	strlt	r3, [sp, #28]
 800ded4:	bfb8      	it	lt
 800ded6:	9204      	strlt	r2, [sp, #16]
 800ded8:	7823      	ldrb	r3, [r4, #0]
 800deda:	2b2e      	cmp	r3, #46	@ 0x2e
 800dedc:	d10a      	bne.n	800def4 <_svfiprintf_r+0x130>
 800dede:	7863      	ldrb	r3, [r4, #1]
 800dee0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dee2:	d132      	bne.n	800df4a <_svfiprintf_r+0x186>
 800dee4:	9b03      	ldr	r3, [sp, #12]
 800dee6:	1d1a      	adds	r2, r3, #4
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	9203      	str	r2, [sp, #12]
 800deec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800def0:	3402      	adds	r4, #2
 800def2:	9305      	str	r3, [sp, #20]
 800def4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dfb8 <_svfiprintf_r+0x1f4>
 800def8:	7821      	ldrb	r1, [r4, #0]
 800defa:	2203      	movs	r2, #3
 800defc:	4650      	mov	r0, sl
 800defe:	f7f2 f987 	bl	8000210 <memchr>
 800df02:	b138      	cbz	r0, 800df14 <_svfiprintf_r+0x150>
 800df04:	9b04      	ldr	r3, [sp, #16]
 800df06:	eba0 000a 	sub.w	r0, r0, sl
 800df0a:	2240      	movs	r2, #64	@ 0x40
 800df0c:	4082      	lsls	r2, r0
 800df0e:	4313      	orrs	r3, r2
 800df10:	3401      	adds	r4, #1
 800df12:	9304      	str	r3, [sp, #16]
 800df14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df18:	4824      	ldr	r0, [pc, #144]	@ (800dfac <_svfiprintf_r+0x1e8>)
 800df1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df1e:	2206      	movs	r2, #6
 800df20:	f7f2 f976 	bl	8000210 <memchr>
 800df24:	2800      	cmp	r0, #0
 800df26:	d036      	beq.n	800df96 <_svfiprintf_r+0x1d2>
 800df28:	4b21      	ldr	r3, [pc, #132]	@ (800dfb0 <_svfiprintf_r+0x1ec>)
 800df2a:	bb1b      	cbnz	r3, 800df74 <_svfiprintf_r+0x1b0>
 800df2c:	9b03      	ldr	r3, [sp, #12]
 800df2e:	3307      	adds	r3, #7
 800df30:	f023 0307 	bic.w	r3, r3, #7
 800df34:	3308      	adds	r3, #8
 800df36:	9303      	str	r3, [sp, #12]
 800df38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df3a:	4433      	add	r3, r6
 800df3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df3e:	e76a      	b.n	800de16 <_svfiprintf_r+0x52>
 800df40:	fb0c 3202 	mla	r2, ip, r2, r3
 800df44:	460c      	mov	r4, r1
 800df46:	2001      	movs	r0, #1
 800df48:	e7a8      	b.n	800de9c <_svfiprintf_r+0xd8>
 800df4a:	2300      	movs	r3, #0
 800df4c:	3401      	adds	r4, #1
 800df4e:	9305      	str	r3, [sp, #20]
 800df50:	4619      	mov	r1, r3
 800df52:	f04f 0c0a 	mov.w	ip, #10
 800df56:	4620      	mov	r0, r4
 800df58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df5c:	3a30      	subs	r2, #48	@ 0x30
 800df5e:	2a09      	cmp	r2, #9
 800df60:	d903      	bls.n	800df6a <_svfiprintf_r+0x1a6>
 800df62:	2b00      	cmp	r3, #0
 800df64:	d0c6      	beq.n	800def4 <_svfiprintf_r+0x130>
 800df66:	9105      	str	r1, [sp, #20]
 800df68:	e7c4      	b.n	800def4 <_svfiprintf_r+0x130>
 800df6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800df6e:	4604      	mov	r4, r0
 800df70:	2301      	movs	r3, #1
 800df72:	e7f0      	b.n	800df56 <_svfiprintf_r+0x192>
 800df74:	ab03      	add	r3, sp, #12
 800df76:	9300      	str	r3, [sp, #0]
 800df78:	462a      	mov	r2, r5
 800df7a:	4b0e      	ldr	r3, [pc, #56]	@ (800dfb4 <_svfiprintf_r+0x1f0>)
 800df7c:	a904      	add	r1, sp, #16
 800df7e:	4638      	mov	r0, r7
 800df80:	f7fc fc34 	bl	800a7ec <_printf_float>
 800df84:	1c42      	adds	r2, r0, #1
 800df86:	4606      	mov	r6, r0
 800df88:	d1d6      	bne.n	800df38 <_svfiprintf_r+0x174>
 800df8a:	89ab      	ldrh	r3, [r5, #12]
 800df8c:	065b      	lsls	r3, r3, #25
 800df8e:	f53f af2d 	bmi.w	800ddec <_svfiprintf_r+0x28>
 800df92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df94:	e72c      	b.n	800ddf0 <_svfiprintf_r+0x2c>
 800df96:	ab03      	add	r3, sp, #12
 800df98:	9300      	str	r3, [sp, #0]
 800df9a:	462a      	mov	r2, r5
 800df9c:	4b05      	ldr	r3, [pc, #20]	@ (800dfb4 <_svfiprintf_r+0x1f0>)
 800df9e:	a904      	add	r1, sp, #16
 800dfa0:	4638      	mov	r0, r7
 800dfa2:	f7fc febb 	bl	800ad1c <_printf_i>
 800dfa6:	e7ed      	b.n	800df84 <_svfiprintf_r+0x1c0>
 800dfa8:	0800ff11 	.word	0x0800ff11
 800dfac:	0800ff1b 	.word	0x0800ff1b
 800dfb0:	0800a7ed 	.word	0x0800a7ed
 800dfb4:	0800dd0d 	.word	0x0800dd0d
 800dfb8:	0800ff17 	.word	0x0800ff17

0800dfbc <__sfputc_r>:
 800dfbc:	6893      	ldr	r3, [r2, #8]
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	b410      	push	{r4}
 800dfc4:	6093      	str	r3, [r2, #8]
 800dfc6:	da08      	bge.n	800dfda <__sfputc_r+0x1e>
 800dfc8:	6994      	ldr	r4, [r2, #24]
 800dfca:	42a3      	cmp	r3, r4
 800dfcc:	db01      	blt.n	800dfd2 <__sfputc_r+0x16>
 800dfce:	290a      	cmp	r1, #10
 800dfd0:	d103      	bne.n	800dfda <__sfputc_r+0x1e>
 800dfd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfd6:	f7fd bb9e 	b.w	800b716 <__swbuf_r>
 800dfda:	6813      	ldr	r3, [r2, #0]
 800dfdc:	1c58      	adds	r0, r3, #1
 800dfde:	6010      	str	r0, [r2, #0]
 800dfe0:	7019      	strb	r1, [r3, #0]
 800dfe2:	4608      	mov	r0, r1
 800dfe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfe8:	4770      	bx	lr

0800dfea <__sfputs_r>:
 800dfea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfec:	4606      	mov	r6, r0
 800dfee:	460f      	mov	r7, r1
 800dff0:	4614      	mov	r4, r2
 800dff2:	18d5      	adds	r5, r2, r3
 800dff4:	42ac      	cmp	r4, r5
 800dff6:	d101      	bne.n	800dffc <__sfputs_r+0x12>
 800dff8:	2000      	movs	r0, #0
 800dffa:	e007      	b.n	800e00c <__sfputs_r+0x22>
 800dffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e000:	463a      	mov	r2, r7
 800e002:	4630      	mov	r0, r6
 800e004:	f7ff ffda 	bl	800dfbc <__sfputc_r>
 800e008:	1c43      	adds	r3, r0, #1
 800e00a:	d1f3      	bne.n	800dff4 <__sfputs_r+0xa>
 800e00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e010 <_vfiprintf_r>:
 800e010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e014:	460d      	mov	r5, r1
 800e016:	b09d      	sub	sp, #116	@ 0x74
 800e018:	4614      	mov	r4, r2
 800e01a:	4698      	mov	r8, r3
 800e01c:	4606      	mov	r6, r0
 800e01e:	b118      	cbz	r0, 800e028 <_vfiprintf_r+0x18>
 800e020:	6a03      	ldr	r3, [r0, #32]
 800e022:	b90b      	cbnz	r3, 800e028 <_vfiprintf_r+0x18>
 800e024:	f7fd fa3a 	bl	800b49c <__sinit>
 800e028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e02a:	07d9      	lsls	r1, r3, #31
 800e02c:	d405      	bmi.n	800e03a <_vfiprintf_r+0x2a>
 800e02e:	89ab      	ldrh	r3, [r5, #12]
 800e030:	059a      	lsls	r2, r3, #22
 800e032:	d402      	bmi.n	800e03a <_vfiprintf_r+0x2a>
 800e034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e036:	f7fd fc90 	bl	800b95a <__retarget_lock_acquire_recursive>
 800e03a:	89ab      	ldrh	r3, [r5, #12]
 800e03c:	071b      	lsls	r3, r3, #28
 800e03e:	d501      	bpl.n	800e044 <_vfiprintf_r+0x34>
 800e040:	692b      	ldr	r3, [r5, #16]
 800e042:	b99b      	cbnz	r3, 800e06c <_vfiprintf_r+0x5c>
 800e044:	4629      	mov	r1, r5
 800e046:	4630      	mov	r0, r6
 800e048:	f7fd fba4 	bl	800b794 <__swsetup_r>
 800e04c:	b170      	cbz	r0, 800e06c <_vfiprintf_r+0x5c>
 800e04e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e050:	07dc      	lsls	r4, r3, #31
 800e052:	d504      	bpl.n	800e05e <_vfiprintf_r+0x4e>
 800e054:	f04f 30ff 	mov.w	r0, #4294967295
 800e058:	b01d      	add	sp, #116	@ 0x74
 800e05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05e:	89ab      	ldrh	r3, [r5, #12]
 800e060:	0598      	lsls	r0, r3, #22
 800e062:	d4f7      	bmi.n	800e054 <_vfiprintf_r+0x44>
 800e064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e066:	f7fd fc79 	bl	800b95c <__retarget_lock_release_recursive>
 800e06a:	e7f3      	b.n	800e054 <_vfiprintf_r+0x44>
 800e06c:	2300      	movs	r3, #0
 800e06e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e070:	2320      	movs	r3, #32
 800e072:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e076:	f8cd 800c 	str.w	r8, [sp, #12]
 800e07a:	2330      	movs	r3, #48	@ 0x30
 800e07c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e22c <_vfiprintf_r+0x21c>
 800e080:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e084:	f04f 0901 	mov.w	r9, #1
 800e088:	4623      	mov	r3, r4
 800e08a:	469a      	mov	sl, r3
 800e08c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e090:	b10a      	cbz	r2, 800e096 <_vfiprintf_r+0x86>
 800e092:	2a25      	cmp	r2, #37	@ 0x25
 800e094:	d1f9      	bne.n	800e08a <_vfiprintf_r+0x7a>
 800e096:	ebba 0b04 	subs.w	fp, sl, r4
 800e09a:	d00b      	beq.n	800e0b4 <_vfiprintf_r+0xa4>
 800e09c:	465b      	mov	r3, fp
 800e09e:	4622      	mov	r2, r4
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	f7ff ffa1 	bl	800dfea <__sfputs_r>
 800e0a8:	3001      	adds	r0, #1
 800e0aa:	f000 80a7 	beq.w	800e1fc <_vfiprintf_r+0x1ec>
 800e0ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0b0:	445a      	add	r2, fp
 800e0b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	f000 809f 	beq.w	800e1fc <_vfiprintf_r+0x1ec>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0c8:	f10a 0a01 	add.w	sl, sl, #1
 800e0cc:	9304      	str	r3, [sp, #16]
 800e0ce:	9307      	str	r3, [sp, #28]
 800e0d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0d6:	4654      	mov	r4, sl
 800e0d8:	2205      	movs	r2, #5
 800e0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0de:	4853      	ldr	r0, [pc, #332]	@ (800e22c <_vfiprintf_r+0x21c>)
 800e0e0:	f7f2 f896 	bl	8000210 <memchr>
 800e0e4:	9a04      	ldr	r2, [sp, #16]
 800e0e6:	b9d8      	cbnz	r0, 800e120 <_vfiprintf_r+0x110>
 800e0e8:	06d1      	lsls	r1, r2, #27
 800e0ea:	bf44      	itt	mi
 800e0ec:	2320      	movmi	r3, #32
 800e0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0f2:	0713      	lsls	r3, r2, #28
 800e0f4:	bf44      	itt	mi
 800e0f6:	232b      	movmi	r3, #43	@ 0x2b
 800e0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e100:	2b2a      	cmp	r3, #42	@ 0x2a
 800e102:	d015      	beq.n	800e130 <_vfiprintf_r+0x120>
 800e104:	9a07      	ldr	r2, [sp, #28]
 800e106:	4654      	mov	r4, sl
 800e108:	2000      	movs	r0, #0
 800e10a:	f04f 0c0a 	mov.w	ip, #10
 800e10e:	4621      	mov	r1, r4
 800e110:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e114:	3b30      	subs	r3, #48	@ 0x30
 800e116:	2b09      	cmp	r3, #9
 800e118:	d94b      	bls.n	800e1b2 <_vfiprintf_r+0x1a2>
 800e11a:	b1b0      	cbz	r0, 800e14a <_vfiprintf_r+0x13a>
 800e11c:	9207      	str	r2, [sp, #28]
 800e11e:	e014      	b.n	800e14a <_vfiprintf_r+0x13a>
 800e120:	eba0 0308 	sub.w	r3, r0, r8
 800e124:	fa09 f303 	lsl.w	r3, r9, r3
 800e128:	4313      	orrs	r3, r2
 800e12a:	9304      	str	r3, [sp, #16]
 800e12c:	46a2      	mov	sl, r4
 800e12e:	e7d2      	b.n	800e0d6 <_vfiprintf_r+0xc6>
 800e130:	9b03      	ldr	r3, [sp, #12]
 800e132:	1d19      	adds	r1, r3, #4
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	9103      	str	r1, [sp, #12]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	bfbb      	ittet	lt
 800e13c:	425b      	neglt	r3, r3
 800e13e:	f042 0202 	orrlt.w	r2, r2, #2
 800e142:	9307      	strge	r3, [sp, #28]
 800e144:	9307      	strlt	r3, [sp, #28]
 800e146:	bfb8      	it	lt
 800e148:	9204      	strlt	r2, [sp, #16]
 800e14a:	7823      	ldrb	r3, [r4, #0]
 800e14c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e14e:	d10a      	bne.n	800e166 <_vfiprintf_r+0x156>
 800e150:	7863      	ldrb	r3, [r4, #1]
 800e152:	2b2a      	cmp	r3, #42	@ 0x2a
 800e154:	d132      	bne.n	800e1bc <_vfiprintf_r+0x1ac>
 800e156:	9b03      	ldr	r3, [sp, #12]
 800e158:	1d1a      	adds	r2, r3, #4
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	9203      	str	r2, [sp, #12]
 800e15e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e162:	3402      	adds	r4, #2
 800e164:	9305      	str	r3, [sp, #20]
 800e166:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e23c <_vfiprintf_r+0x22c>
 800e16a:	7821      	ldrb	r1, [r4, #0]
 800e16c:	2203      	movs	r2, #3
 800e16e:	4650      	mov	r0, sl
 800e170:	f7f2 f84e 	bl	8000210 <memchr>
 800e174:	b138      	cbz	r0, 800e186 <_vfiprintf_r+0x176>
 800e176:	9b04      	ldr	r3, [sp, #16]
 800e178:	eba0 000a 	sub.w	r0, r0, sl
 800e17c:	2240      	movs	r2, #64	@ 0x40
 800e17e:	4082      	lsls	r2, r0
 800e180:	4313      	orrs	r3, r2
 800e182:	3401      	adds	r4, #1
 800e184:	9304      	str	r3, [sp, #16]
 800e186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e18a:	4829      	ldr	r0, [pc, #164]	@ (800e230 <_vfiprintf_r+0x220>)
 800e18c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e190:	2206      	movs	r2, #6
 800e192:	f7f2 f83d 	bl	8000210 <memchr>
 800e196:	2800      	cmp	r0, #0
 800e198:	d03f      	beq.n	800e21a <_vfiprintf_r+0x20a>
 800e19a:	4b26      	ldr	r3, [pc, #152]	@ (800e234 <_vfiprintf_r+0x224>)
 800e19c:	bb1b      	cbnz	r3, 800e1e6 <_vfiprintf_r+0x1d6>
 800e19e:	9b03      	ldr	r3, [sp, #12]
 800e1a0:	3307      	adds	r3, #7
 800e1a2:	f023 0307 	bic.w	r3, r3, #7
 800e1a6:	3308      	adds	r3, #8
 800e1a8:	9303      	str	r3, [sp, #12]
 800e1aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1ac:	443b      	add	r3, r7
 800e1ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1b0:	e76a      	b.n	800e088 <_vfiprintf_r+0x78>
 800e1b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1b6:	460c      	mov	r4, r1
 800e1b8:	2001      	movs	r0, #1
 800e1ba:	e7a8      	b.n	800e10e <_vfiprintf_r+0xfe>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	3401      	adds	r4, #1
 800e1c0:	9305      	str	r3, [sp, #20]
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	f04f 0c0a 	mov.w	ip, #10
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1ce:	3a30      	subs	r2, #48	@ 0x30
 800e1d0:	2a09      	cmp	r2, #9
 800e1d2:	d903      	bls.n	800e1dc <_vfiprintf_r+0x1cc>
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d0c6      	beq.n	800e166 <_vfiprintf_r+0x156>
 800e1d8:	9105      	str	r1, [sp, #20]
 800e1da:	e7c4      	b.n	800e166 <_vfiprintf_r+0x156>
 800e1dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1e0:	4604      	mov	r4, r0
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e7f0      	b.n	800e1c8 <_vfiprintf_r+0x1b8>
 800e1e6:	ab03      	add	r3, sp, #12
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	462a      	mov	r2, r5
 800e1ec:	4b12      	ldr	r3, [pc, #72]	@ (800e238 <_vfiprintf_r+0x228>)
 800e1ee:	a904      	add	r1, sp, #16
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	f7fc fafb 	bl	800a7ec <_printf_float>
 800e1f6:	4607      	mov	r7, r0
 800e1f8:	1c78      	adds	r0, r7, #1
 800e1fa:	d1d6      	bne.n	800e1aa <_vfiprintf_r+0x19a>
 800e1fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1fe:	07d9      	lsls	r1, r3, #31
 800e200:	d405      	bmi.n	800e20e <_vfiprintf_r+0x1fe>
 800e202:	89ab      	ldrh	r3, [r5, #12]
 800e204:	059a      	lsls	r2, r3, #22
 800e206:	d402      	bmi.n	800e20e <_vfiprintf_r+0x1fe>
 800e208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e20a:	f7fd fba7 	bl	800b95c <__retarget_lock_release_recursive>
 800e20e:	89ab      	ldrh	r3, [r5, #12]
 800e210:	065b      	lsls	r3, r3, #25
 800e212:	f53f af1f 	bmi.w	800e054 <_vfiprintf_r+0x44>
 800e216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e218:	e71e      	b.n	800e058 <_vfiprintf_r+0x48>
 800e21a:	ab03      	add	r3, sp, #12
 800e21c:	9300      	str	r3, [sp, #0]
 800e21e:	462a      	mov	r2, r5
 800e220:	4b05      	ldr	r3, [pc, #20]	@ (800e238 <_vfiprintf_r+0x228>)
 800e222:	a904      	add	r1, sp, #16
 800e224:	4630      	mov	r0, r6
 800e226:	f7fc fd79 	bl	800ad1c <_printf_i>
 800e22a:	e7e4      	b.n	800e1f6 <_vfiprintf_r+0x1e6>
 800e22c:	0800ff11 	.word	0x0800ff11
 800e230:	0800ff1b 	.word	0x0800ff1b
 800e234:	0800a7ed 	.word	0x0800a7ed
 800e238:	0800dfeb 	.word	0x0800dfeb
 800e23c:	0800ff17 	.word	0x0800ff17

0800e240 <__sflush_r>:
 800e240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e248:	0716      	lsls	r6, r2, #28
 800e24a:	4605      	mov	r5, r0
 800e24c:	460c      	mov	r4, r1
 800e24e:	d454      	bmi.n	800e2fa <__sflush_r+0xba>
 800e250:	684b      	ldr	r3, [r1, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	dc02      	bgt.n	800e25c <__sflush_r+0x1c>
 800e256:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e258:	2b00      	cmp	r3, #0
 800e25a:	dd48      	ble.n	800e2ee <__sflush_r+0xae>
 800e25c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e25e:	2e00      	cmp	r6, #0
 800e260:	d045      	beq.n	800e2ee <__sflush_r+0xae>
 800e262:	2300      	movs	r3, #0
 800e264:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e268:	682f      	ldr	r7, [r5, #0]
 800e26a:	6a21      	ldr	r1, [r4, #32]
 800e26c:	602b      	str	r3, [r5, #0]
 800e26e:	d030      	beq.n	800e2d2 <__sflush_r+0x92>
 800e270:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e272:	89a3      	ldrh	r3, [r4, #12]
 800e274:	0759      	lsls	r1, r3, #29
 800e276:	d505      	bpl.n	800e284 <__sflush_r+0x44>
 800e278:	6863      	ldr	r3, [r4, #4]
 800e27a:	1ad2      	subs	r2, r2, r3
 800e27c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e27e:	b10b      	cbz	r3, 800e284 <__sflush_r+0x44>
 800e280:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e282:	1ad2      	subs	r2, r2, r3
 800e284:	2300      	movs	r3, #0
 800e286:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e288:	6a21      	ldr	r1, [r4, #32]
 800e28a:	4628      	mov	r0, r5
 800e28c:	47b0      	blx	r6
 800e28e:	1c43      	adds	r3, r0, #1
 800e290:	89a3      	ldrh	r3, [r4, #12]
 800e292:	d106      	bne.n	800e2a2 <__sflush_r+0x62>
 800e294:	6829      	ldr	r1, [r5, #0]
 800e296:	291d      	cmp	r1, #29
 800e298:	d82b      	bhi.n	800e2f2 <__sflush_r+0xb2>
 800e29a:	4a2a      	ldr	r2, [pc, #168]	@ (800e344 <__sflush_r+0x104>)
 800e29c:	410a      	asrs	r2, r1
 800e29e:	07d6      	lsls	r6, r2, #31
 800e2a0:	d427      	bmi.n	800e2f2 <__sflush_r+0xb2>
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	6062      	str	r2, [r4, #4]
 800e2a6:	04d9      	lsls	r1, r3, #19
 800e2a8:	6922      	ldr	r2, [r4, #16]
 800e2aa:	6022      	str	r2, [r4, #0]
 800e2ac:	d504      	bpl.n	800e2b8 <__sflush_r+0x78>
 800e2ae:	1c42      	adds	r2, r0, #1
 800e2b0:	d101      	bne.n	800e2b6 <__sflush_r+0x76>
 800e2b2:	682b      	ldr	r3, [r5, #0]
 800e2b4:	b903      	cbnz	r3, 800e2b8 <__sflush_r+0x78>
 800e2b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e2b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e2ba:	602f      	str	r7, [r5, #0]
 800e2bc:	b1b9      	cbz	r1, 800e2ee <__sflush_r+0xae>
 800e2be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e2c2:	4299      	cmp	r1, r3
 800e2c4:	d002      	beq.n	800e2cc <__sflush_r+0x8c>
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	f7fe f99e 	bl	800c608 <_free_r>
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800e2d0:	e00d      	b.n	800e2ee <__sflush_r+0xae>
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	4628      	mov	r0, r5
 800e2d6:	47b0      	blx	r6
 800e2d8:	4602      	mov	r2, r0
 800e2da:	1c50      	adds	r0, r2, #1
 800e2dc:	d1c9      	bne.n	800e272 <__sflush_r+0x32>
 800e2de:	682b      	ldr	r3, [r5, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d0c6      	beq.n	800e272 <__sflush_r+0x32>
 800e2e4:	2b1d      	cmp	r3, #29
 800e2e6:	d001      	beq.n	800e2ec <__sflush_r+0xac>
 800e2e8:	2b16      	cmp	r3, #22
 800e2ea:	d11e      	bne.n	800e32a <__sflush_r+0xea>
 800e2ec:	602f      	str	r7, [r5, #0]
 800e2ee:	2000      	movs	r0, #0
 800e2f0:	e022      	b.n	800e338 <__sflush_r+0xf8>
 800e2f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2f6:	b21b      	sxth	r3, r3
 800e2f8:	e01b      	b.n	800e332 <__sflush_r+0xf2>
 800e2fa:	690f      	ldr	r7, [r1, #16]
 800e2fc:	2f00      	cmp	r7, #0
 800e2fe:	d0f6      	beq.n	800e2ee <__sflush_r+0xae>
 800e300:	0793      	lsls	r3, r2, #30
 800e302:	680e      	ldr	r6, [r1, #0]
 800e304:	bf08      	it	eq
 800e306:	694b      	ldreq	r3, [r1, #20]
 800e308:	600f      	str	r7, [r1, #0]
 800e30a:	bf18      	it	ne
 800e30c:	2300      	movne	r3, #0
 800e30e:	eba6 0807 	sub.w	r8, r6, r7
 800e312:	608b      	str	r3, [r1, #8]
 800e314:	f1b8 0f00 	cmp.w	r8, #0
 800e318:	dde9      	ble.n	800e2ee <__sflush_r+0xae>
 800e31a:	6a21      	ldr	r1, [r4, #32]
 800e31c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e31e:	4643      	mov	r3, r8
 800e320:	463a      	mov	r2, r7
 800e322:	4628      	mov	r0, r5
 800e324:	47b0      	blx	r6
 800e326:	2800      	cmp	r0, #0
 800e328:	dc08      	bgt.n	800e33c <__sflush_r+0xfc>
 800e32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e32e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e332:	81a3      	strh	r3, [r4, #12]
 800e334:	f04f 30ff 	mov.w	r0, #4294967295
 800e338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e33c:	4407      	add	r7, r0
 800e33e:	eba8 0800 	sub.w	r8, r8, r0
 800e342:	e7e7      	b.n	800e314 <__sflush_r+0xd4>
 800e344:	dfbffffe 	.word	0xdfbffffe

0800e348 <_fflush_r>:
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	690b      	ldr	r3, [r1, #16]
 800e34c:	4605      	mov	r5, r0
 800e34e:	460c      	mov	r4, r1
 800e350:	b913      	cbnz	r3, 800e358 <_fflush_r+0x10>
 800e352:	2500      	movs	r5, #0
 800e354:	4628      	mov	r0, r5
 800e356:	bd38      	pop	{r3, r4, r5, pc}
 800e358:	b118      	cbz	r0, 800e362 <_fflush_r+0x1a>
 800e35a:	6a03      	ldr	r3, [r0, #32]
 800e35c:	b90b      	cbnz	r3, 800e362 <_fflush_r+0x1a>
 800e35e:	f7fd f89d 	bl	800b49c <__sinit>
 800e362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d0f3      	beq.n	800e352 <_fflush_r+0xa>
 800e36a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e36c:	07d0      	lsls	r0, r2, #31
 800e36e:	d404      	bmi.n	800e37a <_fflush_r+0x32>
 800e370:	0599      	lsls	r1, r3, #22
 800e372:	d402      	bmi.n	800e37a <_fflush_r+0x32>
 800e374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e376:	f7fd faf0 	bl	800b95a <__retarget_lock_acquire_recursive>
 800e37a:	4628      	mov	r0, r5
 800e37c:	4621      	mov	r1, r4
 800e37e:	f7ff ff5f 	bl	800e240 <__sflush_r>
 800e382:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e384:	07da      	lsls	r2, r3, #31
 800e386:	4605      	mov	r5, r0
 800e388:	d4e4      	bmi.n	800e354 <_fflush_r+0xc>
 800e38a:	89a3      	ldrh	r3, [r4, #12]
 800e38c:	059b      	lsls	r3, r3, #22
 800e38e:	d4e1      	bmi.n	800e354 <_fflush_r+0xc>
 800e390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e392:	f7fd fae3 	bl	800b95c <__retarget_lock_release_recursive>
 800e396:	e7dd      	b.n	800e354 <_fflush_r+0xc>

0800e398 <__swhatbuf_r>:
 800e398:	b570      	push	{r4, r5, r6, lr}
 800e39a:	460c      	mov	r4, r1
 800e39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3a0:	2900      	cmp	r1, #0
 800e3a2:	b096      	sub	sp, #88	@ 0x58
 800e3a4:	4615      	mov	r5, r2
 800e3a6:	461e      	mov	r6, r3
 800e3a8:	da0d      	bge.n	800e3c6 <__swhatbuf_r+0x2e>
 800e3aa:	89a3      	ldrh	r3, [r4, #12]
 800e3ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e3b0:	f04f 0100 	mov.w	r1, #0
 800e3b4:	bf14      	ite	ne
 800e3b6:	2340      	movne	r3, #64	@ 0x40
 800e3b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e3bc:	2000      	movs	r0, #0
 800e3be:	6031      	str	r1, [r6, #0]
 800e3c0:	602b      	str	r3, [r5, #0]
 800e3c2:	b016      	add	sp, #88	@ 0x58
 800e3c4:	bd70      	pop	{r4, r5, r6, pc}
 800e3c6:	466a      	mov	r2, sp
 800e3c8:	f000 f874 	bl	800e4b4 <_fstat_r>
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	dbec      	blt.n	800e3aa <__swhatbuf_r+0x12>
 800e3d0:	9901      	ldr	r1, [sp, #4]
 800e3d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e3d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e3da:	4259      	negs	r1, r3
 800e3dc:	4159      	adcs	r1, r3
 800e3de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3e2:	e7eb      	b.n	800e3bc <__swhatbuf_r+0x24>

0800e3e4 <__smakebuf_r>:
 800e3e4:	898b      	ldrh	r3, [r1, #12]
 800e3e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3e8:	079d      	lsls	r5, r3, #30
 800e3ea:	4606      	mov	r6, r0
 800e3ec:	460c      	mov	r4, r1
 800e3ee:	d507      	bpl.n	800e400 <__smakebuf_r+0x1c>
 800e3f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e3f4:	6023      	str	r3, [r4, #0]
 800e3f6:	6123      	str	r3, [r4, #16]
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	6163      	str	r3, [r4, #20]
 800e3fc:	b003      	add	sp, #12
 800e3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e400:	ab01      	add	r3, sp, #4
 800e402:	466a      	mov	r2, sp
 800e404:	f7ff ffc8 	bl	800e398 <__swhatbuf_r>
 800e408:	9f00      	ldr	r7, [sp, #0]
 800e40a:	4605      	mov	r5, r0
 800e40c:	4639      	mov	r1, r7
 800e40e:	4630      	mov	r0, r6
 800e410:	f7fc f8c0 	bl	800a594 <_malloc_r>
 800e414:	b948      	cbnz	r0, 800e42a <__smakebuf_r+0x46>
 800e416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e41a:	059a      	lsls	r2, r3, #22
 800e41c:	d4ee      	bmi.n	800e3fc <__smakebuf_r+0x18>
 800e41e:	f023 0303 	bic.w	r3, r3, #3
 800e422:	f043 0302 	orr.w	r3, r3, #2
 800e426:	81a3      	strh	r3, [r4, #12]
 800e428:	e7e2      	b.n	800e3f0 <__smakebuf_r+0xc>
 800e42a:	89a3      	ldrh	r3, [r4, #12]
 800e42c:	6020      	str	r0, [r4, #0]
 800e42e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e432:	81a3      	strh	r3, [r4, #12]
 800e434:	9b01      	ldr	r3, [sp, #4]
 800e436:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e43a:	b15b      	cbz	r3, 800e454 <__smakebuf_r+0x70>
 800e43c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e440:	4630      	mov	r0, r6
 800e442:	f000 f849 	bl	800e4d8 <_isatty_r>
 800e446:	b128      	cbz	r0, 800e454 <__smakebuf_r+0x70>
 800e448:	89a3      	ldrh	r3, [r4, #12]
 800e44a:	f023 0303 	bic.w	r3, r3, #3
 800e44e:	f043 0301 	orr.w	r3, r3, #1
 800e452:	81a3      	strh	r3, [r4, #12]
 800e454:	89a3      	ldrh	r3, [r4, #12]
 800e456:	431d      	orrs	r5, r3
 800e458:	81a5      	strh	r5, [r4, #12]
 800e45a:	e7cf      	b.n	800e3fc <__smakebuf_r+0x18>

0800e45c <memmove>:
 800e45c:	4288      	cmp	r0, r1
 800e45e:	b510      	push	{r4, lr}
 800e460:	eb01 0402 	add.w	r4, r1, r2
 800e464:	d902      	bls.n	800e46c <memmove+0x10>
 800e466:	4284      	cmp	r4, r0
 800e468:	4623      	mov	r3, r4
 800e46a:	d807      	bhi.n	800e47c <memmove+0x20>
 800e46c:	1e43      	subs	r3, r0, #1
 800e46e:	42a1      	cmp	r1, r4
 800e470:	d008      	beq.n	800e484 <memmove+0x28>
 800e472:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e47a:	e7f8      	b.n	800e46e <memmove+0x12>
 800e47c:	4402      	add	r2, r0
 800e47e:	4601      	mov	r1, r0
 800e480:	428a      	cmp	r2, r1
 800e482:	d100      	bne.n	800e486 <memmove+0x2a>
 800e484:	bd10      	pop	{r4, pc}
 800e486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e48a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e48e:	e7f7      	b.n	800e480 <memmove+0x24>

0800e490 <strncmp>:
 800e490:	b510      	push	{r4, lr}
 800e492:	b16a      	cbz	r2, 800e4b0 <strncmp+0x20>
 800e494:	3901      	subs	r1, #1
 800e496:	1884      	adds	r4, r0, r2
 800e498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e49c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d103      	bne.n	800e4ac <strncmp+0x1c>
 800e4a4:	42a0      	cmp	r0, r4
 800e4a6:	d001      	beq.n	800e4ac <strncmp+0x1c>
 800e4a8:	2a00      	cmp	r2, #0
 800e4aa:	d1f5      	bne.n	800e498 <strncmp+0x8>
 800e4ac:	1ad0      	subs	r0, r2, r3
 800e4ae:	bd10      	pop	{r4, pc}
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	e7fc      	b.n	800e4ae <strncmp+0x1e>

0800e4b4 <_fstat_r>:
 800e4b4:	b538      	push	{r3, r4, r5, lr}
 800e4b6:	4d07      	ldr	r5, [pc, #28]	@ (800e4d4 <_fstat_r+0x20>)
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	4608      	mov	r0, r1
 800e4be:	4611      	mov	r1, r2
 800e4c0:	602b      	str	r3, [r5, #0]
 800e4c2:	f7f4 ffc7 	bl	8003454 <_fstat>
 800e4c6:	1c43      	adds	r3, r0, #1
 800e4c8:	d102      	bne.n	800e4d0 <_fstat_r+0x1c>
 800e4ca:	682b      	ldr	r3, [r5, #0]
 800e4cc:	b103      	cbz	r3, 800e4d0 <_fstat_r+0x1c>
 800e4ce:	6023      	str	r3, [r4, #0]
 800e4d0:	bd38      	pop	{r3, r4, r5, pc}
 800e4d2:	bf00      	nop
 800e4d4:	20002c54 	.word	0x20002c54

0800e4d8 <_isatty_r>:
 800e4d8:	b538      	push	{r3, r4, r5, lr}
 800e4da:	4d06      	ldr	r5, [pc, #24]	@ (800e4f4 <_isatty_r+0x1c>)
 800e4dc:	2300      	movs	r3, #0
 800e4de:	4604      	mov	r4, r0
 800e4e0:	4608      	mov	r0, r1
 800e4e2:	602b      	str	r3, [r5, #0]
 800e4e4:	f7f4 ffc6 	bl	8003474 <_isatty>
 800e4e8:	1c43      	adds	r3, r0, #1
 800e4ea:	d102      	bne.n	800e4f2 <_isatty_r+0x1a>
 800e4ec:	682b      	ldr	r3, [r5, #0]
 800e4ee:	b103      	cbz	r3, 800e4f2 <_isatty_r+0x1a>
 800e4f0:	6023      	str	r3, [r4, #0]
 800e4f2:	bd38      	pop	{r3, r4, r5, pc}
 800e4f4:	20002c54 	.word	0x20002c54

0800e4f8 <memcpy>:
 800e4f8:	440a      	add	r2, r1
 800e4fa:	4291      	cmp	r1, r2
 800e4fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e500:	d100      	bne.n	800e504 <memcpy+0xc>
 800e502:	4770      	bx	lr
 800e504:	b510      	push	{r4, lr}
 800e506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e50a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e50e:	4291      	cmp	r1, r2
 800e510:	d1f9      	bne.n	800e506 <memcpy+0xe>
 800e512:	bd10      	pop	{r4, pc}
 800e514:	0000      	movs	r0, r0
	...

0800e518 <nan>:
 800e518:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e520 <nan+0x8>
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop
 800e520:	00000000 	.word	0x00000000
 800e524:	7ff80000 	.word	0x7ff80000

0800e528 <__assert_func>:
 800e528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e52a:	4614      	mov	r4, r2
 800e52c:	461a      	mov	r2, r3
 800e52e:	4b09      	ldr	r3, [pc, #36]	@ (800e554 <__assert_func+0x2c>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	4605      	mov	r5, r0
 800e534:	68d8      	ldr	r0, [r3, #12]
 800e536:	b954      	cbnz	r4, 800e54e <__assert_func+0x26>
 800e538:	4b07      	ldr	r3, [pc, #28]	@ (800e558 <__assert_func+0x30>)
 800e53a:	461c      	mov	r4, r3
 800e53c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e540:	9100      	str	r1, [sp, #0]
 800e542:	462b      	mov	r3, r5
 800e544:	4905      	ldr	r1, [pc, #20]	@ (800e55c <__assert_func+0x34>)
 800e546:	f000 fba7 	bl	800ec98 <fiprintf>
 800e54a:	f000 fbb7 	bl	800ecbc <abort>
 800e54e:	4b04      	ldr	r3, [pc, #16]	@ (800e560 <__assert_func+0x38>)
 800e550:	e7f4      	b.n	800e53c <__assert_func+0x14>
 800e552:	bf00      	nop
 800e554:	20000038 	.word	0x20000038
 800e558:	0800ff65 	.word	0x0800ff65
 800e55c:	0800ff37 	.word	0x0800ff37
 800e560:	0800ff2a 	.word	0x0800ff2a

0800e564 <_calloc_r>:
 800e564:	b570      	push	{r4, r5, r6, lr}
 800e566:	fba1 5402 	umull	r5, r4, r1, r2
 800e56a:	b93c      	cbnz	r4, 800e57c <_calloc_r+0x18>
 800e56c:	4629      	mov	r1, r5
 800e56e:	f7fc f811 	bl	800a594 <_malloc_r>
 800e572:	4606      	mov	r6, r0
 800e574:	b928      	cbnz	r0, 800e582 <_calloc_r+0x1e>
 800e576:	2600      	movs	r6, #0
 800e578:	4630      	mov	r0, r6
 800e57a:	bd70      	pop	{r4, r5, r6, pc}
 800e57c:	220c      	movs	r2, #12
 800e57e:	6002      	str	r2, [r0, #0]
 800e580:	e7f9      	b.n	800e576 <_calloc_r+0x12>
 800e582:	462a      	mov	r2, r5
 800e584:	4621      	mov	r1, r4
 800e586:	f7fd f95b 	bl	800b840 <memset>
 800e58a:	e7f5      	b.n	800e578 <_calloc_r+0x14>

0800e58c <rshift>:
 800e58c:	6903      	ldr	r3, [r0, #16]
 800e58e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e592:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e596:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e59a:	f100 0414 	add.w	r4, r0, #20
 800e59e:	dd45      	ble.n	800e62c <rshift+0xa0>
 800e5a0:	f011 011f 	ands.w	r1, r1, #31
 800e5a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e5a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e5ac:	d10c      	bne.n	800e5c8 <rshift+0x3c>
 800e5ae:	f100 0710 	add.w	r7, r0, #16
 800e5b2:	4629      	mov	r1, r5
 800e5b4:	42b1      	cmp	r1, r6
 800e5b6:	d334      	bcc.n	800e622 <rshift+0x96>
 800e5b8:	1a9b      	subs	r3, r3, r2
 800e5ba:	009b      	lsls	r3, r3, #2
 800e5bc:	1eea      	subs	r2, r5, #3
 800e5be:	4296      	cmp	r6, r2
 800e5c0:	bf38      	it	cc
 800e5c2:	2300      	movcc	r3, #0
 800e5c4:	4423      	add	r3, r4
 800e5c6:	e015      	b.n	800e5f4 <rshift+0x68>
 800e5c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e5cc:	f1c1 0820 	rsb	r8, r1, #32
 800e5d0:	40cf      	lsrs	r7, r1
 800e5d2:	f105 0e04 	add.w	lr, r5, #4
 800e5d6:	46a1      	mov	r9, r4
 800e5d8:	4576      	cmp	r6, lr
 800e5da:	46f4      	mov	ip, lr
 800e5dc:	d815      	bhi.n	800e60a <rshift+0x7e>
 800e5de:	1a9a      	subs	r2, r3, r2
 800e5e0:	0092      	lsls	r2, r2, #2
 800e5e2:	3a04      	subs	r2, #4
 800e5e4:	3501      	adds	r5, #1
 800e5e6:	42ae      	cmp	r6, r5
 800e5e8:	bf38      	it	cc
 800e5ea:	2200      	movcc	r2, #0
 800e5ec:	18a3      	adds	r3, r4, r2
 800e5ee:	50a7      	str	r7, [r4, r2]
 800e5f0:	b107      	cbz	r7, 800e5f4 <rshift+0x68>
 800e5f2:	3304      	adds	r3, #4
 800e5f4:	1b1a      	subs	r2, r3, r4
 800e5f6:	42a3      	cmp	r3, r4
 800e5f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e5fc:	bf08      	it	eq
 800e5fe:	2300      	moveq	r3, #0
 800e600:	6102      	str	r2, [r0, #16]
 800e602:	bf08      	it	eq
 800e604:	6143      	streq	r3, [r0, #20]
 800e606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e60a:	f8dc c000 	ldr.w	ip, [ip]
 800e60e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e612:	ea4c 0707 	orr.w	r7, ip, r7
 800e616:	f849 7b04 	str.w	r7, [r9], #4
 800e61a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e61e:	40cf      	lsrs	r7, r1
 800e620:	e7da      	b.n	800e5d8 <rshift+0x4c>
 800e622:	f851 cb04 	ldr.w	ip, [r1], #4
 800e626:	f847 cf04 	str.w	ip, [r7, #4]!
 800e62a:	e7c3      	b.n	800e5b4 <rshift+0x28>
 800e62c:	4623      	mov	r3, r4
 800e62e:	e7e1      	b.n	800e5f4 <rshift+0x68>

0800e630 <__hexdig_fun>:
 800e630:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e634:	2b09      	cmp	r3, #9
 800e636:	d802      	bhi.n	800e63e <__hexdig_fun+0xe>
 800e638:	3820      	subs	r0, #32
 800e63a:	b2c0      	uxtb	r0, r0
 800e63c:	4770      	bx	lr
 800e63e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e642:	2b05      	cmp	r3, #5
 800e644:	d801      	bhi.n	800e64a <__hexdig_fun+0x1a>
 800e646:	3847      	subs	r0, #71	@ 0x47
 800e648:	e7f7      	b.n	800e63a <__hexdig_fun+0xa>
 800e64a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e64e:	2b05      	cmp	r3, #5
 800e650:	d801      	bhi.n	800e656 <__hexdig_fun+0x26>
 800e652:	3827      	subs	r0, #39	@ 0x27
 800e654:	e7f1      	b.n	800e63a <__hexdig_fun+0xa>
 800e656:	2000      	movs	r0, #0
 800e658:	4770      	bx	lr
	...

0800e65c <__gethex>:
 800e65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e660:	b085      	sub	sp, #20
 800e662:	468a      	mov	sl, r1
 800e664:	9302      	str	r3, [sp, #8]
 800e666:	680b      	ldr	r3, [r1, #0]
 800e668:	9001      	str	r0, [sp, #4]
 800e66a:	4690      	mov	r8, r2
 800e66c:	1c9c      	adds	r4, r3, #2
 800e66e:	46a1      	mov	r9, r4
 800e670:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e674:	2830      	cmp	r0, #48	@ 0x30
 800e676:	d0fa      	beq.n	800e66e <__gethex+0x12>
 800e678:	eba9 0303 	sub.w	r3, r9, r3
 800e67c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e680:	f7ff ffd6 	bl	800e630 <__hexdig_fun>
 800e684:	4605      	mov	r5, r0
 800e686:	2800      	cmp	r0, #0
 800e688:	d168      	bne.n	800e75c <__gethex+0x100>
 800e68a:	49a0      	ldr	r1, [pc, #640]	@ (800e90c <__gethex+0x2b0>)
 800e68c:	2201      	movs	r2, #1
 800e68e:	4648      	mov	r0, r9
 800e690:	f7ff fefe 	bl	800e490 <strncmp>
 800e694:	4607      	mov	r7, r0
 800e696:	2800      	cmp	r0, #0
 800e698:	d167      	bne.n	800e76a <__gethex+0x10e>
 800e69a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e69e:	4626      	mov	r6, r4
 800e6a0:	f7ff ffc6 	bl	800e630 <__hexdig_fun>
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	d062      	beq.n	800e76e <__gethex+0x112>
 800e6a8:	4623      	mov	r3, r4
 800e6aa:	7818      	ldrb	r0, [r3, #0]
 800e6ac:	2830      	cmp	r0, #48	@ 0x30
 800e6ae:	4699      	mov	r9, r3
 800e6b0:	f103 0301 	add.w	r3, r3, #1
 800e6b4:	d0f9      	beq.n	800e6aa <__gethex+0x4e>
 800e6b6:	f7ff ffbb 	bl	800e630 <__hexdig_fun>
 800e6ba:	fab0 f580 	clz	r5, r0
 800e6be:	096d      	lsrs	r5, r5, #5
 800e6c0:	f04f 0b01 	mov.w	fp, #1
 800e6c4:	464a      	mov	r2, r9
 800e6c6:	4616      	mov	r6, r2
 800e6c8:	3201      	adds	r2, #1
 800e6ca:	7830      	ldrb	r0, [r6, #0]
 800e6cc:	f7ff ffb0 	bl	800e630 <__hexdig_fun>
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	d1f8      	bne.n	800e6c6 <__gethex+0x6a>
 800e6d4:	498d      	ldr	r1, [pc, #564]	@ (800e90c <__gethex+0x2b0>)
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f7ff fed9 	bl	800e490 <strncmp>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	d13f      	bne.n	800e762 <__gethex+0x106>
 800e6e2:	b944      	cbnz	r4, 800e6f6 <__gethex+0x9a>
 800e6e4:	1c74      	adds	r4, r6, #1
 800e6e6:	4622      	mov	r2, r4
 800e6e8:	4616      	mov	r6, r2
 800e6ea:	3201      	adds	r2, #1
 800e6ec:	7830      	ldrb	r0, [r6, #0]
 800e6ee:	f7ff ff9f 	bl	800e630 <__hexdig_fun>
 800e6f2:	2800      	cmp	r0, #0
 800e6f4:	d1f8      	bne.n	800e6e8 <__gethex+0x8c>
 800e6f6:	1ba4      	subs	r4, r4, r6
 800e6f8:	00a7      	lsls	r7, r4, #2
 800e6fa:	7833      	ldrb	r3, [r6, #0]
 800e6fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e700:	2b50      	cmp	r3, #80	@ 0x50
 800e702:	d13e      	bne.n	800e782 <__gethex+0x126>
 800e704:	7873      	ldrb	r3, [r6, #1]
 800e706:	2b2b      	cmp	r3, #43	@ 0x2b
 800e708:	d033      	beq.n	800e772 <__gethex+0x116>
 800e70a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e70c:	d034      	beq.n	800e778 <__gethex+0x11c>
 800e70e:	1c71      	adds	r1, r6, #1
 800e710:	2400      	movs	r4, #0
 800e712:	7808      	ldrb	r0, [r1, #0]
 800e714:	f7ff ff8c 	bl	800e630 <__hexdig_fun>
 800e718:	1e43      	subs	r3, r0, #1
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	2b18      	cmp	r3, #24
 800e71e:	d830      	bhi.n	800e782 <__gethex+0x126>
 800e720:	f1a0 0210 	sub.w	r2, r0, #16
 800e724:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e728:	f7ff ff82 	bl	800e630 <__hexdig_fun>
 800e72c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e730:	fa5f fc8c 	uxtb.w	ip, ip
 800e734:	f1bc 0f18 	cmp.w	ip, #24
 800e738:	f04f 030a 	mov.w	r3, #10
 800e73c:	d91e      	bls.n	800e77c <__gethex+0x120>
 800e73e:	b104      	cbz	r4, 800e742 <__gethex+0xe6>
 800e740:	4252      	negs	r2, r2
 800e742:	4417      	add	r7, r2
 800e744:	f8ca 1000 	str.w	r1, [sl]
 800e748:	b1ed      	cbz	r5, 800e786 <__gethex+0x12a>
 800e74a:	f1bb 0f00 	cmp.w	fp, #0
 800e74e:	bf0c      	ite	eq
 800e750:	2506      	moveq	r5, #6
 800e752:	2500      	movne	r5, #0
 800e754:	4628      	mov	r0, r5
 800e756:	b005      	add	sp, #20
 800e758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e75c:	2500      	movs	r5, #0
 800e75e:	462c      	mov	r4, r5
 800e760:	e7b0      	b.n	800e6c4 <__gethex+0x68>
 800e762:	2c00      	cmp	r4, #0
 800e764:	d1c7      	bne.n	800e6f6 <__gethex+0x9a>
 800e766:	4627      	mov	r7, r4
 800e768:	e7c7      	b.n	800e6fa <__gethex+0x9e>
 800e76a:	464e      	mov	r6, r9
 800e76c:	462f      	mov	r7, r5
 800e76e:	2501      	movs	r5, #1
 800e770:	e7c3      	b.n	800e6fa <__gethex+0x9e>
 800e772:	2400      	movs	r4, #0
 800e774:	1cb1      	adds	r1, r6, #2
 800e776:	e7cc      	b.n	800e712 <__gethex+0xb6>
 800e778:	2401      	movs	r4, #1
 800e77a:	e7fb      	b.n	800e774 <__gethex+0x118>
 800e77c:	fb03 0002 	mla	r0, r3, r2, r0
 800e780:	e7ce      	b.n	800e720 <__gethex+0xc4>
 800e782:	4631      	mov	r1, r6
 800e784:	e7de      	b.n	800e744 <__gethex+0xe8>
 800e786:	eba6 0309 	sub.w	r3, r6, r9
 800e78a:	3b01      	subs	r3, #1
 800e78c:	4629      	mov	r1, r5
 800e78e:	2b07      	cmp	r3, #7
 800e790:	dc0a      	bgt.n	800e7a8 <__gethex+0x14c>
 800e792:	9801      	ldr	r0, [sp, #4]
 800e794:	f7fd ff82 	bl	800c69c <_Balloc>
 800e798:	4604      	mov	r4, r0
 800e79a:	b940      	cbnz	r0, 800e7ae <__gethex+0x152>
 800e79c:	4b5c      	ldr	r3, [pc, #368]	@ (800e910 <__gethex+0x2b4>)
 800e79e:	4602      	mov	r2, r0
 800e7a0:	21e4      	movs	r1, #228	@ 0xe4
 800e7a2:	485c      	ldr	r0, [pc, #368]	@ (800e914 <__gethex+0x2b8>)
 800e7a4:	f7ff fec0 	bl	800e528 <__assert_func>
 800e7a8:	3101      	adds	r1, #1
 800e7aa:	105b      	asrs	r3, r3, #1
 800e7ac:	e7ef      	b.n	800e78e <__gethex+0x132>
 800e7ae:	f100 0a14 	add.w	sl, r0, #20
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	4655      	mov	r5, sl
 800e7b6:	469b      	mov	fp, r3
 800e7b8:	45b1      	cmp	r9, r6
 800e7ba:	d337      	bcc.n	800e82c <__gethex+0x1d0>
 800e7bc:	f845 bb04 	str.w	fp, [r5], #4
 800e7c0:	eba5 050a 	sub.w	r5, r5, sl
 800e7c4:	10ad      	asrs	r5, r5, #2
 800e7c6:	6125      	str	r5, [r4, #16]
 800e7c8:	4658      	mov	r0, fp
 800e7ca:	f7fe f859 	bl	800c880 <__hi0bits>
 800e7ce:	016d      	lsls	r5, r5, #5
 800e7d0:	f8d8 6000 	ldr.w	r6, [r8]
 800e7d4:	1a2d      	subs	r5, r5, r0
 800e7d6:	42b5      	cmp	r5, r6
 800e7d8:	dd54      	ble.n	800e884 <__gethex+0x228>
 800e7da:	1bad      	subs	r5, r5, r6
 800e7dc:	4629      	mov	r1, r5
 800e7de:	4620      	mov	r0, r4
 800e7e0:	f7fe fbed 	bl	800cfbe <__any_on>
 800e7e4:	4681      	mov	r9, r0
 800e7e6:	b178      	cbz	r0, 800e808 <__gethex+0x1ac>
 800e7e8:	1e6b      	subs	r3, r5, #1
 800e7ea:	1159      	asrs	r1, r3, #5
 800e7ec:	f003 021f 	and.w	r2, r3, #31
 800e7f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e7f4:	f04f 0901 	mov.w	r9, #1
 800e7f8:	fa09 f202 	lsl.w	r2, r9, r2
 800e7fc:	420a      	tst	r2, r1
 800e7fe:	d003      	beq.n	800e808 <__gethex+0x1ac>
 800e800:	454b      	cmp	r3, r9
 800e802:	dc36      	bgt.n	800e872 <__gethex+0x216>
 800e804:	f04f 0902 	mov.w	r9, #2
 800e808:	4629      	mov	r1, r5
 800e80a:	4620      	mov	r0, r4
 800e80c:	f7ff febe 	bl	800e58c <rshift>
 800e810:	442f      	add	r7, r5
 800e812:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e816:	42bb      	cmp	r3, r7
 800e818:	da42      	bge.n	800e8a0 <__gethex+0x244>
 800e81a:	9801      	ldr	r0, [sp, #4]
 800e81c:	4621      	mov	r1, r4
 800e81e:	f7fd ff7d 	bl	800c71c <_Bfree>
 800e822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e824:	2300      	movs	r3, #0
 800e826:	6013      	str	r3, [r2, #0]
 800e828:	25a3      	movs	r5, #163	@ 0xa3
 800e82a:	e793      	b.n	800e754 <__gethex+0xf8>
 800e82c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e830:	2a2e      	cmp	r2, #46	@ 0x2e
 800e832:	d012      	beq.n	800e85a <__gethex+0x1fe>
 800e834:	2b20      	cmp	r3, #32
 800e836:	d104      	bne.n	800e842 <__gethex+0x1e6>
 800e838:	f845 bb04 	str.w	fp, [r5], #4
 800e83c:	f04f 0b00 	mov.w	fp, #0
 800e840:	465b      	mov	r3, fp
 800e842:	7830      	ldrb	r0, [r6, #0]
 800e844:	9303      	str	r3, [sp, #12]
 800e846:	f7ff fef3 	bl	800e630 <__hexdig_fun>
 800e84a:	9b03      	ldr	r3, [sp, #12]
 800e84c:	f000 000f 	and.w	r0, r0, #15
 800e850:	4098      	lsls	r0, r3
 800e852:	ea4b 0b00 	orr.w	fp, fp, r0
 800e856:	3304      	adds	r3, #4
 800e858:	e7ae      	b.n	800e7b8 <__gethex+0x15c>
 800e85a:	45b1      	cmp	r9, r6
 800e85c:	d8ea      	bhi.n	800e834 <__gethex+0x1d8>
 800e85e:	492b      	ldr	r1, [pc, #172]	@ (800e90c <__gethex+0x2b0>)
 800e860:	9303      	str	r3, [sp, #12]
 800e862:	2201      	movs	r2, #1
 800e864:	4630      	mov	r0, r6
 800e866:	f7ff fe13 	bl	800e490 <strncmp>
 800e86a:	9b03      	ldr	r3, [sp, #12]
 800e86c:	2800      	cmp	r0, #0
 800e86e:	d1e1      	bne.n	800e834 <__gethex+0x1d8>
 800e870:	e7a2      	b.n	800e7b8 <__gethex+0x15c>
 800e872:	1ea9      	subs	r1, r5, #2
 800e874:	4620      	mov	r0, r4
 800e876:	f7fe fba2 	bl	800cfbe <__any_on>
 800e87a:	2800      	cmp	r0, #0
 800e87c:	d0c2      	beq.n	800e804 <__gethex+0x1a8>
 800e87e:	f04f 0903 	mov.w	r9, #3
 800e882:	e7c1      	b.n	800e808 <__gethex+0x1ac>
 800e884:	da09      	bge.n	800e89a <__gethex+0x23e>
 800e886:	1b75      	subs	r5, r6, r5
 800e888:	4621      	mov	r1, r4
 800e88a:	9801      	ldr	r0, [sp, #4]
 800e88c:	462a      	mov	r2, r5
 800e88e:	f7fe f95d 	bl	800cb4c <__lshift>
 800e892:	1b7f      	subs	r7, r7, r5
 800e894:	4604      	mov	r4, r0
 800e896:	f100 0a14 	add.w	sl, r0, #20
 800e89a:	f04f 0900 	mov.w	r9, #0
 800e89e:	e7b8      	b.n	800e812 <__gethex+0x1b6>
 800e8a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e8a4:	42bd      	cmp	r5, r7
 800e8a6:	dd6f      	ble.n	800e988 <__gethex+0x32c>
 800e8a8:	1bed      	subs	r5, r5, r7
 800e8aa:	42ae      	cmp	r6, r5
 800e8ac:	dc34      	bgt.n	800e918 <__gethex+0x2bc>
 800e8ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8b2:	2b02      	cmp	r3, #2
 800e8b4:	d022      	beq.n	800e8fc <__gethex+0x2a0>
 800e8b6:	2b03      	cmp	r3, #3
 800e8b8:	d024      	beq.n	800e904 <__gethex+0x2a8>
 800e8ba:	2b01      	cmp	r3, #1
 800e8bc:	d115      	bne.n	800e8ea <__gethex+0x28e>
 800e8be:	42ae      	cmp	r6, r5
 800e8c0:	d113      	bne.n	800e8ea <__gethex+0x28e>
 800e8c2:	2e01      	cmp	r6, #1
 800e8c4:	d10b      	bne.n	800e8de <__gethex+0x282>
 800e8c6:	9a02      	ldr	r2, [sp, #8]
 800e8c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e8cc:	6013      	str	r3, [r2, #0]
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	6123      	str	r3, [r4, #16]
 800e8d2:	f8ca 3000 	str.w	r3, [sl]
 800e8d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8d8:	2562      	movs	r5, #98	@ 0x62
 800e8da:	601c      	str	r4, [r3, #0]
 800e8dc:	e73a      	b.n	800e754 <__gethex+0xf8>
 800e8de:	1e71      	subs	r1, r6, #1
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	f7fe fb6c 	bl	800cfbe <__any_on>
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	d1ed      	bne.n	800e8c6 <__gethex+0x26a>
 800e8ea:	9801      	ldr	r0, [sp, #4]
 800e8ec:	4621      	mov	r1, r4
 800e8ee:	f7fd ff15 	bl	800c71c <_Bfree>
 800e8f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	6013      	str	r3, [r2, #0]
 800e8f8:	2550      	movs	r5, #80	@ 0x50
 800e8fa:	e72b      	b.n	800e754 <__gethex+0xf8>
 800e8fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d1f3      	bne.n	800e8ea <__gethex+0x28e>
 800e902:	e7e0      	b.n	800e8c6 <__gethex+0x26a>
 800e904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1dd      	bne.n	800e8c6 <__gethex+0x26a>
 800e90a:	e7ee      	b.n	800e8ea <__gethex+0x28e>
 800e90c:	0800fdb8 	.word	0x0800fdb8
 800e910:	0800fc51 	.word	0x0800fc51
 800e914:	0800ff66 	.word	0x0800ff66
 800e918:	1e6f      	subs	r7, r5, #1
 800e91a:	f1b9 0f00 	cmp.w	r9, #0
 800e91e:	d130      	bne.n	800e982 <__gethex+0x326>
 800e920:	b127      	cbz	r7, 800e92c <__gethex+0x2d0>
 800e922:	4639      	mov	r1, r7
 800e924:	4620      	mov	r0, r4
 800e926:	f7fe fb4a 	bl	800cfbe <__any_on>
 800e92a:	4681      	mov	r9, r0
 800e92c:	117a      	asrs	r2, r7, #5
 800e92e:	2301      	movs	r3, #1
 800e930:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e934:	f007 071f 	and.w	r7, r7, #31
 800e938:	40bb      	lsls	r3, r7
 800e93a:	4213      	tst	r3, r2
 800e93c:	4629      	mov	r1, r5
 800e93e:	4620      	mov	r0, r4
 800e940:	bf18      	it	ne
 800e942:	f049 0902 	orrne.w	r9, r9, #2
 800e946:	f7ff fe21 	bl	800e58c <rshift>
 800e94a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e94e:	1b76      	subs	r6, r6, r5
 800e950:	2502      	movs	r5, #2
 800e952:	f1b9 0f00 	cmp.w	r9, #0
 800e956:	d047      	beq.n	800e9e8 <__gethex+0x38c>
 800e958:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e95c:	2b02      	cmp	r3, #2
 800e95e:	d015      	beq.n	800e98c <__gethex+0x330>
 800e960:	2b03      	cmp	r3, #3
 800e962:	d017      	beq.n	800e994 <__gethex+0x338>
 800e964:	2b01      	cmp	r3, #1
 800e966:	d109      	bne.n	800e97c <__gethex+0x320>
 800e968:	f019 0f02 	tst.w	r9, #2
 800e96c:	d006      	beq.n	800e97c <__gethex+0x320>
 800e96e:	f8da 3000 	ldr.w	r3, [sl]
 800e972:	ea49 0903 	orr.w	r9, r9, r3
 800e976:	f019 0f01 	tst.w	r9, #1
 800e97a:	d10e      	bne.n	800e99a <__gethex+0x33e>
 800e97c:	f045 0510 	orr.w	r5, r5, #16
 800e980:	e032      	b.n	800e9e8 <__gethex+0x38c>
 800e982:	f04f 0901 	mov.w	r9, #1
 800e986:	e7d1      	b.n	800e92c <__gethex+0x2d0>
 800e988:	2501      	movs	r5, #1
 800e98a:	e7e2      	b.n	800e952 <__gethex+0x2f6>
 800e98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e98e:	f1c3 0301 	rsb	r3, r3, #1
 800e992:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e996:	2b00      	cmp	r3, #0
 800e998:	d0f0      	beq.n	800e97c <__gethex+0x320>
 800e99a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e99e:	f104 0314 	add.w	r3, r4, #20
 800e9a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e9a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e9aa:	f04f 0c00 	mov.w	ip, #0
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e9b8:	d01b      	beq.n	800e9f2 <__gethex+0x396>
 800e9ba:	3201      	adds	r2, #1
 800e9bc:	6002      	str	r2, [r0, #0]
 800e9be:	2d02      	cmp	r5, #2
 800e9c0:	f104 0314 	add.w	r3, r4, #20
 800e9c4:	d13c      	bne.n	800ea40 <__gethex+0x3e4>
 800e9c6:	f8d8 2000 	ldr.w	r2, [r8]
 800e9ca:	3a01      	subs	r2, #1
 800e9cc:	42b2      	cmp	r2, r6
 800e9ce:	d109      	bne.n	800e9e4 <__gethex+0x388>
 800e9d0:	1171      	asrs	r1, r6, #5
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9d8:	f006 061f 	and.w	r6, r6, #31
 800e9dc:	fa02 f606 	lsl.w	r6, r2, r6
 800e9e0:	421e      	tst	r6, r3
 800e9e2:	d13a      	bne.n	800ea5a <__gethex+0x3fe>
 800e9e4:	f045 0520 	orr.w	r5, r5, #32
 800e9e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9ea:	601c      	str	r4, [r3, #0]
 800e9ec:	9b02      	ldr	r3, [sp, #8]
 800e9ee:	601f      	str	r7, [r3, #0]
 800e9f0:	e6b0      	b.n	800e754 <__gethex+0xf8>
 800e9f2:	4299      	cmp	r1, r3
 800e9f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e9f8:	d8d9      	bhi.n	800e9ae <__gethex+0x352>
 800e9fa:	68a3      	ldr	r3, [r4, #8]
 800e9fc:	459b      	cmp	fp, r3
 800e9fe:	db17      	blt.n	800ea30 <__gethex+0x3d4>
 800ea00:	6861      	ldr	r1, [r4, #4]
 800ea02:	9801      	ldr	r0, [sp, #4]
 800ea04:	3101      	adds	r1, #1
 800ea06:	f7fd fe49 	bl	800c69c <_Balloc>
 800ea0a:	4681      	mov	r9, r0
 800ea0c:	b918      	cbnz	r0, 800ea16 <__gethex+0x3ba>
 800ea0e:	4b1a      	ldr	r3, [pc, #104]	@ (800ea78 <__gethex+0x41c>)
 800ea10:	4602      	mov	r2, r0
 800ea12:	2184      	movs	r1, #132	@ 0x84
 800ea14:	e6c5      	b.n	800e7a2 <__gethex+0x146>
 800ea16:	6922      	ldr	r2, [r4, #16]
 800ea18:	3202      	adds	r2, #2
 800ea1a:	f104 010c 	add.w	r1, r4, #12
 800ea1e:	0092      	lsls	r2, r2, #2
 800ea20:	300c      	adds	r0, #12
 800ea22:	f7ff fd69 	bl	800e4f8 <memcpy>
 800ea26:	4621      	mov	r1, r4
 800ea28:	9801      	ldr	r0, [sp, #4]
 800ea2a:	f7fd fe77 	bl	800c71c <_Bfree>
 800ea2e:	464c      	mov	r4, r9
 800ea30:	6923      	ldr	r3, [r4, #16]
 800ea32:	1c5a      	adds	r2, r3, #1
 800ea34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea38:	6122      	str	r2, [r4, #16]
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	615a      	str	r2, [r3, #20]
 800ea3e:	e7be      	b.n	800e9be <__gethex+0x362>
 800ea40:	6922      	ldr	r2, [r4, #16]
 800ea42:	455a      	cmp	r2, fp
 800ea44:	dd0b      	ble.n	800ea5e <__gethex+0x402>
 800ea46:	2101      	movs	r1, #1
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f7ff fd9f 	bl	800e58c <rshift>
 800ea4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea52:	3701      	adds	r7, #1
 800ea54:	42bb      	cmp	r3, r7
 800ea56:	f6ff aee0 	blt.w	800e81a <__gethex+0x1be>
 800ea5a:	2501      	movs	r5, #1
 800ea5c:	e7c2      	b.n	800e9e4 <__gethex+0x388>
 800ea5e:	f016 061f 	ands.w	r6, r6, #31
 800ea62:	d0fa      	beq.n	800ea5a <__gethex+0x3fe>
 800ea64:	4453      	add	r3, sl
 800ea66:	f1c6 0620 	rsb	r6, r6, #32
 800ea6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ea6e:	f7fd ff07 	bl	800c880 <__hi0bits>
 800ea72:	42b0      	cmp	r0, r6
 800ea74:	dbe7      	blt.n	800ea46 <__gethex+0x3ea>
 800ea76:	e7f0      	b.n	800ea5a <__gethex+0x3fe>
 800ea78:	0800fc51 	.word	0x0800fc51

0800ea7c <L_shift>:
 800ea7c:	f1c2 0208 	rsb	r2, r2, #8
 800ea80:	0092      	lsls	r2, r2, #2
 800ea82:	b570      	push	{r4, r5, r6, lr}
 800ea84:	f1c2 0620 	rsb	r6, r2, #32
 800ea88:	6843      	ldr	r3, [r0, #4]
 800ea8a:	6804      	ldr	r4, [r0, #0]
 800ea8c:	fa03 f506 	lsl.w	r5, r3, r6
 800ea90:	432c      	orrs	r4, r5
 800ea92:	40d3      	lsrs	r3, r2
 800ea94:	6004      	str	r4, [r0, #0]
 800ea96:	f840 3f04 	str.w	r3, [r0, #4]!
 800ea9a:	4288      	cmp	r0, r1
 800ea9c:	d3f4      	bcc.n	800ea88 <L_shift+0xc>
 800ea9e:	bd70      	pop	{r4, r5, r6, pc}

0800eaa0 <__match>:
 800eaa0:	b530      	push	{r4, r5, lr}
 800eaa2:	6803      	ldr	r3, [r0, #0]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaaa:	b914      	cbnz	r4, 800eab2 <__match+0x12>
 800eaac:	6003      	str	r3, [r0, #0]
 800eaae:	2001      	movs	r0, #1
 800eab0:	bd30      	pop	{r4, r5, pc}
 800eab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eab6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eaba:	2d19      	cmp	r5, #25
 800eabc:	bf98      	it	ls
 800eabe:	3220      	addls	r2, #32
 800eac0:	42a2      	cmp	r2, r4
 800eac2:	d0f0      	beq.n	800eaa6 <__match+0x6>
 800eac4:	2000      	movs	r0, #0
 800eac6:	e7f3      	b.n	800eab0 <__match+0x10>

0800eac8 <__hexnan>:
 800eac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eacc:	680b      	ldr	r3, [r1, #0]
 800eace:	6801      	ldr	r1, [r0, #0]
 800ead0:	115e      	asrs	r6, r3, #5
 800ead2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ead6:	f013 031f 	ands.w	r3, r3, #31
 800eada:	b087      	sub	sp, #28
 800eadc:	bf18      	it	ne
 800eade:	3604      	addne	r6, #4
 800eae0:	2500      	movs	r5, #0
 800eae2:	1f37      	subs	r7, r6, #4
 800eae4:	4682      	mov	sl, r0
 800eae6:	4690      	mov	r8, r2
 800eae8:	9301      	str	r3, [sp, #4]
 800eaea:	f846 5c04 	str.w	r5, [r6, #-4]
 800eaee:	46b9      	mov	r9, r7
 800eaf0:	463c      	mov	r4, r7
 800eaf2:	9502      	str	r5, [sp, #8]
 800eaf4:	46ab      	mov	fp, r5
 800eaf6:	784a      	ldrb	r2, [r1, #1]
 800eaf8:	1c4b      	adds	r3, r1, #1
 800eafa:	9303      	str	r3, [sp, #12]
 800eafc:	b342      	cbz	r2, 800eb50 <__hexnan+0x88>
 800eafe:	4610      	mov	r0, r2
 800eb00:	9105      	str	r1, [sp, #20]
 800eb02:	9204      	str	r2, [sp, #16]
 800eb04:	f7ff fd94 	bl	800e630 <__hexdig_fun>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	d151      	bne.n	800ebb0 <__hexnan+0xe8>
 800eb0c:	9a04      	ldr	r2, [sp, #16]
 800eb0e:	9905      	ldr	r1, [sp, #20]
 800eb10:	2a20      	cmp	r2, #32
 800eb12:	d818      	bhi.n	800eb46 <__hexnan+0x7e>
 800eb14:	9b02      	ldr	r3, [sp, #8]
 800eb16:	459b      	cmp	fp, r3
 800eb18:	dd13      	ble.n	800eb42 <__hexnan+0x7a>
 800eb1a:	454c      	cmp	r4, r9
 800eb1c:	d206      	bcs.n	800eb2c <__hexnan+0x64>
 800eb1e:	2d07      	cmp	r5, #7
 800eb20:	dc04      	bgt.n	800eb2c <__hexnan+0x64>
 800eb22:	462a      	mov	r2, r5
 800eb24:	4649      	mov	r1, r9
 800eb26:	4620      	mov	r0, r4
 800eb28:	f7ff ffa8 	bl	800ea7c <L_shift>
 800eb2c:	4544      	cmp	r4, r8
 800eb2e:	d952      	bls.n	800ebd6 <__hexnan+0x10e>
 800eb30:	2300      	movs	r3, #0
 800eb32:	f1a4 0904 	sub.w	r9, r4, #4
 800eb36:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb3a:	f8cd b008 	str.w	fp, [sp, #8]
 800eb3e:	464c      	mov	r4, r9
 800eb40:	461d      	mov	r5, r3
 800eb42:	9903      	ldr	r1, [sp, #12]
 800eb44:	e7d7      	b.n	800eaf6 <__hexnan+0x2e>
 800eb46:	2a29      	cmp	r2, #41	@ 0x29
 800eb48:	d157      	bne.n	800ebfa <__hexnan+0x132>
 800eb4a:	3102      	adds	r1, #2
 800eb4c:	f8ca 1000 	str.w	r1, [sl]
 800eb50:	f1bb 0f00 	cmp.w	fp, #0
 800eb54:	d051      	beq.n	800ebfa <__hexnan+0x132>
 800eb56:	454c      	cmp	r4, r9
 800eb58:	d206      	bcs.n	800eb68 <__hexnan+0xa0>
 800eb5a:	2d07      	cmp	r5, #7
 800eb5c:	dc04      	bgt.n	800eb68 <__hexnan+0xa0>
 800eb5e:	462a      	mov	r2, r5
 800eb60:	4649      	mov	r1, r9
 800eb62:	4620      	mov	r0, r4
 800eb64:	f7ff ff8a 	bl	800ea7c <L_shift>
 800eb68:	4544      	cmp	r4, r8
 800eb6a:	d936      	bls.n	800ebda <__hexnan+0x112>
 800eb6c:	f1a8 0204 	sub.w	r2, r8, #4
 800eb70:	4623      	mov	r3, r4
 800eb72:	f853 1b04 	ldr.w	r1, [r3], #4
 800eb76:	f842 1f04 	str.w	r1, [r2, #4]!
 800eb7a:	429f      	cmp	r7, r3
 800eb7c:	d2f9      	bcs.n	800eb72 <__hexnan+0xaa>
 800eb7e:	1b3b      	subs	r3, r7, r4
 800eb80:	f023 0303 	bic.w	r3, r3, #3
 800eb84:	3304      	adds	r3, #4
 800eb86:	3401      	adds	r4, #1
 800eb88:	3e03      	subs	r6, #3
 800eb8a:	42b4      	cmp	r4, r6
 800eb8c:	bf88      	it	hi
 800eb8e:	2304      	movhi	r3, #4
 800eb90:	4443      	add	r3, r8
 800eb92:	2200      	movs	r2, #0
 800eb94:	f843 2b04 	str.w	r2, [r3], #4
 800eb98:	429f      	cmp	r7, r3
 800eb9a:	d2fb      	bcs.n	800eb94 <__hexnan+0xcc>
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	b91b      	cbnz	r3, 800eba8 <__hexnan+0xe0>
 800eba0:	4547      	cmp	r7, r8
 800eba2:	d128      	bne.n	800ebf6 <__hexnan+0x12e>
 800eba4:	2301      	movs	r3, #1
 800eba6:	603b      	str	r3, [r7, #0]
 800eba8:	2005      	movs	r0, #5
 800ebaa:	b007      	add	sp, #28
 800ebac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb0:	3501      	adds	r5, #1
 800ebb2:	2d08      	cmp	r5, #8
 800ebb4:	f10b 0b01 	add.w	fp, fp, #1
 800ebb8:	dd06      	ble.n	800ebc8 <__hexnan+0x100>
 800ebba:	4544      	cmp	r4, r8
 800ebbc:	d9c1      	bls.n	800eb42 <__hexnan+0x7a>
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebc4:	2501      	movs	r5, #1
 800ebc6:	3c04      	subs	r4, #4
 800ebc8:	6822      	ldr	r2, [r4, #0]
 800ebca:	f000 000f 	and.w	r0, r0, #15
 800ebce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ebd2:	6020      	str	r0, [r4, #0]
 800ebd4:	e7b5      	b.n	800eb42 <__hexnan+0x7a>
 800ebd6:	2508      	movs	r5, #8
 800ebd8:	e7b3      	b.n	800eb42 <__hexnan+0x7a>
 800ebda:	9b01      	ldr	r3, [sp, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d0dd      	beq.n	800eb9c <__hexnan+0xd4>
 800ebe0:	f1c3 0320 	rsb	r3, r3, #32
 800ebe4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe8:	40da      	lsrs	r2, r3
 800ebea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ebee:	4013      	ands	r3, r2
 800ebf0:	f846 3c04 	str.w	r3, [r6, #-4]
 800ebf4:	e7d2      	b.n	800eb9c <__hexnan+0xd4>
 800ebf6:	3f04      	subs	r7, #4
 800ebf8:	e7d0      	b.n	800eb9c <__hexnan+0xd4>
 800ebfa:	2004      	movs	r0, #4
 800ebfc:	e7d5      	b.n	800ebaa <__hexnan+0xe2>

0800ebfe <__ascii_mbtowc>:
 800ebfe:	b082      	sub	sp, #8
 800ec00:	b901      	cbnz	r1, 800ec04 <__ascii_mbtowc+0x6>
 800ec02:	a901      	add	r1, sp, #4
 800ec04:	b142      	cbz	r2, 800ec18 <__ascii_mbtowc+0x1a>
 800ec06:	b14b      	cbz	r3, 800ec1c <__ascii_mbtowc+0x1e>
 800ec08:	7813      	ldrb	r3, [r2, #0]
 800ec0a:	600b      	str	r3, [r1, #0]
 800ec0c:	7812      	ldrb	r2, [r2, #0]
 800ec0e:	1e10      	subs	r0, r2, #0
 800ec10:	bf18      	it	ne
 800ec12:	2001      	movne	r0, #1
 800ec14:	b002      	add	sp, #8
 800ec16:	4770      	bx	lr
 800ec18:	4610      	mov	r0, r2
 800ec1a:	e7fb      	b.n	800ec14 <__ascii_mbtowc+0x16>
 800ec1c:	f06f 0001 	mvn.w	r0, #1
 800ec20:	e7f8      	b.n	800ec14 <__ascii_mbtowc+0x16>

0800ec22 <_realloc_r>:
 800ec22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec26:	4680      	mov	r8, r0
 800ec28:	4615      	mov	r5, r2
 800ec2a:	460c      	mov	r4, r1
 800ec2c:	b921      	cbnz	r1, 800ec38 <_realloc_r+0x16>
 800ec2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec32:	4611      	mov	r1, r2
 800ec34:	f7fb bcae 	b.w	800a594 <_malloc_r>
 800ec38:	b92a      	cbnz	r2, 800ec46 <_realloc_r+0x24>
 800ec3a:	f7fd fce5 	bl	800c608 <_free_r>
 800ec3e:	2400      	movs	r4, #0
 800ec40:	4620      	mov	r0, r4
 800ec42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec46:	f000 f840 	bl	800ecca <_malloc_usable_size_r>
 800ec4a:	4285      	cmp	r5, r0
 800ec4c:	4606      	mov	r6, r0
 800ec4e:	d802      	bhi.n	800ec56 <_realloc_r+0x34>
 800ec50:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ec54:	d8f4      	bhi.n	800ec40 <_realloc_r+0x1e>
 800ec56:	4629      	mov	r1, r5
 800ec58:	4640      	mov	r0, r8
 800ec5a:	f7fb fc9b 	bl	800a594 <_malloc_r>
 800ec5e:	4607      	mov	r7, r0
 800ec60:	2800      	cmp	r0, #0
 800ec62:	d0ec      	beq.n	800ec3e <_realloc_r+0x1c>
 800ec64:	42b5      	cmp	r5, r6
 800ec66:	462a      	mov	r2, r5
 800ec68:	4621      	mov	r1, r4
 800ec6a:	bf28      	it	cs
 800ec6c:	4632      	movcs	r2, r6
 800ec6e:	f7ff fc43 	bl	800e4f8 <memcpy>
 800ec72:	4621      	mov	r1, r4
 800ec74:	4640      	mov	r0, r8
 800ec76:	f7fd fcc7 	bl	800c608 <_free_r>
 800ec7a:	463c      	mov	r4, r7
 800ec7c:	e7e0      	b.n	800ec40 <_realloc_r+0x1e>

0800ec7e <__ascii_wctomb>:
 800ec7e:	4603      	mov	r3, r0
 800ec80:	4608      	mov	r0, r1
 800ec82:	b141      	cbz	r1, 800ec96 <__ascii_wctomb+0x18>
 800ec84:	2aff      	cmp	r2, #255	@ 0xff
 800ec86:	d904      	bls.n	800ec92 <__ascii_wctomb+0x14>
 800ec88:	228a      	movs	r2, #138	@ 0x8a
 800ec8a:	601a      	str	r2, [r3, #0]
 800ec8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec90:	4770      	bx	lr
 800ec92:	700a      	strb	r2, [r1, #0]
 800ec94:	2001      	movs	r0, #1
 800ec96:	4770      	bx	lr

0800ec98 <fiprintf>:
 800ec98:	b40e      	push	{r1, r2, r3}
 800ec9a:	b503      	push	{r0, r1, lr}
 800ec9c:	4601      	mov	r1, r0
 800ec9e:	ab03      	add	r3, sp, #12
 800eca0:	4805      	ldr	r0, [pc, #20]	@ (800ecb8 <fiprintf+0x20>)
 800eca2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eca6:	6800      	ldr	r0, [r0, #0]
 800eca8:	9301      	str	r3, [sp, #4]
 800ecaa:	f7ff f9b1 	bl	800e010 <_vfiprintf_r>
 800ecae:	b002      	add	sp, #8
 800ecb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecb4:	b003      	add	sp, #12
 800ecb6:	4770      	bx	lr
 800ecb8:	20000038 	.word	0x20000038

0800ecbc <abort>:
 800ecbc:	b508      	push	{r3, lr}
 800ecbe:	2006      	movs	r0, #6
 800ecc0:	f000 f834 	bl	800ed2c <raise>
 800ecc4:	2001      	movs	r0, #1
 800ecc6:	f7f4 fb75 	bl	80033b4 <_exit>

0800ecca <_malloc_usable_size_r>:
 800ecca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecce:	1f18      	subs	r0, r3, #4
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	bfbc      	itt	lt
 800ecd4:	580b      	ldrlt	r3, [r1, r0]
 800ecd6:	18c0      	addlt	r0, r0, r3
 800ecd8:	4770      	bx	lr

0800ecda <_raise_r>:
 800ecda:	291f      	cmp	r1, #31
 800ecdc:	b538      	push	{r3, r4, r5, lr}
 800ecde:	4605      	mov	r5, r0
 800ece0:	460c      	mov	r4, r1
 800ece2:	d904      	bls.n	800ecee <_raise_r+0x14>
 800ece4:	2316      	movs	r3, #22
 800ece6:	6003      	str	r3, [r0, #0]
 800ece8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecec:	bd38      	pop	{r3, r4, r5, pc}
 800ecee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ecf0:	b112      	cbz	r2, 800ecf8 <_raise_r+0x1e>
 800ecf2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ecf6:	b94b      	cbnz	r3, 800ed0c <_raise_r+0x32>
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	f000 f831 	bl	800ed60 <_getpid_r>
 800ecfe:	4622      	mov	r2, r4
 800ed00:	4601      	mov	r1, r0
 800ed02:	4628      	mov	r0, r5
 800ed04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed08:	f000 b818 	b.w	800ed3c <_kill_r>
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d00a      	beq.n	800ed26 <_raise_r+0x4c>
 800ed10:	1c59      	adds	r1, r3, #1
 800ed12:	d103      	bne.n	800ed1c <_raise_r+0x42>
 800ed14:	2316      	movs	r3, #22
 800ed16:	6003      	str	r3, [r0, #0]
 800ed18:	2001      	movs	r0, #1
 800ed1a:	e7e7      	b.n	800ecec <_raise_r+0x12>
 800ed1c:	2100      	movs	r1, #0
 800ed1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ed22:	4620      	mov	r0, r4
 800ed24:	4798      	blx	r3
 800ed26:	2000      	movs	r0, #0
 800ed28:	e7e0      	b.n	800ecec <_raise_r+0x12>
	...

0800ed2c <raise>:
 800ed2c:	4b02      	ldr	r3, [pc, #8]	@ (800ed38 <raise+0xc>)
 800ed2e:	4601      	mov	r1, r0
 800ed30:	6818      	ldr	r0, [r3, #0]
 800ed32:	f7ff bfd2 	b.w	800ecda <_raise_r>
 800ed36:	bf00      	nop
 800ed38:	20000038 	.word	0x20000038

0800ed3c <_kill_r>:
 800ed3c:	b538      	push	{r3, r4, r5, lr}
 800ed3e:	4d07      	ldr	r5, [pc, #28]	@ (800ed5c <_kill_r+0x20>)
 800ed40:	2300      	movs	r3, #0
 800ed42:	4604      	mov	r4, r0
 800ed44:	4608      	mov	r0, r1
 800ed46:	4611      	mov	r1, r2
 800ed48:	602b      	str	r3, [r5, #0]
 800ed4a:	f7f4 fb23 	bl	8003394 <_kill>
 800ed4e:	1c43      	adds	r3, r0, #1
 800ed50:	d102      	bne.n	800ed58 <_kill_r+0x1c>
 800ed52:	682b      	ldr	r3, [r5, #0]
 800ed54:	b103      	cbz	r3, 800ed58 <_kill_r+0x1c>
 800ed56:	6023      	str	r3, [r4, #0]
 800ed58:	bd38      	pop	{r3, r4, r5, pc}
 800ed5a:	bf00      	nop
 800ed5c:	20002c54 	.word	0x20002c54

0800ed60 <_getpid_r>:
 800ed60:	f7f4 bb10 	b.w	8003384 <_getpid>

0800ed64 <_init>:
 800ed64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed66:	bf00      	nop
 800ed68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed6a:	bc08      	pop	{r3}
 800ed6c:	469e      	mov	lr, r3
 800ed6e:	4770      	bx	lr

0800ed70 <_fini>:
 800ed70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed72:	bf00      	nop
 800ed74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed76:	bc08      	pop	{r3}
 800ed78:	469e      	mov	lr, r3
 800ed7a:	4770      	bx	lr
