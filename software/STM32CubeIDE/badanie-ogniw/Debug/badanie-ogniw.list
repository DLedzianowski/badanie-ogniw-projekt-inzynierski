
badanie-ogniw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b56c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c80  0800b740  0800b740  0000c740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3c0  0800c3c0  0000e1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3c0  0800c3c0  0000d3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3c8  0800c3c8  0000e1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3c8  0800c3c8  0000d3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c3cc  0800c3cc  0000d3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800c3d0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  200001f4  0800c5c4  0000e1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  0800c5c4  0000e9cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017708  00000000  00000000  0000e224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d6e  00000000  00000000  0002592c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  000296a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea0  00000000  00000000  0002a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a591  00000000  00000000  0002b888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000202fe  00000000  00000000  00055e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efdef  00000000  00000000  00076117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165f06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063dc  00000000  00000000  00165f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  0016c328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b724 	.word	0x0800b724

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0800b724 	.word	0x0800b724

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010d2:	7b3b      	ldrb	r3, [r7, #12]
 80010d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e2:	480c      	ldr	r0, [pc, #48]	@ (8001114 <BMP280_Read8+0x50>)
 80010e4:	f002 fd96 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <BMP280_Read8+0x54>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f107 020c 	add.w	r2, r7, #12
 80010f0:	f107 010c 	add.w	r1, r7, #12
 80010f4:	230a      	movs	r3, #10
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2302      	movs	r3, #2
 80010fa:	f004 fafd 	bl	80056f8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001104:	4803      	ldr	r0, [pc, #12]	@ (8001114 <BMP280_Read8+0x50>)
 8001106:	f002 fd85 	bl	8003c14 <HAL_GPIO_WritePin>
	return tmp[1];
 800110a:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000
 8001118:	20000210 	.word	0x20000210

0800111c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800112a:	7b3b      	ldrb	r3, [r7, #12]
 800112c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001130:	b2db      	uxtb	r3, r3
 8001132:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800113a:	4810      	ldr	r0, [pc, #64]	@ (800117c <BMP280_Read16+0x60>)
 800113c:	f002 fd6a 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <BMP280_Read16+0x64>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	f107 010c 	add.w	r1, r7, #12
 800114c:	230a      	movs	r3, #10
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2303      	movs	r3, #3
 8001152:	f004 fad1 	bl	80056f8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800115c:	4807      	ldr	r0, [pc, #28]	@ (800117c <BMP280_Read16+0x60>)
 800115e:	f002 fd59 	bl	8003c14 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	7bbb      	ldrb	r3, [r7, #14]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	b29b      	uxth	r3, r3
#endif
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	20000210 	.word	0x20000210

08001184 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffc3 	bl	800111c <BMP280_Read16>
 8001196:	4603      	mov	r3, r0
 8001198:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	b29b      	uxth	r3, r3
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 80011cc:	7b3b      	ldrb	r3, [r7, #12]
 80011ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <BMP280_Write8+0x58>)
 80011e2:	f002 fd17 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <BMP280_Write8+0x5c>)
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	f107 010c 	add.w	r1, r7, #12
 80011f2:	230a      	movs	r3, #10
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2302      	movs	r3, #2
 80011f8:	f004 fa7e 	bl	80056f8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001202:	4803      	ldr	r0, [pc, #12]	@ (8001210 <BMP280_Write8+0x58>)
 8001204:	f002 fd06 	bl	8003c14 <HAL_GPIO_WritePin>
#endif
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	20000210 	.word	0x20000210

08001218 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af02      	add	r7, sp, #8
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8001226:	7b3b      	ldrb	r3, [r7, #12]
 8001228:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800122c:	b2db      	uxtb	r3, r3
 800122e:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001236:	480f      	ldr	r0, [pc, #60]	@ (8001274 <BMP280_Read24+0x5c>)
 8001238:	f002 fcec 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <BMP280_Read24+0x60>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	f107 010c 	add.w	r1, r7, #12
 8001248:	230a      	movs	r3, #10
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2303      	movs	r3, #3
 800124e:	f004 fa53 	bl	80056f8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001258:	4806      	ldr	r0, [pc, #24]	@ (8001274 <BMP280_Read24+0x5c>)
 800125a:	f002 fcdb 	bl	8003c14 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 800125e:	7b7b      	ldrb	r3, [r7, #13]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	4313      	orrs	r3, r2
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	4313      	orrs	r3, r2
#endif
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	20000210 	.word	0x20000210

0800127c <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4603      	mov	r3, r0
 800128c:	70fb      	strb	r3, [r7, #3]
 800128e:	460b      	mov	r3, r1
 8001290:	70bb      	strb	r3, [r7, #2]
 8001292:	4613      	mov	r3, r2
 8001294:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 8001296:	4a4f      	ldr	r2, [pc, #316]	@ (80013d4 <BMP280_Init+0x158>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a2:	484d      	ldr	r0, [pc, #308]	@ (80013d8 <BMP280_Init+0x15c>)
 80012a4:	f002 fcb6 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80012a8:	2005      	movs	r0, #5
 80012aa:	f002 f9fd 	bl	80036a8 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b4:	4848      	ldr	r0, [pc, #288]	@ (80013d8 <BMP280_Init+0x15c>)
 80012b6:	f002 fcad 	bl	8003c14 <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 80012ba:	787b      	ldrb	r3, [r7, #1]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d901      	bls.n	80012c4 <BMP280_Init+0x48>
	    mode = BMP280_NORMALMODE;
 80012c0:	2303      	movs	r3, #3
 80012c2:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80012c4:	4a45      	ldr	r2, [pc, #276]	@ (80013dc <BMP280_Init+0x160>)
 80012c6:	787b      	ldrb	r3, [r7, #1]
 80012c8:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80012ca:	787b      	ldrb	r3, [r7, #1]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <BMP280_Init+0x58>
		mode = BMP280_SLEEPMODE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d901      	bls.n	80012de <BMP280_Init+0x62>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80012da:	2305      	movs	r3, #5
 80012dc:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80012de:	4a40      	ldr	r2, [pc, #256]	@ (80013e0 <BMP280_Init+0x164>)
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	d901      	bls.n	80012ee <BMP280_Init+0x72>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80012ea:	2305      	movs	r3, #5
 80012ec:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80012ee:	4a3d      	ldr	r2, [pc, #244]	@ (80013e4 <BMP280_Init+0x168>)
 80012f0:	78bb      	ldrb	r3, [r7, #2]
 80012f2:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80012f4:	bf00      	nop
 80012f6:	20d0      	movs	r0, #208	@ 0xd0
 80012f8:	f7ff fee4 	bl	80010c4 <BMP280_Read8>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b58      	cmp	r3, #88	@ 0x58
 8001300:	d1f9      	bne.n	80012f6 <BMP280_Init+0x7a>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001302:	2088      	movs	r0, #136	@ 0x88
 8001304:	f7ff ff3e 	bl	8001184 <BMP280_Read16LE>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b36      	ldr	r3, [pc, #216]	@ (80013e8 <BMP280_Init+0x16c>)
 800130e:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001310:	208a      	movs	r0, #138	@ 0x8a
 8001312:	f7ff ff37 	bl	8001184 <BMP280_Read16LE>
 8001316:	4603      	mov	r3, r0
 8001318:	b21a      	sxth	r2, r3
 800131a:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <BMP280_Init+0x170>)
 800131c:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 800131e:	208c      	movs	r0, #140	@ 0x8c
 8001320:	f7ff ff30 	bl	8001184 <BMP280_Read16LE>
 8001324:	4603      	mov	r3, r0
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <BMP280_Init+0x174>)
 800132a:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800132c:	208e      	movs	r0, #142	@ 0x8e
 800132e:	f7ff ff29 	bl	8001184 <BMP280_Read16LE>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <BMP280_Init+0x178>)
 8001338:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800133a:	2090      	movs	r0, #144	@ 0x90
 800133c:	f7ff ff22 	bl	8001184 <BMP280_Read16LE>
 8001340:	4603      	mov	r3, r0
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <BMP280_Init+0x17c>)
 8001346:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001348:	2092      	movs	r0, #146	@ 0x92
 800134a:	f7ff ff1b 	bl	8001184 <BMP280_Read16LE>
 800134e:	4603      	mov	r3, r0
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <BMP280_Init+0x180>)
 8001354:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001356:	2094      	movs	r0, #148	@ 0x94
 8001358:	f7ff ff14 	bl	8001184 <BMP280_Read16LE>
 800135c:	4603      	mov	r3, r0
 800135e:	b21a      	sxth	r2, r3
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <BMP280_Init+0x184>)
 8001362:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001364:	2096      	movs	r0, #150	@ 0x96
 8001366:	f7ff ff0d 	bl	8001184 <BMP280_Read16LE>
 800136a:	4603      	mov	r3, r0
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <BMP280_Init+0x188>)
 8001370:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001372:	2098      	movs	r0, #152	@ 0x98
 8001374:	f7ff ff06 	bl	8001184 <BMP280_Read16LE>
 8001378:	4603      	mov	r3, r0
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <BMP280_Init+0x18c>)
 800137e:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001380:	209a      	movs	r0, #154	@ 0x9a
 8001382:	f7ff feff 	bl	8001184 <BMP280_Read16LE>
 8001386:	4603      	mov	r3, r0
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b20      	ldr	r3, [pc, #128]	@ (800140c <BMP280_Init+0x190>)
 800138c:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 800138e:	209c      	movs	r0, #156	@ 0x9c
 8001390:	f7ff fef8 	bl	8001184 <BMP280_Read16LE>
 8001394:	4603      	mov	r3, r0
 8001396:	b21a      	sxth	r2, r3
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <BMP280_Init+0x194>)
 800139a:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800139c:	209e      	movs	r0, #158	@ 0x9e
 800139e:	f7ff fef1 	bl	8001184 <BMP280_Read16LE>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <BMP280_Init+0x198>)
 80013a8:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	015b      	lsls	r3, r3, #5
 80013ae:	b25a      	sxtb	r2, r3
 80013b0:	78bb      	ldrb	r3, [r7, #2]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b25a      	sxtb	r2, r3
 80013ba:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80013be:	4313      	orrs	r3, r2
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4619      	mov	r1, r3
 80013c6:	20f4      	movs	r0, #244	@ 0xf4
 80013c8:	f7ff fef6 	bl	80011b8 <BMP280_Write8>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000210 	.word	0x20000210
 80013d8:	40021000 	.word	0x40021000
 80013dc:	20000216 	.word	0x20000216
 80013e0:	20000214 	.word	0x20000214
 80013e4:	20000215 	.word	0x20000215
 80013e8:	2000022c 	.word	0x2000022c
 80013ec:	20000218 	.word	0x20000218
 80013f0:	2000021a 	.word	0x2000021a
 80013f4:	2000022e 	.word	0x2000022e
 80013f8:	2000021c 	.word	0x2000021c
 80013fc:	2000021e 	.word	0x2000021e
 8001400:	20000220 	.word	0x20000220
 8001404:	20000222 	.word	0x20000222
 8001408:	20000224 	.word	0x20000224
 800140c:	20000226 	.word	0x20000226
 8001410:	20000228 	.word	0x20000228
 8001414:	2000022a 	.word	0x2000022a

08001418 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800141e:	4b3d      	ldr	r3, [pc, #244]	@ (8001514 <BMP280_ReadTemperature+0xfc>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d16d      	bne.n	8001502 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001426:	20f4      	movs	r0, #244	@ 0xf4
 8001428:	f7ff fe4c 	bl	80010c4 <BMP280_Read8>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	4619      	mov	r1, r3
 8001444:	20f4      	movs	r0, #244	@ 0xf4
 8001446:	f7ff feb7 	bl	80011b8 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800144a:	20f4      	movs	r0, #244	@ 0xf4
 800144c:	f7ff fe3a 	bl	80010c4 <BMP280_Read8>
 8001450:	4603      	mov	r3, r0
 8001452:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001454:	7dbb      	ldrb	r3, [r7, #22]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d14f      	bne.n	8001502 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001462:	20f4      	movs	r0, #244	@ 0xf4
 8001464:	f7ff fe2e 	bl	80010c4 <BMP280_Read8>
 8001468:	4603      	mov	r3, r0
 800146a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800146c:	7dbb      	ldrb	r3, [r7, #22]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001474:	7dbb      	ldrb	r3, [r7, #22]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800147a:	e7f2      	b.n	8001462 <BMP280_ReadTemperature+0x4a>
				  break;
 800147c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800147e:	20fa      	movs	r0, #250	@ 0xfa
 8001480:	f7ff feca 	bl	8001218 <BMP280_Read24>
 8001484:	4603      	mov	r3, r0
 8001486:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	111b      	asrs	r3, r3, #4
 800148c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	10da      	asrs	r2, r3, #3
 8001492:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800149a:	4a20      	ldr	r2, [pc, #128]	@ (800151c <BMP280_ReadTemperature+0x104>)
 800149c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	12db      	asrs	r3, r3, #11
 80014a6:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	111b      	asrs	r3, r3, #4
 80014ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	1112      	asrs	r2, r2, #4
 80014b6:	4918      	ldr	r1, [pc, #96]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 80014b8:	8809      	ldrh	r1, [r1, #0]
 80014ba:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c0:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80014c2:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <BMP280_ReadTemperature+0x108>)
 80014c4:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014cc:	139b      	asrs	r3, r3, #14
 80014ce:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a13      	ldr	r2, [pc, #76]	@ (8001524 <BMP280_ReadTemperature+0x10c>)
 80014d8:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <BMP280_ReadTemperature+0x10c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3380      	adds	r3, #128	@ 0x80
 80014e6:	121b      	asrs	r3, r3, #8
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80014f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f8:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001528 <BMP280_ReadTemperature+0x110>
 80014fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001500:	e001      	b.n	8001506 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001502:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800152c <BMP280_ReadTemperature+0x114>
}
 8001506:	eef0 7a47 	vmov.f32	s15, s14
 800150a:	eeb0 0a67 	vmov.f32	s0, s15
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000216 	.word	0x20000216
 8001518:	2000022c 	.word	0x2000022c
 800151c:	20000218 	.word	0x20000218
 8001520:	2000021a 	.word	0x2000021a
 8001524:	20000230 	.word	0x20000230
 8001528:	42c80000 	.word	0x42c80000
 800152c:	c2c60000 	.word	0xc2c60000

08001530 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001534:	b0cc      	sub	sp, #304	@ 0x130
 8001536:	af00      	add	r7, sp, #0
 8001538:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 800153c:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001540:	f7ff ff6a 	bl	8001418 <BMP280_ReadTemperature>
 8001544:	eef0 7a40 	vmov.f32	s15, s0
 8001548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800154c:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8001828 <BMP280_ReadTemperatureAndPressure+0x2f8>
 800155c:	eef4 7a47 	vcmp.f32	s15, s14
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d101      	bne.n	800156a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8001566:	23ff      	movs	r3, #255	@ 0xff
 8001568:	e2bf      	b.n	8001aea <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800156a:	20f7      	movs	r0, #247	@ 0xf7
 800156c:	f7ff fe54 	bl	8001218 <BMP280_Read24>
 8001570:	4603      	mov	r3, r0
 8001572:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  adc_P >>= 4;
 8001576:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800157a:	111b      	asrs	r3, r3, #4
 800157c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001580:	4baa      	ldr	r3, [pc, #680]	@ (800182c <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	17da      	asrs	r2, r3, #31
 8001586:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800158a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800158e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001592:	460b      	mov	r3, r1
 8001594:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8001598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800159a:	4613      	mov	r3, r2
 800159c:	f143 33ff 	adc.w	r3, r3, #4294967295
 80015a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015a6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 80015aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015b2:	fb03 f102 	mul.w	r1, r3, r2
 80015b6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	18ca      	adds	r2, r1, r3
 80015c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c8:	fba3 4503 	umull	r4, r5, r3, r3
 80015cc:	1953      	adds	r3, r2, r5
 80015ce:	461d      	mov	r5, r3
 80015d0:	4b97      	ldr	r3, [pc, #604]	@ (8001830 <BMP280_ReadTemperatureAndPressure+0x300>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	17da      	asrs	r2, r3, #31
 80015da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80015de:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80015e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80015e6:	4603      	mov	r3, r0
 80015e8:	fb03 f205 	mul.w	r2, r3, r5
 80015ec:	460b      	mov	r3, r1
 80015ee:	fb04 f303 	mul.w	r3, r4, r3
 80015f2:	4413      	add	r3, r2
 80015f4:	4602      	mov	r2, r0
 80015f6:	fba4 8902 	umull	r8, r9, r4, r2
 80015fa:	444b      	add	r3, r9
 80015fc:	4699      	mov	r9, r3
 80015fe:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 8001602:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001606:	4b8b      	ldr	r3, [pc, #556]	@ (8001834 <BMP280_ReadTemperatureAndPressure+0x304>)
 8001608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160c:	b21b      	sxth	r3, r3
 800160e:	17da      	asrs	r2, r3, #31
 8001610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001614:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001618:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800161c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001620:	462a      	mov	r2, r5
 8001622:	fb02 f203 	mul.w	r2, r2, r3
 8001626:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800162a:	4621      	mov	r1, r4
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	441a      	add	r2, r3
 8001632:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001636:	4621      	mov	r1, r4
 8001638:	fba3 ab01 	umull	sl, fp, r3, r1
 800163c:	eb02 030b 	add.w	r3, r2, fp
 8001640:	469b      	mov	fp, r3
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800164e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001652:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001656:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800165a:	1814      	adds	r4, r2, r0
 800165c:	643c      	str	r4, [r7, #64]	@ 0x40
 800165e:	414b      	adcs	r3, r1
 8001660:	647b      	str	r3, [r7, #68]	@ 0x44
 8001662:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001666:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 800166a:	4b73      	ldr	r3, [pc, #460]	@ (8001838 <BMP280_ReadTemperatureAndPressure+0x308>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	b21b      	sxth	r3, r3
 8001672:	17da      	asrs	r2, r3, #31
 8001674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001678:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001688:	00d9      	lsls	r1, r3, #3
 800168a:	2000      	movs	r0, #0
 800168c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001690:	1814      	adds	r4, r2, r0
 8001692:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001694:	414b      	adcs	r3, r1
 8001696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001698:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800169c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80016a0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80016a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016a8:	fb03 f102 	mul.w	r1, r3, r2
 80016ac:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80016b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	18ca      	adds	r2, r1, r3
 80016ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016be:	fba3 1303 	umull	r1, r3, r3, r3
 80016c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016c6:	460b      	mov	r3, r1
 80016c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80016cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80016d0:	18d3      	adds	r3, r2, r3
 80016d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016d6:	4b59      	ldr	r3, [pc, #356]	@ (800183c <BMP280_ReadTemperatureAndPressure+0x30c>)
 80016d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	17da      	asrs	r2, r3, #31
 80016e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80016e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80016e8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80016ec:	462b      	mov	r3, r5
 80016ee:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80016f2:	4642      	mov	r2, r8
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	464b      	mov	r3, r9
 80016fa:	4621      	mov	r1, r4
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	4622      	mov	r2, r4
 8001704:	4641      	mov	r1, r8
 8001706:	fba2 1201 	umull	r1, r2, r2, r1
 800170a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800170e:	460a      	mov	r2, r1
 8001710:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8001714:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001718:	4413      	add	r3, r2
 800171a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800172a:	4623      	mov	r3, r4
 800172c:	0a18      	lsrs	r0, r3, #8
 800172e:	462b      	mov	r3, r5
 8001730:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001734:	462b      	mov	r3, r5
 8001736:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001738:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <BMP280_ReadTemperatureAndPressure+0x310>)
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	b21b      	sxth	r3, r3
 8001740:	17da      	asrs	r2, r3, #31
 8001742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001746:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800174a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800174e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001752:	464a      	mov	r2, r9
 8001754:	fb02 f203 	mul.w	r2, r2, r3
 8001758:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800175c:	4644      	mov	r4, r8
 800175e:	fb04 f303 	mul.w	r3, r4, r3
 8001762:	441a      	add	r2, r3
 8001764:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001768:	4644      	mov	r4, r8
 800176a:	fba3 4304 	umull	r4, r3, r3, r4
 800176e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001772:	4623      	mov	r3, r4
 8001774:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800177c:	18d3      	adds	r3, r2, r3
 800177e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800178e:	464c      	mov	r4, r9
 8001790:	0323      	lsls	r3, r4, #12
 8001792:	4644      	mov	r4, r8
 8001794:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001798:	4644      	mov	r4, r8
 800179a:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800179c:	1884      	adds	r4, r0, r2
 800179e:	633c      	str	r4, [r7, #48]	@ 0x30
 80017a0:	eb41 0303 	adc.w	r3, r1, r3
 80017a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80017a6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80017aa:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80017ae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017b2:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80017b6:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 80017ba:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80017be:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <BMP280_ReadTemperatureAndPressure+0x314>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2200      	movs	r2, #0
 80017c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80017ce:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80017d2:	462b      	mov	r3, r5
 80017d4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80017d8:	4642      	mov	r2, r8
 80017da:	fb02 f203 	mul.w	r2, r2, r3
 80017de:	464b      	mov	r3, r9
 80017e0:	4621      	mov	r1, r4
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	4622      	mov	r2, r4
 80017ea:	4641      	mov	r1, r8
 80017ec:	fba2 1201 	umull	r1, r2, r2, r1
 80017f0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80017f4:	460a      	mov	r2, r1
 80017f6:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80017fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80017fe:	4413      	add	r3, r2
 8001800:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001810:	4629      	mov	r1, r5
 8001812:	104a      	asrs	r2, r1, #1
 8001814:	4629      	mov	r1, r5
 8001816:	17cb      	asrs	r3, r1, #31
 8001818:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	  if (var1 == 0) {
 800181c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001820:	4313      	orrs	r3, r2
 8001822:	d111      	bne.n	8001848 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001824:	2300      	movs	r3, #0
 8001826:	e160      	b.n	8001aea <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001828:	c2c60000 	.word	0xc2c60000
 800182c:	20000230 	.word	0x20000230
 8001830:	20000224 	.word	0x20000224
 8001834:	20000222 	.word	0x20000222
 8001838:	20000220 	.word	0x20000220
 800183c:	2000021e 	.word	0x2000021e
 8001840:	2000021c 	.word	0x2000021c
 8001844:	2000022e 	.word	0x2000022e
	  }
	  p = 1048576 - adc_P;
 8001848:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800184c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001850:	17da      	asrs	r2, r3, #31
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001856:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800185a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 800185e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001862:	105b      	asrs	r3, r3, #1
 8001864:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001868:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800186c:	07db      	lsls	r3, r3, #31
 800186e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001872:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001876:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800187a:	4621      	mov	r1, r4
 800187c:	1a89      	subs	r1, r1, r2
 800187e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001882:	4629      	mov	r1, r5
 8001884:	eb61 0303 	sbc.w	r3, r1, r3
 8001888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800188c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001890:	4622      	mov	r2, r4
 8001892:	462b      	mov	r3, r5
 8001894:	1891      	adds	r1, r2, r2
 8001896:	6239      	str	r1, [r7, #32]
 8001898:	415b      	adcs	r3, r3
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
 800189c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018a0:	4621      	mov	r1, r4
 80018a2:	1851      	adds	r1, r2, r1
 80018a4:	61b9      	str	r1, [r7, #24]
 80018a6:	4629      	mov	r1, r5
 80018a8:	414b      	adcs	r3, r1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018b8:	4649      	mov	r1, r9
 80018ba:	018b      	lsls	r3, r1, #6
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c2:	4641      	mov	r1, r8
 80018c4:	018a      	lsls	r2, r1, #6
 80018c6:	4641      	mov	r1, r8
 80018c8:	1889      	adds	r1, r1, r2
 80018ca:	6139      	str	r1, [r7, #16]
 80018cc:	4649      	mov	r1, r9
 80018ce:	eb43 0101 	adc.w	r1, r3, r1
 80018d2:	6179      	str	r1, [r7, #20]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018e0:	4649      	mov	r1, r9
 80018e2:	008b      	lsls	r3, r1, #2
 80018e4:	4641      	mov	r1, r8
 80018e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018ea:	4641      	mov	r1, r8
 80018ec:	008a      	lsls	r2, r1, #2
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	4622      	mov	r2, r4
 80018f6:	189b      	adds	r3, r3, r2
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	460b      	mov	r3, r1
 80018fc:	462a      	mov	r2, r5
 80018fe:	eb42 0303 	adc.w	r3, r2, r3
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001910:	4649      	mov	r1, r9
 8001912:	008b      	lsls	r3, r1, #2
 8001914:	4641      	mov	r1, r8
 8001916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800191a:	4641      	mov	r1, r8
 800191c:	008a      	lsls	r2, r1, #2
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	4603      	mov	r3, r0
 8001924:	4622      	mov	r2, r4
 8001926:	189b      	adds	r3, r3, r2
 8001928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800192a:	462b      	mov	r3, r5
 800192c:	460a      	mov	r2, r1
 800192e:	eb42 0303 	adc.w	r3, r2, r3
 8001932:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001934:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001938:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800193c:	f7ff f9c4 	bl	8000cc8 <__aeabi_ldivmod>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001948:	4b6b      	ldr	r3, [pc, #428]	@ (8001af8 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	b21b      	sxth	r3, r3
 8001950:	17da      	asrs	r2, r3, #31
 8001952:	673b      	str	r3, [r7, #112]	@ 0x70
 8001954:	677a      	str	r2, [r7, #116]	@ 0x74
 8001956:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0b50      	lsrs	r0, r2, #13
 8001964:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001968:	1359      	asrs	r1, r3, #13
 800196a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800196e:	462b      	mov	r3, r5
 8001970:	fb00 f203 	mul.w	r2, r0, r3
 8001974:	4623      	mov	r3, r4
 8001976:	fb03 f301 	mul.w	r3, r3, r1
 800197a:	4413      	add	r3, r2
 800197c:	4622      	mov	r2, r4
 800197e:	fba2 1200 	umull	r1, r2, r2, r0
 8001982:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001986:	460a      	mov	r2, r1
 8001988:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800198c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001990:	4413      	add	r3, r2
 8001992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001996:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800199a:	f04f 0000 	mov.w	r0, #0
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	0b50      	lsrs	r0, r2, #13
 80019a4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a8:	1359      	asrs	r1, r3, #13
 80019aa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80019ae:	462b      	mov	r3, r5
 80019b0:	fb00 f203 	mul.w	r2, r0, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	fb03 f301 	mul.w	r3, r3, r1
 80019ba:	4413      	add	r3, r2
 80019bc:	4622      	mov	r2, r4
 80019be:	fba2 1200 	umull	r1, r2, r2, r0
 80019c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80019c6:	460a      	mov	r2, r1
 80019c8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80019cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80019d0:	4413      	add	r3, r2
 80019d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80019e2:	4621      	mov	r1, r4
 80019e4:	0e4a      	lsrs	r2, r1, #25
 80019e6:	4629      	mov	r1, r5
 80019e8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019ec:	4629      	mov	r1, r5
 80019ee:	164b      	asrs	r3, r1, #25
 80019f0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 80019f4:	4b41      	ldr	r3, [pc, #260]	@ (8001afc <BMP280_ReadTemperatureAndPressure+0x5cc>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	17da      	asrs	r2, r3, #31
 80019fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a06:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a0a:	462a      	mov	r2, r5
 8001a0c:	fb02 f203 	mul.w	r2, r2, r3
 8001a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a14:	4621      	mov	r1, r4
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001a20:	4621      	mov	r1, r4
 8001a22:	fba2 1201 	umull	r1, r2, r2, r1
 8001a26:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a30:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a34:	4413      	add	r3, r2
 8001a36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001a46:	4621      	mov	r1, r4
 8001a48:	0cca      	lsrs	r2, r1, #19
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a50:	4629      	mov	r1, r5
 8001a52:	14cb      	asrs	r3, r1, #19
 8001a54:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001a58:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001a5c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a60:	1884      	adds	r4, r0, r2
 8001a62:	663c      	str	r4, [r7, #96]	@ 0x60
 8001a64:	eb41 0303 	adc.w	r3, r1, r3
 8001a68:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a6a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a72:	4621      	mov	r1, r4
 8001a74:	1889      	adds	r1, r1, r2
 8001a76:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001a78:	4629      	mov	r1, r5
 8001a7a:	eb43 0101 	adc.w	r1, r3, r1
 8001a7e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	0a18      	lsrs	r0, r3, #8
 8001a90:	462b      	mov	r3, r5
 8001a92:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a96:	462b      	mov	r3, r5
 8001a98:	1219      	asrs	r1, r3, #8
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8001a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	17da      	asrs	r2, r3, #31
 8001aa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001aa6:	657a      	str	r2, [r7, #84]	@ 0x54
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ab4:	464c      	mov	r4, r9
 8001ab6:	0123      	lsls	r3, r4, #4
 8001ab8:	4644      	mov	r4, r8
 8001aba:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001abe:	4644      	mov	r4, r8
 8001ac0:	0122      	lsls	r2, r4, #4
 8001ac2:	1884      	adds	r4, r0, r2
 8001ac4:	603c      	str	r4, [r7, #0]
 8001ac6:	eb41 0303 	adc.w	r3, r1, r3
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ad0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  *pressure = (int32_t)p/256;
 8001ad4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da00      	bge.n	8001ade <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001adc:	33ff      	adds	r3, #255	@ 0xff
 8001ade:	121b      	asrs	r3, r3, #8
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ae6:	601a      	str	r2, [r3, #0]

	  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	2000022a 	.word	0x2000022a
 8001afc:	20000228 	.word	0x20000228
 8001b00:	20000226 	.word	0x20000226

08001b04 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b0e:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <SELECT+0x1c>)
 8001b10:	f002 f880 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b14:	2001      	movs	r0, #1
 8001b16:	f001 fdc7 	bl	80036a8 <HAL_Delay>
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000

08001b24 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b2e:	4804      	ldr	r0, [pc, #16]	@ (8001b40 <DESELECT+0x1c>)
 8001b30:	f002 f870 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f001 fdb7 	bl	80036a8 <HAL_Delay>
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000

08001b44 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b4e:	bf00      	nop
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <SPI_TxByte+0x30>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d1f8      	bne.n	8001b50 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001b5e:	1df9      	adds	r1, r7, #7
 8001b60:	2364      	movs	r3, #100	@ 0x64
 8001b62:	2201      	movs	r2, #1
 8001b64:	4803      	ldr	r0, [pc, #12]	@ (8001b74 <SPI_TxByte+0x30>)
 8001b66:	f003 fc52 	bl	800540e <HAL_SPI_Transmit>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000298 	.word	0x20000298

08001b78 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b84:	bf00      	nop
 8001b86:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <SPI_TxBuffer+0x30>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d1f8      	bne.n	8001b86 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001b94:	887a      	ldrh	r2, [r7, #2]
 8001b96:	2364      	movs	r3, #100	@ 0x64
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4803      	ldr	r0, [pc, #12]	@ (8001ba8 <SPI_TxBuffer+0x30>)
 8001b9c:	f003 fc37 	bl	800540e <HAL_SPI_Transmit>
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000298 	.word	0x20000298

08001bac <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001bb2:	23ff      	movs	r3, #255	@ 0xff
 8001bb4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001bb6:	bf00      	nop
 8001bb8:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <SPI_RxByte+0x34>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d1f8      	bne.n	8001bb8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001bc6:	1dba      	adds	r2, r7, #6
 8001bc8:	1df9      	adds	r1, r7, #7
 8001bca:	2364      	movs	r3, #100	@ 0x64
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <SPI_RxByte+0x34>)
 8001bd2:	f003 fd91 	bl	80056f8 <HAL_SPI_TransmitReceive>

	return data;
 8001bd6:	79bb      	ldrb	r3, [r7, #6]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000298 	.word	0x20000298

08001be4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001bec:	f7ff ffde 	bl	8001bac <SPI_RxByte>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	701a      	strb	r2, [r3, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001c06:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <SD_ReadyWait+0x30>)
 8001c08:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c0c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001c0e:	f7ff ffcd 	bl	8001bac <SPI_RxByte>
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	2bff      	cmp	r3, #255	@ 0xff
 8001c1a:	d003      	beq.n	8001c24 <SD_ReadyWait+0x24>
 8001c1c:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <SD_ReadyWait+0x30>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f4      	bne.n	8001c0e <SD_ReadyWait+0xe>

	return res;
 8001c24:	79fb      	ldrb	r3, [r7, #7]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000236 	.word	0x20000236

08001c34 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001c3a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001c3e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001c40:	f7ff ff70 	bl	8001b24 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	e005      	b.n	8001c56 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001c4a:	20ff      	movs	r0, #255	@ 0xff
 8001c4c:	f7ff ff7a 	bl	8001b44 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	3301      	adds	r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b09      	cmp	r3, #9
 8001c5a:	ddf6      	ble.n	8001c4a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001c5c:	f7ff ff52 	bl	8001b04 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001c60:	2340      	movs	r3, #64	@ 0x40
 8001c62:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001c74:	2395      	movs	r3, #149	@ 0x95
 8001c76:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2106      	movs	r1, #6
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff7b 	bl	8001b78 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001c82:	e002      	b.n	8001c8a <SD_PowerOn+0x56>
	{
		cnt--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001c8a:	f7ff ff8f 	bl	8001bac <SPI_RxByte>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d002      	beq.n	8001c9a <SD_PowerOn+0x66>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f4      	bne.n	8001c84 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001c9a:	f7ff ff43 	bl	8001b24 <DESELECT>
	SPI_TxByte(0XFF);
 8001c9e:	20ff      	movs	r0, #255	@ 0xff
 8001ca0:	f7ff ff50 	bl	8001b44 <SPI_TxByte>

	PowerFlag = 1;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	@ (8001cb4 <SD_PowerOn+0x80>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000239 	.word	0x20000239

08001cb8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <SD_PowerOff+0x14>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	20000239 	.word	0x20000239

08001cd0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <SD_CheckPower+0x14>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000239 	.word	0x20000239

08001ce8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001cf2:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <SD_RxDataBlock+0x58>)
 8001cf4:	22c8      	movs	r2, #200	@ 0xc8
 8001cf6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001cf8:	f7ff ff58 	bl	8001bac <SPI_RxByte>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	2bff      	cmp	r3, #255	@ 0xff
 8001d04:	d103      	bne.n	8001d0e <SD_RxDataBlock+0x26>
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <SD_RxDataBlock+0x58>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f4      	bne.n	8001cf8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d12:	d001      	beq.n	8001d18 <SD_RxDataBlock+0x30>
 8001d14:	2300      	movs	r3, #0
 8001d16:	e00f      	b.n	8001d38 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff60 	bl	8001be4 <SPI_RxBytePtr>
	} while(len--);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	1e5a      	subs	r2, r3, #1
 8001d28:	603a      	str	r2, [r7, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f4      	bne.n	8001d18 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001d2e:	f7ff ff3d 	bl	8001bac <SPI_RxByte>
	SPI_RxByte();
 8001d32:	f7ff ff3b 	bl	8001bac <SPI_RxByte>

	return TRUE;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000234 	.word	0x20000234

08001d44 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001d54:	f7ff ff54 	bl	8001c00 <SD_ReadyWait>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2bff      	cmp	r3, #255	@ 0xff
 8001d5c:	d001      	beq.n	8001d62 <SD_TxDataBlock+0x1e>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e02f      	b.n	8001dc2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff feed 	bl	8001b44 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	2bfd      	cmp	r3, #253	@ 0xfd
 8001d6e:	d020      	beq.n	8001db2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001d70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff feff 	bl	8001b78 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001d7a:	f7ff ff17 	bl	8001bac <SPI_RxByte>
		SPI_RxByte();
 8001d7e:	f7ff ff15 	bl	8001bac <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001d82:	e00b      	b.n	8001d9c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001d84:	f7ff ff12 	bl	8001bac <SPI_RxByte>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	d006      	beq.n	8001da4 <SD_TxDataBlock+0x60>
			i++;
 8001d96:	7bbb      	ldrb	r3, [r7, #14]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
 8001d9e:	2b40      	cmp	r3, #64	@ 0x40
 8001da0:	d9f0      	bls.n	8001d84 <SD_TxDataBlock+0x40>
 8001da2:	e000      	b.n	8001da6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001da4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001da6:	bf00      	nop
 8001da8:	f7ff ff00 	bl	8001bac <SPI_RxByte>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0fa      	beq.n	8001da8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d101      	bne.n	8001dc0 <SD_TxDataBlock+0x7c>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	6039      	str	r1, [r7, #0]
 8001dd4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001dd6:	f7ff ff13 	bl	8001c00 <SD_ReadyWait>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2bff      	cmp	r3, #255	@ 0xff
 8001dde:	d001      	beq.n	8001de4 <SD_SendCmd+0x1a>
 8001de0:	23ff      	movs	r3, #255	@ 0xff
 8001de2:	e042      	b.n	8001e6a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff feac 	bl	8001b44 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	0e1b      	lsrs	r3, r3, #24
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fea6 	bl	8001b44 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	0c1b      	lsrs	r3, r3, #16
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fea0 	bl	8001b44 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fe9a 	bl	8001b44 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fe95 	bl	8001b44 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	2b40      	cmp	r3, #64	@ 0x40
 8001e1e:	d102      	bne.n	8001e26 <SD_SendCmd+0x5c>
 8001e20:	2395      	movs	r3, #149	@ 0x95
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	e007      	b.n	8001e36 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2b48      	cmp	r3, #72	@ 0x48
 8001e2a:	d102      	bne.n	8001e32 <SD_SendCmd+0x68>
 8001e2c:	2387      	movs	r3, #135	@ 0x87
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e001      	b.n	8001e36 <SD_SendCmd+0x6c>
	else crc = 1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fe83 	bl	8001b44 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	2b4c      	cmp	r3, #76	@ 0x4c
 8001e42:	d101      	bne.n	8001e48 <SD_SendCmd+0x7e>
 8001e44:	f7ff feb2 	bl	8001bac <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001e48:	230a      	movs	r3, #10
 8001e4a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001e4c:	f7ff feae 	bl	8001bac <SPI_RxByte>
 8001e50:	4603      	mov	r3, r0
 8001e52:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001e54:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	da05      	bge.n	8001e68 <SD_SendCmd+0x9e>
 8001e5c:	7bbb      	ldrb	r3, [r7, #14]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	73bb      	strb	r3, [r7, #14]
 8001e62:	7bbb      	ldrb	r3, [r7, #14]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f1      	bne.n	8001e4c <SD_SendCmd+0x82>

	return res;
 8001e68:	7b7b      	ldrb	r3, [r7, #13]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <SD_disk_initialize+0x14>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0d1      	b.n	800202c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001e88:	4b6a      	ldr	r3, [pc, #424]	@ (8002034 <SD_disk_initialize+0x1c0>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <SD_disk_initialize+0x2a>
 8001e96:	4b67      	ldr	r3, [pc, #412]	@ (8002034 <SD_disk_initialize+0x1c0>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	e0c6      	b.n	800202c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001e9e:	f7ff fec9 	bl	8001c34 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001ea2:	f7ff fe2f 	bl	8001b04 <SELECT>

	/* check disk type */
	type = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2040      	movs	r0, #64	@ 0x40
 8001eae:	f7ff ff8c 	bl	8001dca <SD_SendCmd>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	f040 80a1 	bne.w	8001ffc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001eba:	4b5f      	ldr	r3, [pc, #380]	@ (8002038 <SD_disk_initialize+0x1c4>)
 8001ebc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ec0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001ec2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001ec6:	2048      	movs	r0, #72	@ 0x48
 8001ec8:	f7ff ff7f 	bl	8001dca <SD_SendCmd>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d155      	bne.n	8001f7e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	e00c      	b.n	8001ef2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001ed8:	7bfc      	ldrb	r4, [r7, #15]
 8001eda:	f7ff fe67 	bl	8001bac <SPI_RxByte>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f104 0310 	add.w	r3, r4, #16
 8001ee6:	443b      	add	r3, r7
 8001ee8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d9ef      	bls.n	8001ed8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001ef8:	7abb      	ldrb	r3, [r7, #10]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d17e      	bne.n	8001ffc <SD_disk_initialize+0x188>
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	2baa      	cmp	r3, #170	@ 0xaa
 8001f02:	d17b      	bne.n	8001ffc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001f04:	2100      	movs	r1, #0
 8001f06:	2077      	movs	r0, #119	@ 0x77
 8001f08:	f7ff ff5f 	bl	8001dca <SD_SendCmd>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d807      	bhi.n	8001f22 <SD_disk_initialize+0xae>
 8001f12:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f16:	2069      	movs	r0, #105	@ 0x69
 8001f18:	f7ff ff57 	bl	8001dca <SD_SendCmd>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d004      	beq.n	8001f2c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001f22:	4b45      	ldr	r3, [pc, #276]	@ (8002038 <SD_disk_initialize+0x1c4>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1ec      	bne.n	8001f04 <SD_disk_initialize+0x90>
 8001f2a:	e000      	b.n	8001f2e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001f2c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001f2e:	4b42      	ldr	r3, [pc, #264]	@ (8002038 <SD_disk_initialize+0x1c4>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d062      	beq.n	8001ffc <SD_disk_initialize+0x188>
 8001f36:	2100      	movs	r1, #0
 8001f38:	207a      	movs	r0, #122	@ 0x7a
 8001f3a:	f7ff ff46 	bl	8001dca <SD_SendCmd>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d15b      	bne.n	8001ffc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e00c      	b.n	8001f64 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001f4a:	7bfc      	ldrb	r4, [r7, #15]
 8001f4c:	f7ff fe2e 	bl	8001bac <SPI_RxByte>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	f104 0310 	add.w	r3, r4, #16
 8001f58:	443b      	add	r3, r7
 8001f5a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	3301      	adds	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d9ef      	bls.n	8001f4a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001f6a:	7a3b      	ldrb	r3, [r7, #8]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <SD_disk_initialize+0x104>
 8001f74:	230c      	movs	r3, #12
 8001f76:	e000      	b.n	8001f7a <SD_disk_initialize+0x106>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	73bb      	strb	r3, [r7, #14]
 8001f7c:	e03e      	b.n	8001ffc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2077      	movs	r0, #119	@ 0x77
 8001f82:	f7ff ff22 	bl	8001dca <SD_SendCmd>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d808      	bhi.n	8001f9e <SD_disk_initialize+0x12a>
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2069      	movs	r0, #105	@ 0x69
 8001f90:	f7ff ff1b 	bl	8001dca <SD_SendCmd>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d801      	bhi.n	8001f9e <SD_disk_initialize+0x12a>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e000      	b.n	8001fa0 <SD_disk_initialize+0x12c>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001fa2:	7bbb      	ldrb	r3, [r7, #14]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d10e      	bne.n	8001fc6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2077      	movs	r0, #119	@ 0x77
 8001fac:	f7ff ff0d 	bl	8001dca <SD_SendCmd>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d80e      	bhi.n	8001fd4 <SD_disk_initialize+0x160>
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	2069      	movs	r0, #105	@ 0x69
 8001fba:	f7ff ff06 	bl	8001dca <SD_SendCmd>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d107      	bne.n	8001fd4 <SD_disk_initialize+0x160>
 8001fc4:	e00c      	b.n	8001fe0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	2041      	movs	r0, #65	@ 0x41
 8001fca:	f7ff fefe 	bl	8001dca <SD_SendCmd>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d004      	beq.n	8001fde <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001fd4:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <SD_disk_initialize+0x1c4>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1e2      	bne.n	8001fa2 <SD_disk_initialize+0x12e>
 8001fdc:	e000      	b.n	8001fe0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001fde:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <SD_disk_initialize+0x1c4>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <SD_disk_initialize+0x184>
 8001fe8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fec:	2050      	movs	r0, #80	@ 0x50
 8001fee:	f7ff feec 	bl	8001dca <SD_SendCmd>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <SD_disk_initialize+0x188>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800203c <SD_disk_initialize+0x1c8>)
 8001ffe:	7bbb      	ldrb	r3, [r7, #14]
 8002000:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002002:	f7ff fd8f 	bl	8001b24 <DESELECT>
	SPI_RxByte();
 8002006:	f7ff fdd1 	bl	8001bac <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800200a:	7bbb      	ldrb	r3, [r7, #14]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8002010:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <SD_disk_initialize+0x1c0>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <SD_disk_initialize+0x1c0>)
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	e001      	b.n	8002026 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002022:	f7ff fe49 	bl	8001cb8 <SD_PowerOff>
	}

	return Stat;
 8002026:	4b03      	ldr	r3, [pc, #12]	@ (8002034 <SD_disk_initialize+0x1c0>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	b2db      	uxtb	r3, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bd90      	pop	{r4, r7, pc}
 8002034:	20000000 	.word	0x20000000
 8002038:	20000234 	.word	0x20000234
 800203c:	20000238 	.word	0x20000238

08002040 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SD_disk_status+0x14>
 8002050:	2301      	movs	r3, #1
 8002052:	e002      	b.n	800205a <SD_disk_status+0x1a>
	return Stat;
 8002054:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <SD_disk_status+0x28>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b2db      	uxtb	r3, r3
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000000 	.word	0x20000000

0800206c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <SD_disk_read+0x1c>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <SD_disk_read+0x20>
 8002088:	2304      	movs	r3, #4
 800208a:	e051      	b.n	8002130 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800208c:	4b2a      	ldr	r3, [pc, #168]	@ (8002138 <SD_disk_read+0xcc>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <SD_disk_read+0x32>
 800209a:	2303      	movs	r3, #3
 800209c:	e048      	b.n	8002130 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800209e:	4b27      	ldr	r3, [pc, #156]	@ (800213c <SD_disk_read+0xd0>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <SD_disk_read+0x44>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	025b      	lsls	r3, r3, #9
 80020ae:	607b      	str	r3, [r7, #4]

	SELECT();
 80020b0:	f7ff fd28 	bl	8001b04 <SELECT>

	if (count == 1)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d111      	bne.n	80020de <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	2051      	movs	r0, #81	@ 0x51
 80020be:	f7ff fe84 	bl	8001dca <SD_SendCmd>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d129      	bne.n	800211c <SD_disk_read+0xb0>
 80020c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020cc:	68b8      	ldr	r0, [r7, #8]
 80020ce:	f7ff fe0b 	bl	8001ce8 <SD_RxDataBlock>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d021      	beq.n	800211c <SD_disk_read+0xb0>
 80020d8:	2300      	movs	r3, #0
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	e01e      	b.n	800211c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	2052      	movs	r0, #82	@ 0x52
 80020e2:	f7ff fe72 	bl	8001dca <SD_SendCmd>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d117      	bne.n	800211c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80020ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020f0:	68b8      	ldr	r0, [r7, #8]
 80020f2:	f7ff fdf9 	bl	8001ce8 <SD_RxDataBlock>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <SD_disk_read+0xa6>
				buff += 512;
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002102:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	3b01      	subs	r3, #1
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1ed      	bne.n	80020ec <SD_disk_read+0x80>
 8002110:	e000      	b.n	8002114 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8002112:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002114:	2100      	movs	r1, #0
 8002116:	204c      	movs	r0, #76	@ 0x4c
 8002118:	f7ff fe57 	bl	8001dca <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800211c:	f7ff fd02 	bl	8001b24 <DESELECT>
	SPI_RxByte();
 8002120:	f7ff fd44 	bl	8001bac <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf14      	ite	ne
 800212a:	2301      	movne	r3, #1
 800212c:	2300      	moveq	r3, #0
 800212e:	b2db      	uxtb	r3, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000000 	.word	0x20000000
 800213c:	20000238 	.word	0x20000238

08002140 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	4603      	mov	r3, r0
 800214e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <SD_disk_write+0x1c>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <SD_disk_write+0x20>
 800215c:	2304      	movs	r3, #4
 800215e:	e06b      	b.n	8002238 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002160:	4b37      	ldr	r3, [pc, #220]	@ (8002240 <SD_disk_write+0x100>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <SD_disk_write+0x32>
 800216e:	2303      	movs	r3, #3
 8002170:	e062      	b.n	8002238 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8002172:	4b33      	ldr	r3, [pc, #204]	@ (8002240 <SD_disk_write+0x100>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <SD_disk_write+0x44>
 8002180:	2302      	movs	r3, #2
 8002182:	e059      	b.n	8002238 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002184:	4b2f      	ldr	r3, [pc, #188]	@ (8002244 <SD_disk_write+0x104>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <SD_disk_write+0x56>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	025b      	lsls	r3, r3, #9
 8002194:	607b      	str	r3, [r7, #4]

	SELECT();
 8002196:	f7ff fcb5 	bl	8001b04 <SELECT>

	if (count == 1)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d110      	bne.n	80021c2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	2058      	movs	r0, #88	@ 0x58
 80021a4:	f7ff fe11 	bl	8001dca <SD_SendCmd>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d13a      	bne.n	8002224 <SD_disk_write+0xe4>
 80021ae:	21fe      	movs	r1, #254	@ 0xfe
 80021b0:	68b8      	ldr	r0, [r7, #8]
 80021b2:	f7ff fdc7 	bl	8001d44 <SD_TxDataBlock>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d033      	beq.n	8002224 <SD_disk_write+0xe4>
			count = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	e030      	b.n	8002224 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80021c2:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <SD_disk_write+0x104>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80021ce:	2100      	movs	r1, #0
 80021d0:	2077      	movs	r0, #119	@ 0x77
 80021d2:	f7ff fdfa 	bl	8001dca <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	2057      	movs	r0, #87	@ 0x57
 80021da:	f7ff fdf6 	bl	8001dca <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	2059      	movs	r0, #89	@ 0x59
 80021e2:	f7ff fdf2 	bl	8001dca <SD_SendCmd>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d11b      	bne.n	8002224 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80021ec:	21fc      	movs	r1, #252	@ 0xfc
 80021ee:	68b8      	ldr	r0, [r7, #8]
 80021f0:	f7ff fda8 	bl	8001d44 <SD_TxDataBlock>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <SD_disk_write+0xd0>
				buff += 512;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002200:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	3b01      	subs	r3, #1
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1ee      	bne.n	80021ec <SD_disk_write+0xac>
 800220e:	e000      	b.n	8002212 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002210:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002212:	21fd      	movs	r1, #253	@ 0xfd
 8002214:	2000      	movs	r0, #0
 8002216:	f7ff fd95 	bl	8001d44 <SD_TxDataBlock>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <SD_disk_write+0xe4>
			{
				count = 1;
 8002220:	2301      	movs	r3, #1
 8002222:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002224:	f7ff fc7e 	bl	8001b24 <DESELECT>
	SPI_RxByte();
 8002228:	f7ff fcc0 	bl	8001bac <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf14      	ite	ne
 8002232:	2301      	movne	r3, #1
 8002234:	2300      	moveq	r3, #0
 8002236:	b2db      	uxtb	r3, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000000 	.word	0x20000000
 8002244:	20000238 	.word	0x20000238

08002248 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b08b      	sub	sp, #44	@ 0x2c
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	603a      	str	r2, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	460b      	mov	r3, r1
 8002256:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SD_disk_ioctl+0x1e>
 8002262:	2304      	movs	r3, #4
 8002264:	e113      	b.n	800248e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 800226c:	79bb      	ldrb	r3, [r7, #6]
 800226e:	2b05      	cmp	r3, #5
 8002270:	d124      	bne.n	80022bc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d012      	beq.n	80022a0 <SD_disk_ioctl+0x58>
 800227a:	2b02      	cmp	r3, #2
 800227c:	dc1a      	bgt.n	80022b4 <SD_disk_ioctl+0x6c>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <SD_disk_ioctl+0x40>
 8002282:	2b01      	cmp	r3, #1
 8002284:	d006      	beq.n	8002294 <SD_disk_ioctl+0x4c>
 8002286:	e015      	b.n	80022b4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002288:	f7ff fd16 	bl	8001cb8 <SD_PowerOff>
			res = RES_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002292:	e0fa      	b.n	800248a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8002294:	f7ff fcce 	bl	8001c34 <SD_PowerOn>
			res = RES_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800229e:	e0f4      	b.n	800248a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	1c5c      	adds	r4, r3, #1
 80022a4:	f7ff fd14 	bl	8001cd0 <SD_CheckPower>
 80022a8:	4603      	mov	r3, r0
 80022aa:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80022b2:	e0ea      	b.n	800248a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80022b4:	2304      	movs	r3, #4
 80022b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80022ba:	e0e6      	b.n	800248a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80022bc:	4b76      	ldr	r3, [pc, #472]	@ (8002498 <SD_disk_ioctl+0x250>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <SD_disk_ioctl+0x86>
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0df      	b.n	800248e <SD_disk_ioctl+0x246>

		SELECT();
 80022ce:	f7ff fc19 	bl	8001b04 <SELECT>

		switch (ctrl)
 80022d2:	79bb      	ldrb	r3, [r7, #6]
 80022d4:	2b0d      	cmp	r3, #13
 80022d6:	f200 80c9 	bhi.w	800246c <SD_disk_ioctl+0x224>
 80022da:	a201      	add	r2, pc, #4	@ (adr r2, 80022e0 <SD_disk_ioctl+0x98>)
 80022dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e0:	080023d7 	.word	0x080023d7
 80022e4:	08002319 	.word	0x08002319
 80022e8:	080023c7 	.word	0x080023c7
 80022ec:	0800246d 	.word	0x0800246d
 80022f0:	0800246d 	.word	0x0800246d
 80022f4:	0800246d 	.word	0x0800246d
 80022f8:	0800246d 	.word	0x0800246d
 80022fc:	0800246d 	.word	0x0800246d
 8002300:	0800246d 	.word	0x0800246d
 8002304:	0800246d 	.word	0x0800246d
 8002308:	0800246d 	.word	0x0800246d
 800230c:	080023e9 	.word	0x080023e9
 8002310:	0800240d 	.word	0x0800240d
 8002314:	08002431 	.word	0x08002431
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002318:	2100      	movs	r1, #0
 800231a:	2049      	movs	r0, #73	@ 0x49
 800231c:	f7ff fd55 	bl	8001dca <SD_SendCmd>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 80a6 	bne.w	8002474 <SD_disk_ioctl+0x22c>
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	2110      	movs	r1, #16
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fcda 	bl	8001ce8 <SD_RxDataBlock>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 809c 	beq.w	8002474 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800233c:	7b3b      	ldrb	r3, [r7, #12]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d10d      	bne.n	8002362 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002346:	7d7b      	ldrb	r3, [r7, #21]
 8002348:	461a      	mov	r2, r3
 800234a:	7d3b      	ldrb	r3, [r7, #20]
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	b29b      	uxth	r3, r3
 8002350:	4413      	add	r3, r2
 8002352:	b29b      	uxth	r3, r3
 8002354:	3301      	adds	r3, #1
 8002356:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002358:	8bfb      	ldrh	r3, [r7, #30]
 800235a:	029a      	lsls	r2, r3, #10
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e02d      	b.n	80023be <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002362:	7c7b      	ldrb	r3, [r7, #17]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	b2da      	uxtb	r2, r3
 800236a:	7dbb      	ldrb	r3, [r7, #22]
 800236c:	09db      	lsrs	r3, r3, #7
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4413      	add	r3, r2
 8002372:	b2da      	uxtb	r2, r3
 8002374:	7d7b      	ldrb	r3, [r7, #21]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f003 0306 	and.w	r3, r3, #6
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4413      	add	r3, r2
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3302      	adds	r3, #2
 8002386:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800238a:	7d3b      	ldrb	r3, [r7, #20]
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	b29b      	uxth	r3, r3
 8002398:	4413      	add	r3, r2
 800239a:	b29a      	uxth	r2, r3
 800239c:	7cbb      	ldrb	r3, [r7, #18]
 800239e:	029b      	lsls	r3, r3, #10
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80023b0:	8bfa      	ldrh	r2, [r7, #30]
 80023b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80023b6:	3b09      	subs	r3, #9
 80023b8:	409a      	lsls	r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80023c4:	e056      	b.n	8002474 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023cc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80023d4:	e055      	b.n	8002482 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80023d6:	f7ff fc13 	bl	8001c00 <SD_ReadyWait>
 80023da:	4603      	mov	r3, r0
 80023dc:	2bff      	cmp	r3, #255	@ 0xff
 80023de:	d14b      	bne.n	8002478 <SD_disk_ioctl+0x230>
 80023e0:	2300      	movs	r3, #0
 80023e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80023e6:	e047      	b.n	8002478 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80023e8:	2100      	movs	r1, #0
 80023ea:	2049      	movs	r0, #73	@ 0x49
 80023ec:	f7ff fced 	bl	8001dca <SD_SendCmd>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d142      	bne.n	800247c <SD_disk_ioctl+0x234>
 80023f6:	2110      	movs	r1, #16
 80023f8:	6a38      	ldr	r0, [r7, #32]
 80023fa:	f7ff fc75 	bl	8001ce8 <SD_RxDataBlock>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d03b      	beq.n	800247c <SD_disk_ioctl+0x234>
 8002404:	2300      	movs	r3, #0
 8002406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800240a:	e037      	b.n	800247c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800240c:	2100      	movs	r1, #0
 800240e:	204a      	movs	r0, #74	@ 0x4a
 8002410:	f7ff fcdb 	bl	8001dca <SD_SendCmd>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d132      	bne.n	8002480 <SD_disk_ioctl+0x238>
 800241a:	2110      	movs	r1, #16
 800241c:	6a38      	ldr	r0, [r7, #32]
 800241e:	f7ff fc63 	bl	8001ce8 <SD_RxDataBlock>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d02b      	beq.n	8002480 <SD_disk_ioctl+0x238>
 8002428:	2300      	movs	r3, #0
 800242a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800242e:	e027      	b.n	8002480 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002430:	2100      	movs	r1, #0
 8002432:	207a      	movs	r0, #122	@ 0x7a
 8002434:	f7ff fcc9 	bl	8001dca <SD_SendCmd>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d116      	bne.n	800246c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800243e:	2300      	movs	r3, #0
 8002440:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002444:	e00b      	b.n	800245e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8002446:	6a3c      	ldr	r4, [r7, #32]
 8002448:	1c63      	adds	r3, r4, #1
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	f7ff fbae 	bl	8001bac <SPI_RxByte>
 8002450:	4603      	mov	r3, r0
 8002452:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002454:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002458:	3301      	adds	r3, #1
 800245a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800245e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002462:	2b03      	cmp	r3, #3
 8002464:	d9ef      	bls.n	8002446 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 800246c:	2304      	movs	r3, #4
 800246e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002472:	e006      	b.n	8002482 <SD_disk_ioctl+0x23a>
			break;
 8002474:	bf00      	nop
 8002476:	e004      	b.n	8002482 <SD_disk_ioctl+0x23a>
			break;
 8002478:	bf00      	nop
 800247a:	e002      	b.n	8002482 <SD_disk_ioctl+0x23a>
			break;
 800247c:	bf00      	nop
 800247e:	e000      	b.n	8002482 <SD_disk_ioctl+0x23a>
			break;
 8002480:	bf00      	nop
		}

		DESELECT();
 8002482:	f7ff fb4f 	bl	8001b24 <DESELECT>
		SPI_RxByte();
 8002486:	f7ff fb91 	bl	8001bac <SPI_RxByte>
	}

	return res;
 800248a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800248e:	4618      	mov	r0, r3
 8002490:	372c      	adds	r7, #44	@ 0x2c
 8002492:	46bd      	mov	sp, r7
 8002494:	bd90      	pop	{r4, r7, pc}
 8002496:	bf00      	nop
 8002498:	20000000 	.word	0x20000000

0800249c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08e      	sub	sp, #56	@ 0x38
 80024a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	60da      	str	r2, [r3, #12]
 80024b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b2:	4b89      	ldr	r3, [pc, #548]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	4a88      	ldr	r2, [pc, #544]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024be:	4b86      	ldr	r3, [pc, #536]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	623b      	str	r3, [r7, #32]
 80024c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ca:	4b83      	ldr	r3, [pc, #524]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4a82      	ldr	r2, [pc, #520]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 80024d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d6:	4b80      	ldr	r3, [pc, #512]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	4b7d      	ldr	r3, [pc, #500]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	4a7c      	ldr	r2, [pc, #496]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ee:	4b7a      	ldr	r3, [pc, #488]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	61bb      	str	r3, [r7, #24]
 80024f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fa:	4b77      	ldr	r3, [pc, #476]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	4a76      	ldr	r2, [pc, #472]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	6313      	str	r3, [r2, #48]	@ 0x30
 8002506:	4b74      	ldr	r3, [pc, #464]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002512:	4b71      	ldr	r3, [pc, #452]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	4a70      	ldr	r2, [pc, #448]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 8002518:	f043 0320 	orr.w	r3, r3, #32
 800251c:	6313      	str	r3, [r2, #48]	@ 0x30
 800251e:	4b6e      	ldr	r3, [pc, #440]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800252a:	4b6b      	ldr	r3, [pc, #428]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	4a6a      	ldr	r2, [pc, #424]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 8002530:	f043 0310 	orr.w	r3, r3, #16
 8002534:	6313      	str	r3, [r2, #48]	@ 0x30
 8002536:	4b68      	ldr	r3, [pc, #416]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002542:	4b65      	ldr	r3, [pc, #404]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	4a64      	ldr	r2, [pc, #400]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 8002548:	f043 0308 	orr.w	r3, r3, #8
 800254c:	6313      	str	r3, [r2, #48]	@ 0x30
 800254e:	4b62      	ldr	r3, [pc, #392]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800255a:	4b5f      	ldr	r3, [pc, #380]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a5e      	ldr	r2, [pc, #376]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 8002560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b5c      	ldr	r3, [pc, #368]	@ (80026d8 <MX_GPIO_Init+0x23c>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002572:	2200      	movs	r2, #0
 8002574:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002578:	4858      	ldr	r0, [pc, #352]	@ (80026dc <MX_GPIO_Init+0x240>)
 800257a:	f001 fb4b 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_OLED_Pin|ST7735_RES_Pin_Pin|ST7735_DC_Pin_Pin, GPIO_PIN_RESET);
 800257e:	2200      	movs	r2, #0
 8002580:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002584:	4856      	ldr	r0, [pc, #344]	@ (80026e0 <MX_GPIO_Init+0x244>)
 8002586:	f001 fb45 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_BMP_Pin|CS_SDcard_Pin, GPIO_PIN_RESET);
 800258a:	2200      	movs	r2, #0
 800258c:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8002590:	4854      	ldr	r0, [pc, #336]	@ (80026e4 <MX_GPIO_Init+0x248>)
 8002592:	f001 fb3f 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002596:	2200      	movs	r2, #0
 8002598:	2140      	movs	r1, #64	@ 0x40
 800259a:	4853      	ldr	r0, [pc, #332]	@ (80026e8 <MX_GPIO_Init+0x24c>)
 800259c:	f001 fb3a 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80025a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80025b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b4:	4619      	mov	r1, r3
 80025b6:	484d      	ldr	r0, [pc, #308]	@ (80026ec <MX_GPIO_Init+0x250>)
 80025b8:	f001 f980 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80025bc:	2332      	movs	r3, #50	@ 0x32
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025cc:	230b      	movs	r3, #11
 80025ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d4:	4619      	mov	r1, r3
 80025d6:	4845      	ldr	r0, [pc, #276]	@ (80026ec <MX_GPIO_Init+0x250>)
 80025d8:	f001 f970 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025dc:	2386      	movs	r3, #134	@ 0x86
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e8:	2303      	movs	r3, #3
 80025ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ec:	230b      	movs	r3, #11
 80025ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025f4:	4619      	mov	r1, r3
 80025f6:	483e      	ldr	r0, [pc, #248]	@ (80026f0 <MX_GPIO_Init+0x254>)
 80025f8:	f001 f960 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80025fc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002612:	4619      	mov	r1, r3
 8002614:	4831      	ldr	r0, [pc, #196]	@ (80026dc <MX_GPIO_Init+0x240>)
 8002616:	f001 f951 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_OLED_Pin ST7735_RES_Pin_Pin ST7735_DC_Pin_Pin */
  GPIO_InitStruct.Pin = CS_OLED_Pin|ST7735_RES_Pin_Pin|ST7735_DC_Pin_Pin;
 800261a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002620:	2301      	movs	r3, #1
 8002622:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800262c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002630:	4619      	mov	r1, r3
 8002632:	482b      	ldr	r0, [pc, #172]	@ (80026e0 <MX_GPIO_Init+0x244>)
 8002634:	f001 f942 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_BMP_Pin CS_SDcard_Pin */
  GPIO_InitStruct.Pin = CS_BMP_Pin|CS_SDcard_Pin;
 8002638:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263e:	2301      	movs	r3, #1
 8002640:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800264a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800264e:	4619      	mov	r1, r3
 8002650:	4824      	ldr	r0, [pc, #144]	@ (80026e4 <MX_GPIO_Init+0x248>)
 8002652:	f001 f933 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002656:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002664:	2303      	movs	r3, #3
 8002666:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002668:	230b      	movs	r3, #11
 800266a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800266c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002670:	4619      	mov	r1, r3
 8002672:	481a      	ldr	r0, [pc, #104]	@ (80026dc <MX_GPIO_Init+0x240>)
 8002674:	f001 f922 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002678:	2340      	movs	r3, #64	@ 0x40
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267c:	2301      	movs	r3, #1
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800268c:	4619      	mov	r1, r3
 800268e:	4816      	ldr	r0, [pc, #88]	@ (80026e8 <MX_GPIO_Init+0x24c>)
 8002690:	f001 f914 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002694:	2380      	movs	r3, #128	@ 0x80
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002698:	2300      	movs	r3, #0
 800269a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80026a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a4:	4619      	mov	r1, r3
 80026a6:	4810      	ldr	r0, [pc, #64]	@ (80026e8 <MX_GPIO_Init+0x24c>)
 80026a8:	f001 f908 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80026ac:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026be:	230b      	movs	r3, #11
 80026c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026c6:	4619      	mov	r1, r3
 80026c8:	4807      	ldr	r0, [pc, #28]	@ (80026e8 <MX_GPIO_Init+0x24c>)
 80026ca:	f001 f8f7 	bl	80038bc <HAL_GPIO_Init>

}
 80026ce:	bf00      	nop
 80026d0:	3738      	adds	r7, #56	@ 0x38
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40021400 	.word	0x40021400
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40021800 	.word	0x40021800
 80026ec:	40020800 	.word	0x40020800
 80026f0:	40020000 	.word	0x40020000

080026f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002768 <MX_I2C1_Init+0x74>)
 80026fa:	4a1c      	ldr	r2, [pc, #112]	@ (800276c <MX_I2C1_Init+0x78>)
 80026fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80026fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002768 <MX_I2C1_Init+0x74>)
 8002700:	4a1b      	ldr	r2, [pc, #108]	@ (8002770 <MX_I2C1_Init+0x7c>)
 8002702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002704:	4b18      	ldr	r3, [pc, #96]	@ (8002768 <MX_I2C1_Init+0x74>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800270a:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <MX_I2C1_Init+0x74>)
 800270c:	2201      	movs	r2, #1
 800270e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002710:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <MX_I2C1_Init+0x74>)
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002716:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <MX_I2C1_Init+0x74>)
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800271c:	4b12      	ldr	r3, [pc, #72]	@ (8002768 <MX_I2C1_Init+0x74>)
 800271e:	2200      	movs	r2, #0
 8002720:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002722:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <MX_I2C1_Init+0x74>)
 8002724:	2200      	movs	r2, #0
 8002726:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002728:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <MX_I2C1_Init+0x74>)
 800272a:	2200      	movs	r2, #0
 800272c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800272e:	480e      	ldr	r0, [pc, #56]	@ (8002768 <MX_I2C1_Init+0x74>)
 8002730:	f001 fa8a 	bl	8003c48 <HAL_I2C_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800273a:	f000 f9b7 	bl	8002aac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800273e:	2100      	movs	r1, #0
 8002740:	4809      	ldr	r0, [pc, #36]	@ (8002768 <MX_I2C1_Init+0x74>)
 8002742:	f001 fb1d 	bl	8003d80 <HAL_I2CEx_ConfigAnalogFilter>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800274c:	f000 f9ae 	bl	8002aac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002750:	2100      	movs	r1, #0
 8002752:	4805      	ldr	r0, [pc, #20]	@ (8002768 <MX_I2C1_Init+0x74>)
 8002754:	f001 fb5f 	bl	8003e16 <HAL_I2CEx_ConfigDigitalFilter>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800275e:	f000 f9a5 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000023c 	.word	0x2000023c
 800276c:	40005400 	.word	0x40005400
 8002770:	00808cd2 	.word	0x00808cd2

08002774 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b0aa      	sub	sp, #168	@ 0xa8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800278c:	f107 0310 	add.w	r3, r7, #16
 8002790:	2284      	movs	r2, #132	@ 0x84
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f005 fd35 	bl	8008204 <memset>
  if(i2cHandle->Instance==I2C1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a22      	ldr	r2, [pc, #136]	@ (8002828 <HAL_I2C_MspInit+0xb4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d13c      	bne.n	800281e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027aa:	2300      	movs	r3, #0
 80027ac:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ae:	f107 0310 	add.w	r3, r7, #16
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 f990 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80027be:	f000 f975 	bl	8002aac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c2:	4b1a      	ldr	r3, [pc, #104]	@ (800282c <HAL_I2C_MspInit+0xb8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a19      	ldr	r2, [pc, #100]	@ (800282c <HAL_I2C_MspInit+0xb8>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b17      	ldr	r3, [pc, #92]	@ (800282c <HAL_I2C_MspInit+0xb8>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e2:	2312      	movs	r3, #18
 80027e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027f4:	2304      	movs	r3, #4
 80027f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80027fe:	4619      	mov	r1, r3
 8002800:	480b      	ldr	r0, [pc, #44]	@ (8002830 <HAL_I2C_MspInit+0xbc>)
 8002802:	f001 f85b 	bl	80038bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002806:	4b09      	ldr	r3, [pc, #36]	@ (800282c <HAL_I2C_MspInit+0xb8>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	4a08      	ldr	r2, [pc, #32]	@ (800282c <HAL_I2C_MspInit+0xb8>)
 800280c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002810:	6413      	str	r3, [r2, #64]	@ 0x40
 8002812:	4b06      	ldr	r3, [pc, #24]	@ (800282c <HAL_I2C_MspInit+0xb8>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800281e:	bf00      	nop
 8002820:	37a8      	adds	r7, #168	@ 0xa8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40005400 	.word	0x40005400
 800282c:	40023800 	.word	0x40023800
 8002830:	40020400 	.word	0x40020400

08002834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b0a0      	sub	sp, #128	@ 0x80
 8002838:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800283a:	f000 fed8 	bl	80035ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800283e:	f000 f8cd 	bl	80029dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002842:	f7ff fe2b 	bl	800249c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002846:	f7ff ff55 	bl	80026f4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800284a:	f000 fd6f 	bl	800332c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800284e:	f000 fdfd 	bl	800344c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8002852:	f000 f943 	bl	8002adc <MX_SPI1_Init>
  MX_FATFS_Init();
 8002856:	f004 faef 	bl	8006e38 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 800285a:	f000 fac1 	bl	8002de0 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 800285e:	2000      	movs	r0, #0
 8002860:	f000 fc0e 	bl	8003080 <ST7735_FillScreen>

  BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8002864:	2301      	movs	r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	2101      	movs	r1, #1
 800286a:	4852      	ldr	r0, [pc, #328]	@ (80029b4 <main+0x180>)
 800286c:	f7fe fd06 	bl	800127c <BMP280_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	BMP280_ReadTemperatureAndPressure(&BMP280temperature, &BMP280pressure);
 8002870:	4951      	ldr	r1, [pc, #324]	@ (80029b8 <main+0x184>)
 8002872:	4852      	ldr	r0, [pc, #328]	@ (80029bc <main+0x188>)
 8002874:	f7fe fe5c 	bl	8001530 <BMP280_ReadTemperatureAndPressure>
  	printf("Temperature: %.2f °C, %ld Pa\n\r", BMP280temperature, BMP280pressure);
 8002878:	4b50      	ldr	r3, [pc, #320]	@ (80029bc <main+0x188>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fe83 	bl	8000588 <__aeabi_f2d>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	494c      	ldr	r1, [pc, #304]	@ (80029b8 <main+0x184>)
 8002888:	6809      	ldr	r1, [r1, #0]
 800288a:	9100      	str	r1, [sp, #0]
 800288c:	484c      	ldr	r0, [pc, #304]	@ (80029c0 <main+0x18c>)
 800288e:	f005 fb7b 	bl	8007f88 <iprintf>
  	//SDcardWriteData(&BMP280temperature, &BMP280pressure);



    char buffer[100];
    int tempInt = (int)(BMP280temperature * 100);
 8002892:	4b4a      	ldr	r3, [pc, #296]	@ (80029bc <main+0x188>)
 8002894:	edd3 7a00 	vldr	s15, [r3]
 8002898:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80029c4 <main+0x190>
 800289c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a4:	ee17 3a90 	vmov	r3, s15
 80028a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int tempFrac = tempInt % 100;
 80028aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ac:	4a46      	ldr	r2, [pc, #280]	@ (80029c8 <main+0x194>)
 80028ae:	fb82 1203 	smull	r1, r2, r2, r3
 80028b2:	1151      	asrs	r1, r2, #5
 80028b4:	17da      	asrs	r2, r3, #31
 80028b6:	1a8a      	subs	r2, r1, r2
 80028b8:	2164      	movs	r1, #100	@ 0x64
 80028ba:	fb01 f202 	mul.w	r2, r1, r2
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	66bb      	str	r3, [r7, #104]	@ 0x68

    // Temperatura
    int len = snprintf(NULL, 0, "Temp: %d.%02d °C", tempInt / 100, tempFrac) + 1;
 80028c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c4:	4a40      	ldr	r2, [pc, #256]	@ (80029c8 <main+0x194>)
 80028c6:	fb82 1203 	smull	r1, r2, r2, r3
 80028ca:	1152      	asrs	r2, r2, #5
 80028cc:	17db      	asrs	r3, r3, #31
 80028ce:	1ad2      	subs	r2, r2, r3
 80028d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	4a3d      	ldr	r2, [pc, #244]	@ (80029cc <main+0x198>)
 80028d8:	2100      	movs	r1, #0
 80028da:	2000      	movs	r0, #0
 80028dc:	f005 fb66 	bl	8007fac <sniprintf>
 80028e0:	4603      	mov	r3, r0
 80028e2:	3301      	adds	r3, #1
 80028e4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (len < sizeof(buffer)) {
 80028e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028e8:	2b63      	cmp	r3, #99	@ 0x63
 80028ea:	d81d      	bhi.n	8002928 <main+0xf4>
    	snprintf(buffer, sizeof(buffer), "Temp: %d.%02d °C", tempInt / 100, tempFrac);
 80028ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ee:	4a36      	ldr	r2, [pc, #216]	@ (80029c8 <main+0x194>)
 80028f0:	fb82 1203 	smull	r1, r2, r2, r3
 80028f4:	1152      	asrs	r2, r2, #5
 80028f6:	17db      	asrs	r3, r3, #31
 80028f8:	1ad2      	subs	r2, r2, r3
 80028fa:	4638      	mov	r0, r7
 80028fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	4a32      	ldr	r2, [pc, #200]	@ (80029cc <main+0x198>)
 8002904:	2164      	movs	r1, #100	@ 0x64
 8002906:	f005 fb51 	bl	8007fac <sniprintf>
    	ST7735_WriteString(10, 10, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800290a:	4b31      	ldr	r3, [pc, #196]	@ (80029d0 <main+0x19c>)
 800290c:	4639      	mov	r1, r7
 800290e:	2200      	movs	r2, #0
 8002910:	9202      	str	r2, [sp, #8]
 8002912:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002916:	9201      	str	r2, [sp, #4]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	9200      	str	r2, [sp, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	460a      	mov	r2, r1
 8002920:	210a      	movs	r1, #10
 8002922:	200a      	movs	r0, #10
 8002924:	f000 faed 	bl	8002f02 <ST7735_WriteString>
    }
    ST7735_WriteString(10, 10, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002928:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <main+0x19c>)
 800292a:	4639      	mov	r1, r7
 800292c:	2200      	movs	r2, #0
 800292e:	9202      	str	r2, [sp, #8]
 8002930:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002934:	9201      	str	r2, [sp, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	9200      	str	r2, [sp, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	460a      	mov	r2, r1
 800293e:	210a      	movs	r1, #10
 8002940:	200a      	movs	r0, #10
 8002942:	f000 fade 	bl	8002f02 <ST7735_WriteString>

    // Cisnienie
    len = snprintf(NULL, 0, "Pressure: %ld Pa", BMP280pressure) + 1;
 8002946:	4b1c      	ldr	r3, [pc, #112]	@ (80029b8 <main+0x184>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a22      	ldr	r2, [pc, #136]	@ (80029d4 <main+0x1a0>)
 800294c:	2100      	movs	r1, #0
 800294e:	2000      	movs	r0, #0
 8002950:	f005 fb2c 	bl	8007fac <sniprintf>
 8002954:	4603      	mov	r3, r0
 8002956:	3301      	adds	r3, #1
 8002958:	667b      	str	r3, [r7, #100]	@ 0x64
    if (len < sizeof(buffer)) {
 800295a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800295c:	2b63      	cmp	r3, #99	@ 0x63
 800295e:	d815      	bhi.n	800298c <main+0x158>
    	snprintf(buffer, sizeof(buffer), "Prs: %ld Pa", BMP280pressure);
 8002960:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <main+0x184>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4638      	mov	r0, r7
 8002966:	4a1c      	ldr	r2, [pc, #112]	@ (80029d8 <main+0x1a4>)
 8002968:	2164      	movs	r1, #100	@ 0x64
 800296a:	f005 fb1f 	bl	8007fac <sniprintf>
    	ST7735_WriteString(10, 20, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800296e:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <main+0x19c>)
 8002970:	4639      	mov	r1, r7
 8002972:	2200      	movs	r2, #0
 8002974:	9202      	str	r2, [sp, #8]
 8002976:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800297a:	9201      	str	r2, [sp, #4]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	9200      	str	r2, [sp, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	460a      	mov	r2, r1
 8002984:	2114      	movs	r1, #20
 8002986:	200a      	movs	r0, #10
 8002988:	f000 fabb 	bl	8002f02 <ST7735_WriteString>
    }
    ST7735_WriteString(10, 20, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800298c:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <main+0x19c>)
 800298e:	4639      	mov	r1, r7
 8002990:	2200      	movs	r2, #0
 8002992:	9202      	str	r2, [sp, #8]
 8002994:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002998:	9201      	str	r2, [sp, #4]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	9200      	str	r2, [sp, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	460a      	mov	r2, r1
 80029a2:	2114      	movs	r1, #20
 80029a4:	200a      	movs	r0, #10
 80029a6:	f000 faac 	bl	8002f02 <ST7735_WriteString>


  	HAL_Delay(1000);
 80029aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029ae:	f000 fe7b 	bl	80036a8 <HAL_Delay>
  {
 80029b2:	e75d      	b.n	8002870 <main+0x3c>
 80029b4:	20000298 	.word	0x20000298
 80029b8:	20000294 	.word	0x20000294
 80029bc:	20000290 	.word	0x20000290
 80029c0:	0800b740 	.word	0x0800b740
 80029c4:	42c80000 	.word	0x42c80000
 80029c8:	51eb851f 	.word	0x51eb851f
 80029cc:	0800b760 	.word	0x0800b760
 80029d0:	20000004 	.word	0x20000004
 80029d4:	0800b774 	.word	0x0800b774
 80029d8:	0800b788 	.word	0x0800b788

080029dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b094      	sub	sp, #80	@ 0x50
 80029e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e2:	f107 0320 	add.w	r3, r7, #32
 80029e6:	2230      	movs	r2, #48	@ 0x30
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f005 fc0a 	bl	8008204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f0:	f107 030c 	add.w	r3, r7, #12
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a00:	f001 fb90 	bl	8004124 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a04:	4b27      	ldr	r3, [pc, #156]	@ (8002aa4 <SystemClock_Config+0xc8>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	4a26      	ldr	r2, [pc, #152]	@ (8002aa4 <SystemClock_Config+0xc8>)
 8002a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a10:	4b24      	ldr	r3, [pc, #144]	@ (8002aa4 <SystemClock_Config+0xc8>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a1c:	4b22      	ldr	r3, [pc, #136]	@ (8002aa8 <SystemClock_Config+0xcc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a24:	4a20      	ldr	r2, [pc, #128]	@ (8002aa8 <SystemClock_Config+0xcc>)
 8002a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa8 <SystemClock_Config+0xcc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a42:	2302      	movs	r3, #2
 8002a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002a50:	2348      	movs	r3, #72	@ 0x48
 8002a52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a54:	2302      	movs	r3, #2
 8002a56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a5c:	f107 0320 	add.w	r3, r7, #32
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 fb6f 	bl	8004144 <HAL_RCC_OscConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a6c:	f000 f81e 	bl	8002aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a70:	230f      	movs	r3, #15
 8002a72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a74:	2302      	movs	r3, #2
 8002a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a86:	f107 030c 	add.w	r3, r7, #12
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 fdfd 	bl	800468c <HAL_RCC_ClockConfig>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002a98:	f000 f808 	bl	8002aac <Error_Handler>
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	3750      	adds	r7, #80	@ 0x50
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40007000 	.word	0x40007000

08002aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab0:	b672      	cpsid	i
}
 8002ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ab4:	bf00      	nop
 8002ab6:	e7fd      	b.n	8002ab4 <Error_Handler+0x8>

08002ab8 <__io_putchar>:
 */

#include "usart.h"

int __io_putchar(int ch)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 8002ac0:	1d39      	adds	r1, r7, #4
 8002ac2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4803      	ldr	r0, [pc, #12]	@ (8002ad8 <__io_putchar+0x20>)
 8002aca:	f003 fa0d 	bl	8005ee8 <HAL_UART_Transmit>
	return ch;
 8002ace:	687b      	ldr	r3, [r7, #4]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000300 	.word	0x20000300

08002adc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b54 <MX_SPI1_Init+0x78>)
 8002ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002ae8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002aec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aee:	4b18      	ldr	r3, [pc, #96]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002af4:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002af6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002afa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002afc:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002afe:	2202      	movs	r2, #2
 8002b00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002b02:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b08:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002b12:	2220      	movs	r2, #32
 8002b14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b22:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b28:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b2e:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b3a:	4805      	ldr	r0, [pc, #20]	@ (8002b50 <MX_SPI1_Init+0x74>)
 8002b3c:	f002 fbbc 	bl	80052b8 <HAL_SPI_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b46:	f7ff ffb1 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000298 	.word	0x20000298
 8002b54:	40013000 	.word	0x40013000

08002b58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	@ 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a25      	ldr	r2, [pc, #148]	@ (8002c0c <HAL_SPI_MspInit+0xb4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d143      	bne.n	8002c02 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b7a:	4b25      	ldr	r3, [pc, #148]	@ (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	4a24      	ldr	r2, [pc, #144]	@ (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002b80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b86:	4b22      	ldr	r3, [pc, #136]	@ (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b92:	4b1f      	ldr	r3, [pc, #124]	@ (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	4a1e      	ldr	r2, [pc, #120]	@ (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002baa:	4b19      	ldr	r3, [pc, #100]	@ (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	4a18      	ldr	r2, [pc, #96]	@ (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb6:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002bc2:	2360      	movs	r3, #96	@ 0x60
 8002bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bd2:	2305      	movs	r3, #5
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd6:	f107 0314 	add.w	r3, r7, #20
 8002bda:	4619      	mov	r1, r3
 8002bdc:	480d      	ldr	r0, [pc, #52]	@ (8002c14 <HAL_SPI_MspInit+0xbc>)
 8002bde:	f000 fe6d 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002be2:	2320      	movs	r3, #32
 8002be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4806      	ldr	r0, [pc, #24]	@ (8002c18 <HAL_SPI_MspInit+0xc0>)
 8002bfe:	f000 fe5d 	bl	80038bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c02:	bf00      	nop
 8002c04:	3728      	adds	r7, #40	@ 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40013000 	.word	0x40013000
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400

08002c1c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002c20:	2200      	movs	r2, #0
 8002c22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c26:	4802      	ldr	r0, [pc, #8]	@ (8002c30 <ST7735_Select+0x14>)
 8002c28:	f000 fff4 	bl	8003c14 <HAL_GPIO_WritePin>
}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021400 	.word	0x40021400

08002c34 <ST7735_Unselect>:

void ST7735_Unselect() {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c3e:	4802      	ldr	r0, [pc, #8]	@ (8002c48 <ST7735_Unselect+0x14>)
 8002c40:	f000 ffe8 	bl	8003c14 <HAL_GPIO_WritePin>
}
 8002c44:	bf00      	nop
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021400 	.word	0x40021400

08002c4c <ST7735_Reset>:

static void ST7735_Reset() {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002c50:	2200      	movs	r2, #0
 8002c52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c56:	4807      	ldr	r0, [pc, #28]	@ (8002c74 <ST7735_Reset+0x28>)
 8002c58:	f000 ffdc 	bl	8003c14 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002c5c:	2005      	movs	r0, #5
 8002c5e:	f000 fd23 	bl	80036a8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002c62:	2201      	movs	r2, #1
 8002c64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c68:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <ST7735_Reset+0x28>)
 8002c6a:	f000 ffd3 	bl	8003c14 <HAL_GPIO_WritePin>
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40021400 	.word	0x40021400

08002c78 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002c82:	2200      	movs	r2, #0
 8002c84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c88:	4806      	ldr	r0, [pc, #24]	@ (8002ca4 <ST7735_WriteCommand+0x2c>)
 8002c8a:	f000 ffc3 	bl	8003c14 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002c8e:	1df9      	adds	r1, r7, #7
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295
 8002c94:	2201      	movs	r2, #1
 8002c96:	4804      	ldr	r0, [pc, #16]	@ (8002ca8 <ST7735_WriteCommand+0x30>)
 8002c98:	f002 fbb9 	bl	800540e <HAL_SPI_Transmit>
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021400 	.word	0x40021400
 8002ca8:	20000298 	.word	0x20000298

08002cac <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cbc:	4807      	ldr	r0, [pc, #28]	@ (8002cdc <ST7735_WriteData+0x30>)
 8002cbe:	f000 ffa9 	bl	8003c14 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4804      	ldr	r0, [pc, #16]	@ (8002ce0 <ST7735_WriteData+0x34>)
 8002cce:	f002 fb9e 	bl	800540e <HAL_SPI_Transmit>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40021400 	.word	0x40021400
 8002ce0:	20000298 	.word	0x20000298

08002ce4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8002cf6:	e034      	b.n	8002d62 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8002d02:	7afb      	ldrb	r3, [r7, #11]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ffb7 	bl	8002c78 <ST7735_WriteCommand>

        numArgs = *addr++;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002d14:	7abb      	ldrb	r3, [r7, #10]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8002d1e:	7abb      	ldrb	r3, [r7, #10]
 8002d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d24:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002d26:	7abb      	ldrb	r3, [r7, #10]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002d2c:	7abb      	ldrb	r3, [r7, #10]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ffbb 	bl	8002cac <ST7735_WriteData>
            addr += numArgs;
 8002d36:	7abb      	ldrb	r3, [r7, #10]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8002d3e:	89bb      	ldrh	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00e      	beq.n	8002d62 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8002d4e:	89bb      	ldrh	r3, [r7, #12]
 8002d50:	2bff      	cmp	r3, #255	@ 0xff
 8002d52:	d102      	bne.n	8002d5a <ST7735_ExecuteCommandList+0x76>
 8002d54:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002d58:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002d5a:	89bb      	ldrh	r3, [r7, #12]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fca3 	bl	80036a8 <HAL_Delay>
    while(numCommands--) {
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	1e5a      	subs	r2, r3, #1
 8002d66:	73fa      	strb	r2, [r7, #15]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1c5      	bne.n	8002cf8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002d76:	b590      	push	{r4, r7, lr}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	4608      	mov	r0, r1
 8002d80:	4611      	mov	r1, r2
 8002d82:	461a      	mov	r2, r3
 8002d84:	4623      	mov	r3, r4
 8002d86:	71fb      	strb	r3, [r7, #7]
 8002d88:	4603      	mov	r3, r0
 8002d8a:	71bb      	strb	r3, [r7, #6]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	717b      	strb	r3, [r7, #5]
 8002d90:	4613      	mov	r3, r2
 8002d92:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002d94:	202a      	movs	r0, #42	@ 0x2a
 8002d96:	f7ff ff6f 	bl	8002c78 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	733b      	strb	r3, [r7, #12]
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	737b      	strb	r3, [r7, #13]
 8002da2:	2300      	movs	r3, #0
 8002da4:	73bb      	strb	r3, [r7, #14]
 8002da6:	797b      	ldrb	r3, [r7, #5]
 8002da8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002daa:	f107 030c 	add.w	r3, r7, #12
 8002dae:	2104      	movs	r1, #4
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff7b 	bl	8002cac <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002db6:	202b      	movs	r0, #43	@ 0x2b
 8002db8:	f7ff ff5e 	bl	8002c78 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8002dbc:	79bb      	ldrb	r3, [r7, #6]
 8002dbe:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002dc0:	793b      	ldrb	r3, [r7, #4]
 8002dc2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002dc4:	f107 030c 	add.w	r3, r7, #12
 8002dc8:	2104      	movs	r1, #4
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff ff6e 	bl	8002cac <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002dd0:	202c      	movs	r0, #44	@ 0x2c
 8002dd2:	f7ff ff51 	bl	8002c78 <ST7735_WriteCommand>
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}
	...

08002de0 <ST7735_Init>:

void ST7735_Init() {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
    ST7735_Select();
 8002de4:	f7ff ff1a 	bl	8002c1c <ST7735_Select>
    ST7735_Reset();
 8002de8:	f7ff ff30 	bl	8002c4c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8002dec:	4806      	ldr	r0, [pc, #24]	@ (8002e08 <ST7735_Init+0x28>)
 8002dee:	f7ff ff79 	bl	8002ce4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8002df2:	4806      	ldr	r0, [pc, #24]	@ (8002e0c <ST7735_Init+0x2c>)
 8002df4:	f7ff ff76 	bl	8002ce4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8002df8:	4805      	ldr	r0, [pc, #20]	@ (8002e10 <ST7735_Init+0x30>)
 8002dfa:	f7ff ff73 	bl	8002ce4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8002dfe:	f7ff ff19 	bl	8002c34 <ST7735_Unselect>
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	0800bf00 	.word	0x0800bf00
 8002e0c:	0800bf3c 	.word	0x0800bf3c
 8002e10:	0800bf4c 	.word	0x0800bf4c

08002e14 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002e14:	b082      	sub	sp, #8
 8002e16:	b590      	push	{r4, r7, lr}
 8002e18:	b089      	sub	sp, #36	@ 0x24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e1e:	4603      	mov	r3, r0
 8002e20:	80fb      	strh	r3, [r7, #6]
 8002e22:	460b      	mov	r3, r1
 8002e24:	80bb      	strh	r3, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	b2d8      	uxtb	r0, r3
 8002e2e:	88bb      	ldrh	r3, [r7, #4]
 8002e30:	b2d9      	uxtb	r1, r3
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002e3a:	4413      	add	r3, r2
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b2dc      	uxtb	r4, r3
 8002e42:	88bb      	ldrh	r3, [r7, #4]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002e4a:	4413      	add	r3, r2
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	4622      	mov	r2, r4
 8002e54:	f7ff ff8f 	bl	8002d76 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	e043      	b.n	8002ee6 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8002e5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	3b20      	subs	r3, #32
 8002e64:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	440b      	add	r3, r1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	e029      	b.n	8002ed4 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002e90:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	743b      	strb	r3, [r7, #16]
 8002e9a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8002ea0:	f107 0310 	add.w	r3, r7, #16
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ff00 	bl	8002cac <ST7735_WriteData>
 8002eac:	e00f      	b.n	8002ece <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002eae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	733b      	strb	r3, [r7, #12]
 8002eba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8002ec2:	f107 030c 	add.w	r3, r7, #12
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff feef 	bl	8002cac <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002ed8:	461a      	mov	r2, r3
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d3cf      	bcc.n	8002e80 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002eea:	461a      	mov	r2, r3
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d3b5      	bcc.n	8002e5e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
 8002ef6:	3724      	adds	r7, #36	@ 0x24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002efe:	b002      	add	sp, #8
 8002f00:	4770      	bx	lr

08002f02 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002f02:	b082      	sub	sp, #8
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af04      	add	r7, sp, #16
 8002f0a:	603a      	str	r2, [r7, #0]
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	4603      	mov	r3, r0
 8002f10:	80fb      	strh	r3, [r7, #6]
 8002f12:	460b      	mov	r3, r1
 8002f14:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002f16:	f7ff fe81 	bl	8002c1c <ST7735_Select>

    while(*str) {
 8002f1a:	e02d      	b.n	8002f78 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	7d3a      	ldrb	r2, [r7, #20]
 8002f20:	4413      	add	r3, r2
 8002f22:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f24:	dd13      	ble.n	8002f4e <ST7735_WriteString+0x4c>
            x = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002f2a:	7d7b      	ldrb	r3, [r7, #21]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	88bb      	ldrh	r3, [r7, #4]
 8002f30:	4413      	add	r3, r2
 8002f32:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002f34:	88bb      	ldrh	r3, [r7, #4]
 8002f36:	7d7a      	ldrb	r2, [r7, #21]
 8002f38:	4413      	add	r3, r2
 8002f3a:	2b9f      	cmp	r3, #159	@ 0x9f
 8002f3c:	dc21      	bgt.n	8002f82 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d103      	bne.n	8002f4e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	603b      	str	r3, [r7, #0]
                continue;
 8002f4c:	e014      	b.n	8002f78 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	88b9      	ldrh	r1, [r7, #4]
 8002f54:	88f8      	ldrh	r0, [r7, #6]
 8002f56:	8c3b      	ldrh	r3, [r7, #32]
 8002f58:	9302      	str	r3, [sp, #8]
 8002f5a:	8bbb      	ldrh	r3, [r7, #28]
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f7ff ff56 	bl	8002e14 <ST7735_WriteChar>
        x += font.width;
 8002f68:	7d3b      	ldrb	r3, [r7, #20]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	4413      	add	r3, r2
 8002f70:	80fb      	strh	r3, [r7, #6]
        str++;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1cd      	bne.n	8002f1c <ST7735_WriteString+0x1a>
 8002f80:	e000      	b.n	8002f84 <ST7735_WriteString+0x82>
                break;
 8002f82:	bf00      	nop
    }

    ST7735_Unselect();
 8002f84:	f7ff fe56 	bl	8002c34 <ST7735_Unselect>
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f92:	b002      	add	sp, #8
 8002f94:	4770      	bx	lr
	...

08002f98 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4623      	mov	r3, r4
 8002fa8:	80fb      	strh	r3, [r7, #6]
 8002faa:	4603      	mov	r3, r0
 8002fac:	80bb      	strh	r3, [r7, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	807b      	strh	r3, [r7, #2]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002fba:	d858      	bhi.n	800306e <ST7735_FillRectangle+0xd6>
 8002fbc:	88bb      	ldrh	r3, [r7, #4]
 8002fbe:	2b9f      	cmp	r3, #159	@ 0x9f
 8002fc0:	d855      	bhi.n	800306e <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	887b      	ldrh	r3, [r7, #2]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	2b80      	cmp	r3, #128	@ 0x80
 8002fca:	dd03      	ble.n	8002fd4 <ST7735_FillRectangle+0x3c>
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002fd2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002fd4:	88ba      	ldrh	r2, [r7, #4]
 8002fd6:	883b      	ldrh	r3, [r7, #0]
 8002fd8:	4413      	add	r3, r2
 8002fda:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fdc:	dd03      	ble.n	8002fe6 <ST7735_FillRectangle+0x4e>
 8002fde:	88bb      	ldrh	r3, [r7, #4]
 8002fe0:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8002fe4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002fe6:	f7ff fe19 	bl	8002c1c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	b2d8      	uxtb	r0, r3
 8002fee:	88bb      	ldrh	r3, [r7, #4]
 8002ff0:	b2d9      	uxtb	r1, r3
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	887b      	ldrh	r3, [r7, #2]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b2dc      	uxtb	r4, r3
 8003002:	88bb      	ldrh	r3, [r7, #4]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	883b      	ldrh	r3, [r7, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	4413      	add	r3, r2
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	4622      	mov	r2, r4
 8003014:	f7ff feaf 	bl	8002d76 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8003018:	8c3b      	ldrh	r3, [r7, #32]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	b29b      	uxth	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	733b      	strb	r3, [r7, #12]
 8003022:	8c3b      	ldrh	r3, [r7, #32]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003028:	2201      	movs	r2, #1
 800302a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800302e:	4812      	ldr	r0, [pc, #72]	@ (8003078 <ST7735_FillRectangle+0xe0>)
 8003030:	f000 fdf0 	bl	8003c14 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8003034:	883b      	ldrh	r3, [r7, #0]
 8003036:	80bb      	strh	r3, [r7, #4]
 8003038:	e013      	b.n	8003062 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 800303a:	887b      	ldrh	r3, [r7, #2]
 800303c:	80fb      	strh	r3, [r7, #6]
 800303e:	e00a      	b.n	8003056 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003040:	f107 010c 	add.w	r1, r7, #12
 8003044:	f04f 33ff 	mov.w	r3, #4294967295
 8003048:	2202      	movs	r2, #2
 800304a:	480c      	ldr	r0, [pc, #48]	@ (800307c <ST7735_FillRectangle+0xe4>)
 800304c:	f002 f9df 	bl	800540e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	3b01      	subs	r3, #1
 8003054:	80fb      	strh	r3, [r7, #6]
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f1      	bne.n	8003040 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 800305c:	88bb      	ldrh	r3, [r7, #4]
 800305e:	3b01      	subs	r3, #1
 8003060:	80bb      	strh	r3, [r7, #4]
 8003062:	88bb      	ldrh	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e8      	bne.n	800303a <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8003068:	f7ff fde4 	bl	8002c34 <ST7735_Unselect>
 800306c:	e000      	b.n	8003070 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800306e:	bf00      	nop
}
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}
 8003076:	bf00      	nop
 8003078:	40021400 	.word	0x40021400
 800307c:	20000298 	.word	0x20000298

08003080 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af02      	add	r7, sp, #8
 8003086:	4603      	mov	r3, r0
 8003088:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	23a0      	movs	r3, #160	@ 0xa0
 8003090:	2280      	movs	r2, #128	@ 0x80
 8003092:	2100      	movs	r1, #0
 8003094:	2000      	movs	r0, #0
 8003096:	f7ff ff7f 	bl	8002f98 <ST7735_FillRectangle>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b0f      	ldr	r3, [pc, #60]	@ (80030e8 <HAL_MspInit+0x44>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	4a0e      	ldr	r2, [pc, #56]	@ (80030e8 <HAL_MspInit+0x44>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b6:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <HAL_MspInit+0x44>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c2:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <HAL_MspInit+0x44>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c6:	4a08      	ldr	r2, [pc, #32]	@ (80030e8 <HAL_MspInit+0x44>)
 80030c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ce:	4b06      	ldr	r3, [pc, #24]	@ (80030e8 <HAL_MspInit+0x44>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800

080030ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030f0:	bf00      	nop
 80030f2:	e7fd      	b.n	80030f0 <NMI_Handler+0x4>

080030f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030f8:	bf00      	nop
 80030fa:	e7fd      	b.n	80030f8 <HardFault_Handler+0x4>

080030fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003100:	bf00      	nop
 8003102:	e7fd      	b.n	8003100 <MemManage_Handler+0x4>

08003104 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <BusFault_Handler+0x4>

0800310c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003110:	bf00      	nop
 8003112:	e7fd      	b.n	8003110 <UsageFault_Handler+0x4>

08003114 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8003144:	4b0b      	ldr	r3, [pc, #44]	@ (8003174 <SysTick_Handler+0x34>)
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <SysTick_Handler+0x18>
		Timer1--;
 800314c:	4b09      	ldr	r3, [pc, #36]	@ (8003174 <SysTick_Handler+0x34>)
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	4b07      	ldr	r3, [pc, #28]	@ (8003174 <SysTick_Handler+0x34>)
 8003156:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8003158:	4b07      	ldr	r3, [pc, #28]	@ (8003178 <SysTick_Handler+0x38>)
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <SysTick_Handler+0x2c>
		Timer2--;
 8003160:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <SysTick_Handler+0x38>)
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	4b03      	ldr	r3, [pc, #12]	@ (8003178 <SysTick_Handler+0x38>)
 800316a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800316c:	f000 fa7c 	bl	8003668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000234 	.word	0x20000234
 8003178:	20000236 	.word	0x20000236

0800317c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return 1;
 8003180:	2301      	movs	r3, #1
}
 8003182:	4618      	mov	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <_kill>:

int _kill(int pid, int sig)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003196:	f005 f897 	bl	80082c8 <__errno>
 800319a:	4603      	mov	r3, r0
 800319c:	2216      	movs	r2, #22
 800319e:	601a      	str	r2, [r3, #0]
  return -1;
 80031a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <_exit>:

void _exit (int status)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031b4:	f04f 31ff 	mov.w	r1, #4294967295
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff ffe7 	bl	800318c <_kill>
  while (1) {}    /* Make sure we hang here */
 80031be:	bf00      	nop
 80031c0:	e7fd      	b.n	80031be <_exit+0x12>

080031c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	e00a      	b.n	80031ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031d4:	f3af 8000 	nop.w
 80031d8:	4601      	mov	r1, r0
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	60ba      	str	r2, [r7, #8]
 80031e0:	b2ca      	uxtb	r2, r1
 80031e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	3301      	adds	r3, #1
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	dbf0      	blt.n	80031d4 <_read+0x12>
  }

  return len;
 80031f2:	687b      	ldr	r3, [r7, #4]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	e009      	b.n	8003222 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	60ba      	str	r2, [r7, #8]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fc4e 	bl	8002ab8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	3301      	adds	r3, #1
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	429a      	cmp	r2, r3
 8003228:	dbf1      	blt.n	800320e <_write+0x12>
  }
  return len;
 800322a:	687b      	ldr	r3, [r7, #4]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <_close>:

int _close(int file)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800323c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800325c:	605a      	str	r2, [r3, #4]
  return 0;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_isatty>:

int _isatty(int file)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003274:	2301      	movs	r3, #1
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003282:	b480      	push	{r7}
 8003284:	b085      	sub	sp, #20
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032a4:	4a14      	ldr	r2, [pc, #80]	@ (80032f8 <_sbrk+0x5c>)
 80032a6:	4b15      	ldr	r3, [pc, #84]	@ (80032fc <_sbrk+0x60>)
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032b0:	4b13      	ldr	r3, [pc, #76]	@ (8003300 <_sbrk+0x64>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032b8:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <_sbrk+0x64>)
 80032ba:	4a12      	ldr	r2, [pc, #72]	@ (8003304 <_sbrk+0x68>)
 80032bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <_sbrk+0x64>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d207      	bcs.n	80032dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032cc:	f004 fffc 	bl	80082c8 <__errno>
 80032d0:	4603      	mov	r3, r0
 80032d2:	220c      	movs	r2, #12
 80032d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295
 80032da:	e009      	b.n	80032f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032dc:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <_sbrk+0x64>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032e2:	4b07      	ldr	r3, [pc, #28]	@ (8003300 <_sbrk+0x64>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	4a05      	ldr	r2, [pc, #20]	@ (8003300 <_sbrk+0x64>)
 80032ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20050000 	.word	0x20050000
 80032fc:	00000400 	.word	0x00000400
 8003300:	200002fc 	.word	0x200002fc
 8003304:	200009d0 	.word	0x200009d0

08003308 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800330c:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <SystemInit+0x20>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	4a05      	ldr	r2, [pc, #20]	@ (8003328 <SystemInit+0x20>)
 8003314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003330:	4b14      	ldr	r3, [pc, #80]	@ (8003384 <MX_USART3_UART_Init+0x58>)
 8003332:	4a15      	ldr	r2, [pc, #84]	@ (8003388 <MX_USART3_UART_Init+0x5c>)
 8003334:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003336:	4b13      	ldr	r3, [pc, #76]	@ (8003384 <MX_USART3_UART_Init+0x58>)
 8003338:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800333c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800333e:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <MX_USART3_UART_Init+0x58>)
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003344:	4b0f      	ldr	r3, [pc, #60]	@ (8003384 <MX_USART3_UART_Init+0x58>)
 8003346:	2200      	movs	r2, #0
 8003348:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800334a:	4b0e      	ldr	r3, [pc, #56]	@ (8003384 <MX_USART3_UART_Init+0x58>)
 800334c:	2200      	movs	r2, #0
 800334e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003350:	4b0c      	ldr	r3, [pc, #48]	@ (8003384 <MX_USART3_UART_Init+0x58>)
 8003352:	220c      	movs	r2, #12
 8003354:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003356:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <MX_USART3_UART_Init+0x58>)
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800335c:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <MX_USART3_UART_Init+0x58>)
 800335e:	2200      	movs	r2, #0
 8003360:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003362:	4b08      	ldr	r3, [pc, #32]	@ (8003384 <MX_USART3_UART_Init+0x58>)
 8003364:	2200      	movs	r2, #0
 8003366:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <MX_USART3_UART_Init+0x58>)
 800336a:	2200      	movs	r2, #0
 800336c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800336e:	4805      	ldr	r0, [pc, #20]	@ (8003384 <MX_USART3_UART_Init+0x58>)
 8003370:	f002 fd6c 	bl	8005e4c <HAL_UART_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800337a:	f7ff fb97 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000300 	.word	0x20000300
 8003388:	40004800 	.word	0x40004800

0800338c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b0aa      	sub	sp, #168	@ 0xa8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033a4:	f107 0310 	add.w	r3, r7, #16
 80033a8:	2284      	movs	r2, #132	@ 0x84
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f004 ff29 	bl	8008204 <memset>
  if(uartHandle->Instance==USART3)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a22      	ldr	r2, [pc, #136]	@ (8003440 <HAL_UART_MspInit+0xb4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d13c      	bne.n	8003436 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80033bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80033c2:	2300      	movs	r3, #0
 80033c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033c6:	f107 0310 	add.w	r3, r7, #16
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 fb84 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80033d6:	f7ff fb69 	bl	8002aac <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80033da:	4b1a      	ldr	r3, [pc, #104]	@ (8003444 <HAL_UART_MspInit+0xb8>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	4a19      	ldr	r2, [pc, #100]	@ (8003444 <HAL_UART_MspInit+0xb8>)
 80033e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033e6:	4b17      	ldr	r3, [pc, #92]	@ (8003444 <HAL_UART_MspInit+0xb8>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033f2:	4b14      	ldr	r3, [pc, #80]	@ (8003444 <HAL_UART_MspInit+0xb8>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	4a13      	ldr	r2, [pc, #76]	@ (8003444 <HAL_UART_MspInit+0xb8>)
 80033f8:	f043 0308 	orr.w	r3, r3, #8
 80033fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033fe:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <HAL_UART_MspInit+0xb8>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800340a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800340e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003418:	2301      	movs	r3, #1
 800341a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341e:	2303      	movs	r3, #3
 8003420:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003424:	2307      	movs	r3, #7
 8003426:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800342a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800342e:	4619      	mov	r1, r3
 8003430:	4805      	ldr	r0, [pc, #20]	@ (8003448 <HAL_UART_MspInit+0xbc>)
 8003432:	f000 fa43 	bl	80038bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003436:	bf00      	nop
 8003438:	37a8      	adds	r7, #168	@ 0xa8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40004800 	.word	0x40004800
 8003444:	40023800 	.word	0x40023800
 8003448:	40020c00 	.word	0x40020c00

0800344c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003450:	4b14      	ldr	r3, [pc, #80]	@ (80034a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003452:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003456:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003458:	4b12      	ldr	r3, [pc, #72]	@ (80034a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800345a:	2206      	movs	r2, #6
 800345c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800345e:	4b11      	ldr	r3, [pc, #68]	@ (80034a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003460:	2202      	movs	r2, #2
 8003462:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003464:	4b0f      	ldr	r3, [pc, #60]	@ (80034a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003466:	2200      	movs	r2, #0
 8003468:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800346a:	4b0e      	ldr	r3, [pc, #56]	@ (80034a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800346c:	2202      	movs	r2, #2
 800346e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003470:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003472:	2201      	movs	r2, #1
 8003474:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003476:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003478:	2200      	movs	r2, #0
 800347a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800347c:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800347e:	2200      	movs	r2, #0
 8003480:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003482:	4b08      	ldr	r3, [pc, #32]	@ (80034a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003484:	2201      	movs	r2, #1
 8003486:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003488:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800348a:	2200      	movs	r2, #0
 800348c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800348e:	4805      	ldr	r0, [pc, #20]	@ (80034a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003490:	f000 fd0d 	bl	8003eae <HAL_PCD_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800349a:	f7ff fb07 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000388 	.word	0x20000388

080034a8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b0ac      	sub	sp, #176	@ 0xb0
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034c0:	f107 0318 	add.w	r3, r7, #24
 80034c4:	2284      	movs	r2, #132	@ 0x84
 80034c6:	2100      	movs	r1, #0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f004 fe9b 	bl	8008204 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034d6:	d159      	bne.n	800358c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80034d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034e4:	f107 0318 	add.w	r3, r7, #24
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 faf5 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80034f4:	f7ff fada 	bl	8002aac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f8:	4b26      	ldr	r3, [pc, #152]	@ (8003594 <HAL_PCD_MspInit+0xec>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fc:	4a25      	ldr	r2, [pc, #148]	@ (8003594 <HAL_PCD_MspInit+0xec>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6313      	str	r3, [r2, #48]	@ 0x30
 8003504:	4b23      	ldr	r3, [pc, #140]	@ (8003594 <HAL_PCD_MspInit+0xec>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003510:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003514:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003518:	2302      	movs	r3, #2
 800351a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003524:	2303      	movs	r3, #3
 8003526:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800352a:	230a      	movs	r3, #10
 800352c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003530:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003534:	4619      	mov	r1, r3
 8003536:	4818      	ldr	r0, [pc, #96]	@ (8003598 <HAL_PCD_MspInit+0xf0>)
 8003538:	f000 f9c0 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800353c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003544:	2300      	movs	r3, #0
 8003546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003550:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003554:	4619      	mov	r1, r3
 8003556:	4810      	ldr	r0, [pc, #64]	@ (8003598 <HAL_PCD_MspInit+0xf0>)
 8003558:	f000 f9b0 	bl	80038bc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800355c:	4b0d      	ldr	r3, [pc, #52]	@ (8003594 <HAL_PCD_MspInit+0xec>)
 800355e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003560:	4a0c      	ldr	r2, [pc, #48]	@ (8003594 <HAL_PCD_MspInit+0xec>)
 8003562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003566:	6353      	str	r3, [r2, #52]	@ 0x34
 8003568:	4b0a      	ldr	r3, [pc, #40]	@ (8003594 <HAL_PCD_MspInit+0xec>)
 800356a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4b07      	ldr	r3, [pc, #28]	@ (8003594 <HAL_PCD_MspInit+0xec>)
 8003576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003578:	4a06      	ldr	r2, [pc, #24]	@ (8003594 <HAL_PCD_MspInit+0xec>)
 800357a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800357e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003580:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <HAL_PCD_MspInit+0xec>)
 8003582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800358c:	bf00      	nop
 800358e:	37b0      	adds	r7, #176	@ 0xb0
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40023800 	.word	0x40023800
 8003598:	40020000 	.word	0x40020000

0800359c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800359c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035a0:	f7ff feb2 	bl	8003308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035a4:	480c      	ldr	r0, [pc, #48]	@ (80035d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035a6:	490d      	ldr	r1, [pc, #52]	@ (80035dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035a8:	4a0d      	ldr	r2, [pc, #52]	@ (80035e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035ac:	e002      	b.n	80035b4 <LoopCopyDataInit>

080035ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035b2:	3304      	adds	r3, #4

080035b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b8:	d3f9      	bcc.n	80035ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ba:	4a0a      	ldr	r2, [pc, #40]	@ (80035e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035bc:	4c0a      	ldr	r4, [pc, #40]	@ (80035e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c0:	e001      	b.n	80035c6 <LoopFillZerobss>

080035c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035c4:	3204      	adds	r2, #4

080035c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c8:	d3fb      	bcc.n	80035c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80035ca:	f004 fe83 	bl	80082d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ce:	f7ff f931 	bl	8002834 <main>
  bx  lr    
 80035d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80035d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035dc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80035e0:	0800c3d0 	.word	0x0800c3d0
  ldr r2, =_sbss
 80035e4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80035e8:	200009cc 	.word	0x200009cc

080035ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035ec:	e7fe      	b.n	80035ec <ADC_IRQHandler>

080035ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035f2:	2003      	movs	r0, #3
 80035f4:	f000 f92e 	bl	8003854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035f8:	2000      	movs	r0, #0
 80035fa:	f000 f805 	bl	8003608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035fe:	f7ff fd51 	bl	80030a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003610:	4b12      	ldr	r3, [pc, #72]	@ (800365c <HAL_InitTick+0x54>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <HAL_InitTick+0x58>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	4619      	mov	r1, r3
 800361a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800361e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003622:	fbb2 f3f3 	udiv	r3, r2, r3
 8003626:	4618      	mov	r0, r3
 8003628:	f000 f93b 	bl	80038a2 <HAL_SYSTICK_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e00e      	b.n	8003654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b0f      	cmp	r3, #15
 800363a:	d80a      	bhi.n	8003652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800363c:	2200      	movs	r2, #0
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	f04f 30ff 	mov.w	r0, #4294967295
 8003644:	f000 f911 	bl	800386a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003648:	4a06      	ldr	r2, [pc, #24]	@ (8003664 <HAL_InitTick+0x5c>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	e000      	b.n	8003654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	2000000c 	.word	0x2000000c
 8003660:	20000014 	.word	0x20000014
 8003664:	20000010 	.word	0x20000010

08003668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800366c:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <HAL_IncTick+0x20>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	4b06      	ldr	r3, [pc, #24]	@ (800368c <HAL_IncTick+0x24>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4413      	add	r3, r2
 8003678:	4a04      	ldr	r2, [pc, #16]	@ (800368c <HAL_IncTick+0x24>)
 800367a:	6013      	str	r3, [r2, #0]
}
 800367c:	bf00      	nop
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000014 	.word	0x20000014
 800368c:	20000868 	.word	0x20000868

08003690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return uwTick;
 8003694:	4b03      	ldr	r3, [pc, #12]	@ (80036a4 <HAL_GetTick+0x14>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000868 	.word	0x20000868

080036a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036b0:	f7ff ffee 	bl	8003690 <HAL_GetTick>
 80036b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d005      	beq.n	80036ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036c2:	4b0a      	ldr	r3, [pc, #40]	@ (80036ec <HAL_Delay+0x44>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ce:	bf00      	nop
 80036d0:	f7ff ffde 	bl	8003690 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d8f7      	bhi.n	80036d0 <HAL_Delay+0x28>
  {
  }
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000014 	.word	0x20000014

080036f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003700:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <__NVIC_SetPriorityGrouping+0x40>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800370c:	4013      	ands	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003718:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 800371a:	4313      	orrs	r3, r2
 800371c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371e:	4a04      	ldr	r2, [pc, #16]	@ (8003730 <__NVIC_SetPriorityGrouping+0x40>)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	60d3      	str	r3, [r2, #12]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000ed00 	.word	0xe000ed00
 8003734:	05fa0000 	.word	0x05fa0000

08003738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800373c:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <__NVIC_GetPriorityGrouping+0x18>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	f003 0307 	and.w	r3, r3, #7
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	6039      	str	r1, [r7, #0]
 800375e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003764:	2b00      	cmp	r3, #0
 8003766:	db0a      	blt.n	800377e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	490c      	ldr	r1, [pc, #48]	@ (80037a0 <__NVIC_SetPriority+0x4c>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	0112      	lsls	r2, r2, #4
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	440b      	add	r3, r1
 8003778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800377c:	e00a      	b.n	8003794 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	4908      	ldr	r1, [pc, #32]	@ (80037a4 <__NVIC_SetPriority+0x50>)
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	3b04      	subs	r3, #4
 800378c:	0112      	lsls	r2, r2, #4
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	440b      	add	r3, r1
 8003792:	761a      	strb	r2, [r3, #24]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000e100 	.word	0xe000e100
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b089      	sub	sp, #36	@ 0x24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f1c3 0307 	rsb	r3, r3, #7
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	bf28      	it	cs
 80037c6:	2304      	movcs	r3, #4
 80037c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d902      	bls.n	80037d8 <NVIC_EncodePriority+0x30>
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3b03      	subs	r3, #3
 80037d6:	e000      	b.n	80037da <NVIC_EncodePriority+0x32>
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037dc:	f04f 32ff 	mov.w	r2, #4294967295
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	401a      	ands	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f0:	f04f 31ff 	mov.w	r1, #4294967295
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	43d9      	mvns	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	4313      	orrs	r3, r2
         );
}
 8003802:	4618      	mov	r0, r3
 8003804:	3724      	adds	r7, #36	@ 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3b01      	subs	r3, #1
 800381c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003820:	d301      	bcc.n	8003826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003822:	2301      	movs	r3, #1
 8003824:	e00f      	b.n	8003846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003826:	4a0a      	ldr	r2, [pc, #40]	@ (8003850 <SysTick_Config+0x40>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3b01      	subs	r3, #1
 800382c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800382e:	210f      	movs	r1, #15
 8003830:	f04f 30ff 	mov.w	r0, #4294967295
 8003834:	f7ff ff8e 	bl	8003754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003838:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <SysTick_Config+0x40>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383e:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <SysTick_Config+0x40>)
 8003840:	2207      	movs	r2, #7
 8003842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	e000e010 	.word	0xe000e010

08003854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff ff47 	bl	80036f0 <__NVIC_SetPriorityGrouping>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	4603      	mov	r3, r0
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800387c:	f7ff ff5c 	bl	8003738 <__NVIC_GetPriorityGrouping>
 8003880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	6978      	ldr	r0, [r7, #20]
 8003888:	f7ff ff8e 	bl	80037a8 <NVIC_EncodePriority>
 800388c:	4602      	mov	r2, r0
 800388e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ff5d 	bl	8003754 <__NVIC_SetPriority>
}
 800389a:	bf00      	nop
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff ffb0 	bl	8003810 <SysTick_Config>
 80038b0:	4603      	mov	r3, r0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	@ 0x24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	e175      	b.n	8003bc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80038dc:	2201      	movs	r2, #1
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4013      	ands	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	f040 8164 	bne.w	8003bc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d005      	beq.n	8003912 <HAL_GPIO_Init+0x56>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d130      	bne.n	8003974 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	2203      	movs	r2, #3
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003948:	2201      	movs	r2, #1
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 0201 	and.w	r2, r3, #1
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	2b03      	cmp	r3, #3
 800397e:	d017      	beq.n	80039b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	2203      	movs	r2, #3
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d123      	bne.n	8003a04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	08da      	lsrs	r2, r3, #3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3208      	adds	r2, #8
 80039c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	220f      	movs	r2, #15
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	08da      	lsrs	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3208      	adds	r2, #8
 80039fe:	69b9      	ldr	r1, [r7, #24]
 8003a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	2203      	movs	r2, #3
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0203 	and.w	r2, r3, #3
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80be 	beq.w	8003bc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a46:	4b66      	ldr	r3, [pc, #408]	@ (8003be0 <HAL_GPIO_Init+0x324>)
 8003a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4a:	4a65      	ldr	r2, [pc, #404]	@ (8003be0 <HAL_GPIO_Init+0x324>)
 8003a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a52:	4b63      	ldr	r3, [pc, #396]	@ (8003be0 <HAL_GPIO_Init+0x324>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a5e:	4a61      	ldr	r2, [pc, #388]	@ (8003be4 <HAL_GPIO_Init+0x328>)
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	089b      	lsrs	r3, r3, #2
 8003a64:	3302      	adds	r3, #2
 8003a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	220f      	movs	r2, #15
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a58      	ldr	r2, [pc, #352]	@ (8003be8 <HAL_GPIO_Init+0x32c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d037      	beq.n	8003afa <HAL_GPIO_Init+0x23e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a57      	ldr	r2, [pc, #348]	@ (8003bec <HAL_GPIO_Init+0x330>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d031      	beq.n	8003af6 <HAL_GPIO_Init+0x23a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a56      	ldr	r2, [pc, #344]	@ (8003bf0 <HAL_GPIO_Init+0x334>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d02b      	beq.n	8003af2 <HAL_GPIO_Init+0x236>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a55      	ldr	r2, [pc, #340]	@ (8003bf4 <HAL_GPIO_Init+0x338>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d025      	beq.n	8003aee <HAL_GPIO_Init+0x232>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a54      	ldr	r2, [pc, #336]	@ (8003bf8 <HAL_GPIO_Init+0x33c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01f      	beq.n	8003aea <HAL_GPIO_Init+0x22e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a53      	ldr	r2, [pc, #332]	@ (8003bfc <HAL_GPIO_Init+0x340>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d019      	beq.n	8003ae6 <HAL_GPIO_Init+0x22a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a52      	ldr	r2, [pc, #328]	@ (8003c00 <HAL_GPIO_Init+0x344>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_GPIO_Init+0x226>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a51      	ldr	r2, [pc, #324]	@ (8003c04 <HAL_GPIO_Init+0x348>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00d      	beq.n	8003ade <HAL_GPIO_Init+0x222>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a50      	ldr	r2, [pc, #320]	@ (8003c08 <HAL_GPIO_Init+0x34c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <HAL_GPIO_Init+0x21e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4f      	ldr	r2, [pc, #316]	@ (8003c0c <HAL_GPIO_Init+0x350>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d101      	bne.n	8003ad6 <HAL_GPIO_Init+0x21a>
 8003ad2:	2309      	movs	r3, #9
 8003ad4:	e012      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003ad6:	230a      	movs	r3, #10
 8003ad8:	e010      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003ada:	2308      	movs	r3, #8
 8003adc:	e00e      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003ade:	2307      	movs	r3, #7
 8003ae0:	e00c      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003ae2:	2306      	movs	r3, #6
 8003ae4:	e00a      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003ae6:	2305      	movs	r3, #5
 8003ae8:	e008      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003aea:	2304      	movs	r3, #4
 8003aec:	e006      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003aee:	2303      	movs	r3, #3
 8003af0:	e004      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e002      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_GPIO_Init+0x240>
 8003afa:	2300      	movs	r3, #0
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	f002 0203 	and.w	r2, r2, #3
 8003b02:	0092      	lsls	r2, r2, #2
 8003b04:	4093      	lsls	r3, r2
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b0c:	4935      	ldr	r1, [pc, #212]	@ (8003be4 <HAL_GPIO_Init+0x328>)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	089b      	lsrs	r3, r3, #2
 8003b12:	3302      	adds	r3, #2
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c10 <HAL_GPIO_Init+0x354>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	43db      	mvns	r3, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4013      	ands	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b3e:	4a34      	ldr	r2, [pc, #208]	@ (8003c10 <HAL_GPIO_Init+0x354>)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b44:	4b32      	ldr	r3, [pc, #200]	@ (8003c10 <HAL_GPIO_Init+0x354>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b68:	4a29      	ldr	r2, [pc, #164]	@ (8003c10 <HAL_GPIO_Init+0x354>)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b6e:	4b28      	ldr	r3, [pc, #160]	@ (8003c10 <HAL_GPIO_Init+0x354>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	43db      	mvns	r3, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b92:	4a1f      	ldr	r2, [pc, #124]	@ (8003c10 <HAL_GPIO_Init+0x354>)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b98:	4b1d      	ldr	r3, [pc, #116]	@ (8003c10 <HAL_GPIO_Init+0x354>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bbc:	4a14      	ldr	r2, [pc, #80]	@ (8003c10 <HAL_GPIO_Init+0x354>)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b0f      	cmp	r3, #15
 8003bcc:	f67f ae86 	bls.w	80038dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop
 8003bd4:	3724      	adds	r7, #36	@ 0x24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40013800 	.word	0x40013800
 8003be8:	40020000 	.word	0x40020000
 8003bec:	40020400 	.word	0x40020400
 8003bf0:	40020800 	.word	0x40020800
 8003bf4:	40020c00 	.word	0x40020c00
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40021400 	.word	0x40021400
 8003c00:	40021800 	.word	0x40021800
 8003c04:	40021c00 	.word	0x40021c00
 8003c08:	40022000 	.word	0x40022000
 8003c0c:	40022400 	.word	0x40022400
 8003c10:	40013c00 	.word	0x40013c00

08003c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
 8003c20:	4613      	mov	r3, r2
 8003c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c24:	787b      	ldrb	r3, [r7, #1]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c2a:	887a      	ldrh	r2, [r7, #2]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c30:	e003      	b.n	8003c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	041a      	lsls	r2, r3, #16
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	619a      	str	r2, [r3, #24]
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e08b      	b.n	8003d72 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fe fd80 	bl	8002774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	@ 0x24
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ca8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d107      	bne.n	8003cc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	e006      	b.n	8003cd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003cce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d108      	bne.n	8003cea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ce6:	605a      	str	r2, [r3, #4]
 8003ce8:	e007      	b.n	8003cfa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4b1d      	ldr	r3, [pc, #116]	@ (8003d7c <HAL_I2C_Init+0x134>)
 8003d06:	430b      	orrs	r3, r1
 8003d08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69d9      	ldr	r1, [r3, #28]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1a      	ldr	r2, [r3, #32]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	02008000 	.word	0x02008000

08003d80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d138      	bne.n	8003e08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e032      	b.n	8003e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2224      	movs	r2, #36	@ 0x24
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0201 	bic.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003dd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e000      	b.n	8003e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d139      	bne.n	8003ea0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e033      	b.n	8003ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2224      	movs	r2, #36	@ 0x24
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b086      	sub	sp, #24
 8003eb2:	af02      	add	r7, sp, #8
 8003eb4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e108      	b.n	80040d2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff fae4 	bl	80034a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eee:	d102      	bne.n	8003ef6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f002 fd06 	bl	800690c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	7c1a      	ldrb	r2, [r3, #16]
 8003f08:	f88d 2000 	strb.w	r2, [sp]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f10:	f002 fca2 	bl	8006858 <USB_CoreInit>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e0d5      	b.n	80040d2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f002 fcfe 	bl	800692e <USB_SetCurrentMode>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0c6      	b.n	80040d2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f44:	2300      	movs	r3, #0
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	e04a      	b.n	8003fe0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	3315      	adds	r3, #21
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f5e:	7bfa      	ldrb	r2, [r7, #15]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	3314      	adds	r3, #20
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f72:	7bfa      	ldrb	r2, [r7, #15]
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	b298      	uxth	r0, r3
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	332e      	adds	r3, #46	@ 0x2e
 8003f86:	4602      	mov	r2, r0
 8003f88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	3318      	adds	r3, #24
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	331c      	adds	r3, #28
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	3320      	adds	r3, #32
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3324      	adds	r3, #36	@ 0x24
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	791b      	ldrb	r3, [r3, #4]
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d3af      	bcc.n	8003f4a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	73fb      	strb	r3, [r7, #15]
 8003fee:	e044      	b.n	800407a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004018:	7bfa      	ldrb	r2, [r7, #15]
 800401a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800401c:	7bfa      	ldrb	r2, [r7, #15]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	3301      	adds	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	791b      	ldrb	r3, [r3, #4]
 800407e:	7bfa      	ldrb	r2, [r7, #15]
 8004080:	429a      	cmp	r2, r3
 8004082:	d3b5      	bcc.n	8003ff0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	7c1a      	ldrb	r2, [r3, #16]
 800408c:	f88d 2000 	strb.w	r2, [sp]
 8004090:	3304      	adds	r3, #4
 8004092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004094:	f002 fc98 	bl	80069c8 <USB_DevInit>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e013      	b.n	80040d2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	7b1b      	ldrb	r3, [r3, #12]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d102      	bne.n	80040c6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f80b 	bl	80040dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f002 fe53 	bl	8006d76 <USB_DevDisconnect>

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800410a:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <HAL_PCDEx_ActivateLPM+0x44>)
 800410c:	4313      	orrs	r3, r2
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	10000003 	.word	0x10000003

08004124 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004128:	4b05      	ldr	r3, [pc, #20]	@ (8004140 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a04      	ldr	r2, [pc, #16]	@ (8004140 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800412e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004132:	6013      	str	r3, [r2, #0]
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40007000 	.word	0x40007000

08004144 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800414c:	2300      	movs	r3, #0
 800414e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e291      	b.n	800467e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8087 	beq.w	8004276 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004168:	4b96      	ldr	r3, [pc, #600]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b04      	cmp	r3, #4
 8004172:	d00c      	beq.n	800418e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004174:	4b93      	ldr	r3, [pc, #588]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b08      	cmp	r3, #8
 800417e:	d112      	bne.n	80041a6 <HAL_RCC_OscConfig+0x62>
 8004180:	4b90      	ldr	r3, [pc, #576]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004188:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800418c:	d10b      	bne.n	80041a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418e:	4b8d      	ldr	r3, [pc, #564]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d06c      	beq.n	8004274 <HAL_RCC_OscConfig+0x130>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d168      	bne.n	8004274 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e26b      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ae:	d106      	bne.n	80041be <HAL_RCC_OscConfig+0x7a>
 80041b0:	4b84      	ldr	r3, [pc, #528]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a83      	ldr	r2, [pc, #524]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	e02e      	b.n	800421c <HAL_RCC_OscConfig+0xd8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x9c>
 80041c6:	4b7f      	ldr	r3, [pc, #508]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a7e      	ldr	r2, [pc, #504]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b7c      	ldr	r3, [pc, #496]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a7b      	ldr	r2, [pc, #492]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e01d      	b.n	800421c <HAL_RCC_OscConfig+0xd8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0xc0>
 80041ea:	4b76      	ldr	r3, [pc, #472]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a75      	ldr	r2, [pc, #468]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b73      	ldr	r3, [pc, #460]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a72      	ldr	r2, [pc, #456]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e00b      	b.n	800421c <HAL_RCC_OscConfig+0xd8>
 8004204:	4b6f      	ldr	r3, [pc, #444]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6e      	ldr	r2, [pc, #440]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 800420a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4b6c      	ldr	r3, [pc, #432]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a6b      	ldr	r2, [pc, #428]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800421a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d013      	beq.n	800424c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7ff fa34 	bl	8003690 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800422c:	f7ff fa30 	bl	8003690 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	@ 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e21f      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423e:	4b61      	ldr	r3, [pc, #388]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0xe8>
 800424a:	e014      	b.n	8004276 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7ff fa20 	bl	8003690 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004254:	f7ff fa1c 	bl	8003690 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	@ 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e20b      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004266:	4b57      	ldr	r3, [pc, #348]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x110>
 8004272:	e000      	b.n	8004276 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d069      	beq.n	8004356 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004282:	4b50      	ldr	r3, [pc, #320]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428e:	4b4d      	ldr	r3, [pc, #308]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b08      	cmp	r3, #8
 8004298:	d11c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x190>
 800429a:	4b4a      	ldr	r3, [pc, #296]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d116      	bne.n	80042d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	4b47      	ldr	r3, [pc, #284]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_RCC_OscConfig+0x17a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d001      	beq.n	80042be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e1df      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042be:	4b41      	ldr	r3, [pc, #260]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	493d      	ldr	r1, [pc, #244]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d2:	e040      	b.n	8004356 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d023      	beq.n	8004324 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042dc:	4b39      	ldr	r3, [pc, #228]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a38      	ldr	r2, [pc, #224]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7ff f9d2 	bl	8003690 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f0:	f7ff f9ce 	bl	8003690 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e1bd      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004302:	4b30      	ldr	r3, [pc, #192]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430e:	4b2d      	ldr	r3, [pc, #180]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4929      	ldr	r1, [pc, #164]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]
 8004322:	e018      	b.n	8004356 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004324:	4b27      	ldr	r3, [pc, #156]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a26      	ldr	r2, [pc, #152]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7ff f9ae 	bl	8003690 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004338:	f7ff f9aa 	bl	8003690 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e199      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434a:	4b1e      	ldr	r3, [pc, #120]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d038      	beq.n	80043d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d019      	beq.n	800439e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800436a:	4b16      	ldr	r3, [pc, #88]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 800436c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436e:	4a15      	ldr	r2, [pc, #84]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004376:	f7ff f98b 	bl	8003690 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800437e:	f7ff f987 	bl	8003690 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e176      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004390:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 8004392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x23a>
 800439c:	e01a      	b.n	80043d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800439e:	4b09      	ldr	r3, [pc, #36]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80043a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a2:	4a08      	ldr	r2, [pc, #32]	@ (80043c4 <HAL_RCC_OscConfig+0x280>)
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043aa:	f7ff f971 	bl	8003690 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	e00a      	b.n	80043c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b2:	f7ff f96d 	bl	8003690 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d903      	bls.n	80043c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e15c      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
 80043c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c8:	4b91      	ldr	r3, [pc, #580]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80043ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1ee      	bne.n	80043b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80a4 	beq.w	800452a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e2:	4b8b      	ldr	r3, [pc, #556]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10d      	bne.n	800440a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	4b88      	ldr	r3, [pc, #544]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	4a87      	ldr	r2, [pc, #540]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043fa:	4b85      	ldr	r3, [pc, #532]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004406:	2301      	movs	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800440a:	4b82      	ldr	r3, [pc, #520]	@ (8004614 <HAL_RCC_OscConfig+0x4d0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d118      	bne.n	8004448 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004416:	4b7f      	ldr	r3, [pc, #508]	@ (8004614 <HAL_RCC_OscConfig+0x4d0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a7e      	ldr	r2, [pc, #504]	@ (8004614 <HAL_RCC_OscConfig+0x4d0>)
 800441c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004422:	f7ff f935 	bl	8003690 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442a:	f7ff f931 	bl	8003690 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b64      	cmp	r3, #100	@ 0x64
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e120      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800443c:	4b75      	ldr	r3, [pc, #468]	@ (8004614 <HAL_RCC_OscConfig+0x4d0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d106      	bne.n	800445e <HAL_RCC_OscConfig+0x31a>
 8004450:	4b6f      	ldr	r3, [pc, #444]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004454:	4a6e      	ldr	r2, [pc, #440]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6713      	str	r3, [r2, #112]	@ 0x70
 800445c:	e02d      	b.n	80044ba <HAL_RCC_OscConfig+0x376>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0x33c>
 8004466:	4b6a      	ldr	r3, [pc, #424]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446a:	4a69      	ldr	r2, [pc, #420]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800446c:	f023 0301 	bic.w	r3, r3, #1
 8004470:	6713      	str	r3, [r2, #112]	@ 0x70
 8004472:	4b67      	ldr	r3, [pc, #412]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004476:	4a66      	ldr	r2, [pc, #408]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004478:	f023 0304 	bic.w	r3, r3, #4
 800447c:	6713      	str	r3, [r2, #112]	@ 0x70
 800447e:	e01c      	b.n	80044ba <HAL_RCC_OscConfig+0x376>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b05      	cmp	r3, #5
 8004486:	d10c      	bne.n	80044a2 <HAL_RCC_OscConfig+0x35e>
 8004488:	4b61      	ldr	r3, [pc, #388]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448c:	4a60      	ldr	r2, [pc, #384]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800448e:	f043 0304 	orr.w	r3, r3, #4
 8004492:	6713      	str	r3, [r2, #112]	@ 0x70
 8004494:	4b5e      	ldr	r3, [pc, #376]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004498:	4a5d      	ldr	r2, [pc, #372]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6713      	str	r3, [r2, #112]	@ 0x70
 80044a0:	e00b      	b.n	80044ba <HAL_RCC_OscConfig+0x376>
 80044a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a6:	4a5a      	ldr	r2, [pc, #360]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ae:	4b58      	ldr	r3, [pc, #352]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b2:	4a57      	ldr	r2, [pc, #348]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80044b4:	f023 0304 	bic.w	r3, r3, #4
 80044b8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d015      	beq.n	80044ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7ff f8e5 	bl	8003690 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7ff f8e1 	bl	8003690 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e0ce      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ee      	beq.n	80044ca <HAL_RCC_OscConfig+0x386>
 80044ec:	e014      	b.n	8004518 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ee:	f7ff f8cf 	bl	8003690 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f4:	e00a      	b.n	800450c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f6:	f7ff f8cb 	bl	8003690 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004504:	4293      	cmp	r3, r2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e0b8      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450c:	4b40      	ldr	r3, [pc, #256]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ee      	bne.n	80044f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d105      	bne.n	800452a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800451e:	4b3c      	ldr	r3, [pc, #240]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	4a3b      	ldr	r2, [pc, #236]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004528:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80a4 	beq.w	800467c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004534:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	2b08      	cmp	r3, #8
 800453e:	d06b      	beq.n	8004618 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d149      	bne.n	80045dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004548:	4b31      	ldr	r3, [pc, #196]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a30      	ldr	r2, [pc, #192]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 800454e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7ff f89c 	bl	8003690 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455c:	f7ff f898 	bl	8003690 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e087      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456e:	4b28      	ldr	r3, [pc, #160]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004588:	019b      	lsls	r3, r3, #6
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	3b01      	subs	r3, #1
 8004594:	041b      	lsls	r3, r3, #16
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	4313      	orrs	r3, r2
 80045a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80045a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80045a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a8:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a18      	ldr	r2, [pc, #96]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80045ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7ff f86c 	bl	8003690 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045bc:	f7ff f868 	bl	8003690 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e057      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ce:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0x478>
 80045da:	e04f      	b.n	800467c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7ff f852 	bl	8003690 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7ff f84e 	bl	8003690 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e03d      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	4b03      	ldr	r3, [pc, #12]	@ (8004610 <HAL_RCC_OscConfig+0x4cc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x4ac>
 800460e:	e035      	b.n	800467c <HAL_RCC_OscConfig+0x538>
 8004610:	40023800 	.word	0x40023800
 8004614:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004618:	4b1b      	ldr	r3, [pc, #108]	@ (8004688 <HAL_RCC_OscConfig+0x544>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d028      	beq.n	8004678 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d121      	bne.n	8004678 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463e:	429a      	cmp	r2, r3
 8004640:	d11a      	bne.n	8004678 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004648:	4013      	ands	r3, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800464e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004650:	4293      	cmp	r3, r2
 8004652:	d111      	bne.n	8004678 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	3b01      	subs	r3, #1
 8004662:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d107      	bne.n	8004678 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004672:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40023800 	.word	0x40023800

0800468c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0d0      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d910      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b67      	ldr	r3, [pc, #412]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 020f 	bic.w	r2, r3, #15
 80046ba:	4965      	ldr	r1, [pc, #404]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b63      	ldr	r3, [pc, #396]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0b8      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d020      	beq.n	8004722 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ec:	4b59      	ldr	r3, [pc, #356]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a58      	ldr	r2, [pc, #352]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80046f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004704:	4b53      	ldr	r3, [pc, #332]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a52      	ldr	r2, [pc, #328]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800470a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800470e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004710:	4b50      	ldr	r3, [pc, #320]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	494d      	ldr	r1, [pc, #308]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d040      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d107      	bne.n	8004746 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	4b47      	ldr	r3, [pc, #284]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d115      	bne.n	800476e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e07f      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d107      	bne.n	800475e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474e:	4b41      	ldr	r3, [pc, #260]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e073      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475e:	4b3d      	ldr	r3, [pc, #244]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e06b      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476e:	4b39      	ldr	r3, [pc, #228]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f023 0203 	bic.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4936      	ldr	r1, [pc, #216]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004780:	f7fe ff86 	bl	8003690 <HAL_GetTick>
 8004784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004786:	e00a      	b.n	800479e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004788:	f7fe ff82 	bl	8003690 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e053      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479e:	4b2d      	ldr	r3, [pc, #180]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 020c 	and.w	r2, r3, #12
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d1eb      	bne.n	8004788 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047b0:	4b27      	ldr	r3, [pc, #156]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d210      	bcs.n	80047e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b24      	ldr	r3, [pc, #144]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 020f 	bic.w	r2, r3, #15
 80047c6:	4922      	ldr	r1, [pc, #136]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b20      	ldr	r3, [pc, #128]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e032      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ec:	4b19      	ldr	r3, [pc, #100]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4916      	ldr	r1, [pc, #88]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800480a:	4b12      	ldr	r3, [pc, #72]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	490e      	ldr	r1, [pc, #56]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800481e:	f000 f821 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8004822:	4602      	mov	r2, r0
 8004824:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	490a      	ldr	r1, [pc, #40]	@ (8004858 <HAL_RCC_ClockConfig+0x1cc>)
 8004830:	5ccb      	ldrb	r3, [r1, r3]
 8004832:	fa22 f303 	lsr.w	r3, r2, r3
 8004836:	4a09      	ldr	r2, [pc, #36]	@ (800485c <HAL_RCC_ClockConfig+0x1d0>)
 8004838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800483a:	4b09      	ldr	r3, [pc, #36]	@ (8004860 <HAL_RCC_ClockConfig+0x1d4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe fee2 	bl	8003608 <HAL_InitTick>

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023c00 	.word	0x40023c00
 8004854:	40023800 	.word	0x40023800
 8004858:	0800bf78 	.word	0x0800bf78
 800485c:	2000000c 	.word	0x2000000c
 8004860:	20000010 	.word	0x20000010

08004864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004868:	b094      	sub	sp, #80	@ 0x50
 800486a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004870:	2300      	movs	r3, #0
 8004872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004874:	2300      	movs	r3, #0
 8004876:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800487c:	4b79      	ldr	r3, [pc, #484]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b08      	cmp	r3, #8
 8004886:	d00d      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004888:	2b08      	cmp	r3, #8
 800488a:	f200 80e1 	bhi.w	8004a50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x34>
 8004892:	2b04      	cmp	r3, #4
 8004894:	d003      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x3a>
 8004896:	e0db      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004898:	4b73      	ldr	r3, [pc, #460]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x204>)
 800489a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800489c:	e0db      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800489e:	4b73      	ldr	r3, [pc, #460]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x208>)
 80048a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048a2:	e0d8      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d063      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	099b      	lsrs	r3, r3, #6
 80048c0:	2200      	movs	r2, #0
 80048c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ce:	2300      	movs	r3, #0
 80048d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048d6:	4622      	mov	r2, r4
 80048d8:	462b      	mov	r3, r5
 80048da:	f04f 0000 	mov.w	r0, #0
 80048de:	f04f 0100 	mov.w	r1, #0
 80048e2:	0159      	lsls	r1, r3, #5
 80048e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e8:	0150      	lsls	r0, r2, #5
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4621      	mov	r1, r4
 80048f0:	1a51      	subs	r1, r2, r1
 80048f2:	6139      	str	r1, [r7, #16]
 80048f4:	4629      	mov	r1, r5
 80048f6:	eb63 0301 	sbc.w	r3, r3, r1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004908:	4659      	mov	r1, fp
 800490a:	018b      	lsls	r3, r1, #6
 800490c:	4651      	mov	r1, sl
 800490e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004912:	4651      	mov	r1, sl
 8004914:	018a      	lsls	r2, r1, #6
 8004916:	4651      	mov	r1, sl
 8004918:	ebb2 0801 	subs.w	r8, r2, r1
 800491c:	4659      	mov	r1, fp
 800491e:	eb63 0901 	sbc.w	r9, r3, r1
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800492e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004936:	4690      	mov	r8, r2
 8004938:	4699      	mov	r9, r3
 800493a:	4623      	mov	r3, r4
 800493c:	eb18 0303 	adds.w	r3, r8, r3
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	462b      	mov	r3, r5
 8004944:	eb49 0303 	adc.w	r3, r9, r3
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004956:	4629      	mov	r1, r5
 8004958:	024b      	lsls	r3, r1, #9
 800495a:	4621      	mov	r1, r4
 800495c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004960:	4621      	mov	r1, r4
 8004962:	024a      	lsls	r2, r1, #9
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800496a:	2200      	movs	r2, #0
 800496c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800496e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004974:	f7fc f9f8 	bl	8000d68 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4613      	mov	r3, r2
 800497e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004980:	e058      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004982:	4b38      	ldr	r3, [pc, #224]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	2200      	movs	r2, #0
 800498a:	4618      	mov	r0, r3
 800498c:	4611      	mov	r1, r2
 800498e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004992:	623b      	str	r3, [r7, #32]
 8004994:	2300      	movs	r3, #0
 8004996:	627b      	str	r3, [r7, #36]	@ 0x24
 8004998:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800499c:	4642      	mov	r2, r8
 800499e:	464b      	mov	r3, r9
 80049a0:	f04f 0000 	mov.w	r0, #0
 80049a4:	f04f 0100 	mov.w	r1, #0
 80049a8:	0159      	lsls	r1, r3, #5
 80049aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ae:	0150      	lsls	r0, r2, #5
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4641      	mov	r1, r8
 80049b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049ba:	4649      	mov	r1, r9
 80049bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049d4:	ebb2 040a 	subs.w	r4, r2, sl
 80049d8:	eb63 050b 	sbc.w	r5, r3, fp
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	00eb      	lsls	r3, r5, #3
 80049e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ea:	00e2      	lsls	r2, r4, #3
 80049ec:	4614      	mov	r4, r2
 80049ee:	461d      	mov	r5, r3
 80049f0:	4643      	mov	r3, r8
 80049f2:	18e3      	adds	r3, r4, r3
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	464b      	mov	r3, r9
 80049f8:	eb45 0303 	adc.w	r3, r5, r3
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	028b      	lsls	r3, r1, #10
 8004a0e:	4621      	mov	r1, r4
 8004a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a14:	4621      	mov	r1, r4
 8004a16:	028a      	lsls	r2, r1, #10
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a1e:	2200      	movs	r2, #0
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	61fa      	str	r2, [r7, #28]
 8004a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a28:	f7fc f99e 	bl	8000d68 <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4613      	mov	r3, r2
 8004a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a34:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a4e:	e002      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a50:	4b05      	ldr	r3, [pc, #20]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3750      	adds	r7, #80	@ 0x50
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a62:	bf00      	nop
 8004a64:	40023800 	.word	0x40023800
 8004a68:	00f42400 	.word	0x00f42400
 8004a6c:	007a1200 	.word	0x007a1200

08004a70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a74:	4b03      	ldr	r3, [pc, #12]	@ (8004a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a76:	681b      	ldr	r3, [r3, #0]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	2000000c 	.word	0x2000000c

08004a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a8c:	f7ff fff0 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004a90:	4602      	mov	r2, r0
 8004a92:	4b05      	ldr	r3, [pc, #20]	@ (8004aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	0a9b      	lsrs	r3, r3, #10
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	4903      	ldr	r1, [pc, #12]	@ (8004aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a9e:	5ccb      	ldrb	r3, [r1, r3]
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	0800bf88 	.word	0x0800bf88

08004ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ab4:	f7ff ffdc 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	0b5b      	lsrs	r3, r3, #13
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4903      	ldr	r1, [pc, #12]	@ (8004ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	0800bf88 	.word	0x0800bf88

08004ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b00:	4b69      	ldr	r3, [pc, #420]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	4a68      	ldr	r2, [pc, #416]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b06:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004b0a:	6093      	str	r3, [r2, #8]
 8004b0c:	4b66      	ldr	r3, [pc, #408]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b14:	4964      	ldr	r1, [pc, #400]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b22:	2301      	movs	r3, #1
 8004b24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d017      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b32:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b40:	4959      	ldr	r1, [pc, #356]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b50:	d101      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b52:	2301      	movs	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d017      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b6e:	4b4e      	ldr	r3, [pc, #312]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b74:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7c:	494a      	ldr	r1, [pc, #296]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004baa:	2301      	movs	r3, #1
 8004bac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 808b 	beq.w	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bbc:	4b3a      	ldr	r3, [pc, #232]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc0:	4a39      	ldr	r2, [pc, #228]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bc8:	4b37      	ldr	r3, [pc, #220]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd0:	60bb      	str	r3, [r7, #8]
 8004bd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bd4:	4b35      	ldr	r3, [pc, #212]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a34      	ldr	r2, [pc, #208]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be0:	f7fe fd56 	bl	8003690 <HAL_GetTick>
 8004be4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be8:	f7fe fd52 	bl	8003690 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	@ 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e357      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c06:	4b28      	ldr	r3, [pc, #160]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d035      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d02e      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c24:	4b20      	ldr	r3, [pc, #128]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c32:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c38:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c44:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c46:	4a18      	ldr	r2, [pc, #96]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c4c:	4b16      	ldr	r3, [pc, #88]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d114      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fe fd1a 	bl	8003690 <HAL_GetTick>
 8004c5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c60:	f7fe fd16 	bl	8003690 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e319      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0ee      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c8e:	d111      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c90:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c9c:	4b04      	ldr	r3, [pc, #16]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c9e:	400b      	ands	r3, r1
 8004ca0:	4901      	ldr	r1, [pc, #4]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
 8004ca6:	e00b      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	40007000 	.word	0x40007000
 8004cb0:	0ffffcff 	.word	0x0ffffcff
 8004cb4:	4baa      	ldr	r3, [pc, #680]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	4aa9      	ldr	r2, [pc, #676]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cba:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004cbe:	6093      	str	r3, [r2, #8]
 8004cc0:	4ba7      	ldr	r3, [pc, #668]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ccc:	49a4      	ldr	r1, [pc, #656]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d010      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cde:	4ba0      	ldr	r3, [pc, #640]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ce4:	4a9e      	ldr	r2, [pc, #632]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004cee:	4b9c      	ldr	r3, [pc, #624]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf8:	4999      	ldr	r1, [pc, #612]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d0c:	4b94      	ldr	r3, [pc, #592]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d12:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d1a:	4991      	ldr	r1, [pc, #580]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d2e:	4b8c      	ldr	r3, [pc, #560]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d3c:	4988      	ldr	r1, [pc, #544]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d50:	4b83      	ldr	r3, [pc, #524]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d5e:	4980      	ldr	r1, [pc, #512]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d72:	4b7b      	ldr	r3, [pc, #492]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d80:	4977      	ldr	r1, [pc, #476]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d94:	4b72      	ldr	r3, [pc, #456]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d9a:	f023 0203 	bic.w	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	496f      	ldr	r1, [pc, #444]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004db6:	4b6a      	ldr	r3, [pc, #424]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dbc:	f023 020c 	bic.w	r2, r3, #12
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc4:	4966      	ldr	r1, [pc, #408]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dd8:	4b61      	ldr	r3, [pc, #388]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dde:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004de6:	495e      	ldr	r1, [pc, #376]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dfa:	4b59      	ldr	r3, [pc, #356]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e00:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e08:	4955      	ldr	r1, [pc, #340]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e1c:	4b50      	ldr	r3, [pc, #320]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2a:	494d      	ldr	r1, [pc, #308]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e3e:	4b48      	ldr	r3, [pc, #288]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e44:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4c:	4944      	ldr	r1, [pc, #272]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e60:	4b3f      	ldr	r3, [pc, #252]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e66:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6e:	493c      	ldr	r1, [pc, #240]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e82:	4b37      	ldr	r3, [pc, #220]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e90:	4933      	ldr	r1, [pc, #204]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ea4:	4b2e      	ldr	r3, [pc, #184]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eaa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eb2:	492b      	ldr	r1, [pc, #172]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d011      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ec6:	4b26      	ldr	r3, [pc, #152]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ecc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ed4:	4922      	ldr	r1, [pc, #136]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ee0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ee4:	d101      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f06:	4b16      	ldr	r3, [pc, #88]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f14:	4912      	ldr	r1, [pc, #72]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00b      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f28:	4b0d      	ldr	r3, [pc, #52]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f38:	4909      	ldr	r1, [pc, #36]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d006      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 80d9 	beq.w	8005106 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f54:	4b02      	ldr	r3, [pc, #8]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a01      	ldr	r2, [pc, #4]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f5e:	e001      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004f60:	40023800 	.word	0x40023800
 8004f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f66:	f7fe fb93 	bl	8003690 <HAL_GetTick>
 8004f6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f6e:	f7fe fb8f 	bl	8003690 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b64      	cmp	r3, #100	@ 0x64
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e194      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f80:	4b6c      	ldr	r3, [pc, #432]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f0      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d021      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d11d      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fa0:	4b64      	ldr	r3, [pc, #400]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fa6:	0c1b      	lsrs	r3, r3, #16
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fae:	4b61      	ldr	r3, [pc, #388]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fb4:	0e1b      	lsrs	r3, r3, #24
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	019a      	lsls	r2, r3, #6
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	061b      	lsls	r3, r3, #24
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	071b      	lsls	r3, r3, #28
 8004fd4:	4957      	ldr	r1, [pc, #348]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d004      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ff0:	d00a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d02e      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005002:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005006:	d129      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005008:	4b4a      	ldr	r3, [pc, #296]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800500a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800500e:	0c1b      	lsrs	r3, r3, #16
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005016:	4b47      	ldr	r3, [pc, #284]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800501c:	0f1b      	lsrs	r3, r3, #28
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	019a      	lsls	r2, r3, #6
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	041b      	lsls	r3, r3, #16
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	061b      	lsls	r3, r3, #24
 8005036:	431a      	orrs	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	071b      	lsls	r3, r3, #28
 800503c:	493d      	ldr	r1, [pc, #244]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005044:	4b3b      	ldr	r3, [pc, #236]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005046:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800504a:	f023 021f 	bic.w	r2, r3, #31
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	3b01      	subs	r3, #1
 8005054:	4937      	ldr	r1, [pc, #220]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01d      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005068:	4b32      	ldr	r3, [pc, #200]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800506a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800506e:	0e1b      	lsrs	r3, r3, #24
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005076:	4b2f      	ldr	r3, [pc, #188]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800507c:	0f1b      	lsrs	r3, r3, #28
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	019a      	lsls	r2, r3, #6
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	041b      	lsls	r3, r3, #16
 8005090:	431a      	orrs	r2, r3
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	061b      	lsls	r3, r3, #24
 8005096:	431a      	orrs	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	071b      	lsls	r3, r3, #28
 800509c:	4925      	ldr	r1, [pc, #148]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d011      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	019a      	lsls	r2, r3, #6
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	041b      	lsls	r3, r3, #16
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	061b      	lsls	r3, r3, #24
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	071b      	lsls	r3, r3, #28
 80050cc:	4919      	ldr	r1, [pc, #100]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050d4:	4b17      	ldr	r3, [pc, #92]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a16      	ldr	r2, [pc, #88]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e0:	f7fe fad6 	bl	8003690 <HAL_GetTick>
 80050e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050e8:	f7fe fad2 	bl	8003690 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	@ 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e0d7      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b01      	cmp	r3, #1
 800510a:	f040 80cd 	bne.w	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800510e:	4b09      	ldr	r3, [pc, #36]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a08      	ldr	r2, [pc, #32]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511a:	f7fe fab9 	bl	8003690 <HAL_GetTick>
 800511e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005120:	e00a      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005122:	f7fe fab5 	bl	8003690 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b64      	cmp	r3, #100	@ 0x64
 800512e:	d903      	bls.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e0ba      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005134:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005138:	4b5e      	ldr	r3, [pc, #376]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005144:	d0ed      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005162:	2b00      	cmp	r3, #0
 8005164:	d02e      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d12a      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800516e:	4b51      	ldr	r3, [pc, #324]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005174:	0c1b      	lsrs	r3, r3, #16
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800517c:	4b4d      	ldr	r3, [pc, #308]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005182:	0f1b      	lsrs	r3, r3, #28
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	019a      	lsls	r2, r3, #6
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	041b      	lsls	r3, r3, #16
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	061b      	lsls	r3, r3, #24
 800519c:	431a      	orrs	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	071b      	lsls	r3, r3, #28
 80051a2:	4944      	ldr	r1, [pc, #272]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051aa:	4b42      	ldr	r3, [pc, #264]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051b0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b8:	3b01      	subs	r3, #1
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	493d      	ldr	r1, [pc, #244]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d022      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051d8:	d11d      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051da:	4b36      	ldr	r3, [pc, #216]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e0:	0e1b      	lsrs	r3, r3, #24
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051e8:	4b32      	ldr	r3, [pc, #200]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ee:	0f1b      	lsrs	r3, r3, #28
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	019a      	lsls	r2, r3, #6
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	431a      	orrs	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	061b      	lsls	r3, r3, #24
 8005208:	431a      	orrs	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	071b      	lsls	r3, r3, #28
 800520e:	4929      	ldr	r1, [pc, #164]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d028      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005222:	4b24      	ldr	r3, [pc, #144]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005228:	0e1b      	lsrs	r3, r3, #24
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005230:	4b20      	ldr	r3, [pc, #128]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	019a      	lsls	r2, r3, #6
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	431a      	orrs	r2, r3
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	061b      	lsls	r3, r3, #24
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	071b      	lsls	r3, r3, #28
 8005256:	4917      	ldr	r1, [pc, #92]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800525e:	4b15      	ldr	r3, [pc, #84]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005264:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526c:	4911      	ldr	r1, [pc, #68]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005274:	4b0f      	ldr	r3, [pc, #60]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a0e      	ldr	r2, [pc, #56]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800527a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800527e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005280:	f7fe fa06 	bl	8003690 <HAL_GetTick>
 8005284:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005286:	e008      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005288:	f7fe fa02 	bl	8003690 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b64      	cmp	r3, #100	@ 0x64
 8005294:	d901      	bls.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e007      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800529a:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052a6:	d1ef      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40023800 	.word	0x40023800

080052b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e09d      	b.n	8005406 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d108      	bne.n	80052e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052da:	d009      	beq.n	80052f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	61da      	str	r2, [r3, #28]
 80052e2:	e005      	b.n	80052f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fd fc24 	bl	8002b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005326:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005330:	d902      	bls.n	8005338 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	e002      	b.n	800533e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800533c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005346:	d007      	beq.n	8005358 <HAL_SPI_Init+0xa0>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005350:	d002      	beq.n	8005358 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539a:	ea42 0103 	orr.w	r1, r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	f003 0204 	and.w	r2, r3, #4
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80053d4:	ea42 0103 	orr.w	r1, r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b088      	sub	sp, #32
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	603b      	str	r3, [r7, #0]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_SPI_Transmit+0x22>
 800542c:	2302      	movs	r3, #2
 800542e:	e15f      	b.n	80056f0 <HAL_SPI_Transmit+0x2e2>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005438:	f7fe f92a 	bl	8003690 <HAL_GetTick>
 800543c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800543e:	88fb      	ldrh	r3, [r7, #6]
 8005440:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b01      	cmp	r3, #1
 800544c:	d002      	beq.n	8005454 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800544e:	2302      	movs	r3, #2
 8005450:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005452:	e148      	b.n	80056e6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_SPI_Transmit+0x52>
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d102      	bne.n	8005466 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005464:	e13f      	b.n	80056e6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2203      	movs	r2, #3
 800546a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	88fa      	ldrh	r2, [r7, #6]
 800547e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	88fa      	ldrh	r2, [r7, #6]
 8005484:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054b0:	d10f      	bne.n	80054d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054dc:	2b40      	cmp	r3, #64	@ 0x40
 80054de:	d007      	beq.n	80054f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054f8:	d94f      	bls.n	800559a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_SPI_Transmit+0xfa>
 8005502:	8afb      	ldrh	r3, [r7, #22]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d142      	bne.n	800558e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550c:	881a      	ldrh	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005518:	1c9a      	adds	r2, r3, #2
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800552c:	e02f      	b.n	800558e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b02      	cmp	r3, #2
 800553a:	d112      	bne.n	8005562 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005540:	881a      	ldrh	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005560:	e015      	b.n	800558e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005562:	f7fe f895 	bl	8003690 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d803      	bhi.n	800557a <HAL_SPI_Transmit+0x16c>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d102      	bne.n	8005580 <HAL_SPI_Transmit+0x172>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d106      	bne.n	800558e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800558c:	e0ab      	b.n	80056e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1ca      	bne.n	800552e <HAL_SPI_Transmit+0x120>
 8005598:	e080      	b.n	800569c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <HAL_SPI_Transmit+0x19a>
 80055a2:	8afb      	ldrh	r3, [r7, #22]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d174      	bne.n	8005692 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d912      	bls.n	80055d8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	881a      	ldrh	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c2:	1c9a      	adds	r2, r3, #2
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b02      	subs	r3, #2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055d6:	e05c      	b.n	8005692 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	7812      	ldrb	r2, [r2, #0]
 80055e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80055fe:	e048      	b.n	8005692 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b02      	cmp	r3, #2
 800560c:	d12b      	bne.n	8005666 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	d912      	bls.n	800563e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561c:	881a      	ldrh	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005628:	1c9a      	adds	r2, r3, #2
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b02      	subs	r3, #2
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800563c:	e029      	b.n	8005692 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	330c      	adds	r3, #12
 8005648:	7812      	ldrb	r2, [r2, #0]
 800564a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800565a:	b29b      	uxth	r3, r3
 800565c:	3b01      	subs	r3, #1
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005664:	e015      	b.n	8005692 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005666:	f7fe f813 	bl	8003690 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d803      	bhi.n	800567e <HAL_SPI_Transmit+0x270>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d102      	bne.n	8005684 <HAL_SPI_Transmit+0x276>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d106      	bne.n	8005692 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005690:	e029      	b.n	80056e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1b1      	bne.n	8005600 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fb69 	bl	8005d78 <SPI_EndRxTxTransaction>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056ba:	2300      	movs	r3, #0
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e003      	b.n	80056e6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80056ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3720      	adds	r7, #32
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	@ 0x28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005706:	2301      	movs	r3, #1
 8005708:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_SPI_TransmitReceive+0x26>
 800571a:	2302      	movs	r3, #2
 800571c:	e20a      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x43c>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005726:	f7fd ffb3 	bl	8003690 <HAL_GetTick>
 800572a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005732:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800573a:	887b      	ldrh	r3, [r7, #2]
 800573c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800573e:	887b      	ldrh	r3, [r7, #2]
 8005740:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005742:	7efb      	ldrb	r3, [r7, #27]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d00e      	beq.n	8005766 <HAL_SPI_TransmitReceive+0x6e>
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800574e:	d106      	bne.n	800575e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d102      	bne.n	800575e <HAL_SPI_TransmitReceive+0x66>
 8005758:	7efb      	ldrb	r3, [r7, #27]
 800575a:	2b04      	cmp	r3, #4
 800575c:	d003      	beq.n	8005766 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800575e:	2302      	movs	r3, #2
 8005760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005764:	e1e0      	b.n	8005b28 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_SPI_TransmitReceive+0x80>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <HAL_SPI_TransmitReceive+0x80>
 8005772:	887b      	ldrh	r3, [r7, #2]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d103      	bne.n	8005780 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800577e:	e1d3      	b.n	8005b28 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b04      	cmp	r3, #4
 800578a:	d003      	beq.n	8005794 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2205      	movs	r2, #5
 8005790:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	887a      	ldrh	r2, [r7, #2]
 80057a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	887a      	ldrh	r2, [r7, #2]
 80057ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	887a      	ldrh	r2, [r7, #2]
 80057ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057d6:	d802      	bhi.n	80057de <HAL_SPI_TransmitReceive+0xe6>
 80057d8:	8a3b      	ldrh	r3, [r7, #16]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d908      	bls.n	80057f0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057ec:	605a      	str	r2, [r3, #4]
 80057ee:	e007      	b.n	8005800 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580a:	2b40      	cmp	r3, #64	@ 0x40
 800580c:	d007      	beq.n	800581e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800581c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005826:	f240 8081 	bls.w	800592c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x140>
 8005832:	8a7b      	ldrh	r3, [r7, #18]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d16d      	bne.n	8005914 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583c:	881a      	ldrh	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005848:	1c9a      	adds	r2, r3, #2
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800585c:	e05a      	b.n	8005914 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b02      	cmp	r3, #2
 800586a:	d11b      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x1ac>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d016      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x1ac>
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	2b01      	cmp	r3, #1
 800587a:	d113      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005880:	881a      	ldrh	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588c:	1c9a      	adds	r2, r3, #2
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d11c      	bne.n	80058ec <HAL_SPI_TransmitReceive+0x1f4>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d016      	beq.n	80058ec <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c8:	b292      	uxth	r2, r2
 80058ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d0:	1c9a      	adds	r2, r3, #2
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058e8:	2301      	movs	r3, #1
 80058ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058ec:	f7fd fed0 	bl	8003690 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d80b      	bhi.n	8005914 <HAL_SPI_TransmitReceive+0x21c>
 80058fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d007      	beq.n	8005914 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005912:	e109      	b.n	8005b28 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d19f      	bne.n	800585e <HAL_SPI_TransmitReceive+0x166>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d199      	bne.n	800585e <HAL_SPI_TransmitReceive+0x166>
 800592a:	e0e3      	b.n	8005af4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_SPI_TransmitReceive+0x244>
 8005934:	8a7b      	ldrh	r3, [r7, #18]
 8005936:	2b01      	cmp	r3, #1
 8005938:	f040 80cf 	bne.w	8005ada <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b01      	cmp	r3, #1
 8005944:	d912      	bls.n	800596c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594a:	881a      	ldrh	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005956:	1c9a      	adds	r2, r3, #2
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b02      	subs	r3, #2
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800596a:	e0b6      	b.n	8005ada <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	330c      	adds	r3, #12
 8005976:	7812      	ldrb	r2, [r2, #0]
 8005978:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005992:	e0a2      	b.n	8005ada <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d134      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x314>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d02f      	beq.n	8005a0c <HAL_SPI_TransmitReceive+0x314>
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d12c      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d912      	bls.n	80059e2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c0:	881a      	ldrh	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059cc:	1c9a      	adds	r2, r3, #2
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b02      	subs	r3, #2
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059e0:	e012      	b.n	8005a08 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	7812      	ldrb	r2, [r2, #0]
 80059ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d148      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x3b4>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d042      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d923      	bls.n	8005a7a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3c:	b292      	uxth	r2, r2
 8005a3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a44:	1c9a      	adds	r2, r3, #2
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b02      	subs	r3, #2
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d81f      	bhi.n	8005aa8 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a76:	605a      	str	r2, [r3, #4]
 8005a78:	e016      	b.n	8005aa8 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f103 020c 	add.w	r2, r3, #12
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a86:	7812      	ldrb	r2, [r2, #0]
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005aac:	f7fd fdf0 	bl	8003690 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d803      	bhi.n	8005ac4 <HAL_SPI_TransmitReceive+0x3cc>
 8005abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac2:	d102      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x3d2>
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d107      	bne.n	8005ada <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005ad8:	e026      	b.n	8005b28 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f47f af57 	bne.w	8005994 <HAL_SPI_TransmitReceive+0x29c>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f47f af50 	bne.w	8005994 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f93d 	bl	8005d78 <SPI_EndRxTxTransaction>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b1e:	e003      	b.n	8005b28 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005b30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3728      	adds	r7, #40	@ 0x28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b4c:	f7fd fda0 	bl	8003690 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b54:	1a9b      	subs	r3, r3, r2
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	4413      	add	r3, r2
 8005b5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b5c:	f7fd fd98 	bl	8003690 <HAL_GetTick>
 8005b60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b62:	4b39      	ldr	r3, [pc, #228]	@ (8005c48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	015b      	lsls	r3, r3, #5
 8005b68:	0d1b      	lsrs	r3, r3, #20
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	fb02 f303 	mul.w	r3, r2, r3
 8005b70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b72:	e054      	b.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d050      	beq.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b7c:	f7fd fd88 	bl	8003690 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d902      	bls.n	8005b92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d13d      	bne.n	8005c0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ba0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005baa:	d111      	bne.n	8005bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb4:	d004      	beq.n	8005bc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bbe:	d107      	bne.n	8005bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bd8:	d10f      	bne.n	8005bfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e017      	b.n	8005c3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4013      	ands	r3, r2
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	bf0c      	ite	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	2300      	movne	r3, #0
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d19b      	bne.n	8005b74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	2000000c 	.word	0x2000000c

08005c4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	@ 0x28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c5e:	f7fd fd17 	bl	8003690 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c66:	1a9b      	subs	r3, r3, r2
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005c6e:	f7fd fd0f 	bl	8003690 <HAL_GetTick>
 8005c72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	00da      	lsls	r2, r3, #3
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	0d1b      	lsrs	r3, r3, #20
 8005c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c94:	e060      	b.n	8005d58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c9c:	d107      	bne.n	8005cae <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d104      	bne.n	8005cae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d050      	beq.n	8005d58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cb6:	f7fd fceb 	bl	8003690 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d902      	bls.n	8005ccc <SPI_WaitFifoStateUntilTimeout+0x80>
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d13d      	bne.n	8005d48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005cda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ce4:	d111      	bne.n	8005d0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cee:	d004      	beq.n	8005cfa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cf8:	d107      	bne.n	8005d0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d12:	d10f      	bne.n	8005d34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e010      	b.n	8005d6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	4013      	ands	r3, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d196      	bne.n	8005c96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3728      	adds	r7, #40	@ 0x28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	2000000c 	.word	0x2000000c

08005d78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7ff ff5b 	bl	8005c4c <SPI_WaitFifoStateUntilTimeout>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d007      	beq.n	8005dac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da0:	f043 0220 	orr.w	r2, r3, #32
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e046      	b.n	8005e3a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005dac:	4b25      	ldr	r3, [pc, #148]	@ (8005e44 <SPI_EndRxTxTransaction+0xcc>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a25      	ldr	r2, [pc, #148]	@ (8005e48 <SPI_EndRxTxTransaction+0xd0>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	0d5b      	lsrs	r3, r3, #21
 8005db8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005dbc:	fb02 f303 	mul.w	r3, r2, r3
 8005dc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dca:	d112      	bne.n	8005df2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2180      	movs	r1, #128	@ 0x80
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f7ff feb0 	bl	8005b3c <SPI_WaitFlagStateUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d016      	beq.n	8005e10 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de6:	f043 0220 	orr.w	r2, r3, #32
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e023      	b.n	8005e3a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e08:	2b80      	cmp	r3, #128	@ 0x80
 8005e0a:	d0f2      	beq.n	8005df2 <SPI_EndRxTxTransaction+0x7a>
 8005e0c:	e000      	b.n	8005e10 <SPI_EndRxTxTransaction+0x98>
        break;
 8005e0e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f7ff ff15 	bl	8005c4c <SPI_WaitFifoStateUntilTimeout>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e2c:	f043 0220 	orr.w	r2, r3, #32
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e000      	b.n	8005e3a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	2000000c 	.word	0x2000000c
 8005e48:	165e9f81 	.word	0x165e9f81

08005e4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e040      	b.n	8005ee0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fd fa8c 	bl	800338c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2224      	movs	r2, #36	@ 0x24
 8005e78:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0201 	bic.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fb16 	bl	80064c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f8af 	bl	8005ffc <UART_SetConfig>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e01b      	b.n	8005ee0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005eb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ec6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fb95 	bl	8006608 <UART_CheckIdleState>
 8005ede:	4603      	mov	r3, r0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	@ 0x28
 8005eec:	af02      	add	r7, sp, #8
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d177      	bne.n	8005ff0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_UART_Transmit+0x24>
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e070      	b.n	8005ff2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2221      	movs	r2, #33	@ 0x21
 8005f1c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f1e:	f7fd fbb7 	bl	8003690 <HAL_GetTick>
 8005f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	88fa      	ldrh	r2, [r7, #6]
 8005f28:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	88fa      	ldrh	r2, [r7, #6]
 8005f30:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f3c:	d108      	bne.n	8005f50 <HAL_UART_Transmit+0x68>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d104      	bne.n	8005f50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	61bb      	str	r3, [r7, #24]
 8005f4e:	e003      	b.n	8005f58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f58:	e02f      	b.n	8005fba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2200      	movs	r2, #0
 8005f62:	2180      	movs	r1, #128	@ 0x80
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fba6 	bl	80066b6 <UART_WaitOnFlagUntilTimeout>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d004      	beq.n	8005f7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e03b      	b.n	8005ff2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10b      	bne.n	8005f98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	3302      	adds	r3, #2
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	e007      	b.n	8005fa8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	781a      	ldrb	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1c9      	bne.n	8005f5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2140      	movs	r1, #64	@ 0x40
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fb70 	bl	80066b6 <UART_WaitOnFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d004      	beq.n	8005fe6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e005      	b.n	8005ff2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	e000      	b.n	8005ff2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
  }
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	431a      	orrs	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4ba6      	ldr	r3, [pc, #664]	@ (80062c0 <UART_SetConfig+0x2c4>)
 8006028:	4013      	ands	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6812      	ldr	r2, [r2, #0]
 800602e:	6979      	ldr	r1, [r7, #20]
 8006030:	430b      	orrs	r3, r1
 8006032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	430a      	orrs	r2, r1
 800606c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a94      	ldr	r2, [pc, #592]	@ (80062c4 <UART_SetConfig+0x2c8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d120      	bne.n	80060ba <UART_SetConfig+0xbe>
 8006078:	4b93      	ldr	r3, [pc, #588]	@ (80062c8 <UART_SetConfig+0x2cc>)
 800607a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	2b03      	cmp	r3, #3
 8006084:	d816      	bhi.n	80060b4 <UART_SetConfig+0xb8>
 8006086:	a201      	add	r2, pc, #4	@ (adr r2, 800608c <UART_SetConfig+0x90>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	0800609d 	.word	0x0800609d
 8006090:	080060a9 	.word	0x080060a9
 8006094:	080060a3 	.word	0x080060a3
 8006098:	080060af 	.word	0x080060af
 800609c:	2301      	movs	r3, #1
 800609e:	77fb      	strb	r3, [r7, #31]
 80060a0:	e150      	b.n	8006344 <UART_SetConfig+0x348>
 80060a2:	2302      	movs	r3, #2
 80060a4:	77fb      	strb	r3, [r7, #31]
 80060a6:	e14d      	b.n	8006344 <UART_SetConfig+0x348>
 80060a8:	2304      	movs	r3, #4
 80060aa:	77fb      	strb	r3, [r7, #31]
 80060ac:	e14a      	b.n	8006344 <UART_SetConfig+0x348>
 80060ae:	2308      	movs	r3, #8
 80060b0:	77fb      	strb	r3, [r7, #31]
 80060b2:	e147      	b.n	8006344 <UART_SetConfig+0x348>
 80060b4:	2310      	movs	r3, #16
 80060b6:	77fb      	strb	r3, [r7, #31]
 80060b8:	e144      	b.n	8006344 <UART_SetConfig+0x348>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a83      	ldr	r2, [pc, #524]	@ (80062cc <UART_SetConfig+0x2d0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d132      	bne.n	800612a <UART_SetConfig+0x12e>
 80060c4:	4b80      	ldr	r3, [pc, #512]	@ (80062c8 <UART_SetConfig+0x2cc>)
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ca:	f003 030c 	and.w	r3, r3, #12
 80060ce:	2b0c      	cmp	r3, #12
 80060d0:	d828      	bhi.n	8006124 <UART_SetConfig+0x128>
 80060d2:	a201      	add	r2, pc, #4	@ (adr r2, 80060d8 <UART_SetConfig+0xdc>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	0800610d 	.word	0x0800610d
 80060dc:	08006125 	.word	0x08006125
 80060e0:	08006125 	.word	0x08006125
 80060e4:	08006125 	.word	0x08006125
 80060e8:	08006119 	.word	0x08006119
 80060ec:	08006125 	.word	0x08006125
 80060f0:	08006125 	.word	0x08006125
 80060f4:	08006125 	.word	0x08006125
 80060f8:	08006113 	.word	0x08006113
 80060fc:	08006125 	.word	0x08006125
 8006100:	08006125 	.word	0x08006125
 8006104:	08006125 	.word	0x08006125
 8006108:	0800611f 	.word	0x0800611f
 800610c:	2300      	movs	r3, #0
 800610e:	77fb      	strb	r3, [r7, #31]
 8006110:	e118      	b.n	8006344 <UART_SetConfig+0x348>
 8006112:	2302      	movs	r3, #2
 8006114:	77fb      	strb	r3, [r7, #31]
 8006116:	e115      	b.n	8006344 <UART_SetConfig+0x348>
 8006118:	2304      	movs	r3, #4
 800611a:	77fb      	strb	r3, [r7, #31]
 800611c:	e112      	b.n	8006344 <UART_SetConfig+0x348>
 800611e:	2308      	movs	r3, #8
 8006120:	77fb      	strb	r3, [r7, #31]
 8006122:	e10f      	b.n	8006344 <UART_SetConfig+0x348>
 8006124:	2310      	movs	r3, #16
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e10c      	b.n	8006344 <UART_SetConfig+0x348>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a68      	ldr	r2, [pc, #416]	@ (80062d0 <UART_SetConfig+0x2d4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d120      	bne.n	8006176 <UART_SetConfig+0x17a>
 8006134:	4b64      	ldr	r3, [pc, #400]	@ (80062c8 <UART_SetConfig+0x2cc>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800613a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800613e:	2b30      	cmp	r3, #48	@ 0x30
 8006140:	d013      	beq.n	800616a <UART_SetConfig+0x16e>
 8006142:	2b30      	cmp	r3, #48	@ 0x30
 8006144:	d814      	bhi.n	8006170 <UART_SetConfig+0x174>
 8006146:	2b20      	cmp	r3, #32
 8006148:	d009      	beq.n	800615e <UART_SetConfig+0x162>
 800614a:	2b20      	cmp	r3, #32
 800614c:	d810      	bhi.n	8006170 <UART_SetConfig+0x174>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <UART_SetConfig+0x15c>
 8006152:	2b10      	cmp	r3, #16
 8006154:	d006      	beq.n	8006164 <UART_SetConfig+0x168>
 8006156:	e00b      	b.n	8006170 <UART_SetConfig+0x174>
 8006158:	2300      	movs	r3, #0
 800615a:	77fb      	strb	r3, [r7, #31]
 800615c:	e0f2      	b.n	8006344 <UART_SetConfig+0x348>
 800615e:	2302      	movs	r3, #2
 8006160:	77fb      	strb	r3, [r7, #31]
 8006162:	e0ef      	b.n	8006344 <UART_SetConfig+0x348>
 8006164:	2304      	movs	r3, #4
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e0ec      	b.n	8006344 <UART_SetConfig+0x348>
 800616a:	2308      	movs	r3, #8
 800616c:	77fb      	strb	r3, [r7, #31]
 800616e:	e0e9      	b.n	8006344 <UART_SetConfig+0x348>
 8006170:	2310      	movs	r3, #16
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	e0e6      	b.n	8006344 <UART_SetConfig+0x348>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a56      	ldr	r2, [pc, #344]	@ (80062d4 <UART_SetConfig+0x2d8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d120      	bne.n	80061c2 <UART_SetConfig+0x1c6>
 8006180:	4b51      	ldr	r3, [pc, #324]	@ (80062c8 <UART_SetConfig+0x2cc>)
 8006182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006186:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800618a:	2bc0      	cmp	r3, #192	@ 0xc0
 800618c:	d013      	beq.n	80061b6 <UART_SetConfig+0x1ba>
 800618e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006190:	d814      	bhi.n	80061bc <UART_SetConfig+0x1c0>
 8006192:	2b80      	cmp	r3, #128	@ 0x80
 8006194:	d009      	beq.n	80061aa <UART_SetConfig+0x1ae>
 8006196:	2b80      	cmp	r3, #128	@ 0x80
 8006198:	d810      	bhi.n	80061bc <UART_SetConfig+0x1c0>
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <UART_SetConfig+0x1a8>
 800619e:	2b40      	cmp	r3, #64	@ 0x40
 80061a0:	d006      	beq.n	80061b0 <UART_SetConfig+0x1b4>
 80061a2:	e00b      	b.n	80061bc <UART_SetConfig+0x1c0>
 80061a4:	2300      	movs	r3, #0
 80061a6:	77fb      	strb	r3, [r7, #31]
 80061a8:	e0cc      	b.n	8006344 <UART_SetConfig+0x348>
 80061aa:	2302      	movs	r3, #2
 80061ac:	77fb      	strb	r3, [r7, #31]
 80061ae:	e0c9      	b.n	8006344 <UART_SetConfig+0x348>
 80061b0:	2304      	movs	r3, #4
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e0c6      	b.n	8006344 <UART_SetConfig+0x348>
 80061b6:	2308      	movs	r3, #8
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e0c3      	b.n	8006344 <UART_SetConfig+0x348>
 80061bc:	2310      	movs	r3, #16
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e0c0      	b.n	8006344 <UART_SetConfig+0x348>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a44      	ldr	r2, [pc, #272]	@ (80062d8 <UART_SetConfig+0x2dc>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d125      	bne.n	8006218 <UART_SetConfig+0x21c>
 80061cc:	4b3e      	ldr	r3, [pc, #248]	@ (80062c8 <UART_SetConfig+0x2cc>)
 80061ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061da:	d017      	beq.n	800620c <UART_SetConfig+0x210>
 80061dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061e0:	d817      	bhi.n	8006212 <UART_SetConfig+0x216>
 80061e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061e6:	d00b      	beq.n	8006200 <UART_SetConfig+0x204>
 80061e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ec:	d811      	bhi.n	8006212 <UART_SetConfig+0x216>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <UART_SetConfig+0x1fe>
 80061f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061f6:	d006      	beq.n	8006206 <UART_SetConfig+0x20a>
 80061f8:	e00b      	b.n	8006212 <UART_SetConfig+0x216>
 80061fa:	2300      	movs	r3, #0
 80061fc:	77fb      	strb	r3, [r7, #31]
 80061fe:	e0a1      	b.n	8006344 <UART_SetConfig+0x348>
 8006200:	2302      	movs	r3, #2
 8006202:	77fb      	strb	r3, [r7, #31]
 8006204:	e09e      	b.n	8006344 <UART_SetConfig+0x348>
 8006206:	2304      	movs	r3, #4
 8006208:	77fb      	strb	r3, [r7, #31]
 800620a:	e09b      	b.n	8006344 <UART_SetConfig+0x348>
 800620c:	2308      	movs	r3, #8
 800620e:	77fb      	strb	r3, [r7, #31]
 8006210:	e098      	b.n	8006344 <UART_SetConfig+0x348>
 8006212:	2310      	movs	r3, #16
 8006214:	77fb      	strb	r3, [r7, #31]
 8006216:	e095      	b.n	8006344 <UART_SetConfig+0x348>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a2f      	ldr	r2, [pc, #188]	@ (80062dc <UART_SetConfig+0x2e0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d125      	bne.n	800626e <UART_SetConfig+0x272>
 8006222:	4b29      	ldr	r3, [pc, #164]	@ (80062c8 <UART_SetConfig+0x2cc>)
 8006224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006228:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800622c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006230:	d017      	beq.n	8006262 <UART_SetConfig+0x266>
 8006232:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006236:	d817      	bhi.n	8006268 <UART_SetConfig+0x26c>
 8006238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800623c:	d00b      	beq.n	8006256 <UART_SetConfig+0x25a>
 800623e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006242:	d811      	bhi.n	8006268 <UART_SetConfig+0x26c>
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <UART_SetConfig+0x254>
 8006248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800624c:	d006      	beq.n	800625c <UART_SetConfig+0x260>
 800624e:	e00b      	b.n	8006268 <UART_SetConfig+0x26c>
 8006250:	2301      	movs	r3, #1
 8006252:	77fb      	strb	r3, [r7, #31]
 8006254:	e076      	b.n	8006344 <UART_SetConfig+0x348>
 8006256:	2302      	movs	r3, #2
 8006258:	77fb      	strb	r3, [r7, #31]
 800625a:	e073      	b.n	8006344 <UART_SetConfig+0x348>
 800625c:	2304      	movs	r3, #4
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	e070      	b.n	8006344 <UART_SetConfig+0x348>
 8006262:	2308      	movs	r3, #8
 8006264:	77fb      	strb	r3, [r7, #31]
 8006266:	e06d      	b.n	8006344 <UART_SetConfig+0x348>
 8006268:	2310      	movs	r3, #16
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	e06a      	b.n	8006344 <UART_SetConfig+0x348>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1b      	ldr	r2, [pc, #108]	@ (80062e0 <UART_SetConfig+0x2e4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d138      	bne.n	80062ea <UART_SetConfig+0x2ee>
 8006278:	4b13      	ldr	r3, [pc, #76]	@ (80062c8 <UART_SetConfig+0x2cc>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006282:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006286:	d017      	beq.n	80062b8 <UART_SetConfig+0x2bc>
 8006288:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800628c:	d82a      	bhi.n	80062e4 <UART_SetConfig+0x2e8>
 800628e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006292:	d00b      	beq.n	80062ac <UART_SetConfig+0x2b0>
 8006294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006298:	d824      	bhi.n	80062e4 <UART_SetConfig+0x2e8>
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <UART_SetConfig+0x2aa>
 800629e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062a2:	d006      	beq.n	80062b2 <UART_SetConfig+0x2b6>
 80062a4:	e01e      	b.n	80062e4 <UART_SetConfig+0x2e8>
 80062a6:	2300      	movs	r3, #0
 80062a8:	77fb      	strb	r3, [r7, #31]
 80062aa:	e04b      	b.n	8006344 <UART_SetConfig+0x348>
 80062ac:	2302      	movs	r3, #2
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e048      	b.n	8006344 <UART_SetConfig+0x348>
 80062b2:	2304      	movs	r3, #4
 80062b4:	77fb      	strb	r3, [r7, #31]
 80062b6:	e045      	b.n	8006344 <UART_SetConfig+0x348>
 80062b8:	2308      	movs	r3, #8
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e042      	b.n	8006344 <UART_SetConfig+0x348>
 80062be:	bf00      	nop
 80062c0:	efff69f3 	.word	0xefff69f3
 80062c4:	40011000 	.word	0x40011000
 80062c8:	40023800 	.word	0x40023800
 80062cc:	40004400 	.word	0x40004400
 80062d0:	40004800 	.word	0x40004800
 80062d4:	40004c00 	.word	0x40004c00
 80062d8:	40005000 	.word	0x40005000
 80062dc:	40011400 	.word	0x40011400
 80062e0:	40007800 	.word	0x40007800
 80062e4:	2310      	movs	r3, #16
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e02c      	b.n	8006344 <UART_SetConfig+0x348>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a72      	ldr	r2, [pc, #456]	@ (80064b8 <UART_SetConfig+0x4bc>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d125      	bne.n	8006340 <UART_SetConfig+0x344>
 80062f4:	4b71      	ldr	r3, [pc, #452]	@ (80064bc <UART_SetConfig+0x4c0>)
 80062f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80062fe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006302:	d017      	beq.n	8006334 <UART_SetConfig+0x338>
 8006304:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006308:	d817      	bhi.n	800633a <UART_SetConfig+0x33e>
 800630a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800630e:	d00b      	beq.n	8006328 <UART_SetConfig+0x32c>
 8006310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006314:	d811      	bhi.n	800633a <UART_SetConfig+0x33e>
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <UART_SetConfig+0x326>
 800631a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800631e:	d006      	beq.n	800632e <UART_SetConfig+0x332>
 8006320:	e00b      	b.n	800633a <UART_SetConfig+0x33e>
 8006322:	2300      	movs	r3, #0
 8006324:	77fb      	strb	r3, [r7, #31]
 8006326:	e00d      	b.n	8006344 <UART_SetConfig+0x348>
 8006328:	2302      	movs	r3, #2
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e00a      	b.n	8006344 <UART_SetConfig+0x348>
 800632e:	2304      	movs	r3, #4
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e007      	b.n	8006344 <UART_SetConfig+0x348>
 8006334:	2308      	movs	r3, #8
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e004      	b.n	8006344 <UART_SetConfig+0x348>
 800633a:	2310      	movs	r3, #16
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e001      	b.n	8006344 <UART_SetConfig+0x348>
 8006340:	2310      	movs	r3, #16
 8006342:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800634c:	d15b      	bne.n	8006406 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800634e:	7ffb      	ldrb	r3, [r7, #31]
 8006350:	2b08      	cmp	r3, #8
 8006352:	d828      	bhi.n	80063a6 <UART_SetConfig+0x3aa>
 8006354:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <UART_SetConfig+0x360>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	08006381 	.word	0x08006381
 8006360:	08006389 	.word	0x08006389
 8006364:	08006391 	.word	0x08006391
 8006368:	080063a7 	.word	0x080063a7
 800636c:	08006397 	.word	0x08006397
 8006370:	080063a7 	.word	0x080063a7
 8006374:	080063a7 	.word	0x080063a7
 8006378:	080063a7 	.word	0x080063a7
 800637c:	0800639f 	.word	0x0800639f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006380:	f7fe fb82 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 8006384:	61b8      	str	r0, [r7, #24]
        break;
 8006386:	e013      	b.n	80063b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006388:	f7fe fb92 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 800638c:	61b8      	str	r0, [r7, #24]
        break;
 800638e:	e00f      	b.n	80063b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006390:	4b4b      	ldr	r3, [pc, #300]	@ (80064c0 <UART_SetConfig+0x4c4>)
 8006392:	61bb      	str	r3, [r7, #24]
        break;
 8006394:	e00c      	b.n	80063b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006396:	f7fe fa65 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 800639a:	61b8      	str	r0, [r7, #24]
        break;
 800639c:	e008      	b.n	80063b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800639e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063a2:	61bb      	str	r3, [r7, #24]
        break;
 80063a4:	e004      	b.n	80063b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	77bb      	strb	r3, [r7, #30]
        break;
 80063ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d074      	beq.n	80064a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	005a      	lsls	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	441a      	add	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	2b0f      	cmp	r3, #15
 80063d0:	d916      	bls.n	8006400 <UART_SetConfig+0x404>
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063d8:	d212      	bcs.n	8006400 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f023 030f 	bic.w	r3, r3, #15
 80063e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	89fb      	ldrh	r3, [r7, #14]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	89fa      	ldrh	r2, [r7, #14]
 80063fc:	60da      	str	r2, [r3, #12]
 80063fe:	e04f      	b.n	80064a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	77bb      	strb	r3, [r7, #30]
 8006404:	e04c      	b.n	80064a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006406:	7ffb      	ldrb	r3, [r7, #31]
 8006408:	2b08      	cmp	r3, #8
 800640a:	d828      	bhi.n	800645e <UART_SetConfig+0x462>
 800640c:	a201      	add	r2, pc, #4	@ (adr r2, 8006414 <UART_SetConfig+0x418>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	08006439 	.word	0x08006439
 8006418:	08006441 	.word	0x08006441
 800641c:	08006449 	.word	0x08006449
 8006420:	0800645f 	.word	0x0800645f
 8006424:	0800644f 	.word	0x0800644f
 8006428:	0800645f 	.word	0x0800645f
 800642c:	0800645f 	.word	0x0800645f
 8006430:	0800645f 	.word	0x0800645f
 8006434:	08006457 	.word	0x08006457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006438:	f7fe fb26 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 800643c:	61b8      	str	r0, [r7, #24]
        break;
 800643e:	e013      	b.n	8006468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006440:	f7fe fb36 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 8006444:	61b8      	str	r0, [r7, #24]
        break;
 8006446:	e00f      	b.n	8006468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006448:	4b1d      	ldr	r3, [pc, #116]	@ (80064c0 <UART_SetConfig+0x4c4>)
 800644a:	61bb      	str	r3, [r7, #24]
        break;
 800644c:	e00c      	b.n	8006468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800644e:	f7fe fa09 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8006452:	61b8      	str	r0, [r7, #24]
        break;
 8006454:	e008      	b.n	8006468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800645a:	61bb      	str	r3, [r7, #24]
        break;
 800645c:	e004      	b.n	8006468 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	77bb      	strb	r3, [r7, #30]
        break;
 8006466:	bf00      	nop
    }

    if (pclk != 0U)
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d018      	beq.n	80064a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	085a      	lsrs	r2, r3, #1
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	441a      	add	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b0f      	cmp	r3, #15
 8006486:	d909      	bls.n	800649c <UART_SetConfig+0x4a0>
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800648e:	d205      	bcs.n	800649c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	b29a      	uxth	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	60da      	str	r2, [r3, #12]
 800649a:	e001      	b.n	80064a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80064ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3720      	adds	r7, #32
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	40007c00 	.word	0x40007c00
 80064bc:	40023800 	.word	0x40023800
 80064c0:	00f42400 	.word	0x00f42400

080064c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00a      	beq.n	80064ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00a      	beq.n	8006576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01a      	beq.n	80065da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065c2:	d10a      	bne.n	80065da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08c      	sub	sp, #48	@ 0x30
 800660c:	af02      	add	r7, sp, #8
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006618:	f7fd f83a 	bl	8003690 <HAL_GetTick>
 800661c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b08      	cmp	r3, #8
 800662a:	d12e      	bne.n	800668a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800662c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	2200      	movs	r2, #0
 8006636:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f83b 	bl	80066b6 <UART_WaitOnFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d021      	beq.n	800668a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	60fb      	str	r3, [r7, #12]
   return(result);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800665a:	623b      	str	r3, [r7, #32]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	69b9      	ldr	r1, [r7, #24]
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	617b      	str	r3, [r7, #20]
   return(result);
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e6      	bne.n	8006646 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2220      	movs	r2, #32
 800667c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e011      	b.n	80066ae <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2220      	movs	r2, #32
 8006694:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3728      	adds	r7, #40	@ 0x28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	603b      	str	r3, [r7, #0]
 80066c2:	4613      	mov	r3, r2
 80066c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c6:	e04f      	b.n	8006768 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ce:	d04b      	beq.n	8006768 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d0:	f7fc ffde 	bl	8003690 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d302      	bcc.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e04e      	b.n	8006788 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d037      	beq.n	8006768 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2b80      	cmp	r3, #128	@ 0x80
 80066fc:	d034      	beq.n	8006768 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b40      	cmp	r3, #64	@ 0x40
 8006702:	d031      	beq.n	8006768 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b08      	cmp	r3, #8
 8006710:	d110      	bne.n	8006734 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2208      	movs	r2, #8
 8006718:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f838 	bl	8006790 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2208      	movs	r2, #8
 8006724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e029      	b.n	8006788 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800673e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006742:	d111      	bne.n	8006768 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800674c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 f81e 	bl	8006790 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e00f      	b.n	8006788 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	69da      	ldr	r2, [r3, #28]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	4013      	ands	r3, r2
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	429a      	cmp	r2, r3
 8006776:	bf0c      	ite	eq
 8006778:	2301      	moveq	r3, #1
 800677a:	2300      	movne	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	461a      	mov	r2, r3
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	429a      	cmp	r2, r3
 8006784:	d0a0      	beq.n	80066c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006790:	b480      	push	{r7}
 8006792:	b095      	sub	sp, #84	@ 0x54
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80067b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1e6      	bne.n	8006798 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3308      	adds	r3, #8
 80067d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	f023 0301 	bic.w	r3, r3, #1
 80067e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3308      	adds	r3, #8
 80067e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e5      	bne.n	80067ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006802:	2b01      	cmp	r3, #1
 8006804:	d118      	bne.n	8006838 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	e853 3f00 	ldrex	r3, [r3]
 8006812:	60bb      	str	r3, [r7, #8]
   return(result);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f023 0310 	bic.w	r3, r3, #16
 800681a:	647b      	str	r3, [r7, #68]	@ 0x44
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	461a      	mov	r2, r3
 8006822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006824:	61bb      	str	r3, [r7, #24]
 8006826:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	6979      	ldr	r1, [r7, #20]
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	e841 2300 	strex	r3, r2, [r1]
 8006830:	613b      	str	r3, [r7, #16]
   return(result);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e6      	bne.n	8006806 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800684c:	bf00      	nop
 800684e:	3754      	adds	r7, #84	@ 0x54
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006858:	b084      	sub	sp, #16
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	f107 001c 	add.w	r0, r7, #28
 8006866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800686a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800686e:	2b01      	cmp	r3, #1
 8006870:	d121      	bne.n	80068b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006876:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	4b21      	ldr	r3, [pc, #132]	@ (8006908 <USB_CoreInit+0xb0>)
 8006884:	4013      	ands	r3, r2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006896:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800689a:	2b01      	cmp	r3, #1
 800689c:	d105      	bne.n	80068aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fa92 	bl	8006dd4 <USB_CoreReset>
 80068b0:	4603      	mov	r3, r0
 80068b2:	73fb      	strb	r3, [r7, #15]
 80068b4:	e010      	b.n	80068d8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fa86 	bl	8006dd4 <USB_CoreReset>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80068d8:	7fbb      	ldrb	r3, [r7, #30]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d10b      	bne.n	80068f6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f043 0206 	orr.w	r2, r3, #6
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f043 0220 	orr.w	r2, r3, #32
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006902:	b004      	add	sp, #16
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	ffbdffbf 	.word	0xffbdffbf

0800690c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f023 0201 	bic.w	r2, r3, #1
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	460b      	mov	r3, r1
 8006938:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d115      	bne.n	800697c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800695c:	200a      	movs	r0, #10
 800695e:	f7fc fea3 	bl	80036a8 <HAL_Delay>
      ms += 10U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	330a      	adds	r3, #10
 8006966:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fa25 	bl	8006db8 <USB_GetMode>
 800696e:	4603      	mov	r3, r0
 8006970:	2b01      	cmp	r3, #1
 8006972:	d01e      	beq.n	80069b2 <USB_SetCurrentMode+0x84>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2bc7      	cmp	r3, #199	@ 0xc7
 8006978:	d9f0      	bls.n	800695c <USB_SetCurrentMode+0x2e>
 800697a:	e01a      	b.n	80069b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800697c:	78fb      	ldrb	r3, [r7, #3]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d115      	bne.n	80069ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800698e:	200a      	movs	r0, #10
 8006990:	f7fc fe8a 	bl	80036a8 <HAL_Delay>
      ms += 10U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	330a      	adds	r3, #10
 8006998:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fa0c 	bl	8006db8 <USB_GetMode>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d005      	beq.n	80069b2 <USB_SetCurrentMode+0x84>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80069aa:	d9f0      	bls.n	800698e <USB_SetCurrentMode+0x60>
 80069ac:	e001      	b.n	80069b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e005      	b.n	80069be <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2bc8      	cmp	r3, #200	@ 0xc8
 80069b6:	d101      	bne.n	80069bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e000      	b.n	80069be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069c8:	b084      	sub	sp, #16
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b086      	sub	sp, #24
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80069d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069e2:	2300      	movs	r3, #0
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	e009      	b.n	80069fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	3340      	adds	r3, #64	@ 0x40
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	2200      	movs	r2, #0
 80069f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	3301      	adds	r3, #1
 80069fa:	613b      	str	r3, [r7, #16]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2b0e      	cmp	r3, #14
 8006a00:	d9f2      	bls.n	80069e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d11c      	bne.n	8006a44 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a18:	f043 0302 	orr.w	r3, r3, #2
 8006a1c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a22:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	e005      	b.n	8006a50 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a48:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a56:	461a      	mov	r2, r3
 8006a58:	2300      	movs	r3, #0
 8006a5a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a5c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d10d      	bne.n	8006a80 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f968 	bl	8006d44 <USB_SetDevSpeed>
 8006a74:	e008      	b.n	8006a88 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a76:	2101      	movs	r1, #1
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f963 	bl	8006d44 <USB_SetDevSpeed>
 8006a7e:	e003      	b.n	8006a88 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a80:	2103      	movs	r1, #3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f95e 	bl	8006d44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a88:	2110      	movs	r1, #16
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f8fa 	bl	8006c84 <USB_FlushTxFifo>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f924 	bl	8006ce8 <USB_FlushRxFifo>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006abc:	461a      	mov	r2, r3
 8006abe:	2300      	movs	r3, #0
 8006ac0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac8:	461a      	mov	r2, r3
 8006aca:	2300      	movs	r3, #0
 8006acc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ace:	2300      	movs	r3, #0
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	e043      	b.n	8006b5c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006aea:	d118      	bne.n	8006b1e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006afe:	461a      	mov	r2, r3
 8006b00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	e013      	b.n	8006b30 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b14:	461a      	mov	r2, r3
 8006b16:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	e008      	b.n	8006b30 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	2300      	movs	r3, #0
 8006b40:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006b54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006b60:	461a      	mov	r2, r3
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d3b5      	bcc.n	8006ad4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	613b      	str	r3, [r7, #16]
 8006b6c:	e043      	b.n	8006bf6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b84:	d118      	bne.n	8006bb8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	e013      	b.n	8006bca <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	e008      	b.n	8006bca <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	2300      	movs	r3, #0
 8006bda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be8:	461a      	mov	r2, r3
 8006bea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006bee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	613b      	str	r3, [r7, #16]
 8006bf6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d3b5      	bcc.n	8006b6e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c14:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006c22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d105      	bne.n	8006c38 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f043 0210 	orr.w	r2, r3, #16
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699a      	ldr	r2, [r3, #24]
 8006c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c7c <USB_DevInit+0x2b4>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d005      	beq.n	8006c58 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	f043 0208 	orr.w	r2, r3, #8
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d105      	bne.n	8006c6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	4b06      	ldr	r3, [pc, #24]	@ (8006c80 <USB_DevInit+0x2b8>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c78:	b004      	add	sp, #16
 8006c7a:	4770      	bx	lr
 8006c7c:	803c3800 	.word	0x803c3800
 8006c80:	40000004 	.word	0x40000004

08006c84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3301      	adds	r3, #1
 8006c96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c9e:	d901      	bls.n	8006ca4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e01b      	b.n	8006cdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	daf2      	bge.n	8006c92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	019b      	lsls	r3, r3, #6
 8006cb4:	f043 0220 	orr.w	r2, r3, #32
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cc8:	d901      	bls.n	8006cce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e006      	b.n	8006cdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d0f0      	beq.n	8006cbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d00:	d901      	bls.n	8006d06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e018      	b.n	8006d38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	daf2      	bge.n	8006cf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2210      	movs	r2, #16
 8006d16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d24:	d901      	bls.n	8006d2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e006      	b.n	8006d38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f003 0310 	and.w	r3, r3, #16
 8006d32:	2b10      	cmp	r3, #16
 8006d34:	d0f0      	beq.n	8006d18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	68f9      	ldr	r1, [r7, #12]
 8006d60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d64:	4313      	orrs	r3, r2
 8006d66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d90:	f023 0303 	bic.w	r3, r3, #3
 8006d94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006da4:	f043 0302 	orr.w	r3, r3, #2
 8006da8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3301      	adds	r3, #1
 8006de4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dec:	d901      	bls.n	8006df2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e01b      	b.n	8006e2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	daf2      	bge.n	8006de0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f043 0201 	orr.w	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e16:	d901      	bls.n	8006e1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e006      	b.n	8006e2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d0f0      	beq.n	8006e0a <USB_CoreReset+0x36>

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
	...

08006e38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006e3c:	4904      	ldr	r1, [pc, #16]	@ (8006e50 <MX_FATFS_Init+0x18>)
 8006e3e:	4805      	ldr	r0, [pc, #20]	@ (8006e54 <MX_FATFS_Init+0x1c>)
 8006e40:	f000 f8ae 	bl	8006fa0 <FATFS_LinkDriver>
 8006e44:	4603      	mov	r3, r0
 8006e46:	461a      	mov	r2, r3
 8006e48:	4b03      	ldr	r3, [pc, #12]	@ (8006e58 <MX_FATFS_Init+0x20>)
 8006e4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006e4c:	bf00      	nop
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20000870 	.word	0x20000870
 8006e54:	20000018 	.word	0x20000018
 8006e58:	2000086c 	.word	0x2000086c

08006e5c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		return SD_disk_initialize(pdrv);
 8006e66:	79fb      	ldrb	r3, [r7, #7]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fb f803 	bl	8001e74 <SD_disk_initialize>
 8006e6e:	4603      	mov	r3, r0

  /* USER CODE END INIT */
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		return SD_disk_status(pdrv);
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fb f8db 	bl	8002040 <SD_disk_status>
 8006e8a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	607a      	str	r2, [r7, #4]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		return SD_disk_read(pdrv, buff, sector, count);
 8006ea4:	7bf8      	ldrb	r0, [r7, #15]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	68b9      	ldr	r1, [r7, #8]
 8006eac:	f7fb f8de 	bl	800206c <SD_disk_read>
 8006eb0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		return SD_disk_write(pdrv, buff, sector, count);
 8006eca:	7bf8      	ldrb	r0, [r7, #15]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	f7fb f935 	bl	8002140 <SD_disk_write>
 8006ed6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	603a      	str	r2, [r7, #0]
 8006eea:	71fb      	strb	r3, [r7, #7]
 8006eec:	460b      	mov	r3, r1
 8006eee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		return SD_disk_ioctl(pdrv, cmd, buff);
 8006ef0:	79b9      	ldrb	r1, [r7, #6]
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fb f9a6 	bl	8002248 <SD_disk_ioctl>
 8006efc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	4613      	mov	r3, r2
 8006f14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006f16:	2301      	movs	r3, #1
 8006f18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006f9c <FATFS_LinkDriverEx+0x94>)
 8006f20:	7a5b      	ldrb	r3, [r3, #9]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d131      	bne.n	8006f8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006f28:	4b1c      	ldr	r3, [pc, #112]	@ (8006f9c <FATFS_LinkDriverEx+0x94>)
 8006f2a:	7a5b      	ldrb	r3, [r3, #9]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	461a      	mov	r2, r3
 8006f30:	4b1a      	ldr	r3, [pc, #104]	@ (8006f9c <FATFS_LinkDriverEx+0x94>)
 8006f32:	2100      	movs	r1, #0
 8006f34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006f36:	4b19      	ldr	r3, [pc, #100]	@ (8006f9c <FATFS_LinkDriverEx+0x94>)
 8006f38:	7a5b      	ldrb	r3, [r3, #9]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	4a17      	ldr	r2, [pc, #92]	@ (8006f9c <FATFS_LinkDriverEx+0x94>)
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006f46:	4b15      	ldr	r3, [pc, #84]	@ (8006f9c <FATFS_LinkDriverEx+0x94>)
 8006f48:	7a5b      	ldrb	r3, [r3, #9]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	4b13      	ldr	r3, [pc, #76]	@ (8006f9c <FATFS_LinkDriverEx+0x94>)
 8006f50:	4413      	add	r3, r2
 8006f52:	79fa      	ldrb	r2, [r7, #7]
 8006f54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006f56:	4b11      	ldr	r3, [pc, #68]	@ (8006f9c <FATFS_LinkDriverEx+0x94>)
 8006f58:	7a5b      	ldrb	r3, [r3, #9]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	b2d1      	uxtb	r1, r2
 8006f60:	4a0e      	ldr	r2, [pc, #56]	@ (8006f9c <FATFS_LinkDriverEx+0x94>)
 8006f62:	7251      	strb	r1, [r2, #9]
 8006f64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006f66:	7dbb      	ldrb	r3, [r7, #22]
 8006f68:	3330      	adds	r3, #48	@ 0x30
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	3301      	adds	r3, #1
 8006f74:	223a      	movs	r2, #58	@ 0x3a
 8006f76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	3302      	adds	r3, #2
 8006f7c:	222f      	movs	r2, #47	@ 0x2f
 8006f7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	3303      	adds	r3, #3
 8006f84:	2200      	movs	r2, #0
 8006f86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	20000874 	.word	0x20000874

08006fa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006faa:	2200      	movs	r2, #0
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7ff ffaa 	bl	8006f08 <FATFS_LinkDriverEx>
 8006fb4:	4603      	mov	r3, r0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <malloc>:
 8006fc0:	4b02      	ldr	r3, [pc, #8]	@ (8006fcc <malloc+0xc>)
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	f000 b825 	b.w	8007014 <_malloc_r>
 8006fca:	bf00      	nop
 8006fcc:	20000038 	.word	0x20000038

08006fd0 <sbrk_aligned>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	4e0f      	ldr	r6, [pc, #60]	@ (8007010 <sbrk_aligned+0x40>)
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	6831      	ldr	r1, [r6, #0]
 8006fd8:	4605      	mov	r5, r0
 8006fda:	b911      	cbnz	r1, 8006fe2 <sbrk_aligned+0x12>
 8006fdc:	f001 f952 	bl	8008284 <_sbrk_r>
 8006fe0:	6030      	str	r0, [r6, #0]
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f001 f94d 	bl	8008284 <_sbrk_r>
 8006fea:	1c43      	adds	r3, r0, #1
 8006fec:	d103      	bne.n	8006ff6 <sbrk_aligned+0x26>
 8006fee:	f04f 34ff 	mov.w	r4, #4294967295
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	bd70      	pop	{r4, r5, r6, pc}
 8006ff6:	1cc4      	adds	r4, r0, #3
 8006ff8:	f024 0403 	bic.w	r4, r4, #3
 8006ffc:	42a0      	cmp	r0, r4
 8006ffe:	d0f8      	beq.n	8006ff2 <sbrk_aligned+0x22>
 8007000:	1a21      	subs	r1, r4, r0
 8007002:	4628      	mov	r0, r5
 8007004:	f001 f93e 	bl	8008284 <_sbrk_r>
 8007008:	3001      	adds	r0, #1
 800700a:	d1f2      	bne.n	8006ff2 <sbrk_aligned+0x22>
 800700c:	e7ef      	b.n	8006fee <sbrk_aligned+0x1e>
 800700e:	bf00      	nop
 8007010:	20000880 	.word	0x20000880

08007014 <_malloc_r>:
 8007014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007018:	1ccd      	adds	r5, r1, #3
 800701a:	f025 0503 	bic.w	r5, r5, #3
 800701e:	3508      	adds	r5, #8
 8007020:	2d0c      	cmp	r5, #12
 8007022:	bf38      	it	cc
 8007024:	250c      	movcc	r5, #12
 8007026:	2d00      	cmp	r5, #0
 8007028:	4606      	mov	r6, r0
 800702a:	db01      	blt.n	8007030 <_malloc_r+0x1c>
 800702c:	42a9      	cmp	r1, r5
 800702e:	d904      	bls.n	800703a <_malloc_r+0x26>
 8007030:	230c      	movs	r3, #12
 8007032:	6033      	str	r3, [r6, #0]
 8007034:	2000      	movs	r0, #0
 8007036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800703a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007110 <_malloc_r+0xfc>
 800703e:	f000 f869 	bl	8007114 <__malloc_lock>
 8007042:	f8d8 3000 	ldr.w	r3, [r8]
 8007046:	461c      	mov	r4, r3
 8007048:	bb44      	cbnz	r4, 800709c <_malloc_r+0x88>
 800704a:	4629      	mov	r1, r5
 800704c:	4630      	mov	r0, r6
 800704e:	f7ff ffbf 	bl	8006fd0 <sbrk_aligned>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	4604      	mov	r4, r0
 8007056:	d158      	bne.n	800710a <_malloc_r+0xf6>
 8007058:	f8d8 4000 	ldr.w	r4, [r8]
 800705c:	4627      	mov	r7, r4
 800705e:	2f00      	cmp	r7, #0
 8007060:	d143      	bne.n	80070ea <_malloc_r+0xd6>
 8007062:	2c00      	cmp	r4, #0
 8007064:	d04b      	beq.n	80070fe <_malloc_r+0xea>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	4639      	mov	r1, r7
 800706a:	4630      	mov	r0, r6
 800706c:	eb04 0903 	add.w	r9, r4, r3
 8007070:	f001 f908 	bl	8008284 <_sbrk_r>
 8007074:	4581      	cmp	r9, r0
 8007076:	d142      	bne.n	80070fe <_malloc_r+0xea>
 8007078:	6821      	ldr	r1, [r4, #0]
 800707a:	1a6d      	subs	r5, r5, r1
 800707c:	4629      	mov	r1, r5
 800707e:	4630      	mov	r0, r6
 8007080:	f7ff ffa6 	bl	8006fd0 <sbrk_aligned>
 8007084:	3001      	adds	r0, #1
 8007086:	d03a      	beq.n	80070fe <_malloc_r+0xea>
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	442b      	add	r3, r5
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	f8d8 3000 	ldr.w	r3, [r8]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	bb62      	cbnz	r2, 80070f0 <_malloc_r+0xdc>
 8007096:	f8c8 7000 	str.w	r7, [r8]
 800709a:	e00f      	b.n	80070bc <_malloc_r+0xa8>
 800709c:	6822      	ldr	r2, [r4, #0]
 800709e:	1b52      	subs	r2, r2, r5
 80070a0:	d420      	bmi.n	80070e4 <_malloc_r+0xd0>
 80070a2:	2a0b      	cmp	r2, #11
 80070a4:	d917      	bls.n	80070d6 <_malloc_r+0xc2>
 80070a6:	1961      	adds	r1, r4, r5
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	6025      	str	r5, [r4, #0]
 80070ac:	bf18      	it	ne
 80070ae:	6059      	strne	r1, [r3, #4]
 80070b0:	6863      	ldr	r3, [r4, #4]
 80070b2:	bf08      	it	eq
 80070b4:	f8c8 1000 	streq.w	r1, [r8]
 80070b8:	5162      	str	r2, [r4, r5]
 80070ba:	604b      	str	r3, [r1, #4]
 80070bc:	4630      	mov	r0, r6
 80070be:	f000 f82f 	bl	8007120 <__malloc_unlock>
 80070c2:	f104 000b 	add.w	r0, r4, #11
 80070c6:	1d23      	adds	r3, r4, #4
 80070c8:	f020 0007 	bic.w	r0, r0, #7
 80070cc:	1ac2      	subs	r2, r0, r3
 80070ce:	bf1c      	itt	ne
 80070d0:	1a1b      	subne	r3, r3, r0
 80070d2:	50a3      	strne	r3, [r4, r2]
 80070d4:	e7af      	b.n	8007036 <_malloc_r+0x22>
 80070d6:	6862      	ldr	r2, [r4, #4]
 80070d8:	42a3      	cmp	r3, r4
 80070da:	bf0c      	ite	eq
 80070dc:	f8c8 2000 	streq.w	r2, [r8]
 80070e0:	605a      	strne	r2, [r3, #4]
 80070e2:	e7eb      	b.n	80070bc <_malloc_r+0xa8>
 80070e4:	4623      	mov	r3, r4
 80070e6:	6864      	ldr	r4, [r4, #4]
 80070e8:	e7ae      	b.n	8007048 <_malloc_r+0x34>
 80070ea:	463c      	mov	r4, r7
 80070ec:	687f      	ldr	r7, [r7, #4]
 80070ee:	e7b6      	b.n	800705e <_malloc_r+0x4a>
 80070f0:	461a      	mov	r2, r3
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	d1fb      	bne.n	80070f0 <_malloc_r+0xdc>
 80070f8:	2300      	movs	r3, #0
 80070fa:	6053      	str	r3, [r2, #4]
 80070fc:	e7de      	b.n	80070bc <_malloc_r+0xa8>
 80070fe:	230c      	movs	r3, #12
 8007100:	6033      	str	r3, [r6, #0]
 8007102:	4630      	mov	r0, r6
 8007104:	f000 f80c 	bl	8007120 <__malloc_unlock>
 8007108:	e794      	b.n	8007034 <_malloc_r+0x20>
 800710a:	6005      	str	r5, [r0, #0]
 800710c:	e7d6      	b.n	80070bc <_malloc_r+0xa8>
 800710e:	bf00      	nop
 8007110:	20000884 	.word	0x20000884

08007114 <__malloc_lock>:
 8007114:	4801      	ldr	r0, [pc, #4]	@ (800711c <__malloc_lock+0x8>)
 8007116:	f001 b902 	b.w	800831e <__retarget_lock_acquire_recursive>
 800711a:	bf00      	nop
 800711c:	200009c8 	.word	0x200009c8

08007120 <__malloc_unlock>:
 8007120:	4801      	ldr	r0, [pc, #4]	@ (8007128 <__malloc_unlock+0x8>)
 8007122:	f001 b8fd 	b.w	8008320 <__retarget_lock_release_recursive>
 8007126:	bf00      	nop
 8007128:	200009c8 	.word	0x200009c8

0800712c <__cvt>:
 800712c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007130:	ec57 6b10 	vmov	r6, r7, d0
 8007134:	2f00      	cmp	r7, #0
 8007136:	460c      	mov	r4, r1
 8007138:	4619      	mov	r1, r3
 800713a:	463b      	mov	r3, r7
 800713c:	bfbb      	ittet	lt
 800713e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007142:	461f      	movlt	r7, r3
 8007144:	2300      	movge	r3, #0
 8007146:	232d      	movlt	r3, #45	@ 0x2d
 8007148:	700b      	strb	r3, [r1, #0]
 800714a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800714c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007150:	4691      	mov	r9, r2
 8007152:	f023 0820 	bic.w	r8, r3, #32
 8007156:	bfbc      	itt	lt
 8007158:	4632      	movlt	r2, r6
 800715a:	4616      	movlt	r6, r2
 800715c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007160:	d005      	beq.n	800716e <__cvt+0x42>
 8007162:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007166:	d100      	bne.n	800716a <__cvt+0x3e>
 8007168:	3401      	adds	r4, #1
 800716a:	2102      	movs	r1, #2
 800716c:	e000      	b.n	8007170 <__cvt+0x44>
 800716e:	2103      	movs	r1, #3
 8007170:	ab03      	add	r3, sp, #12
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	ab02      	add	r3, sp, #8
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	ec47 6b10 	vmov	d0, r6, r7
 800717c:	4653      	mov	r3, sl
 800717e:	4622      	mov	r2, r4
 8007180:	f001 f95e 	bl	8008440 <_dtoa_r>
 8007184:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007188:	4605      	mov	r5, r0
 800718a:	d119      	bne.n	80071c0 <__cvt+0x94>
 800718c:	f019 0f01 	tst.w	r9, #1
 8007190:	d00e      	beq.n	80071b0 <__cvt+0x84>
 8007192:	eb00 0904 	add.w	r9, r0, r4
 8007196:	2200      	movs	r2, #0
 8007198:	2300      	movs	r3, #0
 800719a:	4630      	mov	r0, r6
 800719c:	4639      	mov	r1, r7
 800719e:	f7f9 fcb3 	bl	8000b08 <__aeabi_dcmpeq>
 80071a2:	b108      	cbz	r0, 80071a8 <__cvt+0x7c>
 80071a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80071a8:	2230      	movs	r2, #48	@ 0x30
 80071aa:	9b03      	ldr	r3, [sp, #12]
 80071ac:	454b      	cmp	r3, r9
 80071ae:	d31e      	bcc.n	80071ee <__cvt+0xc2>
 80071b0:	9b03      	ldr	r3, [sp, #12]
 80071b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071b4:	1b5b      	subs	r3, r3, r5
 80071b6:	4628      	mov	r0, r5
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	b004      	add	sp, #16
 80071bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80071c4:	eb00 0904 	add.w	r9, r0, r4
 80071c8:	d1e5      	bne.n	8007196 <__cvt+0x6a>
 80071ca:	7803      	ldrb	r3, [r0, #0]
 80071cc:	2b30      	cmp	r3, #48	@ 0x30
 80071ce:	d10a      	bne.n	80071e6 <__cvt+0xba>
 80071d0:	2200      	movs	r2, #0
 80071d2:	2300      	movs	r3, #0
 80071d4:	4630      	mov	r0, r6
 80071d6:	4639      	mov	r1, r7
 80071d8:	f7f9 fc96 	bl	8000b08 <__aeabi_dcmpeq>
 80071dc:	b918      	cbnz	r0, 80071e6 <__cvt+0xba>
 80071de:	f1c4 0401 	rsb	r4, r4, #1
 80071e2:	f8ca 4000 	str.w	r4, [sl]
 80071e6:	f8da 3000 	ldr.w	r3, [sl]
 80071ea:	4499      	add	r9, r3
 80071ec:	e7d3      	b.n	8007196 <__cvt+0x6a>
 80071ee:	1c59      	adds	r1, r3, #1
 80071f0:	9103      	str	r1, [sp, #12]
 80071f2:	701a      	strb	r2, [r3, #0]
 80071f4:	e7d9      	b.n	80071aa <__cvt+0x7e>

080071f6 <__exponent>:
 80071f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071f8:	2900      	cmp	r1, #0
 80071fa:	bfba      	itte	lt
 80071fc:	4249      	neglt	r1, r1
 80071fe:	232d      	movlt	r3, #45	@ 0x2d
 8007200:	232b      	movge	r3, #43	@ 0x2b
 8007202:	2909      	cmp	r1, #9
 8007204:	7002      	strb	r2, [r0, #0]
 8007206:	7043      	strb	r3, [r0, #1]
 8007208:	dd29      	ble.n	800725e <__exponent+0x68>
 800720a:	f10d 0307 	add.w	r3, sp, #7
 800720e:	461d      	mov	r5, r3
 8007210:	270a      	movs	r7, #10
 8007212:	461a      	mov	r2, r3
 8007214:	fbb1 f6f7 	udiv	r6, r1, r7
 8007218:	fb07 1416 	mls	r4, r7, r6, r1
 800721c:	3430      	adds	r4, #48	@ 0x30
 800721e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007222:	460c      	mov	r4, r1
 8007224:	2c63      	cmp	r4, #99	@ 0x63
 8007226:	f103 33ff 	add.w	r3, r3, #4294967295
 800722a:	4631      	mov	r1, r6
 800722c:	dcf1      	bgt.n	8007212 <__exponent+0x1c>
 800722e:	3130      	adds	r1, #48	@ 0x30
 8007230:	1e94      	subs	r4, r2, #2
 8007232:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007236:	1c41      	adds	r1, r0, #1
 8007238:	4623      	mov	r3, r4
 800723a:	42ab      	cmp	r3, r5
 800723c:	d30a      	bcc.n	8007254 <__exponent+0x5e>
 800723e:	f10d 0309 	add.w	r3, sp, #9
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	42ac      	cmp	r4, r5
 8007246:	bf88      	it	hi
 8007248:	2300      	movhi	r3, #0
 800724a:	3302      	adds	r3, #2
 800724c:	4403      	add	r3, r0
 800724e:	1a18      	subs	r0, r3, r0
 8007250:	b003      	add	sp, #12
 8007252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007254:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007258:	f801 6f01 	strb.w	r6, [r1, #1]!
 800725c:	e7ed      	b.n	800723a <__exponent+0x44>
 800725e:	2330      	movs	r3, #48	@ 0x30
 8007260:	3130      	adds	r1, #48	@ 0x30
 8007262:	7083      	strb	r3, [r0, #2]
 8007264:	70c1      	strb	r1, [r0, #3]
 8007266:	1d03      	adds	r3, r0, #4
 8007268:	e7f1      	b.n	800724e <__exponent+0x58>
	...

0800726c <_printf_float>:
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	b08d      	sub	sp, #52	@ 0x34
 8007272:	460c      	mov	r4, r1
 8007274:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007278:	4616      	mov	r6, r2
 800727a:	461f      	mov	r7, r3
 800727c:	4605      	mov	r5, r0
 800727e:	f000 ffc9 	bl	8008214 <_localeconv_r>
 8007282:	6803      	ldr	r3, [r0, #0]
 8007284:	9304      	str	r3, [sp, #16]
 8007286:	4618      	mov	r0, r3
 8007288:	f7f9 f812 	bl	80002b0 <strlen>
 800728c:	2300      	movs	r3, #0
 800728e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007290:	f8d8 3000 	ldr.w	r3, [r8]
 8007294:	9005      	str	r0, [sp, #20]
 8007296:	3307      	adds	r3, #7
 8007298:	f023 0307 	bic.w	r3, r3, #7
 800729c:	f103 0208 	add.w	r2, r3, #8
 80072a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80072a4:	f8d4 b000 	ldr.w	fp, [r4]
 80072a8:	f8c8 2000 	str.w	r2, [r8]
 80072ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80072b4:	9307      	str	r3, [sp, #28]
 80072b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80072ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80072be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072c2:	4b9c      	ldr	r3, [pc, #624]	@ (8007534 <_printf_float+0x2c8>)
 80072c4:	f04f 32ff 	mov.w	r2, #4294967295
 80072c8:	f7f9 fc50 	bl	8000b6c <__aeabi_dcmpun>
 80072cc:	bb70      	cbnz	r0, 800732c <_printf_float+0xc0>
 80072ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072d2:	4b98      	ldr	r3, [pc, #608]	@ (8007534 <_printf_float+0x2c8>)
 80072d4:	f04f 32ff 	mov.w	r2, #4294967295
 80072d8:	f7f9 fc2a 	bl	8000b30 <__aeabi_dcmple>
 80072dc:	bb30      	cbnz	r0, 800732c <_printf_float+0xc0>
 80072de:	2200      	movs	r2, #0
 80072e0:	2300      	movs	r3, #0
 80072e2:	4640      	mov	r0, r8
 80072e4:	4649      	mov	r1, r9
 80072e6:	f7f9 fc19 	bl	8000b1c <__aeabi_dcmplt>
 80072ea:	b110      	cbz	r0, 80072f2 <_printf_float+0x86>
 80072ec:	232d      	movs	r3, #45	@ 0x2d
 80072ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072f2:	4a91      	ldr	r2, [pc, #580]	@ (8007538 <_printf_float+0x2cc>)
 80072f4:	4b91      	ldr	r3, [pc, #580]	@ (800753c <_printf_float+0x2d0>)
 80072f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80072fa:	bf94      	ite	ls
 80072fc:	4690      	movls	r8, r2
 80072fe:	4698      	movhi	r8, r3
 8007300:	2303      	movs	r3, #3
 8007302:	6123      	str	r3, [r4, #16]
 8007304:	f02b 0304 	bic.w	r3, fp, #4
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	f04f 0900 	mov.w	r9, #0
 800730e:	9700      	str	r7, [sp, #0]
 8007310:	4633      	mov	r3, r6
 8007312:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007314:	4621      	mov	r1, r4
 8007316:	4628      	mov	r0, r5
 8007318:	f000 f9d2 	bl	80076c0 <_printf_common>
 800731c:	3001      	adds	r0, #1
 800731e:	f040 808d 	bne.w	800743c <_printf_float+0x1d0>
 8007322:	f04f 30ff 	mov.w	r0, #4294967295
 8007326:	b00d      	add	sp, #52	@ 0x34
 8007328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732c:	4642      	mov	r2, r8
 800732e:	464b      	mov	r3, r9
 8007330:	4640      	mov	r0, r8
 8007332:	4649      	mov	r1, r9
 8007334:	f7f9 fc1a 	bl	8000b6c <__aeabi_dcmpun>
 8007338:	b140      	cbz	r0, 800734c <_printf_float+0xe0>
 800733a:	464b      	mov	r3, r9
 800733c:	2b00      	cmp	r3, #0
 800733e:	bfbc      	itt	lt
 8007340:	232d      	movlt	r3, #45	@ 0x2d
 8007342:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007346:	4a7e      	ldr	r2, [pc, #504]	@ (8007540 <_printf_float+0x2d4>)
 8007348:	4b7e      	ldr	r3, [pc, #504]	@ (8007544 <_printf_float+0x2d8>)
 800734a:	e7d4      	b.n	80072f6 <_printf_float+0x8a>
 800734c:	6863      	ldr	r3, [r4, #4]
 800734e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007352:	9206      	str	r2, [sp, #24]
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	d13b      	bne.n	80073d0 <_printf_float+0x164>
 8007358:	2306      	movs	r3, #6
 800735a:	6063      	str	r3, [r4, #4]
 800735c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007360:	2300      	movs	r3, #0
 8007362:	6022      	str	r2, [r4, #0]
 8007364:	9303      	str	r3, [sp, #12]
 8007366:	ab0a      	add	r3, sp, #40	@ 0x28
 8007368:	e9cd a301 	strd	sl, r3, [sp, #4]
 800736c:	ab09      	add	r3, sp, #36	@ 0x24
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	6861      	ldr	r1, [r4, #4]
 8007372:	ec49 8b10 	vmov	d0, r8, r9
 8007376:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800737a:	4628      	mov	r0, r5
 800737c:	f7ff fed6 	bl	800712c <__cvt>
 8007380:	9b06      	ldr	r3, [sp, #24]
 8007382:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007384:	2b47      	cmp	r3, #71	@ 0x47
 8007386:	4680      	mov	r8, r0
 8007388:	d129      	bne.n	80073de <_printf_float+0x172>
 800738a:	1cc8      	adds	r0, r1, #3
 800738c:	db02      	blt.n	8007394 <_printf_float+0x128>
 800738e:	6863      	ldr	r3, [r4, #4]
 8007390:	4299      	cmp	r1, r3
 8007392:	dd41      	ble.n	8007418 <_printf_float+0x1ac>
 8007394:	f1aa 0a02 	sub.w	sl, sl, #2
 8007398:	fa5f fa8a 	uxtb.w	sl, sl
 800739c:	3901      	subs	r1, #1
 800739e:	4652      	mov	r2, sl
 80073a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80073a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80073a6:	f7ff ff26 	bl	80071f6 <__exponent>
 80073aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073ac:	1813      	adds	r3, r2, r0
 80073ae:	2a01      	cmp	r2, #1
 80073b0:	4681      	mov	r9, r0
 80073b2:	6123      	str	r3, [r4, #16]
 80073b4:	dc02      	bgt.n	80073bc <_printf_float+0x150>
 80073b6:	6822      	ldr	r2, [r4, #0]
 80073b8:	07d2      	lsls	r2, r2, #31
 80073ba:	d501      	bpl.n	80073c0 <_printf_float+0x154>
 80073bc:	3301      	adds	r3, #1
 80073be:	6123      	str	r3, [r4, #16]
 80073c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0a2      	beq.n	800730e <_printf_float+0xa2>
 80073c8:	232d      	movs	r3, #45	@ 0x2d
 80073ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073ce:	e79e      	b.n	800730e <_printf_float+0xa2>
 80073d0:	9a06      	ldr	r2, [sp, #24]
 80073d2:	2a47      	cmp	r2, #71	@ 0x47
 80073d4:	d1c2      	bne.n	800735c <_printf_float+0xf0>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1c0      	bne.n	800735c <_printf_float+0xf0>
 80073da:	2301      	movs	r3, #1
 80073dc:	e7bd      	b.n	800735a <_printf_float+0xee>
 80073de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80073e2:	d9db      	bls.n	800739c <_printf_float+0x130>
 80073e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80073e8:	d118      	bne.n	800741c <_printf_float+0x1b0>
 80073ea:	2900      	cmp	r1, #0
 80073ec:	6863      	ldr	r3, [r4, #4]
 80073ee:	dd0b      	ble.n	8007408 <_printf_float+0x19c>
 80073f0:	6121      	str	r1, [r4, #16]
 80073f2:	b913      	cbnz	r3, 80073fa <_printf_float+0x18e>
 80073f4:	6822      	ldr	r2, [r4, #0]
 80073f6:	07d0      	lsls	r0, r2, #31
 80073f8:	d502      	bpl.n	8007400 <_printf_float+0x194>
 80073fa:	3301      	adds	r3, #1
 80073fc:	440b      	add	r3, r1
 80073fe:	6123      	str	r3, [r4, #16]
 8007400:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007402:	f04f 0900 	mov.w	r9, #0
 8007406:	e7db      	b.n	80073c0 <_printf_float+0x154>
 8007408:	b913      	cbnz	r3, 8007410 <_printf_float+0x1a4>
 800740a:	6822      	ldr	r2, [r4, #0]
 800740c:	07d2      	lsls	r2, r2, #31
 800740e:	d501      	bpl.n	8007414 <_printf_float+0x1a8>
 8007410:	3302      	adds	r3, #2
 8007412:	e7f4      	b.n	80073fe <_printf_float+0x192>
 8007414:	2301      	movs	r3, #1
 8007416:	e7f2      	b.n	80073fe <_printf_float+0x192>
 8007418:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800741c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800741e:	4299      	cmp	r1, r3
 8007420:	db05      	blt.n	800742e <_printf_float+0x1c2>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	6121      	str	r1, [r4, #16]
 8007426:	07d8      	lsls	r0, r3, #31
 8007428:	d5ea      	bpl.n	8007400 <_printf_float+0x194>
 800742a:	1c4b      	adds	r3, r1, #1
 800742c:	e7e7      	b.n	80073fe <_printf_float+0x192>
 800742e:	2900      	cmp	r1, #0
 8007430:	bfd4      	ite	le
 8007432:	f1c1 0202 	rsble	r2, r1, #2
 8007436:	2201      	movgt	r2, #1
 8007438:	4413      	add	r3, r2
 800743a:	e7e0      	b.n	80073fe <_printf_float+0x192>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	055a      	lsls	r2, r3, #21
 8007440:	d407      	bmi.n	8007452 <_printf_float+0x1e6>
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	4642      	mov	r2, r8
 8007446:	4631      	mov	r1, r6
 8007448:	4628      	mov	r0, r5
 800744a:	47b8      	blx	r7
 800744c:	3001      	adds	r0, #1
 800744e:	d12b      	bne.n	80074a8 <_printf_float+0x23c>
 8007450:	e767      	b.n	8007322 <_printf_float+0xb6>
 8007452:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007456:	f240 80dd 	bls.w	8007614 <_printf_float+0x3a8>
 800745a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800745e:	2200      	movs	r2, #0
 8007460:	2300      	movs	r3, #0
 8007462:	f7f9 fb51 	bl	8000b08 <__aeabi_dcmpeq>
 8007466:	2800      	cmp	r0, #0
 8007468:	d033      	beq.n	80074d2 <_printf_float+0x266>
 800746a:	4a37      	ldr	r2, [pc, #220]	@ (8007548 <_printf_float+0x2dc>)
 800746c:	2301      	movs	r3, #1
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	47b8      	blx	r7
 8007474:	3001      	adds	r0, #1
 8007476:	f43f af54 	beq.w	8007322 <_printf_float+0xb6>
 800747a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800747e:	4543      	cmp	r3, r8
 8007480:	db02      	blt.n	8007488 <_printf_float+0x21c>
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	07d8      	lsls	r0, r3, #31
 8007486:	d50f      	bpl.n	80074a8 <_printf_float+0x23c>
 8007488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800748c:	4631      	mov	r1, r6
 800748e:	4628      	mov	r0, r5
 8007490:	47b8      	blx	r7
 8007492:	3001      	adds	r0, #1
 8007494:	f43f af45 	beq.w	8007322 <_printf_float+0xb6>
 8007498:	f04f 0900 	mov.w	r9, #0
 800749c:	f108 38ff 	add.w	r8, r8, #4294967295
 80074a0:	f104 0a1a 	add.w	sl, r4, #26
 80074a4:	45c8      	cmp	r8, r9
 80074a6:	dc09      	bgt.n	80074bc <_printf_float+0x250>
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	079b      	lsls	r3, r3, #30
 80074ac:	f100 8103 	bmi.w	80076b6 <_printf_float+0x44a>
 80074b0:	68e0      	ldr	r0, [r4, #12]
 80074b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074b4:	4298      	cmp	r0, r3
 80074b6:	bfb8      	it	lt
 80074b8:	4618      	movlt	r0, r3
 80074ba:	e734      	b.n	8007326 <_printf_float+0xba>
 80074bc:	2301      	movs	r3, #1
 80074be:	4652      	mov	r2, sl
 80074c0:	4631      	mov	r1, r6
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b8      	blx	r7
 80074c6:	3001      	adds	r0, #1
 80074c8:	f43f af2b 	beq.w	8007322 <_printf_float+0xb6>
 80074cc:	f109 0901 	add.w	r9, r9, #1
 80074d0:	e7e8      	b.n	80074a4 <_printf_float+0x238>
 80074d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dc39      	bgt.n	800754c <_printf_float+0x2e0>
 80074d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007548 <_printf_float+0x2dc>)
 80074da:	2301      	movs	r3, #1
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	47b8      	blx	r7
 80074e2:	3001      	adds	r0, #1
 80074e4:	f43f af1d 	beq.w	8007322 <_printf_float+0xb6>
 80074e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80074ec:	ea59 0303 	orrs.w	r3, r9, r3
 80074f0:	d102      	bne.n	80074f8 <_printf_float+0x28c>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	07d9      	lsls	r1, r3, #31
 80074f6:	d5d7      	bpl.n	80074a8 <_printf_float+0x23c>
 80074f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074fc:	4631      	mov	r1, r6
 80074fe:	4628      	mov	r0, r5
 8007500:	47b8      	blx	r7
 8007502:	3001      	adds	r0, #1
 8007504:	f43f af0d 	beq.w	8007322 <_printf_float+0xb6>
 8007508:	f04f 0a00 	mov.w	sl, #0
 800750c:	f104 0b1a 	add.w	fp, r4, #26
 8007510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007512:	425b      	negs	r3, r3
 8007514:	4553      	cmp	r3, sl
 8007516:	dc01      	bgt.n	800751c <_printf_float+0x2b0>
 8007518:	464b      	mov	r3, r9
 800751a:	e793      	b.n	8007444 <_printf_float+0x1d8>
 800751c:	2301      	movs	r3, #1
 800751e:	465a      	mov	r2, fp
 8007520:	4631      	mov	r1, r6
 8007522:	4628      	mov	r0, r5
 8007524:	47b8      	blx	r7
 8007526:	3001      	adds	r0, #1
 8007528:	f43f aefb 	beq.w	8007322 <_printf_float+0xb6>
 800752c:	f10a 0a01 	add.w	sl, sl, #1
 8007530:	e7ee      	b.n	8007510 <_printf_float+0x2a4>
 8007532:	bf00      	nop
 8007534:	7fefffff 	.word	0x7fefffff
 8007538:	0800bf90 	.word	0x0800bf90
 800753c:	0800bf94 	.word	0x0800bf94
 8007540:	0800bf98 	.word	0x0800bf98
 8007544:	0800bf9c 	.word	0x0800bf9c
 8007548:	0800bfa0 	.word	0x0800bfa0
 800754c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800754e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007552:	4553      	cmp	r3, sl
 8007554:	bfa8      	it	ge
 8007556:	4653      	movge	r3, sl
 8007558:	2b00      	cmp	r3, #0
 800755a:	4699      	mov	r9, r3
 800755c:	dc36      	bgt.n	80075cc <_printf_float+0x360>
 800755e:	f04f 0b00 	mov.w	fp, #0
 8007562:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007566:	f104 021a 	add.w	r2, r4, #26
 800756a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800756c:	9306      	str	r3, [sp, #24]
 800756e:	eba3 0309 	sub.w	r3, r3, r9
 8007572:	455b      	cmp	r3, fp
 8007574:	dc31      	bgt.n	80075da <_printf_float+0x36e>
 8007576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007578:	459a      	cmp	sl, r3
 800757a:	dc3a      	bgt.n	80075f2 <_printf_float+0x386>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	07da      	lsls	r2, r3, #31
 8007580:	d437      	bmi.n	80075f2 <_printf_float+0x386>
 8007582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007584:	ebaa 0903 	sub.w	r9, sl, r3
 8007588:	9b06      	ldr	r3, [sp, #24]
 800758a:	ebaa 0303 	sub.w	r3, sl, r3
 800758e:	4599      	cmp	r9, r3
 8007590:	bfa8      	it	ge
 8007592:	4699      	movge	r9, r3
 8007594:	f1b9 0f00 	cmp.w	r9, #0
 8007598:	dc33      	bgt.n	8007602 <_printf_float+0x396>
 800759a:	f04f 0800 	mov.w	r8, #0
 800759e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075a2:	f104 0b1a 	add.w	fp, r4, #26
 80075a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a8:	ebaa 0303 	sub.w	r3, sl, r3
 80075ac:	eba3 0309 	sub.w	r3, r3, r9
 80075b0:	4543      	cmp	r3, r8
 80075b2:	f77f af79 	ble.w	80074a8 <_printf_float+0x23c>
 80075b6:	2301      	movs	r3, #1
 80075b8:	465a      	mov	r2, fp
 80075ba:	4631      	mov	r1, r6
 80075bc:	4628      	mov	r0, r5
 80075be:	47b8      	blx	r7
 80075c0:	3001      	adds	r0, #1
 80075c2:	f43f aeae 	beq.w	8007322 <_printf_float+0xb6>
 80075c6:	f108 0801 	add.w	r8, r8, #1
 80075ca:	e7ec      	b.n	80075a6 <_printf_float+0x33a>
 80075cc:	4642      	mov	r2, r8
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	d1c2      	bne.n	800755e <_printf_float+0x2f2>
 80075d8:	e6a3      	b.n	8007322 <_printf_float+0xb6>
 80075da:	2301      	movs	r3, #1
 80075dc:	4631      	mov	r1, r6
 80075de:	4628      	mov	r0, r5
 80075e0:	9206      	str	r2, [sp, #24]
 80075e2:	47b8      	blx	r7
 80075e4:	3001      	adds	r0, #1
 80075e6:	f43f ae9c 	beq.w	8007322 <_printf_float+0xb6>
 80075ea:	9a06      	ldr	r2, [sp, #24]
 80075ec:	f10b 0b01 	add.w	fp, fp, #1
 80075f0:	e7bb      	b.n	800756a <_printf_float+0x2fe>
 80075f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075f6:	4631      	mov	r1, r6
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b8      	blx	r7
 80075fc:	3001      	adds	r0, #1
 80075fe:	d1c0      	bne.n	8007582 <_printf_float+0x316>
 8007600:	e68f      	b.n	8007322 <_printf_float+0xb6>
 8007602:	9a06      	ldr	r2, [sp, #24]
 8007604:	464b      	mov	r3, r9
 8007606:	4442      	add	r2, r8
 8007608:	4631      	mov	r1, r6
 800760a:	4628      	mov	r0, r5
 800760c:	47b8      	blx	r7
 800760e:	3001      	adds	r0, #1
 8007610:	d1c3      	bne.n	800759a <_printf_float+0x32e>
 8007612:	e686      	b.n	8007322 <_printf_float+0xb6>
 8007614:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007618:	f1ba 0f01 	cmp.w	sl, #1
 800761c:	dc01      	bgt.n	8007622 <_printf_float+0x3b6>
 800761e:	07db      	lsls	r3, r3, #31
 8007620:	d536      	bpl.n	8007690 <_printf_float+0x424>
 8007622:	2301      	movs	r3, #1
 8007624:	4642      	mov	r2, r8
 8007626:	4631      	mov	r1, r6
 8007628:	4628      	mov	r0, r5
 800762a:	47b8      	blx	r7
 800762c:	3001      	adds	r0, #1
 800762e:	f43f ae78 	beq.w	8007322 <_printf_float+0xb6>
 8007632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007636:	4631      	mov	r1, r6
 8007638:	4628      	mov	r0, r5
 800763a:	47b8      	blx	r7
 800763c:	3001      	adds	r0, #1
 800763e:	f43f ae70 	beq.w	8007322 <_printf_float+0xb6>
 8007642:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007646:	2200      	movs	r2, #0
 8007648:	2300      	movs	r3, #0
 800764a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800764e:	f7f9 fa5b 	bl	8000b08 <__aeabi_dcmpeq>
 8007652:	b9c0      	cbnz	r0, 8007686 <_printf_float+0x41a>
 8007654:	4653      	mov	r3, sl
 8007656:	f108 0201 	add.w	r2, r8, #1
 800765a:	4631      	mov	r1, r6
 800765c:	4628      	mov	r0, r5
 800765e:	47b8      	blx	r7
 8007660:	3001      	adds	r0, #1
 8007662:	d10c      	bne.n	800767e <_printf_float+0x412>
 8007664:	e65d      	b.n	8007322 <_printf_float+0xb6>
 8007666:	2301      	movs	r3, #1
 8007668:	465a      	mov	r2, fp
 800766a:	4631      	mov	r1, r6
 800766c:	4628      	mov	r0, r5
 800766e:	47b8      	blx	r7
 8007670:	3001      	adds	r0, #1
 8007672:	f43f ae56 	beq.w	8007322 <_printf_float+0xb6>
 8007676:	f108 0801 	add.w	r8, r8, #1
 800767a:	45d0      	cmp	r8, sl
 800767c:	dbf3      	blt.n	8007666 <_printf_float+0x3fa>
 800767e:	464b      	mov	r3, r9
 8007680:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007684:	e6df      	b.n	8007446 <_printf_float+0x1da>
 8007686:	f04f 0800 	mov.w	r8, #0
 800768a:	f104 0b1a 	add.w	fp, r4, #26
 800768e:	e7f4      	b.n	800767a <_printf_float+0x40e>
 8007690:	2301      	movs	r3, #1
 8007692:	4642      	mov	r2, r8
 8007694:	e7e1      	b.n	800765a <_printf_float+0x3ee>
 8007696:	2301      	movs	r3, #1
 8007698:	464a      	mov	r2, r9
 800769a:	4631      	mov	r1, r6
 800769c:	4628      	mov	r0, r5
 800769e:	47b8      	blx	r7
 80076a0:	3001      	adds	r0, #1
 80076a2:	f43f ae3e 	beq.w	8007322 <_printf_float+0xb6>
 80076a6:	f108 0801 	add.w	r8, r8, #1
 80076aa:	68e3      	ldr	r3, [r4, #12]
 80076ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076ae:	1a5b      	subs	r3, r3, r1
 80076b0:	4543      	cmp	r3, r8
 80076b2:	dcf0      	bgt.n	8007696 <_printf_float+0x42a>
 80076b4:	e6fc      	b.n	80074b0 <_printf_float+0x244>
 80076b6:	f04f 0800 	mov.w	r8, #0
 80076ba:	f104 0919 	add.w	r9, r4, #25
 80076be:	e7f4      	b.n	80076aa <_printf_float+0x43e>

080076c0 <_printf_common>:
 80076c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c4:	4616      	mov	r6, r2
 80076c6:	4698      	mov	r8, r3
 80076c8:	688a      	ldr	r2, [r1, #8]
 80076ca:	690b      	ldr	r3, [r1, #16]
 80076cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076d0:	4293      	cmp	r3, r2
 80076d2:	bfb8      	it	lt
 80076d4:	4613      	movlt	r3, r2
 80076d6:	6033      	str	r3, [r6, #0]
 80076d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076dc:	4607      	mov	r7, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	b10a      	cbz	r2, 80076e6 <_printf_common+0x26>
 80076e2:	3301      	adds	r3, #1
 80076e4:	6033      	str	r3, [r6, #0]
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	0699      	lsls	r1, r3, #26
 80076ea:	bf42      	ittt	mi
 80076ec:	6833      	ldrmi	r3, [r6, #0]
 80076ee:	3302      	addmi	r3, #2
 80076f0:	6033      	strmi	r3, [r6, #0]
 80076f2:	6825      	ldr	r5, [r4, #0]
 80076f4:	f015 0506 	ands.w	r5, r5, #6
 80076f8:	d106      	bne.n	8007708 <_printf_common+0x48>
 80076fa:	f104 0a19 	add.w	sl, r4, #25
 80076fe:	68e3      	ldr	r3, [r4, #12]
 8007700:	6832      	ldr	r2, [r6, #0]
 8007702:	1a9b      	subs	r3, r3, r2
 8007704:	42ab      	cmp	r3, r5
 8007706:	dc26      	bgt.n	8007756 <_printf_common+0x96>
 8007708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800770c:	6822      	ldr	r2, [r4, #0]
 800770e:	3b00      	subs	r3, #0
 8007710:	bf18      	it	ne
 8007712:	2301      	movne	r3, #1
 8007714:	0692      	lsls	r2, r2, #26
 8007716:	d42b      	bmi.n	8007770 <_printf_common+0xb0>
 8007718:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800771c:	4641      	mov	r1, r8
 800771e:	4638      	mov	r0, r7
 8007720:	47c8      	blx	r9
 8007722:	3001      	adds	r0, #1
 8007724:	d01e      	beq.n	8007764 <_printf_common+0xa4>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	6922      	ldr	r2, [r4, #16]
 800772a:	f003 0306 	and.w	r3, r3, #6
 800772e:	2b04      	cmp	r3, #4
 8007730:	bf02      	ittt	eq
 8007732:	68e5      	ldreq	r5, [r4, #12]
 8007734:	6833      	ldreq	r3, [r6, #0]
 8007736:	1aed      	subeq	r5, r5, r3
 8007738:	68a3      	ldr	r3, [r4, #8]
 800773a:	bf0c      	ite	eq
 800773c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007740:	2500      	movne	r5, #0
 8007742:	4293      	cmp	r3, r2
 8007744:	bfc4      	itt	gt
 8007746:	1a9b      	subgt	r3, r3, r2
 8007748:	18ed      	addgt	r5, r5, r3
 800774a:	2600      	movs	r6, #0
 800774c:	341a      	adds	r4, #26
 800774e:	42b5      	cmp	r5, r6
 8007750:	d11a      	bne.n	8007788 <_printf_common+0xc8>
 8007752:	2000      	movs	r0, #0
 8007754:	e008      	b.n	8007768 <_printf_common+0xa8>
 8007756:	2301      	movs	r3, #1
 8007758:	4652      	mov	r2, sl
 800775a:	4641      	mov	r1, r8
 800775c:	4638      	mov	r0, r7
 800775e:	47c8      	blx	r9
 8007760:	3001      	adds	r0, #1
 8007762:	d103      	bne.n	800776c <_printf_common+0xac>
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776c:	3501      	adds	r5, #1
 800776e:	e7c6      	b.n	80076fe <_printf_common+0x3e>
 8007770:	18e1      	adds	r1, r4, r3
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	2030      	movs	r0, #48	@ 0x30
 8007776:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800777a:	4422      	add	r2, r4
 800777c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007784:	3302      	adds	r3, #2
 8007786:	e7c7      	b.n	8007718 <_printf_common+0x58>
 8007788:	2301      	movs	r3, #1
 800778a:	4622      	mov	r2, r4
 800778c:	4641      	mov	r1, r8
 800778e:	4638      	mov	r0, r7
 8007790:	47c8      	blx	r9
 8007792:	3001      	adds	r0, #1
 8007794:	d0e6      	beq.n	8007764 <_printf_common+0xa4>
 8007796:	3601      	adds	r6, #1
 8007798:	e7d9      	b.n	800774e <_printf_common+0x8e>
	...

0800779c <_printf_i>:
 800779c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077a0:	7e0f      	ldrb	r7, [r1, #24]
 80077a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077a4:	2f78      	cmp	r7, #120	@ 0x78
 80077a6:	4691      	mov	r9, r2
 80077a8:	4680      	mov	r8, r0
 80077aa:	460c      	mov	r4, r1
 80077ac:	469a      	mov	sl, r3
 80077ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077b2:	d807      	bhi.n	80077c4 <_printf_i+0x28>
 80077b4:	2f62      	cmp	r7, #98	@ 0x62
 80077b6:	d80a      	bhi.n	80077ce <_printf_i+0x32>
 80077b8:	2f00      	cmp	r7, #0
 80077ba:	f000 80d2 	beq.w	8007962 <_printf_i+0x1c6>
 80077be:	2f58      	cmp	r7, #88	@ 0x58
 80077c0:	f000 80b9 	beq.w	8007936 <_printf_i+0x19a>
 80077c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077cc:	e03a      	b.n	8007844 <_printf_i+0xa8>
 80077ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077d2:	2b15      	cmp	r3, #21
 80077d4:	d8f6      	bhi.n	80077c4 <_printf_i+0x28>
 80077d6:	a101      	add	r1, pc, #4	@ (adr r1, 80077dc <_printf_i+0x40>)
 80077d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077dc:	08007835 	.word	0x08007835
 80077e0:	08007849 	.word	0x08007849
 80077e4:	080077c5 	.word	0x080077c5
 80077e8:	080077c5 	.word	0x080077c5
 80077ec:	080077c5 	.word	0x080077c5
 80077f0:	080077c5 	.word	0x080077c5
 80077f4:	08007849 	.word	0x08007849
 80077f8:	080077c5 	.word	0x080077c5
 80077fc:	080077c5 	.word	0x080077c5
 8007800:	080077c5 	.word	0x080077c5
 8007804:	080077c5 	.word	0x080077c5
 8007808:	08007949 	.word	0x08007949
 800780c:	08007873 	.word	0x08007873
 8007810:	08007903 	.word	0x08007903
 8007814:	080077c5 	.word	0x080077c5
 8007818:	080077c5 	.word	0x080077c5
 800781c:	0800796b 	.word	0x0800796b
 8007820:	080077c5 	.word	0x080077c5
 8007824:	08007873 	.word	0x08007873
 8007828:	080077c5 	.word	0x080077c5
 800782c:	080077c5 	.word	0x080077c5
 8007830:	0800790b 	.word	0x0800790b
 8007834:	6833      	ldr	r3, [r6, #0]
 8007836:	1d1a      	adds	r2, r3, #4
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6032      	str	r2, [r6, #0]
 800783c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007844:	2301      	movs	r3, #1
 8007846:	e09d      	b.n	8007984 <_printf_i+0x1e8>
 8007848:	6833      	ldr	r3, [r6, #0]
 800784a:	6820      	ldr	r0, [r4, #0]
 800784c:	1d19      	adds	r1, r3, #4
 800784e:	6031      	str	r1, [r6, #0]
 8007850:	0606      	lsls	r6, r0, #24
 8007852:	d501      	bpl.n	8007858 <_printf_i+0xbc>
 8007854:	681d      	ldr	r5, [r3, #0]
 8007856:	e003      	b.n	8007860 <_printf_i+0xc4>
 8007858:	0645      	lsls	r5, r0, #25
 800785a:	d5fb      	bpl.n	8007854 <_printf_i+0xb8>
 800785c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007860:	2d00      	cmp	r5, #0
 8007862:	da03      	bge.n	800786c <_printf_i+0xd0>
 8007864:	232d      	movs	r3, #45	@ 0x2d
 8007866:	426d      	negs	r5, r5
 8007868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800786c:	4859      	ldr	r0, [pc, #356]	@ (80079d4 <_printf_i+0x238>)
 800786e:	230a      	movs	r3, #10
 8007870:	e011      	b.n	8007896 <_printf_i+0xfa>
 8007872:	6821      	ldr	r1, [r4, #0]
 8007874:	6833      	ldr	r3, [r6, #0]
 8007876:	0608      	lsls	r0, r1, #24
 8007878:	f853 5b04 	ldr.w	r5, [r3], #4
 800787c:	d402      	bmi.n	8007884 <_printf_i+0xe8>
 800787e:	0649      	lsls	r1, r1, #25
 8007880:	bf48      	it	mi
 8007882:	b2ad      	uxthmi	r5, r5
 8007884:	2f6f      	cmp	r7, #111	@ 0x6f
 8007886:	4853      	ldr	r0, [pc, #332]	@ (80079d4 <_printf_i+0x238>)
 8007888:	6033      	str	r3, [r6, #0]
 800788a:	bf14      	ite	ne
 800788c:	230a      	movne	r3, #10
 800788e:	2308      	moveq	r3, #8
 8007890:	2100      	movs	r1, #0
 8007892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007896:	6866      	ldr	r6, [r4, #4]
 8007898:	60a6      	str	r6, [r4, #8]
 800789a:	2e00      	cmp	r6, #0
 800789c:	bfa2      	ittt	ge
 800789e:	6821      	ldrge	r1, [r4, #0]
 80078a0:	f021 0104 	bicge.w	r1, r1, #4
 80078a4:	6021      	strge	r1, [r4, #0]
 80078a6:	b90d      	cbnz	r5, 80078ac <_printf_i+0x110>
 80078a8:	2e00      	cmp	r6, #0
 80078aa:	d04b      	beq.n	8007944 <_printf_i+0x1a8>
 80078ac:	4616      	mov	r6, r2
 80078ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80078b2:	fb03 5711 	mls	r7, r3, r1, r5
 80078b6:	5dc7      	ldrb	r7, [r0, r7]
 80078b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078bc:	462f      	mov	r7, r5
 80078be:	42bb      	cmp	r3, r7
 80078c0:	460d      	mov	r5, r1
 80078c2:	d9f4      	bls.n	80078ae <_printf_i+0x112>
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d10b      	bne.n	80078e0 <_printf_i+0x144>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	07df      	lsls	r7, r3, #31
 80078cc:	d508      	bpl.n	80078e0 <_printf_i+0x144>
 80078ce:	6923      	ldr	r3, [r4, #16]
 80078d0:	6861      	ldr	r1, [r4, #4]
 80078d2:	4299      	cmp	r1, r3
 80078d4:	bfde      	ittt	le
 80078d6:	2330      	movle	r3, #48	@ 0x30
 80078d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078e0:	1b92      	subs	r2, r2, r6
 80078e2:	6122      	str	r2, [r4, #16]
 80078e4:	f8cd a000 	str.w	sl, [sp]
 80078e8:	464b      	mov	r3, r9
 80078ea:	aa03      	add	r2, sp, #12
 80078ec:	4621      	mov	r1, r4
 80078ee:	4640      	mov	r0, r8
 80078f0:	f7ff fee6 	bl	80076c0 <_printf_common>
 80078f4:	3001      	adds	r0, #1
 80078f6:	d14a      	bne.n	800798e <_printf_i+0x1f2>
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295
 80078fc:	b004      	add	sp, #16
 80078fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	f043 0320 	orr.w	r3, r3, #32
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	4833      	ldr	r0, [pc, #204]	@ (80079d8 <_printf_i+0x23c>)
 800790c:	2778      	movs	r7, #120	@ 0x78
 800790e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	6831      	ldr	r1, [r6, #0]
 8007916:	061f      	lsls	r7, r3, #24
 8007918:	f851 5b04 	ldr.w	r5, [r1], #4
 800791c:	d402      	bmi.n	8007924 <_printf_i+0x188>
 800791e:	065f      	lsls	r7, r3, #25
 8007920:	bf48      	it	mi
 8007922:	b2ad      	uxthmi	r5, r5
 8007924:	6031      	str	r1, [r6, #0]
 8007926:	07d9      	lsls	r1, r3, #31
 8007928:	bf44      	itt	mi
 800792a:	f043 0320 	orrmi.w	r3, r3, #32
 800792e:	6023      	strmi	r3, [r4, #0]
 8007930:	b11d      	cbz	r5, 800793a <_printf_i+0x19e>
 8007932:	2310      	movs	r3, #16
 8007934:	e7ac      	b.n	8007890 <_printf_i+0xf4>
 8007936:	4827      	ldr	r0, [pc, #156]	@ (80079d4 <_printf_i+0x238>)
 8007938:	e7e9      	b.n	800790e <_printf_i+0x172>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	f023 0320 	bic.w	r3, r3, #32
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	e7f6      	b.n	8007932 <_printf_i+0x196>
 8007944:	4616      	mov	r6, r2
 8007946:	e7bd      	b.n	80078c4 <_printf_i+0x128>
 8007948:	6833      	ldr	r3, [r6, #0]
 800794a:	6825      	ldr	r5, [r4, #0]
 800794c:	6961      	ldr	r1, [r4, #20]
 800794e:	1d18      	adds	r0, r3, #4
 8007950:	6030      	str	r0, [r6, #0]
 8007952:	062e      	lsls	r6, r5, #24
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	d501      	bpl.n	800795c <_printf_i+0x1c0>
 8007958:	6019      	str	r1, [r3, #0]
 800795a:	e002      	b.n	8007962 <_printf_i+0x1c6>
 800795c:	0668      	lsls	r0, r5, #25
 800795e:	d5fb      	bpl.n	8007958 <_printf_i+0x1bc>
 8007960:	8019      	strh	r1, [r3, #0]
 8007962:	2300      	movs	r3, #0
 8007964:	6123      	str	r3, [r4, #16]
 8007966:	4616      	mov	r6, r2
 8007968:	e7bc      	b.n	80078e4 <_printf_i+0x148>
 800796a:	6833      	ldr	r3, [r6, #0]
 800796c:	1d1a      	adds	r2, r3, #4
 800796e:	6032      	str	r2, [r6, #0]
 8007970:	681e      	ldr	r6, [r3, #0]
 8007972:	6862      	ldr	r2, [r4, #4]
 8007974:	2100      	movs	r1, #0
 8007976:	4630      	mov	r0, r6
 8007978:	f7f8 fc4a 	bl	8000210 <memchr>
 800797c:	b108      	cbz	r0, 8007982 <_printf_i+0x1e6>
 800797e:	1b80      	subs	r0, r0, r6
 8007980:	6060      	str	r0, [r4, #4]
 8007982:	6863      	ldr	r3, [r4, #4]
 8007984:	6123      	str	r3, [r4, #16]
 8007986:	2300      	movs	r3, #0
 8007988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800798c:	e7aa      	b.n	80078e4 <_printf_i+0x148>
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	4632      	mov	r2, r6
 8007992:	4649      	mov	r1, r9
 8007994:	4640      	mov	r0, r8
 8007996:	47d0      	blx	sl
 8007998:	3001      	adds	r0, #1
 800799a:	d0ad      	beq.n	80078f8 <_printf_i+0x15c>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	079b      	lsls	r3, r3, #30
 80079a0:	d413      	bmi.n	80079ca <_printf_i+0x22e>
 80079a2:	68e0      	ldr	r0, [r4, #12]
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	4298      	cmp	r0, r3
 80079a8:	bfb8      	it	lt
 80079aa:	4618      	movlt	r0, r3
 80079ac:	e7a6      	b.n	80078fc <_printf_i+0x160>
 80079ae:	2301      	movs	r3, #1
 80079b0:	4632      	mov	r2, r6
 80079b2:	4649      	mov	r1, r9
 80079b4:	4640      	mov	r0, r8
 80079b6:	47d0      	blx	sl
 80079b8:	3001      	adds	r0, #1
 80079ba:	d09d      	beq.n	80078f8 <_printf_i+0x15c>
 80079bc:	3501      	adds	r5, #1
 80079be:	68e3      	ldr	r3, [r4, #12]
 80079c0:	9903      	ldr	r1, [sp, #12]
 80079c2:	1a5b      	subs	r3, r3, r1
 80079c4:	42ab      	cmp	r3, r5
 80079c6:	dcf2      	bgt.n	80079ae <_printf_i+0x212>
 80079c8:	e7eb      	b.n	80079a2 <_printf_i+0x206>
 80079ca:	2500      	movs	r5, #0
 80079cc:	f104 0619 	add.w	r6, r4, #25
 80079d0:	e7f5      	b.n	80079be <_printf_i+0x222>
 80079d2:	bf00      	nop
 80079d4:	0800bfa2 	.word	0x0800bfa2
 80079d8:	0800bfb3 	.word	0x0800bfb3

080079dc <_scanf_float>:
 80079dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	b087      	sub	sp, #28
 80079e2:	4617      	mov	r7, r2
 80079e4:	9303      	str	r3, [sp, #12]
 80079e6:	688b      	ldr	r3, [r1, #8]
 80079e8:	1e5a      	subs	r2, r3, #1
 80079ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80079ee:	bf81      	itttt	hi
 80079f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80079f4:	eb03 0b05 	addhi.w	fp, r3, r5
 80079f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80079fc:	608b      	strhi	r3, [r1, #8]
 80079fe:	680b      	ldr	r3, [r1, #0]
 8007a00:	460a      	mov	r2, r1
 8007a02:	f04f 0500 	mov.w	r5, #0
 8007a06:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007a0a:	f842 3b1c 	str.w	r3, [r2], #28
 8007a0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007a12:	4680      	mov	r8, r0
 8007a14:	460c      	mov	r4, r1
 8007a16:	bf98      	it	ls
 8007a18:	f04f 0b00 	movls.w	fp, #0
 8007a1c:	9201      	str	r2, [sp, #4]
 8007a1e:	4616      	mov	r6, r2
 8007a20:	46aa      	mov	sl, r5
 8007a22:	46a9      	mov	r9, r5
 8007a24:	9502      	str	r5, [sp, #8]
 8007a26:	68a2      	ldr	r2, [r4, #8]
 8007a28:	b152      	cbz	r2, 8007a40 <_scanf_float+0x64>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	2b4e      	cmp	r3, #78	@ 0x4e
 8007a30:	d864      	bhi.n	8007afc <_scanf_float+0x120>
 8007a32:	2b40      	cmp	r3, #64	@ 0x40
 8007a34:	d83c      	bhi.n	8007ab0 <_scanf_float+0xd4>
 8007a36:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007a3a:	b2c8      	uxtb	r0, r1
 8007a3c:	280e      	cmp	r0, #14
 8007a3e:	d93a      	bls.n	8007ab6 <_scanf_float+0xda>
 8007a40:	f1b9 0f00 	cmp.w	r9, #0
 8007a44:	d003      	beq.n	8007a4e <_scanf_float+0x72>
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a52:	f1ba 0f01 	cmp.w	sl, #1
 8007a56:	f200 8117 	bhi.w	8007c88 <_scanf_float+0x2ac>
 8007a5a:	9b01      	ldr	r3, [sp, #4]
 8007a5c:	429e      	cmp	r6, r3
 8007a5e:	f200 8108 	bhi.w	8007c72 <_scanf_float+0x296>
 8007a62:	2001      	movs	r0, #1
 8007a64:	b007      	add	sp, #28
 8007a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007a6e:	2a0d      	cmp	r2, #13
 8007a70:	d8e6      	bhi.n	8007a40 <_scanf_float+0x64>
 8007a72:	a101      	add	r1, pc, #4	@ (adr r1, 8007a78 <_scanf_float+0x9c>)
 8007a74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a78:	08007bbf 	.word	0x08007bbf
 8007a7c:	08007a41 	.word	0x08007a41
 8007a80:	08007a41 	.word	0x08007a41
 8007a84:	08007a41 	.word	0x08007a41
 8007a88:	08007c1f 	.word	0x08007c1f
 8007a8c:	08007bf7 	.word	0x08007bf7
 8007a90:	08007a41 	.word	0x08007a41
 8007a94:	08007a41 	.word	0x08007a41
 8007a98:	08007bcd 	.word	0x08007bcd
 8007a9c:	08007a41 	.word	0x08007a41
 8007aa0:	08007a41 	.word	0x08007a41
 8007aa4:	08007a41 	.word	0x08007a41
 8007aa8:	08007a41 	.word	0x08007a41
 8007aac:	08007b85 	.word	0x08007b85
 8007ab0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007ab4:	e7db      	b.n	8007a6e <_scanf_float+0x92>
 8007ab6:	290e      	cmp	r1, #14
 8007ab8:	d8c2      	bhi.n	8007a40 <_scanf_float+0x64>
 8007aba:	a001      	add	r0, pc, #4	@ (adr r0, 8007ac0 <_scanf_float+0xe4>)
 8007abc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007ac0:	08007b75 	.word	0x08007b75
 8007ac4:	08007a41 	.word	0x08007a41
 8007ac8:	08007b75 	.word	0x08007b75
 8007acc:	08007c0b 	.word	0x08007c0b
 8007ad0:	08007a41 	.word	0x08007a41
 8007ad4:	08007b1d 	.word	0x08007b1d
 8007ad8:	08007b5b 	.word	0x08007b5b
 8007adc:	08007b5b 	.word	0x08007b5b
 8007ae0:	08007b5b 	.word	0x08007b5b
 8007ae4:	08007b5b 	.word	0x08007b5b
 8007ae8:	08007b5b 	.word	0x08007b5b
 8007aec:	08007b5b 	.word	0x08007b5b
 8007af0:	08007b5b 	.word	0x08007b5b
 8007af4:	08007b5b 	.word	0x08007b5b
 8007af8:	08007b5b 	.word	0x08007b5b
 8007afc:	2b6e      	cmp	r3, #110	@ 0x6e
 8007afe:	d809      	bhi.n	8007b14 <_scanf_float+0x138>
 8007b00:	2b60      	cmp	r3, #96	@ 0x60
 8007b02:	d8b2      	bhi.n	8007a6a <_scanf_float+0x8e>
 8007b04:	2b54      	cmp	r3, #84	@ 0x54
 8007b06:	d07b      	beq.n	8007c00 <_scanf_float+0x224>
 8007b08:	2b59      	cmp	r3, #89	@ 0x59
 8007b0a:	d199      	bne.n	8007a40 <_scanf_float+0x64>
 8007b0c:	2d07      	cmp	r5, #7
 8007b0e:	d197      	bne.n	8007a40 <_scanf_float+0x64>
 8007b10:	2508      	movs	r5, #8
 8007b12:	e02c      	b.n	8007b6e <_scanf_float+0x192>
 8007b14:	2b74      	cmp	r3, #116	@ 0x74
 8007b16:	d073      	beq.n	8007c00 <_scanf_float+0x224>
 8007b18:	2b79      	cmp	r3, #121	@ 0x79
 8007b1a:	e7f6      	b.n	8007b0a <_scanf_float+0x12e>
 8007b1c:	6821      	ldr	r1, [r4, #0]
 8007b1e:	05c8      	lsls	r0, r1, #23
 8007b20:	d51b      	bpl.n	8007b5a <_scanf_float+0x17e>
 8007b22:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007b26:	6021      	str	r1, [r4, #0]
 8007b28:	f109 0901 	add.w	r9, r9, #1
 8007b2c:	f1bb 0f00 	cmp.w	fp, #0
 8007b30:	d003      	beq.n	8007b3a <_scanf_float+0x15e>
 8007b32:	3201      	adds	r2, #1
 8007b34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b38:	60a2      	str	r2, [r4, #8]
 8007b3a:	68a3      	ldr	r3, [r4, #8]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	60a3      	str	r3, [r4, #8]
 8007b40:	6923      	ldr	r3, [r4, #16]
 8007b42:	3301      	adds	r3, #1
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	607b      	str	r3, [r7, #4]
 8007b4e:	f340 8087 	ble.w	8007c60 <_scanf_float+0x284>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	3301      	adds	r3, #1
 8007b56:	603b      	str	r3, [r7, #0]
 8007b58:	e765      	b.n	8007a26 <_scanf_float+0x4a>
 8007b5a:	eb1a 0105 	adds.w	r1, sl, r5
 8007b5e:	f47f af6f 	bne.w	8007a40 <_scanf_float+0x64>
 8007b62:	6822      	ldr	r2, [r4, #0]
 8007b64:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007b68:	6022      	str	r2, [r4, #0]
 8007b6a:	460d      	mov	r5, r1
 8007b6c:	468a      	mov	sl, r1
 8007b6e:	f806 3b01 	strb.w	r3, [r6], #1
 8007b72:	e7e2      	b.n	8007b3a <_scanf_float+0x15e>
 8007b74:	6822      	ldr	r2, [r4, #0]
 8007b76:	0610      	lsls	r0, r2, #24
 8007b78:	f57f af62 	bpl.w	8007a40 <_scanf_float+0x64>
 8007b7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b80:	6022      	str	r2, [r4, #0]
 8007b82:	e7f4      	b.n	8007b6e <_scanf_float+0x192>
 8007b84:	f1ba 0f00 	cmp.w	sl, #0
 8007b88:	d10e      	bne.n	8007ba8 <_scanf_float+0x1cc>
 8007b8a:	f1b9 0f00 	cmp.w	r9, #0
 8007b8e:	d10e      	bne.n	8007bae <_scanf_float+0x1d2>
 8007b90:	6822      	ldr	r2, [r4, #0]
 8007b92:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007b96:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007b9a:	d108      	bne.n	8007bae <_scanf_float+0x1d2>
 8007b9c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ba0:	6022      	str	r2, [r4, #0]
 8007ba2:	f04f 0a01 	mov.w	sl, #1
 8007ba6:	e7e2      	b.n	8007b6e <_scanf_float+0x192>
 8007ba8:	f1ba 0f02 	cmp.w	sl, #2
 8007bac:	d055      	beq.n	8007c5a <_scanf_float+0x27e>
 8007bae:	2d01      	cmp	r5, #1
 8007bb0:	d002      	beq.n	8007bb8 <_scanf_float+0x1dc>
 8007bb2:	2d04      	cmp	r5, #4
 8007bb4:	f47f af44 	bne.w	8007a40 <_scanf_float+0x64>
 8007bb8:	3501      	adds	r5, #1
 8007bba:	b2ed      	uxtb	r5, r5
 8007bbc:	e7d7      	b.n	8007b6e <_scanf_float+0x192>
 8007bbe:	f1ba 0f01 	cmp.w	sl, #1
 8007bc2:	f47f af3d 	bne.w	8007a40 <_scanf_float+0x64>
 8007bc6:	f04f 0a02 	mov.w	sl, #2
 8007bca:	e7d0      	b.n	8007b6e <_scanf_float+0x192>
 8007bcc:	b97d      	cbnz	r5, 8007bee <_scanf_float+0x212>
 8007bce:	f1b9 0f00 	cmp.w	r9, #0
 8007bd2:	f47f af38 	bne.w	8007a46 <_scanf_float+0x6a>
 8007bd6:	6822      	ldr	r2, [r4, #0]
 8007bd8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007bdc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007be0:	f040 8108 	bne.w	8007df4 <_scanf_float+0x418>
 8007be4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007be8:	6022      	str	r2, [r4, #0]
 8007bea:	2501      	movs	r5, #1
 8007bec:	e7bf      	b.n	8007b6e <_scanf_float+0x192>
 8007bee:	2d03      	cmp	r5, #3
 8007bf0:	d0e2      	beq.n	8007bb8 <_scanf_float+0x1dc>
 8007bf2:	2d05      	cmp	r5, #5
 8007bf4:	e7de      	b.n	8007bb4 <_scanf_float+0x1d8>
 8007bf6:	2d02      	cmp	r5, #2
 8007bf8:	f47f af22 	bne.w	8007a40 <_scanf_float+0x64>
 8007bfc:	2503      	movs	r5, #3
 8007bfe:	e7b6      	b.n	8007b6e <_scanf_float+0x192>
 8007c00:	2d06      	cmp	r5, #6
 8007c02:	f47f af1d 	bne.w	8007a40 <_scanf_float+0x64>
 8007c06:	2507      	movs	r5, #7
 8007c08:	e7b1      	b.n	8007b6e <_scanf_float+0x192>
 8007c0a:	6822      	ldr	r2, [r4, #0]
 8007c0c:	0591      	lsls	r1, r2, #22
 8007c0e:	f57f af17 	bpl.w	8007a40 <_scanf_float+0x64>
 8007c12:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007c16:	6022      	str	r2, [r4, #0]
 8007c18:	f8cd 9008 	str.w	r9, [sp, #8]
 8007c1c:	e7a7      	b.n	8007b6e <_scanf_float+0x192>
 8007c1e:	6822      	ldr	r2, [r4, #0]
 8007c20:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007c24:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007c28:	d006      	beq.n	8007c38 <_scanf_float+0x25c>
 8007c2a:	0550      	lsls	r0, r2, #21
 8007c2c:	f57f af08 	bpl.w	8007a40 <_scanf_float+0x64>
 8007c30:	f1b9 0f00 	cmp.w	r9, #0
 8007c34:	f000 80de 	beq.w	8007df4 <_scanf_float+0x418>
 8007c38:	0591      	lsls	r1, r2, #22
 8007c3a:	bf58      	it	pl
 8007c3c:	9902      	ldrpl	r1, [sp, #8]
 8007c3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007c42:	bf58      	it	pl
 8007c44:	eba9 0101 	subpl.w	r1, r9, r1
 8007c48:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007c4c:	bf58      	it	pl
 8007c4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007c52:	6022      	str	r2, [r4, #0]
 8007c54:	f04f 0900 	mov.w	r9, #0
 8007c58:	e789      	b.n	8007b6e <_scanf_float+0x192>
 8007c5a:	f04f 0a03 	mov.w	sl, #3
 8007c5e:	e786      	b.n	8007b6e <_scanf_float+0x192>
 8007c60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007c64:	4639      	mov	r1, r7
 8007c66:	4640      	mov	r0, r8
 8007c68:	4798      	blx	r3
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f43f aedb 	beq.w	8007a26 <_scanf_float+0x4a>
 8007c70:	e6e6      	b.n	8007a40 <_scanf_float+0x64>
 8007c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c7a:	463a      	mov	r2, r7
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	4798      	blx	r3
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	6123      	str	r3, [r4, #16]
 8007c86:	e6e8      	b.n	8007a5a <_scanf_float+0x7e>
 8007c88:	1e6b      	subs	r3, r5, #1
 8007c8a:	2b06      	cmp	r3, #6
 8007c8c:	d824      	bhi.n	8007cd8 <_scanf_float+0x2fc>
 8007c8e:	2d02      	cmp	r5, #2
 8007c90:	d836      	bhi.n	8007d00 <_scanf_float+0x324>
 8007c92:	9b01      	ldr	r3, [sp, #4]
 8007c94:	429e      	cmp	r6, r3
 8007c96:	f67f aee4 	bls.w	8007a62 <_scanf_float+0x86>
 8007c9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ca2:	463a      	mov	r2, r7
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	4798      	blx	r3
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	6123      	str	r3, [r4, #16]
 8007cae:	e7f0      	b.n	8007c92 <_scanf_float+0x2b6>
 8007cb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007cb4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007cb8:	463a      	mov	r2, r7
 8007cba:	4640      	mov	r0, r8
 8007cbc:	4798      	blx	r3
 8007cbe:	6923      	ldr	r3, [r4, #16]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	6123      	str	r3, [r4, #16]
 8007cc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cc8:	fa5f fa8a 	uxtb.w	sl, sl
 8007ccc:	f1ba 0f02 	cmp.w	sl, #2
 8007cd0:	d1ee      	bne.n	8007cb0 <_scanf_float+0x2d4>
 8007cd2:	3d03      	subs	r5, #3
 8007cd4:	b2ed      	uxtb	r5, r5
 8007cd6:	1b76      	subs	r6, r6, r5
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	05da      	lsls	r2, r3, #23
 8007cdc:	d530      	bpl.n	8007d40 <_scanf_float+0x364>
 8007cde:	055b      	lsls	r3, r3, #21
 8007ce0:	d511      	bpl.n	8007d06 <_scanf_float+0x32a>
 8007ce2:	9b01      	ldr	r3, [sp, #4]
 8007ce4:	429e      	cmp	r6, r3
 8007ce6:	f67f aebc 	bls.w	8007a62 <_scanf_float+0x86>
 8007cea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007cee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007cf2:	463a      	mov	r2, r7
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	4798      	blx	r3
 8007cf8:	6923      	ldr	r3, [r4, #16]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	6123      	str	r3, [r4, #16]
 8007cfe:	e7f0      	b.n	8007ce2 <_scanf_float+0x306>
 8007d00:	46aa      	mov	sl, r5
 8007d02:	46b3      	mov	fp, r6
 8007d04:	e7de      	b.n	8007cc4 <_scanf_float+0x2e8>
 8007d06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	2965      	cmp	r1, #101	@ 0x65
 8007d0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d12:	f106 35ff 	add.w	r5, r6, #4294967295
 8007d16:	6123      	str	r3, [r4, #16]
 8007d18:	d00c      	beq.n	8007d34 <_scanf_float+0x358>
 8007d1a:	2945      	cmp	r1, #69	@ 0x45
 8007d1c:	d00a      	beq.n	8007d34 <_scanf_float+0x358>
 8007d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d22:	463a      	mov	r2, r7
 8007d24:	4640      	mov	r0, r8
 8007d26:	4798      	blx	r3
 8007d28:	6923      	ldr	r3, [r4, #16]
 8007d2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	1eb5      	subs	r5, r6, #2
 8007d32:	6123      	str	r3, [r4, #16]
 8007d34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d38:	463a      	mov	r2, r7
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	4798      	blx	r3
 8007d3e:	462e      	mov	r6, r5
 8007d40:	6822      	ldr	r2, [r4, #0]
 8007d42:	f012 0210 	ands.w	r2, r2, #16
 8007d46:	d001      	beq.n	8007d4c <_scanf_float+0x370>
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e68b      	b.n	8007a64 <_scanf_float+0x88>
 8007d4c:	7032      	strb	r2, [r6, #0]
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007d54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d58:	d11c      	bne.n	8007d94 <_scanf_float+0x3b8>
 8007d5a:	9b02      	ldr	r3, [sp, #8]
 8007d5c:	454b      	cmp	r3, r9
 8007d5e:	eba3 0209 	sub.w	r2, r3, r9
 8007d62:	d123      	bne.n	8007dac <_scanf_float+0x3d0>
 8007d64:	9901      	ldr	r1, [sp, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	4640      	mov	r0, r8
 8007d6a:	f002 fc2d 	bl	800a5c8 <_strtod_r>
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	6821      	ldr	r1, [r4, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f011 0f02 	tst.w	r1, #2
 8007d78:	ec57 6b10 	vmov	r6, r7, d0
 8007d7c:	f103 0204 	add.w	r2, r3, #4
 8007d80:	d01f      	beq.n	8007dc2 <_scanf_float+0x3e6>
 8007d82:	9903      	ldr	r1, [sp, #12]
 8007d84:	600a      	str	r2, [r1, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	e9c3 6700 	strd	r6, r7, [r3]
 8007d8c:	68e3      	ldr	r3, [r4, #12]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	60e3      	str	r3, [r4, #12]
 8007d92:	e7d9      	b.n	8007d48 <_scanf_float+0x36c>
 8007d94:	9b04      	ldr	r3, [sp, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d0e4      	beq.n	8007d64 <_scanf_float+0x388>
 8007d9a:	9905      	ldr	r1, [sp, #20]
 8007d9c:	230a      	movs	r3, #10
 8007d9e:	3101      	adds	r1, #1
 8007da0:	4640      	mov	r0, r8
 8007da2:	f002 fc91 	bl	800a6c8 <_strtol_r>
 8007da6:	9b04      	ldr	r3, [sp, #16]
 8007da8:	9e05      	ldr	r6, [sp, #20]
 8007daa:	1ac2      	subs	r2, r0, r3
 8007dac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007db0:	429e      	cmp	r6, r3
 8007db2:	bf28      	it	cs
 8007db4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007db8:	4910      	ldr	r1, [pc, #64]	@ (8007dfc <_scanf_float+0x420>)
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f000 f92a 	bl	8008014 <siprintf>
 8007dc0:	e7d0      	b.n	8007d64 <_scanf_float+0x388>
 8007dc2:	f011 0f04 	tst.w	r1, #4
 8007dc6:	9903      	ldr	r1, [sp, #12]
 8007dc8:	600a      	str	r2, [r1, #0]
 8007dca:	d1dc      	bne.n	8007d86 <_scanf_float+0x3aa>
 8007dcc:	681d      	ldr	r5, [r3, #0]
 8007dce:	4632      	mov	r2, r6
 8007dd0:	463b      	mov	r3, r7
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fec9 	bl	8000b6c <__aeabi_dcmpun>
 8007dda:	b128      	cbz	r0, 8007de8 <_scanf_float+0x40c>
 8007ddc:	4808      	ldr	r0, [pc, #32]	@ (8007e00 <_scanf_float+0x424>)
 8007dde:	f000 faa1 	bl	8008324 <nanf>
 8007de2:	ed85 0a00 	vstr	s0, [r5]
 8007de6:	e7d1      	b.n	8007d8c <_scanf_float+0x3b0>
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 ff1c 	bl	8000c28 <__aeabi_d2f>
 8007df0:	6028      	str	r0, [r5, #0]
 8007df2:	e7cb      	b.n	8007d8c <_scanf_float+0x3b0>
 8007df4:	f04f 0900 	mov.w	r9, #0
 8007df8:	e629      	b.n	8007a4e <_scanf_float+0x72>
 8007dfa:	bf00      	nop
 8007dfc:	0800bfc4 	.word	0x0800bfc4
 8007e00:	0800c35d 	.word	0x0800c35d

08007e04 <std>:
 8007e04:	2300      	movs	r3, #0
 8007e06:	b510      	push	{r4, lr}
 8007e08:	4604      	mov	r4, r0
 8007e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e12:	6083      	str	r3, [r0, #8]
 8007e14:	8181      	strh	r1, [r0, #12]
 8007e16:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e18:	81c2      	strh	r2, [r0, #14]
 8007e1a:	6183      	str	r3, [r0, #24]
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	2208      	movs	r2, #8
 8007e20:	305c      	adds	r0, #92	@ 0x5c
 8007e22:	f000 f9ef 	bl	8008204 <memset>
 8007e26:	4b0d      	ldr	r3, [pc, #52]	@ (8007e5c <std+0x58>)
 8007e28:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e60 <std+0x5c>)
 8007e2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e64 <std+0x60>)
 8007e30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e32:	4b0d      	ldr	r3, [pc, #52]	@ (8007e68 <std+0x64>)
 8007e34:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e36:	4b0d      	ldr	r3, [pc, #52]	@ (8007e6c <std+0x68>)
 8007e38:	6224      	str	r4, [r4, #32]
 8007e3a:	429c      	cmp	r4, r3
 8007e3c:	d006      	beq.n	8007e4c <std+0x48>
 8007e3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e42:	4294      	cmp	r4, r2
 8007e44:	d002      	beq.n	8007e4c <std+0x48>
 8007e46:	33d0      	adds	r3, #208	@ 0xd0
 8007e48:	429c      	cmp	r4, r3
 8007e4a:	d105      	bne.n	8007e58 <std+0x54>
 8007e4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e54:	f000 ba62 	b.w	800831c <__retarget_lock_init_recursive>
 8007e58:	bd10      	pop	{r4, pc}
 8007e5a:	bf00      	nop
 8007e5c:	08008055 	.word	0x08008055
 8007e60:	08008077 	.word	0x08008077
 8007e64:	080080af 	.word	0x080080af
 8007e68:	080080d3 	.word	0x080080d3
 8007e6c:	20000888 	.word	0x20000888

08007e70 <stdio_exit_handler>:
 8007e70:	4a02      	ldr	r2, [pc, #8]	@ (8007e7c <stdio_exit_handler+0xc>)
 8007e72:	4903      	ldr	r1, [pc, #12]	@ (8007e80 <stdio_exit_handler+0x10>)
 8007e74:	4803      	ldr	r0, [pc, #12]	@ (8007e84 <stdio_exit_handler+0x14>)
 8007e76:	f000 b869 	b.w	8007f4c <_fwalk_sglue>
 8007e7a:	bf00      	nop
 8007e7c:	2000002c 	.word	0x2000002c
 8007e80:	0800ad09 	.word	0x0800ad09
 8007e84:	2000003c 	.word	0x2000003c

08007e88 <cleanup_stdio>:
 8007e88:	6841      	ldr	r1, [r0, #4]
 8007e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007ebc <cleanup_stdio+0x34>)
 8007e8c:	4299      	cmp	r1, r3
 8007e8e:	b510      	push	{r4, lr}
 8007e90:	4604      	mov	r4, r0
 8007e92:	d001      	beq.n	8007e98 <cleanup_stdio+0x10>
 8007e94:	f002 ff38 	bl	800ad08 <_fflush_r>
 8007e98:	68a1      	ldr	r1, [r4, #8]
 8007e9a:	4b09      	ldr	r3, [pc, #36]	@ (8007ec0 <cleanup_stdio+0x38>)
 8007e9c:	4299      	cmp	r1, r3
 8007e9e:	d002      	beq.n	8007ea6 <cleanup_stdio+0x1e>
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f002 ff31 	bl	800ad08 <_fflush_r>
 8007ea6:	68e1      	ldr	r1, [r4, #12]
 8007ea8:	4b06      	ldr	r3, [pc, #24]	@ (8007ec4 <cleanup_stdio+0x3c>)
 8007eaa:	4299      	cmp	r1, r3
 8007eac:	d004      	beq.n	8007eb8 <cleanup_stdio+0x30>
 8007eae:	4620      	mov	r0, r4
 8007eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb4:	f002 bf28 	b.w	800ad08 <_fflush_r>
 8007eb8:	bd10      	pop	{r4, pc}
 8007eba:	bf00      	nop
 8007ebc:	20000888 	.word	0x20000888
 8007ec0:	200008f0 	.word	0x200008f0
 8007ec4:	20000958 	.word	0x20000958

08007ec8 <global_stdio_init.part.0>:
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef8 <global_stdio_init.part.0+0x30>)
 8007ecc:	4c0b      	ldr	r4, [pc, #44]	@ (8007efc <global_stdio_init.part.0+0x34>)
 8007ece:	4a0c      	ldr	r2, [pc, #48]	@ (8007f00 <global_stdio_init.part.0+0x38>)
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2104      	movs	r1, #4
 8007ed8:	f7ff ff94 	bl	8007e04 <std>
 8007edc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	2109      	movs	r1, #9
 8007ee4:	f7ff ff8e 	bl	8007e04 <std>
 8007ee8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007eec:	2202      	movs	r2, #2
 8007eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ef2:	2112      	movs	r1, #18
 8007ef4:	f7ff bf86 	b.w	8007e04 <std>
 8007ef8:	200009c0 	.word	0x200009c0
 8007efc:	20000888 	.word	0x20000888
 8007f00:	08007e71 	.word	0x08007e71

08007f04 <__sfp_lock_acquire>:
 8007f04:	4801      	ldr	r0, [pc, #4]	@ (8007f0c <__sfp_lock_acquire+0x8>)
 8007f06:	f000 ba0a 	b.w	800831e <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	200009c9 	.word	0x200009c9

08007f10 <__sfp_lock_release>:
 8007f10:	4801      	ldr	r0, [pc, #4]	@ (8007f18 <__sfp_lock_release+0x8>)
 8007f12:	f000 ba05 	b.w	8008320 <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	200009c9 	.word	0x200009c9

08007f1c <__sinit>:
 8007f1c:	b510      	push	{r4, lr}
 8007f1e:	4604      	mov	r4, r0
 8007f20:	f7ff fff0 	bl	8007f04 <__sfp_lock_acquire>
 8007f24:	6a23      	ldr	r3, [r4, #32]
 8007f26:	b11b      	cbz	r3, 8007f30 <__sinit+0x14>
 8007f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f2c:	f7ff bff0 	b.w	8007f10 <__sfp_lock_release>
 8007f30:	4b04      	ldr	r3, [pc, #16]	@ (8007f44 <__sinit+0x28>)
 8007f32:	6223      	str	r3, [r4, #32]
 8007f34:	4b04      	ldr	r3, [pc, #16]	@ (8007f48 <__sinit+0x2c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1f5      	bne.n	8007f28 <__sinit+0xc>
 8007f3c:	f7ff ffc4 	bl	8007ec8 <global_stdio_init.part.0>
 8007f40:	e7f2      	b.n	8007f28 <__sinit+0xc>
 8007f42:	bf00      	nop
 8007f44:	08007e89 	.word	0x08007e89
 8007f48:	200009c0 	.word	0x200009c0

08007f4c <_fwalk_sglue>:
 8007f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f50:	4607      	mov	r7, r0
 8007f52:	4688      	mov	r8, r1
 8007f54:	4614      	mov	r4, r2
 8007f56:	2600      	movs	r6, #0
 8007f58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f5c:	f1b9 0901 	subs.w	r9, r9, #1
 8007f60:	d505      	bpl.n	8007f6e <_fwalk_sglue+0x22>
 8007f62:	6824      	ldr	r4, [r4, #0]
 8007f64:	2c00      	cmp	r4, #0
 8007f66:	d1f7      	bne.n	8007f58 <_fwalk_sglue+0xc>
 8007f68:	4630      	mov	r0, r6
 8007f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f6e:	89ab      	ldrh	r3, [r5, #12]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d907      	bls.n	8007f84 <_fwalk_sglue+0x38>
 8007f74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	d003      	beq.n	8007f84 <_fwalk_sglue+0x38>
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	4638      	mov	r0, r7
 8007f80:	47c0      	blx	r8
 8007f82:	4306      	orrs	r6, r0
 8007f84:	3568      	adds	r5, #104	@ 0x68
 8007f86:	e7e9      	b.n	8007f5c <_fwalk_sglue+0x10>

08007f88 <iprintf>:
 8007f88:	b40f      	push	{r0, r1, r2, r3}
 8007f8a:	b507      	push	{r0, r1, r2, lr}
 8007f8c:	4906      	ldr	r1, [pc, #24]	@ (8007fa8 <iprintf+0x20>)
 8007f8e:	ab04      	add	r3, sp, #16
 8007f90:	6808      	ldr	r0, [r1, #0]
 8007f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f96:	6881      	ldr	r1, [r0, #8]
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	f002 fd19 	bl	800a9d0 <_vfiprintf_r>
 8007f9e:	b003      	add	sp, #12
 8007fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fa4:	b004      	add	sp, #16
 8007fa6:	4770      	bx	lr
 8007fa8:	20000038 	.word	0x20000038

08007fac <sniprintf>:
 8007fac:	b40c      	push	{r2, r3}
 8007fae:	b530      	push	{r4, r5, lr}
 8007fb0:	4b17      	ldr	r3, [pc, #92]	@ (8008010 <sniprintf+0x64>)
 8007fb2:	1e0c      	subs	r4, r1, #0
 8007fb4:	681d      	ldr	r5, [r3, #0]
 8007fb6:	b09d      	sub	sp, #116	@ 0x74
 8007fb8:	da08      	bge.n	8007fcc <sniprintf+0x20>
 8007fba:	238b      	movs	r3, #139	@ 0x8b
 8007fbc:	602b      	str	r3, [r5, #0]
 8007fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc2:	b01d      	add	sp, #116	@ 0x74
 8007fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fc8:	b002      	add	sp, #8
 8007fca:	4770      	bx	lr
 8007fcc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007fd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007fd4:	bf14      	ite	ne
 8007fd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fda:	4623      	moveq	r3, r4
 8007fdc:	9304      	str	r3, [sp, #16]
 8007fde:	9307      	str	r3, [sp, #28]
 8007fe0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fe4:	9002      	str	r0, [sp, #8]
 8007fe6:	9006      	str	r0, [sp, #24]
 8007fe8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007fec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007fee:	ab21      	add	r3, sp, #132	@ 0x84
 8007ff0:	a902      	add	r1, sp, #8
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	f002 fbc5 	bl	800a784 <_svfiprintf_r>
 8007ffa:	1c43      	adds	r3, r0, #1
 8007ffc:	bfbc      	itt	lt
 8007ffe:	238b      	movlt	r3, #139	@ 0x8b
 8008000:	602b      	strlt	r3, [r5, #0]
 8008002:	2c00      	cmp	r4, #0
 8008004:	d0dd      	beq.n	8007fc2 <sniprintf+0x16>
 8008006:	9b02      	ldr	r3, [sp, #8]
 8008008:	2200      	movs	r2, #0
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	e7d9      	b.n	8007fc2 <sniprintf+0x16>
 800800e:	bf00      	nop
 8008010:	20000038 	.word	0x20000038

08008014 <siprintf>:
 8008014:	b40e      	push	{r1, r2, r3}
 8008016:	b500      	push	{lr}
 8008018:	b09c      	sub	sp, #112	@ 0x70
 800801a:	ab1d      	add	r3, sp, #116	@ 0x74
 800801c:	9002      	str	r0, [sp, #8]
 800801e:	9006      	str	r0, [sp, #24]
 8008020:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008024:	4809      	ldr	r0, [pc, #36]	@ (800804c <siprintf+0x38>)
 8008026:	9107      	str	r1, [sp, #28]
 8008028:	9104      	str	r1, [sp, #16]
 800802a:	4909      	ldr	r1, [pc, #36]	@ (8008050 <siprintf+0x3c>)
 800802c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008030:	9105      	str	r1, [sp, #20]
 8008032:	6800      	ldr	r0, [r0, #0]
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	a902      	add	r1, sp, #8
 8008038:	f002 fba4 	bl	800a784 <_svfiprintf_r>
 800803c:	9b02      	ldr	r3, [sp, #8]
 800803e:	2200      	movs	r2, #0
 8008040:	701a      	strb	r2, [r3, #0]
 8008042:	b01c      	add	sp, #112	@ 0x70
 8008044:	f85d eb04 	ldr.w	lr, [sp], #4
 8008048:	b003      	add	sp, #12
 800804a:	4770      	bx	lr
 800804c:	20000038 	.word	0x20000038
 8008050:	ffff0208 	.word	0xffff0208

08008054 <__sread>:
 8008054:	b510      	push	{r4, lr}
 8008056:	460c      	mov	r4, r1
 8008058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805c:	f000 f900 	bl	8008260 <_read_r>
 8008060:	2800      	cmp	r0, #0
 8008062:	bfab      	itete	ge
 8008064:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008066:	89a3      	ldrhlt	r3, [r4, #12]
 8008068:	181b      	addge	r3, r3, r0
 800806a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800806e:	bfac      	ite	ge
 8008070:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008072:	81a3      	strhlt	r3, [r4, #12]
 8008074:	bd10      	pop	{r4, pc}

08008076 <__swrite>:
 8008076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800807a:	461f      	mov	r7, r3
 800807c:	898b      	ldrh	r3, [r1, #12]
 800807e:	05db      	lsls	r3, r3, #23
 8008080:	4605      	mov	r5, r0
 8008082:	460c      	mov	r4, r1
 8008084:	4616      	mov	r6, r2
 8008086:	d505      	bpl.n	8008094 <__swrite+0x1e>
 8008088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800808c:	2302      	movs	r3, #2
 800808e:	2200      	movs	r2, #0
 8008090:	f000 f8d4 	bl	800823c <_lseek_r>
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800809a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800809e:	81a3      	strh	r3, [r4, #12]
 80080a0:	4632      	mov	r2, r6
 80080a2:	463b      	mov	r3, r7
 80080a4:	4628      	mov	r0, r5
 80080a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080aa:	f000 b8fb 	b.w	80082a4 <_write_r>

080080ae <__sseek>:
 80080ae:	b510      	push	{r4, lr}
 80080b0:	460c      	mov	r4, r1
 80080b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b6:	f000 f8c1 	bl	800823c <_lseek_r>
 80080ba:	1c43      	adds	r3, r0, #1
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	bf15      	itete	ne
 80080c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080ca:	81a3      	strheq	r3, [r4, #12]
 80080cc:	bf18      	it	ne
 80080ce:	81a3      	strhne	r3, [r4, #12]
 80080d0:	bd10      	pop	{r4, pc}

080080d2 <__sclose>:
 80080d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d6:	f000 b8a1 	b.w	800821c <_close_r>

080080da <__swbuf_r>:
 80080da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080dc:	460e      	mov	r6, r1
 80080de:	4614      	mov	r4, r2
 80080e0:	4605      	mov	r5, r0
 80080e2:	b118      	cbz	r0, 80080ec <__swbuf_r+0x12>
 80080e4:	6a03      	ldr	r3, [r0, #32]
 80080e6:	b90b      	cbnz	r3, 80080ec <__swbuf_r+0x12>
 80080e8:	f7ff ff18 	bl	8007f1c <__sinit>
 80080ec:	69a3      	ldr	r3, [r4, #24]
 80080ee:	60a3      	str	r3, [r4, #8]
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	071a      	lsls	r2, r3, #28
 80080f4:	d501      	bpl.n	80080fa <__swbuf_r+0x20>
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	b943      	cbnz	r3, 800810c <__swbuf_r+0x32>
 80080fa:	4621      	mov	r1, r4
 80080fc:	4628      	mov	r0, r5
 80080fe:	f000 f82b 	bl	8008158 <__swsetup_r>
 8008102:	b118      	cbz	r0, 800810c <__swbuf_r+0x32>
 8008104:	f04f 37ff 	mov.w	r7, #4294967295
 8008108:	4638      	mov	r0, r7
 800810a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	6922      	ldr	r2, [r4, #16]
 8008110:	1a98      	subs	r0, r3, r2
 8008112:	6963      	ldr	r3, [r4, #20]
 8008114:	b2f6      	uxtb	r6, r6
 8008116:	4283      	cmp	r3, r0
 8008118:	4637      	mov	r7, r6
 800811a:	dc05      	bgt.n	8008128 <__swbuf_r+0x4e>
 800811c:	4621      	mov	r1, r4
 800811e:	4628      	mov	r0, r5
 8008120:	f002 fdf2 	bl	800ad08 <_fflush_r>
 8008124:	2800      	cmp	r0, #0
 8008126:	d1ed      	bne.n	8008104 <__swbuf_r+0x2a>
 8008128:	68a3      	ldr	r3, [r4, #8]
 800812a:	3b01      	subs	r3, #1
 800812c:	60a3      	str	r3, [r4, #8]
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	6022      	str	r2, [r4, #0]
 8008134:	701e      	strb	r6, [r3, #0]
 8008136:	6962      	ldr	r2, [r4, #20]
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	429a      	cmp	r2, r3
 800813c:	d004      	beq.n	8008148 <__swbuf_r+0x6e>
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	07db      	lsls	r3, r3, #31
 8008142:	d5e1      	bpl.n	8008108 <__swbuf_r+0x2e>
 8008144:	2e0a      	cmp	r6, #10
 8008146:	d1df      	bne.n	8008108 <__swbuf_r+0x2e>
 8008148:	4621      	mov	r1, r4
 800814a:	4628      	mov	r0, r5
 800814c:	f002 fddc 	bl	800ad08 <_fflush_r>
 8008150:	2800      	cmp	r0, #0
 8008152:	d0d9      	beq.n	8008108 <__swbuf_r+0x2e>
 8008154:	e7d6      	b.n	8008104 <__swbuf_r+0x2a>
	...

08008158 <__swsetup_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4b29      	ldr	r3, [pc, #164]	@ (8008200 <__swsetup_r+0xa8>)
 800815c:	4605      	mov	r5, r0
 800815e:	6818      	ldr	r0, [r3, #0]
 8008160:	460c      	mov	r4, r1
 8008162:	b118      	cbz	r0, 800816c <__swsetup_r+0x14>
 8008164:	6a03      	ldr	r3, [r0, #32]
 8008166:	b90b      	cbnz	r3, 800816c <__swsetup_r+0x14>
 8008168:	f7ff fed8 	bl	8007f1c <__sinit>
 800816c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008170:	0719      	lsls	r1, r3, #28
 8008172:	d422      	bmi.n	80081ba <__swsetup_r+0x62>
 8008174:	06da      	lsls	r2, r3, #27
 8008176:	d407      	bmi.n	8008188 <__swsetup_r+0x30>
 8008178:	2209      	movs	r2, #9
 800817a:	602a      	str	r2, [r5, #0]
 800817c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008180:	81a3      	strh	r3, [r4, #12]
 8008182:	f04f 30ff 	mov.w	r0, #4294967295
 8008186:	e033      	b.n	80081f0 <__swsetup_r+0x98>
 8008188:	0758      	lsls	r0, r3, #29
 800818a:	d512      	bpl.n	80081b2 <__swsetup_r+0x5a>
 800818c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800818e:	b141      	cbz	r1, 80081a2 <__swsetup_r+0x4a>
 8008190:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008194:	4299      	cmp	r1, r3
 8008196:	d002      	beq.n	800819e <__swsetup_r+0x46>
 8008198:	4628      	mov	r0, r5
 800819a:	f000 ff15 	bl	8008fc8 <_free_r>
 800819e:	2300      	movs	r3, #0
 80081a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081a8:	81a3      	strh	r3, [r4, #12]
 80081aa:	2300      	movs	r3, #0
 80081ac:	6063      	str	r3, [r4, #4]
 80081ae:	6923      	ldr	r3, [r4, #16]
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f043 0308 	orr.w	r3, r3, #8
 80081b8:	81a3      	strh	r3, [r4, #12]
 80081ba:	6923      	ldr	r3, [r4, #16]
 80081bc:	b94b      	cbnz	r3, 80081d2 <__swsetup_r+0x7a>
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081c8:	d003      	beq.n	80081d2 <__swsetup_r+0x7a>
 80081ca:	4621      	mov	r1, r4
 80081cc:	4628      	mov	r0, r5
 80081ce:	f002 fde9 	bl	800ada4 <__smakebuf_r>
 80081d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081d6:	f013 0201 	ands.w	r2, r3, #1
 80081da:	d00a      	beq.n	80081f2 <__swsetup_r+0x9a>
 80081dc:	2200      	movs	r2, #0
 80081de:	60a2      	str	r2, [r4, #8]
 80081e0:	6962      	ldr	r2, [r4, #20]
 80081e2:	4252      	negs	r2, r2
 80081e4:	61a2      	str	r2, [r4, #24]
 80081e6:	6922      	ldr	r2, [r4, #16]
 80081e8:	b942      	cbnz	r2, 80081fc <__swsetup_r+0xa4>
 80081ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081ee:	d1c5      	bne.n	800817c <__swsetup_r+0x24>
 80081f0:	bd38      	pop	{r3, r4, r5, pc}
 80081f2:	0799      	lsls	r1, r3, #30
 80081f4:	bf58      	it	pl
 80081f6:	6962      	ldrpl	r2, [r4, #20]
 80081f8:	60a2      	str	r2, [r4, #8]
 80081fa:	e7f4      	b.n	80081e6 <__swsetup_r+0x8e>
 80081fc:	2000      	movs	r0, #0
 80081fe:	e7f7      	b.n	80081f0 <__swsetup_r+0x98>
 8008200:	20000038 	.word	0x20000038

08008204 <memset>:
 8008204:	4402      	add	r2, r0
 8008206:	4603      	mov	r3, r0
 8008208:	4293      	cmp	r3, r2
 800820a:	d100      	bne.n	800820e <memset+0xa>
 800820c:	4770      	bx	lr
 800820e:	f803 1b01 	strb.w	r1, [r3], #1
 8008212:	e7f9      	b.n	8008208 <memset+0x4>

08008214 <_localeconv_r>:
 8008214:	4800      	ldr	r0, [pc, #0]	@ (8008218 <_localeconv_r+0x4>)
 8008216:	4770      	bx	lr
 8008218:	20000178 	.word	0x20000178

0800821c <_close_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d06      	ldr	r5, [pc, #24]	@ (8008238 <_close_r+0x1c>)
 8008220:	2300      	movs	r3, #0
 8008222:	4604      	mov	r4, r0
 8008224:	4608      	mov	r0, r1
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	f7fb f804 	bl	8003234 <_close>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_close_r+0x1a>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_close_r+0x1a>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	200009c4 	.word	0x200009c4

0800823c <_lseek_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4d07      	ldr	r5, [pc, #28]	@ (800825c <_lseek_r+0x20>)
 8008240:	4604      	mov	r4, r0
 8008242:	4608      	mov	r0, r1
 8008244:	4611      	mov	r1, r2
 8008246:	2200      	movs	r2, #0
 8008248:	602a      	str	r2, [r5, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	f7fb f819 	bl	8003282 <_lseek>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_lseek_r+0x1e>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_lseek_r+0x1e>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	200009c4 	.word	0x200009c4

08008260 <_read_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4d07      	ldr	r5, [pc, #28]	@ (8008280 <_read_r+0x20>)
 8008264:	4604      	mov	r4, r0
 8008266:	4608      	mov	r0, r1
 8008268:	4611      	mov	r1, r2
 800826a:	2200      	movs	r2, #0
 800826c:	602a      	str	r2, [r5, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	f7fa ffa7 	bl	80031c2 <_read>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	d102      	bne.n	800827e <_read_r+0x1e>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	b103      	cbz	r3, 800827e <_read_r+0x1e>
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	200009c4 	.word	0x200009c4

08008284 <_sbrk_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4d06      	ldr	r5, [pc, #24]	@ (80082a0 <_sbrk_r+0x1c>)
 8008288:	2300      	movs	r3, #0
 800828a:	4604      	mov	r4, r0
 800828c:	4608      	mov	r0, r1
 800828e:	602b      	str	r3, [r5, #0]
 8008290:	f7fb f804 	bl	800329c <_sbrk>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d102      	bne.n	800829e <_sbrk_r+0x1a>
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	b103      	cbz	r3, 800829e <_sbrk_r+0x1a>
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	200009c4 	.word	0x200009c4

080082a4 <_write_r>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	4d07      	ldr	r5, [pc, #28]	@ (80082c4 <_write_r+0x20>)
 80082a8:	4604      	mov	r4, r0
 80082aa:	4608      	mov	r0, r1
 80082ac:	4611      	mov	r1, r2
 80082ae:	2200      	movs	r2, #0
 80082b0:	602a      	str	r2, [r5, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	f7fa ffa2 	bl	80031fc <_write>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d102      	bne.n	80082c2 <_write_r+0x1e>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b103      	cbz	r3, 80082c2 <_write_r+0x1e>
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	200009c4 	.word	0x200009c4

080082c8 <__errno>:
 80082c8:	4b01      	ldr	r3, [pc, #4]	@ (80082d0 <__errno+0x8>)
 80082ca:	6818      	ldr	r0, [r3, #0]
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	20000038 	.word	0x20000038

080082d4 <__libc_init_array>:
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	4d0d      	ldr	r5, [pc, #52]	@ (800830c <__libc_init_array+0x38>)
 80082d8:	4c0d      	ldr	r4, [pc, #52]	@ (8008310 <__libc_init_array+0x3c>)
 80082da:	1b64      	subs	r4, r4, r5
 80082dc:	10a4      	asrs	r4, r4, #2
 80082de:	2600      	movs	r6, #0
 80082e0:	42a6      	cmp	r6, r4
 80082e2:	d109      	bne.n	80082f8 <__libc_init_array+0x24>
 80082e4:	4d0b      	ldr	r5, [pc, #44]	@ (8008314 <__libc_init_array+0x40>)
 80082e6:	4c0c      	ldr	r4, [pc, #48]	@ (8008318 <__libc_init_array+0x44>)
 80082e8:	f003 fa1c 	bl	800b724 <_init>
 80082ec:	1b64      	subs	r4, r4, r5
 80082ee:	10a4      	asrs	r4, r4, #2
 80082f0:	2600      	movs	r6, #0
 80082f2:	42a6      	cmp	r6, r4
 80082f4:	d105      	bne.n	8008302 <__libc_init_array+0x2e>
 80082f6:	bd70      	pop	{r4, r5, r6, pc}
 80082f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082fc:	4798      	blx	r3
 80082fe:	3601      	adds	r6, #1
 8008300:	e7ee      	b.n	80082e0 <__libc_init_array+0xc>
 8008302:	f855 3b04 	ldr.w	r3, [r5], #4
 8008306:	4798      	blx	r3
 8008308:	3601      	adds	r6, #1
 800830a:	e7f2      	b.n	80082f2 <__libc_init_array+0x1e>
 800830c:	0800c3c8 	.word	0x0800c3c8
 8008310:	0800c3c8 	.word	0x0800c3c8
 8008314:	0800c3c8 	.word	0x0800c3c8
 8008318:	0800c3cc 	.word	0x0800c3cc

0800831c <__retarget_lock_init_recursive>:
 800831c:	4770      	bx	lr

0800831e <__retarget_lock_acquire_recursive>:
 800831e:	4770      	bx	lr

08008320 <__retarget_lock_release_recursive>:
 8008320:	4770      	bx	lr
	...

08008324 <nanf>:
 8008324:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800832c <nanf+0x8>
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	7fc00000 	.word	0x7fc00000

08008330 <quorem>:
 8008330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	6903      	ldr	r3, [r0, #16]
 8008336:	690c      	ldr	r4, [r1, #16]
 8008338:	42a3      	cmp	r3, r4
 800833a:	4607      	mov	r7, r0
 800833c:	db7e      	blt.n	800843c <quorem+0x10c>
 800833e:	3c01      	subs	r4, #1
 8008340:	f101 0814 	add.w	r8, r1, #20
 8008344:	00a3      	lsls	r3, r4, #2
 8008346:	f100 0514 	add.w	r5, r0, #20
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008350:	9301      	str	r3, [sp, #4]
 8008352:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008356:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800835a:	3301      	adds	r3, #1
 800835c:	429a      	cmp	r2, r3
 800835e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008362:	fbb2 f6f3 	udiv	r6, r2, r3
 8008366:	d32e      	bcc.n	80083c6 <quorem+0x96>
 8008368:	f04f 0a00 	mov.w	sl, #0
 800836c:	46c4      	mov	ip, r8
 800836e:	46ae      	mov	lr, r5
 8008370:	46d3      	mov	fp, sl
 8008372:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008376:	b298      	uxth	r0, r3
 8008378:	fb06 a000 	mla	r0, r6, r0, sl
 800837c:	0c02      	lsrs	r2, r0, #16
 800837e:	0c1b      	lsrs	r3, r3, #16
 8008380:	fb06 2303 	mla	r3, r6, r3, r2
 8008384:	f8de 2000 	ldr.w	r2, [lr]
 8008388:	b280      	uxth	r0, r0
 800838a:	b292      	uxth	r2, r2
 800838c:	1a12      	subs	r2, r2, r0
 800838e:	445a      	add	r2, fp
 8008390:	f8de 0000 	ldr.w	r0, [lr]
 8008394:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008398:	b29b      	uxth	r3, r3
 800839a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800839e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80083a2:	b292      	uxth	r2, r2
 80083a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80083a8:	45e1      	cmp	r9, ip
 80083aa:	f84e 2b04 	str.w	r2, [lr], #4
 80083ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80083b2:	d2de      	bcs.n	8008372 <quorem+0x42>
 80083b4:	9b00      	ldr	r3, [sp, #0]
 80083b6:	58eb      	ldr	r3, [r5, r3]
 80083b8:	b92b      	cbnz	r3, 80083c6 <quorem+0x96>
 80083ba:	9b01      	ldr	r3, [sp, #4]
 80083bc:	3b04      	subs	r3, #4
 80083be:	429d      	cmp	r5, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	d32f      	bcc.n	8008424 <quorem+0xf4>
 80083c4:	613c      	str	r4, [r7, #16]
 80083c6:	4638      	mov	r0, r7
 80083c8:	f001 f90c 	bl	80095e4 <__mcmp>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	db25      	blt.n	800841c <quorem+0xec>
 80083d0:	4629      	mov	r1, r5
 80083d2:	2000      	movs	r0, #0
 80083d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80083d8:	f8d1 c000 	ldr.w	ip, [r1]
 80083dc:	fa1f fe82 	uxth.w	lr, r2
 80083e0:	fa1f f38c 	uxth.w	r3, ip
 80083e4:	eba3 030e 	sub.w	r3, r3, lr
 80083e8:	4403      	add	r3, r0
 80083ea:	0c12      	lsrs	r2, r2, #16
 80083ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80083f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083fa:	45c1      	cmp	r9, r8
 80083fc:	f841 3b04 	str.w	r3, [r1], #4
 8008400:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008404:	d2e6      	bcs.n	80083d4 <quorem+0xa4>
 8008406:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800840a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800840e:	b922      	cbnz	r2, 800841a <quorem+0xea>
 8008410:	3b04      	subs	r3, #4
 8008412:	429d      	cmp	r5, r3
 8008414:	461a      	mov	r2, r3
 8008416:	d30b      	bcc.n	8008430 <quorem+0x100>
 8008418:	613c      	str	r4, [r7, #16]
 800841a:	3601      	adds	r6, #1
 800841c:	4630      	mov	r0, r6
 800841e:	b003      	add	sp, #12
 8008420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008424:	6812      	ldr	r2, [r2, #0]
 8008426:	3b04      	subs	r3, #4
 8008428:	2a00      	cmp	r2, #0
 800842a:	d1cb      	bne.n	80083c4 <quorem+0x94>
 800842c:	3c01      	subs	r4, #1
 800842e:	e7c6      	b.n	80083be <quorem+0x8e>
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	3b04      	subs	r3, #4
 8008434:	2a00      	cmp	r2, #0
 8008436:	d1ef      	bne.n	8008418 <quorem+0xe8>
 8008438:	3c01      	subs	r4, #1
 800843a:	e7ea      	b.n	8008412 <quorem+0xe2>
 800843c:	2000      	movs	r0, #0
 800843e:	e7ee      	b.n	800841e <quorem+0xee>

08008440 <_dtoa_r>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	69c7      	ldr	r7, [r0, #28]
 8008446:	b099      	sub	sp, #100	@ 0x64
 8008448:	ed8d 0b02 	vstr	d0, [sp, #8]
 800844c:	ec55 4b10 	vmov	r4, r5, d0
 8008450:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008452:	9109      	str	r1, [sp, #36]	@ 0x24
 8008454:	4683      	mov	fp, r0
 8008456:	920e      	str	r2, [sp, #56]	@ 0x38
 8008458:	9313      	str	r3, [sp, #76]	@ 0x4c
 800845a:	b97f      	cbnz	r7, 800847c <_dtoa_r+0x3c>
 800845c:	2010      	movs	r0, #16
 800845e:	f7fe fdaf 	bl	8006fc0 <malloc>
 8008462:	4602      	mov	r2, r0
 8008464:	f8cb 001c 	str.w	r0, [fp, #28]
 8008468:	b920      	cbnz	r0, 8008474 <_dtoa_r+0x34>
 800846a:	4ba7      	ldr	r3, [pc, #668]	@ (8008708 <_dtoa_r+0x2c8>)
 800846c:	21ef      	movs	r1, #239	@ 0xef
 800846e:	48a7      	ldr	r0, [pc, #668]	@ (800870c <_dtoa_r+0x2cc>)
 8008470:	f002 fd3a 	bl	800aee8 <__assert_func>
 8008474:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008478:	6007      	str	r7, [r0, #0]
 800847a:	60c7      	str	r7, [r0, #12]
 800847c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008480:	6819      	ldr	r1, [r3, #0]
 8008482:	b159      	cbz	r1, 800849c <_dtoa_r+0x5c>
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	604a      	str	r2, [r1, #4]
 8008488:	2301      	movs	r3, #1
 800848a:	4093      	lsls	r3, r2
 800848c:	608b      	str	r3, [r1, #8]
 800848e:	4658      	mov	r0, fp
 8008490:	f000 fe24 	bl	80090dc <_Bfree>
 8008494:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	1e2b      	subs	r3, r5, #0
 800849e:	bfb9      	ittee	lt
 80084a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80084a4:	9303      	strlt	r3, [sp, #12]
 80084a6:	2300      	movge	r3, #0
 80084a8:	6033      	strge	r3, [r6, #0]
 80084aa:	9f03      	ldr	r7, [sp, #12]
 80084ac:	4b98      	ldr	r3, [pc, #608]	@ (8008710 <_dtoa_r+0x2d0>)
 80084ae:	bfbc      	itt	lt
 80084b0:	2201      	movlt	r2, #1
 80084b2:	6032      	strlt	r2, [r6, #0]
 80084b4:	43bb      	bics	r3, r7
 80084b6:	d112      	bne.n	80084de <_dtoa_r+0x9e>
 80084b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80084ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80084c4:	4323      	orrs	r3, r4
 80084c6:	f000 854d 	beq.w	8008f64 <_dtoa_r+0xb24>
 80084ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008724 <_dtoa_r+0x2e4>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 854f 	beq.w	8008f74 <_dtoa_r+0xb34>
 80084d6:	f10a 0303 	add.w	r3, sl, #3
 80084da:	f000 bd49 	b.w	8008f70 <_dtoa_r+0xb30>
 80084de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084e2:	2200      	movs	r2, #0
 80084e4:	ec51 0b17 	vmov	r0, r1, d7
 80084e8:	2300      	movs	r3, #0
 80084ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80084ee:	f7f8 fb0b 	bl	8000b08 <__aeabi_dcmpeq>
 80084f2:	4680      	mov	r8, r0
 80084f4:	b158      	cbz	r0, 800850e <_dtoa_r+0xce>
 80084f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80084f8:	2301      	movs	r3, #1
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084fe:	b113      	cbz	r3, 8008506 <_dtoa_r+0xc6>
 8008500:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008502:	4b84      	ldr	r3, [pc, #528]	@ (8008714 <_dtoa_r+0x2d4>)
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008728 <_dtoa_r+0x2e8>
 800850a:	f000 bd33 	b.w	8008f74 <_dtoa_r+0xb34>
 800850e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008512:	aa16      	add	r2, sp, #88	@ 0x58
 8008514:	a917      	add	r1, sp, #92	@ 0x5c
 8008516:	4658      	mov	r0, fp
 8008518:	f001 f984 	bl	8009824 <__d2b>
 800851c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008520:	4681      	mov	r9, r0
 8008522:	2e00      	cmp	r6, #0
 8008524:	d077      	beq.n	8008616 <_dtoa_r+0x1d6>
 8008526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008528:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800852c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008534:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008538:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800853c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008540:	4619      	mov	r1, r3
 8008542:	2200      	movs	r2, #0
 8008544:	4b74      	ldr	r3, [pc, #464]	@ (8008718 <_dtoa_r+0x2d8>)
 8008546:	f7f7 febf 	bl	80002c8 <__aeabi_dsub>
 800854a:	a369      	add	r3, pc, #420	@ (adr r3, 80086f0 <_dtoa_r+0x2b0>)
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	f7f8 f872 	bl	8000638 <__aeabi_dmul>
 8008554:	a368      	add	r3, pc, #416	@ (adr r3, 80086f8 <_dtoa_r+0x2b8>)
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	f7f7 feb7 	bl	80002cc <__adddf3>
 800855e:	4604      	mov	r4, r0
 8008560:	4630      	mov	r0, r6
 8008562:	460d      	mov	r5, r1
 8008564:	f7f7 fffe 	bl	8000564 <__aeabi_i2d>
 8008568:	a365      	add	r3, pc, #404	@ (adr r3, 8008700 <_dtoa_r+0x2c0>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f7f8 f863 	bl	8000638 <__aeabi_dmul>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4620      	mov	r0, r4
 8008578:	4629      	mov	r1, r5
 800857a:	f7f7 fea7 	bl	80002cc <__adddf3>
 800857e:	4604      	mov	r4, r0
 8008580:	460d      	mov	r5, r1
 8008582:	f7f8 fb09 	bl	8000b98 <__aeabi_d2iz>
 8008586:	2200      	movs	r2, #0
 8008588:	4607      	mov	r7, r0
 800858a:	2300      	movs	r3, #0
 800858c:	4620      	mov	r0, r4
 800858e:	4629      	mov	r1, r5
 8008590:	f7f8 fac4 	bl	8000b1c <__aeabi_dcmplt>
 8008594:	b140      	cbz	r0, 80085a8 <_dtoa_r+0x168>
 8008596:	4638      	mov	r0, r7
 8008598:	f7f7 ffe4 	bl	8000564 <__aeabi_i2d>
 800859c:	4622      	mov	r2, r4
 800859e:	462b      	mov	r3, r5
 80085a0:	f7f8 fab2 	bl	8000b08 <__aeabi_dcmpeq>
 80085a4:	b900      	cbnz	r0, 80085a8 <_dtoa_r+0x168>
 80085a6:	3f01      	subs	r7, #1
 80085a8:	2f16      	cmp	r7, #22
 80085aa:	d851      	bhi.n	8008650 <_dtoa_r+0x210>
 80085ac:	4b5b      	ldr	r3, [pc, #364]	@ (800871c <_dtoa_r+0x2dc>)
 80085ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085ba:	f7f8 faaf 	bl	8000b1c <__aeabi_dcmplt>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d048      	beq.n	8008654 <_dtoa_r+0x214>
 80085c2:	3f01      	subs	r7, #1
 80085c4:	2300      	movs	r3, #0
 80085c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80085c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80085ca:	1b9b      	subs	r3, r3, r6
 80085cc:	1e5a      	subs	r2, r3, #1
 80085ce:	bf44      	itt	mi
 80085d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80085d4:	2300      	movmi	r3, #0
 80085d6:	9208      	str	r2, [sp, #32]
 80085d8:	bf54      	ite	pl
 80085da:	f04f 0800 	movpl.w	r8, #0
 80085de:	9308      	strmi	r3, [sp, #32]
 80085e0:	2f00      	cmp	r7, #0
 80085e2:	db39      	blt.n	8008658 <_dtoa_r+0x218>
 80085e4:	9b08      	ldr	r3, [sp, #32]
 80085e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80085e8:	443b      	add	r3, r7
 80085ea:	9308      	str	r3, [sp, #32]
 80085ec:	2300      	movs	r3, #0
 80085ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80085f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f2:	2b09      	cmp	r3, #9
 80085f4:	d864      	bhi.n	80086c0 <_dtoa_r+0x280>
 80085f6:	2b05      	cmp	r3, #5
 80085f8:	bfc4      	itt	gt
 80085fa:	3b04      	subgt	r3, #4
 80085fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80085fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008600:	f1a3 0302 	sub.w	r3, r3, #2
 8008604:	bfcc      	ite	gt
 8008606:	2400      	movgt	r4, #0
 8008608:	2401      	movle	r4, #1
 800860a:	2b03      	cmp	r3, #3
 800860c:	d863      	bhi.n	80086d6 <_dtoa_r+0x296>
 800860e:	e8df f003 	tbb	[pc, r3]
 8008612:	372a      	.short	0x372a
 8008614:	5535      	.short	0x5535
 8008616:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800861a:	441e      	add	r6, r3
 800861c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008620:	2b20      	cmp	r3, #32
 8008622:	bfc1      	itttt	gt
 8008624:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008628:	409f      	lslgt	r7, r3
 800862a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800862e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008632:	bfd6      	itet	le
 8008634:	f1c3 0320 	rsble	r3, r3, #32
 8008638:	ea47 0003 	orrgt.w	r0, r7, r3
 800863c:	fa04 f003 	lslle.w	r0, r4, r3
 8008640:	f7f7 ff80 	bl	8000544 <__aeabi_ui2d>
 8008644:	2201      	movs	r2, #1
 8008646:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800864a:	3e01      	subs	r6, #1
 800864c:	9214      	str	r2, [sp, #80]	@ 0x50
 800864e:	e777      	b.n	8008540 <_dtoa_r+0x100>
 8008650:	2301      	movs	r3, #1
 8008652:	e7b8      	b.n	80085c6 <_dtoa_r+0x186>
 8008654:	9012      	str	r0, [sp, #72]	@ 0x48
 8008656:	e7b7      	b.n	80085c8 <_dtoa_r+0x188>
 8008658:	427b      	negs	r3, r7
 800865a:	930a      	str	r3, [sp, #40]	@ 0x28
 800865c:	2300      	movs	r3, #0
 800865e:	eba8 0807 	sub.w	r8, r8, r7
 8008662:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008664:	e7c4      	b.n	80085f0 <_dtoa_r+0x1b0>
 8008666:	2300      	movs	r3, #0
 8008668:	930b      	str	r3, [sp, #44]	@ 0x2c
 800866a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800866c:	2b00      	cmp	r3, #0
 800866e:	dc35      	bgt.n	80086dc <_dtoa_r+0x29c>
 8008670:	2301      	movs	r3, #1
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	9307      	str	r3, [sp, #28]
 8008676:	461a      	mov	r2, r3
 8008678:	920e      	str	r2, [sp, #56]	@ 0x38
 800867a:	e00b      	b.n	8008694 <_dtoa_r+0x254>
 800867c:	2301      	movs	r3, #1
 800867e:	e7f3      	b.n	8008668 <_dtoa_r+0x228>
 8008680:	2300      	movs	r3, #0
 8008682:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008684:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008686:	18fb      	adds	r3, r7, r3
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	3301      	adds	r3, #1
 800868c:	2b01      	cmp	r3, #1
 800868e:	9307      	str	r3, [sp, #28]
 8008690:	bfb8      	it	lt
 8008692:	2301      	movlt	r3, #1
 8008694:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008698:	2100      	movs	r1, #0
 800869a:	2204      	movs	r2, #4
 800869c:	f102 0514 	add.w	r5, r2, #20
 80086a0:	429d      	cmp	r5, r3
 80086a2:	d91f      	bls.n	80086e4 <_dtoa_r+0x2a4>
 80086a4:	6041      	str	r1, [r0, #4]
 80086a6:	4658      	mov	r0, fp
 80086a8:	f000 fcd8 	bl	800905c <_Balloc>
 80086ac:	4682      	mov	sl, r0
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d13c      	bne.n	800872c <_dtoa_r+0x2ec>
 80086b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008720 <_dtoa_r+0x2e0>)
 80086b4:	4602      	mov	r2, r0
 80086b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80086ba:	e6d8      	b.n	800846e <_dtoa_r+0x2e>
 80086bc:	2301      	movs	r3, #1
 80086be:	e7e0      	b.n	8008682 <_dtoa_r+0x242>
 80086c0:	2401      	movs	r4, #1
 80086c2:	2300      	movs	r3, #0
 80086c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80086c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80086c8:	f04f 33ff 	mov.w	r3, #4294967295
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	9307      	str	r3, [sp, #28]
 80086d0:	2200      	movs	r2, #0
 80086d2:	2312      	movs	r3, #18
 80086d4:	e7d0      	b.n	8008678 <_dtoa_r+0x238>
 80086d6:	2301      	movs	r3, #1
 80086d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086da:	e7f5      	b.n	80086c8 <_dtoa_r+0x288>
 80086dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	9307      	str	r3, [sp, #28]
 80086e2:	e7d7      	b.n	8008694 <_dtoa_r+0x254>
 80086e4:	3101      	adds	r1, #1
 80086e6:	0052      	lsls	r2, r2, #1
 80086e8:	e7d8      	b.n	800869c <_dtoa_r+0x25c>
 80086ea:	bf00      	nop
 80086ec:	f3af 8000 	nop.w
 80086f0:	636f4361 	.word	0x636f4361
 80086f4:	3fd287a7 	.word	0x3fd287a7
 80086f8:	8b60c8b3 	.word	0x8b60c8b3
 80086fc:	3fc68a28 	.word	0x3fc68a28
 8008700:	509f79fb 	.word	0x509f79fb
 8008704:	3fd34413 	.word	0x3fd34413
 8008708:	0800bfd6 	.word	0x0800bfd6
 800870c:	0800bfed 	.word	0x0800bfed
 8008710:	7ff00000 	.word	0x7ff00000
 8008714:	0800bfa1 	.word	0x0800bfa1
 8008718:	3ff80000 	.word	0x3ff80000
 800871c:	0800c0e8 	.word	0x0800c0e8
 8008720:	0800c045 	.word	0x0800c045
 8008724:	0800bfd2 	.word	0x0800bfd2
 8008728:	0800bfa0 	.word	0x0800bfa0
 800872c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008730:	6018      	str	r0, [r3, #0]
 8008732:	9b07      	ldr	r3, [sp, #28]
 8008734:	2b0e      	cmp	r3, #14
 8008736:	f200 80a4 	bhi.w	8008882 <_dtoa_r+0x442>
 800873a:	2c00      	cmp	r4, #0
 800873c:	f000 80a1 	beq.w	8008882 <_dtoa_r+0x442>
 8008740:	2f00      	cmp	r7, #0
 8008742:	dd33      	ble.n	80087ac <_dtoa_r+0x36c>
 8008744:	4bad      	ldr	r3, [pc, #692]	@ (80089fc <_dtoa_r+0x5bc>)
 8008746:	f007 020f 	and.w	r2, r7, #15
 800874a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800874e:	ed93 7b00 	vldr	d7, [r3]
 8008752:	05f8      	lsls	r0, r7, #23
 8008754:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008758:	ea4f 1427 	mov.w	r4, r7, asr #4
 800875c:	d516      	bpl.n	800878c <_dtoa_r+0x34c>
 800875e:	4ba8      	ldr	r3, [pc, #672]	@ (8008a00 <_dtoa_r+0x5c0>)
 8008760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008764:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008768:	f7f8 f890 	bl	800088c <__aeabi_ddiv>
 800876c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008770:	f004 040f 	and.w	r4, r4, #15
 8008774:	2603      	movs	r6, #3
 8008776:	4da2      	ldr	r5, [pc, #648]	@ (8008a00 <_dtoa_r+0x5c0>)
 8008778:	b954      	cbnz	r4, 8008790 <_dtoa_r+0x350>
 800877a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800877e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008782:	f7f8 f883 	bl	800088c <__aeabi_ddiv>
 8008786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800878a:	e028      	b.n	80087de <_dtoa_r+0x39e>
 800878c:	2602      	movs	r6, #2
 800878e:	e7f2      	b.n	8008776 <_dtoa_r+0x336>
 8008790:	07e1      	lsls	r1, r4, #31
 8008792:	d508      	bpl.n	80087a6 <_dtoa_r+0x366>
 8008794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008798:	e9d5 2300 	ldrd	r2, r3, [r5]
 800879c:	f7f7 ff4c 	bl	8000638 <__aeabi_dmul>
 80087a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087a4:	3601      	adds	r6, #1
 80087a6:	1064      	asrs	r4, r4, #1
 80087a8:	3508      	adds	r5, #8
 80087aa:	e7e5      	b.n	8008778 <_dtoa_r+0x338>
 80087ac:	f000 80d2 	beq.w	8008954 <_dtoa_r+0x514>
 80087b0:	427c      	negs	r4, r7
 80087b2:	4b92      	ldr	r3, [pc, #584]	@ (80089fc <_dtoa_r+0x5bc>)
 80087b4:	4d92      	ldr	r5, [pc, #584]	@ (8008a00 <_dtoa_r+0x5c0>)
 80087b6:	f004 020f 	and.w	r2, r4, #15
 80087ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087c6:	f7f7 ff37 	bl	8000638 <__aeabi_dmul>
 80087ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087ce:	1124      	asrs	r4, r4, #4
 80087d0:	2300      	movs	r3, #0
 80087d2:	2602      	movs	r6, #2
 80087d4:	2c00      	cmp	r4, #0
 80087d6:	f040 80b2 	bne.w	800893e <_dtoa_r+0x4fe>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1d3      	bne.n	8008786 <_dtoa_r+0x346>
 80087de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 80b7 	beq.w	8008958 <_dtoa_r+0x518>
 80087ea:	4b86      	ldr	r3, [pc, #536]	@ (8008a04 <_dtoa_r+0x5c4>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	4620      	mov	r0, r4
 80087f0:	4629      	mov	r1, r5
 80087f2:	f7f8 f993 	bl	8000b1c <__aeabi_dcmplt>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f000 80ae 	beq.w	8008958 <_dtoa_r+0x518>
 80087fc:	9b07      	ldr	r3, [sp, #28]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 80aa 	beq.w	8008958 <_dtoa_r+0x518>
 8008804:	9b00      	ldr	r3, [sp, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	dd37      	ble.n	800887a <_dtoa_r+0x43a>
 800880a:	1e7b      	subs	r3, r7, #1
 800880c:	9304      	str	r3, [sp, #16]
 800880e:	4620      	mov	r0, r4
 8008810:	4b7d      	ldr	r3, [pc, #500]	@ (8008a08 <_dtoa_r+0x5c8>)
 8008812:	2200      	movs	r2, #0
 8008814:	4629      	mov	r1, r5
 8008816:	f7f7 ff0f 	bl	8000638 <__aeabi_dmul>
 800881a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800881e:	9c00      	ldr	r4, [sp, #0]
 8008820:	3601      	adds	r6, #1
 8008822:	4630      	mov	r0, r6
 8008824:	f7f7 fe9e 	bl	8000564 <__aeabi_i2d>
 8008828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800882c:	f7f7 ff04 	bl	8000638 <__aeabi_dmul>
 8008830:	4b76      	ldr	r3, [pc, #472]	@ (8008a0c <_dtoa_r+0x5cc>)
 8008832:	2200      	movs	r2, #0
 8008834:	f7f7 fd4a 	bl	80002cc <__adddf3>
 8008838:	4605      	mov	r5, r0
 800883a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800883e:	2c00      	cmp	r4, #0
 8008840:	f040 808d 	bne.w	800895e <_dtoa_r+0x51e>
 8008844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008848:	4b71      	ldr	r3, [pc, #452]	@ (8008a10 <_dtoa_r+0x5d0>)
 800884a:	2200      	movs	r2, #0
 800884c:	f7f7 fd3c 	bl	80002c8 <__aeabi_dsub>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008858:	462a      	mov	r2, r5
 800885a:	4633      	mov	r3, r6
 800885c:	f7f8 f97c 	bl	8000b58 <__aeabi_dcmpgt>
 8008860:	2800      	cmp	r0, #0
 8008862:	f040 828b 	bne.w	8008d7c <_dtoa_r+0x93c>
 8008866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800886a:	462a      	mov	r2, r5
 800886c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008870:	f7f8 f954 	bl	8000b1c <__aeabi_dcmplt>
 8008874:	2800      	cmp	r0, #0
 8008876:	f040 8128 	bne.w	8008aca <_dtoa_r+0x68a>
 800887a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800887e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008882:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008884:	2b00      	cmp	r3, #0
 8008886:	f2c0 815a 	blt.w	8008b3e <_dtoa_r+0x6fe>
 800888a:	2f0e      	cmp	r7, #14
 800888c:	f300 8157 	bgt.w	8008b3e <_dtoa_r+0x6fe>
 8008890:	4b5a      	ldr	r3, [pc, #360]	@ (80089fc <_dtoa_r+0x5bc>)
 8008892:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008896:	ed93 7b00 	vldr	d7, [r3]
 800889a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800889c:	2b00      	cmp	r3, #0
 800889e:	ed8d 7b00 	vstr	d7, [sp]
 80088a2:	da03      	bge.n	80088ac <_dtoa_r+0x46c>
 80088a4:	9b07      	ldr	r3, [sp, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f340 8101 	ble.w	8008aae <_dtoa_r+0x66e>
 80088ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80088b0:	4656      	mov	r6, sl
 80088b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088b6:	4620      	mov	r0, r4
 80088b8:	4629      	mov	r1, r5
 80088ba:	f7f7 ffe7 	bl	800088c <__aeabi_ddiv>
 80088be:	f7f8 f96b 	bl	8000b98 <__aeabi_d2iz>
 80088c2:	4680      	mov	r8, r0
 80088c4:	f7f7 fe4e 	bl	8000564 <__aeabi_i2d>
 80088c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088cc:	f7f7 feb4 	bl	8000638 <__aeabi_dmul>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4620      	mov	r0, r4
 80088d6:	4629      	mov	r1, r5
 80088d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80088dc:	f7f7 fcf4 	bl	80002c8 <__aeabi_dsub>
 80088e0:	f806 4b01 	strb.w	r4, [r6], #1
 80088e4:	9d07      	ldr	r5, [sp, #28]
 80088e6:	eba6 040a 	sub.w	r4, r6, sl
 80088ea:	42a5      	cmp	r5, r4
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	f040 8117 	bne.w	8008b22 <_dtoa_r+0x6e2>
 80088f4:	f7f7 fcea 	bl	80002cc <__adddf3>
 80088f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088fc:	4604      	mov	r4, r0
 80088fe:	460d      	mov	r5, r1
 8008900:	f7f8 f92a 	bl	8000b58 <__aeabi_dcmpgt>
 8008904:	2800      	cmp	r0, #0
 8008906:	f040 80f9 	bne.w	8008afc <_dtoa_r+0x6bc>
 800890a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800890e:	4620      	mov	r0, r4
 8008910:	4629      	mov	r1, r5
 8008912:	f7f8 f8f9 	bl	8000b08 <__aeabi_dcmpeq>
 8008916:	b118      	cbz	r0, 8008920 <_dtoa_r+0x4e0>
 8008918:	f018 0f01 	tst.w	r8, #1
 800891c:	f040 80ee 	bne.w	8008afc <_dtoa_r+0x6bc>
 8008920:	4649      	mov	r1, r9
 8008922:	4658      	mov	r0, fp
 8008924:	f000 fbda 	bl	80090dc <_Bfree>
 8008928:	2300      	movs	r3, #0
 800892a:	7033      	strb	r3, [r6, #0]
 800892c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800892e:	3701      	adds	r7, #1
 8008930:	601f      	str	r7, [r3, #0]
 8008932:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 831d 	beq.w	8008f74 <_dtoa_r+0xb34>
 800893a:	601e      	str	r6, [r3, #0]
 800893c:	e31a      	b.n	8008f74 <_dtoa_r+0xb34>
 800893e:	07e2      	lsls	r2, r4, #31
 8008940:	d505      	bpl.n	800894e <_dtoa_r+0x50e>
 8008942:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008946:	f7f7 fe77 	bl	8000638 <__aeabi_dmul>
 800894a:	3601      	adds	r6, #1
 800894c:	2301      	movs	r3, #1
 800894e:	1064      	asrs	r4, r4, #1
 8008950:	3508      	adds	r5, #8
 8008952:	e73f      	b.n	80087d4 <_dtoa_r+0x394>
 8008954:	2602      	movs	r6, #2
 8008956:	e742      	b.n	80087de <_dtoa_r+0x39e>
 8008958:	9c07      	ldr	r4, [sp, #28]
 800895a:	9704      	str	r7, [sp, #16]
 800895c:	e761      	b.n	8008822 <_dtoa_r+0x3e2>
 800895e:	4b27      	ldr	r3, [pc, #156]	@ (80089fc <_dtoa_r+0x5bc>)
 8008960:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008962:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008966:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800896a:	4454      	add	r4, sl
 800896c:	2900      	cmp	r1, #0
 800896e:	d053      	beq.n	8008a18 <_dtoa_r+0x5d8>
 8008970:	4928      	ldr	r1, [pc, #160]	@ (8008a14 <_dtoa_r+0x5d4>)
 8008972:	2000      	movs	r0, #0
 8008974:	f7f7 ff8a 	bl	800088c <__aeabi_ddiv>
 8008978:	4633      	mov	r3, r6
 800897a:	462a      	mov	r2, r5
 800897c:	f7f7 fca4 	bl	80002c8 <__aeabi_dsub>
 8008980:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008984:	4656      	mov	r6, sl
 8008986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800898a:	f7f8 f905 	bl	8000b98 <__aeabi_d2iz>
 800898e:	4605      	mov	r5, r0
 8008990:	f7f7 fde8 	bl	8000564 <__aeabi_i2d>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800899c:	f7f7 fc94 	bl	80002c8 <__aeabi_dsub>
 80089a0:	3530      	adds	r5, #48	@ 0x30
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089aa:	f806 5b01 	strb.w	r5, [r6], #1
 80089ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089b2:	f7f8 f8b3 	bl	8000b1c <__aeabi_dcmplt>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d171      	bne.n	8008a9e <_dtoa_r+0x65e>
 80089ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089be:	4911      	ldr	r1, [pc, #68]	@ (8008a04 <_dtoa_r+0x5c4>)
 80089c0:	2000      	movs	r0, #0
 80089c2:	f7f7 fc81 	bl	80002c8 <__aeabi_dsub>
 80089c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089ca:	f7f8 f8a7 	bl	8000b1c <__aeabi_dcmplt>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	f040 8095 	bne.w	8008afe <_dtoa_r+0x6be>
 80089d4:	42a6      	cmp	r6, r4
 80089d6:	f43f af50 	beq.w	800887a <_dtoa_r+0x43a>
 80089da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80089de:	4b0a      	ldr	r3, [pc, #40]	@ (8008a08 <_dtoa_r+0x5c8>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	f7f7 fe29 	bl	8000638 <__aeabi_dmul>
 80089e6:	4b08      	ldr	r3, [pc, #32]	@ (8008a08 <_dtoa_r+0x5c8>)
 80089e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80089ec:	2200      	movs	r2, #0
 80089ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089f2:	f7f7 fe21 	bl	8000638 <__aeabi_dmul>
 80089f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089fa:	e7c4      	b.n	8008986 <_dtoa_r+0x546>
 80089fc:	0800c0e8 	.word	0x0800c0e8
 8008a00:	0800c0c0 	.word	0x0800c0c0
 8008a04:	3ff00000 	.word	0x3ff00000
 8008a08:	40240000 	.word	0x40240000
 8008a0c:	401c0000 	.word	0x401c0000
 8008a10:	40140000 	.word	0x40140000
 8008a14:	3fe00000 	.word	0x3fe00000
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f7f7 fe0c 	bl	8000638 <__aeabi_dmul>
 8008a20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a24:	9415      	str	r4, [sp, #84]	@ 0x54
 8008a26:	4656      	mov	r6, sl
 8008a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a2c:	f7f8 f8b4 	bl	8000b98 <__aeabi_d2iz>
 8008a30:	4605      	mov	r5, r0
 8008a32:	f7f7 fd97 	bl	8000564 <__aeabi_i2d>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a3e:	f7f7 fc43 	bl	80002c8 <__aeabi_dsub>
 8008a42:	3530      	adds	r5, #48	@ 0x30
 8008a44:	f806 5b01 	strb.w	r5, [r6], #1
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	42a6      	cmp	r6, r4
 8008a4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a52:	f04f 0200 	mov.w	r2, #0
 8008a56:	d124      	bne.n	8008aa2 <_dtoa_r+0x662>
 8008a58:	4bac      	ldr	r3, [pc, #688]	@ (8008d0c <_dtoa_r+0x8cc>)
 8008a5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a5e:	f7f7 fc35 	bl	80002cc <__adddf3>
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a6a:	f7f8 f875 	bl	8000b58 <__aeabi_dcmpgt>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d145      	bne.n	8008afe <_dtoa_r+0x6be>
 8008a72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a76:	49a5      	ldr	r1, [pc, #660]	@ (8008d0c <_dtoa_r+0x8cc>)
 8008a78:	2000      	movs	r0, #0
 8008a7a:	f7f7 fc25 	bl	80002c8 <__aeabi_dsub>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a86:	f7f8 f849 	bl	8000b1c <__aeabi_dcmplt>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	f43f aef5 	beq.w	800887a <_dtoa_r+0x43a>
 8008a90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008a92:	1e73      	subs	r3, r6, #1
 8008a94:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a9a:	2b30      	cmp	r3, #48	@ 0x30
 8008a9c:	d0f8      	beq.n	8008a90 <_dtoa_r+0x650>
 8008a9e:	9f04      	ldr	r7, [sp, #16]
 8008aa0:	e73e      	b.n	8008920 <_dtoa_r+0x4e0>
 8008aa2:	4b9b      	ldr	r3, [pc, #620]	@ (8008d10 <_dtoa_r+0x8d0>)
 8008aa4:	f7f7 fdc8 	bl	8000638 <__aeabi_dmul>
 8008aa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008aac:	e7bc      	b.n	8008a28 <_dtoa_r+0x5e8>
 8008aae:	d10c      	bne.n	8008aca <_dtoa_r+0x68a>
 8008ab0:	4b98      	ldr	r3, [pc, #608]	@ (8008d14 <_dtoa_r+0x8d4>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ab8:	f7f7 fdbe 	bl	8000638 <__aeabi_dmul>
 8008abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ac0:	f7f8 f840 	bl	8000b44 <__aeabi_dcmpge>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	f000 8157 	beq.w	8008d78 <_dtoa_r+0x938>
 8008aca:	2400      	movs	r4, #0
 8008acc:	4625      	mov	r5, r4
 8008ace:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	9304      	str	r3, [sp, #16]
 8008ad4:	4656      	mov	r6, sl
 8008ad6:	2700      	movs	r7, #0
 8008ad8:	4621      	mov	r1, r4
 8008ada:	4658      	mov	r0, fp
 8008adc:	f000 fafe 	bl	80090dc <_Bfree>
 8008ae0:	2d00      	cmp	r5, #0
 8008ae2:	d0dc      	beq.n	8008a9e <_dtoa_r+0x65e>
 8008ae4:	b12f      	cbz	r7, 8008af2 <_dtoa_r+0x6b2>
 8008ae6:	42af      	cmp	r7, r5
 8008ae8:	d003      	beq.n	8008af2 <_dtoa_r+0x6b2>
 8008aea:	4639      	mov	r1, r7
 8008aec:	4658      	mov	r0, fp
 8008aee:	f000 faf5 	bl	80090dc <_Bfree>
 8008af2:	4629      	mov	r1, r5
 8008af4:	4658      	mov	r0, fp
 8008af6:	f000 faf1 	bl	80090dc <_Bfree>
 8008afa:	e7d0      	b.n	8008a9e <_dtoa_r+0x65e>
 8008afc:	9704      	str	r7, [sp, #16]
 8008afe:	4633      	mov	r3, r6
 8008b00:	461e      	mov	r6, r3
 8008b02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b06:	2a39      	cmp	r2, #57	@ 0x39
 8008b08:	d107      	bne.n	8008b1a <_dtoa_r+0x6da>
 8008b0a:	459a      	cmp	sl, r3
 8008b0c:	d1f8      	bne.n	8008b00 <_dtoa_r+0x6c0>
 8008b0e:	9a04      	ldr	r2, [sp, #16]
 8008b10:	3201      	adds	r2, #1
 8008b12:	9204      	str	r2, [sp, #16]
 8008b14:	2230      	movs	r2, #48	@ 0x30
 8008b16:	f88a 2000 	strb.w	r2, [sl]
 8008b1a:	781a      	ldrb	r2, [r3, #0]
 8008b1c:	3201      	adds	r2, #1
 8008b1e:	701a      	strb	r2, [r3, #0]
 8008b20:	e7bd      	b.n	8008a9e <_dtoa_r+0x65e>
 8008b22:	4b7b      	ldr	r3, [pc, #492]	@ (8008d10 <_dtoa_r+0x8d0>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	f7f7 fd87 	bl	8000638 <__aeabi_dmul>
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4604      	mov	r4, r0
 8008b30:	460d      	mov	r5, r1
 8008b32:	f7f7 ffe9 	bl	8000b08 <__aeabi_dcmpeq>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f43f aebb 	beq.w	80088b2 <_dtoa_r+0x472>
 8008b3c:	e6f0      	b.n	8008920 <_dtoa_r+0x4e0>
 8008b3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	f000 80db 	beq.w	8008cfc <_dtoa_r+0x8bc>
 8008b46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b48:	2a01      	cmp	r2, #1
 8008b4a:	f300 80bf 	bgt.w	8008ccc <_dtoa_r+0x88c>
 8008b4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008b50:	2a00      	cmp	r2, #0
 8008b52:	f000 80b7 	beq.w	8008cc4 <_dtoa_r+0x884>
 8008b56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008b5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008b5c:	4646      	mov	r6, r8
 8008b5e:	9a08      	ldr	r2, [sp, #32]
 8008b60:	2101      	movs	r1, #1
 8008b62:	441a      	add	r2, r3
 8008b64:	4658      	mov	r0, fp
 8008b66:	4498      	add	r8, r3
 8008b68:	9208      	str	r2, [sp, #32]
 8008b6a:	f000 fbb5 	bl	80092d8 <__i2b>
 8008b6e:	4605      	mov	r5, r0
 8008b70:	b15e      	cbz	r6, 8008b8a <_dtoa_r+0x74a>
 8008b72:	9b08      	ldr	r3, [sp, #32]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dd08      	ble.n	8008b8a <_dtoa_r+0x74a>
 8008b78:	42b3      	cmp	r3, r6
 8008b7a:	9a08      	ldr	r2, [sp, #32]
 8008b7c:	bfa8      	it	ge
 8008b7e:	4633      	movge	r3, r6
 8008b80:	eba8 0803 	sub.w	r8, r8, r3
 8008b84:	1af6      	subs	r6, r6, r3
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	9308      	str	r3, [sp, #32]
 8008b8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b8c:	b1f3      	cbz	r3, 8008bcc <_dtoa_r+0x78c>
 8008b8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 80b7 	beq.w	8008d04 <_dtoa_r+0x8c4>
 8008b96:	b18c      	cbz	r4, 8008bbc <_dtoa_r+0x77c>
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	4658      	mov	r0, fp
 8008b9e:	f000 fc5b 	bl	8009458 <__pow5mult>
 8008ba2:	464a      	mov	r2, r9
 8008ba4:	4601      	mov	r1, r0
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	4658      	mov	r0, fp
 8008baa:	f000 fbab 	bl	8009304 <__multiply>
 8008bae:	4649      	mov	r1, r9
 8008bb0:	9004      	str	r0, [sp, #16]
 8008bb2:	4658      	mov	r0, fp
 8008bb4:	f000 fa92 	bl	80090dc <_Bfree>
 8008bb8:	9b04      	ldr	r3, [sp, #16]
 8008bba:	4699      	mov	r9, r3
 8008bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bbe:	1b1a      	subs	r2, r3, r4
 8008bc0:	d004      	beq.n	8008bcc <_dtoa_r+0x78c>
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	4658      	mov	r0, fp
 8008bc6:	f000 fc47 	bl	8009458 <__pow5mult>
 8008bca:	4681      	mov	r9, r0
 8008bcc:	2101      	movs	r1, #1
 8008bce:	4658      	mov	r0, fp
 8008bd0:	f000 fb82 	bl	80092d8 <__i2b>
 8008bd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 81cf 	beq.w	8008f7c <_dtoa_r+0xb3c>
 8008bde:	461a      	mov	r2, r3
 8008be0:	4601      	mov	r1, r0
 8008be2:	4658      	mov	r0, fp
 8008be4:	f000 fc38 	bl	8009458 <__pow5mult>
 8008be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	4604      	mov	r4, r0
 8008bee:	f300 8095 	bgt.w	8008d1c <_dtoa_r+0x8dc>
 8008bf2:	9b02      	ldr	r3, [sp, #8]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f040 8087 	bne.w	8008d08 <_dtoa_r+0x8c8>
 8008bfa:	9b03      	ldr	r3, [sp, #12]
 8008bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f040 8089 	bne.w	8008d18 <_dtoa_r+0x8d8>
 8008c06:	9b03      	ldr	r3, [sp, #12]
 8008c08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c0c:	0d1b      	lsrs	r3, r3, #20
 8008c0e:	051b      	lsls	r3, r3, #20
 8008c10:	b12b      	cbz	r3, 8008c1e <_dtoa_r+0x7de>
 8008c12:	9b08      	ldr	r3, [sp, #32]
 8008c14:	3301      	adds	r3, #1
 8008c16:	9308      	str	r3, [sp, #32]
 8008c18:	f108 0801 	add.w	r8, r8, #1
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 81b0 	beq.w	8008f88 <_dtoa_r+0xb48>
 8008c28:	6923      	ldr	r3, [r4, #16]
 8008c2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c2e:	6918      	ldr	r0, [r3, #16]
 8008c30:	f000 fb06 	bl	8009240 <__hi0bits>
 8008c34:	f1c0 0020 	rsb	r0, r0, #32
 8008c38:	9b08      	ldr	r3, [sp, #32]
 8008c3a:	4418      	add	r0, r3
 8008c3c:	f010 001f 	ands.w	r0, r0, #31
 8008c40:	d077      	beq.n	8008d32 <_dtoa_r+0x8f2>
 8008c42:	f1c0 0320 	rsb	r3, r0, #32
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	dd6b      	ble.n	8008d22 <_dtoa_r+0x8e2>
 8008c4a:	9b08      	ldr	r3, [sp, #32]
 8008c4c:	f1c0 001c 	rsb	r0, r0, #28
 8008c50:	4403      	add	r3, r0
 8008c52:	4480      	add	r8, r0
 8008c54:	4406      	add	r6, r0
 8008c56:	9308      	str	r3, [sp, #32]
 8008c58:	f1b8 0f00 	cmp.w	r8, #0
 8008c5c:	dd05      	ble.n	8008c6a <_dtoa_r+0x82a>
 8008c5e:	4649      	mov	r1, r9
 8008c60:	4642      	mov	r2, r8
 8008c62:	4658      	mov	r0, fp
 8008c64:	f000 fc52 	bl	800950c <__lshift>
 8008c68:	4681      	mov	r9, r0
 8008c6a:	9b08      	ldr	r3, [sp, #32]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	dd05      	ble.n	8008c7c <_dtoa_r+0x83c>
 8008c70:	4621      	mov	r1, r4
 8008c72:	461a      	mov	r2, r3
 8008c74:	4658      	mov	r0, fp
 8008c76:	f000 fc49 	bl	800950c <__lshift>
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d059      	beq.n	8008d36 <_dtoa_r+0x8f6>
 8008c82:	4621      	mov	r1, r4
 8008c84:	4648      	mov	r0, r9
 8008c86:	f000 fcad 	bl	80095e4 <__mcmp>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	da53      	bge.n	8008d36 <_dtoa_r+0x8f6>
 8008c8e:	1e7b      	subs	r3, r7, #1
 8008c90:	9304      	str	r3, [sp, #16]
 8008c92:	4649      	mov	r1, r9
 8008c94:	2300      	movs	r3, #0
 8008c96:	220a      	movs	r2, #10
 8008c98:	4658      	mov	r0, fp
 8008c9a:	f000 fa41 	bl	8009120 <__multadd>
 8008c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ca0:	4681      	mov	r9, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 8172 	beq.w	8008f8c <_dtoa_r+0xb4c>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4629      	mov	r1, r5
 8008cac:	220a      	movs	r2, #10
 8008cae:	4658      	mov	r0, fp
 8008cb0:	f000 fa36 	bl	8009120 <__multadd>
 8008cb4:	9b00      	ldr	r3, [sp, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	4605      	mov	r5, r0
 8008cba:	dc67      	bgt.n	8008d8c <_dtoa_r+0x94c>
 8008cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	dc41      	bgt.n	8008d46 <_dtoa_r+0x906>
 8008cc2:	e063      	b.n	8008d8c <_dtoa_r+0x94c>
 8008cc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008cc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008cca:	e746      	b.n	8008b5a <_dtoa_r+0x71a>
 8008ccc:	9b07      	ldr	r3, [sp, #28]
 8008cce:	1e5c      	subs	r4, r3, #1
 8008cd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cd2:	42a3      	cmp	r3, r4
 8008cd4:	bfbf      	itttt	lt
 8008cd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008cd8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008cda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008cdc:	1ae3      	sublt	r3, r4, r3
 8008cde:	bfb4      	ite	lt
 8008ce0:	18d2      	addlt	r2, r2, r3
 8008ce2:	1b1c      	subge	r4, r3, r4
 8008ce4:	9b07      	ldr	r3, [sp, #28]
 8008ce6:	bfbc      	itt	lt
 8008ce8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008cea:	2400      	movlt	r4, #0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	bfb5      	itete	lt
 8008cf0:	eba8 0603 	sublt.w	r6, r8, r3
 8008cf4:	9b07      	ldrge	r3, [sp, #28]
 8008cf6:	2300      	movlt	r3, #0
 8008cf8:	4646      	movge	r6, r8
 8008cfa:	e730      	b.n	8008b5e <_dtoa_r+0x71e>
 8008cfc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008cfe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008d00:	4646      	mov	r6, r8
 8008d02:	e735      	b.n	8008b70 <_dtoa_r+0x730>
 8008d04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d06:	e75c      	b.n	8008bc2 <_dtoa_r+0x782>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	e788      	b.n	8008c1e <_dtoa_r+0x7de>
 8008d0c:	3fe00000 	.word	0x3fe00000
 8008d10:	40240000 	.word	0x40240000
 8008d14:	40140000 	.word	0x40140000
 8008d18:	9b02      	ldr	r3, [sp, #8]
 8008d1a:	e780      	b.n	8008c1e <_dtoa_r+0x7de>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d20:	e782      	b.n	8008c28 <_dtoa_r+0x7e8>
 8008d22:	d099      	beq.n	8008c58 <_dtoa_r+0x818>
 8008d24:	9a08      	ldr	r2, [sp, #32]
 8008d26:	331c      	adds	r3, #28
 8008d28:	441a      	add	r2, r3
 8008d2a:	4498      	add	r8, r3
 8008d2c:	441e      	add	r6, r3
 8008d2e:	9208      	str	r2, [sp, #32]
 8008d30:	e792      	b.n	8008c58 <_dtoa_r+0x818>
 8008d32:	4603      	mov	r3, r0
 8008d34:	e7f6      	b.n	8008d24 <_dtoa_r+0x8e4>
 8008d36:	9b07      	ldr	r3, [sp, #28]
 8008d38:	9704      	str	r7, [sp, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	dc20      	bgt.n	8008d80 <_dtoa_r+0x940>
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	dd1e      	ble.n	8008d84 <_dtoa_r+0x944>
 8008d46:	9b00      	ldr	r3, [sp, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f47f aec0 	bne.w	8008ace <_dtoa_r+0x68e>
 8008d4e:	4621      	mov	r1, r4
 8008d50:	2205      	movs	r2, #5
 8008d52:	4658      	mov	r0, fp
 8008d54:	f000 f9e4 	bl	8009120 <__multadd>
 8008d58:	4601      	mov	r1, r0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4648      	mov	r0, r9
 8008d5e:	f000 fc41 	bl	80095e4 <__mcmp>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	f77f aeb3 	ble.w	8008ace <_dtoa_r+0x68e>
 8008d68:	4656      	mov	r6, sl
 8008d6a:	2331      	movs	r3, #49	@ 0x31
 8008d6c:	f806 3b01 	strb.w	r3, [r6], #1
 8008d70:	9b04      	ldr	r3, [sp, #16]
 8008d72:	3301      	adds	r3, #1
 8008d74:	9304      	str	r3, [sp, #16]
 8008d76:	e6ae      	b.n	8008ad6 <_dtoa_r+0x696>
 8008d78:	9c07      	ldr	r4, [sp, #28]
 8008d7a:	9704      	str	r7, [sp, #16]
 8008d7c:	4625      	mov	r5, r4
 8008d7e:	e7f3      	b.n	8008d68 <_dtoa_r+0x928>
 8008d80:	9b07      	ldr	r3, [sp, #28]
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f000 8104 	beq.w	8008f94 <_dtoa_r+0xb54>
 8008d8c:	2e00      	cmp	r6, #0
 8008d8e:	dd05      	ble.n	8008d9c <_dtoa_r+0x95c>
 8008d90:	4629      	mov	r1, r5
 8008d92:	4632      	mov	r2, r6
 8008d94:	4658      	mov	r0, fp
 8008d96:	f000 fbb9 	bl	800950c <__lshift>
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d05a      	beq.n	8008e58 <_dtoa_r+0xa18>
 8008da2:	6869      	ldr	r1, [r5, #4]
 8008da4:	4658      	mov	r0, fp
 8008da6:	f000 f959 	bl	800905c <_Balloc>
 8008daa:	4606      	mov	r6, r0
 8008dac:	b928      	cbnz	r0, 8008dba <_dtoa_r+0x97a>
 8008dae:	4b84      	ldr	r3, [pc, #528]	@ (8008fc0 <_dtoa_r+0xb80>)
 8008db0:	4602      	mov	r2, r0
 8008db2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008db6:	f7ff bb5a 	b.w	800846e <_dtoa_r+0x2e>
 8008dba:	692a      	ldr	r2, [r5, #16]
 8008dbc:	3202      	adds	r2, #2
 8008dbe:	0092      	lsls	r2, r2, #2
 8008dc0:	f105 010c 	add.w	r1, r5, #12
 8008dc4:	300c      	adds	r0, #12
 8008dc6:	f002 f877 	bl	800aeb8 <memcpy>
 8008dca:	2201      	movs	r2, #1
 8008dcc:	4631      	mov	r1, r6
 8008dce:	4658      	mov	r0, fp
 8008dd0:	f000 fb9c 	bl	800950c <__lshift>
 8008dd4:	f10a 0301 	add.w	r3, sl, #1
 8008dd8:	9307      	str	r3, [sp, #28]
 8008dda:	9b00      	ldr	r3, [sp, #0]
 8008ddc:	4453      	add	r3, sl
 8008dde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008de0:	9b02      	ldr	r3, [sp, #8]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	462f      	mov	r7, r5
 8008de8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dea:	4605      	mov	r5, r0
 8008dec:	9b07      	ldr	r3, [sp, #28]
 8008dee:	4621      	mov	r1, r4
 8008df0:	3b01      	subs	r3, #1
 8008df2:	4648      	mov	r0, r9
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	f7ff fa9b 	bl	8008330 <quorem>
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	9002      	str	r0, [sp, #8]
 8008dfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e02:	4648      	mov	r0, r9
 8008e04:	f000 fbee 	bl	80095e4 <__mcmp>
 8008e08:	462a      	mov	r2, r5
 8008e0a:	9008      	str	r0, [sp, #32]
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4658      	mov	r0, fp
 8008e10:	f000 fc04 	bl	800961c <__mdiff>
 8008e14:	68c2      	ldr	r2, [r0, #12]
 8008e16:	4606      	mov	r6, r0
 8008e18:	bb02      	cbnz	r2, 8008e5c <_dtoa_r+0xa1c>
 8008e1a:	4601      	mov	r1, r0
 8008e1c:	4648      	mov	r0, r9
 8008e1e:	f000 fbe1 	bl	80095e4 <__mcmp>
 8008e22:	4602      	mov	r2, r0
 8008e24:	4631      	mov	r1, r6
 8008e26:	4658      	mov	r0, fp
 8008e28:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e2a:	f000 f957 	bl	80090dc <_Bfree>
 8008e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e32:	9e07      	ldr	r6, [sp, #28]
 8008e34:	ea43 0102 	orr.w	r1, r3, r2
 8008e38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e3a:	4319      	orrs	r1, r3
 8008e3c:	d110      	bne.n	8008e60 <_dtoa_r+0xa20>
 8008e3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e42:	d029      	beq.n	8008e98 <_dtoa_r+0xa58>
 8008e44:	9b08      	ldr	r3, [sp, #32]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	dd02      	ble.n	8008e50 <_dtoa_r+0xa10>
 8008e4a:	9b02      	ldr	r3, [sp, #8]
 8008e4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008e50:	9b00      	ldr	r3, [sp, #0]
 8008e52:	f883 8000 	strb.w	r8, [r3]
 8008e56:	e63f      	b.n	8008ad8 <_dtoa_r+0x698>
 8008e58:	4628      	mov	r0, r5
 8008e5a:	e7bb      	b.n	8008dd4 <_dtoa_r+0x994>
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	e7e1      	b.n	8008e24 <_dtoa_r+0x9e4>
 8008e60:	9b08      	ldr	r3, [sp, #32]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	db04      	blt.n	8008e70 <_dtoa_r+0xa30>
 8008e66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e68:	430b      	orrs	r3, r1
 8008e6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e6c:	430b      	orrs	r3, r1
 8008e6e:	d120      	bne.n	8008eb2 <_dtoa_r+0xa72>
 8008e70:	2a00      	cmp	r2, #0
 8008e72:	dded      	ble.n	8008e50 <_dtoa_r+0xa10>
 8008e74:	4649      	mov	r1, r9
 8008e76:	2201      	movs	r2, #1
 8008e78:	4658      	mov	r0, fp
 8008e7a:	f000 fb47 	bl	800950c <__lshift>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4681      	mov	r9, r0
 8008e82:	f000 fbaf 	bl	80095e4 <__mcmp>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	dc03      	bgt.n	8008e92 <_dtoa_r+0xa52>
 8008e8a:	d1e1      	bne.n	8008e50 <_dtoa_r+0xa10>
 8008e8c:	f018 0f01 	tst.w	r8, #1
 8008e90:	d0de      	beq.n	8008e50 <_dtoa_r+0xa10>
 8008e92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e96:	d1d8      	bne.n	8008e4a <_dtoa_r+0xa0a>
 8008e98:	9a00      	ldr	r2, [sp, #0]
 8008e9a:	2339      	movs	r3, #57	@ 0x39
 8008e9c:	7013      	strb	r3, [r2, #0]
 8008e9e:	4633      	mov	r3, r6
 8008ea0:	461e      	mov	r6, r3
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008ea8:	2a39      	cmp	r2, #57	@ 0x39
 8008eaa:	d052      	beq.n	8008f52 <_dtoa_r+0xb12>
 8008eac:	3201      	adds	r2, #1
 8008eae:	701a      	strb	r2, [r3, #0]
 8008eb0:	e612      	b.n	8008ad8 <_dtoa_r+0x698>
 8008eb2:	2a00      	cmp	r2, #0
 8008eb4:	dd07      	ble.n	8008ec6 <_dtoa_r+0xa86>
 8008eb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008eba:	d0ed      	beq.n	8008e98 <_dtoa_r+0xa58>
 8008ebc:	9a00      	ldr	r2, [sp, #0]
 8008ebe:	f108 0301 	add.w	r3, r8, #1
 8008ec2:	7013      	strb	r3, [r2, #0]
 8008ec4:	e608      	b.n	8008ad8 <_dtoa_r+0x698>
 8008ec6:	9b07      	ldr	r3, [sp, #28]
 8008ec8:	9a07      	ldr	r2, [sp, #28]
 8008eca:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008ece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d028      	beq.n	8008f26 <_dtoa_r+0xae6>
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	220a      	movs	r2, #10
 8008eda:	4658      	mov	r0, fp
 8008edc:	f000 f920 	bl	8009120 <__multadd>
 8008ee0:	42af      	cmp	r7, r5
 8008ee2:	4681      	mov	r9, r0
 8008ee4:	f04f 0300 	mov.w	r3, #0
 8008ee8:	f04f 020a 	mov.w	r2, #10
 8008eec:	4639      	mov	r1, r7
 8008eee:	4658      	mov	r0, fp
 8008ef0:	d107      	bne.n	8008f02 <_dtoa_r+0xac2>
 8008ef2:	f000 f915 	bl	8009120 <__multadd>
 8008ef6:	4607      	mov	r7, r0
 8008ef8:	4605      	mov	r5, r0
 8008efa:	9b07      	ldr	r3, [sp, #28]
 8008efc:	3301      	adds	r3, #1
 8008efe:	9307      	str	r3, [sp, #28]
 8008f00:	e774      	b.n	8008dec <_dtoa_r+0x9ac>
 8008f02:	f000 f90d 	bl	8009120 <__multadd>
 8008f06:	4629      	mov	r1, r5
 8008f08:	4607      	mov	r7, r0
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	220a      	movs	r2, #10
 8008f0e:	4658      	mov	r0, fp
 8008f10:	f000 f906 	bl	8009120 <__multadd>
 8008f14:	4605      	mov	r5, r0
 8008f16:	e7f0      	b.n	8008efa <_dtoa_r+0xaba>
 8008f18:	9b00      	ldr	r3, [sp, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	bfcc      	ite	gt
 8008f1e:	461e      	movgt	r6, r3
 8008f20:	2601      	movle	r6, #1
 8008f22:	4456      	add	r6, sl
 8008f24:	2700      	movs	r7, #0
 8008f26:	4649      	mov	r1, r9
 8008f28:	2201      	movs	r2, #1
 8008f2a:	4658      	mov	r0, fp
 8008f2c:	f000 faee 	bl	800950c <__lshift>
 8008f30:	4621      	mov	r1, r4
 8008f32:	4681      	mov	r9, r0
 8008f34:	f000 fb56 	bl	80095e4 <__mcmp>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	dcb0      	bgt.n	8008e9e <_dtoa_r+0xa5e>
 8008f3c:	d102      	bne.n	8008f44 <_dtoa_r+0xb04>
 8008f3e:	f018 0f01 	tst.w	r8, #1
 8008f42:	d1ac      	bne.n	8008e9e <_dtoa_r+0xa5e>
 8008f44:	4633      	mov	r3, r6
 8008f46:	461e      	mov	r6, r3
 8008f48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f4c:	2a30      	cmp	r2, #48	@ 0x30
 8008f4e:	d0fa      	beq.n	8008f46 <_dtoa_r+0xb06>
 8008f50:	e5c2      	b.n	8008ad8 <_dtoa_r+0x698>
 8008f52:	459a      	cmp	sl, r3
 8008f54:	d1a4      	bne.n	8008ea0 <_dtoa_r+0xa60>
 8008f56:	9b04      	ldr	r3, [sp, #16]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	9304      	str	r3, [sp, #16]
 8008f5c:	2331      	movs	r3, #49	@ 0x31
 8008f5e:	f88a 3000 	strb.w	r3, [sl]
 8008f62:	e5b9      	b.n	8008ad8 <_dtoa_r+0x698>
 8008f64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008fc4 <_dtoa_r+0xb84>
 8008f6a:	b11b      	cbz	r3, 8008f74 <_dtoa_r+0xb34>
 8008f6c:	f10a 0308 	add.w	r3, sl, #8
 8008f70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008f72:	6013      	str	r3, [r2, #0]
 8008f74:	4650      	mov	r0, sl
 8008f76:	b019      	add	sp, #100	@ 0x64
 8008f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	f77f ae37 	ble.w	8008bf2 <_dtoa_r+0x7b2>
 8008f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f86:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f88:	2001      	movs	r0, #1
 8008f8a:	e655      	b.n	8008c38 <_dtoa_r+0x7f8>
 8008f8c:	9b00      	ldr	r3, [sp, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f77f aed6 	ble.w	8008d40 <_dtoa_r+0x900>
 8008f94:	4656      	mov	r6, sl
 8008f96:	4621      	mov	r1, r4
 8008f98:	4648      	mov	r0, r9
 8008f9a:	f7ff f9c9 	bl	8008330 <quorem>
 8008f9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008fa2:	f806 8b01 	strb.w	r8, [r6], #1
 8008fa6:	9b00      	ldr	r3, [sp, #0]
 8008fa8:	eba6 020a 	sub.w	r2, r6, sl
 8008fac:	4293      	cmp	r3, r2
 8008fae:	ddb3      	ble.n	8008f18 <_dtoa_r+0xad8>
 8008fb0:	4649      	mov	r1, r9
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	220a      	movs	r2, #10
 8008fb6:	4658      	mov	r0, fp
 8008fb8:	f000 f8b2 	bl	8009120 <__multadd>
 8008fbc:	4681      	mov	r9, r0
 8008fbe:	e7ea      	b.n	8008f96 <_dtoa_r+0xb56>
 8008fc0:	0800c045 	.word	0x0800c045
 8008fc4:	0800bfc9 	.word	0x0800bfc9

08008fc8 <_free_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4605      	mov	r5, r0
 8008fcc:	2900      	cmp	r1, #0
 8008fce:	d041      	beq.n	8009054 <_free_r+0x8c>
 8008fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fd4:	1f0c      	subs	r4, r1, #4
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	bfb8      	it	lt
 8008fda:	18e4      	addlt	r4, r4, r3
 8008fdc:	f7fe f89a 	bl	8007114 <__malloc_lock>
 8008fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8009058 <_free_r+0x90>)
 8008fe2:	6813      	ldr	r3, [r2, #0]
 8008fe4:	b933      	cbnz	r3, 8008ff4 <_free_r+0x2c>
 8008fe6:	6063      	str	r3, [r4, #4]
 8008fe8:	6014      	str	r4, [r2, #0]
 8008fea:	4628      	mov	r0, r5
 8008fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff0:	f7fe b896 	b.w	8007120 <__malloc_unlock>
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	d908      	bls.n	800900a <_free_r+0x42>
 8008ff8:	6820      	ldr	r0, [r4, #0]
 8008ffa:	1821      	adds	r1, r4, r0
 8008ffc:	428b      	cmp	r3, r1
 8008ffe:	bf01      	itttt	eq
 8009000:	6819      	ldreq	r1, [r3, #0]
 8009002:	685b      	ldreq	r3, [r3, #4]
 8009004:	1809      	addeq	r1, r1, r0
 8009006:	6021      	streq	r1, [r4, #0]
 8009008:	e7ed      	b.n	8008fe6 <_free_r+0x1e>
 800900a:	461a      	mov	r2, r3
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	b10b      	cbz	r3, 8009014 <_free_r+0x4c>
 8009010:	42a3      	cmp	r3, r4
 8009012:	d9fa      	bls.n	800900a <_free_r+0x42>
 8009014:	6811      	ldr	r1, [r2, #0]
 8009016:	1850      	adds	r0, r2, r1
 8009018:	42a0      	cmp	r0, r4
 800901a:	d10b      	bne.n	8009034 <_free_r+0x6c>
 800901c:	6820      	ldr	r0, [r4, #0]
 800901e:	4401      	add	r1, r0
 8009020:	1850      	adds	r0, r2, r1
 8009022:	4283      	cmp	r3, r0
 8009024:	6011      	str	r1, [r2, #0]
 8009026:	d1e0      	bne.n	8008fea <_free_r+0x22>
 8009028:	6818      	ldr	r0, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	6053      	str	r3, [r2, #4]
 800902e:	4408      	add	r0, r1
 8009030:	6010      	str	r0, [r2, #0]
 8009032:	e7da      	b.n	8008fea <_free_r+0x22>
 8009034:	d902      	bls.n	800903c <_free_r+0x74>
 8009036:	230c      	movs	r3, #12
 8009038:	602b      	str	r3, [r5, #0]
 800903a:	e7d6      	b.n	8008fea <_free_r+0x22>
 800903c:	6820      	ldr	r0, [r4, #0]
 800903e:	1821      	adds	r1, r4, r0
 8009040:	428b      	cmp	r3, r1
 8009042:	bf04      	itt	eq
 8009044:	6819      	ldreq	r1, [r3, #0]
 8009046:	685b      	ldreq	r3, [r3, #4]
 8009048:	6063      	str	r3, [r4, #4]
 800904a:	bf04      	itt	eq
 800904c:	1809      	addeq	r1, r1, r0
 800904e:	6021      	streq	r1, [r4, #0]
 8009050:	6054      	str	r4, [r2, #4]
 8009052:	e7ca      	b.n	8008fea <_free_r+0x22>
 8009054:	bd38      	pop	{r3, r4, r5, pc}
 8009056:	bf00      	nop
 8009058:	20000884 	.word	0x20000884

0800905c <_Balloc>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	69c6      	ldr	r6, [r0, #28]
 8009060:	4604      	mov	r4, r0
 8009062:	460d      	mov	r5, r1
 8009064:	b976      	cbnz	r6, 8009084 <_Balloc+0x28>
 8009066:	2010      	movs	r0, #16
 8009068:	f7fd ffaa 	bl	8006fc0 <malloc>
 800906c:	4602      	mov	r2, r0
 800906e:	61e0      	str	r0, [r4, #28]
 8009070:	b920      	cbnz	r0, 800907c <_Balloc+0x20>
 8009072:	4b18      	ldr	r3, [pc, #96]	@ (80090d4 <_Balloc+0x78>)
 8009074:	4818      	ldr	r0, [pc, #96]	@ (80090d8 <_Balloc+0x7c>)
 8009076:	216b      	movs	r1, #107	@ 0x6b
 8009078:	f001 ff36 	bl	800aee8 <__assert_func>
 800907c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009080:	6006      	str	r6, [r0, #0]
 8009082:	60c6      	str	r6, [r0, #12]
 8009084:	69e6      	ldr	r6, [r4, #28]
 8009086:	68f3      	ldr	r3, [r6, #12]
 8009088:	b183      	cbz	r3, 80090ac <_Balloc+0x50>
 800908a:	69e3      	ldr	r3, [r4, #28]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009092:	b9b8      	cbnz	r0, 80090c4 <_Balloc+0x68>
 8009094:	2101      	movs	r1, #1
 8009096:	fa01 f605 	lsl.w	r6, r1, r5
 800909a:	1d72      	adds	r2, r6, #5
 800909c:	0092      	lsls	r2, r2, #2
 800909e:	4620      	mov	r0, r4
 80090a0:	f001 ff40 	bl	800af24 <_calloc_r>
 80090a4:	b160      	cbz	r0, 80090c0 <_Balloc+0x64>
 80090a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090aa:	e00e      	b.n	80090ca <_Balloc+0x6e>
 80090ac:	2221      	movs	r2, #33	@ 0x21
 80090ae:	2104      	movs	r1, #4
 80090b0:	4620      	mov	r0, r4
 80090b2:	f001 ff37 	bl	800af24 <_calloc_r>
 80090b6:	69e3      	ldr	r3, [r4, #28]
 80090b8:	60f0      	str	r0, [r6, #12]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e4      	bne.n	800908a <_Balloc+0x2e>
 80090c0:	2000      	movs	r0, #0
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	6802      	ldr	r2, [r0, #0]
 80090c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090ca:	2300      	movs	r3, #0
 80090cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090d0:	e7f7      	b.n	80090c2 <_Balloc+0x66>
 80090d2:	bf00      	nop
 80090d4:	0800bfd6 	.word	0x0800bfd6
 80090d8:	0800c056 	.word	0x0800c056

080090dc <_Bfree>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	69c6      	ldr	r6, [r0, #28]
 80090e0:	4605      	mov	r5, r0
 80090e2:	460c      	mov	r4, r1
 80090e4:	b976      	cbnz	r6, 8009104 <_Bfree+0x28>
 80090e6:	2010      	movs	r0, #16
 80090e8:	f7fd ff6a 	bl	8006fc0 <malloc>
 80090ec:	4602      	mov	r2, r0
 80090ee:	61e8      	str	r0, [r5, #28]
 80090f0:	b920      	cbnz	r0, 80090fc <_Bfree+0x20>
 80090f2:	4b09      	ldr	r3, [pc, #36]	@ (8009118 <_Bfree+0x3c>)
 80090f4:	4809      	ldr	r0, [pc, #36]	@ (800911c <_Bfree+0x40>)
 80090f6:	218f      	movs	r1, #143	@ 0x8f
 80090f8:	f001 fef6 	bl	800aee8 <__assert_func>
 80090fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009100:	6006      	str	r6, [r0, #0]
 8009102:	60c6      	str	r6, [r0, #12]
 8009104:	b13c      	cbz	r4, 8009116 <_Bfree+0x3a>
 8009106:	69eb      	ldr	r3, [r5, #28]
 8009108:	6862      	ldr	r2, [r4, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009110:	6021      	str	r1, [r4, #0]
 8009112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	0800bfd6 	.word	0x0800bfd6
 800911c:	0800c056 	.word	0x0800c056

08009120 <__multadd>:
 8009120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009124:	690d      	ldr	r5, [r1, #16]
 8009126:	4607      	mov	r7, r0
 8009128:	460c      	mov	r4, r1
 800912a:	461e      	mov	r6, r3
 800912c:	f101 0c14 	add.w	ip, r1, #20
 8009130:	2000      	movs	r0, #0
 8009132:	f8dc 3000 	ldr.w	r3, [ip]
 8009136:	b299      	uxth	r1, r3
 8009138:	fb02 6101 	mla	r1, r2, r1, r6
 800913c:	0c1e      	lsrs	r6, r3, #16
 800913e:	0c0b      	lsrs	r3, r1, #16
 8009140:	fb02 3306 	mla	r3, r2, r6, r3
 8009144:	b289      	uxth	r1, r1
 8009146:	3001      	adds	r0, #1
 8009148:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800914c:	4285      	cmp	r5, r0
 800914e:	f84c 1b04 	str.w	r1, [ip], #4
 8009152:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009156:	dcec      	bgt.n	8009132 <__multadd+0x12>
 8009158:	b30e      	cbz	r6, 800919e <__multadd+0x7e>
 800915a:	68a3      	ldr	r3, [r4, #8]
 800915c:	42ab      	cmp	r3, r5
 800915e:	dc19      	bgt.n	8009194 <__multadd+0x74>
 8009160:	6861      	ldr	r1, [r4, #4]
 8009162:	4638      	mov	r0, r7
 8009164:	3101      	adds	r1, #1
 8009166:	f7ff ff79 	bl	800905c <_Balloc>
 800916a:	4680      	mov	r8, r0
 800916c:	b928      	cbnz	r0, 800917a <__multadd+0x5a>
 800916e:	4602      	mov	r2, r0
 8009170:	4b0c      	ldr	r3, [pc, #48]	@ (80091a4 <__multadd+0x84>)
 8009172:	480d      	ldr	r0, [pc, #52]	@ (80091a8 <__multadd+0x88>)
 8009174:	21ba      	movs	r1, #186	@ 0xba
 8009176:	f001 feb7 	bl	800aee8 <__assert_func>
 800917a:	6922      	ldr	r2, [r4, #16]
 800917c:	3202      	adds	r2, #2
 800917e:	f104 010c 	add.w	r1, r4, #12
 8009182:	0092      	lsls	r2, r2, #2
 8009184:	300c      	adds	r0, #12
 8009186:	f001 fe97 	bl	800aeb8 <memcpy>
 800918a:	4621      	mov	r1, r4
 800918c:	4638      	mov	r0, r7
 800918e:	f7ff ffa5 	bl	80090dc <_Bfree>
 8009192:	4644      	mov	r4, r8
 8009194:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009198:	3501      	adds	r5, #1
 800919a:	615e      	str	r6, [r3, #20]
 800919c:	6125      	str	r5, [r4, #16]
 800919e:	4620      	mov	r0, r4
 80091a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a4:	0800c045 	.word	0x0800c045
 80091a8:	0800c056 	.word	0x0800c056

080091ac <__s2b>:
 80091ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b0:	460c      	mov	r4, r1
 80091b2:	4615      	mov	r5, r2
 80091b4:	461f      	mov	r7, r3
 80091b6:	2209      	movs	r2, #9
 80091b8:	3308      	adds	r3, #8
 80091ba:	4606      	mov	r6, r0
 80091bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80091c0:	2100      	movs	r1, #0
 80091c2:	2201      	movs	r2, #1
 80091c4:	429a      	cmp	r2, r3
 80091c6:	db09      	blt.n	80091dc <__s2b+0x30>
 80091c8:	4630      	mov	r0, r6
 80091ca:	f7ff ff47 	bl	800905c <_Balloc>
 80091ce:	b940      	cbnz	r0, 80091e2 <__s2b+0x36>
 80091d0:	4602      	mov	r2, r0
 80091d2:	4b19      	ldr	r3, [pc, #100]	@ (8009238 <__s2b+0x8c>)
 80091d4:	4819      	ldr	r0, [pc, #100]	@ (800923c <__s2b+0x90>)
 80091d6:	21d3      	movs	r1, #211	@ 0xd3
 80091d8:	f001 fe86 	bl	800aee8 <__assert_func>
 80091dc:	0052      	lsls	r2, r2, #1
 80091de:	3101      	adds	r1, #1
 80091e0:	e7f0      	b.n	80091c4 <__s2b+0x18>
 80091e2:	9b08      	ldr	r3, [sp, #32]
 80091e4:	6143      	str	r3, [r0, #20]
 80091e6:	2d09      	cmp	r5, #9
 80091e8:	f04f 0301 	mov.w	r3, #1
 80091ec:	6103      	str	r3, [r0, #16]
 80091ee:	dd16      	ble.n	800921e <__s2b+0x72>
 80091f0:	f104 0909 	add.w	r9, r4, #9
 80091f4:	46c8      	mov	r8, r9
 80091f6:	442c      	add	r4, r5
 80091f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80091fc:	4601      	mov	r1, r0
 80091fe:	3b30      	subs	r3, #48	@ 0x30
 8009200:	220a      	movs	r2, #10
 8009202:	4630      	mov	r0, r6
 8009204:	f7ff ff8c 	bl	8009120 <__multadd>
 8009208:	45a0      	cmp	r8, r4
 800920a:	d1f5      	bne.n	80091f8 <__s2b+0x4c>
 800920c:	f1a5 0408 	sub.w	r4, r5, #8
 8009210:	444c      	add	r4, r9
 8009212:	1b2d      	subs	r5, r5, r4
 8009214:	1963      	adds	r3, r4, r5
 8009216:	42bb      	cmp	r3, r7
 8009218:	db04      	blt.n	8009224 <__s2b+0x78>
 800921a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800921e:	340a      	adds	r4, #10
 8009220:	2509      	movs	r5, #9
 8009222:	e7f6      	b.n	8009212 <__s2b+0x66>
 8009224:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009228:	4601      	mov	r1, r0
 800922a:	3b30      	subs	r3, #48	@ 0x30
 800922c:	220a      	movs	r2, #10
 800922e:	4630      	mov	r0, r6
 8009230:	f7ff ff76 	bl	8009120 <__multadd>
 8009234:	e7ee      	b.n	8009214 <__s2b+0x68>
 8009236:	bf00      	nop
 8009238:	0800c045 	.word	0x0800c045
 800923c:	0800c056 	.word	0x0800c056

08009240 <__hi0bits>:
 8009240:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009244:	4603      	mov	r3, r0
 8009246:	bf36      	itet	cc
 8009248:	0403      	lslcc	r3, r0, #16
 800924a:	2000      	movcs	r0, #0
 800924c:	2010      	movcc	r0, #16
 800924e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009252:	bf3c      	itt	cc
 8009254:	021b      	lslcc	r3, r3, #8
 8009256:	3008      	addcc	r0, #8
 8009258:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800925c:	bf3c      	itt	cc
 800925e:	011b      	lslcc	r3, r3, #4
 8009260:	3004      	addcc	r0, #4
 8009262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009266:	bf3c      	itt	cc
 8009268:	009b      	lslcc	r3, r3, #2
 800926a:	3002      	addcc	r0, #2
 800926c:	2b00      	cmp	r3, #0
 800926e:	db05      	blt.n	800927c <__hi0bits+0x3c>
 8009270:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009274:	f100 0001 	add.w	r0, r0, #1
 8009278:	bf08      	it	eq
 800927a:	2020      	moveq	r0, #32
 800927c:	4770      	bx	lr

0800927e <__lo0bits>:
 800927e:	6803      	ldr	r3, [r0, #0]
 8009280:	4602      	mov	r2, r0
 8009282:	f013 0007 	ands.w	r0, r3, #7
 8009286:	d00b      	beq.n	80092a0 <__lo0bits+0x22>
 8009288:	07d9      	lsls	r1, r3, #31
 800928a:	d421      	bmi.n	80092d0 <__lo0bits+0x52>
 800928c:	0798      	lsls	r0, r3, #30
 800928e:	bf49      	itett	mi
 8009290:	085b      	lsrmi	r3, r3, #1
 8009292:	089b      	lsrpl	r3, r3, #2
 8009294:	2001      	movmi	r0, #1
 8009296:	6013      	strmi	r3, [r2, #0]
 8009298:	bf5c      	itt	pl
 800929a:	6013      	strpl	r3, [r2, #0]
 800929c:	2002      	movpl	r0, #2
 800929e:	4770      	bx	lr
 80092a0:	b299      	uxth	r1, r3
 80092a2:	b909      	cbnz	r1, 80092a8 <__lo0bits+0x2a>
 80092a4:	0c1b      	lsrs	r3, r3, #16
 80092a6:	2010      	movs	r0, #16
 80092a8:	b2d9      	uxtb	r1, r3
 80092aa:	b909      	cbnz	r1, 80092b0 <__lo0bits+0x32>
 80092ac:	3008      	adds	r0, #8
 80092ae:	0a1b      	lsrs	r3, r3, #8
 80092b0:	0719      	lsls	r1, r3, #28
 80092b2:	bf04      	itt	eq
 80092b4:	091b      	lsreq	r3, r3, #4
 80092b6:	3004      	addeq	r0, #4
 80092b8:	0799      	lsls	r1, r3, #30
 80092ba:	bf04      	itt	eq
 80092bc:	089b      	lsreq	r3, r3, #2
 80092be:	3002      	addeq	r0, #2
 80092c0:	07d9      	lsls	r1, r3, #31
 80092c2:	d403      	bmi.n	80092cc <__lo0bits+0x4e>
 80092c4:	085b      	lsrs	r3, r3, #1
 80092c6:	f100 0001 	add.w	r0, r0, #1
 80092ca:	d003      	beq.n	80092d4 <__lo0bits+0x56>
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	4770      	bx	lr
 80092d0:	2000      	movs	r0, #0
 80092d2:	4770      	bx	lr
 80092d4:	2020      	movs	r0, #32
 80092d6:	4770      	bx	lr

080092d8 <__i2b>:
 80092d8:	b510      	push	{r4, lr}
 80092da:	460c      	mov	r4, r1
 80092dc:	2101      	movs	r1, #1
 80092de:	f7ff febd 	bl	800905c <_Balloc>
 80092e2:	4602      	mov	r2, r0
 80092e4:	b928      	cbnz	r0, 80092f2 <__i2b+0x1a>
 80092e6:	4b05      	ldr	r3, [pc, #20]	@ (80092fc <__i2b+0x24>)
 80092e8:	4805      	ldr	r0, [pc, #20]	@ (8009300 <__i2b+0x28>)
 80092ea:	f240 1145 	movw	r1, #325	@ 0x145
 80092ee:	f001 fdfb 	bl	800aee8 <__assert_func>
 80092f2:	2301      	movs	r3, #1
 80092f4:	6144      	str	r4, [r0, #20]
 80092f6:	6103      	str	r3, [r0, #16]
 80092f8:	bd10      	pop	{r4, pc}
 80092fa:	bf00      	nop
 80092fc:	0800c045 	.word	0x0800c045
 8009300:	0800c056 	.word	0x0800c056

08009304 <__multiply>:
 8009304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009308:	4614      	mov	r4, r2
 800930a:	690a      	ldr	r2, [r1, #16]
 800930c:	6923      	ldr	r3, [r4, #16]
 800930e:	429a      	cmp	r2, r3
 8009310:	bfa8      	it	ge
 8009312:	4623      	movge	r3, r4
 8009314:	460f      	mov	r7, r1
 8009316:	bfa4      	itt	ge
 8009318:	460c      	movge	r4, r1
 800931a:	461f      	movge	r7, r3
 800931c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009320:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009324:	68a3      	ldr	r3, [r4, #8]
 8009326:	6861      	ldr	r1, [r4, #4]
 8009328:	eb0a 0609 	add.w	r6, sl, r9
 800932c:	42b3      	cmp	r3, r6
 800932e:	b085      	sub	sp, #20
 8009330:	bfb8      	it	lt
 8009332:	3101      	addlt	r1, #1
 8009334:	f7ff fe92 	bl	800905c <_Balloc>
 8009338:	b930      	cbnz	r0, 8009348 <__multiply+0x44>
 800933a:	4602      	mov	r2, r0
 800933c:	4b44      	ldr	r3, [pc, #272]	@ (8009450 <__multiply+0x14c>)
 800933e:	4845      	ldr	r0, [pc, #276]	@ (8009454 <__multiply+0x150>)
 8009340:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009344:	f001 fdd0 	bl	800aee8 <__assert_func>
 8009348:	f100 0514 	add.w	r5, r0, #20
 800934c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009350:	462b      	mov	r3, r5
 8009352:	2200      	movs	r2, #0
 8009354:	4543      	cmp	r3, r8
 8009356:	d321      	bcc.n	800939c <__multiply+0x98>
 8009358:	f107 0114 	add.w	r1, r7, #20
 800935c:	f104 0214 	add.w	r2, r4, #20
 8009360:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009364:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009368:	9302      	str	r3, [sp, #8]
 800936a:	1b13      	subs	r3, r2, r4
 800936c:	3b15      	subs	r3, #21
 800936e:	f023 0303 	bic.w	r3, r3, #3
 8009372:	3304      	adds	r3, #4
 8009374:	f104 0715 	add.w	r7, r4, #21
 8009378:	42ba      	cmp	r2, r7
 800937a:	bf38      	it	cc
 800937c:	2304      	movcc	r3, #4
 800937e:	9301      	str	r3, [sp, #4]
 8009380:	9b02      	ldr	r3, [sp, #8]
 8009382:	9103      	str	r1, [sp, #12]
 8009384:	428b      	cmp	r3, r1
 8009386:	d80c      	bhi.n	80093a2 <__multiply+0x9e>
 8009388:	2e00      	cmp	r6, #0
 800938a:	dd03      	ble.n	8009394 <__multiply+0x90>
 800938c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009390:	2b00      	cmp	r3, #0
 8009392:	d05b      	beq.n	800944c <__multiply+0x148>
 8009394:	6106      	str	r6, [r0, #16]
 8009396:	b005      	add	sp, #20
 8009398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939c:	f843 2b04 	str.w	r2, [r3], #4
 80093a0:	e7d8      	b.n	8009354 <__multiply+0x50>
 80093a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80093a6:	f1ba 0f00 	cmp.w	sl, #0
 80093aa:	d024      	beq.n	80093f6 <__multiply+0xf2>
 80093ac:	f104 0e14 	add.w	lr, r4, #20
 80093b0:	46a9      	mov	r9, r5
 80093b2:	f04f 0c00 	mov.w	ip, #0
 80093b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093ba:	f8d9 3000 	ldr.w	r3, [r9]
 80093be:	fa1f fb87 	uxth.w	fp, r7
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80093c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80093cc:	f8d9 7000 	ldr.w	r7, [r9]
 80093d0:	4463      	add	r3, ip
 80093d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80093da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80093de:	b29b      	uxth	r3, r3
 80093e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093e4:	4572      	cmp	r2, lr
 80093e6:	f849 3b04 	str.w	r3, [r9], #4
 80093ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093ee:	d8e2      	bhi.n	80093b6 <__multiply+0xb2>
 80093f0:	9b01      	ldr	r3, [sp, #4]
 80093f2:	f845 c003 	str.w	ip, [r5, r3]
 80093f6:	9b03      	ldr	r3, [sp, #12]
 80093f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80093fc:	3104      	adds	r1, #4
 80093fe:	f1b9 0f00 	cmp.w	r9, #0
 8009402:	d021      	beq.n	8009448 <__multiply+0x144>
 8009404:	682b      	ldr	r3, [r5, #0]
 8009406:	f104 0c14 	add.w	ip, r4, #20
 800940a:	46ae      	mov	lr, r5
 800940c:	f04f 0a00 	mov.w	sl, #0
 8009410:	f8bc b000 	ldrh.w	fp, [ip]
 8009414:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009418:	fb09 770b 	mla	r7, r9, fp, r7
 800941c:	4457      	add	r7, sl
 800941e:	b29b      	uxth	r3, r3
 8009420:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009424:	f84e 3b04 	str.w	r3, [lr], #4
 8009428:	f85c 3b04 	ldr.w	r3, [ip], #4
 800942c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009430:	f8be 3000 	ldrh.w	r3, [lr]
 8009434:	fb09 330a 	mla	r3, r9, sl, r3
 8009438:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800943c:	4562      	cmp	r2, ip
 800943e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009442:	d8e5      	bhi.n	8009410 <__multiply+0x10c>
 8009444:	9f01      	ldr	r7, [sp, #4]
 8009446:	51eb      	str	r3, [r5, r7]
 8009448:	3504      	adds	r5, #4
 800944a:	e799      	b.n	8009380 <__multiply+0x7c>
 800944c:	3e01      	subs	r6, #1
 800944e:	e79b      	b.n	8009388 <__multiply+0x84>
 8009450:	0800c045 	.word	0x0800c045
 8009454:	0800c056 	.word	0x0800c056

08009458 <__pow5mult>:
 8009458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800945c:	4615      	mov	r5, r2
 800945e:	f012 0203 	ands.w	r2, r2, #3
 8009462:	4607      	mov	r7, r0
 8009464:	460e      	mov	r6, r1
 8009466:	d007      	beq.n	8009478 <__pow5mult+0x20>
 8009468:	4c25      	ldr	r4, [pc, #148]	@ (8009500 <__pow5mult+0xa8>)
 800946a:	3a01      	subs	r2, #1
 800946c:	2300      	movs	r3, #0
 800946e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009472:	f7ff fe55 	bl	8009120 <__multadd>
 8009476:	4606      	mov	r6, r0
 8009478:	10ad      	asrs	r5, r5, #2
 800947a:	d03d      	beq.n	80094f8 <__pow5mult+0xa0>
 800947c:	69fc      	ldr	r4, [r7, #28]
 800947e:	b97c      	cbnz	r4, 80094a0 <__pow5mult+0x48>
 8009480:	2010      	movs	r0, #16
 8009482:	f7fd fd9d 	bl	8006fc0 <malloc>
 8009486:	4602      	mov	r2, r0
 8009488:	61f8      	str	r0, [r7, #28]
 800948a:	b928      	cbnz	r0, 8009498 <__pow5mult+0x40>
 800948c:	4b1d      	ldr	r3, [pc, #116]	@ (8009504 <__pow5mult+0xac>)
 800948e:	481e      	ldr	r0, [pc, #120]	@ (8009508 <__pow5mult+0xb0>)
 8009490:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009494:	f001 fd28 	bl	800aee8 <__assert_func>
 8009498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800949c:	6004      	str	r4, [r0, #0]
 800949e:	60c4      	str	r4, [r0, #12]
 80094a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80094a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094a8:	b94c      	cbnz	r4, 80094be <__pow5mult+0x66>
 80094aa:	f240 2171 	movw	r1, #625	@ 0x271
 80094ae:	4638      	mov	r0, r7
 80094b0:	f7ff ff12 	bl	80092d8 <__i2b>
 80094b4:	2300      	movs	r3, #0
 80094b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80094ba:	4604      	mov	r4, r0
 80094bc:	6003      	str	r3, [r0, #0]
 80094be:	f04f 0900 	mov.w	r9, #0
 80094c2:	07eb      	lsls	r3, r5, #31
 80094c4:	d50a      	bpl.n	80094dc <__pow5mult+0x84>
 80094c6:	4631      	mov	r1, r6
 80094c8:	4622      	mov	r2, r4
 80094ca:	4638      	mov	r0, r7
 80094cc:	f7ff ff1a 	bl	8009304 <__multiply>
 80094d0:	4631      	mov	r1, r6
 80094d2:	4680      	mov	r8, r0
 80094d4:	4638      	mov	r0, r7
 80094d6:	f7ff fe01 	bl	80090dc <_Bfree>
 80094da:	4646      	mov	r6, r8
 80094dc:	106d      	asrs	r5, r5, #1
 80094de:	d00b      	beq.n	80094f8 <__pow5mult+0xa0>
 80094e0:	6820      	ldr	r0, [r4, #0]
 80094e2:	b938      	cbnz	r0, 80094f4 <__pow5mult+0x9c>
 80094e4:	4622      	mov	r2, r4
 80094e6:	4621      	mov	r1, r4
 80094e8:	4638      	mov	r0, r7
 80094ea:	f7ff ff0b 	bl	8009304 <__multiply>
 80094ee:	6020      	str	r0, [r4, #0]
 80094f0:	f8c0 9000 	str.w	r9, [r0]
 80094f4:	4604      	mov	r4, r0
 80094f6:	e7e4      	b.n	80094c2 <__pow5mult+0x6a>
 80094f8:	4630      	mov	r0, r6
 80094fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094fe:	bf00      	nop
 8009500:	0800c0b0 	.word	0x0800c0b0
 8009504:	0800bfd6 	.word	0x0800bfd6
 8009508:	0800c056 	.word	0x0800c056

0800950c <__lshift>:
 800950c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	460c      	mov	r4, r1
 8009512:	6849      	ldr	r1, [r1, #4]
 8009514:	6923      	ldr	r3, [r4, #16]
 8009516:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800951a:	68a3      	ldr	r3, [r4, #8]
 800951c:	4607      	mov	r7, r0
 800951e:	4691      	mov	r9, r2
 8009520:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009524:	f108 0601 	add.w	r6, r8, #1
 8009528:	42b3      	cmp	r3, r6
 800952a:	db0b      	blt.n	8009544 <__lshift+0x38>
 800952c:	4638      	mov	r0, r7
 800952e:	f7ff fd95 	bl	800905c <_Balloc>
 8009532:	4605      	mov	r5, r0
 8009534:	b948      	cbnz	r0, 800954a <__lshift+0x3e>
 8009536:	4602      	mov	r2, r0
 8009538:	4b28      	ldr	r3, [pc, #160]	@ (80095dc <__lshift+0xd0>)
 800953a:	4829      	ldr	r0, [pc, #164]	@ (80095e0 <__lshift+0xd4>)
 800953c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009540:	f001 fcd2 	bl	800aee8 <__assert_func>
 8009544:	3101      	adds	r1, #1
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	e7ee      	b.n	8009528 <__lshift+0x1c>
 800954a:	2300      	movs	r3, #0
 800954c:	f100 0114 	add.w	r1, r0, #20
 8009550:	f100 0210 	add.w	r2, r0, #16
 8009554:	4618      	mov	r0, r3
 8009556:	4553      	cmp	r3, sl
 8009558:	db33      	blt.n	80095c2 <__lshift+0xb6>
 800955a:	6920      	ldr	r0, [r4, #16]
 800955c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009560:	f104 0314 	add.w	r3, r4, #20
 8009564:	f019 091f 	ands.w	r9, r9, #31
 8009568:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800956c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009570:	d02b      	beq.n	80095ca <__lshift+0xbe>
 8009572:	f1c9 0e20 	rsb	lr, r9, #32
 8009576:	468a      	mov	sl, r1
 8009578:	2200      	movs	r2, #0
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	fa00 f009 	lsl.w	r0, r0, r9
 8009580:	4310      	orrs	r0, r2
 8009582:	f84a 0b04 	str.w	r0, [sl], #4
 8009586:	f853 2b04 	ldr.w	r2, [r3], #4
 800958a:	459c      	cmp	ip, r3
 800958c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009590:	d8f3      	bhi.n	800957a <__lshift+0x6e>
 8009592:	ebac 0304 	sub.w	r3, ip, r4
 8009596:	3b15      	subs	r3, #21
 8009598:	f023 0303 	bic.w	r3, r3, #3
 800959c:	3304      	adds	r3, #4
 800959e:	f104 0015 	add.w	r0, r4, #21
 80095a2:	4584      	cmp	ip, r0
 80095a4:	bf38      	it	cc
 80095a6:	2304      	movcc	r3, #4
 80095a8:	50ca      	str	r2, [r1, r3]
 80095aa:	b10a      	cbz	r2, 80095b0 <__lshift+0xa4>
 80095ac:	f108 0602 	add.w	r6, r8, #2
 80095b0:	3e01      	subs	r6, #1
 80095b2:	4638      	mov	r0, r7
 80095b4:	612e      	str	r6, [r5, #16]
 80095b6:	4621      	mov	r1, r4
 80095b8:	f7ff fd90 	bl	80090dc <_Bfree>
 80095bc:	4628      	mov	r0, r5
 80095be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80095c6:	3301      	adds	r3, #1
 80095c8:	e7c5      	b.n	8009556 <__lshift+0x4a>
 80095ca:	3904      	subs	r1, #4
 80095cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80095d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80095d4:	459c      	cmp	ip, r3
 80095d6:	d8f9      	bhi.n	80095cc <__lshift+0xc0>
 80095d8:	e7ea      	b.n	80095b0 <__lshift+0xa4>
 80095da:	bf00      	nop
 80095dc:	0800c045 	.word	0x0800c045
 80095e0:	0800c056 	.word	0x0800c056

080095e4 <__mcmp>:
 80095e4:	690a      	ldr	r2, [r1, #16]
 80095e6:	4603      	mov	r3, r0
 80095e8:	6900      	ldr	r0, [r0, #16]
 80095ea:	1a80      	subs	r0, r0, r2
 80095ec:	b530      	push	{r4, r5, lr}
 80095ee:	d10e      	bne.n	800960e <__mcmp+0x2a>
 80095f0:	3314      	adds	r3, #20
 80095f2:	3114      	adds	r1, #20
 80095f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009600:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009604:	4295      	cmp	r5, r2
 8009606:	d003      	beq.n	8009610 <__mcmp+0x2c>
 8009608:	d205      	bcs.n	8009616 <__mcmp+0x32>
 800960a:	f04f 30ff 	mov.w	r0, #4294967295
 800960e:	bd30      	pop	{r4, r5, pc}
 8009610:	42a3      	cmp	r3, r4
 8009612:	d3f3      	bcc.n	80095fc <__mcmp+0x18>
 8009614:	e7fb      	b.n	800960e <__mcmp+0x2a>
 8009616:	2001      	movs	r0, #1
 8009618:	e7f9      	b.n	800960e <__mcmp+0x2a>
	...

0800961c <__mdiff>:
 800961c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009620:	4689      	mov	r9, r1
 8009622:	4606      	mov	r6, r0
 8009624:	4611      	mov	r1, r2
 8009626:	4648      	mov	r0, r9
 8009628:	4614      	mov	r4, r2
 800962a:	f7ff ffdb 	bl	80095e4 <__mcmp>
 800962e:	1e05      	subs	r5, r0, #0
 8009630:	d112      	bne.n	8009658 <__mdiff+0x3c>
 8009632:	4629      	mov	r1, r5
 8009634:	4630      	mov	r0, r6
 8009636:	f7ff fd11 	bl	800905c <_Balloc>
 800963a:	4602      	mov	r2, r0
 800963c:	b928      	cbnz	r0, 800964a <__mdiff+0x2e>
 800963e:	4b3f      	ldr	r3, [pc, #252]	@ (800973c <__mdiff+0x120>)
 8009640:	f240 2137 	movw	r1, #567	@ 0x237
 8009644:	483e      	ldr	r0, [pc, #248]	@ (8009740 <__mdiff+0x124>)
 8009646:	f001 fc4f 	bl	800aee8 <__assert_func>
 800964a:	2301      	movs	r3, #1
 800964c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009650:	4610      	mov	r0, r2
 8009652:	b003      	add	sp, #12
 8009654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009658:	bfbc      	itt	lt
 800965a:	464b      	movlt	r3, r9
 800965c:	46a1      	movlt	r9, r4
 800965e:	4630      	mov	r0, r6
 8009660:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009664:	bfba      	itte	lt
 8009666:	461c      	movlt	r4, r3
 8009668:	2501      	movlt	r5, #1
 800966a:	2500      	movge	r5, #0
 800966c:	f7ff fcf6 	bl	800905c <_Balloc>
 8009670:	4602      	mov	r2, r0
 8009672:	b918      	cbnz	r0, 800967c <__mdiff+0x60>
 8009674:	4b31      	ldr	r3, [pc, #196]	@ (800973c <__mdiff+0x120>)
 8009676:	f240 2145 	movw	r1, #581	@ 0x245
 800967a:	e7e3      	b.n	8009644 <__mdiff+0x28>
 800967c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009680:	6926      	ldr	r6, [r4, #16]
 8009682:	60c5      	str	r5, [r0, #12]
 8009684:	f109 0310 	add.w	r3, r9, #16
 8009688:	f109 0514 	add.w	r5, r9, #20
 800968c:	f104 0e14 	add.w	lr, r4, #20
 8009690:	f100 0b14 	add.w	fp, r0, #20
 8009694:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009698:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	46d9      	mov	r9, fp
 80096a0:	f04f 0c00 	mov.w	ip, #0
 80096a4:	9b01      	ldr	r3, [sp, #4]
 80096a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80096aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80096ae:	9301      	str	r3, [sp, #4]
 80096b0:	fa1f f38a 	uxth.w	r3, sl
 80096b4:	4619      	mov	r1, r3
 80096b6:	b283      	uxth	r3, r0
 80096b8:	1acb      	subs	r3, r1, r3
 80096ba:	0c00      	lsrs	r0, r0, #16
 80096bc:	4463      	add	r3, ip
 80096be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80096c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096cc:	4576      	cmp	r6, lr
 80096ce:	f849 3b04 	str.w	r3, [r9], #4
 80096d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096d6:	d8e5      	bhi.n	80096a4 <__mdiff+0x88>
 80096d8:	1b33      	subs	r3, r6, r4
 80096da:	3b15      	subs	r3, #21
 80096dc:	f023 0303 	bic.w	r3, r3, #3
 80096e0:	3415      	adds	r4, #21
 80096e2:	3304      	adds	r3, #4
 80096e4:	42a6      	cmp	r6, r4
 80096e6:	bf38      	it	cc
 80096e8:	2304      	movcc	r3, #4
 80096ea:	441d      	add	r5, r3
 80096ec:	445b      	add	r3, fp
 80096ee:	461e      	mov	r6, r3
 80096f0:	462c      	mov	r4, r5
 80096f2:	4544      	cmp	r4, r8
 80096f4:	d30e      	bcc.n	8009714 <__mdiff+0xf8>
 80096f6:	f108 0103 	add.w	r1, r8, #3
 80096fa:	1b49      	subs	r1, r1, r5
 80096fc:	f021 0103 	bic.w	r1, r1, #3
 8009700:	3d03      	subs	r5, #3
 8009702:	45a8      	cmp	r8, r5
 8009704:	bf38      	it	cc
 8009706:	2100      	movcc	r1, #0
 8009708:	440b      	add	r3, r1
 800970a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800970e:	b191      	cbz	r1, 8009736 <__mdiff+0x11a>
 8009710:	6117      	str	r7, [r2, #16]
 8009712:	e79d      	b.n	8009650 <__mdiff+0x34>
 8009714:	f854 1b04 	ldr.w	r1, [r4], #4
 8009718:	46e6      	mov	lr, ip
 800971a:	0c08      	lsrs	r0, r1, #16
 800971c:	fa1c fc81 	uxtah	ip, ip, r1
 8009720:	4471      	add	r1, lr
 8009722:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009726:	b289      	uxth	r1, r1
 8009728:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800972c:	f846 1b04 	str.w	r1, [r6], #4
 8009730:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009734:	e7dd      	b.n	80096f2 <__mdiff+0xd6>
 8009736:	3f01      	subs	r7, #1
 8009738:	e7e7      	b.n	800970a <__mdiff+0xee>
 800973a:	bf00      	nop
 800973c:	0800c045 	.word	0x0800c045
 8009740:	0800c056 	.word	0x0800c056

08009744 <__ulp>:
 8009744:	b082      	sub	sp, #8
 8009746:	ed8d 0b00 	vstr	d0, [sp]
 800974a:	9a01      	ldr	r2, [sp, #4]
 800974c:	4b0f      	ldr	r3, [pc, #60]	@ (800978c <__ulp+0x48>)
 800974e:	4013      	ands	r3, r2
 8009750:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009754:	2b00      	cmp	r3, #0
 8009756:	dc08      	bgt.n	800976a <__ulp+0x26>
 8009758:	425b      	negs	r3, r3
 800975a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800975e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009762:	da04      	bge.n	800976e <__ulp+0x2a>
 8009764:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009768:	4113      	asrs	r3, r2
 800976a:	2200      	movs	r2, #0
 800976c:	e008      	b.n	8009780 <__ulp+0x3c>
 800976e:	f1a2 0314 	sub.w	r3, r2, #20
 8009772:	2b1e      	cmp	r3, #30
 8009774:	bfda      	itte	le
 8009776:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800977a:	40da      	lsrle	r2, r3
 800977c:	2201      	movgt	r2, #1
 800977e:	2300      	movs	r3, #0
 8009780:	4619      	mov	r1, r3
 8009782:	4610      	mov	r0, r2
 8009784:	ec41 0b10 	vmov	d0, r0, r1
 8009788:	b002      	add	sp, #8
 800978a:	4770      	bx	lr
 800978c:	7ff00000 	.word	0x7ff00000

08009790 <__b2d>:
 8009790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009794:	6906      	ldr	r6, [r0, #16]
 8009796:	f100 0814 	add.w	r8, r0, #20
 800979a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800979e:	1f37      	subs	r7, r6, #4
 80097a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80097a4:	4610      	mov	r0, r2
 80097a6:	f7ff fd4b 	bl	8009240 <__hi0bits>
 80097aa:	f1c0 0320 	rsb	r3, r0, #32
 80097ae:	280a      	cmp	r0, #10
 80097b0:	600b      	str	r3, [r1, #0]
 80097b2:	491b      	ldr	r1, [pc, #108]	@ (8009820 <__b2d+0x90>)
 80097b4:	dc15      	bgt.n	80097e2 <__b2d+0x52>
 80097b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80097ba:	fa22 f30c 	lsr.w	r3, r2, ip
 80097be:	45b8      	cmp	r8, r7
 80097c0:	ea43 0501 	orr.w	r5, r3, r1
 80097c4:	bf34      	ite	cc
 80097c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80097ca:	2300      	movcs	r3, #0
 80097cc:	3015      	adds	r0, #21
 80097ce:	fa02 f000 	lsl.w	r0, r2, r0
 80097d2:	fa23 f30c 	lsr.w	r3, r3, ip
 80097d6:	4303      	orrs	r3, r0
 80097d8:	461c      	mov	r4, r3
 80097da:	ec45 4b10 	vmov	d0, r4, r5
 80097de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e2:	45b8      	cmp	r8, r7
 80097e4:	bf3a      	itte	cc
 80097e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80097ea:	f1a6 0708 	subcc.w	r7, r6, #8
 80097ee:	2300      	movcs	r3, #0
 80097f0:	380b      	subs	r0, #11
 80097f2:	d012      	beq.n	800981a <__b2d+0x8a>
 80097f4:	f1c0 0120 	rsb	r1, r0, #32
 80097f8:	fa23 f401 	lsr.w	r4, r3, r1
 80097fc:	4082      	lsls	r2, r0
 80097fe:	4322      	orrs	r2, r4
 8009800:	4547      	cmp	r7, r8
 8009802:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009806:	bf8c      	ite	hi
 8009808:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800980c:	2200      	movls	r2, #0
 800980e:	4083      	lsls	r3, r0
 8009810:	40ca      	lsrs	r2, r1
 8009812:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009816:	4313      	orrs	r3, r2
 8009818:	e7de      	b.n	80097d8 <__b2d+0x48>
 800981a:	ea42 0501 	orr.w	r5, r2, r1
 800981e:	e7db      	b.n	80097d8 <__b2d+0x48>
 8009820:	3ff00000 	.word	0x3ff00000

08009824 <__d2b>:
 8009824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009828:	460f      	mov	r7, r1
 800982a:	2101      	movs	r1, #1
 800982c:	ec59 8b10 	vmov	r8, r9, d0
 8009830:	4616      	mov	r6, r2
 8009832:	f7ff fc13 	bl	800905c <_Balloc>
 8009836:	4604      	mov	r4, r0
 8009838:	b930      	cbnz	r0, 8009848 <__d2b+0x24>
 800983a:	4602      	mov	r2, r0
 800983c:	4b23      	ldr	r3, [pc, #140]	@ (80098cc <__d2b+0xa8>)
 800983e:	4824      	ldr	r0, [pc, #144]	@ (80098d0 <__d2b+0xac>)
 8009840:	f240 310f 	movw	r1, #783	@ 0x30f
 8009844:	f001 fb50 	bl	800aee8 <__assert_func>
 8009848:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800984c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009850:	b10d      	cbz	r5, 8009856 <__d2b+0x32>
 8009852:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	f1b8 0300 	subs.w	r3, r8, #0
 800985c:	d023      	beq.n	80098a6 <__d2b+0x82>
 800985e:	4668      	mov	r0, sp
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	f7ff fd0c 	bl	800927e <__lo0bits>
 8009866:	e9dd 1200 	ldrd	r1, r2, [sp]
 800986a:	b1d0      	cbz	r0, 80098a2 <__d2b+0x7e>
 800986c:	f1c0 0320 	rsb	r3, r0, #32
 8009870:	fa02 f303 	lsl.w	r3, r2, r3
 8009874:	430b      	orrs	r3, r1
 8009876:	40c2      	lsrs	r2, r0
 8009878:	6163      	str	r3, [r4, #20]
 800987a:	9201      	str	r2, [sp, #4]
 800987c:	9b01      	ldr	r3, [sp, #4]
 800987e:	61a3      	str	r3, [r4, #24]
 8009880:	2b00      	cmp	r3, #0
 8009882:	bf0c      	ite	eq
 8009884:	2201      	moveq	r2, #1
 8009886:	2202      	movne	r2, #2
 8009888:	6122      	str	r2, [r4, #16]
 800988a:	b1a5      	cbz	r5, 80098b6 <__d2b+0x92>
 800988c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009890:	4405      	add	r5, r0
 8009892:	603d      	str	r5, [r7, #0]
 8009894:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009898:	6030      	str	r0, [r6, #0]
 800989a:	4620      	mov	r0, r4
 800989c:	b003      	add	sp, #12
 800989e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098a2:	6161      	str	r1, [r4, #20]
 80098a4:	e7ea      	b.n	800987c <__d2b+0x58>
 80098a6:	a801      	add	r0, sp, #4
 80098a8:	f7ff fce9 	bl	800927e <__lo0bits>
 80098ac:	9b01      	ldr	r3, [sp, #4]
 80098ae:	6163      	str	r3, [r4, #20]
 80098b0:	3020      	adds	r0, #32
 80098b2:	2201      	movs	r2, #1
 80098b4:	e7e8      	b.n	8009888 <__d2b+0x64>
 80098b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80098be:	6038      	str	r0, [r7, #0]
 80098c0:	6918      	ldr	r0, [r3, #16]
 80098c2:	f7ff fcbd 	bl	8009240 <__hi0bits>
 80098c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098ca:	e7e5      	b.n	8009898 <__d2b+0x74>
 80098cc:	0800c045 	.word	0x0800c045
 80098d0:	0800c056 	.word	0x0800c056

080098d4 <__ratio>:
 80098d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d8:	b085      	sub	sp, #20
 80098da:	e9cd 1000 	strd	r1, r0, [sp]
 80098de:	a902      	add	r1, sp, #8
 80098e0:	f7ff ff56 	bl	8009790 <__b2d>
 80098e4:	9800      	ldr	r0, [sp, #0]
 80098e6:	a903      	add	r1, sp, #12
 80098e8:	ec55 4b10 	vmov	r4, r5, d0
 80098ec:	f7ff ff50 	bl	8009790 <__b2d>
 80098f0:	9b01      	ldr	r3, [sp, #4]
 80098f2:	6919      	ldr	r1, [r3, #16]
 80098f4:	9b00      	ldr	r3, [sp, #0]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	1ac9      	subs	r1, r1, r3
 80098fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80098fe:	1a9b      	subs	r3, r3, r2
 8009900:	ec5b ab10 	vmov	sl, fp, d0
 8009904:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009908:	2b00      	cmp	r3, #0
 800990a:	bfce      	itee	gt
 800990c:	462a      	movgt	r2, r5
 800990e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009912:	465a      	movle	r2, fp
 8009914:	462f      	mov	r7, r5
 8009916:	46d9      	mov	r9, fp
 8009918:	bfcc      	ite	gt
 800991a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800991e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009922:	464b      	mov	r3, r9
 8009924:	4652      	mov	r2, sl
 8009926:	4620      	mov	r0, r4
 8009928:	4639      	mov	r1, r7
 800992a:	f7f6 ffaf 	bl	800088c <__aeabi_ddiv>
 800992e:	ec41 0b10 	vmov	d0, r0, r1
 8009932:	b005      	add	sp, #20
 8009934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009938 <__copybits>:
 8009938:	3901      	subs	r1, #1
 800993a:	b570      	push	{r4, r5, r6, lr}
 800993c:	1149      	asrs	r1, r1, #5
 800993e:	6914      	ldr	r4, [r2, #16]
 8009940:	3101      	adds	r1, #1
 8009942:	f102 0314 	add.w	r3, r2, #20
 8009946:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800994a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800994e:	1f05      	subs	r5, r0, #4
 8009950:	42a3      	cmp	r3, r4
 8009952:	d30c      	bcc.n	800996e <__copybits+0x36>
 8009954:	1aa3      	subs	r3, r4, r2
 8009956:	3b11      	subs	r3, #17
 8009958:	f023 0303 	bic.w	r3, r3, #3
 800995c:	3211      	adds	r2, #17
 800995e:	42a2      	cmp	r2, r4
 8009960:	bf88      	it	hi
 8009962:	2300      	movhi	r3, #0
 8009964:	4418      	add	r0, r3
 8009966:	2300      	movs	r3, #0
 8009968:	4288      	cmp	r0, r1
 800996a:	d305      	bcc.n	8009978 <__copybits+0x40>
 800996c:	bd70      	pop	{r4, r5, r6, pc}
 800996e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009972:	f845 6f04 	str.w	r6, [r5, #4]!
 8009976:	e7eb      	b.n	8009950 <__copybits+0x18>
 8009978:	f840 3b04 	str.w	r3, [r0], #4
 800997c:	e7f4      	b.n	8009968 <__copybits+0x30>

0800997e <__any_on>:
 800997e:	f100 0214 	add.w	r2, r0, #20
 8009982:	6900      	ldr	r0, [r0, #16]
 8009984:	114b      	asrs	r3, r1, #5
 8009986:	4298      	cmp	r0, r3
 8009988:	b510      	push	{r4, lr}
 800998a:	db11      	blt.n	80099b0 <__any_on+0x32>
 800998c:	dd0a      	ble.n	80099a4 <__any_on+0x26>
 800998e:	f011 011f 	ands.w	r1, r1, #31
 8009992:	d007      	beq.n	80099a4 <__any_on+0x26>
 8009994:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009998:	fa24 f001 	lsr.w	r0, r4, r1
 800999c:	fa00 f101 	lsl.w	r1, r0, r1
 80099a0:	428c      	cmp	r4, r1
 80099a2:	d10b      	bne.n	80099bc <__any_on+0x3e>
 80099a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d803      	bhi.n	80099b4 <__any_on+0x36>
 80099ac:	2000      	movs	r0, #0
 80099ae:	bd10      	pop	{r4, pc}
 80099b0:	4603      	mov	r3, r0
 80099b2:	e7f7      	b.n	80099a4 <__any_on+0x26>
 80099b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099b8:	2900      	cmp	r1, #0
 80099ba:	d0f5      	beq.n	80099a8 <__any_on+0x2a>
 80099bc:	2001      	movs	r0, #1
 80099be:	e7f6      	b.n	80099ae <__any_on+0x30>

080099c0 <sulp>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	4604      	mov	r4, r0
 80099c4:	460d      	mov	r5, r1
 80099c6:	ec45 4b10 	vmov	d0, r4, r5
 80099ca:	4616      	mov	r6, r2
 80099cc:	f7ff feba 	bl	8009744 <__ulp>
 80099d0:	ec51 0b10 	vmov	r0, r1, d0
 80099d4:	b17e      	cbz	r6, 80099f6 <sulp+0x36>
 80099d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80099da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099de:	2b00      	cmp	r3, #0
 80099e0:	dd09      	ble.n	80099f6 <sulp+0x36>
 80099e2:	051b      	lsls	r3, r3, #20
 80099e4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80099e8:	2400      	movs	r4, #0
 80099ea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80099ee:	4622      	mov	r2, r4
 80099f0:	462b      	mov	r3, r5
 80099f2:	f7f6 fe21 	bl	8000638 <__aeabi_dmul>
 80099f6:	ec41 0b10 	vmov	d0, r0, r1
 80099fa:	bd70      	pop	{r4, r5, r6, pc}
 80099fc:	0000      	movs	r0, r0
	...

08009a00 <_strtod_l>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	b09f      	sub	sp, #124	@ 0x7c
 8009a06:	460c      	mov	r4, r1
 8009a08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009a0e:	9005      	str	r0, [sp, #20]
 8009a10:	f04f 0a00 	mov.w	sl, #0
 8009a14:	f04f 0b00 	mov.w	fp, #0
 8009a18:	460a      	mov	r2, r1
 8009a1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a1c:	7811      	ldrb	r1, [r2, #0]
 8009a1e:	292b      	cmp	r1, #43	@ 0x2b
 8009a20:	d04a      	beq.n	8009ab8 <_strtod_l+0xb8>
 8009a22:	d838      	bhi.n	8009a96 <_strtod_l+0x96>
 8009a24:	290d      	cmp	r1, #13
 8009a26:	d832      	bhi.n	8009a8e <_strtod_l+0x8e>
 8009a28:	2908      	cmp	r1, #8
 8009a2a:	d832      	bhi.n	8009a92 <_strtod_l+0x92>
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	d03b      	beq.n	8009aa8 <_strtod_l+0xa8>
 8009a30:	2200      	movs	r2, #0
 8009a32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009a34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009a36:	782a      	ldrb	r2, [r5, #0]
 8009a38:	2a30      	cmp	r2, #48	@ 0x30
 8009a3a:	f040 80b3 	bne.w	8009ba4 <_strtod_l+0x1a4>
 8009a3e:	786a      	ldrb	r2, [r5, #1]
 8009a40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a44:	2a58      	cmp	r2, #88	@ 0x58
 8009a46:	d16e      	bne.n	8009b26 <_strtod_l+0x126>
 8009a48:	9302      	str	r3, [sp, #8]
 8009a4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	4a8e      	ldr	r2, [pc, #568]	@ (8009c8c <_strtod_l+0x28c>)
 8009a54:	9805      	ldr	r0, [sp, #20]
 8009a56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009a58:	a919      	add	r1, sp, #100	@ 0x64
 8009a5a:	f001 fadf 	bl	800b01c <__gethex>
 8009a5e:	f010 060f 	ands.w	r6, r0, #15
 8009a62:	4604      	mov	r4, r0
 8009a64:	d005      	beq.n	8009a72 <_strtod_l+0x72>
 8009a66:	2e06      	cmp	r6, #6
 8009a68:	d128      	bne.n	8009abc <_strtod_l+0xbc>
 8009a6a:	3501      	adds	r5, #1
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009a70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f040 858e 	bne.w	800a596 <_strtod_l+0xb96>
 8009a7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a7c:	b1cb      	cbz	r3, 8009ab2 <_strtod_l+0xb2>
 8009a7e:	4652      	mov	r2, sl
 8009a80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009a84:	ec43 2b10 	vmov	d0, r2, r3
 8009a88:	b01f      	add	sp, #124	@ 0x7c
 8009a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8e:	2920      	cmp	r1, #32
 8009a90:	d1ce      	bne.n	8009a30 <_strtod_l+0x30>
 8009a92:	3201      	adds	r2, #1
 8009a94:	e7c1      	b.n	8009a1a <_strtod_l+0x1a>
 8009a96:	292d      	cmp	r1, #45	@ 0x2d
 8009a98:	d1ca      	bne.n	8009a30 <_strtod_l+0x30>
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009a9e:	1c51      	adds	r1, r2, #1
 8009aa0:	9119      	str	r1, [sp, #100]	@ 0x64
 8009aa2:	7852      	ldrb	r2, [r2, #1]
 8009aa4:	2a00      	cmp	r2, #0
 8009aa6:	d1c5      	bne.n	8009a34 <_strtod_l+0x34>
 8009aa8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009aaa:	9419      	str	r4, [sp, #100]	@ 0x64
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f040 8570 	bne.w	800a592 <_strtod_l+0xb92>
 8009ab2:	4652      	mov	r2, sl
 8009ab4:	465b      	mov	r3, fp
 8009ab6:	e7e5      	b.n	8009a84 <_strtod_l+0x84>
 8009ab8:	2100      	movs	r1, #0
 8009aba:	e7ef      	b.n	8009a9c <_strtod_l+0x9c>
 8009abc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009abe:	b13a      	cbz	r2, 8009ad0 <_strtod_l+0xd0>
 8009ac0:	2135      	movs	r1, #53	@ 0x35
 8009ac2:	a81c      	add	r0, sp, #112	@ 0x70
 8009ac4:	f7ff ff38 	bl	8009938 <__copybits>
 8009ac8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009aca:	9805      	ldr	r0, [sp, #20]
 8009acc:	f7ff fb06 	bl	80090dc <_Bfree>
 8009ad0:	3e01      	subs	r6, #1
 8009ad2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009ad4:	2e04      	cmp	r6, #4
 8009ad6:	d806      	bhi.n	8009ae6 <_strtod_l+0xe6>
 8009ad8:	e8df f006 	tbb	[pc, r6]
 8009adc:	201d0314 	.word	0x201d0314
 8009ae0:	14          	.byte	0x14
 8009ae1:	00          	.byte	0x00
 8009ae2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009ae6:	05e1      	lsls	r1, r4, #23
 8009ae8:	bf48      	it	mi
 8009aea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009aee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009af2:	0d1b      	lsrs	r3, r3, #20
 8009af4:	051b      	lsls	r3, r3, #20
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1bb      	bne.n	8009a72 <_strtod_l+0x72>
 8009afa:	f7fe fbe5 	bl	80082c8 <__errno>
 8009afe:	2322      	movs	r3, #34	@ 0x22
 8009b00:	6003      	str	r3, [r0, #0]
 8009b02:	e7b6      	b.n	8009a72 <_strtod_l+0x72>
 8009b04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009b08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009b0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009b10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009b14:	e7e7      	b.n	8009ae6 <_strtod_l+0xe6>
 8009b16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009c94 <_strtod_l+0x294>
 8009b1a:	e7e4      	b.n	8009ae6 <_strtod_l+0xe6>
 8009b1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009b20:	f04f 3aff 	mov.w	sl, #4294967295
 8009b24:	e7df      	b.n	8009ae6 <_strtod_l+0xe6>
 8009b26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b28:	1c5a      	adds	r2, r3, #1
 8009b2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b2c:	785b      	ldrb	r3, [r3, #1]
 8009b2e:	2b30      	cmp	r3, #48	@ 0x30
 8009b30:	d0f9      	beq.n	8009b26 <_strtod_l+0x126>
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d09d      	beq.n	8009a72 <_strtod_l+0x72>
 8009b36:	2301      	movs	r3, #1
 8009b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b3e:	2300      	movs	r3, #0
 8009b40:	9308      	str	r3, [sp, #32]
 8009b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b44:	461f      	mov	r7, r3
 8009b46:	220a      	movs	r2, #10
 8009b48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009b4a:	7805      	ldrb	r5, [r0, #0]
 8009b4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009b50:	b2d9      	uxtb	r1, r3
 8009b52:	2909      	cmp	r1, #9
 8009b54:	d928      	bls.n	8009ba8 <_strtod_l+0x1a8>
 8009b56:	494e      	ldr	r1, [pc, #312]	@ (8009c90 <_strtod_l+0x290>)
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f001 f979 	bl	800ae50 <strncmp>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d032      	beq.n	8009bc8 <_strtod_l+0x1c8>
 8009b62:	2000      	movs	r0, #0
 8009b64:	462a      	mov	r2, r5
 8009b66:	4681      	mov	r9, r0
 8009b68:	463d      	mov	r5, r7
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2a65      	cmp	r2, #101	@ 0x65
 8009b6e:	d001      	beq.n	8009b74 <_strtod_l+0x174>
 8009b70:	2a45      	cmp	r2, #69	@ 0x45
 8009b72:	d114      	bne.n	8009b9e <_strtod_l+0x19e>
 8009b74:	b91d      	cbnz	r5, 8009b7e <_strtod_l+0x17e>
 8009b76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b78:	4302      	orrs	r2, r0
 8009b7a:	d095      	beq.n	8009aa8 <_strtod_l+0xa8>
 8009b7c:	2500      	movs	r5, #0
 8009b7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009b80:	1c62      	adds	r2, r4, #1
 8009b82:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b84:	7862      	ldrb	r2, [r4, #1]
 8009b86:	2a2b      	cmp	r2, #43	@ 0x2b
 8009b88:	d077      	beq.n	8009c7a <_strtod_l+0x27a>
 8009b8a:	2a2d      	cmp	r2, #45	@ 0x2d
 8009b8c:	d07b      	beq.n	8009c86 <_strtod_l+0x286>
 8009b8e:	f04f 0c00 	mov.w	ip, #0
 8009b92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009b96:	2909      	cmp	r1, #9
 8009b98:	f240 8082 	bls.w	8009ca0 <_strtod_l+0x2a0>
 8009b9c:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b9e:	f04f 0800 	mov.w	r8, #0
 8009ba2:	e0a2      	b.n	8009cea <_strtod_l+0x2ea>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	e7c7      	b.n	8009b38 <_strtod_l+0x138>
 8009ba8:	2f08      	cmp	r7, #8
 8009baa:	bfd5      	itete	le
 8009bac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009bae:	9908      	ldrgt	r1, [sp, #32]
 8009bb0:	fb02 3301 	mlale	r3, r2, r1, r3
 8009bb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009bb8:	f100 0001 	add.w	r0, r0, #1
 8009bbc:	bfd4      	ite	le
 8009bbe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009bc0:	9308      	strgt	r3, [sp, #32]
 8009bc2:	3701      	adds	r7, #1
 8009bc4:	9019      	str	r0, [sp, #100]	@ 0x64
 8009bc6:	e7bf      	b.n	8009b48 <_strtod_l+0x148>
 8009bc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bce:	785a      	ldrb	r2, [r3, #1]
 8009bd0:	b37f      	cbz	r7, 8009c32 <_strtod_l+0x232>
 8009bd2:	4681      	mov	r9, r0
 8009bd4:	463d      	mov	r5, r7
 8009bd6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009bda:	2b09      	cmp	r3, #9
 8009bdc:	d912      	bls.n	8009c04 <_strtod_l+0x204>
 8009bde:	2301      	movs	r3, #1
 8009be0:	e7c4      	b.n	8009b6c <_strtod_l+0x16c>
 8009be2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009be8:	785a      	ldrb	r2, [r3, #1]
 8009bea:	3001      	adds	r0, #1
 8009bec:	2a30      	cmp	r2, #48	@ 0x30
 8009bee:	d0f8      	beq.n	8009be2 <_strtod_l+0x1e2>
 8009bf0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009bf4:	2b08      	cmp	r3, #8
 8009bf6:	f200 84d3 	bhi.w	800a5a0 <_strtod_l+0xba0>
 8009bfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bfc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009bfe:	4681      	mov	r9, r0
 8009c00:	2000      	movs	r0, #0
 8009c02:	4605      	mov	r5, r0
 8009c04:	3a30      	subs	r2, #48	@ 0x30
 8009c06:	f100 0301 	add.w	r3, r0, #1
 8009c0a:	d02a      	beq.n	8009c62 <_strtod_l+0x262>
 8009c0c:	4499      	add	r9, r3
 8009c0e:	eb00 0c05 	add.w	ip, r0, r5
 8009c12:	462b      	mov	r3, r5
 8009c14:	210a      	movs	r1, #10
 8009c16:	4563      	cmp	r3, ip
 8009c18:	d10d      	bne.n	8009c36 <_strtod_l+0x236>
 8009c1a:	1c69      	adds	r1, r5, #1
 8009c1c:	4401      	add	r1, r0
 8009c1e:	4428      	add	r0, r5
 8009c20:	2808      	cmp	r0, #8
 8009c22:	dc16      	bgt.n	8009c52 <_strtod_l+0x252>
 8009c24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c26:	230a      	movs	r3, #10
 8009c28:	fb03 2300 	mla	r3, r3, r0, r2
 8009c2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c2e:	2300      	movs	r3, #0
 8009c30:	e018      	b.n	8009c64 <_strtod_l+0x264>
 8009c32:	4638      	mov	r0, r7
 8009c34:	e7da      	b.n	8009bec <_strtod_l+0x1ec>
 8009c36:	2b08      	cmp	r3, #8
 8009c38:	f103 0301 	add.w	r3, r3, #1
 8009c3c:	dc03      	bgt.n	8009c46 <_strtod_l+0x246>
 8009c3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009c40:	434e      	muls	r6, r1
 8009c42:	960a      	str	r6, [sp, #40]	@ 0x28
 8009c44:	e7e7      	b.n	8009c16 <_strtod_l+0x216>
 8009c46:	2b10      	cmp	r3, #16
 8009c48:	bfde      	ittt	le
 8009c4a:	9e08      	ldrle	r6, [sp, #32]
 8009c4c:	434e      	mulle	r6, r1
 8009c4e:	9608      	strle	r6, [sp, #32]
 8009c50:	e7e1      	b.n	8009c16 <_strtod_l+0x216>
 8009c52:	280f      	cmp	r0, #15
 8009c54:	dceb      	bgt.n	8009c2e <_strtod_l+0x22e>
 8009c56:	9808      	ldr	r0, [sp, #32]
 8009c58:	230a      	movs	r3, #10
 8009c5a:	fb03 2300 	mla	r3, r3, r0, r2
 8009c5e:	9308      	str	r3, [sp, #32]
 8009c60:	e7e5      	b.n	8009c2e <_strtod_l+0x22e>
 8009c62:	4629      	mov	r1, r5
 8009c64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c66:	1c50      	adds	r0, r2, #1
 8009c68:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c6a:	7852      	ldrb	r2, [r2, #1]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	460d      	mov	r5, r1
 8009c70:	e7b1      	b.n	8009bd6 <_strtod_l+0x1d6>
 8009c72:	f04f 0900 	mov.w	r9, #0
 8009c76:	2301      	movs	r3, #1
 8009c78:	e77d      	b.n	8009b76 <_strtod_l+0x176>
 8009c7a:	f04f 0c00 	mov.w	ip, #0
 8009c7e:	1ca2      	adds	r2, r4, #2
 8009c80:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c82:	78a2      	ldrb	r2, [r4, #2]
 8009c84:	e785      	b.n	8009b92 <_strtod_l+0x192>
 8009c86:	f04f 0c01 	mov.w	ip, #1
 8009c8a:	e7f8      	b.n	8009c7e <_strtod_l+0x27e>
 8009c8c:	0800c1c8 	.word	0x0800c1c8
 8009c90:	0800c1b0 	.word	0x0800c1b0
 8009c94:	7ff00000 	.word	0x7ff00000
 8009c98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c9a:	1c51      	adds	r1, r2, #1
 8009c9c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c9e:	7852      	ldrb	r2, [r2, #1]
 8009ca0:	2a30      	cmp	r2, #48	@ 0x30
 8009ca2:	d0f9      	beq.n	8009c98 <_strtod_l+0x298>
 8009ca4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009ca8:	2908      	cmp	r1, #8
 8009caa:	f63f af78 	bhi.w	8009b9e <_strtod_l+0x19e>
 8009cae:	3a30      	subs	r2, #48	@ 0x30
 8009cb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009cb6:	f04f 080a 	mov.w	r8, #10
 8009cba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cbc:	1c56      	adds	r6, r2, #1
 8009cbe:	9619      	str	r6, [sp, #100]	@ 0x64
 8009cc0:	7852      	ldrb	r2, [r2, #1]
 8009cc2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009cc6:	f1be 0f09 	cmp.w	lr, #9
 8009cca:	d939      	bls.n	8009d40 <_strtod_l+0x340>
 8009ccc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009cce:	1a76      	subs	r6, r6, r1
 8009cd0:	2e08      	cmp	r6, #8
 8009cd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009cd6:	dc03      	bgt.n	8009ce0 <_strtod_l+0x2e0>
 8009cd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009cda:	4588      	cmp	r8, r1
 8009cdc:	bfa8      	it	ge
 8009cde:	4688      	movge	r8, r1
 8009ce0:	f1bc 0f00 	cmp.w	ip, #0
 8009ce4:	d001      	beq.n	8009cea <_strtod_l+0x2ea>
 8009ce6:	f1c8 0800 	rsb	r8, r8, #0
 8009cea:	2d00      	cmp	r5, #0
 8009cec:	d14e      	bne.n	8009d8c <_strtod_l+0x38c>
 8009cee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009cf0:	4308      	orrs	r0, r1
 8009cf2:	f47f aebe 	bne.w	8009a72 <_strtod_l+0x72>
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f47f aed6 	bne.w	8009aa8 <_strtod_l+0xa8>
 8009cfc:	2a69      	cmp	r2, #105	@ 0x69
 8009cfe:	d028      	beq.n	8009d52 <_strtod_l+0x352>
 8009d00:	dc25      	bgt.n	8009d4e <_strtod_l+0x34e>
 8009d02:	2a49      	cmp	r2, #73	@ 0x49
 8009d04:	d025      	beq.n	8009d52 <_strtod_l+0x352>
 8009d06:	2a4e      	cmp	r2, #78	@ 0x4e
 8009d08:	f47f aece 	bne.w	8009aa8 <_strtod_l+0xa8>
 8009d0c:	499b      	ldr	r1, [pc, #620]	@ (8009f7c <_strtod_l+0x57c>)
 8009d0e:	a819      	add	r0, sp, #100	@ 0x64
 8009d10:	f001 fba6 	bl	800b460 <__match>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	f43f aec7 	beq.w	8009aa8 <_strtod_l+0xa8>
 8009d1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	2b28      	cmp	r3, #40	@ 0x28
 8009d20:	d12e      	bne.n	8009d80 <_strtod_l+0x380>
 8009d22:	4997      	ldr	r1, [pc, #604]	@ (8009f80 <_strtod_l+0x580>)
 8009d24:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d26:	a819      	add	r0, sp, #100	@ 0x64
 8009d28:	f001 fbae 	bl	800b488 <__hexnan>
 8009d2c:	2805      	cmp	r0, #5
 8009d2e:	d127      	bne.n	8009d80 <_strtod_l+0x380>
 8009d30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d32:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009d36:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009d3a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009d3e:	e698      	b.n	8009a72 <_strtod_l+0x72>
 8009d40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d42:	fb08 2101 	mla	r1, r8, r1, r2
 8009d46:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009d4a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d4c:	e7b5      	b.n	8009cba <_strtod_l+0x2ba>
 8009d4e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009d50:	e7da      	b.n	8009d08 <_strtod_l+0x308>
 8009d52:	498c      	ldr	r1, [pc, #560]	@ (8009f84 <_strtod_l+0x584>)
 8009d54:	a819      	add	r0, sp, #100	@ 0x64
 8009d56:	f001 fb83 	bl	800b460 <__match>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	f43f aea4 	beq.w	8009aa8 <_strtod_l+0xa8>
 8009d60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d62:	4989      	ldr	r1, [pc, #548]	@ (8009f88 <_strtod_l+0x588>)
 8009d64:	3b01      	subs	r3, #1
 8009d66:	a819      	add	r0, sp, #100	@ 0x64
 8009d68:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d6a:	f001 fb79 	bl	800b460 <__match>
 8009d6e:	b910      	cbnz	r0, 8009d76 <_strtod_l+0x376>
 8009d70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d72:	3301      	adds	r3, #1
 8009d74:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d76:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009f98 <_strtod_l+0x598>
 8009d7a:	f04f 0a00 	mov.w	sl, #0
 8009d7e:	e678      	b.n	8009a72 <_strtod_l+0x72>
 8009d80:	4882      	ldr	r0, [pc, #520]	@ (8009f8c <_strtod_l+0x58c>)
 8009d82:	f001 f8a9 	bl	800aed8 <nan>
 8009d86:	ec5b ab10 	vmov	sl, fp, d0
 8009d8a:	e672      	b.n	8009a72 <_strtod_l+0x72>
 8009d8c:	eba8 0309 	sub.w	r3, r8, r9
 8009d90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d94:	2f00      	cmp	r7, #0
 8009d96:	bf08      	it	eq
 8009d98:	462f      	moveq	r7, r5
 8009d9a:	2d10      	cmp	r5, #16
 8009d9c:	462c      	mov	r4, r5
 8009d9e:	bfa8      	it	ge
 8009da0:	2410      	movge	r4, #16
 8009da2:	f7f6 fbcf 	bl	8000544 <__aeabi_ui2d>
 8009da6:	2d09      	cmp	r5, #9
 8009da8:	4682      	mov	sl, r0
 8009daa:	468b      	mov	fp, r1
 8009dac:	dc13      	bgt.n	8009dd6 <_strtod_l+0x3d6>
 8009dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f43f ae5e 	beq.w	8009a72 <_strtod_l+0x72>
 8009db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db8:	dd78      	ble.n	8009eac <_strtod_l+0x4ac>
 8009dba:	2b16      	cmp	r3, #22
 8009dbc:	dc5f      	bgt.n	8009e7e <_strtod_l+0x47e>
 8009dbe:	4974      	ldr	r1, [pc, #464]	@ (8009f90 <_strtod_l+0x590>)
 8009dc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc8:	4652      	mov	r2, sl
 8009dca:	465b      	mov	r3, fp
 8009dcc:	f7f6 fc34 	bl	8000638 <__aeabi_dmul>
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	468b      	mov	fp, r1
 8009dd4:	e64d      	b.n	8009a72 <_strtod_l+0x72>
 8009dd6:	4b6e      	ldr	r3, [pc, #440]	@ (8009f90 <_strtod_l+0x590>)
 8009dd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ddc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009de0:	f7f6 fc2a 	bl	8000638 <__aeabi_dmul>
 8009de4:	4682      	mov	sl, r0
 8009de6:	9808      	ldr	r0, [sp, #32]
 8009de8:	468b      	mov	fp, r1
 8009dea:	f7f6 fbab 	bl	8000544 <__aeabi_ui2d>
 8009dee:	4602      	mov	r2, r0
 8009df0:	460b      	mov	r3, r1
 8009df2:	4650      	mov	r0, sl
 8009df4:	4659      	mov	r1, fp
 8009df6:	f7f6 fa69 	bl	80002cc <__adddf3>
 8009dfa:	2d0f      	cmp	r5, #15
 8009dfc:	4682      	mov	sl, r0
 8009dfe:	468b      	mov	fp, r1
 8009e00:	ddd5      	ble.n	8009dae <_strtod_l+0x3ae>
 8009e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e04:	1b2c      	subs	r4, r5, r4
 8009e06:	441c      	add	r4, r3
 8009e08:	2c00      	cmp	r4, #0
 8009e0a:	f340 8096 	ble.w	8009f3a <_strtod_l+0x53a>
 8009e0e:	f014 030f 	ands.w	r3, r4, #15
 8009e12:	d00a      	beq.n	8009e2a <_strtod_l+0x42a>
 8009e14:	495e      	ldr	r1, [pc, #376]	@ (8009f90 <_strtod_l+0x590>)
 8009e16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e1a:	4652      	mov	r2, sl
 8009e1c:	465b      	mov	r3, fp
 8009e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e22:	f7f6 fc09 	bl	8000638 <__aeabi_dmul>
 8009e26:	4682      	mov	sl, r0
 8009e28:	468b      	mov	fp, r1
 8009e2a:	f034 040f 	bics.w	r4, r4, #15
 8009e2e:	d073      	beq.n	8009f18 <_strtod_l+0x518>
 8009e30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009e34:	dd48      	ble.n	8009ec8 <_strtod_l+0x4c8>
 8009e36:	2400      	movs	r4, #0
 8009e38:	46a0      	mov	r8, r4
 8009e3a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e3c:	46a1      	mov	r9, r4
 8009e3e:	9a05      	ldr	r2, [sp, #20]
 8009e40:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009f98 <_strtod_l+0x598>
 8009e44:	2322      	movs	r3, #34	@ 0x22
 8009e46:	6013      	str	r3, [r2, #0]
 8009e48:	f04f 0a00 	mov.w	sl, #0
 8009e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f43f ae0f 	beq.w	8009a72 <_strtod_l+0x72>
 8009e54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e56:	9805      	ldr	r0, [sp, #20]
 8009e58:	f7ff f940 	bl	80090dc <_Bfree>
 8009e5c:	9805      	ldr	r0, [sp, #20]
 8009e5e:	4649      	mov	r1, r9
 8009e60:	f7ff f93c 	bl	80090dc <_Bfree>
 8009e64:	9805      	ldr	r0, [sp, #20]
 8009e66:	4641      	mov	r1, r8
 8009e68:	f7ff f938 	bl	80090dc <_Bfree>
 8009e6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e6e:	9805      	ldr	r0, [sp, #20]
 8009e70:	f7ff f934 	bl	80090dc <_Bfree>
 8009e74:	9805      	ldr	r0, [sp, #20]
 8009e76:	4621      	mov	r1, r4
 8009e78:	f7ff f930 	bl	80090dc <_Bfree>
 8009e7c:	e5f9      	b.n	8009a72 <_strtod_l+0x72>
 8009e7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009e84:	4293      	cmp	r3, r2
 8009e86:	dbbc      	blt.n	8009e02 <_strtod_l+0x402>
 8009e88:	4c41      	ldr	r4, [pc, #260]	@ (8009f90 <_strtod_l+0x590>)
 8009e8a:	f1c5 050f 	rsb	r5, r5, #15
 8009e8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009e92:	4652      	mov	r2, sl
 8009e94:	465b      	mov	r3, fp
 8009e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e9a:	f7f6 fbcd 	bl	8000638 <__aeabi_dmul>
 8009e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea0:	1b5d      	subs	r5, r3, r5
 8009ea2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ea6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009eaa:	e78f      	b.n	8009dcc <_strtod_l+0x3cc>
 8009eac:	3316      	adds	r3, #22
 8009eae:	dba8      	blt.n	8009e02 <_strtod_l+0x402>
 8009eb0:	4b37      	ldr	r3, [pc, #220]	@ (8009f90 <_strtod_l+0x590>)
 8009eb2:	eba9 0808 	sub.w	r8, r9, r8
 8009eb6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009eba:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009ebe:	4650      	mov	r0, sl
 8009ec0:	4659      	mov	r1, fp
 8009ec2:	f7f6 fce3 	bl	800088c <__aeabi_ddiv>
 8009ec6:	e783      	b.n	8009dd0 <_strtod_l+0x3d0>
 8009ec8:	4b32      	ldr	r3, [pc, #200]	@ (8009f94 <_strtod_l+0x594>)
 8009eca:	9308      	str	r3, [sp, #32]
 8009ecc:	2300      	movs	r3, #0
 8009ece:	1124      	asrs	r4, r4, #4
 8009ed0:	4650      	mov	r0, sl
 8009ed2:	4659      	mov	r1, fp
 8009ed4:	461e      	mov	r6, r3
 8009ed6:	2c01      	cmp	r4, #1
 8009ed8:	dc21      	bgt.n	8009f1e <_strtod_l+0x51e>
 8009eda:	b10b      	cbz	r3, 8009ee0 <_strtod_l+0x4e0>
 8009edc:	4682      	mov	sl, r0
 8009ede:	468b      	mov	fp, r1
 8009ee0:	492c      	ldr	r1, [pc, #176]	@ (8009f94 <_strtod_l+0x594>)
 8009ee2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009ee6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009eea:	4652      	mov	r2, sl
 8009eec:	465b      	mov	r3, fp
 8009eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ef2:	f7f6 fba1 	bl	8000638 <__aeabi_dmul>
 8009ef6:	4b28      	ldr	r3, [pc, #160]	@ (8009f98 <_strtod_l+0x598>)
 8009ef8:	460a      	mov	r2, r1
 8009efa:	400b      	ands	r3, r1
 8009efc:	4927      	ldr	r1, [pc, #156]	@ (8009f9c <_strtod_l+0x59c>)
 8009efe:	428b      	cmp	r3, r1
 8009f00:	4682      	mov	sl, r0
 8009f02:	d898      	bhi.n	8009e36 <_strtod_l+0x436>
 8009f04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009f08:	428b      	cmp	r3, r1
 8009f0a:	bf86      	itte	hi
 8009f0c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009fa0 <_strtod_l+0x5a0>
 8009f10:	f04f 3aff 	movhi.w	sl, #4294967295
 8009f14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009f18:	2300      	movs	r3, #0
 8009f1a:	9308      	str	r3, [sp, #32]
 8009f1c:	e07a      	b.n	800a014 <_strtod_l+0x614>
 8009f1e:	07e2      	lsls	r2, r4, #31
 8009f20:	d505      	bpl.n	8009f2e <_strtod_l+0x52e>
 8009f22:	9b08      	ldr	r3, [sp, #32]
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	f7f6 fb86 	bl	8000638 <__aeabi_dmul>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	9a08      	ldr	r2, [sp, #32]
 8009f30:	3208      	adds	r2, #8
 8009f32:	3601      	adds	r6, #1
 8009f34:	1064      	asrs	r4, r4, #1
 8009f36:	9208      	str	r2, [sp, #32]
 8009f38:	e7cd      	b.n	8009ed6 <_strtod_l+0x4d6>
 8009f3a:	d0ed      	beq.n	8009f18 <_strtod_l+0x518>
 8009f3c:	4264      	negs	r4, r4
 8009f3e:	f014 020f 	ands.w	r2, r4, #15
 8009f42:	d00a      	beq.n	8009f5a <_strtod_l+0x55a>
 8009f44:	4b12      	ldr	r3, [pc, #72]	@ (8009f90 <_strtod_l+0x590>)
 8009f46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f4a:	4650      	mov	r0, sl
 8009f4c:	4659      	mov	r1, fp
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	f7f6 fc9b 	bl	800088c <__aeabi_ddiv>
 8009f56:	4682      	mov	sl, r0
 8009f58:	468b      	mov	fp, r1
 8009f5a:	1124      	asrs	r4, r4, #4
 8009f5c:	d0dc      	beq.n	8009f18 <_strtod_l+0x518>
 8009f5e:	2c1f      	cmp	r4, #31
 8009f60:	dd20      	ble.n	8009fa4 <_strtod_l+0x5a4>
 8009f62:	2400      	movs	r4, #0
 8009f64:	46a0      	mov	r8, r4
 8009f66:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f68:	46a1      	mov	r9, r4
 8009f6a:	9a05      	ldr	r2, [sp, #20]
 8009f6c:	2322      	movs	r3, #34	@ 0x22
 8009f6e:	f04f 0a00 	mov.w	sl, #0
 8009f72:	f04f 0b00 	mov.w	fp, #0
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	e768      	b.n	8009e4c <_strtod_l+0x44c>
 8009f7a:	bf00      	nop
 8009f7c:	0800bf9d 	.word	0x0800bf9d
 8009f80:	0800c1b4 	.word	0x0800c1b4
 8009f84:	0800bf95 	.word	0x0800bf95
 8009f88:	0800bfcc 	.word	0x0800bfcc
 8009f8c:	0800c35d 	.word	0x0800c35d
 8009f90:	0800c0e8 	.word	0x0800c0e8
 8009f94:	0800c0c0 	.word	0x0800c0c0
 8009f98:	7ff00000 	.word	0x7ff00000
 8009f9c:	7ca00000 	.word	0x7ca00000
 8009fa0:	7fefffff 	.word	0x7fefffff
 8009fa4:	f014 0310 	ands.w	r3, r4, #16
 8009fa8:	bf18      	it	ne
 8009faa:	236a      	movne	r3, #106	@ 0x6a
 8009fac:	4ea9      	ldr	r6, [pc, #676]	@ (800a254 <_strtod_l+0x854>)
 8009fae:	9308      	str	r3, [sp, #32]
 8009fb0:	4650      	mov	r0, sl
 8009fb2:	4659      	mov	r1, fp
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	07e2      	lsls	r2, r4, #31
 8009fb8:	d504      	bpl.n	8009fc4 <_strtod_l+0x5c4>
 8009fba:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fbe:	f7f6 fb3b 	bl	8000638 <__aeabi_dmul>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	1064      	asrs	r4, r4, #1
 8009fc6:	f106 0608 	add.w	r6, r6, #8
 8009fca:	d1f4      	bne.n	8009fb6 <_strtod_l+0x5b6>
 8009fcc:	b10b      	cbz	r3, 8009fd2 <_strtod_l+0x5d2>
 8009fce:	4682      	mov	sl, r0
 8009fd0:	468b      	mov	fp, r1
 8009fd2:	9b08      	ldr	r3, [sp, #32]
 8009fd4:	b1b3      	cbz	r3, 800a004 <_strtod_l+0x604>
 8009fd6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009fda:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	4659      	mov	r1, fp
 8009fe2:	dd0f      	ble.n	800a004 <_strtod_l+0x604>
 8009fe4:	2b1f      	cmp	r3, #31
 8009fe6:	dd55      	ble.n	800a094 <_strtod_l+0x694>
 8009fe8:	2b34      	cmp	r3, #52	@ 0x34
 8009fea:	bfde      	ittt	le
 8009fec:	f04f 33ff 	movle.w	r3, #4294967295
 8009ff0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009ff4:	4093      	lslle	r3, r2
 8009ff6:	f04f 0a00 	mov.w	sl, #0
 8009ffa:	bfcc      	ite	gt
 8009ffc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a000:	ea03 0b01 	andle.w	fp, r3, r1
 800a004:	2200      	movs	r2, #0
 800a006:	2300      	movs	r3, #0
 800a008:	4650      	mov	r0, sl
 800a00a:	4659      	mov	r1, fp
 800a00c:	f7f6 fd7c 	bl	8000b08 <__aeabi_dcmpeq>
 800a010:	2800      	cmp	r0, #0
 800a012:	d1a6      	bne.n	8009f62 <_strtod_l+0x562>
 800a014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a01a:	9805      	ldr	r0, [sp, #20]
 800a01c:	462b      	mov	r3, r5
 800a01e:	463a      	mov	r2, r7
 800a020:	f7ff f8c4 	bl	80091ac <__s2b>
 800a024:	900a      	str	r0, [sp, #40]	@ 0x28
 800a026:	2800      	cmp	r0, #0
 800a028:	f43f af05 	beq.w	8009e36 <_strtod_l+0x436>
 800a02c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a02e:	2a00      	cmp	r2, #0
 800a030:	eba9 0308 	sub.w	r3, r9, r8
 800a034:	bfa8      	it	ge
 800a036:	2300      	movge	r3, #0
 800a038:	9312      	str	r3, [sp, #72]	@ 0x48
 800a03a:	2400      	movs	r4, #0
 800a03c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a040:	9316      	str	r3, [sp, #88]	@ 0x58
 800a042:	46a0      	mov	r8, r4
 800a044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a046:	9805      	ldr	r0, [sp, #20]
 800a048:	6859      	ldr	r1, [r3, #4]
 800a04a:	f7ff f807 	bl	800905c <_Balloc>
 800a04e:	4681      	mov	r9, r0
 800a050:	2800      	cmp	r0, #0
 800a052:	f43f aef4 	beq.w	8009e3e <_strtod_l+0x43e>
 800a056:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a058:	691a      	ldr	r2, [r3, #16]
 800a05a:	3202      	adds	r2, #2
 800a05c:	f103 010c 	add.w	r1, r3, #12
 800a060:	0092      	lsls	r2, r2, #2
 800a062:	300c      	adds	r0, #12
 800a064:	f000 ff28 	bl	800aeb8 <memcpy>
 800a068:	ec4b ab10 	vmov	d0, sl, fp
 800a06c:	9805      	ldr	r0, [sp, #20]
 800a06e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a070:	a91b      	add	r1, sp, #108	@ 0x6c
 800a072:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a076:	f7ff fbd5 	bl	8009824 <__d2b>
 800a07a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a07c:	2800      	cmp	r0, #0
 800a07e:	f43f aede 	beq.w	8009e3e <_strtod_l+0x43e>
 800a082:	9805      	ldr	r0, [sp, #20]
 800a084:	2101      	movs	r1, #1
 800a086:	f7ff f927 	bl	80092d8 <__i2b>
 800a08a:	4680      	mov	r8, r0
 800a08c:	b948      	cbnz	r0, 800a0a2 <_strtod_l+0x6a2>
 800a08e:	f04f 0800 	mov.w	r8, #0
 800a092:	e6d4      	b.n	8009e3e <_strtod_l+0x43e>
 800a094:	f04f 32ff 	mov.w	r2, #4294967295
 800a098:	fa02 f303 	lsl.w	r3, r2, r3
 800a09c:	ea03 0a0a 	and.w	sl, r3, sl
 800a0a0:	e7b0      	b.n	800a004 <_strtod_l+0x604>
 800a0a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a0a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	bfab      	itete	ge
 800a0aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a0ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a0ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a0b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a0b2:	bfac      	ite	ge
 800a0b4:	18ef      	addge	r7, r5, r3
 800a0b6:	1b5e      	sublt	r6, r3, r5
 800a0b8:	9b08      	ldr	r3, [sp, #32]
 800a0ba:	1aed      	subs	r5, r5, r3
 800a0bc:	4415      	add	r5, r2
 800a0be:	4b66      	ldr	r3, [pc, #408]	@ (800a258 <_strtod_l+0x858>)
 800a0c0:	3d01      	subs	r5, #1
 800a0c2:	429d      	cmp	r5, r3
 800a0c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a0c8:	da50      	bge.n	800a16c <_strtod_l+0x76c>
 800a0ca:	1b5b      	subs	r3, r3, r5
 800a0cc:	2b1f      	cmp	r3, #31
 800a0ce:	eba2 0203 	sub.w	r2, r2, r3
 800a0d2:	f04f 0101 	mov.w	r1, #1
 800a0d6:	dc3d      	bgt.n	800a154 <_strtod_l+0x754>
 800a0d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a0de:	2300      	movs	r3, #0
 800a0e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0e2:	18bd      	adds	r5, r7, r2
 800a0e4:	9b08      	ldr	r3, [sp, #32]
 800a0e6:	42af      	cmp	r7, r5
 800a0e8:	4416      	add	r6, r2
 800a0ea:	441e      	add	r6, r3
 800a0ec:	463b      	mov	r3, r7
 800a0ee:	bfa8      	it	ge
 800a0f0:	462b      	movge	r3, r5
 800a0f2:	42b3      	cmp	r3, r6
 800a0f4:	bfa8      	it	ge
 800a0f6:	4633      	movge	r3, r6
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	bfc2      	ittt	gt
 800a0fc:	1aed      	subgt	r5, r5, r3
 800a0fe:	1af6      	subgt	r6, r6, r3
 800a100:	1aff      	subgt	r7, r7, r3
 800a102:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a104:	2b00      	cmp	r3, #0
 800a106:	dd16      	ble.n	800a136 <_strtod_l+0x736>
 800a108:	4641      	mov	r1, r8
 800a10a:	9805      	ldr	r0, [sp, #20]
 800a10c:	461a      	mov	r2, r3
 800a10e:	f7ff f9a3 	bl	8009458 <__pow5mult>
 800a112:	4680      	mov	r8, r0
 800a114:	2800      	cmp	r0, #0
 800a116:	d0ba      	beq.n	800a08e <_strtod_l+0x68e>
 800a118:	4601      	mov	r1, r0
 800a11a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a11c:	9805      	ldr	r0, [sp, #20]
 800a11e:	f7ff f8f1 	bl	8009304 <__multiply>
 800a122:	900e      	str	r0, [sp, #56]	@ 0x38
 800a124:	2800      	cmp	r0, #0
 800a126:	f43f ae8a 	beq.w	8009e3e <_strtod_l+0x43e>
 800a12a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a12c:	9805      	ldr	r0, [sp, #20]
 800a12e:	f7fe ffd5 	bl	80090dc <_Bfree>
 800a132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a134:	931a      	str	r3, [sp, #104]	@ 0x68
 800a136:	2d00      	cmp	r5, #0
 800a138:	dc1d      	bgt.n	800a176 <_strtod_l+0x776>
 800a13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	dd23      	ble.n	800a188 <_strtod_l+0x788>
 800a140:	4649      	mov	r1, r9
 800a142:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a144:	9805      	ldr	r0, [sp, #20]
 800a146:	f7ff f987 	bl	8009458 <__pow5mult>
 800a14a:	4681      	mov	r9, r0
 800a14c:	b9e0      	cbnz	r0, 800a188 <_strtod_l+0x788>
 800a14e:	f04f 0900 	mov.w	r9, #0
 800a152:	e674      	b.n	8009e3e <_strtod_l+0x43e>
 800a154:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a158:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a15c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a160:	35e2      	adds	r5, #226	@ 0xe2
 800a162:	fa01 f305 	lsl.w	r3, r1, r5
 800a166:	9310      	str	r3, [sp, #64]	@ 0x40
 800a168:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a16a:	e7ba      	b.n	800a0e2 <_strtod_l+0x6e2>
 800a16c:	2300      	movs	r3, #0
 800a16e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a170:	2301      	movs	r3, #1
 800a172:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a174:	e7b5      	b.n	800a0e2 <_strtod_l+0x6e2>
 800a176:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a178:	9805      	ldr	r0, [sp, #20]
 800a17a:	462a      	mov	r2, r5
 800a17c:	f7ff f9c6 	bl	800950c <__lshift>
 800a180:	901a      	str	r0, [sp, #104]	@ 0x68
 800a182:	2800      	cmp	r0, #0
 800a184:	d1d9      	bne.n	800a13a <_strtod_l+0x73a>
 800a186:	e65a      	b.n	8009e3e <_strtod_l+0x43e>
 800a188:	2e00      	cmp	r6, #0
 800a18a:	dd07      	ble.n	800a19c <_strtod_l+0x79c>
 800a18c:	4649      	mov	r1, r9
 800a18e:	9805      	ldr	r0, [sp, #20]
 800a190:	4632      	mov	r2, r6
 800a192:	f7ff f9bb 	bl	800950c <__lshift>
 800a196:	4681      	mov	r9, r0
 800a198:	2800      	cmp	r0, #0
 800a19a:	d0d8      	beq.n	800a14e <_strtod_l+0x74e>
 800a19c:	2f00      	cmp	r7, #0
 800a19e:	dd08      	ble.n	800a1b2 <_strtod_l+0x7b2>
 800a1a0:	4641      	mov	r1, r8
 800a1a2:	9805      	ldr	r0, [sp, #20]
 800a1a4:	463a      	mov	r2, r7
 800a1a6:	f7ff f9b1 	bl	800950c <__lshift>
 800a1aa:	4680      	mov	r8, r0
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	f43f ae46 	beq.w	8009e3e <_strtod_l+0x43e>
 800a1b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1b4:	9805      	ldr	r0, [sp, #20]
 800a1b6:	464a      	mov	r2, r9
 800a1b8:	f7ff fa30 	bl	800961c <__mdiff>
 800a1bc:	4604      	mov	r4, r0
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	f43f ae3d 	beq.w	8009e3e <_strtod_l+0x43e>
 800a1c4:	68c3      	ldr	r3, [r0, #12]
 800a1c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	60c3      	str	r3, [r0, #12]
 800a1cc:	4641      	mov	r1, r8
 800a1ce:	f7ff fa09 	bl	80095e4 <__mcmp>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	da46      	bge.n	800a264 <_strtod_l+0x864>
 800a1d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1d8:	ea53 030a 	orrs.w	r3, r3, sl
 800a1dc:	d16c      	bne.n	800a2b8 <_strtod_l+0x8b8>
 800a1de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d168      	bne.n	800a2b8 <_strtod_l+0x8b8>
 800a1e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1ea:	0d1b      	lsrs	r3, r3, #20
 800a1ec:	051b      	lsls	r3, r3, #20
 800a1ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a1f2:	d961      	bls.n	800a2b8 <_strtod_l+0x8b8>
 800a1f4:	6963      	ldr	r3, [r4, #20]
 800a1f6:	b913      	cbnz	r3, 800a1fe <_strtod_l+0x7fe>
 800a1f8:	6923      	ldr	r3, [r4, #16]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	dd5c      	ble.n	800a2b8 <_strtod_l+0x8b8>
 800a1fe:	4621      	mov	r1, r4
 800a200:	2201      	movs	r2, #1
 800a202:	9805      	ldr	r0, [sp, #20]
 800a204:	f7ff f982 	bl	800950c <__lshift>
 800a208:	4641      	mov	r1, r8
 800a20a:	4604      	mov	r4, r0
 800a20c:	f7ff f9ea 	bl	80095e4 <__mcmp>
 800a210:	2800      	cmp	r0, #0
 800a212:	dd51      	ble.n	800a2b8 <_strtod_l+0x8b8>
 800a214:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a218:	9a08      	ldr	r2, [sp, #32]
 800a21a:	0d1b      	lsrs	r3, r3, #20
 800a21c:	051b      	lsls	r3, r3, #20
 800a21e:	2a00      	cmp	r2, #0
 800a220:	d06b      	beq.n	800a2fa <_strtod_l+0x8fa>
 800a222:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a226:	d868      	bhi.n	800a2fa <_strtod_l+0x8fa>
 800a228:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a22c:	f67f ae9d 	bls.w	8009f6a <_strtod_l+0x56a>
 800a230:	4b0a      	ldr	r3, [pc, #40]	@ (800a25c <_strtod_l+0x85c>)
 800a232:	4650      	mov	r0, sl
 800a234:	4659      	mov	r1, fp
 800a236:	2200      	movs	r2, #0
 800a238:	f7f6 f9fe 	bl	8000638 <__aeabi_dmul>
 800a23c:	4b08      	ldr	r3, [pc, #32]	@ (800a260 <_strtod_l+0x860>)
 800a23e:	400b      	ands	r3, r1
 800a240:	4682      	mov	sl, r0
 800a242:	468b      	mov	fp, r1
 800a244:	2b00      	cmp	r3, #0
 800a246:	f47f ae05 	bne.w	8009e54 <_strtod_l+0x454>
 800a24a:	9a05      	ldr	r2, [sp, #20]
 800a24c:	2322      	movs	r3, #34	@ 0x22
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	e600      	b.n	8009e54 <_strtod_l+0x454>
 800a252:	bf00      	nop
 800a254:	0800c1e0 	.word	0x0800c1e0
 800a258:	fffffc02 	.word	0xfffffc02
 800a25c:	39500000 	.word	0x39500000
 800a260:	7ff00000 	.word	0x7ff00000
 800a264:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a268:	d165      	bne.n	800a336 <_strtod_l+0x936>
 800a26a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a26c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a270:	b35a      	cbz	r2, 800a2ca <_strtod_l+0x8ca>
 800a272:	4a9f      	ldr	r2, [pc, #636]	@ (800a4f0 <_strtod_l+0xaf0>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d12b      	bne.n	800a2d0 <_strtod_l+0x8d0>
 800a278:	9b08      	ldr	r3, [sp, #32]
 800a27a:	4651      	mov	r1, sl
 800a27c:	b303      	cbz	r3, 800a2c0 <_strtod_l+0x8c0>
 800a27e:	4b9d      	ldr	r3, [pc, #628]	@ (800a4f4 <_strtod_l+0xaf4>)
 800a280:	465a      	mov	r2, fp
 800a282:	4013      	ands	r3, r2
 800a284:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a288:	f04f 32ff 	mov.w	r2, #4294967295
 800a28c:	d81b      	bhi.n	800a2c6 <_strtod_l+0x8c6>
 800a28e:	0d1b      	lsrs	r3, r3, #20
 800a290:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a294:	fa02 f303 	lsl.w	r3, r2, r3
 800a298:	4299      	cmp	r1, r3
 800a29a:	d119      	bne.n	800a2d0 <_strtod_l+0x8d0>
 800a29c:	4b96      	ldr	r3, [pc, #600]	@ (800a4f8 <_strtod_l+0xaf8>)
 800a29e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d102      	bne.n	800a2aa <_strtod_l+0x8aa>
 800a2a4:	3101      	adds	r1, #1
 800a2a6:	f43f adca 	beq.w	8009e3e <_strtod_l+0x43e>
 800a2aa:	4b92      	ldr	r3, [pc, #584]	@ (800a4f4 <_strtod_l+0xaf4>)
 800a2ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2ae:	401a      	ands	r2, r3
 800a2b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a2b4:	f04f 0a00 	mov.w	sl, #0
 800a2b8:	9b08      	ldr	r3, [sp, #32]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1b8      	bne.n	800a230 <_strtod_l+0x830>
 800a2be:	e5c9      	b.n	8009e54 <_strtod_l+0x454>
 800a2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c4:	e7e8      	b.n	800a298 <_strtod_l+0x898>
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	e7e6      	b.n	800a298 <_strtod_l+0x898>
 800a2ca:	ea53 030a 	orrs.w	r3, r3, sl
 800a2ce:	d0a1      	beq.n	800a214 <_strtod_l+0x814>
 800a2d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a2d2:	b1db      	cbz	r3, 800a30c <_strtod_l+0x90c>
 800a2d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2d6:	4213      	tst	r3, r2
 800a2d8:	d0ee      	beq.n	800a2b8 <_strtod_l+0x8b8>
 800a2da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2dc:	9a08      	ldr	r2, [sp, #32]
 800a2de:	4650      	mov	r0, sl
 800a2e0:	4659      	mov	r1, fp
 800a2e2:	b1bb      	cbz	r3, 800a314 <_strtod_l+0x914>
 800a2e4:	f7ff fb6c 	bl	80099c0 <sulp>
 800a2e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2ec:	ec53 2b10 	vmov	r2, r3, d0
 800a2f0:	f7f5 ffec 	bl	80002cc <__adddf3>
 800a2f4:	4682      	mov	sl, r0
 800a2f6:	468b      	mov	fp, r1
 800a2f8:	e7de      	b.n	800a2b8 <_strtod_l+0x8b8>
 800a2fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a2fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a302:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a306:	f04f 3aff 	mov.w	sl, #4294967295
 800a30a:	e7d5      	b.n	800a2b8 <_strtod_l+0x8b8>
 800a30c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a30e:	ea13 0f0a 	tst.w	r3, sl
 800a312:	e7e1      	b.n	800a2d8 <_strtod_l+0x8d8>
 800a314:	f7ff fb54 	bl	80099c0 <sulp>
 800a318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a31c:	ec53 2b10 	vmov	r2, r3, d0
 800a320:	f7f5 ffd2 	bl	80002c8 <__aeabi_dsub>
 800a324:	2200      	movs	r2, #0
 800a326:	2300      	movs	r3, #0
 800a328:	4682      	mov	sl, r0
 800a32a:	468b      	mov	fp, r1
 800a32c:	f7f6 fbec 	bl	8000b08 <__aeabi_dcmpeq>
 800a330:	2800      	cmp	r0, #0
 800a332:	d0c1      	beq.n	800a2b8 <_strtod_l+0x8b8>
 800a334:	e619      	b.n	8009f6a <_strtod_l+0x56a>
 800a336:	4641      	mov	r1, r8
 800a338:	4620      	mov	r0, r4
 800a33a:	f7ff facb 	bl	80098d4 <__ratio>
 800a33e:	ec57 6b10 	vmov	r6, r7, d0
 800a342:	2200      	movs	r2, #0
 800a344:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a348:	4630      	mov	r0, r6
 800a34a:	4639      	mov	r1, r7
 800a34c:	f7f6 fbf0 	bl	8000b30 <__aeabi_dcmple>
 800a350:	2800      	cmp	r0, #0
 800a352:	d06f      	beq.n	800a434 <_strtod_l+0xa34>
 800a354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a356:	2b00      	cmp	r3, #0
 800a358:	d17a      	bne.n	800a450 <_strtod_l+0xa50>
 800a35a:	f1ba 0f00 	cmp.w	sl, #0
 800a35e:	d158      	bne.n	800a412 <_strtod_l+0xa12>
 800a360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a362:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a366:	2b00      	cmp	r3, #0
 800a368:	d15a      	bne.n	800a420 <_strtod_l+0xa20>
 800a36a:	4b64      	ldr	r3, [pc, #400]	@ (800a4fc <_strtod_l+0xafc>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	4630      	mov	r0, r6
 800a370:	4639      	mov	r1, r7
 800a372:	f7f6 fbd3 	bl	8000b1c <__aeabi_dcmplt>
 800a376:	2800      	cmp	r0, #0
 800a378:	d159      	bne.n	800a42e <_strtod_l+0xa2e>
 800a37a:	4630      	mov	r0, r6
 800a37c:	4639      	mov	r1, r7
 800a37e:	4b60      	ldr	r3, [pc, #384]	@ (800a500 <_strtod_l+0xb00>)
 800a380:	2200      	movs	r2, #0
 800a382:	f7f6 f959 	bl	8000638 <__aeabi_dmul>
 800a386:	4606      	mov	r6, r0
 800a388:	460f      	mov	r7, r1
 800a38a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a38e:	9606      	str	r6, [sp, #24]
 800a390:	9307      	str	r3, [sp, #28]
 800a392:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a396:	4d57      	ldr	r5, [pc, #348]	@ (800a4f4 <_strtod_l+0xaf4>)
 800a398:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a39c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a39e:	401d      	ands	r5, r3
 800a3a0:	4b58      	ldr	r3, [pc, #352]	@ (800a504 <_strtod_l+0xb04>)
 800a3a2:	429d      	cmp	r5, r3
 800a3a4:	f040 80b2 	bne.w	800a50c <_strtod_l+0xb0c>
 800a3a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a3ae:	ec4b ab10 	vmov	d0, sl, fp
 800a3b2:	f7ff f9c7 	bl	8009744 <__ulp>
 800a3b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3ba:	ec51 0b10 	vmov	r0, r1, d0
 800a3be:	f7f6 f93b 	bl	8000638 <__aeabi_dmul>
 800a3c2:	4652      	mov	r2, sl
 800a3c4:	465b      	mov	r3, fp
 800a3c6:	f7f5 ff81 	bl	80002cc <__adddf3>
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4949      	ldr	r1, [pc, #292]	@ (800a4f4 <_strtod_l+0xaf4>)
 800a3ce:	4a4e      	ldr	r2, [pc, #312]	@ (800a508 <_strtod_l+0xb08>)
 800a3d0:	4019      	ands	r1, r3
 800a3d2:	4291      	cmp	r1, r2
 800a3d4:	4682      	mov	sl, r0
 800a3d6:	d942      	bls.n	800a45e <_strtod_l+0xa5e>
 800a3d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a3da:	4b47      	ldr	r3, [pc, #284]	@ (800a4f8 <_strtod_l+0xaf8>)
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d103      	bne.n	800a3e8 <_strtod_l+0x9e8>
 800a3e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	f43f ad2b 	beq.w	8009e3e <_strtod_l+0x43e>
 800a3e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a4f8 <_strtod_l+0xaf8>
 800a3ec:	f04f 3aff 	mov.w	sl, #4294967295
 800a3f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3f2:	9805      	ldr	r0, [sp, #20]
 800a3f4:	f7fe fe72 	bl	80090dc <_Bfree>
 800a3f8:	9805      	ldr	r0, [sp, #20]
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	f7fe fe6e 	bl	80090dc <_Bfree>
 800a400:	9805      	ldr	r0, [sp, #20]
 800a402:	4641      	mov	r1, r8
 800a404:	f7fe fe6a 	bl	80090dc <_Bfree>
 800a408:	9805      	ldr	r0, [sp, #20]
 800a40a:	4621      	mov	r1, r4
 800a40c:	f7fe fe66 	bl	80090dc <_Bfree>
 800a410:	e618      	b.n	800a044 <_strtod_l+0x644>
 800a412:	f1ba 0f01 	cmp.w	sl, #1
 800a416:	d103      	bne.n	800a420 <_strtod_l+0xa20>
 800a418:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f43f ada5 	beq.w	8009f6a <_strtod_l+0x56a>
 800a420:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a4d0 <_strtod_l+0xad0>
 800a424:	4f35      	ldr	r7, [pc, #212]	@ (800a4fc <_strtod_l+0xafc>)
 800a426:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a42a:	2600      	movs	r6, #0
 800a42c:	e7b1      	b.n	800a392 <_strtod_l+0x992>
 800a42e:	4f34      	ldr	r7, [pc, #208]	@ (800a500 <_strtod_l+0xb00>)
 800a430:	2600      	movs	r6, #0
 800a432:	e7aa      	b.n	800a38a <_strtod_l+0x98a>
 800a434:	4b32      	ldr	r3, [pc, #200]	@ (800a500 <_strtod_l+0xb00>)
 800a436:	4630      	mov	r0, r6
 800a438:	4639      	mov	r1, r7
 800a43a:	2200      	movs	r2, #0
 800a43c:	f7f6 f8fc 	bl	8000638 <__aeabi_dmul>
 800a440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a442:	4606      	mov	r6, r0
 800a444:	460f      	mov	r7, r1
 800a446:	2b00      	cmp	r3, #0
 800a448:	d09f      	beq.n	800a38a <_strtod_l+0x98a>
 800a44a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a44e:	e7a0      	b.n	800a392 <_strtod_l+0x992>
 800a450:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a4d8 <_strtod_l+0xad8>
 800a454:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a458:	ec57 6b17 	vmov	r6, r7, d7
 800a45c:	e799      	b.n	800a392 <_strtod_l+0x992>
 800a45e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a462:	9b08      	ldr	r3, [sp, #32]
 800a464:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1c1      	bne.n	800a3f0 <_strtod_l+0x9f0>
 800a46c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a470:	0d1b      	lsrs	r3, r3, #20
 800a472:	051b      	lsls	r3, r3, #20
 800a474:	429d      	cmp	r5, r3
 800a476:	d1bb      	bne.n	800a3f0 <_strtod_l+0x9f0>
 800a478:	4630      	mov	r0, r6
 800a47a:	4639      	mov	r1, r7
 800a47c:	f7f6 fc8c 	bl	8000d98 <__aeabi_d2lz>
 800a480:	f7f6 f8ac 	bl	80005dc <__aeabi_l2d>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	4630      	mov	r0, r6
 800a48a:	4639      	mov	r1, r7
 800a48c:	f7f5 ff1c 	bl	80002c8 <__aeabi_dsub>
 800a490:	460b      	mov	r3, r1
 800a492:	4602      	mov	r2, r0
 800a494:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a498:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a49c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a49e:	ea46 060a 	orr.w	r6, r6, sl
 800a4a2:	431e      	orrs	r6, r3
 800a4a4:	d06f      	beq.n	800a586 <_strtod_l+0xb86>
 800a4a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a4e0 <_strtod_l+0xae0>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	f7f6 fb36 	bl	8000b1c <__aeabi_dcmplt>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	f47f accf 	bne.w	8009e54 <_strtod_l+0x454>
 800a4b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a4e8 <_strtod_l+0xae8>)
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4c0:	f7f6 fb4a 	bl	8000b58 <__aeabi_dcmpgt>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d093      	beq.n	800a3f0 <_strtod_l+0x9f0>
 800a4c8:	e4c4      	b.n	8009e54 <_strtod_l+0x454>
 800a4ca:	bf00      	nop
 800a4cc:	f3af 8000 	nop.w
 800a4d0:	00000000 	.word	0x00000000
 800a4d4:	bff00000 	.word	0xbff00000
 800a4d8:	00000000 	.word	0x00000000
 800a4dc:	3ff00000 	.word	0x3ff00000
 800a4e0:	94a03595 	.word	0x94a03595
 800a4e4:	3fdfffff 	.word	0x3fdfffff
 800a4e8:	35afe535 	.word	0x35afe535
 800a4ec:	3fe00000 	.word	0x3fe00000
 800a4f0:	000fffff 	.word	0x000fffff
 800a4f4:	7ff00000 	.word	0x7ff00000
 800a4f8:	7fefffff 	.word	0x7fefffff
 800a4fc:	3ff00000 	.word	0x3ff00000
 800a500:	3fe00000 	.word	0x3fe00000
 800a504:	7fe00000 	.word	0x7fe00000
 800a508:	7c9fffff 	.word	0x7c9fffff
 800a50c:	9b08      	ldr	r3, [sp, #32]
 800a50e:	b323      	cbz	r3, 800a55a <_strtod_l+0xb5a>
 800a510:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a514:	d821      	bhi.n	800a55a <_strtod_l+0xb5a>
 800a516:	a328      	add	r3, pc, #160	@ (adr r3, 800a5b8 <_strtod_l+0xbb8>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	4630      	mov	r0, r6
 800a51e:	4639      	mov	r1, r7
 800a520:	f7f6 fb06 	bl	8000b30 <__aeabi_dcmple>
 800a524:	b1a0      	cbz	r0, 800a550 <_strtod_l+0xb50>
 800a526:	4639      	mov	r1, r7
 800a528:	4630      	mov	r0, r6
 800a52a:	f7f6 fb5d 	bl	8000be8 <__aeabi_d2uiz>
 800a52e:	2801      	cmp	r0, #1
 800a530:	bf38      	it	cc
 800a532:	2001      	movcc	r0, #1
 800a534:	f7f6 f806 	bl	8000544 <__aeabi_ui2d>
 800a538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a53a:	4606      	mov	r6, r0
 800a53c:	460f      	mov	r7, r1
 800a53e:	b9fb      	cbnz	r3, 800a580 <_strtod_l+0xb80>
 800a540:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a544:	9014      	str	r0, [sp, #80]	@ 0x50
 800a546:	9315      	str	r3, [sp, #84]	@ 0x54
 800a548:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a54c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a550:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a552:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a556:	1b5b      	subs	r3, r3, r5
 800a558:	9311      	str	r3, [sp, #68]	@ 0x44
 800a55a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a55e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a562:	f7ff f8ef 	bl	8009744 <__ulp>
 800a566:	4650      	mov	r0, sl
 800a568:	ec53 2b10 	vmov	r2, r3, d0
 800a56c:	4659      	mov	r1, fp
 800a56e:	f7f6 f863 	bl	8000638 <__aeabi_dmul>
 800a572:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a576:	f7f5 fea9 	bl	80002cc <__adddf3>
 800a57a:	4682      	mov	sl, r0
 800a57c:	468b      	mov	fp, r1
 800a57e:	e770      	b.n	800a462 <_strtod_l+0xa62>
 800a580:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a584:	e7e0      	b.n	800a548 <_strtod_l+0xb48>
 800a586:	a30e      	add	r3, pc, #56	@ (adr r3, 800a5c0 <_strtod_l+0xbc0>)
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	f7f6 fac6 	bl	8000b1c <__aeabi_dcmplt>
 800a590:	e798      	b.n	800a4c4 <_strtod_l+0xac4>
 800a592:	2300      	movs	r3, #0
 800a594:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a596:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a598:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a59a:	6013      	str	r3, [r2, #0]
 800a59c:	f7ff ba6d 	b.w	8009a7a <_strtod_l+0x7a>
 800a5a0:	2a65      	cmp	r2, #101	@ 0x65
 800a5a2:	f43f ab66 	beq.w	8009c72 <_strtod_l+0x272>
 800a5a6:	2a45      	cmp	r2, #69	@ 0x45
 800a5a8:	f43f ab63 	beq.w	8009c72 <_strtod_l+0x272>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	f7ff bb9e 	b.w	8009cee <_strtod_l+0x2ee>
 800a5b2:	bf00      	nop
 800a5b4:	f3af 8000 	nop.w
 800a5b8:	ffc00000 	.word	0xffc00000
 800a5bc:	41dfffff 	.word	0x41dfffff
 800a5c0:	94a03595 	.word	0x94a03595
 800a5c4:	3fcfffff 	.word	0x3fcfffff

0800a5c8 <_strtod_r>:
 800a5c8:	4b01      	ldr	r3, [pc, #4]	@ (800a5d0 <_strtod_r+0x8>)
 800a5ca:	f7ff ba19 	b.w	8009a00 <_strtod_l>
 800a5ce:	bf00      	nop
 800a5d0:	20000088 	.word	0x20000088

0800a5d4 <_strtol_l.constprop.0>:
 800a5d4:	2b24      	cmp	r3, #36	@ 0x24
 800a5d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5da:	4686      	mov	lr, r0
 800a5dc:	4690      	mov	r8, r2
 800a5de:	d801      	bhi.n	800a5e4 <_strtol_l.constprop.0+0x10>
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d106      	bne.n	800a5f2 <_strtol_l.constprop.0+0x1e>
 800a5e4:	f7fd fe70 	bl	80082c8 <__errno>
 800a5e8:	2316      	movs	r3, #22
 800a5ea:	6003      	str	r3, [r0, #0]
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f2:	4834      	ldr	r0, [pc, #208]	@ (800a6c4 <_strtol_l.constprop.0+0xf0>)
 800a5f4:	460d      	mov	r5, r1
 800a5f6:	462a      	mov	r2, r5
 800a5f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5fc:	5d06      	ldrb	r6, [r0, r4]
 800a5fe:	f016 0608 	ands.w	r6, r6, #8
 800a602:	d1f8      	bne.n	800a5f6 <_strtol_l.constprop.0+0x22>
 800a604:	2c2d      	cmp	r4, #45	@ 0x2d
 800a606:	d12d      	bne.n	800a664 <_strtol_l.constprop.0+0x90>
 800a608:	782c      	ldrb	r4, [r5, #0]
 800a60a:	2601      	movs	r6, #1
 800a60c:	1c95      	adds	r5, r2, #2
 800a60e:	f033 0210 	bics.w	r2, r3, #16
 800a612:	d109      	bne.n	800a628 <_strtol_l.constprop.0+0x54>
 800a614:	2c30      	cmp	r4, #48	@ 0x30
 800a616:	d12a      	bne.n	800a66e <_strtol_l.constprop.0+0x9a>
 800a618:	782a      	ldrb	r2, [r5, #0]
 800a61a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a61e:	2a58      	cmp	r2, #88	@ 0x58
 800a620:	d125      	bne.n	800a66e <_strtol_l.constprop.0+0x9a>
 800a622:	786c      	ldrb	r4, [r5, #1]
 800a624:	2310      	movs	r3, #16
 800a626:	3502      	adds	r5, #2
 800a628:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a62c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a630:	2200      	movs	r2, #0
 800a632:	fbbc f9f3 	udiv	r9, ip, r3
 800a636:	4610      	mov	r0, r2
 800a638:	fb03 ca19 	mls	sl, r3, r9, ip
 800a63c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a640:	2f09      	cmp	r7, #9
 800a642:	d81b      	bhi.n	800a67c <_strtol_l.constprop.0+0xa8>
 800a644:	463c      	mov	r4, r7
 800a646:	42a3      	cmp	r3, r4
 800a648:	dd27      	ble.n	800a69a <_strtol_l.constprop.0+0xc6>
 800a64a:	1c57      	adds	r7, r2, #1
 800a64c:	d007      	beq.n	800a65e <_strtol_l.constprop.0+0x8a>
 800a64e:	4581      	cmp	r9, r0
 800a650:	d320      	bcc.n	800a694 <_strtol_l.constprop.0+0xc0>
 800a652:	d101      	bne.n	800a658 <_strtol_l.constprop.0+0x84>
 800a654:	45a2      	cmp	sl, r4
 800a656:	db1d      	blt.n	800a694 <_strtol_l.constprop.0+0xc0>
 800a658:	fb00 4003 	mla	r0, r0, r3, r4
 800a65c:	2201      	movs	r2, #1
 800a65e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a662:	e7eb      	b.n	800a63c <_strtol_l.constprop.0+0x68>
 800a664:	2c2b      	cmp	r4, #43	@ 0x2b
 800a666:	bf04      	itt	eq
 800a668:	782c      	ldrbeq	r4, [r5, #0]
 800a66a:	1c95      	addeq	r5, r2, #2
 800a66c:	e7cf      	b.n	800a60e <_strtol_l.constprop.0+0x3a>
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1da      	bne.n	800a628 <_strtol_l.constprop.0+0x54>
 800a672:	2c30      	cmp	r4, #48	@ 0x30
 800a674:	bf0c      	ite	eq
 800a676:	2308      	moveq	r3, #8
 800a678:	230a      	movne	r3, #10
 800a67a:	e7d5      	b.n	800a628 <_strtol_l.constprop.0+0x54>
 800a67c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a680:	2f19      	cmp	r7, #25
 800a682:	d801      	bhi.n	800a688 <_strtol_l.constprop.0+0xb4>
 800a684:	3c37      	subs	r4, #55	@ 0x37
 800a686:	e7de      	b.n	800a646 <_strtol_l.constprop.0+0x72>
 800a688:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a68c:	2f19      	cmp	r7, #25
 800a68e:	d804      	bhi.n	800a69a <_strtol_l.constprop.0+0xc6>
 800a690:	3c57      	subs	r4, #87	@ 0x57
 800a692:	e7d8      	b.n	800a646 <_strtol_l.constprop.0+0x72>
 800a694:	f04f 32ff 	mov.w	r2, #4294967295
 800a698:	e7e1      	b.n	800a65e <_strtol_l.constprop.0+0x8a>
 800a69a:	1c53      	adds	r3, r2, #1
 800a69c:	d108      	bne.n	800a6b0 <_strtol_l.constprop.0+0xdc>
 800a69e:	2322      	movs	r3, #34	@ 0x22
 800a6a0:	f8ce 3000 	str.w	r3, [lr]
 800a6a4:	4660      	mov	r0, ip
 800a6a6:	f1b8 0f00 	cmp.w	r8, #0
 800a6aa:	d0a0      	beq.n	800a5ee <_strtol_l.constprop.0+0x1a>
 800a6ac:	1e69      	subs	r1, r5, #1
 800a6ae:	e006      	b.n	800a6be <_strtol_l.constprop.0+0xea>
 800a6b0:	b106      	cbz	r6, 800a6b4 <_strtol_l.constprop.0+0xe0>
 800a6b2:	4240      	negs	r0, r0
 800a6b4:	f1b8 0f00 	cmp.w	r8, #0
 800a6b8:	d099      	beq.n	800a5ee <_strtol_l.constprop.0+0x1a>
 800a6ba:	2a00      	cmp	r2, #0
 800a6bc:	d1f6      	bne.n	800a6ac <_strtol_l.constprop.0+0xd8>
 800a6be:	f8c8 1000 	str.w	r1, [r8]
 800a6c2:	e794      	b.n	800a5ee <_strtol_l.constprop.0+0x1a>
 800a6c4:	0800c209 	.word	0x0800c209

0800a6c8 <_strtol_r>:
 800a6c8:	f7ff bf84 	b.w	800a5d4 <_strtol_l.constprop.0>

0800a6cc <__ssputs_r>:
 800a6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d0:	688e      	ldr	r6, [r1, #8]
 800a6d2:	461f      	mov	r7, r3
 800a6d4:	42be      	cmp	r6, r7
 800a6d6:	680b      	ldr	r3, [r1, #0]
 800a6d8:	4682      	mov	sl, r0
 800a6da:	460c      	mov	r4, r1
 800a6dc:	4690      	mov	r8, r2
 800a6de:	d82d      	bhi.n	800a73c <__ssputs_r+0x70>
 800a6e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a6e8:	d026      	beq.n	800a738 <__ssputs_r+0x6c>
 800a6ea:	6965      	ldr	r5, [r4, #20]
 800a6ec:	6909      	ldr	r1, [r1, #16]
 800a6ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6f2:	eba3 0901 	sub.w	r9, r3, r1
 800a6f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6fa:	1c7b      	adds	r3, r7, #1
 800a6fc:	444b      	add	r3, r9
 800a6fe:	106d      	asrs	r5, r5, #1
 800a700:	429d      	cmp	r5, r3
 800a702:	bf38      	it	cc
 800a704:	461d      	movcc	r5, r3
 800a706:	0553      	lsls	r3, r2, #21
 800a708:	d527      	bpl.n	800a75a <__ssputs_r+0x8e>
 800a70a:	4629      	mov	r1, r5
 800a70c:	f7fc fc82 	bl	8007014 <_malloc_r>
 800a710:	4606      	mov	r6, r0
 800a712:	b360      	cbz	r0, 800a76e <__ssputs_r+0xa2>
 800a714:	6921      	ldr	r1, [r4, #16]
 800a716:	464a      	mov	r2, r9
 800a718:	f000 fbce 	bl	800aeb8 <memcpy>
 800a71c:	89a3      	ldrh	r3, [r4, #12]
 800a71e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	6126      	str	r6, [r4, #16]
 800a72a:	6165      	str	r5, [r4, #20]
 800a72c:	444e      	add	r6, r9
 800a72e:	eba5 0509 	sub.w	r5, r5, r9
 800a732:	6026      	str	r6, [r4, #0]
 800a734:	60a5      	str	r5, [r4, #8]
 800a736:	463e      	mov	r6, r7
 800a738:	42be      	cmp	r6, r7
 800a73a:	d900      	bls.n	800a73e <__ssputs_r+0x72>
 800a73c:	463e      	mov	r6, r7
 800a73e:	6820      	ldr	r0, [r4, #0]
 800a740:	4632      	mov	r2, r6
 800a742:	4641      	mov	r1, r8
 800a744:	f000 fb6a 	bl	800ae1c <memmove>
 800a748:	68a3      	ldr	r3, [r4, #8]
 800a74a:	1b9b      	subs	r3, r3, r6
 800a74c:	60a3      	str	r3, [r4, #8]
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	4433      	add	r3, r6
 800a752:	6023      	str	r3, [r4, #0]
 800a754:	2000      	movs	r0, #0
 800a756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a75a:	462a      	mov	r2, r5
 800a75c:	f000 ff41 	bl	800b5e2 <_realloc_r>
 800a760:	4606      	mov	r6, r0
 800a762:	2800      	cmp	r0, #0
 800a764:	d1e0      	bne.n	800a728 <__ssputs_r+0x5c>
 800a766:	6921      	ldr	r1, [r4, #16]
 800a768:	4650      	mov	r0, sl
 800a76a:	f7fe fc2d 	bl	8008fc8 <_free_r>
 800a76e:	230c      	movs	r3, #12
 800a770:	f8ca 3000 	str.w	r3, [sl]
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a77a:	81a3      	strh	r3, [r4, #12]
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295
 800a780:	e7e9      	b.n	800a756 <__ssputs_r+0x8a>
	...

0800a784 <_svfiprintf_r>:
 800a784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a788:	4698      	mov	r8, r3
 800a78a:	898b      	ldrh	r3, [r1, #12]
 800a78c:	061b      	lsls	r3, r3, #24
 800a78e:	b09d      	sub	sp, #116	@ 0x74
 800a790:	4607      	mov	r7, r0
 800a792:	460d      	mov	r5, r1
 800a794:	4614      	mov	r4, r2
 800a796:	d510      	bpl.n	800a7ba <_svfiprintf_r+0x36>
 800a798:	690b      	ldr	r3, [r1, #16]
 800a79a:	b973      	cbnz	r3, 800a7ba <_svfiprintf_r+0x36>
 800a79c:	2140      	movs	r1, #64	@ 0x40
 800a79e:	f7fc fc39 	bl	8007014 <_malloc_r>
 800a7a2:	6028      	str	r0, [r5, #0]
 800a7a4:	6128      	str	r0, [r5, #16]
 800a7a6:	b930      	cbnz	r0, 800a7b6 <_svfiprintf_r+0x32>
 800a7a8:	230c      	movs	r3, #12
 800a7aa:	603b      	str	r3, [r7, #0]
 800a7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b0:	b01d      	add	sp, #116	@ 0x74
 800a7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b6:	2340      	movs	r3, #64	@ 0x40
 800a7b8:	616b      	str	r3, [r5, #20]
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7be:	2320      	movs	r3, #32
 800a7c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7c8:	2330      	movs	r3, #48	@ 0x30
 800a7ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a968 <_svfiprintf_r+0x1e4>
 800a7ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7d2:	f04f 0901 	mov.w	r9, #1
 800a7d6:	4623      	mov	r3, r4
 800a7d8:	469a      	mov	sl, r3
 800a7da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7de:	b10a      	cbz	r2, 800a7e4 <_svfiprintf_r+0x60>
 800a7e0:	2a25      	cmp	r2, #37	@ 0x25
 800a7e2:	d1f9      	bne.n	800a7d8 <_svfiprintf_r+0x54>
 800a7e4:	ebba 0b04 	subs.w	fp, sl, r4
 800a7e8:	d00b      	beq.n	800a802 <_svfiprintf_r+0x7e>
 800a7ea:	465b      	mov	r3, fp
 800a7ec:	4622      	mov	r2, r4
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	4638      	mov	r0, r7
 800a7f2:	f7ff ff6b 	bl	800a6cc <__ssputs_r>
 800a7f6:	3001      	adds	r0, #1
 800a7f8:	f000 80a7 	beq.w	800a94a <_svfiprintf_r+0x1c6>
 800a7fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7fe:	445a      	add	r2, fp
 800a800:	9209      	str	r2, [sp, #36]	@ 0x24
 800a802:	f89a 3000 	ldrb.w	r3, [sl]
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 809f 	beq.w	800a94a <_svfiprintf_r+0x1c6>
 800a80c:	2300      	movs	r3, #0
 800a80e:	f04f 32ff 	mov.w	r2, #4294967295
 800a812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a816:	f10a 0a01 	add.w	sl, sl, #1
 800a81a:	9304      	str	r3, [sp, #16]
 800a81c:	9307      	str	r3, [sp, #28]
 800a81e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a822:	931a      	str	r3, [sp, #104]	@ 0x68
 800a824:	4654      	mov	r4, sl
 800a826:	2205      	movs	r2, #5
 800a828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a82c:	484e      	ldr	r0, [pc, #312]	@ (800a968 <_svfiprintf_r+0x1e4>)
 800a82e:	f7f5 fcef 	bl	8000210 <memchr>
 800a832:	9a04      	ldr	r2, [sp, #16]
 800a834:	b9d8      	cbnz	r0, 800a86e <_svfiprintf_r+0xea>
 800a836:	06d0      	lsls	r0, r2, #27
 800a838:	bf44      	itt	mi
 800a83a:	2320      	movmi	r3, #32
 800a83c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a840:	0711      	lsls	r1, r2, #28
 800a842:	bf44      	itt	mi
 800a844:	232b      	movmi	r3, #43	@ 0x2b
 800a846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a84a:	f89a 3000 	ldrb.w	r3, [sl]
 800a84e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a850:	d015      	beq.n	800a87e <_svfiprintf_r+0xfa>
 800a852:	9a07      	ldr	r2, [sp, #28]
 800a854:	4654      	mov	r4, sl
 800a856:	2000      	movs	r0, #0
 800a858:	f04f 0c0a 	mov.w	ip, #10
 800a85c:	4621      	mov	r1, r4
 800a85e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a862:	3b30      	subs	r3, #48	@ 0x30
 800a864:	2b09      	cmp	r3, #9
 800a866:	d94b      	bls.n	800a900 <_svfiprintf_r+0x17c>
 800a868:	b1b0      	cbz	r0, 800a898 <_svfiprintf_r+0x114>
 800a86a:	9207      	str	r2, [sp, #28]
 800a86c:	e014      	b.n	800a898 <_svfiprintf_r+0x114>
 800a86e:	eba0 0308 	sub.w	r3, r0, r8
 800a872:	fa09 f303 	lsl.w	r3, r9, r3
 800a876:	4313      	orrs	r3, r2
 800a878:	9304      	str	r3, [sp, #16]
 800a87a:	46a2      	mov	sl, r4
 800a87c:	e7d2      	b.n	800a824 <_svfiprintf_r+0xa0>
 800a87e:	9b03      	ldr	r3, [sp, #12]
 800a880:	1d19      	adds	r1, r3, #4
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	9103      	str	r1, [sp, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	bfbb      	ittet	lt
 800a88a:	425b      	neglt	r3, r3
 800a88c:	f042 0202 	orrlt.w	r2, r2, #2
 800a890:	9307      	strge	r3, [sp, #28]
 800a892:	9307      	strlt	r3, [sp, #28]
 800a894:	bfb8      	it	lt
 800a896:	9204      	strlt	r2, [sp, #16]
 800a898:	7823      	ldrb	r3, [r4, #0]
 800a89a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a89c:	d10a      	bne.n	800a8b4 <_svfiprintf_r+0x130>
 800a89e:	7863      	ldrb	r3, [r4, #1]
 800a8a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8a2:	d132      	bne.n	800a90a <_svfiprintf_r+0x186>
 800a8a4:	9b03      	ldr	r3, [sp, #12]
 800a8a6:	1d1a      	adds	r2, r3, #4
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	9203      	str	r2, [sp, #12]
 800a8ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8b0:	3402      	adds	r4, #2
 800a8b2:	9305      	str	r3, [sp, #20]
 800a8b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a978 <_svfiprintf_r+0x1f4>
 800a8b8:	7821      	ldrb	r1, [r4, #0]
 800a8ba:	2203      	movs	r2, #3
 800a8bc:	4650      	mov	r0, sl
 800a8be:	f7f5 fca7 	bl	8000210 <memchr>
 800a8c2:	b138      	cbz	r0, 800a8d4 <_svfiprintf_r+0x150>
 800a8c4:	9b04      	ldr	r3, [sp, #16]
 800a8c6:	eba0 000a 	sub.w	r0, r0, sl
 800a8ca:	2240      	movs	r2, #64	@ 0x40
 800a8cc:	4082      	lsls	r2, r0
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	3401      	adds	r4, #1
 800a8d2:	9304      	str	r3, [sp, #16]
 800a8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d8:	4824      	ldr	r0, [pc, #144]	@ (800a96c <_svfiprintf_r+0x1e8>)
 800a8da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8de:	2206      	movs	r2, #6
 800a8e0:	f7f5 fc96 	bl	8000210 <memchr>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d036      	beq.n	800a956 <_svfiprintf_r+0x1d2>
 800a8e8:	4b21      	ldr	r3, [pc, #132]	@ (800a970 <_svfiprintf_r+0x1ec>)
 800a8ea:	bb1b      	cbnz	r3, 800a934 <_svfiprintf_r+0x1b0>
 800a8ec:	9b03      	ldr	r3, [sp, #12]
 800a8ee:	3307      	adds	r3, #7
 800a8f0:	f023 0307 	bic.w	r3, r3, #7
 800a8f4:	3308      	adds	r3, #8
 800a8f6:	9303      	str	r3, [sp, #12]
 800a8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8fa:	4433      	add	r3, r6
 800a8fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8fe:	e76a      	b.n	800a7d6 <_svfiprintf_r+0x52>
 800a900:	fb0c 3202 	mla	r2, ip, r2, r3
 800a904:	460c      	mov	r4, r1
 800a906:	2001      	movs	r0, #1
 800a908:	e7a8      	b.n	800a85c <_svfiprintf_r+0xd8>
 800a90a:	2300      	movs	r3, #0
 800a90c:	3401      	adds	r4, #1
 800a90e:	9305      	str	r3, [sp, #20]
 800a910:	4619      	mov	r1, r3
 800a912:	f04f 0c0a 	mov.w	ip, #10
 800a916:	4620      	mov	r0, r4
 800a918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a91c:	3a30      	subs	r2, #48	@ 0x30
 800a91e:	2a09      	cmp	r2, #9
 800a920:	d903      	bls.n	800a92a <_svfiprintf_r+0x1a6>
 800a922:	2b00      	cmp	r3, #0
 800a924:	d0c6      	beq.n	800a8b4 <_svfiprintf_r+0x130>
 800a926:	9105      	str	r1, [sp, #20]
 800a928:	e7c4      	b.n	800a8b4 <_svfiprintf_r+0x130>
 800a92a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a92e:	4604      	mov	r4, r0
 800a930:	2301      	movs	r3, #1
 800a932:	e7f0      	b.n	800a916 <_svfiprintf_r+0x192>
 800a934:	ab03      	add	r3, sp, #12
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	462a      	mov	r2, r5
 800a93a:	4b0e      	ldr	r3, [pc, #56]	@ (800a974 <_svfiprintf_r+0x1f0>)
 800a93c:	a904      	add	r1, sp, #16
 800a93e:	4638      	mov	r0, r7
 800a940:	f7fc fc94 	bl	800726c <_printf_float>
 800a944:	1c42      	adds	r2, r0, #1
 800a946:	4606      	mov	r6, r0
 800a948:	d1d6      	bne.n	800a8f8 <_svfiprintf_r+0x174>
 800a94a:	89ab      	ldrh	r3, [r5, #12]
 800a94c:	065b      	lsls	r3, r3, #25
 800a94e:	f53f af2d 	bmi.w	800a7ac <_svfiprintf_r+0x28>
 800a952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a954:	e72c      	b.n	800a7b0 <_svfiprintf_r+0x2c>
 800a956:	ab03      	add	r3, sp, #12
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	462a      	mov	r2, r5
 800a95c:	4b05      	ldr	r3, [pc, #20]	@ (800a974 <_svfiprintf_r+0x1f0>)
 800a95e:	a904      	add	r1, sp, #16
 800a960:	4638      	mov	r0, r7
 800a962:	f7fc ff1b 	bl	800779c <_printf_i>
 800a966:	e7ed      	b.n	800a944 <_svfiprintf_r+0x1c0>
 800a968:	0800c309 	.word	0x0800c309
 800a96c:	0800c313 	.word	0x0800c313
 800a970:	0800726d 	.word	0x0800726d
 800a974:	0800a6cd 	.word	0x0800a6cd
 800a978:	0800c30f 	.word	0x0800c30f

0800a97c <__sfputc_r>:
 800a97c:	6893      	ldr	r3, [r2, #8]
 800a97e:	3b01      	subs	r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	b410      	push	{r4}
 800a984:	6093      	str	r3, [r2, #8]
 800a986:	da08      	bge.n	800a99a <__sfputc_r+0x1e>
 800a988:	6994      	ldr	r4, [r2, #24]
 800a98a:	42a3      	cmp	r3, r4
 800a98c:	db01      	blt.n	800a992 <__sfputc_r+0x16>
 800a98e:	290a      	cmp	r1, #10
 800a990:	d103      	bne.n	800a99a <__sfputc_r+0x1e>
 800a992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a996:	f7fd bba0 	b.w	80080da <__swbuf_r>
 800a99a:	6813      	ldr	r3, [r2, #0]
 800a99c:	1c58      	adds	r0, r3, #1
 800a99e:	6010      	str	r0, [r2, #0]
 800a9a0:	7019      	strb	r1, [r3, #0]
 800a9a2:	4608      	mov	r0, r1
 800a9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <__sfputs_r>:
 800a9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	460f      	mov	r7, r1
 800a9b0:	4614      	mov	r4, r2
 800a9b2:	18d5      	adds	r5, r2, r3
 800a9b4:	42ac      	cmp	r4, r5
 800a9b6:	d101      	bne.n	800a9bc <__sfputs_r+0x12>
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	e007      	b.n	800a9cc <__sfputs_r+0x22>
 800a9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c0:	463a      	mov	r2, r7
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f7ff ffda 	bl	800a97c <__sfputc_r>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d1f3      	bne.n	800a9b4 <__sfputs_r+0xa>
 800a9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9d0 <_vfiprintf_r>:
 800a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	b09d      	sub	sp, #116	@ 0x74
 800a9d8:	4614      	mov	r4, r2
 800a9da:	4698      	mov	r8, r3
 800a9dc:	4606      	mov	r6, r0
 800a9de:	b118      	cbz	r0, 800a9e8 <_vfiprintf_r+0x18>
 800a9e0:	6a03      	ldr	r3, [r0, #32]
 800a9e2:	b90b      	cbnz	r3, 800a9e8 <_vfiprintf_r+0x18>
 800a9e4:	f7fd fa9a 	bl	8007f1c <__sinit>
 800a9e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9ea:	07d9      	lsls	r1, r3, #31
 800a9ec:	d405      	bmi.n	800a9fa <_vfiprintf_r+0x2a>
 800a9ee:	89ab      	ldrh	r3, [r5, #12]
 800a9f0:	059a      	lsls	r2, r3, #22
 800a9f2:	d402      	bmi.n	800a9fa <_vfiprintf_r+0x2a>
 800a9f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9f6:	f7fd fc92 	bl	800831e <__retarget_lock_acquire_recursive>
 800a9fa:	89ab      	ldrh	r3, [r5, #12]
 800a9fc:	071b      	lsls	r3, r3, #28
 800a9fe:	d501      	bpl.n	800aa04 <_vfiprintf_r+0x34>
 800aa00:	692b      	ldr	r3, [r5, #16]
 800aa02:	b99b      	cbnz	r3, 800aa2c <_vfiprintf_r+0x5c>
 800aa04:	4629      	mov	r1, r5
 800aa06:	4630      	mov	r0, r6
 800aa08:	f7fd fba6 	bl	8008158 <__swsetup_r>
 800aa0c:	b170      	cbz	r0, 800aa2c <_vfiprintf_r+0x5c>
 800aa0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa10:	07dc      	lsls	r4, r3, #31
 800aa12:	d504      	bpl.n	800aa1e <_vfiprintf_r+0x4e>
 800aa14:	f04f 30ff 	mov.w	r0, #4294967295
 800aa18:	b01d      	add	sp, #116	@ 0x74
 800aa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1e:	89ab      	ldrh	r3, [r5, #12]
 800aa20:	0598      	lsls	r0, r3, #22
 800aa22:	d4f7      	bmi.n	800aa14 <_vfiprintf_r+0x44>
 800aa24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa26:	f7fd fc7b 	bl	8008320 <__retarget_lock_release_recursive>
 800aa2a:	e7f3      	b.n	800aa14 <_vfiprintf_r+0x44>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa30:	2320      	movs	r3, #32
 800aa32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa36:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa3a:	2330      	movs	r3, #48	@ 0x30
 800aa3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abec <_vfiprintf_r+0x21c>
 800aa40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa44:	f04f 0901 	mov.w	r9, #1
 800aa48:	4623      	mov	r3, r4
 800aa4a:	469a      	mov	sl, r3
 800aa4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa50:	b10a      	cbz	r2, 800aa56 <_vfiprintf_r+0x86>
 800aa52:	2a25      	cmp	r2, #37	@ 0x25
 800aa54:	d1f9      	bne.n	800aa4a <_vfiprintf_r+0x7a>
 800aa56:	ebba 0b04 	subs.w	fp, sl, r4
 800aa5a:	d00b      	beq.n	800aa74 <_vfiprintf_r+0xa4>
 800aa5c:	465b      	mov	r3, fp
 800aa5e:	4622      	mov	r2, r4
 800aa60:	4629      	mov	r1, r5
 800aa62:	4630      	mov	r0, r6
 800aa64:	f7ff ffa1 	bl	800a9aa <__sfputs_r>
 800aa68:	3001      	adds	r0, #1
 800aa6a:	f000 80a7 	beq.w	800abbc <_vfiprintf_r+0x1ec>
 800aa6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa70:	445a      	add	r2, fp
 800aa72:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa74:	f89a 3000 	ldrb.w	r3, [sl]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 809f 	beq.w	800abbc <_vfiprintf_r+0x1ec>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	f04f 32ff 	mov.w	r2, #4294967295
 800aa84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa88:	f10a 0a01 	add.w	sl, sl, #1
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	9307      	str	r3, [sp, #28]
 800aa90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa94:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa96:	4654      	mov	r4, sl
 800aa98:	2205      	movs	r2, #5
 800aa9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa9e:	4853      	ldr	r0, [pc, #332]	@ (800abec <_vfiprintf_r+0x21c>)
 800aaa0:	f7f5 fbb6 	bl	8000210 <memchr>
 800aaa4:	9a04      	ldr	r2, [sp, #16]
 800aaa6:	b9d8      	cbnz	r0, 800aae0 <_vfiprintf_r+0x110>
 800aaa8:	06d1      	lsls	r1, r2, #27
 800aaaa:	bf44      	itt	mi
 800aaac:	2320      	movmi	r3, #32
 800aaae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aab2:	0713      	lsls	r3, r2, #28
 800aab4:	bf44      	itt	mi
 800aab6:	232b      	movmi	r3, #43	@ 0x2b
 800aab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aabc:	f89a 3000 	ldrb.w	r3, [sl]
 800aac0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aac2:	d015      	beq.n	800aaf0 <_vfiprintf_r+0x120>
 800aac4:	9a07      	ldr	r2, [sp, #28]
 800aac6:	4654      	mov	r4, sl
 800aac8:	2000      	movs	r0, #0
 800aaca:	f04f 0c0a 	mov.w	ip, #10
 800aace:	4621      	mov	r1, r4
 800aad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aad4:	3b30      	subs	r3, #48	@ 0x30
 800aad6:	2b09      	cmp	r3, #9
 800aad8:	d94b      	bls.n	800ab72 <_vfiprintf_r+0x1a2>
 800aada:	b1b0      	cbz	r0, 800ab0a <_vfiprintf_r+0x13a>
 800aadc:	9207      	str	r2, [sp, #28]
 800aade:	e014      	b.n	800ab0a <_vfiprintf_r+0x13a>
 800aae0:	eba0 0308 	sub.w	r3, r0, r8
 800aae4:	fa09 f303 	lsl.w	r3, r9, r3
 800aae8:	4313      	orrs	r3, r2
 800aaea:	9304      	str	r3, [sp, #16]
 800aaec:	46a2      	mov	sl, r4
 800aaee:	e7d2      	b.n	800aa96 <_vfiprintf_r+0xc6>
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	1d19      	adds	r1, r3, #4
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	9103      	str	r1, [sp, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	bfbb      	ittet	lt
 800aafc:	425b      	neglt	r3, r3
 800aafe:	f042 0202 	orrlt.w	r2, r2, #2
 800ab02:	9307      	strge	r3, [sp, #28]
 800ab04:	9307      	strlt	r3, [sp, #28]
 800ab06:	bfb8      	it	lt
 800ab08:	9204      	strlt	r2, [sp, #16]
 800ab0a:	7823      	ldrb	r3, [r4, #0]
 800ab0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab0e:	d10a      	bne.n	800ab26 <_vfiprintf_r+0x156>
 800ab10:	7863      	ldrb	r3, [r4, #1]
 800ab12:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab14:	d132      	bne.n	800ab7c <_vfiprintf_r+0x1ac>
 800ab16:	9b03      	ldr	r3, [sp, #12]
 800ab18:	1d1a      	adds	r2, r3, #4
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	9203      	str	r2, [sp, #12]
 800ab1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab22:	3402      	adds	r4, #2
 800ab24:	9305      	str	r3, [sp, #20]
 800ab26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abfc <_vfiprintf_r+0x22c>
 800ab2a:	7821      	ldrb	r1, [r4, #0]
 800ab2c:	2203      	movs	r2, #3
 800ab2e:	4650      	mov	r0, sl
 800ab30:	f7f5 fb6e 	bl	8000210 <memchr>
 800ab34:	b138      	cbz	r0, 800ab46 <_vfiprintf_r+0x176>
 800ab36:	9b04      	ldr	r3, [sp, #16]
 800ab38:	eba0 000a 	sub.w	r0, r0, sl
 800ab3c:	2240      	movs	r2, #64	@ 0x40
 800ab3e:	4082      	lsls	r2, r0
 800ab40:	4313      	orrs	r3, r2
 800ab42:	3401      	adds	r4, #1
 800ab44:	9304      	str	r3, [sp, #16]
 800ab46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab4a:	4829      	ldr	r0, [pc, #164]	@ (800abf0 <_vfiprintf_r+0x220>)
 800ab4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab50:	2206      	movs	r2, #6
 800ab52:	f7f5 fb5d 	bl	8000210 <memchr>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d03f      	beq.n	800abda <_vfiprintf_r+0x20a>
 800ab5a:	4b26      	ldr	r3, [pc, #152]	@ (800abf4 <_vfiprintf_r+0x224>)
 800ab5c:	bb1b      	cbnz	r3, 800aba6 <_vfiprintf_r+0x1d6>
 800ab5e:	9b03      	ldr	r3, [sp, #12]
 800ab60:	3307      	adds	r3, #7
 800ab62:	f023 0307 	bic.w	r3, r3, #7
 800ab66:	3308      	adds	r3, #8
 800ab68:	9303      	str	r3, [sp, #12]
 800ab6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab6c:	443b      	add	r3, r7
 800ab6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab70:	e76a      	b.n	800aa48 <_vfiprintf_r+0x78>
 800ab72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab76:	460c      	mov	r4, r1
 800ab78:	2001      	movs	r0, #1
 800ab7a:	e7a8      	b.n	800aace <_vfiprintf_r+0xfe>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	3401      	adds	r4, #1
 800ab80:	9305      	str	r3, [sp, #20]
 800ab82:	4619      	mov	r1, r3
 800ab84:	f04f 0c0a 	mov.w	ip, #10
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab8e:	3a30      	subs	r2, #48	@ 0x30
 800ab90:	2a09      	cmp	r2, #9
 800ab92:	d903      	bls.n	800ab9c <_vfiprintf_r+0x1cc>
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d0c6      	beq.n	800ab26 <_vfiprintf_r+0x156>
 800ab98:	9105      	str	r1, [sp, #20]
 800ab9a:	e7c4      	b.n	800ab26 <_vfiprintf_r+0x156>
 800ab9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aba0:	4604      	mov	r4, r0
 800aba2:	2301      	movs	r3, #1
 800aba4:	e7f0      	b.n	800ab88 <_vfiprintf_r+0x1b8>
 800aba6:	ab03      	add	r3, sp, #12
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	462a      	mov	r2, r5
 800abac:	4b12      	ldr	r3, [pc, #72]	@ (800abf8 <_vfiprintf_r+0x228>)
 800abae:	a904      	add	r1, sp, #16
 800abb0:	4630      	mov	r0, r6
 800abb2:	f7fc fb5b 	bl	800726c <_printf_float>
 800abb6:	4607      	mov	r7, r0
 800abb8:	1c78      	adds	r0, r7, #1
 800abba:	d1d6      	bne.n	800ab6a <_vfiprintf_r+0x19a>
 800abbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abbe:	07d9      	lsls	r1, r3, #31
 800abc0:	d405      	bmi.n	800abce <_vfiprintf_r+0x1fe>
 800abc2:	89ab      	ldrh	r3, [r5, #12]
 800abc4:	059a      	lsls	r2, r3, #22
 800abc6:	d402      	bmi.n	800abce <_vfiprintf_r+0x1fe>
 800abc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abca:	f7fd fba9 	bl	8008320 <__retarget_lock_release_recursive>
 800abce:	89ab      	ldrh	r3, [r5, #12]
 800abd0:	065b      	lsls	r3, r3, #25
 800abd2:	f53f af1f 	bmi.w	800aa14 <_vfiprintf_r+0x44>
 800abd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abd8:	e71e      	b.n	800aa18 <_vfiprintf_r+0x48>
 800abda:	ab03      	add	r3, sp, #12
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	462a      	mov	r2, r5
 800abe0:	4b05      	ldr	r3, [pc, #20]	@ (800abf8 <_vfiprintf_r+0x228>)
 800abe2:	a904      	add	r1, sp, #16
 800abe4:	4630      	mov	r0, r6
 800abe6:	f7fc fdd9 	bl	800779c <_printf_i>
 800abea:	e7e4      	b.n	800abb6 <_vfiprintf_r+0x1e6>
 800abec:	0800c309 	.word	0x0800c309
 800abf0:	0800c313 	.word	0x0800c313
 800abf4:	0800726d 	.word	0x0800726d
 800abf8:	0800a9ab 	.word	0x0800a9ab
 800abfc:	0800c30f 	.word	0x0800c30f

0800ac00 <__sflush_r>:
 800ac00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac08:	0716      	lsls	r6, r2, #28
 800ac0a:	4605      	mov	r5, r0
 800ac0c:	460c      	mov	r4, r1
 800ac0e:	d454      	bmi.n	800acba <__sflush_r+0xba>
 800ac10:	684b      	ldr	r3, [r1, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	dc02      	bgt.n	800ac1c <__sflush_r+0x1c>
 800ac16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	dd48      	ble.n	800acae <__sflush_r+0xae>
 800ac1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac1e:	2e00      	cmp	r6, #0
 800ac20:	d045      	beq.n	800acae <__sflush_r+0xae>
 800ac22:	2300      	movs	r3, #0
 800ac24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac28:	682f      	ldr	r7, [r5, #0]
 800ac2a:	6a21      	ldr	r1, [r4, #32]
 800ac2c:	602b      	str	r3, [r5, #0]
 800ac2e:	d030      	beq.n	800ac92 <__sflush_r+0x92>
 800ac30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac32:	89a3      	ldrh	r3, [r4, #12]
 800ac34:	0759      	lsls	r1, r3, #29
 800ac36:	d505      	bpl.n	800ac44 <__sflush_r+0x44>
 800ac38:	6863      	ldr	r3, [r4, #4]
 800ac3a:	1ad2      	subs	r2, r2, r3
 800ac3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac3e:	b10b      	cbz	r3, 800ac44 <__sflush_r+0x44>
 800ac40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac42:	1ad2      	subs	r2, r2, r3
 800ac44:	2300      	movs	r3, #0
 800ac46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac48:	6a21      	ldr	r1, [r4, #32]
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	47b0      	blx	r6
 800ac4e:	1c43      	adds	r3, r0, #1
 800ac50:	89a3      	ldrh	r3, [r4, #12]
 800ac52:	d106      	bne.n	800ac62 <__sflush_r+0x62>
 800ac54:	6829      	ldr	r1, [r5, #0]
 800ac56:	291d      	cmp	r1, #29
 800ac58:	d82b      	bhi.n	800acb2 <__sflush_r+0xb2>
 800ac5a:	4a2a      	ldr	r2, [pc, #168]	@ (800ad04 <__sflush_r+0x104>)
 800ac5c:	410a      	asrs	r2, r1
 800ac5e:	07d6      	lsls	r6, r2, #31
 800ac60:	d427      	bmi.n	800acb2 <__sflush_r+0xb2>
 800ac62:	2200      	movs	r2, #0
 800ac64:	6062      	str	r2, [r4, #4]
 800ac66:	04d9      	lsls	r1, r3, #19
 800ac68:	6922      	ldr	r2, [r4, #16]
 800ac6a:	6022      	str	r2, [r4, #0]
 800ac6c:	d504      	bpl.n	800ac78 <__sflush_r+0x78>
 800ac6e:	1c42      	adds	r2, r0, #1
 800ac70:	d101      	bne.n	800ac76 <__sflush_r+0x76>
 800ac72:	682b      	ldr	r3, [r5, #0]
 800ac74:	b903      	cbnz	r3, 800ac78 <__sflush_r+0x78>
 800ac76:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac7a:	602f      	str	r7, [r5, #0]
 800ac7c:	b1b9      	cbz	r1, 800acae <__sflush_r+0xae>
 800ac7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac82:	4299      	cmp	r1, r3
 800ac84:	d002      	beq.n	800ac8c <__sflush_r+0x8c>
 800ac86:	4628      	mov	r0, r5
 800ac88:	f7fe f99e 	bl	8008fc8 <_free_r>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac90:	e00d      	b.n	800acae <__sflush_r+0xae>
 800ac92:	2301      	movs	r3, #1
 800ac94:	4628      	mov	r0, r5
 800ac96:	47b0      	blx	r6
 800ac98:	4602      	mov	r2, r0
 800ac9a:	1c50      	adds	r0, r2, #1
 800ac9c:	d1c9      	bne.n	800ac32 <__sflush_r+0x32>
 800ac9e:	682b      	ldr	r3, [r5, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d0c6      	beq.n	800ac32 <__sflush_r+0x32>
 800aca4:	2b1d      	cmp	r3, #29
 800aca6:	d001      	beq.n	800acac <__sflush_r+0xac>
 800aca8:	2b16      	cmp	r3, #22
 800acaa:	d11e      	bne.n	800acea <__sflush_r+0xea>
 800acac:	602f      	str	r7, [r5, #0]
 800acae:	2000      	movs	r0, #0
 800acb0:	e022      	b.n	800acf8 <__sflush_r+0xf8>
 800acb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acb6:	b21b      	sxth	r3, r3
 800acb8:	e01b      	b.n	800acf2 <__sflush_r+0xf2>
 800acba:	690f      	ldr	r7, [r1, #16]
 800acbc:	2f00      	cmp	r7, #0
 800acbe:	d0f6      	beq.n	800acae <__sflush_r+0xae>
 800acc0:	0793      	lsls	r3, r2, #30
 800acc2:	680e      	ldr	r6, [r1, #0]
 800acc4:	bf08      	it	eq
 800acc6:	694b      	ldreq	r3, [r1, #20]
 800acc8:	600f      	str	r7, [r1, #0]
 800acca:	bf18      	it	ne
 800accc:	2300      	movne	r3, #0
 800acce:	eba6 0807 	sub.w	r8, r6, r7
 800acd2:	608b      	str	r3, [r1, #8]
 800acd4:	f1b8 0f00 	cmp.w	r8, #0
 800acd8:	dde9      	ble.n	800acae <__sflush_r+0xae>
 800acda:	6a21      	ldr	r1, [r4, #32]
 800acdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800acde:	4643      	mov	r3, r8
 800ace0:	463a      	mov	r2, r7
 800ace2:	4628      	mov	r0, r5
 800ace4:	47b0      	blx	r6
 800ace6:	2800      	cmp	r0, #0
 800ace8:	dc08      	bgt.n	800acfc <__sflush_r+0xfc>
 800acea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acf2:	81a3      	strh	r3, [r4, #12]
 800acf4:	f04f 30ff 	mov.w	r0, #4294967295
 800acf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acfc:	4407      	add	r7, r0
 800acfe:	eba8 0800 	sub.w	r8, r8, r0
 800ad02:	e7e7      	b.n	800acd4 <__sflush_r+0xd4>
 800ad04:	dfbffffe 	.word	0xdfbffffe

0800ad08 <_fflush_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	690b      	ldr	r3, [r1, #16]
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	460c      	mov	r4, r1
 800ad10:	b913      	cbnz	r3, 800ad18 <_fflush_r+0x10>
 800ad12:	2500      	movs	r5, #0
 800ad14:	4628      	mov	r0, r5
 800ad16:	bd38      	pop	{r3, r4, r5, pc}
 800ad18:	b118      	cbz	r0, 800ad22 <_fflush_r+0x1a>
 800ad1a:	6a03      	ldr	r3, [r0, #32]
 800ad1c:	b90b      	cbnz	r3, 800ad22 <_fflush_r+0x1a>
 800ad1e:	f7fd f8fd 	bl	8007f1c <__sinit>
 800ad22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d0f3      	beq.n	800ad12 <_fflush_r+0xa>
 800ad2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad2c:	07d0      	lsls	r0, r2, #31
 800ad2e:	d404      	bmi.n	800ad3a <_fflush_r+0x32>
 800ad30:	0599      	lsls	r1, r3, #22
 800ad32:	d402      	bmi.n	800ad3a <_fflush_r+0x32>
 800ad34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad36:	f7fd faf2 	bl	800831e <__retarget_lock_acquire_recursive>
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	f7ff ff5f 	bl	800ac00 <__sflush_r>
 800ad42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad44:	07da      	lsls	r2, r3, #31
 800ad46:	4605      	mov	r5, r0
 800ad48:	d4e4      	bmi.n	800ad14 <_fflush_r+0xc>
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	059b      	lsls	r3, r3, #22
 800ad4e:	d4e1      	bmi.n	800ad14 <_fflush_r+0xc>
 800ad50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad52:	f7fd fae5 	bl	8008320 <__retarget_lock_release_recursive>
 800ad56:	e7dd      	b.n	800ad14 <_fflush_r+0xc>

0800ad58 <__swhatbuf_r>:
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad60:	2900      	cmp	r1, #0
 800ad62:	b096      	sub	sp, #88	@ 0x58
 800ad64:	4615      	mov	r5, r2
 800ad66:	461e      	mov	r6, r3
 800ad68:	da0d      	bge.n	800ad86 <__swhatbuf_r+0x2e>
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad70:	f04f 0100 	mov.w	r1, #0
 800ad74:	bf14      	ite	ne
 800ad76:	2340      	movne	r3, #64	@ 0x40
 800ad78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	6031      	str	r1, [r6, #0]
 800ad80:	602b      	str	r3, [r5, #0]
 800ad82:	b016      	add	sp, #88	@ 0x58
 800ad84:	bd70      	pop	{r4, r5, r6, pc}
 800ad86:	466a      	mov	r2, sp
 800ad88:	f000 f874 	bl	800ae74 <_fstat_r>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	dbec      	blt.n	800ad6a <__swhatbuf_r+0x12>
 800ad90:	9901      	ldr	r1, [sp, #4]
 800ad92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad9a:	4259      	negs	r1, r3
 800ad9c:	4159      	adcs	r1, r3
 800ad9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ada2:	e7eb      	b.n	800ad7c <__swhatbuf_r+0x24>

0800ada4 <__smakebuf_r>:
 800ada4:	898b      	ldrh	r3, [r1, #12]
 800ada6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ada8:	079d      	lsls	r5, r3, #30
 800adaa:	4606      	mov	r6, r0
 800adac:	460c      	mov	r4, r1
 800adae:	d507      	bpl.n	800adc0 <__smakebuf_r+0x1c>
 800adb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	6123      	str	r3, [r4, #16]
 800adb8:	2301      	movs	r3, #1
 800adba:	6163      	str	r3, [r4, #20]
 800adbc:	b003      	add	sp, #12
 800adbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adc0:	ab01      	add	r3, sp, #4
 800adc2:	466a      	mov	r2, sp
 800adc4:	f7ff ffc8 	bl	800ad58 <__swhatbuf_r>
 800adc8:	9f00      	ldr	r7, [sp, #0]
 800adca:	4605      	mov	r5, r0
 800adcc:	4639      	mov	r1, r7
 800adce:	4630      	mov	r0, r6
 800add0:	f7fc f920 	bl	8007014 <_malloc_r>
 800add4:	b948      	cbnz	r0, 800adea <__smakebuf_r+0x46>
 800add6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adda:	059a      	lsls	r2, r3, #22
 800addc:	d4ee      	bmi.n	800adbc <__smakebuf_r+0x18>
 800adde:	f023 0303 	bic.w	r3, r3, #3
 800ade2:	f043 0302 	orr.w	r3, r3, #2
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	e7e2      	b.n	800adb0 <__smakebuf_r+0xc>
 800adea:	89a3      	ldrh	r3, [r4, #12]
 800adec:	6020      	str	r0, [r4, #0]
 800adee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	9b01      	ldr	r3, [sp, #4]
 800adf6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800adfa:	b15b      	cbz	r3, 800ae14 <__smakebuf_r+0x70>
 800adfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae00:	4630      	mov	r0, r6
 800ae02:	f000 f849 	bl	800ae98 <_isatty_r>
 800ae06:	b128      	cbz	r0, 800ae14 <__smakebuf_r+0x70>
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	f023 0303 	bic.w	r3, r3, #3
 800ae0e:	f043 0301 	orr.w	r3, r3, #1
 800ae12:	81a3      	strh	r3, [r4, #12]
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	431d      	orrs	r5, r3
 800ae18:	81a5      	strh	r5, [r4, #12]
 800ae1a:	e7cf      	b.n	800adbc <__smakebuf_r+0x18>

0800ae1c <memmove>:
 800ae1c:	4288      	cmp	r0, r1
 800ae1e:	b510      	push	{r4, lr}
 800ae20:	eb01 0402 	add.w	r4, r1, r2
 800ae24:	d902      	bls.n	800ae2c <memmove+0x10>
 800ae26:	4284      	cmp	r4, r0
 800ae28:	4623      	mov	r3, r4
 800ae2a:	d807      	bhi.n	800ae3c <memmove+0x20>
 800ae2c:	1e43      	subs	r3, r0, #1
 800ae2e:	42a1      	cmp	r1, r4
 800ae30:	d008      	beq.n	800ae44 <memmove+0x28>
 800ae32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae3a:	e7f8      	b.n	800ae2e <memmove+0x12>
 800ae3c:	4402      	add	r2, r0
 800ae3e:	4601      	mov	r1, r0
 800ae40:	428a      	cmp	r2, r1
 800ae42:	d100      	bne.n	800ae46 <memmove+0x2a>
 800ae44:	bd10      	pop	{r4, pc}
 800ae46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae4e:	e7f7      	b.n	800ae40 <memmove+0x24>

0800ae50 <strncmp>:
 800ae50:	b510      	push	{r4, lr}
 800ae52:	b16a      	cbz	r2, 800ae70 <strncmp+0x20>
 800ae54:	3901      	subs	r1, #1
 800ae56:	1884      	adds	r4, r0, r2
 800ae58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d103      	bne.n	800ae6c <strncmp+0x1c>
 800ae64:	42a0      	cmp	r0, r4
 800ae66:	d001      	beq.n	800ae6c <strncmp+0x1c>
 800ae68:	2a00      	cmp	r2, #0
 800ae6a:	d1f5      	bne.n	800ae58 <strncmp+0x8>
 800ae6c:	1ad0      	subs	r0, r2, r3
 800ae6e:	bd10      	pop	{r4, pc}
 800ae70:	4610      	mov	r0, r2
 800ae72:	e7fc      	b.n	800ae6e <strncmp+0x1e>

0800ae74 <_fstat_r>:
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	4d07      	ldr	r5, [pc, #28]	@ (800ae94 <_fstat_r+0x20>)
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	4608      	mov	r0, r1
 800ae7e:	4611      	mov	r1, r2
 800ae80:	602b      	str	r3, [r5, #0]
 800ae82:	f7f8 f9e3 	bl	800324c <_fstat>
 800ae86:	1c43      	adds	r3, r0, #1
 800ae88:	d102      	bne.n	800ae90 <_fstat_r+0x1c>
 800ae8a:	682b      	ldr	r3, [r5, #0]
 800ae8c:	b103      	cbz	r3, 800ae90 <_fstat_r+0x1c>
 800ae8e:	6023      	str	r3, [r4, #0]
 800ae90:	bd38      	pop	{r3, r4, r5, pc}
 800ae92:	bf00      	nop
 800ae94:	200009c4 	.word	0x200009c4

0800ae98 <_isatty_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4d06      	ldr	r5, [pc, #24]	@ (800aeb4 <_isatty_r+0x1c>)
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4604      	mov	r4, r0
 800aea0:	4608      	mov	r0, r1
 800aea2:	602b      	str	r3, [r5, #0]
 800aea4:	f7f8 f9e2 	bl	800326c <_isatty>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	d102      	bne.n	800aeb2 <_isatty_r+0x1a>
 800aeac:	682b      	ldr	r3, [r5, #0]
 800aeae:	b103      	cbz	r3, 800aeb2 <_isatty_r+0x1a>
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	200009c4 	.word	0x200009c4

0800aeb8 <memcpy>:
 800aeb8:	440a      	add	r2, r1
 800aeba:	4291      	cmp	r1, r2
 800aebc:	f100 33ff 	add.w	r3, r0, #4294967295
 800aec0:	d100      	bne.n	800aec4 <memcpy+0xc>
 800aec2:	4770      	bx	lr
 800aec4:	b510      	push	{r4, lr}
 800aec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aece:	4291      	cmp	r1, r2
 800aed0:	d1f9      	bne.n	800aec6 <memcpy+0xe>
 800aed2:	bd10      	pop	{r4, pc}
 800aed4:	0000      	movs	r0, r0
	...

0800aed8 <nan>:
 800aed8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aee0 <nan+0x8>
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	00000000 	.word	0x00000000
 800aee4:	7ff80000 	.word	0x7ff80000

0800aee8 <__assert_func>:
 800aee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aeea:	4614      	mov	r4, r2
 800aeec:	461a      	mov	r2, r3
 800aeee:	4b09      	ldr	r3, [pc, #36]	@ (800af14 <__assert_func+0x2c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4605      	mov	r5, r0
 800aef4:	68d8      	ldr	r0, [r3, #12]
 800aef6:	b954      	cbnz	r4, 800af0e <__assert_func+0x26>
 800aef8:	4b07      	ldr	r3, [pc, #28]	@ (800af18 <__assert_func+0x30>)
 800aefa:	461c      	mov	r4, r3
 800aefc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af00:	9100      	str	r1, [sp, #0]
 800af02:	462b      	mov	r3, r5
 800af04:	4905      	ldr	r1, [pc, #20]	@ (800af1c <__assert_func+0x34>)
 800af06:	f000 fba7 	bl	800b658 <fiprintf>
 800af0a:	f000 fbb7 	bl	800b67c <abort>
 800af0e:	4b04      	ldr	r3, [pc, #16]	@ (800af20 <__assert_func+0x38>)
 800af10:	e7f4      	b.n	800aefc <__assert_func+0x14>
 800af12:	bf00      	nop
 800af14:	20000038 	.word	0x20000038
 800af18:	0800c35d 	.word	0x0800c35d
 800af1c:	0800c32f 	.word	0x0800c32f
 800af20:	0800c322 	.word	0x0800c322

0800af24 <_calloc_r>:
 800af24:	b570      	push	{r4, r5, r6, lr}
 800af26:	fba1 5402 	umull	r5, r4, r1, r2
 800af2a:	b93c      	cbnz	r4, 800af3c <_calloc_r+0x18>
 800af2c:	4629      	mov	r1, r5
 800af2e:	f7fc f871 	bl	8007014 <_malloc_r>
 800af32:	4606      	mov	r6, r0
 800af34:	b928      	cbnz	r0, 800af42 <_calloc_r+0x1e>
 800af36:	2600      	movs	r6, #0
 800af38:	4630      	mov	r0, r6
 800af3a:	bd70      	pop	{r4, r5, r6, pc}
 800af3c:	220c      	movs	r2, #12
 800af3e:	6002      	str	r2, [r0, #0]
 800af40:	e7f9      	b.n	800af36 <_calloc_r+0x12>
 800af42:	462a      	mov	r2, r5
 800af44:	4621      	mov	r1, r4
 800af46:	f7fd f95d 	bl	8008204 <memset>
 800af4a:	e7f5      	b.n	800af38 <_calloc_r+0x14>

0800af4c <rshift>:
 800af4c:	6903      	ldr	r3, [r0, #16]
 800af4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800af52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800af5a:	f100 0414 	add.w	r4, r0, #20
 800af5e:	dd45      	ble.n	800afec <rshift+0xa0>
 800af60:	f011 011f 	ands.w	r1, r1, #31
 800af64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800af68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800af6c:	d10c      	bne.n	800af88 <rshift+0x3c>
 800af6e:	f100 0710 	add.w	r7, r0, #16
 800af72:	4629      	mov	r1, r5
 800af74:	42b1      	cmp	r1, r6
 800af76:	d334      	bcc.n	800afe2 <rshift+0x96>
 800af78:	1a9b      	subs	r3, r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	1eea      	subs	r2, r5, #3
 800af7e:	4296      	cmp	r6, r2
 800af80:	bf38      	it	cc
 800af82:	2300      	movcc	r3, #0
 800af84:	4423      	add	r3, r4
 800af86:	e015      	b.n	800afb4 <rshift+0x68>
 800af88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af8c:	f1c1 0820 	rsb	r8, r1, #32
 800af90:	40cf      	lsrs	r7, r1
 800af92:	f105 0e04 	add.w	lr, r5, #4
 800af96:	46a1      	mov	r9, r4
 800af98:	4576      	cmp	r6, lr
 800af9a:	46f4      	mov	ip, lr
 800af9c:	d815      	bhi.n	800afca <rshift+0x7e>
 800af9e:	1a9a      	subs	r2, r3, r2
 800afa0:	0092      	lsls	r2, r2, #2
 800afa2:	3a04      	subs	r2, #4
 800afa4:	3501      	adds	r5, #1
 800afa6:	42ae      	cmp	r6, r5
 800afa8:	bf38      	it	cc
 800afaa:	2200      	movcc	r2, #0
 800afac:	18a3      	adds	r3, r4, r2
 800afae:	50a7      	str	r7, [r4, r2]
 800afb0:	b107      	cbz	r7, 800afb4 <rshift+0x68>
 800afb2:	3304      	adds	r3, #4
 800afb4:	1b1a      	subs	r2, r3, r4
 800afb6:	42a3      	cmp	r3, r4
 800afb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800afbc:	bf08      	it	eq
 800afbe:	2300      	moveq	r3, #0
 800afc0:	6102      	str	r2, [r0, #16]
 800afc2:	bf08      	it	eq
 800afc4:	6143      	streq	r3, [r0, #20]
 800afc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afca:	f8dc c000 	ldr.w	ip, [ip]
 800afce:	fa0c fc08 	lsl.w	ip, ip, r8
 800afd2:	ea4c 0707 	orr.w	r7, ip, r7
 800afd6:	f849 7b04 	str.w	r7, [r9], #4
 800afda:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afde:	40cf      	lsrs	r7, r1
 800afe0:	e7da      	b.n	800af98 <rshift+0x4c>
 800afe2:	f851 cb04 	ldr.w	ip, [r1], #4
 800afe6:	f847 cf04 	str.w	ip, [r7, #4]!
 800afea:	e7c3      	b.n	800af74 <rshift+0x28>
 800afec:	4623      	mov	r3, r4
 800afee:	e7e1      	b.n	800afb4 <rshift+0x68>

0800aff0 <__hexdig_fun>:
 800aff0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aff4:	2b09      	cmp	r3, #9
 800aff6:	d802      	bhi.n	800affe <__hexdig_fun+0xe>
 800aff8:	3820      	subs	r0, #32
 800affa:	b2c0      	uxtb	r0, r0
 800affc:	4770      	bx	lr
 800affe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b002:	2b05      	cmp	r3, #5
 800b004:	d801      	bhi.n	800b00a <__hexdig_fun+0x1a>
 800b006:	3847      	subs	r0, #71	@ 0x47
 800b008:	e7f7      	b.n	800affa <__hexdig_fun+0xa>
 800b00a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b00e:	2b05      	cmp	r3, #5
 800b010:	d801      	bhi.n	800b016 <__hexdig_fun+0x26>
 800b012:	3827      	subs	r0, #39	@ 0x27
 800b014:	e7f1      	b.n	800affa <__hexdig_fun+0xa>
 800b016:	2000      	movs	r0, #0
 800b018:	4770      	bx	lr
	...

0800b01c <__gethex>:
 800b01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b020:	b085      	sub	sp, #20
 800b022:	468a      	mov	sl, r1
 800b024:	9302      	str	r3, [sp, #8]
 800b026:	680b      	ldr	r3, [r1, #0]
 800b028:	9001      	str	r0, [sp, #4]
 800b02a:	4690      	mov	r8, r2
 800b02c:	1c9c      	adds	r4, r3, #2
 800b02e:	46a1      	mov	r9, r4
 800b030:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b034:	2830      	cmp	r0, #48	@ 0x30
 800b036:	d0fa      	beq.n	800b02e <__gethex+0x12>
 800b038:	eba9 0303 	sub.w	r3, r9, r3
 800b03c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b040:	f7ff ffd6 	bl	800aff0 <__hexdig_fun>
 800b044:	4605      	mov	r5, r0
 800b046:	2800      	cmp	r0, #0
 800b048:	d168      	bne.n	800b11c <__gethex+0x100>
 800b04a:	49a0      	ldr	r1, [pc, #640]	@ (800b2cc <__gethex+0x2b0>)
 800b04c:	2201      	movs	r2, #1
 800b04e:	4648      	mov	r0, r9
 800b050:	f7ff fefe 	bl	800ae50 <strncmp>
 800b054:	4607      	mov	r7, r0
 800b056:	2800      	cmp	r0, #0
 800b058:	d167      	bne.n	800b12a <__gethex+0x10e>
 800b05a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b05e:	4626      	mov	r6, r4
 800b060:	f7ff ffc6 	bl	800aff0 <__hexdig_fun>
 800b064:	2800      	cmp	r0, #0
 800b066:	d062      	beq.n	800b12e <__gethex+0x112>
 800b068:	4623      	mov	r3, r4
 800b06a:	7818      	ldrb	r0, [r3, #0]
 800b06c:	2830      	cmp	r0, #48	@ 0x30
 800b06e:	4699      	mov	r9, r3
 800b070:	f103 0301 	add.w	r3, r3, #1
 800b074:	d0f9      	beq.n	800b06a <__gethex+0x4e>
 800b076:	f7ff ffbb 	bl	800aff0 <__hexdig_fun>
 800b07a:	fab0 f580 	clz	r5, r0
 800b07e:	096d      	lsrs	r5, r5, #5
 800b080:	f04f 0b01 	mov.w	fp, #1
 800b084:	464a      	mov	r2, r9
 800b086:	4616      	mov	r6, r2
 800b088:	3201      	adds	r2, #1
 800b08a:	7830      	ldrb	r0, [r6, #0]
 800b08c:	f7ff ffb0 	bl	800aff0 <__hexdig_fun>
 800b090:	2800      	cmp	r0, #0
 800b092:	d1f8      	bne.n	800b086 <__gethex+0x6a>
 800b094:	498d      	ldr	r1, [pc, #564]	@ (800b2cc <__gethex+0x2b0>)
 800b096:	2201      	movs	r2, #1
 800b098:	4630      	mov	r0, r6
 800b09a:	f7ff fed9 	bl	800ae50 <strncmp>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d13f      	bne.n	800b122 <__gethex+0x106>
 800b0a2:	b944      	cbnz	r4, 800b0b6 <__gethex+0x9a>
 800b0a4:	1c74      	adds	r4, r6, #1
 800b0a6:	4622      	mov	r2, r4
 800b0a8:	4616      	mov	r6, r2
 800b0aa:	3201      	adds	r2, #1
 800b0ac:	7830      	ldrb	r0, [r6, #0]
 800b0ae:	f7ff ff9f 	bl	800aff0 <__hexdig_fun>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d1f8      	bne.n	800b0a8 <__gethex+0x8c>
 800b0b6:	1ba4      	subs	r4, r4, r6
 800b0b8:	00a7      	lsls	r7, r4, #2
 800b0ba:	7833      	ldrb	r3, [r6, #0]
 800b0bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b0c0:	2b50      	cmp	r3, #80	@ 0x50
 800b0c2:	d13e      	bne.n	800b142 <__gethex+0x126>
 800b0c4:	7873      	ldrb	r3, [r6, #1]
 800b0c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b0c8:	d033      	beq.n	800b132 <__gethex+0x116>
 800b0ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800b0cc:	d034      	beq.n	800b138 <__gethex+0x11c>
 800b0ce:	1c71      	adds	r1, r6, #1
 800b0d0:	2400      	movs	r4, #0
 800b0d2:	7808      	ldrb	r0, [r1, #0]
 800b0d4:	f7ff ff8c 	bl	800aff0 <__hexdig_fun>
 800b0d8:	1e43      	subs	r3, r0, #1
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b18      	cmp	r3, #24
 800b0de:	d830      	bhi.n	800b142 <__gethex+0x126>
 800b0e0:	f1a0 0210 	sub.w	r2, r0, #16
 800b0e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b0e8:	f7ff ff82 	bl	800aff0 <__hexdig_fun>
 800b0ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800b0f0:	fa5f fc8c 	uxtb.w	ip, ip
 800b0f4:	f1bc 0f18 	cmp.w	ip, #24
 800b0f8:	f04f 030a 	mov.w	r3, #10
 800b0fc:	d91e      	bls.n	800b13c <__gethex+0x120>
 800b0fe:	b104      	cbz	r4, 800b102 <__gethex+0xe6>
 800b100:	4252      	negs	r2, r2
 800b102:	4417      	add	r7, r2
 800b104:	f8ca 1000 	str.w	r1, [sl]
 800b108:	b1ed      	cbz	r5, 800b146 <__gethex+0x12a>
 800b10a:	f1bb 0f00 	cmp.w	fp, #0
 800b10e:	bf0c      	ite	eq
 800b110:	2506      	moveq	r5, #6
 800b112:	2500      	movne	r5, #0
 800b114:	4628      	mov	r0, r5
 800b116:	b005      	add	sp, #20
 800b118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11c:	2500      	movs	r5, #0
 800b11e:	462c      	mov	r4, r5
 800b120:	e7b0      	b.n	800b084 <__gethex+0x68>
 800b122:	2c00      	cmp	r4, #0
 800b124:	d1c7      	bne.n	800b0b6 <__gethex+0x9a>
 800b126:	4627      	mov	r7, r4
 800b128:	e7c7      	b.n	800b0ba <__gethex+0x9e>
 800b12a:	464e      	mov	r6, r9
 800b12c:	462f      	mov	r7, r5
 800b12e:	2501      	movs	r5, #1
 800b130:	e7c3      	b.n	800b0ba <__gethex+0x9e>
 800b132:	2400      	movs	r4, #0
 800b134:	1cb1      	adds	r1, r6, #2
 800b136:	e7cc      	b.n	800b0d2 <__gethex+0xb6>
 800b138:	2401      	movs	r4, #1
 800b13a:	e7fb      	b.n	800b134 <__gethex+0x118>
 800b13c:	fb03 0002 	mla	r0, r3, r2, r0
 800b140:	e7ce      	b.n	800b0e0 <__gethex+0xc4>
 800b142:	4631      	mov	r1, r6
 800b144:	e7de      	b.n	800b104 <__gethex+0xe8>
 800b146:	eba6 0309 	sub.w	r3, r6, r9
 800b14a:	3b01      	subs	r3, #1
 800b14c:	4629      	mov	r1, r5
 800b14e:	2b07      	cmp	r3, #7
 800b150:	dc0a      	bgt.n	800b168 <__gethex+0x14c>
 800b152:	9801      	ldr	r0, [sp, #4]
 800b154:	f7fd ff82 	bl	800905c <_Balloc>
 800b158:	4604      	mov	r4, r0
 800b15a:	b940      	cbnz	r0, 800b16e <__gethex+0x152>
 800b15c:	4b5c      	ldr	r3, [pc, #368]	@ (800b2d0 <__gethex+0x2b4>)
 800b15e:	4602      	mov	r2, r0
 800b160:	21e4      	movs	r1, #228	@ 0xe4
 800b162:	485c      	ldr	r0, [pc, #368]	@ (800b2d4 <__gethex+0x2b8>)
 800b164:	f7ff fec0 	bl	800aee8 <__assert_func>
 800b168:	3101      	adds	r1, #1
 800b16a:	105b      	asrs	r3, r3, #1
 800b16c:	e7ef      	b.n	800b14e <__gethex+0x132>
 800b16e:	f100 0a14 	add.w	sl, r0, #20
 800b172:	2300      	movs	r3, #0
 800b174:	4655      	mov	r5, sl
 800b176:	469b      	mov	fp, r3
 800b178:	45b1      	cmp	r9, r6
 800b17a:	d337      	bcc.n	800b1ec <__gethex+0x1d0>
 800b17c:	f845 bb04 	str.w	fp, [r5], #4
 800b180:	eba5 050a 	sub.w	r5, r5, sl
 800b184:	10ad      	asrs	r5, r5, #2
 800b186:	6125      	str	r5, [r4, #16]
 800b188:	4658      	mov	r0, fp
 800b18a:	f7fe f859 	bl	8009240 <__hi0bits>
 800b18e:	016d      	lsls	r5, r5, #5
 800b190:	f8d8 6000 	ldr.w	r6, [r8]
 800b194:	1a2d      	subs	r5, r5, r0
 800b196:	42b5      	cmp	r5, r6
 800b198:	dd54      	ble.n	800b244 <__gethex+0x228>
 800b19a:	1bad      	subs	r5, r5, r6
 800b19c:	4629      	mov	r1, r5
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f7fe fbed 	bl	800997e <__any_on>
 800b1a4:	4681      	mov	r9, r0
 800b1a6:	b178      	cbz	r0, 800b1c8 <__gethex+0x1ac>
 800b1a8:	1e6b      	subs	r3, r5, #1
 800b1aa:	1159      	asrs	r1, r3, #5
 800b1ac:	f003 021f 	and.w	r2, r3, #31
 800b1b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b1b4:	f04f 0901 	mov.w	r9, #1
 800b1b8:	fa09 f202 	lsl.w	r2, r9, r2
 800b1bc:	420a      	tst	r2, r1
 800b1be:	d003      	beq.n	800b1c8 <__gethex+0x1ac>
 800b1c0:	454b      	cmp	r3, r9
 800b1c2:	dc36      	bgt.n	800b232 <__gethex+0x216>
 800b1c4:	f04f 0902 	mov.w	r9, #2
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f7ff febe 	bl	800af4c <rshift>
 800b1d0:	442f      	add	r7, r5
 800b1d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1d6:	42bb      	cmp	r3, r7
 800b1d8:	da42      	bge.n	800b260 <__gethex+0x244>
 800b1da:	9801      	ldr	r0, [sp, #4]
 800b1dc:	4621      	mov	r1, r4
 800b1de:	f7fd ff7d 	bl	80090dc <_Bfree>
 800b1e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	6013      	str	r3, [r2, #0]
 800b1e8:	25a3      	movs	r5, #163	@ 0xa3
 800b1ea:	e793      	b.n	800b114 <__gethex+0xf8>
 800b1ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b1f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b1f2:	d012      	beq.n	800b21a <__gethex+0x1fe>
 800b1f4:	2b20      	cmp	r3, #32
 800b1f6:	d104      	bne.n	800b202 <__gethex+0x1e6>
 800b1f8:	f845 bb04 	str.w	fp, [r5], #4
 800b1fc:	f04f 0b00 	mov.w	fp, #0
 800b200:	465b      	mov	r3, fp
 800b202:	7830      	ldrb	r0, [r6, #0]
 800b204:	9303      	str	r3, [sp, #12]
 800b206:	f7ff fef3 	bl	800aff0 <__hexdig_fun>
 800b20a:	9b03      	ldr	r3, [sp, #12]
 800b20c:	f000 000f 	and.w	r0, r0, #15
 800b210:	4098      	lsls	r0, r3
 800b212:	ea4b 0b00 	orr.w	fp, fp, r0
 800b216:	3304      	adds	r3, #4
 800b218:	e7ae      	b.n	800b178 <__gethex+0x15c>
 800b21a:	45b1      	cmp	r9, r6
 800b21c:	d8ea      	bhi.n	800b1f4 <__gethex+0x1d8>
 800b21e:	492b      	ldr	r1, [pc, #172]	@ (800b2cc <__gethex+0x2b0>)
 800b220:	9303      	str	r3, [sp, #12]
 800b222:	2201      	movs	r2, #1
 800b224:	4630      	mov	r0, r6
 800b226:	f7ff fe13 	bl	800ae50 <strncmp>
 800b22a:	9b03      	ldr	r3, [sp, #12]
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d1e1      	bne.n	800b1f4 <__gethex+0x1d8>
 800b230:	e7a2      	b.n	800b178 <__gethex+0x15c>
 800b232:	1ea9      	subs	r1, r5, #2
 800b234:	4620      	mov	r0, r4
 800b236:	f7fe fba2 	bl	800997e <__any_on>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d0c2      	beq.n	800b1c4 <__gethex+0x1a8>
 800b23e:	f04f 0903 	mov.w	r9, #3
 800b242:	e7c1      	b.n	800b1c8 <__gethex+0x1ac>
 800b244:	da09      	bge.n	800b25a <__gethex+0x23e>
 800b246:	1b75      	subs	r5, r6, r5
 800b248:	4621      	mov	r1, r4
 800b24a:	9801      	ldr	r0, [sp, #4]
 800b24c:	462a      	mov	r2, r5
 800b24e:	f7fe f95d 	bl	800950c <__lshift>
 800b252:	1b7f      	subs	r7, r7, r5
 800b254:	4604      	mov	r4, r0
 800b256:	f100 0a14 	add.w	sl, r0, #20
 800b25a:	f04f 0900 	mov.w	r9, #0
 800b25e:	e7b8      	b.n	800b1d2 <__gethex+0x1b6>
 800b260:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b264:	42bd      	cmp	r5, r7
 800b266:	dd6f      	ble.n	800b348 <__gethex+0x32c>
 800b268:	1bed      	subs	r5, r5, r7
 800b26a:	42ae      	cmp	r6, r5
 800b26c:	dc34      	bgt.n	800b2d8 <__gethex+0x2bc>
 800b26e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b272:	2b02      	cmp	r3, #2
 800b274:	d022      	beq.n	800b2bc <__gethex+0x2a0>
 800b276:	2b03      	cmp	r3, #3
 800b278:	d024      	beq.n	800b2c4 <__gethex+0x2a8>
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d115      	bne.n	800b2aa <__gethex+0x28e>
 800b27e:	42ae      	cmp	r6, r5
 800b280:	d113      	bne.n	800b2aa <__gethex+0x28e>
 800b282:	2e01      	cmp	r6, #1
 800b284:	d10b      	bne.n	800b29e <__gethex+0x282>
 800b286:	9a02      	ldr	r2, [sp, #8]
 800b288:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b28c:	6013      	str	r3, [r2, #0]
 800b28e:	2301      	movs	r3, #1
 800b290:	6123      	str	r3, [r4, #16]
 800b292:	f8ca 3000 	str.w	r3, [sl]
 800b296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b298:	2562      	movs	r5, #98	@ 0x62
 800b29a:	601c      	str	r4, [r3, #0]
 800b29c:	e73a      	b.n	800b114 <__gethex+0xf8>
 800b29e:	1e71      	subs	r1, r6, #1
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f7fe fb6c 	bl	800997e <__any_on>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d1ed      	bne.n	800b286 <__gethex+0x26a>
 800b2aa:	9801      	ldr	r0, [sp, #4]
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	f7fd ff15 	bl	80090dc <_Bfree>
 800b2b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	2550      	movs	r5, #80	@ 0x50
 800b2ba:	e72b      	b.n	800b114 <__gethex+0xf8>
 800b2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1f3      	bne.n	800b2aa <__gethex+0x28e>
 800b2c2:	e7e0      	b.n	800b286 <__gethex+0x26a>
 800b2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1dd      	bne.n	800b286 <__gethex+0x26a>
 800b2ca:	e7ee      	b.n	800b2aa <__gethex+0x28e>
 800b2cc:	0800c1b0 	.word	0x0800c1b0
 800b2d0:	0800c045 	.word	0x0800c045
 800b2d4:	0800c35e 	.word	0x0800c35e
 800b2d8:	1e6f      	subs	r7, r5, #1
 800b2da:	f1b9 0f00 	cmp.w	r9, #0
 800b2de:	d130      	bne.n	800b342 <__gethex+0x326>
 800b2e0:	b127      	cbz	r7, 800b2ec <__gethex+0x2d0>
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f7fe fb4a 	bl	800997e <__any_on>
 800b2ea:	4681      	mov	r9, r0
 800b2ec:	117a      	asrs	r2, r7, #5
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b2f4:	f007 071f 	and.w	r7, r7, #31
 800b2f8:	40bb      	lsls	r3, r7
 800b2fa:	4213      	tst	r3, r2
 800b2fc:	4629      	mov	r1, r5
 800b2fe:	4620      	mov	r0, r4
 800b300:	bf18      	it	ne
 800b302:	f049 0902 	orrne.w	r9, r9, #2
 800b306:	f7ff fe21 	bl	800af4c <rshift>
 800b30a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b30e:	1b76      	subs	r6, r6, r5
 800b310:	2502      	movs	r5, #2
 800b312:	f1b9 0f00 	cmp.w	r9, #0
 800b316:	d047      	beq.n	800b3a8 <__gethex+0x38c>
 800b318:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d015      	beq.n	800b34c <__gethex+0x330>
 800b320:	2b03      	cmp	r3, #3
 800b322:	d017      	beq.n	800b354 <__gethex+0x338>
 800b324:	2b01      	cmp	r3, #1
 800b326:	d109      	bne.n	800b33c <__gethex+0x320>
 800b328:	f019 0f02 	tst.w	r9, #2
 800b32c:	d006      	beq.n	800b33c <__gethex+0x320>
 800b32e:	f8da 3000 	ldr.w	r3, [sl]
 800b332:	ea49 0903 	orr.w	r9, r9, r3
 800b336:	f019 0f01 	tst.w	r9, #1
 800b33a:	d10e      	bne.n	800b35a <__gethex+0x33e>
 800b33c:	f045 0510 	orr.w	r5, r5, #16
 800b340:	e032      	b.n	800b3a8 <__gethex+0x38c>
 800b342:	f04f 0901 	mov.w	r9, #1
 800b346:	e7d1      	b.n	800b2ec <__gethex+0x2d0>
 800b348:	2501      	movs	r5, #1
 800b34a:	e7e2      	b.n	800b312 <__gethex+0x2f6>
 800b34c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b34e:	f1c3 0301 	rsb	r3, r3, #1
 800b352:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0f0      	beq.n	800b33c <__gethex+0x320>
 800b35a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b35e:	f104 0314 	add.w	r3, r4, #20
 800b362:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b366:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b36a:	f04f 0c00 	mov.w	ip, #0
 800b36e:	4618      	mov	r0, r3
 800b370:	f853 2b04 	ldr.w	r2, [r3], #4
 800b374:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b378:	d01b      	beq.n	800b3b2 <__gethex+0x396>
 800b37a:	3201      	adds	r2, #1
 800b37c:	6002      	str	r2, [r0, #0]
 800b37e:	2d02      	cmp	r5, #2
 800b380:	f104 0314 	add.w	r3, r4, #20
 800b384:	d13c      	bne.n	800b400 <__gethex+0x3e4>
 800b386:	f8d8 2000 	ldr.w	r2, [r8]
 800b38a:	3a01      	subs	r2, #1
 800b38c:	42b2      	cmp	r2, r6
 800b38e:	d109      	bne.n	800b3a4 <__gethex+0x388>
 800b390:	1171      	asrs	r1, r6, #5
 800b392:	2201      	movs	r2, #1
 800b394:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b398:	f006 061f 	and.w	r6, r6, #31
 800b39c:	fa02 f606 	lsl.w	r6, r2, r6
 800b3a0:	421e      	tst	r6, r3
 800b3a2:	d13a      	bne.n	800b41a <__gethex+0x3fe>
 800b3a4:	f045 0520 	orr.w	r5, r5, #32
 800b3a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3aa:	601c      	str	r4, [r3, #0]
 800b3ac:	9b02      	ldr	r3, [sp, #8]
 800b3ae:	601f      	str	r7, [r3, #0]
 800b3b0:	e6b0      	b.n	800b114 <__gethex+0xf8>
 800b3b2:	4299      	cmp	r1, r3
 800b3b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b3b8:	d8d9      	bhi.n	800b36e <__gethex+0x352>
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	459b      	cmp	fp, r3
 800b3be:	db17      	blt.n	800b3f0 <__gethex+0x3d4>
 800b3c0:	6861      	ldr	r1, [r4, #4]
 800b3c2:	9801      	ldr	r0, [sp, #4]
 800b3c4:	3101      	adds	r1, #1
 800b3c6:	f7fd fe49 	bl	800905c <_Balloc>
 800b3ca:	4681      	mov	r9, r0
 800b3cc:	b918      	cbnz	r0, 800b3d6 <__gethex+0x3ba>
 800b3ce:	4b1a      	ldr	r3, [pc, #104]	@ (800b438 <__gethex+0x41c>)
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	2184      	movs	r1, #132	@ 0x84
 800b3d4:	e6c5      	b.n	800b162 <__gethex+0x146>
 800b3d6:	6922      	ldr	r2, [r4, #16]
 800b3d8:	3202      	adds	r2, #2
 800b3da:	f104 010c 	add.w	r1, r4, #12
 800b3de:	0092      	lsls	r2, r2, #2
 800b3e0:	300c      	adds	r0, #12
 800b3e2:	f7ff fd69 	bl	800aeb8 <memcpy>
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	9801      	ldr	r0, [sp, #4]
 800b3ea:	f7fd fe77 	bl	80090dc <_Bfree>
 800b3ee:	464c      	mov	r4, r9
 800b3f0:	6923      	ldr	r3, [r4, #16]
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b3f8:	6122      	str	r2, [r4, #16]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	615a      	str	r2, [r3, #20]
 800b3fe:	e7be      	b.n	800b37e <__gethex+0x362>
 800b400:	6922      	ldr	r2, [r4, #16]
 800b402:	455a      	cmp	r2, fp
 800b404:	dd0b      	ble.n	800b41e <__gethex+0x402>
 800b406:	2101      	movs	r1, #1
 800b408:	4620      	mov	r0, r4
 800b40a:	f7ff fd9f 	bl	800af4c <rshift>
 800b40e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b412:	3701      	adds	r7, #1
 800b414:	42bb      	cmp	r3, r7
 800b416:	f6ff aee0 	blt.w	800b1da <__gethex+0x1be>
 800b41a:	2501      	movs	r5, #1
 800b41c:	e7c2      	b.n	800b3a4 <__gethex+0x388>
 800b41e:	f016 061f 	ands.w	r6, r6, #31
 800b422:	d0fa      	beq.n	800b41a <__gethex+0x3fe>
 800b424:	4453      	add	r3, sl
 800b426:	f1c6 0620 	rsb	r6, r6, #32
 800b42a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b42e:	f7fd ff07 	bl	8009240 <__hi0bits>
 800b432:	42b0      	cmp	r0, r6
 800b434:	dbe7      	blt.n	800b406 <__gethex+0x3ea>
 800b436:	e7f0      	b.n	800b41a <__gethex+0x3fe>
 800b438:	0800c045 	.word	0x0800c045

0800b43c <L_shift>:
 800b43c:	f1c2 0208 	rsb	r2, r2, #8
 800b440:	0092      	lsls	r2, r2, #2
 800b442:	b570      	push	{r4, r5, r6, lr}
 800b444:	f1c2 0620 	rsb	r6, r2, #32
 800b448:	6843      	ldr	r3, [r0, #4]
 800b44a:	6804      	ldr	r4, [r0, #0]
 800b44c:	fa03 f506 	lsl.w	r5, r3, r6
 800b450:	432c      	orrs	r4, r5
 800b452:	40d3      	lsrs	r3, r2
 800b454:	6004      	str	r4, [r0, #0]
 800b456:	f840 3f04 	str.w	r3, [r0, #4]!
 800b45a:	4288      	cmp	r0, r1
 800b45c:	d3f4      	bcc.n	800b448 <L_shift+0xc>
 800b45e:	bd70      	pop	{r4, r5, r6, pc}

0800b460 <__match>:
 800b460:	b530      	push	{r4, r5, lr}
 800b462:	6803      	ldr	r3, [r0, #0]
 800b464:	3301      	adds	r3, #1
 800b466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b46a:	b914      	cbnz	r4, 800b472 <__match+0x12>
 800b46c:	6003      	str	r3, [r0, #0]
 800b46e:	2001      	movs	r0, #1
 800b470:	bd30      	pop	{r4, r5, pc}
 800b472:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b476:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b47a:	2d19      	cmp	r5, #25
 800b47c:	bf98      	it	ls
 800b47e:	3220      	addls	r2, #32
 800b480:	42a2      	cmp	r2, r4
 800b482:	d0f0      	beq.n	800b466 <__match+0x6>
 800b484:	2000      	movs	r0, #0
 800b486:	e7f3      	b.n	800b470 <__match+0x10>

0800b488 <__hexnan>:
 800b488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48c:	680b      	ldr	r3, [r1, #0]
 800b48e:	6801      	ldr	r1, [r0, #0]
 800b490:	115e      	asrs	r6, r3, #5
 800b492:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b496:	f013 031f 	ands.w	r3, r3, #31
 800b49a:	b087      	sub	sp, #28
 800b49c:	bf18      	it	ne
 800b49e:	3604      	addne	r6, #4
 800b4a0:	2500      	movs	r5, #0
 800b4a2:	1f37      	subs	r7, r6, #4
 800b4a4:	4682      	mov	sl, r0
 800b4a6:	4690      	mov	r8, r2
 800b4a8:	9301      	str	r3, [sp, #4]
 800b4aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800b4ae:	46b9      	mov	r9, r7
 800b4b0:	463c      	mov	r4, r7
 800b4b2:	9502      	str	r5, [sp, #8]
 800b4b4:	46ab      	mov	fp, r5
 800b4b6:	784a      	ldrb	r2, [r1, #1]
 800b4b8:	1c4b      	adds	r3, r1, #1
 800b4ba:	9303      	str	r3, [sp, #12]
 800b4bc:	b342      	cbz	r2, 800b510 <__hexnan+0x88>
 800b4be:	4610      	mov	r0, r2
 800b4c0:	9105      	str	r1, [sp, #20]
 800b4c2:	9204      	str	r2, [sp, #16]
 800b4c4:	f7ff fd94 	bl	800aff0 <__hexdig_fun>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d151      	bne.n	800b570 <__hexnan+0xe8>
 800b4cc:	9a04      	ldr	r2, [sp, #16]
 800b4ce:	9905      	ldr	r1, [sp, #20]
 800b4d0:	2a20      	cmp	r2, #32
 800b4d2:	d818      	bhi.n	800b506 <__hexnan+0x7e>
 800b4d4:	9b02      	ldr	r3, [sp, #8]
 800b4d6:	459b      	cmp	fp, r3
 800b4d8:	dd13      	ble.n	800b502 <__hexnan+0x7a>
 800b4da:	454c      	cmp	r4, r9
 800b4dc:	d206      	bcs.n	800b4ec <__hexnan+0x64>
 800b4de:	2d07      	cmp	r5, #7
 800b4e0:	dc04      	bgt.n	800b4ec <__hexnan+0x64>
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	4649      	mov	r1, r9
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f7ff ffa8 	bl	800b43c <L_shift>
 800b4ec:	4544      	cmp	r4, r8
 800b4ee:	d952      	bls.n	800b596 <__hexnan+0x10e>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	f1a4 0904 	sub.w	r9, r4, #4
 800b4f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4fa:	f8cd b008 	str.w	fp, [sp, #8]
 800b4fe:	464c      	mov	r4, r9
 800b500:	461d      	mov	r5, r3
 800b502:	9903      	ldr	r1, [sp, #12]
 800b504:	e7d7      	b.n	800b4b6 <__hexnan+0x2e>
 800b506:	2a29      	cmp	r2, #41	@ 0x29
 800b508:	d157      	bne.n	800b5ba <__hexnan+0x132>
 800b50a:	3102      	adds	r1, #2
 800b50c:	f8ca 1000 	str.w	r1, [sl]
 800b510:	f1bb 0f00 	cmp.w	fp, #0
 800b514:	d051      	beq.n	800b5ba <__hexnan+0x132>
 800b516:	454c      	cmp	r4, r9
 800b518:	d206      	bcs.n	800b528 <__hexnan+0xa0>
 800b51a:	2d07      	cmp	r5, #7
 800b51c:	dc04      	bgt.n	800b528 <__hexnan+0xa0>
 800b51e:	462a      	mov	r2, r5
 800b520:	4649      	mov	r1, r9
 800b522:	4620      	mov	r0, r4
 800b524:	f7ff ff8a 	bl	800b43c <L_shift>
 800b528:	4544      	cmp	r4, r8
 800b52a:	d936      	bls.n	800b59a <__hexnan+0x112>
 800b52c:	f1a8 0204 	sub.w	r2, r8, #4
 800b530:	4623      	mov	r3, r4
 800b532:	f853 1b04 	ldr.w	r1, [r3], #4
 800b536:	f842 1f04 	str.w	r1, [r2, #4]!
 800b53a:	429f      	cmp	r7, r3
 800b53c:	d2f9      	bcs.n	800b532 <__hexnan+0xaa>
 800b53e:	1b3b      	subs	r3, r7, r4
 800b540:	f023 0303 	bic.w	r3, r3, #3
 800b544:	3304      	adds	r3, #4
 800b546:	3401      	adds	r4, #1
 800b548:	3e03      	subs	r6, #3
 800b54a:	42b4      	cmp	r4, r6
 800b54c:	bf88      	it	hi
 800b54e:	2304      	movhi	r3, #4
 800b550:	4443      	add	r3, r8
 800b552:	2200      	movs	r2, #0
 800b554:	f843 2b04 	str.w	r2, [r3], #4
 800b558:	429f      	cmp	r7, r3
 800b55a:	d2fb      	bcs.n	800b554 <__hexnan+0xcc>
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	b91b      	cbnz	r3, 800b568 <__hexnan+0xe0>
 800b560:	4547      	cmp	r7, r8
 800b562:	d128      	bne.n	800b5b6 <__hexnan+0x12e>
 800b564:	2301      	movs	r3, #1
 800b566:	603b      	str	r3, [r7, #0]
 800b568:	2005      	movs	r0, #5
 800b56a:	b007      	add	sp, #28
 800b56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b570:	3501      	adds	r5, #1
 800b572:	2d08      	cmp	r5, #8
 800b574:	f10b 0b01 	add.w	fp, fp, #1
 800b578:	dd06      	ble.n	800b588 <__hexnan+0x100>
 800b57a:	4544      	cmp	r4, r8
 800b57c:	d9c1      	bls.n	800b502 <__hexnan+0x7a>
 800b57e:	2300      	movs	r3, #0
 800b580:	f844 3c04 	str.w	r3, [r4, #-4]
 800b584:	2501      	movs	r5, #1
 800b586:	3c04      	subs	r4, #4
 800b588:	6822      	ldr	r2, [r4, #0]
 800b58a:	f000 000f 	and.w	r0, r0, #15
 800b58e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b592:	6020      	str	r0, [r4, #0]
 800b594:	e7b5      	b.n	800b502 <__hexnan+0x7a>
 800b596:	2508      	movs	r5, #8
 800b598:	e7b3      	b.n	800b502 <__hexnan+0x7a>
 800b59a:	9b01      	ldr	r3, [sp, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d0dd      	beq.n	800b55c <__hexnan+0xd4>
 800b5a0:	f1c3 0320 	rsb	r3, r3, #32
 800b5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a8:	40da      	lsrs	r2, r3
 800b5aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b5b4:	e7d2      	b.n	800b55c <__hexnan+0xd4>
 800b5b6:	3f04      	subs	r7, #4
 800b5b8:	e7d0      	b.n	800b55c <__hexnan+0xd4>
 800b5ba:	2004      	movs	r0, #4
 800b5bc:	e7d5      	b.n	800b56a <__hexnan+0xe2>

0800b5be <__ascii_mbtowc>:
 800b5be:	b082      	sub	sp, #8
 800b5c0:	b901      	cbnz	r1, 800b5c4 <__ascii_mbtowc+0x6>
 800b5c2:	a901      	add	r1, sp, #4
 800b5c4:	b142      	cbz	r2, 800b5d8 <__ascii_mbtowc+0x1a>
 800b5c6:	b14b      	cbz	r3, 800b5dc <__ascii_mbtowc+0x1e>
 800b5c8:	7813      	ldrb	r3, [r2, #0]
 800b5ca:	600b      	str	r3, [r1, #0]
 800b5cc:	7812      	ldrb	r2, [r2, #0]
 800b5ce:	1e10      	subs	r0, r2, #0
 800b5d0:	bf18      	it	ne
 800b5d2:	2001      	movne	r0, #1
 800b5d4:	b002      	add	sp, #8
 800b5d6:	4770      	bx	lr
 800b5d8:	4610      	mov	r0, r2
 800b5da:	e7fb      	b.n	800b5d4 <__ascii_mbtowc+0x16>
 800b5dc:	f06f 0001 	mvn.w	r0, #1
 800b5e0:	e7f8      	b.n	800b5d4 <__ascii_mbtowc+0x16>

0800b5e2 <_realloc_r>:
 800b5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e6:	4680      	mov	r8, r0
 800b5e8:	4615      	mov	r5, r2
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	b921      	cbnz	r1, 800b5f8 <_realloc_r+0x16>
 800b5ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	f7fb bd0e 	b.w	8007014 <_malloc_r>
 800b5f8:	b92a      	cbnz	r2, 800b606 <_realloc_r+0x24>
 800b5fa:	f7fd fce5 	bl	8008fc8 <_free_r>
 800b5fe:	2400      	movs	r4, #0
 800b600:	4620      	mov	r0, r4
 800b602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b606:	f000 f840 	bl	800b68a <_malloc_usable_size_r>
 800b60a:	4285      	cmp	r5, r0
 800b60c:	4606      	mov	r6, r0
 800b60e:	d802      	bhi.n	800b616 <_realloc_r+0x34>
 800b610:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b614:	d8f4      	bhi.n	800b600 <_realloc_r+0x1e>
 800b616:	4629      	mov	r1, r5
 800b618:	4640      	mov	r0, r8
 800b61a:	f7fb fcfb 	bl	8007014 <_malloc_r>
 800b61e:	4607      	mov	r7, r0
 800b620:	2800      	cmp	r0, #0
 800b622:	d0ec      	beq.n	800b5fe <_realloc_r+0x1c>
 800b624:	42b5      	cmp	r5, r6
 800b626:	462a      	mov	r2, r5
 800b628:	4621      	mov	r1, r4
 800b62a:	bf28      	it	cs
 800b62c:	4632      	movcs	r2, r6
 800b62e:	f7ff fc43 	bl	800aeb8 <memcpy>
 800b632:	4621      	mov	r1, r4
 800b634:	4640      	mov	r0, r8
 800b636:	f7fd fcc7 	bl	8008fc8 <_free_r>
 800b63a:	463c      	mov	r4, r7
 800b63c:	e7e0      	b.n	800b600 <_realloc_r+0x1e>

0800b63e <__ascii_wctomb>:
 800b63e:	4603      	mov	r3, r0
 800b640:	4608      	mov	r0, r1
 800b642:	b141      	cbz	r1, 800b656 <__ascii_wctomb+0x18>
 800b644:	2aff      	cmp	r2, #255	@ 0xff
 800b646:	d904      	bls.n	800b652 <__ascii_wctomb+0x14>
 800b648:	228a      	movs	r2, #138	@ 0x8a
 800b64a:	601a      	str	r2, [r3, #0]
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	4770      	bx	lr
 800b652:	700a      	strb	r2, [r1, #0]
 800b654:	2001      	movs	r0, #1
 800b656:	4770      	bx	lr

0800b658 <fiprintf>:
 800b658:	b40e      	push	{r1, r2, r3}
 800b65a:	b503      	push	{r0, r1, lr}
 800b65c:	4601      	mov	r1, r0
 800b65e:	ab03      	add	r3, sp, #12
 800b660:	4805      	ldr	r0, [pc, #20]	@ (800b678 <fiprintf+0x20>)
 800b662:	f853 2b04 	ldr.w	r2, [r3], #4
 800b666:	6800      	ldr	r0, [r0, #0]
 800b668:	9301      	str	r3, [sp, #4]
 800b66a:	f7ff f9b1 	bl	800a9d0 <_vfiprintf_r>
 800b66e:	b002      	add	sp, #8
 800b670:	f85d eb04 	ldr.w	lr, [sp], #4
 800b674:	b003      	add	sp, #12
 800b676:	4770      	bx	lr
 800b678:	20000038 	.word	0x20000038

0800b67c <abort>:
 800b67c:	b508      	push	{r3, lr}
 800b67e:	2006      	movs	r0, #6
 800b680:	f000 f834 	bl	800b6ec <raise>
 800b684:	2001      	movs	r0, #1
 800b686:	f7f7 fd91 	bl	80031ac <_exit>

0800b68a <_malloc_usable_size_r>:
 800b68a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b68e:	1f18      	subs	r0, r3, #4
 800b690:	2b00      	cmp	r3, #0
 800b692:	bfbc      	itt	lt
 800b694:	580b      	ldrlt	r3, [r1, r0]
 800b696:	18c0      	addlt	r0, r0, r3
 800b698:	4770      	bx	lr

0800b69a <_raise_r>:
 800b69a:	291f      	cmp	r1, #31
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4605      	mov	r5, r0
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	d904      	bls.n	800b6ae <_raise_r+0x14>
 800b6a4:	2316      	movs	r3, #22
 800b6a6:	6003      	str	r3, [r0, #0]
 800b6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ac:	bd38      	pop	{r3, r4, r5, pc}
 800b6ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b6b0:	b112      	cbz	r2, 800b6b8 <_raise_r+0x1e>
 800b6b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6b6:	b94b      	cbnz	r3, 800b6cc <_raise_r+0x32>
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f000 f831 	bl	800b720 <_getpid_r>
 800b6be:	4622      	mov	r2, r4
 800b6c0:	4601      	mov	r1, r0
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6c8:	f000 b818 	b.w	800b6fc <_kill_r>
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d00a      	beq.n	800b6e6 <_raise_r+0x4c>
 800b6d0:	1c59      	adds	r1, r3, #1
 800b6d2:	d103      	bne.n	800b6dc <_raise_r+0x42>
 800b6d4:	2316      	movs	r3, #22
 800b6d6:	6003      	str	r3, [r0, #0]
 800b6d8:	2001      	movs	r0, #1
 800b6da:	e7e7      	b.n	800b6ac <_raise_r+0x12>
 800b6dc:	2100      	movs	r1, #0
 800b6de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	4798      	blx	r3
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	e7e0      	b.n	800b6ac <_raise_r+0x12>
	...

0800b6ec <raise>:
 800b6ec:	4b02      	ldr	r3, [pc, #8]	@ (800b6f8 <raise+0xc>)
 800b6ee:	4601      	mov	r1, r0
 800b6f0:	6818      	ldr	r0, [r3, #0]
 800b6f2:	f7ff bfd2 	b.w	800b69a <_raise_r>
 800b6f6:	bf00      	nop
 800b6f8:	20000038 	.word	0x20000038

0800b6fc <_kill_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4d07      	ldr	r5, [pc, #28]	@ (800b71c <_kill_r+0x20>)
 800b700:	2300      	movs	r3, #0
 800b702:	4604      	mov	r4, r0
 800b704:	4608      	mov	r0, r1
 800b706:	4611      	mov	r1, r2
 800b708:	602b      	str	r3, [r5, #0]
 800b70a:	f7f7 fd3f 	bl	800318c <_kill>
 800b70e:	1c43      	adds	r3, r0, #1
 800b710:	d102      	bne.n	800b718 <_kill_r+0x1c>
 800b712:	682b      	ldr	r3, [r5, #0]
 800b714:	b103      	cbz	r3, 800b718 <_kill_r+0x1c>
 800b716:	6023      	str	r3, [r4, #0]
 800b718:	bd38      	pop	{r3, r4, r5, pc}
 800b71a:	bf00      	nop
 800b71c:	200009c4 	.word	0x200009c4

0800b720 <_getpid_r>:
 800b720:	f7f7 bd2c 	b.w	800317c <_getpid>

0800b724 <_init>:
 800b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b726:	bf00      	nop
 800b728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b72a:	bc08      	pop	{r3}
 800b72c:	469e      	mov	lr, r3
 800b72e:	4770      	bx	lr

0800b730 <_fini>:
 800b730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b732:	bf00      	nop
 800b734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b736:	bc08      	pop	{r3}
 800b738:	469e      	mov	lr, r3
 800b73a:	4770      	bx	lr
